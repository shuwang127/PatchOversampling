TranslationUnitDecl 0x55755c25d6c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55755c25dc40 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55755c25d960 '__int128'
|-TypedefDecl 0x55755c25dcb0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55755c25d980 'unsigned __int128'
|-TypedefDecl 0x55755c25dfa8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55755c25ddb0 'struct __NSConstantString_tag'
|   `-Record 0x55755c25dd08 '__NSConstantString_tag'
|-TypedefDecl 0x55755c25e040 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55755c25e000 'char *'
|   `-BuiltinType 0x55755c25d760 'char'
|-TypedefDecl 0x55755c25e328 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55755c25e2d0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55755c25e140 'struct __va_list_tag'
|     `-Record 0x55755c25e098 '__va_list_tag'
|-RecordDecl 0x55755c2bfbe0 <crypto-bn-bn_ctx_after.c:36:9, line:41:1> line:36:16 invalid struct bignum_pool_item definition
| |-FullComment 0x55755c2d0850 <line:33:4, col:11>
| | `-ParagraphComment 0x55755c2d0820 <col:4, col:11>
| |   `-TextComment 0x55755c2d07f0 <col:4, col:11> Text="********"
| |-FieldDecl 0x55755c2bfd20 <line:38:5, <invalid sloc>> col:12 invalid vals 'int [16]'
| |-FieldDecl 0x55755c2bfe20 <line:40:5, col:30> col:30 referenced prev 'struct bignum_pool_item *'
| `-FieldDecl 0x55755c2bfe90 <col:5, col:37> col:37 referenced next 'struct bignum_pool_item *'
|-TypedefDecl 0x55755c2bfef8 <line:36:1, line:41:3> col:3 referenced BN_POOL_ITEM 'struct bignum_pool_item':'struct bignum_pool_item'
| `-ElaboratedType 0x55755c2bfd70 'struct bignum_pool_item' sugar
|   `-RecordType 0x55755c2bfc80 'struct bignum_pool_item'
|     `-Record 0x55755c2bfbe0 'bignum_pool_item'
|-RecordDecl 0x55755c2bff68 <line:43:9, line:48:1> line:43:16 struct bignum_pool definition
| |-FieldDecl 0x55755c2c0088 <line:45:5, col:19> col:19 referenced head 'BN_POOL_ITEM *'
| |-FieldDecl 0x55755c2c00e0 <col:5, col:26> col:26 referenced current 'BN_POOL_ITEM *'
| |-FieldDecl 0x55755c2c0138 <col:5, col:36> col:36 referenced tail 'BN_POOL_ITEM *'
| |-FieldDecl 0x55755c2c0198 <line:47:5, col:14> col:14 referenced used 'unsigned int'
| `-FieldDecl 0x55755c2c01f8 <col:5, col:20> col:20 referenced size 'unsigned int'
|-TypedefDecl 0x55755c2c0290 <line:43:1, line:48:3> col:3 referenced BN_POOL 'struct bignum_pool':'struct bignum_pool'
| `-ElaboratedType 0x55755c2c0240 'struct bignum_pool' sugar
|   `-RecordType 0x55755c2c0010 'struct bignum_pool'
|     `-Record 0x55755c2bff68 'bignum_pool'
|-FunctionDecl 0x55755c2c0490 <line:49:1, col:35> col:13 used BN_POOL_init 'void (BN_POOL *)' static
| `-ParmVarDecl 0x55755c2c0388 <col:26, col:34> col:35 'BN_POOL *'
|-FunctionDecl 0x55755c2c0628 <line:50:1, col:37> col:13 used BN_POOL_finish 'void (BN_POOL *)' static
| `-ParmVarDecl 0x55755c2c05a0 <col:28, col:36> col:37 'BN_POOL *'
|-FunctionDecl 0x55755c2c08b8 <line:51:1, col:42> col:16 invalid BN_POOL_get 'int *(BN_POOL *, int)' static
| |-ParmVarDecl 0x55755c2c06f8 <col:28, col:36> col:37 'BN_POOL *'
| `-ParmVarDecl 0x55755c2c0770 <col:39> col:42 'int'
|-FunctionDecl 0x55755c2c0b00 <line:52:1, col:52> col:13 used BN_POOL_release 'void (BN_POOL *, unsigned int)' static
| |-ParmVarDecl 0x55755c2c0978 <col:29, col:37> col:38 'BN_POOL *'
| `-ParmVarDecl 0x55755c2c09f0 <col:40, col:49> col:52 'unsigned int'
|-RecordDecl 0x55755c2c0c48 <line:59:9, line:64:1> line:59:16 struct bignum_ctx_stack definition
| |-FullComment 0x55755c2d09f0 <line:56:4, col:12>
| | `-ParagraphComment 0x55755c2d09c0 <col:4, col:12>
| |   `-TextComment 0x55755c2d0990 <col:4, col:12> Text="*********"
| |-FieldDecl 0x55755c2c0d50 <line:61:5, col:19> col:19 referenced indexes 'unsigned int *'
| |-FieldDecl 0x55755c2c0db0 <line:63:5, col:18> col:18 referenced depth 'unsigned int'
| `-FieldDecl 0x55755c2c0e10 <col:5, col:25> col:25 referenced size 'unsigned int'
|-TypedefDecl 0x55755c2c0eb0 <line:59:1, line:64:3> col:3 referenced BN_STACK 'struct bignum_ctx_stack':'struct bignum_ctx_stack'
| `-ElaboratedType 0x55755c2c0e60 'struct bignum_ctx_stack' sugar
|   `-RecordType 0x55755c2c0cf0 'struct bignum_ctx_stack'
|     `-Record 0x55755c2c0c48 'bignum_ctx_stack'
|-FunctionDecl 0x55755c2c10b0 <line:65:1, col:37> col:13 used BN_STACK_init 'void (BN_STACK *)' static
| `-ParmVarDecl 0x55755c2c0fa8 <col:27, col:36> col:37 'BN_STACK *'
|-FunctionDecl 0x55755c2c1208 <line:66:1, col:39> col:13 used BN_STACK_finish 'void (BN_STACK *)' static
| `-ParmVarDecl 0x55755c2c1180 <col:29, col:38> col:39 'BN_STACK *'
|-FunctionDecl 0x55755c2c1468 <line:67:1, col:50> col:12 used BN_STACK_push 'int (BN_STACK *, unsigned int)' static
| |-ParmVarDecl 0x55755c2c12d8 <col:26, col:35> col:36 'BN_STACK *'
| `-ParmVarDecl 0x55755c2c1350 <col:38, col:47> col:50 'unsigned int'
|-FunctionDecl 0x55755c2c1648 <line:68:1, col:44> col:21 used BN_STACK_pop 'unsigned int (BN_STACK *)' static
| `-ParmVarDecl 0x55755c2c1540 <col:34, col:43> col:44 'BN_STACK *'
|-RecordDecl 0x55755c2c1768 <line:75:1, line:88:1> line:75:8 struct bignum_ctx definition
| |-FullComment 0x55755c2d0b50 <line:72:4, col:10>
| | `-ParagraphComment 0x55755c2d0b20 <col:4, col:10>
| |   `-TextComment 0x55755c2d0af0 <col:4, col:10> Text="*******"
| |-FieldDecl 0x55755c2c1840 <line:77:5, col:13> col:13 pool 'BN_POOL':'struct bignum_pool'
| |-FieldDecl 0x55755c2c1898 <line:79:5, col:14> col:14 stack 'BN_STACK':'struct bignum_ctx_stack'
| |-FieldDecl 0x55755c2c18f8 <line:81:5, col:18> col:18 used 'unsigned int'
| |-FieldDecl 0x55755c2c1958 <line:83:5, col:9> col:9 err_stack 'int'
| |-FieldDecl 0x55755c2c19b8 <line:85:5, col:9> col:9 too_many 'int'
| `-FieldDecl 0x55755c2c1a18 <line:87:5, col:9> col:9 flags 'int'
|-FunctionDecl 0x55755c2c2c10 <line:134:1, line:146:1> line:134:9 invalid BN_CTX_new 'int *(void)'
| `-CompoundStmt 0x55755c2c2fe0 <line:135:1, line:146:1>
|   `-IfStmt 0x55755c2c2f58 <line:138:5, line:141:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55755c2c2f38 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55755c2c2f28 <line:138:55, line:141:5>
|     `-<<<NULL>>>
|-FunctionDecl 0x55755c2c3090 <line:148:1, line:155:1> line:148:9 invalid BN_CTX_secure_new 'int *(void)'
| `-CompoundStmt 0x55755c2c3148 <line:149:1, line:155:1>
|-FunctionDecl 0x55755c2c3230 <line:157:1, line:179:1> line:157:6 invalid BN_CTX_free 'void (int *)'
| |-ParmVarDecl 0x55755c2c3170 <col:18, col:26> col:26 invalid ctx 'int *'
| `-CompoundStmt 0x55755c2c34c8 <line:158:1, line:179:1>
|   `-IfStmt 0x55755c2c3328 <line:159:5, line:160:9>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55755c2c3308 <<invalid sloc>> '_Bool'
|     |-ReturnStmt 0x55755c2c32f0 <col:9>
|     `-<<<NULL>>>
|-FunctionDecl 0x55755c2c3580 <line:181:1, line:193:1> line:181:6 invalid BN_CTX_start 'void (int *)'
| |-ParmVarDecl 0x55755c2c34f8 <col:19, col:27> col:27 invalid ctx 'int *'
| `-CompoundStmt 0x55755c2c3780 <line:182:1, line:193:1>
|   |-NullStmt 0x55755c2c3640 <line:183:38>
|   |-IfStmt 0x55755c2c3738 <line:185:5, line:191:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55755c2c3718 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x55755c2c3708 <line:186:9>
|   | `-IfStmt 0x55755c2c36d0 <line:188:10, line:191:5>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-OpaqueValueExpr 0x55755c2c36b0 <<invalid sloc>> '_Bool'
|   |   |-CompoundStmt 0x55755c2c36a0 <line:188:54, line:191:5>
|   |   `-<<<NULL>>>
|   `-NullStmt 0x55755c2c3770 <line:192:21>
|-FunctionDecl 0x55755c2c3848 <line:195:1, line:210:1> line:195:6 invalid BN_CTX_end 'void (int *)'
| |-ParmVarDecl 0x55755c2c37c0 <col:17, col:25> col:25 invalid ctx 'int *'
| `-CompoundStmt 0x55755c2c3b38 <line:196:1, line:210:1>
|   |-NullStmt 0x55755c2c3908 <line:197:36>
|   |-IfStmt 0x55755c2c3af0 <line:198:5, line:208:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55755c2c3ad0 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x55755c2c3ac0 <line:199:9>
|   | `-CompoundStmt 0x55755c2c3aa8 <line:200:10, line:208:5>
|   |   `-DeclStmt 0x55755c2c39b8 <line:201:9, col:52>
|   |     `-VarDecl 0x55755c2c3930 <col:9, col:22> col:22 used fp 'unsigned int'
|   `-NullStmt 0x55755c2c3b28 <line:209:21>
|-FunctionDecl 0x55755c2c4d08 <line:212:1, line:235:1> line:212:9 invalid BN_CTX_get 'int *(int *)'
| |-ParmVarDecl 0x55755c2c3b78 <col:20, col:28> col:28 invalid ctx 'int *'
| `-CompoundStmt 0x55755c2c5008 <line:213:1, line:235:1>
|   |-NullStmt 0x55755c2c4dc8 <line:216:36>
|   |-IfStmt 0x55755c2c4e50 <line:219:5, line:227:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55755c2c4e30 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55755c2c4e20 <line:219:62, line:227:5>
|   | `-<<<NULL>>>
|   `-NullStmt 0x55755c2c4fa0 <line:233:25>
|-FunctionDecl 0x55755c2c50e0 prev 0x55755c2c10b0 <line:241:1, line:245:1> line:241:13 used BN_STACK_init 'void (BN_STACK *)' static
| |-ParmVarDecl 0x55755c2c5040 <col:27, col:37> col:37 used st 'BN_STACK *'
| |-CompoundStmt 0x55755c2c5378 <line:242:1, line:245:1>
| | `-BinaryOperator 0x55755c2c5350 <line:244:5, col:28> 'unsigned int' '='
| |   |-MemberExpr 0x55755c2c5240 <col:5, col:9> 'unsigned int' lvalue ->depth 0x55755c2c0db0
| |   | `-ImplicitCastExpr 0x55755c2c5228 <col:5> 'BN_STACK *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55755c2c5200 <col:5> 'BN_STACK *' lvalue ParmVar 0x55755c2c5040 'st' 'BN_STACK *'
| |   `-BinaryOperator 0x55755c2c5328 <col:17, col:28> 'unsigned int' '='
| |     |-MemberExpr 0x55755c2c52b8 <col:17, col:21> 'unsigned int' lvalue ->size 0x55755c2c0e10
| |     | `-ImplicitCastExpr 0x55755c2c52a0 <col:17> 'BN_STACK *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x55755c2c5278 <col:17> 'BN_STACK *' lvalue ParmVar 0x55755c2c5040 'st' 'BN_STACK *'
| |     `-ImplicitCastExpr 0x55755c2c5310 <col:28> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x55755c2c52f0 <col:28> 'int' 0
| `-FullComment 0x55755c2d0c80 <line:239:4, col:12>
|   `-ParagraphComment 0x55755c2d0c50 <col:4, col:12>
|     `-TextComment 0x55755c2d0c20 <col:4, col:12> Text="*********"
|-FunctionDecl 0x55755c2c5440 prev 0x55755c2c1208 <line:247:1, line:251:1> line:247:13 used BN_STACK_finish 'void (BN_STACK *)' static
| |-ParmVarDecl 0x55755c2c53a0 <col:29, col:39> col:39 used st 'BN_STACK *'
| `-CompoundStmt 0x55755c2c5690 <line:248:1, line:251:1>
|   `-CallExpr 0x55755c2c55d0 <line:249:5, col:29> 'int'
|     |-ImplicitCastExpr 0x55755c2c55b8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55755c2c54e8 <col:5> 'int ()' Function 0x55755c2c33d8 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x55755c2c5600 <col:18, col:22> 'unsigned int *' <LValueToRValue>
|       `-MemberExpr 0x55755c2c5550 <col:18, col:22> 'unsigned int *' lvalue ->indexes 0x55755c2c0d50
|         `-ImplicitCastExpr 0x55755c2c5538 <col:18> 'BN_STACK *' <LValueToRValue>
|           `-DeclRefExpr 0x55755c2c5510 <col:18> 'BN_STACK *' lvalue ParmVar 0x55755c2c53a0 'st' 'BN_STACK *'
|-FunctionDecl 0x55755c2c57f8 prev 0x55755c2c1468 <line:254:1, line:271:1> line:254:12 used BN_STACK_push 'int (BN_STACK *, unsigned int)' static
| |-ParmVarDecl 0x55755c2c56b8 <col:26, col:36> col:36 used st 'BN_STACK *'
| |-ParmVarDecl 0x55755c2c5730 <col:40, col:53> col:53 used idx 'unsigned int'
| `-CompoundStmt 0x55755c2c7108 <line:255:1, line:271:1>
|   |-IfStmt 0x55755c2c6ea0 <line:256:5, line:268:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55755c2c59c8 <line:256:9, col:26> 'int' '=='
|   | | |-ImplicitCastExpr 0x55755c2c5998 <col:9, col:13> 'unsigned int' <LValueToRValue>
|   | | | `-MemberExpr 0x55755c2c58e8 <col:9, col:13> 'unsigned int' lvalue ->depth 0x55755c2c0db0
|   | | |   `-ImplicitCastExpr 0x55755c2c58d0 <col:9> 'BN_STACK *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55755c2c58a8 <col:9> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | | `-ImplicitCastExpr 0x55755c2c59b0 <col:22, col:26> 'unsigned int' <LValueToRValue>
|   | |   `-MemberExpr 0x55755c2c5960 <col:22, col:26> 'unsigned int' lvalue ->size 0x55755c2c0e10
|   | |     `-ImplicitCastExpr 0x55755c2c5948 <col:22> 'BN_STACK *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55755c2c5920 <col:22> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | |-CompoundStmt 0x55755c2c6e58 <col:32, line:268:5>
|   | | |-DeclStmt 0x55755c2c60f0 <line:258:9, line:259:64>
|   | | | `-VarDecl 0x55755c2c5a08 <line:258:9, line:29:33> line:258:22 used newsize 'unsigned int' cinit
|   | | |   `-ConditionalOperator 0x55755c2c60c0 <line:259:13, line:29:33> 'unsigned int'
|   | | |     |-ImplicitCastExpr 0x55755c2c5c70 <line:259:13, col:17> 'unsigned int' <LValueToRValue>
|   | | |     | `-MemberExpr 0x55755c2c5aa8 <col:13, col:17> 'unsigned int' lvalue ->size 0x55755c2c0e10
|   | | |     |   `-ImplicitCastExpr 0x55755c2c5a90 <col:13> 'BN_STACK *' <LValueToRValue>
|   | | |     |     `-DeclRefExpr 0x55755c2c5a68 <col:13> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | | |     |-ParenExpr 0x55755c2c5c30 <col:24, col:41> 'unsigned int'
|   | | |     | `-BinaryOperator 0x55755c2c5c08 <col:25, col:40> 'unsigned int' '/'
|   | | |     |   |-BinaryOperator 0x55755c2c5ba8 <col:25, col:36> 'unsigned int' '*'
|   | | |     |   | |-ImplicitCastExpr 0x55755c2c5b78 <col:25, col:29> 'unsigned int' <LValueToRValue>
|   | | |     |   | | `-MemberExpr 0x55755c2c5b20 <col:25, col:29> 'unsigned int' lvalue ->size 0x55755c2c0e10
|   | | |     |   | |   `-ImplicitCastExpr 0x55755c2c5b08 <col:25> 'BN_STACK *' <LValueToRValue>
|   | | |     |   | |     `-DeclRefExpr 0x55755c2c5ae0 <col:25> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | | |     |   | `-ImplicitCastExpr 0x55755c2c5b90 <col:36> 'unsigned int' <IntegralCast>
|   | | |     |   |   `-IntegerLiteral 0x55755c2c5b58 <col:36> 'int' 3
|   | | |     |   `-ImplicitCastExpr 0x55755c2c5bf0 <col:40> 'unsigned int' <IntegralCast>
|   | | |     |     `-IntegerLiteral 0x55755c2c5bd0 <col:40> 'int' 2
|   | | |     `-ImplicitCastExpr 0x55755c2c5c88 <line:29:33> 'unsigned int' <IntegralCast>
|   | | |       `-IntegerLiteral 0x55755c2c5c50 <col:33> 'int' 32
|   | | |-DeclStmt 0x55755c2c6430 <line:260:9, col:77>
|   | | | `-VarDecl 0x55755c2c6120 <col:9, col:76> col:23 used newitems 'unsigned int *' cinit
|   | | |   `-ImplicitCastExpr 0x55755c2c6418 <col:34, col:76> 'unsigned int *' <IntegralToPointer>
|   | | |     `-CallExpr 0x55755c2c63e8 <col:34, col:76> 'int'
|   | | |       |-ImplicitCastExpr 0x55755c2c63d0 <col:34> 'int (*)()' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x55755c2c6270 <col:34> 'int ()' Function 0x55755c2c61a8 'OPENSSL_malloc' 'int ()'
|   | | |       `-BinaryOperator 0x55755c2c63a8 <col:49, col:69> 'unsigned long' '*'
|   | | |         |-UnaryExprOrTypeTraitExpr 0x55755c2c6318 <col:49, col:65> 'unsigned long' sizeof
|   | | |         | `-ParenExpr 0x55755c2c62f8 <col:55, col:65> 'unsigned int' lvalue
|   | | |         |   `-UnaryOperator 0x55755c2c62d8 <col:56, col:57> 'unsigned int' lvalue prefix '*'
|   | | |         |     `-ImplicitCastExpr 0x55755c2c62c0 <col:57> 'unsigned int *' <LValueToRValue>
|   | | |         |       `-DeclRefExpr 0x55755c2c6298 <col:57> 'unsigned int *' lvalue Var 0x55755c2c6120 'newitems' 'unsigned int *'
|   | | |         `-ImplicitCastExpr 0x55755c2c6390 <col:69> 'unsigned long' <IntegralCast>
|   | | |           `-ImplicitCastExpr 0x55755c2c6378 <col:69> 'unsigned int' <LValueToRValue>
|   | | |             `-DeclRefExpr 0x55755c2c6338 <col:69> 'unsigned int' lvalue Var 0x55755c2c5a08 'newsize' 'unsigned int'
|   | | |-IfStmt 0x55755c2c64e0 <line:261:9, line:262:20>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-OpaqueValueExpr 0x55755c2c64c0 <<invalid sloc>> '_Bool'
|   | | | |-ReturnStmt 0x55755c2c64a8 <col:13, col:20>
|   | | | | `-IntegerLiteral 0x55755c2c6488 <col:20> 'int' 0
|   | | | `-<<<NULL>>>
|   | | |-IfStmt 0x55755c2c6b60 <line:263:9, line:264:72>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-ImplicitCastExpr 0x55755c2c6590 <line:263:13, col:17> 'unsigned int' <LValueToRValue>
|   | | | | `-MemberExpr 0x55755c2c6558 <col:13, col:17> 'unsigned int' lvalue ->depth 0x55755c2c0db0
|   | | | |   `-ImplicitCastExpr 0x55755c2c6540 <col:13> 'BN_STACK *' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x55755c2c6518 <col:13> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | | | |-CallExpr 0x55755c2c6ac0 <line:264:13, col:72> 'void *'
|   | | | | |-ImplicitCastExpr 0x55755c2c6aa8 <col:13> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | | | | | `-DeclRefExpr 0x55755c2c6800 <col:13> 'void *(void *, const void *, unsigned long)' Function 0x55755c2c6628 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | | | | |-ImplicitCastExpr 0x55755c2c6b18 <col:20> 'void *' <BitCast>
|   | | | | | `-ImplicitCastExpr 0x55755c2c6b00 <col:20> 'unsigned int *' <LValueToRValue>
|   | | | | |   `-DeclRefExpr 0x55755c2c6840 <col:20> 'unsigned int *' lvalue Var 0x55755c2c6120 'newitems' 'unsigned int *'
|   | | | | |-ImplicitCastExpr 0x55755c2c6b48 <col:30, col:34> 'const void *' <BitCast>
|   | | | | | `-ImplicitCastExpr 0x55755c2c6b30 <col:30, col:34> 'unsigned int *' <LValueToRValue>
|   | | | | |   `-MemberExpr 0x55755c2c68a8 <col:30, col:34> 'unsigned int *' lvalue ->indexes 0x55755c2c0d50
|   | | | | |     `-ImplicitCastExpr 0x55755c2c6890 <col:30> 'BN_STACK *' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x55755c2c6868 <col:30> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | | | | `-BinaryOperator 0x55755c2c6a28 <col:43, col:67> 'unsigned long' '*'
|   | | | |   |-UnaryExprOrTypeTraitExpr 0x55755c2c6960 <col:43, col:59> 'unsigned long' sizeof
|   | | | |   | `-ParenExpr 0x55755c2c6940 <col:49, col:59> 'unsigned int' lvalue
|   | | | |   |   `-UnaryOperator 0x55755c2c6920 <col:50, col:51> 'unsigned int' lvalue prefix '*'
|   | | | |   |     `-ImplicitCastExpr 0x55755c2c6908 <col:51> 'unsigned int *' <LValueToRValue>
|   | | | |   |       `-DeclRefExpr 0x55755c2c68e0 <col:51> 'unsigned int *' lvalue Var 0x55755c2c6120 'newitems' 'unsigned int *'
|   | | | |   `-ImplicitCastExpr 0x55755c2c6a10 <col:63, col:67> 'unsigned long' <IntegralCast>
|   | | | |     `-ImplicitCastExpr 0x55755c2c69f8 <col:63, col:67> 'unsigned int' <LValueToRValue>
|   | | | |       `-MemberExpr 0x55755c2c69c0 <col:63, col:67> 'unsigned int' lvalue ->depth 0x55755c2c0db0
|   | | | |         `-ImplicitCastExpr 0x55755c2c69a8 <col:63> 'BN_STACK *' <LValueToRValue>
|   | | | |           `-DeclRefExpr 0x55755c2c6980 <col:63> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | | | `-<<<NULL>>>
|   | | |-CallExpr 0x55755c2c6c50 <line:265:9, col:33> 'int'
|   | | | |-ImplicitCastExpr 0x55755c2c6c38 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55755c2c6b98 <col:9> 'int ()' Function 0x55755c2c33d8 'OPENSSL_free' 'int ()'
|   | | | `-ImplicitCastExpr 0x55755c2c6c80 <col:22, col:26> 'unsigned int *' <LValueToRValue>
|   | | |   `-MemberExpr 0x55755c2c6c00 <col:22, col:26> 'unsigned int *' lvalue ->indexes 0x55755c2c0d50
|   | | |     `-ImplicitCastExpr 0x55755c2c6be8 <col:22> 'BN_STACK *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x55755c2c6bc0 <col:22> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | | |-BinaryOperator 0x55755c2c6d50 <line:266:9, col:23> 'unsigned int *' '='
|   | | | |-MemberExpr 0x55755c2c6cd8 <col:9, col:13> 'unsigned int *' lvalue ->indexes 0x55755c2c0d50
|   | | | | `-ImplicitCastExpr 0x55755c2c6cc0 <col:9> 'BN_STACK *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x55755c2c6c98 <col:9> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | | | `-ImplicitCastExpr 0x55755c2c6d38 <col:23> 'unsigned int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55755c2c6d10 <col:23> 'unsigned int *' lvalue Var 0x55755c2c6120 'newitems' 'unsigned int *'
|   | | `-BinaryOperator 0x55755c2c6e30 <line:267:9, col:20> 'unsigned int' '='
|   | |   |-MemberExpr 0x55755c2c6db8 <col:9, col:13> 'unsigned int' lvalue ->size 0x55755c2c0e10
|   | |   | `-ImplicitCastExpr 0x55755c2c6da0 <col:9> 'BN_STACK *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55755c2c6d78 <col:9> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | |   `-ImplicitCastExpr 0x55755c2c6e18 <col:20> 'unsigned int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55755c2c6df0 <col:20> 'unsigned int' lvalue Var 0x55755c2c5a08 'newsize' 'unsigned int'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x55755c2c7088 <line:269:5, col:34> 'unsigned int' '='
|   | |-ArraySubscriptExpr 0x55755c2c7020 <col:5, col:30> 'unsigned int' lvalue
|   | | |-ImplicitCastExpr 0x55755c2c7008 <col:5, col:9> 'unsigned int *' <LValueToRValue>
|   | | | `-MemberExpr 0x55755c2c6f18 <col:5, col:9> 'unsigned int *' lvalue ->indexes 0x55755c2c0d50
|   | | |   `-ImplicitCastExpr 0x55755c2c6f00 <col:5> 'BN_STACK *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55755c2c6ed8 <col:5> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | | `-UnaryOperator 0x55755c2c6fe8 <col:17, col:28> 'unsigned int' postfix '++'
|   | |   `-ParenExpr 0x55755c2c6fc8 <col:17, col:27> 'unsigned int' lvalue
|   | |     `-MemberExpr 0x55755c2c6f90 <col:18, col:22> 'unsigned int' lvalue ->depth 0x55755c2c0db0
|   | |       `-ImplicitCastExpr 0x55755c2c6f78 <col:18> 'BN_STACK *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x55755c2c6f50 <col:18> 'BN_STACK *' lvalue ParmVar 0x55755c2c56b8 'st' 'BN_STACK *'
|   | `-ImplicitCastExpr 0x55755c2c7070 <col:34> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55755c2c7048 <col:34> 'unsigned int' lvalue ParmVar 0x55755c2c5730 'idx' 'unsigned int'
|   `-ReturnStmt 0x55755c2c70f0 <line:270:5, col:12>
|     `-IntegerLiteral 0x55755c2c70d0 <col:12> 'int' 1
|-FunctionDecl 0x55755c2c6628 <line:264:13> col:13 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x55755c2c66c8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x55755c2c6728 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x55755c2c6788 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x55755c2c71e8 prev 0x55755c2c1648 <line:273:1, line:276:1> line:273:21 used BN_STACK_pop 'unsigned int (BN_STACK *)' static
| |-ParmVarDecl 0x55755c2c7140 <col:34, col:44> col:44 used st 'BN_STACK *'
| `-CompoundStmt 0x55755c2c7488 <line:274:1, line:276:1>
|   `-ReturnStmt 0x55755c2c7418 <line:275:5, col:37>
|     `-ImplicitCastExpr 0x55755c2c7400 <col:12, col:37> 'unsigned int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55755c2c73d8 <col:12, col:37> 'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55755c2c73c0 <col:12, col:16> 'unsigned int *' <LValueToRValue>
|         | `-MemberExpr 0x55755c2c72d0 <col:12, col:16> 'unsigned int *' lvalue ->indexes 0x55755c2c0d50
|         |   `-ImplicitCastExpr 0x55755c2c72b8 <col:12> 'BN_STACK *' <LValueToRValue>
|         |     `-DeclRefExpr 0x55755c2c7290 <col:12> 'BN_STACK *' lvalue ParmVar 0x55755c2c7140 'st' 'BN_STACK *'
|         `-UnaryOperator 0x55755c2c73a0 <col:24, col:36> 'unsigned int' prefix '--'
|           `-ParenExpr 0x55755c2c7380 <col:26, col:36> 'unsigned int' lvalue
|             `-MemberExpr 0x55755c2c7348 <col:27, col:31> 'unsigned int' lvalue ->depth 0x55755c2c0db0
|               `-ImplicitCastExpr 0x55755c2c7330 <col:27> 'BN_STACK *' <LValueToRValue>
|                 `-DeclRefExpr 0x55755c2c7308 <col:27> 'BN_STACK *' lvalue ParmVar 0x55755c2c7140 'st' 'BN_STACK *'
|-FunctionDecl 0x55755c2c7550 prev 0x55755c2c0490 <line:282:1, line:286:1> line:282:13 used BN_POOL_init 'void (BN_POOL *)' static
| |-ParmVarDecl 0x55755c2c74b0 <col:26, col:35> col:35 used p 'BN_POOL *'
| |-CompoundStmt 0x55755c2c78d8 <line:283:1, line:286:1>
| | `-BinaryOperator 0x55755c2c78b0 <line:285:5, col:25> 'unsigned int' '='
| |   |-MemberExpr 0x55755c2c77a0 <col:5, col:8> 'unsigned int' lvalue ->used 0x55755c2c0198
| |   | `-ImplicitCastExpr 0x55755c2c7788 <col:5> 'BN_POOL *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55755c2c7760 <col:5> 'BN_POOL *' lvalue ParmVar 0x55755c2c74b0 'p' 'BN_POOL *'
| |   `-BinaryOperator 0x55755c2c7888 <col:15, col:25> 'unsigned int' '='
| |     |-MemberExpr 0x55755c2c7818 <col:15, col:18> 'unsigned int' lvalue ->size 0x55755c2c01f8
| |     | `-ImplicitCastExpr 0x55755c2c7800 <col:15> 'BN_POOL *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x55755c2c77d8 <col:15> 'BN_POOL *' lvalue ParmVar 0x55755c2c74b0 'p' 'BN_POOL *'
| |     `-ImplicitCastExpr 0x55755c2c7870 <col:25> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x55755c2c7850 <col:25> 'int' 0
| `-FullComment 0x55755c2d0d90 <line:280:4, col:11>
|   `-ParagraphComment 0x55755c2d0d60 <col:4, col:11>
|     `-TextComment 0x55755c2d0d30 <col:4, col:11> Text="********"
|-FunctionDecl 0x55755c2c79a0 prev 0x55755c2c0628 <line:288:1, line:301:1> line:288:13 used BN_POOL_finish 'void (BN_POOL *)' static
| |-ParmVarDecl 0x55755c2c7900 <col:28, col:37> col:37 used p 'BN_POOL *'
| `-CompoundStmt 0x55755c2c8f00 <line:289:1, line:301:1>
|   |-DeclStmt 0x55755c2c7ac0 <line:290:5, col:22>
|   | `-VarDecl 0x55755c2c7a60 <col:5, col:18> col:18 used loop 'unsigned int'
|   `-WhileStmt 0x55755c2c8ee0 <line:293:5, line:300:5>
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x55755c2c7b50 <line:293:12, col:15> 'BN_POOL_ITEM *' <LValueToRValue>
|     | `-MemberExpr 0x55755c2c7b18 <col:12, col:15> 'BN_POOL_ITEM *' lvalue ->head 0x55755c2c0088
|     |   `-ImplicitCastExpr 0x55755c2c7b00 <col:12> 'BN_POOL *' <LValueToRValue>
|     |     `-DeclRefExpr 0x55755c2c7ad8 <col:12> 'BN_POOL *' lvalue ParmVar 0x55755c2c7900 'p' 'BN_POOL *'
|     `-CompoundStmt 0x55755c2c8eb8 <col:21, line:300:5>
|       |-BinaryOperator 0x55755c2c7fb0 <line:297:9, col:31> 'BN_POOL_ITEM *' '='
|       | |-MemberExpr 0x55755c2c7e98 <col:9, col:12> 'BN_POOL_ITEM *' lvalue ->current 0x55755c2c00e0
|       | | `-ImplicitCastExpr 0x55755c2c7e80 <col:9> 'BN_POOL *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55755c2c7e58 <col:9> 'BN_POOL *' lvalue ParmVar 0x55755c2c7900 'p' 'BN_POOL *'
|       | `-ImplicitCastExpr 0x55755c2c7f98 <col:22, col:31> 'struct bignum_pool_item *' <LValueToRValue>
|       |   `-MemberExpr 0x55755c2c7f60 <col:22, col:31> 'struct bignum_pool_item *' lvalue ->next 0x55755c2bfe90
|       |     `-ImplicitCastExpr 0x55755c2c7f48 <col:22, col:25> 'BN_POOL_ITEM *' <LValueToRValue>
|       |       `-MemberExpr 0x55755c2c7f10 <col:22, col:25> 'BN_POOL_ITEM *' lvalue ->head 0x55755c2c0088
|       |         `-ImplicitCastExpr 0x55755c2c7ef8 <col:22> 'BN_POOL *' <LValueToRValue>
|       |           `-DeclRefExpr 0x55755c2c7ed0 <col:22> 'BN_POOL *' lvalue ParmVar 0x55755c2c7900 'p' 'BN_POOL *'
|       |-CallExpr 0x55755c2c8090 <line:298:9, col:29> 'int'
|       | |-ImplicitCastExpr 0x55755c2c8078 <col:9> 'int (*)()' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x55755c2c7fd8 <col:9> 'int ()' Function 0x55755c2c33d8 'OPENSSL_free' 'int ()'
|       | `-ImplicitCastExpr 0x55755c2c8d70 <col:22, col:25> 'BN_POOL_ITEM *' <LValueToRValue>
|       |   `-MemberExpr 0x55755c2c8040 <col:22, col:25> 'BN_POOL_ITEM *' lvalue ->head 0x55755c2c0088
|       |     `-ImplicitCastExpr 0x55755c2c8028 <col:22> 'BN_POOL *' <LValueToRValue>
|       |       `-DeclRefExpr 0x55755c2c8000 <col:22> 'BN_POOL *' lvalue ParmVar 0x55755c2c7900 'p' 'BN_POOL *'
|       `-BinaryOperator 0x55755c2c8e90 <line:299:9, col:22> 'BN_POOL_ITEM *' '='
|         |-MemberExpr 0x55755c2c8dc8 <col:9, col:12> 'BN_POOL_ITEM *' lvalue ->head 0x55755c2c0088
|         | `-ImplicitCastExpr 0x55755c2c8db0 <col:9> 'BN_POOL *' <LValueToRValue>
|         |   `-DeclRefExpr 0x55755c2c8d88 <col:9> 'BN_POOL *' lvalue ParmVar 0x55755c2c7900 'p' 'BN_POOL *'
|         `-ImplicitCastExpr 0x55755c2c8e78 <col:19, col:22> 'BN_POOL_ITEM *' <LValueToRValue>
|           `-MemberExpr 0x55755c2c8e40 <col:19, col:22> 'BN_POOL_ITEM *' lvalue ->current 0x55755c2c00e0
|             `-ImplicitCastExpr 0x55755c2c8e28 <col:19> 'BN_POOL *' <LValueToRValue>
|               `-DeclRefExpr 0x55755c2c8e00 <col:19> 'BN_POOL *' lvalue ParmVar 0x55755c2c7900 'p' 'BN_POOL *'
|-FunctionDecl 0x55755c2c9070 <line:304:1, line:340:1> line:304:16 invalid BN_POOL_get 'int *(BN_POOL *, int)' static
| |-ParmVarDecl 0x55755c2c8f30 <col:28, col:37> col:37 used p 'BN_POOL *'
| |-ParmVarDecl 0x55755c2c8fa8 <col:40, col:44> col:44 used flag 'int'
| `-CompoundStmt 0x55755c2cfa68 <line:305:1, line:340:1>
|   |-DeclStmt 0x55755c2c91b0 <line:307:5, col:22>
|   | `-VarDecl 0x55755c2c9150 <col:5, col:18> col:18 used loop 'unsigned int'
|   |-IfStmt 0x55755c2cf328 <line:310:5, line:333:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55755c2c92e8 <line:310:9, col:23> 'int' '=='
|   | | |-ImplicitCastExpr 0x55755c2c92b8 <col:9, col:12> 'unsigned int' <LValueToRValue>
|   | | | `-MemberExpr 0x55755c2c9208 <col:9, col:12> 'unsigned int' lvalue ->used 0x55755c2c0198
|   | | |   `-ImplicitCastExpr 0x55755c2c91f0 <col:9> 'BN_POOL *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55755c2c91c8 <col:9> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | | `-ImplicitCastExpr 0x55755c2c92d0 <col:20, col:23> 'unsigned int' <LValueToRValue>
|   | |   `-MemberExpr 0x55755c2c9280 <col:20, col:23> 'unsigned int' lvalue ->size 0x55755c2c01f8
|   | |     `-ImplicitCastExpr 0x55755c2c9268 <col:20> 'BN_POOL *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55755c2c9240 <col:20> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | |-CompoundStmt 0x55755c2cf2e8 <col:29, line:333:5>
|   | | |-DeclStmt 0x55755c2c94a8 <line:311:9, col:59>
|   | | | `-VarDecl 0x55755c2c9320 <col:9, col:58> col:23 used item 'BN_POOL_ITEM *' cinit
|   | | |   `-ImplicitCastExpr 0x55755c2c9490 <col:30, col:58> 'BN_POOL_ITEM *' <IntegralToPointer>
|   | | |     `-CallExpr 0x55755c2c9460 <col:30, col:58> 'int'
|   | | |       |-ImplicitCastExpr 0x55755c2c9448 <col:30> 'int (*)()' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x55755c2c9380 <col:30> 'int ()' Function 0x55755c2c61a8 'OPENSSL_malloc' 'int ()'
|   | | |       `-UnaryExprOrTypeTraitExpr 0x55755c2c9428 <col:45, col:57> 'unsigned long' sizeof
|   | | |         `-ParenExpr 0x55755c2c9408 <col:51, col:57> 'BN_POOL_ITEM':'struct bignum_pool_item' lvalue
|   | | |           `-UnaryOperator 0x55755c2c93e8 <col:52, col:53> 'BN_POOL_ITEM':'struct bignum_pool_item' lvalue prefix '*'
|   | | |             `-ImplicitCastExpr 0x55755c2c93d0 <col:53> 'BN_POOL_ITEM *' <LValueToRValue>
|   | | |               `-DeclRefExpr 0x55755c2c93a8 <col:53> 'BN_POOL_ITEM *' lvalue Var 0x55755c2c9320 'item' 'BN_POOL_ITEM *'
|   | | |-ForStmt 0x55755c2c9910 <line:314:9, line:318:9>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x55755c2c9660 <line:314:41, line:27:33> 'int' '<'
|   | | | | |-UnaryOperator 0x55755c2c9608 <line:314:41, col:45> 'unsigned int' postfix '++'
|   | | | | | `-DeclRefExpr 0x55755c2c95e0 <col:41> 'unsigned int' lvalue Var 0x55755c2c9150 'loop' 'unsigned int'
|   | | | | `-ImplicitCastExpr 0x55755c2c9648 <line:27:33> 'unsigned int' <IntegralCast>
|   | | | |   `-IntegerLiteral 0x55755c2c9628 <col:33> 'int' 16
|   | | | |-<<<NULL>>>
|   | | | `-CompoundStmt 0x55755c2c9900 <line:314:74, line:318:9>
|   | | |-BinaryOperator 0x55755c2c9a50 <line:319:9, col:25> 'struct bignum_pool_item *' '='
|   | | | |-MemberExpr 0x55755c2c9988 <col:9, col:15> 'struct bignum_pool_item *' lvalue ->prev 0x55755c2bfe20
|   | | | | `-ImplicitCastExpr 0x55755c2c9970 <col:9> 'BN_POOL_ITEM *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x55755c2c9948 <col:9> 'BN_POOL_ITEM *' lvalue Var 0x55755c2c9320 'item' 'BN_POOL_ITEM *'
|   | | | `-ImplicitCastExpr 0x55755c2c9a38 <col:22, col:25> 'BN_POOL_ITEM *' <LValueToRValue>
|   | | |   `-MemberExpr 0x55755c2c9a00 <col:22, col:25> 'BN_POOL_ITEM *' lvalue ->tail 0x55755c2c0138
|   | | |     `-ImplicitCastExpr 0x55755c2c99e8 <col:22> 'BN_POOL *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x55755c2c99c0 <col:22> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | | |-IfStmt 0x55755c2cf0f0 <line:322:9, line:328:9>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-OpaqueValueExpr 0x55755c2cf0d0 <<invalid sloc>> '_Bool'
|   | | | |-BinaryOperator 0x55755c2ced90 <line:323:13, col:46> 'BN_POOL_ITEM *' '='
|   | | | | |-MemberExpr 0x55755c2c9ba8 <col:13, col:16> 'BN_POOL_ITEM *' lvalue ->head 0x55755c2c0088
|   | | | | | `-ImplicitCastExpr 0x55755c2c9b90 <col:13> 'BN_POOL *' <LValueToRValue>
|   | | | | |   `-DeclRefExpr 0x55755c2c9b68 <col:13> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | | | | `-BinaryOperator 0x55755c2c9d38 <col:23, col:46> 'BN_POOL_ITEM *' '='
|   | | | |   |-MemberExpr 0x55755c2c9c20 <col:23, col:26> 'BN_POOL_ITEM *' lvalue ->current 0x55755c2c00e0
|   | | | |   | `-ImplicitCastExpr 0x55755c2c9c08 <col:23> 'BN_POOL *' <LValueToRValue>
|   | | | |   |   `-DeclRefExpr 0x55755c2c9be0 <col:23> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | | | |   `-BinaryOperator 0x55755c2c9d10 <col:36, col:46> 'BN_POOL_ITEM *' '='
|   | | | |     |-MemberExpr 0x55755c2c9c98 <col:36, col:39> 'BN_POOL_ITEM *' lvalue ->tail 0x55755c2c0138
|   | | | |     | `-ImplicitCastExpr 0x55755c2c9c80 <col:36> 'BN_POOL *' <LValueToRValue>
|   | | | |     |   `-DeclRefExpr 0x55755c2c9c58 <col:36> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | | | |     `-ImplicitCastExpr 0x55755c2c9cf8 <col:46> 'BN_POOL_ITEM *' <LValueToRValue>
|   | | | |       `-DeclRefExpr 0x55755c2c9cd0 <col:46> 'BN_POOL_ITEM *' lvalue Var 0x55755c2c9320 'item' 'BN_POOL_ITEM *'
|   | | | `-CompoundStmt 0x55755c2cf0a8 <line:324:14, line:328:9>
|   | | |   |-BinaryOperator 0x55755c2ceec0 <line:325:13, col:29> 'struct bignum_pool_item *' '='
|   | | |   | |-MemberExpr 0x55755c2cee48 <col:13, col:22> 'struct bignum_pool_item *' lvalue ->next 0x55755c2bfe90
|   | | |   | | `-ImplicitCastExpr 0x55755c2cee30 <col:13, col:16> 'BN_POOL_ITEM *' <LValueToRValue>
|   | | |   | |   `-MemberExpr 0x55755c2cedf8 <col:13, col:16> 'BN_POOL_ITEM *' lvalue ->tail 0x55755c2c0138
|   | | |   | |     `-ImplicitCastExpr 0x55755c2cede0 <col:13> 'BN_POOL *' <LValueToRValue>
|   | | |   | |       `-DeclRefExpr 0x55755c2cedb8 <col:13> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | | |   | `-ImplicitCastExpr 0x55755c2ceea8 <col:29> 'BN_POOL_ITEM *' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x55755c2cee80 <col:29> 'BN_POOL_ITEM *' lvalue Var 0x55755c2c9320 'item' 'BN_POOL_ITEM *'
|   | | |   |-BinaryOperator 0x55755c2cefa0 <line:326:13, col:23> 'BN_POOL_ITEM *' '='
|   | | |   | |-MemberExpr 0x55755c2cef28 <col:13, col:16> 'BN_POOL_ITEM *' lvalue ->tail 0x55755c2c0138
|   | | |   | | `-ImplicitCastExpr 0x55755c2cef10 <col:13> 'BN_POOL *' <LValueToRValue>
|   | | |   | |   `-DeclRefExpr 0x55755c2ceee8 <col:13> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | | |   | `-ImplicitCastExpr 0x55755c2cef88 <col:23> 'BN_POOL_ITEM *' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x55755c2cef60 <col:23> 'BN_POOL_ITEM *' lvalue Var 0x55755c2c9320 'item' 'BN_POOL_ITEM *'
|   | | |   `-BinaryOperator 0x55755c2cf080 <line:327:13, col:26> 'BN_POOL_ITEM *' '='
|   | | |     |-MemberExpr 0x55755c2cf008 <col:13, col:16> 'BN_POOL_ITEM *' lvalue ->current 0x55755c2c00e0
|   | | |     | `-ImplicitCastExpr 0x55755c2ceff0 <col:13> 'BN_POOL *' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x55755c2cefc8 <col:13> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | | |     `-ImplicitCastExpr 0x55755c2cf068 <col:26> 'BN_POOL_ITEM *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x55755c2cf040 <col:26> 'BN_POOL_ITEM *' lvalue Var 0x55755c2c9320 'item' 'BN_POOL_ITEM *'
|   | | |-CompoundAssignOperator 0x55755c2cf1d8 <line:329:9, line:27:33> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | | | |-MemberExpr 0x55755c2cf168 <line:329:9, col:12> 'unsigned int' lvalue ->size 0x55755c2c01f8
|   | | | | `-ImplicitCastExpr 0x55755c2cf150 <col:9> 'BN_POOL *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x55755c2cf128 <col:9> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | | | `-ImplicitCastExpr 0x55755c2cf1c0 <line:27:33> 'unsigned int' <IntegralCast>
|   | | |   `-IntegerLiteral 0x55755c2cf1a0 <col:33> 'int' 16
|   | | `-UnaryOperator 0x55755c2cf288 <line:330:9, col:16> 'unsigned int' postfix '++'
|   | |   `-MemberExpr 0x55755c2cf250 <col:9, col:12> 'unsigned int' lvalue ->used 0x55755c2c0198
|   | |     `-ImplicitCastExpr 0x55755c2cf238 <col:9> 'BN_POOL *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55755c2cf210 <col:9> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|   | `-<<<NULL>>>
|   `-IfStmt 0x55755c2cf868 <line:335:5, line:338:34>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-UnaryOperator 0x55755c2cf3f0 <line:335:9, col:13> 'int' prefix '!'
|     | `-ImplicitCastExpr 0x55755c2cf3d8 <col:10, col:13> 'unsigned int' <LValueToRValue>
|     |   `-MemberExpr 0x55755c2cf3a0 <col:10, col:13> 'unsigned int' lvalue ->used 0x55755c2c0198
|     |     `-ImplicitCastExpr 0x55755c2cf388 <col:10> 'BN_POOL *' <LValueToRValue>
|     |       `-DeclRefExpr 0x55755c2cf360 <col:10> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|     |-BinaryOperator 0x55755c2cf518 <line:336:9, col:25> 'BN_POOL_ITEM *' '='
|     | |-MemberExpr 0x55755c2cf450 <col:9, col:12> 'BN_POOL_ITEM *' lvalue ->current 0x55755c2c00e0
|     | | `-ImplicitCastExpr 0x55755c2cf438 <col:9> 'BN_POOL *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55755c2cf410 <col:9> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|     | `-ImplicitCastExpr 0x55755c2cf500 <col:22, col:25> 'BN_POOL_ITEM *' <LValueToRValue>
|     |   `-MemberExpr 0x55755c2cf4c8 <col:22, col:25> 'BN_POOL_ITEM *' lvalue ->head 0x55755c2c0088
|     |     `-ImplicitCastExpr 0x55755c2cf4b0 <col:22> 'BN_POOL *' <LValueToRValue>
|     |       `-DeclRefExpr 0x55755c2cf488 <col:22> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|     `-IfStmt 0x55755c2cf830 <line:337:10, line:338:34>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x55755c2cf688 <line:337:14, col:46> 'int' '=='
|       | |-ParenExpr 0x55755c2cf630 <col:14, col:41> 'unsigned int'
|       | | `-BinaryOperator 0x55755c2cf608 <col:15, line:27:33> 'unsigned int' '%'
|       | |   |-ImplicitCastExpr 0x55755c2cf5d8 <line:337:15, col:18> 'unsigned int' <LValueToRValue>
|       | |   | `-MemberExpr 0x55755c2cf580 <col:15, col:18> 'unsigned int' lvalue ->used 0x55755c2c0198
|       | |   |   `-ImplicitCastExpr 0x55755c2cf568 <col:15> 'BN_POOL *' <LValueToRValue>
|       | |   |     `-DeclRefExpr 0x55755c2cf540 <col:15> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|       | |   `-ImplicitCastExpr 0x55755c2cf5f0 <line:27:33> 'unsigned int' <IntegralCast>
|       | |     `-IntegerLiteral 0x55755c2cf5b8 <col:33> 'int' 16
|       | `-ImplicitCastExpr 0x55755c2cf670 <line:337:46> 'unsigned int' <IntegralCast>
|       |   `-IntegerLiteral 0x55755c2cf650 <col:46> 'int' 0
|       |-BinaryOperator 0x55755c2cf808 <line:338:9, col:34> 'BN_POOL_ITEM *' '='
|       | |-MemberExpr 0x55755c2cf6f0 <col:9, col:12> 'BN_POOL_ITEM *' lvalue ->current 0x55755c2c00e0
|       | | `-ImplicitCastExpr 0x55755c2cf6d8 <col:9> 'BN_POOL *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x55755c2cf6b0 <col:9> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|       | `-ImplicitCastExpr 0x55755c2cf7f0 <col:22, col:34> 'struct bignum_pool_item *' <LValueToRValue>
|       |   `-MemberExpr 0x55755c2cf7b8 <col:22, col:34> 'struct bignum_pool_item *' lvalue ->next 0x55755c2bfe90
|       |     `-ImplicitCastExpr 0x55755c2cf7a0 <col:22, col:25> 'BN_POOL_ITEM *' <LValueToRValue>
|       |       `-MemberExpr 0x55755c2cf768 <col:22, col:25> 'BN_POOL_ITEM *' lvalue ->current 0x55755c2c00e0
|       |         `-ImplicitCastExpr 0x55755c2cf750 <col:22> 'BN_POOL *' <LValueToRValue>
|       |           `-DeclRefExpr 0x55755c2cf728 <col:22> 'BN_POOL *' lvalue ParmVar 0x55755c2c8f30 'p' 'BN_POOL *'
|       `-<<<NULL>>>
`-FunctionDecl 0x55755c2cfbd8 prev 0x55755c2c0b00 <line:342:1, line:355:1> line:342:13 used BN_POOL_release 'void (BN_POOL *, unsigned int)' static
  |-ParmVarDecl 0x55755c2cfaa0 <col:29, col:38> col:38 used p 'BN_POOL *'
  |-ParmVarDecl 0x55755c2cfb18 <col:41, col:54> col:54 used num 'unsigned int'
  `-CompoundStmt 0x55755c2d0708 <line:343:1, line:355:1>
    |-DeclStmt 0x55755c2d0008 <line:344:5, col:59>
    | `-VarDecl 0x55755c2cfca0 <col:5, line:27:33> line:344:18 used offset 'unsigned int' cinit
    |   `-BinaryOperator 0x55755c2cffe0 <col:27, line:27:33> 'unsigned int' '%'
    |     |-ParenExpr 0x55755c2cff88 <line:344:27, col:39> 'unsigned int'
    |     | `-BinaryOperator 0x55755c2cff60 <col:28, col:38> 'unsigned int' '-'
    |     |   |-ImplicitCastExpr 0x55755c2cff30 <col:28, col:31> 'unsigned int' <LValueToRValue>
    |     |   | `-MemberExpr 0x55755c2cfd40 <col:28, col:31> 'unsigned int' lvalue ->used 0x55755c2c0198
    |     |   |   `-ImplicitCastExpr 0x55755c2cfd28 <col:28> 'BN_POOL *' <LValueToRValue>
    |     |   |     `-DeclRefExpr 0x55755c2cfd00 <col:28> 'BN_POOL *' lvalue ParmVar 0x55755c2cfaa0 'p' 'BN_POOL *'
    |     |   `-ImplicitCastExpr 0x55755c2cff48 <col:38> 'unsigned int' <IntegralCast>
    |     |     `-IntegerLiteral 0x55755c2cff10 <col:38> 'int' 1
    |     `-ImplicitCastExpr 0x55755c2cffc8 <line:27:33> 'unsigned int' <IntegralCast>
    |       `-IntegerLiteral 0x55755c2cffa8 <col:33> 'int' 16
    |-CompoundAssignOperator 0x55755c2d00d8 <line:346:5, col:16> 'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-MemberExpr 0x55755c2d0060 <col:5, col:8> 'unsigned int' lvalue ->used 0x55755c2c0198
    | | `-ImplicitCastExpr 0x55755c2d0048 <col:5> 'BN_POOL *' <LValueToRValue>
    | |   `-DeclRefExpr 0x55755c2d0020 <col:5> 'BN_POOL *' lvalue ParmVar 0x55755c2cfaa0 'p' 'BN_POOL *'
    | `-ImplicitCastExpr 0x55755c2d00c0 <col:16> 'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x55755c2d0098 <col:16> 'unsigned int' lvalue ParmVar 0x55755c2cfb18 'num' 'unsigned int'
    `-WhileStmt 0x55755c2d06e8 <line:347:5, line:354:5>
      |-<<<NULL>>>
      |-UnaryOperator 0x55755c2d0138 <line:347:12, col:15> 'unsigned int' postfix '--'
      | `-DeclRefExpr 0x55755c2d0110 <col:12> 'unsigned int' lvalue ParmVar 0x55755c2cfb18 'num' 'unsigned int'
      `-CompoundStmt 0x55755c2d06d0 <col:19, line:354:5>
        `-IfStmt 0x55755c2d0698 <line:349:9, line:353:19>
          |-<<<NULL>>>
          |-<<<NULL>>>
          |-BinaryOperator 0x55755c2d03b8 <line:349:13, col:23> 'int' '=='
          | |-ImplicitCastExpr 0x55755c2d0388 <col:13> 'unsigned int' <LValueToRValue>
          | | `-DeclRefExpr 0x55755c2d0340 <col:13> 'unsigned int' lvalue Var 0x55755c2cfca0 'offset' 'unsigned int'
          | `-ImplicitCastExpr 0x55755c2d03a0 <col:23> 'unsigned int' <IntegralCast>
          |   `-IntegerLiteral 0x55755c2d0368 <col:23> 'int' 0
          |-CompoundStmt 0x55755c2d0630 <col:26, line:352:9>
          | |-BinaryOperator 0x55755c2d0488 <line:350:13, col:41> 'unsigned int' '='
          | | |-DeclRefExpr 0x55755c2d03e0 <col:13> 'unsigned int' lvalue Var 0x55755c2cfca0 'offset' 'unsigned int'
          | | `-ImplicitCastExpr 0x55755c2d0470 <line:27:33, line:350:41> 'unsigned int' <IntegralCast>
          | |   `-BinaryOperator 0x55755c2d0448 <line:27:33, line:350:41> 'int' '-'
          | |     |-IntegerLiteral 0x55755c2d0408 <line:27:33> 'int' 16
          | |     `-IntegerLiteral 0x55755c2d0428 <line:350:41> 'int' 1
          | `-BinaryOperator 0x55755c2d0608 <line:351:13, col:38> 'BN_POOL_ITEM *' '='
          |   |-MemberExpr 0x55755c2d04f0 <col:13, col:16> 'BN_POOL_ITEM *' lvalue ->current 0x55755c2c00e0
          |   | `-ImplicitCastExpr 0x55755c2d04d8 <col:13> 'BN_POOL *' <LValueToRValue>
          |   |   `-DeclRefExpr 0x55755c2d04b0 <col:13> 'BN_POOL *' lvalue ParmVar 0x55755c2cfaa0 'p' 'BN_POOL *'
          |   `-ImplicitCastExpr 0x55755c2d05f0 <col:26, col:38> 'struct bignum_pool_item *' <LValueToRValue>
          |     `-MemberExpr 0x55755c2d05b8 <col:26, col:38> 'struct bignum_pool_item *' lvalue ->prev 0x55755c2bfe20
          |       `-ImplicitCastExpr 0x55755c2d05a0 <col:26, col:29> 'BN_POOL_ITEM *' <LValueToRValue>
          |         `-MemberExpr 0x55755c2d0568 <col:26, col:29> 'BN_POOL_ITEM *' lvalue ->current 0x55755c2c00e0
          |           `-ImplicitCastExpr 0x55755c2d0550 <col:26> 'BN_POOL *' <LValueToRValue>
          |             `-DeclRefExpr 0x55755c2d0528 <col:26> 'BN_POOL *' lvalue ParmVar 0x55755c2cfaa0 'p' 'BN_POOL *'
          `-UnaryOperator 0x55755c2d0678 <line:353:13, col:19> 'unsigned int' postfix '--'
            `-DeclRefExpr 0x55755c2d0650 <col:13> 'unsigned int' lvalue Var 0x55755c2cfca0 'offset' 'unsigned int'

