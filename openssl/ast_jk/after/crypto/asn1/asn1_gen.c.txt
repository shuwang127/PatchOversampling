TranslationUnitDecl 0x21902986c98 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x21902987530 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x21902987230 '__int128'
|-TypedefDecl 0x219029875a0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x21902987250 'unsigned __int128'
|-TypedefDecl 0x219029878d8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x21902987690 'struct __NSConstantString_tag'
|   `-Record 0x219029875f8 '__NSConstantString_tag'
|-TypedefDecl 0x21902987948 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x21902986e70 'unsigned long long'
|-TypedefDecl 0x219029879e0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x219029879a0 'char *'
|   `-BuiltinType 0x21902986d30 'char'
|-TypedefDecl 0x21902987a50 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x219029879a0 'char *'
|   `-BuiltinType 0x21902986d30 'char'
|-RecordDecl 0x21902987aa8 <.//openssl//file_jk/after\crypto\asn1\asn1_gen.c:41:1, line:45:1> line:41:8 struct tag_name_st definition
| |-FieldDecl 0x21902987b78 <line:42:5, col:17> col:17 referenced strnam 'const char *'
| |-FieldDecl 0x21902987be8 <line:43:5, col:9> col:9 referenced len 'int'
| `-FieldDecl 0x219029ed4e0 <line:44:5, col:9> col:9 referenced tag 'int'
|-RecordDecl 0x219029ed538 <line:47:9, line:53:1> line:47:9 struct definition
| |-FieldDecl 0x219029ed608 <line:48:5, col:9> col:9 referenced exp_tag 'int'
| |-FieldDecl 0x219029ed678 <line:49:5, col:9> col:9 referenced exp_class 'int'
| |-FieldDecl 0x219029ed6e8 <line:50:5, col:9> col:9 referenced exp_constructed 'int'
| |-FieldDecl 0x219029ed758 <line:51:5, col:9> col:9 referenced exp_pad 'int'
| `-FieldDecl 0x219029ed7c8 <line:52:5, col:10> col:10 referenced exp_len 'long'
|-TypedefDecl 0x219029ed878 <line:47:1, line:53:3> col:3 referenced tag_exp_type 'struct tag_exp_type':'tag_exp_type'
| `-ElaboratedType 0x219029ed820 'struct tag_exp_type' sugar
|   `-RecordType 0x219029ed5d0 'tag_exp_type'
|     `-Record 0x219029ed538 ''
|-RecordDecl 0x219029ed8e8 <line:55:9, line:63:1> line:55:9 struct definition
| |-FieldDecl 0x219029ed9b8 <line:56:5, col:9> col:9 referenced imp_tag 'int'
| |-FieldDecl 0x219029eda28 <line:57:5, col:9> col:9 referenced imp_class 'int'
| |-FieldDecl 0x219029eda98 <line:58:5, col:9> col:9 referenced utype 'int'
| |-FieldDecl 0x219029edb08 <line:59:5, col:9> col:9 referenced format 'int'
| |-FieldDecl 0x219029edb78 <line:60:5, col:17> col:17 referenced str 'const char *'
| |-FieldDecl 0x219029edd38 <line:61:5, col:44> col:18 referenced exp_list 'tag_exp_type [20]'
| `-FieldDecl 0x219029edda8 <line:62:5, col:9> col:9 referenced exp_count 'int'
|-TypedefDecl 0x219029ede58 <line:55:1, line:63:3> col:3 referenced tag_exp_arg 'struct tag_exp_arg':'tag_exp_arg'
| `-ElaboratedType 0x219029ede00 'struct tag_exp_arg' sugar
|   `-RecordType 0x219029ed980 'tag_exp_arg'
|     `-Record 0x219029ed8e8 ''
|-FunctionDecl 0x219029ee190 <line:65:1, line:66:40> line:65:19 invalid generate_v3 'int *(const char *, int *, int, int *)' static
| |-ParmVarDecl 0x219029edee0 <col:31, col:43> col:43 str 'const char *'
| |-ParmVarDecl 0x219029edf90 <col:48, col:60> col:60 invalid cnf 'int *'
| |-ParmVarDecl 0x219029ee010 <col:65, col:69> col:69 depth 'int'
| `-ParmVarDecl 0x219029ee090 <line:66:31, col:36> col:36 perr 'int *'
|-FunctionDecl 0x219029ee4f0 <line:67:1, col:61> col:12 used bitstr_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x219029ee268 <col:22, col:34> col:34 elem 'const char *'
| |-ParmVarDecl 0x219029ee2e8 <col:40, col:44> col:44 len 'int'
| `-ParmVarDecl 0x219029ee368 <col:49, col:55> col:55 bitstr 'void *'
|-FunctionDecl 0x219029ee810 <line:68:1, col:59> col:12 used asn1_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x219029ee620 <col:20, col:32> col:32 elem 'const char *'
| |-ParmVarDecl 0x219029ee6a0 <col:38, col:42> col:42 len 'int'
| `-ParmVarDecl 0x219029ee720 <col:47, col:53> col:53 bitstr 'void *'
|-FunctionDecl 0x219029eedf0 <line:69:1, line:70:67> line:69:12 used append_exp 'int (tag_exp_arg *, int, int, int, int, int)' static
| |-ParmVarDecl 0x219029ee968 <col:23, col:36> col:36 arg 'tag_exp_arg *'
| |-ParmVarDecl 0x219029ee9e8 <col:41, col:45> col:45 exp_tag 'int'
| |-ParmVarDecl 0x219029eea68 <col:54, col:58> col:58 exp_class 'int'
| |-ParmVarDecl 0x219029eeae8 <line:70:23, col:27> col:27 exp_constructed 'int'
| |-ParmVarDecl 0x219029eeb68 <col:44, col:48> col:48 exp_pad 'int'
| `-ParmVarDecl 0x219029eebe8 <col:57, col:61> col:61 imp_ok 'int'
|-FunctionDecl 0x219029ef1d0 <line:71:1, line:72:37> line:71:12 used parse_tagging 'int (const char *, int, int *, int *)' static
| |-ParmVarDecl 0x219029eeef0 <col:26, col:38> col:38 vstart 'const char *'
| |-ParmVarDecl 0x219029eef70 <col:46, col:50> col:50 vlen 'int'
| |-ParmVarDecl 0x219029eeff0 <col:56, col:61> col:61 ptag 'int *'
| `-ParmVarDecl 0x219029ef070 <line:72:26, col:31> col:31 pclass 'int *'
|-FunctionDecl 0x219029ef610 <line:73:1, line:74:50> line:73:19 invalid asn1_multi 'int *(int, const char *, int *, int, int *)' static
| |-ParmVarDecl 0x219029ef2c0 <col:30, col:34> col:34 utype 'int'
| |-ParmVarDecl 0x219029ef340 <col:41, col:53> col:53 section 'const char *'
| |-ParmVarDecl 0x219029ef3c0 <col:62, col:74> col:74 invalid cnf 'int *'
| |-ParmVarDecl 0x219029ef440 <line:74:30, col:34> col:34 depth 'int'
| `-ParmVarDecl 0x219029ef500 <col:41, col:46> col:46 perr 'int *'
|-FunctionDecl 0x219029ef920 <line:75:1, col:71> col:19 invalid asn1_str2type 'int *(const char *, int, int)' static
| |-ParmVarDecl 0x219029ef6f0 <col:33, col:45> col:45 str 'const char *'
| |-ParmVarDecl 0x219029ef770 <col:50, col:54> col:54 format 'int'
| `-ParmVarDecl 0x219029ef7f0 <col:62, col:66> col:66 utype 'int'
|-FunctionDecl 0x219029efb80 <line:76:1, col:52> col:12 used asn1_str2tag 'int (const char *, int)' static
| |-ParmVarDecl 0x219029ef9f0 <col:25, col:37> col:37 tagstr 'const char *'
| `-ParmVarDecl 0x219029efa70 <col:45, col:49> col:49 len 'int'
|-FunctionDecl 0x219029efdc0 <line:78:1, line:87:1> line:78:12 invalid ASN1_generate_nconf 'int *(const char *, int *)'
| |-ParmVarDecl 0x219029efc60 <col:32, col:44> col:44 used str 'const char *'
| |-ParmVarDecl 0x219029efce0 <col:49, col:55> col:55 invalid nconf 'int *'
| `-CompoundStmt 0x219029f0150 <line:79:1, line:87:1>
|-FunctionDecl 0x219029f0298 <line:89:1, line:96:1> line:89:12 invalid ASN1_generate_v3 'int *(const char *, int *)'
| |-ParmVarDecl 0x219029f0178 <col:29, col:41> col:41 used str 'const char *'
| |-ParmVarDecl 0x219029f01f8 <col:46, col:58> col:58 invalid cnf 'int *'
| `-CompoundStmt 0x219029f0658 <line:90:1, line:96:1>
|   `-DeclStmt 0x219029f0408 <line:91:5, col:16>
|     `-VarDecl 0x219029f0378 <col:5, col:15> col:9 used err 'int' cinit
|       `-IntegerLiteral 0x219029f03e0 <col:15> 'int' 0
|-FunctionDecl 0x219029f08b8 <line:98:1, line:238:1> line:98:19 invalid generate_v3 'int *(const char *, int *, int, int *)' static
| |-ParmVarDecl 0x219029f0688 <col:31, col:43> col:43 used str 'const char *'
| |-ParmVarDecl 0x219029f0708 <col:48, col:60> col:60 invalid cnf 'int *'
| |-ParmVarDecl 0x219029f0788 <col:65, col:69> col:69 used depth 'int'
| |-ParmVarDecl 0x219029f0808 <line:99:31, col:36> col:36 used perr 'int *'
| `-CompoundStmt 0x219029fcda0 <line:100:1, line:238:1>
|   |-DeclStmt 0x219029f0a08 <line:102:5, col:26>
|   | `-VarDecl 0x219029f09a0 <col:5, col:17> col:17 used asn1_tags 'tag_exp_arg':'tag_exp_arg'
|   |-DeclStmt 0x219029f0af0 <line:103:5, col:23>
|   | `-VarDecl 0x219029f0a88 <col:5, col:19> col:19 used etmp 'tag_exp_type *'
|   |-DeclStmt 0x219029f0c20 <line:105:5, col:15>
|   | |-VarDecl 0x219029f0b20 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x219029f0ba0 <col:5, col:12> col:12 used len 'int'
|   |-DeclStmt 0x219029f0d80 <line:107:5, col:52>
|   | |-VarDecl 0x219029f0c80 <col:5, col:20> col:20 used orig_der 'unsigned char *'
|   | `-VarDecl 0x219029f0d00 <col:5, col:38> col:38 used new_der 'unsigned char *'
|   |-DeclStmt 0x219029f0e48 <line:108:5, col:35>
|   | `-VarDecl 0x219029f0de0 <col:5, col:26> col:26 used cpy_start 'const unsigned char *'
|   |-DeclStmt 0x219029f0ee0 <line:109:5, col:21>
|   | `-VarDecl 0x219029f0e78 <col:5, col:20> col:20 used p 'unsigned char *'
|   |-DeclStmt 0x219029f0f78 <line:110:5, col:28>
|   | `-VarDecl 0x219029f0f10 <col:5, col:26> col:26 used cp 'const unsigned char *'
|   |-DeclStmt 0x219029f1010 <line:111:5, col:16>
|   | `-VarDecl 0x219029f0fa8 <col:5, col:9> col:9 used cpy_len 'int'
|   |-DeclStmt 0x219029f10e8 <line:112:5, col:21>
|   | `-VarDecl 0x219029f1040 <col:5, col:20> col:10 used hdr_len 'long' cinit
|   |   `-ImplicitCastExpr 0x219029f10d0 <col:20> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x219029f10a8 <col:20> 'int' 0
|   |-DeclStmt 0x219029f12c8 <line:113:5, col:48>
|   | |-VarDecl 0x219029f1118 <col:5, col:27> col:9 used hdr_constructed 'int' cinit
|   | | `-IntegerLiteral 0x219029f1180 <col:27> 'int' 0
|   | |-VarDecl 0x219029f11c0 <col:5, col:30> col:30 used hdr_tag 'int'
|   | `-VarDecl 0x219029f1240 <col:5, col:39> col:39 used hdr_class 'int'
|   |-DeclStmt 0x219029f1360 <line:114:5, col:10>
|   | `-VarDecl 0x219029f12f8 <col:5, col:9> col:9 used r 'int'
|   |-BinaryOperator 0x219029f1420 <line:116:5, col:26> 'int' '='
|   | |-MemberExpr 0x219029f13b0 <col:5, col:15> 'int' lvalue .imp_tag 0x219029ed9b8
|   | | `-DeclRefExpr 0x219029f1378 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-UnaryOperator 0x219029f1408 <col:25, col:26> 'int' prefix '-'
|   |   `-IntegerLiteral 0x219029f13e0 <col:26> 'int' 1
|   |-BinaryOperator 0x219029fd4e0 <line:117:5, col:28> 'int' '='
|   | |-MemberExpr 0x219029f14e0 <col:5, col:15> 'int' lvalue .imp_class 0x219029eda28
|   | | `-DeclRefExpr 0x219029f14c0 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-UnaryOperator 0x219029fd4c8 <col:27, col:28> 'int' prefix '-'
|   |   `-IntegerLiteral 0x219029fd4a0 <col:28> 'int' 1
|   |-BinaryOperator 0x219029fd578 <line:118:5, line:33:33> 'int' '='
|   | |-MemberExpr 0x219029fd520 <line:118:5, col:15> 'int' lvalue .format 0x219029edb08
|   | | `-DeclRefExpr 0x219029fd500 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-IntegerLiteral 0x219029fd550 <line:33:33> 'int' 1
|   |-BinaryOperator 0x219029fd610 <line:119:5, col:27> 'int' '='
|   | |-MemberExpr 0x219029fd5b8 <col:5, col:15> 'int' lvalue .exp_count 0x219029edda8
|   | | `-DeclRefExpr 0x219029fd598 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-IntegerLiteral 0x219029fd5e8 <col:27> 'int' 0
|   |-IfStmt 0x219029fd9b0 <line:120:5, line:123:5>
|   | |-BinaryOperator 0x219029fd918 <line:120:9, col:62> 'int' '!='
|   | | |-CallExpr 0x219029fd850 <col:9, col:57> 'int'
|   | | | |-ImplicitCastExpr 0x219029fd838 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x219029fd720 <col:9> 'int ()' Function 0x219029fd658 'CONF_parse_list' 'int ()'
|   | | | |-ImplicitCastExpr 0x219029fd898 <col:25> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x219029fd740 <col:25> 'const char *' lvalue ParmVar 0x219029f0688 'str' 'const char *'
|   | | | |-CharacterLiteral 0x219029fd778 <col:30> 'int' 44
|   | | | |-IntegerLiteral 0x219029fd790 <col:35> 'int' 1
|   | | | |-ImplicitCastExpr 0x219029fd8d8 <col:38> 'int (*)(const char *, int, void *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x219029fd7b8 <col:38> 'int (const char *, int, void *)' Function 0x219029ee810 'asn1_cb' 'int (const char *, int, void *)'
|   | | | `-UnaryOperator 0x219029fd7f8 <col:47, col:48> 'tag_exp_arg *' prefix '&' cannot overflow
|   | | |   `-DeclRefExpr 0x219029fd7d8 <col:48> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | | `-IntegerLiteral 0x219029fd8f0 <col:62> 'int' 0
|   | `-CompoundStmt 0x219029fd9a0 <col:65, line:123:5>
|   |-IfStmt 0x219029fde18 <line:125:5, line:137:9> has_else
|   | |-OpaqueValueExpr 0x219029fde00 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x219029fdce8 <line:126:45, line:136:5>
|   | | |-IfStmt 0x219029fdae0 <line:127:9, line:130:9>
|   | | | |-OpaqueValueExpr 0x219029fdac8 <<invalid sloc>> '_Bool'
|   | | | `-CompoundStmt 0x219029fdab8 <line:127:19, line:130:9>
|   | | `-IfStmt 0x219029fdbf0 <line:131:9, line:134:9>
|   | |   |-BinaryOperator 0x219029fdb70 <line:131:13, line:28:33> 'int' '>='
|   | |   | |-ImplicitCastExpr 0x219029fdb58 <line:131:13> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x219029fdaf8 <col:13> 'int' lvalue ParmVar 0x219029f0788 'depth' 'int'
|   | |   | `-IntegerLiteral 0x219029fdb30 <line:28:33> 'int' 50
|   | |   `-CompoundStmt 0x219029fdbe0 <line:131:46, line:134:9>
|   | `-NullStmt 0x219029fddf8 <line:137:9>
|   |-BinaryOperator 0x219029fe378 <line:151:5, col:17> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x219029fe2f0 <col:5> 'const unsigned char *' lvalue Var 0x219029f0de0 'cpy_start' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x219029fe360 <col:17> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x219029fe348 <col:17> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x219029fe328 <col:17> 'unsigned char *' lvalue Var 0x219029f0c80 'orig_der' 'unsigned char *'
|   |-IfStmt 0x21902a01f48 <line:154:5, line:180:15> has_else
|   | |-BinaryOperator 0x219029fe440 <line:154:9, col:31> 'int' '!='
|   | | |-ImplicitCastExpr 0x219029fe428 <col:9, col:19> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x219029fe3b8 <col:9, col:19> 'int' lvalue .imp_tag 0x219029ed9b8
|   | | |   `-DeclRefExpr 0x219029fe398 <col:9> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | | `-UnaryOperator 0x219029fe410 <col:30, col:31> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x219029fe3e8 <col:31> 'int' 1
|   | |-CompoundStmt 0x21902a01e98 <col:34, line:179:5>
|   | | |-BinaryOperator 0x21902a01808 <line:157:9, line:158:36> 'int' '='
|   | | | |-DeclRefExpr 0x219029fe460 <line:157:9> 'int' lvalue Var 0x219029f12f8 'r' 'int'
|   | | | `-CallExpr 0x21902a017a8 <col:13, line:158:36> 'int'
|   | | |   |-ImplicitCastExpr 0x21902a01790 <line:157:13> 'int (*)()' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x21902a015d0 <col:13> 'int ()' Function 0x21902a01508 'ASN1_get_object' 'int ()'
|   | | |   |-UnaryOperator 0x21902a01638 <col:29, col:30> 'const unsigned char **' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x21902a015f0 <col:30> 'const unsigned char *' lvalue Var 0x219029f0de0 'cpy_start' 'const unsigned char *'
|   | | |   |-UnaryOperator 0x21902a016b8 <col:41, col:42> 'long *' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x21902a01650 <col:42> 'long' lvalue Var 0x219029f1040 'hdr_len' 'long'
|   | | |   |-UnaryOperator 0x21902a01708 <col:51, col:52> 'int *' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x21902a016d0 <col:52> 'int' lvalue Var 0x219029f11c0 'hdr_tag' 'int'
|   | | |   |-UnaryOperator 0x21902a01758 <col:61, col:62> 'int *' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x21902a01720 <col:62> 'int' lvalue Var 0x219029f1240 'hdr_class' 'int'
|   | | |   `-ImplicitCastExpr 0x21902a017f0 <line:158:29> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x21902a01770 <col:29> 'int' lvalue Var 0x219029f0fa8 'cpy_len' 'int'
|   | | |-IfStmt 0x21902a01910 <line:159:9, line:160:18>
|   | | | |-BinaryOperator 0x21902a01888 <line:159:13, col:17> 'int' '&'
|   | | | | |-ImplicitCastExpr 0x21902a01870 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x21902a01828 <col:13> 'int' lvalue Var 0x219029f12f8 'r' 'int'
|   | | | | `-IntegerLiteral 0x21902a01848 <col:17> 'int' 128
|   | | | `-GotoStmt 0x21902a018f8 <line:160:13, col:18> 'err' 0x21902a018a8
|   | | |-CompoundAssignOperator 0x21902a019d8 <line:162:9, col:32> 'int' '-=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | | | |-DeclRefExpr 0x21902a01928 <col:9> 'int' lvalue Var 0x219029f0fa8 'cpy_len' 'int'
|   | | | `-BinaryOperator 0x21902a019b8 <col:20, col:32> 'long long' '-'
|   | | |   |-ImplicitCastExpr 0x21902a01988 <col:20> 'const unsigned char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x21902a01948 <col:20> 'const unsigned char *' lvalue Var 0x219029f0de0 'cpy_start' 'const unsigned char *'
|   | | |   `-ImplicitCastExpr 0x21902a019a0 <col:32> 'unsigned char *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x21902a01968 <col:32> 'unsigned char *' lvalue Var 0x219029f0c80 'orig_der' 'unsigned char *'
|   | | |-IfStmt 0x21902a01bf0 <line:167:9, line:173:13> has_else
|   | | | |-BinaryOperator 0x21902a01a68 <line:167:13, col:17> 'int' '&'
|   | | | | |-ImplicitCastExpr 0x21902a01a50 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x21902a01a08 <col:13> 'int' lvalue Var 0x219029f12f8 'r' 'int'
|   | | | | `-IntegerLiteral 0x21902a01a28 <col:17> 'int' 1
|   | | | |-CompoundStmt 0x21902a01b88 <col:22, line:171:9>
|   | | | | |-BinaryOperator 0x21902a01ae8 <line:169:13, col:31> 'int' '='
|   | | | | | |-DeclRefExpr 0x21902a01a88 <col:13> 'int' lvalue Var 0x219029f1118 'hdr_constructed' 'int'
|   | | | | | `-IntegerLiteral 0x21902a01ac0 <col:31> 'int' 2
|   | | | | `-BinaryOperator 0x21902a01b68 <line:170:13, col:23> 'long' '='
|   | | | |   |-DeclRefExpr 0x21902a01b08 <col:13> 'long' lvalue Var 0x219029f1040 'hdr_len' 'long'
|   | | | |   `-ImplicitCastExpr 0x21902a01b50 <col:23> 'long' <IntegralCast>
|   | | | |     `-IntegerLiteral 0x21902a01b28 <col:23> 'int' 0
|   | | | `-NullStmt 0x21902a01be8 <line:173:13>
|   | | `-BinaryOperator 0x21902a01e78 <line:178:9, col:61> 'int' '='
|   | |   |-DeclRefExpr 0x21902a01c18 <col:9> 'int' lvalue Var 0x219029f0ba0 'len' 'int'
|   | |   `-CallExpr 0x21902a01e10 <col:15, col:61> 'int'
|   | |     |-ImplicitCastExpr 0x21902a01df8 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x21902a01d40 <col:15> 'int ()' Function 0x21902a01c78 'ASN1_object_size' 'int ()'
|   | |     |-IntegerLiteral 0x21902a01d60 <col:32> 'int' 0
|   | |     |-ImplicitCastExpr 0x21902a01e48 <col:35> 'long' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x21902a01d88 <col:35> 'long' lvalue Var 0x219029f1040 'hdr_len' 'long'
|   | |     `-ImplicitCastExpr 0x21902a01e60 <col:44, col:54> 'int' <LValueToRValue>
|   | |       `-MemberExpr 0x21902a01dc8 <col:44, col:54> 'int' lvalue .imp_tag 0x219029ed9b8
|   | |         `-DeclRefExpr 0x21902a01da8 <col:44> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-BinaryOperator 0x21902a01f28 <line:180:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x21902a01ed0 <col:9> 'int' lvalue Var 0x219029f0ba0 'len' 'int'
|   |   `-ImplicitCastExpr 0x21902a01f10 <col:15> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x21902a01ef0 <col:15> 'int' lvalue Var 0x219029f0fa8 'cpy_len' 'int'
|   |-ForStmt 0x219029fe628 <line:184:5, line:191:5>
|   | |-BinaryOperator 0x21902a02180 <line:184:10, col:67> 'tag_exp_type *' ','
|   | | |-BinaryOperator 0x21902a01fd0 <col:10, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x21902a01f70 <col:10> 'int' lvalue Var 0x219029f0b20 'i' 'int'
|   | | | `-IntegerLiteral 0x21902a01fa8 <col:14> 'int' 0
|   | | `-BinaryOperator 0x21902a02160 <col:17, col:67> 'tag_exp_type *' '='
|   | |   |-DeclRefExpr 0x21902a01ff0 <col:17> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   | |   `-BinaryOperator 0x21902a02140 <col:24, col:67> 'tag_exp_type *' '-'
|   | |     |-BinaryOperator 0x21902a020f8 <col:24, col:55> 'tag_exp_type *' '+'
|   | |     | |-ImplicitCastExpr 0x21902a020c8 <col:24, col:34> 'tag_exp_type *' <ArrayToPointerDecay>
|   | |     | | `-MemberExpr 0x21902a02048 <col:24, col:34> 'tag_exp_type [20]' lvalue .exp_list 0x219029edd38
|   | |     | |   `-DeclRefExpr 0x21902a02028 <col:24> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |     | `-ImplicitCastExpr 0x21902a020e0 <col:45, col:55> 'int' <LValueToRValue>
|   | |     |   `-MemberExpr 0x21902a02098 <col:45, col:55> 'int' lvalue .exp_count 0x219029edda8
|   | |     |     `-DeclRefExpr 0x21902a02078 <col:45> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |     `-IntegerLiteral 0x21902a02118 <col:67> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x21902a02240 <line:185:10, col:24> 'int' '<'
|   | | |-ImplicitCastExpr 0x21902a02210 <col:10> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x21902a021a0 <col:10> 'int' lvalue Var 0x219029f0b20 'i' 'int'
|   | | `-ImplicitCastExpr 0x21902a02228 <col:14, col:24> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x21902a021e0 <col:14, col:24> 'int' lvalue .exp_count 0x219029edda8
|   | |     `-DeclRefExpr 0x21902a021c0 <col:14> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |-BinaryOperator 0x21902a022d0 <col:35, col:44> 'tag_exp_type *' ','
|   | | |-UnaryOperator 0x21902a02280 <col:35, col:36> 'int' postfix '++'
|   | | | `-DeclRefExpr 0x21902a02260 <col:35> 'int' lvalue Var 0x219029f0b20 'i' 'int'
|   | | `-UnaryOperator 0x21902a022b8 <col:40, col:44> 'tag_exp_type *' postfix '--'
|   | |   `-DeclRefExpr 0x21902a02298 <col:40> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   | `-CompoundStmt 0x219029fe600 <col:48, line:191:5>
|   |   |-CompoundAssignOperator 0x21902a02390 <line:187:9, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |-DeclRefExpr 0x21902a022f0 <col:9> 'int' lvalue Var 0x219029f0ba0 'len' 'int'
|   |   | `-ImplicitCastExpr 0x21902a02378 <col:16, col:22> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x21902a02348 <col:16, col:22> 'int' lvalue ->exp_pad 0x219029ed758
|   |   |     `-ImplicitCastExpr 0x21902a02330 <col:16> 'tag_exp_type *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x21902a02310 <col:16> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   |   |-BinaryOperator 0x21902a02478 <line:188:9, col:25> 'long' '='
|   |   | |-MemberExpr 0x21902a023f8 <col:9, col:15> 'long' lvalue ->exp_len 0x219029ed7c8
|   |   | | `-ImplicitCastExpr 0x21902a023e0 <col:9> 'tag_exp_type *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x21902a023c0 <col:9> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   |   | `-ImplicitCastExpr 0x21902a02460 <col:25> 'long' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x21902a02448 <col:25> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x21902a02428 <col:25> 'int' lvalue Var 0x219029f0ba0 'len' 'int'
|   |   `-BinaryOperator 0x219029fe5e0 <line:190:9, col:53> 'int' '='
|   |     |-DeclRefExpr 0x21902a02498 <col:9> 'int' lvalue Var 0x219029f0ba0 'len' 'int'
|   |     `-CallExpr 0x219029fe578 <col:15, col:53> 'int'
|   |       |-ImplicitCastExpr 0x219029fe560 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x21902a024b8 <col:15> 'int ()' Function 0x21902a01c78 'ASN1_object_size' 'int ()'
|   |       |-IntegerLiteral 0x219029fe4b0 <col:32> 'int' 0
|   |       |-ImplicitCastExpr 0x219029fe5b0 <col:35> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x219029fe4d8 <col:35> 'int' lvalue Var 0x219029f0ba0 'len' 'int'
|   |       `-ImplicitCastExpr 0x219029fe5c8 <col:40, col:46> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x219029fe530 <col:40, col:46> 'int' lvalue ->exp_tag 0x219029ed608
|   |           `-ImplicitCastExpr 0x219029fe518 <col:40> 'tag_exp_type *' <LValueToRValue>
|   |             `-DeclRefExpr 0x219029fe4f8 <col:40> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   |-BinaryOperator 0x219029fe838 <line:195:5, col:33> 'unsigned char *' '='
|   | |-DeclRefExpr 0x219029fe660 <col:5> 'unsigned char *' lvalue Var 0x219029f0d00 'new_der' 'unsigned char *'
|   | `-ImplicitCastExpr 0x219029fe820 <col:15, col:33> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x219029fe7e0 <col:15, col:33> 'int'
|   |     |-ImplicitCastExpr 0x219029fe7c8 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x219029fe788 <col:15> 'int ()' Function 0x219029fe6c0 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x219029fe808 <col:30> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x219029fe7a8 <col:30> 'int' lvalue Var 0x219029f0ba0 'len' 'int'
|   |-IfStmt 0x219029fe8a8 <line:196:5, line:197:14>
|   | |-OpaqueValueExpr 0x219029fe890 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x219029fe878 <col:9, col:14> 'err' 0x21902a018a8
|   |-BinaryOperator 0x219029fe930 <line:201:5, col:9> 'unsigned char *' '='
|   | |-DeclRefExpr 0x219029fe8c0 <col:5> 'unsigned char *' lvalue Var 0x219029f0e78 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x219029fe918 <col:9> 'unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x219029fe8f8 <col:9> 'unsigned char *' lvalue Var 0x219029f0d00 'new_der' 'unsigned char *'
|   |-ForStmt 0x219029ff0e0 <line:205:5, line:211:5>
|   | |-BinaryOperator 0x219029fea60 <line:205:10, col:34> 'tag_exp_type *' ','
|   | | |-BinaryOperator 0x219029fe998 <col:10, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x219029fe950 <col:10> 'int' lvalue Var 0x219029f0b20 'i' 'int'
|   | | | `-IntegerLiteral 0x219029fe970 <col:14> 'int' 0
|   | | `-BinaryOperator 0x219029fea40 <col:17, col:34> 'tag_exp_type *' '='
|   | |   |-DeclRefExpr 0x219029fe9b8 <col:17> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   | |   `-ImplicitCastExpr 0x219029fea28 <col:24, col:34> 'tag_exp_type *' <ArrayToPointerDecay>
|   | |     `-MemberExpr 0x219029fe9f8 <col:24, col:34> 'tag_exp_type [20]' lvalue .exp_list 0x219029edd38
|   | |       `-DeclRefExpr 0x219029fe9d8 <col:24> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x219029feb20 <col:44, col:58> 'int' '<'
|   | | |-ImplicitCastExpr 0x219029feaf0 <col:44> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x219029fea80 <col:44> 'int' lvalue Var 0x219029f0b20 'i' 'int'
|   | | `-ImplicitCastExpr 0x219029feb08 <col:48, col:58> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x219029feac0 <col:48, col:58> 'int' lvalue .exp_count 0x219029edda8
|   | |     `-DeclRefExpr 0x219029feaa0 <col:48> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |-BinaryOperator 0x219029febb0 <line:206:10, col:19> 'tag_exp_type *' ','
|   | | |-UnaryOperator 0x219029feb60 <col:10, col:11> 'int' postfix '++'
|   | | | `-DeclRefExpr 0x219029feb40 <col:10> 'int' lvalue Var 0x219029f0b20 'i' 'int'
|   | | `-UnaryOperator 0x219029feb98 <col:15, col:19> 'tag_exp_type *' postfix '++'
|   | |   `-DeclRefExpr 0x219029feb78 <col:15> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   | `-CompoundStmt 0x219029ff0c0 <col:23, line:211:5>
|   |   |-CallExpr 0x219029feed0 <line:207:9, line:208:55> 'int'
|   |   | |-ImplicitCastExpr 0x219029feeb8 <line:207:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x219029fecc0 <col:9> 'int ()' Function 0x219029febf8 'ASN1_put_object' 'int ()'
|   |   | |-UnaryOperator 0x219029fed00 <col:25, col:26> 'unsigned char **' prefix '&' cannot overflow
|   |   | | `-DeclRefExpr 0x219029fece0 <col:26> 'unsigned char *' lvalue Var 0x219029f0e78 'p' 'unsigned char *'
|   |   | |-ImplicitCastExpr 0x219029fef18 <col:29, col:35> 'int' <LValueToRValue>
|   |   | | `-MemberExpr 0x219029fed50 <col:29, col:35> 'int' lvalue ->exp_constructed 0x219029ed6e8
|   |   | |   `-ImplicitCastExpr 0x219029fed38 <col:29> 'tag_exp_type *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x219029fed18 <col:29> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   |   | |-ImplicitCastExpr 0x219029fef30 <col:52, col:58> 'long' <LValueToRValue>
|   |   | | `-MemberExpr 0x219029fedb8 <col:52, col:58> 'long' lvalue ->exp_len 0x219029ed7c8
|   |   | |   `-ImplicitCastExpr 0x219029feda0 <col:52> 'tag_exp_type *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x219029fed80 <col:52> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   |   | |-ImplicitCastExpr 0x219029fef48 <line:208:25, col:31> 'int' <LValueToRValue>
|   |   | | `-MemberExpr 0x219029fee20 <col:25, col:31> 'int' lvalue ->exp_tag 0x219029ed608
|   |   | |   `-ImplicitCastExpr 0x219029fee08 <col:25> 'tag_exp_type *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x219029fede8 <col:25> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   |   | `-ImplicitCastExpr 0x219029fef60 <col:40, col:46> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x219029fee88 <col:40, col:46> 'int' lvalue ->exp_class 0x219029ed678
|   |   |     `-ImplicitCastExpr 0x219029fee70 <col:40> 'tag_exp_type *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x219029fee50 <col:40> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   |   `-IfStmt 0x219029ff0a8 <line:209:9, line:210:20>
|   |     |-ImplicitCastExpr 0x219029fefe0 <line:209:13, col:19> 'int' <LValueToRValue>
|   |     | `-MemberExpr 0x219029fefb0 <col:13, col:19> 'int' lvalue ->exp_pad 0x219029ed758
|   |     |   `-ImplicitCastExpr 0x219029fef98 <col:13> 'tag_exp_type *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x219029fef78 <col:13> 'tag_exp_type *' lvalue Var 0x219029f0a88 'etmp' 'tag_exp_type *'
|   |     `-BinaryOperator 0x219029ff088 <line:210:13, col:20> 'unsigned char' '='
|   |       |-UnaryOperator 0x219029ff030 <col:13, col:15> 'unsigned char' lvalue prefix '*' cannot overflow
|   |       | `-UnaryOperator 0x219029ff018 <col:14, col:15> 'unsigned char *' postfix '++'
|   |       |   `-DeclRefExpr 0x219029feff8 <col:14> 'unsigned char *' lvalue Var 0x219029f0e78 'p' 'unsigned char *'
|   |       `-ImplicitCastExpr 0x219029ff070 <col:20> 'unsigned char' <IntegralCast>
|   |         `-IntegerLiteral 0x219029ff048 <col:20> 'int' 0
|   |-IfStmt 0x219029fc4f0 <line:215:5, line:222:5>
|   | |-BinaryOperator 0x219029ff1c0 <line:215:9, col:31> 'int' '!='
|   | | |-ImplicitCastExpr 0x219029ff1a8 <col:9, col:19> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x219029ff138 <col:9, col:19> 'int' lvalue .imp_tag 0x219029ed9b8
|   | | |   `-DeclRefExpr 0x219029ff118 <col:9> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | | `-UnaryOperator 0x219029ff190 <col:30, col:31> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x219029ff168 <col:31> 'int' 1
|   | `-CompoundStmt 0x219029fc4d8 <col:34, line:222:5>
|   |   `-CallExpr 0x219029ff440 <line:220:9, line:221:63> 'int'
|   |     |-ImplicitCastExpr 0x219029ff428 <line:220:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x219029ff2f0 <col:9> 'int ()' Function 0x219029febf8 'ASN1_put_object' 'int ()'
|   |     |-UnaryOperator 0x219029ff330 <col:25, col:26> 'unsigned char **' prefix '&' cannot overflow
|   |     | `-DeclRefExpr 0x219029ff310 <col:26> 'unsigned char *' lvalue Var 0x219029f0e78 'p' 'unsigned char *'
|   |     |-ImplicitCastExpr 0x219029ff488 <col:29> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x219029ff348 <col:29> 'int' lvalue Var 0x219029f1118 'hdr_constructed' 'int'
|   |     |-ImplicitCastExpr 0x219029fc490 <col:46> 'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x219029ff368 <col:46> 'long' lvalue Var 0x219029f1040 'hdr_len' 'long'
|   |     |-ImplicitCastExpr 0x219029fc4a8 <line:221:25, col:35> 'int' <LValueToRValue>
|   |     | `-MemberExpr 0x219029ff3a8 <col:25, col:35> 'int' lvalue .imp_tag 0x219029ed9b8
|   |     |   `-DeclRefExpr 0x219029ff388 <col:25> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   |     `-ImplicitCastExpr 0x219029fc4c0 <col:44, col:54> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x219029ff3f8 <col:44, col:54> 'int' lvalue .imp_class 0x219029eda28
|   |         `-DeclRefExpr 0x219029ff3d8 <col:44> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x219029f09a0 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   |-CallExpr 0x219029fc890 <line:225:5, col:33> 'void *'
|   | |-ImplicitCastExpr 0x219029fc878 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x219029fc770 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x219029fc580 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   | |-ImplicitCastExpr 0x219029fc8e0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x219029fc8c8 <col:12> 'unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x219029fc7a8 <col:12> 'unsigned char *' lvalue Var 0x219029f0e78 'p' 'unsigned char *'
|   | |-ImplicitCastExpr 0x219029fc910 <col:15> 'const void *' <BitCast>
|   | | `-ImplicitCastExpr 0x219029fc8f8 <col:15> 'const unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x219029fc7c8 <col:15> 'const unsigned char *' lvalue Var 0x219029f0de0 'cpy_start' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x219029fc940 <col:26> 'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x219029fc928 <col:26> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x219029fc7e8 <col:26> 'int' lvalue Var 0x219029f0fa8 'cpy_len' 'int'
|   |-BinaryOperator 0x219029fc9e0 <line:227:5, col:10> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x219029fc958 <col:5> 'const unsigned char *' lvalue Var 0x219029f0f10 'cp' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x219029fc9c8 <col:10> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x219029fc9b0 <col:10> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x219029fc990 <col:10> 'unsigned char *' lvalue Var 0x219029f0d00 'new_der' 'unsigned char *'
|   |-LabelStmt 0x219029fccf0 <line:232:2, line:233:26> 'err'
|   | `-CallExpr 0x219029fccb0 <col:5, col:26> 'int'
|   |   |-ImplicitCastExpr 0x219029fcc98 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x219029fcc58 <col:5> 'int ()' Function 0x219029fcb90 'OPENSSL_free' 'int ()'
|   |   `-ImplicitCastExpr 0x219029fccd8 <col:18> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x219029fcc78 <col:18> 'unsigned char *' lvalue Var 0x219029f0c80 'orig_der' 'unsigned char *'
|   `-CallExpr 0x219029fcd60 <line:234:5, col:25> 'int'
|     |-ImplicitCastExpr 0x219029fcd48 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x219029fcd08 <col:5> 'int ()' Function 0x219029fcb90 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x219029fcd88 <col:18> 'unsigned char *' <LValueToRValue>
|       `-DeclRefExpr 0x219029fcd28 <col:18> 'unsigned char *' lvalue Var 0x219029f0d00 'new_der' 'unsigned char *'
|-FunctionDecl 0x219029fc580 <line:225:5> col:5 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x219029fc620 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x219029fc688 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x219029fc6f0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x219029fd0a0 prev 0x219029ee810 <line:240:1, line:346:1> line:240:12 used asn1_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x219029fceb0 <col:20, col:32> col:32 used elem 'const char *'
| |-ParmVarDecl 0x219029fcf30 <col:38, col:42> col:42 used len 'int'
| |-ParmVarDecl 0x219029fcfb0 <col:47, col:53> col:53 used bitstr 'void *'
| `-CompoundStmt 0x21902a05bd8 <line:241:1, line:346:1>
|   |-DeclStmt 0x219029fd220 <line:242:5, col:30>
|   | `-VarDecl 0x219029fd168 <col:5, col:24> col:18 used arg 'tag_exp_arg *' cinit
|   |   `-ImplicitCastExpr 0x219029fd208 <col:24> 'tag_exp_arg *' <BitCast>
|   |     `-ImplicitCastExpr 0x219029fd1f0 <col:24> 'void *' <LValueToRValue>
|   |       `-DeclRefExpr 0x219029fd1d0 <col:24> 'void *' lvalue ParmVar 0x219029fcfb0 'bitstr' 'void *'
|   |-DeclStmt 0x219029fd2b8 <line:243:5, col:10>
|   | `-VarDecl 0x219029fd250 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x219029fd350 <line:244:5, col:14>
|   | `-VarDecl 0x219029fd2e8 <col:5, col:9> col:9 used utype 'int'
|   |-DeclStmt 0x219029fd410 <line:245:5, col:17>
|   | `-VarDecl 0x219029fd380 <col:5, col:16> col:9 used vlen 'int' cinit
|   |   `-IntegerLiteral 0x219029fd3e8 <col:16> 'int' 0
|   |-DeclStmt 0x21902a03600 <line:246:5, col:34>
|   | |-VarDecl 0x21902a03500 <col:5, col:17> col:17 used p 'const char *'
|   | `-VarDecl 0x21902a03580 <col:5, col:21> col:21 used vstart 'const char *'
|   |-DeclStmt 0x21902a03730 <line:248:5, col:27>
|   | |-VarDecl 0x21902a03630 <col:5, col:9> col:9 used tmp_tag 'int'
|   | `-VarDecl 0x21902a036b0 <col:5, col:18> col:18 used tmp_class 'int'
|   |-IfStmt 0x21902a037d0 <line:250:5, line:251:17>
|   | |-OpaqueValueExpr 0x21902a037b8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x21902a037a8 <col:9, col:17>
|   |   `-UnaryOperator 0x21902a03790 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x21902a03768 <col:17> 'int' 1
|   |-ForStmt 0x21902a03ea8 <line:253:5, line:261:5>
|   | |-BinaryOperator 0x21902a038f8 <line:253:10, col:21> 'const char *' ','
|   | | |-BinaryOperator 0x21902a03848 <col:10, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x21902a037e8 <col:10> 'int' lvalue Var 0x219029fd250 'i' 'int'
|   | | | `-IntegerLiteral 0x21902a03820 <col:14> 'int' 0
|   | | `-BinaryOperator 0x21902a038d8 <col:17, col:21> 'const char *' '='
|   | |   |-DeclRefExpr 0x21902a03868 <col:17> 'const char *' lvalue Var 0x21902a03500 'p' 'const char *'
|   | |   `-ImplicitCastExpr 0x21902a038c0 <col:21> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x21902a038a0 <col:21> 'const char *' lvalue ParmVar 0x219029fceb0 'elem' 'const char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x21902a03988 <col:27, col:31> 'int' '<'
|   | | |-ImplicitCastExpr 0x21902a03958 <col:27> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x21902a03918 <col:27> 'int' lvalue Var 0x219029fd250 'i' 'int'
|   | | `-ImplicitCastExpr 0x21902a03970 <col:31> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x21902a03938 <col:31> 'int' lvalue ParmVar 0x219029fcf30 'len' 'int'
|   | |-BinaryOperator 0x21902a03a18 <col:36, col:42> 'int' ','
|   | | |-UnaryOperator 0x21902a039c8 <col:36, col:37> 'const char *' postfix '++'
|   | | | `-DeclRefExpr 0x21902a039a8 <col:36> 'const char *' lvalue Var 0x21902a03500 'p' 'const char *'
|   | | `-UnaryOperator 0x21902a03a00 <col:41, col:42> 'int' postfix '++'
|   | |   `-DeclRefExpr 0x21902a039e0 <col:41> 'int' lvalue Var 0x219029fd250 'i' 'int'
|   | `-CompoundStmt 0x21902a03e90 <col:46, line:261:5>
|   |   `-IfStmt 0x21902a03e78 <line:255:9, line:260:9>
|   |     |-BinaryOperator 0x21902a03ad0 <line:255:13, col:19> 'int' '=='
|   |     | |-ImplicitCastExpr 0x21902a03ab8 <col:13, col:14> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x21902a03aa0 <col:13, col:14> 'char' <LValueToRValue>
|   |     | |   `-UnaryOperator 0x21902a03a70 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |     | |     `-ImplicitCastExpr 0x21902a03a58 <col:14> 'const char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x21902a03a38 <col:14> 'const char *' lvalue Var 0x21902a03500 'p' 'const char *'
|   |     | `-CharacterLiteral 0x21902a03a88 <col:19> 'int' 58
|   |     `-CompoundStmt 0x21902a03e48 <col:24, line:260:9>
|   |       |-BinaryOperator 0x21902a03ba8 <line:256:13, col:26> 'const char *' '='
|   |       | |-DeclRefExpr 0x21902a03af0 <col:13> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |       | `-BinaryOperator 0x21902a03b88 <col:22, col:26> 'const char *' '+'
|   |       |   |-ImplicitCastExpr 0x21902a03b70 <col:22> 'const char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x21902a03b28 <col:22> 'const char *' lvalue Var 0x21902a03500 'p' 'const char *'
|   |       |   `-IntegerLiteral 0x21902a03b48 <col:26> 'int' 1
|   |       |-BinaryOperator 0x21902a03d38 <line:257:13, col:40> 'int' '='
|   |       | |-DeclRefExpr 0x21902a03bc8 <col:13> 'int' lvalue Var 0x219029fd380 'vlen' 'int'
|   |       | `-ImplicitCastExpr 0x21902a03d20 <col:20, col:40> 'int' <IntegralCast>
|   |       |   `-BinaryOperator 0x21902a03d00 <col:20, col:40> 'long long' '-'
|   |       |     |-ImplicitCastExpr 0x21902a03ce8 <col:20> 'long long' <IntegralCast>
|   |       |     | `-ImplicitCastExpr 0x21902a03cd0 <col:20> 'int' <LValueToRValue>
|   |       |     |   `-DeclRefExpr 0x21902a03c00 <col:20> 'int' lvalue ParmVar 0x219029fcf30 'len' 'int'
|   |       |     `-ParenExpr 0x21902a03cb0 <col:26, col:40> 'long long'
|   |       |       `-BinaryOperator 0x21902a03c90 <col:27, col:36> 'long long' '-'
|   |       |         |-ImplicitCastExpr 0x21902a03c60 <col:27> 'const char *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x21902a03c20 <col:27> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |       |         `-ImplicitCastExpr 0x21902a03c78 <col:36> 'const char *' <LValueToRValue>
|   |       |           `-DeclRefExpr 0x21902a03c40 <col:36> 'const char *' lvalue ParmVar 0x219029fceb0 'elem' 'const char *'
|   |       |-BinaryOperator 0x21902a03e20 <line:258:13, col:23> 'int' '='
|   |       | |-DeclRefExpr 0x21902a03d58 <col:13> 'int' lvalue ParmVar 0x219029fcf30 'len' 'int'
|   |       | `-ImplicitCastExpr 0x21902a03e08 <col:19, col:23> 'int' <IntegralCast>
|   |       |   `-BinaryOperator 0x21902a03de8 <col:19, col:23> 'long long' '-'
|   |       |     |-ImplicitCastExpr 0x21902a03db8 <col:19> 'const char *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x21902a03d78 <col:19> 'const char *' lvalue Var 0x21902a03500 'p' 'const char *'
|   |       |     `-ImplicitCastExpr 0x21902a03dd0 <col:23> 'const char *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x21902a03d98 <col:23> 'const char *' lvalue ParmVar 0x219029fceb0 'elem' 'const char *'
|   |       `-BreakStmt 0x21902a03e40 <line:259:13>
|   |-BinaryOperator 0x21902a04020 <line:263:5, col:35> 'int' '='
|   | |-DeclRefExpr 0x21902a03ee0 <col:5> 'int' lvalue Var 0x219029fd2e8 'utype' 'int'
|   | `-CallExpr 0x21902a03fc0 <col:13, col:35> 'int'
|   |   |-ImplicitCastExpr 0x21902a03fa8 <col:13> 'int (*)(const char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x21902a03f18 <col:13> 'int (const char *, int)' Function 0x219029efb80 'asn1_str2tag' 'int (const char *, int)'
|   |   |-ImplicitCastExpr 0x21902a03ff0 <col:26> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x21902a03f38 <col:26> 'const char *' lvalue ParmVar 0x219029fceb0 'elem' 'const char *'
|   |   `-ImplicitCastExpr 0x21902a04008 <col:32> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x21902a03f58 <col:32> 'int' lvalue ParmVar 0x219029fcf30 'len' 'int'
|   |-IfStmt 0x21902a04398 <line:265:5, line:269:5>
|   | |-BinaryOperator 0x21902a040b8 <line:265:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x21902a040a0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x21902a04040 <col:9> 'int' lvalue Var 0x219029fd2e8 'utype' 'int'
|   | | `-UnaryOperator 0x21902a04088 <col:18, col:19> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x21902a04060 <col:19> 'int' 1
|   | `-CompoundStmt 0x21902a04378 <col:22, line:269:5>
|   |   |-CallExpr 0x21902a042c0 <line:267:9, col:43> 'int'
|   |   | |-ImplicitCastExpr 0x21902a042a8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x21902a041e8 <col:9> 'int ()' Function 0x21902a04120 'ERR_add_error_data' 'int ()'
|   |   | |-IntegerLiteral 0x21902a04208 <col:28> 'int' 2
|   |   | |-ImplicitCastExpr 0x21902a042f8 <col:31> 'char *' <ArrayToPointerDecay>
|   |   | | `-StringLiteral 0x21902a04268 <col:31> 'char [5]' lvalue "tag="
|   |   | `-ImplicitCastExpr 0x21902a04310 <col:39> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x21902a04288 <col:39> 'const char *' lvalue ParmVar 0x219029fceb0 'elem' 'const char *'
|   |   `-ReturnStmt 0x21902a04368 <line:268:9, col:17>
|   |     `-UnaryOperator 0x21902a04350 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x21902a04328 <col:17> 'int' 1
|   |-IfStmt 0x219029ff810 <line:272:5, line:281:5>
|   | |-UnaryOperator 0x21902a04450 <line:272:9, col:32> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x21902a04430 <col:10, col:32> 'int'
|   | |   `-BinaryOperator 0x21902a04410 <col:11, line:14:33> 'int' '&'
|   | |     |-ImplicitCastExpr 0x21902a043f8 <line:272:11> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x21902a043b0 <col:11> 'int' lvalue Var 0x219029fd2e8 'utype' 'int'
|   | |     `-IntegerLiteral 0x21902a043d0 <line:14:33> 'int' 65536
|   | `-CompoundStmt 0x219029ff7e0 <line:272:35, line:281:5>
|   |   |-BinaryOperator 0x219029ff4f8 <line:273:9, col:22> 'int' '='
|   |   | |-MemberExpr 0x21902a044b8 <col:9, col:14> 'int' lvalue ->utype 0x219029eda98
|   |   | | `-ImplicitCastExpr 0x21902a044a0 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x21902a04468 <col:9> 'tag_exp_arg *' lvalue Var 0x219029fd168 'arg' 'tag_exp_arg *'
|   |   | `-ImplicitCastExpr 0x219029ff4e0 <col:22> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x219029ff4c0 <col:22> 'int' lvalue Var 0x219029fd2e8 'utype' 'int'
|   |   |-BinaryOperator 0x219029ff5b8 <line:274:9, col:20> 'const char *' '='
|   |   | |-MemberExpr 0x219029ff550 <col:9, col:14> 'const char *' lvalue ->str 0x219029edb78
|   |   | | `-ImplicitCastExpr 0x219029ff538 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x219029ff518 <col:9> 'tag_exp_arg *' lvalue Var 0x219029fd168 'arg' 'tag_exp_arg *'
|   |   | `-ImplicitCastExpr 0x219029ff5a0 <col:20> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x219029ff580 <col:20> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |   |-IfStmt 0x219029ff790 <line:276:9, line:279:9>
|   |   | |-BinaryOperator 0x219029ff6e8 <line:276:13, col:32> 'int' '&&'
|   |   | | |-UnaryOperator 0x219029ff610 <col:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x219029ff5f8 <col:14> 'const char *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x219029ff5d8 <col:14> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |   | | `-ImplicitCastExpr 0x219029ff6d0 <col:24, col:32> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x219029ff6b8 <col:24, col:32> 'char' <LValueToRValue>
|   |   | |     `-ArraySubscriptExpr 0x219029ff698 <col:24, col:32> 'const char' lvalue
|   |   | |       |-ImplicitCastExpr 0x219029ff668 <col:24> 'const char *' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x219029ff628 <col:24> 'const char *' lvalue ParmVar 0x219029fceb0 'elem' 'const char *'
|   |   | |       `-ImplicitCastExpr 0x219029ff680 <col:29> 'int' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x219029ff648 <col:29> 'int' lvalue ParmVar 0x219029fcf30 'len' 'int'
|   |   | `-CompoundStmt 0x219029ff778 <col:35, line:279:9>
|   |   |   `-ReturnStmt 0x219029ff768 <line:278:13, col:21>
|   |   |     `-UnaryOperator 0x219029ff750 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x219029ff728 <col:21> 'int' 1
|   |   `-ReturnStmt 0x219029ff7d0 <line:280:9, col:16>
|   |     `-IntegerLiteral 0x219029ff7a8 <col:16> 'int' 0
|   |-SwitchStmt 0x219029ff860 <line:283:5, line:342:5>
|   | |-ImplicitCastExpr 0x219029ff848 <line:283:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x219029ff828 <col:13> 'int' lvalue Var 0x219029fd2e8 'utype' 'int'
|   | `-CompoundStmt 0x21902a05b08 <col:20, line:342:5>
|   |   |-CaseStmt 0x219029ff928 <line:285:5, line:290:9>
|   |   | |-ConstantExpr 0x219029ff910 <line:15:33, col:49> 'int'
|   |   | | `-ParenExpr 0x219029ff8f0 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x219029ff8d0 <line:14:33, line:15:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x219029ff880 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x219029ff8a8 <line:15:48> 'int' 1
|   |   | `-IfStmt 0x219029ffab8 <line:287:9, line:290:9>
|   |   |   |-BinaryOperator 0x219029ffa10 <line:287:13, col:30> 'int' '!='
|   |   |   | |-ImplicitCastExpr 0x219029ff9f8 <col:13, col:18> 'int' <LValueToRValue>
|   |   |   | | `-MemberExpr 0x219029ff988 <col:13, col:18> 'int' lvalue ->imp_tag 0x219029ed9b8
|   |   |   | |   `-ImplicitCastExpr 0x219029ff970 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x219029ff950 <col:13> 'tag_exp_arg *' lvalue Var 0x219029fd168 'arg' 'tag_exp_arg *'
|   |   |   | `-UnaryOperator 0x219029ff9e0 <col:29, col:30> 'int' prefix '-'
|   |   |   |   `-IntegerLiteral 0x219029ff9b8 <col:30> 'int' 1
|   |   |   `-CompoundStmt 0x219029ffaa0 <col:33, line:290:9>
|   |   |     `-ReturnStmt 0x219029ffa90 <line:289:13, col:21>
|   |   |       `-UnaryOperator 0x219029ffa78 <col:20, col:21> 'int' prefix '-'
|   |   |         `-IntegerLiteral 0x219029ffa50 <col:21> 'int' 1
|   |   |-IfStmt 0x219029ffd48 <line:291:9, line:292:21>
|   |   | |-UnaryOperator 0x219029ffce0 <line:291:13, col:72> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x219029ffc70 <col:14, col:72> 'int'
|   |   | |   |-ImplicitCastExpr 0x219029ffc58 <col:14> 'int (*)(const char *, int, int *, int *)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x219029ffad0 <col:14> 'int (const char *, int, int *, int *)' Function 0x219029ef1d0 'parse_tagging' 'int (const char *, int, int *, int *)'
|   |   | |   |-ImplicitCastExpr 0x219029ffcb0 <col:28> 'const char *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x219029ffaf0 <col:28> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |   | |   |-ImplicitCastExpr 0x219029ffcc8 <col:36> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x219029ffb10 <col:36> 'int' lvalue Var 0x219029fd380 'vlen' 'int'
|   |   | |   |-UnaryOperator 0x219029ffb98 <col:42, col:48> 'int *' prefix '&' cannot overflow
|   |   | |   | `-MemberExpr 0x219029ffb68 <col:43, col:48> 'int' lvalue ->imp_tag 0x219029ed9b8
|   |   | |   |   `-ImplicitCastExpr 0x219029ffb50 <col:43> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x219029ffb30 <col:43> 'tag_exp_arg *' lvalue Var 0x219029fd168 'arg' 'tag_exp_arg *'
|   |   | |   `-UnaryOperator 0x219029ffc18 <col:57, col:63> 'int *' prefix '&' cannot overflow
|   |   | |     `-MemberExpr 0x219029ffbe8 <col:58, col:63> 'int' lvalue ->imp_class 0x219029eda28
|   |   | |       `-ImplicitCastExpr 0x219029ffbd0 <col:58> 'tag_exp_arg *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x219029ffbb0 <col:58> 'tag_exp_arg *' lvalue Var 0x219029fd168 'arg' 'tag_exp_arg *'
|   |   | `-ReturnStmt 0x219029ffd38 <line:292:13, col:21>
|   |   |   `-UnaryOperator 0x219029ffd20 <col:20, col:21> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x219029ffcf8 <col:21> 'int' 1
|   |   |-BreakStmt 0x219029ffd60 <line:293:9>
|   |   |-CaseStmt 0x219029ffe10 <line:295:5, line:298:21>
|   |   | |-ConstantExpr 0x219029ffdf8 <line:16:33, col:49> 'int'
|   |   | | `-ParenExpr 0x219029ffdd8 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x219029ffdb8 <line:14:33, line:16:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x219029ffd68 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x219029ffd90 <line:16:48> 'int' 2
|   |   | `-IfStmt 0x21902a00028 <line:297:9, line:298:21>
|   |   |   |-UnaryOperator 0x219029fffc0 <line:297:13, col:62> 'int' prefix '!' cannot overflow
|   |   |   | `-CallExpr 0x219029fff50 <col:14, col:62> 'int'
|   |   |   |   |-ImplicitCastExpr 0x219029fff38 <col:14> 'int (*)(const char *, int, int *, int *)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x219029ffe38 <col:14> 'int (const char *, int, int *, int *)' Function 0x219029ef1d0 'parse_tagging' 'int (const char *, int, int *, int *)'
|   |   |   |   |-ImplicitCastExpr 0x219029fff90 <col:28> 'const char *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x219029ffe58 <col:28> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |   |   |   |-ImplicitCastExpr 0x219029fffa8 <col:36> 'int' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x219029ffe78 <col:36> 'int' lvalue Var 0x219029fd380 'vlen' 'int'
|   |   |   |   |-UnaryOperator 0x219029ffed0 <col:42, col:43> 'int *' prefix '&' cannot overflow
|   |   |   |   | `-DeclRefExpr 0x219029ffe98 <col:43> 'int' lvalue Var 0x21902a03630 'tmp_tag' 'int'
|   |   |   |   `-UnaryOperator 0x219029fff20 <col:52, col:53> 'int *' prefix '&' cannot overflow
|   |   |   |     `-DeclRefExpr 0x219029ffee8 <col:53> 'int' lvalue Var 0x21902a036b0 'tmp_class' 'int'
|   |   |   `-ReturnStmt 0x21902a00018 <line:298:13, col:21>
|   |   |     `-UnaryOperator 0x21902a00000 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x219029fffd8 <col:21> 'int' 1
|   |   |-IfStmt 0x21902a002b0 <line:299:9, line:300:21>
|   |   | |-UnaryOperator 0x21902a00248 <line:299:13, col:57> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x21902a001b0 <col:14, col:57> 'int'
|   |   | |   |-ImplicitCastExpr 0x21902a00198 <col:14> 'int (*)(tag_exp_arg *, int, int, int, int, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x21902a00040 <col:14> 'int (tag_exp_arg *, int, int, int, int, int)' Function 0x219029eedf0 'append_exp' 'int (tag_exp_arg *, int, int, int, int, int)'
|   |   | |   |-ImplicitCastExpr 0x21902a00200 <col:25> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x21902a00060 <col:25> 'tag_exp_arg *' lvalue Var 0x219029fd168 'arg' 'tag_exp_arg *'
|   |   | |   |-ImplicitCastExpr 0x21902a00218 <col:30> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x21902a00080 <col:30> 'int' lvalue Var 0x21902a03630 'tmp_tag' 'int'
|   |   | |   |-ImplicitCastExpr 0x21902a00230 <col:39> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x21902a000a0 <col:39> 'int' lvalue Var 0x21902a036b0 'tmp_class' 'int'
|   |   | |   |-IntegerLiteral 0x21902a000c0 <col:50> 'int' 1
|   |   | |   |-IntegerLiteral 0x21902a000e8 <col:53> 'int' 0
|   |   | |   `-IntegerLiteral 0x21902a00110 <col:56> 'int' 0
|   |   | `-ReturnStmt 0x21902a002a0 <line:300:13, col:21>
|   |   |   `-UnaryOperator 0x21902a00288 <col:20, col:21> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x21902a00260 <col:21> 'int' 1
|   |   |-BreakStmt 0x21902a002c8 <line:301:9>
|   |   |-CaseStmt 0x21902a00378 <line:303:5, line:305:21>
|   |   | |-ConstantExpr 0x21902a00360 <line:20:33, col:49> 'int'
|   |   | | `-ParenExpr 0x21902a00340 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x21902a00320 <line:14:33, line:20:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x21902a002d0 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x21902a002f8 <line:20:48> 'int' 6
|   |   | `-IfStmt 0x21902a04510 <line:304:9, line:305:21>
|   |   |   |-OpaqueValueExpr 0x21902a004a8 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x21902a00498 <col:13, col:21>
|   |   |     `-UnaryOperator 0x21902a00480 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x21902a00458 <col:21> 'int' 1
|   |   |-BreakStmt 0x21902a04528 <line:306:9>
|   |   |-CaseStmt 0x21902a045d8 <line:308:5, line:310:21>
|   |   | |-ConstantExpr 0x21902a045c0 <line:21:33, col:49> 'int'
|   |   | | `-ParenExpr 0x21902a045a0 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x21902a04580 <line:14:33, line:21:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x21902a04530 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x21902a04558 <line:21:48> 'int' 7
|   |   | `-IfStmt 0x21902a04720 <line:309:9, line:310:21>
|   |   |   |-OpaqueValueExpr 0x21902a04708 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x21902a046f8 <col:13, col:21>
|   |   |     `-UnaryOperator 0x21902a046e0 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x21902a046b8 <col:21> 'int' 1
|   |   |-BreakStmt 0x21902a04738 <line:311:9>
|   |   |-CaseStmt 0x21902a047e8 <line:313:5, line:315:21>
|   |   | |-ConstantExpr 0x21902a047d0 <line:18:33, col:49> 'int'
|   |   | | `-ParenExpr 0x21902a047b0 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x21902a04790 <line:14:33, line:18:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x21902a04740 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x21902a04768 <line:18:48> 'int' 4
|   |   | `-IfStmt 0x21902a04930 <line:314:9, line:315:21>
|   |   |   |-OpaqueValueExpr 0x21902a04918 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x21902a04908 <col:13, col:21>
|   |   |     `-UnaryOperator 0x21902a048f0 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x21902a048c8 <col:21> 'int' 1
|   |   |-BreakStmt 0x21902a04948 <line:316:9>
|   |   |-CaseStmt 0x21902a049f8 <line:318:5, line:320:21>
|   |   | |-ConstantExpr 0x21902a049e0 <line:19:33, col:49> 'int'
|   |   | | `-ParenExpr 0x21902a049c0 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x21902a049a0 <line:14:33, line:19:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x21902a04950 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x21902a04978 <line:19:48> 'int' 5
|   |   | `-IfStmt 0x21902a04b40 <line:319:9, line:320:21>
|   |   |   |-OpaqueValueExpr 0x21902a04b28 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x21902a04b18 <col:13, col:21>
|   |   |     `-UnaryOperator 0x21902a04b00 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x21902a04ad8 <col:21> 'int' 1
|   |   |-BreakStmt 0x21902a04b58 <line:321:9>
|   |   |-CaseStmt 0x21902a04c08 <line:323:5, line:327:9>
|   |   | |-ConstantExpr 0x21902a04bf0 <line:22:33, col:49> 'int'
|   |   | | `-ParenExpr 0x21902a04bd0 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x21902a04bb0 <line:14:33, line:22:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x21902a04b60 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x21902a04b88 <line:22:48> 'int' 8
|   |   | `-IfStmt 0x21902a04d08 <line:324:9, line:327:9>
|   |   |   |-UnaryOperator 0x21902a04c68 <line:324:13, col:14> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x21902a04c50 <col:14> 'const char *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x21902a04c30 <col:14> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |   |   `-CompoundStmt 0x21902a04cf0 <col:22, line:327:9>
|   |   |     `-ReturnStmt 0x21902a04ce0 <line:326:13, col:21>
|   |   |       `-UnaryOperator 0x21902a04cc8 <col:20, col:21> 'int' prefix '-'
|   |   |         `-IntegerLiteral 0x21902a04ca0 <col:21> 'int' 1
|   |   |-IfStmt 0x21902a05ad8 <line:328:9, line:339:9> has_else
|   |   | |-BinaryOperator 0x21902a05160 <line:328:13, col:44> 'int' '=='
|   |   | | |-CallExpr 0x21902a050a0 <col:13, col:39> 'int'
|   |   | | | |-ImplicitCastExpr 0x21902a05088 <col:13> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x21902a04f50 <col:13> 'int (const char *, const char *, unsigned long long)' Function 0x21902a04d60 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   | | | |-ImplicitCastExpr 0x21902a050d8 <col:21> 'const char *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x21902a04f88 <col:21> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |   | | | |-ImplicitCastExpr 0x21902a05108 <col:29> 'const char *' <NoOp>
|   |   | | | | `-ImplicitCastExpr 0x21902a050f0 <col:29> 'char *' <ArrayToPointerDecay>
|   |   | | | |   `-StringLiteral 0x21902a04fe8 <col:29> 'char [6]' lvalue "ASCII"
|   |   | | | `-ImplicitCastExpr 0x21902a05120 <col:38> 'unsigned long long' <IntegralCast>
|   |   | | |   `-IntegerLiteral 0x21902a05008 <col:38> 'int' 5
|   |   | | `-IntegerLiteral 0x21902a05138 <col:44> 'int' 0
|   |   | |-BinaryOperator 0x21902a05210 <line:329:13, line:33:33> 'int' '='
|   |   | | |-MemberExpr 0x21902a051b8 <line:329:13, col:18> 'int' lvalue ->format 0x219029edb08
|   |   | | | `-ImplicitCastExpr 0x21902a051a0 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x21902a05180 <col:13> 'tag_exp_arg *' lvalue Var 0x219029fd168 'arg' 'tag_exp_arg *'
|   |   | | `-IntegerLiteral 0x21902a051e8 <line:33:33> 'int' 1
|   |   | `-IfStmt 0x21902a05ab0 <line:330:14, line:339:9> has_else
|   |   |   |-BinaryOperator 0x21902a053c0 <line:330:18, col:48> 'int' '=='
|   |   |   | |-CallExpr 0x21902a05300 <col:18, col:43> 'int'
|   |   |   | | |-ImplicitCastExpr 0x21902a052e8 <col:18> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | | | `-DeclRefExpr 0x21902a05230 <col:18> 'int (const char *, const char *, unsigned long long)' Function 0x21902a04d60 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   |   | | |-ImplicitCastExpr 0x21902a05338 <col:26> 'const char *' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x21902a05250 <col:26> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |   |   | | |-ImplicitCastExpr 0x21902a05368 <col:34> 'const char *' <NoOp>
|   |   |   | | | `-ImplicitCastExpr 0x21902a05350 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |   | | |   `-StringLiteral 0x21902a05270 <col:34> 'char [5]' lvalue "UTF8"
|   |   |   | | `-ImplicitCastExpr 0x21902a05380 <col:42> 'unsigned long long' <IntegralCast>
|   |   |   | |   `-IntegerLiteral 0x21902a05290 <col:42> 'int' 4
|   |   |   | `-IntegerLiteral 0x21902a05398 <col:48> 'int' 0
|   |   |   |-BinaryOperator 0x21902a05470 <line:331:13, line:35:33> 'int' '='
|   |   |   | |-MemberExpr 0x21902a05418 <line:331:13, col:18> 'int' lvalue ->format 0x219029edb08
|   |   |   | | `-ImplicitCastExpr 0x21902a05400 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x21902a053e0 <col:13> 'tag_exp_arg *' lvalue Var 0x219029fd168 'arg' 'tag_exp_arg *'
|   |   |   | `-IntegerLiteral 0x21902a05448 <line:35:33> 'int' 2
|   |   |   `-IfStmt 0x21902a05a88 <line:332:14, line:339:9> has_else
|   |   |     |-BinaryOperator 0x21902a05670 <line:332:18, col:47> 'int' '=='
|   |   |     | |-CallExpr 0x21902a055b0 <col:18, col:42> 'int'
|   |   |     | | |-ImplicitCastExpr 0x21902a05598 <col:18> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   |     | | | `-DeclRefExpr 0x21902a05490 <col:18> 'int (const char *, const char *, unsigned long long)' Function 0x21902a04d60 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   |     | | |-ImplicitCastExpr 0x21902a055e8 <col:26> 'const char *' <LValueToRValue>
|   |   |     | | | `-DeclRefExpr 0x21902a054b0 <col:26> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |   |     | | |-ImplicitCastExpr 0x21902a05618 <col:34> 'const char *' <NoOp>
|   |   |     | | | `-ImplicitCastExpr 0x21902a05600 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |     | | |   `-StringLiteral 0x21902a05520 <col:34> 'char [4]' lvalue "HEX"
|   |   |     | | `-ImplicitCastExpr 0x21902a05630 <col:41> 'unsigned long long' <IntegralCast>
|   |   |     | |   `-IntegerLiteral 0x21902a05540 <col:41> 'int' 3
|   |   |     | `-IntegerLiteral 0x21902a05648 <col:47> 'int' 0
|   |   |     |-BinaryOperator 0x21902a05720 <line:333:13, line:37:33> 'int' '='
|   |   |     | |-MemberExpr 0x21902a056c8 <line:333:13, col:18> 'int' lvalue ->format 0x219029edb08
|   |   |     | | `-ImplicitCastExpr 0x21902a056b0 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |     | |   `-DeclRefExpr 0x21902a05690 <col:13> 'tag_exp_arg *' lvalue Var 0x219029fd168 'arg' 'tag_exp_arg *'
|   |   |     | `-IntegerLiteral 0x21902a056f8 <line:37:33> 'int' 3
|   |   |     `-IfStmt 0x21902a05a60 <line:334:14, line:339:9> has_else
|   |   |       |-BinaryOperator 0x21902a05908 <line:334:18, col:51> 'int' '=='
|   |   |       | |-CallExpr 0x21902a05848 <col:18, col:46> 'int'
|   |   |       | | |-ImplicitCastExpr 0x21902a05830 <col:18> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | | `-DeclRefExpr 0x21902a05740 <col:18> 'int (const char *, const char *, unsigned long long)' Function 0x21902a04d60 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   |       | | |-ImplicitCastExpr 0x21902a05880 <col:26> 'const char *' <LValueToRValue>
|   |   |       | | | `-DeclRefExpr 0x21902a05760 <col:26> 'const char *' lvalue Var 0x21902a03580 'vstart' 'const char *'
|   |   |       | | |-ImplicitCastExpr 0x21902a058b0 <col:34> 'const char *' <NoOp>
|   |   |       | | | `-ImplicitCastExpr 0x21902a05898 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |       | | |   `-StringLiteral 0x21902a057b8 <col:34> 'char [8]' lvalue "BITLIST"
|   |   |       | | `-ImplicitCastExpr 0x21902a058c8 <col:45> 'unsigned long long' <IntegralCast>
|   |   |       | |   `-IntegerLiteral 0x21902a057d8 <col:45> 'int' 7
|   |   |       | `-IntegerLiteral 0x21902a058e0 <col:51> 'int' 0
|   |   |       |-BinaryOperator 0x21902a059b8 <line:335:13, line:39:33> 'int' '='
|   |   |       | |-MemberExpr 0x21902a05960 <line:335:13, col:18> 'int' lvalue ->format 0x219029edb08
|   |   |       | | `-ImplicitCastExpr 0x21902a05948 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |       | |   `-DeclRefExpr 0x21902a05928 <col:13> 'tag_exp_arg *' lvalue Var 0x219029fd168 'arg' 'tag_exp_arg *'
|   |   |       | `-IntegerLiteral 0x21902a05990 <line:39:33> 'int' 4
|   |   |       `-CompoundStmt 0x21902a05a48 <line:336:14, line:339:9>
|   |   |         `-ReturnStmt 0x21902a05a38 <line:338:13, col:21>
|   |   |           `-UnaryOperator 0x21902a05a20 <col:20, col:21> 'int' prefix '-'
|   |   |             `-IntegerLiteral 0x21902a059f8 <col:21> 'int' 1
|   |   `-BreakStmt 0x21902a05b00 <line:340:9>
|   `-ReturnStmt 0x21902a05bc8 <line:344:5, col:12>
|     `-IntegerLiteral 0x21902a05ba0 <col:12> 'int' 1
|-FunctionDecl 0x21902a04d60 <line:328:13> col:13 implicit used strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x21902a04e00 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x21902a04e68 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x21902a04ed0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x21902a05ef8 prev 0x219029ef1d0 <line:348:1, line:401:1> line:348:12 used parse_tagging 'int (const char *, int, int *, int *)' static
| |-ParmVarDecl 0x21902a05c68 <col:26, col:38> col:38 used vstart 'const char *'
| |-ParmVarDecl 0x21902a05ce8 <col:46, col:50> col:50 used vlen 'int'
| |-ParmVarDecl 0x21902a05d68 <col:56, col:61> col:61 used ptag 'int *'
| |-ParmVarDecl 0x21902a05de8 <col:67, col:72> col:72 used pclass 'int *'
| `-CompoundStmt 0x21902a06600 <line:349:1, line:401:1>
|   |-DeclStmt 0x21902a060c0 <line:350:5, col:17>
|   | `-VarDecl 0x21902a06058 <col:5, col:16> col:10 used erch 'char [2]'
|   |-DeclStmt 0x21902a06158 <line:351:5, col:17>
|   | `-VarDecl 0x21902a060f0 <col:5, col:10> col:10 used tag_num 'long'
|   |-DeclStmt 0x21902a061f0 <line:352:5, col:15>
|   | `-VarDecl 0x21902a06188 <col:5, col:11> col:11 used eptr 'char *'
|   |-IfStmt 0x21902a06290 <line:353:5, line:354:16>
|   | |-UnaryOperator 0x21902a06240 <line:353:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x21902a06228 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x21902a06208 <col:10> 'const char *' lvalue ParmVar 0x21902a05c68 'vstart' 'const char *'
|   | `-ReturnStmt 0x21902a06280 <line:354:9, col:16>
|   |   `-IntegerLiteral 0x21902a06258 <col:16> 'int' 0
|   |-BinaryOperator 0x21902a02708 <line:355:5, col:40> 'long' '='
|   | |-DeclRefExpr 0x21902a062a8 <col:5> 'long' lvalue Var 0x21902a060f0 'tag_num' 'long'
|   | `-ImplicitCastExpr 0x21902a026f0 <col:15, col:40> 'long' <IntegralCast>
|   |   `-CallExpr 0x21902a026a0 <col:15, col:40> 'unsigned long'
|   |     |-ImplicitCastExpr 0x21902a02688 <col:15> 'unsigned long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x21902a02570 <col:15> 'unsigned long (const char *, char **, int)' Function 0x21902a06350 'strtoul' 'unsigned long (const char *, char **, int)'
|   |     |-ImplicitCastExpr 0x21902a026d8 <col:23> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x21902a025a8 <col:23> 'const char *' lvalue ParmVar 0x21902a05c68 'vstart' 'const char *'
|   |     |-UnaryOperator 0x21902a02600 <col:31, col:32> 'char **' prefix '&' cannot overflow
|   |     | `-DeclRefExpr 0x21902a025c8 <col:32> 'char *' lvalue Var 0x21902a06188 'eptr' 'char *'
|   |     `-IntegerLiteral 0x21902a02618 <col:38> 'int' 10
|   |-IfStmt 0x21902a029a8 <line:357:5, line:358:16>
|   | |-BinaryOperator 0x21902a02950 <line:357:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x21902a02810 <col:9, col:18> 'int' '&&'
|   | | | |-ImplicitCastExpr 0x21902a027c8 <col:9> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x21902a02728 <col:9> 'char *' lvalue Var 0x21902a06188 'eptr' 'char *'
|   | | | `-ImplicitCastExpr 0x21902a027f8 <col:17, col:18> 'int' <IntegralCast>
|   | | |   `-ImplicitCastExpr 0x21902a027e0 <col:17, col:18> 'char' <LValueToRValue>
|   | | |     `-UnaryOperator 0x21902a027b0 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | | |       `-ImplicitCastExpr 0x21902a02798 <col:18> 'char *' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x21902a02778 <col:18> 'char *' lvalue Var 0x21902a06188 'eptr' 'char *'
|   | | `-ParenExpr 0x21902a02930 <col:26, col:47> 'int'
|   | |   `-BinaryOperator 0x21902a02910 <col:27, col:43> 'int' '>'
|   | |     |-ImplicitCastExpr 0x21902a028e0 <col:27> 'char *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x21902a02830 <col:27> 'char *' lvalue Var 0x21902a06188 'eptr' 'char *'
|   | |     `-ImplicitCastExpr 0x21902a028f8 <col:34, col:43> 'char *' <BitCast>
|   | |       `-BinaryOperator 0x21902a028c0 <col:34, col:43> 'const char *' '+'
|   | |         |-ImplicitCastExpr 0x21902a02890 <col:34> 'const char *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x21902a02850 <col:34> 'const char *' lvalue ParmVar 0x21902a05c68 'vstart' 'const char *'
|   | |         `-ImplicitCastExpr 0x21902a028a8 <col:43> 'int' <LValueToRValue>
|   | |           `-DeclRefExpr 0x21902a02870 <col:43> 'int' lvalue ParmVar 0x21902a05ce8 'vlen' 'int'
|   | `-ReturnStmt 0x21902a02998 <line:358:9, col:16>
|   |   `-IntegerLiteral 0x21902a02970 <col:16> 'int' 0
|   |-IfStmt 0x21902a02ac8 <line:359:5, line:362:5>
|   | |-BinaryOperator 0x21902a02a38 <line:359:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x21902a02a08 <col:9> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x21902a029c0 <col:9> 'long' lvalue Var 0x21902a060f0 'tag_num' 'long'
|   | | `-ImplicitCastExpr 0x21902a02a20 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x21902a029e0 <col:19> 'int' 0
|   | `-CompoundStmt 0x21902a02ab0 <col:22, line:362:5>
|   |   `-ReturnStmt 0x21902a02aa0 <line:361:9, col:16>
|   |     `-IntegerLiteral 0x21902a02a78 <col:16> 'int' 0
|   |-BinaryOperator 0x21902a02b80 <line:363:5, col:13> 'int' '='
|   | |-UnaryOperator 0x21902a02b18 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x21902a02b00 <col:6> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x21902a02ae0 <col:6> 'int *' lvalue ParmVar 0x21902a05d68 'ptag' 'int *'
|   | `-ImplicitCastExpr 0x21902a02b68 <col:13> 'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x21902a02b50 <col:13> 'long' <LValueToRValue>
|   |     `-DeclRefExpr 0x21902a02b30 <col:13> 'long' lvalue Var 0x21902a060f0 'tag_num' 'long'
|   |-IfStmt 0x21902a02d20 <line:365:5, line:368:16> has_else
|   | |-ImplicitCastExpr 0x21902a02bc0 <line:365:9> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x21902a02ba0 <col:9> 'char *' lvalue Var 0x21902a06188 'eptr' 'char *'
|   | |-CompoundAssignOperator 0x21902a02c88 <line:366:9, col:24> 'int' '-=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | | |-DeclRefExpr 0x21902a02bd8 <col:9> 'int' lvalue ParmVar 0x21902a05ce8 'vlen' 'int'
|   | | `-BinaryOperator 0x21902a02c68 <col:17, col:24> 'long long' '-'
|   | |   |-ImplicitCastExpr 0x21902a02c38 <col:17> 'char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x21902a02bf8 <col:17> 'char *' lvalue Var 0x21902a06188 'eptr' 'char *'
|   | |   `-ImplicitCastExpr 0x21902a02c50 <col:24> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x21902a02c18 <col:24> 'const char *' lvalue ParmVar 0x21902a05c68 'vstart' 'const char *'
|   | `-BinaryOperator 0x21902a02d00 <line:368:9, col:16> 'int' '='
|   |   |-DeclRefExpr 0x21902a02cb8 <col:9> 'int' lvalue ParmVar 0x21902a05ce8 'vlen' 'int'
|   |   `-IntegerLiteral 0x21902a02cd8 <col:16> 'int' 0
|   |-IfStmt 0x21902a065a0 <line:369:5, line:397:9> has_else
|   | |-ImplicitCastExpr 0x21902a02d68 <line:369:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x21902a02d48 <col:9> 'int' lvalue ParmVar 0x21902a05ce8 'vlen' 'int'
|   | |-CompoundStmt 0x21902a06530 <col:15, line:396:5>
|   | | `-SwitchStmt 0x21902a02e00 <line:370:9, line:395:9>
|   | |   |-ImplicitCastExpr 0x21902a02de8 <line:370:17, col:18> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x21902a02dd0 <col:17, col:18> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x21902a02db8 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x21902a02da0 <col:18> 'char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x21902a02d80 <col:18> 'char *' lvalue Var 0x21902a06188 'eptr' 'char *'
|   | |   `-CompoundStmt 0x21902a03480 <col:24, line:395:9>
|   | |     |-CaseStmt 0x21902a02e50 <line:372:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x21902a02e38 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x21902a02e20 <col:14> 'int' 85
|   | |     | `-NullStmt 0x21902a02ec8 <<invalid sloc>>
|   | |     |-BreakStmt 0x21902a02ed0 <line:374:13>
|   | |     |-CaseStmt 0x21902a02f08 <line:376:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x21902a02ef0 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x21902a02ed8 <col:14> 'int' 65
|   | |     | `-NullStmt 0x21902a02f80 <<invalid sloc>>
|   | |     |-BreakStmt 0x21902a02f88 <line:378:13>
|   | |     |-CaseStmt 0x21902a02fc0 <line:380:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x21902a02fa8 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x21902a02f90 <col:14> 'int' 80
|   | |     | `-NullStmt 0x21902a03038 <<invalid sloc>>
|   | |     |-BreakStmt 0x21902a03040 <line:382:13>
|   | |     |-CaseStmt 0x21902a03078 <line:384:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x21902a03060 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x21902a03048 <col:14> 'int' 67
|   | |     | `-NullStmt 0x21902a030f0 <<invalid sloc>>
|   | |     |-BreakStmt 0x21902a030f8 <line:386:13>
|   | |     |-DefaultStmt 0x21902a03220 <line:388:9, line:389:24>
|   | |     | `-BinaryOperator 0x21902a03200 <col:13, col:24> 'char' '='
|   | |     |   |-ArraySubscriptExpr 0x21902a03178 <col:13, col:19> 'char' lvalue
|   | |     |   | |-ImplicitCastExpr 0x21902a03160 <col:13> 'char *' <ArrayToPointerDecay>
|   | |     |   | | `-DeclRefExpr 0x21902a03100 <col:13> 'char [2]' lvalue Var 0x21902a06058 'erch' 'char [2]'
|   | |     |   | `-IntegerLiteral 0x21902a03138 <col:18> 'int' 0
|   | |     |   `-ImplicitCastExpr 0x21902a031e8 <col:23, col:24> 'char' <LValueToRValue>
|   | |     |     `-UnaryOperator 0x21902a031d0 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
|   | |     |       `-ImplicitCastExpr 0x21902a031b8 <col:24> 'char *' <LValueToRValue>
|   | |     |         `-DeclRefExpr 0x21902a03198 <col:24> 'char *' lvalue Var 0x21902a06188 'eptr' 'char *'
|   | |     |-BinaryOperator 0x21902a03300 <line:390:13, col:23> 'char' '='
|   | |     | |-ArraySubscriptExpr 0x21902a032a0 <col:13, col:19> 'char' lvalue
|   | |     | | |-ImplicitCastExpr 0x21902a03288 <col:13> 'char *' <ArrayToPointerDecay>
|   | |     | | | `-DeclRefExpr 0x21902a03240 <col:13> 'char [2]' lvalue Var 0x21902a06058 'erch' 'char [2]'
|   | |     | | `-IntegerLiteral 0x21902a03260 <col:18> 'int' 1
|   | |     | `-ImplicitCastExpr 0x21902a032e8 <col:23> 'char' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x21902a032c0 <col:23> 'int' 0
|   | |     |-CallExpr 0x21902a033e0 <line:392:13, col:48> 'int'
|   | |     | |-ImplicitCastExpr 0x21902a033c8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   | |     | | `-DeclRefExpr 0x21902a03340 <col:13> 'int ()' Function 0x21902a04120 'ERR_add_error_data' 'int ()'
|   | |     | |-IntegerLiteral 0x21902a03360 <col:32> 'int' 2
|   | |     | |-ImplicitCastExpr 0x21902a03418 <col:35> 'char *' <ArrayToPointerDecay>
|   | |     | | `-StringLiteral 0x21902a03388 <col:35> 'char [6]' lvalue "Char="
|   | |     | `-ImplicitCastExpr 0x21902a03430 <col:44> 'char *' <ArrayToPointerDecay>
|   | |     |   `-DeclRefExpr 0x21902a033a8 <col:44> 'char [2]' lvalue Var 0x21902a06058 'erch' 'char [2]'
|   | |     `-ReturnStmt 0x21902a03470 <line:393:13, col:20>
|   | |       `-IntegerLiteral 0x21902a03448 <col:20> 'int' 0
|   | `-NullStmt 0x21902a06598 <line:397:9>
|   `-ReturnStmt 0x21902a065f0 <line:399:5, col:12>
|     `-IntegerLiteral 0x21902a065c8 <col:12> 'int' 1
|-FunctionDecl 0x21902a06350 <line:355:15> col:15 implicit used strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x21902a063f0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x21902a06458 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x21902a024f0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x21902a06938 <line:405:1, line:464:1> line:405:19 invalid asn1_multi 'int *(int, const char *, int *, int, int *)' static
| |-ParmVarDecl 0x21902a06680 <col:30, col:34> col:34 used utype 'int'
| |-ParmVarDecl 0x21902a06700 <col:41, col:53> col:53 used section 'const char *'
| |-ParmVarDecl 0x21902a06780 <col:62, col:74> col:74 invalid cnf 'int *'
| |-ParmVarDecl 0x21902a06800 <line:406:30, col:34> col:34 used depth 'int'
| |-ParmVarDecl 0x21902a06880 <col:41, col:46> col:46 used perr 'int *'
| `-CompoundStmt 0x21902a01178 <line:407:1, line:464:1>
|   |-DeclStmt 0x21902a06bc8 <line:411:5, col:30>
|   | `-VarDecl 0x21902a06b60 <col:5, col:20> col:20 used der 'unsigned char *'
|   |-DeclStmt 0x21902a06c60 <line:412:5, col:15>
|   | `-VarDecl 0x21902a06bf8 <col:5, col:9> col:9 used derlen 'int'
|   |-DeclStmt 0x21902a06cf8 <line:413:5, col:10>
|   | `-VarDecl 0x21902a06c90 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x21902a06ed8 <line:415:5, line:416:14>
|   | |-OpaqueValueExpr 0x21902a06ec0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x21902a06ea8 <col:9, col:14> 'bad' 0x21902a06e58
|   |-IfStmt 0x21902a006c8 <line:417:5, line:432:5>
|   | |-ImplicitCastExpr 0x21902a06f28 <line:417:9> 'const char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x21902a06ef0 <col:9> 'const char *' lvalue ParmVar 0x21902a06700 'section' 'const char *'
|   | `-CompoundStmt 0x21902a006a8 <col:18, line:432:5>
|   |   |-IfStmt 0x21902a06f70 <line:418:9, line:419:18>
|   |   | |-OpaqueValueExpr 0x21902a06f58 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x21902a06f40 <col:13, col:18> 'bad' 0x21902a06e58
|   |   `-IfStmt 0x21902a07140 <line:421:9, line:422:18>
|   |     |-OpaqueValueExpr 0x21902a07128 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x21902a07110 <col:13, col:18> 'bad' 0x21902a06e58
|   |-IfStmt 0x21902a00ab0 <line:443:5, line:444:14>
|   | |-BinaryOperator 0x21902a00a78 <line:443:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x21902a00a60 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x21902a00a18 <col:9> 'int' lvalue Var 0x21902a06bf8 'derlen' 'int'
|   | | `-IntegerLiteral 0x21902a00a38 <col:18> 'int' 0
|   | `-GotoStmt 0x21902a00a98 <line:444:9, col:14> 'bad' 0x21902a06e58
|   |-IfStmt 0x21902a00c40 <line:445:5, line:446:14>
|   | |-OpaqueValueExpr 0x21902a00c28 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x21902a00c10 <col:9, col:14> 'bad' 0x21902a06e58
|   |-IfStmt 0x21902a00e10 <line:447:5, line:448:14>
|   | |-OpaqueValueExpr 0x21902a00df8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x21902a00de0 <col:9, col:14> 'bad' 0x21902a06e58
|   `-LabelStmt 0x21902a00f40 <line:456:2, line:458:21> 'bad'
|     `-CallExpr 0x21902a00f00 <col:5, col:21> 'int'
|       |-ImplicitCastExpr 0x21902a00ee8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x21902a00ea8 <col:5> 'int ()' Function 0x219029fcb90 'OPENSSL_free' 'int ()'
|       `-ImplicitCastExpr 0x21902a00f28 <col:18> 'unsigned char *' <LValueToRValue>
|         `-DeclRefExpr 0x21902a00ec8 <col:18> 'unsigned char *' lvalue Var 0x21902a06b60 'der' 'unsigned char *'
|-FunctionDecl 0x21902a09648 prev 0x219029eedf0 <line:466:1, line:500:1> line:466:12 used append_exp 'int (tag_exp_arg *, int, int, int, int, int)' static
| |-ParmVarDecl 0x21902a011e0 <col:23, col:36> col:36 used arg 'tag_exp_arg *'
| |-ParmVarDecl 0x21902a01260 <col:41, col:45> col:45 used exp_tag 'int'
| |-ParmVarDecl 0x21902a012e0 <col:54, col:58> col:58 used exp_class 'int'
| |-ParmVarDecl 0x21902a01360 <line:467:23, col:27> col:27 used exp_constructed 'int'
| |-ParmVarDecl 0x21902a013e0 <col:44, col:48> col:48 used exp_pad 'int'
| |-ParmVarDecl 0x21902a01460 <col:57, col:61> col:61 used imp_ok 'int'
| `-CompoundStmt 0x21902a0a4b0 <line:468:1, line:500:1>
|   |-DeclStmt 0x21902a09790 <line:469:5, col:26>
|   | `-VarDecl 0x21902a09728 <col:5, col:19> col:19 used exp_tmp 'tag_exp_type *'
|   |-IfStmt 0x21902a09988 <line:471:5, line:474:5>
|   | |-BinaryOperator 0x21902a098f8 <line:471:9, col:34> 'int' '&&'
|   | | |-ParenExpr 0x21902a09888 <col:9, col:28> 'int'
|   | | | `-BinaryOperator 0x21902a09868 <col:10, col:27> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x21902a09850 <col:10, col:15> 'int' <LValueToRValue>
|   | | |   | `-MemberExpr 0x21902a097e0 <col:10, col:15> 'int' lvalue ->imp_tag 0x219029ed9b8
|   | | |   |   `-ImplicitCastExpr 0x21902a097c8 <col:10> 'tag_exp_arg *' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x21902a097a8 <col:10> 'tag_exp_arg *' lvalue ParmVar 0x21902a011e0 'arg' 'tag_exp_arg *'
|   | | |   `-UnaryOperator 0x21902a09838 <col:26, col:27> 'int' prefix '-'
|   | | |     `-IntegerLiteral 0x21902a09810 <col:27> 'int' 1
|   | | `-UnaryOperator 0x21902a098e0 <col:33, col:34> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x21902a098c8 <col:34> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x21902a098a8 <col:34> 'int' lvalue ParmVar 0x21902a01460 'imp_ok' 'int'
|   | `-CompoundStmt 0x21902a09970 <col:42, line:474:5>
|   |   `-ReturnStmt 0x21902a09960 <line:473:9, col:16>
|   |     `-IntegerLiteral 0x21902a09938 <col:16> 'int' 0
|   |-IfStmt 0x21902a09ad8 <line:476:5, line:479:5>
|   | |-BinaryOperator 0x21902a09a48 <line:476:9, line:26:33> 'int' '=='
|   | | |-ImplicitCastExpr 0x21902a09a30 <line:476:9, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x21902a099d8 <col:9, col:14> 'int' lvalue ->exp_count 0x219029edda8
|   | | |   `-ImplicitCastExpr 0x21902a099c0 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x21902a099a0 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x21902a011e0 'arg' 'tag_exp_arg *'
|   | | `-IntegerLiteral 0x21902a09a08 <line:26:33> 'int' 20
|   | `-CompoundStmt 0x21902a09ac0 <line:476:46, line:479:5>
|   |   `-ReturnStmt 0x21902a09ab0 <line:478:9, col:16>
|   |     `-IntegerLiteral 0x21902a09a88 <col:16> 'int' 0
|   |-BinaryOperator 0x21902a09c60 <line:481:5, col:46> 'tag_exp_type *' '='
|   | |-DeclRefExpr 0x21902a09af0 <col:5> 'tag_exp_type *' lvalue Var 0x21902a09728 'exp_tmp' 'tag_exp_type *'
|   | `-UnaryOperator 0x21902a09c48 <col:15, col:46> 'tag_exp_type *' prefix '&' cannot overflow
|   |   `-ArraySubscriptExpr 0x21902a09c28 <col:16, col:46> 'tag_exp_type':'tag_exp_type' lvalue
|   |     |-ImplicitCastExpr 0x21902a09c10 <col:16, col:21> 'tag_exp_type *' <ArrayToPointerDecay>
|   |     | `-MemberExpr 0x21902a09b60 <col:16, col:21> 'tag_exp_type [20]' lvalue ->exp_list 0x219029edd38
|   |     |   `-ImplicitCastExpr 0x21902a09b48 <col:16> 'tag_exp_arg *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x21902a09b28 <col:16> 'tag_exp_arg *' lvalue ParmVar 0x21902a011e0 'arg' 'tag_exp_arg *'
|   |     `-UnaryOperator 0x21902a09bf8 <col:30, col:44> 'int' postfix '++'
|   |       `-MemberExpr 0x21902a09bc8 <col:30, col:35> 'int' lvalue ->exp_count 0x219029edda8
|   |         `-ImplicitCastExpr 0x21902a09bb0 <col:30> 'tag_exp_arg *' <LValueToRValue>
|   |           `-DeclRefExpr 0x21902a09b90 <col:30> 'tag_exp_arg *' lvalue ParmVar 0x21902a011e0 'arg' 'tag_exp_arg *'
|   |-IfStmt 0x21902a0a2d0 <line:487:5, line:495:5> has_else
|   | |-BinaryOperator 0x21902a09d40 <line:487:9, col:26> 'int' '!='
|   | | |-ImplicitCastExpr 0x21902a09d28 <col:9, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x21902a09cb8 <col:9, col:14> 'int' lvalue ->imp_tag 0x219029ed9b8
|   | | |   `-ImplicitCastExpr 0x21902a09ca0 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x21902a09c80 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x21902a011e0 'arg' 'tag_exp_arg *'
|   | | `-UnaryOperator 0x21902a09d10 <col:25, col:26> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x21902a09ce8 <col:26> 'int' 1
|   | |-CompoundStmt 0x21902a0a100 <col:29, line:492:5>
|   | | |-BinaryOperator 0x21902a09e48 <line:488:9, col:33> 'int' '='
|   | | | |-MemberExpr 0x21902a09d98 <col:9, col:18> 'int' lvalue ->exp_tag 0x219029ed608
|   | | | | `-ImplicitCastExpr 0x21902a09d80 <col:9> 'tag_exp_type *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x21902a09d60 <col:9> 'tag_exp_type *' lvalue Var 0x21902a09728 'exp_tmp' 'tag_exp_type *'
|   | | | `-ImplicitCastExpr 0x21902a09e30 <col:28, col:33> 'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x21902a09e00 <col:28, col:33> 'int' lvalue ->imp_tag 0x219029ed9b8
|   | | |     `-ImplicitCastExpr 0x21902a09de8 <col:28> 'tag_exp_arg *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x21902a09dc8 <col:28> 'tag_exp_arg *' lvalue ParmVar 0x21902a011e0 'arg' 'tag_exp_arg *'
|   | | |-BinaryOperator 0x21902a09f50 <line:489:9, col:35> 'int' '='
|   | | | |-MemberExpr 0x21902a09ea0 <col:9, col:18> 'int' lvalue ->exp_class 0x219029ed678
|   | | | | `-ImplicitCastExpr 0x21902a09e88 <col:9> 'tag_exp_type *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x21902a09e68 <col:9> 'tag_exp_type *' lvalue Var 0x21902a09728 'exp_tmp' 'tag_exp_type *'
|   | | | `-ImplicitCastExpr 0x21902a09f38 <col:30, col:35> 'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x21902a09f08 <col:30, col:35> 'int' lvalue ->imp_class 0x219029eda28
|   | | |     `-ImplicitCastExpr 0x21902a09ef0 <col:30> 'tag_exp_arg *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x21902a09ed0 <col:30> 'tag_exp_arg *' lvalue ParmVar 0x21902a011e0 'arg' 'tag_exp_arg *'
|   | | |-BinaryOperator 0x21902a0a018 <line:490:9, col:25> 'int' '='
|   | | | |-MemberExpr 0x21902a09fa8 <col:9, col:14> 'int' lvalue ->imp_tag 0x219029ed9b8
|   | | | | `-ImplicitCastExpr 0x21902a09f90 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x21902a09f70 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x21902a011e0 'arg' 'tag_exp_arg *'
|   | | | `-UnaryOperator 0x21902a0a000 <col:24, col:25> 'int' prefix '-'
|   | | |   `-IntegerLiteral 0x21902a09fd8 <col:25> 'int' 1
|   | | `-BinaryOperator 0x21902a0a0e0 <line:491:9, col:27> 'int' '='
|   | |   |-MemberExpr 0x21902a0a070 <col:9, col:14> 'int' lvalue ->imp_class 0x219029eda28
|   | |   | `-ImplicitCastExpr 0x21902a0a058 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x21902a0a038 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x21902a011e0 'arg' 'tag_exp_arg *'
|   | |   `-UnaryOperator 0x21902a0a0c8 <col:26, col:27> 'int' prefix '-'
|   | |     `-IntegerLiteral 0x21902a0a0a0 <col:27> 'int' 1
|   | `-CompoundStmt 0x21902a0a2b0 <line:492:12, line:495:5>
|   |   |-BinaryOperator 0x21902a0a1d0 <line:493:9, col:28> 'int' '='
|   |   | |-MemberExpr 0x21902a0a168 <col:9, col:18> 'int' lvalue ->exp_tag 0x219029ed608
|   |   | | `-ImplicitCastExpr 0x21902a0a150 <col:9> 'tag_exp_type *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x21902a0a130 <col:9> 'tag_exp_type *' lvalue Var 0x21902a09728 'exp_tmp' 'tag_exp_type *'
|   |   | `-ImplicitCastExpr 0x21902a0a1b8 <col:28> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x21902a0a198 <col:28> 'int' lvalue ParmVar 0x21902a01260 'exp_tag' 'int'
|   |   `-BinaryOperator 0x21902a0a290 <line:494:9, col:30> 'int' '='
|   |     |-MemberExpr 0x21902a0a228 <col:9, col:18> 'int' lvalue ->exp_class 0x219029ed678
|   |     | `-ImplicitCastExpr 0x21902a0a210 <col:9> 'tag_exp_type *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x21902a0a1f0 <col:9> 'tag_exp_type *' lvalue Var 0x21902a09728 'exp_tmp' 'tag_exp_type *'
|   |     `-ImplicitCastExpr 0x21902a0a278 <col:30> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x21902a0a258 <col:30> 'int' lvalue ParmVar 0x21902a012e0 'exp_class' 'int'
|   |-BinaryOperator 0x21902a0a398 <line:496:5, col:32> 'int' '='
|   | |-MemberExpr 0x21902a0a330 <col:5, col:14> 'int' lvalue ->exp_constructed 0x219029ed6e8
|   | | `-ImplicitCastExpr 0x21902a0a318 <col:5> 'tag_exp_type *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x21902a0a2f8 <col:5> 'tag_exp_type *' lvalue Var 0x21902a09728 'exp_tmp' 'tag_exp_type *'
|   | `-ImplicitCastExpr 0x21902a0a380 <col:32> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x21902a0a360 <col:32> 'int' lvalue ParmVar 0x21902a01360 'exp_constructed' 'int'
|   |-BinaryOperator 0x21902a0a458 <line:497:5, col:24> 'int' '='
|   | |-MemberExpr 0x21902a0a3f0 <col:5, col:14> 'int' lvalue ->exp_pad 0x219029ed758
|   | | `-ImplicitCastExpr 0x21902a0a3d8 <col:5> 'tag_exp_type *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x21902a0a3b8 <col:5> 'tag_exp_type *' lvalue Var 0x21902a09728 'exp_tmp' 'tag_exp_type *'
|   | `-ImplicitCastExpr 0x21902a0a440 <col:24> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x21902a0a420 <col:24> 'int' lvalue ParmVar 0x21902a013e0 'exp_pad' 'int'
|   `-ReturnStmt 0x21902a0a4a0 <line:499:5, col:12>
|     `-IntegerLiteral 0x21902a0a478 <col:12> 'int' 1
|-FunctionDecl 0x21902a0a6c0 prev 0x219029efb80 <line:502:1, line:576:1> line:502:12 used asn1_str2tag 'int (const char *, int)' static
| |-ParmVarDecl 0x21902a0a570 <col:25, col:37> col:37 used tagstr 'const char *'
| |-ParmVarDecl 0x21902a0a5f0 <col:45, col:49> col:49 used len 'int'
| `-CompoundStmt 0x21902a13d30 <line:503:1, line:576:1>
|   |-DeclStmt 0x21902a0a7f0 <line:504:5, col:19>
|   | `-VarDecl 0x21902a0a788 <col:5, col:18> col:18 used i 'unsigned int'
|   |-DeclStmt 0x21902a0c108 <line:505:5, line:564:6>
|   | |-VarDecl 0x21902a0a8c0 <line:505:5, col:38> col:38 used tntmp 'const struct tag_name_st *' static
|   | `-VarDecl 0x21902a0a9b8 <col:5, col:50> col:45 used tnst 'const struct tag_name_st []' static
|   |-IfStmt 0x21902a0c448 <line:566:5, line:567:28>
|   | |-BinaryOperator 0x21902a0c198 <line:566:9, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x21902a0c180 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x21902a0c120 <col:9> 'int' lvalue ParmVar 0x21902a0a5f0 'len' 'int'
|   | | `-UnaryOperator 0x21902a0c168 <col:16, col:17> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x21902a0c140 <col:17> 'int' 1
|   | `-BinaryOperator 0x21902a0c428 <line:567:9, col:28> 'int' '='
|   |   |-DeclRefExpr 0x21902a0c1b8 <col:9> 'int' lvalue ParmVar 0x21902a0a5f0 'len' 'int'
|   |   `-ImplicitCastExpr 0x21902a0c410 <col:15, col:28> 'int' <IntegralCast>
|   |     `-CallExpr 0x21902a0c3d0 <col:15, col:28> 'unsigned long long'
|   |       |-ImplicitCastExpr 0x21902a0c3b8 <col:15> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x21902a0c320 <col:15> 'unsigned long long (const char *)' Function 0x21902a0c210 'strlen' 'unsigned long long (const char *)'
|   |       `-ImplicitCastExpr 0x21902a0c3f8 <col:22> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x21902a0c358 <col:22> 'const char *' lvalue ParmVar 0x21902a0a570 'tagstr' 'const char *'
|   |-BinaryOperator 0x21902a0c4e8 <line:569:5, col:13> 'const struct tag_name_st *' '='
|   | |-DeclRefExpr 0x21902a0c460 <col:5> 'const struct tag_name_st *' lvalue Var 0x21902a0a8c0 'tntmp' 'const struct tag_name_st *'
|   | `-ImplicitCastExpr 0x21902a0c4d0 <col:13> 'const struct tag_name_st *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x21902a0c498 <col:13> 'const struct tag_name_st []' lvalue Var 0x21902a0a9b8 'tnst' 'const struct tag_name_st []'
|   |-ForStmt 0x21902a13ca8 <line:570:5, line:573:5>
|   | |-BinaryOperator 0x21902a13600 <line:570:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x21902a0c508 <col:10> 'unsigned int' lvalue Var 0x21902a0a788 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x21902a0c568 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x21902a0c540 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x21902a137f8 <col:17, col:36> 'int' '<'
|   | | |-ImplicitCastExpr 0x21902a137c8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x21902a13620 <col:17> 'unsigned int' lvalue Var 0x21902a0a788 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x21902a137e0 <col:21, col:36> 'unsigned int' <IntegralCast>
|   | |   `-CallExpr 0x21902a13788 <col:21, col:36> 'int'
|   | |     |-ImplicitCastExpr 0x21902a13770 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x21902a13730 <col:21> 'int ()' Function 0x21902a13668 'OSSL_NELEM' 'int ()'
|   | |     `-ImplicitCastExpr 0x21902a137b0 <col:32> 'const struct tag_name_st *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x21902a13750 <col:32> 'const struct tag_name_st []' lvalue Var 0x21902a0a9b8 'tnst' 'const struct tag_name_st []'
|   | |-BinaryOperator 0x21902a13888 <col:39, col:49> 'const struct tag_name_st *' ','
|   | | |-UnaryOperator 0x21902a13838 <col:39, col:40> 'unsigned int' postfix '++'
|   | | | `-DeclRefExpr 0x21902a13818 <col:39> 'unsigned int' lvalue Var 0x21902a0a788 'i' 'unsigned int'
|   | | `-UnaryOperator 0x21902a13870 <col:44, col:49> 'const struct tag_name_st *' postfix '++'
|   | |   `-DeclRefExpr 0x21902a13850 <col:44> 'const struct tag_name_st *' lvalue Var 0x21902a0a8c0 'tntmp' 'const struct tag_name_st *'
|   | `-CompoundStmt 0x21902a13c90 <col:53, line:573:5>
|   |   `-IfStmt 0x21902a13c78 <line:571:9, line:572:27>
|   |     |-BinaryOperator 0x21902a13bc8 <line:571:13, col:77> 'int' '&&'
|   |     | |-ParenExpr 0x21902a13980 <col:13, col:31> 'int'
|   |     | | `-BinaryOperator 0x21902a13960 <col:14, col:28> 'int' '=='
|   |     | |   |-ImplicitCastExpr 0x21902a13930 <col:14> 'int' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x21902a138a8 <col:14> 'int' lvalue ParmVar 0x21902a0a5f0 'len' 'int'
|   |     | |   `-ImplicitCastExpr 0x21902a13948 <col:21, col:28> 'int' <LValueToRValue>
|   |     | |     `-MemberExpr 0x21902a13900 <col:21, col:28> 'const int' lvalue ->len 0x21902987be8
|   |     | |       `-ImplicitCastExpr 0x21902a138e8 <col:21> 'const struct tag_name_st *' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x21902a138c8 <col:21> 'const struct tag_name_st *' lvalue Var 0x21902a0a8c0 'tntmp' 'const struct tag_name_st *'
|   |     | `-ParenExpr 0x21902a13ba8 <col:36, col:77> 'int'
|   |     |   `-BinaryOperator 0x21902a13b88 <col:37, col:76> 'int' '=='
|   |     |     |-CallExpr 0x21902a13ac8 <col:37, col:71> 'int'
|   |     |     | |-ImplicitCastExpr 0x21902a13ab0 <col:37> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |     |     | | `-DeclRefExpr 0x21902a139a0 <col:37> 'int (const char *, const char *, unsigned long long)' Function 0x21902a04d60 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |     |     | |-ImplicitCastExpr 0x21902a13b00 <col:45, col:52> 'const char *' <LValueToRValue>
|   |     |     | | `-MemberExpr 0x21902a139f8 <col:45, col:52> 'const char *const' lvalue ->strnam 0x21902987b78
|   |     |     | |   `-ImplicitCastExpr 0x21902a139e0 <col:45> 'const struct tag_name_st *' <LValueToRValue>
|   |     |     | |     `-DeclRefExpr 0x21902a139c0 <col:45> 'const struct tag_name_st *' lvalue Var 0x21902a0a8c0 'tntmp' 'const struct tag_name_st *'
|   |     |     | |-ImplicitCastExpr 0x21902a13b18 <col:60> 'const char *' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x21902a13a28 <col:60> 'const char *' lvalue ParmVar 0x21902a0a570 'tagstr' 'const char *'
|   |     |     | `-ImplicitCastExpr 0x21902a13b48 <col:68> 'unsigned long long' <IntegralCast>
|   |     |     |   `-ImplicitCastExpr 0x21902a13b30 <col:68> 'int' <LValueToRValue>
|   |     |     |     `-DeclRefExpr 0x21902a13a48 <col:68> 'int' lvalue ParmVar 0x21902a0a5f0 'len' 'int'
|   |     |     `-IntegerLiteral 0x21902a13b60 <col:76> 'int' 0
|   |     `-ReturnStmt 0x21902a13c68 <line:572:13, col:27>
|   |       `-ImplicitCastExpr 0x21902a13c50 <col:20, col:27> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x21902a13c20 <col:20, col:27> 'const int' lvalue ->tag 0x219029ed4e0
|   |           `-ImplicitCastExpr 0x21902a13c08 <col:20> 'const struct tag_name_st *' <LValueToRValue>
|   |             `-DeclRefExpr 0x21902a13be8 <col:20> 'const struct tag_name_st *' lvalue Var 0x21902a0a8c0 'tntmp' 'const struct tag_name_st *'
|   `-ReturnStmt 0x21902a13d20 <line:575:5, col:13>
|     `-UnaryOperator 0x21902a13d08 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x21902a13ce0 <col:13> 'int' 1
|-FunctionDecl 0x21902a0c210 <line:567:15> col:15 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x21902a0c2b0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x21902a13f78 <line:578:1, line:743:1> line:578:19 invalid asn1_str2type 'int *(const char *, int, int)' static
| |-ParmVarDecl 0x21902a13d88 <col:33, col:45> col:45 used str 'const char *'
| |-ParmVarDecl 0x21902a13e08 <col:50, col:54> col:54 used format 'int'
| |-ParmVarDecl 0x21902a13e88 <col:62, col:66> col:66 used utype 'int'
| `-CompoundStmt 0x21902a10828 <line:579:1, line:743:1>
|   |-DeclStmt 0x21902a140c8 <line:582:5, col:25>
|   | `-VarDecl 0x21902a14060 <col:5, col:20> col:20 used rdata 'unsigned char *'
|   |-DeclStmt 0x21902a14160 <line:583:5, col:15>
|   | `-VarDecl 0x21902a140f8 <col:5, col:10> col:10 used rdlen 'long'
|   |-DeclStmt 0x21902a14220 <line:584:5, col:22>
|   | `-VarDecl 0x21902a14190 <col:5, col:21> col:9 used no_unused 'int' cinit
|   |   `-IntegerLiteral 0x21902a141f8 <col:21> 'int' 1
|   |-IfStmt 0x21902a142d8 <line:586:5, line:589:5>
|   | |-OpaqueValueExpr 0x21902a142c0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x21902a142b0 <line:586:43, line:589:5>
|   |-IfStmt 0x21902a14400 <line:591:5, line:592:15>
|   | |-UnaryOperator 0x21902a14328 <line:591:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x21902a14310 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x21902a142f0 <col:10> 'const char *' lvalue ParmVar 0x21902a13d88 'str' 'const char *'
|   | `-BinaryOperator 0x21902a143e0 <line:592:9, col:15> 'const char *' '='
|   |   |-DeclRefExpr 0x21902a14340 <col:9> 'const char *' lvalue ParmVar 0x21902a13d88 'str' 'const char *'
|   |   `-ImplicitCastExpr 0x21902a143c8 <col:15> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x21902a143b0 <col:15> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x21902a14398 <col:15> 'char [1]' lvalue ""
|   |-SwitchStmt 0x21902a14450 <line:594:5, line:731:5>
|   | |-ImplicitCastExpr 0x21902a14438 <line:594:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x21902a14418 <col:13> 'int' lvalue ParmVar 0x21902a13e88 'utype' 'int'
|   | `-CompoundStmt 0x21902a105d0 <col:20, line:731:5>
|   |   |-IfStmt 0x21902a145e8 <line:597:9, line:600:9>
|   |   | |-BinaryOperator 0x21902a14528 <line:597:13, col:21> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x21902a144e0 <col:13> 'const char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x21902a14470 <col:13> 'const char *' lvalue ParmVar 0x21902a13d88 'str' 'const char *'
|   |   | | `-ImplicitCastExpr 0x21902a14510 <col:20, col:21> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x21902a144f8 <col:20, col:21> 'char' <LValueToRValue>
|   |   | |     `-UnaryOperator 0x21902a144c8 <col:20, col:21> 'const char' lvalue prefix '*' cannot overflow
|   |   | |       `-ImplicitCastExpr 0x21902a144b0 <col:21> 'const char *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x21902a14490 <col:21> 'const char *' lvalue ParmVar 0x21902a13d88 'str' 'const char *'
|   |   | `-CompoundStmt 0x21902a145d0 <col:26, line:600:9>
|   |   |   `-GotoStmt 0x21902a145b8 <line:599:13, col:18> 'bad_form' 0x21902a14568
|   |   |-BreakStmt 0x21902a0c590 <line:601:9>
|   |   |-IfStmt 0x21902a0c668 <line:604:9, line:607:9>
|   |   | |-BinaryOperator 0x21902a0c5f8 <line:604:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x21902a0c5e0 <line:604:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x21902a0c598 <col:13> 'int' lvalue ParmVar 0x21902a13e08 'format' 'int'
|   |   | | `-IntegerLiteral 0x21902a0c5b8 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x21902a0c650 <line:604:46, line:607:9>
|   |   |   `-GotoStmt 0x21902a0c638 <line:606:13, col:18> 'bad_form' 0x21902a14568
|   |   |-IfStmt 0x21902a0c8c0 <line:611:9, line:614:9>
|   |   | |-OpaqueValueExpr 0x21902a0c8a8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x21902a0c890 <line:611:66, line:614:9>
|   |   |   `-GotoStmt 0x21902a0c878 <line:613:13, col:18> 'bad_str' 0x21902a0c828
|   |   |-BreakStmt 0x21902a0c8d8 <line:615:9>
|   |   |-IfStmt 0x21902a0c9b0 <line:619:9, line:622:9>
|   |   | |-BinaryOperator 0x21902a0c940 <line:619:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x21902a0c928 <line:619:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x21902a0c8e0 <col:13> 'int' lvalue ParmVar 0x21902a13e08 'format' 'int'
|   |   | | `-IntegerLiteral 0x21902a0c900 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x21902a0c998 <line:619:46, line:622:9>
|   |   |   `-GotoStmt 0x21902a0c980 <line:621:13, col:18> 'bad_form' 0x21902a14568
|   |   |-IfStmt 0x21902a0cb60 <line:623:9, line:627:9>
|   |   | |-OpaqueValueExpr 0x21902a0cb48 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x21902a0cb30 <line:624:61, line:627:9>
|   |   |   `-GotoStmt 0x21902a0cb18 <line:626:13, col:18> 'bad_str' 0x21902a0c828
|   |   |-BreakStmt 0x21902a0cb78 <line:628:9>
|   |   |-IfStmt 0x21902a0cc50 <line:631:9, line:634:9>
|   |   | |-BinaryOperator 0x21902a0cbe0 <line:631:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x21902a0cbc8 <line:631:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x21902a0cb80 <col:13> 'int' lvalue ParmVar 0x21902a13e08 'format' 'int'
|   |   | | `-IntegerLiteral 0x21902a0cba0 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x21902a0cc38 <line:631:46, line:634:9>
|   |   |   `-GotoStmt 0x21902a0cc20 <line:633:13, col:18> 'bad_form' 0x21902a14568
|   |   |-IfStmt 0x21902a0ce88 <line:635:9, line:638:9>
|   |   | |-OpaqueValueExpr 0x21902a0ce70 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x21902a0ce58 <line:635:65, line:638:9>
|   |   |   `-GotoStmt 0x21902a0ce40 <line:637:13, col:18> 'bad_str' 0x21902a0c828
|   |   |-BreakStmt 0x21902a0cea0 <line:639:9>
|   |   |-IfStmt 0x21902a0cf78 <line:643:9, line:646:9>
|   |   | |-BinaryOperator 0x21902a0cf08 <line:643:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x21902a0cef0 <line:643:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x21902a0cea8 <col:13> 'int' lvalue ParmVar 0x21902a13e08 'format' 'int'
|   |   | | `-IntegerLiteral 0x21902a0cec8 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x21902a0cf60 <line:643:46, line:646:9>
|   |   |   `-GotoStmt 0x21902a0cf48 <line:645:13, col:18> 'bad_form' 0x21902a14568
|   |   |-IfStmt 0x21902a0d140 <line:647:9, line:650:9>
|   |   | |-OpaqueValueExpr 0x21902a0d128 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x21902a0d110 <line:647:68, line:650:9>
|   |   |   `-GotoStmt 0x21902a0d0f8 <line:649:13, col:18> 'bad_str' 0x21902a0c828
|   |   |-IfStmt 0x21902a0d330 <line:651:9, line:654:9>
|   |   | |-OpaqueValueExpr 0x21902a0d318 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x21902a0d300 <line:651:65, line:654:9>
|   |   |   `-GotoStmt 0x21902a0d2e8 <line:653:13, col:18> 'bad_str' 0x21902a0c828
|   |   |-IfStmt 0x21902a0d4e0 <line:656:9, line:659:9>
|   |   | |-OpaqueValueExpr 0x21902a0d4c8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x21902a0d4b0 <line:656:56, line:659:9>
|   |   |   `-GotoStmt 0x21902a0d498 <line:658:13, col:18> 'bad_str' 0x21902a0c828
|   |   |-BreakStmt 0x21902a0d4f8 <line:661:9>
|   |   |-IfStmt 0x21902a0d6e8 <line:672:9, line:679:9> has_else
|   |   | |-BinaryOperator 0x21902a0d560 <line:672:13, line:33:33> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x21902a0d548 <line:672:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x21902a0d500 <col:13> 'int' lvalue ParmVar 0x21902a13e08 'format' 'int'
|   |   | | `-IntegerLiteral 0x21902a0d520 <line:33:33> 'int' 1
|   |   | |-NullStmt 0x21902a0d6e0 <line:673:13>
|   |   | `-IfStmt 0x21902a0d6b8 <line:674:14, line:679:9> has_else
|   |   |   |-BinaryOperator 0x21902a0d620 <line:674:18, line:35:33> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x21902a0d608 <line:674:18> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x21902a0d5c0 <col:18> 'int' lvalue ParmVar 0x21902a13e08 'format' 'int'
|   |   |   | `-IntegerLiteral 0x21902a0d5e0 <line:35:33> 'int' 2
|   |   |   |-NullStmt 0x21902a0d6b0 <line:675:13>
|   |   |   `-CompoundStmt 0x21902a0d698 <line:676:14, line:679:9>
|   |   |     `-GotoStmt 0x21902a0d680 <line:678:13, col:18> 'bad_form' 0x21902a14568
|   |   |-IfStmt 0x21902a0db10 <line:681:9, line:685:9>
|   |   | |-OpaqueValueExpr 0x21902a0daf8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x21902a0dae0 <line:682:71, line:685:9>
|   |   |   `-GotoStmt 0x21902a0dac8 <line:684:13, col:18> 'bad_str' 0x21902a0c828
|   |   |-BreakStmt 0x21902a0db28 <line:687:9>
|   |   |-IfStmt 0x21902a0dbf0 <line:691:9, line:694:9>
|   |   | |-OpaqueValueExpr 0x21902a0dbd8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x21902a0dbc0 <line:691:68, line:694:9>
|   |   |   `-GotoStmt 0x21902a0dba8 <line:693:13, col:18> 'bad_form' 0x21902a14568
|   |   |-IfStmt 0x21902a0e430 <line:696:9, line:718:9> has_else
|   |   | |-BinaryOperator 0x21902a0dc68 <line:696:13, line:37:33> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x21902a0dc50 <line:696:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x21902a0dc08 <col:13> 'int' lvalue ParmVar 0x21902a13e08 'format' 'int'
|   |   | | `-IntegerLiteral 0x21902a0dc28 <line:37:33> 'int' 3
|   |   | |-CompoundStmt 0x21902a0dfd8 <line:696:44, line:704:9>
|   |   | | `-IfStmt 0x21902a0df60 <line:697:13, line:700:13>
|   |   | |   |-OpaqueValueExpr 0x21902a0df48 <<invalid sloc>> '_Bool'
|   |   | |   `-CompoundStmt 0x21902a0df30 <line:697:68, line:700:13>
|   |   | |     `-GotoStmt 0x21902a0df18 <line:699:17, col:22> 'bad_str' 0x21902a0c828
|   |   | `-IfStmt 0x21902a0e408 <line:704:16, line:718:9> has_else
|   |   |   |-BinaryOperator 0x21902a0e050 <line:704:20, line:33:33> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x21902a0e038 <line:704:20> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x21902a0dff0 <col:20> 'int' lvalue ParmVar 0x21902a13e08 'format' 'int'
|   |   |   | `-IntegerLiteral 0x21902a0e010 <line:33:33> 'int' 1
|   |   |   |-NullStmt 0x21902a0e400 <line:705:13>
|   |   |   `-IfStmt 0x21902a0e3d8 <line:706:14, line:718:9> has_else
|   |   |     |-OpaqueValueExpr 0x21902a0e3c0 <<invalid sloc>> '_Bool'
|   |   |     |-CompoundStmt 0x21902a0e350 <line:707:51, line:715:9>
|   |   |     | |-IfStmt 0x21902a0e2b8 <line:708:13, line:712:13>
|   |   |     | | |-OpaqueValueExpr 0x21902a0e2a0 <<invalid sloc>> '_Bool'
|   |   |     | | `-CompoundStmt 0x21902a0e288 <line:709:67, line:712:13>
|   |   |     | |   `-GotoStmt 0x21902a0e270 <line:711:17, col:22> 'bad_str' 0x21902a0c828
|   |   |     | `-BinaryOperator 0x21902a0e330 <line:713:13, col:25> 'int' '='
|   |   |     |   |-DeclRefExpr 0x21902a0e2d0 <col:13> 'int' lvalue Var 0x21902a14190 'no_unused' 'int'
|   |   |     |   `-IntegerLiteral 0x21902a0e308 <col:25> 'int' 0
|   |   |     `-CompoundStmt 0x21902a0e3a8 <line:715:16, line:718:9>
|   |   |       `-GotoStmt 0x21902a0e390 <line:717:13, col:18> 'bad_form' 0x21902a14568
|   |   |-IfStmt 0x21902a0e4e8 <line:720:9, line:724:9>
|   |   | |-OpaqueValueExpr 0x21902a0e4d0 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x21902a0e4c0 <line:720:56, line:724:9>
|   |   |-BreakStmt 0x21902a0e500 <line:726:9>
|   |   |-DefaultStmt 0x21902a0e530 <line:728:5, col:12>
|   |   | `-NullStmt 0x21902a0e528 <col:12>
|   |   `-GotoStmt 0x21902a0e550 <line:730:9, col:14> 'bad_str' 0x21902a0c828
|   |-LabelStmt 0x21902a107d0 <line:736:2, line:737:41> 'bad_str'
|   | `-CallExpr 0x21902a10768 <col:5, col:41> 'int'
|   |   |-ImplicitCastExpr 0x21902a10750 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x21902a106c8 <col:5> 'int ()' Function 0x21902a04120 'ERR_add_error_data' 'int ()'
|   |   |-IntegerLiteral 0x21902a106e8 <col:24> 'int' 2
|   |   |-ImplicitCastExpr 0x21902a107a0 <col:27> 'char *' <ArrayToPointerDecay>
|   |   | `-StringLiteral 0x21902a10710 <col:27> 'char [8]' lvalue "string="
|   |   `-ImplicitCastExpr 0x21902a107b8 <col:38> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x21902a10730 <col:38> 'const char *' lvalue ParmVar 0x21902a13d88 'str' 'const char *'
|   `-LabelStmt 0x21902a10810 <line:738:2, col:10> 'bad_form'
|     `-NullStmt 0x21902a10808 <col:10>
|-FunctionDecl 0x21902a10a80 prev 0x219029ee4f0 <line:745:1, line:763:1> line:745:12 used bitstr_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x21902a10890 <col:22, col:34> col:34 used elem 'const char *'
| |-ParmVarDecl 0x21902a10910 <col:40, col:44> col:44 used len 'int'
| |-ParmVarDecl 0x21902a10990 <col:49, col:55> col:55 used bitstr 'void *'
| `-CompoundStmt 0x21902a11508 <line:746:1, line:763:1>
|   |-DeclStmt 0x21902a10bb8 <line:747:5, col:16>
|   | `-VarDecl 0x21902a10b50 <col:5, col:10> col:10 used bitnum 'long'
|   |-DeclStmt 0x21902a10c50 <line:748:5, col:15>
|   | `-VarDecl 0x21902a10be8 <col:5, col:11> col:11 used eptr 'char *'
|   |-IfStmt 0x21902a10cf0 <line:749:5, line:750:16>
|   | |-UnaryOperator 0x21902a10ca0 <line:749:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x21902a10c88 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x21902a10c68 <col:10> 'const char *' lvalue ParmVar 0x21902a10890 'elem' 'const char *'
|   | `-ReturnStmt 0x21902a10ce0 <line:750:9, col:16>
|   |   `-IntegerLiteral 0x21902a10cb8 <col:16> 'int' 0
|   |-BinaryOperator 0x21902a10e90 <line:751:5, col:37> 'long' '='
|   | |-DeclRefExpr 0x21902a10d08 <col:5> 'long' lvalue Var 0x21902a10b50 'bitnum' 'long'
|   | `-ImplicitCastExpr 0x21902a10e78 <col:14, col:37> 'long' <IntegralCast>
|   |   `-CallExpr 0x21902a10e28 <col:14, col:37> 'unsigned long'
|   |     |-ImplicitCastExpr 0x21902a10e10 <col:14> 'unsigned long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x21902a10d40 <col:14> 'unsigned long (const char *, char **, int)' Function 0x21902a06350 'strtoul' 'unsigned long (const char *, char **, int)'
|   |     |-ImplicitCastExpr 0x21902a10e60 <col:22> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x21902a10d60 <col:22> 'const char *' lvalue ParmVar 0x21902a10890 'elem' 'const char *'
|   |     |-UnaryOperator 0x21902a10db8 <col:28, col:29> 'char **' prefix '&' cannot overflow
|   |     | `-DeclRefExpr 0x21902a10d80 <col:29> 'char *' lvalue Var 0x21902a10be8 'eptr' 'char *'
|   |     `-IntegerLiteral 0x21902a10dd0 <col:35> 'int' 10
|   |-IfStmt 0x21902a11100 <line:752:5, line:753:16>
|   | |-BinaryOperator 0x21902a110a8 <line:752:9, col:45> 'int' '&&'
|   | | |-BinaryOperator 0x21902a10f68 <col:9, col:18> 'int' '&&'
|   | | | |-ImplicitCastExpr 0x21902a10f20 <col:9> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x21902a10eb0 <col:9> 'char *' lvalue Var 0x21902a10be8 'eptr' 'char *'
|   | | | `-ImplicitCastExpr 0x21902a10f50 <col:17, col:18> 'int' <IntegralCast>
|   | | |   `-ImplicitCastExpr 0x21902a10f38 <col:17, col:18> 'char' <LValueToRValue>
|   | | |     `-UnaryOperator 0x21902a10f08 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | | |       `-ImplicitCastExpr 0x21902a10ef0 <col:18> 'char *' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x21902a10ed0 <col:18> 'char *' lvalue Var 0x21902a10be8 'eptr' 'char *'
|   | | `-ParenExpr 0x21902a11088 <col:26, col:45> 'int'
|   | |   `-BinaryOperator 0x21902a11068 <col:27, col:42> 'int' '!='
|   | |     |-ImplicitCastExpr 0x21902a11038 <col:27> 'char *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x21902a10f88 <col:27> 'char *' lvalue Var 0x21902a10be8 'eptr' 'char *'
|   | |     `-ImplicitCastExpr 0x21902a11050 <col:35, col:42> 'char *' <BitCast>
|   | |       `-BinaryOperator 0x21902a11018 <col:35, col:42> 'const char *' '+'
|   | |         |-ImplicitCastExpr 0x21902a10fe8 <col:35> 'const char *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x21902a10fa8 <col:35> 'const char *' lvalue ParmVar 0x21902a10890 'elem' 'const char *'
|   | |         `-ImplicitCastExpr 0x21902a11000 <col:42> 'int' <LValueToRValue>
|   | |           `-DeclRefExpr 0x21902a10fc8 <col:42> 'int' lvalue ParmVar 0x21902a10910 'len' 'int'
|   | `-ReturnStmt 0x21902a110f0 <line:753:9, col:16>
|   |   `-IntegerLiteral 0x21902a110c8 <col:16> 'int' 0
|   |-IfStmt 0x21902a11220 <line:754:5, line:757:5>
|   | |-BinaryOperator 0x21902a11190 <line:754:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x21902a11160 <col:9> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x21902a11118 <col:9> 'long' lvalue Var 0x21902a10b50 'bitnum' 'long'
|   | | `-ImplicitCastExpr 0x21902a11178 <col:18> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x21902a11138 <col:18> 'int' 0
|   | `-CompoundStmt 0x21902a11208 <col:21, line:757:5>
|   |   `-ReturnStmt 0x21902a111f8 <line:756:9, col:16>
|   |     `-IntegerLiteral 0x21902a111d0 <col:16> 'int' 0
|   |-IfStmt 0x21902a114b8 <line:758:5, line:761:5>
|   | |-UnaryOperator 0x21902a11430 <line:758:9, col:51> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x21902a113c8 <col:10, col:51> 'int'
|   | |   |-ImplicitCastExpr 0x21902a113b0 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x21902a11328 <col:10> 'int ()' Function 0x21902a11260 'ASN1_BIT_STRING_set_bit' 'int ()'
|   | |   |-ImplicitCastExpr 0x21902a11400 <col:34> 'void *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x21902a11348 <col:34> 'void *' lvalue ParmVar 0x21902a10990 'bitstr' 'void *'
|   | |   |-ImplicitCastExpr 0x21902a11418 <col:42> 'long' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x21902a11368 <col:42> 'long' lvalue Var 0x21902a10b50 'bitnum' 'long'
|   | |   `-IntegerLiteral 0x21902a11388 <col:50> 'int' 1
|   | `-CompoundStmt 0x21902a114a0 <col:54, line:761:5>
|   |   `-ReturnStmt 0x21902a11490 <line:760:9, col:16>
|   |     `-IntegerLiteral 0x21902a11468 <col:16> 'int' 0
|   `-ReturnStmt 0x21902a114f8 <line:762:5, col:12>
|     `-IntegerLiteral 0x21902a114d0 <col:12> 'int' 1
|-FunctionDecl 0x21902a14800 <line:765:1, line:783:1> line:765:12 used mask_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x21902a14610 <col:20, col:32> col:32 used elem 'const char *'
| |-ParmVarDecl 0x21902a14690 <col:38, col:42> col:42 used len 'int'
| |-ParmVarDecl 0x21902a14710 <col:47, col:53> col:53 used arg 'void *'
| `-CompoundStmt 0x21902a15420 <line:766:1, line:783:1>
|   |-DeclStmt 0x21902a14a60 <line:767:5, col:40>
|   | |-VarDecl 0x21902a14910 <col:5, col:28> col:20 used pmask 'unsigned long *' cinit
|   | | `-ImplicitCastExpr 0x21902a149b0 <col:28> 'unsigned long *' <BitCast>
|   | |   `-ImplicitCastExpr 0x21902a14998 <col:28> 'void *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x21902a14978 <col:28> 'void *' lvalue ParmVar 0x21902a14710 'arg' 'void *'
|   | `-VarDecl 0x21902a149e0 <col:5, col:33> col:33 used tmpmask 'unsigned long'
|   |-DeclStmt 0x21902a14af8 <line:768:5, col:12>
|   | `-VarDecl 0x21902a14a90 <col:5, col:9> col:9 used tag 'int'
|   |-IfStmt 0x21902a14b80 <line:769:5, line:770:16>
|   | |-OpaqueValueExpr 0x21902a14b68 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x21902a14b58 <col:9, col:16>
|   |   `-IntegerLiteral 0x21902a14b30 <col:16> 'int' 0
|   |-IfStmt 0x21902a14ee0 <line:771:5, line:774:5>
|   | |-BinaryOperator 0x21902a14e08 <line:771:9, col:52> 'int' '&&'
|   | | |-ParenExpr 0x21902a14c18 <col:9, col:18> 'int'
|   | | | `-BinaryOperator 0x21902a14bf8 <col:10, col:17> 'int' '=='
|   | | |   |-ImplicitCastExpr 0x21902a14be0 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x21902a14b98 <col:10> 'int' lvalue ParmVar 0x21902a14690 'len' 'int'
|   | | |   `-IntegerLiteral 0x21902a14bb8 <col:17> 'int' 3
|   | | `-ParenExpr 0x21902a14de8 <col:23, col:52> 'int'
|   | |   `-BinaryOperator 0x21902a14dc8 <col:24, col:51> 'int' '=='
|   | |     |-CallExpr 0x21902a14d08 <col:24, col:46> 'int'
|   | |     | |-ImplicitCastExpr 0x21902a14cf0 <col:24> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   | |     | | `-DeclRefExpr 0x21902a14c38 <col:24> 'int (const char *, const char *, unsigned long long)' Function 0x21902a04d60 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   | |     | |-ImplicitCastExpr 0x21902a14d40 <col:32> 'const char *' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x21902a14c58 <col:32> 'const char *' lvalue ParmVar 0x21902a14610 'elem' 'const char *'
|   | |     | |-ImplicitCastExpr 0x21902a14d70 <col:38> 'const char *' <NoOp>
|   | |     | | `-ImplicitCastExpr 0x21902a14d58 <col:38> 'char *' <ArrayToPointerDecay>
|   | |     | |   `-StringLiteral 0x21902a14c78 <col:38> 'char [4]' lvalue "DIR"
|   | |     | `-ImplicitCastExpr 0x21902a14d88 <col:45> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x21902a14c98 <col:45> 'int' 3
|   | |     `-IntegerLiteral 0x21902a14da0 <col:51> 'int' 0
|   | `-CompoundStmt 0x21902a14ec8 <col:55, line:774:5>
|   |   `-ReturnStmt 0x21902a14eb8 <line:773:9, col:16>
|   |     `-IntegerLiteral 0x21902a14e90 <col:16> 'int' 1
|   |-BinaryOperator 0x21902a15008 <line:775:5, col:33> 'int' '='
|   | |-DeclRefExpr 0x21902a14ef8 <col:5> 'int' lvalue Var 0x21902a14a90 'tag' 'int'
|   | `-CallExpr 0x21902a14fa8 <col:11, col:33> 'int'
|   |   |-ImplicitCastExpr 0x21902a14f90 <col:11> 'int (*)(const char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x21902a14f30 <col:11> 'int (const char *, int)' Function 0x21902a0a6c0 'asn1_str2tag' 'int (const char *, int)'
|   |   |-ImplicitCastExpr 0x21902a14fd8 <col:24> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x21902a14f50 <col:24> 'const char *' lvalue ParmVar 0x21902a14610 'elem' 'const char *'
|   |   `-ImplicitCastExpr 0x21902a14ff0 <col:30> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x21902a14f70 <col:30> 'int' lvalue ParmVar 0x21902a14690 'len' 'int'
|   |-IfStmt 0x21902a15170 <line:776:5, line:777:16>
|   | |-BinaryOperator 0x21902a15118 <line:776:9, col:37> 'int' '||'
|   | | |-UnaryOperator 0x21902a15060 <col:9, col:10> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x21902a15048 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x21902a15028 <col:10> 'int' lvalue Var 0x21902a14a90 'tag' 'int'
|   | | `-ParenExpr 0x21902a150f8 <col:17, col:37> 'int'
|   | |   `-BinaryOperator 0x21902a150d8 <col:18, line:14:33> 'int' '&'
|   | |     |-ImplicitCastExpr 0x21902a150c0 <line:776:18> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x21902a15078 <col:18> 'int' lvalue Var 0x21902a14a90 'tag' 'int'
|   | |     `-IntegerLiteral 0x21902a15098 <line:14:33> 'int' 65536
|   | `-ReturnStmt 0x21902a15160 <line:777:9, col:16>
|   |   `-IntegerLiteral 0x21902a15138 <col:16> 'int' 0
|   |-BinaryOperator 0x21902a15270 <line:778:5, col:31> 'unsigned long' '='
|   | |-DeclRefExpr 0x21902a15188 <col:5> 'unsigned long' lvalue Var 0x21902a149e0 'tmpmask' 'unsigned long'
|   | `-ImplicitCastExpr 0x21902a15258 <col:15, col:31> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x21902a15218 <col:15, col:31> 'int'
|   |     |-ImplicitCastExpr 0x21902a15200 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x21902a151c0 <col:15> 'int ()' Function 0x21902a0d920 'ASN1_tag2bit' 'int ()'
|   |     `-ImplicitCastExpr 0x21902a15240 <col:28> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x21902a151e0 <col:28> 'int' lvalue Var 0x21902a14a90 'tag' 'int'
|   |-IfStmt 0x21902a15318 <line:779:5, line:780:16>
|   | |-UnaryOperator 0x21902a152c8 <line:779:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x21902a152b0 <col:10> 'unsigned long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x21902a15290 <col:10> 'unsigned long' lvalue Var 0x21902a149e0 'tmpmask' 'unsigned long'
|   | `-ReturnStmt 0x21902a15308 <line:780:9, col:16>
|   |   `-IntegerLiteral 0x21902a152e0 <col:16> 'int' 0
|   |-CompoundAssignOperator 0x21902a153b8 <line:781:5, col:15> 'unsigned long' '|=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   | |-UnaryOperator 0x21902a15368 <col:5, col:6> 'unsigned long' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x21902a15350 <col:6> 'unsigned long *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x21902a15330 <col:6> 'unsigned long *' lvalue Var 0x21902a14910 'pmask' 'unsigned long *'
|   | `-ImplicitCastExpr 0x21902a153a0 <col:15> 'unsigned long' <LValueToRValue>
|   |   `-DeclRefExpr 0x21902a15380 <col:15> 'unsigned long' lvalue Var 0x21902a149e0 'tmpmask' 'unsigned long'
|   `-ReturnStmt 0x21902a15410 <line:782:5, col:12>
|     `-IntegerLiteral 0x21902a153e8 <col:12> 'int' 1
`-FunctionDecl 0x21902a15658 <line:785:1, line:789:1> line:785:5 ASN1_str2mask 'int (const char *, unsigned long *)'
  |-ParmVarDecl 0x21902a15498 <col:19, col:31> col:31 used str 'const char *'
  |-ParmVarDecl 0x21902a15518 <col:36, col:51> col:51 used pmask 'unsigned long *'
  `-CompoundStmt 0x21902a15948 <line:786:1, line:789:1>
    |-BinaryOperator 0x21902a157b0 <line:787:5, col:14> 'unsigned long' '='
    | |-UnaryOperator 0x21902a15758 <col:5, col:6> 'unsigned long' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x21902a15740 <col:6> 'unsigned long *' <LValueToRValue>
    | |   `-DeclRefExpr 0x21902a15720 <col:6> 'unsigned long *' lvalue ParmVar 0x21902a15518 'pmask' 'unsigned long *'
    | `-ImplicitCastExpr 0x21902a15798 <col:14> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x21902a15770 <col:14> 'int' 0
    `-ReturnStmt 0x21902a15938 <line:788:5, col:55>
      `-CallExpr 0x21902a158a8 <col:12, col:55> 'int'
        |-ImplicitCastExpr 0x21902a15890 <col:12> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x21902a157d0 <col:12> 'int ()' Function 0x219029fd658 'CONF_parse_list' 'int ()'
        |-ImplicitCastExpr 0x21902a158f0 <col:28> 'const char *' <LValueToRValue>
        | `-DeclRefExpr 0x21902a157f0 <col:28> 'const char *' lvalue ParmVar 0x21902a15498 'str' 'const char *'
        |-CharacterLiteral 0x21902a15810 <col:33> 'int' 124
        |-IntegerLiteral 0x21902a15828 <col:38> 'int' 1
        |-ImplicitCastExpr 0x21902a15908 <col:41> 'int (*)(const char *, int, void *)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x21902a15850 <col:41> 'int (const char *, int, void *)' Function 0x21902a14800 'mask_cb' 'int (const char *, int, void *)'
        `-ImplicitCastExpr 0x21902a15920 <col:50> 'unsigned long *' <LValueToRValue>
          `-DeclRefExpr 0x21902a15870 <col:50> 'unsigned long *' lvalue ParmVar 0x21902a15518 'pmask' 'unsigned long *'
