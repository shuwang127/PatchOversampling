TranslationUnitDecl 0x1d207fa8e68 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1d207fa9700 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1d207fa9400 '__int128'
|-TypedefDecl 0x1d207fa9770 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1d207fa9420 'unsigned __int128'
|-TypedefDecl 0x1d207fa9aa8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1d207fa9860 'struct __NSConstantString_tag'
|   `-Record 0x1d207fa97c8 '__NSConstantString_tag'
|-TypedefDecl 0x1d207fa9b18 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1d207fa9040 'unsigned long long'
|-TypedefDecl 0x1d207fa9bb0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1d207fa9b70 'char *'
|   `-BuiltinType 0x1d207fa8f00 'char'
|-TypedefDecl 0x1d207fa9c20 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1d207fa9b70 'char *'
|   `-BuiltinType 0x1d207fa8f00 'char'
`-FunctionDecl 0x1d209881688 <.//openssl//file_jk/after\crypto\bf\bf_cfb64.c:19:1, line:74:1> line:19:6 invalid BF_cfb64_encrypt 'void (const unsigned char *, unsigned char *, long, const int *, unsigned char *, int *, int)'
  |-ParmVarDecl 0x1d207fa9cc0 <col:23, col:44> col:44 used in 'const unsigned char *'
  |-ParmVarDecl 0x1d207fa9d70 <col:48, col:63> col:63 used out 'unsigned char *'
  |-ParmVarDecl 0x1d207fa9df0 <line:20:23, col:28> col:28 used length 'long'
  |-ParmVarDecl 0x1d2098813b8 <col:36, col:50> col:50 invalid schedule 'const int *'
  |-ParmVarDecl 0x1d209881438 <line:21:23, col:38> col:38 used ivec 'unsigned char *'
  |-ParmVarDecl 0x1d2098814e0 <col:44, col:49> col:49 used num 'int *'
  |-ParmVarDecl 0x1d209881560 <col:54, col:58> col:58 used encrypt 'int'
  `-CompoundStmt 0x1d209885790 <line:22:1, line:74:1>
    |-DeclStmt 0x1d2098817f8 <line:23:5, col:31>
    | `-VarDecl 0x1d209881790 <col:5, col:22> col:22 invalid v0 'int' register
    |-DeclStmt 0x1d209881910 <line:24:5, col:26>
    | `-VarDecl 0x1d209881828 <col:5, col:23> col:18 used n 'int' register cinit
    |   `-ImplicitCastExpr 0x1d2098818f8 <col:22, col:23> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x1d2098818e0 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x1d2098818c8 <col:23> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x1d209881890 <col:23> 'int *' lvalue ParmVar 0x1d2098814e0 'num' 'int *'
    |-DeclStmt 0x1d2098819f8 <line:25:5, col:29>
    | `-VarDecl 0x1d209881940 <col:5, col:23> col:19 used l 'long' register cinit
    |   `-ImplicitCastExpr 0x1d2098819e0 <col:23> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x1d2098819a8 <col:23> 'long' lvalue ParmVar 0x1d207fa9df0 'length' 'long'
    |-DeclStmt 0x1d209881bb0 <line:27:5, col:29>
    | |-VarDecl 0x1d209881a28 <col:5, col:20> col:20 used iv 'unsigned char *'
    | |-VarDecl 0x1d209881aa8 <col:5, col:24> col:24 used c 'unsigned char'
    | `-VarDecl 0x1d209881b28 <col:5, col:27> col:27 used cc 'unsigned char'
    |-BinaryOperator 0x1d209881c90 <line:29:5, col:27> 'unsigned char *' '='
    | |-DeclRefExpr 0x1d209881bc8 <col:5> 'unsigned char *' lvalue Var 0x1d209881a28 'iv' 'unsigned char *'
    | `-CStyleCastExpr 0x1d209881c68 <col:10, col:27> 'unsigned char *' <NoOp>
    |   `-ImplicitCastExpr 0x1d209881c50 <col:27> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x1d209881c00 <col:27> 'unsigned char *' lvalue ParmVar 0x1d209881438 'ivec' 'unsigned char *'
    |-IfStmt 0x1d2098855b0 <line:30:5, line:71:5> has_else
    | |-ImplicitCastExpr 0x1d209881ce8 <line:30:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1d209881cb0 <col:9> 'int' lvalue ParmVar 0x1d209881560 'encrypt' 'int'
    | |-CompoundStmt 0x1d2098849e8 <col:18, line:50:5>
    | | `-WhileStmt 0x1d2098849d0 <line:31:9, line:49:9>
    | |   |-UnaryOperator 0x1d209881d38 <line:31:16, col:17> 'long' postfix '--'
    | |   | `-DeclRefExpr 0x1d209881d00 <col:16> 'long' lvalue Var 0x1d209881940 'l' 'long'
    | |   `-CompoundStmt 0x1d209884998 <col:21, line:49:9>
    | |     |-IfStmt 0x1d209884488 <line:32:13, line:44:13>
    | |     | |-BinaryOperator 0x1d209881dc8 <line:32:17, col:22> 'int' '=='
    | |     | | |-ImplicitCastExpr 0x1d209881db0 <col:17> 'int' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x1d209881d50 <col:17> 'int' lvalue Var 0x1d209881828 'n' 'int'
    | |     | | `-IntegerLiteral 0x1d209881d88 <col:22> 'int' 0
    | |     | `-CompoundStmt 0x1d209884468 <col:25, line:44:13>
    | |     |   |-BinaryOperator 0x1d209880c40 <line:38:17, col:39> 'unsigned char *' '='
    | |     |   | |-DeclRefExpr 0x1d209880ba8 <col:17> 'unsigned char *' lvalue Var 0x1d209881a28 'iv' 'unsigned char *'
    | |     |   | `-CStyleCastExpr 0x1d209880c18 <col:22, col:39> 'unsigned char *' <NoOp>
    | |     |   |   `-ImplicitCastExpr 0x1d209880c00 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    | |     |   |     `-DeclRefExpr 0x1d209880bc8 <col:39> 'unsigned char *' lvalue ParmVar 0x1d209881438 'ivec' 'unsigned char *'
    | |     |   `-BinaryOperator 0x1d209884448 <line:43:17, col:39> 'unsigned char *' '='
    | |     |     |-DeclRefExpr 0x1d209881360 <col:17> 'unsigned char *' lvalue Var 0x1d209881a28 'iv' 'unsigned char *'
    | |     |     `-CStyleCastExpr 0x1d209884420 <col:22, col:39> 'unsigned char *' <NoOp>
    | |     |       `-ImplicitCastExpr 0x1d209884408 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    | |     |         `-DeclRefExpr 0x1d2098843d0 <col:39> 'unsigned char *' lvalue ParmVar 0x1d209881438 'ivec' 'unsigned char *'
    | |     |-BinaryOperator 0x1d209884688 <line:45:13, col:31> 'unsigned char' '='
    | |     | |-DeclRefExpr 0x1d2098844a0 <col:13> 'unsigned char' lvalue Var 0x1d209881aa8 'c' 'unsigned char'
    | |     | `-ImplicitCastExpr 0x1d209884670 <col:17, col:31> 'unsigned char' <IntegralCast>
    | |     |   `-BinaryOperator 0x1d209884650 <col:17, col:31> 'int' '^'
    | |     |     |-ImplicitCastExpr 0x1d209884608 <col:17, col:23> 'int' <IntegralCast>
    | |     |     | `-ImplicitCastExpr 0x1d2098845f0 <col:17, col:23> 'unsigned char' <LValueToRValue>
    | |     |     |   `-UnaryOperator 0x1d209884548 <col:17, col:23> 'const unsigned char' lvalue prefix '*' cannot overflow
    | |     |     |     `-ParenExpr 0x1d209884528 <col:18, col:23> 'const unsigned char *'
    | |     |     |       `-UnaryOperator 0x1d209884510 <col:19, col:21> 'const unsigned char *' postfix '++'
    | |     |     |         `-DeclRefExpr 0x1d2098844d8 <col:19> 'const unsigned char *' lvalue ParmVar 0x1d207fa9cc0 'in' 'const unsigned char *'
    | |     |     `-ImplicitCastExpr 0x1d209884638 <col:27, col:31> 'int' <IntegralCast>
    | |     |       `-ImplicitCastExpr 0x1d209884620 <col:27, col:31> 'unsigned char' <LValueToRValue>
    | |     |         `-ArraySubscriptExpr 0x1d2098845d0 <col:27, col:31> 'unsigned char' lvalue
    | |     |           |-ImplicitCastExpr 0x1d2098845a0 <col:27> 'unsigned char *' <LValueToRValue>
    | |     |           | `-DeclRefExpr 0x1d209884560 <col:27> 'unsigned char *' lvalue Var 0x1d209881a28 'iv' 'unsigned char *'
    | |     |           `-ImplicitCastExpr 0x1d2098845b8 <col:30> 'int' <LValueToRValue>
    | |     |             `-DeclRefExpr 0x1d209884580 <col:30> 'int' lvalue Var 0x1d209881828 'n' 'int'
    | |     |-BinaryOperator 0x1d209884768 <line:46:13, col:24> 'unsigned char' '='
    | |     | |-UnaryOperator 0x1d209884718 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    | |     | | `-ParenExpr 0x1d2098846f8 <col:14, col:20> 'unsigned char *'
    | |     | |   `-UnaryOperator 0x1d2098846e0 <col:15, col:18> 'unsigned char *' postfix '++'
    | |     | |     `-DeclRefExpr 0x1d2098846a8 <col:15> 'unsigned char *' lvalue ParmVar 0x1d207fa9d70 'out' 'unsigned char *'
    | |     | `-ImplicitCastExpr 0x1d209884750 <col:24> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x1d209884730 <col:24> 'unsigned char' lvalue Var 0x1d209881aa8 'c' 'unsigned char'
    | |     |-BinaryOperator 0x1d209884850 <line:47:13, col:21> 'unsigned char' '='
    | |     | |-ArraySubscriptExpr 0x1d2098847f8 <col:13, col:17> 'unsigned char' lvalue
    | |     | | |-ImplicitCastExpr 0x1d2098847c8 <col:13> 'unsigned char *' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x1d209884788 <col:13> 'unsigned char *' lvalue Var 0x1d209881a28 'iv' 'unsigned char *'
    | |     | | `-ImplicitCastExpr 0x1d2098847e0 <col:16> 'int' <LValueToRValue>
    | |     | |   `-DeclRefExpr 0x1d2098847a8 <col:16> 'int' lvalue Var 0x1d209881828 'n' 'int'
    | |     | `-ImplicitCastExpr 0x1d209884838 <col:21> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x1d209884818 <col:21> 'unsigned char' lvalue Var 0x1d209881aa8 'c' 'unsigned char'
    | |     `-BinaryOperator 0x1d209884978 <line:48:13, col:27> 'int' '='
    | |       |-DeclRefExpr 0x1d209884870 <col:13> 'int' lvalue Var 0x1d209881828 'n' 'int'
    | |       `-BinaryOperator 0x1d209884958 <col:17, col:27> 'int' '&'
    | |         |-ParenExpr 0x1d209884910 <col:17, col:23> 'int'
    | |         | `-BinaryOperator 0x1d2098848f0 <col:18, col:22> 'int' '+'
    | |         |   |-ImplicitCastExpr 0x1d2098848d8 <col:18> 'int' <LValueToRValue>
    | |         |   | `-DeclRefExpr 0x1d209884890 <col:18> 'int' lvalue Var 0x1d209881828 'n' 'int'
    | |         |   `-IntegerLiteral 0x1d2098848b0 <col:22> 'int' 1
    | |         `-IntegerLiteral 0x1d209884930 <col:27> 'int' 7
    | `-CompoundStmt 0x1d209885598 <line:50:12, line:71:5>
    |   `-WhileStmt 0x1d209885580 <line:51:9, line:70:9>
    |     |-UnaryOperator 0x1d209884a20 <line:51:16, col:17> 'long' postfix '--'
    |     | `-DeclRefExpr 0x1d209884a00 <col:16> 'long' lvalue Var 0x1d209881940 'l' 'long'
    |     `-CompoundStmt 0x1d209885540 <col:21, line:70:9>
    |       |-IfStmt 0x1d209882fa8 <line:52:13, line:64:13>
    |       | |-BinaryOperator 0x1d209884a98 <line:52:17, col:22> 'int' '=='
    |       | | |-ImplicitCastExpr 0x1d209884a80 <col:17> 'int' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x1d209884a38 <col:17> 'int' lvalue Var 0x1d209881828 'n' 'int'
    |       | | `-IntegerLiteral 0x1d209884a58 <col:22> 'int' 0
    |       | `-CompoundStmt 0x1d209882f88 <col:25, line:64:13>
    |       |   |-BinaryOperator 0x1d2098827b0 <line:58:17, col:39> 'unsigned char *' '='
    |       |   | |-DeclRefExpr 0x1d209882718 <col:17> 'unsigned char *' lvalue Var 0x1d209881a28 'iv' 'unsigned char *'
    |       |   | `-CStyleCastExpr 0x1d209882788 <col:22, col:39> 'unsigned char *' <NoOp>
    |       |   |   `-ImplicitCastExpr 0x1d209882770 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |       |   |     `-DeclRefExpr 0x1d209882738 <col:39> 'unsigned char *' lvalue ParmVar 0x1d209881438 'ivec' 'unsigned char *'
    |       |   `-BinaryOperator 0x1d209882f68 <line:63:17, col:39> 'unsigned char *' '='
    |       |     |-DeclRefExpr 0x1d209882ed0 <col:17> 'unsigned char *' lvalue Var 0x1d209881a28 'iv' 'unsigned char *'
    |       |     `-CStyleCastExpr 0x1d209882f40 <col:22, col:39> 'unsigned char *' <NoOp>
    |       |       `-ImplicitCastExpr 0x1d209882f28 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |       |         `-DeclRefExpr 0x1d209882ef0 <col:39> 'unsigned char *' lvalue ParmVar 0x1d209881438 'ivec' 'unsigned char *'
    |       |-BinaryOperator 0x1d209883080 <line:65:13, col:24> 'unsigned char' '='
    |       | |-DeclRefExpr 0x1d209882fc0 <col:13> 'unsigned char' lvalue Var 0x1d209881b28 'cc' 'unsigned char'
    |       | `-ImplicitCastExpr 0x1d209883068 <col:18, col:24> 'unsigned char' <LValueToRValue>
    |       |   `-UnaryOperator 0x1d209883050 <col:18, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
    |       |     `-ParenExpr 0x1d209883030 <col:19, col:24> 'const unsigned char *'
    |       |       `-UnaryOperator 0x1d209883018 <col:20, col:22> 'const unsigned char *' postfix '++'
    |       |         `-DeclRefExpr 0x1d209882ff8 <col:20> 'const unsigned char *' lvalue ParmVar 0x1d207fa9cc0 'in' 'const unsigned char *'
    |       |-BinaryOperator 0x1d209883168 <line:66:13, col:21> 'unsigned char' '='
    |       | |-DeclRefExpr 0x1d2098830a0 <col:13> 'unsigned char' lvalue Var 0x1d209881aa8 'c' 'unsigned char'
    |       | `-ImplicitCastExpr 0x1d209883150 <col:17, col:21> 'unsigned char' <LValueToRValue>
    |       |   `-ArraySubscriptExpr 0x1d209883130 <col:17, col:21> 'unsigned char' lvalue
    |       |     |-ImplicitCastExpr 0x1d209883100 <col:17> 'unsigned char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x1d2098830c0 <col:17> 'unsigned char *' lvalue Var 0x1d209881a28 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x1d209883118 <col:20> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x1d2098830e0 <col:20> 'int' lvalue Var 0x1d209881828 'n' 'int'
    |       |-BinaryOperator 0x1d209883250 <line:67:13, col:21> 'unsigned char' '='
    |       | |-ArraySubscriptExpr 0x1d2098831f8 <col:13, col:17> 'unsigned char' lvalue
    |       | | |-ImplicitCastExpr 0x1d2098831c8 <col:13> 'unsigned char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x1d209883188 <col:13> 'unsigned char *' lvalue Var 0x1d209881a28 'iv' 'unsigned char *'
    |       | | `-ImplicitCastExpr 0x1d2098831e0 <col:16> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x1d2098831a8 <col:16> 'int' lvalue Var 0x1d209881828 'n' 'int'
    |       | `-ImplicitCastExpr 0x1d209883238 <col:21> 'unsigned char' <LValueToRValue>
    |       |   `-DeclRefExpr 0x1d209883218 <col:21> 'unsigned char' lvalue Var 0x1d209881b28 'cc' 'unsigned char'
    |       |-BinaryOperator 0x1d2098853f8 <line:68:13, col:28> 'unsigned char' '='
    |       | |-UnaryOperator 0x1d2098832c8 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    |       | | `-ParenExpr 0x1d2098832a8 <col:14, col:20> 'unsigned char *'
    |       | |   `-UnaryOperator 0x1d209883290 <col:15, col:18> 'unsigned char *' postfix '++'
    |       | |     `-DeclRefExpr 0x1d209883270 <col:15> 'unsigned char *' lvalue ParmVar 0x1d207fa9d70 'out' 'unsigned char *'
    |       | `-ImplicitCastExpr 0x1d2098853e0 <col:24, col:28> 'unsigned char' <IntegralCast>
    |       |   `-BinaryOperator 0x1d209883380 <col:24, col:28> 'int' '^'
    |       |     |-ImplicitCastExpr 0x1d209883338 <col:24> 'int' <IntegralCast>
    |       |     | `-ImplicitCastExpr 0x1d209883320 <col:24> 'unsigned char' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x1d2098832e0 <col:24> 'unsigned char' lvalue Var 0x1d209881aa8 'c' 'unsigned char'
    |       |     `-ImplicitCastExpr 0x1d209883368 <col:28> 'int' <IntegralCast>
    |       |       `-ImplicitCastExpr 0x1d209883350 <col:28> 'unsigned char' <LValueToRValue>
    |       |         `-DeclRefExpr 0x1d209883300 <col:28> 'unsigned char' lvalue Var 0x1d209881b28 'cc' 'unsigned char'
    |       `-BinaryOperator 0x1d209885520 <line:69:13, col:27> 'int' '='
    |         |-DeclRefExpr 0x1d209885418 <col:13> 'int' lvalue Var 0x1d209881828 'n' 'int'
    |         `-BinaryOperator 0x1d209885500 <col:17, col:27> 'int' '&'
    |           |-ParenExpr 0x1d2098854b8 <col:17, col:23> 'int'
    |           | `-BinaryOperator 0x1d209885498 <col:18, col:22> 'int' '+'
    |           |   |-ImplicitCastExpr 0x1d209885480 <col:18> 'int' <LValueToRValue>
    |           |   | `-DeclRefExpr 0x1d209885438 <col:18> 'int' lvalue Var 0x1d209881828 'n' 'int'
    |           |   `-IntegerLiteral 0x1d209885458 <col:22> 'int' 1
    |           `-IntegerLiteral 0x1d2098854d8 <col:27> 'int' 7
    `-BinaryOperator 0x1d209885770 <line:73:5, col:12> 'int' '='
      |-UnaryOperator 0x1d209885720 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x1d209885708 <col:6> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x1d2098856e8 <col:6> 'int *' lvalue ParmVar 0x1d2098814e0 'num' 'int *'
      `-ImplicitCastExpr 0x1d209885758 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1d209885738 <col:12> 'int' lvalue Var 0x1d209881828 'n' 'int'
