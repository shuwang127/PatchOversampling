TranslationUnitDecl 0x154d43422e8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x154d4342b80 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x154d4342880 '__int128'
|-TypedefDecl 0x154d4342bf0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x154d43428a0 'unsigned __int128'
|-TypedefDecl 0x154d4342f28 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x154d4342ce0 'struct __NSConstantString_tag'
|   `-Record 0x154d4342c48 '__NSConstantString_tag'
|-TypedefDecl 0x154d4342f98 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x154d43424c0 'unsigned long long'
|-TypedefDecl 0x154d4343030 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x154d4342ff0 'char *'
|   `-BuiltinType 0x154d4342380 'char'
|-TypedefDecl 0x154d43430a0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x154d4342ff0 'char *'
|   `-BuiltinType 0x154d4342380 'char'
`-FunctionDecl 0x154d5c76758 <.//openssl//file_jk/after\crypto\bf\bf_cfb64.c:19:1, line:74:1> line:19:6 invalid BF_cfb64_encrypt 'void (const unsigned char *, unsigned char *, long, const int *, unsigned char *, int *, int)'
  |-ParmVarDecl 0x154d4343140 <col:23, col:44> col:44 used in 'const unsigned char *'
  |-ParmVarDecl 0x154d43431f0 <col:48, col:63> col:63 used out 'unsigned char *'
  |-ParmVarDecl 0x154d4343270 <line:20:23, col:28> col:28 used length 'long'
  |-ParmVarDecl 0x154d5c76488 <col:36, col:50> col:50 invalid schedule 'const int *'
  |-ParmVarDecl 0x154d5c76508 <line:21:23, col:38> col:38 used ivec 'unsigned char *'
  |-ParmVarDecl 0x154d5c765b0 <col:44, col:49> col:49 used num 'int *'
  |-ParmVarDecl 0x154d5c76630 <col:54, col:58> col:58 used encrypt 'int'
  `-CompoundStmt 0x154d5c808c0 <line:22:1, line:74:1>
    |-DeclStmt 0x154d5c768c8 <line:23:5, col:31>
    | `-VarDecl 0x154d5c76860 <col:5, col:22> col:22 invalid v0 'int' register
    |-DeclStmt 0x154d5c769e0 <line:24:5, col:26>
    | `-VarDecl 0x154d5c768f8 <col:5, col:23> col:18 used n 'int' register cinit
    |   `-ImplicitCastExpr 0x154d5c769c8 <col:22, col:23> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x154d5c769b0 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x154d5c76998 <col:23> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x154d5c76960 <col:23> 'int *' lvalue ParmVar 0x154d5c765b0 'num' 'int *'
    |-DeclStmt 0x154d5c76ac8 <line:25:5, col:29>
    | `-VarDecl 0x154d5c76a10 <col:5, col:23> col:19 used l 'long' register cinit
    |   `-ImplicitCastExpr 0x154d5c76ab0 <col:23> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x154d5c76a78 <col:23> 'long' lvalue ParmVar 0x154d4343270 'length' 'long'
    |-DeclStmt 0x154d5c76c80 <line:27:5, col:29>
    | |-VarDecl 0x154d5c76af8 <col:5, col:20> col:20 used iv 'unsigned char *'
    | |-VarDecl 0x154d5c76b78 <col:5, col:24> col:24 used c 'unsigned char'
    | `-VarDecl 0x154d5c76bf8 <col:5, col:27> col:27 used cc 'unsigned char'
    |-BinaryOperator 0x154d5c76d60 <line:29:5, col:27> 'unsigned char *' '='
    | |-DeclRefExpr 0x154d5c76c98 <col:5> 'unsigned char *' lvalue Var 0x154d5c76af8 'iv' 'unsigned char *'
    | `-CStyleCastExpr 0x154d5c76d38 <col:10, col:27> 'unsigned char *' <NoOp>
    |   `-ImplicitCastExpr 0x154d5c76d20 <col:27> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x154d5c76cd0 <col:27> 'unsigned char *' lvalue ParmVar 0x154d5c76508 'ivec' 'unsigned char *'
    |-IfStmt 0x154d5c806e0 <line:30:5, line:71:5> has_else
    | |-ImplicitCastExpr 0x154d5c76db8 <line:30:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x154d5c76d80 <col:9> 'int' lvalue ParmVar 0x154d5c76630 'encrypt' 'int'
    | |-CompoundStmt 0x154d5c7daf8 <col:18, line:50:5>
    | | `-WhileStmt 0x154d5c7dae0 <line:31:9, line:49:9>
    | |   |-UnaryOperator 0x154d5c76e08 <line:31:16, col:17> 'long' postfix '--'
    | |   | `-DeclRefExpr 0x154d5c76dd0 <col:16> 'long' lvalue Var 0x154d5c76a10 'l' 'long'
    | |   `-CompoundStmt 0x154d5c7daa8 <col:21, line:49:9>
    | |     |-IfStmt 0x154d5c7d598 <line:32:13, line:44:13>
    | |     | |-BinaryOperator 0x154d5c76e98 <line:32:17, col:22> 'int' '=='
    | |     | | |-ImplicitCastExpr 0x154d5c76e80 <col:17> 'int' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x154d5c76e20 <col:17> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
    | |     | | `-IntegerLiteral 0x154d5c76e58 <col:22> 'int' 0
    | |     | `-CompoundStmt 0x154d5c7d578 <col:25, line:44:13>
    | |     |   |-BinaryOperator 0x154d5c7fdb0 <line:38:17, col:39> 'unsigned char *' '='
    | |     |   | |-DeclRefExpr 0x154d5c7fd18 <col:17> 'unsigned char *' lvalue Var 0x154d5c76af8 'iv' 'unsigned char *'
    | |     |   | `-CStyleCastExpr 0x154d5c7fd88 <col:22, col:39> 'unsigned char *' <NoOp>
    | |     |   |   `-ImplicitCastExpr 0x154d5c7fd70 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    | |     |   |     `-DeclRefExpr 0x154d5c7fd38 <col:39> 'unsigned char *' lvalue ParmVar 0x154d5c76508 'ivec' 'unsigned char *'
    | |     |   `-BinaryOperator 0x154d5c7d558 <line:43:17, col:39> 'unsigned char *' '='
    | |     |     |-DeclRefExpr 0x154d5c804d0 <col:17> 'unsigned char *' lvalue Var 0x154d5c76af8 'iv' 'unsigned char *'
    | |     |     `-CStyleCastExpr 0x154d5c7d530 <col:22, col:39> 'unsigned char *' <NoOp>
    | |     |       `-ImplicitCastExpr 0x154d5c7d518 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    | |     |         `-DeclRefExpr 0x154d5c7d4e0 <col:39> 'unsigned char *' lvalue ParmVar 0x154d5c76508 'ivec' 'unsigned char *'
    | |     |-BinaryOperator 0x154d5c7d798 <line:45:13, col:31> 'unsigned char' '='
    | |     | |-DeclRefExpr 0x154d5c7d5b0 <col:13> 'unsigned char' lvalue Var 0x154d5c76b78 'c' 'unsigned char'
    | |     | `-ImplicitCastExpr 0x154d5c7d780 <col:17, col:31> 'unsigned char' <IntegralCast>
    | |     |   `-BinaryOperator 0x154d5c7d760 <col:17, col:31> 'int' '^'
    | |     |     |-ImplicitCastExpr 0x154d5c7d718 <col:17, col:23> 'int' <IntegralCast>
    | |     |     | `-ImplicitCastExpr 0x154d5c7d700 <col:17, col:23> 'unsigned char' <LValueToRValue>
    | |     |     |   `-UnaryOperator 0x154d5c7d658 <col:17, col:23> 'const unsigned char' lvalue prefix '*' cannot overflow
    | |     |     |     `-ParenExpr 0x154d5c7d638 <col:18, col:23> 'const unsigned char *'
    | |     |     |       `-UnaryOperator 0x154d5c7d620 <col:19, col:21> 'const unsigned char *' postfix '++'
    | |     |     |         `-DeclRefExpr 0x154d5c7d5e8 <col:19> 'const unsigned char *' lvalue ParmVar 0x154d4343140 'in' 'const unsigned char *'
    | |     |     `-ImplicitCastExpr 0x154d5c7d748 <col:27, col:31> 'int' <IntegralCast>
    | |     |       `-ImplicitCastExpr 0x154d5c7d730 <col:27, col:31> 'unsigned char' <LValueToRValue>
    | |     |         `-ArraySubscriptExpr 0x154d5c7d6e0 <col:27, col:31> 'unsigned char' lvalue
    | |     |           |-ImplicitCastExpr 0x154d5c7d6b0 <col:27> 'unsigned char *' <LValueToRValue>
    | |     |           | `-DeclRefExpr 0x154d5c7d670 <col:27> 'unsigned char *' lvalue Var 0x154d5c76af8 'iv' 'unsigned char *'
    | |     |           `-ImplicitCastExpr 0x154d5c7d6c8 <col:30> 'int' <LValueToRValue>
    | |     |             `-DeclRefExpr 0x154d5c7d690 <col:30> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
    | |     |-BinaryOperator 0x154d5c7d878 <line:46:13, col:24> 'unsigned char' '='
    | |     | |-UnaryOperator 0x154d5c7d828 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    | |     | | `-ParenExpr 0x154d5c7d808 <col:14, col:20> 'unsigned char *'
    | |     | |   `-UnaryOperator 0x154d5c7d7f0 <col:15, col:18> 'unsigned char *' postfix '++'
    | |     | |     `-DeclRefExpr 0x154d5c7d7b8 <col:15> 'unsigned char *' lvalue ParmVar 0x154d43431f0 'out' 'unsigned char *'
    | |     | `-ImplicitCastExpr 0x154d5c7d860 <col:24> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x154d5c7d840 <col:24> 'unsigned char' lvalue Var 0x154d5c76b78 'c' 'unsigned char'
    | |     |-BinaryOperator 0x154d5c7d960 <line:47:13, col:21> 'unsigned char' '='
    | |     | |-ArraySubscriptExpr 0x154d5c7d908 <col:13, col:17> 'unsigned char' lvalue
    | |     | | |-ImplicitCastExpr 0x154d5c7d8d8 <col:13> 'unsigned char *' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x154d5c7d898 <col:13> 'unsigned char *' lvalue Var 0x154d5c76af8 'iv' 'unsigned char *'
    | |     | | `-ImplicitCastExpr 0x154d5c7d8f0 <col:16> 'int' <LValueToRValue>
    | |     | |   `-DeclRefExpr 0x154d5c7d8b8 <col:16> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
    | |     | `-ImplicitCastExpr 0x154d5c7d948 <col:21> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x154d5c7d928 <col:21> 'unsigned char' lvalue Var 0x154d5c76b78 'c' 'unsigned char'
    | |     `-BinaryOperator 0x154d5c7da88 <line:48:13, col:27> 'int' '='
    | |       |-DeclRefExpr 0x154d5c7d980 <col:13> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
    | |       `-BinaryOperator 0x154d5c7da68 <col:17, col:27> 'int' '&'
    | |         |-ParenExpr 0x154d5c7da20 <col:17, col:23> 'int'
    | |         | `-BinaryOperator 0x154d5c7da00 <col:18, col:22> 'int' '+'
    | |         |   |-ImplicitCastExpr 0x154d5c7d9e8 <col:18> 'int' <LValueToRValue>
    | |         |   | `-DeclRefExpr 0x154d5c7d9a0 <col:18> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
    | |         |   `-IntegerLiteral 0x154d5c7d9c0 <col:22> 'int' 1
    | |         `-IntegerLiteral 0x154d5c7da40 <col:27> 'int' 7
    | `-CompoundStmt 0x154d5c806c8 <line:50:12, line:71:5>
    |   `-WhileStmt 0x154d5c806b0 <line:51:9, line:70:9>
    |     |-UnaryOperator 0x154d5c7db30 <line:51:16, col:17> 'long' postfix '--'
    |     | `-DeclRefExpr 0x154d5c7db10 <col:16> 'long' lvalue Var 0x154d5c76a10 'l' 'long'
    |     `-CompoundStmt 0x154d5c80670 <col:21, line:70:9>
    |       |-IfStmt 0x154d5c7f0e8 <line:52:13, line:64:13>
    |       | |-BinaryOperator 0x154d5c7dba8 <line:52:17, col:22> 'int' '=='
    |       | | |-ImplicitCastExpr 0x154d5c7db90 <col:17> 'int' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x154d5c7db48 <col:17> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
    |       | | `-IntegerLiteral 0x154d5c7db68 <col:22> 'int' 0
    |       | `-CompoundStmt 0x154d5c7f0c8 <col:25, line:64:13>
    |       |   |-BinaryOperator 0x154d5c7e8f0 <line:58:17, col:39> 'unsigned char *' '='
    |       |   | |-DeclRefExpr 0x154d5c7e858 <col:17> 'unsigned char *' lvalue Var 0x154d5c76af8 'iv' 'unsigned char *'
    |       |   | `-CStyleCastExpr 0x154d5c7e8c8 <col:22, col:39> 'unsigned char *' <NoOp>
    |       |   |   `-ImplicitCastExpr 0x154d5c7e8b0 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |       |   |     `-DeclRefExpr 0x154d5c7e878 <col:39> 'unsigned char *' lvalue ParmVar 0x154d5c76508 'ivec' 'unsigned char *'
    |       |   `-BinaryOperator 0x154d5c7f0a8 <line:63:17, col:39> 'unsigned char *' '='
    |       |     |-DeclRefExpr 0x154d5c7f010 <col:17> 'unsigned char *' lvalue Var 0x154d5c76af8 'iv' 'unsigned char *'
    |       |     `-CStyleCastExpr 0x154d5c7f080 <col:22, col:39> 'unsigned char *' <NoOp>
    |       |       `-ImplicitCastExpr 0x154d5c7f068 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |       |         `-DeclRefExpr 0x154d5c7f030 <col:39> 'unsigned char *' lvalue ParmVar 0x154d5c76508 'ivec' 'unsigned char *'
    |       |-BinaryOperator 0x154d5c7f1c0 <line:65:13, col:24> 'unsigned char' '='
    |       | |-DeclRefExpr 0x154d5c7f100 <col:13> 'unsigned char' lvalue Var 0x154d5c76bf8 'cc' 'unsigned char'
    |       | `-ImplicitCastExpr 0x154d5c7f1a8 <col:18, col:24> 'unsigned char' <LValueToRValue>
    |       |   `-UnaryOperator 0x154d5c7f190 <col:18, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
    |       |     `-ParenExpr 0x154d5c7f170 <col:19, col:24> 'const unsigned char *'
    |       |       `-UnaryOperator 0x154d5c7f158 <col:20, col:22> 'const unsigned char *' postfix '++'
    |       |         `-DeclRefExpr 0x154d5c7f138 <col:20> 'const unsigned char *' lvalue ParmVar 0x154d4343140 'in' 'const unsigned char *'
    |       |-BinaryOperator 0x154d5c7f2a8 <line:66:13, col:21> 'unsigned char' '='
    |       | |-DeclRefExpr 0x154d5c7f1e0 <col:13> 'unsigned char' lvalue Var 0x154d5c76b78 'c' 'unsigned char'
    |       | `-ImplicitCastExpr 0x154d5c7f290 <col:17, col:21> 'unsigned char' <LValueToRValue>
    |       |   `-ArraySubscriptExpr 0x154d5c7f270 <col:17, col:21> 'unsigned char' lvalue
    |       |     |-ImplicitCastExpr 0x154d5c7f240 <col:17> 'unsigned char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x154d5c7f200 <col:17> 'unsigned char *' lvalue Var 0x154d5c76af8 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x154d5c7f258 <col:20> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x154d5c7f220 <col:20> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
    |       |-BinaryOperator 0x154d5c7f390 <line:67:13, col:21> 'unsigned char' '='
    |       | |-ArraySubscriptExpr 0x154d5c7f338 <col:13, col:17> 'unsigned char' lvalue
    |       | | |-ImplicitCastExpr 0x154d5c7f308 <col:13> 'unsigned char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x154d5c7f2c8 <col:13> 'unsigned char *' lvalue Var 0x154d5c76af8 'iv' 'unsigned char *'
    |       | | `-ImplicitCastExpr 0x154d5c7f320 <col:16> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x154d5c7f2e8 <col:16> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
    |       | `-ImplicitCastExpr 0x154d5c7f378 <col:21> 'unsigned char' <LValueToRValue>
    |       |   `-DeclRefExpr 0x154d5c7f358 <col:21> 'unsigned char' lvalue Var 0x154d5c76bf8 'cc' 'unsigned char'
    |       |-BinaryOperator 0x154d5c80528 <line:68:13, col:28> 'unsigned char' '='
    |       | |-UnaryOperator 0x154d5c7f408 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    |       | | `-ParenExpr 0x154d5c7f3e8 <col:14, col:20> 'unsigned char *'
    |       | |   `-UnaryOperator 0x154d5c7f3d0 <col:15, col:18> 'unsigned char *' postfix '++'
    |       | |     `-DeclRefExpr 0x154d5c7f3b0 <col:15> 'unsigned char *' lvalue ParmVar 0x154d43431f0 'out' 'unsigned char *'
    |       | `-ImplicitCastExpr 0x154d5c80510 <col:24, col:28> 'unsigned char' <IntegralCast>
    |       |   `-BinaryOperator 0x154d5c7f4c0 <col:24, col:28> 'int' '^'
    |       |     |-ImplicitCastExpr 0x154d5c7f478 <col:24> 'int' <IntegralCast>
    |       |     | `-ImplicitCastExpr 0x154d5c7f460 <col:24> 'unsigned char' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x154d5c7f420 <col:24> 'unsigned char' lvalue Var 0x154d5c76b78 'c' 'unsigned char'
    |       |     `-ImplicitCastExpr 0x154d5c7f4a8 <col:28> 'int' <IntegralCast>
    |       |       `-ImplicitCastExpr 0x154d5c7f490 <col:28> 'unsigned char' <LValueToRValue>
    |       |         `-DeclRefExpr 0x154d5c7f440 <col:28> 'unsigned char' lvalue Var 0x154d5c76bf8 'cc' 'unsigned char'
    |       `-BinaryOperator 0x154d5c80650 <line:69:13, col:27> 'int' '='
    |         |-DeclRefExpr 0x154d5c80548 <col:13> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
    |         `-BinaryOperator 0x154d5c80630 <col:17, col:27> 'int' '&'
    |           |-ParenExpr 0x154d5c805e8 <col:17, col:23> 'int'
    |           | `-BinaryOperator 0x154d5c805c8 <col:18, col:22> 'int' '+'
    |           |   |-ImplicitCastExpr 0x154d5c805b0 <col:18> 'int' <LValueToRValue>
    |           |   | `-DeclRefExpr 0x154d5c80568 <col:18> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
    |           |   `-IntegerLiteral 0x154d5c80588 <col:22> 'int' 1
    |           `-IntegerLiteral 0x154d5c80608 <col:27> 'int' 7
    `-BinaryOperator 0x154d5c808a0 <line:73:5, col:12> 'int' '='
      |-UnaryOperator 0x154d5c80850 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x154d5c80838 <col:6> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x154d5c80818 <col:6> 'int *' lvalue ParmVar 0x154d5c765b0 'num' 'int *'
      `-ImplicitCastExpr 0x154d5c80888 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x154d5c80868 <col:12> 'int' lvalue Var 0x154d5c768f8 'n' 'int'
