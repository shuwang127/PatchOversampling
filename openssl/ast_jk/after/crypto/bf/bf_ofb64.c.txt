TranslationUnitDecl 0x27d859c60a8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x27d859c6940 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x27d859c6640 '__int128'
|-TypedefDecl 0x27d859c69b0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x27d859c6660 'unsigned __int128'
|-TypedefDecl 0x27d859c6ce8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x27d859c6aa0 'struct __NSConstantString_tag'
|   `-Record 0x27d859c6a08 '__NSConstantString_tag'
|-TypedefDecl 0x27d859c6d58 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x27d859c6280 'unsigned long long'
|-TypedefDecl 0x27d859c6df0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x27d859c6db0 'char *'
|   `-BuiltinType 0x27d859c6140 'char'
|-TypedefDecl 0x27d859c6e60 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x27d859c6db0 'char *'
|   `-BuiltinType 0x27d859c6140 'char'
`-FunctionDecl 0x27d85a2f808 <.//openssl//file_jk/after\crypto\bf\bf_ofb64.c:18:1, line:61:1> line:18:6 invalid BF_ofb64_encrypt 'void (const unsigned char *, unsigned char *, long, const int *, unsigned char *, int *)'
  |-ParmVarDecl 0x27d859c6f00 <col:23, col:44> col:44 used in 'const unsigned char *'
  |-ParmVarDecl 0x27d859c6fb0 <col:48, col:63> col:63 used out 'unsigned char *'
  |-ParmVarDecl 0x27d859c7030 <line:19:23, col:28> col:28 used length 'long'
  |-ParmVarDecl 0x27d85a2f5c8 <col:36, col:50> col:50 invalid schedule 'const int *'
  |-ParmVarDecl 0x27d85a2f648 <line:20:23, col:38> col:38 used ivec 'unsigned char *'
  |-ParmVarDecl 0x27d85a2f6f0 <col:44, col:49> col:49 used num 'int *'
  `-CompoundStmt 0x27d85a29ad8 <line:21:1, line:61:1>
    |-DeclStmt 0x27d85a2f970 <line:22:5, col:31>
    | `-VarDecl 0x27d85a2f908 <col:5, col:22> col:22 invalid v0 'int' register
    |-DeclStmt 0x27d85a2fa88 <line:23:5, col:26>
    | `-VarDecl 0x27d85a2f9a0 <col:5, col:23> col:18 used n 'int' register cinit
    |   `-ImplicitCastExpr 0x27d85a2fa70 <col:22, col:23> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x27d85a2fa58 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x27d85a2fa40 <col:23> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x27d85a2fa08 <col:23> 'int *' lvalue ParmVar 0x27d85a2f6f0 'num' 'int *'
    |-DeclStmt 0x27d85a2fb70 <line:24:5, col:29>
    | `-VarDecl 0x27d85a2fab8 <col:5, col:23> col:19 used l 'long' register cinit
    |   `-ImplicitCastExpr 0x27d85a2fb58 <col:23> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x27d85a2fb20 <col:23> 'long' lvalue ParmVar 0x27d859c7030 'length' 'long'
    |-DeclStmt 0x27d85a2fc98 <line:25:5, col:23>
    | `-VarDecl 0x27d85a2fc30 <col:5, col:22> col:19 used d 'unsigned char [8]'
    |-DeclStmt 0x27d85a2fd30 <line:26:5, col:22>
    | `-VarDecl 0x27d85a2fcc8 <col:5, col:20> col:20 used dp 'char *' register
    |-DeclStmt 0x27d85a2fdc8 <line:28:5, col:22>
    | `-VarDecl 0x27d85a2fd60 <col:5, col:20> col:20 used iv 'unsigned char *'
    |-DeclStmt 0x27d85a2fe88 <line:29:5, col:17>
    | `-VarDecl 0x27d85a2fdf8 <col:5, col:16> col:9 used save 'int' cinit
    |   `-IntegerLiteral 0x27d85a2fe60 <col:16> 'int' 0
    |-BinaryOperator 0x27d85a2ff68 <line:31:5, col:27> 'unsigned char *' '='
    | |-DeclRefExpr 0x27d85a2fea0 <col:5> 'unsigned char *' lvalue Var 0x27d85a2fd60 'iv' 'unsigned char *'
    | `-CStyleCastExpr 0x27d85a2ff40 <col:10, col:27> 'unsigned char *' <NoOp>
    |   `-ImplicitCastExpr 0x27d85a2ff28 <col:27> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x27d85a2fed8 <col:27> 'unsigned char *' lvalue ParmVar 0x27d85a2f648 'ivec' 'unsigned char *'
    |-BinaryOperator 0x27d85a2bc60 <line:36:5, col:18> 'char *' '='
    | |-DeclRefExpr 0x27d85a2bb98 <col:5> 'char *' lvalue Var 0x27d85a2fcc8 'dp' 'char *'
    | `-CStyleCastExpr 0x27d85a2bc38 <col:10, col:18> 'char *' <BitCast>
    |   `-ImplicitCastExpr 0x27d85a2bc20 <col:18> 'unsigned char *' <ArrayToPointerDecay> part_of_explicit_cast
    |     `-DeclRefExpr 0x27d85a2bbd0 <col:18> 'unsigned char [8]' lvalue Var 0x27d85a2fc30 'd' 'unsigned char [8]'
    |-WhileStmt 0x27d85a2d1a0 <line:39:5, line:51:5>
    | |-UnaryOperator 0x27d85a2c368 <line:39:12, col:13> 'long' postfix '--'
    | | `-DeclRefExpr 0x27d85a2c330 <col:12> 'long' lvalue Var 0x27d85a2fab8 'l' 'long'
    | `-CompoundStmt 0x27d85a2d178 <col:17, line:51:5>
    |   |-IfStmt 0x27d85a2cde0 <line:40:9, line:48:9>
    |   | |-BinaryOperator 0x27d85a2c3f8 <line:40:13, col:18> 'int' '=='
    |   | | |-ImplicitCastExpr 0x27d85a2c3e0 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x27d85a2c380 <col:13> 'int' lvalue Var 0x27d85a2f9a0 'n' 'int'
    |   | | `-IntegerLiteral 0x27d85a2c3b8 <col:18> 'int' 0
    |   | `-CompoundStmt 0x27d85a2cdc0 <col:21, line:48:9>
    |   |   |-BinaryOperator 0x27d85a2c650 <line:42:13, col:26> 'char *' '='
    |   |   | |-DeclRefExpr 0x27d85a2c5b8 <col:13> 'char *' lvalue Var 0x27d85a2fcc8 'dp' 'char *'
    |   |   | `-CStyleCastExpr 0x27d85a2c628 <col:18, col:26> 'char *' <BitCast>
    |   |   |   `-ImplicitCastExpr 0x27d85a2c610 <col:26> 'unsigned char *' <ArrayToPointerDecay> part_of_explicit_cast
    |   |   |     `-DeclRefExpr 0x27d85a2c5d8 <col:26> 'unsigned char [8]' lvalue Var 0x27d85a2fc30 'd' 'unsigned char [8]'
    |   |   `-UnaryOperator 0x27d85a2cda8 <line:47:13, col:17> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x27d85a2cd70 <col:13> 'int' lvalue Var 0x27d85a2fdf8 'save' 'int'
    |   |-BinaryOperator 0x27d85a2d030 <line:49:9, col:33> 'unsigned char' '='
    |   | |-UnaryOperator 0x27d85a2ce68 <col:9, col:16> 'unsigned char' lvalue prefix '*' cannot overflow
    |   | | `-ParenExpr 0x27d85a2ce48 <col:10, col:16> 'unsigned char *'
    |   | |   `-UnaryOperator 0x27d85a2ce30 <col:11, col:14> 'unsigned char *' postfix '++'
    |   | |     `-DeclRefExpr 0x27d85a2cdf8 <col:11> 'unsigned char *' lvalue ParmVar 0x27d859c6fb0 'out' 'unsigned char *'
    |   | `-ImplicitCastExpr 0x27d85a2d018 <col:20, col:33> 'unsigned char' <IntegralCast>
    |   |   `-BinaryOperator 0x27d85a2cff8 <col:20, col:33> 'int' '^'
    |   |     |-ImplicitCastExpr 0x27d85a2cfb0 <col:20, col:26> 'int' <IntegralCast>
    |   |     | `-ImplicitCastExpr 0x27d85a2cf98 <col:20, col:26> 'unsigned char' <LValueToRValue>
    |   |     |   `-UnaryOperator 0x27d85a2cef0 <col:20, col:26> 'const unsigned char' lvalue prefix '*' cannot overflow
    |   |     |     `-ParenExpr 0x27d85a2ced0 <col:21, col:26> 'const unsigned char *'
    |   |     |       `-UnaryOperator 0x27d85a2ceb8 <col:22, col:24> 'const unsigned char *' postfix '++'
    |   |     |         `-DeclRefExpr 0x27d85a2ce80 <col:22> 'const unsigned char *' lvalue ParmVar 0x27d859c6f00 'in' 'const unsigned char *'
    |   |     `-ImplicitCastExpr 0x27d85a2cfe0 <col:30, col:33> 'int' <IntegralCast>
    |   |       `-ImplicitCastExpr 0x27d85a2cfc8 <col:30, col:33> 'unsigned char' <LValueToRValue>
    |   |         `-ArraySubscriptExpr 0x27d85a2cf78 <col:30, col:33> 'unsigned char' lvalue
    |   |           |-ImplicitCastExpr 0x27d85a2cf48 <col:30> 'unsigned char *' <ArrayToPointerDecay>
    |   |           | `-DeclRefExpr 0x27d85a2cf08 <col:30> 'unsigned char [8]' lvalue Var 0x27d85a2fc30 'd' 'unsigned char [8]'
    |   |           `-ImplicitCastExpr 0x27d85a2cf60 <col:32> 'int' <LValueToRValue>
    |   |             `-DeclRefExpr 0x27d85a2cf28 <col:32> 'int' lvalue Var 0x27d85a2f9a0 'n' 'int'
    |   `-BinaryOperator 0x27d85a2d158 <line:50:9, col:23> 'int' '='
    |     |-DeclRefExpr 0x27d85a2d050 <col:9> 'int' lvalue Var 0x27d85a2f9a0 'n' 'int'
    |     `-BinaryOperator 0x27d85a2d138 <col:13, col:23> 'int' '&'
    |       |-ParenExpr 0x27d85a2d0f0 <col:13, col:19> 'int'
    |       | `-BinaryOperator 0x27d85a2d0d0 <col:14, col:18> 'int' '+'
    |       |   |-ImplicitCastExpr 0x27d85a2d0b8 <col:14> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x27d85a2d070 <col:14> 'int' lvalue Var 0x27d85a2f9a0 'n' 'int'
    |       |   `-IntegerLiteral 0x27d85a2d090 <col:18> 'int' 1
    |       `-IntegerLiteral 0x27d85a2d110 <col:23> 'int' 7
    |-IfStmt 0x27d85a299a0 <line:52:5, line:58:5>
    | |-ImplicitCastExpr 0x27d85a2d1d8 <line:52:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x27d85a2d1b8 <col:9> 'int' lvalue Var 0x27d85a2fdf8 'save' 'int'
    | `-CompoundStmt 0x27d85a29988 <col:15, line:58:5>
    |   `-BinaryOperator 0x27d85a2d2d8 <line:55:9, col:31> 'unsigned char *' '='
    |     |-DeclRefExpr 0x27d85a2d240 <col:9> 'unsigned char *' lvalue Var 0x27d85a2fd60 'iv' 'unsigned char *'
    |     `-CStyleCastExpr 0x27d85a2d2b0 <col:14, col:31> 'unsigned char *' <NoOp>
    |       `-ImplicitCastExpr 0x27d85a2d298 <col:31> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |         `-DeclRefExpr 0x27d85a2d260 <col:31> 'unsigned char *' lvalue ParmVar 0x27d85a2f648 'ivec' 'unsigned char *'
    `-BinaryOperator 0x27d85a29ab8 <line:60:5, col:12> 'int' '='
      |-UnaryOperator 0x27d85a29a68 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x27d85a29a50 <col:6> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x27d85a29a30 <col:6> 'int *' lvalue ParmVar 0x27d85a2f6f0 'num' 'int *'
      `-ImplicitCastExpr 0x27d85a29aa0 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x27d85a29a80 <col:12> 'int' lvalue Var 0x27d85a2f9a0 'n' 'int'
