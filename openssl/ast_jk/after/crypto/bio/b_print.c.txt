TranslationUnitDecl 0x1f6862448b8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1f686245150 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1f686244e50 '__int128'
|-TypedefDecl 0x1f6862451c0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1f686244e70 'unsigned __int128'
|-TypedefDecl 0x1f6862454f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1f6862452b0 'struct __NSConstantString_tag'
|   `-Record 0x1f686245218 '__NSConstantString_tag'
|-TypedefDecl 0x1f686245568 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1f686244a90 'unsigned long long'
|-TypedefDecl 0x1f686245600 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1f6862455c0 'char *'
|   `-BuiltinType 0x1f686244950 'char'
|-TypedefDecl 0x1f686245670 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1f6862455c0 'char *'
|   `-BuiltinType 0x1f686244950 'char'
|-TypedefDecl 0x1f686245730 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1f686244a90 'unsigned long long'
|-TypedefDecl 0x1f6862457a0 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1f6862455c0 'char *'
|   `-BuiltinType 0x1f686244950 'char'
|-FunctionDecl 0x1f687cc93c0 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1f687cc9460 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1f687cc94d0 <col:21> Implicit
|-FunctionDecl 0x1f687cc9528 prev 0x1f687cc93c0 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1f687cc9250 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1f687cc9618 <col:21> Inherited Implicit
|-TypedefDecl 0x1f687cc9658 prev 0x1f686245568 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1f686244a90 'unsigned long long'
|-TypedefDecl 0x1f687cc9700 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1f687cc96d0 'size_t' sugar
|   |-Typedef 0x1f687cc9658 'size_t'
|   `-BuiltinType 0x1f686244a90 'unsigned long long'
|-TypedefDecl 0x1f687cc9770 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1f6862449f0 'long long'
|-TypedefDecl 0x1f687cc97e0 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1f6862449f0 'long long'
|-TypedefDecl 0x1f687cc9850 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1f686244a30 'unsigned short'
|-TypedefDecl 0x1f687cc98c0 <line:541:1, col:24> col:24 referenced wint_t 'unsigned short'
| `-BuiltinType 0x1f686244a30 'unsigned short'
|-TypedefDecl 0x1f687cc9930 <line:542:1, col:24> col:24 referenced wctype_t 'unsigned short'
| `-BuiltinType 0x1f686244a30 'unsigned short'
|-TypedefDecl 0x1f687cc99a0 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x1f6862449b0 'int'
|-TypedefDecl 0x1f687cc9a10 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1f6862449d0 'long'
|-TypedefDecl 0x1f687cc9a80 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1f6862449f0 'long long'
|-TypedefDecl 0x1f687cc9b10 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1f687cc9ae0 '__time64_t' sugar
|   |-Typedef 0x1f687cc9a80 '__time64_t'
|   `-BuiltinType 0x1f6862449f0 'long long'
|-FunctionDecl 0x1f687cc9c88 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1f687cc9ea8 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1f687d09f50 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1f687cc9fe8 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1f687cca060 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1f687cca0d8 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1f687cca158 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1f687d09cf0 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1f687d0a030 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1f687d0a0f0 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1f687d0a260 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1f687d0a210 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1f687d0a1b0 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1f687d0a0d0 'struct threadlocaleinfostruct'
|       `-Record 0x1f687d16dc0 'threadlocaleinfostruct'
|-TypedefDecl 0x1f687d0a370 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1f687d0a320 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1f687d0a2c0 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1f687d0a190 'struct threadmbcinfostruct'
|       `-Record 0x1f687d0a0f0 'threadmbcinfostruct'
|-RecordDecl 0x1f687d0a3c8 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1f687d0a480 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1f687d0a540 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f687d0a5d0 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1f687d0a660 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1f687d0a718 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1f687d0a6c0 'struct localeinfo_struct' sugar
|   `-RecordType 0x1f687d0a520 'struct localeinfo_struct'
|     `-Record 0x1f687d0a480 'localeinfo_struct'
|-TypedefDecl 0x1f687d0a7f0 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1f687d0a7a0 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1f687d0a6c0 'struct localeinfo_struct' sugar
|     `-RecordType 0x1f687d0a520 'struct localeinfo_struct'
|       `-Record 0x1f687d0a480 'localeinfo_struct'
|-RecordDecl 0x1f687d0a868 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1f687d0a920 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f687d0a998 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1f687d0aa58 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1f687d0aaf0 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1f687d0ab60 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1f687d0ac18 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1f687d0abc0 'struct localerefcount' sugar
|   `-RecordType 0x1f687d0a900 'struct localerefcount'
|     `-Record 0x1f687d0a868 'localerefcount'
|-RecordDecl 0x1f687d16dc0 prev 0x1f687d0a030 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1f687d16e40 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f687d16eb8 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1f687d16f28 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1f687d16f98 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1f687d17008 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1f687d171c8 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1f687d17238 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1f687d172a8 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1f687d17318 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1f687d17388 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1f687d173f8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1f687d17450 parent 0x1f6862448b8 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1f687d175e0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1f687d17650 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1f687d176c0 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1f687d17730 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1f687d177d0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1f687d17840 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1f687d17950 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1f687d17a88 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1f687d17b38 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1f687d17ae0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1f687d0a0d0 'struct threadlocaleinfostruct'
|     `-Record 0x1f687d16dc0 'threadlocaleinfostruct'
|-RecordDecl 0x1f687d17bd0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:63:1, line:72:9> line:63:8 struct _iobuf definition
| |-MaxFieldAlignmentAttr 0x1f687d17c90 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f687d17d08 <line:64:9, col:15> col:15 _ptr 'char *'
| |-FieldDecl 0x1f687d0fd50 <line:65:9, col:15> col:15 _cnt 'int'
| |-FieldDecl 0x1f687d0fdc0 <line:66:9, col:15> col:15 _base 'char *'
| |-FieldDecl 0x1f687d0fe30 <line:67:9, col:15> col:15 _flag 'int'
| |-FieldDecl 0x1f687d0fea0 <line:68:9, col:15> col:15 _file 'int'
| |-FieldDecl 0x1f687d0ff10 <line:69:9, col:15> col:15 _charbuf 'int'
| |-FieldDecl 0x1f687d0ff80 <line:70:9, col:15> col:15 _bufsiz 'int'
| `-FieldDecl 0x1f687d0fff0 <line:71:9, col:15> col:15 _tmpfname 'char *'
|-TypedefDecl 0x1f687d100a0 <line:73:1, col:23> col:23 referenced FILE 'struct _iobuf':'struct _iobuf'
| `-ElaboratedType 0x1f687d10050 'struct _iobuf' sugar
|   `-RecordType 0x1f687d17c70 'struct _iobuf'
|     `-Record 0x1f687d17bd0 '_iobuf'
|-FunctionDecl 0x1f687d102d8 <line:137:9, col:39> col:24 __iob_func 'FILE *(void) __attribute__((cdecl))':'FILE *(void)'
|-TypedefDecl 0x1f687d103a8 <line:144:1, col:17> col:17 referenced fpos_t 'long long'
| `-BuiltinType 0x1f6862449f0 'long long'
|-FunctionDecl 0x1f687d10588 <line:175:24, col:65> col:36 _filbuf 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687d10410 <col:52, col:59> col:59 _File 'FILE *'
|-FunctionDecl 0x1f687d10880 <line:176:28, col:82> col:40 _flsbuf 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f687d10660 <col:53, col:57> col:57 _Ch 'int'
| `-ParmVarDecl 0x1f687d106d8 <col:70, col:77> col:77 _File 'FILE *'
|-FunctionDecl 0x1f687d10c30 <line:178:24, col:121> col:39 _fsopen 'FILE *(const char *, const char *, int) __attribute__((cdecl))':'FILE *(const char *, const char *, int)'
| |-ParmVarDecl 0x1f687d10960 <col:54, col:67> col:67 _Filename 'const char *'
| |-ParmVarDecl 0x1f687d109e0 <col:85, col:98> col:98 _Mode 'const char *'
| `-ParmVarDecl 0x1f687d10a60 <col:110, col:114> col:114 _ShFlag 'int'
|-FunctionDecl 0x1f687d11ee0 <line:180:9, col:51> col:22 clearerr 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1f687d11d70 <col:39, col:46> col:46 _File 'FILE *'
|-FunctionDecl 0x1f687d12110 <line:182:28, col:76> col:44 clearerr_s 'errno_t (FILE *) __attribute__((cdecl))':'errno_t (FILE *)'
| `-ParmVarDecl 0x1f687d11fd0 <col:63, col:70> col:70 _File 'FILE *'
|-FunctionDecl 0x1f687d122c0 <line:184:28, col:67> col:40 fclose 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687d121e0 <col:55, col:62> col:62 _File 'FILE *'
|-FunctionDecl 0x1f687d124b0 <line:185:28, col:55> col:40 _fcloseall 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f687d127a8 <line:187:24, col:94> col:39 _fdopen 'FILE *(int, const char *) __attribute__((cdecl))':'FILE *(int, const char *)'
| |-ParmVarDecl 0x1f687d12580 <col:52, col:56> col:56 _FileHandle 'int'
| `-ParmVarDecl 0x1f687d12600 <col:76, col:89> col:89 _Mode 'const char *'
|-FunctionDecl 0x1f687d12960 <line:189:24, col:58> col:36 feof 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687d12880 <col:46, col:53> col:53 _File 'FILE *'
|-FunctionDecl 0x1f687d12b10 <line:190:24, col:60> col:36 ferror 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687d12a30 <col:48, col:55> col:55 _File 'FILE *'
|-FunctionDecl 0x1f687d12cc0 <line:191:28, col:71> col:40 fflush 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687d12be0 <col:59, col:66> col:66 _File 'FILE *'
|-FunctionDecl 0x1f687d1ef48 <line:192:28, col:66> col:40 fgetc 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687d1ee68 <col:54, col:61> col:61 _File 'FILE *'
|-FunctionDecl 0x1f687d1f0d8 <line:193:28, col:54> col:40 _fgetchar 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f687d1f440 <line:194:28, col:90> col:40 fgetpos 'int (FILE *, fpos_t *) __attribute__((cdecl))':'int (FILE *, fpos_t *)'
| |-ParmVarDecl 0x1f687d1f1a0 <col:56, col:63> col:63 _File 'FILE *'
| `-ParmVarDecl 0x1f687d1f298 <col:77, col:86> col:86 _Pos 'fpos_t *'
|-FunctionDecl 0x1f687d1f7f8 <line:195:28, col:128> col:43 fgets 'char *(char *, int, FILE *) __attribute__((cdecl))':'char *(char *, int, FILE *)'
| |-ParmVarDecl 0x1f687d1f520 <col:75, col:82> col:82 _Buf 'char *'
| |-ParmVarDecl 0x1f687d1f5a0 <col:93, col:97> col:97 _MaxCount 'int'
| `-ParmVarDecl 0x1f687d1f618 <col:116, col:123> col:123 _File 'FILE *'
|-FunctionDecl 0x1f687d1f9b8 <line:197:24, col:61> col:36 _fileno 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687d1f8d8 <col:49, col:56> col:56 _File 'FILE *'
|-FunctionDecl 0x1f687d1fc80 <line:204:24, col:117> col:39 _tempnam 'char *(const char *, const char *) __attribute__((cdecl))':'char *(const char *, const char *)'
| |-ParmVarDecl 0x1f687d1fa90 <col:59, col:72> col:72 _DirName 'const char *'
| `-ParmVarDecl 0x1f687d1fb10 <col:93, col:106> col:106 _FilePrefix 'const char *'
|-FunctionDecl 0x1f687d1fe50 <line:210:28, col:54> col:40 _flushall 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f687d20248 <line:211:72> col:72 implicit fopen 'FILE *(const char *, const char *)' extern
| |-ParmVarDecl 0x1f687d202e8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687d20350 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687d203c8 prev 0x1f687d20248 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:211:134> col:72 fopen 'FILE *(const char *, const char *)'
| |-ParmVarDecl 0x1f687d20020 <col:85, col:98> col:98 _Filename 'const char *'
| |-ParmVarDecl 0x1f687d200a0 <col:116, col:129> col:129 _Mode 'const char *'
| `-DeprecatedAttr 0x1f687d20478 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d208f0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:213:28, col:149> col:44 fopen_s 'errno_t (FILE **, const char *, const char *) __attribute__((cdecl))':'errno_t (FILE **, const char *, const char *)'
| |-ParmVarDecl 0x1f687d20620 <col:78, col:86> col:86 _File 'FILE **'
| |-ParmVarDecl 0x1f687d206a0 <col:100, col:113> col:113 _Filename 'const char *'
| `-ParmVarDecl 0x1f687d20720 <col:131, col:144> col:144 _Mode 'const char *'
|-FunctionDecl 0x1f687d20c10 <line:215:40> col:40 implicit fprintf 'int (FILE *, const char *, ...)' extern
| |-ParmVarDecl 0x1f687d20cb0 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x1f687d20d18 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1f687d20d90 <col:40> Implicit printf 2 3
|-FunctionDecl 0x1f687d20e60 prev 0x1f687d20c10 <col:28, col:125> col:40 fprintf 'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1f687d209d0 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1f687d20a50 <col:100, col:113> col:113 _Format 'const char *'
| `-FormatAttr 0x1f687d20f58 <col:40> Inherited printf 2 3
|-FunctionDecl 0x1f687d21120 <line:217:28, col:127> col:40 fprintf_s 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1f687d20fa0 <col:58, col:65> col:65 _File 'FILE *'
| `-ParmVarDecl 0x1f687d21020 <col:102, col:115> col:115 _Format 'const char *'
|-FunctionDecl 0x1f687d21378 <line:219:28, col:80> col:40 fputc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f687d21200 <col:51, col:55> col:55 _Ch 'int'
| `-ParmVarDecl 0x1f687d21278 <col:68, col:75> col:75 _File 'FILE *'
|-FunctionDecl 0x1f687d215a8 <line:220:28, col:62> col:40 _fputchar 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687d21458 <col:55, col:59> col:59 _Ch 'int'
|-FunctionDecl 0x1f687d218a0 <line:221:28, col:92> col:40 fputs 'int (const char *, FILE *) __attribute__((cdecl))':'int (const char *, FILE *)'
| |-ParmVarDecl 0x1f687d21680 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1f687d216f8 <col:80, col:87> col:87 _File 'FILE *'
|-FunctionDecl 0x1f687d21d38 <line:222:43> col:43 implicit fread 'unsigned long long (void *, unsigned long long, unsigned long long, FILE *)' extern
| |-ParmVarDecl 0x1f687d21dd8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f687d1be10 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1f687d1be78 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1f687d1bee0 <<invalid sloc>> <invalid sloc> 'FILE *'
|-FunctionDecl 0x1f687d1bf68 prev 0x1f687d21d38 <col:28, col:171> col:43 fread 'unsigned long long (void *, unsigned long long, unsigned long long, FILE *)'
| |-ParmVarDecl 0x1f687d21980 <col:89, col:96> col:96 _DstBuf 'void *'
| |-ParmVarDecl 0x1f687d219f8 <col:110, col:117> col:117 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d21a70 <col:136, col:143> col:143 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d21ae8 <col:159, col:166> col:166 _File 'FILE *'
|-FunctionDecl 0x1f687d1c470 <line:224:28, col:195> col:43 fread_s 'size_t (void *, size_t, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1f687d1c058 <col:91, col:98> col:98 _DstBuf 'void *'
| |-ParmVarDecl 0x1f687d1c0d0 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d1c148 <col:134, col:141> col:141 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d1c1c0 <col:160, col:167> col:167 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d1c238 <col:183, col:190> col:190 _File 'FILE *'
|-FunctionDecl 0x1f687d1c930 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:226:160> col:74 freopen 'FILE *(const char *, const char *, FILE *) __attribute__((cdecl))':'FILE *(const char *, const char *, FILE *)'
| |-ParmVarDecl 0x1f687d1c660 <col:89, col:102> col:102 _Filename 'const char *'
| |-ParmVarDecl 0x1f687d1c6e0 <col:120, col:133> col:133 _Mode 'const char *'
| |-ParmVarDecl 0x1f687d1c758 <col:148, col:155> col:155 _File 'FILE *'
| `-DeprecatedAttr 0x1f687d1c9e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using freopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d1cec8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:228:28, col:176> col:44 freopen_s 'errno_t (FILE **, const char *, const char *, FILE *) __attribute__((cdecl))':'errno_t (FILE **, const char *, const char *, FILE *)'
| |-ParmVarDecl 0x1f687d1cb30 <col:80, col:88> col:88 _File 'FILE **'
| |-ParmVarDecl 0x1f687d1cbb0 <col:102, col:115> col:115 _Filename 'const char *'
| |-ParmVarDecl 0x1f687d1cc30 <col:133, col:146> col:146 _Mode 'const char *'
| `-ParmVarDecl 0x1f687d1cca8 <col:161, col:168> col:168 _OldFile 'FILE *'
|-FunctionDecl 0x1f687d1d270 <line:230:70> col:70 implicit fscanf 'int (FILE *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x1f687d1d310 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x1f687d1d378 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1f687d1d3f0 <col:70> Implicit scanf 2 3
|-FunctionDecl 0x1f687d1d458 prev 0x1f687d1d270 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:230:153> col:70 fscanf 'int (FILE *restrict, const char *restrict, ...)'
| |-ParmVarDecl 0x1f687d1d0a8 <col:85, col:92> col:92 _File 'FILE *'
| |-ParmVarDecl 0x1f687d1d128 <col:128, col:141> col:141 _Format 'const char *'
| |-FormatAttr 0x1f687d1d638 <col:70> Inherited scanf 2 3
| `-DeprecatedAttr 0x1f687d1d508 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d1da78 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:231:201> col:77 _fscanf_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d1d778 <col:95, col:102> col:102 _File 'FILE *'
| |-ParmVarDecl 0x1f687d1d7f8 <col:148, col:161> col:161 _Format 'const char *'
| |-ParmVarDecl 0x1f687d1d890 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d1db30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d1de30 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:235:28, col:127> col:40 fscanf_s 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1f687d1dc70 <col:57, col:64> col:64 _File 'FILE *'
| `-ParmVarDecl 0x1f687d1dcf0 <col:102, col:115> col:115 _Format 'const char *'
|-FunctionDecl 0x1f687d1e120 <line:237:28, col:168> col:40 _fscanf_s_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d1df08 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1f687d1df88 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1f687d1e000 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d1e480 <line:239:28, col:94> col:40 fsetpos 'int (FILE *, const fpos_t *) __attribute__((cdecl))':'int (FILE *, const fpos_t *)'
| |-ParmVarDecl 0x1f687d1e200 <col:56, col:63> col:63 _File 'FILE *'
| `-ParmVarDecl 0x1f687d1e2d8 <col:75, col:90> col:90 _Pos 'const fpos_t *'
|-FunctionDecl 0x1f687d1e838 <line:240:28, col:103> col:40 fseek 'int (FILE *, long, int) __attribute__((cdecl))':'int (FILE *, long, int)'
| |-ParmVarDecl 0x1f687d1e558 <col:54, col:61> col:61 _File 'FILE *'
| |-ParmVarDecl 0x1f687d1e5d8 <col:73, col:78> col:78 _Offset 'long'
| `-ParmVarDecl 0x1f687d1e658 <col:92, col:96> col:96 _Origin 'int'
|-FunctionDecl 0x1f687d1ea98 <line:241:24, col:63> col:37 ftell 'long (FILE *) __attribute__((cdecl))':'long (FILE *)'
| `-ParmVarDecl 0x1f687d1e918 <col:51, col:58> col:58 _File 'FILE *'
|-FunctionDecl 0x1f687d19e38 <line:243:28, col:110> col:40 _fseeki64 'int (FILE *, long long, int) __attribute__((cdecl))':'int (FILE *, long long, int)'
| |-ParmVarDecl 0x1f687d1eb68 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1f687d1ebe8 <col:77, col:85> col:85 _Offset 'long long'
| `-ParmVarDecl 0x1f687d1ec68 <col:99, col:103> col:103 _Origin 'int'
|-FunctionDecl 0x1f687d1a098 <line:244:24, col:70> col:40 _ftelli64 'long long (FILE *) __attribute__((cdecl))':'long long (FILE *)'
| `-ParmVarDecl 0x1f687d19f18 <col:58, col:65> col:65 _File 'FILE *'
|-FunctionDecl 0x1f687d1a558 <line:246:43> col:43 implicit fwrite 'unsigned long long (const void *, unsigned long long, unsigned long long, FILE *)' extern
| |-ParmVarDecl 0x1f687d1a5f8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1f687d1a660 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1f687d1a6c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1f687d1a730 <<invalid sloc>> <invalid sloc> 'FILE *'
|-FunctionDecl 0x1f687d1a7b8 prev 0x1f687d1a558 <col:28, col:159> col:43 fwrite 'unsigned long long (const void *, unsigned long long, unsigned long long, FILE *)'
| |-ParmVarDecl 0x1f687d1a1a0 <col:81, col:94> col:94 _Str 'const void *'
| |-ParmVarDecl 0x1f687d1a218 <col:105, col:112> col:112 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d1a290 <col:124, col:131> col:131 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d1a308 <col:147, col:154> col:154 _File 'FILE *'
|-FunctionDecl 0x1f687d1a980 <line:247:24, col:61> col:36 getc 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687d1a8a0 <col:49, col:56> col:56 _File 'FILE *'
|-FunctionDecl 0x1f687d1ab10 <line:248:24, col:48> col:36 getchar 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f687d1ac98 <line:249:24, col:53> col:36 _getmaxstdio 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f687d1afc0 <line:251:9, col:84> col:24 gets_s 'char *(char *, rsize_t) __attribute__((cdecl))':'char *(char *, rsize_t)'
| |-ParmVarDecl 0x1f687d1ad68 <col:53, col:60> col:60 _Buf 'char *'
| `-ParmVarDecl 0x1f687d1ae10 <col:71, col:79> col:79 _Size 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f687d1b2e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:254:80 gets 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f687d1b1a0 <col:139, col:145> col:145 _Buffer 'char *'
| `-DeprecatedAttr 0x1f687d1b390 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using gets_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d1b5b0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:255:16, col:54> col:28 _getw 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687d1b4d0 <col:42, col:49> col:49 _File 'FILE *'
|-FunctionDecl 0x1f687d1b7d0 <line:258:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x1f687d1b688 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x1f687d1b980 <line:261:28, col:68> col:40 _pclose 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687d1b8a0 <col:56, col:63> col:63 _File 'FILE *'
|-FunctionDecl 0x1f687d1bbd0 <line:262:24, col:101> col:39 _popen 'FILE *(const char *, const char *) __attribute__((cdecl))':'FILE *(const char *, const char *)'
| |-ParmVarDecl 0x1f687d1ba58 <col:53, col:66> col:66 _Command 'const char *'
| `-ParmVarDecl 0x1f687d1bad8 <col:83, col:96> col:96 _Mode 'const char *'
|-FunctionDecl 0x1f687d22e80 <line:264:40> col:40 implicit printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x1f687d22f20 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1f687d22f90 <col:40> Implicit printf 1 2
|-FunctionDecl 0x1f687d22ff8 prev 0x1f687d22e80 <col:28, col:102> col:40 printf 'int (const char *, ...)'
| |-ParmVarDecl 0x1f687d1bcb0 <col:77, col:90> col:90 _Format 'const char *'
| `-FormatAttr 0x1f687d230e8 <col:40> Inherited printf 1 2
|-FunctionDecl 0x1f687d23218 <line:266:28, col:104> col:40 printf_s 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1f687d23138 <col:79, col:92> col:92 _Format 'const char *'
|-FunctionDecl 0x1f687d23468 <line:268:28, col:79> col:40 putc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f687d232f0 <col:50, col:54> col:54 _Ch 'int'
| `-ParmVarDecl 0x1f687d23368 <col:67, col:74> col:74 _File 'FILE *'
|-FunctionDecl 0x1f687d23628 <line:269:28, col:60> col:40 putchar 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687d23548 <col:53, col:57> col:57 _Ch 'int'
|-FunctionDecl 0x1f687d23848 <line:270:28, col:69> col:40 puts 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1f687d23700 <col:52, col:65> col:65 _Str 'const char *'
|-FunctionDecl 0x1f687d23a98 <line:271:28, col:82> col:40 _putw 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f687d23920 <col:51, col:55> col:55 _Word 'int'
| `-ParmVarDecl 0x1f687d23998 <col:70, col:77> col:77 _File 'FILE *'
|-FunctionDecl 0x1f687d23c58 <line:274:9, col:57> col:21 remove 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1f687d23b78 <col:35, col:48> col:48 _Filename 'const char *'
|-FunctionDecl 0x1f687d76120 <line:275:24, col:109> col:36 rename 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f687d23d30 <col:50, col:63> col:63 _OldFilename 'const char *'
| `-ParmVarDecl 0x1f687d23db0 <col:84, col:97> col:97 _NewFilename 'const char *'
|-FunctionDecl 0x1f687d762e0 <line:276:9, col:58> col:21 _unlink 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1f687d76200 <col:36, col:49> col:49 _Filename 'const char *'
|-FunctionDecl 0x1f687d76570 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:278:89> col:53 unlink 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x1f687d76490 <col:67, col:80> col:80 _Filename 'const char *'
| `-DeprecatedAttr 0x1f687d76618 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _unlink. See online help for details." ""
|-FunctionDecl 0x1f687d76810 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:281:9, col:49> col:22 rewind 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1f687d76738 <col:37, col:44> col:44 _File 'FILE *'
|-FunctionDecl 0x1f687d769a0 <line:282:28, col:51> col:40 _rmtmp 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f687d76c48 <line:283:69> col:69 implicit scanf 'int (const char *restrict, ...)' extern
| |-ParmVarDecl 0x1f687d76ce8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1f687d76d58 <col:69> Implicit scanf 1 2
|-FunctionDecl 0x1f687d76dc0 prev 0x1f687d76c48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:283:129> col:69 scanf 'int (const char *restrict, ...)'
| |-ParmVarDecl 0x1f687d76b30 <col:104, col:117> col:117 _Format 'const char *'
| |-FormatAttr 0x1f687d76f98 <col:69> Inherited scanf 1 2
| `-DeprecatedAttr 0x1f687d76e68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d70300 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:284:177> col:76 _scanf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d700c8 <col:124, col:137> col:137 _Format 'const char *'
| |-ParmVarDecl 0x1f687d70140 <col:155, col:165> col:165 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d703b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _scanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d705d8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:288:40, col:116> col:52 scanf_s 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1f687d704f8 <col:91, col:104> col:104 _Format 'const char *'
|-FunctionDecl 0x1f687d70828 <line:290:40, col:157> col:52 _scanf_s_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d706b0 <col:104, col:117> col:117 _Format 'const char *'
| `-ParmVarDecl 0x1f687d70728 <col:135, col:145> col:145 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d70be8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:292:150> col:55 setbuf 'void (FILE *, char *) __attribute__((cdecl))':'void (FILE *, char *)'
| |-ParmVarDecl 0x1f687d709c0 <col:70, col:77> col:77 _File 'FILE *'
| |-ParmVarDecl 0x1f687d70a40 <col:136, col:143> col:143 _Buffer 'char *'
| `-DeprecatedAttr 0x1f687d70c98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using setvbuf instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d70ec0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:293:28, col:66> col:40 _setmaxstdio 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687d70de0 <col:58, col:62> col:62 _Max 'int'
|-FunctionDecl 0x1f687d71148 <line:294:28, col:93> col:49 _set_output_format 'unsigned int (unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int)'
| `-ParmVarDecl 0x1f687d71000 <col:73, col:86> col:86 _Format 'unsigned int'
|-FunctionDecl 0x1f687d71330 <line:295:28, col:72> col:49 _get_output_format 'unsigned int (void) __attribute__((cdecl))':'unsigned int (void)'
|-FunctionDecl 0x1f687d71780 <line:296:28, col:145> col:40 setvbuf 'int (FILE *, char *, int, size_t) __attribute__((cdecl))':'int (FILE *, char *, int, size_t)'
| |-ParmVarDecl 0x1f687d713f8 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1f687d71478 <col:99, col:106> col:106 _Buf 'char *'
| |-ParmVarDecl 0x1f687d714f8 <col:117, col:121> col:121 _Mode 'int'
| `-ParmVarDecl 0x1f687d71570 <col:133, col:140> col:140 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687d71c00 <line:297:40, col:213> col:52 _snprintf_s 'int (char *, size_t, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f687d71870 <col:93, col:100> col:100 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d718e8 <col:114, col:121> col:121 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d71960 <col:140, col:147> col:147 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d719e0 <col:188, col:201> col:201 _Format 'const char *'
|-FunctionDecl 0x1f687d6efe0 <line:300:40, col:188> col:52 sprintf_s 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f687d71cf0 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d71d68 <col:112, col:119> col:119 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d71de8 <col:163, col:176> col:176 _Format 'const char *'
|-FunctionDecl 0x1f687d6f1a8 <line:303:24, col:101> col:36 _scprintf 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1f687d6f0c8 <col:76, col:89> col:89 _Format 'const char *'
|-FunctionDecl 0x1f687d6f580 <line:304:70> col:70 implicit sscanf 'int (const char *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x1f687d6f620 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1f687d6f688 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1f687d6f700 <col:70> Implicit scanf 2 3
|-FunctionDecl 0x1f687d6f768 prev 0x1f687d6f580 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:304:157> col:70 sscanf 'int (const char *restrict, const char *restrict, ...)'
| |-ParmVarDecl 0x1f687d6f340 <col:84, col:97> col:97 _Src 'const char *'
| |-ParmVarDecl 0x1f687d6f3c0 <col:132, col:145> col:145 _Format 'const char *'
| |-FormatAttr 0x1f687d6f948 <col:70> Inherited scanf 2 3
| `-DeprecatedAttr 0x1f687d6f818 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d6fd38 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:305:205> col:77 _sscanf_l 'int (const char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d6fa58 <col:94, col:107> col:107 _Src 'const char *'
| |-ParmVarDecl 0x1f687d6fad8 <col:152, col:165> col:165 _Format 'const char *'
| |-ParmVarDecl 0x1f687d6fb50 <col:183, col:193> col:193 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d6fdf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _sscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d78170 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:309:40, col:143> col:52 sscanf_s 'int (const char *, const char *, ...) __attribute__((cdecl))':'int (const char *, const char *, ...)'
| |-ParmVarDecl 0x1f687d6ff38 <col:68, col:81> col:81 _Src 'const char *'
| `-ParmVarDecl 0x1f687d78070 <col:118, col:131> col:131 _Format 'const char *'
|-FunctionDecl 0x1f687d78468 <line:311:40, col:184> col:52 _sscanf_s_l 'int (const char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d78250 <col:71, col:84> col:84 _Src 'const char *'
| |-ParmVarDecl 0x1f687d782d0 <col:131, col:144> col:144 _Format 'const char *'
| `-ParmVarDecl 0x1f687d78348 <col:162, col:172> col:172 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d788f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:312:217> col:76 _snscanf 'int (const char *, size_t, const char *, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f687d78610 <col:121, col:134> col:134 _Src 'const char *'
| |-ParmVarDecl 0x1f687d78688 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d78708 <col:192, col:205> col:205 _Format 'const char *'
| `-DeprecatedAttr 0x1f687d789b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d78f80 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:313:259> col:78 _snscanf_l 'int (const char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d78bf0 <col:125, col:138> col:138 _Src 'const char *'
| |-ParmVarDecl 0x1f687d78c68 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d78ce8 <col:206, col:219> col:219 _Format 'const char *'
| |-ParmVarDecl 0x1f687d78d60 <col:237, col:247> col:247 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d77060 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d773c0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:314:40, col:197> col:52 _snscanf_s 'int (const char *, size_t, const char *, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f687d771a8 <col:99, col:112> col:112 _Src 'const char *'
| |-ParmVarDecl 0x1f687d77220 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d772a0 <col:172, col:185> col:185 _Format 'const char *'
|-FunctionDecl 0x1f687d77758 <line:315:40, col:237> col:52 _snscanf_s_l 'int (const char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d774a8 <col:101, col:114> col:114 _Src 'const char *'
| |-ParmVarDecl 0x1f687d77520 <col:125, col:132> col:132 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d775a0 <col:184, col:197> col:197 _Format 'const char *'
| `-ParmVarDecl 0x1f687d77618 <col:215, col:225> col:225 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d779b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:317:86> col:74 tmpfile 'FILE *(void) __attribute__((cdecl))':'FILE *(void)'
| `-DeprecatedAttr 0x1f687d77a58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using tmpfile_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d77d10 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:319:28, col:96> col:44 tmpfile_s 'errno_t (FILE **) __attribute__((cdecl))':'errno_t (FILE **)'
| `-ParmVarDecl 0x1f687d77ba0 <col:83, col:91> col:91 _File 'FILE **'
|-FunctionDecl 0x1f687d73020 <line:320:28, col:106> col:44 tmpnam_s 'errno_t (char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t)'
| |-ParmVarDecl 0x1f687d77de8 <col:75, col:82> col:82 _Buf 'char *'
| `-ParmVarDecl 0x1f687d77e60 <col:93, col:101> col:101 _Size 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f687d732a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:323:79 tmpnam 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f687d731c0 <col:113, col:119> col:119 _Buffer 'char *'
| `-DeprecatedAttr 0x1f687d73348 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using tmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d73608 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:324:28, col:81> col:40 ungetc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f687d73490 <col:52, col:56> col:56 _Ch 'int'
| `-ParmVarDecl 0x1f687d73508 <col:69, col:76> col:76 _File 'FILE *'
|-FunctionDecl 0x1f687d73a20 <line:325:40> col:40 implicit vfprintf 'int (FILE *, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f687d73ac0 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x1f687d73b28 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f687d73b90 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f687d73c10 <col:40> Implicit printf 2 0
|-FunctionDecl 0x1f687d73c78 prev 0x1f687d73a20 <col:28, col:139> col:40 vfprintf 'int (FILE *, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1f687d736e0 <col:57, col:64> col:64 _File 'FILE *'
| |-ParmVarDecl 0x1f687d73760 <col:101, col:114> col:114 _Format 'const char *'
| |-ParmVarDecl 0x1f687d737d8 <col:123, col:131> col:131 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1f687d73d78 <col:40> Inherited printf 2 0
|-FunctionDecl 0x1f687d79080 <line:326:40> col:40 implicit vfscanf 'int (FILE *restrict, const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f687d79120 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x1f687d79188 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1f687d791f0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f687d79270 <col:40> Implicit scanf 2 0
|-FunctionDecl 0x1f687d792d8 prev 0x1f687d79080 <col:28, col:138> col:40 vfscanf 'int (FILE *restrict, const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1f687d73dc0 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1f687d73e40 <col:100, col:113> col:113 _Format 'const char *'
| |-ParmVarDecl 0x1f687d73eb8 <col:122, col:130> col:130 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1f687d793d8 <col:40> Inherited scanf 2 0
|-FunctionDecl 0x1f687d79638 <line:328:28, col:141> col:40 vfprintf_s 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1f687d79420 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1f687d794a0 <col:103, col:116> col:116 _Format 'const char *'
| `-ParmVarDecl 0x1f687d79518 <col:125, col:133> col:133 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d79930 <line:329:28, col:140> col:40 vfscanf_s 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1f687d79718 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1f687d79798 <col:102, col:115> col:115 _Format 'const char *'
| `-ParmVarDecl 0x1f687d79810 <col:124, col:132> col:132 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d79c78 <line:331:40> col:40 implicit vprintf 'int (const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f687d79d18 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f687d79d80 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f687d79df8 <col:40> Implicit printf 1 0
|-FunctionDecl 0x1f687d79e60 prev 0x1f687d79c78 <col:28, col:116> col:40 vprintf 'int (const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1f687d79a18 <col:78, col:91> col:91 _Format 'const char *'
| |-ParmVarDecl 0x1f687d79a90 <col:100, col:108> col:108 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1f687d79f58 <col:40> Inherited printf 1 0
|-FunctionDecl 0x1f687d72148 <line:332:40> col:40 implicit vscanf 'int (const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f687d721e8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1f687d72250 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f687d722c8 <col:40> Implicit scanf 1 0
|-FunctionDecl 0x1f687d72330 prev 0x1f687d72148 <col:28, col:115> col:40 vscanf 'int (const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1f687d79fa8 <col:77, col:90> col:90 _Format 'const char *'
| |-ParmVarDecl 0x1f687d72010 <col:99, col:107> col:107 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1f687d72428 <col:40> Inherited scanf 1 0
|-FunctionDecl 0x1f687d725f0 <line:334:28, col:118> col:40 vprintf_s 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1f687d72478 <col:80, col:93> col:93 _Format 'const char *'
| `-ParmVarDecl 0x1f687d724f0 <col:102, col:110> col:110 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d72848 <line:335:28, col:117> col:40 vscanf_s 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1f687d726d0 <col:79, col:92> col:92 _Format 'const char *'
| `-ParmVarDecl 0x1f687d72748 <col:101, col:109> col:109 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d72da8 <line:337:77> col:77 implicit vsnprintf 'int (char *, unsigned long long, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f687d72e48 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f687d72eb0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1f687d72f18 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f687d72f80 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f687d75040 <col:77> Implicit printf 3 0
|-FunctionDecl 0x1f687d750a8 prev 0x1f687d72da8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:337:218> col:77 vsnprintf 'int (char *, unsigned long long, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1f687d729e8 <col:111, col:118> col:118 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d72a60 <col:132, col:139> col:139 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d72ae0 <col:180, col:193> col:193 _Format 'const char *'
| |-ParmVarDecl 0x1f687d72b58 <col:202, col:210> col:210 _ArgList 'va_list':'char *'
| |-FormatAttr 0x1f687d75298 <col:77> Inherited printf 3 0
| `-DeprecatedAttr 0x1f687d75168 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d75708 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:339:28, col:206> col:40 vsnprintf_s 'int (char *, size_t, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f687d752e8 <col:77, col:84> col:84 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d75360 <col:98, col:105> col:105 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d753d8 <col:120, col:127> col:127 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d75458 <col:168, col:181> col:181 _Format 'const char *'
| `-ParmVarDecl 0x1f687d754d0 <col:190, col:198> col:198 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d75b48 <line:342:40, col:227> col:52 _vsnprintf_s 'int (char *, size_t, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f687d75800 <col:94, col:101> col:101 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d75878 <col:115, col:122> col:122 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d758f0 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d75970 <col:189, col:202> col:202 _Format 'const char *'
| `-ParmVarDecl 0x1f687d759e8 <col:211, col:219> col:219 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d75f18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2003:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:346:89 _snprintf 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f687d75d00 <col:182, col:188> col:188 _Dest 'char *'
| |-ParmVarDecl 0x1f687d75d78 <col:200, col:208> col:208 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d75df8 <col:246, col:260> col:260 _Format 'const char *'
| `-DeprecatedAttr 0x1f687d75fd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d7a500 <col:36, line:2004:164> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:346:100 _vsnprintf 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f687d7a250 <col:182, col:188> col:188 _Dest 'char *'
| |-ParmVarDecl 0x1f687d7a2c8 <col:200, col:208> col:208 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d7a348 <col:246, col:260> col:260 _Format 'const char *'
| |-ParmVarDecl 0x1f687d7a3c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:2004:151, col:159> col:159 _Args 'va_list':'char *'
| `-DeprecatedAttr 0x1f687d7a5c0 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d7a9b8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:349:21, col:183> col:33 vsprintf_s 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f687d7a708 <col:73, col:80> col:80 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d7a780 <col:94, col:101> col:101 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d7a800 <col:145, col:158> col:158 _Format 'const char *'
| `-ParmVarDecl 0x1f687d7a878 <col:167, col:175> col:175 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d7ad78 <line:351:40, col:149> col:52 vsscanf_s 'int (const char *, const char *, va_list) __attribute__((cdecl))':'int (const char *, const char *, va_list)'
| |-ParmVarDecl 0x1f687d7aaa8 <col:62, col:75> col:75 _Src 'const char *'
| |-ParmVarDecl 0x1f687d7ab28 <col:111, col:124> col:124 _Format 'const char *'
| `-ParmVarDecl 0x1f687d7aba0 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d7b140 <line:356:85> col:85 implicit sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x1f687d7b1e0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f687d7b248 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1f687d7b2c0 <col:85> Implicit printf 2 3
|-FunctionDecl 0x1f687d7b328 prev 0x1f687d7b140 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1957:138> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:85 sprintf 'int (char *, const char *, ...)'
| |-ParmVarDecl 0x1f687d7af20 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1f687d7afa0 <col:171, col:185> col:185 _Format 'const char *'
| |-FormatAttr 0x1f687d7b508 <col:85> Inherited printf 2 3
| `-DeprecatedAttr 0x1f687d7b3d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d7b930 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94> col:94 implicit vsprintf 'int (char *, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f687d7b9d0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f687d7ba38 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f687d7baa0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f687d7bb20 <col:94> Implicit printf 2 0
|-FunctionDecl 0x1f687d7bb88 prev 0x1f687d7b930 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1958:150> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94 vsprintf 'int (char *, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1f687d7b618 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1f687d7b698 <col:171, col:185> col:185 _Format 'const char *'
| |-ParmVarDecl 0x1f687d7b710 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1958:137, col:145> col:145 _Args 'va_list':'char *'
| |-FormatAttr 0x1f687d7bd70 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94> Inherited printf 2 0
| `-DeprecatedAttr 0x1f687d7bc40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using vsprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d74030 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:357:40> col:40 implicit vsscanf 'int (const char *restrict, const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f687d740d0 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1f687d74138 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1f687d741a0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f687d74220 <col:40> Implicit scanf 2 0
|-FunctionDecl 0x1f687d74288 prev 0x1f687d74030 <col:28, col:138> col:40 vsscanf 'int (const char *restrict, const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1f687d7bdc0 <col:48, col:61> col:61 _srcBuf 'const char *'
| |-ParmVarDecl 0x1f687d7be40 <col:100, col:113> col:113 _Format 'const char *'
| |-ParmVarDecl 0x1f687d7beb8 <col:122, col:130> col:130 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1f687d74388 <col:40> Inherited scanf 2 0
|-FunctionDecl 0x1f687d74550 <line:359:24, col:115> col:36 _vscprintf 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1f687d743d8 <col:77, col:90> col:90 _Format 'const char *'
| `-ParmVarDecl 0x1f687d74450 <col:99, col:107> col:107 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d74848 <line:360:28, col:170> col:40 _snprintf_c 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f687d74630 <col:76, col:83> col:83 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d746a8 <col:97, col:104> col:104 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d74728 <col:145, col:158> col:158 _Format 'const char *'
|-FunctionDecl 0x1f687d74be0 <line:361:28, col:183> col:40 _vsnprintf_c 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f687d74930 <col:77, col:83> col:83 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d749a8 <col:97, col:104> col:104 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d74a28 <col:145, col:158> col:158 _Format 'const char *'
| `-ParmVarDecl 0x1f687d74aa0 <col:167, col:175> col:175 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d74e48 <line:363:28, col:128> col:40 _fprintf_p 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1f687d74cc8 <col:59, col:66> col:66 _File 'FILE *'
| `-ParmVarDecl 0x1f687d74d48 <col:103, col:116> col:116 _Format 'const char *'
|-FunctionDecl 0x1f687d7d0c0 <line:364:28, col:105> col:40 _printf_p 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1f687d74f28 <col:80, col:93> col:93 _Format 'const char *'
|-FunctionDecl 0x1f687d7d3b0 <line:365:28, col:168> col:40 _sprintf_p 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f687d7d198 <col:77, col:84> col:84 _Dst 'char *'
| |-ParmVarDecl 0x1f687d7d210 <col:95, col:102> col:102 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d7d290 <col:143, col:156> col:156 _Format 'const char *'
|-FunctionDecl 0x1f687d7d6a8 <line:366:28, col:142> col:40 _vfprintf_p 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1f687d7d490 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1f687d7d510 <col:104, col:117> col:117 _Format 'const char *'
| `-ParmVarDecl 0x1f687d7d588 <col:126, col:134> col:134 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d7d908 <line:367:28, col:119> col:40 _vprintf_p 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1f687d7d790 <col:81, col:94> col:94 _Format 'const char *'
| `-ParmVarDecl 0x1f687d7d808 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d7dc98 <line:368:28, col:182> col:40 _vsprintf_p 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f687d7d9e8 <col:78, col:85> col:85 _Dst 'char *'
| |-ParmVarDecl 0x1f687d7da60 <col:96, col:103> col:103 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d7dae0 <col:144, col:157> col:157 _Format 'const char *'
| `-ParmVarDecl 0x1f687d7db58 <col:166, col:174> col:174 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d7de68 <line:369:24, col:103> col:36 _scprintf_p 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1f687d7dd88 <col:78, col:91> col:91 _Format 'const char *'
|-FunctionDecl 0x1f687d800f0 <line:370:24, col:117> col:36 _vscprintf_p 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1f687d7df40 <col:79, col:92> col:92 _Format 'const char *'
| `-ParmVarDecl 0x1f687d7dfb8 <col:101, col:109> col:109 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d802b0 <line:371:9, col:61> col:21 _set_printf_count_output 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687d801d0 <col:51, col:55> col:55 _Value 'int'
|-FunctionDecl 0x1f687d80440 <line:372:9, col:50> col:21 _get_printf_count_output 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f687d80688 <line:374:28, col:143> col:40 _printf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d80510 <col:90, col:103> col:103 _Format 'const char *'
| `-ParmVarDecl 0x1f687d80588 <col:121, col:131> col:131 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d808e0 <line:375:28, col:145> col:40 _printf_p_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d80768 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1f687d807e0 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d80b38 <line:376:28, col:145> col:40 _printf_s_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d809c0 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1f687d80a38 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d80ee8 <line:377:28, col:157> col:40 _vprintf_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d80c18 <col:91, col:104> col:104 _Format 'const char *'
| |-ParmVarDecl 0x1f687d80c90 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d80d08 <col:141, col:149> col:149 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d81220 <line:378:28, col:159> col:40 _vprintf_p_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d80fd0 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1f687d81048 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d81100 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d81518 <line:379:28, col:159> col:40 _vprintf_s_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d81308 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1f687d81380 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d813f8 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d81810 <line:381:28, col:166> col:40 _fprintf_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d815f8 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1f687d81678 <col:113, col:126> col:126 _Format 'const char *'
| `-ParmVarDecl 0x1f687d816f0 <col:144, col:154> col:154 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d81b08 <line:382:28, col:168> col:40 _fprintf_p_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d818f0 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1f687d81970 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1f687d819e8 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d81e00 <line:383:28, col:168> col:40 _fprintf_s_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d81be8 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1f687d81c68 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1f687d81ce0 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d7e230 <line:384:28, col:147> col:40 _vfprintf_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d81ee0 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1f687d81f60 <col:81, col:94> col:94 _Format 'const char *'
| |-ParmVarDecl 0x1f687d81fd8 <col:112, col:122> col:122 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d82050 <col:131, col:139> col:139 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d7e5c8 <line:385:28, col:149> col:40 _vfprintf_p_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d7e318 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1f687d7e398 <col:83, col:96> col:96 _Format 'const char *'
| |-ParmVarDecl 0x1f687d7e410 <col:114, col:124> col:124 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d7e488 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d7e960 <line:386:28, col:149> col:40 _vfprintf_s_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d7e6b0 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1f687d7e730 <col:83, col:96> col:96 _Format 'const char *'
| |-ParmVarDecl 0x1f687d7e7a8 <col:114, col:124> col:124 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d7e820 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d7edf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:388:221> col:78 _sprintf_l 'int (char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d7eb10 <col:112, col:119> col:119 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d7eb90 <col:168, col:181> col:181 _Format 'const char *'
| |-ParmVarDecl 0x1f687d7ec08 <col:199, col:209> col:209 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d7eeb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _sprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d82420 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:389:28, col:211> col:40 _sprintf_p_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d7eff8 <col:79, col:86> col:86 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d82110 <col:100, col:107> col:107 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d82190 <col:158, col:171> col:171 _Format 'const char *'
| `-ParmVarDecl 0x1f687d82208 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d827c0 <line:390:40, col:221> col:52 _sprintf_s_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d82510 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d82588 <col:111, col:118> col:118 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d82608 <col:168, col:181> col:181 _Format 'const char *'
| `-ParmVarDecl 0x1f687d82680 <col:199, col:209> col:209 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d82d10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:391:195> col:79 _vsprintf_l 'int (char *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d829b0 <col:114, col:121> col:121 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d82a30 <col:137, col:150> col:150 _Format 'const char *'
| |-ParmVarDecl 0x1f687d82aa8 <col:168> col:177 '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1f687d82b20 <col:179, col:187> col:187 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1f687d82dd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d83358 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:392:28, col:225> col:40 _vsprintf_p_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d82f18 <col:80, col:87> col:87 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d82f90 <col:101, col:108> col:108 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d83010 <col:159, col:171> col:171 _Format 'const char *'
| |-ParmVarDecl 0x1f687d83088 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d83120 <col:209, col:217> col:217 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d83798 <line:393:40, col:235> col:52 _vsprintf_s_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d83450 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d834c8 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d83548 <col:169, col:182> col:182 _Format 'const char *'
| |-ParmVarDecl 0x1f687d835c0 <col:200, col:210> col:210 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d83638 <col:219, col:227> col:227 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d83a08 <line:395:28, col:145> col:40 _scprintf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d83890 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1f687d83908 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d83c60 <line:396:28, col:147> col:40 _scprintf_p_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d83ae8 <col:94, col:107> col:107 _Format 'const char *'
| `-ParmVarDecl 0x1f687d83b60 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d83f50 <line:397:28, col:159> col:40 _vscprintf_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d83d40 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1f687d83db8 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d83e30 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d7c1e0 <line:398:28, col:161> col:40 _vscprintf_p_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d84038 <col:95, col:108> col:108 _Format 'const char *'
| |-ParmVarDecl 0x1f687d840b0 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d7c0c0 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d7c638 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:400:247> col:79 _snprintf_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d7c388 <col:115, col:122> col:122 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d7c400 <col:136, col:143> col:143 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d7c480 <col:194, col:207> col:207 _Format 'const char *'
| |-ParmVarDecl 0x1f687d7c4f8 <col:225, col:235> col:235 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d7c6f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d7caf0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:401:28, col:210> col:40 _snprintf_c_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d7c840 <col:78, col:85> col:85 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d7c8b8 <col:99, col:106> col:106 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d7c938 <col:157, col:170> col:170 _Format 'const char *'
| `-ParmVarDecl 0x1f687d7c9b0 <col:188, col:198> col:198 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d86150 <line:402:40, col:245> col:52 _snprintf_s_l 'int (char *, size_t, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d7cbe0 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d7cc58 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d7ccd0 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d7cd50 <col:192, col:205> col:205 _Format 'const char *'
| `-ParmVarDecl 0x1f687d7cdc8 <col:223, col:233> col:233 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d86690 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:403:262> col:80 _vsnprintf_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d86348 <col:117, col:124> col:124 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d863c0 <col:138, col:145> col:145 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d86440 <col:196, col:209> col:209 _Format 'const char *'
| |-ParmVarDecl 0x1f687d864b8 <col:227, col:237> col:237 _Locale '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1f687d86530 <col:246, col:254> col:254 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1f687d86758 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d86bd8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:404:28, col:176> col:40 _vsnprintf_c_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d868a8 <col:79, col:86> col:86 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d86920 <col:100, col:107> col:107 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d869a0 <col:118, col:129> col:130 'const char *'
| |-ParmVarDecl 0x1f687d86a18 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d86a90 <col:160, col:168> col:168 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d851a0 <line:405:28, col:245> col:40 _vsnprintf_s_l 'int (char *, size_t, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d86cd0 <col:80, col:87> col:87 _DstBuf 'char *'
| |-ParmVarDecl 0x1f687d86d48 <col:101, col:108> col:108 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d86dc0 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d86e40 <col:181, col:193> col:193 _Format 'const char *'
| |-ParmVarDecl 0x1f687d86eb8 <col:210, col:220> col:220 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d86f30 <col:229, col:237> col:237 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d85560 <line:415:24, col:128> col:39 _wfsopen 'FILE *(const wchar_t *, const wchar_t *, int) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *, int)'
| |-ParmVarDecl 0x1f687d85298 <col:55, col:71> col:71 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f687d85310 <col:89, col:105> col:105 _Mode 'const wchar_t *'
| `-ParmVarDecl 0x1f687d85390 <col:117, col:121> col:121 _ShFlag 'int'
|-FunctionDecl 0x1f687d857d0 <line:417:28, col:70> col:43 fgetwc 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1f687d85660 <col:58, col:65> col:65 _File 'FILE *'
|-FunctionDecl 0x1f687d859e8 <line:418:28, col:58> col:43 _fgetwchar 'wint_t (void) __attribute__((cdecl))':'wint_t (void)'
|-FunctionDecl 0x1f687d85cc8 <line:419:28, col:88> col:43 fputwc 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1f687d85ab0 <col:55, col:63> col:63 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1f687d85b28 <col:76, col:83> col:83 _File 'FILE *'
|-FunctionDecl 0x1f687d85f10 <line:420:28, col:70> col:43 _fputwchar 'wint_t (wchar_t) __attribute__((cdecl))':'wint_t (wchar_t)'
| `-ParmVarDecl 0x1f687d85da0 <col:59, col:67> col:67 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f687d88170 <line:421:24, col:65> col:39 getwc 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1f687d85fe0 <col:53, col:60> col:60 _File 'FILE *'
|-FunctionDecl 0x1f687d882f8 <line:422:24, col:52> col:39 getwchar 'wint_t (void) __attribute__((cdecl))':'wint_t (void)'
|-FunctionDecl 0x1f687d88530 <line:423:28, col:87> col:43 putwc 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1f687d883c0 <col:54, col:62> col:62 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1f687d88438 <col:75, col:82> col:82 _File 'FILE *'
|-FunctionDecl 0x1f687d886e0 <line:424:28, col:68> col:43 putwchar 'wint_t (wchar_t) __attribute__((cdecl))':'wint_t (wchar_t)'
| `-ParmVarDecl 0x1f687d88608 <col:57, col:65> col:65 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f687d88988 <line:425:28, col:88> col:43 ungetwc 'wint_t (wint_t, FILE *) __attribute__((cdecl))':'wint_t (wint_t, FILE *)'
| |-ParmVarDecl 0x1f687d887b0 <col:56, col:63> col:63 _Ch 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687d88828 <col:76, col:83> col:83 _File 'FILE *'
|-FunctionDecl 0x1f687d88d30 <line:427:28, col:141> col:46 fgetws 'wchar_t *(wchar_t *, int, FILE *) __attribute__((cdecl))':'wchar_t *(wchar_t *, int, FILE *)'
| |-ParmVarDecl 0x1f687d88a60 <col:82, col:92> col:92 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687d88ae0 <col:103, col:107> col:107 _SizeInWords 'int'
| `-ParmVarDecl 0x1f687d88b58 <col:129, col:136> col:136 _File 'FILE *'
|-FunctionDecl 0x1f687d89030 <line:428:28, col:96> col:40 fputws 'int (const wchar_t *, FILE *) __attribute__((cdecl))':'int (const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1f687d88e10 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f687d88e88 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1f687d87318 <line:429:28, col:124> col:46 _getws_s 'wchar_t *(wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687d89108 <col:84, col:94> col:94 _Str 'wchar_t *'
| `-ParmVarDecl 0x1f687d87170 <col:105, col:112> col:112 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687d87620 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:431:83 _getws 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f687d874b0 <col:115, col:124> col:124 _String 'wchar_t *'
| `-DeprecatedAttr 0x1f687d876c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _getws_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d87988 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:432:28, col:74> col:40 _putws 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1f687d87808 <col:54, col:70> col:70 _Str 'const wchar_t *'
|-FunctionDecl 0x1f687d87c90 <line:434:28, col:129> col:40 fwprintf 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d87a58 <col:57, col:64> col:64 _File 'FILE *'
| `-ParmVarDecl 0x1f687d87ad0 <col:101, col:117> col:117 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d87ee0 <line:436:28, col:131> col:40 fwprintf_s 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d87d68 <col:59, col:66> col:66 _File 'FILE *'
| `-ParmVarDecl 0x1f687d87de0 <col:103, col:119> col:119 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d8a190 <line:438:28, col:106> col:40 wprintf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f687d87fb8 <col:78, col:94> col:94 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d8a340 <line:440:28, col:108> col:40 wprintf_s 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f687d8a260 <col:80, col:96> col:96 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d8a4f0 <line:442:24, col:105> col:36 _scwprintf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f687d8a410 <col:77, col:93> col:93 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d8a888 <line:443:28, col:143> col:40 vfwprintf 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8a5c0 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1f687d8a638 <col:102, col:118> col:118 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8a6b0 <col:127, col:135> col:135 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8ab78 <line:444:28, col:142> col:40 vfwscanf 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8a968 <col:57, col:64> col:64 _File 'FILE *'
| |-ParmVarDecl 0x1f687d8a9e0 <col:101, col:117> col:117 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8aa58 <col:126, col:134> col:134 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8ae68 <line:446:28, col:145> col:40 vfwprintf_s 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8ac58 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1f687d8acd0 <col:104, col:120> col:120 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8ad48 <col:129, col:137> col:137 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8b1a0 <line:447:28, col:144> col:40 vfwscanf_s 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8af48 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1f687d8afc0 <col:103, col:119> col:119 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8b038 <col:128, col:136> col:136 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8b4a0 <line:449:28, col:120> col:40 vwprintf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8b280 <col:79, col:95> col:95 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8b2f8 <col:104, col:112> col:112 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8b6f0 <line:450:28, col:119> col:40 vwscanf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8b578 <col:78, col:94> col:94 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8b5f0 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8b940 <line:452:28, col:122> col:40 vwprintf_s 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8b7c8 <col:81, col:97> col:97 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8b840 <col:106, col:114> col:114 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8bb90 <line:453:28, col:121> col:40 vwscanf_s 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8ba18 <col:80, col:96> col:96 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8ba90 <col:105, col:113> col:113 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8bf48 <line:457:21, col:173> col:33 swprintf_s 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d8bc68 <col:73, col:83> col:83 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687d8bce0 <col:94, col:101> col:101 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d8bd58 <col:145, col:161> col:161 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d84340 <line:461:21, col:187> col:33 vswprintf_s 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8c028 <col:74, col:84> col:84 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687d8c0a0 <col:95, col:102> col:102 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d8c118 <col:146, col:162> col:162 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d84130 <col:171, col:179> col:179 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d846f8 <line:462:40, col:156> col:52 vswscanf_s 'int (const wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d84428 <col:63, col:79> col:79 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f687d844a0 <col:115, col:131> col:131 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d84518 <col:140, col:148> col:148 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d849e8 <line:466:28, col:145> col:40 vswscanf 'int (const wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d847d8 <col:49, col:65> col:65 _srcBuf 'const wchar_t *'
| |-ParmVarDecl 0x1f687d84850 <col:104, col:120> col:120 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d848c8 <col:129, col:137> col:137 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d84cd8 <line:468:28, col:184> col:40 _swprintf_c 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d84ac8 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d84b40 <col:105, col:112> col:112 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d84bb8 <col:156, col:172> col:172 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d85060 <line:469:28, col:198> col:40 _vswprintf_c 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d84db8 <col:82, col:92> col:92 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d84e30 <col:106, col:113> col:113 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d84ea8 <col:157, col:173> col:173 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d84f20 <col:182, col:190> col:190 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8c560 <line:471:40, col:220> col:52 _snwprintf_s 'int (wchar_t *, size_t, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d8c1d8 <col:94, col:104> col:104 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d8c250 <col:118, col:125> col:125 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d8c2c8 <col:144, col:151> col:151 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d8c340 <col:192, col:208> col:208 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d8ca68 <line:473:40, col:234> col:52 _vsnwprintf_s 'int (wchar_t *, size_t, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8c648 <col:95, col:105> col:105 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d8c6c0 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d8c738 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d8c7b0 <col:193, col:209> col:209 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8c828 <col:218, col:226> col:226 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8ce28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2003:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:477:89 _snwprintf 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d8cc18 <col:187, col:196> col:196 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f687d8cc90 <col:208, col:216> col:216 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d8cd08 <col:254, col:271> col:271 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1f687d8cee0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d8d3f0 <col:36, line:2004:164> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:477:101 _vsnwprintf 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8d0e0 <col:187, col:196> col:196 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f687d8d1c0 <col:208, col:216> col:216 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d8d238 <col:254, col:271> col:271 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d8d2b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:2004:151, col:159> col:159 _Args 'va_list':'char *'
| `-DeprecatedAttr 0x1f687d8d4b0 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d8d768 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:480:28, col:132> col:40 _fwprintf_p 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d8d5f0 <col:60, col:67> col:67 _File 'FILE *'
| `-ParmVarDecl 0x1f687d8d668 <col:104, col:120> col:120 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d8d920 <line:481:28, col:109> col:40 _wprintf_p 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f687d8d840 <col:81, col:97> col:97 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d8dc00 <line:482:28, col:146> col:40 _vfwprintf_p 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8d9f0 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1f687d8da68 <col:105, col:121> col:121 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8dae0 <col:130, col:138> col:138 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d8de58 <line:483:28, col:123> col:40 _vwprintf_p 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d8dce0 <col:82, col:98> col:98 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d8dd58 <col:107, col:115> col:115 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d90020 <line:484:28, col:178> col:40 _swprintf_p 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d8df30 <col:78, col:88> col:88 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d8dfa8 <col:102, col:109> col:109 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d8e020 <col:150, col:166> col:166 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d903a8 <line:485:28, col:192> col:40 _vswprintf_p 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d90100 <col:79, col:89> col:89 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d90178 <col:103, col:110> col:110 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d901f0 <col:151, col:167> col:167 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d90268 <col:176, col:184> col:184 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d90570 <line:486:24, col:107> col:36 _scwprintf_p 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f687d90490 <col:79, col:95> col:95 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d907b8 <line:487:24, col:121> col:36 _vscwprintf_p 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d90640 <col:80, col:96> col:96 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d906b8 <col:105, col:113> col:113 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d90ac0 <line:489:28, col:147> col:40 _wprintf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d90890 <col:91, col:107> col:107 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d90908 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d90d10 <line:490:28, col:149> col:40 _wprintf_p_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d90b98 <col:93, col:109> col:109 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d90c10 <col:127, col:137> col:137 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d90f60 <line:491:28, col:149> col:40 _wprintf_s_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d90de8 <col:93, col:109> col:109 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d90e60 <col:127, col:137> col:137 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d93348 <line:492:28, col:161> col:40 _vwprintf_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d93078 <col:92, col:108> col:108 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d930f0 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d93168 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d93638 <line:493:28, col:163> col:40 _vwprintf_p_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d93428 <col:94, col:110> col:110 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d934a0 <col:128, col:138> col:138 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d93518 <col:147, col:155> col:155 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d93928 <line:494:28, col:163> col:40 _vwprintf_s_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d93718 <col:94, col:110> col:110 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d93790 <col:128, col:138> col:138 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d93808 <col:147, col:155> col:155 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d93ce8 <line:496:28, col:170> col:40 _fwprintf_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d93a08 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1f687d93a80 <col:114, col:130> col:130 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d93af8 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d95070 <line:497:28, col:172> col:40 _fwprintf_p_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d93dc8 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1f687d93e40 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d93eb8 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d95360 <line:498:28, col:172> col:40 _fwprintf_s_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d95150 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1f687d951c8 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d95240 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d957b0 <line:499:28, col:184> col:40 _vfwprintf_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d95440 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1f687d954b8 <col:115, col:131> col:131 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d95530 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d955a8 <col:168, col:176> col:176 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d95b40 <line:500:28, col:186> col:40 _vfwprintf_p_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d95898 <col:63, col:70> col:70 _File 'FILE *'
| |-ParmVarDecl 0x1f687d95910 <col:117, col:133> col:133 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d95988 <col:151, col:161> col:161 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d95a00 <col:170, col:178> col:178 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d95ed0 <line:501:28, col:186> col:40 _vfwprintf_s_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d95c28 <col:63, col:70> col:70 _File 'FILE *'
| |-ParmVarDecl 0x1f687d95ca0 <col:117, col:133> col:133 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d95d18 <col:151, col:161> col:161 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d95d90 <col:170, col:178> col:178 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d96390 <line:503:28, col:218> col:40 _swprintf_c_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d95fb8 <col:80, col:90> col:90 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d96080 <col:104, col:111> col:111 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d960f8 <col:162, col:178> col:178 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d96170 <col:196, col:206> col:206 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d96720 <line:504:28, col:218> col:40 _swprintf_p_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d96478 <col:80, col:90> col:90 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d964f0 <col:104, col:111> col:111 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d96568 <col:162, col:178> col:178 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d965e0 <col:196, col:206> col:206 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d96ab0 <line:505:40, col:228> col:52 _swprintf_s_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d96808 <col:91, col:101> col:101 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d96880 <col:115, col:122> col:122 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d968f8 <col:172, col:188> col:188 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d96970 <col:206, col:216> col:216 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d96fb8 <line:506:28, col:232> col:40 used _vswprintf_c_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d96b98 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d96c10 <col:105, col:112> col:112 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d96c88 <col:163, col:179> col:179 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d96d00 <col:197, col:207> col:207 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d96d78 <col:216, col:224> col:224 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d973f8 <line:507:28, col:232> col:40 _vswprintf_p_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d970b8 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d97130 <col:105, col:112> col:112 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d971a8 <col:163, col:179> col:179 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d97220 <col:197, col:207> col:207 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d97298 <col:216, col:224> col:224 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d97828 <line:508:40, col:242> col:52 _vswprintf_s_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d974e8 <col:92, col:102> col:102 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d97560 <col:116, col:123> col:123 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d975d8 <col:173, col:189> col:189 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d97650 <col:207, col:217> col:217 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d976c8 <col:226, col:234> col:234 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d97a90 <line:510:24, col:145> col:36 _scwprintf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d97918 <col:89, col:105> col:105 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d97990 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d97ce0 <line:511:24, col:147> col:36 _scwprintf_p_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d97b68 <col:91, col:107> col:107 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d97be0 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d97fc8 <line:512:24, col:161> col:36 _vscwprintf_p_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d97db8 <col:92, col:108> col:108 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d97e30 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d97ea8 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d98438 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:514:255> col:80 _snwprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d98190 <col:117, col:127> col:127 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d98208 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d98280 <col:199, col:215> col:215 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d982f8 <col:233, col:243> col:243 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d984f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d98a68 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:515:40, col:252> col:52 _snwprintf_s_l 'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d98640 <col:92, col:102> col:102 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d986b8 <col:116, col:123> col:123 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d98730 <col:138, col:145> col:145 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d987a8 <col:196, col:212> col:212 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d98820 <col:230, col:240> col:240 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d98fa0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:516:270> col:81 _vsnwprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d98c60 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d98cd8 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d98d50 <col:201, col:217> col:217 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d98dc8 <col:235, col:245> col:245 _Locale '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1f687d98e40 <col:254, col:262> col:262 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1f687d91030 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d91640 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:517:40, col:266> col:52 _vsnwprintf_s_l 'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d91178 <col:93, col:103> col:103 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f687d911f0 <col:117, col:124> col:124 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d91268 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d912e0 <col:197, col:213> col:213 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d91358 <col:231, col:241> col:241 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687d913d0 <col:250, col:258> col:258 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d91b40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1957:138> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:533:110 _swprintf 'int (wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d91908 <col:183, col:192> col:192 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f687d91980 <col:229, col:246> col:246 _Format 'const wchar_t *'
| |-DeprecatedAttr 0x1f687d91bf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _swprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1f687d91d08 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1f687d99318 <col:36, line:1958:150> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:533:134 _vswprintf 'int (wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687d91fc0 <col:183, col:192> col:192 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f687d990c0 <col:229, col:246> col:246 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d99138 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1958:137, col:145> col:145 _Args 'va_list':'char *'
| |-DeprecatedAttr 0x1f687d993d0 <line:275:47, col:63> "This function or variable may be unsafe. Consider using vswprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1f687d994e8 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1f687d99a88 <col:36, line:1961:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:534:110 __swprintf_l 'int (wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d997a8 <col:211, col:220> col:220 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f687d99820 <col:267, col:284> col:284 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d99898 <col:293, col:304> col:304 _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-DeprecatedAttr 0x1f687d99b40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __swprintf_l_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1f687d99c60 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1f687d92250 <col:36, line:1962:166> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:534:124 __vswprintf_l 'int (wchar_t *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687d99f20 <col:211, col:220> col:220 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f687d99f98 <col:267, col:284> col:284 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9a010 <col:293, col:304> col:304 _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1f687d92040 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1962:153, col:161> col:161 _Args 'va_list':'char *'
| |-DeprecatedAttr 0x1f687d92310 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vswprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1f687d92430 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1f687d92738 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:36:1, line:44:1> line:36:21 swprintf 'int (wchar_t *, size_t, const wchar_t *, ...)' static inline
| |-ParmVarDecl 0x1f687d92558 <col:53, col:63> col:63 used _String 'wchar_t *'
| |-ParmVarDecl 0x1f687d925d0 <col:72, col:79> col:79 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d92648 <col:117, col:133> col:133 used _Format 'const wchar_t *'
| `-CompoundStmt 0x1f687da03c0 <line:37:1, line:44:1>
|   |-DeclStmt 0x1f687d92880 <line:38:5, col:21>
|   | `-VarDecl 0x1f687d92818 <col:5, col:13> col:13 used _Arglist 'va_list':'char *'
|   |-DeclStmt 0x1f687d92918 <line:39:5, col:13>
|   | `-VarDecl 0x1f687d928b0 <col:5, col:9> col:9 used _Ret 'int'
|   |-CallExpr 0x1f687d92c70 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34, col:62> 'void'
|   | |-ImplicitCastExpr 0x1f687d92c58 <col:34> 'void (*)(__builtin_va_list &, ...)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1f687d92b70 <col:34> '<builtin fn type>' Function 0x1f687d92a08 '__builtin_va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1f687d92ba8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:40:19> 'va_list':'char *' lvalue Var 0x1f687d92818 '_Arglist' 'va_list':'char *'
|   | `-DeclRefExpr 0x1f687d92be0 <col:29> 'const wchar_t *' lvalue ParmVar 0x1f687d92648 '_Format' 'const wchar_t *'
|   |-BinaryOperator 0x1f687d92f30 <line:41:5, col:67> 'int' '='
|   | |-DeclRefExpr 0x1f687d92ca0 <col:5> 'int' lvalue Var 0x1f687d928b0 '_Ret' 'int'
|   | `-CallExpr 0x1f687d92e70 <col:12, col:67> 'int'
|   |   |-ImplicitCastExpr 0x1f687d92e58 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f687d92cd8 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1f687d96fb8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|   |   |-ImplicitCastExpr 0x1f687d92eb8 <col:27> 'wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687d92cf8 <col:27> 'wchar_t *' lvalue ParmVar 0x1f687d92558 '_String' 'wchar_t *'
|   |   |-ImplicitCastExpr 0x1f687d92ed0 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687d92d18 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1f687d925d0 '_Count' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1f687d92ee8 <col:44> 'const wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687d92d38 <col:44> 'const wchar_t *' lvalue ParmVar 0x1f687d92648 '_Format' 'const wchar_t *'
|   |   |-ImplicitCastExpr 0x1f687d92f00 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> '_locale_t':'struct localeinfo_struct *' <NullToPointer>
|   |   | `-ParenExpr 0x1f687d92dc0 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x1f687d92d98 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x1f687d92d58 <col:26> 'int' 0
|   |   `-ImplicitCastExpr 0x1f687d92f18 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:41:59> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f687d92de0 <col:59> 'va_list':'char *' lvalue Var 0x1f687d92818 '_Arglist' 'va_list':'char *'
|   |-CallExpr 0x1f687da0350 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:27:34, col:53> 'void'
|   | |-ImplicitCastExpr 0x1f687da0338 <col:34> 'void (*)(__builtin_va_list &)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1f687da0288 <col:34> '<builtin fn type>' Function 0x1f687da0120 '__builtin_va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1f687da02c0 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:42:17> 'va_list':'char *' lvalue Var 0x1f687d92818 '_Arglist' 'va_list':'char *'
|   `-ReturnStmt 0x1f687da03b0 <line:43:5, col:12>
|     `-ImplicitCastExpr 0x1f687da0398 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1f687da0378 <col:12> 'int' lvalue Var 0x1f687d928b0 '_Ret' 'int'
|-FunctionDecl 0x1f687d92a08 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34> col:34 implicit used __builtin_va_start 'void (__builtin_va_list &, ...)' extern
| |-ParmVarDecl 0x1f687d92aa8 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1f687d92b18 <col:34> Implicit
|-FunctionDecl 0x1f687da0120 <line:27:34> col:34 implicit used __builtin_va_end 'void (__builtin_va_list &)' extern
| |-ParmVarDecl 0x1f687da01c0 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1f687da0230 <col:34> Implicit
|-FunctionDecl 0x1f687da06b8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:49:1, line:52:1> line:49:31 vswprintf 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)' static inline
| |-ParmVarDecl 0x1f687da0410 <col:64, col:74> col:74 used _String 'wchar_t *'
| |-ParmVarDecl 0x1f687da0488 <col:83, col:90> col:90 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687da0500 <col:138, col:154> col:154 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687da0578 <col:163, col:171> col:171 used _Ap 'va_list':'char *'
| `-CompoundStmt 0x1f687da09a0 <line:50:1, line:52:1>
|   `-ReturnStmt 0x1f687da0990 <line:51:5, col:62>
|     `-CallExpr 0x1f687da08d0 <col:12, col:62> 'int'
|       |-ImplicitCastExpr 0x1f687da08b8 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1f687da0790 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1f687d96fb8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|       |-ImplicitCastExpr 0x1f687da0918 <col:27> 'wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f687da07b0 <col:27> 'wchar_t *' lvalue ParmVar 0x1f687da0410 '_String' 'wchar_t *'
|       |-ImplicitCastExpr 0x1f687da0930 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1f687da07d0 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1f687da0488 '_Count' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1f687da0948 <col:44> 'const wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f687da07f0 <col:44> 'const wchar_t *' lvalue ParmVar 0x1f687da0500 '_Format' 'const wchar_t *'
|       |-ImplicitCastExpr 0x1f687da0960 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> '_locale_t':'struct localeinfo_struct *' <NullToPointer>
|       | `-ParenExpr 0x1f687da0878 <col:17, col:27> 'void *'
|       |   `-CStyleCastExpr 0x1f687da0850 <col:18, col:26> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x1f687da0810 <col:26> 'int' 0
|       `-ImplicitCastExpr 0x1f687da0978 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:51:59> 'va_list':'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1f687da0898 <col:59> 'va_list':'char *' lvalue ParmVar 0x1f687da0578 '_Ap' 'va_list':'char *'
|-FunctionDecl 0x1f687da0c40 <line:60:1, line:68:1> line:60:21 _swprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)' static inline
| |-ParmVarDecl 0x1f687da09c8 <col:56, col:66> col:66 used _String 'wchar_t *'
| |-ParmVarDecl 0x1f687da0a40 <col:75, col:82> col:82 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687da0ab8 <col:130, col:146> col:146 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687da0b30 <col:155, col:165> col:165 used _Plocinfo '_locale_t':'struct localeinfo_struct *'
| `-CompoundStmt 0x1f687da11d8 <line:61:1, line:68:1>
|   |-DeclStmt 0x1f687da0d90 <line:62:5, col:21>
|   | `-VarDecl 0x1f687da0d28 <col:5, col:13> col:13 used _Arglist 'va_list':'char *'
|   |-DeclStmt 0x1f687da0e28 <line:63:5, col:13>
|   | `-VarDecl 0x1f687da0dc0 <col:5, col:9> col:9 used _Ret 'int'
|   |-CallExpr 0x1f687da0ed0 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34, col:62> 'void'
|   | |-ImplicitCastExpr 0x1f687da0eb8 <col:34> 'void (*)(__builtin_va_list &, ...)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1f687da0e40 <col:34> '<builtin fn type>' Function 0x1f687d92a08 '__builtin_va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1f687da0e60 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:64:19> 'va_list':'char *' lvalue Var 0x1f687da0d28 '_Arglist' 'va_list':'char *'
|   | `-DeclRefExpr 0x1f687da0e98 <col:29> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1f687da0b30 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|   |-BinaryOperator 0x1f687da10d0 <line:65:5, col:72> 'int' '='
|   | |-DeclRefExpr 0x1f687da0f00 <col:5> 'int' lvalue Var 0x1f687da0dc0 '_Ret' 'int'
|   | `-CallExpr 0x1f687da1010 <col:12, col:72> 'int'
|   |   |-ImplicitCastExpr 0x1f687da0ff8 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f687da0f38 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1f687d96fb8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|   |   |-ImplicitCastExpr 0x1f687da1058 <col:27> 'wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687da0f58 <col:27> 'wchar_t *' lvalue ParmVar 0x1f687da09c8 '_String' 'wchar_t *'
|   |   |-ImplicitCastExpr 0x1f687da1070 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687da0f78 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1f687da0a40 '_Count' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1f687da1088 <col:44> 'const wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687da0f98 <col:44> 'const wchar_t *' lvalue ParmVar 0x1f687da0ab8 '_Format' 'const wchar_t *'
|   |   |-ImplicitCastExpr 0x1f687da10a0 <col:53> '_locale_t':'struct localeinfo_struct *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687da0fb8 <col:53> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1f687da0b30 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|   |   `-ImplicitCastExpr 0x1f687da10b8 <col:64> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f687da0fd8 <col:64> 'va_list':'char *' lvalue Var 0x1f687da0d28 '_Arglist' 'va_list':'char *'
|   |-CallExpr 0x1f687da1168 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:27:34, col:53> 'void'
|   | |-ImplicitCastExpr 0x1f687da1150 <col:34> 'void (*)(__builtin_va_list &)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1f687da10f0 <col:34> '<builtin fn type>' Function 0x1f687da0120 '__builtin_va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1f687da1130 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:66:17> 'va_list':'char *' lvalue Var 0x1f687da0d28 '_Arglist' 'va_list':'char *'
|   `-ReturnStmt 0x1f687da11c8 <line:67:5, col:12>
|     `-ImplicitCastExpr 0x1f687da11b0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1f687da1190 <col:12> 'int' lvalue Var 0x1f687da0dc0 '_Ret' 'int'
|-FunctionDecl 0x1f687da1568 <line:73:1, line:76:1> line:73:31 _vswprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' static inline
| |-ParmVarDecl 0x1f687da1228 <col:67, col:77> col:77 used _String 'wchar_t *'
| |-ParmVarDecl 0x1f687da12a0 <col:86, col:93> col:93 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687da1318 <col:141, col:157> col:157 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687da1390 <col:166, col:176> col:176 used _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1f687da1408 <col:187, col:195> col:195 used _Ap 'va_list':'char *'
| `-CompoundStmt 0x1f687da17f0 <line:74:1, line:76:1>
|   `-ReturnStmt 0x1f687da17e0 <line:75:5, col:67>
|     `-CallExpr 0x1f687da1720 <col:12, col:67> 'int'
|       |-ImplicitCastExpr 0x1f687da1708 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1f687da1648 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1f687d96fb8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|       |-ImplicitCastExpr 0x1f687da1768 <col:27> 'wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f687da1668 <col:27> 'wchar_t *' lvalue ParmVar 0x1f687da1228 '_String' 'wchar_t *'
|       |-ImplicitCastExpr 0x1f687da1780 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1f687da1688 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1f687da12a0 '_Count' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1f687da1798 <col:44> 'const wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f687da16a8 <col:44> 'const wchar_t *' lvalue ParmVar 0x1f687da1318 '_Format' 'const wchar_t *'
|       |-ImplicitCastExpr 0x1f687da17b0 <col:53> '_locale_t':'struct localeinfo_struct *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f687da16c8 <col:53> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1f687da1390 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|       `-ImplicitCastExpr 0x1f687da17c8 <col:64> 'va_list':'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1f687da16e8 <col:64> 'va_list':'char *' lvalue ParmVar 0x1f687da1408 '_Ap' 'va_list':'char *'
|-FunctionDecl 0x1f687da1a38 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:555:24, col:129> col:42 _wtempnam 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687da1818 <col:63, col:79> col:79 _Directory 'const wchar_t *'
| `-ParmVarDecl 0x1f687da1890 <col:102, col:118> col:118 _FilePrefix 'const wchar_t *'
|-FunctionDecl 0x1f687da1c88 <line:561:24, col:119> col:36 _vscwprintf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f687da1b10 <col:78, col:94> col:94 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687da1b88 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687da1f70 <line:562:24, col:159> col:36 _vscwprintf_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f687da1d60 <col:90, col:106> col:106 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687da1dd8 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f687da1e50 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f687d9d268 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:563:158> col:71 fwscanf 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d9d0f0 <col:87, col:94> col:94 _File 'FILE *'
| |-ParmVarDecl 0x1f687d9d168 <col:130, col:146> col:146 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1f687d9d318 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d9d728 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:564:206> col:78 _fwscanf_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d9d518 <col:97, col:104> col:104 _File 'FILE *'
| |-ParmVarDecl 0x1f687d9d590 <col:150, col:166> col:166 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9d608 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d9d7e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d9da98 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:568:28, col:131> col:40 fwscanf_s 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d9d920 <col:58, col:65> col:65 _File 'FILE *'
| `-ParmVarDecl 0x1f687d9d998 <col:103, col:119> col:119 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d9dd80 <line:570:28, col:172> col:40 _fwscanf_s_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d9db70 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1f687d9dbe8 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d9dc60 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d9e170 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:571:165> col:71 swscanf 'int (const wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d9df20 <col:86, col:102> col:102 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9df98 <col:137, col:153> col:153 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1f687d9e220 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using swscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d9e6f8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:572:213> col:78 _swscanf_l 'int (const wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d9e420 <col:96, col:112> col:112 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9e498 <col:157, col:173> col:173 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9e510 <col:191, col:201> col:201 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d9e7b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _swscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d9ea68 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:574:40, col:149> col:52 swscanf_s 'int (const wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d9e8f0 <col:69, col:84> col:84 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f687d9e968 <col:121, col:137> col:137 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d9ed50 <line:576:40, col:191> col:52 _swscanf_s_l 'int (const wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d9eb40 <col:72, col:88> col:88 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9ebb8 <col:135, col:151> col:151 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d9ec30 <col:169, col:179> col:179 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d9a1a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:577:219> col:77 _snwscanf 'int (const wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d9eef0 <col:117, col:133> col:133 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9ef68 <col:144, col:151> col:151 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d9efe0 <col:191, col:207> col:207 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1f687d9a260 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d9a7e0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:578:261> col:79 _snwscanf_l 'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d9a460 <col:121, col:137> col:137 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9a4d8 <col:148, col:155> col:155 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d9a550 <col:205, col:221> col:221 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9a5c8 <col:239, col:249> col:249 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d9a8a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d9abf0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:579:40, col:198> col:52 _snwscanf_s 'int (const wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d9a9e0 <col:94, col:110> col:110 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9aa58 <col:121, col:128> col:128 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687d9aad0 <col:170, col:186> col:186 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d9af78 <line:580:40, col:238> col:52 _snwscanf_s_l 'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d9acd0 <col:96, col:112> col:112 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9ad48 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d9adc0 <col:182, col:198> col:198 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d9ae38 <col:216, col:226> col:226 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d9b280 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:581:134> col:70 wscanf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| |-ParmVarDecl 0x1f687d9b1a0 <col:106, col:122> col:122 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1f687d9b328 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d9b6a0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:582:182> col:77 _wscanf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d9b528 <col:126, col:142> col:142 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f687d9b5a0 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687d9b750 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687d9b970 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:584:40, col:120> col:52 wscanf_s 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f687d9b890 <col:92, col:108> col:108 _Format 'const wchar_t *'
|-FunctionDecl 0x1f687d9bbb8 <line:586:40, col:161> col:52 _wscanf_s_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f687d9ba40 <col:105, col:121> col:121 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f687d9bab8 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687d9beb8 <line:589:24, col:99> col:39 _wfdopen 'FILE *(int, const wchar_t *) __attribute__((cdecl))':'FILE *(int, const wchar_t *)'
| |-ParmVarDecl 0x1f687d9bc98 <col:53, col:57> col:57 _FileHandle 'int'
| `-ParmVarDecl 0x1f687d9bd10 <col:78, col:94> col:94 _Mode 'const wchar_t *'
|-FunctionDecl 0x1f687da22e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:590:144> col:74 _wfopen 'FILE *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687d9c050 <col:89, col:105> col:105 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f687da2140 <col:123, col:139> col:139 _Mode 'const wchar_t *'
| `-DeprecatedAttr 0x1f687da2398 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wfopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687da27a0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:591:28, col:157> col:44 _wfopen_s 'errno_t (FILE **, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (FILE **, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687da24e0 <col:80, col:88> col:88 _File 'FILE **'
| |-ParmVarDecl 0x1f687da2558 <col:102, col:118> col:118 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x1f687da25d0 <col:136, col:152> col:152 _Mode 'const wchar_t *'
|-FunctionDecl 0x1f687da2c00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:592:173> col:76 _wfreopen 'FILE *(const wchar_t *, const wchar_t *, FILE *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1f687da2940 <col:93, col:109> col:109 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f687da29b8 <col:127, col:143> col:143 _Mode 'const wchar_t *'
| |-ParmVarDecl 0x1f687da2a30 <col:158, col:165> col:165 _OldFile 'FILE *'
| `-DeprecatedAttr 0x1f687da2cb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wfreopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687da3198 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:593:28, col:184> col:44 _wfreopen_s 'errno_t (FILE **, const wchar_t *, const wchar_t *, FILE *) __attribute__((cdecl))':'errno_t (FILE **, const wchar_t *, const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1f687da2e00 <col:82, col:90> col:90 _File 'FILE **'
| |-ParmVarDecl 0x1f687da2e78 <col:104, col:120> col:120 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f687da2ef0 <col:138, col:154> col:154 _Mode 'const wchar_t *'
| `-ParmVarDecl 0x1f687da2f68 <col:169, col:176> col:176 _OldFile 'FILE *'
|-FunctionDecl 0x1f687da33f0 <line:597:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x1f687da3280 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1f687da3630 <line:600:24, col:107> col:39 _wpopen 'FILE *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687da34c0 <col:54, col:69> col:69 _Command 'const wchar_t *'
| `-ParmVarDecl 0x1f687da3538 <col:86, col:102> col:102 _Mode 'const wchar_t *'
|-FunctionDecl 0x1f687da37e8 <line:602:9, col:62> col:21 _wremove 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1f687da3708 <col:37, col:53> col:53 _Filename 'const wchar_t *'
|-FunctionDecl 0x1f687da3ad8 <line:603:28, col:127> col:44 _wtmpnam_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687da38b8 <col:84, col:94> col:94 _DstBuf 'wchar_t *'
| `-ParmVarDecl 0x1f687da3930 <col:108, col:115> col:115 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687da3d48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:605:82 _wtmpnam 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f687da3c70 <col:118, col:127> col:127 _Buffer 'wchar_t *'
| `-DeprecatedAttr 0x1f687da3df0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wtmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687da4008 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:607:28, col:78> col:43 _fgetwc_nolock 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1f687da3f30 <col:66, col:73> col:73 _File 'FILE *'
|-FunctionDecl 0x1f687da5268 <line:608:28, col:96> col:43 _fputwc_nolock 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1f687da40d8 <col:63, col:71> col:71 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1f687da5170 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1f687da54b0 <line:609:28, col:96> col:43 _ungetwc_nolock 'wint_t (wint_t, FILE *) __attribute__((cdecl))':'wint_t (wint_t, FILE *)'
| |-ParmVarDecl 0x1f687da5340 <col:64, col:71> col:71 _Ch 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687da53b8 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1f687da5660 <line:670:9, col:53> col:22 _lock_file 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1f687da5588 <col:41, col:48> col:48 _File 'FILE *'
|-FunctionDecl 0x1f687da5808 <line:671:9, col:55> col:22 _unlock_file 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1f687da5730 <col:43, col:50> col:50 _File 'FILE *'
|-FunctionDecl 0x1f687da59b8 <line:673:28, col:75> col:40 _fclose_nolock 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687da58d8 <col:63, col:70> col:70 _File 'FILE *'
|-FunctionDecl 0x1f687da5b68 <line:674:28, col:79> col:40 _fflush_nolock 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f687da5a88 <col:67, col:74> col:74 _File 'FILE *'
|-FunctionDecl 0x1f687da5ee0 <line:675:28, col:179> col:43 _fread_nolock 'size_t (void *, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1f687da5c40 <col:97, col:104> col:104 _DstBuf 'void *'
| |-ParmVarDecl 0x1f687da5cb8 <col:118, col:125> col:125 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687da5d30 <col:144, col:151> col:151 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687da5da8 <col:167, col:174> col:174 _File 'FILE *'
|-FunctionDecl 0x1f687da7360 <line:676:28, col:203> col:43 _fread_nolock_s 'size_t (void *, size_t, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1f687da5fd0 <col:99, col:106> col:106 _DstBuf 'void *'
| |-ParmVarDecl 0x1f687da6048 <col:120, col:127> col:127 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687da60c0 <col:142, col:149> col:149 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687da7190 <col:168, col:175> col:175 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687da7208 <col:191, col:198> col:198 _File 'FILE *'
|-FunctionDecl 0x1f687da7670 <line:677:28, col:111> col:40 _fseek_nolock 'int (FILE *, long, int) __attribute__((cdecl))':'int (FILE *, long, int)'
| |-ParmVarDecl 0x1f687da7450 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1f687da74d0 <col:81, col:86> col:86 _Offset 'long'
| `-ParmVarDecl 0x1f687da7550 <col:100, col:104> col:104 _Origin 'int'
|-FunctionDecl 0x1f687da7830 <line:678:24, col:71> col:37 _ftell_nolock 'long (FILE *) __attribute__((cdecl))':'long (FILE *)'
| `-ParmVarDecl 0x1f687da7750 <col:59, col:66> col:66 _File 'FILE *'
|-FunctionDecl 0x1f687da7b20 <line:679:28, col:117> col:40 _fseeki64_nolock 'int (FILE *, long long, int) __attribute__((cdecl))':'int (FILE *, long long, int)'
| |-ParmVarDecl 0x1f687da7900 <col:65, col:72> col:72 _File 'FILE *'
| |-ParmVarDecl 0x1f687da7980 <col:84, col:92> col:92 _Offset 'long long'
| `-ParmVarDecl 0x1f687da7a00 <col:106, col:110> col:110 _Origin 'int'
|-FunctionDecl 0x1f687da7ce0 <line:680:24, col:77> col:40 _ftelli64_nolock 'long long (FILE *) __attribute__((cdecl))':'long long (FILE *)'
| `-ParmVarDecl 0x1f687da7c00 <col:65, col:72> col:72 _File 'FILE *'
|-FunctionDecl 0x1f687da8058 <line:681:28, col:170> col:43 _fwrite_nolock 'size_t (const void *, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (const void *, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1f687da7db8 <col:89, col:102> col:102 _DstBuf 'const void *'
| |-ParmVarDecl 0x1f687da7e30 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687da7ea8 <col:135, col:142> col:142 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687da7f20 <col:158, col:165> col:165 _File 'FILE *'
|-FunctionDecl 0x1f687da8318 <line:682:28, col:89> col:40 _ungetc_nolock 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f687da81a0 <col:60, col:64> col:64 _Ch 'int'
| `-ParmVarDecl 0x1f687da8218 <col:77, col:84> col:84 _File 'FILE *'
|-FunctionDecl 0x1f687da8650 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:709:136> col:57 tempnam 'char *(const char *, const char *) __attribute__((cdecl))':'char *(const char *, const char *)'
| |-ParmVarDecl 0x1f687da84d0 <col:76, col:89> col:89 _Directory 'const char *'
| |-ParmVarDecl 0x1f687da8550 <col:112, col:125> col:125 _FilePrefix 'const char *'
| `-DeprecatedAttr 0x1f687da8700 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _tempnam. See online help for details." ""
|-FunctionDecl 0x1f687da89b8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:715:89> col:75 fcloseall 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1f687da8a58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcloseall. See online help for details." ""
|-FunctionDecl 0x1f687da8d98 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:716:127> col:71 fdopen 'FILE *(int, const char *) __attribute__((cdecl))':'FILE *(int, const char *)'
| |-ParmVarDecl 0x1f687da8c20 <col:83, col:87> col:87 _FileHandle 'int'
| |-ParmVarDecl 0x1f687da8ca0 <col:107, col:120> col:120 _Format 'const char *'
| `-DeprecatedAttr 0x1f687da8e48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fdopen. See online help for details." ""
|-FunctionDecl 0x1f687da6180 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:717:87> col:74 fgetchar 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1f687da6220 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fgetchar. See online help for details." ""
|-FunctionDecl 0x1f687da64c0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:718:92> col:68 fileno 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| |-ParmVarDecl 0x1f687da63e0 <col:80, col:87> col:87 _File 'FILE *'
| `-DeprecatedAttr 0x1f687da6568 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fileno. See online help for details." ""
|-FunctionDecl 0x1f687da67e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:719:87> col:74 flushall 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1f687da6888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _flushall. See online help for details." ""
|-FunctionDecl 0x1f687da6b30 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:720:95> col:74 fputchar 'int (int) __attribute__((cdecl))':'int (int)'
| |-ParmVarDecl 0x1f687da6a50 <col:88, col:92> col:92 _Ch 'int'
| `-DeprecatedAttr 0x1f687da6bd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fputchar. See online help for details." ""
|-FunctionDecl 0x1f687da6eb8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:721:91> col:66 getw 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| |-ParmVarDecl 0x1f687da6dd8 <col:79, col:86> col:86 _File 'FILE *'
| `-DeprecatedAttr 0x1f687da6f60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _getw. See online help for details." ""
|-FunctionDecl 0x1f687dad368 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:722:109> col:70 putw 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f687dad1f0 <col:80, col:84> col:84 _Ch 'int'
| |-ParmVarDecl 0x1f687dad268 <col:97, col:104> col:104 _File 'FILE *'
| `-DeprecatedAttr 0x1f687dad418 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putw. See online help for details." ""
|-FunctionDecl 0x1f687dad6d8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:723:77> col:67 rmtmp 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1f687dad778 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _rmtmp. See online help for details." ""
|-FunctionDecl 0x1f687dadc20 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x1f687dad8a0 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x1f687dad920 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x1f687dad9a0 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x1f687dada18 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dadfe8 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1f687dae088 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1f687dae0f0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1f687dae158 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687daa1c0 prev 0x1f687dadfe8 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1f687dadd10 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x1f687dadd90 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x1f687dade08 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687daa578 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1f687daa2a8 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x1f687daa328 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x1f687daa3a0 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687daa9e0 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687daa660 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x1f687daa6e0 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x1f687daa758 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687daa7d0 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687daace8 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1f687daad88 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1f687daadf0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1f687daae58 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687daaed8 prev 0x1f687daace8 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1f687daaad0 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x1f687daab50 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x1f687daabc8 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dab2b8 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1f687dab358 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f687dab3c0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1f687dab428 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687dab4a8 prev 0x1f687dab2b8 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1f687daafc0 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x1f687dab040 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x1f687dab0b8 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dab908 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1f687dab590 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x1f687dab608 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f687dab688 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1f687dab700 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f687dabcc8 <line:94:25> col:25 implicit memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1f687dabd68 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f687dabdd0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1f687dabe38 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687dabeb8 prev 0x1f687dabcc8 <col:9, col:107> col:25 memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x1f687dab9f8 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x1f687daba78 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x1f687dabaf0 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dae340 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1f687dae3e0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f687dae448 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1f687dae4b0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1f687dae518 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687dae5a0 prev 0x1f687dae340 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1f687dac040 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x1f687dac0c0 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x1f687dac140 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x1f687dae200 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dae660 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x1f687daea40 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1f687dae828 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x1f687dae8a8 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x1f687dae920 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687daeaf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x1f687daeef0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1f687daec20 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1f687daec98 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687daed18 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x1f687dac280 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1f687daf098 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x1f687daf118 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x1f687dac330 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dac740 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1f687dac478 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1f687dac4f0 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dac570 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x1f687dacad0 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1f687dacb70 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1f687dacbd8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687dacc50 prev 0x1f687dacad0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x1f687dac8e8 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x1f687dac968 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x1f687dacd00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dad058 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1f687dace48 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1f687dacec0 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dacf40 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x1f687db5438 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1f687db54d8 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1f687db5540 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687db55b8 prev 0x1f687db5438 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x1f687db52b8 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x1f687db5338 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x1f687db5668 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687db5930 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x1f687db59d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687db5a38 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687db5ab0 prev 0x1f687db5930 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x1f687db57b0 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x1f687db5830 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x1f687db5d00 <line:121:32> col:32 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x1f687db5da0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687db5e10 prev 0x1f687db5d00 <col:16, col:63> col:32 used strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x1f687db5b90 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x1f687db6108 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1f687db5ee8 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1f687db5f60 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687db6378 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x1f687db6208 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x1f687db6280 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1f687db66a8 <line:131:1, line:133:1>
|   `-ReturnStmt 0x1f687db6698 <line:132:5, col:51>
|     `-ConditionalOperator 0x1f687db6668 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x1f687db64d8 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x1f687db64b8 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x1f687db6488 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1f687db6440 <col:13> 'const char *' lvalue ParmVar 0x1f687db6208 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x1f687db64a0 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x1f687db6460 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x1f687db6650 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1f687db64f8 <col:24> 'int' 0
|       `-CallExpr 0x1f687db65f0 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1f687db65d8 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1f687db6520 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x1f687db6108 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x1f687db6620 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1f687db6540 <col:36> 'const char *' lvalue ParmVar 0x1f687db6208 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x1f687db6638 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1f687db6560 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x1f687db6280 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687db6980 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1f687db66d8 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x1f687db6750 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f687db67d0 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x1f687db6848 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f687db6c88 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1f687db6d28 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f687db6d90 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1f687db6df8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687db6e78 prev 0x1f687db6c88 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1f687db6a70 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x1f687db6af0 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1f687db6b68 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687db70a8 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x1f687db6f60 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x1f687db3340 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1f687db33e0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687db3448 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f687db34c0 prev 0x1f687db3340 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1f687db7180 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x1f687db31d8 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x1f687db3720 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f687db35a0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1f687db3620 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1f687db3980 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f687db3800 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1f687db3880 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1f687db3d38 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1f687db3a60 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1f687db3ae0 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1f687db3b58 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687db3fa0 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f687db3e20 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x1f687db3ea0 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1f687db7320 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1f687db4080 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1f687db4100 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1f687db7200 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687db7588 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f687db7408 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x1f687db7488 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x1f687db7880 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1f687db7668 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x1f687db76e8 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x1f687db7760 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687db7c38 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1f687db7968 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1f687db79e8 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1f687db7a60 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687db80a0 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687db7d20 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1f687db7da0 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1f687db7e18 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687db7e90 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687db83c0 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1f687db8190 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1f687db8228 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1f687db82a0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687db8758 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687db84a8 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x1f687db8528 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x1f687db85a0 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687db8618 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687db8a68 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1f687db8b08 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687db8b70 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687db8be8 prev 0x1f687db8a68 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1f687db8848 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1f687db88c8 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x1f687db8e68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1f687db8d88 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x1f687db8f10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687db9300 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x1f687db9058 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x1f687db90d0 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687db9150 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x1f687db95d8 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x1f687db9678 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f687db96e8 prev 0x1f687db95d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x1f687db94a8 <col:90> col:93 'int'
| `-DeprecatedAttr 0x1f687db9790 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687db9ae8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1f687db98d8 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x1f687db9950 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687db99d0 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x1f687db9da8 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1f687db9bd0 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1f687db9c48 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dba028 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f687db9f48 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1f687dba0d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687db2470 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687db21b0 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1f687db2228 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687db22a0 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687db2840 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1f687db2618 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1f687db2690 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687db28f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687db2da8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1f687db2a38 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x1f687db2ab0 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f687db2b30 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x1f687db2ba8 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f687dc0308 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1f687dc03a8 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f687dc0410 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687dc0478 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687dc04f8 prev 0x1f687dc0308 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1f687db2f58 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x1f687db2fd8 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x1f687db3050 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dc05b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dc0910 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1f687dc09b0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f687dc0a18 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687dc0a80 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687dc0b00 prev 0x1f687dc0910 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1f687dc06f8 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x1f687dc0778 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x1f687dc07f0 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dc0e00 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1f687dc0be8 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x1f687dc0c68 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x1f687dc0ce0 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dc1198 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687dc0ee8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1f687dc0f68 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1f687dc0fe0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dc1058 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dba4d8 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1f687dba230 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1f687dba2a8 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f687dba328 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x1f687dba3a0 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f687dba8a0 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1f687dba940 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f687dba9a8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687dbaa10 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687dbaa90 prev 0x1f687dba8a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1f687dba688 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x1f687dba708 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x1f687dba780 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dbab48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dbb008 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x1f687dbac90 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x1f687dbad08 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687dbad88 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x1f687dbae00 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dbe4d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1f687dbb1b8 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x1f687dbe288 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x1f687dbe300 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dbe590 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dbe858 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1f687dbe8f8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687dbe960 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687dbe9d8 prev 0x1f687dbe858 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1f687dbe6d8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1f687dbe758 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x1f687dbec38 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1f687dbecd8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687dbed40 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f687dbedb8 prev 0x1f687dbec38 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1f687dbeab8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1f687dbeb38 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x1f687dbef78 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x1f687dbee98 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x1f687dbf1c8 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1f687dc12a0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687dc1308 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687dc1380 prev 0x1f687dbf1c8 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1f687dbf050 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x1f687dbf0d0 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x1f687dc15e0 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1f687dc1680 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687dc16e8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687dc1760 prev 0x1f687dc15e0 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1f687dc1460 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x1f687dc14e0 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x1f687dc1a80 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1f687dc1b20 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1f687dc1b88 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687dc1c00 prev 0x1f687dc1a80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x1f687dc1900 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x1f687dc1980 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x1f687dc1cb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dc2098 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x1f687dc1df8 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x1f687dc1e78 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x1f687dc1ef8 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x1f687dc2310 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1f687dc2180 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1f687dc21f8 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dc2590 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f687dc24b0 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1f687dc2638 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dc2988 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687dc2780 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1f687dc27f8 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dc2870 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dc2ca8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1f687dc2b30 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1f687dc2ba8 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687dc2d58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dc3170 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1f687dc3210 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f687dbf280 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f687dbf2e8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687dbf368 prev 0x1f687dc3170 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1f687dc2ea0 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1f687dc2f20 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x1f687dc2f98 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dbf7c8 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687dbf450 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1f687dbf4d0 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x1f687dbf548 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dbf5c0 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dbfa38 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x1f687dbfad8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f687dbfb48 prev 0x1f687dbfa38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x1f687dbf958 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x1f687dbfbf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x1f687dbff38 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f687dbfdb8 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1f687dbfe38 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1f687dbffe8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x1f687dbc350 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f687dc01b0 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1f687dbc250 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1f687dbc400 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x1f687dbc6a8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f687dbc5c8 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1f687dbc750 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x1f687dbcb30 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1f687dbc918 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x1f687dbc998 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x1f687dbca10 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dbcbe8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x1f687dbcfc8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1f687dbcdb0 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x1f687dbce30 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x1f687dbcea8 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dbd080 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x1f687dc33a0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f687dc32c0 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1f687dc3448 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x1f687dc3790 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1f687dc3610 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x1f687dc3690 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x1f687dc3840 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x1f687dc3ae8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f687dc3a08 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1f687dc3b90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x1f687dc3e20 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x1f687dc3cb0 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x1f687dc41b0 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1f687dc3ef0 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687dc3f68 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dc3fe0 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x1f687dc45b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dc43a0 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f687dc4418 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1f687dc4668 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dc49c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x1f687dc4a68 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1f687dc4ad0 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x1f687dc4b48 prev 0x1f687dc49c8 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x1f687dc47a8 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f687dc4820 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f687dc4e40 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x1f687dc4ee0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1f687dc4f48 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1f687dc4fc0 prev 0x1f687dc4e40 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x1f687dc4c20 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1f687dc4c98 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x1f687dbd260 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1f687dc5098 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687dc5110 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dc5188 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x1f687dbd570 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dbd400 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f687dbd478 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1f687dbd620 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dbd978 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dbd760 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f687dbd7d8 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x1f687dbdbc0 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x1f687dbdc60 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1f687dbdcd0 prev 0x1f687dbdbc0 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x1f687dbda50 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x1f687dbdfb8 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687dbdda0 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f687dbde18 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dc52e0 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x1f687dbe090 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f687dbe108 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1f687dc5678 <line:306:1, line:308:1>
|   `-ReturnStmt 0x1f687dc5668 <line:307:5, col:56>
|     `-ConditionalOperator 0x1f687dc5638 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x1f687dc54a0 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x1f687dc5480 <col:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x1f687dc5450 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1f687dc53a8 <col:13> 'const wchar_t *' lvalue ParmVar 0x1f687dbe090 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x1f687dc5468 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x1f687dc5430 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x1f687dc5408 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x1f687dc53c8 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x1f687dc5620 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1f687dc54c0 <col:29> 'int' 0
|       `-CallExpr 0x1f687dc55c0 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1f687dc55a8 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1f687dc54e8 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x1f687dbdfb8 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x1f687dc55f0 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x1f687dc5508 <col:41> 'const wchar_t *' lvalue ParmVar 0x1f687dbe090 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x1f687dc5608 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1f687dc5528 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x1f687dbe108 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dc5a08 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1f687dc56a0 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687dc5718 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f687dc5790 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f687dc5808 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f687dc5e70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687dc5bb0 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f687dc5c28 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1f687dc5ca0 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dc5f28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dc7378 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x1f687dc7418 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x1f687dc7480 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1f687dc74e8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f687dc7568 prev 0x1f687dc7378 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x1f687dc6068 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dc60e0 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f687dc6158 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dc78e8 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1f687dc7648 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687dc76c0 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f687dc7738 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f687dc77b0 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f687dc7c98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687dc7a90 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f687dc7b08 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1f687dc7b80 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dc7d50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dc8000 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dc7e90 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f687dc7f08 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x1f687dc8248 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1f687dc80d8 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f687dc8150 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f687dcd4f8 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dcd388 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f687dcd400 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x1f687dcd740 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dcd5d0 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f687dcd648 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x1f687dcda48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dcd8d8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f687dcd950 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x1f687dcdaf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dcdf60 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1f687dcdc38 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f687dcdcb0 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x1f687dcdd90 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x1f687dce280 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x1f687dce108 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x1f687dc8310 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dc8720 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1f687dc8450 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x1f687dc84c8 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dc8548 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x1f687dc8998 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1f687dc88c0 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1f687dc8a40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dc8e00 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1f687dc8b80 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x1f687dc8bf8 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dc8c70 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1f687dc9058 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dc8ee0 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1f687dc8f58 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x1f687dc9408 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f687dc9130 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dc91a8 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f687dc9220 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dc96f8 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687dc94e8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dc9560 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f687dc95d8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dc9b50 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687dc97d8 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dc9850 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1f687dc98c8 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dc9940 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dc9fa8 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x1f687dc9c38 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687dc9cb0 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687dc9d28 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1f687dc9da0 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dcb460 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1f687dca150 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f687dca1c8 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1f687dca240 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dcb518 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dcb730 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x1f687dcb658 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x1f687dcbac0 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x1f687dcb800 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687dcb878 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dcb8f0 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f687dcbe78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1f687dcbc60 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f687dcbcd8 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1f687dcbf28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dcc1d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687dcc068 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x1f687dcc0e0 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dca4d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f687dca400 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1f687dca580 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dca980 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687dca6c0 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f687dca738 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dca7b0 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dcad38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f687dcab20 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1f687dcab98 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687dcade8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dcb098 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687dcaf28 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x1f687dcafa0 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dcc350 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f687dcb230 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1f687dcc3f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dcc740 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687dcc538 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f687dcc5b0 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dcc628 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dcca50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f687dcc8e0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1f687dcc958 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f687dccb00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f687dccf00 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687dccc40 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687dcccb8 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f687dccd30 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dd53e0 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687dccfe0 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f687dcd058 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f687dcd0d0 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dcd148 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd5640 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dd54c8 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1f687dd5540 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x1f687dd5928 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f687dd5718 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dd5790 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f687dd5808 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd5b80 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dd5a08 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1f687dd5a80 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x1f687dd5e68 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f687dd5c58 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dd5cd0 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f687dd5d48 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd6158 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687dd5f48 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dd5fc0 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f687dd6038 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dd3500 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687dd6238 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dd62b0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1f687dd6328 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dd33c0 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd37f8 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687dd35e8 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dd3660 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f687dd36d8 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f687dd3b80 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f687dd38d8 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dd3950 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1f687dd39c8 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f687dd3a40 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd3de0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1f687dd3d08 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1f687dd3e88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x1f687dd41c0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dd4048 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dd40c0 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1f687dd4270 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x1f687dce630 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f687dce420 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dce498 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1f687dce510 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dce6e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x1f687dceab0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1f687dce8a8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f687dce920 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1f687dce998 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f687dceb68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x1f687dcee00 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f687dced28 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1f687dceea8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x1f687dcf1d8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1f687dcf068 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f687dcf0e0 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1f687dcf288 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x1f687dd1570 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f687dd1498 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1f687dd1618 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x1f687dd18b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f687dd17d8 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1f687dd1958 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x1f687dd1c90 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f687dd1b18 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f687dd1b90 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1f687dd1d40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-FunctionDecl 0x1f687dd1f80 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:49:9, col:58> col:40 __pctype_func 'const unsigned short *(void) __attribute__((cdecl))':'const unsigned short *(void)'
|-VarDecl 0x1f687dd2050 <line:51:9, col:38> col:38 _pctype 'const unsigned short *' extern
|-VarDecl 0x1f687dd2150 <line:62:9, col:45> col:37 _wctype 'const unsigned short []' extern
|-FunctionDecl 0x1f687dd0390 <line:73:9, col:53> col:34 __pwctype_func 'const wctype_t *(void) __attribute__((cdecl))':'const wctype_t *(void)'
|-VarDecl 0x1f687dd0458 <line:75:9, col:32> col:32 _pwctype 'const wctype_t *' extern
|-FunctionDecl 0x1f687dd06e0 <line:119:24, col:72> col:36 _isctype 'int (int, int) __attribute__((cdecl))':'int (int, int)'
| |-ParmVarDecl 0x1f687dd04f0 <col:50, col:54> col:54 _C 'int'
| `-ParmVarDecl 0x1f687dd0570 <col:63, col:67> col:67 _Type 'int'
|-FunctionDecl 0x1f687dd0a98 <line:120:24, col:102> col:36 _isctype_l 'int (int, int, _locale_t) __attribute__((cdecl))':'int (int, int, _locale_t)'
| |-ParmVarDecl 0x1f687dd07c0 <col:52, col:56> col:56 _C 'int'
| |-ParmVarDecl 0x1f687dd0840 <col:65, col:69> col:69 _Type 'int'
| `-ParmVarDecl 0x1f687dd08b8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd0c60 <line:121:55> col:55 implicit isalpha 'int (int)' extern
| |-ParmVarDecl 0x1f687dd0d00 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd0d70 <col:55> Implicit
| `-PureAttr 0x1f687dd0dc8 <col:55> Implicit
|-FunctionDecl 0x1f687dd0df0 prev 0x1f687dd0c60 <col:43, col:74> col:55 isalpha 'int (int)'
| |-ParmVarDecl 0x1f687dd0b80 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f687dd0ee0 <col:55> Inherited Implicit
| `-PureAttr 0x1f687dd0f08 <col:55> Inherited Implicit
|-FunctionDecl 0x1f687dd1170 <line:122:24, col:86> col:36 _isalpha_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd0f48 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd0fc0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd23b0 <line:123:55> col:55 implicit isupper 'int (int)' extern
| |-ParmVarDecl 0x1f687dd2450 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd24c0 <col:55> Implicit
| `-PureAttr 0x1f687dd2518 <col:55> Implicit
|-FunctionDecl 0x1f687dd2540 prev 0x1f687dd23b0 <col:43, col:74> col:55 isupper 'int (int)'
| |-ParmVarDecl 0x1f687dd1250 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f687dd2630 <col:55> Inherited Implicit
| `-PureAttr 0x1f687dd2658 <col:55> Inherited Implicit
|-FunctionDecl 0x1f687dd2810 <line:124:24, col:86> col:36 _isupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd2698 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd2710 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd29d0 <line:125:55> col:55 implicit islower 'int (int)' extern
| |-ParmVarDecl 0x1f687dd2a70 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd2ae0 <col:55> Implicit
| `-PureAttr 0x1f687dd2b38 <col:55> Implicit
|-FunctionDecl 0x1f687dd2b60 prev 0x1f687dd29d0 <col:43, col:74> col:55 islower 'int (int)'
| |-ParmVarDecl 0x1f687dd28f0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f687dd2c50 <col:55> Inherited Implicit
| `-PureAttr 0x1f687dd2c78 <col:55> Inherited Implicit
|-FunctionDecl 0x1f687dd2e30 <line:126:24, col:86> col:36 _islower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd2cb8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd2d30 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd2ff0 <line:127:55> col:55 implicit used isdigit 'int (int)' extern
| |-ParmVarDecl 0x1f687dd3090 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd3100 <col:55> Implicit
| `-PureAttr 0x1f687dd3158 <col:55> Implicit
|-FunctionDecl 0x1f687dd3180 prev 0x1f687dd2ff0 <col:43, col:74> col:55 used isdigit 'int (int)'
| |-ParmVarDecl 0x1f687dd2f10 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f687dd3270 <col:55> Inherited Implicit
| `-PureAttr 0x1f687dd3298 <col:55> Inherited Implicit
|-FunctionDecl 0x1f687dd8510 <line:128:24, col:86> col:36 _isdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd32d8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd8410 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd86d0 <line:129:36> col:36 implicit isxdigit 'int (int)' extern
| |-ParmVarDecl 0x1f687dd8770 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd87e0 <col:36> Implicit
| `-PureAttr 0x1f687dd8838 <col:36> Implicit
|-FunctionDecl 0x1f687dd8860 prev 0x1f687dd86d0 <col:24, col:56> col:36 isxdigit 'int (int)'
| |-ParmVarDecl 0x1f687dd85f0 <col:50, col:54> col:54 _C 'int'
| |-NoThrowAttr 0x1f687dd8950 <col:36> Inherited Implicit
| `-PureAttr 0x1f687dd8978 <col:36> Inherited Implicit
|-FunctionDecl 0x1f687dd8b30 <line:130:24, col:87> col:36 _isxdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd89b8 <col:53, col:57> col:57 _C 'int'
| `-ParmVarDecl 0x1f687dd8a30 <col:70, col:80> col:80 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd8cf0 <line:131:55> col:55 implicit isspace 'int (int)' extern
| |-ParmVarDecl 0x1f687dd8d90 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd8e00 <col:55> Implicit
| `-PureAttr 0x1f687dd8e58 <col:55> Implicit
|-FunctionDecl 0x1f687dd8e80 prev 0x1f687dd8cf0 <col:43, col:74> col:55 isspace 'int (int)'
| |-ParmVarDecl 0x1f687dd8c10 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f687dd8f70 <col:55> Inherited Implicit
| `-PureAttr 0x1f687dd8f98 <col:55> Inherited Implicit
|-FunctionDecl 0x1f687dd9150 <line:132:24, col:86> col:36 _isspace_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd8fd8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd9050 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd9310 <line:133:36> col:36 implicit ispunct 'int (int)' extern
| |-ParmVarDecl 0x1f687dd63f0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd6460 <col:36> Implicit
| `-PureAttr 0x1f687dd64b8 <col:36> Implicit
|-FunctionDecl 0x1f687dd64e0 prev 0x1f687dd9310 <col:24, col:55> col:36 ispunct 'int (int)'
| |-ParmVarDecl 0x1f687dd9230 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1f687dd65d0 <col:36> Inherited Implicit
| `-PureAttr 0x1f687dd65f8 <col:36> Inherited Implicit
|-FunctionDecl 0x1f687dd67b0 <line:134:24, col:86> col:36 _ispunct_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd6638 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd66b0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd6970 <line:135:36> col:36 implicit isblank 'int (int)' extern
| |-ParmVarDecl 0x1f687dd6a10 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd6a80 <col:36> Implicit
| `-PureAttr 0x1f687dd6ad8 <col:36> Implicit
|-FunctionDecl 0x1f687dd6b00 prev 0x1f687dd6970 <col:24, col:55> col:36 isblank 'int (int)'
| |-ParmVarDecl 0x1f687dd6890 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1f687dd6bf0 <col:36> Inherited Implicit
| `-PureAttr 0x1f687dd6c18 <col:36> Inherited Implicit
|-FunctionDecl 0x1f687dd6dd0 <line:136:24, col:86> col:36 _isblank_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd6c58 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd6cd0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd6f90 <line:137:55> col:55 implicit isalnum 'int (int)' extern
| |-ParmVarDecl 0x1f687dd7030 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd70a0 <col:55> Implicit
| `-PureAttr 0x1f687dd70f8 <col:55> Implicit
|-FunctionDecl 0x1f687dd7120 prev 0x1f687dd6f90 <col:43, col:74> col:55 isalnum 'int (int)'
| |-ParmVarDecl 0x1f687dd6eb0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f687dd7210 <col:55> Inherited Implicit
| `-PureAttr 0x1f687dd7238 <col:55> Inherited Implicit
|-FunctionDecl 0x1f687dd7400 <line:138:24, col:86> col:36 _isalnum_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd7278 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd72f0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd75c0 <line:139:36> col:36 implicit isprint 'int (int)' extern
| |-ParmVarDecl 0x1f687dd7660 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd76d0 <col:36> Implicit
| `-PureAttr 0x1f687dd7728 <col:36> Implicit
|-FunctionDecl 0x1f687dd7750 prev 0x1f687dd75c0 <col:24, col:55> col:36 isprint 'int (int)'
| |-ParmVarDecl 0x1f687dd74e0 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1f687dd7840 <col:36> Inherited Implicit
| `-PureAttr 0x1f687dd7868 <col:36> Inherited Implicit
|-FunctionDecl 0x1f687dd7a20 <line:140:24, col:86> col:36 _isprint_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd78a8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd7920 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd7be0 <line:141:36> col:36 implicit isgraph 'int (int)' extern
| |-ParmVarDecl 0x1f687dd7c80 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd7cf0 <col:36> Implicit
| `-PureAttr 0x1f687dd7d48 <col:36> Implicit
|-FunctionDecl 0x1f687dd7d70 prev 0x1f687dd7be0 <col:24, col:55> col:36 isgraph 'int (int)'
| |-ParmVarDecl 0x1f687dd7b00 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1f687dd7e60 <col:36> Inherited Implicit
| `-PureAttr 0x1f687dd7e88 <col:36> Inherited Implicit
|-FunctionDecl 0x1f687dd8040 <line:142:24, col:86> col:36 _isgraph_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd7ec8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd7f40 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd8200 <line:143:36> col:36 implicit iscntrl 'int (int)' extern
| |-ParmVarDecl 0x1f687dd82a0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd8310 <col:36> Implicit
| `-PureAttr 0x1f687dd8368 <col:36> Implicit
|-FunctionDecl 0x1f687dd9420 prev 0x1f687dd8200 <col:24, col:55> col:36 iscntrl 'int (int)'
| |-ParmVarDecl 0x1f687dd8120 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1f687dd9510 <col:36> Inherited Implicit
| `-PureAttr 0x1f687dd9538 <col:36> Inherited Implicit
|-FunctionDecl 0x1f687dd96f0 <line:144:24, col:86> col:36 _iscntrl_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dd9578 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dd95f0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd98b0 <line:145:55> col:55 implicit toupper 'int (int)' extern
| |-ParmVarDecl 0x1f687dd9950 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd99c0 <col:55> Implicit
| `-PureAttr 0x1f687dd9a18 <col:55> Implicit
|-FunctionDecl 0x1f687dd9a40 prev 0x1f687dd98b0 <col:43, col:74> col:55 toupper 'int (int)'
| |-ParmVarDecl 0x1f687dd97d0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f687dd9b30 <col:55> Inherited Implicit
| `-PureAttr 0x1f687dd9b58 <col:55> Inherited Implicit
|-FunctionDecl 0x1f687dd9c78 <line:146:55> col:55 implicit tolower 'int (int)' extern
| |-ParmVarDecl 0x1f687dd9d18 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f687dd9d88 <col:55> Implicit
| `-PureAttr 0x1f687dd9de0 <col:55> Implicit
|-FunctionDecl 0x1f687dd9e08 prev 0x1f687dd9c78 <col:43, col:74> col:55 tolower 'int (int)'
| |-ParmVarDecl 0x1f687dd9b98 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f687dd9ef8 <col:55> Inherited Implicit
| `-PureAttr 0x1f687dd9f20 <col:55> Inherited Implicit
|-FunctionDecl 0x1f687dda040 <line:147:43, col:75> col:55 _tolower 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687dd9f60 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1f687dda290 <line:148:24, col:86> col:36 _tolower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dda118 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dda190 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dda468 <line:149:43, col:75> col:55 _toupper 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687dda370 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1f687dda6b8 <line:150:24, col:86> col:36 _toupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687dda540 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f687dda5b8 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dda878 <line:151:24, col:57> col:36 __isascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687dda798 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1f687ddaa30 <line:152:24, col:57> col:36 __toascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687dda950 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1f687ddabe8 <line:153:24, col:57> col:36 __iscsymf 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687ddab08 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1f687ddada0 <line:154:24, col:56> col:36 __iscsym 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687ddacc0 <col:50, col:54> col:54 _C 'int'
|-FunctionDecl 0x1f687ddafe8 <line:164:24, col:59> col:36 iswalpha 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687ddae70 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687ddb2e0 <line:165:24, col:90> col:36 _iswalpha_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687ddb0b8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687ddb130 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd4448 <line:166:24, col:59> col:36 iswupper 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687ddb3b8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687dd4690 <line:167:24, col:90> col:36 _iswupper_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687dd4518 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687dd4590 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd4848 <line:168:24, col:59> col:36 iswlower 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687dd4768 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687dd4a90 <line:169:24, col:90> col:36 _iswlower_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687dd4918 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687dd4990 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd4c48 <line:170:24, col:59> col:36 iswdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687dd4b68 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687dd4e90 <line:171:24, col:90> col:36 _iswdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687dd4d18 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687dd4d90 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dd5048 <line:172:24, col:60> col:36 iswxdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687dd4f68 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687dd5290 <line:173:24, col:91> col:36 _iswxdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687dd5118 <col:54, col:61> col:61 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687dd5190 <col:74, col:84> col:84 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dde4e8 <line:174:24, col:59> col:36 iswspace 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687dd5368 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687dde730 <line:175:24, col:90> col:36 _iswspace_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687dde5b8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687dde630 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687dde8e8 <line:176:24, col:59> col:36 iswpunct 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687dde808 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687ddeb30 <line:177:24, col:90> col:36 _iswpunct_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687dde9b8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687ddea30 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687ddece8 <line:178:24, col:59> col:36 iswblank 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687ddec08 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687ddef30 <line:179:24, col:90> col:36 _iswblank_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687ddedb8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687ddee30 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687ddf0e8 <line:180:24, col:59> col:36 iswalnum 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687ddf008 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687ddf330 <line:181:24, col:90> col:36 _iswalnum_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687ddf1b8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687ddf230 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687ddf4f8 <line:182:24, col:59> col:36 iswprint 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687ddf408 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687ddf740 <line:183:24, col:90> col:36 _iswprint_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687ddf5c8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687ddf640 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687ddf8f8 <line:184:24, col:59> col:36 iswgraph 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687ddf818 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687ddfb40 <line:185:24, col:90> col:36 _iswgraph_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687ddf9c8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687ddfa40 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687ddfcf8 <line:186:24, col:59> col:36 iswcntrl 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687ddfc18 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687ddff40 <line:187:24, col:90> col:36 _iswcntrl_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687ddfdc8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687ddfe40 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687de00f8 <line:188:24, col:59> col:36 iswascii 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687de0018 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687de0310 <line:190:24, col:62> col:39 towupper 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1f687de01c8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687de0638 <line:191:24, col:93> col:39 _towupper_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687de03e0 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687de0490 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687de07e8 <line:192:24, col:62> col:39 towlower 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1f687de0710 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687de0a28 <line:193:24, col:93> col:39 _towlower_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687de08b8 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687de0930 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687de0d20 <line:194:24, col:80> col:36 iswctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1f687de0b00 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687de0b78 <col:66, col:75> col:75 _Type 'wctype_t':'unsigned short'
|-FunctionDecl 0x1f687de10c8 <line:195:24, col:111> col:36 _iswctype_l 'int (wint_t, wctype_t, _locale_t) __attribute__((cdecl))':'int (wint_t, wctype_t, _locale_t)'
| |-ParmVarDecl 0x1f687de0df8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1f687de0e70 <col:69, col:78> col:78 _Type 'wctype_t':'unsigned short'
| `-ParmVarDecl 0x1f687de0ee8 <col:94, col:104> col:104 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687de1288 <line:197:24, col:61> col:36 __iswcsymf 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687de11a8 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687de14e0 <line:198:24, col:90> col:36 _iswcsymf_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687de1358 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687de13d0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687de1698 <line:199:24, col:60> col:36 __iswcsym 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f687de15b8 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f687de18e0 <line:200:24, col:89> col:36 _iswcsym_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f687de1768 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f687de17e0 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687de1aa0 <line:203:24, col:58> col:36 isleadbyte 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f687de19c0 <col:52, col:56> col:56 _C 'int'
|-FunctionDecl 0x1f687de1cf0 <line:204:24, col:89> col:36 _isleadbyte_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f687de1b78 <col:55, col:59> col:59 _C 'int'
| `-ParmVarDecl 0x1f687de1bf0 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687de2000 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:205:90> col:45 is_wctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1f687de1e88 <col:60, col:67> col:67 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1f687de1f00 <col:76, col:85> col:85 _Type 'wctype_t':'unsigned short'
| `-DeprecatedAttr 0x1f687de20b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instead. See online help for details." ""
|-VarDecl 0x1f687de21f8 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:235:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x1f687de2348 <line:239:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f687de25a8 <line:240:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x1f687de2410 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f687de2c00 <.//openssl//file_jk/after\crypto\bio\b_print.c:30:1, line:31:46> line:30:12 used fmtstr 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' static
| |-ParmVarDecl 0x1f687de2680 <col:19, col:25> col:26 'char **'
| |-ParmVarDecl 0x1f687de2700 <col:28, col:34> col:35 'char **'
| |-ParmVarDecl 0x1f687de27d8 <col:37, col:44> col:45 'size_t *'
| |-ParmVarDecl 0x1f687de2850 <col:47, col:54> col:55 'size_t *'
| |-ParmVarDecl 0x1f687de28d0 <line:31:19, col:30> col:31 'const char *'
| |-ParmVarDecl 0x1f687de2950 <col:33> col:36 'int'
| |-ParmVarDecl 0x1f687de29d0 <col:38> col:41 'int'
| `-ParmVarDecl 0x1f687de2a50 <col:43> col:46 'int'
|-FunctionDecl 0x1f687de32d0 <line:32:1, line:33:46> line:32:12 used fmtint 'int (char **, char **, size_t *, size_t *, int, int, int, int, int)' static
| |-ParmVarDecl 0x1f687de2d10 <col:19, col:25> col:26 'char **'
| |-ParmVarDecl 0x1f687de2d90 <col:28, col:34> col:35 'char **'
| |-ParmVarDecl 0x1f687de2e08 <col:37, col:44> col:45 'size_t *'
| |-ParmVarDecl 0x1f687de2e80 <col:47, col:54> col:55 'size_t *'
| |-ParmVarDecl 0x1f687de2f00 <line:33:19> col:19 int64_t 'int'
| |-ParmVarDecl 0x1f687de2f80 <col:28> col:31 'int'
| |-ParmVarDecl 0x1f687de3000 <col:33> col:36 'int'
| |-ParmVarDecl 0x1f687de3080 <col:38> col:41 'int'
| `-ParmVarDecl 0x1f687de3100 <col:43> col:46 'int'
|-FunctionDecl 0x1f687de5a10 <line:34:1, line:35:45> line:34:12 used fmtfp 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' static
| |-ParmVarDecl 0x1f687de33e8 <col:18, col:24> col:25 'char **'
| |-ParmVarDecl 0x1f687de54e0 <col:27, col:33> col:34 'char **'
| |-ParmVarDecl 0x1f687de5558 <col:36, col:43> col:44 'size_t *'
| |-ParmVarDecl 0x1f687de55d0 <col:46, col:53> col:54 'size_t *'
| |-ParmVarDecl 0x1f687de5650 <line:27:18> line:35:25 'double'
| |-ParmVarDecl 0x1f687de56d0 <col:27> col:30 'int'
| |-ParmVarDecl 0x1f687de5750 <col:32> col:35 'int'
| |-ParmVarDecl 0x1f687de57d0 <col:37> col:40 'int'
| `-ParmVarDecl 0x1f687de5850 <col:42> col:45 'int'
|-FunctionDecl 0x1f687de5e70 <line:36:1, col:65> col:12 used doapr_outch 'int (char **, char **, size_t *, size_t *, int)' static
| |-ParmVarDecl 0x1f687de5b28 <col:24, col:30> col:31 'char **'
| |-ParmVarDecl 0x1f687de5ba8 <col:33, col:39> col:40 'char **'
| |-ParmVarDecl 0x1f687de5c20 <col:42, col:49> col:50 'size_t *'
| |-ParmVarDecl 0x1f687de5c98 <col:52, col:59> col:60 'size_t *'
| `-ParmVarDecl 0x1f687de5d18 <col:62> col:65 'int'
|-FunctionDecl 0x1f687de64f0 <line:37:1, line:39:50> line:37:12 used _dopr 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' static
| |-ParmVarDecl 0x1f687de5f68 <col:18, col:25> col:25 sbuffer 'char **'
| |-ParmVarDecl 0x1f687de5fe8 <col:34, col:41> col:41 buffer 'char **'
| |-ParmVarDecl 0x1f687de6060 <line:38:18, col:26> col:26 maxlen 'size_t *'
| |-ParmVarDecl 0x1f687de60d8 <col:34, col:42> col:42 retlen 'size_t *'
| |-ParmVarDecl 0x1f687de6158 <col:50, col:55> col:55 truncated 'int *'
| |-ParmVarDecl 0x1f687de61d8 <line:39:18, col:30> col:30 format 'const char *'
| `-ParmVarDecl 0x1f687de6250 <col:38, col:46> col:46 args 'va_list':'char *'
|-FunctionDecl 0x1f687de6a50 prev 0x1f687de64f0 <line:82:1, line:361:1> line:83:1 used _dopr 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' static
| |-ParmVarDecl 0x1f687de65f8 <col:7, col:14> col:14 used sbuffer 'char **'
| |-ParmVarDecl 0x1f687de6678 <line:84:7, col:14> col:14 used buffer 'char **'
| |-ParmVarDecl 0x1f687de66f0 <line:85:7, col:15> col:15 used maxlen 'size_t *'
| |-ParmVarDecl 0x1f687de6768 <line:86:7, col:15> col:15 used retlen 'size_t *'
| |-ParmVarDecl 0x1f687de67e8 <col:23, col:28> col:28 used truncated 'int *'
| |-ParmVarDecl 0x1f687de6868 <col:39, col:51> col:51 used format 'const char *'
| |-ParmVarDecl 0x1f687de68e0 <col:59, col:67> col:67 used args 'va_list':'char *'
| `-CompoundStmt 0x1f687d895b8 <line:87:1, line:361:1>
|   |-DeclStmt 0x1f687de6ba0 <line:88:5, col:12>
|   | `-VarDecl 0x1f687de6b38 <col:5, col:10> col:10 used ch 'char'
|   |-DeclStmt 0x1f687de6c38 <line:27:18, line:90:19>
|   | `-VarDecl 0x1f687de6bd0 <line:27:18, line:90:13> col:13 used fvalue 'double'
|   |-DeclStmt 0x1f687de6cd0 <line:91:5, col:19>
|   | `-VarDecl 0x1f687de6c68 <col:5, col:11> col:11 used strvalue 'char *'
|   |-DeclStmt 0x1f687de6d68 <line:92:5, col:12>
|   | `-VarDecl 0x1f687de6d00 <col:5, col:9> col:9 used min 'int'
|   |-DeclStmt 0x1f687de6e00 <line:93:5, col:12>
|   | `-VarDecl 0x1f687de6d98 <col:5, col:9> col:9 used max 'int'
|   |-DeclStmt 0x1f687de6e98 <line:94:5, col:14>
|   | `-VarDecl 0x1f687de6e30 <col:5, col:9> col:9 used state 'int'
|   |-DeclStmt 0x1f687de6f30 <line:95:5, col:14>
|   | `-VarDecl 0x1f687de6ec8 <col:5, col:9> col:9 used flags 'int'
|   |-DeclStmt 0x1f687de6fc8 <line:96:5, col:15>
|   | `-VarDecl 0x1f687de6f60 <col:5, col:9> col:9 used cflags 'int'
|   |-DeclStmt 0x1f687de7058 <line:97:5, col:19>
|   | `-VarDecl 0x1f687de6ff0 <col:5, col:12> col:12 used currlen 'size_t':'unsigned long long'
|   |-BinaryOperator 0x1f687de70d0 <line:99:5, line:42:25> 'int' '='
|   | |-DeclRefExpr 0x1f687de7070 <line:99:5> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   | `-IntegerLiteral 0x1f687de70a8 <line:42:25> 'int' 0
|   |-BinaryOperator 0x1f687de7288 <line:100:5, col:38> 'int' '='
|   | |-DeclRefExpr 0x1f687de70f0 <col:5> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   | `-ImplicitCastExpr 0x1f687de7270 <col:13, col:38> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1f687de7250 <col:13, col:38> 'size_t':'unsigned long long' '='
|   |     |-DeclRefExpr 0x1f687de7128 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x1f687de7238 <col:23, col:38> 'size_t':'unsigned long long' <IntegralCast>
|   |       `-BinaryOperator 0x1f687de7218 <col:23, col:38> 'int' '='
|   |         |-DeclRefExpr 0x1f687de7160 <col:23> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |         `-BinaryOperator 0x1f687de71f8 <col:32, col:38> 'int' '='
|   |           |-DeclRefExpr 0x1f687de7198 <col:32> 'int' lvalue Var 0x1f687de6d00 'min' 'int'
|   |           `-IntegerLiteral 0x1f687de71d0 <col:38> 'int' 0
|   |-BinaryOperator 0x1f687de7320 <line:101:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x1f687de72a8 <col:5> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   | `-UnaryOperator 0x1f687de7308 <col:11, col:12> 'int' prefix '-'
|   |   `-IntegerLiteral 0x1f687de72e0 <col:12> 'int' 1
|   |-BinaryOperator 0x1f687de73e0 <line:102:5, col:17> 'char' '='
|   | |-DeclRefExpr 0x1f687de7340 <col:5> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   | `-ImplicitCastExpr 0x1f687de73c8 <col:10, col:17> 'char' <LValueToRValue>
|   |   `-UnaryOperator 0x1f687de73b0 <col:10, col:17> 'const char' lvalue prefix '*' cannot overflow
|   |     `-UnaryOperator 0x1f687de7398 <col:11, col:17> 'const char *' postfix '++'
|   |       `-DeclRefExpr 0x1f687de7378 <col:11> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |-WhileStmt 0x1f687df2228 <line:104:5, line:347:5>
|   | |-BinaryOperator 0x1f687de7460 <line:104:12, line:49:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x1f687de7448 <line:104:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687de7400 <col:12> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   | | `-IntegerLiteral 0x1f687de7420 <line:49:25> 'int' 7
|   | `-CompoundStmt 0x1f687df2208 <line:104:32, line:347:5>
|   |   |-IfStmt 0x1f687ded800 <line:105:9, line:49:25>
|   |   | |-BinaryOperator 0x1f687ded778 <line:105:13, col:64> 'int' '||'
|   |   | | |-BinaryOperator 0x1f687ded560 <col:13, col:19> 'int' '=='
|   |   | | | |-ImplicitCastExpr 0x1f687de74d0 <col:13> 'int' <IntegralCast>
|   |   | | | | `-ImplicitCastExpr 0x1f687de74b8 <col:13> 'char' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x1f687de7480 <col:13> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |   | | | `-CharacterLiteral 0x1f687de74a0 <col:19> 'int' 0
|   |   | | `-ParenExpr 0x1f687ded758 <col:27, col:64> 'int'
|   |   | |   `-BinaryOperator 0x1f687ded738 <col:28, col:58> 'int' '&&'
|   |   | |     |-BinaryOperator 0x1f687ded658 <col:28, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |   | |     | |-ImplicitCastExpr 0x1f687ded628 <.//openssl//file_jk/after\crypto\bio\b_print.c:105:28> 'char **' <LValueToRValue>
|   |   | |     | | `-DeclRefExpr 0x1f687ded580 <col:28> 'char **' lvalue ParmVar 0x1f687de6678 'buffer' 'char **'
|   |   | |     | `-ImplicitCastExpr 0x1f687ded640 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   |   | |     |   `-ParenExpr 0x1f687ded608 <col:17, col:27> 'void *'
|   |   | |     |     `-CStyleCastExpr 0x1f687ded5e0 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |     |       `-IntegerLiteral 0x1f687ded5a0 <col:26> 'int' 0
|   |   | |     `-BinaryOperator 0x1f687ded718 <.//openssl//file_jk/after\crypto\bio\b_print.c:105:46, col:58> 'int' '>='
|   |   | |       |-ImplicitCastExpr 0x1f687ded6e8 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x1f687ded678 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |   | |       `-ImplicitCastExpr 0x1f687ded700 <col:57, col:58> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |         `-UnaryOperator 0x1f687ded6d0 <col:57, col:58> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   | |           `-ImplicitCastExpr 0x1f687ded6b8 <col:58> 'size_t *' <LValueToRValue>
|   |   | |             `-DeclRefExpr 0x1f687ded698 <col:58> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   |   | `-BinaryOperator 0x1f687ded7e0 <line:106:13, line:49:25> 'int' '='
|   |   |   |-DeclRefExpr 0x1f687ded798 <line:106:13> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |   |   `-IntegerLiteral 0x1f687ded7b8 <line:49:25> 'int' 7
|   |   `-SwitchStmt 0x1f687ded850 <line:108:9, line:346:9>
|   |     |-ImplicitCastExpr 0x1f687ded838 <line:108:17> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1f687ded818 <col:17> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |     `-CompoundStmt 0x1f687df2148 <col:24, line:346:9>
|   |       |-CaseStmt 0x1f687ded8b0 <line:109:9, line:114:28>
|   |       | |-ConstantExpr 0x1f687ded898 <line:42:25> 'int'
|   |       | | `-IntegerLiteral 0x1f687ded870 <col:25> 'int' 0
|   |       | `-IfStmt 0x1f687dedc38 <line:110:13, line:114:28> has_else
|   |       |   |-BinaryOperator 0x1f687ded940 <line:110:17, col:23> 'int' '=='
|   |       |   | |-ImplicitCastExpr 0x1f687ded928 <col:17> 'int' <IntegralCast>
|   |       |   | | `-ImplicitCastExpr 0x1f687ded910 <col:17> 'char' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x1f687ded8d8 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   | `-CharacterLiteral 0x1f687ded8f8 <col:23> 'int' 37
|   |       |   |-BinaryOperator 0x1f687ded9a8 <line:111:17, line:43:25> 'int' '='
|   |       |   | |-DeclRefExpr 0x1f687ded960 <line:111:17> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |       |   | `-IntegerLiteral 0x1f687ded980 <line:43:25> 'int' 1
|   |       |   `-IfStmt 0x1f687dedc20 <line:113:17, line:114:28>
|   |       |     |-UnaryOperator 0x1f687dedbd0 <line:113:20, col:70> 'int' prefix '!' cannot overflow
|   |       |     | `-CallExpr 0x1f687dedb10 <col:21, col:70> 'int'
|   |       |     |   |-ImplicitCastExpr 0x1f687dedaf8 <col:21> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       |     |   | `-DeclRefExpr 0x1f687ded9c8 <col:21> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       |     |   |-ImplicitCastExpr 0x1f687dedb58 <col:33> 'char **' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1f687ded9e8 <col:33> 'char **' lvalue ParmVar 0x1f687de65f8 'sbuffer' 'char **'
|   |       |     |   |-ImplicitCastExpr 0x1f687dedb70 <col:42> 'char **' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1f687deda08 <col:42> 'char **' lvalue ParmVar 0x1f687de6678 'buffer' 'char **'
|   |       |     |   |-UnaryOperator 0x1f687deda48 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   |       |     |   | `-DeclRefExpr 0x1f687deda28 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |       |     |   |-ImplicitCastExpr 0x1f687dedb88 <col:60> 'size_t *' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1f687deda60 <col:60> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   |       |     |   `-ImplicitCastExpr 0x1f687dedbb8 <col:68> 'int' <IntegralCast>
|   |       |     |     `-ImplicitCastExpr 0x1f687dedba0 <col:68> 'char' <LValueToRValue>
|   |       |     |       `-DeclRefExpr 0x1f687deda80 <col:68> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     `-ReturnStmt 0x1f687dedc10 <line:114:21, col:28>
|   |       |       `-IntegerLiteral 0x1f687dedbe8 <col:28> 'int' 0
|   |       |-BinaryOperator 0x1f687dedce8 <line:115:13, col:25> 'char' '='
|   |       | |-DeclRefExpr 0x1f687dedc60 <col:13> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       | `-ImplicitCastExpr 0x1f687dedcd0 <col:18, col:25> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1f687dedcb8 <col:18, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1f687dedca0 <col:19, col:25> 'const char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1f687dedc80 <col:19> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |-BreakStmt 0x1f687dedd08 <line:116:13>
|   |       |-CaseStmt 0x1f687dedd50 <line:117:9, line:142:13>
|   |       | |-ConstantExpr 0x1f687dedd38 <line:43:25> 'int'
|   |       | | `-IntegerLiteral 0x1f687dedd10 <col:25> 'int' 1
|   |       | `-SwitchStmt 0x1f687deddc8 <line:118:13, line:142:13>
|   |       |   |-ImplicitCastExpr 0x1f687deddb0 <line:118:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1f687dedd98 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1f687dedd78 <col:21> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   `-CompoundStmt 0x1f687de77a0 <col:25, line:142:13>
|   |       |     |-CaseStmt 0x1f687dede18 <line:119:13, line:53:32>
|   |       |     | |-ConstantExpr 0x1f687dede00 <line:119:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687dedde8 <col:18> 'int' 45
|   |       |     | `-CompoundAssignOperator 0x1f687dedef0 <line:120:17, line:53:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f687dede40 <line:120:17> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f687deded0 <line:53:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f687dedeb0 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f687dede60 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f687dede88 <col:31> 'int' 0
|   |       |     |-BinaryOperator 0x1f687dedfa8 <line:121:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f687dedf20 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f687dedf90 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f687dedf78 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f687dedf60 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f687dedf40 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f687dedfc8 <line:122:17>
|   |       |     |-CaseStmt 0x1f687dee000 <line:123:13, line:55:32>
|   |       |     | |-ConstantExpr 0x1f687dedfe8 <line:123:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687dedfd0 <col:18> 'int' 43
|   |       |     | `-CompoundAssignOperator 0x1f687dee0d8 <line:124:17, line:55:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f687dee028 <line:124:17> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f687dee0b8 <line:55:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f687dee098 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f687dee048 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f687dee070 <col:31> 'int' 1
|   |       |     |-BinaryOperator 0x1f687dee190 <line:125:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f687dee108 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f687dee178 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f687dee160 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f687dee148 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f687dee128 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f687dee1b0 <line:126:17>
|   |       |     |-CaseStmt 0x1f687dee1e8 <line:127:13, line:57:32>
|   |       |     | |-ConstantExpr 0x1f687dee1d0 <line:127:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687dee1b8 <col:18> 'int' 32
|   |       |     | `-CompoundAssignOperator 0x1f687dee2c0 <line:128:17, line:57:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f687dee210 <line:128:17> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f687dee2a0 <line:57:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f687dee280 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f687dee230 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f687dee258 <col:31> 'int' 2
|   |       |     |-BinaryOperator 0x1f687dee378 <line:129:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f687dee2f0 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f687dee360 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f687dee348 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f687dee330 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f687dee310 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f687dee398 <line:130:17>
|   |       |     |-CaseStmt 0x1f687dee3d0 <line:131:13, line:59:32>
|   |       |     | |-ConstantExpr 0x1f687dee3b8 <line:131:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687dee3a0 <col:18> 'int' 35
|   |       |     | `-CompoundAssignOperator 0x1f687dee4a8 <line:132:17, line:59:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f687dee3f8 <line:132:17> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f687dee488 <line:59:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f687dee468 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f687dee418 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f687dee440 <col:31> 'int' 3
|   |       |     |-BinaryOperator 0x1f687de7500 <line:133:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f687dee4d8 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f687dee548 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f687dee530 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f687dee518 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f687dee4f8 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f687de7520 <line:134:17>
|   |       |     |-CaseStmt 0x1f687de7558 <line:135:13, line:61:32>
|   |       |     | |-ConstantExpr 0x1f687de7540 <line:135:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687de7528 <col:18> 'int' 48
|   |       |     | `-CompoundAssignOperator 0x1f687de7630 <line:136:17, line:61:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f687de7580 <line:136:17> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f687de7610 <line:61:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f687de75f0 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f687de75a0 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f687de75c8 <col:31> 'int' 4
|   |       |     |-BinaryOperator 0x1f687de76e8 <line:137:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f687de7660 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f687de76d0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f687de76b8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f687de76a0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f687de7680 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f687de7708 <line:138:17>
|   |       |     |-DefaultStmt 0x1f687de7778 <line:139:13, line:44:25>
|   |       |     | `-BinaryOperator 0x1f687de7758 <line:140:17, line:44:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f687de7710 <line:140:17> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1f687de7730 <line:44:25> 'int' 2
|   |       |     `-BreakStmt 0x1f687de7798 <line:141:17>
|   |       |-BreakStmt 0x1f687de7838 <line:143:13>
|   |       |-CaseStmt 0x1f687de7880 <line:144:9, line:45:25>
|   |       | |-ConstantExpr 0x1f687de7868 <line:44:25> 'int'
|   |       | | `-IntegerLiteral 0x1f687de7840 <col:25> 'int' 2
|   |       | `-IfStmt 0x1f687de7fd8 <line:145:13, line:45:25> has_else
|   |       |   |-CallExpr 0x1f687de7980 <line:145:17, col:42> 'int'
|   |       |   | |-ImplicitCastExpr 0x1f687de7968 <col:17> 'int (*)(int)' <FunctionToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x1f687de78a8 <col:17> 'int (int)' Function 0x1f687dd3180 'isdigit' 'int (int)'
|   |       |   | `-ImplicitCastExpr 0x1f687de79a8 <col:25, col:40> 'int' <IntegralCast>
|   |       |   |   `-CStyleCastExpr 0x1f687de7918 <col:25, col:40> 'unsigned char' <IntegralCast>
|   |       |   |     `-ImplicitCastExpr 0x1f687de7900 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|   |       |   |       `-DeclRefExpr 0x1f687de78c8 <col:40> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   |-CompoundStmt 0x1f687de7bf0 <col:45, line:148:13>
|   |       |   | |-BinaryOperator 0x1f687de7b28 <line:146:17, line:79:32> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1f687de79c0 <line:146:17> 'int' lvalue Var 0x1f687de6d00 'min' 'int'
|   |       |   | | `-BinaryOperator 0x1f687de7b08 <col:23, line:79:32> 'int' '+'
|   |       |   | |   |-BinaryOperator 0x1f687de7a40 <line:146:23, col:28> 'int' '*'
|   |       |   | |   | |-IntegerLiteral 0x1f687de79e0 <col:23> 'int' 10
|   |       |   | |   | `-ImplicitCastExpr 0x1f687de7a28 <col:28> 'int' <LValueToRValue>
|   |       |   | |   |   `-DeclRefExpr 0x1f687de7a08 <col:28> 'int' lvalue Var 0x1f687de6d00 'min' 'int'
|   |       |   | |   `-ParenExpr 0x1f687de7ae8 <line:79:24, col:32> 'int'
|   |       |   | |     `-BinaryOperator 0x1f687de7ac8 <line:146:46, line:79:29> 'int' '-'
|   |       |   | |       |-ImplicitCastExpr 0x1f687de7ab0 <line:146:46> 'int' <IntegralCast>
|   |       |   | |       | `-ImplicitCastExpr 0x1f687de7a98 <col:46> 'char' <LValueToRValue>
|   |       |   | |       |   `-DeclRefExpr 0x1f687de7a60 <col:46> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   | |       `-CharacterLiteral 0x1f687de7a80 <line:79:29> 'int' 48
|   |       |   | `-BinaryOperator 0x1f687de7bd0 <line:147:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1f687de7b48 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1f687de7bb8 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1f687de7ba0 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1f687de7b88 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1f687de7b68 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |   `-IfStmt 0x1f687de7fb0 <line:148:20, line:45:25> has_else
|   |       |     |-BinaryOperator 0x1f687de7c78 <line:148:24, col:30> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x1f687de7c60 <col:24> 'int' <IntegralCast>
|   |       |     | | `-ImplicitCastExpr 0x1f687de7c48 <col:24> 'char' <LValueToRValue>
|   |       |     | |   `-DeclRefExpr 0x1f687de7c10 <col:24> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-CharacterLiteral 0x1f687de7c30 <col:30> 'int' 42
|   |       |     |-CompoundStmt 0x1f687de7f28 <col:35, line:152:13>
|   |       |     | |-BinaryOperator 0x1f687de7ea0 <line:150:17, col:29> 'char' '='
|   |       |     | | |-DeclRefExpr 0x1f687de7e18 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | | `-ImplicitCastExpr 0x1f687de7e88 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     | |   `-UnaryOperator 0x1f687de7e70 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     | |     `-UnaryOperator 0x1f687de7e58 <col:23, col:29> 'const char *' postfix '++'
|   |       |     | |       `-DeclRefExpr 0x1f687de7e38 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     | `-BinaryOperator 0x1f687de7f08 <line:151:17, line:45:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f687de7ec0 <line:151:17> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1f687de7ee0 <line:45:25> 'int' 3
|   |       |     `-BinaryOperator 0x1f687de7f90 <line:153:17, line:45:25> 'int' '='
|   |       |       |-DeclRefExpr 0x1f687de7f48 <line:153:17> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |       |       `-IntegerLiteral 0x1f687de7f68 <line:45:25> 'int' 3
|   |       |-BreakStmt 0x1f687de8000 <line:154:13>
|   |       |-CaseStmt 0x1f687de8048 <line:155:9, line:47:25>
|   |       | |-ConstantExpr 0x1f687de8030 <line:45:25> 'int'
|   |       | | `-IntegerLiteral 0x1f687de8008 <col:25> 'int' 3
|   |       | `-IfStmt 0x1f687de8290 <line:156:13, line:47:25> has_else
|   |       |   |-BinaryOperator 0x1f687de80d8 <line:156:17, col:23> 'int' '=='
|   |       |   | |-ImplicitCastExpr 0x1f687de80c0 <col:17> 'int' <IntegralCast>
|   |       |   | | `-ImplicitCastExpr 0x1f687de80a8 <col:17> 'char' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x1f687de8070 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   | `-CharacterLiteral 0x1f687de8090 <col:23> 'int' 46
|   |       |   |-CompoundStmt 0x1f687de8208 <col:28, line:159:13>
|   |       |   | |-BinaryOperator 0x1f687de8140 <line:157:17, line:46:25> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1f687de80f8 <line:157:17> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |       |   | | `-IntegerLiteral 0x1f687de8118 <line:46:25> 'int' 4
|   |       |   | `-BinaryOperator 0x1f687de81e8 <line:158:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1f687de8160 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1f687de81d0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1f687de81b8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1f687de81a0 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1f687de8180 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |   `-BinaryOperator 0x1f687de8270 <line:160:17, line:47:25> 'int' '='
|   |       |     |-DeclRefExpr 0x1f687de8228 <line:160:17> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |       |     `-IntegerLiteral 0x1f687de8248 <line:47:25> 'int' 5
|   |       |-BreakStmt 0x1f687de82b8 <line:161:13>
|   |       |-CaseStmt 0x1f687de8300 <line:162:9, line:47:25>
|   |       | |-ConstantExpr 0x1f687de82e8 <line:46:25> 'int'
|   |       | | `-IntegerLiteral 0x1f687de82c0 <col:25> 'int' 4
|   |       | `-IfStmt 0x1f687df0aa8 <line:163:13, line:47:25> has_else
|   |       |   |-CallExpr 0x1f687de83d8 <line:163:17, col:42> 'int'
|   |       |   | |-ImplicitCastExpr 0x1f687de83c0 <col:17> 'int (*)(int)' <FunctionToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x1f687de8328 <col:17> 'int (int)' Function 0x1f687dd3180 'isdigit' 'int (int)'
|   |       |   | `-ImplicitCastExpr 0x1f687de8400 <col:25, col:40> 'int' <IntegralCast>
|   |       |   |   `-CStyleCastExpr 0x1f687de8398 <col:25, col:40> 'unsigned char' <IntegralCast>
|   |       |   |     `-ImplicitCastExpr 0x1f687de8380 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|   |       |   |       `-DeclRefExpr 0x1f687de8348 <col:40> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   |-CompoundStmt 0x1f687df07d8 <col:45, line:168:13>
|   |       |   | |-IfStmt 0x1f687df0590 <line:164:17, line:165:27>
|   |       |   | | |-BinaryOperator 0x1f687de8478 <line:164:21, col:27> 'int' '<'
|   |       |   | | | |-ImplicitCastExpr 0x1f687de8460 <col:21> 'int' <LValueToRValue>
|   |       |   | | | | `-DeclRefExpr 0x1f687de8418 <col:21> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       |   | | | `-IntegerLiteral 0x1f687de8438 <col:27> 'int' 0
|   |       |   | | `-BinaryOperator 0x1f687de84e0 <line:165:21, col:27> 'int' '='
|   |       |   | |   |-DeclRefExpr 0x1f687de8498 <col:21> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       |   | |   `-IntegerLiteral 0x1f687de84b8 <col:27> 'int' 0
|   |       |   | |-BinaryOperator 0x1f687df0710 <line:166:17, line:79:32> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1f687df05a8 <line:166:17> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       |   | | `-BinaryOperator 0x1f687df06f0 <col:23, line:79:32> 'int' '+'
|   |       |   | |   |-BinaryOperator 0x1f687df0628 <line:166:23, col:28> 'int' '*'
|   |       |   | |   | |-IntegerLiteral 0x1f687df05c8 <col:23> 'int' 10
|   |       |   | |   | `-ImplicitCastExpr 0x1f687df0610 <col:28> 'int' <LValueToRValue>
|   |       |   | |   |   `-DeclRefExpr 0x1f687df05f0 <col:28> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       |   | |   `-ParenExpr 0x1f687df06d0 <line:79:24, col:32> 'int'
|   |       |   | |     `-BinaryOperator 0x1f687df06b0 <line:166:46, line:79:29> 'int' '-'
|   |       |   | |       |-ImplicitCastExpr 0x1f687df0698 <line:166:46> 'int' <IntegralCast>
|   |       |   | |       | `-ImplicitCastExpr 0x1f687df0680 <col:46> 'char' <LValueToRValue>
|   |       |   | |       |   `-DeclRefExpr 0x1f687df0648 <col:46> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   | |       `-CharacterLiteral 0x1f687df0668 <line:79:29> 'int' 48
|   |       |   | `-BinaryOperator 0x1f687df07b8 <line:167:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1f687df0730 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1f687df07a0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1f687df0788 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1f687df0770 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1f687df0750 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |   `-IfStmt 0x1f687df0a80 <line:168:20, line:47:25> has_else
|   |       |     |-BinaryOperator 0x1f687df0868 <line:168:24, col:30> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x1f687df0850 <col:24> 'int' <IntegralCast>
|   |       |     | | `-ImplicitCastExpr 0x1f687df0838 <col:24> 'char' <LValueToRValue>
|   |       |     | |   `-DeclRefExpr 0x1f687df0800 <col:24> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-CharacterLiteral 0x1f687df0820 <col:30> 'int' 42
|   |       |     |-CompoundStmt 0x1f687df09f8 <col:35, line:172:13>
|   |       |     | |-BinaryOperator 0x1f687df0970 <line:170:17, col:29> 'char' '='
|   |       |     | | |-DeclRefExpr 0x1f687df08e8 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | | `-ImplicitCastExpr 0x1f687df0958 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     | |   `-UnaryOperator 0x1f687df0940 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     | |     `-UnaryOperator 0x1f687df0928 <col:23, col:29> 'const char *' postfix '++'
|   |       |     | |       `-DeclRefExpr 0x1f687df0908 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     | `-BinaryOperator 0x1f687df09d8 <line:171:17, line:47:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f687df0990 <line:171:17> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1f687df09b0 <line:47:25> 'int' 5
|   |       |     `-BinaryOperator 0x1f687df0a60 <line:173:17, line:47:25> 'int' '='
|   |       |       |-DeclRefExpr 0x1f687df0a18 <line:173:17> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |       |       `-IntegerLiteral 0x1f687df0a38 <line:47:25> 'int' 5
|   |       |-BreakStmt 0x1f687df0ad0 <line:174:13>
|   |       |-CaseStmt 0x1f687df0b18 <line:175:9, line:199:13>
|   |       | |-ConstantExpr 0x1f687df0b00 <line:47:25> 'int'
|   |       | | `-IntegerLiteral 0x1f687df0ad8 <col:25> 'int' 5
|   |       | `-SwitchStmt 0x1f687df0b90 <line:176:13, line:199:13>
|   |       |   |-ImplicitCastExpr 0x1f687df0b78 <line:176:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1f687df0b60 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1f687df0b40 <col:21> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   `-CompoundStmt 0x1f687df1338 <col:25, line:199:13>
|   |       |     |-CaseStmt 0x1f687df0be0 <line:177:13, line:68:25>
|   |       |     | |-ConstantExpr 0x1f687df0bc8 <line:177:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687df0bb0 <col:18> 'int' 104
|   |       |     | `-BinaryOperator 0x1f687df0c50 <line:178:17, line:68:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f687df0c08 <line:178:17> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1f687df0c28 <line:68:25> 'int' 1
|   |       |     |-BinaryOperator 0x1f687df0cf8 <line:179:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f687df0c70 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f687df0ce0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f687df0cc8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f687df0cb0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f687df0c90 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f687df0d18 <line:180:17>
|   |       |     |-CaseStmt 0x1f687df0d50 <line:181:13, line:69:25>
|   |       |     | |-ConstantExpr 0x1f687df0d38 <line:181:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687df0d20 <col:18> 'int' 108
|   |       |     | `-IfStmt 0x1f687df0f58 <line:182:17, line:69:25> has_else
|   |       |     |   |-BinaryOperator 0x1f687df0e10 <line:182:21, col:32> 'int' '=='
|   |       |     |   | |-ImplicitCastExpr 0x1f687df0df8 <col:21, col:22> 'int' <IntegralCast>
|   |       |     |   | | `-ImplicitCastExpr 0x1f687df0de0 <col:21, col:22> 'char' <LValueToRValue>
|   |       |     |   | |   `-UnaryOperator 0x1f687df0db0 <col:21, col:22> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |   | |     `-ImplicitCastExpr 0x1f687df0d98 <col:22> 'const char *' <LValueToRValue>
|   |       |     |   | |       `-DeclRefExpr 0x1f687df0d78 <col:22> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |   | `-CharacterLiteral 0x1f687df0dc8 <col:32> 'int' 108
|   |       |     |   |-CompoundStmt 0x1f687df0ed0 <col:37, line:185:17>
|   |       |     |   | |-BinaryOperator 0x1f687df0e78 <line:183:21, line:71:25> 'int' '='
|   |       |     |   | | |-DeclRefExpr 0x1f687df0e30 <line:183:21> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |     |   | | `-IntegerLiteral 0x1f687df0e50 <line:71:25> 'int' 4
|   |       |     |   | `-UnaryOperator 0x1f687df0eb8 <line:184:21, col:27> 'const char *' postfix '++'
|   |       |     |   |   `-DeclRefExpr 0x1f687df0e98 <col:21> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |   `-BinaryOperator 0x1f687df0f38 <line:186:21, line:69:25> 'int' '='
|   |       |     |     |-DeclRefExpr 0x1f687df0ef0 <line:186:21> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |     |     `-IntegerLiteral 0x1f687df0f10 <line:69:25> 'int' 2
|   |       |     |-BinaryOperator 0x1f687df1008 <line:187:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f687df0f80 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f687df0ff0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f687df0fd8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f687df0fc0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f687df0fa0 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f687df1028 <line:188:17>
|   |       |     |-CaseStmt 0x1f687df1060 <line:189:13, line:71:25>
|   |       |     | |-ConstantExpr 0x1f687df1048 <line:189:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687df1030 <col:18> 'int' 113
|   |       |     | `-BinaryOperator 0x1f687df10d0 <line:190:17, line:71:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f687df1088 <line:190:17> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1f687df10a8 <line:71:25> 'int' 4
|   |       |     |-BinaryOperator 0x1f687df1178 <line:191:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f687df10f0 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f687df1160 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f687df1148 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f687df1130 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f687df1110 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f687df1198 <line:192:17>
|   |       |     |-CaseStmt 0x1f687df11d0 <line:193:13, line:70:25>
|   |       |     | |-ConstantExpr 0x1f687df11b8 <line:193:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687df11a0 <col:18> 'int' 76
|   |       |     | `-BinaryOperator 0x1f687df1240 <line:194:17, line:70:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f687df11f8 <line:194:17> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1f687df1218 <line:70:25> 'int' 3
|   |       |     |-BinaryOperator 0x1f687df12e8 <line:195:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f687df1260 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f687df12d0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f687df12b8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f687df12a0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f687df1280 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f687df1308 <line:196:17>
|   |       |     `-DefaultStmt 0x1f687df1318 <line:197:13, line:198:17>
|   |       |       `-BreakStmt 0x1f687df1310 <col:17>
|   |       |-BinaryOperator 0x1f687df13f8 <line:200:13, line:48:25> 'int' '='
|   |       | |-DeclRefExpr 0x1f687df13b0 <line:200:13> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |       | `-IntegerLiteral 0x1f687df13d0 <line:48:25> 'int' 6
|   |       |-BreakStmt 0x1f687df1418 <line:201:13>
|   |       |-CaseStmt 0x1f687df1460 <line:202:9, line:336:13>
|   |       | |-ConstantExpr 0x1f687df1448 <line:48:25> 'int'
|   |       | | `-IntegerLiteral 0x1f687df1420 <col:25> 'int' 6
|   |       | `-SwitchStmt 0x1f687df14d8 <line:203:13, line:336:13>
|   |       |   |-ImplicitCastExpr 0x1f687df14c0 <line:203:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1f687df14a8 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1f687df1488 <col:21> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |   `-CompoundStmt 0x1f687df1d08 <col:25, line:336:13>
|   |       |     |-CaseStmt 0x1f687df1528 <line:204:13, line:219:17>
|   |       |     | |-ConstantExpr 0x1f687df1510 <line:204:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687df14f8 <col:18> 'int' 100
|   |       |     | `-CaseStmt 0x1f687dec550 <line:205:13, line:219:17>
|   |       |     |   |-ConstantExpr 0x1f687df1568 <line:205:18> 'int'
|   |       |     |   | `-CharacterLiteral 0x1f687df1550 <col:18> 'int' 105
|   |       |     |   `-SwitchStmt 0x1f687dec5b0 <line:206:17, line:219:17>
|   |       |     |     |-ImplicitCastExpr 0x1f687dec598 <line:206:25> 'int' <LValueToRValue>
|   |       |     |     | `-DeclRefExpr 0x1f687dec578 <col:25> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |     |     `-CompoundStmt 0x1f687dec868 <col:33, line:219:17>
|   |       |     |       |-CaseStmt 0x1f687dec610 <line:207:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1f687dec5f8 <line:68:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1f687dec5d0 <col:25> 'int' 1
|   |       |     |       | `-NullStmt 0x1f687dec678 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1f687dec680 <line:209:21>
|   |       |     |       |-CaseStmt 0x1f687dec6c8 <line:210:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1f687dec6b0 <line:69:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1f687dec688 <col:25> 'int' 2
|   |       |     |       | `-NullStmt 0x1f687dec730 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1f687dec738 <line:212:21>
|   |       |     |       |-CaseStmt 0x1f687dec780 <line:213:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1f687dec768 <line:71:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1f687dec740 <col:25> 'int' 4
|   |       |     |       | `-NullStmt 0x1f687dec7e8 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1f687dec7f0 <line:215:21>
|   |       |     |       |-DefaultStmt 0x1f687dec840 <line:216:17, col:24>
|   |       |     |       | `-NullStmt 0x1f687dec838 <col:24>
|   |       |     |       `-BreakStmt 0x1f687dec860 <line:218:21>
|   |       |     |-IfStmt 0x1f687deca48 <line:220:17, line:222:28>
|   |       |     | |-OpaqueValueExpr 0x1f687deca30 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1f687deca20 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f687dec9f8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f687deca60 <line:223:17>
|   |       |     |-CaseStmt 0x1f687deca98 <line:224:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1f687deca80 <line:224:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687deca68 <col:18> 'int' 88
|   |       |     | `-CompoundAssignOperator 0x1f687decb70 <line:225:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f687decac0 <line:225:17> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f687decb50 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f687decb30 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f687decae0 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f687decb08 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1f687decbd0 <line:227:13, line:65:32>
|   |       |     | |-ConstantExpr 0x1f687decbb8 <line:227:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687decba0 <col:18> 'int' 120
|   |       |     | `-CaseStmt 0x1f687decc28 <line:228:13, line:65:32>
|   |       |     |   |-ConstantExpr 0x1f687decc10 <line:228:18> 'int'
|   |       |     |   | `-CharacterLiteral 0x1f687decbf8 <col:18> 'int' 111
|   |       |     |   `-CaseStmt 0x1f687decc80 <line:229:13, line:65:32>
|   |       |     |     |-ConstantExpr 0x1f687decc68 <line:229:18> 'int'
|   |       |     |     | `-CharacterLiteral 0x1f687decc50 <col:18> 'int' 117
|   |       |     |     `-CompoundAssignOperator 0x1f687decd58 <line:230:17, line:65:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |       |-DeclRefExpr 0x1f687decca8 <line:230:17> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     |       `-ParenExpr 0x1f687decd38 <line:65:25, col:32> 'int'
|   |       |     |         `-BinaryOperator 0x1f687decd18 <col:26, col:31> 'int' '<<'
|   |       |     |           |-IntegerLiteral 0x1f687deccc8 <col:26> 'int' 1
|   |       |     |           `-IntegerLiteral 0x1f687deccf0 <col:31> 'int' 6
|   |       |     |-SwitchStmt 0x1f687decdc0 <line:231:17, line:244:17>
|   |       |     | |-ImplicitCastExpr 0x1f687decda8 <line:231:25> 'int' <LValueToRValue>
|   |       |     | | `-DeclRefExpr 0x1f687decd88 <col:25> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |     | `-CompoundStmt 0x1f687ded078 <col:33, line:244:17>
|   |       |     |   |-CaseStmt 0x1f687dece20 <line:232:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1f687dece08 <line:68:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1f687decde0 <col:25> 'int' 1
|   |       |     |   | `-NullStmt 0x1f687dece88 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1f687dece90 <line:234:21>
|   |       |     |   |-CaseStmt 0x1f687deced8 <line:235:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1f687decec0 <line:69:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1f687dece98 <col:25> 'int' 2
|   |       |     |   | `-NullStmt 0x1f687decf40 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1f687decf48 <line:237:21>
|   |       |     |   |-CaseStmt 0x1f687decf90 <line:238:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1f687decf78 <line:71:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1f687decf50 <col:25> 'int' 4
|   |       |     |   | `-NullStmt 0x1f687decff8 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1f687ded000 <line:240:21>
|   |       |     |   |-DefaultStmt 0x1f687ded050 <line:241:17, col:24>
|   |       |     |   | `-NullStmt 0x1f687ded048 <col:24>
|   |       |     |   `-BreakStmt 0x1f687ded070 <line:243:21>
|   |       |     |-IfStmt 0x1f687ded438 <line:245:17, line:248:28>
|   |       |     | |-OpaqueValueExpr 0x1f687ded420 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1f687ded410 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f687ded3e8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f687ded450 <line:249:17>
|   |       |     |-CaseStmt 0x1f687ded488 <line:250:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1f687ded470 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687ded458 <col:18> 'int' 102
|   |       |     | `-NullStmt 0x1f687dee628 <<invalid sloc>>
|   |       |     |-IfStmt 0x1f687dee960 <line:255:17, line:257:28>
|   |       |     | |-UnaryOperator 0x1f687dee910 <line:255:21, line:256:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1f687dee800 <line:255:22, line:256:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687dee7e8 <line:255:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1f687dee630 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1f687de5a10 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1f687dee868 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687dee650 <col:28> 'char **' lvalue ParmVar 0x1f687de65f8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1f687dee880 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687dee670 <col:37> 'char **' lvalue ParmVar 0x1f687de6678 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1f687dee6b0 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1f687dee690 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1f687dee898 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687dee6c8 <col:55> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1f687dee8b0 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687dee6e8 <col:63> 'double' lvalue Var 0x1f687de6bd0 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1f687dee8c8 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687dee708 <col:71> 'int' lvalue Var 0x1f687de6d00 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687dee8e0 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687dee728 <col:76> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687dee8f8 <line:256:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687dee748 <col:28> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1f687dee768 <line:74:25> 'int' 0
|   |       |     | `-ReturnStmt 0x1f687dee950 <line:257:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f687dee928 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f687dee978 <line:258:17>
|   |       |     |-CaseStmt 0x1f687dee9b0 <line:259:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1f687dee998 <line:259:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687dee980 <col:18> 'int' 69
|   |       |     | `-CompoundAssignOperator 0x1f687deea88 <line:260:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f687dee9d8 <line:260:17> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f687deea68 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f687deea48 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f687dee9f8 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f687deea20 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1f687deeae8 <line:262:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1f687deead0 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687deeab8 <col:18> 'int' 101
|   |       |     | `-NullStmt 0x1f687deec50 <<invalid sloc>>
|   |       |     |-IfStmt 0x1f687deef30 <line:267:17, line:269:28>
|   |       |     | |-UnaryOperator 0x1f687deeee0 <line:267:21, line:268:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1f687deedd0 <line:267:22, line:268:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687deedb8 <line:267:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1f687deec58 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1f687de5a10 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1f687deee38 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687deec78 <col:28> 'char **' lvalue ParmVar 0x1f687de65f8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1f687deee50 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687deec98 <col:37> 'char **' lvalue ParmVar 0x1f687de6678 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1f687deecd8 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1f687deecb8 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1f687deee68 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687deecf0 <col:55> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1f687deee80 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687deed10 <col:63> 'double' lvalue Var 0x1f687de6bd0 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1f687deee98 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687deed30 <col:71> 'int' lvalue Var 0x1f687de6d00 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687deeeb0 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687deed50 <col:76> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687deeec8 <line:268:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687deed70 <col:28> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1f687deed90 <line:75:25> 'int' 1
|   |       |     | `-ReturnStmt 0x1f687deef20 <line:269:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f687deeef8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f687deef48 <line:270:17>
|   |       |     |-CaseStmt 0x1f687deef80 <line:271:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1f687deef68 <line:271:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687deef50 <col:18> 'int' 71
|   |       |     | `-CompoundAssignOperator 0x1f687def058 <line:272:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f687deefa8 <line:272:17> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f687def038 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f687def018 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f687deefc8 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f687deeff0 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1f687def0b8 <line:274:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1f687def0a0 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687def088 <col:18> 'int' 103
|   |       |     | `-NullStmt 0x1f687def220 <<invalid sloc>>
|   |       |     |-IfStmt 0x1f687def500 <line:279:17, line:281:28>
|   |       |     | |-UnaryOperator 0x1f687def4b0 <line:279:21, line:280:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1f687def3a0 <line:279:22, line:280:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687def388 <line:279:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1f687def228 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1f687de5a10 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1f687def408 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687def248 <col:28> 'char **' lvalue ParmVar 0x1f687de65f8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1f687def420 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687def268 <col:37> 'char **' lvalue ParmVar 0x1f687de6678 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1f687def2a8 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1f687def288 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1f687def438 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687def2c0 <col:55> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1f687def450 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687def2e0 <col:63> 'double' lvalue Var 0x1f687de6bd0 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1f687def468 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687def300 <col:71> 'int' lvalue Var 0x1f687de6d00 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687def480 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687def320 <col:76> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687def498 <line:280:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687def340 <col:28> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1f687def360 <line:76:25> 'int' 2
|   |       |     | `-ReturnStmt 0x1f687def4f0 <line:281:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f687def4c8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f687def518 <line:282:17>
|   |       |     |-CaseStmt 0x1f687def580 <line:283:13, line:286:28>
|   |       |     | |-ConstantExpr 0x1f687def538 <line:283:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687def520 <col:18> 'int' 99
|   |       |     | `-IfStmt 0x1f687def6f0 <line:284:17, line:286:28>
|   |       |     |   |-OpaqueValueExpr 0x1f687def6d8 <<invalid sloc>> '_Bool'
|   |       |     |   `-ReturnStmt 0x1f687def6c8 <col:21, col:28>
|   |       |     |     `-IntegerLiteral 0x1f687def6a0 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f687def708 <line:287:17>
|   |       |     |-CaseStmt 0x1f687def740 <line:288:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1f687def728 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687def710 <col:18> 'int' 115
|   |       |     | `-NullStmt 0x1f687def7e0 <<invalid sloc>>
|   |       |     |-IfStmt 0x1f687def9c8 <line:290:17, line:295:17>
|   |       |     | |-BinaryOperator 0x1f687def848 <line:290:21, col:27> 'int' '<'
|   |       |     | | |-ImplicitCastExpr 0x1f687def830 <col:21> 'int' <LValueToRValue>
|   |       |     | | | `-DeclRefExpr 0x1f687def7e8 <col:21> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       |     | | `-IntegerLiteral 0x1f687def808 <col:27> 'int' 0
|   |       |     | `-CompoundStmt 0x1f687def9b0 <col:30, line:295:17>
|   |       |     |   `-IfStmt 0x1f687def988 <line:291:21, line:294:32> has_else
|   |       |     |     |-ImplicitCastExpr 0x1f687def888 <line:291:25> 'char **' <LValueToRValue>
|   |       |     |     | `-DeclRefExpr 0x1f687def868 <col:25> 'char **' lvalue ParmVar 0x1f687de6678 'buffer' 'char **'
|   |       |     |     |-NullStmt 0x1f687def980 <line:292:25>
|   |       |     |     `-BinaryOperator 0x1f687def960 <line:294:25, col:32> 'int' '='
|   |       |     |       |-DeclRefExpr 0x1f687def8c0 <col:25> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       |     |       `-ImplicitCastExpr 0x1f687def948 <col:31, col:32> 'int' <IntegralCast>
|   |       |     |         `-ImplicitCastExpr 0x1f687def930 <col:31, col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |           `-UnaryOperator 0x1f687def918 <col:31, col:32> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |     |             `-ImplicitCastExpr 0x1f687def900 <col:32> 'size_t *' <LValueToRValue>
|   |       |     |               `-DeclRefExpr 0x1f687def8e0 <col:32> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   |       |     |-IfStmt 0x1f687defd00 <line:296:17, line:298:28>
|   |       |     | |-UnaryOperator 0x1f687defcb0 <line:296:21, line:297:44> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1f687defb90 <line:296:22, line:297:44> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687defb78 <line:296:22> 'int (*)(char **, char **, size_t *, size_t *, const char *, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1f687def9e0 <col:22> 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' Function 0x1f687de2c00 'fmtstr' 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1f687defbf0 <col:29> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687defa00 <col:29> 'char **' lvalue ParmVar 0x1f687de65f8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1f687defc08 <col:38> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687defa20 <col:38> 'char **' lvalue ParmVar 0x1f687de6678 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1f687defa60 <col:46, col:47> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1f687defa40 <col:47> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1f687defc20 <col:56> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687defa78 <col:56> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1f687defc50 <col:64> 'const char *' <NoOp>
|   |       |     | |   | `-ImplicitCastExpr 0x1f687defc38 <col:64> 'char *' <LValueToRValue>
|   |       |     | |   |   `-DeclRefExpr 0x1f687defa98 <col:64> 'char *' lvalue Var 0x1f687de6c68 'strvalue' 'char *'
|   |       |     | |   |-ImplicitCastExpr 0x1f687defc68 <line:297:29> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687defab8 <col:29> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f687defc80 <col:36> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f687defad8 <col:36> 'int' lvalue Var 0x1f687de6d00 'min' 'int'
|   |       |     | |   `-ImplicitCastExpr 0x1f687defc98 <col:41> 'int' <LValueToRValue>
|   |       |     | |     `-DeclRefExpr 0x1f687defaf8 <col:41> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       |     | `-ReturnStmt 0x1f687defcf0 <line:298:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f687defcc8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f687defd18 <line:299:17>
|   |       |     |-CaseStmt 0x1f687defd50 <line:300:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1f687defd38 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687defd20 <col:18> 'int' 112
|   |       |     | `-NullStmt 0x1f687defdb8 <<invalid sloc>>
|   |       |     |-IfStmt 0x1f687df0018 <line:302:17, line:304:28>
|   |       |     | |-OpaqueValueExpr 0x1f687df0000 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1f687defff0 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f687deffc8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f687df0030 <line:305:17>
|   |       |     |-CaseStmt 0x1f687df0068 <line:306:13, line:323:17>
|   |       |     | |-ConstantExpr 0x1f687df0050 <line:306:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687df0038 <col:18> 'int' 110
|   |       |     | `-IfStmt 0x1f687df1930 <line:307:17, line:323:17> has_else
|   |       |     |   |-BinaryOperator 0x1f687df00f0 <line:307:21, line:68:25> 'int' '=='
|   |       |     |   | |-ImplicitCastExpr 0x1f687df00d8 <line:307:21> 'int' <LValueToRValue>
|   |       |     |   | | `-DeclRefExpr 0x1f687df0090 <col:21> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |     |   | `-IntegerLiteral 0x1f687df00b0 <line:68:25> 'int' 1
|   |       |     |   |-CompoundStmt 0x1f687df0308 <line:307:43, line:311:17>
|   |       |     |   | |-DeclStmt 0x1f687df01b8 <line:308:21, col:35>
|   |       |     |   | | `-VarDecl 0x1f687df0150 <col:21, col:32> col:32 used num 'short *'
|   |       |     |   | `-BinaryOperator 0x1f687df02e8 <line:310:21, col:28> 'short' '='
|   |       |     |   |   |-UnaryOperator 0x1f687df0280 <col:21, col:22> 'short' lvalue prefix '*' cannot overflow
|   |       |     |   |   | `-ImplicitCastExpr 0x1f687df0268 <col:22> 'short *' <LValueToRValue>
|   |       |     |   |   |   `-DeclRefExpr 0x1f687df0248 <col:22> 'short *' lvalue Var 0x1f687df0150 'num' 'short *'
|   |       |     |   |   `-ImplicitCastExpr 0x1f687df02d0 <col:28> 'short' <IntegralCast>
|   |       |     |   |     `-ImplicitCastExpr 0x1f687df02b8 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |   |       `-DeclRefExpr 0x1f687df0298 <col:28> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |       |     |   `-IfStmt 0x1f687df1908 <line:311:24, line:323:17> has_else
|   |       |     |     |-BinaryOperator 0x1f687df0388 <line:311:28, line:69:25> 'int' '=='
|   |       |     |     | |-ImplicitCastExpr 0x1f687df0370 <line:311:28> 'int' <LValueToRValue>
|   |       |     |     | | `-DeclRefExpr 0x1f687df0328 <col:28> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |     |     | `-IntegerLiteral 0x1f687df0348 <line:69:25> 'int' 2
|   |       |     |     |-CompoundStmt 0x1f687df1600 <line:311:49, line:315:17>
|   |       |     |     | |-DeclStmt 0x1f687df0458 <line:312:21, col:34>
|   |       |     |     | | `-VarDecl 0x1f687df03f0 <col:21, col:31> col:31 used num 'long *'
|   |       |     |     | `-BinaryOperator 0x1f687df15e0 <line:314:21, col:38> 'long' '='
|   |       |     |     |   |-UnaryOperator 0x1f687df0520 <col:21, col:22> 'long' lvalue prefix '*' cannot overflow
|   |       |     |     |   | `-ImplicitCastExpr 0x1f687df0508 <col:22> 'long *' <LValueToRValue>
|   |       |     |     |   |   `-DeclRefExpr 0x1f687df04e8 <col:22> 'long *' lvalue Var 0x1f687df03f0 'num' 'long *'
|   |       |     |     |   `-CStyleCastExpr 0x1f687df15b8 <col:28, col:38> 'long' <IntegralCast>
|   |       |     |     |     `-ImplicitCastExpr 0x1f687df15a0 <col:38> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |     |     |       `-DeclRefExpr 0x1f687df0538 <col:38> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |       |     |     `-IfStmt 0x1f687df18e0 <line:315:24, line:323:17> has_else
|   |       |     |       |-BinaryOperator 0x1f687df1680 <line:315:28, line:71:25> 'int' '=='
|   |       |     |       | |-ImplicitCastExpr 0x1f687df1668 <line:315:28> 'int' <LValueToRValue>
|   |       |     |       | | `-DeclRefExpr 0x1f687df1620 <col:28> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |     |       | `-IntegerLiteral 0x1f687df1640 <line:71:25> 'int' 4
|   |       |     |       |-CompoundStmt 0x1f687df16e0 <line:315:50, line:319:17>
|   |       |     |       `-CompoundStmt 0x1f687df18c0 <col:24, line:323:17>
|   |       |     |         |-DeclStmt 0x1f687df1770 <line:320:21, col:29>
|   |       |     |         | `-VarDecl 0x1f687df1708 <col:21, col:26> col:26 used num 'int *'
|   |       |     |         `-BinaryOperator 0x1f687df18a0 <line:322:21, col:28> 'int' '='
|   |       |     |           |-UnaryOperator 0x1f687df1838 <col:21, col:22> 'int' lvalue prefix '*' cannot overflow
|   |       |     |           | `-ImplicitCastExpr 0x1f687df1820 <col:22> 'int *' <LValueToRValue>
|   |       |     |           |   `-DeclRefExpr 0x1f687df1800 <col:22> 'int *' lvalue Var 0x1f687df1708 'num' 'int *'
|   |       |     |           `-ImplicitCastExpr 0x1f687df1888 <col:28> 'int' <IntegralCast>
|   |       |     |             `-ImplicitCastExpr 0x1f687df1870 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |               `-DeclRefExpr 0x1f687df1850 <col:28> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |       |     |-BreakStmt 0x1f687df1958 <line:324:17>
|   |       |     |-CaseStmt 0x1f687df1990 <line:325:13, line:327:28>
|   |       |     | |-ConstantExpr 0x1f687df1978 <line:325:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687df1960 <col:18> 'int' 37
|   |       |     | `-IfStmt 0x1f687df1bb8 <line:326:17, line:327:28>
|   |       |     |   |-UnaryOperator 0x1f687df1b68 <line:326:20, col:70> 'int' prefix '!' cannot overflow
|   |       |     |   | `-CallExpr 0x1f687df1aa8 <col:21, col:70> 'int'
|   |       |     |   |   |-ImplicitCastExpr 0x1f687df1a90 <col:21> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       |     |   |   | `-DeclRefExpr 0x1f687df19b8 <col:21> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       |     |   |   |-ImplicitCastExpr 0x1f687df1af0 <col:33> 'char **' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1f687df19d8 <col:33> 'char **' lvalue ParmVar 0x1f687de65f8 'sbuffer' 'char **'
|   |       |     |   |   |-ImplicitCastExpr 0x1f687df1b08 <col:42> 'char **' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1f687df19f8 <col:42> 'char **' lvalue ParmVar 0x1f687de6678 'buffer' 'char **'
|   |       |     |   |   |-UnaryOperator 0x1f687df1a38 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   |       |     |   |   | `-DeclRefExpr 0x1f687df1a18 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |       |     |   |   |-ImplicitCastExpr 0x1f687df1b20 <col:60> 'size_t *' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1f687df1a50 <col:60> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   |       |     |   |   `-ImplicitCastExpr 0x1f687df1b50 <col:68> 'int' <IntegralCast>
|   |       |     |   |     `-ImplicitCastExpr 0x1f687df1b38 <col:68> 'char' <LValueToRValue>
|   |       |     |   |       `-DeclRefExpr 0x1f687df1a70 <col:68> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     |   `-ReturnStmt 0x1f687df1ba8 <line:327:21, col:28>
|   |       |     |     `-IntegerLiteral 0x1f687df1b80 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f687df1bd0 <line:328:17>
|   |       |     |-CaseStmt 0x1f687df1c08 <line:329:13, line:331:29>
|   |       |     | |-ConstantExpr 0x1f687df1bf0 <line:329:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f687df1bd8 <col:18> 'int' 119
|   |       |     | `-BinaryOperator 0x1f687df1cb8 <line:331:17, col:29> 'char' '='
|   |       |     |   |-DeclRefExpr 0x1f687df1c30 <col:17> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       |     |   `-ImplicitCastExpr 0x1f687df1ca0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |     `-UnaryOperator 0x1f687df1c88 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |       `-UnaryOperator 0x1f687df1c70 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |         `-DeclRefExpr 0x1f687df1c50 <col:23> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f687df1cd8 <line:332:17>
|   |       |     `-DefaultStmt 0x1f687df1ce8 <line:333:13, line:335:17>
|   |       |       `-BreakStmt 0x1f687df1ce0 <col:17>
|   |       |-BinaryOperator 0x1f687df1eb8 <line:337:13, col:25> 'char' '='
|   |       | |-DeclRefExpr 0x1f687df1e30 <col:13> 'char' lvalue Var 0x1f687de6b38 'ch' 'char'
|   |       | `-ImplicitCastExpr 0x1f687df1ea0 <col:18, col:25> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1f687df1e88 <col:18, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1f687df1e70 <col:19, col:25> 'const char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1f687df1e50 <col:19> 'const char *' lvalue ParmVar 0x1f687de6868 'format' 'const char *'
|   |       |-BinaryOperator 0x1f687df1f20 <line:338:13, line:42:25> 'int' '='
|   |       | |-DeclRefExpr 0x1f687df1ed8 <line:338:13> 'int' lvalue Var 0x1f687de6e30 'state' 'int'
|   |       | `-IntegerLiteral 0x1f687df1ef8 <line:42:25> 'int' 0
|   |       |-BinaryOperator 0x1f687df2008 <line:339:13, col:36> 'int' '='
|   |       | |-DeclRefExpr 0x1f687df1f40 <col:13> 'int' lvalue Var 0x1f687de6ec8 'flags' 'int'
|   |       | `-BinaryOperator 0x1f687df1fe8 <col:21, col:36> 'int' '='
|   |       |   |-DeclRefExpr 0x1f687df1f60 <col:21> 'int' lvalue Var 0x1f687de6f60 'cflags' 'int'
|   |       |   `-BinaryOperator 0x1f687df1fc8 <col:30, col:36> 'int' '='
|   |       |     |-DeclRefExpr 0x1f687df1f80 <col:30> 'int' lvalue Var 0x1f687de6d00 'min' 'int'
|   |       |     `-IntegerLiteral 0x1f687df1fa0 <col:36> 'int' 0
|   |       |-BinaryOperator 0x1f687df2088 <line:340:13, col:20> 'int' '='
|   |       | |-DeclRefExpr 0x1f687df2028 <col:13> 'int' lvalue Var 0x1f687de6d98 'max' 'int'
|   |       | `-UnaryOperator 0x1f687df2070 <col:19, col:20> 'int' prefix '-'
|   |       |   `-IntegerLiteral 0x1f687df2048 <col:20> 'int' 1
|   |       |-BreakStmt 0x1f687df20a8 <line:341:13>
|   |       |-CaseStmt 0x1f687df20f0 <line:342:9, line:343:13>
|   |       | |-ConstantExpr 0x1f687df20d8 <line:49:25> 'int'
|   |       | | `-IntegerLiteral 0x1f687df20b0 <col:25> 'int' 7
|   |       | `-BreakStmt 0x1f687df2118 <line:343:13>
|   |       `-DefaultStmt 0x1f687df2128 <line:344:9, line:345:13>
|   |         `-BreakStmt 0x1f687df2120 <col:13>
|   |-IfStmt 0x1f687d89280 <line:352:5, line:356:5>
|   | |-BinaryOperator 0x1f687df2318 <line:352:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f687df22e8 <.//openssl//file_jk/after\crypto\bio\b_print.c:352:9> 'char **' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687df2240 <col:9> 'char **' lvalue ParmVar 0x1f687de6678 'buffer' 'char **'
|   | | `-ImplicitCastExpr 0x1f687df2300 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   | |   `-ParenExpr 0x1f687df22c8 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1f687df22a0 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1f687df2260 <col:26> 'int' 0
|   | `-CompoundStmt 0x1f687d89260 <.//openssl//file_jk/after\crypto\bio\b_print.c:352:25, line:356:5>
|   |   |-BinaryOperator 0x1f687df24c8 <line:353:9, col:44> 'int' '='
|   |   | |-UnaryOperator 0x1f687df2370 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1f687df2358 <col:10> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1f687df2338 <col:10> 'int *' lvalue ParmVar 0x1f687de67e8 'truncated' 'int *'
|   |   | `-ParenExpr 0x1f687df24a8 <col:22, col:44> 'int'
|   |   |   `-BinaryOperator 0x1f687df2488 <col:23, col:43> 'int' '>'
|   |   |     |-ImplicitCastExpr 0x1f687df2470 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1f687df2388 <col:23> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |   |     `-BinaryOperator 0x1f687df2450 <col:33, col:43> 'unsigned long long' '-'
|   |   |       |-ImplicitCastExpr 0x1f687df2420 <col:33, col:34> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |       | `-UnaryOperator 0x1f687df23e0 <col:33, col:34> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   |       |   `-ImplicitCastExpr 0x1f687df23c8 <col:34> 'size_t *' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1f687df23a8 <col:34> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   |   |       `-ImplicitCastExpr 0x1f687df2438 <col:43> 'unsigned long long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1f687df23f8 <col:43> 'int' 1
|   |   `-IfStmt 0x1f687d89248 <line:354:9, line:355:33>
|   |     |-ImplicitCastExpr 0x1f687df2538 <line:354:13, col:14> 'int' <LValueToRValue>
|   |     | `-UnaryOperator 0x1f687df2520 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |     |   `-ImplicitCastExpr 0x1f687df2508 <col:14> 'int *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x1f687df24e8 <col:14> 'int *' lvalue ParmVar 0x1f687de67e8 'truncated' 'int *'
|   |     `-BinaryOperator 0x1f687d89228 <line:355:13, col:33> 'size_t':'unsigned long long' '='
|   |       |-DeclRefExpr 0x1f687df2550 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |       `-BinaryOperator 0x1f687d89208 <col:23, col:33> 'unsigned long long' '-'
|   |         |-ImplicitCastExpr 0x1f687d891d8 <col:23, col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |         | `-UnaryOperator 0x1f687d89198 <col:23, col:24> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |         |   `-ImplicitCastExpr 0x1f687d89180 <col:24> 'size_t *' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x1f687df2570 <col:24> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   |         `-ImplicitCastExpr 0x1f687d891f0 <col:33> 'unsigned long long' <IntegralCast>
|   |           `-IntegerLiteral 0x1f687d891b0 <col:33> 'int' 1
|   |-IfStmt 0x1f687d89460 <line:357:5, line:358:16>
|   | |-UnaryOperator 0x1f687d89410 <line:357:8, col:60> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1f687d89380 <col:9, col:60> 'int'
|   | |   |-ImplicitCastExpr 0x1f687d89368 <col:9> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1f687d89298 <col:9> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   | |   |-ImplicitCastExpr 0x1f687d893c8 <col:21> 'char **' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1f687d892b8 <col:21> 'char **' lvalue ParmVar 0x1f687de65f8 'sbuffer' 'char **'
|   | |   |-ImplicitCastExpr 0x1f687d893e0 <col:30> 'char **' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1f687d892d8 <col:30> 'char **' lvalue ParmVar 0x1f687de6678 'buffer' 'char **'
|   | |   |-UnaryOperator 0x1f687d89318 <col:38, col:39> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f687d892f8 <col:39> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1f687d893f8 <col:48> 'size_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1f687d89330 <col:48> 'size_t *' lvalue ParmVar 0x1f687de66f0 'maxlen' 'size_t *'
|   | |   `-CharacterLiteral 0x1f687d89350 <col:56> 'int' 0
|   | `-ReturnStmt 0x1f687d89450 <line:358:9, col:16>
|   |   `-IntegerLiteral 0x1f687d89428 <col:16> 'int' 0
|   |-BinaryOperator 0x1f687d89560 <line:359:5, col:25> 'size_t':'unsigned long long' '='
|   | |-UnaryOperator 0x1f687d894b0 <col:5, col:6> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f687d89498 <col:6> 'size_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f687d89478 <col:6> 'size_t *' lvalue ParmVar 0x1f687de6768 'retlen' 'size_t *'
|   | `-BinaryOperator 0x1f687d89540 <col:15, col:25> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1f687d89510 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687d894c8 <col:15> 'size_t':'unsigned long long' lvalue Var 0x1f687de6ff0 'currlen' 'size_t':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1f687d89528 <col:25> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1f687d894e8 <col:25> 'int' 1
|   `-ReturnStmt 0x1f687d895a8 <line:360:5, col:12>
|     `-IntegerLiteral 0x1f687d89580 <col:12> 'int' 1
|-FunctionDecl 0x1f687d89b70 prev 0x1f687de2c00 <line:363:1, line:413:1> line:364:1 used fmtstr 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' static
| |-ParmVarDecl 0x1f687d89670 <col:8, col:15> col:15 used sbuffer 'char **'
| |-ParmVarDecl 0x1f687d896f0 <line:365:8, col:15> col:15 used buffer 'char **'
| |-ParmVarDecl 0x1f687d89768 <line:366:8, col:16> col:16 used currlen 'size_t *'
| |-ParmVarDecl 0x1f687d897e0 <line:367:8, col:16> col:16 used maxlen 'size_t *'
| |-ParmVarDecl 0x1f687d89860 <col:24, col:36> col:36 used value 'const char *'
| |-ParmVarDecl 0x1f687d898e0 <col:43, col:47> col:47 used flags 'int'
| |-ParmVarDecl 0x1f687d89960 <col:54, col:58> col:58 used min 'int'
| |-ParmVarDecl 0x1f687d899e0 <col:63, col:67> col:67 used max 'int'
| `-CompoundStmt 0x1f687ea5670 <line:368:1, line:413:1>
|   |-DeclStmt 0x1f687d89cd0 <line:369:5, col:15>
|   | `-VarDecl 0x1f687d89c68 <col:5, col:9> col:9 used padlen 'int'
|   |-DeclStmt 0x1f687d89d60 <line:370:5, col:17>
|   | `-VarDecl 0x1f687d89cf8 <col:5, col:12> col:12 used strln 'size_t':'unsigned long long'
|   |-DeclStmt 0x1f687d89e20 <line:371:5, col:16>
|   | `-VarDecl 0x1f687d89d90 <col:5, col:15> col:9 used cnt 'int' cinit
|   |   `-IntegerLiteral 0x1f687d89df8 <col:15> 'int' 0
|   |-IfStmt 0x1f687d89f98 <line:373:5, line:374:17>
|   | |-BinaryOperator 0x1f687d89eb0 <line:373:9, col:18> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f687d89e80 <col:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d89e38 <col:9> 'const char *' lvalue ParmVar 0x1f687d89860 'value' 'const char *'
|   | | `-ImplicitCastExpr 0x1f687d89e98 <col:18> 'const char *' <NullToPointer>
|   | |   `-IntegerLiteral 0x1f687d89e58 <col:18> 'int' 0
|   | `-BinaryOperator 0x1f687d89f78 <line:374:9, col:17> 'const char *' '='
|   |   |-DeclRefExpr 0x1f687d89ed0 <col:9> 'const char *' lvalue ParmVar 0x1f687d89860 'value' 'const char *'
|   |   `-ImplicitCastExpr 0x1f687d89f60 <col:17> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x1f687d89f48 <col:17> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1f687d89f28 <col:17> 'char [7]' lvalue "<NULL>"
|   |-BinaryOperator 0x1f687ea0258 <line:378:5, col:20> 'int' '='
|   | |-DeclRefExpr 0x1f687ea0160 <col:5> 'int' lvalue Var 0x1f687d89c68 'padlen' 'int'
|   | `-ImplicitCastExpr 0x1f687ea0240 <col:14, col:20> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1f687ea0220 <col:14, col:20> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1f687ea0208 <col:14> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1f687ea01d8 <col:14> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1f687ea0198 <col:14> 'int' lvalue ParmVar 0x1f687d89960 'min' 'int'
|   |     `-ImplicitCastExpr 0x1f687ea01f0 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f687ea01b8 <col:20> 'size_t':'unsigned long long' lvalue Var 0x1f687d89cf8 'strln' 'size_t':'unsigned long long'
|   |-IfStmt 0x1f687ea0400 <line:379:5, line:380:18>
|   | |-BinaryOperator 0x1f687ea0378 <line:379:9, col:29> 'int' '||'
|   | | |-BinaryOperator 0x1f687ea02d8 <col:9, col:15> 'int' '<'
|   | | | |-ImplicitCastExpr 0x1f687ea02c0 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1f687ea0278 <col:9> 'int' lvalue ParmVar 0x1f687d89960 'min' 'int'
|   | | | `-IntegerLiteral 0x1f687ea0298 <col:15> 'int' 0
|   | | `-BinaryOperator 0x1f687ea0358 <col:20, col:29> 'int' '<'
|   | |   |-ImplicitCastExpr 0x1f687ea0340 <col:20> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1f687ea02f8 <col:20> 'int' lvalue Var 0x1f687d89c68 'padlen' 'int'
|   | |   `-IntegerLiteral 0x1f687ea0318 <col:29> 'int' 0
|   | `-BinaryOperator 0x1f687ea03e0 <line:380:9, col:18> 'int' '='
|   |   |-DeclRefExpr 0x1f687ea0398 <col:9> 'int' lvalue Var 0x1f687d89c68 'padlen' 'int'
|   |   `-IntegerLiteral 0x1f687ea03b8 <col:18> 'int' 0
|   |-IfStmt 0x1f687ea05e0 <line:381:5, line:390:5>
|   | |-BinaryOperator 0x1f687ea0478 <line:381:9, col:16> 'int' '>='
|   | | |-ImplicitCastExpr 0x1f687ea0460 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea0418 <col:9> 'int' lvalue ParmVar 0x1f687d899e0 'max' 'int'
|   | | `-IntegerLiteral 0x1f687ea0438 <col:16> 'int' 0
|   | `-CompoundStmt 0x1f687ea05c8 <col:19, line:390:5>
|   |   `-IfStmt 0x1f687ea05a0 <line:386:9, line:389:13> has_else
|   |     |-OpaqueValueExpr 0x1f687ea0588 <<invalid sloc>> '_Bool'
|   |     |-CompoundAssignOperator 0x1f687ea0530 <line:387:13, col:20> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | |-DeclRefExpr 0x1f687ea04d8 <col:13> 'int' lvalue ParmVar 0x1f687d899e0 'max' 'int'
|   |     | `-ImplicitCastExpr 0x1f687ea0518 <col:20> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1f687ea04f8 <col:20> 'int' lvalue Var 0x1f687d89c68 'padlen' 'int'
|   |     `-NullStmt 0x1f687ea0580 <line:389:13>
|   |-IfStmt 0x1f687ea0770 <line:391:5, line:392:19>
|   | |-BinaryOperator 0x1f687ea06c0 <line:391:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f687ea06a8 <line:391:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea05f8 <col:9> 'int' lvalue ParmVar 0x1f687d898e0 'flags' 'int'
|   | | `-ParenExpr 0x1f687ea0688 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f687ea0668 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f687ea0618 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f687ea0640 <col:31> 'int' 0
|   | `-BinaryOperator 0x1f687ea0750 <line:392:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1f687ea06e0 <col:9> 'int' lvalue Var 0x1f687d89c68 'padlen' 'int'
|   |   `-UnaryOperator 0x1f687ea0738 <col:18, col:19> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1f687ea0720 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f687ea0700 <col:19> 'int' lvalue Var 0x1f687d89c68 'padlen' 'int'
|   |-WhileStmt 0x1f687ea0c28 <line:394:5, line:399:5>
|   | |-BinaryOperator 0x1f687ea0990 <line:394:12, col:49> 'int' '&&'
|   | | |-ParenExpr 0x1f687ea0808 <col:12, col:23> 'int'
|   | | | `-BinaryOperator 0x1f687ea07e8 <col:13, col:22> 'int' '>'
|   | | |   |-ImplicitCastExpr 0x1f687ea07d0 <col:13> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1f687ea0788 <col:13> 'int' lvalue Var 0x1f687d89c68 'padlen' 'int'
|   | | |   `-IntegerLiteral 0x1f687ea07a8 <col:22> 'int' 0
|   | | `-ParenExpr 0x1f687ea0970 <col:28, col:49> 'int'
|   | |   `-BinaryOperator 0x1f687ea0950 <col:29, col:46> 'int' '||'
|   | |     |-BinaryOperator 0x1f687ea0888 <col:29, col:35> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1f687ea0870 <col:29> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1f687ea0828 <col:29> 'int' lvalue ParmVar 0x1f687d899e0 'max' 'int'
|   | |     | `-IntegerLiteral 0x1f687ea0848 <col:35> 'int' 0
|   | |     `-BinaryOperator 0x1f687ea0930 <col:40, col:46> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1f687ea0900 <col:40> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1f687ea08a8 <col:40> 'int' lvalue Var 0x1f687d89d90 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1f687ea0918 <col:46> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1f687ea08e0 <col:46> 'int' lvalue ParmVar 0x1f687d899e0 'max' 'int'
|   | `-CompoundStmt 0x1f687ea0c00 <col:52, line:399:5>
|   |   |-IfStmt 0x1f687ea0b78 <line:395:9, line:396:20>
|   |   | |-UnaryOperator 0x1f687ea0b28 <line:395:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687ea0a80 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687ea0a68 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687ea09b0 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687ea0ac8 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea09d0 <col:25> 'char **' lvalue ParmVar 0x1f687d89670 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea0ae0 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea09f0 <col:34> 'char **' lvalue ParmVar 0x1f687d896f0 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea0af8 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea0a10 <col:42> 'size_t *' lvalue ParmVar 0x1f687d89768 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687ea0b10 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea0a30 <col:51> 'size_t *' lvalue ParmVar 0x1f687d897e0 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f687ea0a50 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1f687ea0b68 <line:396:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687ea0b40 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1f687ea0bb0 <line:397:9, col:11> 'int' prefix '--'
|   |   | `-DeclRefExpr 0x1f687ea0b90 <col:11> 'int' lvalue Var 0x1f687d89c68 'padlen' 'int'
|   |   `-UnaryOperator 0x1f687ea0be8 <line:398:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1f687ea0bc8 <col:11> 'int' lvalue Var 0x1f687d89d90 'cnt' 'int'
|   |-WhileStmt 0x1f687ea5180 <line:400:5, line:405:5>
|   | |-BinaryOperator 0x1f687ea0e28 <line:400:12, col:46> 'int' '&&'
|   | | |-BinaryOperator 0x1f687ea0cb8 <col:12, col:20> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1f687ea0c88 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1f687ea0c40 <col:12> 'size_t':'unsigned long long' lvalue Var 0x1f687d89cf8 'strln' 'size_t':'unsigned long long'
|   | | | `-ImplicitCastExpr 0x1f687ea0ca0 <col:20> 'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1f687ea0c60 <col:20> 'int' 0
|   | | `-ParenExpr 0x1f687ea0e08 <col:25, col:46> 'int'
|   | |   `-BinaryOperator 0x1f687ea0de8 <col:26, col:43> 'int' '||'
|   | |     |-BinaryOperator 0x1f687ea0d38 <col:26, col:32> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1f687ea0d20 <col:26> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1f687ea0cd8 <col:26> 'int' lvalue ParmVar 0x1f687d899e0 'max' 'int'
|   | |     | `-IntegerLiteral 0x1f687ea0cf8 <col:32> 'int' 0
|   | |     `-BinaryOperator 0x1f687ea0dc8 <col:37, col:43> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1f687ea0d98 <col:37> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1f687ea0d58 <col:37> 'int' lvalue Var 0x1f687d89d90 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1f687ea0db0 <col:43> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1f687ea0d78 <col:43> 'int' lvalue ParmVar 0x1f687d899e0 'max' 'int'
|   | `-CompoundStmt 0x1f687ea5158 <col:49, line:405:5>
|   |   |-IfStmt 0x1f687ea1078 <line:401:9, line:402:20>
|   |   | |-UnaryOperator 0x1f687ea1028 <line:401:12, col:67> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687ea0f50 <col:13, col:67> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687ea0f38 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687ea0e48 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687ea0f98 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea0e68 <col:25> 'char **' lvalue ParmVar 0x1f687d89670 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea0fb0 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea0e88 <col:34> 'char **' lvalue ParmVar 0x1f687d896f0 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea0fc8 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea0ea8 <col:42> 'size_t *' lvalue ParmVar 0x1f687d89768 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687ea0fe0 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea0ec8 <col:51> 'size_t *' lvalue ParmVar 0x1f687d897e0 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1f687ea1010 <col:59, col:65> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1f687ea0ff8 <col:59, col:65> 'char' <LValueToRValue>
|   |   | |       `-UnaryOperator 0x1f687ea0f20 <col:59, col:65> 'const char' lvalue prefix '*' cannot overflow
|   |   | |         `-UnaryOperator 0x1f687ea0f08 <col:60, col:65> 'const char *' postfix '++'
|   |   | |           `-DeclRefExpr 0x1f687ea0ee8 <col:60> 'const char *' lvalue ParmVar 0x1f687d89860 'value' 'const char *'
|   |   | `-ReturnStmt 0x1f687ea1068 <line:402:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687ea1040 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1f687ea10b0 <line:403:9, col:11> 'size_t':'unsigned long long' prefix '--'
|   |   | `-DeclRefExpr 0x1f687ea1090 <col:11> 'size_t':'unsigned long long' lvalue Var 0x1f687d89cf8 'strln' 'size_t':'unsigned long long'
|   |   `-UnaryOperator 0x1f687ea5140 <line:404:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1f687ea5120 <col:11> 'int' lvalue Var 0x1f687d89d90 'cnt' 'int'
|   |-WhileStmt 0x1f687ea5620 <line:406:5, line:411:5>
|   | |-BinaryOperator 0x1f687ea5388 <line:406:12, col:49> 'int' '&&'
|   | | |-ParenExpr 0x1f687ea5218 <col:12, col:23> 'int'
|   | | | `-BinaryOperator 0x1f687ea51f8 <col:13, col:22> 'int' '<'
|   | | |   |-ImplicitCastExpr 0x1f687ea51e0 <col:13> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1f687ea5198 <col:13> 'int' lvalue Var 0x1f687d89c68 'padlen' 'int'
|   | | |   `-IntegerLiteral 0x1f687ea51b8 <col:22> 'int' 0
|   | | `-ParenExpr 0x1f687ea5368 <col:28, col:49> 'int'
|   | |   `-BinaryOperator 0x1f687ea5348 <col:29, col:46> 'int' '||'
|   | |     |-BinaryOperator 0x1f687ea5298 <col:29, col:35> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1f687ea5280 <col:29> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1f687ea5238 <col:29> 'int' lvalue ParmVar 0x1f687d899e0 'max' 'int'
|   | |     | `-IntegerLiteral 0x1f687ea5258 <col:35> 'int' 0
|   | |     `-BinaryOperator 0x1f687ea5328 <col:40, col:46> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1f687ea52f8 <col:40> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1f687ea52b8 <col:40> 'int' lvalue Var 0x1f687d89d90 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1f687ea5310 <col:46> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1f687ea52d8 <col:46> 'int' lvalue ParmVar 0x1f687d899e0 'max' 'int'
|   | `-CompoundStmt 0x1f687ea55f8 <col:52, line:411:5>
|   |   |-IfStmt 0x1f687ea5570 <line:407:9, line:408:20>
|   |   | |-UnaryOperator 0x1f687ea5520 <line:407:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687ea5478 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687ea5460 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687ea53a8 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687ea54c0 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea53c8 <col:25> 'char **' lvalue ParmVar 0x1f687d89670 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea54d8 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea53e8 <col:34> 'char **' lvalue ParmVar 0x1f687d896f0 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea54f0 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea5408 <col:42> 'size_t *' lvalue ParmVar 0x1f687d89768 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687ea5508 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea5428 <col:51> 'size_t *' lvalue ParmVar 0x1f687d897e0 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f687ea5448 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1f687ea5560 <line:408:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687ea5538 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1f687ea55a8 <line:409:9, col:11> 'int' prefix '++'
|   |   | `-DeclRefExpr 0x1f687ea5588 <col:11> 'int' lvalue Var 0x1f687d89c68 'padlen' 'int'
|   |   `-UnaryOperator 0x1f687ea55e0 <line:410:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1f687ea55c0 <col:11> 'int' lvalue Var 0x1f687d89d90 'cnt' 'int'
|   `-ReturnStmt 0x1f687ea5660 <line:412:5, col:12>
|     `-IntegerLiteral 0x1f687ea5638 <col:12> 'int' 1
|-FunctionDecl 0x1f687ea5bc0 <line:415:1, line:513:1> line:416:1 invalid fmtint 'int (char **, char **, size_t *, size_t *, int, int, int, int, int)' static
| |-ParmVarDecl 0x1f687ea56f8 <col:8, col:15> col:15 used sbuffer 'char **'
| |-ParmVarDecl 0x1f687ea5778 <line:417:8, col:15> col:15 used buffer 'char **'
| |-ParmVarDecl 0x1f687ea57f0 <line:418:8, col:16> col:16 used currlen 'size_t *'
| |-ParmVarDecl 0x1f687ea5868 <line:419:8, col:16> col:16 used maxlen 'size_t *'
| |-ParmVarDecl 0x1f687ea58e8 <col:24, col:32> col:32 invalid value 'int'
| |-ParmVarDecl 0x1f687ea5968 <col:39, col:43> col:43 used base 'int'
| |-ParmVarDecl 0x1f687ea59e8 <col:49, col:53> col:53 used min 'int'
| |-ParmVarDecl 0x1f687ea5a68 <col:58, col:62> col:62 used max 'int'
| |-ParmVarDecl 0x1f687ea5ae8 <col:67, col:71> col:71 used flags 'int'
| `-CompoundStmt 0x1f687ea4110 <line:420:1, line:513:1>
|   |-DeclStmt 0x1f687ea5d68 <line:421:5, col:22>
|   | `-VarDecl 0x1f687ea5cd8 <col:5, col:21> col:9 used signvalue 'int' cinit
|   |   `-IntegerLiteral 0x1f687ea5d40 <col:21> 'int' 0
|   |-DeclStmt 0x1f687ea5e80 <line:422:5, col:28>
|   | `-VarDecl 0x1f687ea5d98 <col:5, col:26> col:17 used prefix 'const char *' cinit
|   |   `-ImplicitCastExpr 0x1f687ea5e68 <col:26> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x1f687ea5e50 <col:26> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1f687ea5e38 <col:26> 'char [1]' lvalue ""
|   |-DeclStmt 0x1f687ea6048 <line:424:5, col:42>
|   | `-VarDecl 0x1f687ea5fe0 <col:5, col:10> col:10 invalid convert 'char'
|   |-DeclStmt 0x1f687ea6108 <line:425:5, col:18>
|   | `-VarDecl 0x1f687ea6078 <col:5, col:17> col:9 used place 'int' cinit
|   |   `-IntegerLiteral 0x1f687ea60e0 <col:17> 'int' 0
|   |-DeclStmt 0x1f687ea1188 <line:426:5, col:20>
|   | `-VarDecl 0x1f687ea10f8 <col:5, col:19> col:9 used spadlen 'int' cinit
|   |   `-IntegerLiteral 0x1f687ea1160 <col:19> 'int' 0
|   |-DeclStmt 0x1f687ea1248 <line:427:5, col:20>
|   | `-VarDecl 0x1f687ea11b8 <col:5, col:19> col:9 used zpadlen 'int' cinit
|   |   `-IntegerLiteral 0x1f687ea1220 <col:19> 'int' 0
|   |-DeclStmt 0x1f687ea1308 <line:428:5, col:17>
|   | `-VarDecl 0x1f687ea1278 <col:5, col:16> col:9 used caps 'int' cinit
|   |   `-IntegerLiteral 0x1f687ea12e0 <col:16> 'int' 0
|   |-IfStmt 0x1f687ea1420 <line:430:5, line:431:15>
|   | |-BinaryOperator 0x1f687ea1398 <line:430:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687ea1380 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea1320 <col:9> 'int' lvalue ParmVar 0x1f687ea5a68 'max' 'int'
|   | | `-IntegerLiteral 0x1f687ea1358 <col:15> 'int' 0
|   | `-BinaryOperator 0x1f687ea1400 <line:431:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1f687ea13b8 <col:9> 'int' lvalue ParmVar 0x1f687ea5a68 'max' 'int'
|   |   `-IntegerLiteral 0x1f687ea13d8 <col:15> 'int' 0
|   |-IfStmt 0x1f687ea1960 <line:433:5, line:441:5>
|   | |-UnaryOperator 0x1f687ea1558 <line:433:9, col:32> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x1f687ea1538 <col:10, col:32> 'int'
|   | |   `-BinaryOperator 0x1f687ea1518 <col:11, line:65:32> 'int' '&'
|   | |     |-ImplicitCastExpr 0x1f687ea1500 <line:433:11> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f687ea1438 <col:11> 'int' lvalue ParmVar 0x1f687ea5ae8 'flags' 'int'
|   | |     `-ParenExpr 0x1f687ea14e0 <line:65:25, col:32> 'int'
|   | |       `-BinaryOperator 0x1f687ea14c0 <col:26, col:31> 'int' '<<'
|   | |         |-IntegerLiteral 0x1f687ea1470 <col:26> 'int' 1
|   | |         `-IntegerLiteral 0x1f687ea1498 <col:31> 'int' 6
|   | `-CompoundStmt 0x1f687ea1948 <line:433:35, line:441:5>
|   |   `-IfStmt 0x1f687ea1920 <line:434:9, line:440:25> has_else
|   |     |-OpaqueValueExpr 0x1f687ea1908 <<invalid sloc>> '_Bool'
|   |     |-CompoundStmt 0x1f687ea1630 <line:434:24, line:437:9>
|   |     | `-BinaryOperator 0x1f687ea15e8 <line:435:13, col:25> 'int' '='
|   |     |   |-DeclRefExpr 0x1f687ea1598 <col:13> 'int' lvalue Var 0x1f687ea5cd8 'signvalue' 'int'
|   |     |   `-CharacterLiteral 0x1f687ea15d0 <col:25> 'int' 45
|   |     `-IfStmt 0x1f687ea18e0 <line:437:16, line:440:25> has_else
|   |       |-BinaryOperator 0x1f687ea1710 <line:437:20, line:55:32> 'int' '&'
|   |       | |-ImplicitCastExpr 0x1f687ea16f8 <line:437:20> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x1f687ea1648 <col:20> 'int' lvalue ParmVar 0x1f687ea5ae8 'flags' 'int'
|   |       | `-ParenExpr 0x1f687ea16d8 <line:55:25, col:32> 'int'
|   |       |   `-BinaryOperator 0x1f687ea16b8 <col:26, col:31> 'int' '<<'
|   |       |     |-IntegerLiteral 0x1f687ea1668 <col:26> 'int' 1
|   |       |     `-IntegerLiteral 0x1f687ea1690 <col:31> 'int' 1
|   |       |-BinaryOperator 0x1f687ea1768 <line:438:13, col:25> 'int' '='
|   |       | |-DeclRefExpr 0x1f687ea1730 <col:13> 'int' lvalue Var 0x1f687ea5cd8 'signvalue' 'int'
|   |       | `-CharacterLiteral 0x1f687ea1750 <col:25> 'int' 43
|   |       `-IfStmt 0x1f687ea18c8 <line:439:14, line:440:25>
|   |         |-BinaryOperator 0x1f687ea1850 <line:439:18, line:57:32> 'int' '&'
|   |         | |-ImplicitCastExpr 0x1f687ea1838 <line:439:18> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x1f687ea1788 <col:18> 'int' lvalue ParmVar 0x1f687ea5ae8 'flags' 'int'
|   |         | `-ParenExpr 0x1f687ea1818 <line:57:25, col:32> 'int'
|   |         |   `-BinaryOperator 0x1f687ea17f8 <col:26, col:31> 'int' '<<'
|   |         |     |-IntegerLiteral 0x1f687ea17a8 <col:26> 'int' 1
|   |         |     `-IntegerLiteral 0x1f687ea17d0 <col:31> 'int' 2
|   |         `-BinaryOperator 0x1f687ea18a8 <line:440:13, col:25> 'int' '='
|   |           |-DeclRefExpr 0x1f687ea1870 <col:13> 'int' lvalue Var 0x1f687ea5cd8 'signvalue' 'int'
|   |           `-CharacterLiteral 0x1f687ea1890 <col:25> 'int' 32
|   |-IfStmt 0x1f687ea1d70 <line:442:5, line:447:5>
|   | |-BinaryOperator 0x1f687ea1a40 <line:442:9, line:59:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f687ea1a28 <line:442:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea1978 <col:9> 'int' lvalue ParmVar 0x1f687ea5ae8 'flags' 'int'
|   | | `-ParenExpr 0x1f687ea1a08 <line:59:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f687ea19e8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f687ea1998 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f687ea19c0 <col:31> 'int' 3
|   | `-CompoundStmt 0x1f687ea1d50 <line:442:27, line:447:5>
|   |   |-IfStmt 0x1f687ea1bd8 <line:443:9, line:444:22>
|   |   | |-BinaryOperator 0x1f687ea1ad8 <line:443:13, col:21> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1f687ea1ac0 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f687ea1a60 <col:13> 'int' lvalue ParmVar 0x1f687ea5968 'base' 'int'
|   |   | | `-IntegerLiteral 0x1f687ea1a98 <col:21> 'int' 8
|   |   | `-BinaryOperator 0x1f687ea1bb8 <line:444:13, col:22> 'const char *' '='
|   |   |   |-DeclRefExpr 0x1f687ea1af8 <col:13> 'const char *' lvalue Var 0x1f687ea5d98 'prefix' 'const char *'
|   |   |   `-ImplicitCastExpr 0x1f687ea1ba0 <col:22> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x1f687ea1b88 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x1f687ea1b68 <col:22> 'char [2]' lvalue "0"
|   |   `-IfStmt 0x1f687ea1d38 <line:445:9, line:446:22>
|   |     |-BinaryOperator 0x1f687ea1c50 <line:445:13, col:21> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1f687ea1c38 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f687ea1bf0 <col:13> 'int' lvalue ParmVar 0x1f687ea5968 'base' 'int'
|   |     | `-IntegerLiteral 0x1f687ea1c10 <col:21> 'int' 16
|   |     `-BinaryOperator 0x1f687ea1d18 <line:446:13, col:22> 'const char *' '='
|   |       |-DeclRefExpr 0x1f687ea1c70 <col:13> 'const char *' lvalue Var 0x1f687ea5d98 'prefix' 'const char *'
|   |       `-ImplicitCastExpr 0x1f687ea1d00 <col:22> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x1f687ea1ce8 <col:22> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x1f687ea1cc8 <col:22> 'char [3]' lvalue "0x"
|   |-IfStmt 0x1f687ea1ef0 <line:448:5, line:449:16>
|   | |-BinaryOperator 0x1f687ea1e50 <line:448:9, line:63:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f687ea1e38 <line:448:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea1d88 <col:9> 'int' lvalue ParmVar 0x1f687ea5ae8 'flags' 'int'
|   | | `-ParenExpr 0x1f687ea1e18 <line:63:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f687ea1df8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f687ea1da8 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f687ea1dd0 <col:31> 'int' 5
|   | `-BinaryOperator 0x1f687ea1ed0 <line:449:9, col:16> 'int' '='
|   |   |-DeclRefExpr 0x1f687ea1e70 <col:9> 'int' lvalue Var 0x1f687ea1278 'caps' 'int'
|   |   `-IntegerLiteral 0x1f687ea1ea8 <col:16> 'int' 1
|   |-IfStmt 0x1f687ea3360 <line:455:5, line:456:14>
|   | |-OpaqueValueExpr 0x1f687ea3348 <<invalid sloc>> '_Bool'
|   | `-UnaryOperator 0x1f687ea3330 <col:9, col:14> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1f687ea3310 <col:9> 'int' lvalue Var 0x1f687ea6078 'place' 'int'
|   |-BinaryOperator 0x1f687ea3488 <line:459:5, col:21> 'int' '='
|   | |-DeclRefExpr 0x1f687ea33c0 <col:5> 'int' lvalue Var 0x1f687ea11b8 'zpadlen' 'int'
|   | `-BinaryOperator 0x1f687ea3468 <col:15, col:21> 'int' '-'
|   |   |-ImplicitCastExpr 0x1f687ea3438 <col:15> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687ea33f8 <col:15> 'int' lvalue ParmVar 0x1f687ea5a68 'max' 'int'
|   |   `-ImplicitCastExpr 0x1f687ea3450 <col:21> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f687ea3418 <col:21> 'int' lvalue Var 0x1f687ea6078 'place' 'int'
|   |-BinaryOperator 0x1f687ea38e0 <line:460:5, line:461:73> 'int' '='
|   | |-DeclRefExpr 0x1f687ea34a8 <line:460:5> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   | `-ImplicitCastExpr 0x1f687ea38c8 <line:461:9, col:73> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1f687ea38a8 <col:9, col:73> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1f687ea3890 <col:9, col:56> 'unsigned long long' <IntegralCast>
|   |     | `-BinaryOperator 0x1f687ea3798 <col:9, col:56> 'int' '-'
|   |     |   |-BinaryOperator 0x1f687ea36a0 <col:9, line:80:40> 'int' '-'
|   |     |   | |-ImplicitCastExpr 0x1f687ea3688 <line:461:9> 'int' <LValueToRValue>
|   |     |   | | `-DeclRefExpr 0x1f687ea34e0 <col:9> 'int' lvalue ParmVar 0x1f687ea59e8 'min' 'int'
|   |     |   | `-ParenExpr 0x1f687ea3668 <line:80:23, col:40> 'int'
|   |     |   |   `-ConditionalOperator 0x1f687ea3638 <col:24, line:461:29> 'int'
|   |     |   |     |-ParenExpr 0x1f687ea35a8 <line:80:24, col:31> 'int'
|   |     |   |     | `-BinaryOperator 0x1f687ea3588 <line:461:24, col:29> 'int' '>='
|   |     |   |     |   |-ImplicitCastExpr 0x1f687ea3558 <col:24> 'int' <LValueToRValue>
|   |     |   |     |   | `-DeclRefExpr 0x1f687ea3518 <col:24> 'int' lvalue ParmVar 0x1f687ea5a68 'max' 'int'
|   |     |   |     |   `-ImplicitCastExpr 0x1f687ea3570 <col:29> 'int' <LValueToRValue>
|   |     |   |     |     `-DeclRefExpr 0x1f687ea3538 <col:29> 'int' lvalue Var 0x1f687ea6078 'place' 'int'
|   |     |   |     |-ImplicitCastExpr 0x1f687ea3608 <col:24> 'int' <LValueToRValue>
|   |     |   |     | `-DeclRefExpr 0x1f687ea35c8 <col:24> 'int' lvalue ParmVar 0x1f687ea5a68 'max' 'int'
|   |     |   |     `-ImplicitCastExpr 0x1f687ea3620 <col:29> 'int' <LValueToRValue>
|   |     |   |       `-DeclRefExpr 0x1f687ea35e8 <col:29> 'int' lvalue Var 0x1f687ea6078 'place' 'int'
|   |     |   `-ParenExpr 0x1f687ea3778 <col:38, col:56> 'int'
|   |     |     `-ConditionalOperator 0x1f687ea3748 <col:39, col:55> 'int'
|   |     |       |-ImplicitCastExpr 0x1f687ea3730 <col:39> 'int' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x1f687ea36c0 <col:39> 'int' lvalue Var 0x1f687ea5cd8 'signvalue' 'int'
|   |     |       |-IntegerLiteral 0x1f687ea36e0 <col:51> 'int' 1
|   |     |       `-IntegerLiteral 0x1f687ea3708 <col:55> 'int' 0
|   |     `-CallExpr 0x1f687ea3850 <col:60, col:73> 'unsigned long long'
|   |       |-ImplicitCastExpr 0x1f687ea3838 <col:60> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1f687ea37b8 <col:60> 'unsigned long long (const char *)' Function 0x1f687db5e10 'strlen' 'unsigned long long (const char *)'
|   |       `-ImplicitCastExpr 0x1f687ea3878 <col:67> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f687ea37d8 <col:67> 'const char *' lvalue Var 0x1f687ea5d98 'prefix' 'const char *'
|   |-IfStmt 0x1f687ea39e8 <line:462:5, line:463:19>
|   | |-BinaryOperator 0x1f687ea3960 <line:462:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687ea3948 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea3900 <col:9> 'int' lvalue Var 0x1f687ea11b8 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1f687ea3920 <col:19> 'int' 0
|   | `-BinaryOperator 0x1f687ea39c8 <line:463:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1f687ea3980 <col:9> 'int' lvalue Var 0x1f687ea11b8 'zpadlen' 'int'
|   |   `-IntegerLiteral 0x1f687ea39a0 <col:19> 'int' 0
|   |-IfStmt 0x1f687ea3ae8 <line:464:5, line:465:19>
|   | |-BinaryOperator 0x1f687ea3a60 <line:464:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687ea3a48 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea3a00 <col:9> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1f687ea3a20 <col:19> 'int' 0
|   | `-BinaryOperator 0x1f687ea3ac8 <line:465:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1f687ea3a80 <col:9> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   |   `-IntegerLiteral 0x1f687ea3aa0 <col:19> 'int' 0
|   |-IfStmt 0x1f687ea3e20 <line:466:5, line:469:5>
|   | |-BinaryOperator 0x1f687ea3bc8 <line:466:9, line:61:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f687ea3bb0 <line:466:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea3b00 <col:9> 'int' lvalue ParmVar 0x1f687ea5ae8 'flags' 'int'
|   | | `-ParenExpr 0x1f687ea3b90 <line:61:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f687ea3b70 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f687ea3b20 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f687ea3b48 <col:31> 'int' 4
|   | `-CompoundStmt 0x1f687ea3e00 <line:466:28, line:469:5>
|   |   |-BinaryOperator 0x1f687ea3d78 <line:467:9, line:80:40> 'int' '='
|   |   | |-DeclRefExpr 0x1f687ea3be8 <line:467:9> 'int' lvalue Var 0x1f687ea11b8 'zpadlen' 'int'
|   |   | `-ParenExpr 0x1f687ea3d58 <line:80:23, col:40> 'int'
|   |   |   `-ConditionalOperator 0x1f687ea3d28 <col:24, line:467:37> 'int'
|   |   |     |-ParenExpr 0x1f687ea3c98 <line:80:24, col:31> 'int'
|   |   |     | `-BinaryOperator 0x1f687ea3c78 <line:467:28, col:37> 'int' '>='
|   |   |     |   |-ImplicitCastExpr 0x1f687ea3c48 <col:28> 'int' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1f687ea3c08 <col:28> 'int' lvalue Var 0x1f687ea11b8 'zpadlen' 'int'
|   |   |     |   `-ImplicitCastExpr 0x1f687ea3c60 <col:37> 'int' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f687ea3c28 <col:37> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   |   |     |-ImplicitCastExpr 0x1f687ea3cf8 <col:28> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1f687ea3cb8 <col:28> 'int' lvalue Var 0x1f687ea11b8 'zpadlen' 'int'
|   |   |     `-ImplicitCastExpr 0x1f687ea3d10 <col:37> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1f687ea3cd8 <col:37> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   |   `-BinaryOperator 0x1f687ea3de0 <line:468:9, col:19> 'int' '='
|   |     |-DeclRefExpr 0x1f687ea3d98 <col:9> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   |     `-IntegerLiteral 0x1f687ea3db8 <col:19> 'int' 0
|   |-IfStmt 0x1f687ea3fb0 <line:470:5, line:471:20>
|   | |-BinaryOperator 0x1f687ea3f00 <line:470:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f687ea3ee8 <line:470:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea3e38 <col:9> 'int' lvalue ParmVar 0x1f687ea5ae8 'flags' 'int'
|   | | `-ParenExpr 0x1f687ea3ec8 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f687ea3ea8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f687ea3e58 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f687ea3e80 <col:31> 'int' 0
|   | `-BinaryOperator 0x1f687ea3f90 <line:471:9, col:20> 'int' '='
|   |   |-DeclRefExpr 0x1f687ea3f20 <col:9> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   |   `-UnaryOperator 0x1f687ea3f78 <col:19, col:20> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1f687ea3f60 <col:20> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f687ea3f40 <col:20> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   |-WhileStmt 0x1f687ea9348 <line:474:5, line:478:5>
|   | |-BinaryOperator 0x1f687ea4028 <line:474:12, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f687ea4010 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea3fc8 <col:12> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1f687ea3fe8 <col:22> 'int' 0
|   | `-CompoundStmt 0x1f687ea9328 <col:25, line:478:5>
|   |   |-IfStmt 0x1f687ea92d8 <line:475:9, line:476:20>
|   |   | |-UnaryOperator 0x1f687ea9288 <line:475:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687ea91e0 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687ea91c8 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687ea4048 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9228 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea4068 <col:25> 'char **' lvalue ParmVar 0x1f687ea56f8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9240 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea40a0 <col:34> 'char **' lvalue ParmVar 0x1f687ea5778 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9258 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea40d8 <col:42> 'size_t *' lvalue ParmVar 0x1f687ea57f0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9270 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea9178 <col:51> 'size_t *' lvalue ParmVar 0x1f687ea5868 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f687ea91b0 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1f687ea92c8 <line:476:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687ea92a0 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f687ea9310 <line:477:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1f687ea92f0 <col:11> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   |-IfStmt 0x1f687ea9598 <line:481:5, line:483:20>
|   | |-ImplicitCastExpr 0x1f687ea9380 <line:481:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f687ea9360 <col:9> 'int' lvalue Var 0x1f687ea5cd8 'signvalue' 'int'
|   | `-IfStmt 0x1f687ea9580 <line:482:9, line:483:20>
|   |   |-UnaryOperator 0x1f687ea9530 <line:482:12, col:68> 'int' prefix '!' cannot overflow
|   |   | `-CallExpr 0x1f687ea9470 <col:13, col:68> 'int'
|   |   |   |-ImplicitCastExpr 0x1f687ea9458 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1f687ea9398 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |   |-ImplicitCastExpr 0x1f687ea94b8 <col:25> 'char **' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f687ea93b8 <col:25> 'char **' lvalue ParmVar 0x1f687ea56f8 'sbuffer' 'char **'
|   |   |   |-ImplicitCastExpr 0x1f687ea94d0 <col:34> 'char **' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f687ea93d8 <col:34> 'char **' lvalue ParmVar 0x1f687ea5778 'buffer' 'char **'
|   |   |   |-ImplicitCastExpr 0x1f687ea94e8 <col:42> 'size_t *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f687ea93f8 <col:42> 'size_t *' lvalue ParmVar 0x1f687ea57f0 'currlen' 'size_t *'
|   |   |   |-ImplicitCastExpr 0x1f687ea9500 <col:51> 'size_t *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f687ea9418 <col:51> 'size_t *' lvalue ParmVar 0x1f687ea5868 'maxlen' 'size_t *'
|   |   |   `-ImplicitCastExpr 0x1f687ea9518 <col:59> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f687ea9438 <col:59> 'int' lvalue Var 0x1f687ea5cd8 'signvalue' 'int'
|   |   `-ReturnStmt 0x1f687ea9570 <line:483:13, col:20>
|   |     `-IntegerLiteral 0x1f687ea9548 <col:20> 'int' 0
|   |-WhileStmt 0x1f687ea98b8 <line:486:5, line:490:5>
|   | |-ImplicitCastExpr 0x1f687ea9600 <line:486:12, col:13> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x1f687ea95e8 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x1f687ea95d0 <col:13> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1f687ea95b0 <col:13> 'const char *' lvalue Var 0x1f687ea5d98 'prefix' 'const char *'
|   | `-CompoundStmt 0x1f687ea9898 <col:21, line:490:5>
|   |   |-IfStmt 0x1f687ea9848 <line:487:9, line:488:20>
|   |   | |-UnaryOperator 0x1f687ea97f8 <line:487:12, col:66> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687ea9720 <col:13, col:66> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9708 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687ea9618 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9768 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea9638 <col:25> 'char **' lvalue ParmVar 0x1f687ea56f8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9780 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea9658 <col:34> 'char **' lvalue ParmVar 0x1f687ea5778 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9798 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea9678 <col:42> 'size_t *' lvalue ParmVar 0x1f687ea57f0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687ea97b0 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea9698 <col:51> 'size_t *' lvalue ParmVar 0x1f687ea5868 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1f687ea97e0 <col:59, col:60> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1f687ea97c8 <col:59, col:60> 'char' <LValueToRValue>
|   |   | |       `-UnaryOperator 0x1f687ea96f0 <col:59, col:60> 'const char' lvalue prefix '*' cannot overflow
|   |   | |         `-ImplicitCastExpr 0x1f687ea96d8 <col:60> 'const char *' <LValueToRValue>
|   |   | |           `-DeclRefExpr 0x1f687ea96b8 <col:60> 'const char *' lvalue Var 0x1f687ea5d98 'prefix' 'const char *'
|   |   | `-ReturnStmt 0x1f687ea9838 <line:488:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687ea9810 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f687ea9880 <line:489:9, col:15> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x1f687ea9860 <col:9> 'const char *' lvalue Var 0x1f687ea5d98 'prefix' 'const char *'
|   |-IfStmt 0x1f687ea9c38 <line:493:5, line:499:5>
|   | |-BinaryOperator 0x1f687ea9930 <line:493:9, col:19> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f687ea9918 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea98d0 <col:9> 'int' lvalue Var 0x1f687ea11b8 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1f687ea98f0 <col:19> 'int' 0
|   | `-CompoundStmt 0x1f687ea9c20 <col:22, line:499:5>
|   |   `-WhileStmt 0x1f687ea9c08 <line:494:9, line:498:9>
|   |     |-BinaryOperator 0x1f687ea99b0 <line:494:16, col:26> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1f687ea9998 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f687ea9950 <col:16> 'int' lvalue Var 0x1f687ea11b8 'zpadlen' 'int'
|   |     | `-IntegerLiteral 0x1f687ea9970 <col:26> 'int' 0
|   |     `-CompoundStmt 0x1f687ea9be8 <col:29, line:498:9>
|   |       |-IfStmt 0x1f687ea9b98 <line:495:13, line:496:24>
|   |       | |-UnaryOperator 0x1f687ea9b48 <line:495:16, col:66> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x1f687ea9aa0 <col:17, col:66> 'int'
|   |       | |   |-ImplicitCastExpr 0x1f687ea9a88 <col:17> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1f687ea99d0 <col:17> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       | |   |-ImplicitCastExpr 0x1f687ea9ae8 <col:29> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f687ea99f0 <col:29> 'char **' lvalue ParmVar 0x1f687ea56f8 'sbuffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1f687ea9b00 <col:38> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f687ea9a10 <col:38> 'char **' lvalue ParmVar 0x1f687ea5778 'buffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1f687ea9b18 <col:46> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f687ea9a30 <col:46> 'size_t *' lvalue ParmVar 0x1f687ea57f0 'currlen' 'size_t *'
|   |       | |   |-ImplicitCastExpr 0x1f687ea9b30 <col:55> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f687ea9a50 <col:55> 'size_t *' lvalue ParmVar 0x1f687ea5868 'maxlen' 'size_t *'
|   |       | |   `-CharacterLiteral 0x1f687ea9a70 <col:63> 'int' 48
|   |       | `-ReturnStmt 0x1f687ea9b88 <line:496:17, col:24>
|   |       |   `-IntegerLiteral 0x1f687ea9b60 <col:24> 'int' 0
|   |       `-UnaryOperator 0x1f687ea9bd0 <line:497:13, col:15> 'int' prefix '--'
|   |         `-DeclRefExpr 0x1f687ea9bb0 <col:15> 'int' lvalue Var 0x1f687ea11b8 'zpadlen' 'int'
|   |-WhileStmt 0x1f687ea9e28 <line:501:5, line:504:5>
|   | |-BinaryOperator 0x1f687ea9cb0 <line:501:12, col:20> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f687ea9c98 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea9c50 <col:12> 'int' lvalue Var 0x1f687ea6078 'place' 'int'
|   | | `-IntegerLiteral 0x1f687ea9c70 <col:20> 'int' 0
|   | `-CompoundStmt 0x1f687ea9e10 <col:23, line:504:5>
|   |   `-IfStmt 0x1f687ea9df8 <line:502:9, line:503:20>
|   |     |-OpaqueValueExpr 0x1f687ea9de0 <<invalid sloc>> '_Bool'
|   |     `-ReturnStmt 0x1f687ea9dd0 <col:13, col:20>
|   |       `-IntegerLiteral 0x1f687ea9da8 <col:20> 'int' 0
|   |-WhileStmt 0x1f687eaa0f8 <line:507:5, line:511:5>
|   | |-BinaryOperator 0x1f687ea9ea0 <line:507:12, col:22> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687ea9e88 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea9e40 <col:12> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1f687ea9e60 <col:22> 'int' 0
|   | `-CompoundStmt 0x1f687eaa0d8 <col:25, line:511:5>
|   |   |-IfStmt 0x1f687eaa088 <line:508:9, line:509:20>
|   |   | |-UnaryOperator 0x1f687eaa038 <line:508:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687ea9f90 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9f78 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687ea9ec0 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9fd8 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea9ee0 <col:26> 'char **' lvalue ParmVar 0x1f687ea56f8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687ea9ff0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea9f00 <col:35> 'char **' lvalue ParmVar 0x1f687ea5778 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687eaa008 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea9f20 <col:43> 'size_t *' lvalue ParmVar 0x1f687ea57f0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687eaa020 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687ea9f40 <col:52> 'size_t *' lvalue ParmVar 0x1f687ea5868 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f687ea9f60 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1f687eaa078 <line:509:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687eaa050 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f687eaa0c0 <line:510:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1f687eaa0a0 <col:11> 'int' lvalue Var 0x1f687ea10f8 'spadlen' 'int'
|   `-ReturnStmt 0x1f687eaa138 <line:512:5, col:12>
|     `-IntegerLiteral 0x1f687eaa110 <col:12> 'int' 1
|-FunctionDecl 0x1f687ea42e0 <line:515:1, line:521:1> line:515:16 used abs_val 'double (double)' static
| |-ParmVarDecl 0x1f687ea4200 <line:27:18, line:515:32> col:32 used value 'double'
| `-CompoundStmt 0x1f687ea4610 <line:516:1, line:521:1>
|   |-DeclStmt 0x1f687ea4458 <line:27:18, line:517:27>
|   | `-VarDecl 0x1f687ea43b8 <line:27:18, line:517:22> col:13 used result 'double' cinit
|   |   `-ImplicitCastExpr 0x1f687ea4440 <col:22> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f687ea4420 <col:22> 'double' lvalue ParmVar 0x1f687ea4200 'value' 'double'
|   |-IfStmt 0x1f687ea45b0 <line:518:5, line:519:19>
|   | |-BinaryOperator 0x1f687ea44e8 <line:518:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687ea44b8 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea4470 <col:9> 'double' lvalue ParmVar 0x1f687ea4200 'value' 'double'
|   | | `-ImplicitCastExpr 0x1f687ea44d0 <col:17> 'double' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x1f687ea4490 <col:17> 'int' 0
|   | `-BinaryOperator 0x1f687ea4590 <line:519:9, col:19> 'double' '='
|   |   |-DeclRefExpr 0x1f687ea4508 <col:9> 'double' lvalue Var 0x1f687ea43b8 'result' 'double'
|   |   `-UnaryOperator 0x1f687ea4578 <col:18, col:19> 'double' prefix '-'
|   |     `-ImplicitCastExpr 0x1f687ea4560 <col:19> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f687ea4540 <col:19> 'double' lvalue ParmVar 0x1f687ea4200 'value' 'double'
|   `-ReturnStmt 0x1f687ea4600 <line:520:5, col:12>
|     `-ImplicitCastExpr 0x1f687ea45e8 <col:12> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x1f687ea45c8 <col:12> 'double' lvalue Var 0x1f687ea43b8 'result' 'double'
|-FunctionDecl 0x1f687ea4730 <line:523:1, line:531:1> line:523:16 used pow_10 'double (int)' static
| |-ParmVarDecl 0x1f687ea4650 <col:23, col:27> col:27 used in_exp 'int'
| `-CompoundStmt 0x1f687ea4a60 <line:524:1, line:531:1>
|   |-DeclStmt 0x1f687ea48b0 <line:27:18, line:525:23>
|   | `-VarDecl 0x1f687ea4808 <line:27:18, line:525:22> col:13 used result 'double' cinit
|   |   `-ImplicitCastExpr 0x1f687ea4898 <col:22> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x1f687ea4870 <col:22> 'int' 1
|   |-WhileStmt 0x1f687ea4a00 <line:526:5, line:529:5>
|   | |-ImplicitCastExpr 0x1f687ea48e8 <line:526:12> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f687ea48c8 <col:12> 'int' lvalue ParmVar 0x1f687ea4650 'in_exp' 'int'
|   | `-CompoundStmt 0x1f687ea49e0 <col:20, line:529:5>
|   |   |-CompoundAssignOperator 0x1f687ea4978 <line:527:9, col:19> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-DeclRefExpr 0x1f687ea4900 <col:9> 'double' lvalue Var 0x1f687ea4808 'result' 'double'
|   |   | `-ImplicitCastExpr 0x1f687ea4960 <col:19> 'double' <IntegralToFloating>
|   |   |   `-IntegerLiteral 0x1f687ea4938 <col:19> 'int' 10
|   |   `-UnaryOperator 0x1f687ea49c8 <line:528:9, col:15> 'int' postfix '--'
|   |     `-DeclRefExpr 0x1f687ea49a8 <col:9> 'int' lvalue ParmVar 0x1f687ea4650 'in_exp' 'int'
|   `-ReturnStmt 0x1f687ea4a50 <line:530:5, col:12>
|     `-ImplicitCastExpr 0x1f687ea4a38 <col:12> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x1f687ea4a18 <col:12> 'double' lvalue Var 0x1f687ea4808 'result' 'double'
|-FunctionDecl 0x1f687ea4b80 <line:533:1, line:541:1> line:533:13 used roundv 'long (double)' static
| |-ParmVarDecl 0x1f687ea4aa0 <line:27:18, line:533:28> col:28 used value 'double'
| `-CompoundStmt 0x1f687ea4fa8 <line:534:1, line:541:1>
|   |-DeclStmt 0x1f687ea4cc0 <line:535:5, col:17>
|   | `-VarDecl 0x1f687ea4c58 <col:5, col:10> col:10 used intpart 'long'
|   |-BinaryOperator 0x1f687ea4d88 <line:536:5, col:21> 'long' '='
|   | |-DeclRefExpr 0x1f687ea4cd8 <col:5> 'long' lvalue Var 0x1f687ea4c58 'intpart' 'long'
|   | `-CStyleCastExpr 0x1f687ea4d60 <col:15, col:21> 'long' <FloatingToIntegral>
|   |   `-ImplicitCastExpr 0x1f687ea4d48 <col:21> 'double' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x1f687ea4d10 <col:21> 'double' lvalue ParmVar 0x1f687ea4aa0 'value' 'double'
|   |-BinaryOperator 0x1f687ea4e70 <line:537:5, col:21> 'double' '='
|   | |-DeclRefExpr 0x1f687ea4da8 <col:5> 'double' lvalue ParmVar 0x1f687ea4aa0 'value' 'double'
|   | `-BinaryOperator 0x1f687ea4e50 <col:13, col:21> 'double' '-'
|   |   |-ImplicitCastExpr 0x1f687ea4e08 <col:13> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687ea4dc8 <col:13> 'double' lvalue ParmVar 0x1f687ea4aa0 'value' 'double'
|   |   `-ImplicitCastExpr 0x1f687ea4e38 <col:21> 'double' <IntegralToFloating>
|   |     `-ImplicitCastExpr 0x1f687ea4e20 <col:21> 'long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f687ea4de8 <col:21> 'long' lvalue Var 0x1f687ea4c58 'intpart' 'long'
|   |-IfStmt 0x1f687ea4f48 <line:538:5, line:539:16>
|   | |-BinaryOperator 0x1f687ea4ef0 <line:538:9, col:18> 'int' '>='
|   | | |-ImplicitCastExpr 0x1f687ea4ed8 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687ea4e90 <col:9> 'double' lvalue ParmVar 0x1f687ea4aa0 'value' 'double'
|   | | `-FloatingLiteral 0x1f687ea4eb0 <col:18> 'double' 5.000000e-01
|   | `-UnaryOperator 0x1f687ea4f30 <line:539:9, col:16> 'long' postfix '++'
|   |   `-DeclRefExpr 0x1f687ea4f10 <col:9> 'long' lvalue Var 0x1f687ea4c58 'intpart' 'long'
|   `-ReturnStmt 0x1f687ea4f98 <line:540:5, col:12>
|     `-ImplicitCastExpr 0x1f687ea4f80 <col:12> 'long' <LValueToRValue>
|       `-DeclRefExpr 0x1f687ea4f60 <col:12> 'long' lvalue Var 0x1f687ea4c58 'intpart' 'long'
|-FunctionDecl 0x1f687e03408 prev 0x1f687de5a10 <line:543:1, line:800:1> line:544:1 used fmtfp 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' static
| |-ParmVarDecl 0x1f687ea4ff8 <col:7, col:14> col:14 used sbuffer 'char **'
| |-ParmVarDecl 0x1f687ea5078 <line:545:7, col:14> col:14 used buffer 'char **'
| |-ParmVarDecl 0x1f687e02f60 <line:546:7, col:15> col:15 used currlen 'size_t *'
| |-ParmVarDecl 0x1f687e02fd8 <line:547:7, col:15> col:15 used maxlen 'size_t *'
| |-ParmVarDecl 0x1f687e03058 <line:27:18, line:547:31> col:31 used fvalue 'double'
| |-ParmVarDecl 0x1f687e030d8 <col:39, col:43> col:43 used min 'int'
| |-ParmVarDecl 0x1f687e03158 <col:48, col:52> col:52 used max 'int'
| |-ParmVarDecl 0x1f687e031d8 <col:57, col:61> col:61 used flags 'int'
| |-ParmVarDecl 0x1f687e03258 <col:68, col:72> col:72 used style 'int'
| `-CompoundStmt 0x1f687d59408 <line:548:1, line:800:1>
|   |-DeclStmt 0x1f687e03598 <line:549:5, col:22>
|   | `-VarDecl 0x1f687e03508 <col:5, col:21> col:9 used signvalue 'int' cinit
|   |   `-IntegerLiteral 0x1f687e03570 <col:21> 'int' 0
|   |-DeclStmt 0x1f687e03630 <line:27:18, line:550:20>
|   | `-VarDecl 0x1f687e035c8 <line:27:18, line:550:13> col:13 used ufvalue 'double'
|   |-DeclStmt 0x1f687e036c8 <line:27:18, line:551:21>
|   | `-VarDecl 0x1f687e03660 <line:27:18, line:551:13> col:13 used tmpvalue 'double'
|   |-DeclStmt 0x1f687e037e0 <line:552:5, col:22>
|   | `-VarDecl 0x1f687e03778 <col:5, col:21> col:10 used iconvert 'char [20]'
|   |-DeclStmt 0x1f687e038c0 <line:553:5, col:22>
|   | `-VarDecl 0x1f687e03858 <col:5, col:21> col:10 used fconvert 'char [20]'
|   |-DeclStmt 0x1f687e039a0 <line:554:5, col:22>
|   | `-VarDecl 0x1f687e03938 <col:5, col:21> col:10 used econvert 'char [20]'
|   |-DeclStmt 0x1f687e03a60 <line:555:5, col:19>
|   | `-VarDecl 0x1f687e039d0 <col:5, col:18> col:9 used iplace 'int' cinit
|   |   `-IntegerLiteral 0x1f687e03a38 <col:18> 'int' 0
|   |-DeclStmt 0x1f687e03b20 <line:556:5, col:19>
|   | `-VarDecl 0x1f687e03a90 <col:5, col:18> col:9 used fplace 'int' cinit
|   |   `-IntegerLiteral 0x1f687e03af8 <col:18> 'int' 0
|   |-DeclStmt 0x1f687e03be0 <line:557:5, col:19>
|   | `-VarDecl 0x1f687e03b50 <col:5, col:18> col:9 used eplace 'int' cinit
|   |   `-IntegerLiteral 0x1f687e03bb8 <col:18> 'int' 0
|   |-DeclStmt 0x1f687e03ca0 <line:558:5, col:19>
|   | `-VarDecl 0x1f687e03c10 <col:5, col:18> col:9 used padlen 'int' cinit
|   |   `-IntegerLiteral 0x1f687e03c78 <col:18> 'int' 0
|   |-DeclStmt 0x1f687e03d60 <line:559:5, col:20>
|   | `-VarDecl 0x1f687e03cd0 <col:5, col:19> col:9 used zpadlen 'int' cinit
|   |   `-IntegerLiteral 0x1f687e03d38 <col:19> 'int' 0
|   |-DeclStmt 0x1f687e03e38 <line:560:5, col:17>
|   | `-VarDecl 0x1f687e03d90 <col:5, col:16> col:10 used exp 'long' cinit
|   |   `-ImplicitCastExpr 0x1f687e03e20 <col:16> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x1f687e03df8 <col:16> 'int' 0
|   |-DeclStmt 0x1f687e03ed0 <line:561:5, col:26>
|   | `-VarDecl 0x1f687e03e68 <col:5, col:19> col:19 used intpart 'unsigned long'
|   |-DeclStmt 0x1f687e03f68 <line:562:5, col:27>
|   | `-VarDecl 0x1f687e03f00 <col:5, col:19> col:19 used fracpart 'unsigned long'
|   |-DeclStmt 0x1f687e04000 <line:563:5, col:24>
|   | `-VarDecl 0x1f687e03f98 <col:5, col:19> col:19 used max10 'unsigned long'
|   |-DeclStmt 0x1f687e04098 <line:564:5, col:18>
|   | `-VarDecl 0x1f687e04030 <col:5, col:9> col:9 used realstyle 'int'
|   |-IfStmt 0x1f687e04198 <line:566:5, line:567:15>
|   | |-BinaryOperator 0x1f687e04110 <line:566:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687e040f8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687e040b0 <col:9> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   | | `-IntegerLiteral 0x1f687e040d0 <col:15> 'int' 0
|   | `-BinaryOperator 0x1f687e04178 <line:567:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1f687e04130 <col:9> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   `-IntegerLiteral 0x1f687e04150 <col:15> 'int' 6
|   |-IfStmt 0x1f687e04578 <line:569:5, line:574:21> has_else
|   | |-BinaryOperator 0x1f687e04228 <line:569:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687e041f8 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687e041b0 <col:9> 'double' lvalue ParmVar 0x1f687e03058 'fvalue' 'double'
|   | | `-ImplicitCastExpr 0x1f687e04210 <col:18> 'double' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x1f687e041d0 <col:18> 'int' 0
|   | |-BinaryOperator 0x1f687e04298 <line:570:9, col:21> 'int' '='
|   | | |-DeclRefExpr 0x1f687e04248 <col:9> 'int' lvalue Var 0x1f687e03508 'signvalue' 'int'
|   | | `-CharacterLiteral 0x1f687e04280 <col:21> 'int' 45
|   | `-IfStmt 0x1f687e04550 <line:571:10, line:574:21> has_else
|   |   |-BinaryOperator 0x1f687e04380 <line:571:14, line:55:32> 'int' '&'
|   |   | |-ImplicitCastExpr 0x1f687e04368 <line:571:14> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1f687e042b8 <col:14> 'int' lvalue ParmVar 0x1f687e031d8 'flags' 'int'
|   |   | `-ParenExpr 0x1f687e04348 <line:55:25, col:32> 'int'
|   |   |   `-BinaryOperator 0x1f687e04328 <col:26, col:31> 'int' '<<'
|   |   |     |-IntegerLiteral 0x1f687e042d8 <col:26> 'int' 1
|   |   |     `-IntegerLiteral 0x1f687e04300 <col:31> 'int' 1
|   |   |-BinaryOperator 0x1f687e043d8 <line:572:9, col:21> 'int' '='
|   |   | |-DeclRefExpr 0x1f687e043a0 <col:9> 'int' lvalue Var 0x1f687e03508 'signvalue' 'int'
|   |   | `-CharacterLiteral 0x1f687e043c0 <col:21> 'int' 43
|   |   `-IfStmt 0x1f687e04538 <line:573:10, line:574:21>
|   |     |-BinaryOperator 0x1f687e044c0 <line:573:14, line:57:32> 'int' '&'
|   |     | |-ImplicitCastExpr 0x1f687e044a8 <line:573:14> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f687e043f8 <col:14> 'int' lvalue ParmVar 0x1f687e031d8 'flags' 'int'
|   |     | `-ParenExpr 0x1f687e04488 <line:57:25, col:32> 'int'
|   |     |   `-BinaryOperator 0x1f687e04468 <col:26, col:31> 'int' '<<'
|   |     |     |-IntegerLiteral 0x1f687e04418 <col:26> 'int' 1
|   |     |     `-IntegerLiteral 0x1f687e04440 <col:31> 'int' 2
|   |     `-BinaryOperator 0x1f687e04518 <line:574:9, col:21> 'int' '='
|   |       |-DeclRefExpr 0x1f687e044e0 <col:9> 'int' lvalue Var 0x1f687e03508 'signvalue' 'int'
|   |       `-CharacterLiteral 0x1f687e04500 <col:21> 'int' 32
|   |-IfStmt 0x1f687e04da8 <line:581:5, line:594:5> has_else
|   | |-BinaryOperator 0x1f687e04600 <line:581:9, line:76:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f687e045e8 <line:581:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687e045a0 <col:9> 'int' lvalue ParmVar 0x1f687e03258 'style' 'int'
|   | | `-IntegerLiteral 0x1f687e045c0 <line:76:25> 'int' 2
|   | |-CompoundStmt 0x1f687e04d00 <line:581:28, line:592:5>
|   | | `-IfStmt 0x1f687e04cd8 <line:582:9, line:591:9> has_else
|   | |   |-BinaryOperator 0x1f687e04680 <line:582:13, col:23> 'int' '=='
|   | |   | |-ImplicitCastExpr 0x1f687e04668 <col:13> 'double' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x1f687e04620 <col:13> 'double' lvalue ParmVar 0x1f687e03058 'fvalue' 'double'
|   | |   | `-FloatingLiteral 0x1f687e04640 <col:23> 'double' 0.000000e+00
|   | |   |-CompoundStmt 0x1f687e04720 <col:28, line:584:9>
|   | |   | `-BinaryOperator 0x1f687e04700 <line:583:13, line:74:25> 'int' '='
|   | |   |   |-DeclRefExpr 0x1f687e046a0 <line:583:13> 'int' lvalue Var 0x1f687e04030 'realstyle' 'int'
|   | |   |   `-IntegerLiteral 0x1f687e046d8 <line:74:25> 'int' 0
|   | |   `-IfStmt 0x1f687e04cb0 <line:584:16, line:591:9> has_else
|   | |     |-BinaryOperator 0x1f687e04798 <line:584:20, col:29> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1f687e04780 <col:20> 'double' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1f687e04738 <col:20> 'double' lvalue ParmVar 0x1f687e03058 'fvalue' 'double'
|   | |     | `-FloatingLiteral 0x1f687e04758 <col:29> 'double' 1.000000e-04
|   | |     |-CompoundStmt 0x1f687e04820 <col:37, line:586:9>
|   | |     | `-BinaryOperator 0x1f687e04800 <line:585:13, line:75:25> 'int' '='
|   | |     |   |-DeclRefExpr 0x1f687e047b8 <line:585:13> 'int' lvalue Var 0x1f687e04030 'realstyle' 'int'
|   | |     |   `-IntegerLiteral 0x1f687e047d8 <line:75:25> 'int' 1
|   | |     `-IfStmt 0x1f687e04c88 <line:586:16, line:591:9> has_else
|   | |       |-BinaryOperator 0x1f687e04b68 <line:586:20, line:587:57> 'int' '||'
|   | |       | |-ParenExpr 0x1f687e04970 <line:586:20, col:45> 'int'
|   | |       | | `-BinaryOperator 0x1f687e04950 <col:21, col:43> 'int' '&&'
|   | |       | |   |-BinaryOperator 0x1f687e04898 <col:21, col:28> 'int' '=='
|   | |       | |   | |-ImplicitCastExpr 0x1f687e04880 <col:21> 'int' <LValueToRValue>
|   | |       | |   | | `-DeclRefExpr 0x1f687e04838 <col:21> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   | |       | |   | `-IntegerLiteral 0x1f687e04858 <col:28> 'int' 0
|   | |       | |   `-BinaryOperator 0x1f687e04930 <col:33, col:43> 'int' '>='
|   | |       | |     |-ImplicitCastExpr 0x1f687e04900 <col:33> 'double' <LValueToRValue>
|   | |       | |     | `-DeclRefExpr 0x1f687e048b8 <col:33> 'double' lvalue ParmVar 0x1f687e03058 'fvalue' 'double'
|   | |       | |     `-ImplicitCastExpr 0x1f687e04918 <col:43> 'double' <IntegralToFloating>
|   | |       | |       `-IntegerLiteral 0x1f687e048d8 <col:43> 'int' 10
|   | |       | `-ParenExpr 0x1f687e04b48 <line:587:24, col:57> 'int'
|   | |       |   `-BinaryOperator 0x1f687e04b28 <col:25, col:56> 'int' '&&'
|   | |       |     |-BinaryOperator 0x1f687e049f0 <col:25, col:31> 'int' '>'
|   | |       |     | |-ImplicitCastExpr 0x1f687e049d8 <col:25> 'int' <LValueToRValue>
|   | |       |     | | `-DeclRefExpr 0x1f687e04990 <col:25> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   | |       |     | `-IntegerLiteral 0x1f687e049b0 <col:31> 'int' 0
|   | |       |     `-BinaryOperator 0x1f687e04b08 <col:36, col:56> 'int' '>='
|   | |       |       |-ImplicitCastExpr 0x1f687e04af0 <col:36> 'double' <LValueToRValue>
|   | |       |       | `-DeclRefExpr 0x1f687e04a10 <col:36> 'double' lvalue ParmVar 0x1f687e03058 'fvalue' 'double'
|   | |       |       `-CallExpr 0x1f687e04ab0 <col:46, col:56> 'double'
|   | |       |         |-ImplicitCastExpr 0x1f687e04a98 <col:46> 'double (*)(int)' <FunctionToPointerDecay>
|   | |       |         | `-DeclRefExpr 0x1f687e04a30 <col:46> 'double (int)' Function 0x1f687ea4730 'pow_10' 'double (int)'
|   | |       |         `-ImplicitCastExpr 0x1f687e04ad8 <col:53> 'int' <LValueToRValue>
|   | |       |           `-DeclRefExpr 0x1f687e04a50 <col:53> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   | |       |-CompoundStmt 0x1f687e04bf0 <col:60, line:589:9>
|   | |       | `-BinaryOperator 0x1f687e04bd0 <line:588:13, line:75:25> 'int' '='
|   | |       |   |-DeclRefExpr 0x1f687e04b88 <line:588:13> 'int' lvalue Var 0x1f687e04030 'realstyle' 'int'
|   | |       |   `-IntegerLiteral 0x1f687e04ba8 <line:75:25> 'int' 1
|   | |       `-CompoundStmt 0x1f687e04c70 <line:589:16, line:591:9>
|   | |         `-BinaryOperator 0x1f687e04c50 <line:590:13, line:74:25> 'int' '='
|   | |           |-DeclRefExpr 0x1f687e04c08 <line:590:13> 'int' lvalue Var 0x1f687e04030 'realstyle' 'int'
|   | |           `-IntegerLiteral 0x1f687e04c28 <line:74:25> 'int' 0
|   | `-CompoundStmt 0x1f687e04d90 <line:592:12, line:594:5>
|   |   `-BinaryOperator 0x1f687e04d70 <line:593:9, col:21> 'int' '='
|   |     |-DeclRefExpr 0x1f687e04d18 <col:9> 'int' lvalue Var 0x1f687e04030 'realstyle' 'int'
|   |     `-ImplicitCastExpr 0x1f687e04d58 <col:21> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f687e04d38 <col:21> 'int' lvalue ParmVar 0x1f687e03258 'style' 'int'
|   |-IfStmt 0x1f687e058f0 <line:596:5, line:636:5>
|   | |-BinaryOperator 0x1f687e04e30 <line:596:9, line:74:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x1f687e04e18 <line:596:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687e04dd0 <col:9> 'int' lvalue ParmVar 0x1f687e03258 'style' 'int'
|   | | `-IntegerLiteral 0x1f687e04df0 <line:74:25> 'int' 0
|   | `-CompoundStmt 0x1f687e058c0 <line:596:28, line:636:5>
|   |   |-BinaryOperator 0x1f687e04ec0 <line:597:9, col:20> 'double' '='
|   |   | |-DeclRefExpr 0x1f687e04e50 <col:9> 'double' lvalue Var 0x1f687e03660 'tmpvalue' 'double'
|   |   | `-ImplicitCastExpr 0x1f687e04ea8 <col:20> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1f687e04e88 <col:20> 'double' lvalue ParmVar 0x1f687e03058 'fvalue' 'double'
|   |   |-IfStmt 0x1f687e052d8 <line:599:9, line:608:9>
|   |   | |-BinaryOperator 0x1f687e04f40 <line:599:13, col:23> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x1f687e04f28 <col:13> 'double' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f687e04ee0 <col:13> 'double' lvalue ParmVar 0x1f687e03058 'fvalue' 'double'
|   |   | | `-FloatingLiteral 0x1f687e04f00 <col:23> 'double' 0.000000e+00
|   |   | `-CompoundStmt 0x1f687e052b8 <col:28, line:608:9>
|   |   |   |-WhileStmt 0x1f687e05108 <line:600:13, line:603:13>
|   |   |   | |-BinaryOperator 0x1f687e04fe8 <line:600:20, col:31> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x1f687e04fb8 <col:20> 'double' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1f687e04f70 <col:20> 'double' lvalue Var 0x1f687e03660 'tmpvalue' 'double'
|   |   |   | | `-ImplicitCastExpr 0x1f687e04fd0 <col:31> 'double' <IntegralToFloating>
|   |   |   | |   `-IntegerLiteral 0x1f687e04f90 <col:31> 'int' 1
|   |   |   | `-CompoundStmt 0x1f687e050e8 <col:34, line:603:13>
|   |   |   |   |-CompoundAssignOperator 0x1f687e05068 <line:601:17, col:29> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   |   |   | |-DeclRefExpr 0x1f687e05008 <col:17> 'double' lvalue Var 0x1f687e03660 'tmpvalue' 'double'
|   |   |   |   | `-ImplicitCastExpr 0x1f687e05050 <col:29> 'double' <IntegralToFloating>
|   |   |   |   |   `-IntegerLiteral 0x1f687e05028 <col:29> 'int' 10
|   |   |   |   `-UnaryOperator 0x1f687e050d0 <line:602:17, col:20> 'long' postfix '--'
|   |   |   |     `-DeclRefExpr 0x1f687e05098 <col:17> 'long' lvalue Var 0x1f687e03d90 'exp' 'long'
|   |   |   `-WhileStmt 0x1f687e052a0 <line:604:13, line:607:13>
|   |   |     |-BinaryOperator 0x1f687e05198 <line:604:20, col:31> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x1f687e05168 <col:20> 'double' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1f687e05120 <col:20> 'double' lvalue Var 0x1f687e03660 'tmpvalue' 'double'
|   |   |     | `-ImplicitCastExpr 0x1f687e05180 <col:31> 'double' <IntegralToFloating>
|   |   |     |   `-IntegerLiteral 0x1f687e05140 <col:31> 'int' 10
|   |   |     `-CompoundStmt 0x1f687e05280 <col:35, line:607:13>
|   |   |       |-CompoundAssignOperator 0x1f687e05218 <line:605:17, col:29> 'double' '/=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   |       | |-DeclRefExpr 0x1f687e051b8 <col:17> 'double' lvalue Var 0x1f687e03660 'tmpvalue' 'double'
|   |   |       | `-ImplicitCastExpr 0x1f687e05200 <col:29> 'double' <IntegralToFloating>
|   |   |       |   `-IntegerLiteral 0x1f687e051d8 <col:29> 'int' 10
|   |   |       `-UnaryOperator 0x1f687e05268 <line:606:17, col:20> 'long' postfix '++'
|   |   |         `-DeclRefExpr 0x1f687e05248 <col:17> 'long' lvalue Var 0x1f687e03d90 'exp' 'long'
|   |   |-IfStmt 0x1f687e05798 <line:609:9, line:633:9>
|   |   | |-BinaryOperator 0x1f687e05350 <line:609:13, line:76:25> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1f687e05338 <line:609:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f687e052f0 <col:13> 'int' lvalue ParmVar 0x1f687e03258 'style' 'int'
|   |   | | `-IntegerLiteral 0x1f687e05310 <line:76:25> 'int' 2
|   |   | `-CompoundStmt 0x1f687e05778 <line:609:32, line:633:9>
|   |   |   |-IfStmt 0x1f687e05458 <line:614:13, line:615:23>
|   |   |   | |-BinaryOperator 0x1f687e053d0 <line:614:17, col:24> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x1f687e053b8 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1f687e05370 <col:17> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   |   | | `-IntegerLiteral 0x1f687e05390 <col:24> 'int' 0
|   |   |   | `-BinaryOperator 0x1f687e05438 <line:615:17, col:23> 'int' '='
|   |   |   |   |-DeclRefExpr 0x1f687e053f0 <col:17> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   |   |   `-IntegerLiteral 0x1f687e05410 <col:23> 'int' 1
|   |   |   `-IfStmt 0x1f687e05750 <line:617:13, line:632:13> has_else
|   |   |     |-BinaryOperator 0x1f687e054d0 <line:617:17, line:74:25> 'int' '=='
|   |   |     | |-ImplicitCastExpr 0x1f687e054b8 <line:617:17> 'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1f687e05470 <col:17> 'int' lvalue Var 0x1f687e04030 'realstyle' 'int'
|   |   |     | `-IntegerLiteral 0x1f687e05490 <line:74:25> 'int' 0
|   |   |     |-CompoundStmt 0x1f687e056e0 <line:617:40, line:625:13>
|   |   |     | |-CompoundAssignOperator 0x1f687e055c8 <line:618:17, col:32> 'int' '-=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   |     | | |-DeclRefExpr 0x1f687e054f0 <col:17> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   |     | | `-ParenExpr 0x1f687e055a8 <col:24, col:32> 'long'
|   |   |     | |   `-BinaryOperator 0x1f687e05588 <col:25, col:31> 'long' '+'
|   |   |     | |     |-ImplicitCastExpr 0x1f687e05558 <col:25> 'long' <LValueToRValue>
|   |   |     | |     | `-DeclRefExpr 0x1f687e05510 <col:25> 'long' lvalue Var 0x1f687e03d90 'exp' 'long'
|   |   |     | |     `-ImplicitCastExpr 0x1f687e05570 <col:31> 'long' <IntegralCast>
|   |   |     | |       `-IntegerLiteral 0x1f687e05530 <col:31> 'int' 1
|   |   |     | `-IfStmt 0x1f687e056c8 <line:619:17, line:624:17>
|   |   |     |   |-BinaryOperator 0x1f687e05658 <line:619:21, col:27> 'int' '<'
|   |   |     |   | |-ImplicitCastExpr 0x1f687e05640 <col:21> 'int' <LValueToRValue>
|   |   |     |   | | `-DeclRefExpr 0x1f687e055f8 <col:21> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   |     |   | `-IntegerLiteral 0x1f687e05618 <col:27> 'int' 0
|   |   |     |   `-CompoundStmt 0x1f687e056b0 <col:30, line:624:17>
|   |   |     |     `-ReturnStmt 0x1f687e056a0 <line:623:21, col:28>
|   |   |     |       `-IntegerLiteral 0x1f687e05678 <col:28> 'int' 0
|   |   |     `-CompoundStmt 0x1f687e05738 <line:625:20, line:632:13>
|   |   |       `-UnaryOperator 0x1f687e05720 <line:631:17, col:20> 'int' postfix '--'
|   |   |         `-DeclRefExpr 0x1f687e05700 <col:17> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   `-IfStmt 0x1f687e058a8 <line:634:9, line:635:22>
|   |     |-BinaryOperator 0x1f687e05810 <line:634:13, line:75:25> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1f687e057f8 <line:634:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f687e057b0 <col:13> 'int' lvalue Var 0x1f687e04030 'realstyle' 'int'
|   |     | `-IntegerLiteral 0x1f687e057d0 <line:75:25> 'int' 1
|   |     `-BinaryOperator 0x1f687e05888 <line:635:13, col:22> 'double' '='
|   |       |-DeclRefExpr 0x1f687e05830 <col:13> 'double' lvalue ParmVar 0x1f687e03058 'fvalue' 'double'
|   |       `-ImplicitCastExpr 0x1f687e05870 <col:22> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f687e05850 <col:22> 'double' lvalue Var 0x1f687e03660 'tmpvalue' 'double'
|   |-BinaryOperator 0x1f687e05a00 <line:637:5, col:29> 'double' '='
|   | |-DeclRefExpr 0x1f687e05908 <col:5> 'double' lvalue Var 0x1f687e035c8 'ufvalue' 'double'
|   | `-CallExpr 0x1f687e059c0 <col:15, col:29> 'double'
|   |   |-ImplicitCastExpr 0x1f687e059a8 <col:15> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f687e05940 <col:15> 'double (double)' Function 0x1f687ea42e0 'abs_val' 'double (double)'
|   |   `-ImplicitCastExpr 0x1f687e059e8 <col:23> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f687e05960 <col:23> 'double' lvalue ParmVar 0x1f687e03058 'fvalue' 'double'
|   |-IfStmt 0x1f687e05aa8 <line:638:5, line:641:5>
|   | |-OpaqueValueExpr 0x1f687e05a90 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1f687e05a78 <line:638:30, line:641:5>
|   |   `-ReturnStmt 0x1f687e05a68 <line:640:9, col:16>
|   |     `-IntegerLiteral 0x1f687e05a40 <col:16> 'int' 0
|   |-BinaryOperator 0x1f687e05b70 <line:642:5, col:30> 'unsigned long' '='
|   | |-DeclRefExpr 0x1f687e05ac0 <col:5> 'unsigned long' lvalue Var 0x1f687e03e68 'intpart' 'unsigned long'
|   | `-CStyleCastExpr 0x1f687e05b48 <col:15, col:30> 'unsigned long' <FloatingToIntegral>
|   |   `-ImplicitCastExpr 0x1f687e05b30 <col:30> 'double' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x1f687e05af8 <col:30> 'double' lvalue Var 0x1f687e035c8 'ufvalue' 'double'
|   |-IfStmt 0x1f687e05c78 <line:648:5, line:649:15>
|   | |-BinaryOperator 0x1f687e05bf0 <line:648:9, col:15> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f687e05bd8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687e05b90 <col:9> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   | | `-IntegerLiteral 0x1f687e05bb0 <col:15> 'int' 9
|   | `-BinaryOperator 0x1f687e05c58 <line:649:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1f687e05c10 <col:9> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   `-IntegerLiteral 0x1f687e05c30 <col:15> 'int' 9
|   |-BinaryOperator 0x1f687e05e00 <line:655:5, col:31> 'unsigned long' '='
|   | |-DeclRefExpr 0x1f687e05c90 <col:5> 'unsigned long' lvalue Var 0x1f687e03f98 'max10' 'unsigned long'
|   | `-ImplicitCastExpr 0x1f687e05de8 <col:13, col:31> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x1f687e05dc0 <col:13, col:31> 'long'
|   |     |-ImplicitCastExpr 0x1f687e05da8 <col:13> 'long (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1f687e05cc8 <col:13> 'long (double)' Function 0x1f687ea4b80 'roundv' 'long (double)'
|   |     `-CallExpr 0x1f687e05d40 <col:20, col:30> 'double'
|   |       |-ImplicitCastExpr 0x1f687e05d28 <col:20> 'double (*)(int)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1f687e05ce8 <col:20> 'double (int)' Function 0x1f687ea4730 'pow_10' 'double (int)'
|   |       `-ImplicitCastExpr 0x1f687e05d68 <col:27> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f687e05d08 <col:27> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |-BinaryOperator 0x1f687e06050 <line:656:5, col:56> 'unsigned long' '='
|   | |-DeclRefExpr 0x1f687e05e20 <col:5> 'unsigned long' lvalue Var 0x1f687e03f00 'fracpart' 'unsigned long'
|   | `-ImplicitCastExpr 0x1f687e06038 <col:16, col:56> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x1f687e06010 <col:16, col:56> 'long'
|   |     |-ImplicitCastExpr 0x1f687e05ff8 <col:16> 'long (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1f687e05e58 <col:16> 'long (double)' Function 0x1f687ea4b80 'roundv' 'long (double)'
|   |     `-BinaryOperator 0x1f687e05fd8 <col:23, col:55> 'double' '*'
|   |       |-CallExpr 0x1f687e05ed0 <col:23, col:33> 'double'
|   |       | |-ImplicitCastExpr 0x1f687e05eb8 <col:23> 'double (*)(int)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x1f687e05e78 <col:23> 'double (int)' Function 0x1f687ea4730 'pow_10' 'double (int)'
|   |       | `-ImplicitCastExpr 0x1f687e05ef8 <col:30> 'int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1f687e05e98 <col:30> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |       `-ParenExpr 0x1f687e05fb8 <col:37, col:55> 'double'
|   |         `-BinaryOperator 0x1f687e05f98 <col:38, col:48> 'double' '-'
|   |           |-ImplicitCastExpr 0x1f687e05f50 <col:38> 'double' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1f687e05f10 <col:38> 'double' lvalue Var 0x1f687e035c8 'ufvalue' 'double'
|   |           `-ImplicitCastExpr 0x1f687e05f80 <col:48> 'double' <IntegralToFloating>
|   |             `-ImplicitCastExpr 0x1f687e05f68 <col:48> 'unsigned long' <LValueToRValue>
|   |               `-DeclRefExpr 0x1f687e05f30 <col:48> 'unsigned long' lvalue Var 0x1f687e03e68 'intpart' 'unsigned long'
|   |-IfStmt 0x1f687e061e0 <line:658:5, line:661:5>
|   | |-BinaryOperator 0x1f687e060e0 <line:658:9, col:21> 'int' '>='
|   | | |-ImplicitCastExpr 0x1f687e060b0 <col:9> 'unsigned long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687e06070 <col:9> 'unsigned long' lvalue Var 0x1f687e03f00 'fracpart' 'unsigned long'
|   | | `-ImplicitCastExpr 0x1f687e060c8 <col:21> 'unsigned long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f687e06090 <col:21> 'unsigned long' lvalue Var 0x1f687e03f98 'max10' 'unsigned long'
|   | `-CompoundStmt 0x1f687e061c0 <col:28, line:661:5>
|   |   |-UnaryOperator 0x1f687e06120 <line:659:9, col:16> 'unsigned long' postfix '++'
|   |   | `-DeclRefExpr 0x1f687e06100 <col:9> 'unsigned long' lvalue Var 0x1f687e03e68 'intpart' 'unsigned long'
|   |   `-CompoundAssignOperator 0x1f687e06190 <line:660:9, col:21> 'unsigned long' '-=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   |     |-DeclRefExpr 0x1f687e06138 <col:9> 'unsigned long' lvalue Var 0x1f687e03f00 'fracpart' 'unsigned long'
|   |     `-ImplicitCastExpr 0x1f687e06178 <col:21> 'unsigned long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f687e06158 <col:21> 'unsigned long' lvalue Var 0x1f687e03f98 'max10' 'unsigned long'
|   |-DoStmt 0x1f687e066b0 <line:664:5, line:667:57>
|   | |-CompoundStmt 0x1f687e06520 <line:664:8, line:667:5>
|   | | |-BinaryOperator 0x1f687e06408 <line:665:9, col:55> 'char' '='
|   | | | |-ArraySubscriptExpr 0x1f687e06298 <col:9, col:26> 'char' lvalue
|   | | | | |-ImplicitCastExpr 0x1f687e06280 <col:9> 'char *' <ArrayToPointerDecay>
|   | | | | | `-DeclRefExpr 0x1f687e061f8 <col:9> 'char [20]' lvalue Var 0x1f687e03778 'iconvert' 'char [20]'
|   | | | | `-UnaryOperator 0x1f687e06268 <col:18, col:24> 'int' postfix '++'
|   | | | |   `-DeclRefExpr 0x1f687e06230 <col:18> 'int' lvalue Var 0x1f687e039d0 'iplace' 'int'
|   | | | `-ImplicitCastExpr 0x1f687e063f0 <col:30, col:55> 'char' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x1f687e063d0 <col:30, col:55> 'char' lvalue
|   | | |     |-ImplicitCastExpr 0x1f687e063b8 <col:30> 'char *' <ArrayToPointerDecay>
|   | | |     | `-StringLiteral 0x1f687e062f8 <col:30> 'char [11]' lvalue "0123456789"
|   | | |     `-BinaryOperator 0x1f687e06398 <col:43, col:53> 'unsigned long' '%'
|   | | |       |-ImplicitCastExpr 0x1f687e06368 <col:43> 'unsigned long' <LValueToRValue>
|   | | |       | `-DeclRefExpr 0x1f687e06320 <col:43> 'unsigned long' lvalue Var 0x1f687e03e68 'intpart' 'unsigned long'
|   | | |       `-ImplicitCastExpr 0x1f687e06380 <col:53> 'unsigned long' <IntegralCast>
|   | | |         `-IntegerLiteral 0x1f687e06340 <col:53> 'int' 10
|   | | `-BinaryOperator 0x1f687e06500 <line:666:9, col:32> 'unsigned long' '='
|   | |   |-DeclRefExpr 0x1f687e06428 <col:9> 'unsigned long' lvalue Var 0x1f687e03e68 'intpart' 'unsigned long'
|   | |   `-ParenExpr 0x1f687e064e0 <col:19, col:32> 'unsigned long'
|   | |     `-BinaryOperator 0x1f687e064c0 <col:20, col:30> 'unsigned long' '/'
|   | |       |-ImplicitCastExpr 0x1f687e06490 <col:20> 'unsigned long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1f687e06448 <col:20> 'unsigned long' lvalue Var 0x1f687e03e68 'intpart' 'unsigned long'
|   | |       `-ImplicitCastExpr 0x1f687e064a8 <col:30> 'unsigned long' <IntegralCast>
|   | |         `-IntegerLiteral 0x1f687e06468 <col:30> 'int' 10
|   | `-BinaryOperator 0x1f687e06690 <line:667:14, col:56> 'int' '&&'
|   |   |-ImplicitCastExpr 0x1f687e06678 <col:14> 'unsigned long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687e06540 <col:14> 'unsigned long' lvalue Var 0x1f687e03e68 'intpart' 'unsigned long'
|   |   `-ParenExpr 0x1f687e06658 <col:25, col:56> 'int'
|   |     `-BinaryOperator 0x1f687e06638 <col:26, col:55> 'int' '<'
|   |       |-ImplicitCastExpr 0x1f687e06620 <col:26> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1f687e06560 <col:26> 'int' lvalue Var 0x1f687e039d0 'iplace' 'int'
|   |       `-CStyleCastExpr 0x1f687e065f8 <col:35, col:55> 'int' <IntegralCast>
|   |         `-UnaryExprOrTypeTraitExpr 0x1f687e065c0 <col:40, col:55> 'unsigned long long' sizeof
|   |           `-ParenExpr 0x1f687e065a0 <col:46, col:55> 'char [20]' lvalue
|   |             `-DeclRefExpr 0x1f687e06580 <col:47> 'char [20]' lvalue Var 0x1f687e03778 'iconvert' 'char [20]' non_odr_use_unevaluated
|   |-IfStmt 0x1f687e067d8 <line:668:5, line:669:15>
|   | |-BinaryOperator 0x1f687e06780 <line:668:9, col:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f687e06768 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1f687e06750 <col:9> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1f687e066d0 <col:9> 'int' lvalue Var 0x1f687e039d0 'iplace' 'int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1f687e06730 <col:19, col:34> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1f687e06710 <col:25, col:34> 'char [20]' lvalue
|   | |     `-DeclRefExpr 0x1f687e066f0 <col:26> 'char [20]' lvalue Var 0x1f687e03778 'iconvert' 'char [20]' non_odr_use_unevaluated
|   | `-UnaryOperator 0x1f687e067c0 <line:669:9, col:15> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1f687e067a0 <col:9> 'int' lvalue Var 0x1f687e039d0 'iplace' 'int'
|   |-BinaryOperator 0x1f687e068c0 <line:670:5, col:24> 'char' '='
|   | |-ArraySubscriptExpr 0x1f687e06860 <col:5, col:20> 'char' lvalue
|   | | |-ImplicitCastExpr 0x1f687e06830 <col:5> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1f687e067f0 <col:5> 'char [20]' lvalue Var 0x1f687e03778 'iconvert' 'char [20]'
|   | | `-ImplicitCastExpr 0x1f687e06848 <col:14> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f687e06810 <col:14> 'int' lvalue Var 0x1f687e039d0 'iplace' 'int'
|   | `-ImplicitCastExpr 0x1f687e068a8 <col:24> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x1f687e06880 <col:24> 'int' 0
|   |-WhileStmt 0x1f687d552f8 <line:673:5, line:684:5>
|   | |-BinaryOperator 0x1f687e06968 <line:673:12, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687e06938 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687e068e0 <col:12> 'int' lvalue Var 0x1f687e03a90 'fplace' 'int'
|   | | `-ImplicitCastExpr 0x1f687e06950 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f687e06918 <col:21> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   | `-CompoundStmt 0x1f687d552d0 <col:26, line:684:5>
|   |   |-IfStmt 0x1f687e06dd8 <line:674:9, line:681:9>
|   |   | |-BinaryOperator 0x1f687e06bc0 <line:674:13, col:68> 'int' '&&'
|   |   | | |-BinaryOperator 0x1f687e06a88 <col:13, col:44> 'int' '&&'
|   |   | | | |-BinaryOperator 0x1f687e069e8 <col:13, line:76:25> 'int' '=='
|   |   | | | | |-ImplicitCastExpr 0x1f687e069d0 <line:674:13> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x1f687e06988 <col:13> 'int' lvalue ParmVar 0x1f687e03258 'style' 'int'
|   |   | | | | `-IntegerLiteral 0x1f687e069a8 <line:76:25> 'int' 2
|   |   | | | `-BinaryOperator 0x1f687e06a68 <line:674:34, col:44> 'int' '=='
|   |   | | |   |-ImplicitCastExpr 0x1f687e06a50 <col:34> 'int' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x1f687e06a08 <col:34> 'int' lvalue Var 0x1f687e03a90 'fplace' 'int'
|   |   | | |   `-IntegerLiteral 0x1f687e06a28 <col:44> 'int' 0
|   |   | | `-BinaryOperator 0x1f687e06ba0 <col:49, col:68> 'int' '=='
|   |   | |   |-ParenExpr 0x1f687e06b40 <col:49, col:63> 'unsigned long'
|   |   | |   | `-BinaryOperator 0x1f687e06b20 <col:50, col:61> 'unsigned long' '%'
|   |   | |   |   |-ImplicitCastExpr 0x1f687e06af0 <col:50> 'unsigned long' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1f687e06aa8 <col:50> 'unsigned long' lvalue Var 0x1f687e03f00 'fracpart' 'unsigned long'
|   |   | |   |   `-ImplicitCastExpr 0x1f687e06b08 <col:61> 'unsigned long' <IntegralCast>
|   |   | |   |     `-IntegerLiteral 0x1f687e06ac8 <col:61> 'int' 10
|   |   | |   `-ImplicitCastExpr 0x1f687e06b88 <col:68> 'unsigned long' <IntegralCast>
|   |   | |     `-IntegerLiteral 0x1f687e06b60 <col:68> 'int' 0
|   |   | `-CompoundStmt 0x1f687e06da8 <col:71, line:681:9>
|   |   |   |-UnaryOperator 0x1f687e06c00 <line:676:13, col:16> 'int' postfix '--'
|   |   |   | `-DeclRefExpr 0x1f687e06be0 <col:13> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   |   |-BinaryOperator 0x1f687e06cd0 <line:677:13, col:35> 'unsigned long' '='
|   |   |   | |-DeclRefExpr 0x1f687e06c18 <col:13> 'unsigned long' lvalue Var 0x1f687e03f00 'fracpart' 'unsigned long'
|   |   |   | `-BinaryOperator 0x1f687e06cb0 <col:24, col:35> 'unsigned long' '/'
|   |   |   |   |-ImplicitCastExpr 0x1f687e06c80 <col:24> 'unsigned long' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x1f687e06c38 <col:24> 'unsigned long' lvalue Var 0x1f687e03f00 'fracpart' 'unsigned long'
|   |   |   |   `-ImplicitCastExpr 0x1f687e06c98 <col:35> 'unsigned long' <IntegralCast>
|   |   |   |     `-IntegerLiteral 0x1f687e06c58 <col:35> 'int' 10
|   |   |   |-IfStmt 0x1f687e06d88 <line:678:13, line:679:17>
|   |   |   | |-BinaryOperator 0x1f687e06d60 <line:678:17, col:26> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x1f687e06d30 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1f687e06cf0 <col:17> 'int' lvalue Var 0x1f687e03a90 'fplace' 'int'
|   |   |   | | `-ImplicitCastExpr 0x1f687e06d48 <col:26> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1f687e06d10 <col:26> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   |   | `-ContinueStmt 0x1f687e06d80 <line:679:17>
|   |   |   `-BreakStmt 0x1f687e06da0 <line:680:13>
|   |   |-BinaryOperator 0x1f687d551b8 <line:682:9, col:56> 'char' '='
|   |   | |-ArraySubscriptExpr 0x1f687e06e78 <col:9, col:26> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x1f687e06e60 <col:9> 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x1f687e06df0 <col:9> 'char [20]' lvalue Var 0x1f687e03858 'fconvert' 'char [20]'
|   |   | | `-UnaryOperator 0x1f687e06e48 <col:18, col:24> 'int' postfix '++'
|   |   | |   `-DeclRefExpr 0x1f687e06e28 <col:18> 'int' lvalue Var 0x1f687e03a90 'fplace' 'int'
|   |   | `-ImplicitCastExpr 0x1f687d551a0 <col:30, col:56> 'char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1f687d55180 <col:30, col:56> 'char' lvalue
|   |   |     |-ImplicitCastExpr 0x1f687e06f58 <col:30> 'char *' <ArrayToPointerDecay>
|   |   |     | `-StringLiteral 0x1f687e06e98 <col:30> 'char [11]' lvalue "0123456789"
|   |   |     `-BinaryOperator 0x1f687e06f38 <col:43, col:54> 'unsigned long' '%'
|   |   |       |-ImplicitCastExpr 0x1f687e06f08 <col:43> 'unsigned long' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x1f687e06ec0 <col:43> 'unsigned long' lvalue Var 0x1f687e03f00 'fracpart' 'unsigned long'
|   |   |       `-ImplicitCastExpr 0x1f687e06f20 <col:54> 'unsigned long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1f687e06ee0 <col:54> 'int' 10
|   |   `-BinaryOperator 0x1f687d552b0 <line:683:9, col:34> 'unsigned long' '='
|   |     |-DeclRefExpr 0x1f687d551d8 <col:9> 'unsigned long' lvalue Var 0x1f687e03f00 'fracpart' 'unsigned long'
|   |     `-ParenExpr 0x1f687d55290 <col:20, col:34> 'unsigned long'
|   |       `-BinaryOperator 0x1f687d55270 <col:21, col:32> 'unsigned long' '/'
|   |         |-ImplicitCastExpr 0x1f687d55240 <col:21> 'unsigned long' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1f687d551f8 <col:21> 'unsigned long' lvalue Var 0x1f687e03f00 'fracpart' 'unsigned long'
|   |         `-ImplicitCastExpr 0x1f687d55258 <col:32> 'unsigned long' <IntegralCast>
|   |           `-IntegerLiteral 0x1f687d55218 <col:32> 'int' 10
|   |-IfStmt 0x1f687d55418 <line:686:5, line:687:15>
|   | |-BinaryOperator 0x1f687d553c0 <line:686:9, col:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f687d553a8 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1f687d55390 <col:9> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1f687d55310 <col:9> 'int' lvalue Var 0x1f687e03a90 'fplace' 'int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1f687d55370 <col:19, col:34> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1f687d55350 <col:25, col:34> 'char [20]' lvalue
|   | |     `-DeclRefExpr 0x1f687d55330 <col:26> 'char [20]' lvalue Var 0x1f687e03858 'fconvert' 'char [20]' non_odr_use_unevaluated
|   | `-UnaryOperator 0x1f687d55400 <line:687:9, col:15> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1f687d553e0 <col:9> 'int' lvalue Var 0x1f687e03a90 'fplace' 'int'
|   |-BinaryOperator 0x1f687d55500 <line:688:5, col:24> 'char' '='
|   | |-ArraySubscriptExpr 0x1f687d554a0 <col:5, col:20> 'char' lvalue
|   | | |-ImplicitCastExpr 0x1f687d55470 <col:5> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1f687d55430 <col:5> 'char [20]' lvalue Var 0x1f687e03858 'fconvert' 'char [20]'
|   | | `-ImplicitCastExpr 0x1f687d55488 <col:14> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f687d55450 <col:14> 'int' lvalue Var 0x1f687e03a90 'fplace' 'int'
|   | `-ImplicitCastExpr 0x1f687d554e8 <col:24> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x1f687d554c0 <col:24> 'int' 0
|   |-IfStmt 0x1f687d55f58 <line:691:5, line:708:5>
|   | |-BinaryOperator 0x1f687d55580 <line:691:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f687d55568 <line:691:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d55520 <col:9> 'int' lvalue Var 0x1f687e04030 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1f687d55540 <line:75:25> 'int' 1
|   | `-CompoundStmt 0x1f687d55f20 <line:691:32, line:708:5>
|   |   |-DeclStmt 0x1f687d55620 <line:692:9, col:19>
|   |   | `-VarDecl 0x1f687d555b8 <col:9, col:13> col:13 used tmpexp 'int'
|   |   |-IfStmt 0x1f687d55820 <line:693:9, line:696:22> has_else
|   |   | |-BinaryOperator 0x1f687d556b0 <line:693:13, col:19> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1f687d55680 <col:13> 'long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f687d55638 <col:13> 'long' lvalue Var 0x1f687e03d90 'exp' 'long'
|   |   | | `-ImplicitCastExpr 0x1f687d55698 <col:19> 'long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1f687d55658 <col:19> 'int' 0
|   |   | |-BinaryOperator 0x1f687d55770 <line:694:13, col:23> 'int' '='
|   |   | | |-DeclRefExpr 0x1f687d556d0 <col:13> 'int' lvalue Var 0x1f687d555b8 'tmpexp' 'int'
|   |   | | `-ImplicitCastExpr 0x1f687d55758 <col:22, col:23> 'int' <IntegralCast>
|   |   | |   `-UnaryOperator 0x1f687d55740 <col:22, col:23> 'long' prefix '-'
|   |   | |     `-ImplicitCastExpr 0x1f687d55728 <col:23> 'long' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1f687d55708 <col:23> 'long' lvalue Var 0x1f687e03d90 'exp' 'long'
|   |   | `-BinaryOperator 0x1f687d55800 <line:696:13, col:22> 'int' '='
|   |   |   |-DeclRefExpr 0x1f687d55790 <col:13> 'int' lvalue Var 0x1f687d555b8 'tmpexp' 'int'
|   |   |   `-ImplicitCastExpr 0x1f687d557e8 <col:22> 'int' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x1f687d557d0 <col:22> 'long' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1f687d557b0 <col:22> 'long' lvalue Var 0x1f687e03d90 'exp' 'long'
|   |   |-DoStmt 0x1f687d55cb8 <line:698:9, line:701:62>
|   |   | |-CompoundStmt 0x1f687d55b00 <line:698:12, line:701:9>
|   |   | | |-BinaryOperator 0x1f687d55a00 <line:699:13, col:58> 'char' '='
|   |   | | | |-ArraySubscriptExpr 0x1f687d558e8 <col:13, col:30> 'char' lvalue
|   |   | | | | |-ImplicitCastExpr 0x1f687d558d0 <col:13> 'char *' <ArrayToPointerDecay>
|   |   | | | | | `-DeclRefExpr 0x1f687d55848 <col:13> 'char [20]' lvalue Var 0x1f687e03938 'econvert' 'char [20]'
|   |   | | | | `-UnaryOperator 0x1f687d558b8 <col:22, col:28> 'int' postfix '++'
|   |   | | | |   `-DeclRefExpr 0x1f687d55880 <col:22> 'int' lvalue Var 0x1f687e03b50 'eplace' 'int'
|   |   | | | `-ImplicitCastExpr 0x1f687d559e8 <col:34, col:58> 'char' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x1f687d559c8 <col:34, col:58> 'char' lvalue
|   |   | | |     |-ImplicitCastExpr 0x1f687d559b0 <col:34> 'char *' <ArrayToPointerDecay>
|   |   | | |     | `-StringLiteral 0x1f687d55908 <col:34> 'char [11]' lvalue "0123456789"
|   |   | | |     `-BinaryOperator 0x1f687d55990 <col:47, col:56> 'int' '%'
|   |   | | |       |-ImplicitCastExpr 0x1f687d55978 <col:47> 'int' <LValueToRValue>
|   |   | | |       | `-DeclRefExpr 0x1f687d55930 <col:47> 'int' lvalue Var 0x1f687d555b8 'tmpexp' 'int'
|   |   | | |       `-IntegerLiteral 0x1f687d55950 <col:56> 'int' 10
|   |   | | `-BinaryOperator 0x1f687d55ae0 <line:700:13, col:34> 'int' '='
|   |   | |   |-DeclRefExpr 0x1f687d55a20 <col:13> 'int' lvalue Var 0x1f687d555b8 'tmpexp' 'int'
|   |   | |   `-ParenExpr 0x1f687d55ac0 <col:22, col:34> 'int'
|   |   | |     `-BinaryOperator 0x1f687d55aa0 <col:23, col:32> 'int' '/'
|   |   | |       |-ImplicitCastExpr 0x1f687d55a88 <col:23> 'int' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x1f687d55a40 <col:23> 'int' lvalue Var 0x1f687d555b8 'tmpexp' 'int'
|   |   | |       `-IntegerLiteral 0x1f687d55a60 <col:32> 'int' 10
|   |   | `-BinaryOperator 0x1f687d55c98 <line:701:18, col:61> 'int' '&&'
|   |   |   |-BinaryOperator 0x1f687d55b80 <col:18, col:27> 'int' '>'
|   |   |   | |-ImplicitCastExpr 0x1f687d55b68 <col:18> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1f687d55b20 <col:18> 'int' lvalue Var 0x1f687d555b8 'tmpexp' 'int'
|   |   |   | `-IntegerLiteral 0x1f687d55b40 <col:27> 'int' 0
|   |   |   `-BinaryOperator 0x1f687d55c78 <col:32, col:61> 'int' '<'
|   |   |     |-ImplicitCastExpr 0x1f687d55c60 <col:32> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1f687d55ba0 <col:32> 'int' lvalue Var 0x1f687e03b50 'eplace' 'int'
|   |   |     `-CStyleCastExpr 0x1f687d55c38 <col:41, col:61> 'int' <IntegralCast>
|   |   |       `-UnaryExprOrTypeTraitExpr 0x1f687d55c00 <col:46, col:61> 'unsigned long long' sizeof
|   |   |         `-ParenExpr 0x1f687d55be0 <col:52, col:61> 'char [20]' lvalue
|   |   |           `-DeclRefExpr 0x1f687d55bc0 <col:53> 'char [20]' lvalue Var 0x1f687e03938 'econvert' 'char [20]' non_odr_use_unevaluated
|   |   |-IfStmt 0x1f687d55d90 <line:703:9, line:704:20>
|   |   | |-BinaryOperator 0x1f687d55d38 <line:703:13, col:22> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x1f687d55d20 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f687d55cd8 <col:13> 'int' lvalue Var 0x1f687d555b8 'tmpexp' 'int'
|   |   | | `-IntegerLiteral 0x1f687d55cf8 <col:22> 'int' 0
|   |   | `-ReturnStmt 0x1f687d55d80 <line:704:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687d55d58 <col:20> 'int' 0
|   |   `-IfStmt 0x1f687d55f08 <line:706:9, line:707:34>
|   |     |-BinaryOperator 0x1f687d55e08 <line:706:13, col:23> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1f687d55df0 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f687d55da8 <col:13> 'int' lvalue Var 0x1f687e03b50 'eplace' 'int'
|   |     | `-IntegerLiteral 0x1f687d55dc8 <col:23> 'int' 1
|   |     `-BinaryOperator 0x1f687d55ee8 <line:707:13, col:34> 'char' '='
|   |       |-ArraySubscriptExpr 0x1f687d55e98 <col:13, col:30> 'char' lvalue
|   |       | |-ImplicitCastExpr 0x1f687d55e80 <col:13> 'char *' <ArrayToPointerDecay>
|   |       | | `-DeclRefExpr 0x1f687d55e28 <col:13> 'char [20]' lvalue Var 0x1f687e03938 'econvert' 'char [20]'
|   |       | `-UnaryOperator 0x1f687d55e68 <col:22, col:28> 'int' postfix '++'
|   |       |   `-DeclRefExpr 0x1f687d55e48 <col:22> 'int' lvalue Var 0x1f687e03b50 'eplace' 'int'
|   |       `-ImplicitCastExpr 0x1f687d55ed0 <col:34> 'char' <IntegralCast>
|   |         `-CharacterLiteral 0x1f687d55eb8 <col:34> 'int' 48
|   |-BinaryOperator 0x1f687d562e8 <line:714:5, col:75> 'int' '='
|   | |-DeclRefExpr 0x1f687d55f70 <col:5> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   | `-BinaryOperator 0x1f687d562c8 <col:14, col:75> 'int' '-'
|   |   |-BinaryOperator 0x1f687d561b0 <col:14, col:51> 'int' '-'
|   |   | |-BinaryOperator 0x1f687d56070 <col:14, col:29> 'int' '-'
|   |   | | |-BinaryOperator 0x1f687d56018 <col:14, col:20> 'int' '-'
|   |   | | | |-ImplicitCastExpr 0x1f687d55fe8 <col:14> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1f687d55fa8 <col:14> 'int' lvalue ParmVar 0x1f687e030d8 'min' 'int'
|   |   | | | `-ImplicitCastExpr 0x1f687d56000 <col:20> 'int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1f687d55fc8 <col:20> 'int' lvalue Var 0x1f687e039d0 'iplace' 'int'
|   |   | | `-ImplicitCastExpr 0x1f687d56058 <col:29> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1f687d56038 <col:29> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   | `-ParenExpr 0x1f687d56190 <col:35, col:51> 'int'
|   |   |   `-ConditionalOperator 0x1f687d56160 <col:36, col:50> 'int'
|   |   |     |-BinaryOperator 0x1f687d560f0 <col:36, col:42> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x1f687d560d8 <col:36> 'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1f687d56090 <col:36> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   |     | `-IntegerLiteral 0x1f687d560b0 <col:42> 'int' 0
|   |   |     |-IntegerLiteral 0x1f687d56110 <col:46> 'int' 1
|   |   |     `-IntegerLiteral 0x1f687d56138 <col:50> 'int' 0
|   |   `-ParenExpr 0x1f687d562a8 <col:55, col:75> 'int'
|   |     `-ConditionalOperator 0x1f687d56278 <col:56, col:74> 'int'
|   |       |-ImplicitCastExpr 0x1f687d56260 <col:56, col:66> 'int' <LValueToRValue>
|   |       | `-ParenExpr 0x1f687d561f0 <col:56, col:66> 'int' lvalue
|   |       |   `-DeclRefExpr 0x1f687d561d0 <col:57> 'int' lvalue Var 0x1f687e03508 'signvalue' 'int'
|   |       |-IntegerLiteral 0x1f687d56210 <col:70> 'int' 1
|   |       `-IntegerLiteral 0x1f687d56238 <col:74> 'int' 0
|   |-IfStmt 0x1f687d56458 <line:716:5, line:717:23>
|   | |-BinaryOperator 0x1f687d56368 <line:716:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f687d56350 <line:716:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d56308 <col:9> 'int' lvalue Var 0x1f687e04030 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1f687d56328 <line:75:25> 'int' 1
|   | `-CompoundAssignOperator 0x1f687d56428 <line:717:9, col:23> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x1f687d56388 <col:9> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   |   `-BinaryOperator 0x1f687d56408 <col:19, col:23> 'int' '+'
|   |     |-IntegerLiteral 0x1f687d563a8 <col:19> 'int' 2
|   |     `-ImplicitCastExpr 0x1f687d563f0 <col:23> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f687d563d0 <col:23> 'int' lvalue Var 0x1f687e03b50 'eplace' 'int'
|   |-BinaryOperator 0x1f687d56538 <line:718:5, col:21> 'int' '='
|   | |-DeclRefExpr 0x1f687d56470 <col:5> 'int' lvalue Var 0x1f687e03cd0 'zpadlen' 'int'
|   | `-BinaryOperator 0x1f687d56518 <col:15, col:21> 'int' '-'
|   |   |-ImplicitCastExpr 0x1f687d564e8 <col:15> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687d564a8 <col:15> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   |   `-ImplicitCastExpr 0x1f687d56500 <col:21> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f687d564c8 <col:21> 'int' lvalue Var 0x1f687e03a90 'fplace' 'int'
|   |-IfStmt 0x1f687d56640 <line:719:5, line:720:19>
|   | |-BinaryOperator 0x1f687d565b8 <line:719:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687d565a0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d56558 <col:9> 'int' lvalue Var 0x1f687e03cd0 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1f687d56578 <col:19> 'int' 0
|   | `-BinaryOperator 0x1f687d56620 <line:720:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1f687d565d8 <col:9> 'int' lvalue Var 0x1f687e03cd0 'zpadlen' 'int'
|   |   `-IntegerLiteral 0x1f687d565f8 <col:19> 'int' 0
|   |-IfStmt 0x1f687d56740 <line:721:5, line:722:18>
|   | |-BinaryOperator 0x1f687d566b8 <line:721:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687d566a0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d56658 <col:9> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   | | `-IntegerLiteral 0x1f687d56678 <col:18> 'int' 0
|   | `-BinaryOperator 0x1f687d56720 <line:722:9, col:18> 'int' '='
|   |   |-DeclRefExpr 0x1f687d566d8 <col:9> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   |   `-IntegerLiteral 0x1f687d566f8 <col:18> 'int' 0
|   |-IfStmt 0x1f687d568d0 <line:723:5, line:724:19>
|   | |-BinaryOperator 0x1f687d56820 <line:723:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f687d56808 <line:723:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d56758 <col:9> 'int' lvalue ParmVar 0x1f687e031d8 'flags' 'int'
|   | | `-ParenExpr 0x1f687d567e8 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f687d567c8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f687d56778 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f687d567a0 <col:31> 'int' 0
|   | `-BinaryOperator 0x1f687d568b0 <line:724:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1f687d56840 <col:9> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   |   `-UnaryOperator 0x1f687d56898 <col:18, col:19> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1f687d56880 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f687d56860 <col:19> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   |-IfStmt 0x1f687d570b8 <line:726:5, line:738:5>
|   | |-BinaryOperator 0x1f687d56a90 <line:726:9, col:43> 'int' '&&'
|   | | |-ParenExpr 0x1f687d569d0 <col:9, col:27> 'int'
|   | | | `-BinaryOperator 0x1f687d569b0 <col:10, line:61:32> 'int' '&'
|   | | |   |-ImplicitCastExpr 0x1f687d56998 <line:726:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1f687d568e8 <col:10> 'int' lvalue ParmVar 0x1f687e031d8 'flags' 'int'
|   | | |   `-ParenExpr 0x1f687d56978 <line:61:25, col:32> 'int'
|   | | |     `-BinaryOperator 0x1f687d56958 <col:26, col:31> 'int' '<<'
|   | | |       |-IntegerLiteral 0x1f687d56908 <col:26> 'int' 1
|   | | |       `-IntegerLiteral 0x1f687d56930 <col:31> 'int' 4
|   | | `-ParenExpr 0x1f687d56a70 <line:726:32, col:43> 'int'
|   | |   `-BinaryOperator 0x1f687d56a50 <col:33, col:42> 'int' '>'
|   | |     |-ImplicitCastExpr 0x1f687d56a38 <col:33> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f687d569f0 <col:33> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   | |     `-IntegerLiteral 0x1f687d56a10 <col:42> 'int' 0
|   | `-CompoundStmt 0x1f687d57098 <col:46, line:738:5>
|   |   |-IfStmt 0x1f687d56db0 <line:727:9, line:732:9>
|   |   | |-ImplicitCastExpr 0x1f687d56ad0 <line:727:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1f687d56ab0 <col:13> 'int' lvalue Var 0x1f687e03508 'signvalue' 'int'
|   |   | `-CompoundStmt 0x1f687d56d88 <col:24, line:732:9>
|   |   |   |-IfStmt 0x1f687d56cd0 <line:728:13, line:729:24>
|   |   |   | |-UnaryOperator 0x1f687d56c80 <line:728:17, col:73> 'int' prefix '!' cannot overflow
|   |   |   | | `-CallExpr 0x1f687d56bc0 <col:18, col:73> 'int'
|   |   |   | |   |-ImplicitCastExpr 0x1f687d56ba8 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x1f687d56ae8 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |   | |   |-ImplicitCastExpr 0x1f687d56c08 <col:30> 'char **' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1f687d56b08 <col:30> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |   |   | |   |-ImplicitCastExpr 0x1f687d56c20 <col:39> 'char **' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1f687d56b28 <col:39> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |   |   | |   |-ImplicitCastExpr 0x1f687d56c38 <col:47> 'size_t *' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1f687d56b48 <col:47> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |   |   | |   |-ImplicitCastExpr 0x1f687d56c50 <col:56> 'size_t *' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1f687d56b68 <col:56> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |   |   | |   `-ImplicitCastExpr 0x1f687d56c68 <col:64> 'int' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x1f687d56b88 <col:64> 'int' lvalue Var 0x1f687e03508 'signvalue' 'int'
|   |   |   | `-ReturnStmt 0x1f687d56cc0 <line:729:17, col:24>
|   |   |   |   `-IntegerLiteral 0x1f687d56c98 <col:24> 'int' 0
|   |   |   |-UnaryOperator 0x1f687d56d08 <line:730:13, col:15> 'int' prefix '--'
|   |   |   | `-DeclRefExpr 0x1f687d56ce8 <col:15> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   |   |   `-BinaryOperator 0x1f687d56d68 <line:731:13, col:25> 'int' '='
|   |   |     |-DeclRefExpr 0x1f687d56d20 <col:13> 'int' lvalue Var 0x1f687e03508 'signvalue' 'int'
|   |   |     `-IntegerLiteral 0x1f687d56d40 <col:25> 'int' 0
|   |   `-WhileStmt 0x1f687d57080 <line:733:9, line:737:9>
|   |     |-BinaryOperator 0x1f687d56e28 <line:733:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1f687d56e10 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f687d56dc8 <col:16> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   |     | `-IntegerLiteral 0x1f687d56de8 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1f687d57060 <col:28, line:737:9>
|   |       |-IfStmt 0x1f687d57010 <line:734:13, line:735:24>
|   |       | |-UnaryOperator 0x1f687d56fc0 <line:734:17, col:67> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x1f687d56f18 <col:18, col:67> 'int'
|   |       | |   |-ImplicitCastExpr 0x1f687d56f00 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1f687d56e48 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       | |   |-ImplicitCastExpr 0x1f687d56f60 <col:30> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f687d56e68 <col:30> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1f687d56f78 <col:39> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f687d56e88 <col:39> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1f687d56f90 <col:47> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f687d56ea8 <col:47> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |       | |   |-ImplicitCastExpr 0x1f687d56fa8 <col:56> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f687d56ec8 <col:56> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |       | |   `-CharacterLiteral 0x1f687d56ee8 <col:64> 'int' 48
|   |       | `-ReturnStmt 0x1f687d57000 <line:735:17, col:24>
|   |       |   `-IntegerLiteral 0x1f687d56fd8 <col:24> 'int' 0
|   |       `-UnaryOperator 0x1f687d57048 <line:736:13, col:15> 'int' prefix '--'
|   |         `-DeclRefExpr 0x1f687d57028 <col:15> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   |-WhileStmt 0x1f687d573a8 <line:739:5, line:743:5>
|   | |-BinaryOperator 0x1f687d57130 <line:739:12, col:21> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f687d57118 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d570d0 <col:12> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   | | `-IntegerLiteral 0x1f687d570f0 <col:21> 'int' 0
|   | `-CompoundStmt 0x1f687d57388 <col:24, line:743:5>
|   |   |-IfStmt 0x1f687d57338 <line:740:9, line:741:20>
|   |   | |-UnaryOperator 0x1f687d572e8 <line:740:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687d57240 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687d57228 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687d57150 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687d57288 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d57190 <col:26> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687d572a0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d571b0 <col:35> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687d572b8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d571d0 <col:43> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687d572d0 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d571f0 <col:52> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f687d57210 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1f687d57328 <line:741:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687d57300 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f687d57370 <line:742:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1f687d57350 <col:11> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   |-IfStmt 0x1f687d57600 <line:744:5, line:745:16>
|   | |-BinaryOperator 0x1f687d575a8 <line:744:9, col:78> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1f687d57590 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d573c0 <col:9> 'int' lvalue Var 0x1f687e03508 'signvalue' 'int'
|   | | `-UnaryOperator 0x1f687d57578 <col:22, col:78> 'int' prefix '!' cannot overflow
|   | |   `-CallExpr 0x1f687d574b8 <col:23, col:78> 'int'
|   | |     |-ImplicitCastExpr 0x1f687d574a0 <col:23> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x1f687d573e0 <col:23> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   | |     |-ImplicitCastExpr 0x1f687d57500 <col:35> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f687d57400 <col:35> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   | |     |-ImplicitCastExpr 0x1f687d57518 <col:44> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f687d57420 <col:44> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   | |     |-ImplicitCastExpr 0x1f687d57530 <col:52> 'size_t *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f687d57440 <col:52> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   | |     |-ImplicitCastExpr 0x1f687d57548 <col:61> 'size_t *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f687d57460 <col:61> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   | |     `-ImplicitCastExpr 0x1f687d57560 <col:69> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1f687d57480 <col:69> 'int' lvalue Var 0x1f687e03508 'signvalue' 'int'
|   | `-ReturnStmt 0x1f687d575f0 <line:745:9, col:16>
|   |   `-IntegerLiteral 0x1f687d575c8 <col:16> 'int' 0
|   |-WhileStmt 0x1f687d57938 <line:747:5, line:750:5>
|   | |-BinaryOperator 0x1f687d57678 <line:747:12, col:21> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f687d57660 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d57618 <col:12> 'int' lvalue Var 0x1f687e039d0 'iplace' 'int'
|   | | `-IntegerLiteral 0x1f687d57638 <col:21> 'int' 0
|   | `-CompoundStmt 0x1f687d57920 <col:24, line:750:5>
|   |   `-IfStmt 0x1f687d57908 <line:748:9, line:749:20>
|   |     |-UnaryOperator 0x1f687d578b8 <line:748:13, col:78> 'int' prefix '!' cannot overflow
|   |     | `-CallExpr 0x1f687d577e0 <col:14, col:78> 'int'
|   |     |   |-ImplicitCastExpr 0x1f687d577c8 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x1f687d57698 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |     |   |-ImplicitCastExpr 0x1f687d57828 <col:26> 'char **' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f687d576b8 <col:26> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |     |   |-ImplicitCastExpr 0x1f687d57840 <col:35> 'char **' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f687d576d8 <col:35> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |     |   |-ImplicitCastExpr 0x1f687d57858 <col:43> 'size_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f687d576f8 <col:43> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |     |   |-ImplicitCastExpr 0x1f687d57870 <col:52> 'size_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f687d57718 <col:52> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |     |   `-ImplicitCastExpr 0x1f687d578a0 <col:60, col:77> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x1f687d57888 <col:60, col:77> 'char' <LValueToRValue>
|   |     |       `-ArraySubscriptExpr 0x1f687d577a8 <col:60, col:77> 'char' lvalue
|   |     |         |-ImplicitCastExpr 0x1f687d57790 <col:60> 'char *' <ArrayToPointerDecay>
|   |     |         | `-DeclRefExpr 0x1f687d57738 <col:60> 'char [20]' lvalue Var 0x1f687e03778 'iconvert' 'char [20]'
|   |     |         `-UnaryOperator 0x1f687d57778 <col:69, col:71> 'int' prefix '--'
|   |     |           `-DeclRefExpr 0x1f687d57758 <col:71> 'int' lvalue Var 0x1f687e039d0 'iplace' 'int'
|   |     `-ReturnStmt 0x1f687d578f8 <line:749:13, col:20>
|   |       `-IntegerLiteral 0x1f687d578d0 <col:20> 'int' 0
|   |-IfStmt 0x1f687d58030 <line:756:5, line:765:5>
|   | |-BinaryOperator 0x1f687d57ad8 <line:756:9, col:37> 'int' '||'
|   | | |-BinaryOperator 0x1f687d579b0 <col:9, col:15> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1f687d57998 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1f687d57950 <col:9> 'int' lvalue ParmVar 0x1f687e03158 'max' 'int'
|   | | | `-IntegerLiteral 0x1f687d57970 <col:15> 'int' 0
|   | | `-ParenExpr 0x1f687d57ab8 <col:20, col:37> 'int'
|   | |   `-BinaryOperator 0x1f687d57a98 <col:21, line:59:32> 'int' '&'
|   | |     |-ImplicitCastExpr 0x1f687d57a80 <line:756:21> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f687d579d0 <col:21> 'int' lvalue ParmVar 0x1f687e031d8 'flags' 'int'
|   | |     `-ParenExpr 0x1f687d57a60 <line:59:25, col:32> 'int'
|   | |       `-BinaryOperator 0x1f687d57a40 <col:26, col:31> 'int' '<<'
|   | |         |-IntegerLiteral 0x1f687d579f0 <col:26> 'int' 1
|   | |         `-IntegerLiteral 0x1f687d57a18 <col:31> 'int' 3
|   | `-CompoundStmt 0x1f687d58010 <line:756:40, line:765:5>
|   |   |-IfStmt 0x1f687d57cc0 <line:757:9, line:758:20>
|   |   | |-UnaryOperator 0x1f687d57c70 <line:757:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687d57bc8 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687d57bb0 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687d57af8 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687d57c10 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d57b18 <col:26> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687d57c28 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d57b38 <col:35> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687d57c40 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d57b58 <col:43> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687d57c58 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d57b78 <col:52> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f687d57b98 <col:60> 'int' 46
|   |   | `-ReturnStmt 0x1f687d57cb0 <line:758:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687d57c88 <col:20> 'int' 0
|   |   `-WhileStmt 0x1f687d57ff8 <line:760:9, line:764:9>
|   |     |-BinaryOperator 0x1f687d57d38 <line:760:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1f687d57d20 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f687d57cd8 <col:16> 'int' lvalue Var 0x1f687e03a90 'fplace' 'int'
|   |     | `-IntegerLiteral 0x1f687d57cf8 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1f687d57fe0 <col:28, line:764:9>
|   |       `-IfStmt 0x1f687d57fc8 <line:761:13, line:763:24>
|   |         |-UnaryOperator 0x1f687d57f78 <line:761:16, line:762:47> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x1f687d57ea0 <line:761:17, line:762:47> 'int'
|   |         |   |-ImplicitCastExpr 0x1f687d57e88 <line:761:17> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1f687d57d58 <col:17> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |         |   |-ImplicitCastExpr 0x1f687d57ee8 <col:29> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f687d57d78 <col:29> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1f687d57f00 <col:38> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f687d57d98 <col:38> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1f687d57f18 <col:46> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f687d57db8 <col:46> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |         |   |-ImplicitCastExpr 0x1f687d57f30 <col:55> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f687d57dd8 <col:55> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |         |   `-ImplicitCastExpr 0x1f687d57f60 <line:762:29, col:46> 'int' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x1f687d57f48 <col:29, col:46> 'char' <LValueToRValue>
|   |         |       `-ArraySubscriptExpr 0x1f687d57e68 <col:29, col:46> 'char' lvalue
|   |         |         |-ImplicitCastExpr 0x1f687d57e50 <col:29> 'char *' <ArrayToPointerDecay>
|   |         |         | `-DeclRefExpr 0x1f687d57df8 <col:29> 'char [20]' lvalue Var 0x1f687e03858 'fconvert' 'char [20]'
|   |         |         `-UnaryOperator 0x1f687d57e38 <col:38, col:40> 'int' prefix '--'
|   |         |           `-DeclRefExpr 0x1f687d57e18 <col:40> 'int' lvalue Var 0x1f687e03a90 'fplace' 'int'
|   |         `-ReturnStmt 0x1f687d57fb8 <line:763:17, col:24>
|   |           `-IntegerLiteral 0x1f687d57f90 <col:24> 'int' 0
|   |-WhileStmt 0x1f687d58300 <line:766:5, line:770:5>
|   | |-BinaryOperator 0x1f687d580a8 <line:766:12, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f687d58090 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d58048 <col:12> 'int' lvalue Var 0x1f687e03cd0 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1f687d58068 <col:22> 'int' 0
|   | `-CompoundStmt 0x1f687d582e0 <col:25, line:770:5>
|   |   |-IfStmt 0x1f687d58290 <line:767:9, line:768:20>
|   |   | |-UnaryOperator 0x1f687d58240 <line:767:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687d58198 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687d58180 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687d580c8 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687d581e0 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d580e8 <col:26> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687d581f8 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d58108 <col:35> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687d58210 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d58128 <col:43> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687d58228 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d58148 <col:52> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f687d58168 <col:60> 'int' 48
|   |   | `-ReturnStmt 0x1f687d58280 <line:768:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687d58258 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f687d582c8 <line:769:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1f687d582a8 <col:11> 'int' lvalue Var 0x1f687e03cd0 'zpadlen' 'int'
|   |-IfStmt 0x1f687d590d0 <line:771:5, line:792:5>
|   | |-BinaryOperator 0x1f687d58378 <line:771:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f687d58360 <line:771:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d58318 <col:9> 'int' lvalue Var 0x1f687e04030 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1f687d58338 <line:75:25> 'int' 1
|   | `-CompoundStmt 0x1f687d59098 <line:771:32, line:792:5>
|   |   |-DeclStmt 0x1f687d58410 <line:772:9, col:17>
|   |   | `-VarDecl 0x1f687d583a8 <col:9, col:14> col:14 used ech 'char'
|   |   |-IfStmt 0x1f687d58670 <line:774:9, line:777:19> has_else
|   |   | |-BinaryOperator 0x1f687d58558 <line:774:13, col:34> 'int' '=='
|   |   | | |-ParenExpr 0x1f687d58510 <col:13, col:29> 'int'
|   |   | | | `-BinaryOperator 0x1f687d584f0 <col:14, line:63:32> 'int' '&'
|   |   | | |   |-ImplicitCastExpr 0x1f687d584d8 <line:774:14> 'int' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x1f687d58428 <col:14> 'int' lvalue ParmVar 0x1f687e031d8 'flags' 'int'
|   |   | | |   `-ParenExpr 0x1f687d584b8 <line:63:25, col:32> 'int'
|   |   | | |     `-BinaryOperator 0x1f687d58498 <col:26, col:31> 'int' '<<'
|   |   | | |       |-IntegerLiteral 0x1f687d58448 <col:26> 'int' 1
|   |   | | |       `-IntegerLiteral 0x1f687d58470 <col:31> 'int' 5
|   |   | | `-IntegerLiteral 0x1f687d58530 <line:774:34> 'int' 0
|   |   | |-BinaryOperator 0x1f687d585e0 <line:775:13, col:19> 'char' '='
|   |   | | |-DeclRefExpr 0x1f687d58578 <col:13> 'char' lvalue Var 0x1f687d583a8 'ech' 'char'
|   |   | | `-ImplicitCastExpr 0x1f687d585c8 <col:19> 'char' <IntegralCast>
|   |   | |   `-CharacterLiteral 0x1f687d585b0 <col:19> 'int' 101
|   |   | `-BinaryOperator 0x1f687d58650 <line:777:13, col:19> 'char' '='
|   |   |   |-DeclRefExpr 0x1f687d58600 <col:13> 'char' lvalue Var 0x1f687d583a8 'ech' 'char'
|   |   |   `-ImplicitCastExpr 0x1f687d58638 <col:19> 'char' <IntegralCast>
|   |   |     `-CharacterLiteral 0x1f687d58620 <col:19> 'int' 69
|   |   |-IfStmt 0x1f687d58898 <line:778:9, line:779:24>
|   |   | |-UnaryOperator 0x1f687d58848 <line:778:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687d58770 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687d58758 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687d58698 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687d587b8 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d586b8 <col:26> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687d587d0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d586d8 <col:35> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687d587e8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d586f8 <col:43> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687d58800 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d58718 <col:52> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1f687d58830 <col:60> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1f687d58818 <col:60> 'char' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1f687d58738 <col:60> 'char' lvalue Var 0x1f687d583a8 'ech' 'char'
|   |   | `-ReturnStmt 0x1f687d58888 <line:779:17, col:24>
|   |   |   `-IntegerLiteral 0x1f687d58860 <col:24> 'int' 0
|   |   |-IfStmt 0x1f687d58d38 <line:780:9, line:786:9> has_else
|   |   | |-BinaryOperator 0x1f687d58928 <line:780:13, col:19> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1f687d588f8 <col:13> 'long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f687d588b0 <col:13> 'long' lvalue Var 0x1f687e03d90 'exp' 'long'
|   |   | | `-ImplicitCastExpr 0x1f687d58910 <col:19> 'long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1f687d588d0 <col:19> 'int' 0
|   |   | |-CompoundStmt 0x1f687d58b28 <col:22, line:783:9>
|   |   | | `-IfStmt 0x1f687d58b10 <line:781:13, line:782:28>
|   |   | |   |-UnaryOperator 0x1f687d58ac0 <line:781:17, col:67> 'int' prefix '!' cannot overflow
|   |   | |   | `-CallExpr 0x1f687d58a18 <col:18, col:67> 'int'
|   |   | |   |   |-ImplicitCastExpr 0x1f687d58a00 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   |   | `-DeclRefExpr 0x1f687d58948 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |   |-ImplicitCastExpr 0x1f687d58a60 <col:30> 'char **' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1f687d58968 <col:30> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |   | |   |   |-ImplicitCastExpr 0x1f687d58a78 <col:39> 'char **' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1f687d58988 <col:39> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |   | |   |   |-ImplicitCastExpr 0x1f687d58a90 <col:47> 'size_t *' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1f687d589a8 <col:47> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |   | |   |   |-ImplicitCastExpr 0x1f687d58aa8 <col:56> 'size_t *' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1f687d589c8 <col:56> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |   | |   |   `-CharacterLiteral 0x1f687d589e8 <col:64> 'int' 45
|   |   | |   `-ReturnStmt 0x1f687d58b00 <line:782:21, col:28>
|   |   | |     `-IntegerLiteral 0x1f687d58ad8 <col:28> 'int' 0
|   |   | `-CompoundStmt 0x1f687d58d20 <line:783:16, line:786:9>
|   |   |   `-IfStmt 0x1f687d58d08 <line:784:13, line:785:28>
|   |   |     |-UnaryOperator 0x1f687d58cb8 <line:784:17, col:67> 'int' prefix '!' cannot overflow
|   |   |     | `-CallExpr 0x1f687d58c10 <col:18, col:67> 'int'
|   |   |     |   |-ImplicitCastExpr 0x1f687d58bf8 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1f687d58b40 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |     |   |-ImplicitCastExpr 0x1f687d58c58 <col:30> 'char **' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1f687d58b60 <col:30> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |   |     |   |-ImplicitCastExpr 0x1f687d58c70 <col:39> 'char **' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1f687d58b80 <col:39> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |   |     |   |-ImplicitCastExpr 0x1f687d58c88 <col:47> 'size_t *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1f687d58ba0 <col:47> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |   |     |   |-ImplicitCastExpr 0x1f687d58ca0 <col:56> 'size_t *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1f687d58bc0 <col:56> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |   |     |   `-CharacterLiteral 0x1f687d58be0 <col:64> 'int' 43
|   |   |     `-ReturnStmt 0x1f687d58cf8 <line:785:21, col:28>
|   |   |       `-IntegerLiteral 0x1f687d58cd0 <col:28> 'int' 0
|   |   `-WhileStmt 0x1f687d59080 <line:787:9, line:791:9>
|   |     |-BinaryOperator 0x1f687d58dc0 <line:787:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1f687d58da8 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f687d58d60 <col:16> 'int' lvalue Var 0x1f687e03b50 'eplace' 'int'
|   |     | `-IntegerLiteral 0x1f687d58d80 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1f687d59068 <col:28, line:791:9>
|   |       `-IfStmt 0x1f687d59050 <line:788:13, line:790:24>
|   |         |-UnaryOperator 0x1f687d59000 <line:788:17, line:789:48> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x1f687d58f28 <line:788:18, line:789:48> 'int'
|   |         |   |-ImplicitCastExpr 0x1f687d58f10 <line:788:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1f687d58de0 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |         |   |-ImplicitCastExpr 0x1f687d58f70 <col:30> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f687d58e00 <col:30> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1f687d58f88 <col:39> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f687d58e20 <col:39> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1f687d58fa0 <col:47> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f687d58e40 <col:47> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |         |   |-ImplicitCastExpr 0x1f687d58fb8 <col:56> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f687d58e60 <col:56> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |         |   `-ImplicitCastExpr 0x1f687d58fe8 <line:789:30, col:47> 'int' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x1f687d58fd0 <col:30, col:47> 'char' <LValueToRValue>
|   |         |       `-ArraySubscriptExpr 0x1f687d58ef0 <col:30, col:47> 'char' lvalue
|   |         |         |-ImplicitCastExpr 0x1f687d58ed8 <col:30> 'char *' <ArrayToPointerDecay>
|   |         |         | `-DeclRefExpr 0x1f687d58e80 <col:30> 'char [20]' lvalue Var 0x1f687e03938 'econvert' 'char [20]'
|   |         |         `-UnaryOperator 0x1f687d58ec0 <col:39, col:41> 'int' prefix '--'
|   |         |           `-DeclRefExpr 0x1f687d58ea0 <col:41> 'int' lvalue Var 0x1f687e03b50 'eplace' 'int'
|   |         `-ReturnStmt 0x1f687d59040 <line:790:17, col:24>
|   |           `-IntegerLiteral 0x1f687d59018 <col:24> 'int' 0
|   |-WhileStmt 0x1f687d593b8 <line:794:5, line:798:5>
|   | |-BinaryOperator 0x1f687d59148 <line:794:12, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687d59130 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d590e8 <col:12> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   | | `-IntegerLiteral 0x1f687d59108 <col:21> 'int' 0
|   | `-CompoundStmt 0x1f687d59398 <col:24, line:798:5>
|   |   |-IfStmt 0x1f687d59348 <line:795:9, line:796:20>
|   |   | |-UnaryOperator 0x1f687d592f8 <line:795:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f687d59250 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f687d59238 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f687d59168 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f687de5e70 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f687d59298 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d591a0 <col:26> 'char **' lvalue ParmVar 0x1f687ea4ff8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687d592b0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d591c0 <col:35> 'char **' lvalue ParmVar 0x1f687ea5078 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f687d592c8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d591e0 <col:43> 'size_t *' lvalue ParmVar 0x1f687e02f60 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f687d592e0 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f687d59200 <col:52> 'size_t *' lvalue ParmVar 0x1f687e02fd8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f687d59220 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1f687d59338 <line:796:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687d59310 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f687d59380 <line:797:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1f687d59360 <col:11> 'int' lvalue Var 0x1f687e03c10 'padlen' 'int'
|   `-ReturnStmt 0x1f687d593f8 <line:799:5, col:12>
|     `-IntegerLiteral 0x1f687d593d0 <col:12> 'int' 1
|-FunctionDecl 0x1f687d598d8 prev 0x1f687de5e70 <line:804:1, line:845:1> line:805:1 used doapr_outch 'int (char **, char **, size_t *, size_t *, int)' static
| |-ParmVarDecl 0x1f687d595b8 <col:13, col:20> col:20 used sbuffer 'char **'
| |-ParmVarDecl 0x1f687d59638 <line:806:13, col:20> col:20 used buffer 'char **'
| |-ParmVarDecl 0x1f687d596b0 <col:28, col:36> col:36 used currlen 'size_t *'
| |-ParmVarDecl 0x1f687d59728 <col:45, col:53> col:53 used maxlen 'size_t *'
| |-ParmVarDecl 0x1f687d597a8 <col:61, col:65> col:65 used c 'int'
| `-CompoundStmt 0x1f687d5b818 <line:807:1, line:845:1>
|   |-CallExpr 0x1f687d59d30 <line:809:5, col:54> 'int'
|   | |-ImplicitCastExpr 0x1f687d59d18 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f687d59a90 <col:5> 'int ()' Function 0x1f687d599c8 'OPENSSL_assert' 'int ()'
|   | `-BinaryOperator 0x1f687d59cd0 <col:20, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '||'
|   |   |-BinaryOperator 0x1f687d59bb8 <.//openssl//file_jk/after\crypto\bio\b_print.c:809:20, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |   | |-ImplicitCastExpr 0x1f687d59b88 <.//openssl//file_jk/after\crypto\bio\b_print.c:809:20, col:21> 'char *' <LValueToRValue>
|   |   | | `-UnaryOperator 0x1f687d59ae8 <col:20, col:21> 'char *' lvalue prefix '*' cannot overflow
|   |   | |   `-ImplicitCastExpr 0x1f687d59ad0 <col:21> 'char **' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x1f687d59ab0 <col:21> 'char **' lvalue ParmVar 0x1f687d595b8 'sbuffer' 'char **'
|   |   | `-ImplicitCastExpr 0x1f687d59ba0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |   |   `-ParenExpr 0x1f687d59b68 <col:17, col:27> 'void *'
|   |   |     `-CStyleCastExpr 0x1f687d59b40 <col:18, col:26> 'void *' <NullToPointer>
|   |   |       `-IntegerLiteral 0x1f687d59b00 <col:26> 'int' 0
|   |   `-BinaryOperator 0x1f687d59cb0 <.//openssl//file_jk/after\crypto\bio\b_print.c:809:40, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |     |-ImplicitCastExpr 0x1f687d59c80 <.//openssl//file_jk/after\crypto\bio\b_print.c:809:40> 'char **' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1f687d59bd8 <col:40> 'char **' lvalue ParmVar 0x1f687d59638 'buffer' 'char **'
|   |     `-ImplicitCastExpr 0x1f687d59c98 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   |       `-ParenExpr 0x1f687d59c60 <col:17, col:27> 'void *'
|   |         `-CStyleCastExpr 0x1f687d59c38 <col:18, col:26> 'void *' <NullToPointer>
|   |           `-IntegerLiteral 0x1f687d59bf8 <col:26> 'int' 0
|   |-CallExpr 0x1f687d59e80 <.//openssl//file_jk/after\crypto\bio\b_print.c:812:5, col:39> 'int'
|   | |-ImplicitCastExpr 0x1f687d59e68 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f687d59d58 <col:5> 'int ()' Function 0x1f687d599c8 'OPENSSL_assert' 'int ()'
|   | `-BinaryOperator 0x1f687d59e48 <col:20, col:33> 'int' '<='
|   |   |-ImplicitCastExpr 0x1f687d59e18 <col:20, col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-UnaryOperator 0x1f687d59db0 <col:20, col:21> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   |   `-ImplicitCastExpr 0x1f687d59d98 <col:21> 'size_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f687d59d78 <col:21> 'size_t *' lvalue ParmVar 0x1f687d596b0 'currlen' 'size_t *'
|   |   `-ImplicitCastExpr 0x1f687d59e30 <col:32, col:33> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1f687d59e00 <col:32, col:33> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1f687d59de8 <col:33> 'size_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f687d59dc8 <col:33> 'size_t *' lvalue ParmVar 0x1f687d59728 'maxlen' 'size_t *'
|   |-IfStmt 0x1f687d5b268 <line:814:5, line:835:5>
|   | |-BinaryOperator 0x1f687d5a000 <line:814:9, col:32> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1f687d59fe8 <col:9> 'char **' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f687d59ea8 <col:9> 'char **' lvalue ParmVar 0x1f687d59638 'buffer' 'char **'
|   | | `-BinaryOperator 0x1f687d59fc8 <col:19, col:32> 'int' '=='
|   | |   |-ImplicitCastExpr 0x1f687d59f98 <col:19, col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   | `-UnaryOperator 0x1f687d59f30 <col:19, col:20> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |   |   `-ImplicitCastExpr 0x1f687d59f18 <col:20> 'size_t *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f687d59ef8 <col:20> 'size_t *' lvalue ParmVar 0x1f687d596b0 'currlen' 'size_t *'
|   | |   `-ImplicitCastExpr 0x1f687d59fb0 <col:31, col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   | |     `-UnaryOperator 0x1f687d59f80 <col:31, col:32> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1f687d59f68 <col:32> 'size_t *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1f687d59f48 <col:32> 'size_t *' lvalue ParmVar 0x1f687d59728 'maxlen' 'size_t *'
|   | `-CompoundStmt 0x1f687d5b240 <col:40, line:835:5>
|   |   |-IfStmt 0x1f687d5a0e8 <line:815:9, line:816:20>
|   |   | |-OpaqueValueExpr 0x1f687d5a0d0 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x1f687d5a0c0 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x1f687d5a098 <col:20> 'int' 0
|   |   |-CompoundAssignOperator 0x1f687d5a190 <line:818:9, line:802:21> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-UnaryOperator 0x1f687d5a138 <line:818:9, col:10> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1f687d5a120 <col:10> 'size_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1f687d5a100 <col:10> 'size_t *' lvalue ParmVar 0x1f687d59728 'maxlen' 'size_t *'
|   |   | `-ImplicitCastExpr 0x1f687d5a178 <line:802:21> 'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1f687d5a150 <col:21> 'int' 1024
|   |   `-IfStmt 0x1f687d5b218 <line:819:9, line:834:9> has_else
|   |     |-BinaryOperator 0x1f687d5a2c8 <line:819:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1f687d5a298 <.//openssl//file_jk/after\crypto\bio\b_print.c:819:13, col:14> 'char *' <LValueToRValue>
|   |     | | `-UnaryOperator 0x1f687d5a1f8 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     | |   `-ImplicitCastExpr 0x1f687d5a1e0 <col:14> 'char **' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x1f687d5a1c0 <col:14> 'char **' lvalue ParmVar 0x1f687d59638 'buffer' 'char **'
|   |     | `-ImplicitCastExpr 0x1f687d5a2b0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     |   `-ParenExpr 0x1f687d5a278 <col:17, col:27> 'void *'
|   |     |     `-CStyleCastExpr 0x1f687d5a250 <col:18, col:26> 'void *' <NullToPointer>
|   |     |       `-IntegerLiteral 0x1f687d5a210 <col:26> 'int' 0
|   |     |-CompoundStmt 0x1f687d5ac88 <.//openssl//file_jk/after\crypto\bio\b_print.c:819:30, line:828:9>
|   |     | |-BinaryOperator 0x1f687d5a508 <line:820:13, col:45> 'char *' '='
|   |     | | |-UnaryOperator 0x1f687d5a320 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     | | | `-ImplicitCastExpr 0x1f687d5a308 <col:14> 'char **' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x1f687d5a2e8 <col:14> 'char **' lvalue ParmVar 0x1f687d59638 'buffer' 'char **'
|   |     | | `-ImplicitCastExpr 0x1f687d5a4f0 <col:23, col:45> 'char *' <IntegralToPointer>
|   |     | |   `-CallExpr 0x1f687d5a4b0 <col:23, col:45> 'int'
|   |     | |     |-ImplicitCastExpr 0x1f687d5a498 <col:23> 'int (*)()' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x1f687d5a428 <col:23> 'int ()' Function 0x1f687d5a360 'OPENSSL_malloc' 'int ()'
|   |     | |     `-ImplicitCastExpr 0x1f687d5a4d8 <col:38, col:39> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       `-UnaryOperator 0x1f687d5a480 <col:38, col:39> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |         `-ImplicitCastExpr 0x1f687d5a468 <col:39> 'size_t *' <LValueToRValue>
|   |     | |           `-DeclRefExpr 0x1f687d5a448 <col:39> 'size_t *' lvalue ParmVar 0x1f687d59728 'maxlen' 'size_t *'
|   |     | |-IfStmt 0x1f687d5a688 <line:821:13, line:822:24>
|   |     | | |-BinaryOperator 0x1f687d5a630 <line:821:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |     | | | |-ImplicitCastExpr 0x1f687d5a600 <.//openssl//file_jk/after\crypto\bio\b_print.c:821:17, col:18> 'char *' <LValueToRValue>
|   |     | | | | `-UnaryOperator 0x1f687d5a560 <col:17, col:18> 'char *' lvalue prefix '*' cannot overflow
|   |     | | | |   `-ImplicitCastExpr 0x1f687d5a548 <col:18> 'char **' <LValueToRValue>
|   |     | | | |     `-DeclRefExpr 0x1f687d5a528 <col:18> 'char **' lvalue ParmVar 0x1f687d59638 'buffer' 'char **'
|   |     | | | `-ImplicitCastExpr 0x1f687d5a618 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     | | |   `-ParenExpr 0x1f687d5a5e0 <col:17, col:27> 'void *'
|   |     | | |     `-CStyleCastExpr 0x1f687d5a5b8 <col:18, col:26> 'void *' <NullToPointer>
|   |     | | |       `-IntegerLiteral 0x1f687d5a578 <col:26> 'int' 0
|   |     | | `-ReturnStmt 0x1f687d5a678 <.//openssl//file_jk/after\crypto\bio\b_print.c:822:17, col:24>
|   |     | |   `-IntegerLiteral 0x1f687d5a650 <col:24> 'int' 0
|   |     | |-IfStmt 0x1f687d5ab60 <line:823:13, line:826:13>
|   |     | | |-BinaryOperator 0x1f687d5a748 <line:823:17, col:28> 'int' '>'
|   |     | | | |-ImplicitCastExpr 0x1f687d5a718 <col:17, col:18> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | | `-UnaryOperator 0x1f687d5a6d8 <col:17, col:18> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | | | |   `-ImplicitCastExpr 0x1f687d5a6c0 <col:18> 'size_t *' <LValueToRValue>
|   |     | | | |     `-DeclRefExpr 0x1f687d5a6a0 <col:18> 'size_t *' lvalue ParmVar 0x1f687d596b0 'currlen' 'size_t *'
|   |     | | | `-ImplicitCastExpr 0x1f687d5a730 <col:28> 'unsigned long long' <IntegralCast>
|   |     | | |   `-IntegerLiteral 0x1f687d5a6f0 <col:28> 'int' 0
|   |     | | `-CompoundStmt 0x1f687d5ab40 <col:31, line:826:13>
|   |     | |   |-CallExpr 0x1f687d5a8c8 <line:824:17, col:48> 'int'
|   |     | |   | |-ImplicitCastExpr 0x1f687d5a8b0 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |     | |   | | `-DeclRefExpr 0x1f687d5a768 <col:17> 'int ()' Function 0x1f687d599c8 'OPENSSL_assert' 'int ()'
|   |     | |   | `-BinaryOperator 0x1f687d5a890 <col:32, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |     | |   |   |-ImplicitCastExpr 0x1f687d5a860 <.//openssl//file_jk/after\crypto\bio\b_print.c:824:32, col:33> 'char *' <LValueToRValue>
|   |     | |   |   | `-UnaryOperator 0x1f687d5a7c0 <col:32, col:33> 'char *' lvalue prefix '*' cannot overflow
|   |     | |   |   |   `-ImplicitCastExpr 0x1f687d5a7a8 <col:33> 'char **' <LValueToRValue>
|   |     | |   |   |     `-DeclRefExpr 0x1f687d5a788 <col:33> 'char **' lvalue ParmVar 0x1f687d595b8 'sbuffer' 'char **'
|   |     | |   |   `-ImplicitCastExpr 0x1f687d5a878 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     | |   |     `-ParenExpr 0x1f687d5a840 <col:17, col:27> 'void *'
|   |     | |   |       `-CStyleCastExpr 0x1f687d5a818 <col:18, col:26> 'void *' <NullToPointer>
|   |     | |   |         `-IntegerLiteral 0x1f687d5a7d8 <col:26> 'int' 0
|   |     | |   `-CallExpr 0x1f687d5aa90 <.//openssl//file_jk/after\crypto\bio\b_print.c:825:17, col:51> 'void *'
|   |     | |     |-ImplicitCastExpr 0x1f687d5aa78 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x1f687d5a8f0 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x1f687dab4a8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |     | |     |-ImplicitCastExpr 0x1f687d5aae0 <col:24, col:25> 'void *' <BitCast>
|   |     | |     | `-ImplicitCastExpr 0x1f687d5aac8 <col:24, col:25> 'char *' <LValueToRValue>
|   |     | |     |   `-UnaryOperator 0x1f687d5a948 <col:24, col:25> 'char *' lvalue prefix '*' cannot overflow
|   |     | |     |     `-ImplicitCastExpr 0x1f687d5a930 <col:25> 'char **' <LValueToRValue>
|   |     | |     |       `-DeclRefExpr 0x1f687d5a910 <col:25> 'char **' lvalue ParmVar 0x1f687d59638 'buffer' 'char **'
|   |     | |     |-ImplicitCastExpr 0x1f687d5ab10 <col:33, col:34> 'const void *' <BitCast>
|   |     | |     | `-ImplicitCastExpr 0x1f687d5aaf8 <col:33, col:34> 'char *' <LValueToRValue>
|   |     | |     |   `-UnaryOperator 0x1f687d5a998 <col:33, col:34> 'char *' lvalue prefix '*' cannot overflow
|   |     | |     |     `-ImplicitCastExpr 0x1f687d5a980 <col:34> 'char **' <LValueToRValue>
|   |     | |     |       `-DeclRefExpr 0x1f687d5a960 <col:34> 'char **' lvalue ParmVar 0x1f687d595b8 'sbuffer' 'char **'
|   |     | |     `-ImplicitCastExpr 0x1f687d5ab28 <col:43, col:44> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       `-UnaryOperator 0x1f687d5a9e8 <col:43, col:44> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |         `-ImplicitCastExpr 0x1f687d5a9d0 <col:44> 'size_t *' <LValueToRValue>
|   |     | |           `-DeclRefExpr 0x1f687d5a9b0 <col:44> 'size_t *' lvalue ParmVar 0x1f687d596b0 'currlen' 'size_t *'
|   |     | `-BinaryOperator 0x1f687d5ac68 <line:827:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'char *' '='
|   |     |   |-UnaryOperator 0x1f687d5abb0 <.//openssl//file_jk/after\crypto\bio\b_print.c:827:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     |   | `-ImplicitCastExpr 0x1f687d5ab98 <col:14> 'char **' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x1f687d5ab78 <col:14> 'char **' lvalue ParmVar 0x1f687d595b8 'sbuffer' 'char **'
|   |     |   `-ImplicitCastExpr 0x1f687d5ac50 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     |     `-ParenExpr 0x1f687d5ac30 <col:17, col:27> 'void *'
|   |     |       `-CStyleCastExpr 0x1f687d5ac08 <col:18, col:26> 'void *' <NullToPointer>
|   |     |         `-IntegerLiteral 0x1f687d5abc8 <col:26> 'int' 0
|   |     `-CompoundStmt 0x1f687d5b1e8 <.//openssl//file_jk/after\crypto\bio\b_print.c:828:16, line:834:9>
|   |       |-DeclStmt 0x1f687d5ad38 <line:829:13, col:25>
|   |       | `-VarDecl 0x1f687d5acd0 <col:13, col:19> col:19 used tmpbuf 'char *'
|   |       |-BinaryOperator 0x1f687d5afc8 <line:830:13, col:54> 'char *' '='
|   |       | |-DeclRefExpr 0x1f687d5ad50 <col:13> 'char *' lvalue Var 0x1f687d5acd0 'tmpbuf' 'char *'
|   |       | `-ImplicitCastExpr 0x1f687d5afb0 <col:22, col:54> 'char *' <IntegralToPointer>
|   |       |   `-CallExpr 0x1f687d5af50 <col:22, col:54> 'int'
|   |       |     |-ImplicitCastExpr 0x1f687d5af38 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |       |     | `-DeclRefExpr 0x1f687d5ae78 <col:22> 'int ()' Function 0x1f687d5adb0 'OPENSSL_realloc' 'int ()'
|   |       |     |-ImplicitCastExpr 0x1f687d5af80 <col:38, col:39> 'char *' <LValueToRValue>
|   |       |     | `-UnaryOperator 0x1f687d5aed0 <col:38, col:39> 'char *' lvalue prefix '*' cannot overflow
|   |       |     |   `-ImplicitCastExpr 0x1f687d5aeb8 <col:39> 'char **' <LValueToRValue>
|   |       |     |     `-DeclRefExpr 0x1f687d5ae98 <col:39> 'char **' lvalue ParmVar 0x1f687d59638 'buffer' 'char **'
|   |       |     `-ImplicitCastExpr 0x1f687d5af98 <col:47, col:48> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |       `-UnaryOperator 0x1f687d5af20 <col:47, col:48> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |         `-ImplicitCastExpr 0x1f687d5af08 <col:48> 'size_t *' <LValueToRValue>
|   |       |           `-DeclRefExpr 0x1f687d5aee8 <col:48> 'size_t *' lvalue ParmVar 0x1f687d59728 'maxlen' 'size_t *'
|   |       |-IfStmt 0x1f687d5b118 <line:831:13, line:832:24>
|   |       | |-BinaryOperator 0x1f687d5b0c0 <line:831:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |       | | |-ImplicitCastExpr 0x1f687d5b090 <.//openssl//file_jk/after\crypto\bio\b_print.c:831:17> 'char *' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x1f687d5afe8 <col:17> 'char *' lvalue Var 0x1f687d5acd0 'tmpbuf' 'char *'
|   |       | | `-ImplicitCastExpr 0x1f687d5b0a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |       | |   `-ParenExpr 0x1f687d5b070 <col:17, col:27> 'void *'
|   |       | |     `-CStyleCastExpr 0x1f687d5b048 <col:18, col:26> 'void *' <NullToPointer>
|   |       | |       `-IntegerLiteral 0x1f687d5b008 <col:26> 'int' 0
|   |       | `-ReturnStmt 0x1f687d5b108 <.//openssl//file_jk/after\crypto\bio\b_print.c:832:17, col:24>
|   |       |   `-IntegerLiteral 0x1f687d5b0e0 <col:24> 'int' 0
|   |       `-BinaryOperator 0x1f687d5b1c8 <line:833:13, col:23> 'char *' '='
|   |         |-UnaryOperator 0x1f687d5b168 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |         | `-ImplicitCastExpr 0x1f687d5b150 <col:14> 'char **' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x1f687d5b130 <col:14> 'char **' lvalue ParmVar 0x1f687d59638 'buffer' 'char **'
|   |         `-ImplicitCastExpr 0x1f687d5b1b0 <col:23> 'char *' <LValueToRValue>
|   |           `-DeclRefExpr 0x1f687d5b180 <col:23> 'char *' lvalue Var 0x1f687d5acd0 'tmpbuf' 'char *'
|   |-IfStmt 0x1f687d5b798 <line:837:5, line:842:5>
|   | |-BinaryOperator 0x1f687d5b350 <line:837:9, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f687d5b320 <col:9, col:10> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-UnaryOperator 0x1f687d5b2b8 <col:9, col:10> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | |   `-ImplicitCastExpr 0x1f687d5b2a0 <col:10> 'size_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1f687d5b280 <col:10> 'size_t *' lvalue ParmVar 0x1f687d596b0 'currlen' 'size_t *'
|   | | `-ImplicitCastExpr 0x1f687d5b338 <col:20, col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-UnaryOperator 0x1f687d5b308 <col:20, col:21> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x1f687d5b2f0 <col:21> 'size_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1f687d5b2d0 <col:21> 'size_t *' lvalue ParmVar 0x1f687d59728 'maxlen' 'size_t *'
|   | `-CompoundStmt 0x1f687d5b780 <col:29, line:842:5>
|   |   `-IfStmt 0x1f687d5b758 <line:838:9, line:841:45> has_else
|   |     |-ImplicitCastExpr 0x1f687d5b3c0 <line:838:13, col:14> 'char *' <LValueToRValue>
|   |     | `-UnaryOperator 0x1f687d5b3a8 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     |   `-ImplicitCastExpr 0x1f687d5b390 <col:14> 'char **' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x1f687d5b370 <col:14> 'char **' lvalue ParmVar 0x1f687d595b8 'sbuffer' 'char **'
|   |     |-BinaryOperator 0x1f687d5b578 <line:839:13, col:46> 'char' '='
|   |     | |-ArraySubscriptExpr 0x1f687d5b4e8 <col:13, col:36> 'char' lvalue
|   |     | | |-ImplicitCastExpr 0x1f687d5b4d0 <col:13, col:22> 'char *' <LValueToRValue>
|   |     | | | `-ParenExpr 0x1f687d5b428 <col:13, col:22> 'char *' lvalue
|   |     | | |   `-UnaryOperator 0x1f687d5b410 <col:14, col:15> 'char *' lvalue prefix '*' cannot overflow
|   |     | | |     `-ImplicitCastExpr 0x1f687d5b3f8 <col:15> 'char **' <LValueToRValue>
|   |     | | |       `-DeclRefExpr 0x1f687d5b3d8 <col:15> 'char **' lvalue ParmVar 0x1f687d595b8 'sbuffer' 'char **'
|   |     | | `-UnaryOperator 0x1f687d5b4b8 <col:24, col:34> 'size_t':'unsigned long long' postfix '++'
|   |     | |   `-ParenExpr 0x1f687d5b498 <col:24, col:33> 'size_t':'unsigned long long' lvalue
|   |     | |     `-UnaryOperator 0x1f687d5b480 <col:25, col:26> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |       `-ImplicitCastExpr 0x1f687d5b468 <col:26> 'size_t *' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x1f687d5b448 <col:26> 'size_t *' lvalue ParmVar 0x1f687d596b0 'currlen' 'size_t *'
|   |     | `-CStyleCastExpr 0x1f687d5b550 <col:40, col:46> 'char' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x1f687d5b538 <col:46> 'int' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x1f687d5b508 <col:46> 'int' lvalue ParmVar 0x1f687d597a8 'c' 'int'
|   |     `-BinaryOperator 0x1f687d5b738 <line:841:13, col:45> 'char' '='
|   |       |-ArraySubscriptExpr 0x1f687d5b6a8 <col:13, col:35> 'char' lvalue
|   |       | |-ImplicitCastExpr 0x1f687d5b690 <col:13, col:21> 'char *' <LValueToRValue>
|   |       | | `-ParenExpr 0x1f687d5b5e8 <col:13, col:21> 'char *' lvalue
|   |       | |   `-UnaryOperator 0x1f687d5b5d0 <col:14, col:15> 'char *' lvalue prefix '*' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x1f687d5b5b8 <col:15> 'char **' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x1f687d5b598 <col:15> 'char **' lvalue ParmVar 0x1f687d59638 'buffer' 'char **'
|   |       | `-UnaryOperator 0x1f687d5b678 <col:23, col:33> 'size_t':'unsigned long long' postfix '++'
|   |       |   `-ParenExpr 0x1f687d5b658 <col:23, col:32> 'size_t':'unsigned long long' lvalue
|   |       |     `-UnaryOperator 0x1f687d5b640 <col:24, col:25> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |       `-ImplicitCastExpr 0x1f687d5b628 <col:25> 'size_t *' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x1f687d5b608 <col:25> 'size_t *' lvalue ParmVar 0x1f687d596b0 'currlen' 'size_t *'
|   |       `-CStyleCastExpr 0x1f687d5b710 <col:39, col:45> 'char' <IntegralCast>
|   |         `-ImplicitCastExpr 0x1f687d5b6f8 <col:45> 'int' <LValueToRValue> part_of_explicit_cast
|   |           `-DeclRefExpr 0x1f687d5b6c8 <col:45> 'int' lvalue ParmVar 0x1f687d597a8 'c' 'int'
|   `-ReturnStmt 0x1f687d5b7d8 <line:844:5, col:12>
|     `-IntegerLiteral 0x1f687d5b7b0 <col:12> 'int' 1
|-FunctionDecl 0x1f687d5b9c8 <line:849:1, line:860:1> line:849:5 invalid BIO_printf 'int (int *, const char *, ...)'
| |-ParmVarDecl 0x1f687d5b868 <col:16, col:21> col:21 invalid bio 'int *'
| |-ParmVarDecl 0x1f687d5b8e8 <col:26, col:38> col:38 used format 'const char *'
| |-CompoundStmt 0x1f687d5c218 <line:850:1, line:860:1>
| | |-DeclStmt 0x1f687d5bb08 <line:851:5, col:17>
| | | `-VarDecl 0x1f687d5baa0 <col:5, col:13> col:13 used args 'va_list':'char *'
| | |-DeclStmt 0x1f687d5bba0 <line:852:5, col:12>
| | | `-VarDecl 0x1f687d5bb38 <col:5, col:9> col:9 used ret 'int'
| | |-CallExpr 0x1f687d5bde0 <line:854:5, col:26> 'void'
| | | |-ImplicitCastExpr 0x1f687d5bdc8 <col:5> 'void (*)(__builtin_va_list &, ...)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1f687d5bd20 <col:5> 'void (__builtin_va_list &, ...)' Function 0x1f687d5bbb8 'va_start' 'void (__builtin_va_list &, ...)'
| | | |-DeclRefExpr 0x1f687d5bd58 <col:14> 'va_list':'char *' lvalue Var 0x1f687d5baa0 'args' 'va_list':'char *'
| | | `-ImplicitCastExpr 0x1f687d5be10 <col:20> 'const char *' <LValueToRValue>
| | |   `-DeclRefExpr 0x1f687d5bd90 <col:20> 'const char *' lvalue ParmVar 0x1f687d5b8e8 'format' 'const char *'
| | |-CallExpr 0x1f687d5c188 <line:858:5, col:16> 'void'
| | | |-ImplicitCastExpr 0x1f687d5c170 <col:5> 'void (*)(__builtin_va_list &)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1f687d5c118 <col:5> 'void (__builtin_va_list &)' Function 0x1f687d5bfb0 'va_end' 'void (__builtin_va_list &)'
| | | `-DeclRefExpr 0x1f687d5c150 <col:12> 'va_list':'char *' lvalue Var 0x1f687d5baa0 'args' 'va_list':'char *'
| | `-ReturnStmt 0x1f687d5c208 <line:859:5, col:16>
| |   `-ImplicitCastExpr 0x1f687d5c1f0 <col:12, col:16> 'int' <LValueToRValue>
| |     `-ParenExpr 0x1f687d5c1d0 <col:12, col:16> 'int' lvalue
| |       `-DeclRefExpr 0x1f687d5c1b0 <col:13> 'int' lvalue Var 0x1f687d5bb38 'ret' 'int'
| `-FullComment 0x1f687d5fa98 <line:847:4, col:75>
|   `-ParagraphComment 0x1f687d5fa70 <col:4, col:75>
|     `-TextComment 0x1f687d5fa48 <col:4, col:75> Text="************************************************************************"
|-FunctionDecl 0x1f687d5bbb8 <line:854:5> col:5 implicit used va_start 'void (__builtin_va_list &, ...)' extern
| |-ParmVarDecl 0x1f687d5bc58 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1f687d5bcc8 <col:5> Implicit
|-FunctionDecl 0x1f687d5bfb0 <line:858:5> col:5 implicit used va_end 'void (__builtin_va_list &)' extern
| |-ParmVarDecl 0x1f687d5c050 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1f687d5c0c0 <col:5> Implicit
|-FunctionDecl 0x1f687d5c490 <line:862:1, line:887:1> line:862:5 invalid BIO_vprintf 'int (int *, const char *, va_list)'
| |-ParmVarDecl 0x1f687d5c268 <col:17, col:22> col:22 invalid bio 'int *'
| |-ParmVarDecl 0x1f687d5c2e8 <col:27, col:39> col:39 used format 'const char *'
| |-ParmVarDecl 0x1f687d5c360 <col:47, col:55> col:55 used args 'va_list':'char *'
| `-CompoundStmt 0x1f687d5d600 <line:863:1, line:887:1>
|   |-DeclStmt 0x1f687d5c5e0 <line:864:5, col:12>
|   | `-VarDecl 0x1f687d5c578 <col:5, col:9> col:9 used ret 'int'
|   |-DeclStmt 0x1f687d5c670 <line:865:5, col:18>
|   | `-VarDecl 0x1f687d5c608 <col:5, col:12> col:12 used retlen 'size_t':'unsigned long long'
|   |-DeclStmt 0x1f687d5c7d0 <line:866:5, col:27>
|   | `-VarDecl 0x1f687d5c768 <col:5, col:26> col:10 used hugebuf 'char [2048]'
|   |-DeclStmt 0x1f687d5c8b8 <line:869:5, col:29>
|   | `-VarDecl 0x1f687d5c800 <col:5, col:22> col:11 used hugebufp 'char *' cinit
|   |   `-ImplicitCastExpr 0x1f687d5c8a0 <col:22> 'char *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1f687d5c868 <col:22> 'char [2048]' lvalue Var 0x1f687d5c768 'hugebuf' 'char [2048]'
|   |-DeclStmt 0x1f687d5c9a8 <line:870:5, col:41>
|   | `-VarDecl 0x1f687d5c8e0 <col:5, col:40> col:12 used hugebufsize 'size_t':'unsigned long long' cinit
|   |   `-UnaryExprOrTypeTraitExpr 0x1f687d5c988 <col:26, col:40> 'unsigned long long' sizeof
|   |     `-ParenExpr 0x1f687d5c968 <col:32, col:40> 'char [2048]' lvalue
|   |       `-DeclRefExpr 0x1f687d5c948 <col:33> 'char [2048]' lvalue Var 0x1f687d5c768 'hugebuf' 'char [2048]' non_odr_use_unevaluated
|   |-DeclStmt 0x1f687d5cae0 <line:871:5, col:24>
|   | `-VarDecl 0x1f687d5c9d8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> .//openssl//file_jk/after\crypto\bio\b_print.c:871:11 used dynbuf 'char *' cinit
|   |   `-ImplicitCastExpr 0x1f687d5cac8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     `-ParenExpr 0x1f687d5caa8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1f687d5ca80 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1f687d5ca40 <col:26> 'int' 0
|   |-DeclStmt 0x1f687d5cb78 <.//openssl//file_jk/after\crypto\bio\b_print.c:872:5, col:16>
|   | `-VarDecl 0x1f687d5cb10 <col:5, col:9> col:9 used ignored 'int'
|   |-BinaryOperator 0x1f687d5cc68 <line:874:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'char *' '='
|   | |-DeclRefExpr 0x1f687d5cb90 <.//openssl//file_jk/after\crypto\bio\b_print.c:874:5> 'char *' lvalue Var 0x1f687d5c9d8 'dynbuf' 'char *'
|   | `-ImplicitCastExpr 0x1f687d5cc50 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |   `-ParenExpr 0x1f687d5cc30 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x1f687d5cc08 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x1f687d5cbc8 <col:26> 'int' 0
|   |-IfStmt 0x1f687d5d198 <.//openssl//file_jk/after\crypto\bio\b_print.c:875:5, line:879:5>
|   | |-UnaryOperator 0x1f687d5cf88 <line:875:9, line:876:21> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1f687d5cf00 <line:875:10, line:876:21> 'int'
|   | |   |-ImplicitCastExpr 0x1f687d5cee8 <line:875:10> 'int (*)(char **, char **, size_t *, size_t *, int *, const char *, va_list)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1f687d5cc88 <col:10> 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' Function 0x1f687de6a50 '_dopr' 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)'
|   | |   |-UnaryOperator 0x1f687d5cce0 <col:16, col:17> 'char **' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f687d5cca8 <col:17> 'char *' lvalue Var 0x1f687d5c800 'hugebufp' 'char *'
|   | |   |-UnaryOperator 0x1f687d5cd18 <col:27, col:28> 'char **' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f687d5ccf8 <col:28> 'char *' lvalue Var 0x1f687d5c9d8 'dynbuf' 'char *'
|   | |   |-UnaryOperator 0x1f687d5cd68 <col:36, col:37> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f687d5cd30 <col:37> 'size_t':'unsigned long long' lvalue Var 0x1f687d5c8e0 'hugebufsize' 'size_t':'unsigned long long'
|   | |   |-UnaryOperator 0x1f687d5cdb8 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f687d5cd80 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1f687d5c608 'retlen' 'size_t':'unsigned long long'
|   | |   |-UnaryOperator 0x1f687d5ce08 <col:59, col:60> 'int *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f687d5cdd0 <col:60> 'int' lvalue Var 0x1f687d5cb10 'ignored' 'int'
|   | |   |-ImplicitCastExpr 0x1f687d5cf58 <col:69> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1f687d5ce20 <col:69> 'const char *' lvalue ParmVar 0x1f687d5c2e8 'format' 'const char *'
|   | |   `-ImplicitCastExpr 0x1f687d5cf70 <line:876:17> 'va_list':'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1f687d5ce58 <col:17> 'va_list':'char *' lvalue ParmVar 0x1f687d5c360 'args' 'va_list':'char *'
|   | `-CompoundStmt 0x1f687d5d178 <col:24, line:879:5>
|   |   |-CallExpr 0x1f687d5d0e8 <line:877:9, col:28> 'int'
|   |   | |-ImplicitCastExpr 0x1f687d5d0d0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1f687d5d090 <col:9> 'int ()' Function 0x1f687d5cfc8 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x1f687d5d110 <col:22> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1f687d5d0b0 <col:22> 'char *' lvalue Var 0x1f687d5c9d8 'dynbuf' 'char *'
|   |   `-ReturnStmt 0x1f687d5d168 <line:878:9, col:17>
|   |     `-UnaryOperator 0x1f687d5d150 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1f687d5d128 <col:17> 'int' 1
|   |-IfStmt 0x1f687d5d570 <line:880:5, line:885:5> has_else
|   | |-ImplicitCastExpr 0x1f687d5d1e0 <line:880:9> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f687d5d1c0 <col:9> 'char *' lvalue Var 0x1f687d5c9d8 'dynbuf' 'char *'
|   | |-CompoundStmt 0x1f687d5d470 <col:17, line:883:5>
|   | | `-CallExpr 0x1f687d5d430 <line:882:9, col:28> 'int'
|   | |   |-ImplicitCastExpr 0x1f687d5d418 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1f687d5d3d8 <col:9> 'int ()' Function 0x1f687d5cfc8 'OPENSSL_free' 'int ()'
|   | |   `-ImplicitCastExpr 0x1f687d5d458 <col:22> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1f687d5d3f8 <col:22> 'char *' lvalue Var 0x1f687d5c9d8 'dynbuf' 'char *'
|   | `-CompoundStmt 0x1f687d5d560 <line:883:12, line:885:5>
|   `-ReturnStmt 0x1f687d5d5f0 <line:886:5, col:16>
|     `-ImplicitCastExpr 0x1f687d5d5d8 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1f687d5d5b8 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1f687d5d598 <col:13> 'int' lvalue Var 0x1f687d5c578 'ret' 'int'
|-FunctionDecl 0x1f687d5d868 <line:895:1, line:906:1> line:895:5 BIO_snprintf 'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f687d5d680 <col:18, col:24> col:24 used buf 'char *'
| |-ParmVarDecl 0x1f687d5d6f8 <col:29, col:36> col:36 used n 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f687d5d778 <col:39, col:51> col:51 used format 'const char *'
| `-CompoundStmt 0x1f687d5dec0 <line:896:1, line:906:1>
|   |-DeclStmt 0x1f687d5d9b0 <line:897:5, col:17>
|   | `-VarDecl 0x1f687d5d948 <col:5, col:13> col:13 used args 'va_list':'char *'
|   |-DeclStmt 0x1f687d5da48 <line:898:5, col:12>
|   | `-VarDecl 0x1f687d5d9e0 <col:5, col:9> col:9 used ret 'int'
|   |-CallExpr 0x1f687d5daf0 <line:900:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1f687d5dad8 <col:5> 'void (*)(__builtin_va_list &, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f687d5da60 <col:5> 'void (__builtin_va_list &, ...)' Function 0x1f687d5bbb8 'va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1f687d5da80 <col:14> 'va_list':'char *' lvalue Var 0x1f687d5d948 'args' 'va_list':'char *'
|   | `-ImplicitCastExpr 0x1f687d5db20 <col:20> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f687d5dab8 <col:20> 'const char *' lvalue ParmVar 0x1f687d5d778 'format' 'const char *'
|   |-BinaryOperator 0x1f687d5ddb8 <line:902:5, col:45> 'int' '='
|   | |-DeclRefExpr 0x1f687d5db38 <col:5> 'int' lvalue Var 0x1f687d5d9e0 'ret' 'int'
|   | `-CallExpr 0x1f687d5dd18 <col:11, col:45> 'int'
|   |   |-ImplicitCastExpr 0x1f687d5dd00 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f687d5dc60 <col:11> 'int ()' Function 0x1f687d5db98 'BIO_vsnprintf' 'int ()'
|   |   |-ImplicitCastExpr 0x1f687d5dd58 <col:25> 'char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687d5dc80 <col:25> 'char *' lvalue ParmVar 0x1f687d5d680 'buf' 'char *'
|   |   |-ImplicitCastExpr 0x1f687d5dd70 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687d5dca0 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x1f687d5d6f8 'n' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1f687d5dd88 <col:33> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f687d5dcc0 <col:33> 'const char *' lvalue ParmVar 0x1f687d5d778 'format' 'const char *'
|   |   `-ImplicitCastExpr 0x1f687d5dda0 <col:41> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f687d5dce0 <col:41> 'va_list':'char *' lvalue Var 0x1f687d5d948 'args' 'va_list':'char *'
|   |-CallExpr 0x1f687d5de30 <line:904:5, col:16> 'void'
|   | |-ImplicitCastExpr 0x1f687d5de18 <col:5> 'void (*)(__builtin_va_list &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f687d5ddd8 <col:5> 'void (__builtin_va_list &)' Function 0x1f687d5bfb0 'va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1f687d5ddf8 <col:12> 'va_list':'char *' lvalue Var 0x1f687d5d948 'args' 'va_list':'char *'
|   `-ReturnStmt 0x1f687d5deb0 <line:905:5, col:16>
|     `-ImplicitCastExpr 0x1f687d5de98 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1f687d5de78 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1f687d5de58 <col:13> 'int' lvalue Var 0x1f687d5d9e0 'ret' 'int'
`-FunctionDecl 0x1f687d5e198 prev 0x1f687d5db98 <line:908:1, line:926:1> line:908:5 used BIO_vsnprintf 'int (char *, size_t, const char *, va_list)'
  |-ParmVarDecl 0x1f687d5df18 <col:19, col:25> col:25 used buf 'char *'
  |-ParmVarDecl 0x1f687d5df90 <col:30, col:37> col:37 used n 'size_t':'unsigned long long'
  |-ParmVarDecl 0x1f687d5e010 <col:40, col:52> col:52 used format 'const char *'
  |-ParmVarDecl 0x1f687d5e088 <col:60, col:68> col:68 used args 'va_list':'char *'
  `-CompoundStmt 0x1f687d5e840 <line:909:1, line:926:1>
    |-DeclStmt 0x1f687d5e2d0 <line:910:5, col:18>
    | `-VarDecl 0x1f687d5e268 <col:5, col:12> col:12 used retlen 'size_t':'unsigned long long'
    |-DeclStmt 0x1f687d5e368 <line:911:5, col:18>
    | `-VarDecl 0x1f687d5e300 <col:5, col:9> col:9 used truncated 'int'
    |-IfStmt 0x1f687d5e698 <line:913:5, line:914:17>
    | |-UnaryOperator 0x1f687d5e630 <line:913:8, col:64> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x1f687d5e590 <col:9, col:64> 'int'
    | |   |-ImplicitCastExpr 0x1f687d5e578 <col:9> 'int (*)(char **, char **, size_t *, size_t *, int *, const char *, va_list)' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x1f687d5e380 <col:9> 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' Function 0x1f687de6a50 '_dopr' 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)'
    | |   |-UnaryOperator 0x1f687d5e3c0 <col:15, col:16> 'char **' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1f687d5e3a0 <col:16> 'char *' lvalue ParmVar 0x1f687d5df18 'buf' 'char *'
    | |   |-ImplicitCastExpr 0x1f687d5e5e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <NullToPointer>
    | |   | `-ParenExpr 0x1f687d5e440 <col:17, col:27> 'void *'
    | |   |   `-CStyleCastExpr 0x1f687d5e418 <col:18, col:26> 'void *' <NullToPointer>
    | |   |     `-IntegerLiteral 0x1f687d5e3d8 <col:26> 'int' 0
    | |   |-UnaryOperator 0x1f687d5e480 <.//openssl//file_jk/after\crypto\bio\b_print.c:913:27, col:28> 'size_t *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1f687d5e460 <col:28> 'size_t':'unsigned long long' lvalue ParmVar 0x1f687d5df90 'n' 'size_t':'unsigned long long'
    | |   |-UnaryOperator 0x1f687d5e4d0 <col:31, col:32> 'size_t *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1f687d5e498 <col:32> 'size_t':'unsigned long long' lvalue Var 0x1f687d5e268 'retlen' 'size_t':'unsigned long long'
    | |   |-UnaryOperator 0x1f687d5e520 <col:40, col:41> 'int *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1f687d5e4e8 <col:41> 'int' lvalue Var 0x1f687d5e300 'truncated' 'int'
    | |   |-ImplicitCastExpr 0x1f687d5e600 <col:52> 'const char *' <LValueToRValue>
    | |   | `-DeclRefExpr 0x1f687d5e538 <col:52> 'const char *' lvalue ParmVar 0x1f687d5e010 'format' 'const char *'
    | |   `-ImplicitCastExpr 0x1f687d5e618 <col:60> 'va_list':'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1f687d5e558 <col:60> 'va_list':'char *' lvalue ParmVar 0x1f687d5e088 'args' 'va_list':'char *'
    | `-ReturnStmt 0x1f687d5e688 <line:914:9, col:17>
    |   `-UnaryOperator 0x1f687d5e670 <col:16, col:17> 'int' prefix '-'
    |     `-IntegerLiteral 0x1f687d5e648 <col:17> 'int' 1
    `-IfStmt 0x1f687d5e818 <line:916:5, line:925:9> has_else
      |-ImplicitCastExpr 0x1f687d5e6d0 <line:916:9> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x1f687d5e6b0 <col:9> 'int' lvalue Var 0x1f687d5e300 'truncated' 'int'
      |-ReturnStmt 0x1f687d5e728 <line:923:9, col:17>
      | `-UnaryOperator 0x1f687d5e710 <col:16, col:17> 'int' prefix '-'
      |   `-IntegerLiteral 0x1f687d5e6e8 <col:17> 'int' 1
      `-NullStmt 0x1f687d5e810 <line:925:9>
