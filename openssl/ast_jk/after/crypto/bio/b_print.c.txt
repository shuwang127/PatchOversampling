TranslationUnitDecl 0x1f84418af48 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1f84418b7e0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1f84418b4e0 '__int128'
|-TypedefDecl 0x1f84418b850 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1f84418b500 'unsigned __int128'
|-TypedefDecl 0x1f84418bb88 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1f84418b940 'struct __NSConstantString_tag'
|   `-Record 0x1f84418b8a8 '__NSConstantString_tag'
|-TypedefDecl 0x1f84418bbf8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1f84418b120 'unsigned long long'
|-TypedefDecl 0x1f84418bc90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1f84418bc50 'char *'
|   `-BuiltinType 0x1f84418afe0 'char'
|-TypedefDecl 0x1f84418bd00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1f84418bc50 'char *'
|   `-BuiltinType 0x1f84418afe0 'char'
|-TypedefDecl 0x1f84418bdc0 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1f84418b120 'unsigned long long'
|-TypedefDecl 0x1f84418be30 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1f84418bc50 'char *'
|   `-BuiltinType 0x1f84418afe0 'char'
|-FunctionDecl 0x1f845ce1410 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1f845ce14b0 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1f845ce1520 <col:21> Implicit
|-FunctionDecl 0x1f845ce1578 prev 0x1f845ce1410 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1f845ce12a0 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1f845ce1668 <col:21> Inherited Implicit
|-TypedefDecl 0x1f845ce16a8 prev 0x1f84418bbf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1f84418b120 'unsigned long long'
|-TypedefDecl 0x1f845ce1750 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1f845ce1720 'size_t' sugar
|   |-Typedef 0x1f845ce16a8 'size_t'
|   `-BuiltinType 0x1f84418b120 'unsigned long long'
|-TypedefDecl 0x1f845ce17c0 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1f84418b080 'long long'
|-TypedefDecl 0x1f845ce1830 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1f84418b080 'long long'
|-TypedefDecl 0x1f845ce18a0 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1f84418b0c0 'unsigned short'
|-TypedefDecl 0x1f845ce1910 <line:541:1, col:24> col:24 referenced wint_t 'unsigned short'
| `-BuiltinType 0x1f84418b0c0 'unsigned short'
|-TypedefDecl 0x1f845ce1980 <line:542:1, col:24> col:24 referenced wctype_t 'unsigned short'
| `-BuiltinType 0x1f84418b0c0 'unsigned short'
|-TypedefDecl 0x1f845ce19f0 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x1f84418b040 'int'
|-TypedefDecl 0x1f845ce1a60 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1f84418b060 'long'
|-TypedefDecl 0x1f845ce1ad0 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1f84418b080 'long long'
|-TypedefDecl 0x1f845ce1b60 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1f845ce1b30 '__time64_t' sugar
|   |-Typedef 0x1f845ce1ad0 '__time64_t'
|   `-BuiltinType 0x1f84418b080 'long long'
|-FunctionDecl 0x1f845ce1cd8 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1f845ce1ef8 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1f845d1b1a0 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1f845ce2038 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1f845ce20b0 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1f845ce2128 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1f845ce21a8 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1f845d1af40 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1f845d1b280 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1f845d1b340 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1f845d1b4b0 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1f845d1b460 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1f845d1b400 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1f845d1b320 'struct threadlocaleinfostruct'
|       `-Record 0x1f845d2a030 'threadlocaleinfostruct'
|-TypedefDecl 0x1f845d1b5c0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1f845d1b570 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1f845d1b510 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1f845d1b3e0 'struct threadmbcinfostruct'
|       `-Record 0x1f845d1b340 'threadmbcinfostruct'
|-RecordDecl 0x1f845d1b618 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1f845d1b6d0 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1f845d1b790 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f845d1b820 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1f845d1b8b0 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1f845d1b968 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1f845d1b910 'struct localeinfo_struct' sugar
|   `-RecordType 0x1f845d1b770 'struct localeinfo_struct'
|     `-Record 0x1f845d1b6d0 'localeinfo_struct'
|-TypedefDecl 0x1f845d1ba40 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1f845d1b9f0 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1f845d1b910 'struct localeinfo_struct' sugar
|     `-RecordType 0x1f845d1b770 'struct localeinfo_struct'
|       `-Record 0x1f845d1b6d0 'localeinfo_struct'
|-RecordDecl 0x1f845d1bab8 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1f845d1bb70 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f845d1bbe8 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1f845d1bca8 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1f845d1bd40 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1f845d1bdb0 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1f845d1be68 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1f845d1be10 'struct localerefcount' sugar
|   `-RecordType 0x1f845d1bb50 'struct localerefcount'
|     `-Record 0x1f845d1bab8 'localerefcount'
|-RecordDecl 0x1f845d2a030 prev 0x1f845d1b280 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1f845d2a0b0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f845d2a128 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1f845d2a198 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1f845d2a208 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1f845d2a278 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1f845d2a438 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1f845d2a4a8 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1f845d2a518 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1f845d2a588 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1f845d2a5f8 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1f845d2a668 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1f845d2a6c0 parent 0x1f84418af48 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1f845d2a850 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1f845d2a8c0 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1f845d2a930 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1f845d2a9a0 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1f845d2aa40 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1f845d2aab0 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1f845d2abc0 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1f845d2acf8 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1f845d2ada8 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1f845d2ad50 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1f845d1b320 'struct threadlocaleinfostruct'
|     `-Record 0x1f845d2a030 'threadlocaleinfostruct'
|-RecordDecl 0x1f845d2ae40 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:63:1, line:72:9> line:63:8 struct _iobuf definition
| |-MaxFieldAlignmentAttr 0x1f845d2af00 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f845d2af78 <line:64:9, col:15> col:15 _ptr 'char *'
| |-FieldDecl 0x1f845d29020 <line:65:9, col:15> col:15 _cnt 'int'
| |-FieldDecl 0x1f845d29090 <line:66:9, col:15> col:15 _base 'char *'
| |-FieldDecl 0x1f845d29100 <line:67:9, col:15> col:15 _flag 'int'
| |-FieldDecl 0x1f845d29170 <line:68:9, col:15> col:15 _file 'int'
| |-FieldDecl 0x1f845d291e0 <line:69:9, col:15> col:15 _charbuf 'int'
| |-FieldDecl 0x1f845d29250 <line:70:9, col:15> col:15 _bufsiz 'int'
| `-FieldDecl 0x1f845d292c0 <line:71:9, col:15> col:15 _tmpfname 'char *'
|-TypedefDecl 0x1f845d29370 <line:73:1, col:23> col:23 referenced FILE 'struct _iobuf':'struct _iobuf'
| `-ElaboratedType 0x1f845d29320 'struct _iobuf' sugar
|   `-RecordType 0x1f845d2aee0 'struct _iobuf'
|     `-Record 0x1f845d2ae40 '_iobuf'
|-FunctionDecl 0x1f845d295a8 <line:137:9, col:39> col:24 __iob_func 'FILE *(void) __attribute__((cdecl))':'FILE *(void)'
|-TypedefDecl 0x1f845d29678 <line:144:1, col:17> col:17 referenced fpos_t 'long long'
| `-BuiltinType 0x1f84418b080 'long long'
|-FunctionDecl 0x1f845d29858 <line:175:24, col:65> col:36 _filbuf 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d296e0 <col:52, col:59> col:59 _File 'FILE *'
|-FunctionDecl 0x1f845d29b50 <line:176:28, col:82> col:40 _flsbuf 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f845d29930 <col:53, col:57> col:57 _Ch 'int'
| `-ParmVarDecl 0x1f845d299a8 <col:70, col:77> col:77 _File 'FILE *'
|-FunctionDecl 0x1f845d29f00 <line:178:24, col:121> col:39 _fsopen 'FILE *(const char *, const char *, int) __attribute__((cdecl))':'FILE *(const char *, const char *, int)'
| |-ParmVarDecl 0x1f845d29c30 <col:54, col:67> col:67 _Filename 'const char *'
| |-ParmVarDecl 0x1f845d29cb0 <col:85, col:98> col:98 _Mode 'const char *'
| `-ParmVarDecl 0x1f845d29d30 <col:110, col:114> col:114 _ShFlag 'int'
|-FunctionDecl 0x1f845d26160 <line:180:9, col:51> col:22 clearerr 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1f845d25ff0 <col:39, col:46> col:46 _File 'FILE *'
|-FunctionDecl 0x1f845d26390 <line:182:28, col:76> col:44 clearerr_s 'errno_t (FILE *) __attribute__((cdecl))':'errno_t (FILE *)'
| `-ParmVarDecl 0x1f845d26250 <col:63, col:70> col:70 _File 'FILE *'
|-FunctionDecl 0x1f845d26540 <line:184:28, col:67> col:40 fclose 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d26460 <col:55, col:62> col:62 _File 'FILE *'
|-FunctionDecl 0x1f845d26730 <line:185:28, col:55> col:40 _fcloseall 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f845d26a28 <line:187:24, col:94> col:39 _fdopen 'FILE *(int, const char *) __attribute__((cdecl))':'FILE *(int, const char *)'
| |-ParmVarDecl 0x1f845d26800 <col:52, col:56> col:56 _FileHandle 'int'
| `-ParmVarDecl 0x1f845d26880 <col:76, col:89> col:89 _Mode 'const char *'
|-FunctionDecl 0x1f845d26be0 <line:189:24, col:58> col:36 feof 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d26b00 <col:46, col:53> col:53 _File 'FILE *'
|-FunctionDecl 0x1f845d26d90 <line:190:24, col:60> col:36 ferror 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d26cb0 <col:48, col:55> col:55 _File 'FILE *'
|-FunctionDecl 0x1f845d26f40 <line:191:28, col:71> col:40 fflush 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d26e60 <col:59, col:66> col:66 _File 'FILE *'
|-FunctionDecl 0x1f845d30198 <line:192:28, col:66> col:40 fgetc 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d300b8 <col:54, col:61> col:61 _File 'FILE *'
|-FunctionDecl 0x1f845d30328 <line:193:28, col:54> col:40 _fgetchar 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f845d30690 <line:194:28, col:90> col:40 fgetpos 'int (FILE *, fpos_t *) __attribute__((cdecl))':'int (FILE *, fpos_t *)'
| |-ParmVarDecl 0x1f845d303f0 <col:56, col:63> col:63 _File 'FILE *'
| `-ParmVarDecl 0x1f845d304e8 <col:77, col:86> col:86 _Pos 'fpos_t *'
|-FunctionDecl 0x1f845d30a48 <line:195:28, col:128> col:43 fgets 'char *(char *, int, FILE *) __attribute__((cdecl))':'char *(char *, int, FILE *)'
| |-ParmVarDecl 0x1f845d30770 <col:75, col:82> col:82 _Buf 'char *'
| |-ParmVarDecl 0x1f845d307f0 <col:93, col:97> col:97 _MaxCount 'int'
| `-ParmVarDecl 0x1f845d30868 <col:116, col:123> col:123 _File 'FILE *'
|-FunctionDecl 0x1f845d30c08 <line:197:24, col:61> col:36 _fileno 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d30b28 <col:49, col:56> col:56 _File 'FILE *'
|-FunctionDecl 0x1f845d30ed0 <line:204:24, col:117> col:39 _tempnam 'char *(const char *, const char *) __attribute__((cdecl))':'char *(const char *, const char *)'
| |-ParmVarDecl 0x1f845d30ce0 <col:59, col:72> col:72 _DirName 'const char *'
| `-ParmVarDecl 0x1f845d30d60 <col:93, col:106> col:106 _FilePrefix 'const char *'
|-FunctionDecl 0x1f845d310a0 <line:210:28, col:54> col:40 _flushall 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f845d31498 <line:211:72> col:72 implicit fopen 'FILE *(const char *, const char *)' extern
| |-ParmVarDecl 0x1f845d31538 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845d315a0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845d31618 prev 0x1f845d31498 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:211:134> col:72 fopen 'FILE *(const char *, const char *)'
| |-ParmVarDecl 0x1f845d31270 <col:85, col:98> col:98 _Filename 'const char *'
| |-ParmVarDecl 0x1f845d312f0 <col:116, col:129> col:129 _Mode 'const char *'
| `-DeprecatedAttr 0x1f845d316c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d31b40 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:213:28, col:149> col:44 fopen_s 'errno_t (FILE **, const char *, const char *) __attribute__((cdecl))':'errno_t (FILE **, const char *, const char *)'
| |-ParmVarDecl 0x1f845d31870 <col:78, col:86> col:86 _File 'FILE **'
| |-ParmVarDecl 0x1f845d318f0 <col:100, col:113> col:113 _Filename 'const char *'
| `-ParmVarDecl 0x1f845d31970 <col:131, col:144> col:144 _Mode 'const char *'
|-FunctionDecl 0x1f845d31e60 <line:215:40> col:40 implicit fprintf 'int (FILE *, const char *, ...)' extern
| |-ParmVarDecl 0x1f845d31f00 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x1f845d31f68 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1f845d31fe0 <col:40> Implicit printf 2 3
|-FunctionDecl 0x1f845d320b0 prev 0x1f845d31e60 <col:28, col:125> col:40 fprintf 'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1f845d31c20 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1f845d31ca0 <col:100, col:113> col:113 _Format 'const char *'
| `-FormatAttr 0x1f845d321a8 <col:40> Inherited printf 2 3
|-FunctionDecl 0x1f845d32370 <line:217:28, col:127> col:40 fprintf_s 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1f845d321f0 <col:58, col:65> col:65 _File 'FILE *'
| `-ParmVarDecl 0x1f845d32270 <col:102, col:115> col:115 _Format 'const char *'
|-FunctionDecl 0x1f845d325c8 <line:219:28, col:80> col:40 fputc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f845d32450 <col:51, col:55> col:55 _Ch 'int'
| `-ParmVarDecl 0x1f845d324c8 <col:68, col:75> col:75 _File 'FILE *'
|-FunctionDecl 0x1f845d327f8 <line:220:28, col:62> col:40 _fputchar 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845d326a8 <col:55, col:59> col:59 _Ch 'int'
|-FunctionDecl 0x1f845d32af0 <line:221:28, col:92> col:40 fputs 'int (const char *, FILE *) __attribute__((cdecl))':'int (const char *, FILE *)'
| |-ParmVarDecl 0x1f845d328d0 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1f845d32948 <col:80, col:87> col:87 _File 'FILE *'
|-FunctionDecl 0x1f845d32f88 <line:222:43> col:43 implicit fread 'unsigned long long (void *, unsigned long long, unsigned long long, FILE *)' extern
| |-ParmVarDecl 0x1f845d33028 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f845d350e0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1f845d35148 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1f845d351b0 <<invalid sloc>> <invalid sloc> 'FILE *'
|-FunctionDecl 0x1f845d35238 prev 0x1f845d32f88 <col:28, col:171> col:43 fread 'unsigned long long (void *, unsigned long long, unsigned long long, FILE *)'
| |-ParmVarDecl 0x1f845d32bd0 <col:89, col:96> col:96 _DstBuf 'void *'
| |-ParmVarDecl 0x1f845d32c48 <col:110, col:117> col:117 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d32cc0 <col:136, col:143> col:143 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d32d38 <col:159, col:166> col:166 _File 'FILE *'
|-FunctionDecl 0x1f845d35740 <line:224:28, col:195> col:43 fread_s 'size_t (void *, size_t, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1f845d35328 <col:91, col:98> col:98 _DstBuf 'void *'
| |-ParmVarDecl 0x1f845d353a0 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d35418 <col:134, col:141> col:141 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d35490 <col:160, col:167> col:167 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d35508 <col:183, col:190> col:190 _File 'FILE *'
|-FunctionDecl 0x1f845d35c00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:226:160> col:74 freopen 'FILE *(const char *, const char *, FILE *) __attribute__((cdecl))':'FILE *(const char *, const char *, FILE *)'
| |-ParmVarDecl 0x1f845d35930 <col:89, col:102> col:102 _Filename 'const char *'
| |-ParmVarDecl 0x1f845d359b0 <col:120, col:133> col:133 _Mode 'const char *'
| |-ParmVarDecl 0x1f845d35a28 <col:148, col:155> col:155 _File 'FILE *'
| `-DeprecatedAttr 0x1f845d35cb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using freopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d34178 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:228:28, col:176> col:44 freopen_s 'errno_t (FILE **, const char *, const char *, FILE *) __attribute__((cdecl))':'errno_t (FILE **, const char *, const char *, FILE *)'
| |-ParmVarDecl 0x1f845d35e00 <col:80, col:88> col:88 _File 'FILE **'
| |-ParmVarDecl 0x1f845d35e80 <col:102, col:115> col:115 _Filename 'const char *'
| |-ParmVarDecl 0x1f845d35f00 <col:133, col:146> col:146 _Mode 'const char *'
| `-ParmVarDecl 0x1f845d35f78 <col:161, col:168> col:168 _OldFile 'FILE *'
|-FunctionDecl 0x1f845d34520 <line:230:70> col:70 implicit fscanf 'int (FILE *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x1f845d345c0 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x1f845d34628 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1f845d346a0 <col:70> Implicit scanf 2 3
|-FunctionDecl 0x1f845d34708 prev 0x1f845d34520 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:230:153> col:70 fscanf 'int (FILE *restrict, const char *restrict, ...)'
| |-ParmVarDecl 0x1f845d34358 <col:85, col:92> col:92 _File 'FILE *'
| |-ParmVarDecl 0x1f845d343d8 <col:128, col:141> col:141 _Format 'const char *'
| |-FormatAttr 0x1f845d348e8 <col:70> Inherited scanf 2 3
| `-DeprecatedAttr 0x1f845d347b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d34d28 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:231:201> col:77 _fscanf_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d34a28 <col:95, col:102> col:102 _File 'FILE *'
| |-ParmVarDecl 0x1f845d34aa8 <col:148, col:161> col:161 _Format 'const char *'
| |-ParmVarDecl 0x1f845d34b40 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d34de0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d2e070 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:235:28, col:127> col:40 fscanf_s 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1f845d34f20 <col:57, col:64> col:64 _File 'FILE *'
| `-ParmVarDecl 0x1f845d34fa0 <col:102, col:115> col:115 _Format 'const char *'
|-FunctionDecl 0x1f845d2e360 <line:237:28, col:168> col:40 _fscanf_s_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d2e148 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1f845d2e1c8 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1f845d2e240 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d2e6c0 <line:239:28, col:94> col:40 fsetpos 'int (FILE *, const fpos_t *) __attribute__((cdecl))':'int (FILE *, const fpos_t *)'
| |-ParmVarDecl 0x1f845d2e440 <col:56, col:63> col:63 _File 'FILE *'
| `-ParmVarDecl 0x1f845d2e518 <col:75, col:90> col:90 _Pos 'const fpos_t *'
|-FunctionDecl 0x1f845d2ea78 <line:240:28, col:103> col:40 fseek 'int (FILE *, long, int) __attribute__((cdecl))':'int (FILE *, long, int)'
| |-ParmVarDecl 0x1f845d2e798 <col:54, col:61> col:61 _File 'FILE *'
| |-ParmVarDecl 0x1f845d2e818 <col:73, col:78> col:78 _Offset 'long'
| `-ParmVarDecl 0x1f845d2e898 <col:92, col:96> col:96 _Origin 'int'
|-FunctionDecl 0x1f845d2ecd8 <line:241:24, col:63> col:37 ftell 'long (FILE *) __attribute__((cdecl))':'long (FILE *)'
| `-ParmVarDecl 0x1f845d2eb58 <col:51, col:58> col:58 _File 'FILE *'
|-FunctionDecl 0x1f845d36138 <line:243:28, col:110> col:40 _fseeki64 'int (FILE *, long long, int) __attribute__((cdecl))':'int (FILE *, long long, int)'
| |-ParmVarDecl 0x1f845d2eda8 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1f845d2ee28 <col:77, col:85> col:85 _Offset 'long long'
| `-ParmVarDecl 0x1f845d2eea8 <col:99, col:103> col:103 _Origin 'int'
|-FunctionDecl 0x1f845d36398 <line:244:24, col:70> col:40 _ftelli64 'long long (FILE *) __attribute__((cdecl))':'long long (FILE *)'
| `-ParmVarDecl 0x1f845d36218 <col:58, col:65> col:65 _File 'FILE *'
|-FunctionDecl 0x1f845d36858 <line:246:43> col:43 implicit fwrite 'unsigned long long (const void *, unsigned long long, unsigned long long, FILE *)' extern
| |-ParmVarDecl 0x1f845d368f8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1f845d36960 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1f845d369c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1f845d36a30 <<invalid sloc>> <invalid sloc> 'FILE *'
|-FunctionDecl 0x1f845d36ab8 prev 0x1f845d36858 <col:28, col:159> col:43 fwrite 'unsigned long long (const void *, unsigned long long, unsigned long long, FILE *)'
| |-ParmVarDecl 0x1f845d364a0 <col:81, col:94> col:94 _Str 'const void *'
| |-ParmVarDecl 0x1f845d36518 <col:105, col:112> col:112 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d36590 <col:124, col:131> col:131 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d36608 <col:147, col:154> col:154 _File 'FILE *'
|-FunctionDecl 0x1f845d36c80 <line:247:24, col:61> col:36 getc 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d36ba0 <col:49, col:56> col:56 _File 'FILE *'
|-FunctionDecl 0x1f845d36e10 <line:248:24, col:48> col:36 getchar 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f845d36f98 <line:249:24, col:53> col:36 _getmaxstdio 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f845d2f240 <line:251:9, col:84> col:24 gets_s 'char *(char *, rsize_t) __attribute__((cdecl))':'char *(char *, rsize_t)'
| |-ParmVarDecl 0x1f845d37068 <col:53, col:60> col:60 _Buf 'char *'
| `-ParmVarDecl 0x1f845d2f090 <col:71, col:79> col:79 _Size 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f845d2f568 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:254:80 gets 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f845d2f420 <col:139, col:145> col:145 _Buffer 'char *'
| `-DeprecatedAttr 0x1f845d2f610 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using gets_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d2f830 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:255:16, col:54> col:28 _getw 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d2f750 <col:42, col:49> col:49 _File 'FILE *'
|-FunctionDecl 0x1f845d2fa50 <line:258:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x1f845d2f908 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x1f845d2fc00 <line:261:28, col:68> col:40 _pclose 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d2fb20 <col:56, col:63> col:63 _File 'FILE *'
|-FunctionDecl 0x1f845d2fe50 <line:262:24, col:101> col:39 _popen 'FILE *(const char *, const char *) __attribute__((cdecl))':'FILE *(const char *, const char *)'
| |-ParmVarDecl 0x1f845d2fcd8 <col:53, col:66> col:66 _Command 'const char *'
| `-ParmVarDecl 0x1f845d2fd58 <col:83, col:96> col:96 _Mode 'const char *'
|-FunctionDecl 0x1f845d37100 <line:264:40> col:40 implicit printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x1f845d371a0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1f845d37210 <col:40> Implicit printf 1 2
|-FunctionDecl 0x1f845d37278 prev 0x1f845d37100 <col:28, col:102> col:40 printf 'int (const char *, ...)'
| |-ParmVarDecl 0x1f845d2ff30 <col:77, col:90> col:90 _Format 'const char *'
| `-FormatAttr 0x1f845d37368 <col:40> Inherited printf 1 2
|-FunctionDecl 0x1f845d37498 <line:266:28, col:104> col:40 printf_s 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1f845d373b8 <col:79, col:92> col:92 _Format 'const char *'
|-FunctionDecl 0x1f845d376e8 <line:268:28, col:79> col:40 putc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f845d37570 <col:50, col:54> col:54 _Ch 'int'
| `-ParmVarDecl 0x1f845d375e8 <col:67, col:74> col:74 _File 'FILE *'
|-FunctionDecl 0x1f845d378a8 <line:269:28, col:60> col:40 putchar 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845d377c8 <col:53, col:57> col:57 _Ch 'int'
|-FunctionDecl 0x1f845d37ac8 <line:270:28, col:69> col:40 puts 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1f845d37980 <col:52, col:65> col:65 _Str 'const char *'
|-FunctionDecl 0x1f845d37d18 <line:271:28, col:82> col:40 _putw 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f845d37ba0 <col:51, col:55> col:55 _Word 'int'
| `-ParmVarDecl 0x1f845d37c18 <col:70, col:77> col:77 _File 'FILE *'
|-FunctionDecl 0x1f845d37ed8 <line:274:9, col:57> col:21 remove 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1f845d37df8 <col:35, col:48> col:48 _Filename 'const char *'
|-FunctionDecl 0x1f845d85020 <line:275:24, col:109> col:36 rename 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f845d37fb0 <col:50, col:63> col:63 _OldFilename 'const char *'
| `-ParmVarDecl 0x1f845d38030 <col:84, col:97> col:97 _NewFilename 'const char *'
|-FunctionDecl 0x1f845d851e0 <line:276:9, col:58> col:21 _unlink 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1f845d85100 <col:36, col:49> col:49 _Filename 'const char *'
|-FunctionDecl 0x1f845d85470 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:278:89> col:53 unlink 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x1f845d85390 <col:67, col:80> col:80 _Filename 'const char *'
| `-DeprecatedAttr 0x1f845d85518 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _unlink. See online help for details." ""
|-FunctionDecl 0x1f845d85710 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:281:9, col:49> col:22 rewind 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1f845d85638 <col:37, col:44> col:44 _File 'FILE *'
|-FunctionDecl 0x1f845d858a0 <line:282:28, col:51> col:40 _rmtmp 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f845d85b48 <line:283:69> col:69 implicit scanf 'int (const char *restrict, ...)' extern
| |-ParmVarDecl 0x1f845d85be8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1f845d85c58 <col:69> Implicit scanf 1 2
|-FunctionDecl 0x1f845d85cc0 prev 0x1f845d85b48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:283:129> col:69 scanf 'int (const char *restrict, ...)'
| |-ParmVarDecl 0x1f845d85a30 <col:104, col:117> col:117 _Format 'const char *'
| |-FormatAttr 0x1f845d85e98 <col:69> Inherited scanf 1 2
| `-DeprecatedAttr 0x1f845d85d68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d87280 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:284:177> col:76 _scanf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d87048 <col:124, col:137> col:137 _Format 'const char *'
| |-ParmVarDecl 0x1f845d870c0 <col:155, col:165> col:165 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d87330 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _scanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d87558 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:288:40, col:116> col:52 scanf_s 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1f845d87478 <col:91, col:104> col:104 _Format 'const char *'
|-FunctionDecl 0x1f845d877a8 <line:290:40, col:157> col:52 _scanf_s_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d87630 <col:104, col:117> col:117 _Format 'const char *'
| `-ParmVarDecl 0x1f845d876a8 <col:135, col:145> col:145 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d87b68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:292:150> col:55 setbuf 'void (FILE *, char *) __attribute__((cdecl))':'void (FILE *, char *)'
| |-ParmVarDecl 0x1f845d87940 <col:70, col:77> col:77 _File 'FILE *'
| |-ParmVarDecl 0x1f845d879c0 <col:136, col:143> col:143 _Buffer 'char *'
| `-DeprecatedAttr 0x1f845d87c18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using setvbuf instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d87e40 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:293:28, col:66> col:40 _setmaxstdio 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845d87d60 <col:58, col:62> col:62 _Max 'int'
|-FunctionDecl 0x1f845d880c8 <line:294:28, col:93> col:49 _set_output_format 'unsigned int (unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int)'
| `-ParmVarDecl 0x1f845d87f80 <col:73, col:86> col:86 _Format 'unsigned int'
|-FunctionDecl 0x1f845d882b0 <line:295:28, col:72> col:49 _get_output_format 'unsigned int (void) __attribute__((cdecl))':'unsigned int (void)'
|-FunctionDecl 0x1f845d88700 <line:296:28, col:145> col:40 setvbuf 'int (FILE *, char *, int, size_t) __attribute__((cdecl))':'int (FILE *, char *, int, size_t)'
| |-ParmVarDecl 0x1f845d88378 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1f845d883f8 <col:99, col:106> col:106 _Buf 'char *'
| |-ParmVarDecl 0x1f845d88478 <col:117, col:121> col:121 _Mode 'int'
| `-ParmVarDecl 0x1f845d884f0 <col:133, col:140> col:140 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845d88b80 <line:297:40, col:213> col:52 _snprintf_s 'int (char *, size_t, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f845d887f0 <col:93, col:100> col:100 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d88868 <col:114, col:121> col:121 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d888e0 <col:140, col:147> col:147 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d88960 <col:188, col:201> col:201 _Format 'const char *'
|-FunctionDecl 0x1f845d82f30 <line:300:40, col:188> col:52 sprintf_s 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f845d88c70 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d88ce8 <col:112, col:119> col:119 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d88d68 <col:163, col:176> col:176 _Format 'const char *'
|-FunctionDecl 0x1f845d830f8 <line:303:24, col:101> col:36 _scprintf 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1f845d83018 <col:76, col:89> col:89 _Format 'const char *'
|-FunctionDecl 0x1f845d834d0 <line:304:70> col:70 implicit sscanf 'int (const char *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x1f845d83570 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1f845d835d8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1f845d83650 <col:70> Implicit scanf 2 3
|-FunctionDecl 0x1f845d836b8 prev 0x1f845d834d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:304:157> col:70 sscanf 'int (const char *restrict, const char *restrict, ...)'
| |-ParmVarDecl 0x1f845d83290 <col:84, col:97> col:97 _Src 'const char *'
| |-ParmVarDecl 0x1f845d83310 <col:132, col:145> col:145 _Format 'const char *'
| |-FormatAttr 0x1f845d83898 <col:70> Inherited scanf 2 3
| `-DeprecatedAttr 0x1f845d83768 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d83c88 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:305:205> col:77 _sscanf_l 'int (const char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d839a8 <col:94, col:107> col:107 _Src 'const char *'
| |-ParmVarDecl 0x1f845d83a28 <col:152, col:165> col:165 _Format 'const char *'
| |-ParmVarDecl 0x1f845d83aa0 <col:183, col:193> col:193 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d83d40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _sscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d84040 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:309:40, col:143> col:52 sscanf_s 'int (const char *, const char *, ...) __attribute__((cdecl))':'int (const char *, const char *, ...)'
| |-ParmVarDecl 0x1f845d83e88 <col:68, col:81> col:81 _Src 'const char *'
| `-ParmVarDecl 0x1f845d83f40 <col:118, col:131> col:131 _Format 'const char *'
|-FunctionDecl 0x1f845d84338 <line:311:40, col:184> col:52 _sscanf_s_l 'int (const char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d84120 <col:71, col:84> col:84 _Src 'const char *'
| |-ParmVarDecl 0x1f845d841a0 <col:131, col:144> col:144 _Format 'const char *'
| `-ParmVarDecl 0x1f845d84218 <col:162, col:172> col:172 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d847c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:312:217> col:76 _snscanf 'int (const char *, size_t, const char *, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f845d844e0 <col:121, col:134> col:134 _Src 'const char *'
| |-ParmVarDecl 0x1f845d84558 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d845d8 <col:192, col:205> col:205 _Format 'const char *'
| `-DeprecatedAttr 0x1f845d84880 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d84e50 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:313:259> col:78 _snscanf_l 'int (const char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d84ac0 <col:125, col:138> col:138 _Src 'const char *'
| |-ParmVarDecl 0x1f845d84b38 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d84bb8 <col:206, col:219> col:219 _Format 'const char *'
| |-ParmVarDecl 0x1f845d84c30 <col:237, col:247> col:247 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d88f90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d892f0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:314:40, col:197> col:52 _snscanf_s 'int (const char *, size_t, const char *, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f845d890d8 <col:99, col:112> col:112 _Src 'const char *'
| |-ParmVarDecl 0x1f845d89150 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d891d0 <col:172, col:185> col:185 _Format 'const char *'
|-FunctionDecl 0x1f845d89688 <line:315:40, col:237> col:52 _snscanf_s_l 'int (const char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d893d8 <col:101, col:114> col:114 _Src 'const char *'
| |-ParmVarDecl 0x1f845d89450 <col:125, col:132> col:132 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d894d0 <col:184, col:197> col:197 _Format 'const char *'
| `-ParmVarDecl 0x1f845d89548 <col:215, col:225> col:225 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d898e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:317:86> col:74 tmpfile 'FILE *(void) __attribute__((cdecl))':'FILE *(void)'
| `-DeprecatedAttr 0x1f845d89988 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using tmpfile_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d89c40 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:319:28, col:96> col:44 tmpfile_s 'errno_t (FILE **) __attribute__((cdecl))':'errno_t (FILE **)'
| `-ParmVarDecl 0x1f845d89ad0 <col:83, col:91> col:91 _File 'FILE **'
|-FunctionDecl 0x1f845d81f20 <line:320:28, col:106> col:44 tmpnam_s 'errno_t (char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t)'
| |-ParmVarDecl 0x1f845d89d18 <col:75, col:82> col:82 _Buf 'char *'
| `-ParmVarDecl 0x1f845d89d90 <col:93, col:101> col:101 _Size 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f845d821a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:323:79 tmpnam 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f845d820c0 <col:113, col:119> col:119 _Buffer 'char *'
| `-DeprecatedAttr 0x1f845d82248 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using tmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d82508 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:324:28, col:81> col:40 ungetc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f845d82390 <col:52, col:56> col:56 _Ch 'int'
| `-ParmVarDecl 0x1f845d82408 <col:69, col:76> col:76 _File 'FILE *'
|-FunctionDecl 0x1f845d82920 <line:325:40> col:40 implicit vfprintf 'int (FILE *, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f845d829c0 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x1f845d82a28 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f845d82a90 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f845d82b10 <col:40> Implicit printf 2 0
|-FunctionDecl 0x1f845d82b78 prev 0x1f845d82920 <col:28, col:139> col:40 vfprintf 'int (FILE *, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1f845d825e0 <col:57, col:64> col:64 _File 'FILE *'
| |-ParmVarDecl 0x1f845d82660 <col:101, col:114> col:114 _Format 'const char *'
| |-ParmVarDecl 0x1f845d826d8 <col:123, col:131> col:131 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1f845d82c78 <col:40> Inherited printf 2 0
|-FunctionDecl 0x1f845d85f60 <line:326:40> col:40 implicit vfscanf 'int (FILE *restrict, const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f845d86000 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x1f845d86068 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1f845d860d0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f845d86150 <col:40> Implicit scanf 2 0
|-FunctionDecl 0x1f845d861b8 prev 0x1f845d85f60 <col:28, col:138> col:40 vfscanf 'int (FILE *restrict, const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1f845d82cc0 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1f845d82d40 <col:100, col:113> col:113 _Format 'const char *'
| |-ParmVarDecl 0x1f845d82db8 <col:122, col:130> col:130 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1f845d862b8 <col:40> Inherited scanf 2 0
|-FunctionDecl 0x1f845d86518 <line:328:28, col:141> col:40 vfprintf_s 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1f845d86300 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1f845d86380 <col:103, col:116> col:116 _Format 'const char *'
| `-ParmVarDecl 0x1f845d863f8 <col:125, col:133> col:133 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d86810 <line:329:28, col:140> col:40 vfscanf_s 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1f845d865f8 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1f845d86678 <col:102, col:115> col:115 _Format 'const char *'
| `-ParmVarDecl 0x1f845d866f0 <col:124, col:132> col:132 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d86b58 <line:331:40> col:40 implicit vprintf 'int (const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f845d86bf8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f845d86c60 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f845d86cd8 <col:40> Implicit printf 1 0
|-FunctionDecl 0x1f845d86d40 prev 0x1f845d86b58 <col:28, col:116> col:40 vprintf 'int (const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1f845d868f8 <col:78, col:91> col:91 _Format 'const char *'
| |-ParmVarDecl 0x1f845d86970 <col:100, col:108> col:108 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1f845d86e38 <col:40> Inherited printf 1 0
|-FunctionDecl 0x1f845d90138 <line:332:40> col:40 implicit vscanf 'int (const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f845d901d8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1f845d90240 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f845d902b8 <col:40> Implicit scanf 1 0
|-FunctionDecl 0x1f845d90320 prev 0x1f845d90138 <col:28, col:115> col:40 vscanf 'int (const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1f845d86e88 <col:77, col:90> col:90 _Format 'const char *'
| |-ParmVarDecl 0x1f845d90000 <col:99, col:107> col:107 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1f845d90418 <col:40> Inherited scanf 1 0
|-FunctionDecl 0x1f845d905e0 <line:334:28, col:118> col:40 vprintf_s 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1f845d90468 <col:80, col:93> col:93 _Format 'const char *'
| `-ParmVarDecl 0x1f845d904e0 <col:102, col:110> col:110 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d90838 <line:335:28, col:117> col:40 vscanf_s 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1f845d906c0 <col:79, col:92> col:92 _Format 'const char *'
| `-ParmVarDecl 0x1f845d90738 <col:101, col:109> col:109 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d90d98 <line:337:77> col:77 implicit vsnprintf 'int (char *, unsigned long long, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f845d90e38 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f845d90ea0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1f845d90f08 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f845d90f70 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f845d8dfe0 <col:77> Implicit printf 3 0
|-FunctionDecl 0x1f845d8e048 prev 0x1f845d90d98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:337:218> col:77 vsnprintf 'int (char *, unsigned long long, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1f845d909d8 <col:111, col:118> col:118 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d90a50 <col:132, col:139> col:139 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d90ad0 <col:180, col:193> col:193 _Format 'const char *'
| |-ParmVarDecl 0x1f845d90b48 <col:202, col:210> col:210 _ArgList 'va_list':'char *'
| |-FormatAttr 0x1f845d8e238 <col:77> Inherited printf 3 0
| `-DeprecatedAttr 0x1f845d8e108 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d8e6a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:339:28, col:206> col:40 vsnprintf_s 'int (char *, size_t, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f845d8e288 <col:77, col:84> col:84 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d8e300 <col:98, col:105> col:105 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d8e378 <col:120, col:127> col:127 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d8e3f8 <col:168, col:181> col:181 _Format 'const char *'
| `-ParmVarDecl 0x1f845d8e470 <col:190, col:198> col:198 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d8eae8 <line:342:40, col:227> col:52 _vsnprintf_s 'int (char *, size_t, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f845d8e7a0 <col:94, col:101> col:101 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d8e818 <col:115, col:122> col:122 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d8e890 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d8e910 <col:189, col:202> col:202 _Format 'const char *'
| `-ParmVarDecl 0x1f845d8e988 <col:211, col:219> col:219 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d8eeb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2003:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:346:89 _snprintf 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f845d8eca0 <col:182, col:188> col:188 _Dest 'char *'
| |-ParmVarDecl 0x1f845d8ed18 <col:200, col:208> col:208 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d8ed98 <col:246, col:260> col:260 _Format 'const char *'
| `-DeprecatedAttr 0x1f845d8ef70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d8f460 <col:36, line:2004:164> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:346:100 _vsnprintf 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f845d8f1b0 <col:182, col:188> col:188 _Dest 'char *'
| |-ParmVarDecl 0x1f845d8f228 <col:200, col:208> col:208 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d8f2a8 <col:246, col:260> col:260 _Format 'const char *'
| |-ParmVarDecl 0x1f845d8f320 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:2004:151, col:159> col:159 _Args 'va_list':'char *'
| `-DeprecatedAttr 0x1f845d8f520 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d8f918 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:349:21, col:183> col:33 vsprintf_s 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f845d8f668 <col:73, col:80> col:80 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d8f6e0 <col:94, col:101> col:101 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d8f760 <col:145, col:158> col:158 _Format 'const char *'
| `-ParmVarDecl 0x1f845d8f7d8 <col:167, col:175> col:175 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d8fcd8 <line:351:40, col:149> col:52 vsscanf_s 'int (const char *, const char *, va_list) __attribute__((cdecl))':'int (const char *, const char *, va_list)'
| |-ParmVarDecl 0x1f845d8fa08 <col:62, col:75> col:75 _Src 'const char *'
| |-ParmVarDecl 0x1f845d8fa88 <col:111, col:124> col:124 _Format 'const char *'
| `-ParmVarDecl 0x1f845d8fb00 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d8a040 <line:356:85> col:85 implicit sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x1f845d8a0e0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f845d8a148 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1f845d8a1c0 <col:85> Implicit printf 2 3
|-FunctionDecl 0x1f845d8a228 prev 0x1f845d8a040 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1957:138> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:85 sprintf 'int (char *, const char *, ...)'
| |-ParmVarDecl 0x1f845d8fe80 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1f845d8ff00 <col:171, col:185> col:185 _Format 'const char *'
| |-FormatAttr 0x1f845d8a408 <col:85> Inherited printf 2 3
| `-DeprecatedAttr 0x1f845d8a2d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d8a830 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94> col:94 implicit vsprintf 'int (char *, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f845d8a8d0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f845d8a938 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f845d8a9a0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f845d8aa20 <col:94> Implicit printf 2 0
|-FunctionDecl 0x1f845d8aa88 prev 0x1f845d8a830 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1958:150> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94 vsprintf 'int (char *, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1f845d8a518 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1f845d8a598 <col:171, col:185> col:185 _Format 'const char *'
| |-ParmVarDecl 0x1f845d8a610 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1958:137, col:145> col:145 _Args 'va_list':'char *'
| |-FormatAttr 0x1f845d8ac70 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94> Inherited printf 2 0
| `-DeprecatedAttr 0x1f845d8ab40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using vsprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d8afb0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:357:40> col:40 implicit vsscanf 'int (const char *restrict, const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1f845d8b050 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1f845d8b0b8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1f845d8b120 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1f845d8b1a0 <col:40> Implicit scanf 2 0
|-FunctionDecl 0x1f845d8b208 prev 0x1f845d8afb0 <col:28, col:138> col:40 vsscanf 'int (const char *restrict, const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1f845d8acc0 <col:48, col:61> col:61 _srcBuf 'const char *'
| |-ParmVarDecl 0x1f845d8ad40 <col:100, col:113> col:113 _Format 'const char *'
| |-ParmVarDecl 0x1f845d8adb8 <col:122, col:130> col:130 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1f845d8b308 <col:40> Inherited scanf 2 0
|-FunctionDecl 0x1f845d8b4d0 <line:359:24, col:115> col:36 _vscprintf 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1f845d8b358 <col:77, col:90> col:90 _Format 'const char *'
| `-ParmVarDecl 0x1f845d8b3d0 <col:99, col:107> col:107 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d8b7c8 <line:360:28, col:170> col:40 _snprintf_c 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f845d8b5b0 <col:76, col:83> col:83 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d8b628 <col:97, col:104> col:104 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d8b6a8 <col:145, col:158> col:158 _Format 'const char *'
|-FunctionDecl 0x1f845d8bb60 <line:361:28, col:183> col:40 _vsnprintf_c 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f845d8b8b0 <col:77, col:83> col:83 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d8b928 <col:97, col:104> col:104 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d8b9a8 <col:145, col:158> col:158 _Format 'const char *'
| `-ParmVarDecl 0x1f845d8ba20 <col:167, col:175> col:175 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d8bdc8 <line:363:28, col:128> col:40 _fprintf_p 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1f845d8bc48 <col:59, col:66> col:66 _File 'FILE *'
| `-ParmVarDecl 0x1f845d8bcc8 <col:103, col:116> col:116 _Format 'const char *'
|-FunctionDecl 0x1f845d91010 <line:364:28, col:105> col:40 _printf_p 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1f845d8bea8 <col:80, col:93> col:93 _Format 'const char *'
|-FunctionDecl 0x1f845d91300 <line:365:28, col:168> col:40 _sprintf_p 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f845d910e8 <col:77, col:84> col:84 _Dst 'char *'
| |-ParmVarDecl 0x1f845d91160 <col:95, col:102> col:102 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d911e0 <col:143, col:156> col:156 _Format 'const char *'
|-FunctionDecl 0x1f845d915f8 <line:366:28, col:142> col:40 _vfprintf_p 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1f845d913e0 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1f845d91460 <col:104, col:117> col:117 _Format 'const char *'
| `-ParmVarDecl 0x1f845d914d8 <col:126, col:134> col:134 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d91858 <line:367:28, col:119> col:40 _vprintf_p 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1f845d916e0 <col:81, col:94> col:94 _Format 'const char *'
| `-ParmVarDecl 0x1f845d91758 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d91be8 <line:368:28, col:182> col:40 _vsprintf_p 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1f845d91938 <col:78, col:85> col:85 _Dst 'char *'
| |-ParmVarDecl 0x1f845d919b0 <col:96, col:103> col:103 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d91a30 <col:144, col:157> col:157 _Format 'const char *'
| `-ParmVarDecl 0x1f845d91aa8 <col:166, col:174> col:174 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d91db8 <line:369:24, col:103> col:36 _scprintf_p 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1f845d91cd8 <col:78, col:91> col:91 _Format 'const char *'
|-FunctionDecl 0x1f845d92020 <line:370:24, col:117> col:36 _vscprintf_p 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1f845d91e90 <col:79, col:92> col:92 _Format 'const char *'
| `-ParmVarDecl 0x1f845d91f08 <col:101, col:109> col:109 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d921e0 <line:371:9, col:61> col:21 _set_printf_count_output 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845d92100 <col:51, col:55> col:55 _Value 'int'
|-FunctionDecl 0x1f845d92370 <line:372:9, col:50> col:21 _get_printf_count_output 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f845d925b8 <line:374:28, col:143> col:40 _printf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d92440 <col:90, col:103> col:103 _Format 'const char *'
| `-ParmVarDecl 0x1f845d924b8 <col:121, col:131> col:131 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d92810 <line:375:28, col:145> col:40 _printf_p_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d92698 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1f845d92710 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d92a68 <line:376:28, col:145> col:40 _printf_s_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d928f0 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1f845d92968 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d92e18 <line:377:28, col:157> col:40 _vprintf_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d92b48 <col:91, col:104> col:104 _Format 'const char *'
| |-ParmVarDecl 0x1f845d92bc0 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d92c38 <col:141, col:149> col:149 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d94160 <line:378:28, col:159> col:40 _vprintf_p_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d92f00 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1f845d92f78 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d94040 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d94458 <line:379:28, col:159> col:40 _vprintf_s_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d94248 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1f845d942c0 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d94338 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d94750 <line:381:28, col:166> col:40 _fprintf_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d94538 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1f845d945b8 <col:113, col:126> col:126 _Format 'const char *'
| `-ParmVarDecl 0x1f845d94630 <col:144, col:154> col:154 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d94a48 <line:382:28, col:168> col:40 _fprintf_p_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d94830 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1f845d948b0 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1f845d94928 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d94d40 <line:383:28, col:168> col:40 _fprintf_s_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d94b28 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1f845d94ba8 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1f845d94c20 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d8d130 <line:384:28, col:147> col:40 _vfprintf_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d94e20 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1f845d94ea0 <col:81, col:94> col:94 _Format 'const char *'
| |-ParmVarDecl 0x1f845d94f18 <col:112, col:122> col:122 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d94f90 <col:131, col:139> col:139 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d8d4c8 <line:385:28, col:149> col:40 _vfprintf_p_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d8d218 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1f845d8d298 <col:83, col:96> col:96 _Format 'const char *'
| |-ParmVarDecl 0x1f845d8d310 <col:114, col:124> col:124 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d8d388 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d8d860 <line:386:28, col:149> col:40 _vfprintf_s_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d8d5b0 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1f845d8d630 <col:83, col:96> col:96 _Format 'const char *'
| |-ParmVarDecl 0x1f845d8d6a8 <col:114, col:124> col:124 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d8d720 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d8dcf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:388:221> col:78 _sprintf_l 'int (char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d8da10 <col:112, col:119> col:119 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d8da90 <col:168, col:181> col:181 _Format 'const char *'
| |-ParmVarDecl 0x1f845d8db08 <col:199, col:209> col:209 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d8ddb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _sprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d97380 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:389:28, col:211> col:40 _sprintf_p_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d8def8 <col:79, col:86> col:86 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d97070 <col:100, col:107> col:107 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d970f0 <col:158, col:171> col:171 _Format 'const char *'
| `-ParmVarDecl 0x1f845d97168 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d97720 <line:390:40, col:221> col:52 _sprintf_s_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d97470 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d974e8 <col:111, col:118> col:118 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d97568 <col:168, col:181> col:181 _Format 'const char *'
| `-ParmVarDecl 0x1f845d975e0 <col:199, col:209> col:209 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d97c70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:391:195> col:79 _vsprintf_l 'int (char *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d97910 <col:114, col:121> col:121 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d97990 <col:137, col:150> col:150 _Format 'const char *'
| |-ParmVarDecl 0x1f845d97a08 <col:168> col:177 '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1f845d97a80 <col:179, col:187> col:187 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1f845d97d30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d93268 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:392:28, col:225> col:40 _vsprintf_p_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d97e78 <col:80, col:87> col:87 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d97ef0 <col:101, col:108> col:108 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d97f70 <col:159, col:171> col:171 _Format 'const char *'
| |-ParmVarDecl 0x1f845d97fe8 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d93030 <col:209, col:217> col:217 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d936a8 <line:393:40, col:235> col:52 _vsprintf_s_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d93360 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d933d8 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d93458 <col:169, col:182> col:182 _Format 'const char *'
| |-ParmVarDecl 0x1f845d934d0 <col:200, col:210> col:210 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d93548 <col:219, col:227> col:227 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d93918 <line:395:28, col:145> col:40 _scprintf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d937a0 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1f845d93818 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d93b70 <line:396:28, col:147> col:40 _scprintf_p_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d939f8 <col:94, col:107> col:107 _Format 'const char *'
| `-ParmVarDecl 0x1f845d93a70 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d93e60 <line:397:28, col:159> col:40 _vscprintf_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d93c50 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1f845d93cc8 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d93d40 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d95180 <line:398:28, col:161> col:40 _vscprintf_p_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d93f48 <col:95, col:108> col:108 _Format 'const char *'
| |-ParmVarDecl 0x1f845d93fc0 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d95060 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d955d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:400:247> col:79 _snprintf_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d95328 <col:115, col:122> col:122 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d953a0 <col:136, col:143> col:143 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d95420 <col:194, col:207> col:207 _Format 'const char *'
| |-ParmVarDecl 0x1f845d95498 <col:225, col:235> col:235 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d95698 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d95a90 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:401:28, col:210> col:40 _snprintf_c_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d957e0 <col:78, col:85> col:85 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d95858 <col:99, col:106> col:106 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d958d8 <col:157, col:170> col:170 _Format 'const char *'
| `-ParmVarDecl 0x1f845d95950 <col:188, col:198> col:198 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d9b0b0 <line:402:40, col:245> col:52 _snprintf_s_l 'int (char *, size_t, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d95b80 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d95bf8 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d95c70 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d95cf0 <col:192, col:205> col:205 _Format 'const char *'
| `-ParmVarDecl 0x1f845d95d68 <col:223, col:233> col:233 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d9b5f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:403:262> col:80 _vsnprintf_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d9b2a8 <col:117, col:124> col:124 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d9b320 <col:138, col:145> col:145 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d9b3a0 <col:196, col:209> col:209 _Format 'const char *'
| |-ParmVarDecl 0x1f845d9b418 <col:227, col:237> col:237 _Locale '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1f845d9b490 <col:246, col:254> col:254 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1f845d9b6b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d9bb38 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:404:28, col:176> col:40 _vsnprintf_c_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d9b808 <col:79, col:86> col:86 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d9b880 <col:100, col:107> col:107 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d9b900 <col:118, col:129> col:130 'const char *'
| |-ParmVarDecl 0x1f845d9b978 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d9b9f0 <col:160, col:168> col:168 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d9d130 <line:405:28, col:245> col:40 _vsnprintf_s_l 'int (char *, size_t, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d9bc30 <col:80, col:87> col:87 _DstBuf 'char *'
| |-ParmVarDecl 0x1f845d9bca8 <col:101, col:108> col:108 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d9bd20 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d9bda0 <col:181, col:193> col:193 _Format 'const char *'
| |-ParmVarDecl 0x1f845d9be18 <col:210, col:220> col:220 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d9be90 <col:229, col:237> col:237 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d9d4f0 <line:415:24, col:128> col:39 _wfsopen 'FILE *(const wchar_t *, const wchar_t *, int) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *, int)'
| |-ParmVarDecl 0x1f845d9d228 <col:55, col:71> col:71 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f845d9d2a0 <col:89, col:105> col:105 _Mode 'const wchar_t *'
| `-ParmVarDecl 0x1f845d9d320 <col:117, col:121> col:121 _ShFlag 'int'
|-FunctionDecl 0x1f845d9d760 <line:417:28, col:70> col:43 fgetwc 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1f845d9d5f0 <col:58, col:65> col:65 _File 'FILE *'
|-FunctionDecl 0x1f845d9d978 <line:418:28, col:58> col:43 _fgetwchar 'wint_t (void) __attribute__((cdecl))':'wint_t (void)'
|-FunctionDecl 0x1f845d9dc58 <line:419:28, col:88> col:43 fputwc 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1f845d9da40 <col:55, col:63> col:63 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1f845d9dab8 <col:76, col:83> col:83 _File 'FILE *'
|-FunctionDecl 0x1f845d9dea0 <line:420:28, col:70> col:43 _fputwchar 'wint_t (wchar_t) __attribute__((cdecl))':'wint_t (wchar_t)'
| `-ParmVarDecl 0x1f845d9dd30 <col:59, col:67> col:67 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f845d98080 <line:421:24, col:65> col:39 getwc 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1f845d9df70 <col:53, col:60> col:60 _File 'FILE *'
|-FunctionDecl 0x1f845d98208 <line:422:24, col:52> col:39 getwchar 'wint_t (void) __attribute__((cdecl))':'wint_t (void)'
|-FunctionDecl 0x1f845d98440 <line:423:28, col:87> col:43 putwc 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1f845d982d0 <col:54, col:62> col:62 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1f845d98348 <col:75, col:82> col:82 _File 'FILE *'
|-FunctionDecl 0x1f845d985f0 <line:424:28, col:68> col:43 putwchar 'wint_t (wchar_t) __attribute__((cdecl))':'wint_t (wchar_t)'
| `-ParmVarDecl 0x1f845d98518 <col:57, col:65> col:65 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f845d98898 <line:425:28, col:88> col:43 ungetwc 'wint_t (wint_t, FILE *) __attribute__((cdecl))':'wint_t (wint_t, FILE *)'
| |-ParmVarDecl 0x1f845d986c0 <col:56, col:63> col:63 _Ch 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845d98738 <col:76, col:83> col:83 _File 'FILE *'
|-FunctionDecl 0x1f845d98c40 <line:427:28, col:141> col:46 fgetws 'wchar_t *(wchar_t *, int, FILE *) __attribute__((cdecl))':'wchar_t *(wchar_t *, int, FILE *)'
| |-ParmVarDecl 0x1f845d98970 <col:82, col:92> col:92 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845d989f0 <col:103, col:107> col:107 _SizeInWords 'int'
| `-ParmVarDecl 0x1f845d98a68 <col:129, col:136> col:136 _File 'FILE *'
|-FunctionDecl 0x1f845d98f40 <line:428:28, col:96> col:40 fputws 'int (const wchar_t *, FILE *) __attribute__((cdecl))':'int (const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1f845d98d20 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f845d98d98 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1f845d9c278 <line:429:28, col:124> col:46 _getws_s 'wchar_t *(wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845d99018 <col:84, col:94> col:94 _Str 'wchar_t *'
| `-ParmVarDecl 0x1f845d9c0d0 <col:105, col:112> col:112 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845d9c580 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:431:83 _getws 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f845d9c410 <col:115, col:124> col:124 _String 'wchar_t *'
| `-DeprecatedAttr 0x1f845d9c628 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _getws_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d9c8e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:432:28, col:74> col:40 _putws 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1f845d9c768 <col:54, col:70> col:70 _Str 'const wchar_t *'
|-FunctionDecl 0x1f845d9cbf0 <line:434:28, col:129> col:40 fwprintf 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d9c9b8 <col:57, col:64> col:64 _File 'FILE *'
| `-ParmVarDecl 0x1f845d9ca30 <col:101, col:117> col:117 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d9ce40 <line:436:28, col:131> col:40 fwprintf_s 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d9ccc8 <col:59, col:66> col:66 _File 'FILE *'
| `-ParmVarDecl 0x1f845d9cd40 <col:103, col:119> col:119 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d9a0a0 <line:438:28, col:106> col:40 wprintf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f845d9cf18 <col:78, col:94> col:94 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d9a250 <line:440:28, col:108> col:40 wprintf_s 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f845d9a170 <col:80, col:96> col:96 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d9a400 <line:442:24, col:105> col:36 _scwprintf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f845d9a320 <col:77, col:93> col:93 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d9a798 <line:443:28, col:143> col:40 vfwprintf 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d9a4d0 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1f845d9a548 <col:102, col:118> col:118 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d9a5c0 <col:127, col:135> col:135 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d9aa88 <line:444:28, col:142> col:40 vfwscanf 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d9a878 <col:57, col:64> col:64 _File 'FILE *'
| |-ParmVarDecl 0x1f845d9a8f0 <col:101, col:117> col:117 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d9a968 <col:126, col:134> col:134 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d9ad78 <line:446:28, col:145> col:40 vfwprintf_s 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d9ab68 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1f845d9abe0 <col:104, col:120> col:120 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d9ac58 <col:129, col:137> col:137 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d96060 <line:447:28, col:144> col:40 vfwscanf_s 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d9ae58 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1f845d9aed0 <col:103, col:119> col:119 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d9af48 <col:128, col:136> col:136 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d96360 <line:449:28, col:120> col:40 vwprintf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d96140 <col:79, col:95> col:95 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d961b8 <col:104, col:112> col:112 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d965b0 <line:450:28, col:119> col:40 vwscanf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d96438 <col:78, col:94> col:94 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d964b0 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d96800 <line:452:28, col:122> col:40 vwprintf_s 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d96688 <col:81, col:97> col:97 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d96700 <col:106, col:114> col:114 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d96a50 <line:453:28, col:121> col:40 vwscanf_s 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d968d8 <col:80, col:96> col:96 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d96950 <col:105, col:113> col:113 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d96e08 <line:457:21, col:173> col:33 swprintf_s 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d96b28 <col:73, col:83> col:83 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845d96ba0 <col:94, col:101> col:101 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d96c18 <col:145, col:161> col:161 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d9e2f0 <line:461:21, col:187> col:33 vswprintf_s 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d96ee8 <col:74, col:84> col:84 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845d96f60 <col:95, col:102> col:102 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d96fd8 <col:146, col:162> col:162 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d9e0e0 <col:171, col:179> col:179 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d9e6a8 <line:462:40, col:156> col:52 vswscanf_s 'int (const wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d9e3d8 <col:63, col:79> col:79 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f845d9e450 <col:115, col:131> col:131 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d9e4c8 <col:140, col:148> col:148 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d9e998 <line:466:28, col:145> col:40 vswscanf 'int (const wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d9e788 <col:49, col:65> col:65 _srcBuf 'const wchar_t *'
| |-ParmVarDecl 0x1f845d9e800 <col:104, col:120> col:120 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d9e878 <col:129, col:137> col:137 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d9ec88 <line:468:28, col:184> col:40 _swprintf_c 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d9ea78 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d9eaf0 <col:105, col:112> col:112 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d9eb68 <col:156, col:172> col:172 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d9f010 <line:469:28, col:198> col:40 _vswprintf_c 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d9ed68 <col:82, col:92> col:92 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d9ede0 <col:106, col:113> col:113 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d9ee58 <col:157, col:173> col:173 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d9eed0 <col:182, col:190> col:190 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d9f4a0 <line:471:40, col:220> col:52 _snwprintf_s 'int (wchar_t *, size_t, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d9f118 <col:94, col:104> col:104 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d9f190 <col:118, col:125> col:125 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d9f208 <col:144, col:151> col:151 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d9f280 <col:192, col:208> col:208 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d9f9a8 <line:473:40, col:234> col:52 _vsnwprintf_s 'int (wchar_t *, size_t, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d9f588 <col:95, col:105> col:105 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d9f600 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d9f678 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d9f6f0 <col:193, col:209> col:209 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d9f768 <col:218, col:226> col:226 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d9fd68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2003:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:477:89 _snwprintf 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d9fb58 <col:187, col:196> col:196 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f845d9fbd0 <col:208, col:216> col:216 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d9fc48 <col:254, col:271> col:271 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1f845d9fe20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845da0330 <col:36, line:2004:164> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:477:101 _vsnwprintf 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845da0020 <col:187, col:196> col:196 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f845da0100 <col:208, col:216> col:216 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845da0178 <col:254, col:271> col:271 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845da01f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:2004:151, col:159> col:159 _Args 'va_list':'char *'
| `-DeprecatedAttr 0x1f845da03f0 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845da06a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:480:28, col:132> col:40 _fwprintf_p 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845da0530 <col:60, col:67> col:67 _File 'FILE *'
| `-ParmVarDecl 0x1f845da05a8 <col:104, col:120> col:120 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845da0860 <line:481:28, col:109> col:40 _wprintf_p 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f845da0780 <col:81, col:97> col:97 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845da0b40 <line:482:28, col:146> col:40 _vfwprintf_p 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845da0930 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1f845da09a8 <col:105, col:121> col:121 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845da0a20 <col:130, col:138> col:138 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845da0d98 <line:483:28, col:123> col:40 _vwprintf_p 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845da0c20 <col:82, col:98> col:98 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845da0c98 <col:107, col:115> col:115 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d67950 <line:484:28, col:178> col:40 _swprintf_p 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845da0e70 <col:78, col:88> col:88 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845da0ee8 <col:102, col:109> col:109 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845da0f60 <col:150, col:166> col:166 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d67cd8 <line:485:28, col:192> col:40 _vswprintf_p 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d67a30 <col:79, col:89> col:89 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d67aa8 <col:103, col:110> col:110 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d67b20 <col:151, col:167> col:167 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d67b98 <col:176, col:184> col:184 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d67ea0 <line:486:24, col:107> col:36 _scwprintf_p 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f845d67dc0 <col:79, col:95> col:95 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d680e8 <line:487:24, col:121> col:36 _vscwprintf_p 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d67f70 <col:80, col:96> col:96 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d67fe8 <col:105, col:113> col:113 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d683f0 <line:489:28, col:147> col:40 _wprintf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d681c0 <col:91, col:107> col:107 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d68238 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d68640 <line:490:28, col:149> col:40 _wprintf_p_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d684c8 <col:93, col:109> col:109 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d68540 <col:127, col:137> col:137 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d68890 <line:491:28, col:149> col:40 _wprintf_s_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d68718 <col:93, col:109> col:109 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d68790 <col:127, col:137> col:137 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d68c58 <line:492:28, col:161> col:40 _vwprintf_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d68988 <col:92, col:108> col:108 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d68a00 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d68a78 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d68f48 <line:493:28, col:163> col:40 _vwprintf_p_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d68d38 <col:94, col:110> col:110 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d68db0 <col:128, col:138> col:138 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d68e28 <col:147, col:155> col:155 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d69238 <line:494:28, col:163> col:40 _vwprintf_s_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d69028 <col:94, col:110> col:110 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d690a0 <col:128, col:138> col:138 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d69118 <col:147, col:155> col:155 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d695f8 <line:496:28, col:170> col:40 _fwprintf_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d69318 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1f845d69390 <col:114, col:130> col:130 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d69408 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d618f0 <line:497:28, col:172> col:40 _fwprintf_p_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d696d8 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1f845d69750 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d697c8 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d61be0 <line:498:28, col:172> col:40 _fwprintf_s_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d619d0 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1f845d61a48 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d61ac0 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d62030 <line:499:28, col:184> col:40 _vfwprintf_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d61cc0 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1f845d61d38 <col:115, col:131> col:131 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d61db0 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d61e28 <col:168, col:176> col:176 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d623c0 <line:500:28, col:186> col:40 _vfwprintf_p_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d62118 <col:63, col:70> col:70 _File 'FILE *'
| |-ParmVarDecl 0x1f845d62190 <col:117, col:133> col:133 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d62208 <col:151, col:161> col:161 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d62280 <col:170, col:178> col:178 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d62750 <line:501:28, col:186> col:40 _vfwprintf_s_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d624a8 <col:63, col:70> col:70 _File 'FILE *'
| |-ParmVarDecl 0x1f845d62520 <col:117, col:133> col:133 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d62598 <col:151, col:161> col:161 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d62610 <col:170, col:178> col:178 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d64c30 <line:503:28, col:218> col:40 _swprintf_c_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d62838 <col:80, col:90> col:90 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d64920 <col:104, col:111> col:111 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d64998 <col:162, col:178> col:178 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d64a10 <col:196, col:206> col:206 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d64fc0 <line:504:28, col:218> col:40 _swprintf_p_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d64d18 <col:80, col:90> col:90 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d64d90 <col:104, col:111> col:111 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d64e08 <col:162, col:178> col:178 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d64e80 <col:196, col:206> col:206 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d65350 <line:505:40, col:228> col:52 _swprintf_s_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d650a8 <col:91, col:101> col:101 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d65120 <col:115, col:122> col:122 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d65198 <col:172, col:188> col:188 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d65210 <col:206, col:216> col:216 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d65858 <line:506:28, col:232> col:40 used _vswprintf_c_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d65438 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d654b0 <col:105, col:112> col:112 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d65528 <col:163, col:179> col:179 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d655a0 <col:197, col:207> col:207 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d65618 <col:216, col:224> col:224 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d62c68 <line:507:28, col:232> col:40 _vswprintf_p_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d62928 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d629a0 <col:105, col:112> col:112 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d62a18 <col:163, col:179> col:179 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d62a90 <col:197, col:207> col:207 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d62b08 <col:216, col:224> col:224 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d63098 <line:508:40, col:242> col:52 _vswprintf_s_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d62d58 <col:92, col:102> col:102 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d62dd0 <col:116, col:123> col:123 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d62e48 <col:173, col:189> col:189 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d62ec0 <col:207, col:217> col:217 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d62f38 <col:226, col:234> col:234 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d63300 <line:510:24, col:145> col:36 _scwprintf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d63188 <col:89, col:105> col:105 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d63200 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d63550 <line:511:24, col:147> col:36 _scwprintf_p_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d633d8 <col:91, col:107> col:107 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d63450 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d63838 <line:512:24, col:161> col:36 _vscwprintf_p_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d63628 <col:92, col:108> col:108 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d636a0 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d63718 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d6ad18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:514:255> col:80 _snwprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d6aa70 <col:117, col:127> col:127 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d6aae8 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d6ab60 <col:199, col:215> col:215 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d6abd8 <col:233, col:243> col:243 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d6add8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d6b348 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:515:40, col:252> col:52 _snwprintf_s_l 'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d6af20 <col:92, col:102> col:102 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d6af98 <col:116, col:123> col:123 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d6b010 <col:138, col:145> col:145 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d6b088 <col:196, col:212> col:212 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d6b100 <col:230, col:240> col:240 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d6b880 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:516:270> col:81 _vsnwprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d6b540 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d6b5b8 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d6b630 <col:201, col:217> col:217 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d6b6a8 <col:235, col:245> col:245 _Locale '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1f845d6b720 <col:254, col:262> col:262 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1f845d69970 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d69f80 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:517:40, col:266> col:52 _vsnwprintf_s_l 'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d69ab8 <col:93, col:103> col:103 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f845d69b30 <col:117, col:124> col:124 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d69ba8 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d69c20 <col:197, col:213> col:213 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d69c98 <col:231, col:241> col:241 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d69d10 <col:250, col:258> col:258 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d6a480 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1957:138> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:533:110 _swprintf 'int (wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d6a248 <col:183, col:192> col:192 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f845d6a2c0 <col:229, col:246> col:246 _Format 'const wchar_t *'
| |-DeprecatedAttr 0x1f845d6a530 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _swprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1f845d6a648 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1f845d63b78 <col:36, line:1958:150> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:533:134 _vswprintf 'int (wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d6a900 <col:183, col:192> col:192 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f845d63920 <col:229, col:246> col:246 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d63998 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1958:137, col:145> col:145 _Args 'va_list':'char *'
| |-DeprecatedAttr 0x1f845d63c30 <line:275:47, col:63> "This function or variable may be unsafe. Consider using vswprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1f845d63d48 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1f845d642e8 <col:36, line:1961:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:534:110 __swprintf_l 'int (wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d64008 <col:211, col:220> col:220 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f845d64080 <col:267, col:284> col:284 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d640f8 <col:293, col:304> col:304 _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-DeprecatedAttr 0x1f845d643a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __swprintf_l_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1f845d644c0 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1f845d6bba0 <col:36, line:1962:166> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:534:124 __vswprintf_l 'int (wchar_t *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d64780 <col:211, col:220> col:220 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f845d647f8 <col:267, col:284> col:284 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d64870 <col:293, col:304> col:304 _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1f845d6b990 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1962:153, col:161> col:161 _Args 'va_list':'char *'
| |-DeprecatedAttr 0x1f845d6bc60 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vswprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1f845d6bd80 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1f845d6c088 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:36:1, line:44:1> line:36:21 swprintf 'int (wchar_t *, size_t, const wchar_t *, ...)' static inline
| |-ParmVarDecl 0x1f845d6bea8 <col:53, col:63> col:63 used _String 'wchar_t *'
| |-ParmVarDecl 0x1f845d6bf20 <col:72, col:79> col:79 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d6bf98 <col:117, col:133> col:133 used _Format 'const wchar_t *'
| `-CompoundStmt 0x1f845d65bd0 <line:37:1, line:44:1>
|   |-DeclStmt 0x1f845d6c1d0 <line:38:5, col:21>
|   | `-VarDecl 0x1f845d6c168 <col:5, col:13> col:13 used _Arglist 'va_list':'char *'
|   |-DeclStmt 0x1f845d6c268 <line:39:5, col:13>
|   | `-VarDecl 0x1f845d6c200 <col:5, col:9> col:9 used _Ret 'int'
|   |-CallExpr 0x1f845d6c5c0 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34, col:62> 'void'
|   | |-ImplicitCastExpr 0x1f845d6c5a8 <col:34> 'void (*)(__builtin_va_list &, ...)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1f845d6c4c0 <col:34> '<builtin fn type>' Function 0x1f845d6c358 '__builtin_va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1f845d6c4f8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:40:19> 'va_list':'char *' lvalue Var 0x1f845d6c168 '_Arglist' 'va_list':'char *'
|   | `-DeclRefExpr 0x1f845d6c530 <col:29> 'const wchar_t *' lvalue ParmVar 0x1f845d6bf98 '_Format' 'const wchar_t *'
|   |-BinaryOperator 0x1f845d6c880 <line:41:5, col:67> 'int' '='
|   | |-DeclRefExpr 0x1f845d6c5f0 <col:5> 'int' lvalue Var 0x1f845d6c200 '_Ret' 'int'
|   | `-CallExpr 0x1f845d6c7c0 <col:12, col:67> 'int'
|   |   |-ImplicitCastExpr 0x1f845d6c7a8 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f845d6c628 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1f845d65858 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|   |   |-ImplicitCastExpr 0x1f845d6c808 <col:27> 'wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845d6c648 <col:27> 'wchar_t *' lvalue ParmVar 0x1f845d6bea8 '_String' 'wchar_t *'
|   |   |-ImplicitCastExpr 0x1f845d6c820 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845d6c668 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1f845d6bf20 '_Count' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1f845d6c838 <col:44> 'const wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845d6c688 <col:44> 'const wchar_t *' lvalue ParmVar 0x1f845d6bf98 '_Format' 'const wchar_t *'
|   |   |-ImplicitCastExpr 0x1f845d6c850 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> '_locale_t':'struct localeinfo_struct *' <NullToPointer>
|   |   | `-ParenExpr 0x1f845d6c710 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x1f845d6c6e8 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x1f845d6c6a8 <col:26> 'int' 0
|   |   `-ImplicitCastExpr 0x1f845d6c868 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:41:59> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f845d6c730 <col:59> 'va_list':'char *' lvalue Var 0x1f845d6c168 '_Arglist' 'va_list':'char *'
|   |-CallExpr 0x1f845d65b60 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:27:34, col:53> 'void'
|   | |-ImplicitCastExpr 0x1f845d65b48 <col:34> 'void (*)(__builtin_va_list &)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1f845d65a98 <col:34> '<builtin fn type>' Function 0x1f845d65930 '__builtin_va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1f845d65ad0 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:42:17> 'va_list':'char *' lvalue Var 0x1f845d6c168 '_Arglist' 'va_list':'char *'
|   `-ReturnStmt 0x1f845d65bc0 <line:43:5, col:12>
|     `-ImplicitCastExpr 0x1f845d65ba8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1f845d65b88 <col:12> 'int' lvalue Var 0x1f845d6c200 '_Ret' 'int'
|-FunctionDecl 0x1f845d6c358 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34> col:34 implicit used __builtin_va_start 'void (__builtin_va_list &, ...)' extern
| |-ParmVarDecl 0x1f845d6c3f8 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1f845d6c468 <col:34> Implicit
|-FunctionDecl 0x1f845d65930 <line:27:34> col:34 implicit used __builtin_va_end 'void (__builtin_va_list &)' extern
| |-ParmVarDecl 0x1f845d659d0 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1f845d65a40 <col:34> Implicit
|-FunctionDecl 0x1f845d65ec8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:49:1, line:52:1> line:49:31 vswprintf 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)' static inline
| |-ParmVarDecl 0x1f845d65c20 <col:64, col:74> col:74 used _String 'wchar_t *'
| |-ParmVarDecl 0x1f845d65c98 <col:83, col:90> col:90 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d65d10 <col:138, col:154> col:154 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d65d88 <col:163, col:171> col:171 used _Ap 'va_list':'char *'
| `-CompoundStmt 0x1f845d661b0 <line:50:1, line:52:1>
|   `-ReturnStmt 0x1f845d661a0 <line:51:5, col:62>
|     `-CallExpr 0x1f845d660e0 <col:12, col:62> 'int'
|       |-ImplicitCastExpr 0x1f845d660c8 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1f845d65fa0 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1f845d65858 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|       |-ImplicitCastExpr 0x1f845d66128 <col:27> 'wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f845d65fc0 <col:27> 'wchar_t *' lvalue ParmVar 0x1f845d65c20 '_String' 'wchar_t *'
|       |-ImplicitCastExpr 0x1f845d66140 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1f845d65fe0 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1f845d65c98 '_Count' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1f845d66158 <col:44> 'const wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f845d66000 <col:44> 'const wchar_t *' lvalue ParmVar 0x1f845d65d10 '_Format' 'const wchar_t *'
|       |-ImplicitCastExpr 0x1f845d66170 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> '_locale_t':'struct localeinfo_struct *' <NullToPointer>
|       | `-ParenExpr 0x1f845d66088 <col:17, col:27> 'void *'
|       |   `-CStyleCastExpr 0x1f845d66060 <col:18, col:26> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x1f845d66020 <col:26> 'int' 0
|       `-ImplicitCastExpr 0x1f845d66188 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:51:59> 'va_list':'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1f845d660a8 <col:59> 'va_list':'char *' lvalue ParmVar 0x1f845d65d88 '_Ap' 'va_list':'char *'
|-FunctionDecl 0x1f845d66450 <line:60:1, line:68:1> line:60:21 _swprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)' static inline
| |-ParmVarDecl 0x1f845d661d8 <col:56, col:66> col:66 used _String 'wchar_t *'
| |-ParmVarDecl 0x1f845d66250 <col:75, col:82> col:82 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d662c8 <col:130, col:146> col:146 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d66340 <col:155, col:165> col:165 used _Plocinfo '_locale_t':'struct localeinfo_struct *'
| `-CompoundStmt 0x1f845d6da58 <line:61:1, line:68:1>
|   |-DeclStmt 0x1f845d665a0 <line:62:5, col:21>
|   | `-VarDecl 0x1f845d66538 <col:5, col:13> col:13 used _Arglist 'va_list':'char *'
|   |-DeclStmt 0x1f845d66638 <line:63:5, col:13>
|   | `-VarDecl 0x1f845d665d0 <col:5, col:9> col:9 used _Ret 'int'
|   |-CallExpr 0x1f845d666e0 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34, col:62> 'void'
|   | |-ImplicitCastExpr 0x1f845d666c8 <col:34> 'void (*)(__builtin_va_list &, ...)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1f845d66650 <col:34> '<builtin fn type>' Function 0x1f845d6c358 '__builtin_va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1f845d66670 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:64:19> 'va_list':'char *' lvalue Var 0x1f845d66538 '_Arglist' 'va_list':'char *'
|   | `-DeclRefExpr 0x1f845d666a8 <col:29> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1f845d66340 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|   |-BinaryOperator 0x1f845d668e0 <line:65:5, col:72> 'int' '='
|   | |-DeclRefExpr 0x1f845d66710 <col:5> 'int' lvalue Var 0x1f845d665d0 '_Ret' 'int'
|   | `-CallExpr 0x1f845d66820 <col:12, col:72> 'int'
|   |   |-ImplicitCastExpr 0x1f845d66808 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f845d66748 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1f845d65858 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|   |   |-ImplicitCastExpr 0x1f845d66868 <col:27> 'wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845d66768 <col:27> 'wchar_t *' lvalue ParmVar 0x1f845d661d8 '_String' 'wchar_t *'
|   |   |-ImplicitCastExpr 0x1f845d66880 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845d66788 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1f845d66250 '_Count' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1f845d66898 <col:44> 'const wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845d667a8 <col:44> 'const wchar_t *' lvalue ParmVar 0x1f845d662c8 '_Format' 'const wchar_t *'
|   |   |-ImplicitCastExpr 0x1f845d668b0 <col:53> '_locale_t':'struct localeinfo_struct *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845d667c8 <col:53> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1f845d66340 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|   |   `-ImplicitCastExpr 0x1f845d668c8 <col:64> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f845d667e8 <col:64> 'va_list':'char *' lvalue Var 0x1f845d66538 '_Arglist' 'va_list':'char *'
|   |-CallExpr 0x1f845d6d9e8 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:27:34, col:53> 'void'
|   | |-ImplicitCastExpr 0x1f845d6d9d0 <col:34> 'void (*)(__builtin_va_list &)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1f845d66900 <col:34> '<builtin fn type>' Function 0x1f845d65930 '__builtin_va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1f845d6d9b0 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:66:17> 'va_list':'char *' lvalue Var 0x1f845d66538 '_Arglist' 'va_list':'char *'
|   `-ReturnStmt 0x1f845d6da48 <line:67:5, col:12>
|     `-ImplicitCastExpr 0x1f845d6da30 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1f845d6da10 <col:12> 'int' lvalue Var 0x1f845d665d0 '_Ret' 'int'
|-FunctionDecl 0x1f845d6dde8 <line:73:1, line:76:1> line:73:31 _vswprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' static inline
| |-ParmVarDecl 0x1f845d6daa8 <col:67, col:77> col:77 used _String 'wchar_t *'
| |-ParmVarDecl 0x1f845d6db20 <col:86, col:93> col:93 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d6db98 <col:141, col:157> col:157 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d6dc10 <col:166, col:176> col:176 used _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1f845d6dc88 <col:187, col:195> col:195 used _Ap 'va_list':'char *'
| `-CompoundStmt 0x1f845d6e070 <line:74:1, line:76:1>
|   `-ReturnStmt 0x1f845d6e060 <line:75:5, col:67>
|     `-CallExpr 0x1f845d6dfa0 <col:12, col:67> 'int'
|       |-ImplicitCastExpr 0x1f845d6df88 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1f845d6dec8 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1f845d65858 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|       |-ImplicitCastExpr 0x1f845d6dfe8 <col:27> 'wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f845d6dee8 <col:27> 'wchar_t *' lvalue ParmVar 0x1f845d6daa8 '_String' 'wchar_t *'
|       |-ImplicitCastExpr 0x1f845d6e000 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1f845d6df08 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1f845d6db20 '_Count' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1f845d6e018 <col:44> 'const wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f845d6df28 <col:44> 'const wchar_t *' lvalue ParmVar 0x1f845d6db98 '_Format' 'const wchar_t *'
|       |-ImplicitCastExpr 0x1f845d6e030 <col:53> '_locale_t':'struct localeinfo_struct *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f845d6df48 <col:53> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1f845d6dc10 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|       `-ImplicitCastExpr 0x1f845d6e048 <col:64> 'va_list':'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1f845d6df68 <col:64> 'va_list':'char *' lvalue ParmVar 0x1f845d6dc88 '_Ap' 'va_list':'char *'
|-FunctionDecl 0x1f845d6e2b8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:555:24, col:129> col:42 _wtempnam 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845d6e098 <col:63, col:79> col:79 _Directory 'const wchar_t *'
| `-ParmVarDecl 0x1f845d6e110 <col:102, col:118> col:118 _FilePrefix 'const wchar_t *'
|-FunctionDecl 0x1f845d6e508 <line:561:24, col:119> col:36 _vscwprintf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1f845d6e390 <col:78, col:94> col:94 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d6e408 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d6e7f0 <line:562:24, col:159> col:36 _vscwprintf_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1f845d6e5e0 <col:90, col:106> col:106 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d6e658 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1f845d6e6d0 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1f845d72b78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:563:158> col:71 fwscanf 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d72a00 <col:87, col:94> col:94 _File 'FILE *'
| |-ParmVarDecl 0x1f845d72a78 <col:130, col:146> col:146 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1f845d72c28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d73038 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:564:206> col:78 _fwscanf_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d72e28 <col:97, col:104> col:104 _File 'FILE *'
| |-ParmVarDecl 0x1f845d72ea0 <col:150, col:166> col:166 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d72f18 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d730f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d733a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:568:28, col:131> col:40 fwscanf_s 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d73230 <col:58, col:65> col:65 _File 'FILE *'
| `-ParmVarDecl 0x1f845d732a8 <col:103, col:119> col:119 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d73690 <line:570:28, col:172> col:40 _fwscanf_s_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d73480 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1f845d734f8 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d73570 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d73a80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:571:165> col:71 swscanf 'int (const wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d73830 <col:86, col:102> col:102 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f845d738a8 <col:137, col:153> col:153 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1f845d73b30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using swscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d74008 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:572:213> col:78 _swscanf_l 'int (const wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d73d30 <col:96, col:112> col:112 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f845d73da8 <col:157, col:173> col:173 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d73e20 <col:191, col:201> col:201 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d740c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _swscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d74378 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:574:40, col:149> col:52 swscanf_s 'int (const wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d74200 <col:69, col:84> col:84 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f845d74278 <col:121, col:137> col:137 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d74660 <line:576:40, col:191> col:52 _swscanf_s_l 'int (const wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d74450 <col:72, col:88> col:88 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f845d744c8 <col:135, col:151> col:151 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d74540 <col:169, col:179> col:179 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d75b18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:577:219> col:77 _snwscanf 'int (const wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d74800 <col:117, col:133> col:133 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f845d74878 <col:144, col:151> col:151 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d748f0 <col:191, col:207> col:207 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1f845d75bd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d76150 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:578:261> col:79 _snwscanf_l 'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d75dd0 <col:121, col:137> col:137 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f845d75e48 <col:148, col:155> col:155 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d75ec0 <col:205, col:221> col:221 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d75f38 <col:239, col:249> col:249 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d76210 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d76560 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:579:40, col:198> col:52 _snwscanf_s 'int (const wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d76350 <col:94, col:110> col:110 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f845d763c8 <col:121, col:128> col:128 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d76440 <col:170, col:186> col:186 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d768e8 <line:580:40, col:238> col:52 _snwscanf_s_l 'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d76640 <col:96, col:112> col:112 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f845d766b8 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d76730 <col:182, col:198> col:198 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d767a8 <col:216, col:226> col:226 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d6fb80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:581:134> col:70 wscanf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| |-ParmVarDecl 0x1f845d6faa0 <col:106, col:122> col:122 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1f845d6fc28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d6ffa0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:582:182> col:77 _wscanf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d6fe28 <col:126, col:142> col:142 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1f845d6fea0 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845d70050 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d70270 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:584:40, col:120> col:52 wscanf_s 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1f845d70190 <col:92, col:108> col:108 _Format 'const wchar_t *'
|-FunctionDecl 0x1f845d704b8 <line:586:40, col:161> col:52 _wscanf_s_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1f845d70340 <col:105, col:121> col:121 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1f845d703b8 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d707b8 <line:589:24, col:99> col:39 _wfdopen 'FILE *(int, const wchar_t *) __attribute__((cdecl))':'FILE *(int, const wchar_t *)'
| |-ParmVarDecl 0x1f845d70598 <col:53, col:57> col:57 _FileHandle 'int'
| `-ParmVarDecl 0x1f845d70610 <col:78, col:94> col:94 _Mode 'const wchar_t *'
|-FunctionDecl 0x1f845d74bc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:590:144> col:74 _wfopen 'FILE *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845d70950 <col:89, col:105> col:105 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f845d74a20 <col:123, col:139> col:139 _Mode 'const wchar_t *'
| `-DeprecatedAttr 0x1f845d74c78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wfopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d75080 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:591:28, col:157> col:44 _wfopen_s 'errno_t (FILE **, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (FILE **, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845d74dc0 <col:80, col:88> col:88 _File 'FILE **'
| |-ParmVarDecl 0x1f845d74e38 <col:102, col:118> col:118 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x1f845d74eb0 <col:136, col:152> col:152 _Mode 'const wchar_t *'
|-FunctionDecl 0x1f845d754e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:592:173> col:76 _wfreopen 'FILE *(const wchar_t *, const wchar_t *, FILE *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1f845d75220 <col:93, col:109> col:109 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f845d75298 <col:127, col:143> col:143 _Mode 'const wchar_t *'
| |-ParmVarDecl 0x1f845d75310 <col:158, col:165> col:165 _OldFile 'FILE *'
| `-DeprecatedAttr 0x1f845d75598 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wfreopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d77a98 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:593:28, col:184> col:44 _wfreopen_s 'errno_t (FILE **, const wchar_t *, const wchar_t *, FILE *) __attribute__((cdecl))':'errno_t (FILE **, const wchar_t *, const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1f845d756e0 <col:82, col:90> col:90 _File 'FILE **'
| |-ParmVarDecl 0x1f845d75758 <col:104, col:120> col:120 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f845d757d0 <col:138, col:154> col:154 _Mode 'const wchar_t *'
| `-ParmVarDecl 0x1f845d75848 <col:169, col:176> col:176 _OldFile 'FILE *'
|-FunctionDecl 0x1f845d77cf0 <line:597:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x1f845d77b80 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1f845d77f30 <line:600:24, col:107> col:39 _wpopen 'FILE *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845d77dc0 <col:54, col:69> col:69 _Command 'const wchar_t *'
| `-ParmVarDecl 0x1f845d77e38 <col:86, col:102> col:102 _Mode 'const wchar_t *'
|-FunctionDecl 0x1f845d780e8 <line:602:9, col:62> col:21 _wremove 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1f845d78008 <col:37, col:53> col:53 _Filename 'const wchar_t *'
|-FunctionDecl 0x1f845d783d8 <line:603:28, col:127> col:44 _wtmpnam_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845d781b8 <col:84, col:94> col:94 _DstBuf 'wchar_t *'
| `-ParmVarDecl 0x1f845d78230 <col:108, col:115> col:115 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845d78648 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:605:82 _wtmpnam 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f845d78570 <col:118, col:127> col:127 _Buffer 'wchar_t *'
| `-DeprecatedAttr 0x1f845d786f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wtmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d78908 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:607:28, col:78> col:43 _fgetwc_nolock 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1f845d78830 <col:66, col:73> col:73 _File 'FILE *'
|-FunctionDecl 0x1f845d76b38 <line:608:28, col:96> col:43 _fputwc_nolock 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1f845d789d8 <col:63, col:71> col:71 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1f845d76a40 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1f845d76d80 <line:609:28, col:96> col:43 _ungetwc_nolock 'wint_t (wint_t, FILE *) __attribute__((cdecl))':'wint_t (wint_t, FILE *)'
| |-ParmVarDecl 0x1f845d76c10 <col:64, col:71> col:71 _Ch 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845d76c88 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1f845d76f30 <line:670:9, col:53> col:22 _lock_file 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1f845d76e58 <col:41, col:48> col:48 _File 'FILE *'
|-FunctionDecl 0x1f845d770d8 <line:671:9, col:55> col:22 _unlock_file 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1f845d77000 <col:43, col:50> col:50 _File 'FILE *'
|-FunctionDecl 0x1f845d77288 <line:673:28, col:75> col:40 _fclose_nolock 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d771a8 <col:63, col:70> col:70 _File 'FILE *'
|-FunctionDecl 0x1f845d77438 <line:674:28, col:79> col:40 _fflush_nolock 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1f845d77358 <col:67, col:74> col:74 _File 'FILE *'
|-FunctionDecl 0x1f845d777b0 <line:675:28, col:179> col:43 _fread_nolock 'size_t (void *, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1f845d77510 <col:97, col:104> col:104 _DstBuf 'void *'
| |-ParmVarDecl 0x1f845d77588 <col:118, col:125> col:125 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d77600 <col:144, col:151> col:151 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d77678 <col:167, col:174> col:174 _File 'FILE *'
|-FunctionDecl 0x1f845d78c30 <line:676:28, col:203> col:43 _fread_nolock_s 'size_t (void *, size_t, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1f845d778a0 <col:99, col:106> col:106 _DstBuf 'void *'
| |-ParmVarDecl 0x1f845d77918 <col:120, col:127> col:127 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d77990 <col:142, col:149> col:149 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d78a60 <col:168, col:175> col:175 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d78ad8 <col:191, col:198> col:198 _File 'FILE *'
|-FunctionDecl 0x1f845d78f40 <line:677:28, col:111> col:40 _fseek_nolock 'int (FILE *, long, int) __attribute__((cdecl))':'int (FILE *, long, int)'
| |-ParmVarDecl 0x1f845d78d20 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1f845d78da0 <col:81, col:86> col:86 _Offset 'long'
| `-ParmVarDecl 0x1f845d78e20 <col:100, col:104> col:104 _Origin 'int'
|-FunctionDecl 0x1f845d79100 <line:678:24, col:71> col:37 _ftell_nolock 'long (FILE *) __attribute__((cdecl))':'long (FILE *)'
| `-ParmVarDecl 0x1f845d79020 <col:59, col:66> col:66 _File 'FILE *'
|-FunctionDecl 0x1f845d793f0 <line:679:28, col:117> col:40 _fseeki64_nolock 'int (FILE *, long long, int) __attribute__((cdecl))':'int (FILE *, long long, int)'
| |-ParmVarDecl 0x1f845d791d0 <col:65, col:72> col:72 _File 'FILE *'
| |-ParmVarDecl 0x1f845d79250 <col:84, col:92> col:92 _Offset 'long long'
| `-ParmVarDecl 0x1f845d792d0 <col:106, col:110> col:110 _Origin 'int'
|-FunctionDecl 0x1f845d795b0 <line:680:24, col:77> col:40 _ftelli64_nolock 'long long (FILE *) __attribute__((cdecl))':'long long (FILE *)'
| `-ParmVarDecl 0x1f845d794d0 <col:65, col:72> col:72 _File 'FILE *'
|-FunctionDecl 0x1f845d79928 <line:681:28, col:170> col:43 _fwrite_nolock 'size_t (const void *, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (const void *, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1f845d79688 <col:89, col:102> col:102 _DstBuf 'const void *'
| |-ParmVarDecl 0x1f845d79700 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d79778 <col:135, col:142> col:142 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d797f0 <col:158, col:165> col:165 _File 'FILE *'
|-FunctionDecl 0x1f845d71b68 <line:682:28, col:89> col:40 _ungetc_nolock 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f845d719f0 <col:60, col:64> col:64 _Ch 'int'
| `-ParmVarDecl 0x1f845d71a68 <col:77, col:84> col:84 _File 'FILE *'
|-FunctionDecl 0x1f845d71ea0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:709:136> col:57 tempnam 'char *(const char *, const char *) __attribute__((cdecl))':'char *(const char *, const char *)'
| |-ParmVarDecl 0x1f845d71d20 <col:76, col:89> col:89 _Directory 'const char *'
| |-ParmVarDecl 0x1f845d71da0 <col:112, col:125> col:125 _FilePrefix 'const char *'
| `-DeprecatedAttr 0x1f845d71f50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _tempnam. See online help for details." ""
|-FunctionDecl 0x1f845d72208 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:715:89> col:75 fcloseall 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1f845d722a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcloseall. See online help for details." ""
|-FunctionDecl 0x1f845d725e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:716:127> col:71 fdopen 'FILE *(int, const char *) __attribute__((cdecl))':'FILE *(int, const char *)'
| |-ParmVarDecl 0x1f845d72470 <col:83, col:87> col:87 _FileHandle 'int'
| |-ParmVarDecl 0x1f845d724f0 <col:107, col:120> col:120 _Format 'const char *'
| `-DeprecatedAttr 0x1f845d72698 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fdopen. See online help for details." ""
|-FunctionDecl 0x1f845d7caa0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:717:87> col:74 fgetchar 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1f845d7cb40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fgetchar. See online help for details." ""
|-FunctionDecl 0x1f845d7cde0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:718:92> col:68 fileno 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| |-ParmVarDecl 0x1f845d7cd00 <col:80, col:87> col:87 _File 'FILE *'
| `-DeprecatedAttr 0x1f845d7ce88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fileno. See online help for details." ""
|-FunctionDecl 0x1f845d7d108 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:719:87> col:74 flushall 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1f845d7d1a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _flushall. See online help for details." ""
|-FunctionDecl 0x1f845d7d450 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:720:95> col:74 fputchar 'int (int) __attribute__((cdecl))':'int (int)'
| |-ParmVarDecl 0x1f845d7d370 <col:88, col:92> col:92 _Ch 'int'
| `-DeprecatedAttr 0x1f845d7d4f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fputchar. See online help for details." ""
|-FunctionDecl 0x1f845d7d7d8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:721:91> col:66 getw 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| |-ParmVarDecl 0x1f845d7d6f8 <col:79, col:86> col:86 _File 'FILE *'
| `-DeprecatedAttr 0x1f845d7d880 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _getw. See online help for details." ""
|-FunctionDecl 0x1f845d7abf8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:722:109> col:70 putw 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1f845d7aa80 <col:80, col:84> col:84 _Ch 'int'
| |-ParmVarDecl 0x1f845d7aaf8 <col:97, col:104> col:104 _File 'FILE *'
| `-DeprecatedAttr 0x1f845d7aca8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putw. See online help for details." ""
|-FunctionDecl 0x1f845d7af68 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:723:77> col:67 rmtmp 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1f845d7b008 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _rmtmp. See online help for details." ""
|-FunctionDecl 0x1f845d7b4b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x1f845d7b130 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x1f845d7b1b0 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x1f845d7b230 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x1f845d7b2a8 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845d7b878 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1f845d7b918 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1f845d7b980 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1f845d7b9e8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845d7eac0 prev 0x1f845d7b878 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1f845d7b5a0 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x1f845d7b620 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x1f845d7b698 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845d7ee78 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1f845d7eba8 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x1f845d7ec28 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x1f845d7eca0 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845d7f2e0 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845d7ef60 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x1f845d7efe0 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x1f845d7f058 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d7f0d0 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845d7f5e8 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1f845d7f688 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1f845d7f6f0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1f845d7f758 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845d7f7d8 prev 0x1f845d7f5e8 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1f845d7f3d0 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x1f845d7f450 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x1f845d7f4c8 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845d79b58 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1f845d79bf8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f845d79c60 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1f845d79cc8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845d79d48 prev 0x1f845d79b58 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1f845d7f8c0 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x1f845d7f940 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x1f845d7f9b8 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845d7a1a8 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1f845d79e30 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x1f845d79ea8 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f845d79f28 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1f845d79fa0 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f845d7a568 <line:94:25> col:25 implicit memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1f845d7a608 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f845d7a670 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1f845d7a6d8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845d7a758 prev 0x1f845d7a568 <col:9, col:107> col:25 memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x1f845d7a298 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x1f845d7a318 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x1f845d7a390 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845d7fc10 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1f845d7fcb0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f845d7fd18 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1f845d7fd80 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1f845d7fde8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845d7fe70 prev 0x1f845d7fc10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1f845d7a8e0 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x1f845d7a960 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x1f845d7a9e0 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x1f845d7fad0 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845d7ff30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x1f845d80310 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1f845d800f8 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x1f845d80178 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x1f845d801f0 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845d803c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x1f845d807c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1f845d804f0 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1f845d80568 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d805e8 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x1f845d7bb30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1f845d80968 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x1f845d809e8 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x1f845d7bbe0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d7bff0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1f845d7bd28 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1f845d7bda0 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d7be20 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x1f845d7c380 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1f845d7c420 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1f845d7c488 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845d7c500 prev 0x1f845d7c380 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x1f845d7c198 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x1f845d7c218 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x1f845d7c5b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845d7c908 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1f845d7c6f8 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1f845d7c770 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1f845d7c7f0 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x1f845dae898 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1f845dae938 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1f845dae9a0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845daea18 prev 0x1f845dae898 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x1f845dae718 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x1f845dae798 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x1f845daeac8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845daed90 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x1f845daee30 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845daee98 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845daef10 prev 0x1f845daed90 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x1f845daec10 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x1f845daec90 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x1f845daf160 <line:121:32> col:32 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x1f845daf200 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845daf270 prev 0x1f845daf160 <col:16, col:63> col:32 used strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x1f845daeff0 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x1f845daf568 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1f845daf348 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1f845daf3c0 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845daf7d8 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x1f845daf668 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x1f845daf6e0 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1f845dafb08 <line:131:1, line:133:1>
|   `-ReturnStmt 0x1f845dafaf8 <line:132:5, col:51>
|     `-ConditionalOperator 0x1f845dafac8 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x1f845daf938 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x1f845daf918 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x1f845daf8e8 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1f845daf8a0 <col:13> 'const char *' lvalue ParmVar 0x1f845daf668 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x1f845daf900 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x1f845daf8c0 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x1f845dafab0 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1f845daf958 <col:24> 'int' 0
|       `-CallExpr 0x1f845dafa50 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1f845dafa38 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1f845daf980 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x1f845daf568 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x1f845dafa80 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1f845daf9a0 <col:36> 'const char *' lvalue ParmVar 0x1f845daf668 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x1f845dafa98 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1f845daf9c0 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x1f845daf6e0 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dafde0 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1f845dafb38 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x1f845dafbb0 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f845dafc30 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x1f845dafca8 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f845db00e8 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1f845db0188 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f845db01f0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1f845db0258 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845db02d8 prev 0x1f845db00e8 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1f845dafed0 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x1f845daff50 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1f845daffc8 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845db0508 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x1f845db03c0 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x1f845dab790 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1f845dab830 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845dab898 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f845dab910 prev 0x1f845dab790 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1f845db05e0 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x1f845dab628 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x1f845dabb70 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f845dab9f0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1f845daba70 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1f845dabdd0 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f845dabc50 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1f845dabcd0 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1f845dac188 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1f845dabeb0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1f845dabf30 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1f845dabfa8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dac3f0 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f845dac270 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x1f845dac2f0 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1f845db0780 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1f845dac4d0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1f845dac550 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1f845db0660 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845db09e8 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f845db0868 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x1f845db08e8 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x1f845db0ce0 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1f845db0ac8 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x1f845db0b48 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x1f845db0bc0 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845db1098 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1f845db0dc8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1f845db0e48 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1f845db0ec0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845db1500 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845db1180 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1f845db1200 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1f845db1278 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845db12f0 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845db3840 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1f845db15f0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1f845db36a8 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1f845db3720 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845db3bd8 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845db3928 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x1f845db39a8 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x1f845db3a20 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845db3a98 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845db3ee8 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1f845db3f88 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845db3ff0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845db4068 prev 0x1f845db3ee8 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1f845db3cc8 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1f845db3d48 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x1f845db42e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1f845db4208 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x1f845db4390 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845db4780 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x1f845db44d8 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x1f845db4550 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845db45d0 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x1f845db4a58 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x1f845db4af8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f845db4b68 prev 0x1f845db4a58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x1f845db4928 <col:90> col:93 'int'
| `-DeprecatedAttr 0x1f845db4c10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845db4f68 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1f845db4d58 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x1f845db4dd0 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845db4e50 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x1f845db5228 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1f845db5050 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1f845db50c8 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845db54a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f845db53c8 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1f845db5550 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845db1930 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845db1670 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1f845db16e8 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845db1760 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845db1d00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1f845db1ad8 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1f845db1b50 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845db1db0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845db2268 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1f845db1ef8 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x1f845db1f70 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f845db1ff0 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x1f845db2068 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f845dad6a8 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1f845dad748 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f845dad7b0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845dad818 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845dad898 prev 0x1f845dad6a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1f845db2418 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x1f845db2498 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x1f845db2510 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845dad950 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dadcb0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1f845dadd50 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f845daddb8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845dade20 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845dadea0 prev 0x1f845dadcb0 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1f845dada98 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x1f845dadb18 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x1f845dadb90 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dae1a0 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1f845dadf88 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x1f845dae008 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x1f845dae080 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dae538 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845dae288 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1f845dae308 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1f845dae380 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dae3f8 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845db6968 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1f845db66c0 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1f845db6738 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f845db67b8 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x1f845db6830 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f845db6d30 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1f845db6dd0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f845db6e38 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845db6ea0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845db6f20 prev 0x1f845db6d30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1f845db6b18 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x1f845db6b98 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x1f845db6c10 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845db6fd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845db7498 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x1f845db7120 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x1f845db7198 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845db7218 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x1f845db7290 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845db5918 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1f845db7648 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x1f845db56c8 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x1f845db5740 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845db59d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845db5c98 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1f845db5d38 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845db5da0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845db5e18 prev 0x1f845db5c98 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1f845db5b18 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1f845db5b98 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x1f845db6078 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1f845db6118 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845db6180 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f845db61f8 prev 0x1f845db6078 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1f845db5ef8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1f845db5f78 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x1f845db63b8 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x1f845db62d8 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x1f845db6608 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1f845db76d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845db7738 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845db77b0 prev 0x1f845db6608 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1f845db6490 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x1f845db6510 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x1f845db7a10 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1f845db7ab0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845db7b18 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845db7b90 prev 0x1f845db7a10 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1f845db7890 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x1f845db7910 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x1f845db7eb0 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1f845db7f50 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1f845db7fb8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845db8030 prev 0x1f845db7eb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x1f845db7d30 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x1f845db7db0 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x1f845db80e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845db84c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x1f845db8228 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x1f845db82a8 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x1f845db8328 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x1f845db8740 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1f845db85b0 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1f845db8628 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845db89c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f845db88e0 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1f845db8a68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845db8db8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845db8bb0 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1f845db8c28 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845db8ca0 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845db90d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1f845db8f60 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1f845db8fd8 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845db9188 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845db95a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1f845db9640 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1f845dbf750 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f845dbf7b8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845dbf838 prev 0x1f845db95a0 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1f845db92d0 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1f845db9350 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x1f845db93c8 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dbfc98 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845dbf920 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1f845dbf9a0 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x1f845dbfa18 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dbfa90 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dbff08 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x1f845dbffa8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1f845dc0018 prev 0x1f845dbff08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x1f845dbfe28 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x1f845dc00c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x1f845dc0408 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f845dc0288 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1f845dc0308 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1f845dc04b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x1f845dbb810 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1f845dc0680 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1f845dbb710 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1f845dbb8c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x1f845dbbb68 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f845dbba88 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1f845dbbc10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x1f845dbbff0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1f845dbbdd8 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x1f845dbbe58 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x1f845dbbed0 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845dbc0a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x1f845dbc488 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1f845dbc270 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x1f845dbc2f0 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x1f845dbc368 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845dbc540 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x1f845dba7e0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f845dba700 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1f845dba888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x1f845dbabd0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1f845dbaa50 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x1f845dbaad0 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x1f845dbac80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x1f845dbaf28 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1f845dbae48 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1f845dbafd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x1f845dbb260 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x1f845dbb0f0 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x1f845dbb5f0 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1f845dbb330 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845dbb3a8 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dbb420 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x1f845dbda18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dbd800 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f845dbd878 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1f845dbdac8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dbde28 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x1f845dbdec8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1f845dbdf30 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x1f845dbdfa8 prev 0x1f845dbde28 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x1f845dbdc08 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f845dbdc80 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f845dbe2a0 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x1f845dbe340 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1f845dbe3a8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1f845dbe420 prev 0x1f845dbe2a0 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x1f845dbe080 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1f845dbe0f8 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x1f845dbc720 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1f845dbe4f8 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845dbe570 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dbe5e8 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x1f845dbca30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dbc8c0 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f845dbc938 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1f845dbcae0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dbce38 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dbcc20 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f845dbcc98 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x1f845dbd080 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x1f845dbd120 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1f845dbd190 prev 0x1f845dbd080 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x1f845dbcf10 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x1f845dbd478 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845dbd260 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f845dbd2d8 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dc0760 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x1f845dbd550 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f845dbd5c8 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1f845dc0af8 <line:306:1, line:308:1>
|   `-ReturnStmt 0x1f845dc0ae8 <line:307:5, col:56>
|     `-ConditionalOperator 0x1f845dc0ab8 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x1f845dc0920 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x1f845dc0900 <col:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x1f845dc08d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1f845dc0828 <col:13> 'const wchar_t *' lvalue ParmVar 0x1f845dbd550 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x1f845dc08e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x1f845dc08b0 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x1f845dc0888 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x1f845dc0848 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x1f845dc0aa0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1f845dc0940 <col:29> 'int' 0
|       `-CallExpr 0x1f845dc0a40 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1f845dc0a28 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1f845dc0968 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x1f845dbd478 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x1f845dc0a70 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x1f845dc0988 <col:41> 'const wchar_t *' lvalue ParmVar 0x1f845dbd550 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x1f845dc0a88 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1f845dc09a8 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x1f845dbd5c8 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dc0e88 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1f845dc0b20 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845dc0b98 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f845dc0c10 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc0c88 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f845dc12f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845dc1030 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f845dc10a8 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc1120 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845dc13a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845db9768 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x1f845db9808 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x1f845db9870 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1f845db98d8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f845db9958 prev 0x1f845db9768 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x1f845dc14e8 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc1560 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc15d8 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845db9cd8 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1f845db9a38 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845db9ab0 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f845db9b28 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f845db9ba0 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1f845dba088 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845db9e80 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f845db9ef8 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1f845db9f70 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845dba140 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dba3f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dba280 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f845dba2f8 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x1f845dba638 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1f845dba4c8 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f845dba540 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f845dc5948 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dc57d8 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc5850 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x1f845dc5b90 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dc5a20 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc5a98 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x1f845dc5e98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dc5d28 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f845dc5da0 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x1f845dc5f48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dc63b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1f845dc6088 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f845dc6100 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc61e0 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x1f845dc66d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x1f845dc6558 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x1f845dc1770 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dc1b80 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1f845dc18b0 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x1f845dc1928 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dc19a8 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x1f845dc1df8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1f845dc1d20 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1f845dc1ea0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dc2260 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1f845dc1fe0 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x1f845dc2058 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dc20d0 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1f845dc24b8 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dc2340 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc23b8 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x1f845dc2868 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f845dc2590 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc2608 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc2680 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dc2b58 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845dc2948 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc29c0 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc2a38 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dc2fb0 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845dc2c38 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc2cb0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc2d28 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dc2da0 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dc3408 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x1f845dc3098 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845dc3110 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845dc3188 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1f845dc3200 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dc38b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1f845dc35b0 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f845dc3628 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1f845dc36a0 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845dc3968 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dc3b80 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x1f845dc3aa8 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x1f845dc3f10 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x1f845dc3c50 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845dc3cc8 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dc3d40 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f845dc42c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1f845dc40b0 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f845dc4128 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1f845dc4378 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dc4628 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845dc44b8 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x1f845dc4530 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dbe8e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f845dbe810 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1f845dbe990 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dbed90 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845dbead0 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f845dbeb48 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dbebc0 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dbf148 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f845dbef30 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1f845dbefa8 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845dbf1f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dbf4a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845dbf338 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x1f845dbf3b0 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dcb810 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f845dbf640 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1f845dcb8b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dcbc00 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845dcb9f8 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f845dcba70 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dcbae8 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dcbf10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f845dcbda0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1f845dcbe18 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f845dcbfc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f845dcc3c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845dcc100 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845dcc178 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f845dcc1f0 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dc77d0 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845dcc4a0 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1f845dcc518 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f845dcc590 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dcc608 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dc7a30 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dc78b8 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc7930 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x1f845dc7d18 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f845dc7b08 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc7b80 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc7bf8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dc7f70 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dc7df8 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc7e70 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x1f845dc8258 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f845dc8048 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc80c0 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc8138 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dc8548 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845dc8338 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc83b0 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f845dc8428 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dcd970 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845dc8628 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc86a0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc8718 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dcd830 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dcdc68 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845dcda58 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dcdad0 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1f845dcdb48 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f845dcdff0 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f845dcdd48 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dcddc0 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1f845dcde38 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f845dcdeb0 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dce250 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1f845dce178 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1f845dce2f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x1f845dce630 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dce4b8 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dce530 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1f845dce6e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x1f845dc6a80 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f845dc6870 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc68e8 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1f845dc6960 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845dc6b38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x1f845dc6f00 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1f845dc6cf8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f845dc6d70 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1f845dc6de8 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f845dc6fb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x1f845dc7250 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f845dc7178 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1f845dc72f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x1f845dc7628 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1f845dc74b8 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x1f845dc7530 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1f845dc76d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x1f845dcea10 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f845dce938 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1f845dceab8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x1f845dced50 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1f845dcec78 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1f845dcedf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x1f845dcf130 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f845dcefb8 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1f845dcf030 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1f845dcf1e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-FunctionDecl 0x1f845dcf420 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:49:9, col:58> col:40 __pctype_func 'const unsigned short *(void) __attribute__((cdecl))':'const unsigned short *(void)'
|-VarDecl 0x1f845dcf4f0 <line:51:9, col:38> col:38 _pctype 'const unsigned short *' extern
|-VarDecl 0x1f845dcf5f0 <line:62:9, col:45> col:37 _wctype 'const unsigned short []' extern
|-FunctionDecl 0x1f845dcc820 <line:73:9, col:53> col:34 __pwctype_func 'const wctype_t *(void) __attribute__((cdecl))':'const wctype_t *(void)'
|-VarDecl 0x1f845dcc8e8 <line:75:9, col:32> col:32 _pwctype 'const wctype_t *' extern
|-FunctionDecl 0x1f845dccb70 <line:119:24, col:72> col:36 _isctype 'int (int, int) __attribute__((cdecl))':'int (int, int)'
| |-ParmVarDecl 0x1f845dcc980 <col:50, col:54> col:54 _C 'int'
| `-ParmVarDecl 0x1f845dcca00 <col:63, col:67> col:67 _Type 'int'
|-FunctionDecl 0x1f845dccf28 <line:120:24, col:102> col:36 _isctype_l 'int (int, int, _locale_t) __attribute__((cdecl))':'int (int, int, _locale_t)'
| |-ParmVarDecl 0x1f845dccc50 <col:52, col:56> col:56 _C 'int'
| |-ParmVarDecl 0x1f845dcccd0 <col:65, col:69> col:69 _Type 'int'
| `-ParmVarDecl 0x1f845dccd48 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dcd0f0 <line:121:55> col:55 implicit isalpha 'int (int)' extern
| |-ParmVarDecl 0x1f845dcd190 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dcd200 <col:55> Implicit
| `-PureAttr 0x1f845dcd258 <col:55> Implicit
|-FunctionDecl 0x1f845dcd280 prev 0x1f845dcd0f0 <col:43, col:74> col:55 isalpha 'int (int)'
| |-ParmVarDecl 0x1f845dcd010 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f845dcd370 <col:55> Inherited Implicit
| `-PureAttr 0x1f845dcd398 <col:55> Inherited Implicit
|-FunctionDecl 0x1f845dcd600 <line:122:24, col:86> col:36 _isalpha_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dcd3d8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dcd450 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dc87e0 <line:123:55> col:55 implicit isupper 'int (int)' extern
| |-ParmVarDecl 0x1f845dc8880 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dc88f0 <col:55> Implicit
| `-PureAttr 0x1f845dc8948 <col:55> Implicit
|-FunctionDecl 0x1f845dc8970 prev 0x1f845dc87e0 <col:43, col:74> col:55 isupper 'int (int)'
| |-ParmVarDecl 0x1f845dcd6e0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f845dc8a60 <col:55> Inherited Implicit
| `-PureAttr 0x1f845dc8a88 <col:55> Inherited Implicit
|-FunctionDecl 0x1f845dc8c40 <line:124:24, col:86> col:36 _isupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dc8ac8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dc8b40 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dc8e00 <line:125:55> col:55 implicit islower 'int (int)' extern
| |-ParmVarDecl 0x1f845dc8ea0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dc8f10 <col:55> Implicit
| `-PureAttr 0x1f845dc8f68 <col:55> Implicit
|-FunctionDecl 0x1f845dc8f90 prev 0x1f845dc8e00 <col:43, col:74> col:55 islower 'int (int)'
| |-ParmVarDecl 0x1f845dc8d20 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f845dc9080 <col:55> Inherited Implicit
| `-PureAttr 0x1f845dc90a8 <col:55> Inherited Implicit
|-FunctionDecl 0x1f845dc9260 <line:126:24, col:86> col:36 _islower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dc90e8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dc9160 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dc9420 <line:127:55> col:55 implicit used isdigit 'int (int)' extern
| |-ParmVarDecl 0x1f845dc94c0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dc9530 <col:55> Implicit
| `-PureAttr 0x1f845dc9588 <col:55> Implicit
|-FunctionDecl 0x1f845dc95b0 prev 0x1f845dc9420 <col:43, col:74> col:55 used isdigit 'int (int)'
| |-ParmVarDecl 0x1f845dc9340 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f845dc96a0 <col:55> Inherited Implicit
| `-PureAttr 0x1f845dc96c8 <col:55> Inherited Implicit
|-FunctionDecl 0x1f845dd0960 <line:128:24, col:86> col:36 _isdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dc9708 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dd0860 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd0b20 <line:129:36> col:36 implicit isxdigit 'int (int)' extern
| |-ParmVarDecl 0x1f845dd0bc0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dd0c30 <col:36> Implicit
| `-PureAttr 0x1f845dd0c88 <col:36> Implicit
|-FunctionDecl 0x1f845dd0cb0 prev 0x1f845dd0b20 <col:24, col:56> col:36 isxdigit 'int (int)'
| |-ParmVarDecl 0x1f845dd0a40 <col:50, col:54> col:54 _C 'int'
| |-NoThrowAttr 0x1f845dd0da0 <col:36> Inherited Implicit
| `-PureAttr 0x1f845dd0dc8 <col:36> Inherited Implicit
|-FunctionDecl 0x1f845dd0f80 <line:130:24, col:87> col:36 _isxdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dd0e08 <col:53, col:57> col:57 _C 'int'
| `-ParmVarDecl 0x1f845dd0e80 <col:70, col:80> col:80 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd1140 <line:131:55> col:55 implicit isspace 'int (int)' extern
| |-ParmVarDecl 0x1f845dd11e0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dd1250 <col:55> Implicit
| `-PureAttr 0x1f845dd12a8 <col:55> Implicit
|-FunctionDecl 0x1f845dd12d0 prev 0x1f845dd1140 <col:43, col:74> col:55 isspace 'int (int)'
| |-ParmVarDecl 0x1f845dd1060 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f845dd13c0 <col:55> Inherited Implicit
| `-PureAttr 0x1f845dd13e8 <col:55> Inherited Implicit
|-FunctionDecl 0x1f845dd15a0 <line:132:24, col:86> col:36 _isspace_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dd1428 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dd14a0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd1760 <line:133:36> col:36 implicit ispunct 'int (int)' extern
| |-ParmVarDecl 0x1f845dc97f0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dc9860 <col:36> Implicit
| `-PureAttr 0x1f845dc98b8 <col:36> Implicit
|-FunctionDecl 0x1f845dc98e0 prev 0x1f845dd1760 <col:24, col:55> col:36 ispunct 'int (int)'
| |-ParmVarDecl 0x1f845dd1680 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1f845dc99d0 <col:36> Inherited Implicit
| `-PureAttr 0x1f845dc99f8 <col:36> Inherited Implicit
|-FunctionDecl 0x1f845dc9bb0 <line:134:24, col:86> col:36 _ispunct_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dc9a38 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dc9ab0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dc9d70 <line:135:36> col:36 implicit isblank 'int (int)' extern
| |-ParmVarDecl 0x1f845dc9e10 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dc9e80 <col:36> Implicit
| `-PureAttr 0x1f845dc9ed8 <col:36> Implicit
|-FunctionDecl 0x1f845dc9f00 prev 0x1f845dc9d70 <col:24, col:55> col:36 isblank 'int (int)'
| |-ParmVarDecl 0x1f845dc9c90 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1f845dc9ff0 <col:36> Inherited Implicit
| `-PureAttr 0x1f845dca018 <col:36> Inherited Implicit
|-FunctionDecl 0x1f845dca1d0 <line:136:24, col:86> col:36 _isblank_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dca058 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dca0d0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dca390 <line:137:55> col:55 implicit isalnum 'int (int)' extern
| |-ParmVarDecl 0x1f845dca430 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dca4a0 <col:55> Implicit
| `-PureAttr 0x1f845dca4f8 <col:55> Implicit
|-FunctionDecl 0x1f845dca520 prev 0x1f845dca390 <col:43, col:74> col:55 isalnum 'int (int)'
| |-ParmVarDecl 0x1f845dca2b0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f845dca610 <col:55> Inherited Implicit
| `-PureAttr 0x1f845dca638 <col:55> Inherited Implicit
|-FunctionDecl 0x1f845dd1870 <line:138:24, col:86> col:36 _isalnum_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dca678 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dca6f0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd1a30 <line:139:36> col:36 implicit isprint 'int (int)' extern
| |-ParmVarDecl 0x1f845dd1ad0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dd1b40 <col:36> Implicit
| `-PureAttr 0x1f845dd1b98 <col:36> Implicit
|-FunctionDecl 0x1f845dd1bc0 prev 0x1f845dd1a30 <col:24, col:55> col:36 isprint 'int (int)'
| |-ParmVarDecl 0x1f845dd1950 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1f845dd1cb0 <col:36> Inherited Implicit
| `-PureAttr 0x1f845dd1cd8 <col:36> Inherited Implicit
|-FunctionDecl 0x1f845dd1e90 <line:140:24, col:86> col:36 _isprint_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dd1d18 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dd1d90 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd2050 <line:141:36> col:36 implicit isgraph 'int (int)' extern
| |-ParmVarDecl 0x1f845dd20f0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dd2160 <col:36> Implicit
| `-PureAttr 0x1f845dd21b8 <col:36> Implicit
|-FunctionDecl 0x1f845dd21e0 prev 0x1f845dd2050 <col:24, col:55> col:36 isgraph 'int (int)'
| |-ParmVarDecl 0x1f845dd1f70 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1f845dd22d0 <col:36> Inherited Implicit
| `-PureAttr 0x1f845dd22f8 <col:36> Inherited Implicit
|-FunctionDecl 0x1f845dd24b0 <line:142:24, col:86> col:36 _isgraph_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dd2338 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dd23b0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd2670 <line:143:36> col:36 implicit iscntrl 'int (int)' extern
| |-ParmVarDecl 0x1f845dd2710 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dd2780 <col:36> Implicit
| `-PureAttr 0x1f845dd27d8 <col:36> Implicit
|-FunctionDecl 0x1f845dca800 prev 0x1f845dd2670 <col:24, col:55> col:36 iscntrl 'int (int)'
| |-ParmVarDecl 0x1f845dd2590 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1f845dca8f0 <col:36> Inherited Implicit
| `-PureAttr 0x1f845dca918 <col:36> Inherited Implicit
|-FunctionDecl 0x1f845dcaad0 <line:144:24, col:86> col:36 _iscntrl_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dca958 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dca9d0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dcac90 <line:145:55> col:55 implicit toupper 'int (int)' extern
| |-ParmVarDecl 0x1f845dcad30 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dcada0 <col:55> Implicit
| `-PureAttr 0x1f845dcadf8 <col:55> Implicit
|-FunctionDecl 0x1f845dcae20 prev 0x1f845dcac90 <col:43, col:74> col:55 toupper 'int (int)'
| |-ParmVarDecl 0x1f845dcabb0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f845dcaf10 <col:55> Inherited Implicit
| `-PureAttr 0x1f845dcaf38 <col:55> Inherited Implicit
|-FunctionDecl 0x1f845dcb058 <line:146:55> col:55 implicit tolower 'int (int)' extern
| |-ParmVarDecl 0x1f845dcb0f8 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f845dcb168 <col:55> Implicit
| `-PureAttr 0x1f845dcb1c0 <col:55> Implicit
|-FunctionDecl 0x1f845dcb1e8 prev 0x1f845dcb058 <col:43, col:74> col:55 tolower 'int (int)'
| |-ParmVarDecl 0x1f845dcaf78 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1f845dcb2d8 <col:55> Inherited Implicit
| `-PureAttr 0x1f845dcb300 <col:55> Inherited Implicit
|-FunctionDecl 0x1f845dcb420 <line:147:43, col:75> col:55 _tolower 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845dcb340 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1f845dcb670 <line:148:24, col:86> col:36 _tolower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dcb4f8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dcb570 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd58e8 <line:149:43, col:75> col:55 _toupper 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845dcb750 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1f845dd5b38 <line:150:24, col:86> col:36 _toupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845dd59c0 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1f845dd5a38 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd5cf8 <line:151:24, col:57> col:36 __isascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845dd5c18 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1f845dd5eb0 <line:152:24, col:57> col:36 __toascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845dd5dd0 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1f845dd6068 <line:153:24, col:57> col:36 __iscsymf 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845dd5f88 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1f845dd6220 <line:154:24, col:56> col:36 __iscsym 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845dd6140 <col:50, col:54> col:54 _C 'int'
|-FunctionDecl 0x1f845dd6468 <line:164:24, col:59> col:36 iswalpha 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd62f0 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd6760 <line:165:24, col:90> col:36 _iswalpha_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd6538 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd65b0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd6938 <line:166:24, col:59> col:36 iswupper 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd6838 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd6b80 <line:167:24, col:90> col:36 _iswupper_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd6a08 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd6a80 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd6d38 <line:168:24, col:59> col:36 iswlower 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd6c58 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd6f80 <line:169:24, col:90> col:36 _iswlower_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd6e08 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd6e80 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd7138 <line:170:24, col:59> col:36 iswdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd7058 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd7380 <line:171:24, col:90> col:36 _iswdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd7208 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd7280 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd7538 <line:172:24, col:60> col:36 iswxdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd7458 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd7780 <line:173:24, col:91> col:36 _iswxdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd7608 <col:54, col:61> col:61 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd7680 <col:74, col:84> col:84 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd7948 <line:174:24, col:59> col:36 iswspace 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd7858 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd7b90 <line:175:24, col:90> col:36 _iswspace_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd7a18 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd7a90 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd7d48 <line:176:24, col:59> col:36 iswpunct 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd7c68 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd7f90 <line:177:24, col:90> col:36 _iswpunct_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd7e18 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd7e90 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd8148 <line:178:24, col:59> col:36 iswblank 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd8068 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd8390 <line:179:24, col:90> col:36 _iswblank_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd8218 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd8290 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd8548 <line:180:24, col:59> col:36 iswalnum 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd8468 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd8790 <line:181:24, col:90> col:36 _iswalnum_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd8618 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd8690 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd28f8 <line:182:24, col:59> col:36 iswprint 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd8868 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd2b40 <line:183:24, col:90> col:36 _iswprint_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd29c8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd2a40 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd2cf8 <line:184:24, col:59> col:36 iswgraph 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd2c18 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd2f40 <line:185:24, col:90> col:36 _iswgraph_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd2dc8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd2e40 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd30f8 <line:186:24, col:59> col:36 iswcntrl 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd3018 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd3340 <line:187:24, col:90> col:36 _iswcntrl_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd31c8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd3240 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd34f8 <line:188:24, col:59> col:36 iswascii 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd3418 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd3710 <line:190:24, col:62> col:39 towupper 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1f845dd35c8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd8a88 <line:191:24, col:93> col:39 _towupper_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd37e0 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd88e0 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd8c38 <line:192:24, col:62> col:39 towlower 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1f845dd8b60 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dd8e78 <line:193:24, col:93> col:39 _towlower_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd8d08 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd8d80 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd9170 <line:194:24, col:80> col:36 iswctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1f845dd8f50 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd8fc8 <col:66, col:75> col:75 _Type 'wctype_t':'unsigned short'
|-FunctionDecl 0x1f845dd9518 <line:195:24, col:111> col:36 _iswctype_l 'int (wint_t, wctype_t, _locale_t) __attribute__((cdecl))':'int (wint_t, wctype_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd9248 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1f845dd92c0 <col:69, col:78> col:78 _Type 'wctype_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd9338 <col:94, col:104> col:104 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dd96d8 <line:197:24, col:61> col:36 __iswcsymf 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845dd95f8 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845dda940 <line:198:24, col:90> col:36 _iswcsymf_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845dd97a8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845dd9820 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845ddaaf8 <line:199:24, col:60> col:36 __iswcsym 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1f845ddaa18 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1f845ddad40 <line:200:24, col:89> col:36 _iswcsym_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1f845ddabc8 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1f845ddac40 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845ddaf00 <line:203:24, col:58> col:36 isleadbyte 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f845ddae20 <col:52, col:56> col:56 _C 'int'
|-FunctionDecl 0x1f845ddb150 <line:204:24, col:89> col:36 _isleadbyte_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1f845ddafd8 <col:55, col:59> col:59 _C 'int'
| `-ParmVarDecl 0x1f845ddb050 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845ddb460 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:205:90> col:45 is_wctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1f845ddb2e8 <col:60, col:67> col:67 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1f845ddb360 <col:76, col:85> col:85 _Type 'wctype_t':'unsigned short'
| `-DeprecatedAttr 0x1f845ddb510 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instead. See online help for details." ""
|-VarDecl 0x1f845ddb658 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:235:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x1f845ddb7a8 <line:239:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f845dd99e8 <line:240:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x1f845ddb870 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f845dda040 <.//openssl//file_jk/after\crypto\bio\b_print.c:30:1, line:31:46> line:30:12 used fmtstr 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' static
| |-ParmVarDecl 0x1f845dd9ac0 <col:19, col:25> col:26 'char **'
| |-ParmVarDecl 0x1f845dd9b40 <col:28, col:34> col:35 'char **'
| |-ParmVarDecl 0x1f845dd9c18 <col:37, col:44> col:45 'size_t *'
| |-ParmVarDecl 0x1f845dd9c90 <col:47, col:54> col:55 'size_t *'
| |-ParmVarDecl 0x1f845dd9d10 <line:31:19, col:30> col:31 'const char *'
| |-ParmVarDecl 0x1f845dd9d90 <col:33> col:36 'int'
| |-ParmVarDecl 0x1f845dd9e10 <col:38> col:41 'int'
| `-ParmVarDecl 0x1f845dd9e90 <col:43> col:46 'int'
|-FunctionDecl 0x1f845dda710 <line:32:1, line:33:46> line:32:12 used fmtint 'int (char **, char **, size_t *, size_t *, int, int, int, int, int)' static
| |-ParmVarDecl 0x1f845dda150 <col:19, col:25> col:26 'char **'
| |-ParmVarDecl 0x1f845dda1d0 <col:28, col:34> col:35 'char **'
| |-ParmVarDecl 0x1f845dda248 <col:37, col:44> col:45 'size_t *'
| |-ParmVarDecl 0x1f845dda2c0 <col:47, col:54> col:55 'size_t *'
| |-ParmVarDecl 0x1f845dda340 <line:33:19> col:19 int64_t 'int'
| |-ParmVarDecl 0x1f845dda3c0 <col:28> col:31 'int'
| |-ParmVarDecl 0x1f845dda440 <col:33> col:36 'int'
| |-ParmVarDecl 0x1f845dda4c0 <col:38> col:41 'int'
| `-ParmVarDecl 0x1f845dda540 <col:43> col:46 'int'
|-FunctionDecl 0x1f845ddbe40 <line:34:1, line:35:45> line:34:12 used fmtfp 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' static
| |-ParmVarDecl 0x1f845dda828 <col:18, col:24> col:25 'char **'
| |-ParmVarDecl 0x1f845ddb910 <col:27, col:33> col:34 'char **'
| |-ParmVarDecl 0x1f845ddb988 <col:36, col:43> col:44 'size_t *'
| |-ParmVarDecl 0x1f845ddba00 <col:46, col:53> col:54 'size_t *'
| |-ParmVarDecl 0x1f845ddba80 <line:27:18> line:35:25 'double'
| |-ParmVarDecl 0x1f845ddbb00 <col:27> col:30 'int'
| |-ParmVarDecl 0x1f845ddbb80 <col:32> col:35 'int'
| |-ParmVarDecl 0x1f845ddbc00 <col:37> col:40 'int'
| `-ParmVarDecl 0x1f845ddbc80 <col:42> col:45 'int'
|-FunctionDecl 0x1f845ddc2a0 <line:36:1, col:65> col:12 used doapr_outch 'int (char **, char **, size_t *, size_t *, int)' static
| |-ParmVarDecl 0x1f845ddbf58 <col:24, col:30> col:31 'char **'
| |-ParmVarDecl 0x1f845ddbfd8 <col:33, col:39> col:40 'char **'
| |-ParmVarDecl 0x1f845ddc050 <col:42, col:49> col:50 'size_t *'
| |-ParmVarDecl 0x1f845ddc0c8 <col:52, col:59> col:60 'size_t *'
| `-ParmVarDecl 0x1f845ddc148 <col:62> col:65 'int'
|-FunctionDecl 0x1f845de1970 <line:37:1, line:39:50> line:37:12 used _dopr 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' static
| |-ParmVarDecl 0x1f845ddc398 <col:18, col:25> col:25 sbuffer 'char **'
| |-ParmVarDecl 0x1f845ddc418 <col:34, col:41> col:41 buffer 'char **'
| |-ParmVarDecl 0x1f845ddc490 <line:38:18, col:26> col:26 maxlen 'size_t *'
| |-ParmVarDecl 0x1f845ddc508 <col:34, col:42> col:42 retlen 'size_t *'
| |-ParmVarDecl 0x1f845ddc588 <col:50, col:55> col:55 truncated 'int *'
| |-ParmVarDecl 0x1f845ddc608 <line:39:18, col:30> col:30 format 'const char *'
| `-ParmVarDecl 0x1f845ddc680 <col:38, col:46> col:46 args 'va_list':'char *'
|-FunctionDecl 0x1f845de1ed0 prev 0x1f845de1970 <line:82:1, line:361:1> line:83:1 used _dopr 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' static
| |-ParmVarDecl 0x1f845de1a78 <col:7, col:14> col:14 used sbuffer 'char **'
| |-ParmVarDecl 0x1f845de1af8 <line:84:7, col:14> col:14 used buffer 'char **'
| |-ParmVarDecl 0x1f845de1b70 <line:85:7, col:15> col:15 used maxlen 'size_t *'
| |-ParmVarDecl 0x1f845de1be8 <line:86:7, col:15> col:15 used retlen 'size_t *'
| |-ParmVarDecl 0x1f845de1c68 <col:23, col:28> col:28 used truncated 'int *'
| |-ParmVarDecl 0x1f845de1ce8 <col:39, col:51> col:51 used format 'const char *'
| |-ParmVarDecl 0x1f845de1d60 <col:59, col:67> col:67 used args 'va_list':'char *'
| `-CompoundStmt 0x1f845d994c8 <line:87:1, line:361:1>
|   |-DeclStmt 0x1f845de2020 <line:88:5, col:12>
|   | `-VarDecl 0x1f845de1fb8 <col:5, col:10> col:10 used ch 'char'
|   |-DeclStmt 0x1f845de20b8 <line:27:18, line:90:19>
|   | `-VarDecl 0x1f845de2050 <line:27:18, line:90:13> col:13 used fvalue 'double'
|   |-DeclStmt 0x1f845de2150 <line:91:5, col:19>
|   | `-VarDecl 0x1f845de20e8 <col:5, col:11> col:11 used strvalue 'char *'
|   |-DeclStmt 0x1f845de21e8 <line:92:5, col:12>
|   | `-VarDecl 0x1f845de2180 <col:5, col:9> col:9 used min 'int'
|   |-DeclStmt 0x1f845de2280 <line:93:5, col:12>
|   | `-VarDecl 0x1f845de2218 <col:5, col:9> col:9 used max 'int'
|   |-DeclStmt 0x1f845de2318 <line:94:5, col:14>
|   | `-VarDecl 0x1f845de22b0 <col:5, col:9> col:9 used state 'int'
|   |-DeclStmt 0x1f845de23b0 <line:95:5, col:14>
|   | `-VarDecl 0x1f845de2348 <col:5, col:9> col:9 used flags 'int'
|   |-DeclStmt 0x1f845de2448 <line:96:5, col:15>
|   | `-VarDecl 0x1f845de23e0 <col:5, col:9> col:9 used cflags 'int'
|   |-DeclStmt 0x1f845de24d8 <line:97:5, col:19>
|   | `-VarDecl 0x1f845de2470 <col:5, col:12> col:12 used currlen 'size_t':'unsigned long long'
|   |-BinaryOperator 0x1f845de2550 <line:99:5, line:42:25> 'int' '='
|   | |-DeclRefExpr 0x1f845de24f0 <line:99:5> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   | `-IntegerLiteral 0x1f845de2528 <line:42:25> 'int' 0
|   |-BinaryOperator 0x1f845de2708 <line:100:5, col:38> 'int' '='
|   | |-DeclRefExpr 0x1f845de2570 <col:5> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   | `-ImplicitCastExpr 0x1f845de26f0 <col:13, col:38> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1f845de26d0 <col:13, col:38> 'size_t':'unsigned long long' '='
|   |     |-DeclRefExpr 0x1f845de25a8 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x1f845de26b8 <col:23, col:38> 'size_t':'unsigned long long' <IntegralCast>
|   |       `-BinaryOperator 0x1f845de2698 <col:23, col:38> 'int' '='
|   |         |-DeclRefExpr 0x1f845de25e0 <col:23> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |         `-BinaryOperator 0x1f845de2678 <col:32, col:38> 'int' '='
|   |           |-DeclRefExpr 0x1f845de2618 <col:32> 'int' lvalue Var 0x1f845de2180 'min' 'int'
|   |           `-IntegerLiteral 0x1f845de2650 <col:38> 'int' 0
|   |-BinaryOperator 0x1f845de27a0 <line:101:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x1f845de2728 <col:5> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   | `-UnaryOperator 0x1f845de2788 <col:11, col:12> 'int' prefix '-'
|   |   `-IntegerLiteral 0x1f845de2760 <col:12> 'int' 1
|   |-BinaryOperator 0x1f845de2860 <line:102:5, col:17> 'char' '='
|   | |-DeclRefExpr 0x1f845de27c0 <col:5> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   | `-ImplicitCastExpr 0x1f845de2848 <col:10, col:17> 'char' <LValueToRValue>
|   |   `-UnaryOperator 0x1f845de2830 <col:10, col:17> 'const char' lvalue prefix '*' cannot overflow
|   |     `-UnaryOperator 0x1f845de2818 <col:11, col:17> 'const char *' postfix '++'
|   |       `-DeclRefExpr 0x1f845de27f8 <col:11> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |-WhileStmt 0x1f845deb688 <line:104:5, line:347:5>
|   | |-BinaryOperator 0x1f845de28e0 <line:104:12, line:49:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x1f845de28c8 <line:104:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845de2880 <col:12> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   | | `-IntegerLiteral 0x1f845de28a0 <line:49:25> 'int' 7
|   | `-CompoundStmt 0x1f845deb668 <line:104:32, line:347:5>
|   |   |-IfStmt 0x1f845de5c50 <line:105:9, line:49:25>
|   |   | |-BinaryOperator 0x1f845de5bc8 <line:105:13, col:64> 'int' '||'
|   |   | | |-BinaryOperator 0x1f845de59b0 <col:13, col:19> 'int' '=='
|   |   | | | |-ImplicitCastExpr 0x1f845de2950 <col:13> 'int' <IntegralCast>
|   |   | | | | `-ImplicitCastExpr 0x1f845de2938 <col:13> 'char' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x1f845de2900 <col:13> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |   | | | `-CharacterLiteral 0x1f845de2920 <col:19> 'int' 0
|   |   | | `-ParenExpr 0x1f845de5ba8 <col:27, col:64> 'int'
|   |   | |   `-BinaryOperator 0x1f845de5b88 <col:28, col:58> 'int' '&&'
|   |   | |     |-BinaryOperator 0x1f845de5aa8 <col:28, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |   | |     | |-ImplicitCastExpr 0x1f845de5a78 <.//openssl//file_jk/after\crypto\bio\b_print.c:105:28> 'char **' <LValueToRValue>
|   |   | |     | | `-DeclRefExpr 0x1f845de59d0 <col:28> 'char **' lvalue ParmVar 0x1f845de1af8 'buffer' 'char **'
|   |   | |     | `-ImplicitCastExpr 0x1f845de5a90 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   |   | |     |   `-ParenExpr 0x1f845de5a58 <col:17, col:27> 'void *'
|   |   | |     |     `-CStyleCastExpr 0x1f845de5a30 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |     |       `-IntegerLiteral 0x1f845de59f0 <col:26> 'int' 0
|   |   | |     `-BinaryOperator 0x1f845de5b68 <.//openssl//file_jk/after\crypto\bio\b_print.c:105:46, col:58> 'int' '>='
|   |   | |       |-ImplicitCastExpr 0x1f845de5b38 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x1f845de5ac8 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |   | |       `-ImplicitCastExpr 0x1f845de5b50 <col:57, col:58> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |         `-UnaryOperator 0x1f845de5b20 <col:57, col:58> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   | |           `-ImplicitCastExpr 0x1f845de5b08 <col:58> 'size_t *' <LValueToRValue>
|   |   | |             `-DeclRefExpr 0x1f845de5ae8 <col:58> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   |   | `-BinaryOperator 0x1f845de5c30 <line:106:13, line:49:25> 'int' '='
|   |   |   |-DeclRefExpr 0x1f845de5be8 <line:106:13> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |   |   `-IntegerLiteral 0x1f845de5c08 <line:49:25> 'int' 7
|   |   `-SwitchStmt 0x1f845de5ca0 <line:108:9, line:346:9>
|   |     |-ImplicitCastExpr 0x1f845de5c88 <line:108:17> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1f845de5c68 <col:17> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |     `-CompoundStmt 0x1f845deb5a8 <col:24, line:346:9>
|   |       |-CaseStmt 0x1f845de5d00 <line:109:9, line:114:28>
|   |       | |-ConstantExpr 0x1f845de5ce8 <line:42:25> 'int'
|   |       | | `-IntegerLiteral 0x1f845de5cc0 <col:25> 'int' 0
|   |       | `-IfStmt 0x1f845de6088 <line:110:13, line:114:28> has_else
|   |       |   |-BinaryOperator 0x1f845de5d90 <line:110:17, col:23> 'int' '=='
|   |       |   | |-ImplicitCastExpr 0x1f845de5d78 <col:17> 'int' <IntegralCast>
|   |       |   | | `-ImplicitCastExpr 0x1f845de5d60 <col:17> 'char' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x1f845de5d28 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   | `-CharacterLiteral 0x1f845de5d48 <col:23> 'int' 37
|   |       |   |-BinaryOperator 0x1f845de5df8 <line:111:17, line:43:25> 'int' '='
|   |       |   | |-DeclRefExpr 0x1f845de5db0 <line:111:17> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |       |   | `-IntegerLiteral 0x1f845de5dd0 <line:43:25> 'int' 1
|   |       |   `-IfStmt 0x1f845de6070 <line:113:17, line:114:28>
|   |       |     |-UnaryOperator 0x1f845de6020 <line:113:20, col:70> 'int' prefix '!' cannot overflow
|   |       |     | `-CallExpr 0x1f845de5f60 <col:21, col:70> 'int'
|   |       |     |   |-ImplicitCastExpr 0x1f845de5f48 <col:21> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       |     |   | `-DeclRefExpr 0x1f845de5e18 <col:21> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       |     |   |-ImplicitCastExpr 0x1f845de5fa8 <col:33> 'char **' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1f845de5e38 <col:33> 'char **' lvalue ParmVar 0x1f845de1a78 'sbuffer' 'char **'
|   |       |     |   |-ImplicitCastExpr 0x1f845de5fc0 <col:42> 'char **' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1f845de5e58 <col:42> 'char **' lvalue ParmVar 0x1f845de1af8 'buffer' 'char **'
|   |       |     |   |-UnaryOperator 0x1f845de5e98 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   |       |     |   | `-DeclRefExpr 0x1f845de5e78 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |       |     |   |-ImplicitCastExpr 0x1f845de5fd8 <col:60> 'size_t *' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1f845de5eb0 <col:60> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   |       |     |   `-ImplicitCastExpr 0x1f845de6008 <col:68> 'int' <IntegralCast>
|   |       |     |     `-ImplicitCastExpr 0x1f845de5ff0 <col:68> 'char' <LValueToRValue>
|   |       |     |       `-DeclRefExpr 0x1f845de5ed0 <col:68> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     `-ReturnStmt 0x1f845de6060 <line:114:21, col:28>
|   |       |       `-IntegerLiteral 0x1f845de6038 <col:28> 'int' 0
|   |       |-BinaryOperator 0x1f845de6138 <line:115:13, col:25> 'char' '='
|   |       | |-DeclRefExpr 0x1f845de60b0 <col:13> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       | `-ImplicitCastExpr 0x1f845de6120 <col:18, col:25> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1f845de6108 <col:18, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1f845de60f0 <col:19, col:25> 'const char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1f845de60d0 <col:19> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |-BreakStmt 0x1f845de6158 <line:116:13>
|   |       |-CaseStmt 0x1f845de61a0 <line:117:9, line:142:13>
|   |       | |-ConstantExpr 0x1f845de6188 <line:43:25> 'int'
|   |       | | `-IntegerLiteral 0x1f845de6160 <col:25> 'int' 1
|   |       | `-SwitchStmt 0x1f845de6218 <line:118:13, line:142:13>
|   |       |   |-ImplicitCastExpr 0x1f845de6200 <line:118:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1f845de61e8 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1f845de61c8 <col:21> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   `-CompoundStmt 0x1f845de9c90 <col:25, line:142:13>
|   |       |     |-CaseStmt 0x1f845de6268 <line:119:13, line:53:32>
|   |       |     | |-ConstantExpr 0x1f845de6250 <line:119:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de6238 <col:18> 'int' 45
|   |       |     | `-CompoundAssignOperator 0x1f845de6340 <line:120:17, line:53:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f845de6290 <line:120:17> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f845de6320 <line:53:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f845de6300 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f845de62b0 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f845de62d8 <col:31> 'int' 0
|   |       |     |-BinaryOperator 0x1f845de63f8 <line:121:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f845de6370 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f845de63e0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f845de63c8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f845de63b0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f845de6390 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f845de6418 <line:122:17>
|   |       |     |-CaseStmt 0x1f845de6450 <line:123:13, line:55:32>
|   |       |     | |-ConstantExpr 0x1f845de6438 <line:123:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de6420 <col:18> 'int' 43
|   |       |     | `-CompoundAssignOperator 0x1f845de6528 <line:124:17, line:55:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f845de6478 <line:124:17> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f845de6508 <line:55:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f845de64e8 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f845de6498 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f845de64c0 <col:31> 'int' 1
|   |       |     |-BinaryOperator 0x1f845de65e0 <line:125:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f845de6558 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f845de65c8 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f845de65b0 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f845de6598 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f845de6578 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f845de6600 <line:126:17>
|   |       |     |-CaseStmt 0x1f845de6638 <line:127:13, line:57:32>
|   |       |     | |-ConstantExpr 0x1f845de6620 <line:127:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de6608 <col:18> 'int' 32
|   |       |     | `-CompoundAssignOperator 0x1f845de6710 <line:128:17, line:57:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f845de6660 <line:128:17> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f845de66f0 <line:57:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f845de66d0 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f845de6680 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f845de66a8 <col:31> 'int' 2
|   |       |     |-BinaryOperator 0x1f845de67c8 <line:129:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f845de6740 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f845de67b0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f845de6798 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f845de6780 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f845de6760 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f845de67e8 <line:130:17>
|   |       |     |-CaseStmt 0x1f845de6820 <line:131:13, line:59:32>
|   |       |     | |-ConstantExpr 0x1f845de6808 <line:131:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de67f0 <col:18> 'int' 35
|   |       |     | `-CompoundAssignOperator 0x1f845de68f8 <line:132:17, line:59:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f845de6848 <line:132:17> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f845de68d8 <line:59:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f845de68b8 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f845de6868 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f845de6890 <col:31> 'int' 3
|   |       |     |-BinaryOperator 0x1f845de99f0 <line:133:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f845de6928 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f845de6998 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f845de6980 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f845de6968 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f845de6948 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f845de9a10 <line:134:17>
|   |       |     |-CaseStmt 0x1f845de9a48 <line:135:13, line:61:32>
|   |       |     | |-ConstantExpr 0x1f845de9a30 <line:135:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de9a18 <col:18> 'int' 48
|   |       |     | `-CompoundAssignOperator 0x1f845de9b20 <line:136:17, line:61:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f845de9a70 <line:136:17> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f845de9b00 <line:61:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f845de9ae0 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f845de9a90 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f845de9ab8 <col:31> 'int' 4
|   |       |     |-BinaryOperator 0x1f845de9bd8 <line:137:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f845de9b50 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f845de9bc0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f845de9ba8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f845de9b90 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f845de9b70 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f845de9bf8 <line:138:17>
|   |       |     |-DefaultStmt 0x1f845de9c68 <line:139:13, line:44:25>
|   |       |     | `-BinaryOperator 0x1f845de9c48 <line:140:17, line:44:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f845de9c00 <line:140:17> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1f845de9c20 <line:44:25> 'int' 2
|   |       |     `-BreakStmt 0x1f845de9c88 <line:141:17>
|   |       |-BreakStmt 0x1f845de9d28 <line:143:13>
|   |       |-CaseStmt 0x1f845de9d70 <line:144:9, line:45:25>
|   |       | |-ConstantExpr 0x1f845de9d58 <line:44:25> 'int'
|   |       | | `-IntegerLiteral 0x1f845de9d30 <col:25> 'int' 2
|   |       | `-IfStmt 0x1f845dea4c8 <line:145:13, line:45:25> has_else
|   |       |   |-CallExpr 0x1f845de9e70 <line:145:17, col:42> 'int'
|   |       |   | |-ImplicitCastExpr 0x1f845de9e58 <col:17> 'int (*)(int)' <FunctionToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x1f845de9d98 <col:17> 'int (int)' Function 0x1f845dc95b0 'isdigit' 'int (int)'
|   |       |   | `-ImplicitCastExpr 0x1f845de9e98 <col:25, col:40> 'int' <IntegralCast>
|   |       |   |   `-CStyleCastExpr 0x1f845de9e08 <col:25, col:40> 'unsigned char' <IntegralCast>
|   |       |   |     `-ImplicitCastExpr 0x1f845de9df0 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|   |       |   |       `-DeclRefExpr 0x1f845de9db8 <col:40> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   |-CompoundStmt 0x1f845dea0e0 <col:45, line:148:13>
|   |       |   | |-BinaryOperator 0x1f845dea018 <line:146:17, line:79:32> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1f845de9eb0 <line:146:17> 'int' lvalue Var 0x1f845de2180 'min' 'int'
|   |       |   | | `-BinaryOperator 0x1f845de9ff8 <col:23, line:79:32> 'int' '+'
|   |       |   | |   |-BinaryOperator 0x1f845de9f30 <line:146:23, col:28> 'int' '*'
|   |       |   | |   | |-IntegerLiteral 0x1f845de9ed0 <col:23> 'int' 10
|   |       |   | |   | `-ImplicitCastExpr 0x1f845de9f18 <col:28> 'int' <LValueToRValue>
|   |       |   | |   |   `-DeclRefExpr 0x1f845de9ef8 <col:28> 'int' lvalue Var 0x1f845de2180 'min' 'int'
|   |       |   | |   `-ParenExpr 0x1f845de9fd8 <line:79:24, col:32> 'int'
|   |       |   | |     `-BinaryOperator 0x1f845de9fb8 <line:146:46, line:79:29> 'int' '-'
|   |       |   | |       |-ImplicitCastExpr 0x1f845de9fa0 <line:146:46> 'int' <IntegralCast>
|   |       |   | |       | `-ImplicitCastExpr 0x1f845de9f88 <col:46> 'char' <LValueToRValue>
|   |       |   | |       |   `-DeclRefExpr 0x1f845de9f50 <col:46> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   | |       `-CharacterLiteral 0x1f845de9f70 <line:79:29> 'int' 48
|   |       |   | `-BinaryOperator 0x1f845dea0c0 <line:147:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1f845dea038 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1f845dea0a8 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1f845dea090 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1f845dea078 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1f845dea058 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |   `-IfStmt 0x1f845dea4a0 <line:148:20, line:45:25> has_else
|   |       |     |-BinaryOperator 0x1f845dea168 <line:148:24, col:30> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x1f845dea150 <col:24> 'int' <IntegralCast>
|   |       |     | | `-ImplicitCastExpr 0x1f845dea138 <col:24> 'char' <LValueToRValue>
|   |       |     | |   `-DeclRefExpr 0x1f845dea100 <col:24> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-CharacterLiteral 0x1f845dea120 <col:30> 'int' 42
|   |       |     |-CompoundStmt 0x1f845dea418 <col:35, line:152:13>
|   |       |     | |-BinaryOperator 0x1f845dea390 <line:150:17, col:29> 'char' '='
|   |       |     | | |-DeclRefExpr 0x1f845dea308 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | | `-ImplicitCastExpr 0x1f845dea378 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     | |   `-UnaryOperator 0x1f845dea360 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     | |     `-UnaryOperator 0x1f845dea348 <col:23, col:29> 'const char *' postfix '++'
|   |       |     | |       `-DeclRefExpr 0x1f845dea328 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     | `-BinaryOperator 0x1f845dea3f8 <line:151:17, line:45:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f845dea3b0 <line:151:17> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1f845dea3d0 <line:45:25> 'int' 3
|   |       |     `-BinaryOperator 0x1f845dea480 <line:153:17, line:45:25> 'int' '='
|   |       |       |-DeclRefExpr 0x1f845dea438 <line:153:17> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |       |       `-IntegerLiteral 0x1f845dea458 <line:45:25> 'int' 3
|   |       |-BreakStmt 0x1f845dea4f0 <line:154:13>
|   |       |-CaseStmt 0x1f845dea538 <line:155:9, line:47:25>
|   |       | |-ConstantExpr 0x1f845dea520 <line:45:25> 'int'
|   |       | | `-IntegerLiteral 0x1f845dea4f8 <col:25> 'int' 3
|   |       | `-IfStmt 0x1f845dea780 <line:156:13, line:47:25> has_else
|   |       |   |-BinaryOperator 0x1f845dea5c8 <line:156:17, col:23> 'int' '=='
|   |       |   | |-ImplicitCastExpr 0x1f845dea5b0 <col:17> 'int' <IntegralCast>
|   |       |   | | `-ImplicitCastExpr 0x1f845dea598 <col:17> 'char' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x1f845dea560 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   | `-CharacterLiteral 0x1f845dea580 <col:23> 'int' 46
|   |       |   |-CompoundStmt 0x1f845dea6f8 <col:28, line:159:13>
|   |       |   | |-BinaryOperator 0x1f845dea630 <line:157:17, line:46:25> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1f845dea5e8 <line:157:17> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |       |   | | `-IntegerLiteral 0x1f845dea608 <line:46:25> 'int' 4
|   |       |   | `-BinaryOperator 0x1f845dea6d8 <line:158:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1f845dea650 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1f845dea6c0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1f845dea6a8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1f845dea690 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1f845dea670 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |   `-BinaryOperator 0x1f845dea760 <line:160:17, line:47:25> 'int' '='
|   |       |     |-DeclRefExpr 0x1f845dea718 <line:160:17> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |       |     `-IntegerLiteral 0x1f845dea738 <line:47:25> 'int' 5
|   |       |-BreakStmt 0x1f845dea7a8 <line:161:13>
|   |       |-CaseStmt 0x1f845dea7f0 <line:162:9, line:47:25>
|   |       | |-ConstantExpr 0x1f845dea7d8 <line:46:25> 'int'
|   |       | | `-IntegerLiteral 0x1f845dea7b0 <col:25> 'int' 4
|   |       | `-IfStmt 0x1f845de6ed8 <line:163:13, line:47:25> has_else
|   |       |   |-CallExpr 0x1f845dea8c8 <line:163:17, col:42> 'int'
|   |       |   | |-ImplicitCastExpr 0x1f845dea8b0 <col:17> 'int (*)(int)' <FunctionToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x1f845dea818 <col:17> 'int (int)' Function 0x1f845dc95b0 'isdigit' 'int (int)'
|   |       |   | `-ImplicitCastExpr 0x1f845dea8f0 <col:25, col:40> 'int' <IntegralCast>
|   |       |   |   `-CStyleCastExpr 0x1f845dea888 <col:25, col:40> 'unsigned char' <IntegralCast>
|   |       |   |     `-ImplicitCastExpr 0x1f845dea870 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|   |       |   |       `-DeclRefExpr 0x1f845dea838 <col:40> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   |-CompoundStmt 0x1f845de6c08 <col:45, line:168:13>
|   |       |   | |-IfStmt 0x1f845de69c0 <line:164:17, line:165:27>
|   |       |   | | |-BinaryOperator 0x1f845dea968 <line:164:21, col:27> 'int' '<'
|   |       |   | | | |-ImplicitCastExpr 0x1f845dea950 <col:21> 'int' <LValueToRValue>
|   |       |   | | | | `-DeclRefExpr 0x1f845dea908 <col:21> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       |   | | | `-IntegerLiteral 0x1f845dea928 <col:27> 'int' 0
|   |       |   | | `-BinaryOperator 0x1f845dea9d0 <line:165:21, col:27> 'int' '='
|   |       |   | |   |-DeclRefExpr 0x1f845dea988 <col:21> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       |   | |   `-IntegerLiteral 0x1f845dea9a8 <col:27> 'int' 0
|   |       |   | |-BinaryOperator 0x1f845de6b40 <line:166:17, line:79:32> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1f845de69d8 <line:166:17> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       |   | | `-BinaryOperator 0x1f845de6b20 <col:23, line:79:32> 'int' '+'
|   |       |   | |   |-BinaryOperator 0x1f845de6a58 <line:166:23, col:28> 'int' '*'
|   |       |   | |   | |-IntegerLiteral 0x1f845de69f8 <col:23> 'int' 10
|   |       |   | |   | `-ImplicitCastExpr 0x1f845de6a40 <col:28> 'int' <LValueToRValue>
|   |       |   | |   |   `-DeclRefExpr 0x1f845de6a20 <col:28> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       |   | |   `-ParenExpr 0x1f845de6b00 <line:79:24, col:32> 'int'
|   |       |   | |     `-BinaryOperator 0x1f845de6ae0 <line:166:46, line:79:29> 'int' '-'
|   |       |   | |       |-ImplicitCastExpr 0x1f845de6ac8 <line:166:46> 'int' <IntegralCast>
|   |       |   | |       | `-ImplicitCastExpr 0x1f845de6ab0 <col:46> 'char' <LValueToRValue>
|   |       |   | |       |   `-DeclRefExpr 0x1f845de6a78 <col:46> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   | |       `-CharacterLiteral 0x1f845de6a98 <line:79:29> 'int' 48
|   |       |   | `-BinaryOperator 0x1f845de6be8 <line:167:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1f845de6b60 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1f845de6bd0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1f845de6bb8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1f845de6ba0 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1f845de6b80 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |   `-IfStmt 0x1f845de6eb0 <line:168:20, line:47:25> has_else
|   |       |     |-BinaryOperator 0x1f845de6c98 <line:168:24, col:30> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x1f845de6c80 <col:24> 'int' <IntegralCast>
|   |       |     | | `-ImplicitCastExpr 0x1f845de6c68 <col:24> 'char' <LValueToRValue>
|   |       |     | |   `-DeclRefExpr 0x1f845de6c30 <col:24> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-CharacterLiteral 0x1f845de6c50 <col:30> 'int' 42
|   |       |     |-CompoundStmt 0x1f845de6e28 <col:35, line:172:13>
|   |       |     | |-BinaryOperator 0x1f845de6da0 <line:170:17, col:29> 'char' '='
|   |       |     | | |-DeclRefExpr 0x1f845de6d18 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | | `-ImplicitCastExpr 0x1f845de6d88 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     | |   `-UnaryOperator 0x1f845de6d70 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     | |     `-UnaryOperator 0x1f845de6d58 <col:23, col:29> 'const char *' postfix '++'
|   |       |     | |       `-DeclRefExpr 0x1f845de6d38 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     | `-BinaryOperator 0x1f845de6e08 <line:171:17, line:47:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f845de6dc0 <line:171:17> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1f845de6de0 <line:47:25> 'int' 5
|   |       |     `-BinaryOperator 0x1f845de6e90 <line:173:17, line:47:25> 'int' '='
|   |       |       |-DeclRefExpr 0x1f845de6e48 <line:173:17> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |       |       `-IntegerLiteral 0x1f845de6e68 <line:47:25> 'int' 5
|   |       |-BreakStmt 0x1f845de6f00 <line:174:13>
|   |       |-CaseStmt 0x1f845de6f48 <line:175:9, line:199:13>
|   |       | |-ConstantExpr 0x1f845de6f30 <line:47:25> 'int'
|   |       | | `-IntegerLiteral 0x1f845de6f08 <col:25> 'int' 5
|   |       | `-SwitchStmt 0x1f845de6fc0 <line:176:13, line:199:13>
|   |       |   |-ImplicitCastExpr 0x1f845de6fa8 <line:176:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1f845de6f90 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1f845de6f70 <col:21> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   `-CompoundStmt 0x1f845de7768 <col:25, line:199:13>
|   |       |     |-CaseStmt 0x1f845de7010 <line:177:13, line:68:25>
|   |       |     | |-ConstantExpr 0x1f845de6ff8 <line:177:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de6fe0 <col:18> 'int' 104
|   |       |     | `-BinaryOperator 0x1f845de7080 <line:178:17, line:68:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f845de7038 <line:178:17> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1f845de7058 <line:68:25> 'int' 1
|   |       |     |-BinaryOperator 0x1f845de7128 <line:179:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f845de70a0 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f845de7110 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f845de70f8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f845de70e0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f845de70c0 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f845de7148 <line:180:17>
|   |       |     |-CaseStmt 0x1f845de7180 <line:181:13, line:69:25>
|   |       |     | |-ConstantExpr 0x1f845de7168 <line:181:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de7150 <col:18> 'int' 108
|   |       |     | `-IfStmt 0x1f845de7388 <line:182:17, line:69:25> has_else
|   |       |     |   |-BinaryOperator 0x1f845de7240 <line:182:21, col:32> 'int' '=='
|   |       |     |   | |-ImplicitCastExpr 0x1f845de7228 <col:21, col:22> 'int' <IntegralCast>
|   |       |     |   | | `-ImplicitCastExpr 0x1f845de7210 <col:21, col:22> 'char' <LValueToRValue>
|   |       |     |   | |   `-UnaryOperator 0x1f845de71e0 <col:21, col:22> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |   | |     `-ImplicitCastExpr 0x1f845de71c8 <col:22> 'const char *' <LValueToRValue>
|   |       |     |   | |       `-DeclRefExpr 0x1f845de71a8 <col:22> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |   | `-CharacterLiteral 0x1f845de71f8 <col:32> 'int' 108
|   |       |     |   |-CompoundStmt 0x1f845de7300 <col:37, line:185:17>
|   |       |     |   | |-BinaryOperator 0x1f845de72a8 <line:183:21, line:71:25> 'int' '='
|   |       |     |   | | |-DeclRefExpr 0x1f845de7260 <line:183:21> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |     |   | | `-IntegerLiteral 0x1f845de7280 <line:71:25> 'int' 4
|   |       |     |   | `-UnaryOperator 0x1f845de72e8 <line:184:21, col:27> 'const char *' postfix '++'
|   |       |     |   |   `-DeclRefExpr 0x1f845de72c8 <col:21> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |   `-BinaryOperator 0x1f845de7368 <line:186:21, line:69:25> 'int' '='
|   |       |     |     |-DeclRefExpr 0x1f845de7320 <line:186:21> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |     |     `-IntegerLiteral 0x1f845de7340 <line:69:25> 'int' 2
|   |       |     |-BinaryOperator 0x1f845de7438 <line:187:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f845de73b0 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f845de7420 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f845de7408 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f845de73f0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f845de73d0 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f845de7458 <line:188:17>
|   |       |     |-CaseStmt 0x1f845de7490 <line:189:13, line:71:25>
|   |       |     | |-ConstantExpr 0x1f845de7478 <line:189:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de7460 <col:18> 'int' 113
|   |       |     | `-BinaryOperator 0x1f845de7500 <line:190:17, line:71:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f845de74b8 <line:190:17> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1f845de74d8 <line:71:25> 'int' 4
|   |       |     |-BinaryOperator 0x1f845de75a8 <line:191:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f845de7520 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f845de7590 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f845de7578 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f845de7560 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f845de7540 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f845de75c8 <line:192:17>
|   |       |     |-CaseStmt 0x1f845de7600 <line:193:13, line:70:25>
|   |       |     | |-ConstantExpr 0x1f845de75e8 <line:193:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de75d0 <col:18> 'int' 76
|   |       |     | `-BinaryOperator 0x1f845de7670 <line:194:17, line:70:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1f845de7628 <line:194:17> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1f845de7648 <line:70:25> 'int' 3
|   |       |     |-BinaryOperator 0x1f845de7718 <line:195:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1f845de7690 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1f845de7700 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1f845de76e8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1f845de76d0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1f845de76b0 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f845de7738 <line:196:17>
|   |       |     `-DefaultStmt 0x1f845de7748 <line:197:13, line:198:17>
|   |       |       `-BreakStmt 0x1f845de7740 <col:17>
|   |       |-BinaryOperator 0x1f845de7828 <line:200:13, line:48:25> 'int' '='
|   |       | |-DeclRefExpr 0x1f845de77e0 <line:200:13> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |       | `-IntegerLiteral 0x1f845de7800 <line:48:25> 'int' 6
|   |       |-BreakStmt 0x1f845de7848 <line:201:13>
|   |       |-CaseStmt 0x1f845de7890 <line:202:9, line:336:13>
|   |       | |-ConstantExpr 0x1f845de7878 <line:48:25> 'int'
|   |       | | `-IntegerLiteral 0x1f845de7850 <col:25> 'int' 6
|   |       | `-SwitchStmt 0x1f845de7908 <line:203:13, line:336:13>
|   |       |   |-ImplicitCastExpr 0x1f845de78f0 <line:203:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1f845de78d8 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1f845de78b8 <col:21> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |   `-CompoundStmt 0x1f845deb168 <col:25, line:336:13>
|   |       |     |-CaseStmt 0x1f845de7958 <line:204:13, line:219:17>
|   |       |     | |-ConstantExpr 0x1f845de7940 <line:204:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de7928 <col:18> 'int' 100
|   |       |     | `-CaseStmt 0x1f845de89e0 <line:205:13, line:219:17>
|   |       |     |   |-ConstantExpr 0x1f845de7998 <line:205:18> 'int'
|   |       |     |   | `-CharacterLiteral 0x1f845de7980 <col:18> 'int' 105
|   |       |     |   `-SwitchStmt 0x1f845de8a40 <line:206:17, line:219:17>
|   |       |     |     |-ImplicitCastExpr 0x1f845de8a28 <line:206:25> 'int' <LValueToRValue>
|   |       |     |     | `-DeclRefExpr 0x1f845de8a08 <col:25> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |     |     `-CompoundStmt 0x1f845de8cf8 <col:33, line:219:17>
|   |       |     |       |-CaseStmt 0x1f845de8aa0 <line:207:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1f845de8a88 <line:68:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1f845de8a60 <col:25> 'int' 1
|   |       |     |       | `-NullStmt 0x1f845de8b08 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1f845de8b10 <line:209:21>
|   |       |     |       |-CaseStmt 0x1f845de8b58 <line:210:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1f845de8b40 <line:69:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1f845de8b18 <col:25> 'int' 2
|   |       |     |       | `-NullStmt 0x1f845de8bc0 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1f845de8bc8 <line:212:21>
|   |       |     |       |-CaseStmt 0x1f845de8c10 <line:213:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1f845de8bf8 <line:71:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1f845de8bd0 <col:25> 'int' 4
|   |       |     |       | `-NullStmt 0x1f845de8c78 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1f845de8c80 <line:215:21>
|   |       |     |       |-DefaultStmt 0x1f845de8cd0 <line:216:17, col:24>
|   |       |     |       | `-NullStmt 0x1f845de8cc8 <col:24>
|   |       |     |       `-BreakStmt 0x1f845de8cf0 <line:218:21>
|   |       |     |-IfStmt 0x1f845de8ed8 <line:220:17, line:222:28>
|   |       |     | |-OpaqueValueExpr 0x1f845de8ec0 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1f845de8eb0 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f845de8e88 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f845de8ef0 <line:223:17>
|   |       |     |-CaseStmt 0x1f845de8f28 <line:224:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1f845de8f10 <line:224:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de8ef8 <col:18> 'int' 88
|   |       |     | `-CompoundAssignOperator 0x1f845de9000 <line:225:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f845de8f50 <line:225:17> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f845de8fe0 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f845de8fc0 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f845de8f70 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f845de8f98 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1f845de9060 <line:227:13, line:65:32>
|   |       |     | |-ConstantExpr 0x1f845de9048 <line:227:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de9030 <col:18> 'int' 120
|   |       |     | `-CaseStmt 0x1f845de90b8 <line:228:13, line:65:32>
|   |       |     |   |-ConstantExpr 0x1f845de90a0 <line:228:18> 'int'
|   |       |     |   | `-CharacterLiteral 0x1f845de9088 <col:18> 'int' 111
|   |       |     |   `-CaseStmt 0x1f845de9110 <line:229:13, line:65:32>
|   |       |     |     |-ConstantExpr 0x1f845de90f8 <line:229:18> 'int'
|   |       |     |     | `-CharacterLiteral 0x1f845de90e0 <col:18> 'int' 117
|   |       |     |     `-CompoundAssignOperator 0x1f845de91e8 <line:230:17, line:65:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |       |-DeclRefExpr 0x1f845de9138 <line:230:17> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     |       `-ParenExpr 0x1f845de91c8 <line:65:25, col:32> 'int'
|   |       |     |         `-BinaryOperator 0x1f845de91a8 <col:26, col:31> 'int' '<<'
|   |       |     |           |-IntegerLiteral 0x1f845de9158 <col:26> 'int' 1
|   |       |     |           `-IntegerLiteral 0x1f845de9180 <col:31> 'int' 6
|   |       |     |-SwitchStmt 0x1f845de9250 <line:231:17, line:244:17>
|   |       |     | |-ImplicitCastExpr 0x1f845de9238 <line:231:25> 'int' <LValueToRValue>
|   |       |     | | `-DeclRefExpr 0x1f845de9218 <col:25> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |     | `-CompoundStmt 0x1f845de9508 <col:33, line:244:17>
|   |       |     |   |-CaseStmt 0x1f845de92b0 <line:232:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1f845de9298 <line:68:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1f845de9270 <col:25> 'int' 1
|   |       |     |   | `-NullStmt 0x1f845de9318 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1f845de9320 <line:234:21>
|   |       |     |   |-CaseStmt 0x1f845de9368 <line:235:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1f845de9350 <line:69:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1f845de9328 <col:25> 'int' 2
|   |       |     |   | `-NullStmt 0x1f845de93d0 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1f845de93d8 <line:237:21>
|   |       |     |   |-CaseStmt 0x1f845de9420 <line:238:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1f845de9408 <line:71:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1f845de93e0 <col:25> 'int' 4
|   |       |     |   | `-NullStmt 0x1f845de9488 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1f845de9490 <line:240:21>
|   |       |     |   |-DefaultStmt 0x1f845de94e0 <line:241:17, col:24>
|   |       |     |   | `-NullStmt 0x1f845de94d8 <col:24>
|   |       |     |   `-BreakStmt 0x1f845de9500 <line:243:21>
|   |       |     |-IfStmt 0x1f845de98c8 <line:245:17, line:248:28>
|   |       |     | |-OpaqueValueExpr 0x1f845de98b0 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1f845de98a0 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f845de9878 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f845de98e0 <line:249:17>
|   |       |     |-CaseStmt 0x1f845de9918 <line:250:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1f845de9900 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de98e8 <col:18> 'int' 102
|   |       |     | `-NullStmt 0x1f845de3a48 <<invalid sloc>>
|   |       |     |-IfStmt 0x1f845de3d80 <line:255:17, line:257:28>
|   |       |     | |-UnaryOperator 0x1f845de3d30 <line:255:21, line:256:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1f845de3c20 <line:255:22, line:256:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3c08 <line:255:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1f845de3a50 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1f845ddbe40 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3c88 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de3a70 <col:28> 'char **' lvalue ParmVar 0x1f845de1a78 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3ca0 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de3a90 <col:37> 'char **' lvalue ParmVar 0x1f845de1af8 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1f845de3ad0 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1f845de3ab0 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3cb8 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de3ae8 <col:55> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3cd0 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de3b08 <col:63> 'double' lvalue Var 0x1f845de2050 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3ce8 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de3b28 <col:71> 'int' lvalue Var 0x1f845de2180 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3d00 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de3b48 <col:76> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3d18 <line:256:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de3b68 <col:28> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1f845de3b88 <line:74:25> 'int' 0
|   |       |     | `-ReturnStmt 0x1f845de3d70 <line:257:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f845de3d48 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f845de3d98 <line:258:17>
|   |       |     |-CaseStmt 0x1f845de3dd0 <line:259:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1f845de3db8 <line:259:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de3da0 <col:18> 'int' 69
|   |       |     | `-CompoundAssignOperator 0x1f845de3ea8 <line:260:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f845de3df8 <line:260:17> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f845de3e88 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f845de3e68 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f845de3e18 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f845de3e40 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1f845de3f08 <line:262:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1f845de3ef0 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de3ed8 <col:18> 'int' 101
|   |       |     | `-NullStmt 0x1f845de4070 <<invalid sloc>>
|   |       |     |-IfStmt 0x1f845de4350 <line:267:17, line:269:28>
|   |       |     | |-UnaryOperator 0x1f845de4300 <line:267:21, line:268:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1f845de41f0 <line:267:22, line:268:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de41d8 <line:267:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4078 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1f845ddbe40 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de4258 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4098 <col:28> 'char **' lvalue ParmVar 0x1f845de1a78 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de4270 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de40b8 <col:37> 'char **' lvalue ParmVar 0x1f845de1af8 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1f845de40f8 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1f845de40d8 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de4288 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4110 <col:55> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de42a0 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4130 <col:63> 'double' lvalue Var 0x1f845de2050 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de42b8 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4150 <col:71> 'int' lvalue Var 0x1f845de2180 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de42d0 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4170 <col:76> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de42e8 <line:268:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4190 <col:28> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1f845de41b0 <line:75:25> 'int' 1
|   |       |     | `-ReturnStmt 0x1f845de4340 <line:269:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f845de4318 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f845de4368 <line:270:17>
|   |       |     |-CaseStmt 0x1f845de43a0 <line:271:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1f845de4388 <line:271:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de4370 <col:18> 'int' 71
|   |       |     | `-CompoundAssignOperator 0x1f845de4478 <line:272:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1f845de43c8 <line:272:17> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1f845de4458 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1f845de4438 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1f845de43e8 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1f845de4410 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1f845de44d8 <line:274:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1f845de44c0 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de44a8 <col:18> 'int' 103
|   |       |     | `-NullStmt 0x1f845de4640 <<invalid sloc>>
|   |       |     |-IfStmt 0x1f845de4920 <line:279:17, line:281:28>
|   |       |     | |-UnaryOperator 0x1f845de48d0 <line:279:21, line:280:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1f845de47c0 <line:279:22, line:280:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de47a8 <line:279:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4648 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1f845ddbe40 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de4828 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4668 <col:28> 'char **' lvalue ParmVar 0x1f845de1a78 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de4840 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4688 <col:37> 'char **' lvalue ParmVar 0x1f845de1af8 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1f845de46c8 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1f845de46a8 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de4858 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de46e0 <col:55> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de4870 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4700 <col:63> 'double' lvalue Var 0x1f845de2050 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de4888 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4720 <col:71> 'int' lvalue Var 0x1f845de2180 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de48a0 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4740 <col:76> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de48b8 <line:280:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de4760 <col:28> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1f845de4780 <line:76:25> 'int' 2
|   |       |     | `-ReturnStmt 0x1f845de4910 <line:281:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f845de48e8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f845de4938 <line:282:17>
|   |       |     |-CaseStmt 0x1f845de2980 <line:283:13, line:286:28>
|   |       |     | |-ConstantExpr 0x1f845de4958 <line:283:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de4940 <col:18> 'int' 99
|   |       |     | `-IfStmt 0x1f845de2af0 <line:284:17, line:286:28>
|   |       |     |   |-OpaqueValueExpr 0x1f845de2ad8 <<invalid sloc>> '_Bool'
|   |       |     |   `-ReturnStmt 0x1f845de2ac8 <col:21, col:28>
|   |       |     |     `-IntegerLiteral 0x1f845de2aa0 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f845de2b08 <line:287:17>
|   |       |     |-CaseStmt 0x1f845de2b40 <line:288:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1f845de2b28 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de2b10 <col:18> 'int' 115
|   |       |     | `-NullStmt 0x1f845de2be0 <<invalid sloc>>
|   |       |     |-IfStmt 0x1f845de2dc8 <line:290:17, line:295:17>
|   |       |     | |-BinaryOperator 0x1f845de2c48 <line:290:21, col:27> 'int' '<'
|   |       |     | | |-ImplicitCastExpr 0x1f845de2c30 <col:21> 'int' <LValueToRValue>
|   |       |     | | | `-DeclRefExpr 0x1f845de2be8 <col:21> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       |     | | `-IntegerLiteral 0x1f845de2c08 <col:27> 'int' 0
|   |       |     | `-CompoundStmt 0x1f845de2db0 <col:30, line:295:17>
|   |       |     |   `-IfStmt 0x1f845de2d88 <line:291:21, line:294:32> has_else
|   |       |     |     |-ImplicitCastExpr 0x1f845de2c88 <line:291:25> 'char **' <LValueToRValue>
|   |       |     |     | `-DeclRefExpr 0x1f845de2c68 <col:25> 'char **' lvalue ParmVar 0x1f845de1af8 'buffer' 'char **'
|   |       |     |     |-NullStmt 0x1f845de2d80 <line:292:25>
|   |       |     |     `-BinaryOperator 0x1f845de2d60 <line:294:25, col:32> 'int' '='
|   |       |     |       |-DeclRefExpr 0x1f845de2cc0 <col:25> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       |     |       `-ImplicitCastExpr 0x1f845de2d48 <col:31, col:32> 'int' <IntegralCast>
|   |       |     |         `-ImplicitCastExpr 0x1f845de2d30 <col:31, col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |           `-UnaryOperator 0x1f845de2d18 <col:31, col:32> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |     |             `-ImplicitCastExpr 0x1f845de2d00 <col:32> 'size_t *' <LValueToRValue>
|   |       |     |               `-DeclRefExpr 0x1f845de2ce0 <col:32> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   |       |     |-IfStmt 0x1f845de3100 <line:296:17, line:298:28>
|   |       |     | |-UnaryOperator 0x1f845de30b0 <line:296:21, line:297:44> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1f845de2f90 <line:296:22, line:297:44> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de2f78 <line:296:22> 'int (*)(char **, char **, size_t *, size_t *, const char *, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1f845de2de0 <col:22> 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' Function 0x1f845dda040 'fmtstr' 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de2ff0 <col:29> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de2e00 <col:29> 'char **' lvalue ParmVar 0x1f845de1a78 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3008 <col:38> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de2e20 <col:38> 'char **' lvalue ParmVar 0x1f845de1af8 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1f845de2e60 <col:46, col:47> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1f845de2e40 <col:47> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3020 <col:56> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de2e78 <col:56> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3050 <col:64> 'const char *' <NoOp>
|   |       |     | |   | `-ImplicitCastExpr 0x1f845de3038 <col:64> 'char *' <LValueToRValue>
|   |       |     | |   |   `-DeclRefExpr 0x1f845de2e98 <col:64> 'char *' lvalue Var 0x1f845de20e8 'strvalue' 'char *'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3068 <line:297:29> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de2eb8 <col:29> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1f845de3080 <col:36> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1f845de2ed8 <col:36> 'int' lvalue Var 0x1f845de2180 'min' 'int'
|   |       |     | |   `-ImplicitCastExpr 0x1f845de3098 <col:41> 'int' <LValueToRValue>
|   |       |     | |     `-DeclRefExpr 0x1f845de2ef8 <col:41> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       |     | `-ReturnStmt 0x1f845de30f0 <line:298:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f845de30c8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f845de3118 <line:299:17>
|   |       |     |-CaseStmt 0x1f845de3150 <line:300:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1f845de3138 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de3120 <col:18> 'int' 112
|   |       |     | `-NullStmt 0x1f845de31b8 <<invalid sloc>>
|   |       |     |-IfStmt 0x1f845de3418 <line:302:17, line:304:28>
|   |       |     | |-OpaqueValueExpr 0x1f845de3400 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1f845de33f0 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1f845de33c8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f845de3430 <line:305:17>
|   |       |     |-CaseStmt 0x1f845de3468 <line:306:13, line:323:17>
|   |       |     | |-ConstantExpr 0x1f845de3450 <line:306:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845de3438 <col:18> 'int' 110
|   |       |     | `-IfStmt 0x1f845dead90 <line:307:17, line:323:17> has_else
|   |       |     |   |-BinaryOperator 0x1f845de34f0 <line:307:21, line:68:25> 'int' '=='
|   |       |     |   | |-ImplicitCastExpr 0x1f845de34d8 <line:307:21> 'int' <LValueToRValue>
|   |       |     |   | | `-DeclRefExpr 0x1f845de3490 <col:21> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |     |   | `-IntegerLiteral 0x1f845de34b0 <line:68:25> 'int' 1
|   |       |     |   |-CompoundStmt 0x1f845de3708 <line:307:43, line:311:17>
|   |       |     |   | |-DeclStmt 0x1f845de35b8 <line:308:21, col:35>
|   |       |     |   | | `-VarDecl 0x1f845de3550 <col:21, col:32> col:32 used num 'short *'
|   |       |     |   | `-BinaryOperator 0x1f845de36e8 <line:310:21, col:28> 'short' '='
|   |       |     |   |   |-UnaryOperator 0x1f845de3680 <col:21, col:22> 'short' lvalue prefix '*' cannot overflow
|   |       |     |   |   | `-ImplicitCastExpr 0x1f845de3668 <col:22> 'short *' <LValueToRValue>
|   |       |     |   |   |   `-DeclRefExpr 0x1f845de3648 <col:22> 'short *' lvalue Var 0x1f845de3550 'num' 'short *'
|   |       |     |   |   `-ImplicitCastExpr 0x1f845de36d0 <col:28> 'short' <IntegralCast>
|   |       |     |   |     `-ImplicitCastExpr 0x1f845de36b8 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |   |       `-DeclRefExpr 0x1f845de3698 <col:28> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |       |     |   `-IfStmt 0x1f845dead68 <line:311:24, line:323:17> has_else
|   |       |     |     |-BinaryOperator 0x1f845de3788 <line:311:28, line:69:25> 'int' '=='
|   |       |     |     | |-ImplicitCastExpr 0x1f845de3770 <line:311:28> 'int' <LValueToRValue>
|   |       |     |     | | `-DeclRefExpr 0x1f845de3728 <col:28> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |     |     | `-IntegerLiteral 0x1f845de3748 <line:69:25> 'int' 2
|   |       |     |     |-CompoundStmt 0x1f845deaa60 <line:311:49, line:315:17>
|   |       |     |     | |-DeclStmt 0x1f845de3858 <line:312:21, col:34>
|   |       |     |     | | `-VarDecl 0x1f845de37f0 <col:21, col:31> col:31 used num 'long *'
|   |       |     |     | `-BinaryOperator 0x1f845deaa40 <line:314:21, col:38> 'long' '='
|   |       |     |     |   |-UnaryOperator 0x1f845de3920 <col:21, col:22> 'long' lvalue prefix '*' cannot overflow
|   |       |     |     |   | `-ImplicitCastExpr 0x1f845de3908 <col:22> 'long *' <LValueToRValue>
|   |       |     |     |   |   `-DeclRefExpr 0x1f845de38e8 <col:22> 'long *' lvalue Var 0x1f845de37f0 'num' 'long *'
|   |       |     |     |   `-CStyleCastExpr 0x1f845deaa18 <col:28, col:38> 'long' <IntegralCast>
|   |       |     |     |     `-ImplicitCastExpr 0x1f845deaa00 <col:38> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |     |     |       `-DeclRefExpr 0x1f845de3938 <col:38> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |       |     |     `-IfStmt 0x1f845dead40 <line:315:24, line:323:17> has_else
|   |       |     |       |-BinaryOperator 0x1f845deaae0 <line:315:28, line:71:25> 'int' '=='
|   |       |     |       | |-ImplicitCastExpr 0x1f845deaac8 <line:315:28> 'int' <LValueToRValue>
|   |       |     |       | | `-DeclRefExpr 0x1f845deaa80 <col:28> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |     |       | `-IntegerLiteral 0x1f845deaaa0 <line:71:25> 'int' 4
|   |       |     |       |-CompoundStmt 0x1f845deab40 <line:315:50, line:319:17>
|   |       |     |       `-CompoundStmt 0x1f845dead20 <col:24, line:323:17>
|   |       |     |         |-DeclStmt 0x1f845deabd0 <line:320:21, col:29>
|   |       |     |         | `-VarDecl 0x1f845deab68 <col:21, col:26> col:26 used num 'int *'
|   |       |     |         `-BinaryOperator 0x1f845dead00 <line:322:21, col:28> 'int' '='
|   |       |     |           |-UnaryOperator 0x1f845deac98 <col:21, col:22> 'int' lvalue prefix '*' cannot overflow
|   |       |     |           | `-ImplicitCastExpr 0x1f845deac80 <col:22> 'int *' <LValueToRValue>
|   |       |     |           |   `-DeclRefExpr 0x1f845deac60 <col:22> 'int *' lvalue Var 0x1f845deab68 'num' 'int *'
|   |       |     |           `-ImplicitCastExpr 0x1f845deace8 <col:28> 'int' <IntegralCast>
|   |       |     |             `-ImplicitCastExpr 0x1f845deacd0 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |               `-DeclRefExpr 0x1f845deacb0 <col:28> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |       |     |-BreakStmt 0x1f845deadb8 <line:324:17>
|   |       |     |-CaseStmt 0x1f845deadf0 <line:325:13, line:327:28>
|   |       |     | |-ConstantExpr 0x1f845deadd8 <line:325:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845deadc0 <col:18> 'int' 37
|   |       |     | `-IfStmt 0x1f845deb018 <line:326:17, line:327:28>
|   |       |     |   |-UnaryOperator 0x1f845deafc8 <line:326:20, col:70> 'int' prefix '!' cannot overflow
|   |       |     |   | `-CallExpr 0x1f845deaf08 <col:21, col:70> 'int'
|   |       |     |   |   |-ImplicitCastExpr 0x1f845deaef0 <col:21> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       |     |   |   | `-DeclRefExpr 0x1f845deae18 <col:21> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       |     |   |   |-ImplicitCastExpr 0x1f845deaf50 <col:33> 'char **' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1f845deae38 <col:33> 'char **' lvalue ParmVar 0x1f845de1a78 'sbuffer' 'char **'
|   |       |     |   |   |-ImplicitCastExpr 0x1f845deaf68 <col:42> 'char **' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1f845deae58 <col:42> 'char **' lvalue ParmVar 0x1f845de1af8 'buffer' 'char **'
|   |       |     |   |   |-UnaryOperator 0x1f845deae98 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   |       |     |   |   | `-DeclRefExpr 0x1f845deae78 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |       |     |   |   |-ImplicitCastExpr 0x1f845deaf80 <col:60> 'size_t *' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1f845deaeb0 <col:60> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   |       |     |   |   `-ImplicitCastExpr 0x1f845deafb0 <col:68> 'int' <IntegralCast>
|   |       |     |   |     `-ImplicitCastExpr 0x1f845deaf98 <col:68> 'char' <LValueToRValue>
|   |       |     |   |       `-DeclRefExpr 0x1f845deaed0 <col:68> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     |   `-ReturnStmt 0x1f845deb008 <line:327:21, col:28>
|   |       |     |     `-IntegerLiteral 0x1f845deafe0 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1f845deb030 <line:328:17>
|   |       |     |-CaseStmt 0x1f845deb068 <line:329:13, line:331:29>
|   |       |     | |-ConstantExpr 0x1f845deb050 <line:329:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1f845deb038 <col:18> 'int' 119
|   |       |     | `-BinaryOperator 0x1f845deb118 <line:331:17, col:29> 'char' '='
|   |       |     |   |-DeclRefExpr 0x1f845deb090 <col:17> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       |     |   `-ImplicitCastExpr 0x1f845deb100 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |     `-UnaryOperator 0x1f845deb0e8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |       `-UnaryOperator 0x1f845deb0d0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |         `-DeclRefExpr 0x1f845deb0b0 <col:23> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |     |-BreakStmt 0x1f845deb138 <line:332:17>
|   |       |     `-DefaultStmt 0x1f845deb148 <line:333:13, line:335:17>
|   |       |       `-BreakStmt 0x1f845deb140 <col:17>
|   |       |-BinaryOperator 0x1f845deb318 <line:337:13, col:25> 'char' '='
|   |       | |-DeclRefExpr 0x1f845deb290 <col:13> 'char' lvalue Var 0x1f845de1fb8 'ch' 'char'
|   |       | `-ImplicitCastExpr 0x1f845deb300 <col:18, col:25> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1f845deb2e8 <col:18, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1f845deb2d0 <col:19, col:25> 'const char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1f845deb2b0 <col:19> 'const char *' lvalue ParmVar 0x1f845de1ce8 'format' 'const char *'
|   |       |-BinaryOperator 0x1f845deb380 <line:338:13, line:42:25> 'int' '='
|   |       | |-DeclRefExpr 0x1f845deb338 <line:338:13> 'int' lvalue Var 0x1f845de22b0 'state' 'int'
|   |       | `-IntegerLiteral 0x1f845deb358 <line:42:25> 'int' 0
|   |       |-BinaryOperator 0x1f845deb468 <line:339:13, col:36> 'int' '='
|   |       | |-DeclRefExpr 0x1f845deb3a0 <col:13> 'int' lvalue Var 0x1f845de2348 'flags' 'int'
|   |       | `-BinaryOperator 0x1f845deb448 <col:21, col:36> 'int' '='
|   |       |   |-DeclRefExpr 0x1f845deb3c0 <col:21> 'int' lvalue Var 0x1f845de23e0 'cflags' 'int'
|   |       |   `-BinaryOperator 0x1f845deb428 <col:30, col:36> 'int' '='
|   |       |     |-DeclRefExpr 0x1f845deb3e0 <col:30> 'int' lvalue Var 0x1f845de2180 'min' 'int'
|   |       |     `-IntegerLiteral 0x1f845deb400 <col:36> 'int' 0
|   |       |-BinaryOperator 0x1f845deb4e8 <line:340:13, col:20> 'int' '='
|   |       | |-DeclRefExpr 0x1f845deb488 <col:13> 'int' lvalue Var 0x1f845de2218 'max' 'int'
|   |       | `-UnaryOperator 0x1f845deb4d0 <col:19, col:20> 'int' prefix '-'
|   |       |   `-IntegerLiteral 0x1f845deb4a8 <col:20> 'int' 1
|   |       |-BreakStmt 0x1f845deb508 <line:341:13>
|   |       |-CaseStmt 0x1f845deb550 <line:342:9, line:343:13>
|   |       | |-ConstantExpr 0x1f845deb538 <line:49:25> 'int'
|   |       | | `-IntegerLiteral 0x1f845deb510 <col:25> 'int' 7
|   |       | `-BreakStmt 0x1f845deb578 <line:343:13>
|   |       `-DefaultStmt 0x1f845deb588 <line:344:9, line:345:13>
|   |         `-BreakStmt 0x1f845deb580 <col:13>
|   |-IfStmt 0x1f845d99190 <line:352:5, line:356:5>
|   | |-BinaryOperator 0x1f845deb778 <line:352:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f845deb748 <.//openssl//file_jk/after\crypto\bio\b_print.c:352:9> 'char **' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845deb6a0 <col:9> 'char **' lvalue ParmVar 0x1f845de1af8 'buffer' 'char **'
|   | | `-ImplicitCastExpr 0x1f845deb760 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   | |   `-ParenExpr 0x1f845deb728 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1f845deb700 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1f845deb6c0 <col:26> 'int' 0
|   | `-CompoundStmt 0x1f845d99170 <.//openssl//file_jk/after\crypto\bio\b_print.c:352:25, line:356:5>
|   |   |-BinaryOperator 0x1f845deb928 <line:353:9, col:44> 'int' '='
|   |   | |-UnaryOperator 0x1f845deb7d0 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1f845deb7b8 <col:10> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1f845deb798 <col:10> 'int *' lvalue ParmVar 0x1f845de1c68 'truncated' 'int *'
|   |   | `-ParenExpr 0x1f845deb908 <col:22, col:44> 'int'
|   |   |   `-BinaryOperator 0x1f845deb8e8 <col:23, col:43> 'int' '>'
|   |   |     |-ImplicitCastExpr 0x1f845deb8d0 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1f845deb7e8 <col:23> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |   |     `-BinaryOperator 0x1f845deb8b0 <col:33, col:43> 'unsigned long long' '-'
|   |   |       |-ImplicitCastExpr 0x1f845deb880 <col:33, col:34> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |       | `-UnaryOperator 0x1f845deb840 <col:33, col:34> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   |       |   `-ImplicitCastExpr 0x1f845deb828 <col:34> 'size_t *' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1f845deb808 <col:34> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   |   |       `-ImplicitCastExpr 0x1f845deb898 <col:43> 'unsigned long long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1f845deb858 <col:43> 'int' 1
|   |   `-IfStmt 0x1f845d99158 <line:354:9, line:355:33>
|   |     |-ImplicitCastExpr 0x1f845deb998 <line:354:13, col:14> 'int' <LValueToRValue>
|   |     | `-UnaryOperator 0x1f845deb980 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |     |   `-ImplicitCastExpr 0x1f845deb968 <col:14> 'int *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x1f845deb948 <col:14> 'int *' lvalue ParmVar 0x1f845de1c68 'truncated' 'int *'
|   |     `-BinaryOperator 0x1f845d99138 <line:355:13, col:33> 'size_t':'unsigned long long' '='
|   |       |-DeclRefExpr 0x1f845deb9b0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |       `-BinaryOperator 0x1f845d99118 <col:23, col:33> 'unsigned long long' '-'
|   |         |-ImplicitCastExpr 0x1f845d990e8 <col:23, col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |         | `-UnaryOperator 0x1f845d990a8 <col:23, col:24> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |         |   `-ImplicitCastExpr 0x1f845d99090 <col:24> 'size_t *' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x1f845deb9d0 <col:24> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   |         `-ImplicitCastExpr 0x1f845d99100 <col:33> 'unsigned long long' <IntegralCast>
|   |           `-IntegerLiteral 0x1f845d990c0 <col:33> 'int' 1
|   |-IfStmt 0x1f845d99370 <line:357:5, line:358:16>
|   | |-UnaryOperator 0x1f845d99320 <line:357:8, col:60> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1f845d99290 <col:9, col:60> 'int'
|   | |   |-ImplicitCastExpr 0x1f845d99278 <col:9> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1f845d991a8 <col:9> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   | |   |-ImplicitCastExpr 0x1f845d992d8 <col:21> 'char **' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1f845d991c8 <col:21> 'char **' lvalue ParmVar 0x1f845de1a78 'sbuffer' 'char **'
|   | |   |-ImplicitCastExpr 0x1f845d992f0 <col:30> 'char **' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1f845d991e8 <col:30> 'char **' lvalue ParmVar 0x1f845de1af8 'buffer' 'char **'
|   | |   |-UnaryOperator 0x1f845d99228 <col:38, col:39> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f845d99208 <col:39> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1f845d99308 <col:48> 'size_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1f845d99240 <col:48> 'size_t *' lvalue ParmVar 0x1f845de1b70 'maxlen' 'size_t *'
|   | |   `-CharacterLiteral 0x1f845d99260 <col:56> 'int' 0
|   | `-ReturnStmt 0x1f845d99360 <line:358:9, col:16>
|   |   `-IntegerLiteral 0x1f845d99338 <col:16> 'int' 0
|   |-BinaryOperator 0x1f845d99470 <line:359:5, col:25> 'size_t':'unsigned long long' '='
|   | |-UnaryOperator 0x1f845d993c0 <col:5, col:6> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f845d993a8 <col:6> 'size_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f845d99388 <col:6> 'size_t *' lvalue ParmVar 0x1f845de1be8 'retlen' 'size_t *'
|   | `-BinaryOperator 0x1f845d99450 <col:15, col:25> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1f845d99420 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845d993d8 <col:15> 'size_t':'unsigned long long' lvalue Var 0x1f845de2470 'currlen' 'size_t':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1f845d99438 <col:25> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1f845d993f8 <col:25> 'int' 1
|   `-ReturnStmt 0x1f845d994b8 <line:360:5, col:12>
|     `-IntegerLiteral 0x1f845d99490 <col:12> 'int' 1
|-FunctionDecl 0x1f845d99a80 prev 0x1f845dda040 <line:363:1, line:413:1> line:364:1 used fmtstr 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' static
| |-ParmVarDecl 0x1f845d99580 <col:8, col:15> col:15 used sbuffer 'char **'
| |-ParmVarDecl 0x1f845d99600 <line:365:8, col:15> col:15 used buffer 'char **'
| |-ParmVarDecl 0x1f845d99678 <line:366:8, col:16> col:16 used currlen 'size_t *'
| |-ParmVarDecl 0x1f845d996f0 <line:367:8, col:16> col:16 used maxlen 'size_t *'
| |-ParmVarDecl 0x1f845d99770 <col:24, col:36> col:36 used value 'const char *'
| |-ParmVarDecl 0x1f845d997f0 <col:43, col:47> col:47 used flags 'int'
| |-ParmVarDecl 0x1f845d99870 <col:54, col:58> col:58 used min 'int'
| |-ParmVarDecl 0x1f845d998f0 <col:63, col:67> col:67 used max 'int'
| `-CompoundStmt 0x1f845eb6680 <line:368:1, line:413:1>
|   |-DeclStmt 0x1f845d99be0 <line:369:5, col:15>
|   | `-VarDecl 0x1f845d99b78 <col:5, col:9> col:9 used padlen 'int'
|   |-DeclStmt 0x1f845d99c70 <line:370:5, col:17>
|   | `-VarDecl 0x1f845d99c08 <col:5, col:12> col:12 used strln 'size_t':'unsigned long long'
|   |-DeclStmt 0x1f845d99d30 <line:371:5, col:16>
|   | `-VarDecl 0x1f845d99ca0 <col:5, col:15> col:9 used cnt 'int' cinit
|   |   `-IntegerLiteral 0x1f845d99d08 <col:15> 'int' 0
|   |-IfStmt 0x1f845d99ea8 <line:373:5, line:374:17>
|   | |-BinaryOperator 0x1f845d99dc0 <line:373:9, col:18> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f845d99d90 <col:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845d99d48 <col:9> 'const char *' lvalue ParmVar 0x1f845d99770 'value' 'const char *'
|   | | `-ImplicitCastExpr 0x1f845d99da8 <col:18> 'const char *' <NullToPointer>
|   | |   `-IntegerLiteral 0x1f845d99d68 <col:18> 'int' 0
|   | `-BinaryOperator 0x1f845d99e88 <line:374:9, col:17> 'const char *' '='
|   |   |-DeclRefExpr 0x1f845d99de0 <col:9> 'const char *' lvalue ParmVar 0x1f845d99770 'value' 'const char *'
|   |   `-ImplicitCastExpr 0x1f845d99e70 <col:17> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x1f845d99e58 <col:17> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1f845d99e38 <col:17> 'char [7]' lvalue "<NULL>"
|   |-BinaryOperator 0x1f845eb4298 <line:378:5, col:20> 'int' '='
|   | |-DeclRefExpr 0x1f845eb41a0 <col:5> 'int' lvalue Var 0x1f845d99b78 'padlen' 'int'
|   | `-ImplicitCastExpr 0x1f845eb4280 <col:14, col:20> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1f845eb4260 <col:14, col:20> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1f845eb4248 <col:14> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1f845eb4218 <col:14> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1f845eb41d8 <col:14> 'int' lvalue ParmVar 0x1f845d99870 'min' 'int'
|   |     `-ImplicitCastExpr 0x1f845eb4230 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f845eb41f8 <col:20> 'size_t':'unsigned long long' lvalue Var 0x1f845d99c08 'strln' 'size_t':'unsigned long long'
|   |-IfStmt 0x1f845eb4440 <line:379:5, line:380:18>
|   | |-BinaryOperator 0x1f845eb43b8 <line:379:9, col:29> 'int' '||'
|   | | |-BinaryOperator 0x1f845eb4318 <col:9, col:15> 'int' '<'
|   | | | |-ImplicitCastExpr 0x1f845eb4300 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1f845eb42b8 <col:9> 'int' lvalue ParmVar 0x1f845d99870 'min' 'int'
|   | | | `-IntegerLiteral 0x1f845eb42d8 <col:15> 'int' 0
|   | | `-BinaryOperator 0x1f845eb4398 <col:20, col:29> 'int' '<'
|   | |   |-ImplicitCastExpr 0x1f845eb4380 <col:20> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1f845eb4338 <col:20> 'int' lvalue Var 0x1f845d99b78 'padlen' 'int'
|   | |   `-IntegerLiteral 0x1f845eb4358 <col:29> 'int' 0
|   | `-BinaryOperator 0x1f845eb4420 <line:380:9, col:18> 'int' '='
|   |   |-DeclRefExpr 0x1f845eb43d8 <col:9> 'int' lvalue Var 0x1f845d99b78 'padlen' 'int'
|   |   `-IntegerLiteral 0x1f845eb43f8 <col:18> 'int' 0
|   |-IfStmt 0x1f845eb4620 <line:381:5, line:390:5>
|   | |-BinaryOperator 0x1f845eb44b8 <line:381:9, col:16> 'int' '>='
|   | | |-ImplicitCastExpr 0x1f845eb44a0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb4458 <col:9> 'int' lvalue ParmVar 0x1f845d998f0 'max' 'int'
|   | | `-IntegerLiteral 0x1f845eb4478 <col:16> 'int' 0
|   | `-CompoundStmt 0x1f845eb4608 <col:19, line:390:5>
|   |   `-IfStmt 0x1f845eb45e0 <line:386:9, line:389:13> has_else
|   |     |-OpaqueValueExpr 0x1f845eb45c8 <<invalid sloc>> '_Bool'
|   |     |-CompoundAssignOperator 0x1f845eb4570 <line:387:13, col:20> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | |-DeclRefExpr 0x1f845eb4518 <col:13> 'int' lvalue ParmVar 0x1f845d998f0 'max' 'int'
|   |     | `-ImplicitCastExpr 0x1f845eb4558 <col:20> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1f845eb4538 <col:20> 'int' lvalue Var 0x1f845d99b78 'padlen' 'int'
|   |     `-NullStmt 0x1f845eb45c0 <line:389:13>
|   |-IfStmt 0x1f845eb47b0 <line:391:5, line:392:19>
|   | |-BinaryOperator 0x1f845eb4700 <line:391:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f845eb46e8 <line:391:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb4638 <col:9> 'int' lvalue ParmVar 0x1f845d997f0 'flags' 'int'
|   | | `-ParenExpr 0x1f845eb46c8 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f845eb46a8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f845eb4658 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f845eb4680 <col:31> 'int' 0
|   | `-BinaryOperator 0x1f845eb4790 <line:392:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1f845eb4720 <col:9> 'int' lvalue Var 0x1f845d99b78 'padlen' 'int'
|   |   `-UnaryOperator 0x1f845eb4778 <col:18, col:19> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1f845eb4760 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f845eb4740 <col:19> 'int' lvalue Var 0x1f845d99b78 'padlen' 'int'
|   |-WhileStmt 0x1f845eb4c68 <line:394:5, line:399:5>
|   | |-BinaryOperator 0x1f845eb49d0 <line:394:12, col:49> 'int' '&&'
|   | | |-ParenExpr 0x1f845eb4848 <col:12, col:23> 'int'
|   | | | `-BinaryOperator 0x1f845eb4828 <col:13, col:22> 'int' '>'
|   | | |   |-ImplicitCastExpr 0x1f845eb4810 <col:13> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1f845eb47c8 <col:13> 'int' lvalue Var 0x1f845d99b78 'padlen' 'int'
|   | | |   `-IntegerLiteral 0x1f845eb47e8 <col:22> 'int' 0
|   | | `-ParenExpr 0x1f845eb49b0 <col:28, col:49> 'int'
|   | |   `-BinaryOperator 0x1f845eb4990 <col:29, col:46> 'int' '||'
|   | |     |-BinaryOperator 0x1f845eb48c8 <col:29, col:35> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1f845eb48b0 <col:29> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1f845eb4868 <col:29> 'int' lvalue ParmVar 0x1f845d998f0 'max' 'int'
|   | |     | `-IntegerLiteral 0x1f845eb4888 <col:35> 'int' 0
|   | |     `-BinaryOperator 0x1f845eb4970 <col:40, col:46> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1f845eb4940 <col:40> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1f845eb48e8 <col:40> 'int' lvalue Var 0x1f845d99ca0 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1f845eb4958 <col:46> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1f845eb4920 <col:46> 'int' lvalue ParmVar 0x1f845d998f0 'max' 'int'
|   | `-CompoundStmt 0x1f845eb4c40 <col:52, line:399:5>
|   |   |-IfStmt 0x1f845eb4bb8 <line:395:9, line:396:20>
|   |   | |-UnaryOperator 0x1f845eb4b68 <line:395:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845eb4ac0 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845eb4aa8 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845eb49f0 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845eb4b08 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb4a10 <col:25> 'char **' lvalue ParmVar 0x1f845d99580 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb4b20 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb4a30 <col:34> 'char **' lvalue ParmVar 0x1f845d99600 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb4b38 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb4a50 <col:42> 'size_t *' lvalue ParmVar 0x1f845d99678 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845eb4b50 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb4a70 <col:51> 'size_t *' lvalue ParmVar 0x1f845d996f0 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f845eb4a90 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1f845eb4ba8 <line:396:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845eb4b80 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1f845eb4bf0 <line:397:9, col:11> 'int' prefix '--'
|   |   | `-DeclRefExpr 0x1f845eb4bd0 <col:11> 'int' lvalue Var 0x1f845d99b78 'padlen' 'int'
|   |   `-UnaryOperator 0x1f845eb4c28 <line:398:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1f845eb4c08 <col:11> 'int' lvalue Var 0x1f845d99ca0 'cnt' 'int'
|   |-WhileStmt 0x1f845eb6190 <line:400:5, line:405:5>
|   | |-BinaryOperator 0x1f845eb4e68 <line:400:12, col:46> 'int' '&&'
|   | | |-BinaryOperator 0x1f845eb4cf8 <col:12, col:20> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1f845eb4cc8 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1f845eb4c80 <col:12> 'size_t':'unsigned long long' lvalue Var 0x1f845d99c08 'strln' 'size_t':'unsigned long long'
|   | | | `-ImplicitCastExpr 0x1f845eb4ce0 <col:20> 'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1f845eb4ca0 <col:20> 'int' 0
|   | | `-ParenExpr 0x1f845eb4e48 <col:25, col:46> 'int'
|   | |   `-BinaryOperator 0x1f845eb4e28 <col:26, col:43> 'int' '||'
|   | |     |-BinaryOperator 0x1f845eb4d78 <col:26, col:32> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1f845eb4d60 <col:26> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1f845eb4d18 <col:26> 'int' lvalue ParmVar 0x1f845d998f0 'max' 'int'
|   | |     | `-IntegerLiteral 0x1f845eb4d38 <col:32> 'int' 0
|   | |     `-BinaryOperator 0x1f845eb4e08 <col:37, col:43> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1f845eb4dd8 <col:37> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1f845eb4d98 <col:37> 'int' lvalue Var 0x1f845d99ca0 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1f845eb4df0 <col:43> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1f845eb4db8 <col:43> 'int' lvalue ParmVar 0x1f845d998f0 'max' 'int'
|   | `-CompoundStmt 0x1f845eb6168 <col:49, line:405:5>
|   |   |-IfStmt 0x1f845eb50b8 <line:401:9, line:402:20>
|   |   | |-UnaryOperator 0x1f845eb5068 <line:401:12, col:67> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845eb4f90 <col:13, col:67> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845eb4f78 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845eb4e88 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845eb4fd8 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb4ea8 <col:25> 'char **' lvalue ParmVar 0x1f845d99580 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb4ff0 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb4ec8 <col:34> 'char **' lvalue ParmVar 0x1f845d99600 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb5008 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb4ee8 <col:42> 'size_t *' lvalue ParmVar 0x1f845d99678 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845eb5020 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb4f08 <col:51> 'size_t *' lvalue ParmVar 0x1f845d996f0 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1f845eb5050 <col:59, col:65> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1f845eb5038 <col:59, col:65> 'char' <LValueToRValue>
|   |   | |       `-UnaryOperator 0x1f845eb4f60 <col:59, col:65> 'const char' lvalue prefix '*' cannot overflow
|   |   | |         `-UnaryOperator 0x1f845eb4f48 <col:60, col:65> 'const char *' postfix '++'
|   |   | |           `-DeclRefExpr 0x1f845eb4f28 <col:60> 'const char *' lvalue ParmVar 0x1f845d99770 'value' 'const char *'
|   |   | `-ReturnStmt 0x1f845eb50a8 <line:402:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845eb5080 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1f845eb50f0 <line:403:9, col:11> 'size_t':'unsigned long long' prefix '--'
|   |   | `-DeclRefExpr 0x1f845eb50d0 <col:11> 'size_t':'unsigned long long' lvalue Var 0x1f845d99c08 'strln' 'size_t':'unsigned long long'
|   |   `-UnaryOperator 0x1f845eb6150 <line:404:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1f845eb6130 <col:11> 'int' lvalue Var 0x1f845d99ca0 'cnt' 'int'
|   |-WhileStmt 0x1f845eb6630 <line:406:5, line:411:5>
|   | |-BinaryOperator 0x1f845eb6398 <line:406:12, col:49> 'int' '&&'
|   | | |-ParenExpr 0x1f845eb6228 <col:12, col:23> 'int'
|   | | | `-BinaryOperator 0x1f845eb6208 <col:13, col:22> 'int' '<'
|   | | |   |-ImplicitCastExpr 0x1f845eb61f0 <col:13> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1f845eb61a8 <col:13> 'int' lvalue Var 0x1f845d99b78 'padlen' 'int'
|   | | |   `-IntegerLiteral 0x1f845eb61c8 <col:22> 'int' 0
|   | | `-ParenExpr 0x1f845eb6378 <col:28, col:49> 'int'
|   | |   `-BinaryOperator 0x1f845eb6358 <col:29, col:46> 'int' '||'
|   | |     |-BinaryOperator 0x1f845eb62a8 <col:29, col:35> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1f845eb6290 <col:29> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1f845eb6248 <col:29> 'int' lvalue ParmVar 0x1f845d998f0 'max' 'int'
|   | |     | `-IntegerLiteral 0x1f845eb6268 <col:35> 'int' 0
|   | |     `-BinaryOperator 0x1f845eb6338 <col:40, col:46> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1f845eb6308 <col:40> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1f845eb62c8 <col:40> 'int' lvalue Var 0x1f845d99ca0 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1f845eb6320 <col:46> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1f845eb62e8 <col:46> 'int' lvalue ParmVar 0x1f845d998f0 'max' 'int'
|   | `-CompoundStmt 0x1f845eb6608 <col:52, line:411:5>
|   |   |-IfStmt 0x1f845eb6580 <line:407:9, line:408:20>
|   |   | |-UnaryOperator 0x1f845eb6530 <line:407:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845eb6488 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845eb6470 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845eb63b8 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845eb64d0 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb63d8 <col:25> 'char **' lvalue ParmVar 0x1f845d99580 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb64e8 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb63f8 <col:34> 'char **' lvalue ParmVar 0x1f845d99600 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb6500 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb6418 <col:42> 'size_t *' lvalue ParmVar 0x1f845d99678 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845eb6518 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb6438 <col:51> 'size_t *' lvalue ParmVar 0x1f845d996f0 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f845eb6458 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1f845eb6570 <line:408:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845eb6548 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1f845eb65b8 <line:409:9, col:11> 'int' prefix '++'
|   |   | `-DeclRefExpr 0x1f845eb6598 <col:11> 'int' lvalue Var 0x1f845d99b78 'padlen' 'int'
|   |   `-UnaryOperator 0x1f845eb65f0 <line:410:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1f845eb65d0 <col:11> 'int' lvalue Var 0x1f845d99ca0 'cnt' 'int'
|   `-ReturnStmt 0x1f845eb6670 <line:412:5, col:12>
|     `-IntegerLiteral 0x1f845eb6648 <col:12> 'int' 1
|-FunctionDecl 0x1f845eb6bd0 <line:415:1, line:513:1> line:416:1 invalid fmtint 'int (char **, char **, size_t *, size_t *, int, int, int, int, int)' static
| |-ParmVarDecl 0x1f845eb6708 <col:8, col:15> col:15 used sbuffer 'char **'
| |-ParmVarDecl 0x1f845eb6788 <line:417:8, col:15> col:15 used buffer 'char **'
| |-ParmVarDecl 0x1f845eb6800 <line:418:8, col:16> col:16 used currlen 'size_t *'
| |-ParmVarDecl 0x1f845eb6878 <line:419:8, col:16> col:16 used maxlen 'size_t *'
| |-ParmVarDecl 0x1f845eb68f8 <col:24, col:32> col:32 invalid value 'int'
| |-ParmVarDecl 0x1f845eb6978 <col:39, col:43> col:43 used base 'int'
| |-ParmVarDecl 0x1f845eb69f8 <col:49, col:53> col:53 used min 'int'
| |-ParmVarDecl 0x1f845eb6a78 <col:58, col:62> col:62 used max 'int'
| |-ParmVarDecl 0x1f845eb6af8 <col:67, col:71> col:71 used flags 'int'
| `-CompoundStmt 0x1f845eb20f0 <line:420:1, line:513:1>
|   |-DeclStmt 0x1f845eb6d78 <line:421:5, col:22>
|   | `-VarDecl 0x1f845eb6ce8 <col:5, col:21> col:9 used signvalue 'int' cinit
|   |   `-IntegerLiteral 0x1f845eb6d50 <col:21> 'int' 0
|   |-DeclStmt 0x1f845eb6e90 <line:422:5, col:28>
|   | `-VarDecl 0x1f845eb6da8 <col:5, col:26> col:17 used prefix 'const char *' cinit
|   |   `-ImplicitCastExpr 0x1f845eb6e78 <col:26> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x1f845eb6e60 <col:26> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1f845eb6e48 <col:26> 'char [1]' lvalue ""
|   |-DeclStmt 0x1f845eb7058 <line:424:5, col:42>
|   | `-VarDecl 0x1f845eb6ff0 <col:5, col:10> col:10 invalid convert 'char'
|   |-DeclStmt 0x1f845eb7118 <line:425:5, col:18>
|   | `-VarDecl 0x1f845eb7088 <col:5, col:17> col:9 used place 'int' cinit
|   |   `-IntegerLiteral 0x1f845eb70f0 <col:17> 'int' 0
|   |-DeclStmt 0x1f845eb51c8 <line:426:5, col:20>
|   | `-VarDecl 0x1f845eb5138 <col:5, col:19> col:9 used spadlen 'int' cinit
|   |   `-IntegerLiteral 0x1f845eb51a0 <col:19> 'int' 0
|   |-DeclStmt 0x1f845eb5288 <line:427:5, col:20>
|   | `-VarDecl 0x1f845eb51f8 <col:5, col:19> col:9 used zpadlen 'int' cinit
|   |   `-IntegerLiteral 0x1f845eb5260 <col:19> 'int' 0
|   |-DeclStmt 0x1f845eb5348 <line:428:5, col:17>
|   | `-VarDecl 0x1f845eb52b8 <col:5, col:16> col:9 used caps 'int' cinit
|   |   `-IntegerLiteral 0x1f845eb5320 <col:16> 'int' 0
|   |-IfStmt 0x1f845eb5460 <line:430:5, line:431:15>
|   | |-BinaryOperator 0x1f845eb53d8 <line:430:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845eb53c0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb5360 <col:9> 'int' lvalue ParmVar 0x1f845eb6a78 'max' 'int'
|   | | `-IntegerLiteral 0x1f845eb5398 <col:15> 'int' 0
|   | `-BinaryOperator 0x1f845eb5440 <line:431:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1f845eb53f8 <col:9> 'int' lvalue ParmVar 0x1f845eb6a78 'max' 'int'
|   |   `-IntegerLiteral 0x1f845eb5418 <col:15> 'int' 0
|   |-IfStmt 0x1f845eb59a0 <line:433:5, line:441:5>
|   | |-UnaryOperator 0x1f845eb5598 <line:433:9, col:32> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x1f845eb5578 <col:10, col:32> 'int'
|   | |   `-BinaryOperator 0x1f845eb5558 <col:11, line:65:32> 'int' '&'
|   | |     |-ImplicitCastExpr 0x1f845eb5540 <line:433:11> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f845eb5478 <col:11> 'int' lvalue ParmVar 0x1f845eb6af8 'flags' 'int'
|   | |     `-ParenExpr 0x1f845eb5520 <line:65:25, col:32> 'int'
|   | |       `-BinaryOperator 0x1f845eb5500 <col:26, col:31> 'int' '<<'
|   | |         |-IntegerLiteral 0x1f845eb54b0 <col:26> 'int' 1
|   | |         `-IntegerLiteral 0x1f845eb54d8 <col:31> 'int' 6
|   | `-CompoundStmt 0x1f845eb5988 <line:433:35, line:441:5>
|   |   `-IfStmt 0x1f845eb5960 <line:434:9, line:440:25> has_else
|   |     |-OpaqueValueExpr 0x1f845eb5948 <<invalid sloc>> '_Bool'
|   |     |-CompoundStmt 0x1f845eb5670 <line:434:24, line:437:9>
|   |     | `-BinaryOperator 0x1f845eb5628 <line:435:13, col:25> 'int' '='
|   |     |   |-DeclRefExpr 0x1f845eb55d8 <col:13> 'int' lvalue Var 0x1f845eb6ce8 'signvalue' 'int'
|   |     |   `-CharacterLiteral 0x1f845eb5610 <col:25> 'int' 45
|   |     `-IfStmt 0x1f845eb5920 <line:437:16, line:440:25> has_else
|   |       |-BinaryOperator 0x1f845eb5750 <line:437:20, line:55:32> 'int' '&'
|   |       | |-ImplicitCastExpr 0x1f845eb5738 <line:437:20> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x1f845eb5688 <col:20> 'int' lvalue ParmVar 0x1f845eb6af8 'flags' 'int'
|   |       | `-ParenExpr 0x1f845eb5718 <line:55:25, col:32> 'int'
|   |       |   `-BinaryOperator 0x1f845eb56f8 <col:26, col:31> 'int' '<<'
|   |       |     |-IntegerLiteral 0x1f845eb56a8 <col:26> 'int' 1
|   |       |     `-IntegerLiteral 0x1f845eb56d0 <col:31> 'int' 1
|   |       |-BinaryOperator 0x1f845eb57a8 <line:438:13, col:25> 'int' '='
|   |       | |-DeclRefExpr 0x1f845eb5770 <col:13> 'int' lvalue Var 0x1f845eb6ce8 'signvalue' 'int'
|   |       | `-CharacterLiteral 0x1f845eb5790 <col:25> 'int' 43
|   |       `-IfStmt 0x1f845eb5908 <line:439:14, line:440:25>
|   |         |-BinaryOperator 0x1f845eb5890 <line:439:18, line:57:32> 'int' '&'
|   |         | |-ImplicitCastExpr 0x1f845eb5878 <line:439:18> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x1f845eb57c8 <col:18> 'int' lvalue ParmVar 0x1f845eb6af8 'flags' 'int'
|   |         | `-ParenExpr 0x1f845eb5858 <line:57:25, col:32> 'int'
|   |         |   `-BinaryOperator 0x1f845eb5838 <col:26, col:31> 'int' '<<'
|   |         |     |-IntegerLiteral 0x1f845eb57e8 <col:26> 'int' 1
|   |         |     `-IntegerLiteral 0x1f845eb5810 <col:31> 'int' 2
|   |         `-BinaryOperator 0x1f845eb58e8 <line:440:13, col:25> 'int' '='
|   |           |-DeclRefExpr 0x1f845eb58b0 <col:13> 'int' lvalue Var 0x1f845eb6ce8 'signvalue' 'int'
|   |           `-CharacterLiteral 0x1f845eb58d0 <col:25> 'int' 32
|   |-IfStmt 0x1f845eb5db0 <line:442:5, line:447:5>
|   | |-BinaryOperator 0x1f845eb5a80 <line:442:9, line:59:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f845eb5a68 <line:442:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb59b8 <col:9> 'int' lvalue ParmVar 0x1f845eb6af8 'flags' 'int'
|   | | `-ParenExpr 0x1f845eb5a48 <line:59:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f845eb5a28 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f845eb59d8 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f845eb5a00 <col:31> 'int' 3
|   | `-CompoundStmt 0x1f845eb5d90 <line:442:27, line:447:5>
|   |   |-IfStmt 0x1f845eb5c18 <line:443:9, line:444:22>
|   |   | |-BinaryOperator 0x1f845eb5b18 <line:443:13, col:21> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1f845eb5b00 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f845eb5aa0 <col:13> 'int' lvalue ParmVar 0x1f845eb6978 'base' 'int'
|   |   | | `-IntegerLiteral 0x1f845eb5ad8 <col:21> 'int' 8
|   |   | `-BinaryOperator 0x1f845eb5bf8 <line:444:13, col:22> 'const char *' '='
|   |   |   |-DeclRefExpr 0x1f845eb5b38 <col:13> 'const char *' lvalue Var 0x1f845eb6da8 'prefix' 'const char *'
|   |   |   `-ImplicitCastExpr 0x1f845eb5be0 <col:22> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x1f845eb5bc8 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x1f845eb5ba8 <col:22> 'char [2]' lvalue "0"
|   |   `-IfStmt 0x1f845eb5d78 <line:445:9, line:446:22>
|   |     |-BinaryOperator 0x1f845eb5c90 <line:445:13, col:21> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1f845eb5c78 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f845eb5c30 <col:13> 'int' lvalue ParmVar 0x1f845eb6978 'base' 'int'
|   |     | `-IntegerLiteral 0x1f845eb5c50 <col:21> 'int' 16
|   |     `-BinaryOperator 0x1f845eb5d58 <line:446:13, col:22> 'const char *' '='
|   |       |-DeclRefExpr 0x1f845eb5cb0 <col:13> 'const char *' lvalue Var 0x1f845eb6da8 'prefix' 'const char *'
|   |       `-ImplicitCastExpr 0x1f845eb5d40 <col:22> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x1f845eb5d28 <col:22> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x1f845eb5d08 <col:22> 'char [3]' lvalue "0x"
|   |-IfStmt 0x1f845eb5f30 <line:448:5, line:449:16>
|   | |-BinaryOperator 0x1f845eb5e90 <line:448:9, line:63:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f845eb5e78 <line:448:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb5dc8 <col:9> 'int' lvalue ParmVar 0x1f845eb6af8 'flags' 'int'
|   | | `-ParenExpr 0x1f845eb5e58 <line:63:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f845eb5e38 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f845eb5de8 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f845eb5e10 <col:31> 'int' 5
|   | `-BinaryOperator 0x1f845eb5f10 <line:449:9, col:16> 'int' '='
|   |   |-DeclRefExpr 0x1f845eb5eb0 <col:9> 'int' lvalue Var 0x1f845eb52b8 'caps' 'int'
|   |   `-IntegerLiteral 0x1f845eb5ee8 <col:16> 'int' 1
|   |-IfStmt 0x1f845eb73a0 <line:455:5, line:456:14>
|   | |-OpaqueValueExpr 0x1f845eb7388 <<invalid sloc>> '_Bool'
|   | `-UnaryOperator 0x1f845eb7370 <col:9, col:14> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1f845eb7350 <col:9> 'int' lvalue Var 0x1f845eb7088 'place' 'int'
|   |-BinaryOperator 0x1f845eb74c8 <line:459:5, col:21> 'int' '='
|   | |-DeclRefExpr 0x1f845eb7400 <col:5> 'int' lvalue Var 0x1f845eb51f8 'zpadlen' 'int'
|   | `-BinaryOperator 0x1f845eb74a8 <col:15, col:21> 'int' '-'
|   |   |-ImplicitCastExpr 0x1f845eb7478 <col:15> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845eb7438 <col:15> 'int' lvalue ParmVar 0x1f845eb6a78 'max' 'int'
|   |   `-ImplicitCastExpr 0x1f845eb7490 <col:21> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f845eb7458 <col:21> 'int' lvalue Var 0x1f845eb7088 'place' 'int'
|   |-BinaryOperator 0x1f845eb7920 <line:460:5, line:461:73> 'int' '='
|   | |-DeclRefExpr 0x1f845eb74e8 <line:460:5> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   | `-ImplicitCastExpr 0x1f845eb7908 <line:461:9, col:73> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1f845eb78e8 <col:9, col:73> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1f845eb78d0 <col:9, col:56> 'unsigned long long' <IntegralCast>
|   |     | `-BinaryOperator 0x1f845eb77d8 <col:9, col:56> 'int' '-'
|   |     |   |-BinaryOperator 0x1f845eb76e0 <col:9, line:80:40> 'int' '-'
|   |     |   | |-ImplicitCastExpr 0x1f845eb76c8 <line:461:9> 'int' <LValueToRValue>
|   |     |   | | `-DeclRefExpr 0x1f845eb7520 <col:9> 'int' lvalue ParmVar 0x1f845eb69f8 'min' 'int'
|   |     |   | `-ParenExpr 0x1f845eb76a8 <line:80:23, col:40> 'int'
|   |     |   |   `-ConditionalOperator 0x1f845eb7678 <col:24, line:461:29> 'int'
|   |     |   |     |-ParenExpr 0x1f845eb75e8 <line:80:24, col:31> 'int'
|   |     |   |     | `-BinaryOperator 0x1f845eb75c8 <line:461:24, col:29> 'int' '>='
|   |     |   |     |   |-ImplicitCastExpr 0x1f845eb7598 <col:24> 'int' <LValueToRValue>
|   |     |   |     |   | `-DeclRefExpr 0x1f845eb7558 <col:24> 'int' lvalue ParmVar 0x1f845eb6a78 'max' 'int'
|   |     |   |     |   `-ImplicitCastExpr 0x1f845eb75b0 <col:29> 'int' <LValueToRValue>
|   |     |   |     |     `-DeclRefExpr 0x1f845eb7578 <col:29> 'int' lvalue Var 0x1f845eb7088 'place' 'int'
|   |     |   |     |-ImplicitCastExpr 0x1f845eb7648 <col:24> 'int' <LValueToRValue>
|   |     |   |     | `-DeclRefExpr 0x1f845eb7608 <col:24> 'int' lvalue ParmVar 0x1f845eb6a78 'max' 'int'
|   |     |   |     `-ImplicitCastExpr 0x1f845eb7660 <col:29> 'int' <LValueToRValue>
|   |     |   |       `-DeclRefExpr 0x1f845eb7628 <col:29> 'int' lvalue Var 0x1f845eb7088 'place' 'int'
|   |     |   `-ParenExpr 0x1f845eb77b8 <col:38, col:56> 'int'
|   |     |     `-ConditionalOperator 0x1f845eb7788 <col:39, col:55> 'int'
|   |     |       |-ImplicitCastExpr 0x1f845eb7770 <col:39> 'int' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x1f845eb7700 <col:39> 'int' lvalue Var 0x1f845eb6ce8 'signvalue' 'int'
|   |     |       |-IntegerLiteral 0x1f845eb7720 <col:51> 'int' 1
|   |     |       `-IntegerLiteral 0x1f845eb7748 <col:55> 'int' 0
|   |     `-CallExpr 0x1f845eb7890 <col:60, col:73> 'unsigned long long'
|   |       |-ImplicitCastExpr 0x1f845eb7878 <col:60> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1f845eb77f8 <col:60> 'unsigned long long (const char *)' Function 0x1f845daf270 'strlen' 'unsigned long long (const char *)'
|   |       `-ImplicitCastExpr 0x1f845eb78b8 <col:67> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f845eb7818 <col:67> 'const char *' lvalue Var 0x1f845eb6da8 'prefix' 'const char *'
|   |-IfStmt 0x1f845eb7a28 <line:462:5, line:463:19>
|   | |-BinaryOperator 0x1f845eb79a0 <line:462:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845eb7988 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb7940 <col:9> 'int' lvalue Var 0x1f845eb51f8 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1f845eb7960 <col:19> 'int' 0
|   | `-BinaryOperator 0x1f845eb7a08 <line:463:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1f845eb79c0 <col:9> 'int' lvalue Var 0x1f845eb51f8 'zpadlen' 'int'
|   |   `-IntegerLiteral 0x1f845eb79e0 <col:19> 'int' 0
|   |-IfStmt 0x1f845eb7b28 <line:464:5, line:465:19>
|   | |-BinaryOperator 0x1f845eb7aa0 <line:464:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845eb7a88 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb7a40 <col:9> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1f845eb7a60 <col:19> 'int' 0
|   | `-BinaryOperator 0x1f845eb7b08 <line:465:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1f845eb7ac0 <col:9> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   |   `-IntegerLiteral 0x1f845eb7ae0 <col:19> 'int' 0
|   |-IfStmt 0x1f845eb7e60 <line:466:5, line:469:5>
|   | |-BinaryOperator 0x1f845eb7c08 <line:466:9, line:61:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f845eb7bf0 <line:466:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb7b40 <col:9> 'int' lvalue ParmVar 0x1f845eb6af8 'flags' 'int'
|   | | `-ParenExpr 0x1f845eb7bd0 <line:61:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f845eb7bb0 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f845eb7b60 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f845eb7b88 <col:31> 'int' 4
|   | `-CompoundStmt 0x1f845eb7e40 <line:466:28, line:469:5>
|   |   |-BinaryOperator 0x1f845eb7db8 <line:467:9, line:80:40> 'int' '='
|   |   | |-DeclRefExpr 0x1f845eb7c28 <line:467:9> 'int' lvalue Var 0x1f845eb51f8 'zpadlen' 'int'
|   |   | `-ParenExpr 0x1f845eb7d98 <line:80:23, col:40> 'int'
|   |   |   `-ConditionalOperator 0x1f845eb7d68 <col:24, line:467:37> 'int'
|   |   |     |-ParenExpr 0x1f845eb7cd8 <line:80:24, col:31> 'int'
|   |   |     | `-BinaryOperator 0x1f845eb7cb8 <line:467:28, col:37> 'int' '>='
|   |   |     |   |-ImplicitCastExpr 0x1f845eb7c88 <col:28> 'int' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1f845eb7c48 <col:28> 'int' lvalue Var 0x1f845eb51f8 'zpadlen' 'int'
|   |   |     |   `-ImplicitCastExpr 0x1f845eb7ca0 <col:37> 'int' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f845eb7c68 <col:37> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   |   |     |-ImplicitCastExpr 0x1f845eb7d38 <col:28> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1f845eb7cf8 <col:28> 'int' lvalue Var 0x1f845eb51f8 'zpadlen' 'int'
|   |   |     `-ImplicitCastExpr 0x1f845eb7d50 <col:37> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1f845eb7d18 <col:37> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   |   `-BinaryOperator 0x1f845eb7e20 <line:468:9, col:19> 'int' '='
|   |     |-DeclRefExpr 0x1f845eb7dd8 <col:9> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   |     `-IntegerLiteral 0x1f845eb7df8 <col:19> 'int' 0
|   |-IfStmt 0x1f845eb7ff0 <line:470:5, line:471:20>
|   | |-BinaryOperator 0x1f845eb7f40 <line:470:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f845eb7f28 <line:470:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb7e78 <col:9> 'int' lvalue ParmVar 0x1f845eb6af8 'flags' 'int'
|   | | `-ParenExpr 0x1f845eb7f08 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f845eb7ee8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f845eb7e98 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f845eb7ec0 <col:31> 'int' 0
|   | `-BinaryOperator 0x1f845eb7fd0 <line:471:9, col:20> 'int' '='
|   |   |-DeclRefExpr 0x1f845eb7f60 <col:9> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   |   `-UnaryOperator 0x1f845eb7fb8 <col:19, col:20> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1f845eb7fa0 <col:20> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f845eb7f80 <col:20> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   |-WhileStmt 0x1f845eb02b8 <line:474:5, line:478:5>
|   | |-BinaryOperator 0x1f845eb8068 <line:474:12, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f845eb8050 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb8008 <col:12> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1f845eb8028 <col:22> 'int' 0
|   | `-CompoundStmt 0x1f845eb0298 <col:25, line:478:5>
|   |   |-IfStmt 0x1f845eb0248 <line:475:9, line:476:20>
|   |   | |-UnaryOperator 0x1f845eb01f8 <line:475:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845eb0150 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845eb0138 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845eb8088 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845eb0198 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb80a8 <col:25> 'char **' lvalue ParmVar 0x1f845eb6708 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb01b0 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb80e0 <col:34> 'char **' lvalue ParmVar 0x1f845eb6788 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb01c8 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb8118 <col:42> 'size_t *' lvalue ParmVar 0x1f845eb6800 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845eb01e0 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb00e8 <col:51> 'size_t *' lvalue ParmVar 0x1f845eb6878 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f845eb0120 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1f845eb0238 <line:476:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845eb0210 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f845eb0280 <line:477:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1f845eb0260 <col:11> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   |-IfStmt 0x1f845eb0508 <line:481:5, line:483:20>
|   | |-ImplicitCastExpr 0x1f845eb02f0 <line:481:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f845eb02d0 <col:9> 'int' lvalue Var 0x1f845eb6ce8 'signvalue' 'int'
|   | `-IfStmt 0x1f845eb04f0 <line:482:9, line:483:20>
|   |   |-UnaryOperator 0x1f845eb04a0 <line:482:12, col:68> 'int' prefix '!' cannot overflow
|   |   | `-CallExpr 0x1f845eb03e0 <col:13, col:68> 'int'
|   |   |   |-ImplicitCastExpr 0x1f845eb03c8 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1f845eb0308 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |   |-ImplicitCastExpr 0x1f845eb0428 <col:25> 'char **' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f845eb0328 <col:25> 'char **' lvalue ParmVar 0x1f845eb6708 'sbuffer' 'char **'
|   |   |   |-ImplicitCastExpr 0x1f845eb0440 <col:34> 'char **' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f845eb0348 <col:34> 'char **' lvalue ParmVar 0x1f845eb6788 'buffer' 'char **'
|   |   |   |-ImplicitCastExpr 0x1f845eb0458 <col:42> 'size_t *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f845eb0368 <col:42> 'size_t *' lvalue ParmVar 0x1f845eb6800 'currlen' 'size_t *'
|   |   |   |-ImplicitCastExpr 0x1f845eb0470 <col:51> 'size_t *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f845eb0388 <col:51> 'size_t *' lvalue ParmVar 0x1f845eb6878 'maxlen' 'size_t *'
|   |   |   `-ImplicitCastExpr 0x1f845eb0488 <col:59> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f845eb03a8 <col:59> 'int' lvalue Var 0x1f845eb6ce8 'signvalue' 'int'
|   |   `-ReturnStmt 0x1f845eb04e0 <line:483:13, col:20>
|   |     `-IntegerLiteral 0x1f845eb04b8 <col:20> 'int' 0
|   |-WhileStmt 0x1f845eb0828 <line:486:5, line:490:5>
|   | |-ImplicitCastExpr 0x1f845eb0570 <line:486:12, col:13> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x1f845eb0558 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x1f845eb0540 <col:13> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1f845eb0520 <col:13> 'const char *' lvalue Var 0x1f845eb6da8 'prefix' 'const char *'
|   | `-CompoundStmt 0x1f845eb0808 <col:21, line:490:5>
|   |   |-IfStmt 0x1f845eb07b8 <line:487:9, line:488:20>
|   |   | |-UnaryOperator 0x1f845eb0768 <line:487:12, col:66> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845eb0690 <col:13, col:66> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845eb0678 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845eb0588 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845eb06d8 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb05a8 <col:25> 'char **' lvalue ParmVar 0x1f845eb6708 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb06f0 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb05c8 <col:34> 'char **' lvalue ParmVar 0x1f845eb6788 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb0708 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb05e8 <col:42> 'size_t *' lvalue ParmVar 0x1f845eb6800 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845eb0720 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb0608 <col:51> 'size_t *' lvalue ParmVar 0x1f845eb6878 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1f845eb0750 <col:59, col:60> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1f845eb0738 <col:59, col:60> 'char' <LValueToRValue>
|   |   | |       `-UnaryOperator 0x1f845eb0660 <col:59, col:60> 'const char' lvalue prefix '*' cannot overflow
|   |   | |         `-ImplicitCastExpr 0x1f845eb0648 <col:60> 'const char *' <LValueToRValue>
|   |   | |           `-DeclRefExpr 0x1f845eb0628 <col:60> 'const char *' lvalue Var 0x1f845eb6da8 'prefix' 'const char *'
|   |   | `-ReturnStmt 0x1f845eb07a8 <line:488:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845eb0780 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f845eb07f0 <line:489:9, col:15> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x1f845eb07d0 <col:9> 'const char *' lvalue Var 0x1f845eb6da8 'prefix' 'const char *'
|   |-IfStmt 0x1f845eb0ba8 <line:493:5, line:499:5>
|   | |-BinaryOperator 0x1f845eb08a0 <line:493:9, col:19> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f845eb0888 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb0840 <col:9> 'int' lvalue Var 0x1f845eb51f8 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1f845eb0860 <col:19> 'int' 0
|   | `-CompoundStmt 0x1f845eb0b90 <col:22, line:499:5>
|   |   `-WhileStmt 0x1f845eb0b78 <line:494:9, line:498:9>
|   |     |-BinaryOperator 0x1f845eb0920 <line:494:16, col:26> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1f845eb0908 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f845eb08c0 <col:16> 'int' lvalue Var 0x1f845eb51f8 'zpadlen' 'int'
|   |     | `-IntegerLiteral 0x1f845eb08e0 <col:26> 'int' 0
|   |     `-CompoundStmt 0x1f845eb0b58 <col:29, line:498:9>
|   |       |-IfStmt 0x1f845eb0b08 <line:495:13, line:496:24>
|   |       | |-UnaryOperator 0x1f845eb0ab8 <line:495:16, col:66> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x1f845eb0a10 <col:17, col:66> 'int'
|   |       | |   |-ImplicitCastExpr 0x1f845eb09f8 <col:17> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1f845eb0940 <col:17> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       | |   |-ImplicitCastExpr 0x1f845eb0a58 <col:29> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f845eb0960 <col:29> 'char **' lvalue ParmVar 0x1f845eb6708 'sbuffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1f845eb0a70 <col:38> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f845eb0980 <col:38> 'char **' lvalue ParmVar 0x1f845eb6788 'buffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1f845eb0a88 <col:46> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f845eb09a0 <col:46> 'size_t *' lvalue ParmVar 0x1f845eb6800 'currlen' 'size_t *'
|   |       | |   |-ImplicitCastExpr 0x1f845eb0aa0 <col:55> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f845eb09c0 <col:55> 'size_t *' lvalue ParmVar 0x1f845eb6878 'maxlen' 'size_t *'
|   |       | |   `-CharacterLiteral 0x1f845eb09e0 <col:63> 'int' 48
|   |       | `-ReturnStmt 0x1f845eb0af8 <line:496:17, col:24>
|   |       |   `-IntegerLiteral 0x1f845eb0ad0 <col:24> 'int' 0
|   |       `-UnaryOperator 0x1f845eb0b40 <line:497:13, col:15> 'int' prefix '--'
|   |         `-DeclRefExpr 0x1f845eb0b20 <col:15> 'int' lvalue Var 0x1f845eb51f8 'zpadlen' 'int'
|   |-WhileStmt 0x1f845eb0d98 <line:501:5, line:504:5>
|   | |-BinaryOperator 0x1f845eb0c20 <line:501:12, col:20> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f845eb0c08 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb0bc0 <col:12> 'int' lvalue Var 0x1f845eb7088 'place' 'int'
|   | | `-IntegerLiteral 0x1f845eb0be0 <col:20> 'int' 0
|   | `-CompoundStmt 0x1f845eb0d80 <col:23, line:504:5>
|   |   `-IfStmt 0x1f845eb0d68 <line:502:9, line:503:20>
|   |     |-OpaqueValueExpr 0x1f845eb0d50 <<invalid sloc>> '_Bool'
|   |     `-ReturnStmt 0x1f845eb0d40 <col:13, col:20>
|   |       `-IntegerLiteral 0x1f845eb0d18 <col:20> 'int' 0
|   |-WhileStmt 0x1f845eb1068 <line:507:5, line:511:5>
|   | |-BinaryOperator 0x1f845eb0e10 <line:507:12, col:22> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845eb0df8 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb0db0 <col:12> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1f845eb0dd0 <col:22> 'int' 0
|   | `-CompoundStmt 0x1f845eb1048 <col:25, line:511:5>
|   |   |-IfStmt 0x1f845eb0ff8 <line:508:9, line:509:20>
|   |   | |-UnaryOperator 0x1f845eb0fa8 <line:508:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845eb0f00 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845eb0ee8 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845eb0e30 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845eb0f48 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb0e50 <col:26> 'char **' lvalue ParmVar 0x1f845eb6708 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb0f60 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb0e70 <col:35> 'char **' lvalue ParmVar 0x1f845eb6788 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845eb0f78 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb0e90 <col:43> 'size_t *' lvalue ParmVar 0x1f845eb6800 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845eb0f90 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845eb0eb0 <col:52> 'size_t *' lvalue ParmVar 0x1f845eb6878 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f845eb0ed0 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1f845eb0fe8 <line:509:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845eb0fc0 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f845eb1030 <line:510:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1f845eb1010 <col:11> 'int' lvalue Var 0x1f845eb5138 'spadlen' 'int'
|   `-ReturnStmt 0x1f845eb10a8 <line:512:5, col:12>
|     `-IntegerLiteral 0x1f845eb1080 <col:12> 'int' 1
|-FunctionDecl 0x1f845eb22c0 <line:515:1, line:521:1> line:515:16 used abs_val 'double (double)' static
| |-ParmVarDecl 0x1f845eb21e0 <line:27:18, line:515:32> col:32 used value 'double'
| `-CompoundStmt 0x1f845eb25f0 <line:516:1, line:521:1>
|   |-DeclStmt 0x1f845eb2438 <line:27:18, line:517:27>
|   | `-VarDecl 0x1f845eb2398 <line:27:18, line:517:22> col:13 used result 'double' cinit
|   |   `-ImplicitCastExpr 0x1f845eb2420 <col:22> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f845eb2400 <col:22> 'double' lvalue ParmVar 0x1f845eb21e0 'value' 'double'
|   |-IfStmt 0x1f845eb2590 <line:518:5, line:519:19>
|   | |-BinaryOperator 0x1f845eb24c8 <line:518:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845eb2498 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb2450 <col:9> 'double' lvalue ParmVar 0x1f845eb21e0 'value' 'double'
|   | | `-ImplicitCastExpr 0x1f845eb24b0 <col:17> 'double' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x1f845eb2470 <col:17> 'int' 0
|   | `-BinaryOperator 0x1f845eb2570 <line:519:9, col:19> 'double' '='
|   |   |-DeclRefExpr 0x1f845eb24e8 <col:9> 'double' lvalue Var 0x1f845eb2398 'result' 'double'
|   |   `-UnaryOperator 0x1f845eb2558 <col:18, col:19> 'double' prefix '-'
|   |     `-ImplicitCastExpr 0x1f845eb2540 <col:19> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f845eb2520 <col:19> 'double' lvalue ParmVar 0x1f845eb21e0 'value' 'double'
|   `-ReturnStmt 0x1f845eb25e0 <line:520:5, col:12>
|     `-ImplicitCastExpr 0x1f845eb25c8 <col:12> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x1f845eb25a8 <col:12> 'double' lvalue Var 0x1f845eb2398 'result' 'double'
|-FunctionDecl 0x1f845eb2710 <line:523:1, line:531:1> line:523:16 used pow_10 'double (int)' static
| |-ParmVarDecl 0x1f845eb2630 <col:23, col:27> col:27 used in_exp 'int'
| `-CompoundStmt 0x1f845eb2a40 <line:524:1, line:531:1>
|   |-DeclStmt 0x1f845eb2890 <line:27:18, line:525:23>
|   | `-VarDecl 0x1f845eb27e8 <line:27:18, line:525:22> col:13 used result 'double' cinit
|   |   `-ImplicitCastExpr 0x1f845eb2878 <col:22> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x1f845eb2850 <col:22> 'int' 1
|   |-WhileStmt 0x1f845eb29e0 <line:526:5, line:529:5>
|   | |-ImplicitCastExpr 0x1f845eb28c8 <line:526:12> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f845eb28a8 <col:12> 'int' lvalue ParmVar 0x1f845eb2630 'in_exp' 'int'
|   | `-CompoundStmt 0x1f845eb29c0 <col:20, line:529:5>
|   |   |-CompoundAssignOperator 0x1f845eb2958 <line:527:9, col:19> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-DeclRefExpr 0x1f845eb28e0 <col:9> 'double' lvalue Var 0x1f845eb27e8 'result' 'double'
|   |   | `-ImplicitCastExpr 0x1f845eb2940 <col:19> 'double' <IntegralToFloating>
|   |   |   `-IntegerLiteral 0x1f845eb2918 <col:19> 'int' 10
|   |   `-UnaryOperator 0x1f845eb29a8 <line:528:9, col:15> 'int' postfix '--'
|   |     `-DeclRefExpr 0x1f845eb2988 <col:9> 'int' lvalue ParmVar 0x1f845eb2630 'in_exp' 'int'
|   `-ReturnStmt 0x1f845eb2a30 <line:530:5, col:12>
|     `-ImplicitCastExpr 0x1f845eb2a18 <col:12> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x1f845eb29f8 <col:12> 'double' lvalue Var 0x1f845eb27e8 'result' 'double'
|-FunctionDecl 0x1f845eb2b60 <line:533:1, line:541:1> line:533:13 used roundv 'long (double)' static
| |-ParmVarDecl 0x1f845eb2a80 <line:27:18, line:533:28> col:28 used value 'double'
| `-CompoundStmt 0x1f845eb2f88 <line:534:1, line:541:1>
|   |-DeclStmt 0x1f845eb2ca0 <line:535:5, col:17>
|   | `-VarDecl 0x1f845eb2c38 <col:5, col:10> col:10 used intpart 'long'
|   |-BinaryOperator 0x1f845eb2d68 <line:536:5, col:21> 'long' '='
|   | |-DeclRefExpr 0x1f845eb2cb8 <col:5> 'long' lvalue Var 0x1f845eb2c38 'intpart' 'long'
|   | `-CStyleCastExpr 0x1f845eb2d40 <col:15, col:21> 'long' <FloatingToIntegral>
|   |   `-ImplicitCastExpr 0x1f845eb2d28 <col:21> 'double' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x1f845eb2cf0 <col:21> 'double' lvalue ParmVar 0x1f845eb2a80 'value' 'double'
|   |-BinaryOperator 0x1f845eb2e50 <line:537:5, col:21> 'double' '='
|   | |-DeclRefExpr 0x1f845eb2d88 <col:5> 'double' lvalue ParmVar 0x1f845eb2a80 'value' 'double'
|   | `-BinaryOperator 0x1f845eb2e30 <col:13, col:21> 'double' '-'
|   |   |-ImplicitCastExpr 0x1f845eb2de8 <col:13> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845eb2da8 <col:13> 'double' lvalue ParmVar 0x1f845eb2a80 'value' 'double'
|   |   `-ImplicitCastExpr 0x1f845eb2e18 <col:21> 'double' <IntegralToFloating>
|   |     `-ImplicitCastExpr 0x1f845eb2e00 <col:21> 'long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f845eb2dc8 <col:21> 'long' lvalue Var 0x1f845eb2c38 'intpart' 'long'
|   |-IfStmt 0x1f845eb2f28 <line:538:5, line:539:16>
|   | |-BinaryOperator 0x1f845eb2ed0 <line:538:9, col:18> 'int' '>='
|   | | |-ImplicitCastExpr 0x1f845eb2eb8 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845eb2e70 <col:9> 'double' lvalue ParmVar 0x1f845eb2a80 'value' 'double'
|   | | `-FloatingLiteral 0x1f845eb2e90 <col:18> 'double' 5.000000e-01
|   | `-UnaryOperator 0x1f845eb2f10 <line:539:9, col:16> 'long' postfix '++'
|   |   `-DeclRefExpr 0x1f845eb2ef0 <col:9> 'long' lvalue Var 0x1f845eb2c38 'intpart' 'long'
|   `-ReturnStmt 0x1f845eb2f78 <line:540:5, col:12>
|     `-ImplicitCastExpr 0x1f845eb2f60 <col:12> 'long' <LValueToRValue>
|       `-DeclRefExpr 0x1f845eb2f40 <col:12> 'long' lvalue Var 0x1f845eb2c38 'intpart' 'long'
|-FunctionDecl 0x1f845dfdb28 prev 0x1f845ddbe40 <line:543:1, line:800:1> line:544:1 used fmtfp 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' static
| |-ParmVarDecl 0x1f845eb2fd8 <col:7, col:14> col:14 used sbuffer 'char **'
| |-ParmVarDecl 0x1f845eb3058 <line:545:7, col:14> col:14 used buffer 'char **'
| |-ParmVarDecl 0x1f845dfd680 <line:546:7, col:15> col:15 used currlen 'size_t *'
| |-ParmVarDecl 0x1f845dfd6f8 <line:547:7, col:15> col:15 used maxlen 'size_t *'
| |-ParmVarDecl 0x1f845dfd778 <line:27:18, line:547:31> col:31 used fvalue 'double'
| |-ParmVarDecl 0x1f845dfd7f8 <col:39, col:43> col:43 used min 'int'
| |-ParmVarDecl 0x1f845dfd878 <col:48, col:52> col:52 used max 'int'
| |-ParmVarDecl 0x1f845dfd8f8 <col:57, col:61> col:61 used flags 'int'
| |-ParmVarDecl 0x1f845dfd978 <col:68, col:72> col:72 used style 'int'
| `-CompoundStmt 0x1f845e05928 <line:548:1, line:800:1>
|   |-DeclStmt 0x1f845dfdcb8 <line:549:5, col:22>
|   | `-VarDecl 0x1f845dfdc28 <col:5, col:21> col:9 used signvalue 'int' cinit
|   |   `-IntegerLiteral 0x1f845dfdc90 <col:21> 'int' 0
|   |-DeclStmt 0x1f845dfdd50 <line:27:18, line:550:20>
|   | `-VarDecl 0x1f845dfdce8 <line:27:18, line:550:13> col:13 used ufvalue 'double'
|   |-DeclStmt 0x1f845dfdde8 <line:27:18, line:551:21>
|   | `-VarDecl 0x1f845dfdd80 <line:27:18, line:551:13> col:13 used tmpvalue 'double'
|   |-DeclStmt 0x1f845dfdf00 <line:552:5, col:22>
|   | `-VarDecl 0x1f845dfde98 <col:5, col:21> col:10 used iconvert 'char [20]'
|   |-DeclStmt 0x1f845dfdfe0 <line:553:5, col:22>
|   | `-VarDecl 0x1f845dfdf78 <col:5, col:21> col:10 used fconvert 'char [20]'
|   |-DeclStmt 0x1f845dfe0c0 <line:554:5, col:22>
|   | `-VarDecl 0x1f845dfe058 <col:5, col:21> col:10 used econvert 'char [20]'
|   |-DeclStmt 0x1f845dfe180 <line:555:5, col:19>
|   | `-VarDecl 0x1f845dfe0f0 <col:5, col:18> col:9 used iplace 'int' cinit
|   |   `-IntegerLiteral 0x1f845dfe158 <col:18> 'int' 0
|   |-DeclStmt 0x1f845dfe240 <line:556:5, col:19>
|   | `-VarDecl 0x1f845dfe1b0 <col:5, col:18> col:9 used fplace 'int' cinit
|   |   `-IntegerLiteral 0x1f845dfe218 <col:18> 'int' 0
|   |-DeclStmt 0x1f845dfe300 <line:557:5, col:19>
|   | `-VarDecl 0x1f845dfe270 <col:5, col:18> col:9 used eplace 'int' cinit
|   |   `-IntegerLiteral 0x1f845dfe2d8 <col:18> 'int' 0
|   |-DeclStmt 0x1f845dfe3c0 <line:558:5, col:19>
|   | `-VarDecl 0x1f845dfe330 <col:5, col:18> col:9 used padlen 'int' cinit
|   |   `-IntegerLiteral 0x1f845dfe398 <col:18> 'int' 0
|   |-DeclStmt 0x1f845dfe480 <line:559:5, col:20>
|   | `-VarDecl 0x1f845dfe3f0 <col:5, col:19> col:9 used zpadlen 'int' cinit
|   |   `-IntegerLiteral 0x1f845dfe458 <col:19> 'int' 0
|   |-DeclStmt 0x1f845dfe558 <line:560:5, col:17>
|   | `-VarDecl 0x1f845dfe4b0 <col:5, col:16> col:10 used exp 'long' cinit
|   |   `-ImplicitCastExpr 0x1f845dfe540 <col:16> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x1f845dfe518 <col:16> 'int' 0
|   |-DeclStmt 0x1f845dfe5f0 <line:561:5, col:26>
|   | `-VarDecl 0x1f845dfe588 <col:5, col:19> col:19 used intpart 'unsigned long'
|   |-DeclStmt 0x1f845dfe688 <line:562:5, col:27>
|   | `-VarDecl 0x1f845dfe620 <col:5, col:19> col:19 used fracpart 'unsigned long'
|   |-DeclStmt 0x1f845dfe720 <line:563:5, col:24>
|   | `-VarDecl 0x1f845dfe6b8 <col:5, col:19> col:19 used max10 'unsigned long'
|   |-DeclStmt 0x1f845dfe7b8 <line:564:5, col:18>
|   | `-VarDecl 0x1f845dfe750 <col:5, col:9> col:9 used realstyle 'int'
|   |-IfStmt 0x1f845dfe8b8 <line:566:5, line:567:15>
|   | |-BinaryOperator 0x1f845dfe830 <line:566:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845dfe818 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845dfe7d0 <col:9> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   | | `-IntegerLiteral 0x1f845dfe7f0 <col:15> 'int' 0
|   | `-BinaryOperator 0x1f845dfe898 <line:567:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1f845dfe850 <col:9> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   `-IntegerLiteral 0x1f845dfe870 <col:15> 'int' 6
|   |-IfStmt 0x1f845dfec98 <line:569:5, line:574:21> has_else
|   | |-BinaryOperator 0x1f845dfe948 <line:569:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845dfe918 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845dfe8d0 <col:9> 'double' lvalue ParmVar 0x1f845dfd778 'fvalue' 'double'
|   | | `-ImplicitCastExpr 0x1f845dfe930 <col:18> 'double' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x1f845dfe8f0 <col:18> 'int' 0
|   | |-BinaryOperator 0x1f845dfe9b8 <line:570:9, col:21> 'int' '='
|   | | |-DeclRefExpr 0x1f845dfe968 <col:9> 'int' lvalue Var 0x1f845dfdc28 'signvalue' 'int'
|   | | `-CharacterLiteral 0x1f845dfe9a0 <col:21> 'int' 45
|   | `-IfStmt 0x1f845dfec70 <line:571:10, line:574:21> has_else
|   |   |-BinaryOperator 0x1f845dfeaa0 <line:571:14, line:55:32> 'int' '&'
|   |   | |-ImplicitCastExpr 0x1f845dfea88 <line:571:14> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1f845dfe9d8 <col:14> 'int' lvalue ParmVar 0x1f845dfd8f8 'flags' 'int'
|   |   | `-ParenExpr 0x1f845dfea68 <line:55:25, col:32> 'int'
|   |   |   `-BinaryOperator 0x1f845dfea48 <col:26, col:31> 'int' '<<'
|   |   |     |-IntegerLiteral 0x1f845dfe9f8 <col:26> 'int' 1
|   |   |     `-IntegerLiteral 0x1f845dfea20 <col:31> 'int' 1
|   |   |-BinaryOperator 0x1f845dfeaf8 <line:572:9, col:21> 'int' '='
|   |   | |-DeclRefExpr 0x1f845dfeac0 <col:9> 'int' lvalue Var 0x1f845dfdc28 'signvalue' 'int'
|   |   | `-CharacterLiteral 0x1f845dfeae0 <col:21> 'int' 43
|   |   `-IfStmt 0x1f845dfec58 <line:573:10, line:574:21>
|   |     |-BinaryOperator 0x1f845dfebe0 <line:573:14, line:57:32> 'int' '&'
|   |     | |-ImplicitCastExpr 0x1f845dfebc8 <line:573:14> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f845dfeb18 <col:14> 'int' lvalue ParmVar 0x1f845dfd8f8 'flags' 'int'
|   |     | `-ParenExpr 0x1f845dfeba8 <line:57:25, col:32> 'int'
|   |     |   `-BinaryOperator 0x1f845dfeb88 <col:26, col:31> 'int' '<<'
|   |     |     |-IntegerLiteral 0x1f845dfeb38 <col:26> 'int' 1
|   |     |     `-IntegerLiteral 0x1f845dfeb60 <col:31> 'int' 2
|   |     `-BinaryOperator 0x1f845dfec38 <line:574:9, col:21> 'int' '='
|   |       |-DeclRefExpr 0x1f845dfec00 <col:9> 'int' lvalue Var 0x1f845dfdc28 'signvalue' 'int'
|   |       `-CharacterLiteral 0x1f845dfec20 <col:21> 'int' 32
|   |-IfStmt 0x1f845dff4c8 <line:581:5, line:594:5> has_else
|   | |-BinaryOperator 0x1f845dfed20 <line:581:9, line:76:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f845dfed08 <line:581:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845dfecc0 <col:9> 'int' lvalue ParmVar 0x1f845dfd978 'style' 'int'
|   | | `-IntegerLiteral 0x1f845dfece0 <line:76:25> 'int' 2
|   | |-CompoundStmt 0x1f845dff420 <line:581:28, line:592:5>
|   | | `-IfStmt 0x1f845dff3f8 <line:582:9, line:591:9> has_else
|   | |   |-BinaryOperator 0x1f845dfeda0 <line:582:13, col:23> 'int' '=='
|   | |   | |-ImplicitCastExpr 0x1f845dfed88 <col:13> 'double' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x1f845dfed40 <col:13> 'double' lvalue ParmVar 0x1f845dfd778 'fvalue' 'double'
|   | |   | `-FloatingLiteral 0x1f845dfed60 <col:23> 'double' 0.000000e+00
|   | |   |-CompoundStmt 0x1f845dfee40 <col:28, line:584:9>
|   | |   | `-BinaryOperator 0x1f845dfee20 <line:583:13, line:74:25> 'int' '='
|   | |   |   |-DeclRefExpr 0x1f845dfedc0 <line:583:13> 'int' lvalue Var 0x1f845dfe750 'realstyle' 'int'
|   | |   |   `-IntegerLiteral 0x1f845dfedf8 <line:74:25> 'int' 0
|   | |   `-IfStmt 0x1f845dff3d0 <line:584:16, line:591:9> has_else
|   | |     |-BinaryOperator 0x1f845dfeeb8 <line:584:20, col:29> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1f845dfeea0 <col:20> 'double' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1f845dfee58 <col:20> 'double' lvalue ParmVar 0x1f845dfd778 'fvalue' 'double'
|   | |     | `-FloatingLiteral 0x1f845dfee78 <col:29> 'double' 1.000000e-04
|   | |     |-CompoundStmt 0x1f845dfef40 <col:37, line:586:9>
|   | |     | `-BinaryOperator 0x1f845dfef20 <line:585:13, line:75:25> 'int' '='
|   | |     |   |-DeclRefExpr 0x1f845dfeed8 <line:585:13> 'int' lvalue Var 0x1f845dfe750 'realstyle' 'int'
|   | |     |   `-IntegerLiteral 0x1f845dfeef8 <line:75:25> 'int' 1
|   | |     `-IfStmt 0x1f845dff3a8 <line:586:16, line:591:9> has_else
|   | |       |-BinaryOperator 0x1f845dff288 <line:586:20, line:587:57> 'int' '||'
|   | |       | |-ParenExpr 0x1f845dff090 <line:586:20, col:45> 'int'
|   | |       | | `-BinaryOperator 0x1f845dff070 <col:21, col:43> 'int' '&&'
|   | |       | |   |-BinaryOperator 0x1f845dfefb8 <col:21, col:28> 'int' '=='
|   | |       | |   | |-ImplicitCastExpr 0x1f845dfefa0 <col:21> 'int' <LValueToRValue>
|   | |       | |   | | `-DeclRefExpr 0x1f845dfef58 <col:21> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   | |       | |   | `-IntegerLiteral 0x1f845dfef78 <col:28> 'int' 0
|   | |       | |   `-BinaryOperator 0x1f845dff050 <col:33, col:43> 'int' '>='
|   | |       | |     |-ImplicitCastExpr 0x1f845dff020 <col:33> 'double' <LValueToRValue>
|   | |       | |     | `-DeclRefExpr 0x1f845dfefd8 <col:33> 'double' lvalue ParmVar 0x1f845dfd778 'fvalue' 'double'
|   | |       | |     `-ImplicitCastExpr 0x1f845dff038 <col:43> 'double' <IntegralToFloating>
|   | |       | |       `-IntegerLiteral 0x1f845dfeff8 <col:43> 'int' 10
|   | |       | `-ParenExpr 0x1f845dff268 <line:587:24, col:57> 'int'
|   | |       |   `-BinaryOperator 0x1f845dff248 <col:25, col:56> 'int' '&&'
|   | |       |     |-BinaryOperator 0x1f845dff110 <col:25, col:31> 'int' '>'
|   | |       |     | |-ImplicitCastExpr 0x1f845dff0f8 <col:25> 'int' <LValueToRValue>
|   | |       |     | | `-DeclRefExpr 0x1f845dff0b0 <col:25> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   | |       |     | `-IntegerLiteral 0x1f845dff0d0 <col:31> 'int' 0
|   | |       |     `-BinaryOperator 0x1f845dff228 <col:36, col:56> 'int' '>='
|   | |       |       |-ImplicitCastExpr 0x1f845dff210 <col:36> 'double' <LValueToRValue>
|   | |       |       | `-DeclRefExpr 0x1f845dff130 <col:36> 'double' lvalue ParmVar 0x1f845dfd778 'fvalue' 'double'
|   | |       |       `-CallExpr 0x1f845dff1d0 <col:46, col:56> 'double'
|   | |       |         |-ImplicitCastExpr 0x1f845dff1b8 <col:46> 'double (*)(int)' <FunctionToPointerDecay>
|   | |       |         | `-DeclRefExpr 0x1f845dff150 <col:46> 'double (int)' Function 0x1f845eb2710 'pow_10' 'double (int)'
|   | |       |         `-ImplicitCastExpr 0x1f845dff1f8 <col:53> 'int' <LValueToRValue>
|   | |       |           `-DeclRefExpr 0x1f845dff170 <col:53> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   | |       |-CompoundStmt 0x1f845dff310 <col:60, line:589:9>
|   | |       | `-BinaryOperator 0x1f845dff2f0 <line:588:13, line:75:25> 'int' '='
|   | |       |   |-DeclRefExpr 0x1f845dff2a8 <line:588:13> 'int' lvalue Var 0x1f845dfe750 'realstyle' 'int'
|   | |       |   `-IntegerLiteral 0x1f845dff2c8 <line:75:25> 'int' 1
|   | |       `-CompoundStmt 0x1f845dff390 <line:589:16, line:591:9>
|   | |         `-BinaryOperator 0x1f845dff370 <line:590:13, line:74:25> 'int' '='
|   | |           |-DeclRefExpr 0x1f845dff328 <line:590:13> 'int' lvalue Var 0x1f845dfe750 'realstyle' 'int'
|   | |           `-IntegerLiteral 0x1f845dff348 <line:74:25> 'int' 0
|   | `-CompoundStmt 0x1f845dff4b0 <line:592:12, line:594:5>
|   |   `-BinaryOperator 0x1f845dff490 <line:593:9, col:21> 'int' '='
|   |     |-DeclRefExpr 0x1f845dff438 <col:9> 'int' lvalue Var 0x1f845dfe750 'realstyle' 'int'
|   |     `-ImplicitCastExpr 0x1f845dff478 <col:21> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f845dff458 <col:21> 'int' lvalue ParmVar 0x1f845dfd978 'style' 'int'
|   |-IfStmt 0x1f845e00010 <line:596:5, line:636:5>
|   | |-BinaryOperator 0x1f845dff550 <line:596:9, line:74:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x1f845dff538 <line:596:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845dff4f0 <col:9> 'int' lvalue ParmVar 0x1f845dfd978 'style' 'int'
|   | | `-IntegerLiteral 0x1f845dff510 <line:74:25> 'int' 0
|   | `-CompoundStmt 0x1f845dfffe0 <line:596:28, line:636:5>
|   |   |-BinaryOperator 0x1f845dff5e0 <line:597:9, col:20> 'double' '='
|   |   | |-DeclRefExpr 0x1f845dff570 <col:9> 'double' lvalue Var 0x1f845dfdd80 'tmpvalue' 'double'
|   |   | `-ImplicitCastExpr 0x1f845dff5c8 <col:20> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1f845dff5a8 <col:20> 'double' lvalue ParmVar 0x1f845dfd778 'fvalue' 'double'
|   |   |-IfStmt 0x1f845dff9f8 <line:599:9, line:608:9>
|   |   | |-BinaryOperator 0x1f845dff660 <line:599:13, col:23> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x1f845dff648 <col:13> 'double' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f845dff600 <col:13> 'double' lvalue ParmVar 0x1f845dfd778 'fvalue' 'double'
|   |   | | `-FloatingLiteral 0x1f845dff620 <col:23> 'double' 0.000000e+00
|   |   | `-CompoundStmt 0x1f845dff9d8 <col:28, line:608:9>
|   |   |   |-WhileStmt 0x1f845dff828 <line:600:13, line:603:13>
|   |   |   | |-BinaryOperator 0x1f845dff708 <line:600:20, col:31> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x1f845dff6d8 <col:20> 'double' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1f845dff690 <col:20> 'double' lvalue Var 0x1f845dfdd80 'tmpvalue' 'double'
|   |   |   | | `-ImplicitCastExpr 0x1f845dff6f0 <col:31> 'double' <IntegralToFloating>
|   |   |   | |   `-IntegerLiteral 0x1f845dff6b0 <col:31> 'int' 1
|   |   |   | `-CompoundStmt 0x1f845dff808 <col:34, line:603:13>
|   |   |   |   |-CompoundAssignOperator 0x1f845dff788 <line:601:17, col:29> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   |   |   | |-DeclRefExpr 0x1f845dff728 <col:17> 'double' lvalue Var 0x1f845dfdd80 'tmpvalue' 'double'
|   |   |   |   | `-ImplicitCastExpr 0x1f845dff770 <col:29> 'double' <IntegralToFloating>
|   |   |   |   |   `-IntegerLiteral 0x1f845dff748 <col:29> 'int' 10
|   |   |   |   `-UnaryOperator 0x1f845dff7f0 <line:602:17, col:20> 'long' postfix '--'
|   |   |   |     `-DeclRefExpr 0x1f845dff7b8 <col:17> 'long' lvalue Var 0x1f845dfe4b0 'exp' 'long'
|   |   |   `-WhileStmt 0x1f845dff9c0 <line:604:13, line:607:13>
|   |   |     |-BinaryOperator 0x1f845dff8b8 <line:604:20, col:31> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x1f845dff888 <col:20> 'double' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1f845dff840 <col:20> 'double' lvalue Var 0x1f845dfdd80 'tmpvalue' 'double'
|   |   |     | `-ImplicitCastExpr 0x1f845dff8a0 <col:31> 'double' <IntegralToFloating>
|   |   |     |   `-IntegerLiteral 0x1f845dff860 <col:31> 'int' 10
|   |   |     `-CompoundStmt 0x1f845dff9a0 <col:35, line:607:13>
|   |   |       |-CompoundAssignOperator 0x1f845dff938 <line:605:17, col:29> 'double' '/=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   |       | |-DeclRefExpr 0x1f845dff8d8 <col:17> 'double' lvalue Var 0x1f845dfdd80 'tmpvalue' 'double'
|   |   |       | `-ImplicitCastExpr 0x1f845dff920 <col:29> 'double' <IntegralToFloating>
|   |   |       |   `-IntegerLiteral 0x1f845dff8f8 <col:29> 'int' 10
|   |   |       `-UnaryOperator 0x1f845dff988 <line:606:17, col:20> 'long' postfix '++'
|   |   |         `-DeclRefExpr 0x1f845dff968 <col:17> 'long' lvalue Var 0x1f845dfe4b0 'exp' 'long'
|   |   |-IfStmt 0x1f845dffeb8 <line:609:9, line:633:9>
|   |   | |-BinaryOperator 0x1f845dffa70 <line:609:13, line:76:25> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1f845dffa58 <line:609:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f845dffa10 <col:13> 'int' lvalue ParmVar 0x1f845dfd978 'style' 'int'
|   |   | | `-IntegerLiteral 0x1f845dffa30 <line:76:25> 'int' 2
|   |   | `-CompoundStmt 0x1f845dffe98 <line:609:32, line:633:9>
|   |   |   |-IfStmt 0x1f845dffb78 <line:614:13, line:615:23>
|   |   |   | |-BinaryOperator 0x1f845dffaf0 <line:614:17, col:24> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x1f845dffad8 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1f845dffa90 <col:17> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   |   | | `-IntegerLiteral 0x1f845dffab0 <col:24> 'int' 0
|   |   |   | `-BinaryOperator 0x1f845dffb58 <line:615:17, col:23> 'int' '='
|   |   |   |   |-DeclRefExpr 0x1f845dffb10 <col:17> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   |   |   `-IntegerLiteral 0x1f845dffb30 <col:23> 'int' 1
|   |   |   `-IfStmt 0x1f845dffe70 <line:617:13, line:632:13> has_else
|   |   |     |-BinaryOperator 0x1f845dffbf0 <line:617:17, line:74:25> 'int' '=='
|   |   |     | |-ImplicitCastExpr 0x1f845dffbd8 <line:617:17> 'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1f845dffb90 <col:17> 'int' lvalue Var 0x1f845dfe750 'realstyle' 'int'
|   |   |     | `-IntegerLiteral 0x1f845dffbb0 <line:74:25> 'int' 0
|   |   |     |-CompoundStmt 0x1f845dffe00 <line:617:40, line:625:13>
|   |   |     | |-CompoundAssignOperator 0x1f845dffce8 <line:618:17, col:32> 'int' '-=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   |     | | |-DeclRefExpr 0x1f845dffc10 <col:17> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   |     | | `-ParenExpr 0x1f845dffcc8 <col:24, col:32> 'long'
|   |   |     | |   `-BinaryOperator 0x1f845dffca8 <col:25, col:31> 'long' '+'
|   |   |     | |     |-ImplicitCastExpr 0x1f845dffc78 <col:25> 'long' <LValueToRValue>
|   |   |     | |     | `-DeclRefExpr 0x1f845dffc30 <col:25> 'long' lvalue Var 0x1f845dfe4b0 'exp' 'long'
|   |   |     | |     `-ImplicitCastExpr 0x1f845dffc90 <col:31> 'long' <IntegralCast>
|   |   |     | |       `-IntegerLiteral 0x1f845dffc50 <col:31> 'int' 1
|   |   |     | `-IfStmt 0x1f845dffde8 <line:619:17, line:624:17>
|   |   |     |   |-BinaryOperator 0x1f845dffd78 <line:619:21, col:27> 'int' '<'
|   |   |     |   | |-ImplicitCastExpr 0x1f845dffd60 <col:21> 'int' <LValueToRValue>
|   |   |     |   | | `-DeclRefExpr 0x1f845dffd18 <col:21> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   |     |   | `-IntegerLiteral 0x1f845dffd38 <col:27> 'int' 0
|   |   |     |   `-CompoundStmt 0x1f845dffdd0 <col:30, line:624:17>
|   |   |     |     `-ReturnStmt 0x1f845dffdc0 <line:623:21, col:28>
|   |   |     |       `-IntegerLiteral 0x1f845dffd98 <col:28> 'int' 0
|   |   |     `-CompoundStmt 0x1f845dffe58 <line:625:20, line:632:13>
|   |   |       `-UnaryOperator 0x1f845dffe40 <line:631:17, col:20> 'int' postfix '--'
|   |   |         `-DeclRefExpr 0x1f845dffe20 <col:17> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   `-IfStmt 0x1f845dfffc8 <line:634:9, line:635:22>
|   |     |-BinaryOperator 0x1f845dfff30 <line:634:13, line:75:25> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1f845dfff18 <line:634:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f845dffed0 <col:13> 'int' lvalue Var 0x1f845dfe750 'realstyle' 'int'
|   |     | `-IntegerLiteral 0x1f845dffef0 <line:75:25> 'int' 1
|   |     `-BinaryOperator 0x1f845dfffa8 <line:635:13, col:22> 'double' '='
|   |       |-DeclRefExpr 0x1f845dfff50 <col:13> 'double' lvalue ParmVar 0x1f845dfd778 'fvalue' 'double'
|   |       `-ImplicitCastExpr 0x1f845dfff90 <col:22> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f845dfff70 <col:22> 'double' lvalue Var 0x1f845dfdd80 'tmpvalue' 'double'
|   |-BinaryOperator 0x1f845e00120 <line:637:5, col:29> 'double' '='
|   | |-DeclRefExpr 0x1f845e00028 <col:5> 'double' lvalue Var 0x1f845dfdce8 'ufvalue' 'double'
|   | `-CallExpr 0x1f845e000e0 <col:15, col:29> 'double'
|   |   |-ImplicitCastExpr 0x1f845e000c8 <col:15> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f845e00060 <col:15> 'double (double)' Function 0x1f845eb22c0 'abs_val' 'double (double)'
|   |   `-ImplicitCastExpr 0x1f845e00108 <col:23> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f845e00080 <col:23> 'double' lvalue ParmVar 0x1f845dfd778 'fvalue' 'double'
|   |-IfStmt 0x1f845e001c8 <line:638:5, line:641:5>
|   | |-OpaqueValueExpr 0x1f845e001b0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1f845e00198 <line:638:30, line:641:5>
|   |   `-ReturnStmt 0x1f845e00188 <line:640:9, col:16>
|   |     `-IntegerLiteral 0x1f845e00160 <col:16> 'int' 0
|   |-BinaryOperator 0x1f845e00290 <line:642:5, col:30> 'unsigned long' '='
|   | |-DeclRefExpr 0x1f845e001e0 <col:5> 'unsigned long' lvalue Var 0x1f845dfe588 'intpart' 'unsigned long'
|   | `-CStyleCastExpr 0x1f845e00268 <col:15, col:30> 'unsigned long' <FloatingToIntegral>
|   |   `-ImplicitCastExpr 0x1f845e00250 <col:30> 'double' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x1f845e00218 <col:30> 'double' lvalue Var 0x1f845dfdce8 'ufvalue' 'double'
|   |-IfStmt 0x1f845e00398 <line:648:5, line:649:15>
|   | |-BinaryOperator 0x1f845e00310 <line:648:9, col:15> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f845e002f8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e002b0 <col:9> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   | | `-IntegerLiteral 0x1f845e002d0 <col:15> 'int' 9
|   | `-BinaryOperator 0x1f845e00378 <line:649:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1f845e00330 <col:9> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   `-IntegerLiteral 0x1f845e00350 <col:15> 'int' 9
|   |-BinaryOperator 0x1f845e00520 <line:655:5, col:31> 'unsigned long' '='
|   | |-DeclRefExpr 0x1f845e003b0 <col:5> 'unsigned long' lvalue Var 0x1f845dfe6b8 'max10' 'unsigned long'
|   | `-ImplicitCastExpr 0x1f845e00508 <col:13, col:31> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x1f845e004e0 <col:13, col:31> 'long'
|   |     |-ImplicitCastExpr 0x1f845e004c8 <col:13> 'long (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1f845e003e8 <col:13> 'long (double)' Function 0x1f845eb2b60 'roundv' 'long (double)'
|   |     `-CallExpr 0x1f845e00460 <col:20, col:30> 'double'
|   |       |-ImplicitCastExpr 0x1f845e00448 <col:20> 'double (*)(int)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1f845e00408 <col:20> 'double (int)' Function 0x1f845eb2710 'pow_10' 'double (int)'
|   |       `-ImplicitCastExpr 0x1f845e00488 <col:27> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f845e00428 <col:27> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |-BinaryOperator 0x1f845e00770 <line:656:5, col:56> 'unsigned long' '='
|   | |-DeclRefExpr 0x1f845e00540 <col:5> 'unsigned long' lvalue Var 0x1f845dfe620 'fracpart' 'unsigned long'
|   | `-ImplicitCastExpr 0x1f845e00758 <col:16, col:56> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x1f845e00730 <col:16, col:56> 'long'
|   |     |-ImplicitCastExpr 0x1f845e00718 <col:16> 'long (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1f845e00578 <col:16> 'long (double)' Function 0x1f845eb2b60 'roundv' 'long (double)'
|   |     `-BinaryOperator 0x1f845e006f8 <col:23, col:55> 'double' '*'
|   |       |-CallExpr 0x1f845e005f0 <col:23, col:33> 'double'
|   |       | |-ImplicitCastExpr 0x1f845e005d8 <col:23> 'double (*)(int)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x1f845e00598 <col:23> 'double (int)' Function 0x1f845eb2710 'pow_10' 'double (int)'
|   |       | `-ImplicitCastExpr 0x1f845e00618 <col:30> 'int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1f845e005b8 <col:30> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |       `-ParenExpr 0x1f845e006d8 <col:37, col:55> 'double'
|   |         `-BinaryOperator 0x1f845e006b8 <col:38, col:48> 'double' '-'
|   |           |-ImplicitCastExpr 0x1f845e00670 <col:38> 'double' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1f845e00630 <col:38> 'double' lvalue Var 0x1f845dfdce8 'ufvalue' 'double'
|   |           `-ImplicitCastExpr 0x1f845e006a0 <col:48> 'double' <IntegralToFloating>
|   |             `-ImplicitCastExpr 0x1f845e00688 <col:48> 'unsigned long' <LValueToRValue>
|   |               `-DeclRefExpr 0x1f845e00650 <col:48> 'unsigned long' lvalue Var 0x1f845dfe588 'intpart' 'unsigned long'
|   |-IfStmt 0x1f845e00900 <line:658:5, line:661:5>
|   | |-BinaryOperator 0x1f845e00800 <line:658:9, col:21> 'int' '>='
|   | | |-ImplicitCastExpr 0x1f845e007d0 <col:9> 'unsigned long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e00790 <col:9> 'unsigned long' lvalue Var 0x1f845dfe620 'fracpart' 'unsigned long'
|   | | `-ImplicitCastExpr 0x1f845e007e8 <col:21> 'unsigned long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f845e007b0 <col:21> 'unsigned long' lvalue Var 0x1f845dfe6b8 'max10' 'unsigned long'
|   | `-CompoundStmt 0x1f845e008e0 <col:28, line:661:5>
|   |   |-UnaryOperator 0x1f845e00840 <line:659:9, col:16> 'unsigned long' postfix '++'
|   |   | `-DeclRefExpr 0x1f845e00820 <col:9> 'unsigned long' lvalue Var 0x1f845dfe588 'intpart' 'unsigned long'
|   |   `-CompoundAssignOperator 0x1f845e008b0 <line:660:9, col:21> 'unsigned long' '-=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   |     |-DeclRefExpr 0x1f845e00858 <col:9> 'unsigned long' lvalue Var 0x1f845dfe620 'fracpart' 'unsigned long'
|   |     `-ImplicitCastExpr 0x1f845e00898 <col:21> 'unsigned long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f845e00878 <col:21> 'unsigned long' lvalue Var 0x1f845dfe6b8 'max10' 'unsigned long'
|   |-DoStmt 0x1f845e00dd0 <line:664:5, line:667:57>
|   | |-CompoundStmt 0x1f845e00c40 <line:664:8, line:667:5>
|   | | |-BinaryOperator 0x1f845e00b28 <line:665:9, col:55> 'char' '='
|   | | | |-ArraySubscriptExpr 0x1f845e009b8 <col:9, col:26> 'char' lvalue
|   | | | | |-ImplicitCastExpr 0x1f845e009a0 <col:9> 'char *' <ArrayToPointerDecay>
|   | | | | | `-DeclRefExpr 0x1f845e00918 <col:9> 'char [20]' lvalue Var 0x1f845dfde98 'iconvert' 'char [20]'
|   | | | | `-UnaryOperator 0x1f845e00988 <col:18, col:24> 'int' postfix '++'
|   | | | |   `-DeclRefExpr 0x1f845e00950 <col:18> 'int' lvalue Var 0x1f845dfe0f0 'iplace' 'int'
|   | | | `-ImplicitCastExpr 0x1f845e00b10 <col:30, col:55> 'char' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x1f845e00af0 <col:30, col:55> 'char' lvalue
|   | | |     |-ImplicitCastExpr 0x1f845e00ad8 <col:30> 'char *' <ArrayToPointerDecay>
|   | | |     | `-StringLiteral 0x1f845e00a18 <col:30> 'char [11]' lvalue "0123456789"
|   | | |     `-BinaryOperator 0x1f845e00ab8 <col:43, col:53> 'unsigned long' '%'
|   | | |       |-ImplicitCastExpr 0x1f845e00a88 <col:43> 'unsigned long' <LValueToRValue>
|   | | |       | `-DeclRefExpr 0x1f845e00a40 <col:43> 'unsigned long' lvalue Var 0x1f845dfe588 'intpart' 'unsigned long'
|   | | |       `-ImplicitCastExpr 0x1f845e00aa0 <col:53> 'unsigned long' <IntegralCast>
|   | | |         `-IntegerLiteral 0x1f845e00a60 <col:53> 'int' 10
|   | | `-BinaryOperator 0x1f845e00c20 <line:666:9, col:32> 'unsigned long' '='
|   | |   |-DeclRefExpr 0x1f845e00b48 <col:9> 'unsigned long' lvalue Var 0x1f845dfe588 'intpart' 'unsigned long'
|   | |   `-ParenExpr 0x1f845e00c00 <col:19, col:32> 'unsigned long'
|   | |     `-BinaryOperator 0x1f845e00be0 <col:20, col:30> 'unsigned long' '/'
|   | |       |-ImplicitCastExpr 0x1f845e00bb0 <col:20> 'unsigned long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1f845e00b68 <col:20> 'unsigned long' lvalue Var 0x1f845dfe588 'intpart' 'unsigned long'
|   | |       `-ImplicitCastExpr 0x1f845e00bc8 <col:30> 'unsigned long' <IntegralCast>
|   | |         `-IntegerLiteral 0x1f845e00b88 <col:30> 'int' 10
|   | `-BinaryOperator 0x1f845e00db0 <line:667:14, col:56> 'int' '&&'
|   |   |-ImplicitCastExpr 0x1f845e00d98 <col:14> 'unsigned long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845e00c60 <col:14> 'unsigned long' lvalue Var 0x1f845dfe588 'intpart' 'unsigned long'
|   |   `-ParenExpr 0x1f845e00d78 <col:25, col:56> 'int'
|   |     `-BinaryOperator 0x1f845e00d58 <col:26, col:55> 'int' '<'
|   |       |-ImplicitCastExpr 0x1f845e00d40 <col:26> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1f845e00c80 <col:26> 'int' lvalue Var 0x1f845dfe0f0 'iplace' 'int'
|   |       `-CStyleCastExpr 0x1f845e00d18 <col:35, col:55> 'int' <IntegralCast>
|   |         `-UnaryExprOrTypeTraitExpr 0x1f845e00ce0 <col:40, col:55> 'unsigned long long' sizeof
|   |           `-ParenExpr 0x1f845e00cc0 <col:46, col:55> 'char [20]' lvalue
|   |             `-DeclRefExpr 0x1f845e00ca0 <col:47> 'char [20]' lvalue Var 0x1f845dfde98 'iconvert' 'char [20]' non_odr_use_unevaluated
|   |-IfStmt 0x1f845e00ef8 <line:668:5, line:669:15>
|   | |-BinaryOperator 0x1f845e00ea0 <line:668:9, col:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f845e00e88 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1f845e00e70 <col:9> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1f845e00df0 <col:9> 'int' lvalue Var 0x1f845dfe0f0 'iplace' 'int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1f845e00e50 <col:19, col:34> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1f845e00e30 <col:25, col:34> 'char [20]' lvalue
|   | |     `-DeclRefExpr 0x1f845e00e10 <col:26> 'char [20]' lvalue Var 0x1f845dfde98 'iconvert' 'char [20]' non_odr_use_unevaluated
|   | `-UnaryOperator 0x1f845e00ee0 <line:669:9, col:15> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1f845e00ec0 <col:9> 'int' lvalue Var 0x1f845dfe0f0 'iplace' 'int'
|   |-BinaryOperator 0x1f845e00fe0 <line:670:5, col:24> 'char' '='
|   | |-ArraySubscriptExpr 0x1f845e00f80 <col:5, col:20> 'char' lvalue
|   | | |-ImplicitCastExpr 0x1f845e00f50 <col:5> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1f845e00f10 <col:5> 'char [20]' lvalue Var 0x1f845dfde98 'iconvert' 'char [20]'
|   | | `-ImplicitCastExpr 0x1f845e00f68 <col:14> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f845e00f30 <col:14> 'int' lvalue Var 0x1f845dfe0f0 'iplace' 'int'
|   | `-ImplicitCastExpr 0x1f845e00fc8 <col:24> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x1f845e00fa0 <col:24> 'int' 0
|   |-WhileStmt 0x1f845e01818 <line:673:5, line:684:5>
|   | |-BinaryOperator 0x1f845e01088 <line:673:12, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845e01058 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e01000 <col:12> 'int' lvalue Var 0x1f845dfe1b0 'fplace' 'int'
|   | | `-ImplicitCastExpr 0x1f845e01070 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f845e01038 <col:21> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   | `-CompoundStmt 0x1f845e017f0 <col:26, line:684:5>
|   |   |-IfStmt 0x1f845e014f8 <line:674:9, line:681:9>
|   |   | |-BinaryOperator 0x1f845e012e0 <line:674:13, col:68> 'int' '&&'
|   |   | | |-BinaryOperator 0x1f845e011a8 <col:13, col:44> 'int' '&&'
|   |   | | | |-BinaryOperator 0x1f845e01108 <col:13, line:76:25> 'int' '=='
|   |   | | | | |-ImplicitCastExpr 0x1f845e010f0 <line:674:13> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x1f845e010a8 <col:13> 'int' lvalue ParmVar 0x1f845dfd978 'style' 'int'
|   |   | | | | `-IntegerLiteral 0x1f845e010c8 <line:76:25> 'int' 2
|   |   | | | `-BinaryOperator 0x1f845e01188 <line:674:34, col:44> 'int' '=='
|   |   | | |   |-ImplicitCastExpr 0x1f845e01170 <col:34> 'int' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x1f845e01128 <col:34> 'int' lvalue Var 0x1f845dfe1b0 'fplace' 'int'
|   |   | | |   `-IntegerLiteral 0x1f845e01148 <col:44> 'int' 0
|   |   | | `-BinaryOperator 0x1f845e012c0 <col:49, col:68> 'int' '=='
|   |   | |   |-ParenExpr 0x1f845e01260 <col:49, col:63> 'unsigned long'
|   |   | |   | `-BinaryOperator 0x1f845e01240 <col:50, col:61> 'unsigned long' '%'
|   |   | |   |   |-ImplicitCastExpr 0x1f845e01210 <col:50> 'unsigned long' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1f845e011c8 <col:50> 'unsigned long' lvalue Var 0x1f845dfe620 'fracpart' 'unsigned long'
|   |   | |   |   `-ImplicitCastExpr 0x1f845e01228 <col:61> 'unsigned long' <IntegralCast>
|   |   | |   |     `-IntegerLiteral 0x1f845e011e8 <col:61> 'int' 10
|   |   | |   `-ImplicitCastExpr 0x1f845e012a8 <col:68> 'unsigned long' <IntegralCast>
|   |   | |     `-IntegerLiteral 0x1f845e01280 <col:68> 'int' 0
|   |   | `-CompoundStmt 0x1f845e014c8 <col:71, line:681:9>
|   |   |   |-UnaryOperator 0x1f845e01320 <line:676:13, col:16> 'int' postfix '--'
|   |   |   | `-DeclRefExpr 0x1f845e01300 <col:13> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   |   |-BinaryOperator 0x1f845e013f0 <line:677:13, col:35> 'unsigned long' '='
|   |   |   | |-DeclRefExpr 0x1f845e01338 <col:13> 'unsigned long' lvalue Var 0x1f845dfe620 'fracpart' 'unsigned long'
|   |   |   | `-BinaryOperator 0x1f845e013d0 <col:24, col:35> 'unsigned long' '/'
|   |   |   |   |-ImplicitCastExpr 0x1f845e013a0 <col:24> 'unsigned long' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x1f845e01358 <col:24> 'unsigned long' lvalue Var 0x1f845dfe620 'fracpart' 'unsigned long'
|   |   |   |   `-ImplicitCastExpr 0x1f845e013b8 <col:35> 'unsigned long' <IntegralCast>
|   |   |   |     `-IntegerLiteral 0x1f845e01378 <col:35> 'int' 10
|   |   |   |-IfStmt 0x1f845e014a8 <line:678:13, line:679:17>
|   |   |   | |-BinaryOperator 0x1f845e01480 <line:678:17, col:26> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x1f845e01450 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1f845e01410 <col:17> 'int' lvalue Var 0x1f845dfe1b0 'fplace' 'int'
|   |   |   | | `-ImplicitCastExpr 0x1f845e01468 <col:26> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1f845e01430 <col:26> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   |   | `-ContinueStmt 0x1f845e014a0 <line:679:17>
|   |   |   `-BreakStmt 0x1f845e014c0 <line:680:13>
|   |   |-BinaryOperator 0x1f845e016d8 <line:682:9, col:56> 'char' '='
|   |   | |-ArraySubscriptExpr 0x1f845e01598 <col:9, col:26> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x1f845e01580 <col:9> 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x1f845e01510 <col:9> 'char [20]' lvalue Var 0x1f845dfdf78 'fconvert' 'char [20]'
|   |   | | `-UnaryOperator 0x1f845e01568 <col:18, col:24> 'int' postfix '++'
|   |   | |   `-DeclRefExpr 0x1f845e01548 <col:18> 'int' lvalue Var 0x1f845dfe1b0 'fplace' 'int'
|   |   | `-ImplicitCastExpr 0x1f845e016c0 <col:30, col:56> 'char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1f845e016a0 <col:30, col:56> 'char' lvalue
|   |   |     |-ImplicitCastExpr 0x1f845e01678 <col:30> 'char *' <ArrayToPointerDecay>
|   |   |     | `-StringLiteral 0x1f845e015b8 <col:30> 'char [11]' lvalue "0123456789"
|   |   |     `-BinaryOperator 0x1f845e01658 <col:43, col:54> 'unsigned long' '%'
|   |   |       |-ImplicitCastExpr 0x1f845e01628 <col:43> 'unsigned long' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x1f845e015e0 <col:43> 'unsigned long' lvalue Var 0x1f845dfe620 'fracpart' 'unsigned long'
|   |   |       `-ImplicitCastExpr 0x1f845e01640 <col:54> 'unsigned long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1f845e01600 <col:54> 'int' 10
|   |   `-BinaryOperator 0x1f845e017d0 <line:683:9, col:34> 'unsigned long' '='
|   |     |-DeclRefExpr 0x1f845e016f8 <col:9> 'unsigned long' lvalue Var 0x1f845dfe620 'fracpart' 'unsigned long'
|   |     `-ParenExpr 0x1f845e017b0 <col:20, col:34> 'unsigned long'
|   |       `-BinaryOperator 0x1f845e01790 <col:21, col:32> 'unsigned long' '/'
|   |         |-ImplicitCastExpr 0x1f845e01760 <col:21> 'unsigned long' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1f845e01718 <col:21> 'unsigned long' lvalue Var 0x1f845dfe620 'fracpart' 'unsigned long'
|   |         `-ImplicitCastExpr 0x1f845e01778 <col:32> 'unsigned long' <IntegralCast>
|   |           `-IntegerLiteral 0x1f845e01738 <col:32> 'int' 10
|   |-IfStmt 0x1f845e01938 <line:686:5, line:687:15>
|   | |-BinaryOperator 0x1f845e018e0 <line:686:9, col:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f845e018c8 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1f845e018b0 <col:9> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1f845e01830 <col:9> 'int' lvalue Var 0x1f845dfe1b0 'fplace' 'int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1f845e01890 <col:19, col:34> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1f845e01870 <col:25, col:34> 'char [20]' lvalue
|   | |     `-DeclRefExpr 0x1f845e01850 <col:26> 'char [20]' lvalue Var 0x1f845dfdf78 'fconvert' 'char [20]' non_odr_use_unevaluated
|   | `-UnaryOperator 0x1f845e01920 <line:687:9, col:15> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1f845e01900 <col:9> 'int' lvalue Var 0x1f845dfe1b0 'fplace' 'int'
|   |-BinaryOperator 0x1f845e01a20 <line:688:5, col:24> 'char' '='
|   | |-ArraySubscriptExpr 0x1f845e019c0 <col:5, col:20> 'char' lvalue
|   | | |-ImplicitCastExpr 0x1f845e01990 <col:5> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1f845e01950 <col:5> 'char [20]' lvalue Var 0x1f845dfdf78 'fconvert' 'char [20]'
|   | | `-ImplicitCastExpr 0x1f845e019a8 <col:14> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f845e01970 <col:14> 'int' lvalue Var 0x1f845dfe1b0 'fplace' 'int'
|   | `-ImplicitCastExpr 0x1f845e01a08 <col:24> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x1f845e019e0 <col:24> 'int' 0
|   |-IfStmt 0x1f845e02478 <line:691:5, line:708:5>
|   | |-BinaryOperator 0x1f845e01aa0 <line:691:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f845e01a88 <line:691:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e01a40 <col:9> 'int' lvalue Var 0x1f845dfe750 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1f845e01a60 <line:75:25> 'int' 1
|   | `-CompoundStmt 0x1f845e02440 <line:691:32, line:708:5>
|   |   |-DeclStmt 0x1f845e01b40 <line:692:9, col:19>
|   |   | `-VarDecl 0x1f845e01ad8 <col:9, col:13> col:13 used tmpexp 'int'
|   |   |-IfStmt 0x1f845e01d40 <line:693:9, line:696:22> has_else
|   |   | |-BinaryOperator 0x1f845e01bd0 <line:693:13, col:19> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1f845e01ba0 <col:13> 'long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f845e01b58 <col:13> 'long' lvalue Var 0x1f845dfe4b0 'exp' 'long'
|   |   | | `-ImplicitCastExpr 0x1f845e01bb8 <col:19> 'long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1f845e01b78 <col:19> 'int' 0
|   |   | |-BinaryOperator 0x1f845e01c90 <line:694:13, col:23> 'int' '='
|   |   | | |-DeclRefExpr 0x1f845e01bf0 <col:13> 'int' lvalue Var 0x1f845e01ad8 'tmpexp' 'int'
|   |   | | `-ImplicitCastExpr 0x1f845e01c78 <col:22, col:23> 'int' <IntegralCast>
|   |   | |   `-UnaryOperator 0x1f845e01c60 <col:22, col:23> 'long' prefix '-'
|   |   | |     `-ImplicitCastExpr 0x1f845e01c48 <col:23> 'long' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1f845e01c28 <col:23> 'long' lvalue Var 0x1f845dfe4b0 'exp' 'long'
|   |   | `-BinaryOperator 0x1f845e01d20 <line:696:13, col:22> 'int' '='
|   |   |   |-DeclRefExpr 0x1f845e01cb0 <col:13> 'int' lvalue Var 0x1f845e01ad8 'tmpexp' 'int'
|   |   |   `-ImplicitCastExpr 0x1f845e01d08 <col:22> 'int' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x1f845e01cf0 <col:22> 'long' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1f845e01cd0 <col:22> 'long' lvalue Var 0x1f845dfe4b0 'exp' 'long'
|   |   |-DoStmt 0x1f845e021d8 <line:698:9, line:701:62>
|   |   | |-CompoundStmt 0x1f845e02020 <line:698:12, line:701:9>
|   |   | | |-BinaryOperator 0x1f845e01f20 <line:699:13, col:58> 'char' '='
|   |   | | | |-ArraySubscriptExpr 0x1f845e01e08 <col:13, col:30> 'char' lvalue
|   |   | | | | |-ImplicitCastExpr 0x1f845e01df0 <col:13> 'char *' <ArrayToPointerDecay>
|   |   | | | | | `-DeclRefExpr 0x1f845e01d68 <col:13> 'char [20]' lvalue Var 0x1f845dfe058 'econvert' 'char [20]'
|   |   | | | | `-UnaryOperator 0x1f845e01dd8 <col:22, col:28> 'int' postfix '++'
|   |   | | | |   `-DeclRefExpr 0x1f845e01da0 <col:22> 'int' lvalue Var 0x1f845dfe270 'eplace' 'int'
|   |   | | | `-ImplicitCastExpr 0x1f845e01f08 <col:34, col:58> 'char' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x1f845e01ee8 <col:34, col:58> 'char' lvalue
|   |   | | |     |-ImplicitCastExpr 0x1f845e01ed0 <col:34> 'char *' <ArrayToPointerDecay>
|   |   | | |     | `-StringLiteral 0x1f845e01e28 <col:34> 'char [11]' lvalue "0123456789"
|   |   | | |     `-BinaryOperator 0x1f845e01eb0 <col:47, col:56> 'int' '%'
|   |   | | |       |-ImplicitCastExpr 0x1f845e01e98 <col:47> 'int' <LValueToRValue>
|   |   | | |       | `-DeclRefExpr 0x1f845e01e50 <col:47> 'int' lvalue Var 0x1f845e01ad8 'tmpexp' 'int'
|   |   | | |       `-IntegerLiteral 0x1f845e01e70 <col:56> 'int' 10
|   |   | | `-BinaryOperator 0x1f845e02000 <line:700:13, col:34> 'int' '='
|   |   | |   |-DeclRefExpr 0x1f845e01f40 <col:13> 'int' lvalue Var 0x1f845e01ad8 'tmpexp' 'int'
|   |   | |   `-ParenExpr 0x1f845e01fe0 <col:22, col:34> 'int'
|   |   | |     `-BinaryOperator 0x1f845e01fc0 <col:23, col:32> 'int' '/'
|   |   | |       |-ImplicitCastExpr 0x1f845e01fa8 <col:23> 'int' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x1f845e01f60 <col:23> 'int' lvalue Var 0x1f845e01ad8 'tmpexp' 'int'
|   |   | |       `-IntegerLiteral 0x1f845e01f80 <col:32> 'int' 10
|   |   | `-BinaryOperator 0x1f845e021b8 <line:701:18, col:61> 'int' '&&'
|   |   |   |-BinaryOperator 0x1f845e020a0 <col:18, col:27> 'int' '>'
|   |   |   | |-ImplicitCastExpr 0x1f845e02088 <col:18> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1f845e02040 <col:18> 'int' lvalue Var 0x1f845e01ad8 'tmpexp' 'int'
|   |   |   | `-IntegerLiteral 0x1f845e02060 <col:27> 'int' 0
|   |   |   `-BinaryOperator 0x1f845e02198 <col:32, col:61> 'int' '<'
|   |   |     |-ImplicitCastExpr 0x1f845e02180 <col:32> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1f845e020c0 <col:32> 'int' lvalue Var 0x1f845dfe270 'eplace' 'int'
|   |   |     `-CStyleCastExpr 0x1f845e02158 <col:41, col:61> 'int' <IntegralCast>
|   |   |       `-UnaryExprOrTypeTraitExpr 0x1f845e02120 <col:46, col:61> 'unsigned long long' sizeof
|   |   |         `-ParenExpr 0x1f845e02100 <col:52, col:61> 'char [20]' lvalue
|   |   |           `-DeclRefExpr 0x1f845e020e0 <col:53> 'char [20]' lvalue Var 0x1f845dfe058 'econvert' 'char [20]' non_odr_use_unevaluated
|   |   |-IfStmt 0x1f845e022b0 <line:703:9, line:704:20>
|   |   | |-BinaryOperator 0x1f845e02258 <line:703:13, col:22> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x1f845e02240 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f845e021f8 <col:13> 'int' lvalue Var 0x1f845e01ad8 'tmpexp' 'int'
|   |   | | `-IntegerLiteral 0x1f845e02218 <col:22> 'int' 0
|   |   | `-ReturnStmt 0x1f845e022a0 <line:704:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845e02278 <col:20> 'int' 0
|   |   `-IfStmt 0x1f845e02428 <line:706:9, line:707:34>
|   |     |-BinaryOperator 0x1f845e02328 <line:706:13, col:23> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1f845e02310 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f845e022c8 <col:13> 'int' lvalue Var 0x1f845dfe270 'eplace' 'int'
|   |     | `-IntegerLiteral 0x1f845e022e8 <col:23> 'int' 1
|   |     `-BinaryOperator 0x1f845e02408 <line:707:13, col:34> 'char' '='
|   |       |-ArraySubscriptExpr 0x1f845e023b8 <col:13, col:30> 'char' lvalue
|   |       | |-ImplicitCastExpr 0x1f845e023a0 <col:13> 'char *' <ArrayToPointerDecay>
|   |       | | `-DeclRefExpr 0x1f845e02348 <col:13> 'char [20]' lvalue Var 0x1f845dfe058 'econvert' 'char [20]'
|   |       | `-UnaryOperator 0x1f845e02388 <col:22, col:28> 'int' postfix '++'
|   |       |   `-DeclRefExpr 0x1f845e02368 <col:22> 'int' lvalue Var 0x1f845dfe270 'eplace' 'int'
|   |       `-ImplicitCastExpr 0x1f845e023f0 <col:34> 'char' <IntegralCast>
|   |         `-CharacterLiteral 0x1f845e023d8 <col:34> 'int' 48
|   |-BinaryOperator 0x1f845e02808 <line:714:5, col:75> 'int' '='
|   | |-DeclRefExpr 0x1f845e02490 <col:5> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   | `-BinaryOperator 0x1f845e027e8 <col:14, col:75> 'int' '-'
|   |   |-BinaryOperator 0x1f845e026d0 <col:14, col:51> 'int' '-'
|   |   | |-BinaryOperator 0x1f845e02590 <col:14, col:29> 'int' '-'
|   |   | | |-BinaryOperator 0x1f845e02538 <col:14, col:20> 'int' '-'
|   |   | | | |-ImplicitCastExpr 0x1f845e02508 <col:14> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1f845e024c8 <col:14> 'int' lvalue ParmVar 0x1f845dfd7f8 'min' 'int'
|   |   | | | `-ImplicitCastExpr 0x1f845e02520 <col:20> 'int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1f845e024e8 <col:20> 'int' lvalue Var 0x1f845dfe0f0 'iplace' 'int'
|   |   | | `-ImplicitCastExpr 0x1f845e02578 <col:29> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1f845e02558 <col:29> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   | `-ParenExpr 0x1f845e026b0 <col:35, col:51> 'int'
|   |   |   `-ConditionalOperator 0x1f845e02680 <col:36, col:50> 'int'
|   |   |     |-BinaryOperator 0x1f845e02610 <col:36, col:42> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x1f845e025f8 <col:36> 'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1f845e025b0 <col:36> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   |     | `-IntegerLiteral 0x1f845e025d0 <col:42> 'int' 0
|   |   |     |-IntegerLiteral 0x1f845e02630 <col:46> 'int' 1
|   |   |     `-IntegerLiteral 0x1f845e02658 <col:50> 'int' 0
|   |   `-ParenExpr 0x1f845e027c8 <col:55, col:75> 'int'
|   |     `-ConditionalOperator 0x1f845e02798 <col:56, col:74> 'int'
|   |       |-ImplicitCastExpr 0x1f845e02780 <col:56, col:66> 'int' <LValueToRValue>
|   |       | `-ParenExpr 0x1f845e02710 <col:56, col:66> 'int' lvalue
|   |       |   `-DeclRefExpr 0x1f845e026f0 <col:57> 'int' lvalue Var 0x1f845dfdc28 'signvalue' 'int'
|   |       |-IntegerLiteral 0x1f845e02730 <col:70> 'int' 1
|   |       `-IntegerLiteral 0x1f845e02758 <col:74> 'int' 0
|   |-IfStmt 0x1f845e02978 <line:716:5, line:717:23>
|   | |-BinaryOperator 0x1f845e02888 <line:716:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f845e02870 <line:716:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e02828 <col:9> 'int' lvalue Var 0x1f845dfe750 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1f845e02848 <line:75:25> 'int' 1
|   | `-CompoundAssignOperator 0x1f845e02948 <line:717:9, col:23> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x1f845e028a8 <col:9> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   |   `-BinaryOperator 0x1f845e02928 <col:19, col:23> 'int' '+'
|   |     |-IntegerLiteral 0x1f845e028c8 <col:19> 'int' 2
|   |     `-ImplicitCastExpr 0x1f845e02910 <col:23> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f845e028f0 <col:23> 'int' lvalue Var 0x1f845dfe270 'eplace' 'int'
|   |-BinaryOperator 0x1f845e02a58 <line:718:5, col:21> 'int' '='
|   | |-DeclRefExpr 0x1f845e02990 <col:5> 'int' lvalue Var 0x1f845dfe3f0 'zpadlen' 'int'
|   | `-BinaryOperator 0x1f845e02a38 <col:15, col:21> 'int' '-'
|   |   |-ImplicitCastExpr 0x1f845e02a08 <col:15> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845e029c8 <col:15> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   |   `-ImplicitCastExpr 0x1f845e02a20 <col:21> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f845e029e8 <col:21> 'int' lvalue Var 0x1f845dfe1b0 'fplace' 'int'
|   |-IfStmt 0x1f845e02b60 <line:719:5, line:720:19>
|   | |-BinaryOperator 0x1f845e02ad8 <line:719:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845e02ac0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e02a78 <col:9> 'int' lvalue Var 0x1f845dfe3f0 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1f845e02a98 <col:19> 'int' 0
|   | `-BinaryOperator 0x1f845e02b40 <line:720:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1f845e02af8 <col:9> 'int' lvalue Var 0x1f845dfe3f0 'zpadlen' 'int'
|   |   `-IntegerLiteral 0x1f845e02b18 <col:19> 'int' 0
|   |-IfStmt 0x1f845e02c60 <line:721:5, line:722:18>
|   | |-BinaryOperator 0x1f845e02bd8 <line:721:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845e02bc0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e02b78 <col:9> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   | | `-IntegerLiteral 0x1f845e02b98 <col:18> 'int' 0
|   | `-BinaryOperator 0x1f845e02c40 <line:722:9, col:18> 'int' '='
|   |   |-DeclRefExpr 0x1f845e02bf8 <col:9> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   |   `-IntegerLiteral 0x1f845e02c18 <col:18> 'int' 0
|   |-IfStmt 0x1f845e02df0 <line:723:5, line:724:19>
|   | |-BinaryOperator 0x1f845e02d40 <line:723:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1f845e02d28 <line:723:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e02c78 <col:9> 'int' lvalue ParmVar 0x1f845dfd8f8 'flags' 'int'
|   | | `-ParenExpr 0x1f845e02d08 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1f845e02ce8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1f845e02c98 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1f845e02cc0 <col:31> 'int' 0
|   | `-BinaryOperator 0x1f845e02dd0 <line:724:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1f845e02d60 <col:9> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   |   `-UnaryOperator 0x1f845e02db8 <col:18, col:19> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1f845e02da0 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f845e02d80 <col:19> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   |-IfStmt 0x1f845e035d8 <line:726:5, line:738:5>
|   | |-BinaryOperator 0x1f845e02fb0 <line:726:9, col:43> 'int' '&&'
|   | | |-ParenExpr 0x1f845e02ef0 <col:9, col:27> 'int'
|   | | | `-BinaryOperator 0x1f845e02ed0 <col:10, line:61:32> 'int' '&'
|   | | |   |-ImplicitCastExpr 0x1f845e02eb8 <line:726:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1f845e02e08 <col:10> 'int' lvalue ParmVar 0x1f845dfd8f8 'flags' 'int'
|   | | |   `-ParenExpr 0x1f845e02e98 <line:61:25, col:32> 'int'
|   | | |     `-BinaryOperator 0x1f845e02e78 <col:26, col:31> 'int' '<<'
|   | | |       |-IntegerLiteral 0x1f845e02e28 <col:26> 'int' 1
|   | | |       `-IntegerLiteral 0x1f845e02e50 <col:31> 'int' 4
|   | | `-ParenExpr 0x1f845e02f90 <line:726:32, col:43> 'int'
|   | |   `-BinaryOperator 0x1f845e02f70 <col:33, col:42> 'int' '>'
|   | |     |-ImplicitCastExpr 0x1f845e02f58 <col:33> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f845e02f10 <col:33> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   | |     `-IntegerLiteral 0x1f845e02f30 <col:42> 'int' 0
|   | `-CompoundStmt 0x1f845e035b8 <col:46, line:738:5>
|   |   |-IfStmt 0x1f845e032d0 <line:727:9, line:732:9>
|   |   | |-ImplicitCastExpr 0x1f845e02ff0 <line:727:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1f845e02fd0 <col:13> 'int' lvalue Var 0x1f845dfdc28 'signvalue' 'int'
|   |   | `-CompoundStmt 0x1f845e032a8 <col:24, line:732:9>
|   |   |   |-IfStmt 0x1f845e031f0 <line:728:13, line:729:24>
|   |   |   | |-UnaryOperator 0x1f845e031a0 <line:728:17, col:73> 'int' prefix '!' cannot overflow
|   |   |   | | `-CallExpr 0x1f845e030e0 <col:18, col:73> 'int'
|   |   |   | |   |-ImplicitCastExpr 0x1f845e030c8 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x1f845e03008 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |   | |   |-ImplicitCastExpr 0x1f845e03128 <col:30> 'char **' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1f845e03028 <col:30> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |   |   | |   |-ImplicitCastExpr 0x1f845e03140 <col:39> 'char **' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1f845e03048 <col:39> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |   |   | |   |-ImplicitCastExpr 0x1f845e03158 <col:47> 'size_t *' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1f845e03068 <col:47> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |   |   | |   |-ImplicitCastExpr 0x1f845e03170 <col:56> 'size_t *' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1f845e03088 <col:56> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |   |   | |   `-ImplicitCastExpr 0x1f845e03188 <col:64> 'int' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x1f845e030a8 <col:64> 'int' lvalue Var 0x1f845dfdc28 'signvalue' 'int'
|   |   |   | `-ReturnStmt 0x1f845e031e0 <line:729:17, col:24>
|   |   |   |   `-IntegerLiteral 0x1f845e031b8 <col:24> 'int' 0
|   |   |   |-UnaryOperator 0x1f845e03228 <line:730:13, col:15> 'int' prefix '--'
|   |   |   | `-DeclRefExpr 0x1f845e03208 <col:15> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   |   |   `-BinaryOperator 0x1f845e03288 <line:731:13, col:25> 'int' '='
|   |   |     |-DeclRefExpr 0x1f845e03240 <col:13> 'int' lvalue Var 0x1f845dfdc28 'signvalue' 'int'
|   |   |     `-IntegerLiteral 0x1f845e03260 <col:25> 'int' 0
|   |   `-WhileStmt 0x1f845e035a0 <line:733:9, line:737:9>
|   |     |-BinaryOperator 0x1f845e03348 <line:733:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1f845e03330 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f845e032e8 <col:16> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   |     | `-IntegerLiteral 0x1f845e03308 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1f845e03580 <col:28, line:737:9>
|   |       |-IfStmt 0x1f845e03530 <line:734:13, line:735:24>
|   |       | |-UnaryOperator 0x1f845e034e0 <line:734:17, col:67> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x1f845e03438 <col:18, col:67> 'int'
|   |       | |   |-ImplicitCastExpr 0x1f845e03420 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1f845e03368 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       | |   |-ImplicitCastExpr 0x1f845e03480 <col:30> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f845e03388 <col:30> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1f845e03498 <col:39> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f845e033a8 <col:39> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1f845e034b0 <col:47> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f845e033c8 <col:47> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |       | |   |-ImplicitCastExpr 0x1f845e034c8 <col:56> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1f845e033e8 <col:56> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |       | |   `-CharacterLiteral 0x1f845e03408 <col:64> 'int' 48
|   |       | `-ReturnStmt 0x1f845e03520 <line:735:17, col:24>
|   |       |   `-IntegerLiteral 0x1f845e034f8 <col:24> 'int' 0
|   |       `-UnaryOperator 0x1f845e03568 <line:736:13, col:15> 'int' prefix '--'
|   |         `-DeclRefExpr 0x1f845e03548 <col:15> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   |-WhileStmt 0x1f845e038c8 <line:739:5, line:743:5>
|   | |-BinaryOperator 0x1f845e03650 <line:739:12, col:21> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f845e03638 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e035f0 <col:12> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   | | `-IntegerLiteral 0x1f845e03610 <col:21> 'int' 0
|   | `-CompoundStmt 0x1f845e038a8 <col:24, line:743:5>
|   |   |-IfStmt 0x1f845e03858 <line:740:9, line:741:20>
|   |   | |-UnaryOperator 0x1f845e03808 <line:740:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845e03760 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845e03748 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845e03670 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845e037a8 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e036b0 <col:26> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845e037c0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e036d0 <col:35> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845e037d8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e036f0 <col:43> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845e037f0 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e03710 <col:52> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f845e03730 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1f845e03848 <line:741:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845e03820 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f845e03890 <line:742:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1f845e03870 <col:11> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   |-IfStmt 0x1f845e03b20 <line:744:5, line:745:16>
|   | |-BinaryOperator 0x1f845e03ac8 <line:744:9, col:78> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1f845e03ab0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e038e0 <col:9> 'int' lvalue Var 0x1f845dfdc28 'signvalue' 'int'
|   | | `-UnaryOperator 0x1f845e03a98 <col:22, col:78> 'int' prefix '!' cannot overflow
|   | |   `-CallExpr 0x1f845e039d8 <col:23, col:78> 'int'
|   | |     |-ImplicitCastExpr 0x1f845e039c0 <col:23> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x1f845e03900 <col:23> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   | |     |-ImplicitCastExpr 0x1f845e03a20 <col:35> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f845e03920 <col:35> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   | |     |-ImplicitCastExpr 0x1f845e03a38 <col:44> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f845e03940 <col:44> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   | |     |-ImplicitCastExpr 0x1f845e03a50 <col:52> 'size_t *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f845e03960 <col:52> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   | |     |-ImplicitCastExpr 0x1f845e03a68 <col:61> 'size_t *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f845e03980 <col:61> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   | |     `-ImplicitCastExpr 0x1f845e03a80 <col:69> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1f845e039a0 <col:69> 'int' lvalue Var 0x1f845dfdc28 'signvalue' 'int'
|   | `-ReturnStmt 0x1f845e03b10 <line:745:9, col:16>
|   |   `-IntegerLiteral 0x1f845e03ae8 <col:16> 'int' 0
|   |-WhileStmt 0x1f845e03e58 <line:747:5, line:750:5>
|   | |-BinaryOperator 0x1f845e03b98 <line:747:12, col:21> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f845e03b80 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e03b38 <col:12> 'int' lvalue Var 0x1f845dfe0f0 'iplace' 'int'
|   | | `-IntegerLiteral 0x1f845e03b58 <col:21> 'int' 0
|   | `-CompoundStmt 0x1f845e03e40 <col:24, line:750:5>
|   |   `-IfStmt 0x1f845e03e28 <line:748:9, line:749:20>
|   |     |-UnaryOperator 0x1f845e03dd8 <line:748:13, col:78> 'int' prefix '!' cannot overflow
|   |     | `-CallExpr 0x1f845e03d00 <col:14, col:78> 'int'
|   |     |   |-ImplicitCastExpr 0x1f845e03ce8 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x1f845e03bb8 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |     |   |-ImplicitCastExpr 0x1f845e03d48 <col:26> 'char **' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f845e03bd8 <col:26> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |     |   |-ImplicitCastExpr 0x1f845e03d60 <col:35> 'char **' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f845e03bf8 <col:35> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |     |   |-ImplicitCastExpr 0x1f845e03d78 <col:43> 'size_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f845e03c18 <col:43> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |     |   |-ImplicitCastExpr 0x1f845e03d90 <col:52> 'size_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f845e03c38 <col:52> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |     |   `-ImplicitCastExpr 0x1f845e03dc0 <col:60, col:77> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x1f845e03da8 <col:60, col:77> 'char' <LValueToRValue>
|   |     |       `-ArraySubscriptExpr 0x1f845e03cc8 <col:60, col:77> 'char' lvalue
|   |     |         |-ImplicitCastExpr 0x1f845e03cb0 <col:60> 'char *' <ArrayToPointerDecay>
|   |     |         | `-DeclRefExpr 0x1f845e03c58 <col:60> 'char [20]' lvalue Var 0x1f845dfde98 'iconvert' 'char [20]'
|   |     |         `-UnaryOperator 0x1f845e03c98 <col:69, col:71> 'int' prefix '--'
|   |     |           `-DeclRefExpr 0x1f845e03c78 <col:71> 'int' lvalue Var 0x1f845dfe0f0 'iplace' 'int'
|   |     `-ReturnStmt 0x1f845e03e18 <line:749:13, col:20>
|   |       `-IntegerLiteral 0x1f845e03df0 <col:20> 'int' 0
|   |-IfStmt 0x1f845e04550 <line:756:5, line:765:5>
|   | |-BinaryOperator 0x1f845e03ff8 <line:756:9, col:37> 'int' '||'
|   | | |-BinaryOperator 0x1f845e03ed0 <col:9, col:15> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1f845e03eb8 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1f845e03e70 <col:9> 'int' lvalue ParmVar 0x1f845dfd878 'max' 'int'
|   | | | `-IntegerLiteral 0x1f845e03e90 <col:15> 'int' 0
|   | | `-ParenExpr 0x1f845e03fd8 <col:20, col:37> 'int'
|   | |   `-BinaryOperator 0x1f845e03fb8 <col:21, line:59:32> 'int' '&'
|   | |     |-ImplicitCastExpr 0x1f845e03fa0 <line:756:21> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1f845e03ef0 <col:21> 'int' lvalue ParmVar 0x1f845dfd8f8 'flags' 'int'
|   | |     `-ParenExpr 0x1f845e03f80 <line:59:25, col:32> 'int'
|   | |       `-BinaryOperator 0x1f845e03f60 <col:26, col:31> 'int' '<<'
|   | |         |-IntegerLiteral 0x1f845e03f10 <col:26> 'int' 1
|   | |         `-IntegerLiteral 0x1f845e03f38 <col:31> 'int' 3
|   | `-CompoundStmt 0x1f845e04530 <line:756:40, line:765:5>
|   |   |-IfStmt 0x1f845e041e0 <line:757:9, line:758:20>
|   |   | |-UnaryOperator 0x1f845e04190 <line:757:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845e040e8 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845e040d0 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845e04018 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845e04130 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04038 <col:26> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845e04148 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04058 <col:35> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845e04160 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04078 <col:43> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845e04178 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04098 <col:52> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f845e040b8 <col:60> 'int' 46
|   |   | `-ReturnStmt 0x1f845e041d0 <line:758:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845e041a8 <col:20> 'int' 0
|   |   `-WhileStmt 0x1f845e04518 <line:760:9, line:764:9>
|   |     |-BinaryOperator 0x1f845e04258 <line:760:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1f845e04240 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f845e041f8 <col:16> 'int' lvalue Var 0x1f845dfe1b0 'fplace' 'int'
|   |     | `-IntegerLiteral 0x1f845e04218 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1f845e04500 <col:28, line:764:9>
|   |       `-IfStmt 0x1f845e044e8 <line:761:13, line:763:24>
|   |         |-UnaryOperator 0x1f845e04498 <line:761:16, line:762:47> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x1f845e043c0 <line:761:17, line:762:47> 'int'
|   |         |   |-ImplicitCastExpr 0x1f845e043a8 <line:761:17> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1f845e04278 <col:17> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |         |   |-ImplicitCastExpr 0x1f845e04408 <col:29> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f845e04298 <col:29> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1f845e04420 <col:38> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f845e042b8 <col:38> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1f845e04438 <col:46> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f845e042d8 <col:46> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |         |   |-ImplicitCastExpr 0x1f845e04450 <col:55> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f845e042f8 <col:55> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |         |   `-ImplicitCastExpr 0x1f845e04480 <line:762:29, col:46> 'int' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x1f845e04468 <col:29, col:46> 'char' <LValueToRValue>
|   |         |       `-ArraySubscriptExpr 0x1f845e04388 <col:29, col:46> 'char' lvalue
|   |         |         |-ImplicitCastExpr 0x1f845e04370 <col:29> 'char *' <ArrayToPointerDecay>
|   |         |         | `-DeclRefExpr 0x1f845e04318 <col:29> 'char [20]' lvalue Var 0x1f845dfdf78 'fconvert' 'char [20]'
|   |         |         `-UnaryOperator 0x1f845e04358 <col:38, col:40> 'int' prefix '--'
|   |         |           `-DeclRefExpr 0x1f845e04338 <col:40> 'int' lvalue Var 0x1f845dfe1b0 'fplace' 'int'
|   |         `-ReturnStmt 0x1f845e044d8 <line:763:17, col:24>
|   |           `-IntegerLiteral 0x1f845e044b0 <col:24> 'int' 0
|   |-WhileStmt 0x1f845e04820 <line:766:5, line:770:5>
|   | |-BinaryOperator 0x1f845e045c8 <line:766:12, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f845e045b0 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e04568 <col:12> 'int' lvalue Var 0x1f845dfe3f0 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1f845e04588 <col:22> 'int' 0
|   | `-CompoundStmt 0x1f845e04800 <col:25, line:770:5>
|   |   |-IfStmt 0x1f845e047b0 <line:767:9, line:768:20>
|   |   | |-UnaryOperator 0x1f845e04760 <line:767:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845e046b8 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845e046a0 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845e045e8 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845e04700 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04608 <col:26> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845e04718 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04628 <col:35> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845e04730 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04648 <col:43> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845e04748 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04668 <col:52> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f845e04688 <col:60> 'int' 48
|   |   | `-ReturnStmt 0x1f845e047a0 <line:768:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845e04778 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f845e047e8 <line:769:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1f845e047c8 <col:11> 'int' lvalue Var 0x1f845dfe3f0 'zpadlen' 'int'
|   |-IfStmt 0x1f845e055f0 <line:771:5, line:792:5>
|   | |-BinaryOperator 0x1f845e04898 <line:771:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f845e04880 <line:771:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e04838 <col:9> 'int' lvalue Var 0x1f845dfe750 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1f845e04858 <line:75:25> 'int' 1
|   | `-CompoundStmt 0x1f845e055b8 <line:771:32, line:792:5>
|   |   |-DeclStmt 0x1f845e04930 <line:772:9, col:17>
|   |   | `-VarDecl 0x1f845e048c8 <col:9, col:14> col:14 used ech 'char'
|   |   |-IfStmt 0x1f845e04b90 <line:774:9, line:777:19> has_else
|   |   | |-BinaryOperator 0x1f845e04a78 <line:774:13, col:34> 'int' '=='
|   |   | | |-ParenExpr 0x1f845e04a30 <col:13, col:29> 'int'
|   |   | | | `-BinaryOperator 0x1f845e04a10 <col:14, line:63:32> 'int' '&'
|   |   | | |   |-ImplicitCastExpr 0x1f845e049f8 <line:774:14> 'int' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x1f845e04948 <col:14> 'int' lvalue ParmVar 0x1f845dfd8f8 'flags' 'int'
|   |   | | |   `-ParenExpr 0x1f845e049d8 <line:63:25, col:32> 'int'
|   |   | | |     `-BinaryOperator 0x1f845e049b8 <col:26, col:31> 'int' '<<'
|   |   | | |       |-IntegerLiteral 0x1f845e04968 <col:26> 'int' 1
|   |   | | |       `-IntegerLiteral 0x1f845e04990 <col:31> 'int' 5
|   |   | | `-IntegerLiteral 0x1f845e04a50 <line:774:34> 'int' 0
|   |   | |-BinaryOperator 0x1f845e04b00 <line:775:13, col:19> 'char' '='
|   |   | | |-DeclRefExpr 0x1f845e04a98 <col:13> 'char' lvalue Var 0x1f845e048c8 'ech' 'char'
|   |   | | `-ImplicitCastExpr 0x1f845e04ae8 <col:19> 'char' <IntegralCast>
|   |   | |   `-CharacterLiteral 0x1f845e04ad0 <col:19> 'int' 101
|   |   | `-BinaryOperator 0x1f845e04b70 <line:777:13, col:19> 'char' '='
|   |   |   |-DeclRefExpr 0x1f845e04b20 <col:13> 'char' lvalue Var 0x1f845e048c8 'ech' 'char'
|   |   |   `-ImplicitCastExpr 0x1f845e04b58 <col:19> 'char' <IntegralCast>
|   |   |     `-CharacterLiteral 0x1f845e04b40 <col:19> 'int' 69
|   |   |-IfStmt 0x1f845e04db8 <line:778:9, line:779:24>
|   |   | |-UnaryOperator 0x1f845e04d68 <line:778:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845e04c90 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845e04c78 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845e04bb8 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845e04cd8 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04bd8 <col:26> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845e04cf0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04bf8 <col:35> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845e04d08 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04c18 <col:43> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845e04d20 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e04c38 <col:52> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1f845e04d50 <col:60> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1f845e04d38 <col:60> 'char' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1f845e04c58 <col:60> 'char' lvalue Var 0x1f845e048c8 'ech' 'char'
|   |   | `-ReturnStmt 0x1f845e04da8 <line:779:17, col:24>
|   |   |   `-IntegerLiteral 0x1f845e04d80 <col:24> 'int' 0
|   |   |-IfStmt 0x1f845e05258 <line:780:9, line:786:9> has_else
|   |   | |-BinaryOperator 0x1f845e04e48 <line:780:13, col:19> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1f845e04e18 <col:13> 'long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f845e04dd0 <col:13> 'long' lvalue Var 0x1f845dfe4b0 'exp' 'long'
|   |   | | `-ImplicitCastExpr 0x1f845e04e30 <col:19> 'long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1f845e04df0 <col:19> 'int' 0
|   |   | |-CompoundStmt 0x1f845e05048 <col:22, line:783:9>
|   |   | | `-IfStmt 0x1f845e05030 <line:781:13, line:782:28>
|   |   | |   |-UnaryOperator 0x1f845e04fe0 <line:781:17, col:67> 'int' prefix '!' cannot overflow
|   |   | |   | `-CallExpr 0x1f845e04f38 <col:18, col:67> 'int'
|   |   | |   |   |-ImplicitCastExpr 0x1f845e04f20 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   |   | `-DeclRefExpr 0x1f845e04e68 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |   |-ImplicitCastExpr 0x1f845e04f80 <col:30> 'char **' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1f845e04e88 <col:30> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |   | |   |   |-ImplicitCastExpr 0x1f845e04f98 <col:39> 'char **' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1f845e04ea8 <col:39> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |   | |   |   |-ImplicitCastExpr 0x1f845e04fb0 <col:47> 'size_t *' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1f845e04ec8 <col:47> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |   | |   |   |-ImplicitCastExpr 0x1f845e04fc8 <col:56> 'size_t *' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1f845e04ee8 <col:56> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |   | |   |   `-CharacterLiteral 0x1f845e04f08 <col:64> 'int' 45
|   |   | |   `-ReturnStmt 0x1f845e05020 <line:782:21, col:28>
|   |   | |     `-IntegerLiteral 0x1f845e04ff8 <col:28> 'int' 0
|   |   | `-CompoundStmt 0x1f845e05240 <line:783:16, line:786:9>
|   |   |   `-IfStmt 0x1f845e05228 <line:784:13, line:785:28>
|   |   |     |-UnaryOperator 0x1f845e051d8 <line:784:17, col:67> 'int' prefix '!' cannot overflow
|   |   |     | `-CallExpr 0x1f845e05130 <col:18, col:67> 'int'
|   |   |     |   |-ImplicitCastExpr 0x1f845e05118 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1f845e05060 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |     |   |-ImplicitCastExpr 0x1f845e05178 <col:30> 'char **' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1f845e05080 <col:30> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |   |     |   |-ImplicitCastExpr 0x1f845e05190 <col:39> 'char **' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1f845e050a0 <col:39> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |   |     |   |-ImplicitCastExpr 0x1f845e051a8 <col:47> 'size_t *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1f845e050c0 <col:47> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |   |     |   |-ImplicitCastExpr 0x1f845e051c0 <col:56> 'size_t *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1f845e050e0 <col:56> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |   |     |   `-CharacterLiteral 0x1f845e05100 <col:64> 'int' 43
|   |   |     `-ReturnStmt 0x1f845e05218 <line:785:21, col:28>
|   |   |       `-IntegerLiteral 0x1f845e051f0 <col:28> 'int' 0
|   |   `-WhileStmt 0x1f845e055a0 <line:787:9, line:791:9>
|   |     |-BinaryOperator 0x1f845e052e0 <line:787:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1f845e052c8 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1f845e05280 <col:16> 'int' lvalue Var 0x1f845dfe270 'eplace' 'int'
|   |     | `-IntegerLiteral 0x1f845e052a0 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1f845e05588 <col:28, line:791:9>
|   |       `-IfStmt 0x1f845e05570 <line:788:13, line:790:24>
|   |         |-UnaryOperator 0x1f845e05520 <line:788:17, line:789:48> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x1f845e05448 <line:788:18, line:789:48> 'int'
|   |         |   |-ImplicitCastExpr 0x1f845e05430 <line:788:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1f845e05300 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |         |   |-ImplicitCastExpr 0x1f845e05490 <col:30> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f845e05320 <col:30> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1f845e054a8 <col:39> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f845e05340 <col:39> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1f845e054c0 <col:47> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f845e05360 <col:47> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |         |   |-ImplicitCastExpr 0x1f845e054d8 <col:56> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1f845e05380 <col:56> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |         |   `-ImplicitCastExpr 0x1f845e05508 <line:789:30, col:47> 'int' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x1f845e054f0 <col:30, col:47> 'char' <LValueToRValue>
|   |         |       `-ArraySubscriptExpr 0x1f845e05410 <col:30, col:47> 'char' lvalue
|   |         |         |-ImplicitCastExpr 0x1f845e053f8 <col:30> 'char *' <ArrayToPointerDecay>
|   |         |         | `-DeclRefExpr 0x1f845e053a0 <col:30> 'char [20]' lvalue Var 0x1f845dfe058 'econvert' 'char [20]'
|   |         |         `-UnaryOperator 0x1f845e053e0 <col:39, col:41> 'int' prefix '--'
|   |         |           `-DeclRefExpr 0x1f845e053c0 <col:41> 'int' lvalue Var 0x1f845dfe270 'eplace' 'int'
|   |         `-ReturnStmt 0x1f845e05560 <line:790:17, col:24>
|   |           `-IntegerLiteral 0x1f845e05538 <col:24> 'int' 0
|   |-WhileStmt 0x1f845e058d8 <line:794:5, line:798:5>
|   | |-BinaryOperator 0x1f845e05668 <line:794:12, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845e05650 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e05608 <col:12> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   | | `-IntegerLiteral 0x1f845e05628 <col:21> 'int' 0
|   | `-CompoundStmt 0x1f845e058b8 <col:24, line:798:5>
|   |   |-IfStmt 0x1f845e05868 <line:795:9, line:796:20>
|   |   | |-UnaryOperator 0x1f845e05818 <line:795:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1f845e05770 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1f845e05758 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1f845e05688 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1f845ddc2a0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1f845e057b8 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e056c0 <col:26> 'char **' lvalue ParmVar 0x1f845eb2fd8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845e057d0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e056e0 <col:35> 'char **' lvalue ParmVar 0x1f845eb3058 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1f845e057e8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e05700 <col:43> 'size_t *' lvalue ParmVar 0x1f845dfd680 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1f845e05800 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1f845e05720 <col:52> 'size_t *' lvalue ParmVar 0x1f845dfd6f8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1f845e05740 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1f845e05858 <line:796:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845e05830 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1f845e058a0 <line:797:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1f845e05880 <col:11> 'int' lvalue Var 0x1f845dfe330 'padlen' 'int'
|   `-ReturnStmt 0x1f845e05918 <line:799:5, col:12>
|     `-IntegerLiteral 0x1f845e058f0 <col:12> 'int' 1
|-FunctionDecl 0x1f845e05df8 prev 0x1f845ddc2a0 <line:804:1, line:845:1> line:805:1 used doapr_outch 'int (char **, char **, size_t *, size_t *, int)' static
| |-ParmVarDecl 0x1f845e05ad8 <col:13, col:20> col:20 used sbuffer 'char **'
| |-ParmVarDecl 0x1f845e05b58 <line:806:13, col:20> col:20 used buffer 'char **'
| |-ParmVarDecl 0x1f845e05bd0 <col:28, col:36> col:36 used currlen 'size_t *'
| |-ParmVarDecl 0x1f845e05c48 <col:45, col:53> col:53 used maxlen 'size_t *'
| |-ParmVarDecl 0x1f845e05cc8 <col:61, col:65> col:65 used c 'int'
| `-CompoundStmt 0x1f845e07d38 <line:807:1, line:845:1>
|   |-CallExpr 0x1f845e06250 <line:809:5, col:54> 'int'
|   | |-ImplicitCastExpr 0x1f845e06238 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f845e05fb0 <col:5> 'int ()' Function 0x1f845e05ee8 'OPENSSL_assert' 'int ()'
|   | `-BinaryOperator 0x1f845e061f0 <col:20, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '||'
|   |   |-BinaryOperator 0x1f845e060d8 <.//openssl//file_jk/after\crypto\bio\b_print.c:809:20, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |   | |-ImplicitCastExpr 0x1f845e060a8 <.//openssl//file_jk/after\crypto\bio\b_print.c:809:20, col:21> 'char *' <LValueToRValue>
|   |   | | `-UnaryOperator 0x1f845e06008 <col:20, col:21> 'char *' lvalue prefix '*' cannot overflow
|   |   | |   `-ImplicitCastExpr 0x1f845e05ff0 <col:21> 'char **' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x1f845e05fd0 <col:21> 'char **' lvalue ParmVar 0x1f845e05ad8 'sbuffer' 'char **'
|   |   | `-ImplicitCastExpr 0x1f845e060c0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |   |   `-ParenExpr 0x1f845e06088 <col:17, col:27> 'void *'
|   |   |     `-CStyleCastExpr 0x1f845e06060 <col:18, col:26> 'void *' <NullToPointer>
|   |   |       `-IntegerLiteral 0x1f845e06020 <col:26> 'int' 0
|   |   `-BinaryOperator 0x1f845e061d0 <.//openssl//file_jk/after\crypto\bio\b_print.c:809:40, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |     |-ImplicitCastExpr 0x1f845e061a0 <.//openssl//file_jk/after\crypto\bio\b_print.c:809:40> 'char **' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1f845e060f8 <col:40> 'char **' lvalue ParmVar 0x1f845e05b58 'buffer' 'char **'
|   |     `-ImplicitCastExpr 0x1f845e061b8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   |       `-ParenExpr 0x1f845e06180 <col:17, col:27> 'void *'
|   |         `-CStyleCastExpr 0x1f845e06158 <col:18, col:26> 'void *' <NullToPointer>
|   |           `-IntegerLiteral 0x1f845e06118 <col:26> 'int' 0
|   |-CallExpr 0x1f845e063a0 <.//openssl//file_jk/after\crypto\bio\b_print.c:812:5, col:39> 'int'
|   | |-ImplicitCastExpr 0x1f845e06388 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f845e06278 <col:5> 'int ()' Function 0x1f845e05ee8 'OPENSSL_assert' 'int ()'
|   | `-BinaryOperator 0x1f845e06368 <col:20, col:33> 'int' '<='
|   |   |-ImplicitCastExpr 0x1f845e06338 <col:20, col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-UnaryOperator 0x1f845e062d0 <col:20, col:21> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   |   `-ImplicitCastExpr 0x1f845e062b8 <col:21> 'size_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f845e06298 <col:21> 'size_t *' lvalue ParmVar 0x1f845e05bd0 'currlen' 'size_t *'
|   |   `-ImplicitCastExpr 0x1f845e06350 <col:32, col:33> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1f845e06320 <col:32, col:33> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1f845e06308 <col:33> 'size_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f845e062e8 <col:33> 'size_t *' lvalue ParmVar 0x1f845e05c48 'maxlen' 'size_t *'
|   |-IfStmt 0x1f845e07788 <line:814:5, line:835:5>
|   | |-BinaryOperator 0x1f845e06520 <line:814:9, col:32> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1f845e06508 <col:9> 'char **' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f845e063c8 <col:9> 'char **' lvalue ParmVar 0x1f845e05b58 'buffer' 'char **'
|   | | `-BinaryOperator 0x1f845e064e8 <col:19, col:32> 'int' '=='
|   | |   |-ImplicitCastExpr 0x1f845e064b8 <col:19, col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   | `-UnaryOperator 0x1f845e06450 <col:19, col:20> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |   |   `-ImplicitCastExpr 0x1f845e06438 <col:20> 'size_t *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f845e06418 <col:20> 'size_t *' lvalue ParmVar 0x1f845e05bd0 'currlen' 'size_t *'
|   | |   `-ImplicitCastExpr 0x1f845e064d0 <col:31, col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   | |     `-UnaryOperator 0x1f845e064a0 <col:31, col:32> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1f845e06488 <col:32> 'size_t *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1f845e06468 <col:32> 'size_t *' lvalue ParmVar 0x1f845e05c48 'maxlen' 'size_t *'
|   | `-CompoundStmt 0x1f845e07760 <col:40, line:835:5>
|   |   |-IfStmt 0x1f845e06608 <line:815:9, line:816:20>
|   |   | |-OpaqueValueExpr 0x1f845e065f0 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x1f845e065e0 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x1f845e065b8 <col:20> 'int' 0
|   |   |-CompoundAssignOperator 0x1f845e066b0 <line:818:9, line:802:21> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-UnaryOperator 0x1f845e06658 <line:818:9, col:10> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1f845e06640 <col:10> 'size_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1f845e06620 <col:10> 'size_t *' lvalue ParmVar 0x1f845e05c48 'maxlen' 'size_t *'
|   |   | `-ImplicitCastExpr 0x1f845e06698 <line:802:21> 'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1f845e06670 <col:21> 'int' 1024
|   |   `-IfStmt 0x1f845e07738 <line:819:9, line:834:9> has_else
|   |     |-BinaryOperator 0x1f845e067e8 <line:819:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1f845e067b8 <.//openssl//file_jk/after\crypto\bio\b_print.c:819:13, col:14> 'char *' <LValueToRValue>
|   |     | | `-UnaryOperator 0x1f845e06718 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     | |   `-ImplicitCastExpr 0x1f845e06700 <col:14> 'char **' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x1f845e066e0 <col:14> 'char **' lvalue ParmVar 0x1f845e05b58 'buffer' 'char **'
|   |     | `-ImplicitCastExpr 0x1f845e067d0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     |   `-ParenExpr 0x1f845e06798 <col:17, col:27> 'void *'
|   |     |     `-CStyleCastExpr 0x1f845e06770 <col:18, col:26> 'void *' <NullToPointer>
|   |     |       `-IntegerLiteral 0x1f845e06730 <col:26> 'int' 0
|   |     |-CompoundStmt 0x1f845e071a8 <.//openssl//file_jk/after\crypto\bio\b_print.c:819:30, line:828:9>
|   |     | |-BinaryOperator 0x1f845e06a28 <line:820:13, col:45> 'char *' '='
|   |     | | |-UnaryOperator 0x1f845e06840 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     | | | `-ImplicitCastExpr 0x1f845e06828 <col:14> 'char **' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x1f845e06808 <col:14> 'char **' lvalue ParmVar 0x1f845e05b58 'buffer' 'char **'
|   |     | | `-ImplicitCastExpr 0x1f845e06a10 <col:23, col:45> 'char *' <IntegralToPointer>
|   |     | |   `-CallExpr 0x1f845e069d0 <col:23, col:45> 'int'
|   |     | |     |-ImplicitCastExpr 0x1f845e069b8 <col:23> 'int (*)()' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x1f845e06948 <col:23> 'int ()' Function 0x1f845e06880 'OPENSSL_malloc' 'int ()'
|   |     | |     `-ImplicitCastExpr 0x1f845e069f8 <col:38, col:39> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       `-UnaryOperator 0x1f845e069a0 <col:38, col:39> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |         `-ImplicitCastExpr 0x1f845e06988 <col:39> 'size_t *' <LValueToRValue>
|   |     | |           `-DeclRefExpr 0x1f845e06968 <col:39> 'size_t *' lvalue ParmVar 0x1f845e05c48 'maxlen' 'size_t *'
|   |     | |-IfStmt 0x1f845e06ba8 <line:821:13, line:822:24>
|   |     | | |-BinaryOperator 0x1f845e06b50 <line:821:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |     | | | |-ImplicitCastExpr 0x1f845e06b20 <.//openssl//file_jk/after\crypto\bio\b_print.c:821:17, col:18> 'char *' <LValueToRValue>
|   |     | | | | `-UnaryOperator 0x1f845e06a80 <col:17, col:18> 'char *' lvalue prefix '*' cannot overflow
|   |     | | | |   `-ImplicitCastExpr 0x1f845e06a68 <col:18> 'char **' <LValueToRValue>
|   |     | | | |     `-DeclRefExpr 0x1f845e06a48 <col:18> 'char **' lvalue ParmVar 0x1f845e05b58 'buffer' 'char **'
|   |     | | | `-ImplicitCastExpr 0x1f845e06b38 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     | | |   `-ParenExpr 0x1f845e06b00 <col:17, col:27> 'void *'
|   |     | | |     `-CStyleCastExpr 0x1f845e06ad8 <col:18, col:26> 'void *' <NullToPointer>
|   |     | | |       `-IntegerLiteral 0x1f845e06a98 <col:26> 'int' 0
|   |     | | `-ReturnStmt 0x1f845e06b98 <.//openssl//file_jk/after\crypto\bio\b_print.c:822:17, col:24>
|   |     | |   `-IntegerLiteral 0x1f845e06b70 <col:24> 'int' 0
|   |     | |-IfStmt 0x1f845e07080 <line:823:13, line:826:13>
|   |     | | |-BinaryOperator 0x1f845e06c68 <line:823:17, col:28> 'int' '>'
|   |     | | | |-ImplicitCastExpr 0x1f845e06c38 <col:17, col:18> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | | `-UnaryOperator 0x1f845e06bf8 <col:17, col:18> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | | | |   `-ImplicitCastExpr 0x1f845e06be0 <col:18> 'size_t *' <LValueToRValue>
|   |     | | | |     `-DeclRefExpr 0x1f845e06bc0 <col:18> 'size_t *' lvalue ParmVar 0x1f845e05bd0 'currlen' 'size_t *'
|   |     | | | `-ImplicitCastExpr 0x1f845e06c50 <col:28> 'unsigned long long' <IntegralCast>
|   |     | | |   `-IntegerLiteral 0x1f845e06c10 <col:28> 'int' 0
|   |     | | `-CompoundStmt 0x1f845e07060 <col:31, line:826:13>
|   |     | |   |-CallExpr 0x1f845e06de8 <line:824:17, col:48> 'int'
|   |     | |   | |-ImplicitCastExpr 0x1f845e06dd0 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |     | |   | | `-DeclRefExpr 0x1f845e06c88 <col:17> 'int ()' Function 0x1f845e05ee8 'OPENSSL_assert' 'int ()'
|   |     | |   | `-BinaryOperator 0x1f845e06db0 <col:32, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |     | |   |   |-ImplicitCastExpr 0x1f845e06d80 <.//openssl//file_jk/after\crypto\bio\b_print.c:824:32, col:33> 'char *' <LValueToRValue>
|   |     | |   |   | `-UnaryOperator 0x1f845e06ce0 <col:32, col:33> 'char *' lvalue prefix '*' cannot overflow
|   |     | |   |   |   `-ImplicitCastExpr 0x1f845e06cc8 <col:33> 'char **' <LValueToRValue>
|   |     | |   |   |     `-DeclRefExpr 0x1f845e06ca8 <col:33> 'char **' lvalue ParmVar 0x1f845e05ad8 'sbuffer' 'char **'
|   |     | |   |   `-ImplicitCastExpr 0x1f845e06d98 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     | |   |     `-ParenExpr 0x1f845e06d60 <col:17, col:27> 'void *'
|   |     | |   |       `-CStyleCastExpr 0x1f845e06d38 <col:18, col:26> 'void *' <NullToPointer>
|   |     | |   |         `-IntegerLiteral 0x1f845e06cf8 <col:26> 'int' 0
|   |     | |   `-CallExpr 0x1f845e06fb0 <.//openssl//file_jk/after\crypto\bio\b_print.c:825:17, col:51> 'void *'
|   |     | |     |-ImplicitCastExpr 0x1f845e06f98 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x1f845e06e10 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x1f845d79d48 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |     | |     |-ImplicitCastExpr 0x1f845e07000 <col:24, col:25> 'void *' <BitCast>
|   |     | |     | `-ImplicitCastExpr 0x1f845e06fe8 <col:24, col:25> 'char *' <LValueToRValue>
|   |     | |     |   `-UnaryOperator 0x1f845e06e68 <col:24, col:25> 'char *' lvalue prefix '*' cannot overflow
|   |     | |     |     `-ImplicitCastExpr 0x1f845e06e50 <col:25> 'char **' <LValueToRValue>
|   |     | |     |       `-DeclRefExpr 0x1f845e06e30 <col:25> 'char **' lvalue ParmVar 0x1f845e05b58 'buffer' 'char **'
|   |     | |     |-ImplicitCastExpr 0x1f845e07030 <col:33, col:34> 'const void *' <BitCast>
|   |     | |     | `-ImplicitCastExpr 0x1f845e07018 <col:33, col:34> 'char *' <LValueToRValue>
|   |     | |     |   `-UnaryOperator 0x1f845e06eb8 <col:33, col:34> 'char *' lvalue prefix '*' cannot overflow
|   |     | |     |     `-ImplicitCastExpr 0x1f845e06ea0 <col:34> 'char **' <LValueToRValue>
|   |     | |     |       `-DeclRefExpr 0x1f845e06e80 <col:34> 'char **' lvalue ParmVar 0x1f845e05ad8 'sbuffer' 'char **'
|   |     | |     `-ImplicitCastExpr 0x1f845e07048 <col:43, col:44> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       `-UnaryOperator 0x1f845e06f08 <col:43, col:44> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |         `-ImplicitCastExpr 0x1f845e06ef0 <col:44> 'size_t *' <LValueToRValue>
|   |     | |           `-DeclRefExpr 0x1f845e06ed0 <col:44> 'size_t *' lvalue ParmVar 0x1f845e05bd0 'currlen' 'size_t *'
|   |     | `-BinaryOperator 0x1f845e07188 <line:827:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'char *' '='
|   |     |   |-UnaryOperator 0x1f845e070d0 <.//openssl//file_jk/after\crypto\bio\b_print.c:827:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     |   | `-ImplicitCastExpr 0x1f845e070b8 <col:14> 'char **' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x1f845e07098 <col:14> 'char **' lvalue ParmVar 0x1f845e05ad8 'sbuffer' 'char **'
|   |     |   `-ImplicitCastExpr 0x1f845e07170 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     |     `-ParenExpr 0x1f845e07150 <col:17, col:27> 'void *'
|   |     |       `-CStyleCastExpr 0x1f845e07128 <col:18, col:26> 'void *' <NullToPointer>
|   |     |         `-IntegerLiteral 0x1f845e070e8 <col:26> 'int' 0
|   |     `-CompoundStmt 0x1f845e07708 <.//openssl//file_jk/after\crypto\bio\b_print.c:828:16, line:834:9>
|   |       |-DeclStmt 0x1f845e07258 <line:829:13, col:25>
|   |       | `-VarDecl 0x1f845e071f0 <col:13, col:19> col:19 used tmpbuf 'char *'
|   |       |-BinaryOperator 0x1f845e074e8 <line:830:13, col:54> 'char *' '='
|   |       | |-DeclRefExpr 0x1f845e07270 <col:13> 'char *' lvalue Var 0x1f845e071f0 'tmpbuf' 'char *'
|   |       | `-ImplicitCastExpr 0x1f845e074d0 <col:22, col:54> 'char *' <IntegralToPointer>
|   |       |   `-CallExpr 0x1f845e07470 <col:22, col:54> 'int'
|   |       |     |-ImplicitCastExpr 0x1f845e07458 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |       |     | `-DeclRefExpr 0x1f845e07398 <col:22> 'int ()' Function 0x1f845e072d0 'OPENSSL_realloc' 'int ()'
|   |       |     |-ImplicitCastExpr 0x1f845e074a0 <col:38, col:39> 'char *' <LValueToRValue>
|   |       |     | `-UnaryOperator 0x1f845e073f0 <col:38, col:39> 'char *' lvalue prefix '*' cannot overflow
|   |       |     |   `-ImplicitCastExpr 0x1f845e073d8 <col:39> 'char **' <LValueToRValue>
|   |       |     |     `-DeclRefExpr 0x1f845e073b8 <col:39> 'char **' lvalue ParmVar 0x1f845e05b58 'buffer' 'char **'
|   |       |     `-ImplicitCastExpr 0x1f845e074b8 <col:47, col:48> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |       `-UnaryOperator 0x1f845e07440 <col:47, col:48> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |         `-ImplicitCastExpr 0x1f845e07428 <col:48> 'size_t *' <LValueToRValue>
|   |       |           `-DeclRefExpr 0x1f845e07408 <col:48> 'size_t *' lvalue ParmVar 0x1f845e05c48 'maxlen' 'size_t *'
|   |       |-IfStmt 0x1f845e07638 <line:831:13, line:832:24>
|   |       | |-BinaryOperator 0x1f845e075e0 <line:831:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |       | | |-ImplicitCastExpr 0x1f845e075b0 <.//openssl//file_jk/after\crypto\bio\b_print.c:831:17> 'char *' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x1f845e07508 <col:17> 'char *' lvalue Var 0x1f845e071f0 'tmpbuf' 'char *'
|   |       | | `-ImplicitCastExpr 0x1f845e075c8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |       | |   `-ParenExpr 0x1f845e07590 <col:17, col:27> 'void *'
|   |       | |     `-CStyleCastExpr 0x1f845e07568 <col:18, col:26> 'void *' <NullToPointer>
|   |       | |       `-IntegerLiteral 0x1f845e07528 <col:26> 'int' 0
|   |       | `-ReturnStmt 0x1f845e07628 <.//openssl//file_jk/after\crypto\bio\b_print.c:832:17, col:24>
|   |       |   `-IntegerLiteral 0x1f845e07600 <col:24> 'int' 0
|   |       `-BinaryOperator 0x1f845e076e8 <line:833:13, col:23> 'char *' '='
|   |         |-UnaryOperator 0x1f845e07688 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |         | `-ImplicitCastExpr 0x1f845e07670 <col:14> 'char **' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x1f845e07650 <col:14> 'char **' lvalue ParmVar 0x1f845e05b58 'buffer' 'char **'
|   |         `-ImplicitCastExpr 0x1f845e076d0 <col:23> 'char *' <LValueToRValue>
|   |           `-DeclRefExpr 0x1f845e076a0 <col:23> 'char *' lvalue Var 0x1f845e071f0 'tmpbuf' 'char *'
|   |-IfStmt 0x1f845e07cb8 <line:837:5, line:842:5>
|   | |-BinaryOperator 0x1f845e07870 <line:837:9, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f845e07840 <col:9, col:10> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-UnaryOperator 0x1f845e077d8 <col:9, col:10> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | |   `-ImplicitCastExpr 0x1f845e077c0 <col:10> 'size_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1f845e077a0 <col:10> 'size_t *' lvalue ParmVar 0x1f845e05bd0 'currlen' 'size_t *'
|   | | `-ImplicitCastExpr 0x1f845e07858 <col:20, col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-UnaryOperator 0x1f845e07828 <col:20, col:21> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x1f845e07810 <col:21> 'size_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1f845e077f0 <col:21> 'size_t *' lvalue ParmVar 0x1f845e05c48 'maxlen' 'size_t *'
|   | `-CompoundStmt 0x1f845e07ca0 <col:29, line:842:5>
|   |   `-IfStmt 0x1f845e07c78 <line:838:9, line:841:45> has_else
|   |     |-ImplicitCastExpr 0x1f845e078e0 <line:838:13, col:14> 'char *' <LValueToRValue>
|   |     | `-UnaryOperator 0x1f845e078c8 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     |   `-ImplicitCastExpr 0x1f845e078b0 <col:14> 'char **' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x1f845e07890 <col:14> 'char **' lvalue ParmVar 0x1f845e05ad8 'sbuffer' 'char **'
|   |     |-BinaryOperator 0x1f845e07a98 <line:839:13, col:46> 'char' '='
|   |     | |-ArraySubscriptExpr 0x1f845e07a08 <col:13, col:36> 'char' lvalue
|   |     | | |-ImplicitCastExpr 0x1f845e079f0 <col:13, col:22> 'char *' <LValueToRValue>
|   |     | | | `-ParenExpr 0x1f845e07948 <col:13, col:22> 'char *' lvalue
|   |     | | |   `-UnaryOperator 0x1f845e07930 <col:14, col:15> 'char *' lvalue prefix '*' cannot overflow
|   |     | | |     `-ImplicitCastExpr 0x1f845e07918 <col:15> 'char **' <LValueToRValue>
|   |     | | |       `-DeclRefExpr 0x1f845e078f8 <col:15> 'char **' lvalue ParmVar 0x1f845e05ad8 'sbuffer' 'char **'
|   |     | | `-UnaryOperator 0x1f845e079d8 <col:24, col:34> 'size_t':'unsigned long long' postfix '++'
|   |     | |   `-ParenExpr 0x1f845e079b8 <col:24, col:33> 'size_t':'unsigned long long' lvalue
|   |     | |     `-UnaryOperator 0x1f845e079a0 <col:25, col:26> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |       `-ImplicitCastExpr 0x1f845e07988 <col:26> 'size_t *' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x1f845e07968 <col:26> 'size_t *' lvalue ParmVar 0x1f845e05bd0 'currlen' 'size_t *'
|   |     | `-CStyleCastExpr 0x1f845e07a70 <col:40, col:46> 'char' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x1f845e07a58 <col:46> 'int' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x1f845e07a28 <col:46> 'int' lvalue ParmVar 0x1f845e05cc8 'c' 'int'
|   |     `-BinaryOperator 0x1f845e07c58 <line:841:13, col:45> 'char' '='
|   |       |-ArraySubscriptExpr 0x1f845e07bc8 <col:13, col:35> 'char' lvalue
|   |       | |-ImplicitCastExpr 0x1f845e07bb0 <col:13, col:21> 'char *' <LValueToRValue>
|   |       | | `-ParenExpr 0x1f845e07b08 <col:13, col:21> 'char *' lvalue
|   |       | |   `-UnaryOperator 0x1f845e07af0 <col:14, col:15> 'char *' lvalue prefix '*' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x1f845e07ad8 <col:15> 'char **' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x1f845e07ab8 <col:15> 'char **' lvalue ParmVar 0x1f845e05b58 'buffer' 'char **'
|   |       | `-UnaryOperator 0x1f845e07b98 <col:23, col:33> 'size_t':'unsigned long long' postfix '++'
|   |       |   `-ParenExpr 0x1f845e07b78 <col:23, col:32> 'size_t':'unsigned long long' lvalue
|   |       |     `-UnaryOperator 0x1f845e07b60 <col:24, col:25> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |       `-ImplicitCastExpr 0x1f845e07b48 <col:25> 'size_t *' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x1f845e07b28 <col:25> 'size_t *' lvalue ParmVar 0x1f845e05bd0 'currlen' 'size_t *'
|   |       `-CStyleCastExpr 0x1f845e07c30 <col:39, col:45> 'char' <IntegralCast>
|   |         `-ImplicitCastExpr 0x1f845e07c18 <col:45> 'int' <LValueToRValue> part_of_explicit_cast
|   |           `-DeclRefExpr 0x1f845e07be8 <col:45> 'int' lvalue ParmVar 0x1f845e05cc8 'c' 'int'
|   `-ReturnStmt 0x1f845e07cf8 <line:844:5, col:12>
|     `-IntegerLiteral 0x1f845e07cd0 <col:12> 'int' 1
|-FunctionDecl 0x1f845e07ee8 <line:849:1, line:860:1> line:849:5 invalid BIO_printf 'int (int *, const char *, ...)'
| |-ParmVarDecl 0x1f845e07d88 <col:16, col:21> col:21 invalid bio 'int *'
| |-ParmVarDecl 0x1f845e07e08 <col:26, col:38> col:38 used format 'const char *'
| |-CompoundStmt 0x1f845e08738 <line:850:1, line:860:1>
| | |-DeclStmt 0x1f845e08028 <line:851:5, col:17>
| | | `-VarDecl 0x1f845e07fc0 <col:5, col:13> col:13 used args 'va_list':'char *'
| | |-DeclStmt 0x1f845e080c0 <line:852:5, col:12>
| | | `-VarDecl 0x1f845e08058 <col:5, col:9> col:9 used ret 'int'
| | |-CallExpr 0x1f845e08300 <line:854:5, col:26> 'void'
| | | |-ImplicitCastExpr 0x1f845e082e8 <col:5> 'void (*)(__builtin_va_list &, ...)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1f845e08240 <col:5> 'void (__builtin_va_list &, ...)' Function 0x1f845e080d8 'va_start' 'void (__builtin_va_list &, ...)'
| | | |-DeclRefExpr 0x1f845e08278 <col:14> 'va_list':'char *' lvalue Var 0x1f845e07fc0 'args' 'va_list':'char *'
| | | `-ImplicitCastExpr 0x1f845e08330 <col:20> 'const char *' <LValueToRValue>
| | |   `-DeclRefExpr 0x1f845e082b0 <col:20> 'const char *' lvalue ParmVar 0x1f845e07e08 'format' 'const char *'
| | |-CallExpr 0x1f845e086a8 <line:858:5, col:16> 'void'
| | | |-ImplicitCastExpr 0x1f845e08690 <col:5> 'void (*)(__builtin_va_list &)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1f845e08638 <col:5> 'void (__builtin_va_list &)' Function 0x1f845e084d0 'va_end' 'void (__builtin_va_list &)'
| | | `-DeclRefExpr 0x1f845e08670 <col:12> 'va_list':'char *' lvalue Var 0x1f845e07fc0 'args' 'va_list':'char *'
| | `-ReturnStmt 0x1f845e08728 <line:859:5, col:16>
| |   `-ImplicitCastExpr 0x1f845e08710 <col:12, col:16> 'int' <LValueToRValue>
| |     `-ParenExpr 0x1f845e086f0 <col:12, col:16> 'int' lvalue
| |       `-DeclRefExpr 0x1f845e086d0 <col:13> 'int' lvalue Var 0x1f845e08058 'ret' 'int'
| `-FullComment 0x1f845e0c5c8 <line:847:4, col:75>
|   `-ParagraphComment 0x1f845e0c5a0 <col:4, col:75>
|     `-TextComment 0x1f845e0c578 <col:4, col:75> Text="************************************************************************"
|-FunctionDecl 0x1f845e080d8 <line:854:5> col:5 implicit used va_start 'void (__builtin_va_list &, ...)' extern
| |-ParmVarDecl 0x1f845e08178 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1f845e081e8 <col:5> Implicit
|-FunctionDecl 0x1f845e084d0 <line:858:5> col:5 implicit used va_end 'void (__builtin_va_list &)' extern
| |-ParmVarDecl 0x1f845e08570 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1f845e085e0 <col:5> Implicit
|-FunctionDecl 0x1f845e089b0 <line:862:1, line:887:1> line:862:5 invalid BIO_vprintf 'int (int *, const char *, va_list)'
| |-ParmVarDecl 0x1f845e08788 <col:17, col:22> col:22 invalid bio 'int *'
| |-ParmVarDecl 0x1f845e08808 <col:27, col:39> col:39 used format 'const char *'
| |-ParmVarDecl 0x1f845e08880 <col:47, col:55> col:55 used args 'va_list':'char *'
| `-CompoundStmt 0x1f845e0a130 <line:863:1, line:887:1>
|   |-DeclStmt 0x1f845e08b00 <line:864:5, col:12>
|   | `-VarDecl 0x1f845e08a98 <col:5, col:9> col:9 used ret 'int'
|   |-DeclStmt 0x1f845e08b90 <line:865:5, col:18>
|   | `-VarDecl 0x1f845e08b28 <col:5, col:12> col:12 used retlen 'size_t':'unsigned long long'
|   |-DeclStmt 0x1f845e08cf0 <line:866:5, col:27>
|   | `-VarDecl 0x1f845e08c88 <col:5, col:26> col:10 used hugebuf 'char [2048]'
|   |-DeclStmt 0x1f845e08dd8 <line:869:5, col:29>
|   | `-VarDecl 0x1f845e08d20 <col:5, col:22> col:11 used hugebufp 'char *' cinit
|   |   `-ImplicitCastExpr 0x1f845e08dc0 <col:22> 'char *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1f845e08d88 <col:22> 'char [2048]' lvalue Var 0x1f845e08c88 'hugebuf' 'char [2048]'
|   |-DeclStmt 0x1f845e08ec8 <line:870:5, col:41>
|   | `-VarDecl 0x1f845e08e00 <col:5, col:40> col:12 used hugebufsize 'size_t':'unsigned long long' cinit
|   |   `-UnaryExprOrTypeTraitExpr 0x1f845e08ea8 <col:26, col:40> 'unsigned long long' sizeof
|   |     `-ParenExpr 0x1f845e08e88 <col:32, col:40> 'char [2048]' lvalue
|   |       `-DeclRefExpr 0x1f845e08e68 <col:33> 'char [2048]' lvalue Var 0x1f845e08c88 'hugebuf' 'char [2048]' non_odr_use_unevaluated
|   |-DeclStmt 0x1f845e09000 <line:871:5, col:24>
|   | `-VarDecl 0x1f845e08ef8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> .//openssl//file_jk/after\crypto\bio\b_print.c:871:11 used dynbuf 'char *' cinit
|   |   `-ImplicitCastExpr 0x1f845e08fe8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     `-ParenExpr 0x1f845e08fc8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1f845e08fa0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1f845e08f60 <col:26> 'int' 0
|   |-DeclStmt 0x1f845e09098 <.//openssl//file_jk/after\crypto\bio\b_print.c:872:5, col:16>
|   | `-VarDecl 0x1f845e09030 <col:5, col:9> col:9 used ignored 'int'
|   |-BinaryOperator 0x1f845e09188 <line:874:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'char *' '='
|   | |-DeclRefExpr 0x1f845e090b0 <.//openssl//file_jk/after\crypto\bio\b_print.c:874:5> 'char *' lvalue Var 0x1f845e08ef8 'dynbuf' 'char *'
|   | `-ImplicitCastExpr 0x1f845e09170 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |   `-ParenExpr 0x1f845e09150 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x1f845e09128 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x1f845e090e8 <col:26> 'int' 0
|   |-IfStmt 0x1f845e096b8 <.//openssl//file_jk/after\crypto\bio\b_print.c:875:5, line:879:5>
|   | |-UnaryOperator 0x1f845e094a8 <line:875:9, line:876:21> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1f845e09420 <line:875:10, line:876:21> 'int'
|   | |   |-ImplicitCastExpr 0x1f845e09408 <line:875:10> 'int (*)(char **, char **, size_t *, size_t *, int *, const char *, va_list)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1f845e091a8 <col:10> 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' Function 0x1f845de1ed0 '_dopr' 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)'
|   | |   |-UnaryOperator 0x1f845e09200 <col:16, col:17> 'char **' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f845e091c8 <col:17> 'char *' lvalue Var 0x1f845e08d20 'hugebufp' 'char *'
|   | |   |-UnaryOperator 0x1f845e09238 <col:27, col:28> 'char **' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f845e09218 <col:28> 'char *' lvalue Var 0x1f845e08ef8 'dynbuf' 'char *'
|   | |   |-UnaryOperator 0x1f845e09288 <col:36, col:37> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f845e09250 <col:37> 'size_t':'unsigned long long' lvalue Var 0x1f845e08e00 'hugebufsize' 'size_t':'unsigned long long'
|   | |   |-UnaryOperator 0x1f845e092d8 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f845e092a0 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1f845e08b28 'retlen' 'size_t':'unsigned long long'
|   | |   |-UnaryOperator 0x1f845e09328 <col:59, col:60> 'int *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f845e092f0 <col:60> 'int' lvalue Var 0x1f845e09030 'ignored' 'int'
|   | |   |-ImplicitCastExpr 0x1f845e09478 <col:69> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1f845e09340 <col:69> 'const char *' lvalue ParmVar 0x1f845e08808 'format' 'const char *'
|   | |   `-ImplicitCastExpr 0x1f845e09490 <line:876:17> 'va_list':'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1f845e09378 <col:17> 'va_list':'char *' lvalue ParmVar 0x1f845e08880 'args' 'va_list':'char *'
|   | `-CompoundStmt 0x1f845e09698 <col:24, line:879:5>
|   |   |-CallExpr 0x1f845e09608 <line:877:9, col:28> 'int'
|   |   | |-ImplicitCastExpr 0x1f845e095f0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1f845e095b0 <col:9> 'int ()' Function 0x1f845e094e8 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x1f845e09630 <col:22> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1f845e095d0 <col:22> 'char *' lvalue Var 0x1f845e08ef8 'dynbuf' 'char *'
|   |   `-ReturnStmt 0x1f845e09688 <line:878:9, col:17>
|   |     `-UnaryOperator 0x1f845e09670 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1f845e09648 <col:17> 'int' 1
|   |-IfStmt 0x1f845e0a0a0 <line:880:5, line:885:5> has_else
|   | |-ImplicitCastExpr 0x1f845e09d10 <line:880:9> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f845e09cf0 <col:9> 'char *' lvalue Var 0x1f845e08ef8 'dynbuf' 'char *'
|   | |-CompoundStmt 0x1f845e09fa0 <col:17, line:883:5>
|   | | `-CallExpr 0x1f845e09f60 <line:882:9, col:28> 'int'
|   | |   |-ImplicitCastExpr 0x1f845e09f48 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1f845e09f08 <col:9> 'int ()' Function 0x1f845e094e8 'OPENSSL_free' 'int ()'
|   | |   `-ImplicitCastExpr 0x1f845e09f88 <col:22> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1f845e09f28 <col:22> 'char *' lvalue Var 0x1f845e08ef8 'dynbuf' 'char *'
|   | `-CompoundStmt 0x1f845e0a090 <line:883:12, line:885:5>
|   `-ReturnStmt 0x1f845e0a120 <line:886:5, col:16>
|     `-ImplicitCastExpr 0x1f845e0a108 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1f845e0a0e8 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1f845e0a0c8 <col:13> 'int' lvalue Var 0x1f845e08a98 'ret' 'int'
|-FunctionDecl 0x1f845e0a398 <line:895:1, line:906:1> line:895:5 BIO_snprintf 'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1f845e0a1b0 <col:18, col:24> col:24 used buf 'char *'
| |-ParmVarDecl 0x1f845e0a228 <col:29, col:36> col:36 used n 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f845e0a2a8 <col:39, col:51> col:51 used format 'const char *'
| `-CompoundStmt 0x1f845e0a9f0 <line:896:1, line:906:1>
|   |-DeclStmt 0x1f845e0a4e0 <line:897:5, col:17>
|   | `-VarDecl 0x1f845e0a478 <col:5, col:13> col:13 used args 'va_list':'char *'
|   |-DeclStmt 0x1f845e0a578 <line:898:5, col:12>
|   | `-VarDecl 0x1f845e0a510 <col:5, col:9> col:9 used ret 'int'
|   |-CallExpr 0x1f845e0a620 <line:900:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1f845e0a608 <col:5> 'void (*)(__builtin_va_list &, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f845e0a590 <col:5> 'void (__builtin_va_list &, ...)' Function 0x1f845e080d8 'va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1f845e0a5b0 <col:14> 'va_list':'char *' lvalue Var 0x1f845e0a478 'args' 'va_list':'char *'
|   | `-ImplicitCastExpr 0x1f845e0a650 <col:20> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f845e0a5e8 <col:20> 'const char *' lvalue ParmVar 0x1f845e0a2a8 'format' 'const char *'
|   |-BinaryOperator 0x1f845e0a8e8 <line:902:5, col:45> 'int' '='
|   | |-DeclRefExpr 0x1f845e0a668 <col:5> 'int' lvalue Var 0x1f845e0a510 'ret' 'int'
|   | `-CallExpr 0x1f845e0a848 <col:11, col:45> 'int'
|   |   |-ImplicitCastExpr 0x1f845e0a830 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f845e0a790 <col:11> 'int ()' Function 0x1f845e0a6c8 'BIO_vsnprintf' 'int ()'
|   |   |-ImplicitCastExpr 0x1f845e0a888 <col:25> 'char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845e0a7b0 <col:25> 'char *' lvalue ParmVar 0x1f845e0a1b0 'buf' 'char *'
|   |   |-ImplicitCastExpr 0x1f845e0a8a0 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845e0a7d0 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x1f845e0a228 'n' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1f845e0a8b8 <col:33> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f845e0a7f0 <col:33> 'const char *' lvalue ParmVar 0x1f845e0a2a8 'format' 'const char *'
|   |   `-ImplicitCastExpr 0x1f845e0a8d0 <col:41> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f845e0a810 <col:41> 'va_list':'char *' lvalue Var 0x1f845e0a478 'args' 'va_list':'char *'
|   |-CallExpr 0x1f845e0a960 <line:904:5, col:16> 'void'
|   | |-ImplicitCastExpr 0x1f845e0a948 <col:5> 'void (*)(__builtin_va_list &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f845e0a908 <col:5> 'void (__builtin_va_list &)' Function 0x1f845e084d0 'va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1f845e0a928 <col:12> 'va_list':'char *' lvalue Var 0x1f845e0a478 'args' 'va_list':'char *'
|   `-ReturnStmt 0x1f845e0a9e0 <line:905:5, col:16>
|     `-ImplicitCastExpr 0x1f845e0a9c8 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1f845e0a9a8 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1f845e0a988 <col:13> 'int' lvalue Var 0x1f845e0a510 'ret' 'int'
`-FunctionDecl 0x1f845e0acc8 prev 0x1f845e0a6c8 <line:908:1, line:926:1> line:908:5 used BIO_vsnprintf 'int (char *, size_t, const char *, va_list)'
  |-ParmVarDecl 0x1f845e0aa48 <col:19, col:25> col:25 used buf 'char *'
  |-ParmVarDecl 0x1f845e0aac0 <col:30, col:37> col:37 used n 'size_t':'unsigned long long'
  |-ParmVarDecl 0x1f845e0ab40 <col:40, col:52> col:52 used format 'const char *'
  |-ParmVarDecl 0x1f845e0abb8 <col:60, col:68> col:68 used args 'va_list':'char *'
  `-CompoundStmt 0x1f845e0b370 <line:909:1, line:926:1>
    |-DeclStmt 0x1f845e0ae00 <line:910:5, col:18>
    | `-VarDecl 0x1f845e0ad98 <col:5, col:12> col:12 used retlen 'size_t':'unsigned long long'
    |-DeclStmt 0x1f845e0ae98 <line:911:5, col:18>
    | `-VarDecl 0x1f845e0ae30 <col:5, col:9> col:9 used truncated 'int'
    |-IfStmt 0x1f845e0b1c8 <line:913:5, line:914:17>
    | |-UnaryOperator 0x1f845e0b160 <line:913:8, col:64> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x1f845e0b0c0 <col:9, col:64> 'int'
    | |   |-ImplicitCastExpr 0x1f845e0b0a8 <col:9> 'int (*)(char **, char **, size_t *, size_t *, int *, const char *, va_list)' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x1f845e0aeb0 <col:9> 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' Function 0x1f845de1ed0 '_dopr' 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)'
    | |   |-UnaryOperator 0x1f845e0aef0 <col:15, col:16> 'char **' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1f845e0aed0 <col:16> 'char *' lvalue ParmVar 0x1f845e0aa48 'buf' 'char *'
    | |   |-ImplicitCastExpr 0x1f845e0b118 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <NullToPointer>
    | |   | `-ParenExpr 0x1f845e0af70 <col:17, col:27> 'void *'
    | |   |   `-CStyleCastExpr 0x1f845e0af48 <col:18, col:26> 'void *' <NullToPointer>
    | |   |     `-IntegerLiteral 0x1f845e0af08 <col:26> 'int' 0
    | |   |-UnaryOperator 0x1f845e0afb0 <.//openssl//file_jk/after\crypto\bio\b_print.c:913:27, col:28> 'size_t *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1f845e0af90 <col:28> 'size_t':'unsigned long long' lvalue ParmVar 0x1f845e0aac0 'n' 'size_t':'unsigned long long'
    | |   |-UnaryOperator 0x1f845e0b000 <col:31, col:32> 'size_t *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1f845e0afc8 <col:32> 'size_t':'unsigned long long' lvalue Var 0x1f845e0ad98 'retlen' 'size_t':'unsigned long long'
    | |   |-UnaryOperator 0x1f845e0b050 <col:40, col:41> 'int *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1f845e0b018 <col:41> 'int' lvalue Var 0x1f845e0ae30 'truncated' 'int'
    | |   |-ImplicitCastExpr 0x1f845e0b130 <col:52> 'const char *' <LValueToRValue>
    | |   | `-DeclRefExpr 0x1f845e0b068 <col:52> 'const char *' lvalue ParmVar 0x1f845e0ab40 'format' 'const char *'
    | |   `-ImplicitCastExpr 0x1f845e0b148 <col:60> 'va_list':'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1f845e0b088 <col:60> 'va_list':'char *' lvalue ParmVar 0x1f845e0abb8 'args' 'va_list':'char *'
    | `-ReturnStmt 0x1f845e0b1b8 <line:914:9, col:17>
    |   `-UnaryOperator 0x1f845e0b1a0 <col:16, col:17> 'int' prefix '-'
    |     `-IntegerLiteral 0x1f845e0b178 <col:17> 'int' 1
    `-IfStmt 0x1f845e0b348 <line:916:5, line:925:9> has_else
      |-ImplicitCastExpr 0x1f845e0b200 <line:916:9> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x1f845e0b1e0 <col:9> 'int' lvalue Var 0x1f845e0ae30 'truncated' 'int'
      |-ReturnStmt 0x1f845e0b258 <line:923:9, col:17>
      | `-UnaryOperator 0x1f845e0b240 <col:16, col:17> 'int' prefix '-'
      |   `-IntegerLiteral 0x1f845e0b218 <col:17> 'int' 1
      `-NullStmt 0x1f845e0b340 <line:925:9>
