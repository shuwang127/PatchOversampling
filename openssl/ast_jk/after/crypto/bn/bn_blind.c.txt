TranslationUnitDecl 0x162eaffd8f8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x162eaffe190 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x162eaffde90 '__int128'
|-TypedefDecl 0x162eaffe200 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x162eaffdeb0 'unsigned __int128'
|-TypedefDecl 0x162eaffe538 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x162eaffe2f0 'struct __NSConstantString_tag'
|   `-Record 0x162eaffe258 '__NSConstantString_tag'
|-TypedefDecl 0x162eaffe5a8 <<invalid sloc>> <invalid sloc> implicit referenced size_t 'unsigned long long'
| `-BuiltinType 0x162eaffdad0 'unsigned long long'
|-TypedefDecl 0x162eaffe640 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x162eaffe600 'char *'
|   `-BuiltinType 0x162eaffd990 'char'
|-TypedefDecl 0x162eaffe6b0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x162eaffe600 'char *'
|   `-BuiltinType 0x162eaffd990 'char'
|-FunctionDecl 0x162ec849840 <.//openssl//file_jk/after\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x162eaffe750 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x162eaffe7d0 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x162eaffe850 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x162ec849740 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x162ec849b48 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x162ec849918 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x162ec849998 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x162ec849a18 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x162ec849a98 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x162ec849e08 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x162ec849c20 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x162ec849ca0 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x162ec849d20 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x162ec84a0c0 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x162ec849ed8 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x162ec849f58 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x162ec849fd8 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x162ec84a410 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x162ec84a190 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x162ec84a210 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x162ec84a290 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x162ec84a310 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x162ec848730 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x162ec84a4e8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x162ec84a568 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x162ec84a5e8 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x162ec84a668 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x162ec8487f0 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x162ec8488c8 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x162ec848938 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x162ec8489a8 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x162ec848a18 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x162ec848a88 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x162ec848ae0 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x162ec848bb8 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x162ec848c28 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x162ec848c98 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x162ec848d08 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x162ec848e00 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x162ec848e70 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x162ec848ec8 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x162ec848f98 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x162ec849008 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x162ec849078 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x162ec8490e8 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x162ec849158 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x162ec8491b0 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x162ec849288 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x162ec8492f8 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x162ec849350 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x162ec8496a0 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x162ec843968 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x162ec843a18 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x162ec843ba8 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x162ec843ae8 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x162ec843cf8 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x162ec843c68 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x162ec843e48 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x162ec843db8 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x162ec844208 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x162ec843f08 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x162ec843f88 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x162ec844008 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x162ec844088 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x162ec844108 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x162ec8444c8 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x162ec8442e8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x162ec844368 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x162ec8443e8 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x162ec84d820 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x162ec844598 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x162ec844618 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x162ec84d780 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x162ec84db68 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x162ec84d8f0 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x162ec84d970 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x162ec84d9f0 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x162ec84da70 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x162ec84dd98 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x162ec84dc40 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x162ec84dcc0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x162ec84df78 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x162ec84de60 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x162ec84dee0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x162ec84e230 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x162ec84e040 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x162ec84e0c0 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x162ec84e140 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x162ec84e580 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x162ec84e300 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x162ec84e380 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x162ec84e400 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x162ec84e480 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x162ec85a8b8 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x162ec84e658 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x162ec84e6d8 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x162ec85a590 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x162ec85a610 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x162ec85a690 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x162ec85a710 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x162ec85a790 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x162ec85ad68 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x162ec85a9a8 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x162ec85aa28 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x162ec85aaa8 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x162ec85ab28 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x162ec85aba8 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x162ec85ac28 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x162ec85aca8 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x162ec85b080 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x162ec85ae58 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x162ec85aed8 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x162ec85af58 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x162ec85afd8 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x162ec85b3c8 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x162ec85b158 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x162ec85b1d8 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x162ec85b258 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x162ec85b2d8 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x162ec85b7b8 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x162ec85b4a0 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x162ec85b520 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x162ec85b5b8 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x162ec85b638 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x162ec85b6b8 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x162ec85bc28 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x162ec85b898 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x162ec85b918 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x162ec85b998 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x162ec85ba18 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x162ec85ba98 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x162ec85bb18 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x162ec85c020 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x162ec85bd10 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x162ec85bd90 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x162ec85be10 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x162ec85be90 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x162ec85bf10 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x162ec85c3b8 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x162ec85c100 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x162ec85c180 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x162ec85c200 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x162ec85c280 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x162ec85c300 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x162ec85f880 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x162ec85c498 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x162ec85c518 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x162ec85f5e0 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x162ec85f660 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x162ec85f6e0 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x162ec85f760 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x162ec85fc70 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x162ec85f968 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x162ec85f9e8 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x162ec85fa68 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x162ec85fae8 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x162ec85fb68 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x162ec860060 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x162ec85fd50 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x162ec85fdd0 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x162ec85fe50 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x162ec85fed0 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x162ec85ff50 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x162ec860330 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x162ec860140 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x162ec8601c0 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x162ec860240 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x162ec863620 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x162ec860400 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x162ec860480 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x162ec860500 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x162ec8636f0 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-FunctionDecl 0x162ec863960 <.//openssl//file_jk/after\crypto\bn\bn_blind.c:30:1, line:79:1> line:30:14 invalid BN_BLINDING_new 'int *(const int *, const int *, int *)'
| |-ParmVarDecl 0x162ec863770 <col:30, col:44> col:44 invalid A 'const int *'
| |-ParmVarDecl 0x162ec8637f0 <col:47, col:61> col:61 invalid Ai 'const int *'
| |-ParmVarDecl 0x162ec863870 <col:65, col:73> col:73 invalid mod 'int *'
| `-CompoundStmt 0x162ec85c758 <line:31:1, line:79:1>
|   |-NullStmt 0x162ec863a30 <line:34:22>
|   |-IfStmt 0x162ec863cf0 <line:36:5, line:39:5>
|   | |-OpaqueValueExpr 0x162ec863cd8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x162ec863cc8 <line:36:55, line:39:5>
|   |-IfStmt 0x162ec863fd8 <line:42:5, line:46:5>
|   | |-OpaqueValueExpr 0x162ec863fc0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x162ec863fb0 <line:42:28, line:46:5>
|   |-IfStmt 0x162ec8642d8 <line:50:5, line:53:5>
|   | |-OpaqueValueExpr 0x162ec8642c0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x162ec8642a8 <line:50:20, line:53:5>
|   |   `-IfStmt 0x162ec864290 <line:51:9, line:52:18>
|   |     |-OpaqueValueExpr 0x162ec864278 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x162ec864260 <col:13, col:18> 'err' 0x162ec864210
|   |-IfStmt 0x162ec864388 <line:55:5, line:58:5>
|   | |-OpaqueValueExpr 0x162ec864370 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x162ec864358 <line:55:21, line:58:5>
|   |   `-IfStmt 0x162ec864340 <line:56:9, line:57:18>
|   |     |-OpaqueValueExpr 0x162ec864328 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x162ec864310 <col:13, col:18> 'err' 0x162ec864210
|   |-IfStmt 0x162ec8643f0 <line:61:5, line:62:14>
|   | |-OpaqueValueExpr 0x162ec8643d8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x162ec8643c0 <col:9, col:14> 'err' 0x162ec864210
|   `-LabelStmt 0x162ec85c740 <line:76:2, col:5> 'err'
|     `-NullStmt 0x162ec85c738 <col:5>
|-FunctionDecl 0x162ec85c848 <line:81:1, line:92:1> line:81:6 invalid BN_BLINDING_free 'void (int *)'
| |-ParmVarDecl 0x162ec85c7b8 <col:23, col:36> col:36 invalid r 'int *'
| `-CompoundStmt 0x162ec85cbe8 <line:82:1, line:92:1>
|   `-IfStmt 0x162ec85c930 <line:83:5, line:84:9>
|     |-OpaqueValueExpr 0x162ec85c918 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x162ec85c908 <col:9>
|-FunctionDecl 0x162ec85cd70 <line:94:1, line:128:1> line:94:5 invalid BN_BLINDING_update 'int (int *, int *)'
| |-ParmVarDecl 0x162ec85cc18 <col:24, col:37> col:37 invalid b 'int *'
| |-ParmVarDecl 0x162ec85cc98 <col:40, col:48> col:48 invalid ctx 'int *'
| `-CompoundStmt 0x162ec860748 <line:95:1, line:128:1>
|   |-DeclStmt 0x162ec85cee0 <line:96:5, col:16>
|   | `-VarDecl 0x162ec85ce50 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x162ec85ceb8 <col:15> 'int' 0
|   |-IfStmt 0x162ec85cfb0 <line:98:5, line:101:5>
|   | |-OpaqueValueExpr 0x162ec85cf98 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x162ec85cf80 <line:98:44, line:101:5>
|   |   `-GotoStmt 0x162ec85cf68 <line:100:9, col:14> 'err' 0x162ec85cf18
|   |-IfStmt 0x162ec85d588 <line:106:5, line:121:5> has_else
|   | |-OpaqueValueExpr 0x162ec85d570 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x162ec85d1b0 <line:107:48, line:111:5>
|   | | `-IfStmt 0x162ec85d198 <line:109:9, line:110:18>
|   | |   |-OpaqueValueExpr 0x162ec85d180 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x162ec85d168 <col:13, col:18> 'err' 0x162ec85cf18
|   | `-IfStmt 0x162ec85d558 <line:111:12, line:121:5>
|   |   |-OpaqueValueExpr 0x162ec85d540 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x162ec85d528 <line:111:53, line:121:5>
|   |     `-IfStmt 0x162ec85d500 <line:112:9, line:120:9> has_else
|   |       |-OpaqueValueExpr 0x162ec85d4e8 <<invalid sloc>> '_Bool'
|   |       |-CompoundStmt 0x162ec85d340 <line:112:31, line:116:9>
|   |       | `-IfStmt 0x162ec85d328 <line:113:13, line:115:22>
|   |       |   |-OpaqueValueExpr 0x162ec85d310 <<invalid sloc>> '_Bool'
|   |       |   `-GotoStmt 0x162ec85d2f8 <col:17, col:22> 'err' 0x162ec85cf18
|   |       `-CompoundStmt 0x162ec85d4d0 <line:116:16, line:120:9>
|   |         `-IfStmt 0x162ec85d4b8 <line:117:13, line:119:22>
|   |           |-OpaqueValueExpr 0x162ec85d4a0 <<invalid sloc>> '_Bool'
|   |           `-GotoStmt 0x162ec85d488 <col:17, col:22> 'err' 0x162ec85cf18
|   |-BinaryOperator 0x162ec860650 <line:123:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x162ec8605f0 <col:5> 'int' lvalue Var 0x162ec85ce50 'ret' 'int'
|   | `-IntegerLiteral 0x162ec860628 <col:11> 'int' 1
|   |-LabelStmt 0x162ec8606c8 <line:124:2, col:5> 'err'
|   | `-NullStmt 0x162ec8606c0 <col:5>
|   `-ReturnStmt 0x162ec860738 <line:127:5, col:16>
|     `-ImplicitCastExpr 0x162ec860720 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x162ec860700 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x162ec8606e0 <col:13> 'int' lvalue Var 0x162ec85ce50 'ret' 'int'
|-FunctionDecl 0x162ec860990 <line:130:1, line:133:1> line:130:5 invalid BN_BLINDING_convert 'int (int *, int *, int *)'
| |-ParmVarDecl 0x162ec8607a0 <col:25, col:33> col:33 invalid n 'int *'
| |-ParmVarDecl 0x162ec860820 <col:36, col:49> col:49 invalid b 'int *'
| |-ParmVarDecl 0x162ec8608a0 <col:52, col:60> col:60 invalid ctx 'int *'
| `-CompoundStmt 0x162ec860b70 <line:131:1, line:133:1>
|-FunctionDecl 0x162ec860e10 <line:135:1, line:161:1> line:135:5 invalid BN_BLINDING_convert_ex 'int (int *, int *, int *, int *)'
| |-ParmVarDecl 0x162ec860b98 <col:28, col:36> col:36 invalid n 'int *'
| |-ParmVarDecl 0x162ec860c18 <col:39, col:47> col:47 invalid r 'int *'
| |-ParmVarDecl 0x162ec860c98 <col:50, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x162ec860d18 <col:66, col:74> col:74 invalid ctx 'int *'
| `-CompoundStmt 0x162ec8614f0 <line:136:1, line:161:1>
|   |-DeclStmt 0x162ec860f90 <line:137:5, col:16>
|   | `-VarDecl 0x162ec860f00 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x162ec860f68 <col:15> 'int' 1
|   |-NullStmt 0x162ec860fa8 <line:139:20>
|   |-IfStmt 0x162ec861058 <line:141:5, line:144:5>
|   | |-OpaqueValueExpr 0x162ec861040 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x162ec861028 <line:141:44, line:144:5>
|   |   `-ReturnStmt 0x162ec861018 <line:143:9, col:18>
|   |     `-ParenExpr 0x162ec860ff8 <col:16, col:18> 'int'
|   |       `-IntegerLiteral 0x162ec860fd0 <col:17> 'int' 0
|   |-IfStmt 0x162ec861180 <line:146:5, line:150:18> has_else
|   | |-OpaqueValueExpr 0x162ec861168 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x162ec861160 <line:148:9>
|   | `-IfStmt 0x162ec861148 <line:149:10, line:150:18>
|   |   |-OpaqueValueExpr 0x162ec861130 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x162ec861120 <col:9, col:18>
|   |     `-ParenExpr 0x162ec861100 <col:16, col:18> 'int'
|   |       `-IntegerLiteral 0x162ec8610d8 <col:17> 'int' 0
|   |-IfStmt 0x162ec861308 <line:152:5, line:153:16>
|   | |-OpaqueValueExpr 0x162ec8612f0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x162ec8612e0 <col:9, col:16>
|   |   `-IntegerLiteral 0x162ec8612b8 <col:16> 'int' 0
|   `-ReturnStmt 0x162ec8614e0 <line:160:5, col:12>
|     `-ImplicitCastExpr 0x162ec8614c8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x162ec8614a8 <col:12> 'int' lvalue Var 0x162ec860f00 'ret' 'int'
|-FunctionDecl 0x162ec861728 <line:163:1, line:166:1> line:163:5 invalid BN_BLINDING_invert 'int (int *, int *, int *)'
| |-ParmVarDecl 0x162ec861548 <col:24, col:32> col:32 invalid n 'int *'
| |-ParmVarDecl 0x162ec861600 <col:35, col:48> col:48 invalid b 'int *'
| |-ParmVarDecl 0x162ec861680 <col:51, col:59> col:59 invalid ctx 'int *'
| `-CompoundStmt 0x162ec861908 <line:164:1, line:166:1>
|-FunctionDecl 0x162ec861bb0 <line:168:1, line:202:1> line:168:5 invalid BN_BLINDING_invert_ex 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x162ec861930 <col:27, col:35> col:35 invalid n 'int *'
| |-ParmVarDecl 0x162ec8619b0 <col:38, col:52> col:52 invalid r 'const int *'
| |-ParmVarDecl 0x162ec861a30 <col:55, col:68> col:68 invalid b 'int *'
| |-ParmVarDecl 0x162ec861ab0 <line:169:27, col:35> col:35 invalid ctx 'int *'
| `-CompoundStmt 0x162ec8623b0 <line:170:1, line:202:1>
|   |-DeclStmt 0x162ec861d08 <line:171:5, col:12>
|   | `-VarDecl 0x162ec861ca0 <col:5, col:9> col:9 used ret 'int'
|   |-NullStmt 0x162ec861d20 <line:173:20>
|   |-IfStmt 0x162ec861db0 <line:175:5, line:178:5>
|   | |-OpaqueValueExpr 0x162ec861d98 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x162ec861d80 <line:175:43, line:178:5>
|   |   `-ReturnStmt 0x162ec861d70 <line:177:9, col:16>
|   |     `-IntegerLiteral 0x162ec861d48 <col:16> 'int' 0
|   |-IfStmt 0x162ec862318 <line:180:5, line:198:5> has_else
|   | |-OpaqueValueExpr 0x162ec862300 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x162ec862298 <line:180:27, line:196:5>
|   | | `-IfStmt 0x162ec862228 <line:182:9, line:194:9>
|   | |   |-OpaqueValueExpr 0x162ec862210 <<invalid sloc>> '_Bool'
|   | |   `-CompoundStmt 0x162ec8621f0 <line:182:32, line:194:9>
|   | |     |-DeclStmt 0x162ec861f78 <line:183:13, col:51>
|   | |     | |-VarDecl 0x162ec861e00 <col:13, col:20> col:20 used i 'size_t':'unsigned long long'
|   | |     | |-VarDecl 0x162ec861e78 <col:13, col:23> col:23 used rtop 'size_t':'unsigned long long'
|   | |     | `-VarDecl 0x162ec861ef0 <col:13, col:38> col:38 used ntop 'size_t':'unsigned long long'
|   | |     `-ForStmt 0x162ec862138 <line:186:13, line:189:13>
|   | |       |-BinaryOperator 0x162ec862008 <line:186:18, col:22> 'size_t':'unsigned long long' '='
|   | |       | |-DeclRefExpr 0x162ec861f90 <col:18> 'size_t':'unsigned long long' lvalue Var 0x162ec861e00 'i' 'size_t':'unsigned long long'
|   | |       | `-ImplicitCastExpr 0x162ec861ff0 <col:22> 'size_t':'unsigned long long' <IntegralCast>
|   | |       |   `-IntegerLiteral 0x162ec861fc8 <col:22> 'int' 0
|   | |       |-<<<NULL>>>
|   | |       |-BinaryOperator 0x162ec8620b0 <col:25, col:29> 'int' '<'
|   | |       | |-ImplicitCastExpr 0x162ec862080 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   | |       | | `-DeclRefExpr 0x162ec862028 <col:25> 'size_t':'unsigned long long' lvalue Var 0x162ec861e00 'i' 'size_t':'unsigned long long'
|   | |       | `-ImplicitCastExpr 0x162ec862098 <col:29> 'size_t':'unsigned long long' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x162ec862048 <col:29> 'size_t':'unsigned long long' lvalue Var 0x162ec861e78 'rtop' 'size_t':'unsigned long long'
|   | |       |-UnaryOperator 0x162ec8620f0 <col:35, col:36> 'size_t':'unsigned long long' postfix '++'
|   | |       | `-DeclRefExpr 0x162ec8620d0 <col:35> 'size_t':'unsigned long long' lvalue Var 0x162ec861e00 'i' 'size_t':'unsigned long long'
|   | |       `-CompoundStmt 0x162ec862128 <col:40, line:189:13>
|   | `-CompoundStmt 0x162ec8622f0 <line:196:12, line:198:5>
|   |-NullStmt 0x162ec862340 <line:200:20>
|   `-ReturnStmt 0x162ec8623a0 <line:201:5, col:16>
|     `-ImplicitCastExpr 0x162ec862388 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x162ec862368 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x162ec862348 <col:13> 'int' lvalue Var 0x162ec861ca0 'ret' 'int'
|-FunctionDecl 0x162ec8624d0 <line:204:1, line:207:1> line:204:5 invalid BN_BLINDING_is_current_thread 'int (int *)'
| |-ParmVarDecl 0x162ec862408 <col:35, col:48> col:48 invalid b 'int *'
| `-CompoundStmt 0x162ec85d7f0 <line:205:1, line:207:1>
|-FunctionDecl 0x162ec85d8a8 <line:209:1, line:212:1> line:209:6 invalid BN_BLINDING_set_current_thread 'void (int *)'
| |-ParmVarDecl 0x162ec85d818 <col:37, col:50> col:50 invalid b 'int *'
| `-CompoundStmt 0x162ec85d9c0 <line:210:1, line:212:1>
|-FunctionDecl 0x162ec85da80 <line:214:1, line:217:1> line:214:5 invalid BN_BLINDING_lock 'int (int *)'
| |-ParmVarDecl 0x162ec85d9e8 <col:22, col:35> col:35 invalid b 'int *'
| `-CompoundStmt 0x162ec85dc50 <line:215:1, line:217:1>
|-FunctionDecl 0x162ec85dd10 <line:219:1, line:222:1> line:219:5 invalid BN_BLINDING_unlock 'int (int *)'
| |-ParmVarDecl 0x162ec85dc78 <col:24, col:37> col:37 invalid b 'int *'
| `-CompoundStmt 0x162ec85dee0 <line:220:1, line:222:1>
|-FunctionDecl 0x162ec85dfd0 <line:224:1, line:227:1> line:224:15 invalid BN_BLINDING_get_flags 'unsigned long (const int *)'
| |-ParmVarDecl 0x162ec85df08 <col:37, col:56> col:56 invalid b 'const int *'
| `-CompoundStmt 0x162ec85e090 <line:225:1, line:227:1>
|-FunctionDecl 0x162ec85e208 <line:229:1, line:232:1> line:229:6 invalid BN_BLINDING_set_flags 'void (int *, unsigned long)'
| |-ParmVarDecl 0x162ec85e0b8 <col:28, col:41> col:41 invalid b 'int *'
| |-ParmVarDecl 0x162ec85e138 <col:44, col:58> col:58 used flags 'unsigned long'
| `-CompoundStmt 0x162ec85e308 <line:230:1, line:232:1>
`-FunctionDecl 0x162ec865c00 <line:234:1, line:313:1> line:234:14 invalid BN_BLINDING_create_param 'int *(int *, const int *, int *, int *, int (*)(int *, const int *, const int *, const int *, int *, int *), int *)'
  |-ParmVarDecl 0x162ec85e330 <col:39, col:52> col:52 invalid b 'int *'
  |-ParmVarDecl 0x162ec85e3b0 <line:235:39, col:53> col:53 invalid e 'const int *'
  |-ParmVarDecl 0x162ec85e430 <col:56, col:64> col:64 invalid m 'int *'
  |-ParmVarDecl 0x162ec85e4b0 <col:67, col:75> col:75 invalid ctx 'int *'
  |-ParmVarDecl 0x162ec865a00 <line:236:39, line:241:76> line:236:45 used bn_mod_exp 'int (*)(int *, const int *, const int *, const int *, int *, int *)'
  |-ParmVarDecl 0x162ec865a80 <line:242:39, col:52> col:52 invalid m_ctx 'int *'
  `-CompoundStmt 0x162ec85e9c8 <line:243:1, line:313:1>
    |-DeclStmt 0x162ec865d90 <line:244:5, col:27>
    | `-VarDecl 0x162ec865d00 <col:5, col:25> col:9 used retry_counter 'int' cinit
    |   `-IntegerLiteral 0x162ec865d68 <col:25> 'int' 32
    |-IfStmt 0x162ec865e28 <line:252:5, line:253:14>
    | |-OpaqueValueExpr 0x162ec865e10 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x162ec865df8 <col:9, col:14> 'err' 0x162ec865da8
    |-IfStmt 0x162ec865fb8 <line:255:5, line:256:14>
    | |-OpaqueValueExpr 0x162ec865fa0 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x162ec865f88 <col:9, col:14> 'err' 0x162ec865da8
    |-IfStmt 0x162ec866058 <line:257:5, line:258:14>
    | |-OpaqueValueExpr 0x162ec866040 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x162ec866028 <col:9, col:14> 'err' 0x162ec865da8
    |-IfStmt 0x162ec8660d8 <line:260:5, line:263:5>
    | |-OpaqueValueExpr 0x162ec8660c0 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x162ec8660b0 <line:260:20, line:263:5>
    |-IfStmt 0x162ec866120 <line:264:5, line:265:14>
    | |-OpaqueValueExpr 0x162ec866108 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x162ec8660f0 <col:9, col:14> 'err' 0x162ec865da8
    |-DoStmt 0x162ec8665e8 <line:272:5, line:289:15>
    | |-CompoundStmt 0x162ec866588 <line:272:8, line:289:5>
    | | |-DeclStmt 0x162ec866210 <line:273:9, col:15>
    | | | `-VarDecl 0x162ec8661a8 <col:9, col:13> col:13 used rv 'int'
    | | |-IfStmt 0x162ec866368 <line:274:9, line:275:18>
    | | | |-OpaqueValueExpr 0x162ec866350 <<invalid sloc>> '_Bool'
    | | | `-GotoStmt 0x162ec866338 <col:13, col:18> 'err' 0x162ec865da8
    | | |-IfStmt 0x162ec8663f0 <line:276:9, line:277:13>
    | | | |-OpaqueValueExpr 0x162ec8663d8 <<invalid sloc>> '_Bool'
    | | | `-BreakStmt 0x162ec8663d0 <col:13>
    | | |-IfStmt 0x162ec866470 <line:282:9, line:283:18>
    | | | |-UnaryOperator 0x162ec866440 <line:282:13, col:14> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x162ec866428 <col:14> 'int' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x162ec866408 <col:14> 'int' lvalue Var 0x162ec8661a8 'rv' 'int'
    | | | `-GotoStmt 0x162ec866458 <line:283:13, col:18> 'err' 0x162ec865da8
    | | `-IfStmt 0x162ec866570 <line:285:9, line:288:9>
    | |   |-BinaryOperator 0x162ec866500 <line:285:13, col:32> 'int' '=='
    | |   | |-UnaryOperator 0x162ec8664c0 <col:13, col:26> 'int' postfix '--'
    | |   | | `-DeclRefExpr 0x162ec866488 <col:13> 'int' lvalue Var 0x162ec865d00 'retry_counter' 'int'
    | |   | `-IntegerLiteral 0x162ec8664d8 <col:32> 'int' 0
    | |   `-CompoundStmt 0x162ec866558 <col:35, line:288:9>
    | |     `-GotoStmt 0x162ec866540 <line:287:13, col:18> 'err' 0x162ec865da8
    | `-IntegerLiteral 0x162ec8665c0 <line:289:14> 'int' 1
    |-IfStmt 0x162ec85e788 <line:291:5, line:297:5> has_else
    | |-OpaqueValueExpr 0x162ec85e770 <<invalid sloc>> '_Bool'
    | |-CompoundStmt 0x162ec85e5e8 <line:291:56, line:294:5>
    | | `-IfStmt 0x162ec85e5d0 <line:292:9, line:293:18>
    | |   |-OpaqueValueExpr 0x162ec866620 <<invalid sloc>> '_Bool'
    | |   `-GotoStmt 0x162ec866608 <col:13, col:18> 'err' 0x162ec865da8
    | `-CompoundStmt 0x162ec85e758 <line:294:12, line:297:5>
    |   `-IfStmt 0x162ec85e740 <line:295:9, line:296:18>
    |     |-OpaqueValueExpr 0x162ec85e728 <<invalid sloc>> '_Bool'
    |     `-GotoStmt 0x162ec85e710 <col:13, col:18> 'err' 0x162ec865da8
    |-IfStmt 0x162ec85e958 <line:299:5, line:303:5>
    | |-OpaqueValueExpr 0x162ec85e940 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x162ec85e928 <line:299:29, line:303:5>
    |   `-IfStmt 0x162ec85e910 <line:300:9, line:302:18>
    |     |-OpaqueValueExpr 0x162ec85e8f8 <<invalid sloc>> '_Bool'
    |     `-GotoStmt 0x162ec85e8e0 <col:13, col:18> 'err' 0x162ec865da8
    `-LabelStmt 0x162ec85e9b0 <line:306:2, line:310:5> 'err'
      `-IfStmt 0x162ec85e998 <line:307:5, line:310:5>
        |-OpaqueValueExpr 0x162ec85e980 <<invalid sloc>> '_Bool'
        `-CompoundStmt 0x162ec85e970 <line:307:20, line:310:5>
