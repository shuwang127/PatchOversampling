TranslationUnitDecl 0x1842f0f7008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1842f0f78a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1842f0f75a0 '__int128'
|-TypedefDecl 0x1842f0f7910 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1842f0f75c0 'unsigned __int128'
|-TypedefDecl 0x1842f0f7c48 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1842f0f7a00 'struct __NSConstantString_tag'
|   `-Record 0x1842f0f7968 '__NSConstantString_tag'
|-TypedefDecl 0x1842f0f7cb8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1842f0f71e0 'unsigned long long'
|-TypedefDecl 0x1842f0f7d50 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1842f0f7d10 'char *'
|   `-BuiltinType 0x1842f0f70a0 'char'
|-TypedefDecl 0x1842f0f7dc0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1842f0f7d10 'char *'
|   `-BuiltinType 0x1842f0f70a0 'char'
|-FunctionDecl 0x18430a21420 <.//openssl//file_jk/after\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1842f0f7e60 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x1842f0f7ee0 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x1842f0f7f60 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x18430a21320 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x18430a21728 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x18430a214f8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x18430a21578 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x18430a215f8 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x18430a21678 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x18430a219e8 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x18430a21800 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x18430a21880 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x18430a21900 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x18430a21ca0 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x18430a21ab8 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x18430a21b38 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x18430a21bb8 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x18430a21ff0 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x18430a21d70 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x18430a21df0 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x18430a21e70 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x18430a21ef0 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x18430a24350 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x18430a220c8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x18430a22148 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x18430a221c8 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x18430a22248 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x18430a24410 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x18430a244e8 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x18430a24558 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x18430a245c8 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x18430a24638 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x18430a246a8 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x18430a24700 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x18430a247d8 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x18430a24848 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x18430a248b8 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x18430a24928 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x18430a24a20 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x18430a24a90 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x18430a24ae8 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x18430a24bb8 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x18430a24c28 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x18430a24c98 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x18430a24d08 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x18430a24d78 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x18430a24dd0 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x18430a24ea8 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x18430a24f18 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x18430a24f70 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x18430a252c0 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x18430a255e8 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x18430a25698 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x18430a25828 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x18430a25768 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x18430a25978 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x18430a258e8 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x18430a25ac8 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x18430a25a38 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x18430a25e88 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x18430a25b88 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x18430a25c08 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x18430a25c88 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x18430a25d08 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x18430a25d88 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x18430a26148 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x18430a25f68 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x18430a25fe8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x18430a26068 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x18430a203b0 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x18430a26218 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x18430a26298 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x18430a20310 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x18430a206f8 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x18430a20480 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x18430a20500 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x18430a20580 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x18430a20600 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x18430a20928 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x18430a207d0 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x18430a20850 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x18430a20b08 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x18430a209f0 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x18430a20a70 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x18430a20dc0 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x18430a20bd0 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x18430a20c50 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x18430a20cd0 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x18430a21110 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x18430a20e90 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x18430a20f10 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x18430a20f90 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x18430a21010 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x18430a39b48 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x18430a211e8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x18430a21268 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x18430a39820 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x18430a398a0 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x18430a39920 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x18430a399a0 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x18430a39a20 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x18430a39ff8 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x18430a39c38 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x18430a39cb8 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x18430a39d38 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x18430a39db8 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x18430a39e38 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x18430a39eb8 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x18430a39f38 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x18430a3a310 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x18430a3a0e8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x18430a3a168 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x18430a3a1e8 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x18430a3a268 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x18430a3a658 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x18430a3a3e8 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x18430a3a468 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x18430a3a4e8 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x18430a3a568 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x18430a38a28 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x18430a3a730 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x18430a3a7b0 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x18430a38828 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x18430a388a8 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x18430a38928 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x18430a38e98 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x18430a38b08 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x18430a38b88 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x18430a38c08 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x18430a38c88 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x18430a38d08 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x18430a38d88 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x18430a39290 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x18430a38f80 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x18430a39000 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x18430a39080 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x18430a39100 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x18430a39180 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x18430a39628 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x18430a39370 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x18430a393f0 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x18430a39470 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x18430a394f0 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x18430a39570 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x18430a35a80 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x18430a39708 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x18430a39788 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x18430a357e0 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x18430a35860 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x18430a358e0 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x18430a35960 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x18430a35e70 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x18430a35b68 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x18430a35be8 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x18430a35c68 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x18430a35ce8 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x18430a35d68 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x18430a36260 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x18430a35f50 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x18430a35fd0 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x18430a36050 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x18430a360d0 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x18430a36150 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x18430a36530 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x18430a36340 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x18430a363c0 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x18430a36440 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x18430a3a830 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x18430a36600 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x18430a36680 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x18430a36700 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x18430a3a900 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-RecordDecl 0x18430a3a9c8 <.//openssl//file_jk/after\crypto\bn\bn_ctx.c:43:9, line:48:1> line:43:16 invalid struct bignum_pool definition
| |-FieldDecl 0x18430a3aa98 <line:45:5, col:19> col:19 invalid head 'int *'
| |-FieldDecl 0x18430a3ab08 <col:5, col:26> col:26 invalid current 'int *'
| |-FieldDecl 0x18430a3ab78 <col:5, col:36> col:36 invalid tail 'int *'
| |-FieldDecl 0x18430a3abe8 <line:47:5, col:14> col:14 referenced used 'unsigned int'
| `-FieldDecl 0x18430a3ac58 <col:5, col:20> col:20 referenced size 'unsigned int'
|-TypedefDecl 0x18430a3ad08 <line:43:1, line:48:3> col:3 referenced BN_POOL 'struct bignum_pool':'struct bignum_pool'
| `-ElaboratedType 0x18430a3acb0 'struct bignum_pool' sugar
|   `-RecordType 0x18430a3aa60 'struct bignum_pool'
|     `-Record 0x18430a3a9c8 'bignum_pool'
|-FunctionDecl 0x18430a3aef8 <line:49:1, col:35> col:13 used BN_POOL_init 'void (BN_POOL *)' static
| `-ParmVarDecl 0x18430a3ae08 <col:26, col:34> col:35 'BN_POOL *'
|-FunctionDecl 0x18430a3b0a0 <line:50:1, col:37> col:13 used BN_POOL_finish 'void (BN_POOL *)' static
| `-ParmVarDecl 0x18430a3b010 <col:28, col:36> col:37 'BN_POOL *'
|-FunctionDecl 0x18430a3b310 <line:51:1, col:42> col:16 invalid BN_POOL_get 'int *(BN_POOL *, int)' static
| |-ParmVarDecl 0x18430a3b170 <col:28, col:36> col:37 'BN_POOL *'
| `-ParmVarDecl 0x18430a3b1f0 <col:39> col:42 'int'
|-FunctionDecl 0x18430a3b568 <line:52:1, col:52> col:13 used BN_POOL_release 'void (BN_POOL *, unsigned int)' static
| |-ParmVarDecl 0x18430a3b3d0 <col:29, col:37> col:38 'BN_POOL *'
| `-ParmVarDecl 0x18430a3b450 <col:40, col:49> col:52 'unsigned int'
|-RecordDecl 0x18430a3b690 <line:59:9, line:64:1> line:59:16 struct bignum_ctx_stack definition
| |-FullComment 0x18430a42660 <line:56:4, col:12>
| | `-ParagraphComment 0x18430a42638 <col:4, col:12>
| |   `-TextComment 0x18430a42610 <col:4, col:12> Text="*********"
| |-FieldDecl 0x18430a3b790 <line:61:5, col:19> col:19 referenced indexes 'unsigned int *'
| |-FieldDecl 0x18430a367f0 <line:63:5, col:18> col:18 referenced depth 'unsigned int'
| `-FieldDecl 0x18430a36860 <col:5, col:25> col:25 referenced size 'unsigned int'
|-TypedefDecl 0x18430a36918 <line:59:1, line:64:3> col:3 referenced BN_STACK 'struct bignum_ctx_stack':'struct bignum_ctx_stack'
| |-ElaboratedType 0x18430a368c0 'struct bignum_ctx_stack' sugar
| | `-RecordType 0x18430a3b730 'struct bignum_ctx_stack'
| |   `-Record 0x18430a3b690 'bignum_ctx_stack'
| `-FullComment 0x18430a42728 <line:56:4, col:12>
|   `-ParagraphComment 0x18430a42700 <col:4, col:12>
|     `-TextComment 0x18430a426d8 <col:4, col:12> Text="*********"
|-FunctionDecl 0x18430a36b08 <line:65:1, col:37> col:13 used BN_STACK_init 'void (BN_STACK *)' static
| `-ParmVarDecl 0x18430a36a18 <col:27, col:36> col:37 'BN_STACK *'
|-FunctionDecl 0x18430a36c68 <line:66:1, col:39> col:13 used BN_STACK_finish 'void (BN_STACK *)' static
| `-ParmVarDecl 0x18430a36bd8 <col:29, col:38> col:39 'BN_STACK *'
|-FunctionDecl 0x18430a36ed0 <line:67:1, col:50> col:12 used BN_STACK_push 'int (BN_STACK *, unsigned int)' static
| |-ParmVarDecl 0x18430a36d38 <col:26, col:35> col:36 'BN_STACK *'
| `-ParmVarDecl 0x18430a36db8 <col:38, col:47> col:50 'unsigned int'
|-FunctionDecl 0x18430a370a0 <line:68:1, col:44> col:21 used BN_STACK_pop 'unsigned int (BN_STACK *)' static
| `-ParmVarDecl 0x18430a36fa8 <col:34, col:43> col:44 'BN_STACK *'
|-RecordDecl 0x18430a371c0 <line:75:1, line:88:1> line:75:8 invalid struct bignum_ctx definition
| |-FullComment 0x18430a42850 <line:72:4, col:10>
| | `-ParagraphComment 0x18430a42828 <col:4, col:10>
| |   `-TextComment 0x18430a42800 <col:4, col:10> Text="*******"
| |-FieldDecl 0x18430a37290 <line:77:5, col:13> col:13 invalid pool 'BN_POOL':'struct bignum_pool'
| |-FieldDecl 0x18430a372f8 <line:79:5, col:14> col:14 stack 'BN_STACK':'struct bignum_ctx_stack'
| |-FieldDecl 0x18430a37368 <line:81:5, col:18> col:18 used 'unsigned int'
| |-FieldDecl 0x18430a373d8 <line:83:5, col:9> col:9 err_stack 'int'
| |-FieldDecl 0x18430a37448 <line:85:5, col:9> col:9 too_many 'int'
| `-FieldDecl 0x18430a374b8 <line:87:5, col:9> col:9 flags 'int'
|-FunctionDecl 0x18430a375e0 <line:134:1, line:146:1> line:134:9 invalid BN_CTX_new 'int *(void)'
| `-CompoundStmt 0x18430a33950 <line:135:1, line:146:1>
|   `-IfStmt 0x18430a338f8 <line:138:5, line:141:5>
|     |-OpaqueValueExpr 0x18430a338e0 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x18430a338d0 <line:138:55, line:141:5>
|-FunctionDecl 0x18430a33a08 <line:148:1, line:155:1> line:148:9 invalid BN_CTX_secure_new 'int *(void)'
| `-CompoundStmt 0x18430a33ac0 <line:149:1, line:155:1>
|-FunctionDecl 0x18430a33b78 <line:157:1, line:179:1> line:157:6 invalid BN_CTX_free 'void (int *)'
| |-ParmVarDecl 0x18430a33ae8 <col:18, col:26> col:26 invalid ctx 'int *'
| `-CompoundStmt 0x18430a33dc8 <line:158:1, line:179:1>
|   `-IfStmt 0x18430a33c60 <line:159:5, line:160:9>
|     |-OpaqueValueExpr 0x18430a33c48 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x18430a33c38 <col:9>
|-FunctionDecl 0x18430a33e88 <line:181:1, line:193:1> line:181:6 invalid BN_CTX_start 'void (int *)'
| |-ParmVarDecl 0x18430a33df8 <col:19, col:27> col:27 invalid ctx 'int *'
| `-CompoundStmt 0x18430a34020 <line:182:1, line:193:1>
|   |-NullStmt 0x18430a33f48 <line:183:38>
|   |-IfStmt 0x18430a33ff0 <line:185:5, line:191:5> has_else
|   | |-OpaqueValueExpr 0x18430a33fd8 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x18430a33fd0 <line:186:9>
|   | `-IfStmt 0x18430a33fb8 <line:188:10, line:191:5>
|   |   |-OpaqueValueExpr 0x18430a33fa0 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x18430a33f90 <line:188:54, line:191:5>
|   `-NullStmt 0x18430a34018 <line:192:21>
|-FunctionDecl 0x18430a340f0 <line:195:1, line:210:1> line:195:6 invalid BN_CTX_end 'void (int *)'
| |-ParmVarDecl 0x18430a34060 <col:17, col:25> col:25 invalid ctx 'int *'
| `-CompoundStmt 0x18430a34398 <line:196:1, line:210:1>
|   |-NullStmt 0x18430a341b0 <line:197:36>
|   |-IfStmt 0x18430a34368 <line:198:5, line:208:5> has_else
|   | |-OpaqueValueExpr 0x18430a34350 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x18430a34348 <line:199:9>
|   | `-CompoundStmt 0x18430a34330 <line:200:10, line:208:5>
|   |   `-DeclStmt 0x18430a34258 <line:201:9, col:52>
|   |     `-VarDecl 0x18430a341d0 <col:9, col:22> col:22 used fp 'unsigned int'
|   `-NullStmt 0x18430a34390 <line:209:21>
|-FunctionDecl 0x18430a344a0 <line:212:1, line:235:1> line:212:9 invalid BN_CTX_get 'int *(int *)'
| |-ParmVarDecl 0x18430a343d8 <col:20, col:28> col:28 invalid ctx 'int *'
| `-CompoundStmt 0x18430a34768 <line:213:1, line:235:1>
|   |-NullStmt 0x18430a34560 <line:216:36>
|   |-IfStmt 0x18430a345d8 <line:219:5, line:227:5>
|   | |-OpaqueValueExpr 0x18430a345c0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x18430a345b0 <line:219:62, line:227:5>
|   `-NullStmt 0x18430a34700 <line:233:25>
|-FunctionDecl 0x18430a34878 prev 0x18430a36b08 <line:241:1, line:245:1> line:241:13 used BN_STACK_init 'void (BN_STACK *)' static
| |-ParmVarDecl 0x18430a347d0 <col:27, col:37> col:37 used st 'BN_STACK *'
| |-CompoundStmt 0x18430a34ad8 <line:242:1, line:245:1>
| | `-BinaryOperator 0x18430a34ab8 <line:244:5, col:28> 'unsigned int' '='
| |   |-MemberExpr 0x18430a349c0 <col:5, col:9> 'unsigned int' lvalue ->depth 0x18430a367f0
| |   | `-ImplicitCastExpr 0x18430a349a8 <col:5> 'BN_STACK *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x18430a34988 <col:5> 'BN_STACK *' lvalue ParmVar 0x18430a347d0 'st' 'BN_STACK *'
| |   `-BinaryOperator 0x18430a34a98 <col:17, col:28> 'unsigned int' '='
| |     |-MemberExpr 0x18430a34a28 <col:17, col:21> 'unsigned int' lvalue ->size 0x18430a36860
| |     | `-ImplicitCastExpr 0x18430a34a10 <col:17> 'BN_STACK *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x18430a349f0 <col:17> 'BN_STACK *' lvalue ParmVar 0x18430a347d0 'st' 'BN_STACK *'
| |     `-ImplicitCastExpr 0x18430a34a80 <col:28> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x18430a34a58 <col:28> 'int' 0
| `-FullComment 0x18430a3c920 <line:239:4, col:12>
|   `-ParagraphComment 0x18430a3c8f8 <col:4, col:12>
|     `-TextComment 0x18430a3c8d0 <col:4, col:12> Text="*********"
|-FunctionDecl 0x18430a34ba8 prev 0x18430a36c68 <line:247:1, line:251:1> line:247:13 used BN_STACK_finish 'void (BN_STACK *)' static
| |-ParmVarDecl 0x18430a34b00 <col:29, col:39> col:39 used st 'BN_STACK *'
| `-CompoundStmt 0x18430a34dc8 <line:248:1, line:251:1>
|   `-CallExpr 0x18430a34d20 <line:249:5, col:29> 'int'
|     |-ImplicitCastExpr 0x18430a34d08 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x18430a34c50 <col:5> 'int ()' Function 0x18430a33ce0 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x18430a34d48 <col:18, col:22> 'unsigned int *' <LValueToRValue>
|       `-MemberExpr 0x18430a34ca8 <col:18, col:22> 'unsigned int *' lvalue ->indexes 0x18430a3b790
|         `-ImplicitCastExpr 0x18430a34c90 <col:18> 'BN_STACK *' <LValueToRValue>
|           `-DeclRefExpr 0x18430a34c70 <col:18> 'BN_STACK *' lvalue ParmVar 0x18430a34b00 'st' 'BN_STACK *'
|-FunctionDecl 0x18430a34f40 prev 0x18430a36ed0 <line:254:1, line:271:1> line:254:12 used BN_STACK_push 'int (BN_STACK *, unsigned int)' static
| |-ParmVarDecl 0x18430a34df0 <col:26, col:36> col:36 used st 'BN_STACK *'
| |-ParmVarDecl 0x18430a34e70 <col:40, col:53> col:53 used idx 'unsigned int'
| `-CompoundStmt 0x18430a44340 <line:255:1, line:271:1>
|   |-IfStmt 0x18430a44158 <line:256:5, line:268:5>
|   | |-BinaryOperator 0x18430a350f0 <line:256:9, col:26> 'int' '=='
|   | | |-ImplicitCastExpr 0x18430a350c0 <col:9, col:13> 'unsigned int' <LValueToRValue>
|   | | | `-MemberExpr 0x18430a35028 <col:9, col:13> 'unsigned int' lvalue ->depth 0x18430a367f0
|   | | |   `-ImplicitCastExpr 0x18430a35010 <col:9> 'BN_STACK *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x18430a34ff0 <col:9> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   | | `-ImplicitCastExpr 0x18430a350d8 <col:22, col:26> 'unsigned int' <LValueToRValue>
|   | |   `-MemberExpr 0x18430a35090 <col:22, col:26> 'unsigned int' lvalue ->size 0x18430a36860
|   | |     `-ImplicitCastExpr 0x18430a35078 <col:22> 'BN_STACK *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x18430a35058 <col:22> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   | `-CompoundStmt 0x18430a44110 <col:32, line:268:5>
|   |   |-DeclStmt 0x18430a353e0 <line:258:9, line:259:64>
|   |   | `-VarDecl 0x18430a35128 <line:258:9, line:29:33> line:258:22 used newsize 'unsigned int' cinit
|   |   |   `-ConditionalOperator 0x18430a353b0 <line:259:13, line:29:33> 'unsigned int'
|   |   |     |-ImplicitCastExpr 0x18430a35380 <line:259:13, col:17> 'unsigned int' <LValueToRValue>
|   |   |     | `-MemberExpr 0x18430a351c8 <col:13, col:17> 'unsigned int' lvalue ->size 0x18430a36860
|   |   |     |   `-ImplicitCastExpr 0x18430a351b0 <col:13> 'BN_STACK *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x18430a35190 <col:13> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   |   |     |-ParenExpr 0x18430a35338 <col:24, col:41> 'unsigned int'
|   |   |     | `-BinaryOperator 0x18430a35318 <col:25, col:40> 'unsigned int' '/'
|   |   |     |   |-BinaryOperator 0x18430a352b8 <col:25, col:36> 'unsigned int' '*'
|   |   |     |   | |-ImplicitCastExpr 0x18430a35288 <col:25, col:29> 'unsigned int' <LValueToRValue>
|   |   |     |   | | `-MemberExpr 0x18430a35230 <col:25, col:29> 'unsigned int' lvalue ->size 0x18430a36860
|   |   |     |   | |   `-ImplicitCastExpr 0x18430a35218 <col:25> 'BN_STACK *' <LValueToRValue>
|   |   |     |   | |     `-DeclRefExpr 0x18430a351f8 <col:25> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   |   |     |   | `-ImplicitCastExpr 0x18430a352a0 <col:36> 'unsigned int' <IntegralCast>
|   |   |     |   |   `-IntegerLiteral 0x18430a35260 <col:36> 'int' 3
|   |   |     |   `-ImplicitCastExpr 0x18430a35300 <col:40> 'unsigned int' <IntegralCast>
|   |   |     |     `-IntegerLiteral 0x18430a352d8 <col:40> 'int' 2
|   |   |     `-ImplicitCastExpr 0x18430a35398 <line:29:33> 'unsigned int' <IntegralCast>
|   |   |       `-IntegerLiteral 0x18430a35358 <col:33> 'int' 32
|   |   |-DeclStmt 0x18430a356f8 <line:260:9, col:77>
|   |   | `-VarDecl 0x18430a35410 <col:9, col:76> col:23 used newitems 'unsigned int *' cinit
|   |   |   `-ImplicitCastExpr 0x18430a356e0 <col:34, col:76> 'unsigned int *' <IntegralToPointer>
|   |   |     `-CallExpr 0x18430a356b8 <col:34, col:76> 'int'
|   |   |       |-ImplicitCastExpr 0x18430a356a0 <col:34> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x18430a35568 <col:34> 'int ()' Function 0x18430a354a0 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x18430a35680 <col:49, col:69> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x18430a355f8 <col:49, col:65> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x18430a355d8 <col:55, col:65> 'unsigned int' lvalue
|   |   |         |   `-UnaryOperator 0x18430a355c0 <col:56, col:57> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x18430a355a8 <col:57> 'unsigned int *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x18430a35588 <col:57> 'unsigned int *' lvalue Var 0x18430a35410 'newitems' 'unsigned int *' non_odr_use_unevaluated
|   |   |         `-ImplicitCastExpr 0x18430a35668 <col:69> 'unsigned long long' <IntegralCast>
|   |   |           `-ImplicitCastExpr 0x18430a35650 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x18430a35618 <col:69> 'unsigned int' lvalue Var 0x18430a35128 'newsize' 'unsigned int'
|   |   |-IfStmt 0x18430a35798 <line:261:9, line:262:20>
|   |   | |-OpaqueValueExpr 0x18430a35780 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x18430a35770 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x18430a35748 <col:20> 'int' 0
|   |   |-IfStmt 0x18430a43e98 <line:263:9, line:264:72>
|   |   | |-ImplicitCastExpr 0x18430a43908 <line:263:13, col:17> 'unsigned int' <LValueToRValue>
|   |   | | `-MemberExpr 0x18430a438d8 <col:13, col:17> 'unsigned int' lvalue ->depth 0x18430a367f0
|   |   | |   `-ImplicitCastExpr 0x18430a438c0 <col:13> 'BN_STACK *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x18430a357b0 <col:13> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   |   | `-CallExpr 0x18430a43e00 <line:264:13, col:72> 'void *'
|   |   |   |-ImplicitCastExpr 0x18430a43de8 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x18430a43b80 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x18430a43990 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |   |-ImplicitCastExpr 0x18430a43e50 <col:20> 'void *' <BitCast>
|   |   |   | `-ImplicitCastExpr 0x18430a43e38 <col:20> 'unsigned int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x18430a43bb8 <col:20> 'unsigned int *' lvalue Var 0x18430a35410 'newitems' 'unsigned int *'
|   |   |   |-ImplicitCastExpr 0x18430a43e80 <col:30, col:34> 'const void *' <BitCast>
|   |   |   | `-ImplicitCastExpr 0x18430a43e68 <col:30, col:34> 'unsigned int *' <LValueToRValue>
|   |   |   |   `-MemberExpr 0x18430a43c10 <col:30, col:34> 'unsigned int *' lvalue ->indexes 0x18430a3b790
|   |   |   |     `-ImplicitCastExpr 0x18430a43bf8 <col:30> 'BN_STACK *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x18430a43bd8 <col:30> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   |   |   `-BinaryOperator 0x18430a43d68 <col:43, col:67> 'unsigned long long' '*'
|   |   |     |-UnaryExprOrTypeTraitExpr 0x18430a43cb0 <col:43, col:59> 'unsigned long long' sizeof
|   |   |     | `-ParenExpr 0x18430a43c90 <col:49, col:59> 'unsigned int' lvalue
|   |   |     |   `-UnaryOperator 0x18430a43c78 <col:50, col:51> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   |     |     `-ImplicitCastExpr 0x18430a43c60 <col:51> 'unsigned int *' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x18430a43c40 <col:51> 'unsigned int *' lvalue Var 0x18430a35410 'newitems' 'unsigned int *' non_odr_use_unevaluated
|   |   |     `-ImplicitCastExpr 0x18430a43d50 <col:63, col:67> 'unsigned long long' <IntegralCast>
|   |   |       `-ImplicitCastExpr 0x18430a43d38 <col:63, col:67> 'unsigned int' <LValueToRValue>
|   |   |         `-MemberExpr 0x18430a43d08 <col:63, col:67> 'unsigned int' lvalue ->depth 0x18430a367f0
|   |   |           `-ImplicitCastExpr 0x18430a43cf0 <col:63> 'BN_STACK *' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x18430a43cd0 <col:63> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   |   |-CallExpr 0x18430a43f50 <line:265:9, col:33> 'int'
|   |   | |-ImplicitCastExpr 0x18430a43f38 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x18430a43eb0 <col:9> 'int ()' Function 0x18430a33ce0 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x18430a43f78 <col:22, col:26> 'unsigned int *' <LValueToRValue>
|   |   |   `-MemberExpr 0x18430a43f08 <col:22, col:26> 'unsigned int *' lvalue ->indexes 0x18430a3b790
|   |   |     `-ImplicitCastExpr 0x18430a43ef0 <col:22> 'BN_STACK *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x18430a43ed0 <col:22> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   |   |-BinaryOperator 0x18430a44030 <line:266:9, col:23> 'unsigned int *' '='
|   |   | |-MemberExpr 0x18430a43fc8 <col:9, col:13> 'unsigned int *' lvalue ->indexes 0x18430a3b790
|   |   | | `-ImplicitCastExpr 0x18430a43fb0 <col:9> 'BN_STACK *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x18430a43f90 <col:9> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   |   | `-ImplicitCastExpr 0x18430a44018 <col:23> 'unsigned int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x18430a43ff8 <col:23> 'unsigned int *' lvalue Var 0x18430a35410 'newitems' 'unsigned int *'
|   |   `-BinaryOperator 0x18430a440f0 <line:267:9, col:20> 'unsigned int' '='
|   |     |-MemberExpr 0x18430a44088 <col:9, col:13> 'unsigned int' lvalue ->size 0x18430a36860
|   |     | `-ImplicitCastExpr 0x18430a44070 <col:9> 'BN_STACK *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x18430a44050 <col:9> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   |     `-ImplicitCastExpr 0x18430a440d8 <col:20> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x18430a440b8 <col:20> 'unsigned int' lvalue Var 0x18430a35128 'newsize' 'unsigned int'
|   |-BinaryOperator 0x18430a442e8 <line:269:5, col:34> 'unsigned int' '='
|   | |-ArraySubscriptExpr 0x18430a44290 <col:5, col:30> 'unsigned int' lvalue
|   | | |-ImplicitCastExpr 0x18430a44278 <col:5, col:9> 'unsigned int *' <LValueToRValue>
|   | | | `-MemberExpr 0x18430a441a8 <col:5, col:9> 'unsigned int *' lvalue ->indexes 0x18430a3b790
|   | | |   `-ImplicitCastExpr 0x18430a44190 <col:5> 'BN_STACK *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x18430a44170 <col:5> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   | | `-UnaryOperator 0x18430a44260 <col:17, col:28> 'unsigned int' postfix '++'
|   | |   `-ParenExpr 0x18430a44240 <col:17, col:27> 'unsigned int' lvalue
|   | |     `-MemberExpr 0x18430a44210 <col:18, col:22> 'unsigned int' lvalue ->depth 0x18430a367f0
|   | |       `-ImplicitCastExpr 0x18430a441f8 <col:18> 'BN_STACK *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x18430a441d8 <col:18> 'BN_STACK *' lvalue ParmVar 0x18430a34df0 'st' 'BN_STACK *'
|   | `-ImplicitCastExpr 0x18430a442d0 <col:34> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x18430a442b0 <col:34> 'unsigned int' lvalue ParmVar 0x18430a34e70 'idx' 'unsigned int'
|   `-ReturnStmt 0x18430a44330 <line:270:5, col:12>
|     `-IntegerLiteral 0x18430a44308 <col:12> 'int' 1
|-FunctionDecl 0x18430a43990 <line:264:13> col:13 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x18430a43a30 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x18430a43a98 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x18430a43b00 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x18430a44428 prev 0x18430a370a0 <line:273:1, line:276:1> line:273:21 used BN_STACK_pop 'unsigned int (BN_STACK *)' static
| |-ParmVarDecl 0x18430a44378 <col:34, col:44> col:44 used st 'BN_STACK *'
| `-CompoundStmt 0x18430a44698 <line:274:1, line:276:1>
|   `-ReturnStmt 0x18430a44628 <line:275:5, col:37>
|     `-ImplicitCastExpr 0x18430a44610 <col:12, col:37> 'unsigned int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x18430a445f0 <col:12, col:37> 'unsigned int' lvalue
|         |-ImplicitCastExpr 0x18430a445d8 <col:12, col:16> 'unsigned int *' <LValueToRValue>
|         | `-MemberExpr 0x18430a44508 <col:12, col:16> 'unsigned int *' lvalue ->indexes 0x18430a3b790
|         |   `-ImplicitCastExpr 0x18430a444f0 <col:12> 'BN_STACK *' <LValueToRValue>
|         |     `-DeclRefExpr 0x18430a444d0 <col:12> 'BN_STACK *' lvalue ParmVar 0x18430a44378 'st' 'BN_STACK *'
|         `-UnaryOperator 0x18430a445c0 <col:24, col:36> 'unsigned int' prefix '--'
|           `-ParenExpr 0x18430a445a0 <col:26, col:36> 'unsigned int' lvalue
|             `-MemberExpr 0x18430a44570 <col:27, col:31> 'unsigned int' lvalue ->depth 0x18430a367f0
|               `-ImplicitCastExpr 0x18430a44558 <col:27> 'BN_STACK *' <LValueToRValue>
|                 `-DeclRefExpr 0x18430a44538 <col:27> 'BN_STACK *' lvalue ParmVar 0x18430a44378 'st' 'BN_STACK *'
|-FunctionDecl 0x18430a44768 prev 0x18430a3aef8 <line:282:1, line:286:1> line:282:13 used BN_POOL_init 'void (BN_POOL *)' static
| |-ParmVarDecl 0x18430a446c0 <col:26, col:35> col:35 used p 'BN_POOL *'
| |-CompoundStmt 0x18430a42a00 <line:283:1, line:286:1>
| | `-BinaryOperator 0x18430a429e0 <line:285:5, col:25> 'unsigned int' '='
| |   |-MemberExpr 0x18430a428e8 <col:5, col:8> 'unsigned int' lvalue ->used 0x18430a3abe8
| |   | `-ImplicitCastExpr 0x18430a428d0 <col:5> 'BN_POOL *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x18430a428b0 <col:5> 'BN_POOL *' lvalue ParmVar 0x18430a446c0 'p' 'BN_POOL *'
| |   `-BinaryOperator 0x18430a429c0 <col:15, col:25> 'unsigned int' '='
| |     |-MemberExpr 0x18430a42950 <col:15, col:18> 'unsigned int' lvalue ->size 0x18430a3ac58
| |     | `-ImplicitCastExpr 0x18430a42938 <col:15> 'BN_POOL *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x18430a42918 <col:15> 'BN_POOL *' lvalue ParmVar 0x18430a446c0 'p' 'BN_POOL *'
| |     `-ImplicitCastExpr 0x18430a429a8 <col:25> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x18430a42980 <col:25> 'int' 0
| `-FullComment 0x18430a3ca18 <line:280:4, col:11>
|   `-ParagraphComment 0x18430a3c9f0 <col:4, col:11>
|     `-TextComment 0x18430a3c9c8 <col:4, col:11> Text="********"
|-FunctionDecl 0x18430a42ad0 prev 0x18430a3b0a0 <line:288:1, line:301:1> line:288:13 used BN_POOL_finish 'void (BN_POOL *)' static
| |-ParmVarDecl 0x18430a42a28 <col:28, col:37> col:37 used p 'BN_POOL *'
| `-CompoundStmt 0x18430a43008 <line:289:1, line:301:1>
|   `-DeclStmt 0x18430a42bf8 <line:290:5, col:22>
|     `-VarDecl 0x18430a42b90 <col:5, col:18> col:18 used loop 'unsigned int'
|-FunctionDecl 0x18430a43180 <line:304:1, line:340:1> line:304:16 invalid BN_POOL_get 'int *(BN_POOL *, int)' static
| |-ParmVarDecl 0x18430a43030 <col:28, col:37> col:37 used p 'BN_POOL *'
| |-ParmVarDecl 0x18430a430b0 <col:40, col:44> col:44 used flag 'int'
| `-CompoundStmt 0x18430a40eb8 <line:305:1, line:340:1>
|   |-DeclStmt 0x18430a432c8 <line:307:5, col:22>
|   | `-VarDecl 0x18430a43260 <col:5, col:18> col:18 used loop 'unsigned int'
|   `-IfStmt 0x18430a40a70 <line:310:5, line:333:5>
|     |-BinaryOperator 0x18430a433e0 <line:310:9, col:23> 'int' '=='
|     | |-ImplicitCastExpr 0x18430a433b0 <col:9, col:12> 'unsigned int' <LValueToRValue>
|     | | `-MemberExpr 0x18430a43318 <col:9, col:12> 'unsigned int' lvalue ->used 0x18430a3abe8
|     | |   `-ImplicitCastExpr 0x18430a43300 <col:9> 'BN_POOL *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x18430a432e0 <col:9> 'BN_POOL *' lvalue ParmVar 0x18430a43030 'p' 'BN_POOL *'
|     | `-ImplicitCastExpr 0x18430a433c8 <col:20, col:23> 'unsigned int' <LValueToRValue>
|     |   `-MemberExpr 0x18430a43380 <col:20, col:23> 'unsigned int' lvalue ->size 0x18430a3ac58
|     |     `-ImplicitCastExpr 0x18430a43368 <col:20> 'BN_POOL *' <LValueToRValue>
|     |       `-DeclRefExpr 0x18430a43348 <col:20> 'BN_POOL *' lvalue ParmVar 0x18430a43030 'p' 'BN_POOL *'
|     `-CompoundStmt 0x18430a40a40 <col:29, line:333:5>
|       |-ForStmt 0x18430a436b8 <line:314:9, line:318:9>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x18430a43530 <line:314:41, line:27:33> 'int' '<'
|       | | |-UnaryOperator 0x18430a434d8 <line:314:41, col:45> 'unsigned int' postfix '++'
|       | | | `-DeclRefExpr 0x18430a434b8 <col:41> 'unsigned int' lvalue Var 0x18430a43260 'loop' 'unsigned int'
|       | | `-ImplicitCastExpr 0x18430a43518 <line:27:33> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x18430a434f0 <col:33> 'int' 16
|       | |-<<<NULL>>>
|       | `-CompoundStmt 0x18430a436a8 <line:314:74, line:318:9>
|       |-IfStmt 0x18430a408c0 <line:322:9, line:328:9> has_else
|       | |-OpaqueValueExpr 0x18430a408a8 <<invalid sloc>> '_Bool'
|       | |-NullStmt 0x18430a408a0 <line:323:13>
|       | `-CompoundStmt 0x18430a40890 <line:324:14, line:328:9>
|       |-CompoundAssignOperator 0x18430a40990 <line:329:9, line:27:33> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       | |-MemberExpr 0x18430a40920 <line:329:9, col:12> 'unsigned int' lvalue ->size 0x18430a3ac58
|       | | `-ImplicitCastExpr 0x18430a40908 <col:9> 'BN_POOL *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x18430a408e8 <col:9> 'BN_POOL *' lvalue ParmVar 0x18430a43030 'p' 'BN_POOL *'
|       | `-ImplicitCastExpr 0x18430a40978 <line:27:33> 'unsigned int' <IntegralCast>
|       |   `-IntegerLiteral 0x18430a40950 <col:33> 'int' 16
|       `-UnaryOperator 0x18430a40a28 <line:330:9, col:16> 'unsigned int' postfix '++'
|         `-MemberExpr 0x18430a409f8 <col:9, col:12> 'unsigned int' lvalue ->used 0x18430a3abe8
|           `-ImplicitCastExpr 0x18430a409e0 <col:9> 'BN_POOL *' <LValueToRValue>
|             `-DeclRefExpr 0x18430a409c0 <col:9> 'BN_POOL *' lvalue ParmVar 0x18430a43030 'p' 'BN_POOL *'
`-FunctionDecl 0x18430a41030 prev 0x18430a3b568 <line:342:1, line:355:1> line:342:13 used BN_POOL_release 'void (BN_POOL *, unsigned int)' static
  |-ParmVarDecl 0x18430a40ee8 <col:29, col:38> col:38 used p 'BN_POOL *'
  |-ParmVarDecl 0x18430a40f68 <col:41, col:54> col:54 used num 'unsigned int'
  `-CompoundStmt 0x18430a41680 <line:343:1, line:355:1>
    |-DeclStmt 0x18430a412c0 <line:344:5, col:59>
    | `-VarDecl 0x18430a410f8 <col:5, line:27:33> line:344:18 used offset 'unsigned int' cinit
    |   `-BinaryOperator 0x18430a412a0 <col:27, line:27:33> 'unsigned int' '%'
    |     |-ParenExpr 0x18430a41240 <line:344:27, col:39> 'unsigned int'
    |     | `-BinaryOperator 0x18430a41220 <col:28, col:38> 'unsigned int' '-'
    |     |   |-ImplicitCastExpr 0x18430a411f0 <col:28, col:31> 'unsigned int' <LValueToRValue>
    |     |   | `-MemberExpr 0x18430a41198 <col:28, col:31> 'unsigned int' lvalue ->used 0x18430a3abe8
    |     |   |   `-ImplicitCastExpr 0x18430a41180 <col:28> 'BN_POOL *' <LValueToRValue>
    |     |   |     `-DeclRefExpr 0x18430a41160 <col:28> 'BN_POOL *' lvalue ParmVar 0x18430a40ee8 'p' 'BN_POOL *'
    |     |   `-ImplicitCastExpr 0x18430a41208 <col:38> 'unsigned int' <IntegralCast>
    |     |     `-IntegerLiteral 0x18430a411c8 <col:38> 'int' 1
    |     `-ImplicitCastExpr 0x18430a41288 <line:27:33> 'unsigned int' <IntegralCast>
    |       `-IntegerLiteral 0x18430a41260 <col:33> 'int' 16
    |-CompoundAssignOperator 0x18430a41378 <line:346:5, col:16> 'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-MemberExpr 0x18430a41310 <col:5, col:8> 'unsigned int' lvalue ->used 0x18430a3abe8
    | | `-ImplicitCastExpr 0x18430a412f8 <col:5> 'BN_POOL *' <LValueToRValue>
    | |   `-DeclRefExpr 0x18430a412d8 <col:5> 'BN_POOL *' lvalue ParmVar 0x18430a40ee8 'p' 'BN_POOL *'
    | `-ImplicitCastExpr 0x18430a41360 <col:16> 'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x18430a41340 <col:16> 'unsigned int' lvalue ParmVar 0x18430a40f68 'num' 'unsigned int'
    `-WhileStmt 0x18430a41668 <line:347:5, line:354:5>
      |-UnaryOperator 0x18430a413c8 <line:347:12, col:15> 'unsigned int' postfix '--'
      | `-DeclRefExpr 0x18430a413a8 <col:12> 'unsigned int' lvalue ParmVar 0x18430a40f68 'num' 'unsigned int'
      `-CompoundStmt 0x18430a41648 <col:19, line:354:5>
        |-NullStmt 0x18430a413e0 <line:348:48>
        `-IfStmt 0x18430a41620 <line:349:9, line:353:19> has_else
          |-BinaryOperator 0x18430a41478 <line:349:13, col:23> 'int' '=='
          | |-ImplicitCastExpr 0x18430a41448 <col:13> 'unsigned int' <LValueToRValue>
          | | `-DeclRefExpr 0x18430a413e8 <col:13> 'unsigned int' lvalue Var 0x18430a410f8 'offset' 'unsigned int'
          | `-ImplicitCastExpr 0x18430a41460 <col:23> 'unsigned int' <IntegralCast>
          |   `-IntegerLiteral 0x18430a41420 <col:23> 'int' 0
          |-CompoundStmt 0x18430a415d0 <col:26, line:352:9>
          | `-BinaryOperator 0x18430a41540 <line:350:13, col:41> 'unsigned int' '='
          |   |-DeclRefExpr 0x18430a41498 <col:13> 'unsigned int' lvalue Var 0x18430a410f8 'offset' 'unsigned int'
          |   `-ImplicitCastExpr 0x18430a41528 <line:27:33, line:350:41> 'unsigned int' <IntegralCast>
          |     `-BinaryOperator 0x18430a41508 <line:27:33, line:350:41> 'int' '-'
          |       |-IntegerLiteral 0x18430a414b8 <line:27:33> 'int' 16
          |       `-IntegerLiteral 0x18430a414e0 <line:350:41> 'int' 1
          `-UnaryOperator 0x18430a41608 <line:353:13, col:19> 'unsigned int' postfix '--'
            `-DeclRefExpr 0x18430a415e8 <col:13> 'unsigned int' lvalue Var 0x18430a410f8 'offset' 'unsigned int'
