TranslationUnitDecl 0x24520ea0438 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x24520ea0cd0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x24520ea09d0 '__int128'
|-TypedefDecl 0x24520ea0d40 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x24520ea09f0 'unsigned __int128'
|-TypedefDecl 0x24520ea1078 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x24520ea0e30 'struct __NSConstantString_tag'
|   `-Record 0x24520ea0d98 '__NSConstantString_tag'
|-TypedefDecl 0x24520ea10e8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x24520ea0610 'unsigned long long'
|-TypedefDecl 0x24520ea1180 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x24520ea1140 'char *'
|   `-BuiltinType 0x24520ea04d0 'char'
|-TypedefDecl 0x24520ea11f0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x24520ea1140 'char *'
|   `-BuiltinType 0x24520ea04d0 'char'
|-FunctionDecl 0x245226cd890 <.//openssl//file_jk/after\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x24520ea1290 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x24520ea1310 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x24520ea1390 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x245226cd790 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x245226cdb98 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x245226cd968 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x245226cd9e8 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x245226cda68 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x245226cdae8 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x245226cde58 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x245226cdc70 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x245226cdcf0 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x245226cdd70 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x245226ce110 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x245226cdf28 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x245226cdfa8 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x245226ce028 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x245226ce460 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x245226ce1e0 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x245226ce260 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x245226ce2e0 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x245226ce360 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x245226c7730 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x245226ce538 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x245226ce5b8 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x245226ce638 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x245226ce6b8 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x245226c77f0 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x245226c78c8 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x245226c7938 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x245226c79a8 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x245226c7a18 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x245226c7a88 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x245226c7ae0 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x245226c7bb8 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x245226c7c28 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x245226c7c98 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x245226c7d08 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x245226c7e00 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x245226c7e70 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x245226c7ec8 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x245226c7f98 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x245226c8008 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x245226c8078 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x245226c80e8 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x245226c8158 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x245226c81b0 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x245226c8288 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x245226c82f8 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x245226c8350 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x245226c86a0 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x245226cfa38 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x245226cfae8 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x245226cfc78 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x245226cfbb8 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x245226cfdc8 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x245226cfd38 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x245226cff18 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x245226cfe88 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x245226d02d8 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x245226cffd8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x245226d0058 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x245226d00d8 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x245226d0158 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x245226d01d8 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x245226d0598 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x245226d03b8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x245226d0438 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x245226d04b8 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x245226c97f0 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x245226d0668 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x245226d06e8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x245226c9750 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x245226c9b38 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x245226c98c0 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x245226c9940 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x245226c99c0 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x245226c9a40 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x245226c9d68 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x245226c9c10 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x245226c9c90 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x245226c9f48 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x245226c9e30 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x245226c9eb0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x245226ca200 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x245226ca010 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x245226ca090 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x245226ca110 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x245226ca550 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x245226ca2d0 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x245226ca350 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x245226ca3d0 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x245226ca450 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x245226dff28 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x245226ca628 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x245226ca6a8 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x245226dfc00 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x245226dfc80 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x245226dfd00 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x245226dfd80 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x245226dfe00 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x245226e03d8 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x245226e0018 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x245226e0098 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x245226e0118 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x245226e0198 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x245226e0218 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x245226e0298 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x245226e0318 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x245226e06f0 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x245226e04c8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x245226e0548 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x245226e05c8 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x245226e0648 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x245226e0a38 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x245226e07c8 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x245226e0848 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x245226e08c8 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x245226e0948 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x245226e0e28 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x245226e0b10 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x245226e0b90 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x245226e0c28 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x245226e0ca8 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x245226e0d28 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x245226e1298 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x245226e0f08 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x245226e0f88 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x245226e1008 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x245226e1088 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x245226e1108 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x245226e1188 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x245226e1690 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x245226e1380 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x245226e1400 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x245226e1480 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x245226e1500 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x245226e1580 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x245226e1a28 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x245226e1770 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x245226e17f0 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x245226e1870 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x245226e18f0 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x245226e1970 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x245226e1ec0 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x245226e1b08 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x245226e1b88 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x245226e1c20 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x245226e1ca0 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x245226e1d20 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x245226e1da0 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x245226e22b0 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x245226e1fa8 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x245226e2028 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x245226e20a8 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x245226e2128 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x245226e21a8 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x245226e26a0 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x245226e2390 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x245226e2410 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x245226e2490 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x245226e2510 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x245226e2590 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x245226e2970 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x245226e2780 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x245226e2800 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x245226e2880 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x245226e3c40 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x245226e2a40 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x245226e2ac0 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x245226e2b40 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x245226e3d10 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-RecordDecl 0x245226e3dd8 <.//openssl//file_jk/after\crypto\bn\bn_ctx.c:43:9, line:48:1> line:43:16 invalid struct bignum_pool definition
| |-FieldDecl 0x245226e3ea8 <line:45:5, col:19> col:19 invalid head 'int *'
| |-FieldDecl 0x245226e3f18 <col:5, col:26> col:26 invalid current 'int *'
| |-FieldDecl 0x245226e3f88 <col:5, col:36> col:36 invalid tail 'int *'
| |-FieldDecl 0x245226e3ff8 <line:47:5, col:14> col:14 referenced used 'unsigned int'
| `-FieldDecl 0x245226e4068 <col:5, col:20> col:20 referenced size 'unsigned int'
|-TypedefDecl 0x245226e4118 <line:43:1, line:48:3> col:3 referenced BN_POOL 'struct bignum_pool':'struct bignum_pool'
| `-ElaboratedType 0x245226e40c0 'struct bignum_pool' sugar
|   `-RecordType 0x245226e3e70 'struct bignum_pool'
|     `-Record 0x245226e3dd8 'bignum_pool'
|-FunctionDecl 0x245226e4308 <line:49:1, col:35> col:13 used BN_POOL_init 'void (BN_POOL *)' static
| `-ParmVarDecl 0x245226e4218 <col:26, col:34> col:35 'BN_POOL *'
|-FunctionDecl 0x245226e44b0 <line:50:1, col:37> col:13 used BN_POOL_finish 'void (BN_POOL *)' static
| `-ParmVarDecl 0x245226e4420 <col:28, col:36> col:37 'BN_POOL *'
|-FunctionDecl 0x245226e4720 <line:51:1, col:42> col:16 invalid BN_POOL_get 'int *(BN_POOL *, int)' static
| |-ParmVarDecl 0x245226e4580 <col:28, col:36> col:37 'BN_POOL *'
| `-ParmVarDecl 0x245226e4600 <col:39> col:42 'int'
|-FunctionDecl 0x245226e4978 <line:52:1, col:52> col:13 used BN_POOL_release 'void (BN_POOL *, unsigned int)' static
| |-ParmVarDecl 0x245226e47e0 <col:29, col:37> col:38 'BN_POOL *'
| `-ParmVarDecl 0x245226e4860 <col:40, col:49> col:52 'unsigned int'
|-RecordDecl 0x245226e4aa0 <line:59:9, line:64:1> line:59:16 struct bignum_ctx_stack definition
| |-FullComment 0x245226e5a10 <line:56:4, col:12>
| | `-ParagraphComment 0x245226e59e8 <col:4, col:12>
| |   `-TextComment 0x245226e59c0 <col:4, col:12> Text="*********"
| |-FieldDecl 0x245226e4ba0 <line:61:5, col:19> col:19 referenced indexes 'unsigned int *'
| |-FieldDecl 0x245226ddbe0 <line:63:5, col:18> col:18 referenced depth 'unsigned int'
| `-FieldDecl 0x245226ddc50 <col:5, col:25> col:25 referenced size 'unsigned int'
|-TypedefDecl 0x245226ddd08 <line:59:1, line:64:3> col:3 referenced BN_STACK 'struct bignum_ctx_stack':'struct bignum_ctx_stack'
| |-ElaboratedType 0x245226ddcb0 'struct bignum_ctx_stack' sugar
| | `-RecordType 0x245226e4b40 'struct bignum_ctx_stack'
| |   `-Record 0x245226e4aa0 'bignum_ctx_stack'
| `-FullComment 0x245226e5ad8 <line:56:4, col:12>
|   `-ParagraphComment 0x245226e5ab0 <col:4, col:12>
|     `-TextComment 0x245226e5a88 <col:4, col:12> Text="*********"
|-FunctionDecl 0x245226ddef8 <line:65:1, col:37> col:13 used BN_STACK_init 'void (BN_STACK *)' static
| `-ParmVarDecl 0x245226dde08 <col:27, col:36> col:37 'BN_STACK *'
|-FunctionDecl 0x245226de058 <line:66:1, col:39> col:13 used BN_STACK_finish 'void (BN_STACK *)' static
| `-ParmVarDecl 0x245226ddfc8 <col:29, col:38> col:39 'BN_STACK *'
|-FunctionDecl 0x245226de2c0 <line:67:1, col:50> col:12 used BN_STACK_push 'int (BN_STACK *, unsigned int)' static
| |-ParmVarDecl 0x245226de128 <col:26, col:35> col:36 'BN_STACK *'
| `-ParmVarDecl 0x245226de1a8 <col:38, col:47> col:50 'unsigned int'
|-FunctionDecl 0x245226de490 <line:68:1, col:44> col:21 used BN_STACK_pop 'unsigned int (BN_STACK *)' static
| `-ParmVarDecl 0x245226de398 <col:34, col:43> col:44 'BN_STACK *'
|-RecordDecl 0x245226de5b0 <line:75:1, line:88:1> line:75:8 invalid struct bignum_ctx definition
| |-FullComment 0x245226e5c00 <line:72:4, col:10>
| | `-ParagraphComment 0x245226e5bd8 <col:4, col:10>
| |   `-TextComment 0x245226e5bb0 <col:4, col:10> Text="*******"
| |-FieldDecl 0x245226de680 <line:77:5, col:13> col:13 invalid pool 'BN_POOL':'struct bignum_pool'
| |-FieldDecl 0x245226de6e8 <line:79:5, col:14> col:14 stack 'BN_STACK':'struct bignum_ctx_stack'
| |-FieldDecl 0x245226de758 <line:81:5, col:18> col:18 used 'unsigned int'
| |-FieldDecl 0x245226de7c8 <line:83:5, col:9> col:9 err_stack 'int'
| |-FieldDecl 0x245226de838 <line:85:5, col:9> col:9 too_many 'int'
| `-FieldDecl 0x245226de8a8 <line:87:5, col:9> col:9 flags 'int'
|-FunctionDecl 0x245226de9d0 <line:134:1, line:146:1> line:134:9 invalid BN_CTX_new 'int *(void)'
| `-CompoundStmt 0x245226e5df0 <line:135:1, line:146:1>
|   `-IfStmt 0x245226e5d98 <line:138:5, line:141:5>
|     |-OpaqueValueExpr 0x245226e5d80 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x245226e5d70 <line:138:55, line:141:5>
|-FunctionDecl 0x245226e5ea8 <line:148:1, line:155:1> line:148:9 invalid BN_CTX_secure_new 'int *(void)'
| `-CompoundStmt 0x245226e5f60 <line:149:1, line:155:1>
|-FunctionDecl 0x245226e6018 <line:157:1, line:179:1> line:157:6 invalid BN_CTX_free 'void (int *)'
| |-ParmVarDecl 0x245226e5f88 <col:18, col:26> col:26 invalid ctx 'int *'
| `-CompoundStmt 0x245226e6268 <line:158:1, line:179:1>
|   `-IfStmt 0x245226e6100 <line:159:5, line:160:9>
|     |-OpaqueValueExpr 0x245226e60e8 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x245226e60d8 <col:9>
|-FunctionDecl 0x245226e6328 <line:181:1, line:193:1> line:181:6 invalid BN_CTX_start 'void (int *)'
| |-ParmVarDecl 0x245226e6298 <col:19, col:27> col:27 invalid ctx 'int *'
| `-CompoundStmt 0x245226e64c0 <line:182:1, line:193:1>
|   |-NullStmt 0x245226e63e8 <line:183:38>
|   |-IfStmt 0x245226e6490 <line:185:5, line:191:5> has_else
|   | |-OpaqueValueExpr 0x245226e6478 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x245226e6470 <line:186:9>
|   | `-IfStmt 0x245226e6458 <line:188:10, line:191:5>
|   |   |-OpaqueValueExpr 0x245226e6440 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x245226e6430 <line:188:54, line:191:5>
|   `-NullStmt 0x245226e64b8 <line:192:21>
|-FunctionDecl 0x245226e6590 <line:195:1, line:210:1> line:195:6 invalid BN_CTX_end 'void (int *)'
| |-ParmVarDecl 0x245226e6500 <col:17, col:25> col:25 invalid ctx 'int *'
| `-CompoundStmt 0x245226e6838 <line:196:1, line:210:1>
|   |-NullStmt 0x245226e6650 <line:197:36>
|   |-IfStmt 0x245226e6808 <line:198:5, line:208:5> has_else
|   | |-OpaqueValueExpr 0x245226e67f0 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x245226e67e8 <line:199:9>
|   | `-CompoundStmt 0x245226e67d0 <line:200:10, line:208:5>
|   |   `-DeclStmt 0x245226e66f8 <line:201:9, col:52>
|   |     `-VarDecl 0x245226e6670 <col:9, col:22> col:22 used fp 'unsigned int'
|   `-NullStmt 0x245226e6830 <line:209:21>
|-FunctionDecl 0x245226e6940 <line:212:1, line:235:1> line:212:9 invalid BN_CTX_get 'int *(int *)'
| |-ParmVarDecl 0x245226e6878 <col:20, col:28> col:28 invalid ctx 'int *'
| `-CompoundStmt 0x245226e6c08 <line:213:1, line:235:1>
|   |-NullStmt 0x245226e6a00 <line:216:36>
|   |-IfStmt 0x245226e6a78 <line:219:5, line:227:5>
|   | |-OpaqueValueExpr 0x245226e6a60 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x245226e6a50 <line:219:62, line:227:5>
|   `-NullStmt 0x245226e6ba0 <line:233:25>
|-FunctionDecl 0x245226e7d28 prev 0x245226ddef8 <line:241:1, line:245:1> line:241:13 used BN_STACK_init 'void (BN_STACK *)' static
| |-ParmVarDecl 0x245226e7c80 <col:27, col:37> col:37 used st 'BN_STACK *'
| |-CompoundStmt 0x245226e7f88 <line:242:1, line:245:1>
| | `-BinaryOperator 0x245226e7f68 <line:244:5, col:28> 'unsigned int' '='
| |   |-MemberExpr 0x245226e7e70 <col:5, col:9> 'unsigned int' lvalue ->depth 0x245226ddbe0
| |   | `-ImplicitCastExpr 0x245226e7e58 <col:5> 'BN_STACK *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x245226e7e38 <col:5> 'BN_STACK *' lvalue ParmVar 0x245226e7c80 'st' 'BN_STACK *'
| |   `-BinaryOperator 0x245226e7f48 <col:17, col:28> 'unsigned int' '='
| |     |-MemberExpr 0x245226e7ed8 <col:17, col:21> 'unsigned int' lvalue ->size 0x245226ddc50
| |     | `-ImplicitCastExpr 0x245226e7ec0 <col:17> 'BN_STACK *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x245226e7ea0 <col:17> 'BN_STACK *' lvalue ParmVar 0x245226e7c80 'st' 'BN_STACK *'
| |     `-ImplicitCastExpr 0x245226e7f30 <col:28> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x245226e7f08 <col:28> 'int' 0
| `-FullComment 0x245226f0de0 <line:239:4, col:12>
|   `-ParagraphComment 0x245226f0db8 <col:4, col:12>
|     `-TextComment 0x245226f0d90 <col:4, col:12> Text="*********"
|-FunctionDecl 0x245226e8058 prev 0x245226de058 <line:247:1, line:251:1> line:247:13 used BN_STACK_finish 'void (BN_STACK *)' static
| |-ParmVarDecl 0x245226e7fb0 <col:29, col:39> col:39 used st 'BN_STACK *'
| `-CompoundStmt 0x245226e8278 <line:248:1, line:251:1>
|   `-CallExpr 0x245226e81d0 <line:249:5, col:29> 'int'
|     |-ImplicitCastExpr 0x245226e81b8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x245226e8100 <col:5> 'int ()' Function 0x245226e6180 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x245226e81f8 <col:18, col:22> 'unsigned int *' <LValueToRValue>
|       `-MemberExpr 0x245226e8158 <col:18, col:22> 'unsigned int *' lvalue ->indexes 0x245226e4ba0
|         `-ImplicitCastExpr 0x245226e8140 <col:18> 'BN_STACK *' <LValueToRValue>
|           `-DeclRefExpr 0x245226e8120 <col:18> 'BN_STACK *' lvalue ParmVar 0x245226e7fb0 'st' 'BN_STACK *'
|-FunctionDecl 0x245226e83f0 prev 0x245226de2c0 <line:254:1, line:271:1> line:254:12 used BN_STACK_push 'int (BN_STACK *, unsigned int)' static
| |-ParmVarDecl 0x245226e82a0 <col:26, col:36> col:36 used st 'BN_STACK *'
| |-ParmVarDecl 0x245226e8320 <col:40, col:53> col:53 used idx 'unsigned int'
| `-CompoundStmt 0x245226e9710 <line:255:1, line:271:1>
|   |-IfStmt 0x245226e9528 <line:256:5, line:268:5>
|   | |-BinaryOperator 0x245226e85a0 <line:256:9, col:26> 'int' '=='
|   | | |-ImplicitCastExpr 0x245226e8570 <col:9, col:13> 'unsigned int' <LValueToRValue>
|   | | | `-MemberExpr 0x245226e84d8 <col:9, col:13> 'unsigned int' lvalue ->depth 0x245226ddbe0
|   | | |   `-ImplicitCastExpr 0x245226e84c0 <col:9> 'BN_STACK *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x245226e84a0 <col:9> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   | | `-ImplicitCastExpr 0x245226e8588 <col:22, col:26> 'unsigned int' <LValueToRValue>
|   | |   `-MemberExpr 0x245226e8540 <col:22, col:26> 'unsigned int' lvalue ->size 0x245226ddc50
|   | |     `-ImplicitCastExpr 0x245226e8528 <col:22> 'BN_STACK *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x245226e8508 <col:22> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   | `-CompoundStmt 0x245226e94e0 <col:32, line:268:5>
|   |   |-DeclStmt 0x245226e8890 <line:258:9, line:259:64>
|   |   | `-VarDecl 0x245226e85d8 <line:258:9, line:29:33> line:258:22 used newsize 'unsigned int' cinit
|   |   |   `-ConditionalOperator 0x245226e8860 <line:259:13, line:29:33> 'unsigned int'
|   |   |     |-ImplicitCastExpr 0x245226e8830 <line:259:13, col:17> 'unsigned int' <LValueToRValue>
|   |   |     | `-MemberExpr 0x245226e8678 <col:13, col:17> 'unsigned int' lvalue ->size 0x245226ddc50
|   |   |     |   `-ImplicitCastExpr 0x245226e8660 <col:13> 'BN_STACK *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x245226e8640 <col:13> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   |   |     |-ParenExpr 0x245226e87e8 <col:24, col:41> 'unsigned int'
|   |   |     | `-BinaryOperator 0x245226e87c8 <col:25, col:40> 'unsigned int' '/'
|   |   |     |   |-BinaryOperator 0x245226e8768 <col:25, col:36> 'unsigned int' '*'
|   |   |     |   | |-ImplicitCastExpr 0x245226e8738 <col:25, col:29> 'unsigned int' <LValueToRValue>
|   |   |     |   | | `-MemberExpr 0x245226e86e0 <col:25, col:29> 'unsigned int' lvalue ->size 0x245226ddc50
|   |   |     |   | |   `-ImplicitCastExpr 0x245226e86c8 <col:25> 'BN_STACK *' <LValueToRValue>
|   |   |     |   | |     `-DeclRefExpr 0x245226e86a8 <col:25> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   |   |     |   | `-ImplicitCastExpr 0x245226e8750 <col:36> 'unsigned int' <IntegralCast>
|   |   |     |   |   `-IntegerLiteral 0x245226e8710 <col:36> 'int' 3
|   |   |     |   `-ImplicitCastExpr 0x245226e87b0 <col:40> 'unsigned int' <IntegralCast>
|   |   |     |     `-IntegerLiteral 0x245226e8788 <col:40> 'int' 2
|   |   |     `-ImplicitCastExpr 0x245226e8848 <line:29:33> 'unsigned int' <IntegralCast>
|   |   |       `-IntegerLiteral 0x245226e8808 <col:33> 'int' 32
|   |   |-DeclStmt 0x245226e8ba8 <line:260:9, col:77>
|   |   | `-VarDecl 0x245226e88c0 <col:9, col:76> col:23 used newitems 'unsigned int *' cinit
|   |   |   `-ImplicitCastExpr 0x245226e8b90 <col:34, col:76> 'unsigned int *' <IntegralToPointer>
|   |   |     `-CallExpr 0x245226e8b68 <col:34, col:76> 'int'
|   |   |       |-ImplicitCastExpr 0x245226e8b50 <col:34> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x245226e8a18 <col:34> 'int ()' Function 0x245226e8950 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x245226e8b30 <col:49, col:69> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x245226e8aa8 <col:49, col:65> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x245226e8a88 <col:55, col:65> 'unsigned int' lvalue
|   |   |         |   `-UnaryOperator 0x245226e8a70 <col:56, col:57> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x245226e8a58 <col:57> 'unsigned int *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x245226e8a38 <col:57> 'unsigned int *' lvalue Var 0x245226e88c0 'newitems' 'unsigned int *' non_odr_use_unevaluated
|   |   |         `-ImplicitCastExpr 0x245226e8b18 <col:69> 'unsigned long long' <IntegralCast>
|   |   |           `-ImplicitCastExpr 0x245226e8b00 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x245226e8ac8 <col:69> 'unsigned int' lvalue Var 0x245226e85d8 'newsize' 'unsigned int'
|   |   |-IfStmt 0x245226e8c48 <line:261:9, line:262:20>
|   |   | |-OpaqueValueExpr 0x245226e8c30 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x245226e8c20 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x245226e8bf8 <col:20> 'int' 0
|   |   |-IfStmt 0x245226e9268 <line:263:9, line:264:72>
|   |   | |-ImplicitCastExpr 0x245226e8cd8 <line:263:13, col:17> 'unsigned int' <LValueToRValue>
|   |   | | `-MemberExpr 0x245226e8ca8 <col:13, col:17> 'unsigned int' lvalue ->depth 0x245226ddbe0
|   |   | |   `-ImplicitCastExpr 0x245226e8c90 <col:13> 'BN_STACK *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x245226e8c60 <col:13> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   |   | `-CallExpr 0x245226e91d0 <line:264:13, col:72> 'void *'
|   |   |   |-ImplicitCastExpr 0x245226e91b8 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x245226e8f50 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x245226e8d60 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |   |-ImplicitCastExpr 0x245226e9220 <col:20> 'void *' <BitCast>
|   |   |   | `-ImplicitCastExpr 0x245226e9208 <col:20> 'unsigned int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x245226e8f88 <col:20> 'unsigned int *' lvalue Var 0x245226e88c0 'newitems' 'unsigned int *'
|   |   |   |-ImplicitCastExpr 0x245226e9250 <col:30, col:34> 'const void *' <BitCast>
|   |   |   | `-ImplicitCastExpr 0x245226e9238 <col:30, col:34> 'unsigned int *' <LValueToRValue>
|   |   |   |   `-MemberExpr 0x245226e8fe0 <col:30, col:34> 'unsigned int *' lvalue ->indexes 0x245226e4ba0
|   |   |   |     `-ImplicitCastExpr 0x245226e8fc8 <col:30> 'BN_STACK *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x245226e8fa8 <col:30> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   |   |   `-BinaryOperator 0x245226e9138 <col:43, col:67> 'unsigned long long' '*'
|   |   |     |-UnaryExprOrTypeTraitExpr 0x245226e9080 <col:43, col:59> 'unsigned long long' sizeof
|   |   |     | `-ParenExpr 0x245226e9060 <col:49, col:59> 'unsigned int' lvalue
|   |   |     |   `-UnaryOperator 0x245226e9048 <col:50, col:51> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   |     |     `-ImplicitCastExpr 0x245226e9030 <col:51> 'unsigned int *' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x245226e9010 <col:51> 'unsigned int *' lvalue Var 0x245226e88c0 'newitems' 'unsigned int *' non_odr_use_unevaluated
|   |   |     `-ImplicitCastExpr 0x245226e9120 <col:63, col:67> 'unsigned long long' <IntegralCast>
|   |   |       `-ImplicitCastExpr 0x245226e9108 <col:63, col:67> 'unsigned int' <LValueToRValue>
|   |   |         `-MemberExpr 0x245226e90d8 <col:63, col:67> 'unsigned int' lvalue ->depth 0x245226ddbe0
|   |   |           `-ImplicitCastExpr 0x245226e90c0 <col:63> 'BN_STACK *' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x245226e90a0 <col:63> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   |   |-CallExpr 0x245226e9320 <line:265:9, col:33> 'int'
|   |   | |-ImplicitCastExpr 0x245226e9308 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x245226e9280 <col:9> 'int ()' Function 0x245226e6180 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x245226e9348 <col:22, col:26> 'unsigned int *' <LValueToRValue>
|   |   |   `-MemberExpr 0x245226e92d8 <col:22, col:26> 'unsigned int *' lvalue ->indexes 0x245226e4ba0
|   |   |     `-ImplicitCastExpr 0x245226e92c0 <col:22> 'BN_STACK *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x245226e92a0 <col:22> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   |   |-BinaryOperator 0x245226e9400 <line:266:9, col:23> 'unsigned int *' '='
|   |   | |-MemberExpr 0x245226e9398 <col:9, col:13> 'unsigned int *' lvalue ->indexes 0x245226e4ba0
|   |   | | `-ImplicitCastExpr 0x245226e9380 <col:9> 'BN_STACK *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x245226e9360 <col:9> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   |   | `-ImplicitCastExpr 0x245226e93e8 <col:23> 'unsigned int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x245226e93c8 <col:23> 'unsigned int *' lvalue Var 0x245226e88c0 'newitems' 'unsigned int *'
|   |   `-BinaryOperator 0x245226e94c0 <line:267:9, col:20> 'unsigned int' '='
|   |     |-MemberExpr 0x245226e9458 <col:9, col:13> 'unsigned int' lvalue ->size 0x245226ddc50
|   |     | `-ImplicitCastExpr 0x245226e9440 <col:9> 'BN_STACK *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x245226e9420 <col:9> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   |     `-ImplicitCastExpr 0x245226e94a8 <col:20> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x245226e9488 <col:20> 'unsigned int' lvalue Var 0x245226e85d8 'newsize' 'unsigned int'
|   |-BinaryOperator 0x245226e96b8 <line:269:5, col:34> 'unsigned int' '='
|   | |-ArraySubscriptExpr 0x245226e9660 <col:5, col:30> 'unsigned int' lvalue
|   | | |-ImplicitCastExpr 0x245226e9648 <col:5, col:9> 'unsigned int *' <LValueToRValue>
|   | | | `-MemberExpr 0x245226e9578 <col:5, col:9> 'unsigned int *' lvalue ->indexes 0x245226e4ba0
|   | | |   `-ImplicitCastExpr 0x245226e9560 <col:5> 'BN_STACK *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x245226e9540 <col:5> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   | | `-UnaryOperator 0x245226e9630 <col:17, col:28> 'unsigned int' postfix '++'
|   | |   `-ParenExpr 0x245226e9610 <col:17, col:27> 'unsigned int' lvalue
|   | |     `-MemberExpr 0x245226e95e0 <col:18, col:22> 'unsigned int' lvalue ->depth 0x245226ddbe0
|   | |       `-ImplicitCastExpr 0x245226e95c8 <col:18> 'BN_STACK *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x245226e95a8 <col:18> 'BN_STACK *' lvalue ParmVar 0x245226e82a0 'st' 'BN_STACK *'
|   | `-ImplicitCastExpr 0x245226e96a0 <col:34> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x245226e9680 <col:34> 'unsigned int' lvalue ParmVar 0x245226e8320 'idx' 'unsigned int'
|   `-ReturnStmt 0x245226e9700 <line:270:5, col:12>
|     `-IntegerLiteral 0x245226e96d8 <col:12> 'int' 1
|-FunctionDecl 0x245226e8d60 <line:264:13> col:13 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x245226e8e00 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x245226e8e68 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x245226e8ed0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x245226e97f8 prev 0x245226de490 <line:273:1, line:276:1> line:273:21 used BN_STACK_pop 'unsigned int (BN_STACK *)' static
| |-ParmVarDecl 0x245226e9748 <col:34, col:44> col:44 used st 'BN_STACK *'
| `-CompoundStmt 0x245226e9a68 <line:274:1, line:276:1>
|   `-ReturnStmt 0x245226e99f8 <line:275:5, col:37>
|     `-ImplicitCastExpr 0x245226e99e0 <col:12, col:37> 'unsigned int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x245226e99c0 <col:12, col:37> 'unsigned int' lvalue
|         |-ImplicitCastExpr 0x245226e99a8 <col:12, col:16> 'unsigned int *' <LValueToRValue>
|         | `-MemberExpr 0x245226e98d8 <col:12, col:16> 'unsigned int *' lvalue ->indexes 0x245226e4ba0
|         |   `-ImplicitCastExpr 0x245226e98c0 <col:12> 'BN_STACK *' <LValueToRValue>
|         |     `-DeclRefExpr 0x245226e98a0 <col:12> 'BN_STACK *' lvalue ParmVar 0x245226e9748 'st' 'BN_STACK *'
|         `-UnaryOperator 0x245226e9990 <col:24, col:36> 'unsigned int' prefix '--'
|           `-ParenExpr 0x245226e9970 <col:26, col:36> 'unsigned int' lvalue
|             `-MemberExpr 0x245226e9940 <col:27, col:31> 'unsigned int' lvalue ->depth 0x245226ddbe0
|               `-ImplicitCastExpr 0x245226e9928 <col:27> 'BN_STACK *' <LValueToRValue>
|                 `-DeclRefExpr 0x245226e9908 <col:27> 'BN_STACK *' lvalue ParmVar 0x245226e9748 'st' 'BN_STACK *'
|-FunctionDecl 0x245226e9b38 prev 0x245226e4308 <line:282:1, line:286:1> line:282:13 used BN_POOL_init 'void (BN_POOL *)' static
| |-ParmVarDecl 0x245226e9a90 <col:26, col:35> col:35 used p 'BN_POOL *'
| |-CompoundStmt 0x245226e9df0 <line:283:1, line:286:1>
| | `-BinaryOperator 0x245226e9dd0 <line:285:5, col:25> 'unsigned int' '='
| |   |-MemberExpr 0x245226e9cd8 <col:5, col:8> 'unsigned int' lvalue ->used 0x245226e3ff8
| |   | `-ImplicitCastExpr 0x245226e9cc0 <col:5> 'BN_POOL *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x245226e9ca0 <col:5> 'BN_POOL *' lvalue ParmVar 0x245226e9a90 'p' 'BN_POOL *'
| |   `-BinaryOperator 0x245226e9db0 <col:15, col:25> 'unsigned int' '='
| |     |-MemberExpr 0x245226e9d40 <col:15, col:18> 'unsigned int' lvalue ->size 0x245226e4068
| |     | `-ImplicitCastExpr 0x245226e9d28 <col:15> 'BN_POOL *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x245226e9d08 <col:15> 'BN_POOL *' lvalue ParmVar 0x245226e9a90 'p' 'BN_POOL *'
| |     `-ImplicitCastExpr 0x245226e9d98 <col:25> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x245226e9d70 <col:25> 'int' 0
| `-FullComment 0x245226f0ed8 <line:280:4, col:11>
|   `-ParagraphComment 0x245226f0eb0 <col:4, col:11>
|     `-TextComment 0x245226f0e88 <col:4, col:11> Text="********"
|-FunctionDecl 0x245226e9ec0 prev 0x245226e44b0 <line:288:1, line:301:1> line:288:13 used BN_POOL_finish 'void (BN_POOL *)' static
| |-ParmVarDecl 0x245226e9e18 <col:28, col:37> col:37 used p 'BN_POOL *'
| `-CompoundStmt 0x245226ea3f8 <line:289:1, line:301:1>
|   `-DeclStmt 0x245226e9fe8 <line:290:5, col:22>
|     `-VarDecl 0x245226e9f80 <col:5, col:18> col:18 used loop 'unsigned int'
|-FunctionDecl 0x245226ea570 <line:304:1, line:340:1> line:304:16 invalid BN_POOL_get 'int *(BN_POOL *, int)' static
| |-ParmVarDecl 0x245226ea420 <col:28, col:37> col:37 used p 'BN_POOL *'
| |-ParmVarDecl 0x245226ea4a0 <col:40, col:44> col:44 used flag 'int'
| `-CompoundStmt 0x245226eb2d8 <line:305:1, line:340:1>
|   |-DeclStmt 0x245226ea6b8 <line:307:5, col:22>
|   | `-VarDecl 0x245226ea650 <col:5, col:18> col:18 used loop 'unsigned int'
|   `-IfStmt 0x245226eae90 <line:310:5, line:333:5>
|     |-BinaryOperator 0x245226ea7d0 <line:310:9, col:23> 'int' '=='
|     | |-ImplicitCastExpr 0x245226ea7a0 <col:9, col:12> 'unsigned int' <LValueToRValue>
|     | | `-MemberExpr 0x245226ea708 <col:9, col:12> 'unsigned int' lvalue ->used 0x245226e3ff8
|     | |   `-ImplicitCastExpr 0x245226ea6f0 <col:9> 'BN_POOL *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x245226ea6d0 <col:9> 'BN_POOL *' lvalue ParmVar 0x245226ea420 'p' 'BN_POOL *'
|     | `-ImplicitCastExpr 0x245226ea7b8 <col:20, col:23> 'unsigned int' <LValueToRValue>
|     |   `-MemberExpr 0x245226ea770 <col:20, col:23> 'unsigned int' lvalue ->size 0x245226e4068
|     |     `-ImplicitCastExpr 0x245226ea758 <col:20> 'BN_POOL *' <LValueToRValue>
|     |       `-DeclRefExpr 0x245226ea738 <col:20> 'BN_POOL *' lvalue ParmVar 0x245226ea420 'p' 'BN_POOL *'
|     `-CompoundStmt 0x245226eae60 <col:29, line:333:5>
|       |-ForStmt 0x245226eaaa8 <line:314:9, line:318:9>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x245226ea920 <line:314:41, line:27:33> 'int' '<'
|       | | |-UnaryOperator 0x245226ea8c8 <line:314:41, col:45> 'unsigned int' postfix '++'
|       | | | `-DeclRefExpr 0x245226ea8a8 <col:41> 'unsigned int' lvalue Var 0x245226ea650 'loop' 'unsigned int'
|       | | `-ImplicitCastExpr 0x245226ea908 <line:27:33> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x245226ea8e0 <col:33> 'int' 16
|       | |-<<<NULL>>>
|       | `-CompoundStmt 0x245226eaa98 <line:314:74, line:318:9>
|       |-IfStmt 0x245226eace0 <line:322:9, line:328:9> has_else
|       | |-OpaqueValueExpr 0x245226eacc8 <<invalid sloc>> '_Bool'
|       | |-NullStmt 0x245226eacc0 <line:323:13>
|       | `-CompoundStmt 0x245226eacb0 <line:324:14, line:328:9>
|       |-CompoundAssignOperator 0x245226eadb0 <line:329:9, line:27:33> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       | |-MemberExpr 0x245226ead40 <line:329:9, col:12> 'unsigned int' lvalue ->size 0x245226e4068
|       | | `-ImplicitCastExpr 0x245226ead28 <col:9> 'BN_POOL *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x245226ead08 <col:9> 'BN_POOL *' lvalue ParmVar 0x245226ea420 'p' 'BN_POOL *'
|       | `-ImplicitCastExpr 0x245226ead98 <line:27:33> 'unsigned int' <IntegralCast>
|       |   `-IntegerLiteral 0x245226ead70 <col:33> 'int' 16
|       `-UnaryOperator 0x245226eae48 <line:330:9, col:16> 'unsigned int' postfix '++'
|         `-MemberExpr 0x245226eae18 <col:9, col:12> 'unsigned int' lvalue ->used 0x245226e3ff8
|           `-ImplicitCastExpr 0x245226eae00 <col:9> 'BN_POOL *' <LValueToRValue>
|             `-DeclRefExpr 0x245226eade0 <col:9> 'BN_POOL *' lvalue ParmVar 0x245226ea420 'p' 'BN_POOL *'
`-FunctionDecl 0x245226eb450 prev 0x245226e4978 <line:342:1, line:355:1> line:342:13 used BN_POOL_release 'void (BN_POOL *, unsigned int)' static
  |-ParmVarDecl 0x245226eb308 <col:29, col:38> col:38 used p 'BN_POOL *'
  |-ParmVarDecl 0x245226eb388 <col:41, col:54> col:54 used num 'unsigned int'
  `-CompoundStmt 0x245226ebaa0 <line:343:1, line:355:1>
    |-DeclStmt 0x245226eb6e0 <line:344:5, col:59>
    | `-VarDecl 0x245226eb518 <col:5, line:27:33> line:344:18 used offset 'unsigned int' cinit
    |   `-BinaryOperator 0x245226eb6c0 <col:27, line:27:33> 'unsigned int' '%'
    |     |-ParenExpr 0x245226eb660 <line:344:27, col:39> 'unsigned int'
    |     | `-BinaryOperator 0x245226eb640 <col:28, col:38> 'unsigned int' '-'
    |     |   |-ImplicitCastExpr 0x245226eb610 <col:28, col:31> 'unsigned int' <LValueToRValue>
    |     |   | `-MemberExpr 0x245226eb5b8 <col:28, col:31> 'unsigned int' lvalue ->used 0x245226e3ff8
    |     |   |   `-ImplicitCastExpr 0x245226eb5a0 <col:28> 'BN_POOL *' <LValueToRValue>
    |     |   |     `-DeclRefExpr 0x245226eb580 <col:28> 'BN_POOL *' lvalue ParmVar 0x245226eb308 'p' 'BN_POOL *'
    |     |   `-ImplicitCastExpr 0x245226eb628 <col:38> 'unsigned int' <IntegralCast>
    |     |     `-IntegerLiteral 0x245226eb5e8 <col:38> 'int' 1
    |     `-ImplicitCastExpr 0x245226eb6a8 <line:27:33> 'unsigned int' <IntegralCast>
    |       `-IntegerLiteral 0x245226eb680 <col:33> 'int' 16
    |-CompoundAssignOperator 0x245226eb798 <line:346:5, col:16> 'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-MemberExpr 0x245226eb730 <col:5, col:8> 'unsigned int' lvalue ->used 0x245226e3ff8
    | | `-ImplicitCastExpr 0x245226eb718 <col:5> 'BN_POOL *' <LValueToRValue>
    | |   `-DeclRefExpr 0x245226eb6f8 <col:5> 'BN_POOL *' lvalue ParmVar 0x245226eb308 'p' 'BN_POOL *'
    | `-ImplicitCastExpr 0x245226eb780 <col:16> 'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x245226eb760 <col:16> 'unsigned int' lvalue ParmVar 0x245226eb388 'num' 'unsigned int'
    `-WhileStmt 0x245226eba88 <line:347:5, line:354:5>
      |-UnaryOperator 0x245226eb7e8 <line:347:12, col:15> 'unsigned int' postfix '--'
      | `-DeclRefExpr 0x245226eb7c8 <col:12> 'unsigned int' lvalue ParmVar 0x245226eb388 'num' 'unsigned int'
      `-CompoundStmt 0x245226eba68 <col:19, line:354:5>
        |-NullStmt 0x245226eb800 <line:348:48>
        `-IfStmt 0x245226eba40 <line:349:9, line:353:19> has_else
          |-BinaryOperator 0x245226eb898 <line:349:13, col:23> 'int' '=='
          | |-ImplicitCastExpr 0x245226eb868 <col:13> 'unsigned int' <LValueToRValue>
          | | `-DeclRefExpr 0x245226eb808 <col:13> 'unsigned int' lvalue Var 0x245226eb518 'offset' 'unsigned int'
          | `-ImplicitCastExpr 0x245226eb880 <col:23> 'unsigned int' <IntegralCast>
          |   `-IntegerLiteral 0x245226eb840 <col:23> 'int' 0
          |-CompoundStmt 0x245226eb9f0 <col:26, line:352:9>
          | `-BinaryOperator 0x245226eb960 <line:350:13, col:41> 'unsigned int' '='
          |   |-DeclRefExpr 0x245226eb8b8 <col:13> 'unsigned int' lvalue Var 0x245226eb518 'offset' 'unsigned int'
          |   `-ImplicitCastExpr 0x245226eb948 <line:27:33, line:350:41> 'unsigned int' <IntegralCast>
          |     `-BinaryOperator 0x245226eb928 <line:27:33, line:350:41> 'int' '-'
          |       |-IntegerLiteral 0x245226eb8d8 <line:27:33> 'int' 16
          |       `-IntegerLiteral 0x245226eb900 <line:350:41> 'int' 1
          `-UnaryOperator 0x245226eba28 <line:353:13, col:19> 'unsigned int' postfix '--'
            `-DeclRefExpr 0x245226eba08 <col:13> 'unsigned int' lvalue Var 0x245226eb518 'offset' 'unsigned int'
