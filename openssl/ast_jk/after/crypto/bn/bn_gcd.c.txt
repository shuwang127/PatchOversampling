TranslationUnitDecl 0x1a1855b26e8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1a1855b2f80 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1a1855b2c80 '__int128'
|-TypedefDecl 0x1a1855b2ff0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1a1855b2ca0 'unsigned __int128'
|-TypedefDecl 0x1a1855b3328 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1a1855b30e0 'struct __NSConstantString_tag'
|   `-Record 0x1a1855b3048 '__NSConstantString_tag'
|-TypedefDecl 0x1a1855b3398 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1a1855b28c0 'unsigned long long'
|-TypedefDecl 0x1a1855b3430 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1a1855b33f0 'char *'
|   `-BuiltinType 0x1a1855b2780 'char'
|-TypedefDecl 0x1a1855b34a0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1a1855b33f0 'char *'
|   `-BuiltinType 0x1a1855b2780 'char'
|-FunctionDecl 0x1a186fbef40 <.//openssl//file_jk/after\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1a1855b3540 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x1a1855b35c0 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x1a1855b3640 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x1a186fbee40 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x1a186fbf248 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1a186fbf018 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1a186fbf098 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1a186fbf118 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x1a186fbf198 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x1a186fbf508 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x1a186fbf320 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x1a186fbf3a0 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x1a186fbf420 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x1a186fbf7c0 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x1a186fbf5d8 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x1a186fbf658 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x1a186fbf6d8 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x1a186fbfb10 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1a186fbf890 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1a186fbf910 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1a186fbf990 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x1a186fbfa10 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x1a186fb7dd0 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1a186fbfbe8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1a186fbfc68 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1a186fbfce8 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x1a186fbfd68 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x1a186fb7e90 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x1a186fb7f68 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x1a186fb7fd8 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x1a186fb8048 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x1a186fb80b8 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x1a186fb8128 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1a186fb8180 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x1a186fb8258 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x1a186fb82c8 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x1a186fb8338 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x1a186fb83a8 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x1a186fb84a0 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x1a186fb8510 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1a186fb8568 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x1a186fb8638 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x1a186fb86a8 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x1a186fb8718 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x1a186fb8788 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x1a186fb87f8 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1a186fb8850 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x1a186fb8928 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x1a186fb8998 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x1a186fb89f0 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x1a186fb8d40 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x1a186fb9068 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x1a186fb9118 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x1a186fb92a8 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x1a186fb91e8 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x1a186fb93f8 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x1a186fb9368 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x1a186fb9548 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x1a186fb94b8 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x1a186fb9908 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x1a186fb9608 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1a186fb9688 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x1a186fb9708 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x1a186fb9788 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x1a186fb9808 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x1a186fb9bc8 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x1a186fb99e8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1a186fb9a68 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x1a186fb9ae8 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x1a186fbbeb0 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x1a186fb9c98 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1a186fb9d18 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x1a186fbbe10 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x1a186fbc1f8 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x1a186fbbf80 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1a186fbc000 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x1a186fbc080 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x1a186fbc100 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x1a186fbc428 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x1a186fbc2d0 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x1a186fbc350 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x1a186fbc608 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x1a186fbc4f0 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x1a186fbc570 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x1a186fbc8c0 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x1a186fbc6d0 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x1a186fbc750 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x1a186fbc7d0 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x1a186fbcc10 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x1a186fbc990 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x1a186fbca10 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x1a186fbca90 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x1a186fbcb10 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x1a186fcd488 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x1a186fbcce8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x1a186fbcd68 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x1a186fcd160 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x1a186fcd1e0 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x1a186fcd260 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x1a186fcd2e0 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x1a186fcd360 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x1a186fcd938 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x1a186fcd578 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1a186fcd5f8 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x1a186fcd678 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x1a186fcd6f8 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x1a186fcd778 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x1a186fcd7f8 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x1a186fcd878 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x1a186fcdc50 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x1a186fcda28 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x1a186fcdaa8 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x1a186fcdb28 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x1a186fcdba8 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x1a186fcdf98 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x1a186fcdd28 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x1a186fcdda8 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x1a186fcde28 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x1a186fcdea8 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x1a186fd23c8 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x1a186fce070 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x1a186fce0f0 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x1a186fd21c8 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x1a186fd2248 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x1a186fd22c8 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x1a186fd2838 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x1a186fd24a8 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x1a186fd2528 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x1a186fd25a8 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x1a186fd2628 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x1a186fd26a8 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x1a186fd2728 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x1a186fd2c30 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x1a186fd2920 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1a186fd29a0 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1a186fd2a20 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x1a186fd2aa0 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x1a186fd2b20 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x1a186fd2fc8 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x1a186fd2d10 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1a186fd2d90 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1a186fd2e10 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x1a186fd2e90 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x1a186fd2f10 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x1a186fcf420 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1a186fd30a8 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x1a186fd3128 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x1a186fcf180 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x1a186fcf200 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x1a186fcf280 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x1a186fcf300 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x1a186fcf810 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1a186fcf508 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x1a186fcf588 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x1a186fcf608 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x1a186fcf688 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x1a186fcf708 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x1a186fcfc00 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x1a186fcf8f0 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x1a186fcf970 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x1a186fcf9f0 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x1a186fcfa70 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x1a186fcfaf0 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x1a186fcfed0 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x1a186fcfce0 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x1a186fcfd60 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x1a186fcfde0 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x1a186fd0190 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x1a186fcffa0 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x1a186fd0020 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x1a186fd00a0 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x1a186fd0260 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-FunctionDecl 0x1a186fd0560 <.//openssl//file_jk/after\crypto\bn\bn_gcd.c:15:1, line:52:1> line:15:5 invalid BN_gcd 'int (int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1a186fd02e0 <col:12, col:20> col:20 invalid r 'int *'
| |-ParmVarDecl 0x1a186fd0360 <col:23, col:37> col:37 invalid in_a 'const int *'
| |-ParmVarDecl 0x1a186fd03e0 <col:43, col:57> col:57 invalid in_b 'const int *'
| |-ParmVarDecl 0x1a186fd0460 <col:63, col:71> col:71 invalid ctx 'int *'
| `-CompoundStmt 0x1a186fd31e8 <line:16:1, line:52:1>
|   |-DeclStmt 0x1a186fd06e0 <line:18:5, col:16>
|   | `-VarDecl 0x1a186fd0650 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1a186fd06b8 <col:15> 'int' 0
|   |-NullStmt 0x1a186fd06f8 <line:20:23>
|   |-NullStmt 0x1a186fd0700 <line:21:23>
|   |-IfStmt 0x1a186fd0a38 <line:26:5, line:27:14>
|   | |-OpaqueValueExpr 0x1a186fd0a20 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a186fd0a08 <col:9, col:14> 'err' 0x1a186fd09b8
|   |-IfStmt 0x1a186fd0b90 <line:29:5, line:30:14>
|   | |-OpaqueValueExpr 0x1a186fd0b78 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a186fd0b60 <col:9, col:14> 'err' 0x1a186fd09b8
|   |-IfStmt 0x1a186fd0bf8 <line:31:5, line:32:14>
|   | |-OpaqueValueExpr 0x1a186fd0be0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a186fd0bc8 <col:9, col:14> 'err' 0x1a186fd09b8
|   |-IfStmt 0x1a186fd0dc0 <line:36:5, line:40:5>
|   | |-OpaqueValueExpr 0x1a186fd0da8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a186fd0d98 <line:36:27, line:40:5>
|   |-IfStmt 0x1a186fd0f18 <line:42:5, line:43:14>
|   | |-OpaqueValueExpr 0x1a186fd0f00 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a186fd0ee8 <col:9, col:14> 'err' 0x1a186fd09b8
|   |-IfStmt 0x1a186fd0f80 <line:45:5, line:46:14>
|   | |-OpaqueValueExpr 0x1a186fd0f68 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a186fd0f50 <col:9, col:14> 'err' 0x1a186fd09b8
|   |-BinaryOperator 0x1a186fd0ff8 <line:47:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x1a186fd0f98 <col:5> 'int' lvalue Var 0x1a186fd0650 'ret' 'int'
|   | `-IntegerLiteral 0x1a186fd0fd0 <col:11> 'int' 1
|   |-LabelStmt 0x1a186fd1130 <line:48:2, col:5> 'err'
|   | `-NullStmt 0x1a186fd1128 <col:5>
|   |-NullStmt 0x1a186fd1148 <line:50:20>
|   `-ReturnStmt 0x1a186fd31d8 <line:51:5, col:16>
|     `-ImplicitCastExpr 0x1a186fd31c0 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1a186fd1170 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1a186fd1150 <col:13> 'int' lvalue Var 0x1a186fd0650 'ret' 'int'
|-FunctionDecl 0x1a186fd33d0 <line:54:1, line:117:1> line:54:16 invalid euclid 'int *(int *, int *)' static
| |-ParmVarDecl 0x1a186fd3278 <col:23, col:31> col:31 invalid a 'int *'
| |-ParmVarDecl 0x1a186fd32f8 <col:34, col:42> col:42 invalid b 'int *'
| `-CompoundStmt 0x1a186fcc190 <line:55:1, line:117:1>
|   |-DeclStmt 0x1a186fd3540 <line:57:5, col:19>
|   | `-VarDecl 0x1a186fd34b0 <col:5, col:18> col:9 used shifts 'int' cinit
|   |   `-IntegerLiteral 0x1a186fd3518 <col:18> 'int' 0
|   |-NullStmt 0x1a186fd3558 <line:59:20>
|   |-NullStmt 0x1a186fd3560 <line:60:20>
|   |-IfStmt 0x1a186fcc150 <line:109:5, line:112:5>
|   | |-ImplicitCastExpr 0x1a186fd4008 <line:109:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1a186fd3fe8 <col:9> 'int' lvalue Var 0x1a186fd34b0 'shifts' 'int'
|   | `-CompoundStmt 0x1a186fd4198 <col:17, line:112:5>
|   |   `-IfStmt 0x1a186fd4180 <line:110:9, line:111:18>
|   |     |-OpaqueValueExpr 0x1a186fd4168 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1a186fd4150 <col:13, col:18> 'err' 0x1a186fd38b8
|   |-NullStmt 0x1a186fcc168 <line:113:20>
|   `-LabelStmt 0x1a186fcc178 <line:115:2, col:5> 'err'
|     `-NullStmt 0x1a186fcc170 <col:5>
|-FunctionDecl 0x1a186fcc460 <line:120:1, line:122:52> line:120:16 invalid BN_mod_inverse_no_branch 'int *(int *, const int *, const int *, int *)' static
| |-ParmVarDecl 0x1a186fcc1e8 <col:41, col:49> col:49 invalid in 'int *'
| |-ParmVarDecl 0x1a186fcc268 <line:121:41, col:55> col:55 invalid a 'const int *'
| |-ParmVarDecl 0x1a186fcc2e8 <col:58, col:72> col:72 invalid n 'const int *'
| `-ParmVarDecl 0x1a186fcc368 <line:122:41, col:49> col:49 invalid ctx 'int *'
|-FunctionDecl 0x1a186fcc768 <line:124:1, line:133:1> line:124:9 invalid BN_mod_inverse 'int *(int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1a186fcc538 <col:24, col:32> col:32 invalid in 'int *'
| |-ParmVarDecl 0x1a186fcc5b8 <line:125:24, col:38> col:38 invalid a 'const int *'
| |-ParmVarDecl 0x1a186fcc638 <col:41, col:55> col:55 invalid n 'const int *'
| |-ParmVarDecl 0x1a186fcc6b8 <col:58, col:66> col:66 invalid ctx 'int *'
| `-CompoundStmt 0x1a186fcca70 <line:126:1, line:133:1>
|   `-DeclStmt 0x1a186fcc8c0 <line:128:5, col:14>
|     `-VarDecl 0x1a186fcc858 <col:5, col:9> col:9 used noinv 'int'
|-FunctionDecl 0x1a186fccd58 <line:135:1, line:452:1> line:135:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1a186fccaa0 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x1a186fccb20 <line:136:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x1a186fccba0 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x1a186fccc20 <col:62, col:70> col:70 invalid ctx 'int *'
| |-ParmVarDecl 0x1a186fccca0 <line:137:28, col:33> col:33 used pnoinv 'int *'
| `-CompoundStmt 0x1a186fdaad0 <line:138:1, line:452:1>
|   |-DeclStmt 0x1a186fcceb8 <line:141:5, col:13>
|   | `-VarDecl 0x1a186fcce50 <col:5, col:9> col:9 used sign 'int'
|   |-IfStmt 0x1a186fd8228 <line:144:5, line:148:5>
|   | |-OpaqueValueExpr 0x1a186fd8210 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a186fcd128 <line:144:48, line:148:5>
|   |   `-IfStmt 0x1a186fcd110 <line:145:9, line:146:23>
|   |     |-OpaqueValueExpr 0x1a186fcd0f8 <<invalid sloc>> '_Bool'
|   |     `-BinaryOperator 0x1a186fcd0d8 <col:13, col:23> 'int' '='
|   |       |-UnaryOperator 0x1a186fcd098 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |       | `-ImplicitCastExpr 0x1a186fcd080 <col:14> 'int *' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1a186fcd060 <col:14> 'int *' lvalue ParmVar 0x1a186fccca0 'pnoinv' 'int *'
|   |       `-IntegerLiteral 0x1a186fcd0b0 <col:23> 'int' 1
|   |-IfStmt 0x1a186fd8310 <line:150:5, line:151:19>
|   | |-OpaqueValueExpr 0x1a186fd82f8 <<invalid sloc>> '_Bool'
|   | `-BinaryOperator 0x1a186fd82d8 <col:9, col:19> 'int' '='
|   |   |-UnaryOperator 0x1a186fd8298 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x1a186fd8280 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1a186fd8260 <col:10> 'int *' lvalue ParmVar 0x1a186fccca0 'pnoinv' 'int *'
|   |   `-IntegerLiteral 0x1a186fd82b0 <col:19> 'int' 0
|   |-IfStmt 0x1a186fd84d0 <line:153:5, line:156:5>
|   | |-OpaqueValueExpr 0x1a186fd84b8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a186fd84a8 <line:154:54, line:156:5>
|   |-NullStmt 0x1a186fd84e8 <line:158:20>
|   |-NullStmt 0x1a186fd84f0 <line:159:20>
|   |-IfStmt 0x1a186fd8678 <line:169:5, line:170:14>
|   | |-OpaqueValueExpr 0x1a186fd8660 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a186fd8648 <col:9, col:14> 'err' 0x1a186fd85f8
|   |-IfStmt 0x1a186fd8830 <line:176:5, line:177:14>
|   | |-OpaqueValueExpr 0x1a186fd8818 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a186fd8800 <col:9, col:14> 'err' 0x1a186fd85f8
|   |-IfStmt 0x1a186fd8ab8 <line:181:5, line:182:14>
|   | |-OpaqueValueExpr 0x1a186fd8aa0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a186fd8a88 <col:9, col:14> 'err' 0x1a186fd85f8
|   |-IfStmt 0x1a186fd8b20 <line:183:5, line:184:14>
|   | |-OpaqueValueExpr 0x1a186fd8b08 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a186fd8af0 <col:9, col:14> 'err' 0x1a186fd85f8
|   |-IfStmt 0x1a186fd8e20 <line:186:5, line:189:5>
|   | |-OpaqueValueExpr 0x1a186fd8e08 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a186fd8df0 <line:186:41, line:189:5>
|   |   `-IfStmt 0x1a186fd8dd8 <line:187:9, line:188:18>
|   |     |-OpaqueValueExpr 0x1a186fd8dc0 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1a186fd8da8 <col:13, col:18> 'err' 0x1a186fd85f8
|   |-BinaryOperator 0x1a186fd8eb0 <line:190:5, col:13> 'int' '='
|   | |-DeclRefExpr 0x1a186fd8e38 <col:5> 'int' lvalue Var 0x1a186fcce50 'sign' 'int'
|   | `-UnaryOperator 0x1a186fd8e98 <col:12, col:13> 'int' prefix '-'
|   |   `-IntegerLiteral 0x1a186fd8e70 <col:13> 'int' 1
|   |-IfStmt 0x1a186fda518 <line:199:5, line:415:5> has_else
|   | |-OpaqueValueExpr 0x1a186fda500 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1a186fd6eb0 <line:199:51, line:293:5>
|   | | `-DeclStmt 0x1a186fd90a8 <line:206:9, col:18>
|   | |   `-VarDecl 0x1a186fd9040 <col:9, col:13> col:13 used shift 'int'
|   | `-CompoundStmt 0x1a186fda4f0 <line:293:12, line:415:5>
|   |-IfStmt 0x1a186fda640 <line:425:5, line:428:5>
|   | |-BinaryOperator 0x1a186fda5a0 <line:425:9, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x1a186fda588 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a186fda540 <col:9> 'int' lvalue Var 0x1a186fcce50 'sign' 'int'
|   | | `-IntegerLiteral 0x1a186fda560 <col:16> 'int' 0
|   | `-CompoundStmt 0x1a186fda628 <col:19, line:428:5>
|   |   `-IfStmt 0x1a186fda610 <line:426:9, line:427:18>
|   |     |-OpaqueValueExpr 0x1a186fda5f8 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1a186fda5e0 <col:13, col:18> 'err' 0x1a186fd85f8
|   |-IfStmt 0x1a186fda950 <line:431:5, line:444:5> has_else
|   | |-OpaqueValueExpr 0x1a186fda938 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1a186fda800 <line:431:23, line:440:5>
|   | | `-IfStmt 0x1a186fda7d8 <line:433:9, line:439:9> has_else
|   | |   |-OpaqueValueExpr 0x1a186fda7c0 <<invalid sloc>> '_Bool'
|   | |   |-CompoundStmt 0x1a186fda728 <line:433:43, line:436:9>
|   | |   | `-IfStmt 0x1a186fda710 <line:434:13, line:435:22>
|   | |   |   |-OpaqueValueExpr 0x1a186fda6f8 <<invalid sloc>> '_Bool'
|   | |   |   `-GotoStmt 0x1a186fda6e0 <col:17, col:22> 'err' 0x1a186fd85f8
|   | |   `-CompoundStmt 0x1a186fda7a8 <line:436:16, line:439:9>
|   | |     `-IfStmt 0x1a186fda790 <line:437:13, line:438:22>
|   | |       |-OpaqueValueExpr 0x1a186fda778 <<invalid sloc>> '_Bool'
|   | |       `-GotoStmt 0x1a186fda760 <col:17, col:22> 'err' 0x1a186fd85f8
|   | `-CompoundStmt 0x1a186fda918 <line:440:12, line:444:5>
|   |   |-IfStmt 0x1a186fda8e8 <line:441:9, line:442:23>
|   |   | |-ImplicitCastExpr 0x1a186fda838 <line:441:13> 'int *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1a186fda818 <col:13> 'int *' lvalue ParmVar 0x1a186fccca0 'pnoinv' 'int *'
|   |   | `-BinaryOperator 0x1a186fda8c8 <line:442:13, col:23> 'int' '='
|   |   |   |-UnaryOperator 0x1a186fda888 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x1a186fda870 <col:14> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1a186fda850 <col:14> 'int *' lvalue ParmVar 0x1a186fccca0 'pnoinv' 'int *'
|   |   |   `-IntegerLiteral 0x1a186fda8a0 <col:23> 'int' 1
|   |   `-GotoStmt 0x1a186fda900 <line:443:9, col:14> 'err' 0x1a186fd85f8
|   |-LabelStmt 0x1a186fdaa90 <line:446:2, col:5> 'err'
|   | `-NullStmt 0x1a186fdaa88 <col:5>
|   `-NullStmt 0x1a186fdaac8 <line:450:22>
`-FunctionDecl 0x1a186fdadb0 <line:458:1, line:623:1> line:458:16 invalid BN_mod_inverse_no_branch 'int *(int *, const int *, const int *, int *)' static
  |-ParmVarDecl 0x1a186fdab80 <col:41, col:49> col:49 invalid in 'int *'
  |-ParmVarDecl 0x1a186fdac00 <line:459:41, col:55> col:55 invalid a 'const int *'
  |-ParmVarDecl 0x1a186fdac80 <col:58, col:72> col:72 invalid n 'const int *'
  |-ParmVarDecl 0x1a186fdad00 <line:460:41, col:49> col:49 invalid ctx 'int *'
  `-CompoundStmt 0x1a186fd9b68 <line:461:1, line:623:1>
    |-DeclStmt 0x1a186fdaf08 <line:464:5, col:13>
    | `-VarDecl 0x1a186fdaea0 <col:5, col:9> col:9 used sign 'int'
    |-NullStmt 0x1a186fdaf20 <line:466:20>
    |-NullStmt 0x1a186fdaf28 <line:467:20>
    |-IfStmt 0x1a186fdb0b0 <line:477:5, line:478:14>
    | |-OpaqueValueExpr 0x1a186fdb098 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1a186fdb080 <col:9, col:14> 'err' 0x1a186fdb030
    |-IfStmt 0x1a186fdb150 <line:484:5, line:485:14>
    | |-OpaqueValueExpr 0x1a186fdb138 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1a186fdb120 <col:9, col:14> 'err' 0x1a186fdb030
    |-IfStmt 0x1a186fdb1f8 <line:489:5, line:490:14>
    | |-OpaqueValueExpr 0x1a186fdb1e0 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1a186fdb1c8 <col:9, col:14> 'err' 0x1a186fdb030
    |-IfStmt 0x1a186fd9250 <line:491:5, line:492:14>
    | |-OpaqueValueExpr 0x1a186fd9238 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1a186fd9220 <col:9, col:14> 'err' 0x1a186fdb030
    |-IfStmt 0x1a186fd9498 <line:495:5, line:508:5>
    | |-OpaqueValueExpr 0x1a186fd9480 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x1a186fd9468 <line:495:41, line:508:5>
    |   `-CompoundStmt 0x1a186fd9450 <line:500:10, line:507:9>
    |     `-IfStmt 0x1a186fd9438 <line:504:13, line:505:22>
    |       |-OpaqueValueExpr 0x1a186fd9420 <<invalid sloc>> '_Bool'
    |       `-GotoStmt 0x1a186fd9408 <col:17, col:22> 'err' 0x1a186fdb030
    |-BinaryOperator 0x1a186fd9528 <line:509:5, col:13> 'int' '='
    | |-DeclRefExpr 0x1a186fd94b0 <col:5> 'int' lvalue Var 0x1a186fdaea0 'sign' 'int'
    | `-UnaryOperator 0x1a186fd9510 <col:12, col:13> 'int' prefix '-'
    |   `-IntegerLiteral 0x1a186fd94e8 <col:13> 'int' 1
    |-IfStmt 0x1a186fd9898 <line:597:5, line:600:5>
    | |-BinaryOperator 0x1a186fd97f8 <line:597:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x1a186fd97e0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1a186fd9798 <col:9> 'int' lvalue Var 0x1a186fdaea0 'sign' 'int'
    | | `-IntegerLiteral 0x1a186fd97b8 <col:16> 'int' 0
    | `-CompoundStmt 0x1a186fd9880 <col:19, line:600:5>
    |   `-IfStmt 0x1a186fd9868 <line:598:9, line:599:18>
    |     |-OpaqueValueExpr 0x1a186fd9850 <<invalid sloc>> '_Bool'
    |     `-GotoStmt 0x1a186fd9838 <col:13, col:18> 'err' 0x1a186fdb030
    |-IfStmt 0x1a186fd9ad8 <line:603:5, line:615:5> has_else
    | |-OpaqueValueExpr 0x1a186fd9ac0 <<invalid sloc>> '_Bool'
    | |-CompoundStmt 0x1a186fd9a58 <line:603:23, line:612:5>
    | | `-IfStmt 0x1a186fd9a30 <line:605:9, line:611:9> has_else
    | |   |-OpaqueValueExpr 0x1a186fd9a18 <<invalid sloc>> '_Bool'
    | |   |-CompoundStmt 0x1a186fd9980 <line:605:43, line:608:9>
    | |   | `-IfStmt 0x1a186fd9968 <line:606:13, line:607:22>
    | |   |   |-OpaqueValueExpr 0x1a186fd9950 <<invalid sloc>> '_Bool'
    | |   |   `-GotoStmt 0x1a186fd9938 <col:17, col:22> 'err' 0x1a186fdb030
    | |   `-CompoundStmt 0x1a186fd9a00 <line:608:16, line:611:9>
    | |     `-IfStmt 0x1a186fd99e8 <line:609:13, line:610:22>
    | |       |-OpaqueValueExpr 0x1a186fd99d0 <<invalid sloc>> '_Bool'
    | |       `-GotoStmt 0x1a186fd99b8 <col:17, col:22> 'err' 0x1a186fdb030
    | `-CompoundStmt 0x1a186fd9aa8 <line:612:12, line:615:5>
    |   `-GotoStmt 0x1a186fd9a90 <line:614:9, col:14> 'err' 0x1a186fdb030
    |-LabelStmt 0x1a186fd9b28 <line:617:2, col:5> 'err'
    | `-NullStmt 0x1a186fd9b20 <col:5>
    `-NullStmt 0x1a186fd9b60 <line:621:22>
