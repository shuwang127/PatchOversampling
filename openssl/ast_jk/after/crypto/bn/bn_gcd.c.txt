TranslationUnitDecl 0x28cb00f4508 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x28cb00f4da0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x28cb00f4aa0 '__int128'
|-TypedefDecl 0x28cb00f4e10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x28cb00f4ac0 'unsigned __int128'
|-TypedefDecl 0x28cb00f5148 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x28cb00f4f00 'struct __NSConstantString_tag'
|   `-Record 0x28cb00f4e68 '__NSConstantString_tag'
|-TypedefDecl 0x28cb00f51b8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x28cb00f46e0 'unsigned long long'
|-TypedefDecl 0x28cb00f5250 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x28cb00f5210 'char *'
|   `-BuiltinType 0x28cb00f45a0 'char'
|-TypedefDecl 0x28cb00f52c0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x28cb00f5210 'char *'
|   `-BuiltinType 0x28cb00f45a0 'char'
|-FunctionDecl 0x28cb1ab3740 <.//openssl//file_jk/after\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x28cb00f5360 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x28cb00f53e0 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x28cb00f5460 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x28cb1ab3640 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x28cb1ab3a48 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x28cb1ab3818 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x28cb1ab3898 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x28cb1ab3918 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x28cb1ab3998 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x28cb1ab3d08 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x28cb1ab3b20 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x28cb1ab3ba0 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x28cb1ab3c20 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x28cb1ab3fc0 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x28cb1ab3dd8 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x28cb1ab3e58 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x28cb1ab3ed8 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x28cb1ab4310 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x28cb1ab4090 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x28cb1ab4110 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x28cb1ab4190 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x28cb1ab4210 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x28cb1aaf600 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x28cb1ab43e8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x28cb1ab4468 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x28cb1ab44e8 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x28cb1ab4568 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x28cb1aaf6c0 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x28cb1aaf798 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x28cb1aaf808 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x28cb1aaf878 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x28cb1aaf8e8 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x28cb1aaf958 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x28cb1aaf9b0 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x28cb1aafa88 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x28cb1aafaf8 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x28cb1aafb68 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x28cb1aafbd8 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x28cb1aafcd0 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x28cb1aafd40 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x28cb1aafd98 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x28cb1aafe68 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x28cb1aafed8 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x28cb1aaff48 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x28cb1aaffb8 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x28cb1ab0028 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x28cb1ab0080 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x28cb1ab0158 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x28cb1ab01c8 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x28cb1ab0220 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x28cb1ab0570 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x28cb1aae878 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x28cb1aae928 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x28cb1aaeab8 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x28cb1aae9f8 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x28cb1aaec08 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x28cb1aaeb78 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x28cb1aaed58 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x28cb1aaecc8 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x28cb1aaf118 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x28cb1aaee18 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x28cb1aaee98 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x28cb1aaef18 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x28cb1aaef98 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x28cb1aaf018 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x28cb1aaf3d8 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x28cb1aaf1f8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x28cb1aaf278 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x28cb1aaf2f8 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x28cb1ab46f0 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x28cb1aaf4a8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x28cb1aaf528 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x28cb1ab4650 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x28cb1ab4a38 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x28cb1ab47c0 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x28cb1ab4840 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x28cb1ab48c0 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x28cb1ab4940 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x28cb1ab4c68 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x28cb1ab4b10 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x28cb1ab4b90 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x28cb1ab4e48 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x28cb1ab4d30 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x28cb1ab4db0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x28cb1ab5100 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x28cb1ab4f10 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x28cb1ab4f90 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x28cb1ab5010 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x28cb1ab5450 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x28cb1ab51d0 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x28cb1ab5250 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x28cb1ab52d0 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x28cb1ab5350 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x28cb1ac5dd8 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x28cb1ab5528 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x28cb1ab55a8 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x28cb1ac5ab0 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x28cb1ac5b30 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x28cb1ac5bb0 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x28cb1ac5c30 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x28cb1ac5cb0 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x28cb1ac6288 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x28cb1ac5ec8 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x28cb1ac5f48 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x28cb1ac5fc8 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x28cb1ac6048 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x28cb1ac60c8 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x28cb1ac6148 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x28cb1ac61c8 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x28cb1ac65a0 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x28cb1ac6378 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x28cb1ac63f8 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x28cb1ac6478 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x28cb1ac64f8 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x28cb1ac68e8 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x28cb1ac6678 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x28cb1ac66f8 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x28cb1ac6778 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x28cb1ac67f8 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x28cb1ac3ca8 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x28cb1ac69c0 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x28cb1ac6a40 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x28cb1ac3aa8 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x28cb1ac3b28 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x28cb1ac3ba8 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x28cb1ac4118 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x28cb1ac3d88 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x28cb1ac3e08 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x28cb1ac3e88 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x28cb1ac3f08 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x28cb1ac3f88 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x28cb1ac4008 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x28cb1ac4510 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x28cb1ac4200 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x28cb1ac4280 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x28cb1ac4300 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x28cb1ac4380 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x28cb1ac4400 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x28cb1ac48a8 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x28cb1ac45f0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x28cb1ac4670 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x28cb1ac46f0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x28cb1ac4770 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x28cb1ac47f0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x28cb1acbdb0 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x28cb1ac4988 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x28cb1ac4a08 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x28cb1acbb10 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x28cb1acbb90 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x28cb1acbc10 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x28cb1acbc90 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x28cb1acc1a0 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x28cb1acbe98 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x28cb1acbf18 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x28cb1acbf98 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x28cb1acc018 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x28cb1acc098 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x28cb1acc590 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x28cb1acc280 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x28cb1acc300 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x28cb1acc380 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x28cb1acc400 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x28cb1acc480 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x28cb1acc860 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x28cb1acc670 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x28cb1acc6f0 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x28cb1acc770 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x28cb1ac7ad0 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x28cb1acc930 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x28cb1acc9b0 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x28cb1acca30 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x28cb1ac7ba0 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-FunctionDecl 0x28cb1ac7ea0 <.//openssl//file_jk/after\crypto\bn\bn_gcd.c:15:1, line:52:1> line:15:5 invalid BN_gcd 'int (int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28cb1ac7c20 <col:12, col:20> col:20 invalid r 'int *'
| |-ParmVarDecl 0x28cb1ac7ca0 <col:23, col:37> col:37 invalid in_a 'const int *'
| |-ParmVarDecl 0x28cb1ac7d20 <col:43, col:57> col:57 invalid in_b 'const int *'
| |-ParmVarDecl 0x28cb1ac7da0 <col:63, col:71> col:71 invalid ctx 'int *'
| `-CompoundStmt 0x28cb1ac8b08 <line:16:1, line:52:1>
|   |-DeclStmt 0x28cb1ac8020 <line:18:5, col:16>
|   | `-VarDecl 0x28cb1ac7f90 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x28cb1ac7ff8 <col:15> 'int' 0
|   |-NullStmt 0x28cb1ac8038 <line:20:23>
|   |-NullStmt 0x28cb1ac8040 <line:21:23>
|   |-IfStmt 0x28cb1ac8378 <line:26:5, line:27:14>
|   | |-OpaqueValueExpr 0x28cb1ac8360 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28cb1ac8348 <col:9, col:14> 'err' 0x28cb1ac82f8
|   |-IfStmt 0x28cb1ac84d0 <line:29:5, line:30:14>
|   | |-OpaqueValueExpr 0x28cb1ac84b8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28cb1ac84a0 <col:9, col:14> 'err' 0x28cb1ac82f8
|   |-IfStmt 0x28cb1ac8538 <line:31:5, line:32:14>
|   | |-OpaqueValueExpr 0x28cb1ac8520 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28cb1ac8508 <col:9, col:14> 'err' 0x28cb1ac82f8
|   |-IfStmt 0x28cb1ac8700 <line:36:5, line:40:5>
|   | |-OpaqueValueExpr 0x28cb1ac86e8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28cb1ac86d8 <line:36:27, line:40:5>
|   |-IfStmt 0x28cb1ac8858 <line:42:5, line:43:14>
|   | |-OpaqueValueExpr 0x28cb1ac8840 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28cb1ac8828 <col:9, col:14> 'err' 0x28cb1ac82f8
|   |-IfStmt 0x28cb1ac88c0 <line:45:5, line:46:14>
|   | |-OpaqueValueExpr 0x28cb1ac88a8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28cb1ac8890 <col:9, col:14> 'err' 0x28cb1ac82f8
|   |-BinaryOperator 0x28cb1ac8938 <line:47:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x28cb1ac88d8 <col:5> 'int' lvalue Var 0x28cb1ac7f90 'ret' 'int'
|   | `-IntegerLiteral 0x28cb1ac8910 <col:11> 'int' 1
|   |-LabelStmt 0x28cb1ac8a70 <line:48:2, col:5> 'err'
|   | `-NullStmt 0x28cb1ac8a68 <col:5>
|   |-NullStmt 0x28cb1ac8a88 <line:50:20>
|   `-ReturnStmt 0x28cb1ac8af8 <line:51:5, col:16>
|     `-ImplicitCastExpr 0x28cb1ac8ae0 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x28cb1ac8ab0 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x28cb1ac8a90 <col:13> 'int' lvalue Var 0x28cb1ac7f90 'ret' 'int'
|-FunctionDecl 0x28cb1ac8cf0 <line:54:1, line:117:1> line:54:16 invalid euclid 'int *(int *, int *)' static
| |-ParmVarDecl 0x28cb1ac8b98 <col:23, col:31> col:31 invalid a 'int *'
| |-ParmVarDecl 0x28cb1ac8c18 <col:34, col:42> col:42 invalid b 'int *'
| `-CompoundStmt 0x28cb1ac4ae0 <line:55:1, line:117:1>
|   |-DeclStmt 0x28cb1ac8e60 <line:57:5, col:19>
|   | `-VarDecl 0x28cb1ac8dd0 <col:5, col:18> col:9 used shifts 'int' cinit
|   |   `-IntegerLiteral 0x28cb1ac8e38 <col:18> 'int' 0
|   |-NullStmt 0x28cb1ac8e78 <line:59:20>
|   |-NullStmt 0x28cb1ac8e80 <line:60:20>
|   |-IfStmt 0x28cb1ac4aa0 <line:109:5, line:112:5>
|   | |-ImplicitCastExpr 0x28cb1ac9928 <line:109:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x28cb1ac9908 <col:9> 'int' lvalue Var 0x28cb1ac8dd0 'shifts' 'int'
|   | `-CompoundStmt 0x28cb1ac9ab8 <col:17, line:112:5>
|   |   `-IfStmt 0x28cb1ac9aa0 <line:110:9, line:111:18>
|   |     |-OpaqueValueExpr 0x28cb1ac9a88 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x28cb1ac9a70 <col:13, col:18> 'err' 0x28cb1ac91d8
|   |-NullStmt 0x28cb1ac4ab8 <line:113:20>
|   `-LabelStmt 0x28cb1ac4ac8 <line:115:2, col:5> 'err'
|     `-NullStmt 0x28cb1ac4ac0 <col:5>
|-FunctionDecl 0x28cb1ac4db0 <line:120:1, line:122:52> line:120:16 invalid BN_mod_inverse_no_branch 'int *(int *, const int *, const int *, int *)' static
| |-ParmVarDecl 0x28cb1ac4b38 <col:41, col:49> col:49 invalid in 'int *'
| |-ParmVarDecl 0x28cb1ac4bb8 <line:121:41, col:55> col:55 invalid a 'const int *'
| |-ParmVarDecl 0x28cb1ac4c38 <col:58, col:72> col:72 invalid n 'const int *'
| `-ParmVarDecl 0x28cb1ac4cb8 <line:122:41, col:49> col:49 invalid ctx 'int *'
|-FunctionDecl 0x28cb1ac50b8 <line:124:1, line:133:1> line:124:9 invalid BN_mod_inverse 'int *(int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28cb1ac4e88 <col:24, col:32> col:32 invalid in 'int *'
| |-ParmVarDecl 0x28cb1ac4f08 <line:125:24, col:38> col:38 invalid a 'const int *'
| |-ParmVarDecl 0x28cb1ac4f88 <col:41, col:55> col:55 invalid n 'const int *'
| |-ParmVarDecl 0x28cb1ac5008 <col:58, col:66> col:66 invalid ctx 'int *'
| `-CompoundStmt 0x28cb1ac53c0 <line:126:1, line:133:1>
|   `-DeclStmt 0x28cb1ac5210 <line:128:5, col:14>
|     `-VarDecl 0x28cb1ac51a8 <col:5, col:9> col:9 used noinv 'int'
|-FunctionDecl 0x28cb1ac56a8 <line:135:1, line:452:1> line:135:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x28cb1ac53f0 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x28cb1ac5470 <line:136:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x28cb1ac54f0 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x28cb1ac5570 <col:62, col:70> col:70 invalid ctx 'int *'
| |-ParmVarDecl 0x28cb1ac55f0 <line:137:28, col:33> col:33 used pnoinv 'int *'
| `-CompoundStmt 0x28cb1ad2410 <line:138:1, line:452:1>
|   |-DeclStmt 0x28cb1ac5808 <line:141:5, col:13>
|   | `-VarDecl 0x28cb1ac57a0 <col:5, col:9> col:9 used sign 'int'
|   |-IfStmt 0x28cb1ac9b08 <line:144:5, line:148:5>
|   | |-OpaqueValueExpr 0x28cb1ac9af0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28cb1ac5a78 <line:144:48, line:148:5>
|   |   `-IfStmt 0x28cb1ac5a60 <line:145:9, line:146:23>
|   |     |-OpaqueValueExpr 0x28cb1ac5a48 <<invalid sloc>> '_Bool'
|   |     `-BinaryOperator 0x28cb1ac5a28 <col:13, col:23> 'int' '='
|   |       |-UnaryOperator 0x28cb1ac59e8 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |       | `-ImplicitCastExpr 0x28cb1ac59d0 <col:14> 'int *' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x28cb1ac59b0 <col:14> 'int *' lvalue ParmVar 0x28cb1ac55f0 'pnoinv' 'int *'
|   |       `-IntegerLiteral 0x28cb1ac5a00 <col:23> 'int' 1
|   |-IfStmt 0x28cb1ac9bf0 <line:150:5, line:151:19>
|   | |-OpaqueValueExpr 0x28cb1ac9bd8 <<invalid sloc>> '_Bool'
|   | `-BinaryOperator 0x28cb1ac9bb8 <col:9, col:19> 'int' '='
|   |   |-UnaryOperator 0x28cb1ac9b78 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x28cb1ac9b60 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x28cb1ac9b40 <col:10> 'int *' lvalue ParmVar 0x28cb1ac55f0 'pnoinv' 'int *'
|   |   `-IntegerLiteral 0x28cb1ac9b90 <col:19> 'int' 0
|   |-IfStmt 0x28cb1ac9db0 <line:153:5, line:156:5>
|   | |-OpaqueValueExpr 0x28cb1ac9d98 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28cb1ac9d88 <line:154:54, line:156:5>
|   |-NullStmt 0x28cb1ac9dc8 <line:158:20>
|   |-NullStmt 0x28cb1ac9dd0 <line:159:20>
|   |-IfStmt 0x28cb1ac9f58 <line:169:5, line:170:14>
|   | |-OpaqueValueExpr 0x28cb1ac9f40 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28cb1ac9f28 <col:9, col:14> 'err' 0x28cb1ac9ed8
|   |-IfStmt 0x28cb1aca110 <line:176:5, line:177:14>
|   | |-OpaqueValueExpr 0x28cb1aca0f8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28cb1aca0e0 <col:9, col:14> 'err' 0x28cb1ac9ed8
|   |-IfStmt 0x28cb1aca398 <line:181:5, line:182:14>
|   | |-OpaqueValueExpr 0x28cb1aca380 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28cb1aca368 <col:9, col:14> 'err' 0x28cb1ac9ed8
|   |-IfStmt 0x28cb1aca400 <line:183:5, line:184:14>
|   | |-OpaqueValueExpr 0x28cb1aca3e8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28cb1aca3d0 <col:9, col:14> 'err' 0x28cb1ac9ed8
|   |-IfStmt 0x28cb1aca700 <line:186:5, line:189:5>
|   | |-OpaqueValueExpr 0x28cb1aca6e8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28cb1aca6d0 <line:186:41, line:189:5>
|   |   `-IfStmt 0x28cb1aca6b8 <line:187:9, line:188:18>
|   |     |-OpaqueValueExpr 0x28cb1aca6a0 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x28cb1aca688 <col:13, col:18> 'err' 0x28cb1ac9ed8
|   |-BinaryOperator 0x28cb1aca790 <line:190:5, col:13> 'int' '='
|   | |-DeclRefExpr 0x28cb1aca718 <col:5> 'int' lvalue Var 0x28cb1ac57a0 'sign' 'int'
|   | `-UnaryOperator 0x28cb1aca778 <col:12, col:13> 'int' prefix '-'
|   |   `-IntegerLiteral 0x28cb1aca750 <col:13> 'int' 1
|   |-IfStmt 0x28cb1ad1e58 <line:199:5, line:415:5> has_else
|   | |-OpaqueValueExpr 0x28cb1ad1e40 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x28cb1acf800 <line:199:51, line:293:5>
|   | | `-DeclStmt 0x28cb1aca988 <line:206:9, col:18>
|   | |   `-VarDecl 0x28cb1aca920 <col:9, col:13> col:13 used shift 'int'
|   | `-CompoundStmt 0x28cb1ad1e30 <line:293:12, line:415:5>
|   |-IfStmt 0x28cb1ad1f80 <line:425:5, line:428:5>
|   | |-BinaryOperator 0x28cb1ad1ee0 <line:425:9, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x28cb1ad1ec8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28cb1ad1e80 <col:9> 'int' lvalue Var 0x28cb1ac57a0 'sign' 'int'
|   | | `-IntegerLiteral 0x28cb1ad1ea0 <col:16> 'int' 0
|   | `-CompoundStmt 0x28cb1ad1f68 <col:19, line:428:5>
|   |   `-IfStmt 0x28cb1ad1f50 <line:426:9, line:427:18>
|   |     |-OpaqueValueExpr 0x28cb1ad1f38 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x28cb1ad1f20 <col:13, col:18> 'err' 0x28cb1ac9ed8
|   |-IfStmt 0x28cb1ad2290 <line:431:5, line:444:5> has_else
|   | |-OpaqueValueExpr 0x28cb1ad2278 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x28cb1ad2140 <line:431:23, line:440:5>
|   | | `-IfStmt 0x28cb1ad2118 <line:433:9, line:439:9> has_else
|   | |   |-OpaqueValueExpr 0x28cb1ad2100 <<invalid sloc>> '_Bool'
|   | |   |-CompoundStmt 0x28cb1ad2068 <line:433:43, line:436:9>
|   | |   | `-IfStmt 0x28cb1ad2050 <line:434:13, line:435:22>
|   | |   |   |-OpaqueValueExpr 0x28cb1ad2038 <<invalid sloc>> '_Bool'
|   | |   |   `-GotoStmt 0x28cb1ad2020 <col:17, col:22> 'err' 0x28cb1ac9ed8
|   | |   `-CompoundStmt 0x28cb1ad20e8 <line:436:16, line:439:9>
|   | |     `-IfStmt 0x28cb1ad20d0 <line:437:13, line:438:22>
|   | |       |-OpaqueValueExpr 0x28cb1ad20b8 <<invalid sloc>> '_Bool'
|   | |       `-GotoStmt 0x28cb1ad20a0 <col:17, col:22> 'err' 0x28cb1ac9ed8
|   | `-CompoundStmt 0x28cb1ad2258 <line:440:12, line:444:5>
|   |   |-IfStmt 0x28cb1ad2228 <line:441:9, line:442:23>
|   |   | |-ImplicitCastExpr 0x28cb1ad2178 <line:441:13> 'int *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x28cb1ad2158 <col:13> 'int *' lvalue ParmVar 0x28cb1ac55f0 'pnoinv' 'int *'
|   |   | `-BinaryOperator 0x28cb1ad2208 <line:442:13, col:23> 'int' '='
|   |   |   |-UnaryOperator 0x28cb1ad21c8 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x28cb1ad21b0 <col:14> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x28cb1ad2190 <col:14> 'int *' lvalue ParmVar 0x28cb1ac55f0 'pnoinv' 'int *'
|   |   |   `-IntegerLiteral 0x28cb1ad21e0 <col:23> 'int' 1
|   |   `-GotoStmt 0x28cb1ad2240 <line:443:9, col:14> 'err' 0x28cb1ac9ed8
|   |-LabelStmt 0x28cb1ad23d0 <line:446:2, col:5> 'err'
|   | `-NullStmt 0x28cb1ad23c8 <col:5>
|   `-NullStmt 0x28cb1ad2408 <line:450:22>
`-FunctionDecl 0x28cb1ad26f0 <line:458:1, line:623:1> line:458:16 invalid BN_mod_inverse_no_branch 'int *(int *, const int *, const int *, int *)' static
  |-ParmVarDecl 0x28cb1ad24c0 <col:41, col:49> col:49 invalid in 'int *'
  |-ParmVarDecl 0x28cb1ad2540 <line:459:41, col:55> col:55 invalid a 'const int *'
  |-ParmVarDecl 0x28cb1ad25c0 <col:58, col:72> col:72 invalid n 'const int *'
  |-ParmVarDecl 0x28cb1ad2640 <line:460:41, col:49> col:49 invalid ctx 'int *'
  `-CompoundStmt 0x28cb1ace478 <line:461:1, line:623:1>
    |-DeclStmt 0x28cb1ad2848 <line:464:5, col:13>
    | `-VarDecl 0x28cb1ad27e0 <col:5, col:9> col:9 used sign 'int'
    |-NullStmt 0x28cb1ad2860 <line:466:20>
    |-NullStmt 0x28cb1ad2868 <line:467:20>
    |-IfStmt 0x28cb1ad29f0 <line:477:5, line:478:14>
    | |-OpaqueValueExpr 0x28cb1ad29d8 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x28cb1ad29c0 <col:9, col:14> 'err' 0x28cb1ad2970
    |-IfStmt 0x28cb1ad2a90 <line:484:5, line:485:14>
    | |-OpaqueValueExpr 0x28cb1ad2a78 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x28cb1ad2a60 <col:9, col:14> 'err' 0x28cb1ad2970
    |-IfStmt 0x28cb1ad2b38 <line:489:5, line:490:14>
    | |-OpaqueValueExpr 0x28cb1ad2b20 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x28cb1ad2b08 <col:9, col:14> 'err' 0x28cb1ad2970
    |-IfStmt 0x28cb1acdb60 <line:491:5, line:492:14>
    | |-OpaqueValueExpr 0x28cb1acdb48 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x28cb1acdb30 <col:9, col:14> 'err' 0x28cb1ad2970
    |-IfStmt 0x28cb1acdda8 <line:495:5, line:508:5>
    | |-OpaqueValueExpr 0x28cb1acdd90 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x28cb1acdd78 <line:495:41, line:508:5>
    |   `-CompoundStmt 0x28cb1acdd60 <line:500:10, line:507:9>
    |     `-IfStmt 0x28cb1acdd48 <line:504:13, line:505:22>
    |       |-OpaqueValueExpr 0x28cb1acdd30 <<invalid sloc>> '_Bool'
    |       `-GotoStmt 0x28cb1acdd18 <col:17, col:22> 'err' 0x28cb1ad2970
    |-BinaryOperator 0x28cb1acde38 <line:509:5, col:13> 'int' '='
    | |-DeclRefExpr 0x28cb1acddc0 <col:5> 'int' lvalue Var 0x28cb1ad27e0 'sign' 'int'
    | `-UnaryOperator 0x28cb1acde20 <col:12, col:13> 'int' prefix '-'
    |   `-IntegerLiteral 0x28cb1acddf8 <col:13> 'int' 1
    |-IfStmt 0x28cb1ace1a8 <line:597:5, line:600:5>
    | |-BinaryOperator 0x28cb1ace108 <line:597:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x28cb1ace0f0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x28cb1ace0a8 <col:9> 'int' lvalue Var 0x28cb1ad27e0 'sign' 'int'
    | | `-IntegerLiteral 0x28cb1ace0c8 <col:16> 'int' 0
    | `-CompoundStmt 0x28cb1ace190 <col:19, line:600:5>
    |   `-IfStmt 0x28cb1ace178 <line:598:9, line:599:18>
    |     |-OpaqueValueExpr 0x28cb1ace160 <<invalid sloc>> '_Bool'
    |     `-GotoStmt 0x28cb1ace148 <col:13, col:18> 'err' 0x28cb1ad2970
    |-IfStmt 0x28cb1ace3e8 <line:603:5, line:615:5> has_else
    | |-OpaqueValueExpr 0x28cb1ace3d0 <<invalid sloc>> '_Bool'
    | |-CompoundStmt 0x28cb1ace368 <line:603:23, line:612:5>
    | | `-IfStmt 0x28cb1ace340 <line:605:9, line:611:9> has_else
    | |   |-OpaqueValueExpr 0x28cb1ace328 <<invalid sloc>> '_Bool'
    | |   |-CompoundStmt 0x28cb1ace290 <line:605:43, line:608:9>
    | |   | `-IfStmt 0x28cb1ace278 <line:606:13, line:607:22>
    | |   |   |-OpaqueValueExpr 0x28cb1ace260 <<invalid sloc>> '_Bool'
    | |   |   `-GotoStmt 0x28cb1ace248 <col:17, col:22> 'err' 0x28cb1ad2970
    | |   `-CompoundStmt 0x28cb1ace310 <line:608:16, line:611:9>
    | |     `-IfStmt 0x28cb1ace2f8 <line:609:13, line:610:22>
    | |       |-OpaqueValueExpr 0x28cb1ace2e0 <<invalid sloc>> '_Bool'
    | |       `-GotoStmt 0x28cb1ace2c8 <col:17, col:22> 'err' 0x28cb1ad2970
    | `-CompoundStmt 0x28cb1ace3b8 <line:612:12, line:615:5>
    |   `-GotoStmt 0x28cb1ace3a0 <line:614:9, col:14> 'err' 0x28cb1ad2970
    |-LabelStmt 0x28cb1ace438 <line:617:2, col:5> 'err'
    | `-NullStmt 0x28cb1ace430 <col:5>
    `-NullStmt 0x28cb1ace470 <line:621:22>
