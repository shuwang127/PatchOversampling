TranslationUnitDecl 0x1903bd017a8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1903bd02040 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1903bd01d40 '__int128'
|-TypedefDecl 0x1903bd020b0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1903bd01d60 'unsigned __int128'
|-TypedefDecl 0x1903bd023e8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1903bd021a0 'struct __NSConstantString_tag'
|   `-Record 0x1903bd02108 '__NSConstantString_tag'
|-TypedefDecl 0x1903bd02458 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1903bd01980 'unsigned long long'
|-TypedefDecl 0x1903bd024f0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1903bd024b0 'char *'
|   `-BuiltinType 0x1903bd01840 'char'
|-TypedefDecl 0x1903bd02560 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1903bd024b0 'char *'
|   `-BuiltinType 0x1903bd01840 'char'
|-TypedefDecl 0x1903bd02620 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1903bd01980 'unsigned long long'
|-TypedefDecl 0x1903bd02690 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1903bd024b0 'char *'
|   `-BuiltinType 0x1903bd01840 'char'
|-FunctionDecl 0x1903d6ec420 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1903d6ec4c0 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1903d6ec530 <col:21> Implicit
|-FunctionDecl 0x1903d6ec588 prev 0x1903d6ec420 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1903d6ec2b0 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1903d6ec678 <col:21> Inherited Implicit
|-TypedefDecl 0x1903d6ec6b8 prev 0x1903bd02458 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1903bd01980 'unsigned long long'
|-TypedefDecl 0x1903d6ec760 <line:503:1, col:16> col:16 rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1903d6ec730 'size_t' sugar
|   |-Typedef 0x1903d6ec6b8 'size_t'
|   `-BuiltinType 0x1903bd01980 'unsigned long long'
|-TypedefDecl 0x1903d6ec7d0 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1903bd018e0 'long long'
|-TypedefDecl 0x1903d6ec840 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1903bd018e0 'long long'
|-TypedefDecl 0x1903d6ec8b0 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1903bd01920 'unsigned short'
|-TypedefDecl 0x1903d6ec920 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x1903bd01920 'unsigned short'
|-TypedefDecl 0x1903d6ec990 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x1903bd01920 'unsigned short'
|-TypedefDecl 0x1903d6eca00 <line:563:1, col:13> col:13 errno_t 'int'
| `-BuiltinType 0x1903bd018a0 'int'
|-TypedefDecl 0x1903d6eca70 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1903bd018c0 'long'
|-TypedefDecl 0x1903d6ecae0 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1903bd018e0 'long long'
|-TypedefDecl 0x1903d6ecb70 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1903d6ecb40 '__time64_t' sugar
|   |-Typedef 0x1903d6ecae0 '__time64_t'
|   `-BuiltinType 0x1903bd018e0 'long long'
|-FunctionDecl 0x1903d6ecce8 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1903d6ecf08 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1903d721020 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1903d6ed048 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1903d6ed0c0 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1903d6ed138 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1903d6ed1b8 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1903d720dc0 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1903d721100 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1903d7211c0 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1903d721330 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1903d7212e0 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1903d721280 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1903d7211a0 'struct threadlocaleinfostruct'
|       `-Record 0x1903d72ae60 'threadlocaleinfostruct'
|-TypedefDecl 0x1903d721440 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1903d7213f0 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1903d721390 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1903d721260 'struct threadmbcinfostruct'
|       `-Record 0x1903d7211c0 'threadmbcinfostruct'
|-RecordDecl 0x1903d721498 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1903d721550 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1903d721610 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1903d7216a0 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1903d721730 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1903d7217e8 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1903d721790 'struct localeinfo_struct' sugar
|   `-RecordType 0x1903d7215f0 'struct localeinfo_struct'
|     `-Record 0x1903d721550 'localeinfo_struct'
|-TypedefDecl 0x1903d7218c0 <line:2078:1, line:2082:21> col:21 _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1903d721870 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1903d721790 'struct localeinfo_struct' sugar
|     `-RecordType 0x1903d7215f0 'struct localeinfo_struct'
|       `-Record 0x1903d721550 'localeinfo_struct'
|-RecordDecl 0x1903d721938 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1903d7219f0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1903d721a68 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1903d721b28 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1903d721bc0 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1903d721c30 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1903d721ce8 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1903d721c90 'struct localerefcount' sugar
|   `-RecordType 0x1903d7219d0 'struct localerefcount'
|     `-Record 0x1903d721938 'localerefcount'
|-RecordDecl 0x1903d72ae60 prev 0x1903d721100 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1903d72aee0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1903d72af58 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1903d72afc8 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1903d72b038 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1903d72b0a8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1903d72b268 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1903d72b2d8 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1903d72b348 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1903d72b3b8 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1903d72b428 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1903d72b498 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1903d72b4f0 parent 0x1903bd017a8 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1903d72b680 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1903d72b6f0 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1903d72b760 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1903d72b7d0 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1903d72b870 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1903d72b8e0 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1903d72b9f0 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1903d72bb28 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1903d72bbd8 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1903d72bb80 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1903d7211a0 'struct threadlocaleinfostruct'
|     `-Record 0x1903d72ae60 'threadlocaleinfostruct'
|-FunctionDecl 0x1903d732fc0 <D:\Microsoft Visual Studio 12.0\VC\include\assert.h:35:9, col:112> col:22 used _wassert 'void (const wchar_t *, const wchar_t *, unsigned int) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, unsigned int)'
| |-ParmVarDecl 0x1903d72bc58 <col:38, col:54> col:54 _Message 'const wchar_t *'
| |-ParmVarDecl 0x1903d72bcd0 <col:71, col:86> col:86 _File 'const wchar_t *'
| `-ParmVarDecl 0x1903d72bd50 <col:98, col:107> col:107 _Line 'unsigned int'
|-FunctionDecl 0x1903d733320 <.//openssl//file_jk/after\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1903d7330a8 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x1903d733128 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x1903d7331a8 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x1903d733228 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x1903d733628 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1903d7333f8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1903d733478 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1903d7334f8 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x1903d733578 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x1903d7338e8 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x1903d733700 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x1903d733780 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x1903d733800 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x1903d733ba0 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x1903d7339b8 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x1903d733a38 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x1903d733ab8 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x1903d738f88 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1903d733c70 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1903d733cf0 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1903d733d70 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x1903d733df0 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x1903d739290 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1903d739060 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1903d7390e0 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1903d739160 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x1903d7391e0 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x1903d739350 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x1903d739428 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x1903d739498 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x1903d739508 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x1903d739578 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x1903d7395e8 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1903d739640 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x1903d739718 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x1903d739788 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x1903d7397f8 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x1903d739868 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x1903d739960 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x1903d7399d0 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1903d739a28 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x1903d739af8 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x1903d739b68 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x1903d739bd8 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x1903d739c48 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x1903d739cb8 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1903d739d10 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x1903d739de8 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x1903d739e58 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x1903d739eb0 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x1903d7351d0 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x1903d7354c8 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x1903d735578 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x1903d735708 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x1903d735648 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x1903d735858 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x1903d7357c8 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x1903d7359a8 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x1903d735918 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x1903d735d68 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x1903d735a68 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1903d735ae8 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x1903d735b68 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x1903d735be8 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x1903d735c68 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x1903d737088 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x1903d735e48 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1903d736f20 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x1903d736fa0 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x1903d7372f8 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x1903d737158 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1903d7371d8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x1903d737258 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x1903d737638 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x1903d7373c8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1903d737448 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x1903d7374c8 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x1903d737548 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x1903d737868 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x1903d737710 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x1903d737790 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x1903d737a48 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x1903d737930 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x1903d7379b0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x1903d737d00 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x1903d737b10 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x1903d737b90 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x1903d737c10 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x1903d73e110 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x1903d737dd0 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x1903d737e50 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x1903d73df90 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x1903d73e010 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x1903d73e608 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x1903d73e1e8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x1903d73e268 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x1903d73e2e8 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x1903d73e368 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x1903d73e3e8 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x1903d73e468 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x1903d73e4e8 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x1903d73eab8 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x1903d73e6f8 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1903d73e778 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x1903d73e7f8 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x1903d73e878 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x1903d73e8f8 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x1903d73e978 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x1903d73e9f8 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x1903d73edd0 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x1903d73eba8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x1903d73ec28 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x1903d73eca8 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x1903d73ed28 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x1903d73f128 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x1903d73eea8 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x1903d73ef28 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x1903d73efb8 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x1903d73f038 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x1903d73f508 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x1903d73f200 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x1903d73f280 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x1903d73f300 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x1903d73f380 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x1903d73f400 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x1903d73f978 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x1903d73f5e8 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x1903d73f668 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x1903d73f6e8 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x1903d73f768 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x1903d73f7e8 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x1903d73f868 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x1903d73fd70 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x1903d73fa60 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1903d73fae0 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1903d73fb60 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x1903d73fbe0 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x1903d73fc60 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x1903d76ee58 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x1903d73fe50 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1903d73fed0 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1903d76eca0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x1903d76ed20 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x1903d76eda0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x1903d76f2d0 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1903d76ef38 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x1903d76efb8 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x1903d76f038 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x1903d76f0b8 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x1903d76f138 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x1903d76f1b8 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x1903d76f6c0 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1903d76f3b8 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x1903d76f438 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x1903d76f4b8 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x1903d76f538 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x1903d76f5b8 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x1903d76fab0 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x1903d76f7a0 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x1903d76f820 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x1903d76f8a0 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x1903d76f920 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x1903d76f9a0 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x1903d76fda0 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x1903d76fb90 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x1903d76fc10 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x1903d76fcb0 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x1903d770018 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x1903d76fe70 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x1903d76fef0 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x1903d76ff70 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x1903d7700e8 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-VarDecl 0x1903d770168 <.//openssl//file_jk/after\crypto\bn\bn_lib.c:30:1, col:27> col:12 used bn_limit_num 'int' static cinit
| `-IntegerLiteral 0x1903d7701d0 <col:27> 'int' 8
|-VarDecl 0x1903d770228 <line:31:1, col:32> col:12 used bn_limit_bits_low 'int' static cinit
| `-IntegerLiteral 0x1903d770290 <col:32> 'int' 0
|-VarDecl 0x1903d7702e8 <line:32:1, col:31> col:12 used bn_limit_num_low 'int' static cinit
| `-IntegerLiteral 0x1903d770350 <col:31> 'int' 8
|-VarDecl 0x1903d7703a8 <line:33:1, col:33> col:12 used bn_limit_bits_high 'int' static cinit
| `-IntegerLiteral 0x1903d770410 <col:33> 'int' 0
|-VarDecl 0x1903d770468 <line:34:1, col:32> col:12 used bn_limit_num_high 'int' static cinit
| `-IntegerLiteral 0x1903d7704d0 <col:32> 'int' 8
|-VarDecl 0x1903d770528 <line:35:1, col:33> col:12 used bn_limit_bits_mont 'int' static cinit
| `-IntegerLiteral 0x1903d770590 <col:33> 'int' 0
|-VarDecl 0x1903d7705e8 <line:36:1, col:32> col:12 used bn_limit_num_mont 'int' static cinit
| `-IntegerLiteral 0x1903d770650 <col:32> 'int' 8
|-FunctionDecl 0x1903d770978 <line:38:1, line:64:1> line:38:6 BN_set_params 'void (int, int, int, int)'
| |-ParmVarDecl 0x1903d7706a8 <col:20, col:24> col:24 used mult 'int'
| |-ParmVarDecl 0x1903d770728 <col:30, col:34> col:34 used high 'int'
| |-ParmVarDecl 0x1903d7707a8 <col:40, col:44> col:44 used low 'int'
| |-ParmVarDecl 0x1903d770828 <col:49, col:53> col:53 used mont 'int'
| `-CompoundStmt 0x1903d76be20 <line:39:1, line:64:1>
|   |-IfStmt 0x1903d770f08 <line:40:5, line:45:5>
|   | |-BinaryOperator 0x1903d770ab0 <line:40:9, col:17> 'int' '>='
|   | | |-ImplicitCastExpr 0x1903d770a98 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d770a50 <col:9> 'int' lvalue ParmVar 0x1903d7706a8 'mult' 'int'
|   | | `-IntegerLiteral 0x1903d770a70 <col:17> 'int' 0
|   | `-CompoundStmt 0x1903d770ee8 <col:20, line:45:5>
|   |   |-IfStmt 0x1903d770df0 <line:41:9, line:42:38>
|   |   | |-BinaryOperator 0x1903d770c68 <line:41:13, col:45> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x1903d770c50 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1903d770ad0 <col:13> 'int' lvalue ParmVar 0x1903d7706a8 'mult' 'int'
|   |   | | `-BinaryOperator 0x1903d770c30 <col:20, col:45> 'int' '-'
|   |   | |   |-CStyleCastExpr 0x1903d770be0 <col:20, col:41> 'int' <IntegralCast>
|   |   | |   | `-ParenExpr 0x1903d770bc0 <col:25, col:41> 'unsigned long long'
|   |   | |   |   `-BinaryOperator 0x1903d770b68 <col:26, col:40> 'unsigned long long' '*'
|   |   | |   |     |-UnaryExprOrTypeTraitExpr 0x1903d770b08 <col:26, col:36> 'unsigned long long' sizeof 'int'
|   |   | |   |     `-ImplicitCastExpr 0x1903d770b50 <col:40> 'unsigned long long' <IntegralCast>
|   |   | |   |       `-IntegerLiteral 0x1903d770b28 <col:40> 'int' 8
|   |   | |   `-IntegerLiteral 0x1903d770c08 <col:45> 'int' 1
|   |   | `-BinaryOperator 0x1903d770dd0 <line:42:13, col:38> 'int' '='
|   |   |   |-DeclRefExpr 0x1903d770c88 <col:13> 'int' lvalue ParmVar 0x1903d7706a8 'mult' 'int'
|   |   |   `-ImplicitCastExpr 0x1903d770db8 <col:20, col:38> 'int' <IntegralCast>
|   |   |     `-BinaryOperator 0x1903d770d98 <col:20, col:38> 'unsigned long long' '-'
|   |   |       |-BinaryOperator 0x1903d770d38 <col:20, col:34> 'unsigned long long' '*'
|   |   |       | |-UnaryExprOrTypeTraitExpr 0x1903d770cd8 <col:20, col:30> 'unsigned long long' sizeof 'int'
|   |   |       | `-ImplicitCastExpr 0x1903d770d20 <col:34> 'unsigned long long' <IntegralCast>
|   |   |       |   `-IntegerLiteral 0x1903d770cf8 <col:34> 'int' 8
|   |   |       `-ImplicitCastExpr 0x1903d770d80 <col:38> 'unsigned long long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1903d770d58 <col:38> 'int' 1
|   |   `-BinaryOperator 0x1903d770ec8 <line:44:9, col:29> 'int' '='
|   |     |-DeclRefExpr 0x1903d770e28 <col:9> 'int' lvalue Var 0x1903d770168 'bn_limit_num' 'int'
|   |     `-BinaryOperator 0x1903d770ea8 <col:24, col:29> 'int' '<<'
|   |       |-IntegerLiteral 0x1903d770e48 <col:24> 'int' 1
|   |       `-ImplicitCastExpr 0x1903d770e90 <col:29> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1903d770e70 <col:29> 'int' lvalue ParmVar 0x1903d7706a8 'mult' 'int'
|   |-IfStmt 0x1903d771420 <line:46:5, line:51:5>
|   | |-BinaryOperator 0x1903d770f80 <line:46:9, col:17> 'int' '>='
|   | | |-ImplicitCastExpr 0x1903d770f68 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d770f20 <col:9> 'int' lvalue ParmVar 0x1903d770728 'high' 'int'
|   | | `-IntegerLiteral 0x1903d770f40 <col:17> 'int' 0
|   | `-CompoundStmt 0x1903d7713f8 <col:20, line:51:5>
|   |   |-IfStmt 0x1903d7712a8 <line:47:9, line:48:38>
|   |   | |-BinaryOperator 0x1903d771138 <line:47:13, col:45> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x1903d771120 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1903d770fa0 <col:13> 'int' lvalue ParmVar 0x1903d770728 'high' 'int'
|   |   | | `-BinaryOperator 0x1903d771100 <col:20, col:45> 'int' '-'
|   |   | |   |-CStyleCastExpr 0x1903d7710b0 <col:20, col:41> 'int' <IntegralCast>
|   |   | |   | `-ParenExpr 0x1903d771090 <col:25, col:41> 'unsigned long long'
|   |   | |   |   `-BinaryOperator 0x1903d771038 <col:26, col:40> 'unsigned long long' '*'
|   |   | |   |     |-UnaryExprOrTypeTraitExpr 0x1903d770fd8 <col:26, col:36> 'unsigned long long' sizeof 'int'
|   |   | |   |     `-ImplicitCastExpr 0x1903d771020 <col:40> 'unsigned long long' <IntegralCast>
|   |   | |   |       `-IntegerLiteral 0x1903d770ff8 <col:40> 'int' 8
|   |   | |   `-IntegerLiteral 0x1903d7710d8 <col:45> 'int' 1
|   |   | `-BinaryOperator 0x1903d771288 <line:48:13, col:38> 'int' '='
|   |   |   |-DeclRefExpr 0x1903d771158 <col:13> 'int' lvalue ParmVar 0x1903d770728 'high' 'int'
|   |   |   `-ImplicitCastExpr 0x1903d771270 <col:20, col:38> 'int' <IntegralCast>
|   |   |     `-BinaryOperator 0x1903d771250 <col:20, col:38> 'unsigned long long' '-'
|   |   |       |-BinaryOperator 0x1903d7711f0 <col:20, col:34> 'unsigned long long' '*'
|   |   |       | |-UnaryExprOrTypeTraitExpr 0x1903d771190 <col:20, col:30> 'unsigned long long' sizeof 'int'
|   |   |       | `-ImplicitCastExpr 0x1903d7711d8 <col:34> 'unsigned long long' <IntegralCast>
|   |   |       |   `-IntegerLiteral 0x1903d7711b0 <col:34> 'int' 8
|   |   |       `-ImplicitCastExpr 0x1903d771238 <col:38> 'unsigned long long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1903d771210 <col:38> 'int' 1
|   |   |-BinaryOperator 0x1903d771318 <line:49:9, col:30> 'int' '='
|   |   | |-DeclRefExpr 0x1903d7712c0 <col:9> 'int' lvalue Var 0x1903d7703a8 'bn_limit_bits_high' 'int'
|   |   | `-ImplicitCastExpr 0x1903d771300 <col:30> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1903d7712e0 <col:30> 'int' lvalue ParmVar 0x1903d770728 'high' 'int'
|   |   `-BinaryOperator 0x1903d7713d8 <line:50:9, col:34> 'int' '='
|   |     |-DeclRefExpr 0x1903d771338 <col:9> 'int' lvalue Var 0x1903d770468 'bn_limit_num_high' 'int'
|   |     `-BinaryOperator 0x1903d7713b8 <col:29, col:34> 'int' '<<'
|   |       |-IntegerLiteral 0x1903d771358 <col:29> 'int' 1
|   |       `-ImplicitCastExpr 0x1903d7713a0 <col:34> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1903d771380 <col:34> 'int' lvalue ParmVar 0x1903d770728 'high' 'int'
|   |-IfStmt 0x1903d771938 <line:52:5, line:57:5>
|   | |-BinaryOperator 0x1903d771498 <line:52:9, col:16> 'int' '>='
|   | | |-ImplicitCastExpr 0x1903d771480 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d771438 <col:9> 'int' lvalue ParmVar 0x1903d7707a8 'low' 'int'
|   | | `-IntegerLiteral 0x1903d771458 <col:16> 'int' 0
|   | `-CompoundStmt 0x1903d771910 <col:19, line:57:5>
|   |   |-IfStmt 0x1903d7717c0 <line:53:9, line:54:37>
|   |   | |-BinaryOperator 0x1903d771650 <line:53:13, col:44> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x1903d771638 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1903d7714b8 <col:13> 'int' lvalue ParmVar 0x1903d7707a8 'low' 'int'
|   |   | | `-BinaryOperator 0x1903d771618 <col:19, col:44> 'int' '-'
|   |   | |   |-CStyleCastExpr 0x1903d7715c8 <col:19, col:40> 'int' <IntegralCast>
|   |   | |   | `-ParenExpr 0x1903d7715a8 <col:24, col:40> 'unsigned long long'
|   |   | |   |   `-BinaryOperator 0x1903d771550 <col:25, col:39> 'unsigned long long' '*'
|   |   | |   |     |-UnaryExprOrTypeTraitExpr 0x1903d7714f0 <col:25, col:35> 'unsigned long long' sizeof 'int'
|   |   | |   |     `-ImplicitCastExpr 0x1903d771538 <col:39> 'unsigned long long' <IntegralCast>
|   |   | |   |       `-IntegerLiteral 0x1903d771510 <col:39> 'int' 8
|   |   | |   `-IntegerLiteral 0x1903d7715f0 <col:44> 'int' 1
|   |   | `-BinaryOperator 0x1903d7717a0 <line:54:13, col:37> 'int' '='
|   |   |   |-DeclRefExpr 0x1903d771670 <col:13> 'int' lvalue ParmVar 0x1903d7707a8 'low' 'int'
|   |   |   `-ImplicitCastExpr 0x1903d771788 <col:19, col:37> 'int' <IntegralCast>
|   |   |     `-BinaryOperator 0x1903d771768 <col:19, col:37> 'unsigned long long' '-'
|   |   |       |-BinaryOperator 0x1903d771708 <col:19, col:33> 'unsigned long long' '*'
|   |   |       | |-UnaryExprOrTypeTraitExpr 0x1903d7716a8 <col:19, col:29> 'unsigned long long' sizeof 'int'
|   |   |       | `-ImplicitCastExpr 0x1903d7716f0 <col:33> 'unsigned long long' <IntegralCast>
|   |   |       |   `-IntegerLiteral 0x1903d7716c8 <col:33> 'int' 8
|   |   |       `-ImplicitCastExpr 0x1903d771750 <col:37> 'unsigned long long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1903d771728 <col:37> 'int' 1
|   |   |-BinaryOperator 0x1903d771830 <line:55:9, col:29> 'int' '='
|   |   | |-DeclRefExpr 0x1903d7717d8 <col:9> 'int' lvalue Var 0x1903d770228 'bn_limit_bits_low' 'int'
|   |   | `-ImplicitCastExpr 0x1903d771818 <col:29> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1903d7717f8 <col:29> 'int' lvalue ParmVar 0x1903d7707a8 'low' 'int'
|   |   `-BinaryOperator 0x1903d7718f0 <line:56:9, col:33> 'int' '='
|   |     |-DeclRefExpr 0x1903d771850 <col:9> 'int' lvalue Var 0x1903d7702e8 'bn_limit_num_low' 'int'
|   |     `-BinaryOperator 0x1903d7718d0 <col:28, col:33> 'int' '<<'
|   |       |-IntegerLiteral 0x1903d771870 <col:28> 'int' 1
|   |       `-ImplicitCastExpr 0x1903d7718b8 <col:33> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1903d771898 <col:33> 'int' lvalue ParmVar 0x1903d7707a8 'low' 'int'
|   `-IfStmt 0x1903d76be08 <line:58:5, line:63:5>
|     |-BinaryOperator 0x1903d7719b0 <line:58:9, col:17> 'int' '>='
|     | |-ImplicitCastExpr 0x1903d771998 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1903d771950 <col:9> 'int' lvalue ParmVar 0x1903d770828 'mont' 'int'
|     | `-IntegerLiteral 0x1903d771970 <col:17> 'int' 0
|     `-CompoundStmt 0x1903d76bde0 <col:20, line:63:5>
|       |-IfStmt 0x1903d76bc90 <line:59:9, line:60:38>
|       | |-BinaryOperator 0x1903d771b68 <line:59:13, col:45> 'int' '>'
|       | | |-ImplicitCastExpr 0x1903d771b50 <col:13> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x1903d7719d0 <col:13> 'int' lvalue ParmVar 0x1903d770828 'mont' 'int'
|       | | `-BinaryOperator 0x1903d771b30 <col:20, col:45> 'int' '-'
|       | |   |-CStyleCastExpr 0x1903d771ae0 <col:20, col:41> 'int' <IntegralCast>
|       | |   | `-ParenExpr 0x1903d771ac0 <col:25, col:41> 'unsigned long long'
|       | |   |   `-BinaryOperator 0x1903d771a68 <col:26, col:40> 'unsigned long long' '*'
|       | |   |     |-UnaryExprOrTypeTraitExpr 0x1903d771a08 <col:26, col:36> 'unsigned long long' sizeof 'int'
|       | |   |     `-ImplicitCastExpr 0x1903d771a50 <col:40> 'unsigned long long' <IntegralCast>
|       | |   |       `-IntegerLiteral 0x1903d771a28 <col:40> 'int' 8
|       | |   `-IntegerLiteral 0x1903d771b08 <col:45> 'int' 1
|       | `-BinaryOperator 0x1903d76bc70 <line:60:13, col:38> 'int' '='
|       |   |-DeclRefExpr 0x1903d771b88 <col:13> 'int' lvalue ParmVar 0x1903d770828 'mont' 'int'
|       |   `-ImplicitCastExpr 0x1903d771ca0 <col:20, col:38> 'int' <IntegralCast>
|       |     `-BinaryOperator 0x1903d771c80 <col:20, col:38> 'unsigned long long' '-'
|       |       |-BinaryOperator 0x1903d771c20 <col:20, col:34> 'unsigned long long' '*'
|       |       | |-UnaryExprOrTypeTraitExpr 0x1903d771bc0 <col:20, col:30> 'unsigned long long' sizeof 'int'
|       |       | `-ImplicitCastExpr 0x1903d771c08 <col:34> 'unsigned long long' <IntegralCast>
|       |       |   `-IntegerLiteral 0x1903d771be0 <col:34> 'int' 8
|       |       `-ImplicitCastExpr 0x1903d771c68 <col:38> 'unsigned long long' <IntegralCast>
|       |         `-IntegerLiteral 0x1903d771c40 <col:38> 'int' 1
|       |-BinaryOperator 0x1903d76bd00 <line:61:9, col:30> 'int' '='
|       | |-DeclRefExpr 0x1903d76bca8 <col:9> 'int' lvalue Var 0x1903d770528 'bn_limit_bits_mont' 'int'
|       | `-ImplicitCastExpr 0x1903d76bce8 <col:30> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x1903d76bcc8 <col:30> 'int' lvalue ParmVar 0x1903d770828 'mont' 'int'
|       `-BinaryOperator 0x1903d76bdc0 <line:62:9, col:34> 'int' '='
|         |-DeclRefExpr 0x1903d76bd20 <col:9> 'int' lvalue Var 0x1903d7705e8 'bn_limit_num_mont' 'int'
|         `-BinaryOperator 0x1903d76bda0 <col:29, col:34> 'int' '<<'
|           |-IntegerLiteral 0x1903d76bd40 <col:29> 'int' 1
|           `-ImplicitCastExpr 0x1903d76bd88 <col:34> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x1903d76bd68 <col:34> 'int' lvalue ParmVar 0x1903d770828 'mont' 'int'
|-FunctionDecl 0x1903d76bf50 <line:66:1, line:78:1> line:66:5 BN_get_params 'int (int)'
| |-ParmVarDecl 0x1903d76be68 <col:19, col:23> col:23 used which 'int'
| `-CompoundStmt 0x1903d76c448 <line:67:1, line:78:1>
|   `-IfStmt 0x1903d76c420 <line:68:5, line:77:18> has_else
|     |-BinaryOperator 0x1903d76c070 <line:68:9, col:18> 'int' '=='
|     | |-ImplicitCastExpr 0x1903d76c058 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1903d76c010 <col:9> 'int' lvalue ParmVar 0x1903d76be68 'which' 'int'
|     | `-IntegerLiteral 0x1903d76c030 <col:18> 'int' 0
|     |-NullStmt 0x1903d76c418 <line:69:9>
|     `-IfStmt 0x1903d76c3f0 <line:70:10, line:77:18> has_else
|       |-BinaryOperator 0x1903d76c0f0 <line:70:14, col:23> 'int' '=='
|       | |-ImplicitCastExpr 0x1903d76c0d8 <col:14> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x1903d76c090 <col:14> 'int' lvalue ParmVar 0x1903d76be68 'which' 'int'
|       | `-IntegerLiteral 0x1903d76c0b0 <col:23> 'int' 1
|       |-ReturnStmt 0x1903d76c168 <line:71:9, col:35>
|       | `-ImplicitCastExpr 0x1903d76c150 <col:16, col:35> 'int' <LValueToRValue>
|       |   `-ParenExpr 0x1903d76c130 <col:16, col:35> 'int' lvalue
|       |     `-DeclRefExpr 0x1903d76c110 <col:17> 'int' lvalue Var 0x1903d7703a8 'bn_limit_bits_high' 'int'
|       `-IfStmt 0x1903d76c3c8 <line:72:10, line:77:18> has_else
|         |-BinaryOperator 0x1903d76c1d8 <line:72:14, col:23> 'int' '=='
|         | |-ImplicitCastExpr 0x1903d76c1c0 <col:14> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x1903d76c178 <col:14> 'int' lvalue ParmVar 0x1903d76be68 'which' 'int'
|         | `-IntegerLiteral 0x1903d76c198 <col:23> 'int' 2
|         |-ReturnStmt 0x1903d76c250 <line:73:9, col:34>
|         | `-ImplicitCastExpr 0x1903d76c238 <col:16, col:34> 'int' <LValueToRValue>
|         |   `-ParenExpr 0x1903d76c218 <col:16, col:34> 'int' lvalue
|         |     `-DeclRefExpr 0x1903d76c1f8 <col:17> 'int' lvalue Var 0x1903d770228 'bn_limit_bits_low' 'int'
|         `-IfStmt 0x1903d76c3a0 <line:74:10, line:77:18> has_else
|           |-BinaryOperator 0x1903d76c2c0 <line:74:14, col:23> 'int' '=='
|           | |-ImplicitCastExpr 0x1903d76c2a8 <col:14> 'int' <LValueToRValue>
|           | | `-DeclRefExpr 0x1903d76c260 <col:14> 'int' lvalue ParmVar 0x1903d76be68 'which' 'int'
|           | `-IntegerLiteral 0x1903d76c280 <col:23> 'int' 3
|           |-ReturnStmt 0x1903d76c338 <line:75:9, col:35>
|           | `-ImplicitCastExpr 0x1903d76c320 <col:16, col:35> 'int' <LValueToRValue>
|           |   `-ParenExpr 0x1903d76c300 <col:16, col:35> 'int' lvalue
|           |     `-DeclRefExpr 0x1903d76c2e0 <col:17> 'int' lvalue Var 0x1903d770528 'bn_limit_bits_mont' 'int'
|           `-ReturnStmt 0x1903d76c390 <line:77:9, col:18>
|             `-ParenExpr 0x1903d76c370 <col:16, col:18> 'int'
|               `-IntegerLiteral 0x1903d76c348 <col:17> 'int' 0
|-FunctionDecl 0x1903d76c530 <line:81:1, line:88:1> line:81:15 invalid BN_value_one 'const int *(void)'
| `-CompoundStmt 0x1903d76c7b8 <line:82:1, line:88:1>
|   |-DeclStmt 0x1903d76c690 <line:83:5, col:40>
|   | `-VarDecl 0x1903d76c600 <col:5, col:27> col:27 invalid data_one 'const int' static
|   `-DeclStmt 0x1903d76c7a0 <line:84:5, line:85:63>
|     `-VarDecl 0x1903d76c6c0 <line:84:5, col:25> col:25 invalid const_one 'const int' static
|-FunctionDecl 0x1903d76c888 <line:90:1, line:133:1> line:90:5 invalid BN_num_bits_word 'int (int)'
| |-ParmVarDecl 0x1903d76c7f0 <col:22, col:31> col:31 invalid l 'int'
| `-CompoundStmt 0x1903d771f58 <line:91:1, line:133:1>
|   |-DeclStmt 0x1903d76c9f0 <line:93:5, col:24>
|   | `-VarDecl 0x1903d76c960 <col:5, col:9> col:9 used bits 'int'
|   `-ReturnStmt 0x1903d771f48 <line:132:5, col:12>
|     `-ImplicitCastExpr 0x1903d771f30 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1903d771f10 <col:12> 'int' lvalue Var 0x1903d76c960 'bits' 'int'
|-FunctionDecl 0x1903d772060 <line:135:1, line:143:1> line:135:5 invalid BN_num_bits 'int (const int *)'
| |-ParmVarDecl 0x1903d771f90 <col:17, col:31> col:31 invalid a 'const int *'
| `-CompoundStmt 0x1903d7723e8 <line:136:1, line:143:1>
|   |-DeclStmt 0x1903d7721c8 <line:137:5, col:23>
|   | `-VarDecl 0x1903d772138 <col:5, col:9> col:9 used i 'int'
|   |-NullStmt 0x1903d7721e0 <line:138:20>
|   `-IfStmt 0x1903d772378 <line:140:5, line:141:16>
|     |-OpaqueValueExpr 0x1903d772360 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x1903d772350 <col:9, col:16>
|       `-IntegerLiteral 0x1903d772328 <col:16> 'int' 0
|-FunctionDecl 0x1903d7724b8 <line:145:1, line:151:1> line:145:13 invalid bn_free_d 'void (int *)' static
| |-ParmVarDecl 0x1903d772428 <col:23, col:31> col:31 invalid a 'int *'
| `-CompoundStmt 0x1903d7728a8 <line:146:1, line:151:1>
|-FunctionDecl 0x1903d772960 <line:154:1, line:170:1> line:154:6 invalid BN_clear_free 'void (int *)'
| |-ParmVarDecl 0x1903d7728d0 <col:20, col:28> col:28 invalid a 'int *'
| `-CompoundStmt 0x1903d773d88 <line:155:1, line:170:1>
|   |-DeclStmt 0x1903d772aa0 <line:156:5, col:10>
|   | `-VarDecl 0x1903d772a38 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x1903d772ae0 <line:158:5, line:159:9>
|   | |-OpaqueValueExpr 0x1903d772ac8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1903d772ab8 <col:9>
|   |-NullStmt 0x1903d772af8 <line:160:20>
|   `-IfStmt 0x1903d772c80 <line:161:5, line:165:5>
|     |-OpaqueValueExpr 0x1903d772c68 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x1903d772c58 <line:161:23, line:165:5>
|-FunctionDecl 0x1903d773e60 <line:172:1, line:187:1> line:172:6 invalid BN_free 'void (int *)'
| |-ParmVarDecl 0x1903d773dd0 <col:14, col:22> col:22 invalid a 'int *'
| `-CompoundStmt 0x1903d774000 <line:173:1, line:187:1>
|   |-IfStmt 0x1903d773f48 <line:174:5, line:175:9>
|   | |-OpaqueValueExpr 0x1903d773f30 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1903d773f20 <col:9>
|   |-NullStmt 0x1903d773f60 <line:176:20>
|   `-IfStmt 0x1903d773fd8 <line:179:5, line:186:5> has_else
|     |-OpaqueValueExpr 0x1903d773fc0 <<invalid sloc>> '_Bool'
|     |-NullStmt 0x1903d773fb8 <line:180:9>
|     `-CompoundStmt 0x1903d773fa8 <line:181:10, line:186:5>
|-FunctionDecl 0x1903d7740d0 <line:189:1, line:195:1> line:189:6 invalid bn_init 'void (int *)'
| |-ParmVarDecl 0x1903d774040 <col:14, col:22> col:22 invalid a 'int *'
| `-CompoundStmt 0x1903d774230 <line:190:1, line:195:1>
|   |-DeclStmt 0x1903d774210 <line:191:5, col:24>
|   | `-VarDecl 0x1903d7741a8 <col:5, col:19> col:19 invalid nilbn 'int' static
|   `-NullStmt 0x1903d774228 <line:194:20>
|-FunctionDecl 0x1903d774320 <line:197:1, line:208:1> line:197:9 invalid BN_new 'int *(void)'
| `-CompoundStmt 0x1903d774640 <line:198:1, line:208:1>
|   |-IfStmt 0x1903d774620 <line:201:5, line:204:5>
|   | |-OpaqueValueExpr 0x1903d774608 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1903d7745f8 <line:201:55, line:204:5>
|   `-NullStmt 0x1903d774638 <line:206:22>
|-FunctionDecl 0x1903d774700 <line:210:2, line:216:2> line:210:10 invalid BN_secure_new 'int *(void)'
| `-CompoundStmt 0x1903d7747b8 <line:211:2, line:216:2>
|-FunctionDecl 0x1903d774940 <line:220:1, line:288:1> line:220:18 invalid bn_expand_internal 'int *(const int *, int)' static
| |-ParmVarDecl 0x1903d7747e0 <col:37, col:51> col:51 invalid b 'const int *'
| |-ParmVarDecl 0x1903d774860 <col:54, col:58> col:58 used words 'int'
| `-CompoundStmt 0x1903d7753d8 <line:221:1, line:288:1>
|   |-DeclStmt 0x1903d774a88 <line:223:5, col:22>
|   | `-VarDecl 0x1903d774a20 <col:5, col:21> col:21 invalid B 'const int *'
|   |-DeclStmt 0x1903d774b20 <line:224:5, col:10>
|   | `-VarDecl 0x1903d774ab8 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x1903d774c08 <line:226:5, line:229:5>
|   | |-OpaqueValueExpr 0x1903d774bf0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1903d774be0 <line:226:45, line:229:5>
|   |-IfStmt 0x1903d774c88 <line:230:5, line:233:5>
|   | |-OpaqueValueExpr 0x1903d774c70 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1903d774c60 <line:230:46, line:233:5>
|   |-IfStmt 0x1903d774e90 <line:238:5, line:241:5>
|   | |-OpaqueValueExpr 0x1903d774e78 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1903d774e68 <line:238:20, line:241:5>
|   `-IfStmt 0x1903d7753c0 <line:246:5, line:281:5>
|     |-OpaqueValueExpr 0x1903d7753a8 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x1903d775390 <line:246:20, line:281:5>
|       `-ForStmt 0x1903d775160 <line:247:9, line:266:9>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-BinaryOperator 0x1903d774f68 <line:247:31, col:35> 'int' '>'
|         | |-ImplicitCastExpr 0x1903d774f50 <col:31> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x1903d774f08 <col:31> 'int' lvalue Var 0x1903d774ab8 'i' 'int'
|         | `-IntegerLiteral 0x1903d774f28 <col:35> 'int' 0
|         |-<<<NULL>>>
|         `-CompoundStmt 0x1903d775150 <col:59, line:266:9>
|-FunctionDecl 0x1903d775590 <line:298:1, line:313:1> line:298:9 invalid bn_expand2 'int *(int *, int)'
| |-ParmVarDecl 0x1903d775430 <col:20, col:28> col:28 invalid b 'int *'
| |-ParmVarDecl 0x1903d7754b0 <col:31, col:35> col:35 used words 'int'
| `-CompoundStmt 0x1903d7757a0 <line:299:1, line:313:1>
|   `-IfStmt 0x1903d775788 <line:300:5, line:310:5>
|     |-OpaqueValueExpr 0x1903d775770 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x1903d775758 <line:300:26, line:310:5>
|       `-IfStmt 0x1903d775720 <line:304:9, line:307:9>
|         |-OpaqueValueExpr 0x1903d775708 <<invalid sloc>> '_Bool'
|         `-CompoundStmt 0x1903d7756f8 <line:304:19, line:307:9>
|-FunctionDecl 0x1903d7758a0 <line:315:1, line:332:1> line:315:9 invalid BN_dup 'int *(const int *)'
| |-ParmVarDecl 0x1903d7757d0 <col:16, col:30> col:30 invalid a 'const int *'
| `-CompoundStmt 0x1903d775ae0 <line:316:1, line:332:1>
|   |-NullStmt 0x1903d775960 <line:321:20>
|   |-IfStmt 0x1903d775ac0 <line:326:5, line:329:5>
|   | |-OpaqueValueExpr 0x1903d775aa8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1903d775a98 <line:326:25, line:329:5>
|   `-NullStmt 0x1903d775ad8 <line:330:20>
|-FunctionDecl 0x1903d76dc90 <line:334:1, line:383:1> line:334:9 invalid BN_copy 'int *(int *, const int *)'
| |-ParmVarDecl 0x1903d775b20 <col:17, col:25> col:25 invalid a 'int *'
| |-ParmVarDecl 0x1903d775ba0 <col:28, col:42> col:42 invalid b 'const int *'
| `-CompoundStmt 0x1903d76e4b8 <line:335:1, line:383:1>
|   |-DeclStmt 0x1903d76ddd8 <line:336:5, col:10>
|   | `-VarDecl 0x1903d76dd70 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x1903d76de70 <line:338:5, col:22>
|   | `-VarDecl 0x1903d76de08 <col:5, col:21> col:21 invalid B 'const int *'
|   |-NullStmt 0x1903d76de88 <line:340:20>
|   |-ForStmt 0x1903d76e258 <line:350:5, line:360:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1903d76e060 <line:350:27, col:31> 'int' '>'
|   | | |-ImplicitCastExpr 0x1903d76e048 <col:27> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d76e000 <col:27> 'int' lvalue Var 0x1903d76dd70 'i' 'int'
|   | | `-IntegerLiteral 0x1903d76e020 <col:31> 'int' 0
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x1903d76e248 <col:55, line:360:5>
|   `-NullStmt 0x1903d76e4b0 <line:381:20>
|-FunctionDecl 0x1903d76e658 <line:391:1, line:422:1> line:391:6 invalid BN_swap 'void (int *, int *)'
| |-ParmVarDecl 0x1903d76e508 <col:14, col:22> col:22 invalid a 'int *'
| |-ParmVarDecl 0x1903d76e588 <col:25, col:33> col:33 invalid b 'int *'
| `-CompoundStmt 0x1903d77add8 <line:392:1, line:422:1>
|   |-DeclStmt 0x1903d76e838 <line:393:5, col:33>
|   | |-VarDecl 0x1903d76e738 <col:5, col:9> col:9 used flags_old_a 'int'
|   | `-VarDecl 0x1903d76e7b8 <col:5, col:22> col:22 used flags_old_b 'int'
|   |-DeclStmt 0x1903d76e9f0 <line:395:5, col:35>
|   | |-VarDecl 0x1903d76e868 <col:5, col:9> col:9 used tmp_top 'int'
|   | |-VarDecl 0x1903d76e8e8 <col:5, col:18> col:18 used tmp_dmax 'int'
|   | `-VarDecl 0x1903d76e968 <col:5, col:28> col:28 used tmp_neg 'int'
|   |-NullStmt 0x1903d76ea08 <line:397:20>
|   |-NullStmt 0x1903d76ea10 <line:398:20>
|   |-NullStmt 0x1903d77adc8 <line:420:20>
|   `-NullStmt 0x1903d77add0 <line:421:20>
|-FunctionDecl 0x1903d77aec0 <line:424:1, line:432:1> line:424:6 invalid BN_clear 'void (int *)'
| |-ParmVarDecl 0x1903d77ae30 <col:15, col:23> col:23 invalid a 'int *'
| `-CompoundStmt 0x1903d77b038 <line:425:1, line:432:1>
|   `-NullStmt 0x1903d77af80 <line:426:20>
|-FunctionDecl 0x1903d77b100 <line:434:1, line:442:1> line:434:10 invalid BN_get_word 'int (const int *)'
| |-ParmVarDecl 0x1903d77b068 <col:22, col:36> col:36 invalid a 'const int *'
| `-CompoundStmt 0x1903d77b270 <line:435:1, line:442:1>
|   `-ReturnStmt 0x1903d77b260 <line:441:5, col:12>
|     `-IntegerLiteral 0x1903d77b238 <col:12> 'int' 0
|-FunctionDecl 0x1903d77b400 <line:444:1, line:455:1> line:444:5 invalid BN_set_word 'int (int *, int)'
| |-ParmVarDecl 0x1903d77b2a0 <col:17, col:25> col:25 invalid a 'int *'
| |-ParmVarDecl 0x1903d77b320 <col:28, col:37> col:37 invalid w 'int'
| `-CompoundStmt 0x1903d77b7d0 <line:445:1, line:455:1>
|   |-NullStmt 0x1903d77b4c8 <line:446:20>
|   |-IfStmt 0x1903d77b678 <line:447:5, line:448:18>
|   | |-OpaqueValueExpr 0x1903d77b660 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1903d77b650 <col:9, col:18>
|   |   `-ParenExpr 0x1903d77b630 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x1903d77b608 <col:17> 'int' 0
|   |-NullStmt 0x1903d77b770 <line:453:20>
|   `-ReturnStmt 0x1903d77b7c0 <line:454:5, col:14>
|     `-ParenExpr 0x1903d77b7a0 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x1903d77b778 <col:13> 'int' 1
|-FunctionDecl 0x1903d77ba00 <line:457:1, line:500:1> line:457:9 invalid BN_bin2bn 'int *(const unsigned char *, int, int *)'
| |-ParmVarDecl 0x1903d77b818 <col:19, col:40> col:40 used s 'const unsigned char *'
| |-ParmVarDecl 0x1903d77b898 <col:43, col:47> col:47 used len 'int'
| |-ParmVarDecl 0x1903d77b918 <col:52, col:60> col:60 invalid ret 'int *'
| `-CompoundStmt 0x1903d776760 <line:458:1, line:500:1>
|   |-DeclStmt 0x1903d77bbe8 <line:459:5, col:22>
|   | |-VarDecl 0x1903d77bae8 <col:5, col:18> col:18 used i 'unsigned int'
|   | `-VarDecl 0x1903d77bb68 <col:5, col:21> col:21 used m 'unsigned int'
|   |-DeclStmt 0x1903d77bc80 <line:460:5, col:19>
|   | `-VarDecl 0x1903d77bc18 <col:5, col:18> col:18 used n 'unsigned int'
|   |-NullStmt 0x1903d77bc98 <line:468:22>
|   |-ForStmt 0x1903d775ed0 <line:470:5, line:471:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1903d775e18 <line:470:13, col:30> 'int' '&&'
|   | | |-BinaryOperator 0x1903d77bd18 <col:13, col:19> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1903d77bd00 <col:13> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1903d77bca0 <col:13> 'int' lvalue ParmVar 0x1903d77b898 'len' 'int'
|   | | | `-IntegerLiteral 0x1903d77bcd8 <col:19> 'int' 0
|   | | `-BinaryOperator 0x1903d775df8 <col:24, col:30> 'int' '=='
|   | |   |-ImplicitCastExpr 0x1903d775de0 <col:24, col:25> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x1903d775dc8 <col:24, col:25> 'unsigned char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x1903d775d88 <col:24, col:25> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x1903d775d70 <col:25> 'const unsigned char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x1903d775d38 <col:25> 'const unsigned char *' lvalue ParmVar 0x1903d77b818 's' 'const unsigned char *'
|   | |   `-IntegerLiteral 0x1903d775da0 <col:30> 'int' 0
|   | |-BinaryOperator 0x1903d775ea8 <col:33, col:41> 'int' ','
|   | | |-UnaryOperator 0x1903d775e58 <col:33, col:34> 'const unsigned char *' postfix '++'
|   | | | `-DeclRefExpr 0x1903d775e38 <col:33> 'const unsigned char *' lvalue ParmVar 0x1903d77b818 's' 'const unsigned char *'
|   | | `-UnaryOperator 0x1903d775e90 <col:38, col:41> 'int' postfix '--'
|   | |   `-DeclRefExpr 0x1903d775e70 <col:38> 'int' lvalue ParmVar 0x1903d77b898 'len' 'int'
|   | `-ContinueStmt 0x1903d775ec8 <line:471:9>
|   |-BinaryOperator 0x1903d775f90 <line:472:5, col:9> 'unsigned int' '='
|   | |-DeclRefExpr 0x1903d775f08 <col:5> 'unsigned int' lvalue Var 0x1903d77bc18 'n' 'unsigned int'
|   | `-ImplicitCastExpr 0x1903d775f78 <col:9> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1903d775f60 <col:9> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1903d775f40 <col:9> 'int' lvalue ParmVar 0x1903d77b898 'len' 'int'
|   |-IfStmt 0x1903d776080 <line:473:5, line:476:5>
|   | |-BinaryOperator 0x1903d776028 <line:473:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x1903d775ff8 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d775fb0 <col:9> 'unsigned int' lvalue Var 0x1903d77bc18 'n' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1903d776010 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1903d775fd0 <col:14> 'int' 0
|   | `-CompoundStmt 0x1903d776070 <col:17, line:476:5>
|   |-IfStmt 0x1903d776360 <line:479:5, line:482:5>
|   | |-OpaqueValueExpr 0x1903d776348 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1903d776338 <line:479:42, line:482:5>
|   `-WhileStmt 0x1903d776638 <line:486:5, line:493:5>
|     |-UnaryOperator 0x1903d776408 <line:486:12, col:13> 'unsigned int' postfix '--'
|     | `-DeclRefExpr 0x1903d7763e8 <col:12> 'unsigned int' lvalue Var 0x1903d77bc18 'n' 'unsigned int'
|     `-CompoundStmt 0x1903d776620 <col:17, line:493:5>
|       `-IfStmt 0x1903d776608 <line:488:9, line:492:9>
|         |-BinaryOperator 0x1903d776530 <line:488:13, col:20> 'int' '=='
|         | |-UnaryOperator 0x1903d7764d8 <col:13, col:14> 'unsigned int' postfix '--'
|         | | `-DeclRefExpr 0x1903d7764b8 <col:13> 'unsigned int' lvalue Var 0x1903d77bb68 'm' 'unsigned int'
|         | `-ImplicitCastExpr 0x1903d776518 <col:20> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x1903d7764f0 <col:20> 'int' 0
|         `-CompoundStmt 0x1903d7765f8 <col:23, line:492:9>
|-FunctionDecl 0x1903d7769e0 <line:503:1, line:543:1> line:503:12 invalid bn2binpad 'int (const int *, unsigned char *, int)' static
| |-ParmVarDecl 0x1903d7767c8 <col:22, col:36> col:36 invalid a 'const int *'
| |-ParmVarDecl 0x1903d776870 <col:39, col:54> col:54 used to 'unsigned char *'
| |-ParmVarDecl 0x1903d7768f0 <col:58, col:62> col:62 used tolen 'int'
| `-CompoundStmt 0x1903d77e0d0 <line:504:1, line:543:1>
|   |-DeclStmt 0x1903d776b30 <line:505:5, col:10>
|   | `-VarDecl 0x1903d776ac8 <col:5, col:9> col:9 used n 'int'
|   |-DeclStmt 0x1903d77ce90 <line:506:5, col:35>
|   | |-VarDecl 0x1903d776b58 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   | |-VarDecl 0x1903d776bd0 <col:5, col:15> col:15 used lasti 'size_t':'unsigned long long'
|   | |-VarDecl 0x1903d776c48 <col:5, col:22> col:22 used j 'size_t':'unsigned long long'
|   | |-VarDecl 0x1903d77cd80 <col:5, col:25> col:25 used atop 'size_t':'unsigned long long'
|   | `-VarDecl 0x1903d77cdf8 <col:5, col:31> col:31 used mask 'size_t':'unsigned long long'
|   |-IfStmt 0x1903d77d348 <line:515:5, line:524:5> has_else
|   | |-BinaryOperator 0x1903d77d080 <line:515:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x1903d77d068 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d77cff0 <col:9> 'int' lvalue ParmVar 0x1903d7768f0 'tolen' 'int'
|   | | `-UnaryOperator 0x1903d77d050 <col:18, col:19> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x1903d77d028 <col:19> 'int' 1
|   | |-CompoundStmt 0x1903d77d118 <col:22, line:517:5>
|   | | `-BinaryOperator 0x1903d77d0f8 <line:516:9, col:17> 'int' '='
|   | |   |-DeclRefExpr 0x1903d77d0a0 <col:9> 'int' lvalue ParmVar 0x1903d7768f0 'tolen' 'int'
|   | |   `-ImplicitCastExpr 0x1903d77d0e0 <col:17> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1903d77d0c0 <col:17> 'int' lvalue Var 0x1903d776ac8 'n' 'int'
|   | `-IfStmt 0x1903d77d330 <line:517:12, line:524:5>
|   |   |-BinaryOperator 0x1903d77d1a0 <line:517:16, col:24> 'int' '<'
|   |   | |-ImplicitCastExpr 0x1903d77d170 <col:16> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1903d77d130 <col:16> 'int' lvalue ParmVar 0x1903d7768f0 'tolen' 'int'
|   |   | `-ImplicitCastExpr 0x1903d77d188 <col:24> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1903d77d150 <col:24> 'int' lvalue Var 0x1903d776ac8 'n' 'int'
|   |   `-CompoundStmt 0x1903d77d318 <col:27, line:524:5>
|   |     `-IfStmt 0x1903d77d300 <line:522:9, line:523:21>
|   |       |-BinaryOperator 0x1903d77d290 <line:522:13, col:21> 'int' '<'
|   |       | |-ImplicitCastExpr 0x1903d77d260 <col:13> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x1903d77d220 <col:13> 'int' lvalue ParmVar 0x1903d7768f0 'tolen' 'int'
|   |       | `-ImplicitCastExpr 0x1903d77d278 <col:21> 'int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1903d77d240 <col:21> 'int' lvalue Var 0x1903d776ac8 'n' 'int'
|   |       `-ReturnStmt 0x1903d77d2f0 <line:523:13, col:21>
|   |         `-UnaryOperator 0x1903d77d2d8 <col:20, col:21> 'int' prefix '-'
|   |           `-IntegerLiteral 0x1903d77d2b0 <col:21> 'int' 1
|   |-IfStmt 0x1903d77d5c8 <line:528:5, line:531:5>
|   | |-BinaryOperator 0x1903d77d420 <line:528:9, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x1903d77d3f0 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d77d3a8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1903d77cd80 'atop' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1903d77d408 <col:17> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1903d77d3c8 <col:17> 'int' 0
|   | `-CompoundStmt 0x1903d77d5a8 <col:20, line:531:5>
|   |   |-CallExpr 0x1903d77d500 <line:529:9, col:34> 'int'
|   |   | |-ImplicitCastExpr 0x1903d77d4e8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1903d77d440 <col:9> 'int ()' Function 0x1903d772b28 'OPENSSL_cleanse' 'int ()'
|   |   | |-ImplicitCastExpr 0x1903d77d530 <col:25> 'unsigned char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1903d77d460 <col:25> 'unsigned char *' lvalue ParmVar 0x1903d776870 'to' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x1903d77d548 <col:29> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1903d77d498 <col:29> 'int' lvalue ParmVar 0x1903d7768f0 'tolen' 'int'
|   |   `-ReturnStmt 0x1903d77d598 <line:530:9, col:16>
|   |     `-ImplicitCastExpr 0x1903d77d580 <col:16> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1903d77d560 <col:16> 'int' lvalue ParmVar 0x1903d7768f0 'tolen' 'int'
|   |-BinaryOperator 0x1903d77d6b0 <line:533:5, col:20> 'size_t':'unsigned long long' '='
|   | |-DeclRefExpr 0x1903d77d5e0 <col:5> 'size_t':'unsigned long long' lvalue Var 0x1903d776bd0 'lasti' 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x1903d77d690 <col:13, col:20> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1903d77d660 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1903d77d618 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1903d77cd80 'atop' 'size_t':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1903d77d678 <col:20> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1903d77d638 <col:20> 'int' 1
|   |-ForStmt 0x1903d77e050 <line:535:5, line:540:5>
|   | |-BinaryOperator 0x1903d77d8c8 <line:535:10, col:30> 'unsigned char *' ','
|   | | |-BinaryOperator 0x1903d77d820 <col:10, col:21> 'size_t':'unsigned long long' ','
|   | | | |-BinaryOperator 0x1903d77d768 <col:10, col:14> 'size_t':'unsigned long long' '='
|   | | | | |-DeclRefExpr 0x1903d77d6f0 <col:10> 'size_t':'unsigned long long' lvalue Var 0x1903d776b58 'i' 'size_t':'unsigned long long'
|   | | | | `-ImplicitCastExpr 0x1903d77d750 <col:14> 'size_t':'unsigned long long' <IntegralCast>
|   | | | |   `-IntegerLiteral 0x1903d77d728 <col:14> 'int' 0
|   | | | `-BinaryOperator 0x1903d77d800 <col:17, col:21> 'size_t':'unsigned long long' '='
|   | | |   |-DeclRefExpr 0x1903d77d788 <col:17> 'size_t':'unsigned long long' lvalue Var 0x1903d776c48 'j' 'size_t':'unsigned long long'
|   | | |   `-ImplicitCastExpr 0x1903d77d7e8 <col:21> 'size_t':'unsigned long long' <IntegralCast>
|   | | |     `-IntegerLiteral 0x1903d77d7c0 <col:21> 'int' 0
|   | | `-CompoundAssignOperator 0x1903d77d898 <col:24, col:30> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |   |-DeclRefExpr 0x1903d77d840 <col:24> 'unsigned char *' lvalue ParmVar 0x1903d776870 'to' 'unsigned char *'
|   | |   `-ImplicitCastExpr 0x1903d77d880 <col:30> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1903d77d860 <col:30> 'int' lvalue ParmVar 0x1903d7768f0 'tolen' 'int'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1903d77d990 <col:37, col:49> 'int' '<'
|   | | |-ImplicitCastExpr 0x1903d77d978 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d77d8e8 <col:37> 'size_t':'unsigned long long' lvalue Var 0x1903d776c48 'j' 'size_t':'unsigned long long'
|   | | `-CStyleCastExpr 0x1903d77d950 <col:41, col:49> 'size_t':'unsigned long long' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x1903d77d938 <col:49> 'int' <LValueToRValue> part_of_explicit_cast
|   | |     `-DeclRefExpr 0x1903d77d908 <col:49> 'int' lvalue ParmVar 0x1903d7768f0 'tolen' 'int'
|   | |-UnaryOperator 0x1903d77d9d0 <col:56, col:57> 'size_t':'unsigned long long' postfix '++'
|   | | `-DeclRefExpr 0x1903d77d9b0 <col:56> 'size_t':'unsigned long long' lvalue Var 0x1903d776c48 'j' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x1903d77e030 <col:61, line:540:5>
|   |   |-BinaryOperator 0x1903d77dcd0 <line:537:9, col:54> 'size_t':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x1903d77da08 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1903d77cdf8 'mask' 'size_t':'unsigned long long'
|   |   | `-BinaryOperator 0x1903d77dcb0 <col:16, col:54> 'unsigned long long' '-'
|   |   |   |-ImplicitCastExpr 0x1903d77dc98 <col:16> 'unsigned long long' <IntegralCast>
|   |   |   | `-IntegerLiteral 0x1903d77da40 <col:16> 'int' 0
|   |   |   `-ParenExpr 0x1903d77dc78 <col:20, col:54> 'unsigned long long'
|   |   |     `-BinaryOperator 0x1903d77dc58 <col:21, col:53> 'unsigned long long' '>>'
|   |   |       |-ParenExpr 0x1903d77daf8 <col:21, col:30> 'unsigned long long'
|   |   |       | `-BinaryOperator 0x1903d77dad8 <col:22, col:26> 'unsigned long long' '-'
|   |   |       |   |-ImplicitCastExpr 0x1903d77daa8 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x1903d77da68 <col:22> 'size_t':'unsigned long long' lvalue Var 0x1903d776c48 'j' 'size_t':'unsigned long long'
|   |   |       |   `-ImplicitCastExpr 0x1903d77dac0 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1903d77da88 <col:26> 'size_t':'unsigned long long' lvalue Var 0x1903d77cd80 'atop' 'size_t':'unsigned long long'
|   |   |       `-ParenExpr 0x1903d77dc38 <col:35, col:53> 'unsigned long long'
|   |   |         `-BinaryOperator 0x1903d77dc18 <col:36, col:52> 'unsigned long long' '-'
|   |   |           |-BinaryOperator 0x1903d77dbb8 <col:36, col:48> 'unsigned long long' '*'
|   |   |           | |-ImplicitCastExpr 0x1903d77dba0 <col:36> 'unsigned long long' <IntegralCast>
|   |   |           | | `-IntegerLiteral 0x1903d77db18 <col:36> 'int' 8
|   |   |           | `-UnaryExprOrTypeTraitExpr 0x1903d77db80 <col:40, col:48> 'unsigned long long' sizeof
|   |   |           |   `-ParenExpr 0x1903d77db60 <col:46, col:48> 'size_t':'unsigned long long' lvalue
|   |   |           |     `-DeclRefExpr 0x1903d77db40 <col:47> 'size_t':'unsigned long long' lvalue Var 0x1903d776b58 'i' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   |   |           `-ImplicitCastExpr 0x1903d77dc00 <col:52> 'unsigned long long' <IntegralCast>
|   |   |             `-IntegerLiteral 0x1903d77dbd8 <col:52> 'int' 1
|   |   `-CompoundAssignOperator 0x1903d77e000 <line:539:9, col:47> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x1903d77ddd0 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1903d776b58 'i' 'size_t':'unsigned long long'
|   |     `-BinaryOperator 0x1903d77dfe0 <col:14, col:47> 'unsigned long long' '>>'
|   |       |-ParenExpr 0x1903d77de80 <col:14, col:24> 'unsigned long long'
|   |       | `-BinaryOperator 0x1903d77de60 <col:15, col:19> 'unsigned long long' '-'
|   |       |   |-ImplicitCastExpr 0x1903d77de30 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1903d77ddf0 <col:15> 'size_t':'unsigned long long' lvalue Var 0x1903d776b58 'i' 'size_t':'unsigned long long'
|   |       |   `-ImplicitCastExpr 0x1903d77de48 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1903d77de10 <col:19> 'size_t':'unsigned long long' lvalue Var 0x1903d776bd0 'lasti' 'size_t':'unsigned long long'
|   |       `-ParenExpr 0x1903d77dfc0 <col:29, col:47> 'unsigned long long'
|   |         `-BinaryOperator 0x1903d77dfa0 <col:30, col:46> 'unsigned long long' '-'
|   |           |-BinaryOperator 0x1903d77df40 <col:30, col:42> 'unsigned long long' '*'
|   |           | |-ImplicitCastExpr 0x1903d77df28 <col:30> 'unsigned long long' <IntegralCast>
|   |           | | `-IntegerLiteral 0x1903d77dea0 <col:30> 'int' 8
|   |           | `-UnaryExprOrTypeTraitExpr 0x1903d77df08 <col:34, col:42> 'unsigned long long' sizeof
|   |           |   `-ParenExpr 0x1903d77dee8 <col:40, col:42> 'size_t':'unsigned long long' lvalue
|   |           |     `-DeclRefExpr 0x1903d77dec8 <col:41> 'size_t':'unsigned long long' lvalue Var 0x1903d776b58 'i' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   |           `-ImplicitCastExpr 0x1903d77df88 <col:46> 'unsigned long long' <IntegralCast>
|   |             `-IntegerLiteral 0x1903d77df60 <col:46> 'int' 1
|   `-ReturnStmt 0x1903d77e0c0 <line:542:5, col:12>
|     `-ImplicitCastExpr 0x1903d77e0a8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1903d77e088 <col:12> 'int' lvalue ParmVar 0x1903d7768f0 'tolen' 'int'
|-FunctionDecl 0x1903d77e2d8 <line:545:1, line:550:1> line:545:5 invalid BN_bn2binpad 'int (const int *, unsigned char *, int)'
| |-ParmVarDecl 0x1903d77e130 <col:18, col:32> col:32 invalid a 'const int *'
| |-ParmVarDecl 0x1903d77e1b0 <col:35, col:50> col:50 used to 'unsigned char *'
| |-ParmVarDecl 0x1903d77e230 <col:54, col:58> col:58 used tolen 'int'
| `-CompoundStmt 0x1903d77e500 <line:546:1, line:550:1>
|   `-IfStmt 0x1903d77e490 <line:547:5, line:548:17>
|     |-BinaryOperator 0x1903d77e420 <line:547:9, col:17> 'int' '<'
|     | |-ImplicitCastExpr 0x1903d77e408 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1903d77e3a8 <col:9> 'int' lvalue ParmVar 0x1903d77e230 'tolen' 'int'
|     | `-IntegerLiteral 0x1903d77e3e0 <col:17> 'int' 0
|     `-ReturnStmt 0x1903d77e480 <line:548:9, col:17>
|       `-UnaryOperator 0x1903d77e468 <col:16, col:17> 'int' prefix '-'
|         `-IntegerLiteral 0x1903d77e440 <col:17> 'int' 1
|-FunctionDecl 0x1903d77e690 <line:552:1, line:555:1> line:552:5 invalid BN_bn2bin 'int (const int *, unsigned char *)'
| |-ParmVarDecl 0x1903d77e530 <col:15, col:29> col:29 invalid a 'const int *'
| |-ParmVarDecl 0x1903d77e5b0 <col:32, col:47> col:47 used to 'unsigned char *'
| `-CompoundStmt 0x1903d77e7d0 <line:553:1, line:555:1>
|-FunctionDecl 0x1903d77e9a0 <line:557:1, line:602:1> line:557:9 invalid BN_lebin2bn 'int *(const unsigned char *, int, int *)'
| |-ParmVarDecl 0x1903d77e7f8 <col:21, col:42> col:42 used s 'const unsigned char *'
| |-ParmVarDecl 0x1903d77e878 <col:45, col:49> col:49 used len 'int'
| |-ParmVarDecl 0x1903d77e8f8 <col:54, col:62> col:62 invalid ret 'int *'
| `-CompoundStmt 0x1903d7776a8 <line:558:1, line:602:1>
|   |-DeclStmt 0x1903d77eb88 <line:559:5, col:22>
|   | |-VarDecl 0x1903d77ea88 <col:5, col:18> col:18 used i 'unsigned int'
|   | `-VarDecl 0x1903d77eb08 <col:5, col:21> col:21 used m 'unsigned int'
|   |-DeclStmt 0x1903d77ec20 <line:560:5, col:19>
|   | `-VarDecl 0x1903d77ebb8 <col:5, col:18> col:18 used n 'unsigned int'
|   |-NullStmt 0x1903d77ec38 <line:568:22>
|   |-CompoundAssignOperator 0x1903d77ecc8 <line:569:5, col:10> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   | |-DeclRefExpr 0x1903d77ec40 <col:5> 'const unsigned char *' lvalue ParmVar 0x1903d77e7f8 's' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x1903d77ecb0 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1903d77ec78 <col:10> 'int' lvalue ParmVar 0x1903d77e878 'len' 'int'
|   |-ForStmt 0x1903d776ee8 <line:571:5, line:572:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1903d776e30 <line:571:13, col:33> 'int' '&&'
|   | | |-BinaryOperator 0x1903d77ed58 <col:13, col:19> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1903d77ed40 <col:13> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1903d77ecf8 <col:13> 'int' lvalue ParmVar 0x1903d77e878 'len' 'int'
|   | | | `-IntegerLiteral 0x1903d77ed18 <col:19> 'int' 0
|   | | `-BinaryOperator 0x1903d776e10 <col:24, col:33> 'int' '=='
|   | |   |-ImplicitCastExpr 0x1903d776df8 <col:24, col:28> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x1903d776de0 <col:24, col:28> 'unsigned char' <LValueToRValue>
|   | |   |   `-ArraySubscriptExpr 0x1903d776d98 <col:24, col:28> 'const unsigned char' lvalue
|   | |   |     |-ImplicitCastExpr 0x1903d776d80 <col:24> 'const unsigned char *' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x1903d776d20 <col:24> 'const unsigned char *' lvalue ParmVar 0x1903d77e7f8 's' 'const unsigned char *'
|   | |   |     `-UnaryOperator 0x1903d776d68 <col:26, col:27> 'int' prefix '-'
|   | |   |       `-IntegerLiteral 0x1903d776d40 <col:27> 'int' 1
|   | |   `-IntegerLiteral 0x1903d776db8 <col:33> 'int' 0
|   | |-BinaryOperator 0x1903d776ec0 <col:36, col:44> 'int' ','
|   | | |-UnaryOperator 0x1903d776e70 <col:36, col:37> 'const unsigned char *' postfix '--'
|   | | | `-DeclRefExpr 0x1903d776e50 <col:36> 'const unsigned char *' lvalue ParmVar 0x1903d77e7f8 's' 'const unsigned char *'
|   | | `-UnaryOperator 0x1903d776ea8 <col:41, col:44> 'int' postfix '--'
|   | |   `-DeclRefExpr 0x1903d776e88 <col:41> 'int' lvalue ParmVar 0x1903d77e878 'len' 'int'
|   | `-ContinueStmt 0x1903d776ee0 <line:572:9>
|   |-BinaryOperator 0x1903d776fa8 <line:573:5, col:9> 'unsigned int' '='
|   | |-DeclRefExpr 0x1903d776f20 <col:5> 'unsigned int' lvalue Var 0x1903d77ebb8 'n' 'unsigned int'
|   | `-ImplicitCastExpr 0x1903d776f90 <col:9> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1903d776f78 <col:9> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1903d776f58 <col:9> 'int' lvalue ParmVar 0x1903d77e878 'len' 'int'
|   |-IfStmt 0x1903d777098 <line:574:5, line:577:5>
|   | |-BinaryOperator 0x1903d777040 <line:574:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x1903d777010 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d776fc8 <col:9> 'unsigned int' lvalue Var 0x1903d77ebb8 'n' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1903d777028 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1903d776fe8 <col:14> 'int' 0
|   | `-CompoundStmt 0x1903d777088 <col:17, line:577:5>
|   |-IfStmt 0x1903d777378 <line:580:5, line:583:5>
|   | |-OpaqueValueExpr 0x1903d777360 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1903d777350 <line:580:42, line:583:5>
|   `-WhileStmt 0x1903d777670 <line:587:5, line:595:5>
|     |-UnaryOperator 0x1903d777420 <line:587:12, col:13> 'unsigned int' postfix '--'
|     | `-DeclRefExpr 0x1903d777400 <col:12> 'unsigned int' lvalue Var 0x1903d77ebb8 'n' 'unsigned int'
|     `-CompoundStmt 0x1903d777650 <col:17, line:595:5>
|       |-UnaryOperator 0x1903d777458 <line:588:9, col:10> 'const unsigned char *' postfix '--'
|       | `-DeclRefExpr 0x1903d777438 <col:9> 'const unsigned char *' lvalue ParmVar 0x1903d77e7f8 's' 'const unsigned char *'
|       `-IfStmt 0x1903d777638 <line:590:9, line:594:9>
|         |-BinaryOperator 0x1903d777560 <line:590:13, col:20> 'int' '=='
|         | |-UnaryOperator 0x1903d777508 <col:13, col:14> 'unsigned int' postfix '--'
|         | | `-DeclRefExpr 0x1903d7774e8 <col:13> 'unsigned int' lvalue Var 0x1903d77eb08 'm' 'unsigned int'
|         | `-ImplicitCastExpr 0x1903d777548 <col:20> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x1903d777520 <col:20> 'int' 0
|         `-CompoundStmt 0x1903d777628 <col:23, line:594:9>
|-FunctionDecl 0x1903d7778c0 <line:604:1, line:622:1> line:604:5 invalid BN_bn2lebinpad 'int (const int *, unsigned char *, int)'
| |-ParmVarDecl 0x1903d777718 <col:20, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x1903d777798 <col:37, col:52> col:52 used to 'unsigned char *'
| |-ParmVarDecl 0x1903d777818 <col:56, col:60> col:60 used tolen 'int'
| `-CompoundStmt 0x1903d77f3a0 <line:605:1, line:622:1>
|   |-DeclStmt 0x1903d777a10 <line:606:5, col:10>
|   | `-VarDecl 0x1903d7779a8 <col:5, col:9> col:9 used i 'int'
|   |-NullStmt 0x1903d777a28 <line:608:20>
|   |-IfStmt 0x1903d777b80 <line:610:5, line:611:17>
|   | |-BinaryOperator 0x1903d777b10 <line:610:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x1903d777ae0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d777a88 <col:9> 'int' lvalue ParmVar 0x1903d777818 'tolen' 'int'
|   | | `-ImplicitCastExpr 0x1903d777af8 <col:17> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1903d777ac0 <col:17> 'int' lvalue Var 0x1903d7779a8 'i' 'int'
|   | `-ReturnStmt 0x1903d777b70 <line:611:9, col:17>
|   |   `-UnaryOperator 0x1903d777b58 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1903d777b30 <col:17> 'int' 1
|   |-IfStmt 0x1903d77f138 <line:613:5, line:614:36>
|   | |-BinaryOperator 0x1903d777c08 <line:613:9, col:17> 'int' '>'
|   | | |-ImplicitCastExpr 0x1903d777bd8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d777b98 <col:9> 'int' lvalue ParmVar 0x1903d777818 'tolen' 'int'
|   | | `-ImplicitCastExpr 0x1903d777bf0 <col:17> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1903d777bb8 <col:17> 'int' lvalue Var 0x1903d7779a8 'i' 'int'
|   | `-CallExpr 0x1903d77f0d0 <line:614:9, col:36> 'void *'
|   |   |-ImplicitCastExpr 0x1903d77f0b8 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1903d77eef0 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1903d777c70 'memset' 'void *(void *, int, unsigned long long)'
|   |   |-ImplicitCastExpr 0x1903d77f108 <col:16, col:21> 'void *' <BitCast>
|   |   | `-BinaryOperator 0x1903d77efb0 <col:16, col:21> 'unsigned char *' '+'
|   |   |   |-ImplicitCastExpr 0x1903d77ef80 <col:16> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1903d77ef28 <col:16> 'unsigned char *' lvalue ParmVar 0x1903d777798 'to' 'unsigned char *'
|   |   |   `-ImplicitCastExpr 0x1903d77ef98 <col:21> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1903d77ef60 <col:21> 'int' lvalue Var 0x1903d7779a8 'i' 'int'
|   |   |-IntegerLiteral 0x1903d77efd0 <col:24> 'int' 0
|   |   `-ImplicitCastExpr 0x1903d77f120 <col:27, col:35> 'unsigned long long' <IntegralCast>
|   |     `-BinaryOperator 0x1903d77f068 <col:27, col:35> 'int' '-'
|   |       |-ImplicitCastExpr 0x1903d77f038 <col:27> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1903d77eff8 <col:27> 'int' lvalue ParmVar 0x1903d777818 'tolen' 'int'
|   |       `-ImplicitCastExpr 0x1903d77f050 <col:35> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1903d77f018 <col:35> 'int' lvalue Var 0x1903d7779a8 'i' 'int'
|   |-CompoundAssignOperator 0x1903d77f1a8 <line:615:5, col:11> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |-DeclRefExpr 0x1903d77f150 <col:5> 'unsigned char *' lvalue ParmVar 0x1903d777798 'to' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1903d77f190 <col:11> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1903d77f170 <col:11> 'int' lvalue Var 0x1903d7779a8 'i' 'int'
|   |-WhileStmt 0x1903d77f340 <line:616:5, line:620:5>
|   | |-UnaryOperator 0x1903d77f1f8 <line:616:12, col:13> 'int' postfix '--'
|   | | `-DeclRefExpr 0x1903d77f1d8 <col:12> 'int' lvalue Var 0x1903d7779a8 'i' 'int'
|   | `-CompoundStmt 0x1903d77f328 <col:17, line:620:5>
|   |   `-UnaryOperator 0x1903d77f250 <line:618:9, col:11> 'unsigned char *' postfix '--'
|   |     `-DeclRefExpr 0x1903d77f230 <col:9> 'unsigned char *' lvalue ParmVar 0x1903d777798 'to' 'unsigned char *'
|   `-ReturnStmt 0x1903d77f390 <line:621:5, col:12>
|     `-ImplicitCastExpr 0x1903d77f378 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1903d77f358 <col:12> 'int' lvalue ParmVar 0x1903d777818 'tolen' 'int'
|-FunctionDecl 0x1903d777c70 <line:614:9> col:9 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1903d77eda0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1903d77ee08 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1903d77ee70 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1903d77f560 <line:624:1, line:644:1> line:624:5 invalid BN_ucmp 'int (const int *, const int *)'
| |-ParmVarDecl 0x1903d77f400 <col:13, col:27> col:27 invalid a 'const int *'
| |-ParmVarDecl 0x1903d77f480 <col:30, col:44> col:44 invalid b 'const int *'
| `-CompoundStmt 0x1903d77fa50 <line:625:1, line:644:1>
|   |-DeclStmt 0x1903d77f6a8 <line:626:5, col:10>
|   | `-VarDecl 0x1903d77f640 <col:5, col:9> col:9 used i 'int'
|   |-NullStmt 0x1903d77f6c0 <line:629:20>
|   |-NullStmt 0x1903d77f6c8 <line:630:20>
|   |-IfStmt 0x1903d77f7f0 <line:633:5, line:634:18>
|   | |-BinaryOperator 0x1903d77f768 <line:633:9, col:14> 'int' '!='
|   | | |-ImplicitCastExpr 0x1903d77f750 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d77f708 <col:9> 'int' lvalue Var 0x1903d77f640 'i' 'int'
|   | | `-IntegerLiteral 0x1903d77f728 <col:14> 'int' 0
|   | `-ReturnStmt 0x1903d77f7e0 <line:634:9, col:18>
|   |   `-ImplicitCastExpr 0x1903d77f7c8 <col:16, col:18> 'int' <LValueToRValue>
|   |     `-ParenExpr 0x1903d77f7a8 <col:16, col:18> 'int' lvalue
|   |       `-DeclRefExpr 0x1903d77f788 <col:17> 'int' lvalue Var 0x1903d77f640 'i' 'int'
|   |-ForStmt 0x1903d77f9c0 <line:637:5, line:642:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1903d77f8b0 <line:637:26, col:31> 'int' '>='
|   | | |-ImplicitCastExpr 0x1903d77f898 <col:26> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d77f850 <col:26> 'int' lvalue Var 0x1903d77f640 'i' 'int'
|   | | `-IntegerLiteral 0x1903d77f870 <col:31> 'int' 0
|   | |-UnaryOperator 0x1903d77f8f0 <col:34, col:35> 'int' postfix '--'
|   | | `-DeclRefExpr 0x1903d77f8d0 <col:34> 'int' lvalue Var 0x1903d77f640 'i' 'int'
|   | `-CompoundStmt 0x1903d77f9b0 <col:39, line:642:5>
|   `-ReturnStmt 0x1903d77fa40 <line:643:5, col:14>
|     `-ParenExpr 0x1903d77fa20 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x1903d77f9f8 <col:13> 'int' 0
|-FunctionDecl 0x1903d77fbc8 <line:646:1, line:691:1> line:646:5 invalid BN_cmp 'int (const int *, const int *)'
| |-ParmVarDecl 0x1903d77faa8 <col:12, col:26> col:26 invalid a 'const int *'
| |-ParmVarDecl 0x1903d77fb28 <col:29, col:43> col:43 invalid b 'const int *'
| `-CompoundStmt 0x1903d77c8e0 <line:647:1, line:691:1>
|   |-DeclStmt 0x1903d77fd10 <line:648:5, col:10>
|   | `-VarDecl 0x1903d77fca8 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x1903d77be70 <line:649:5, col:15>
|   | |-VarDecl 0x1903d77bd70 <col:5, col:9> col:9 used gt 'int'
|   | `-VarDecl 0x1903d77bdf0 <col:5, col:13> col:13 used lt 'int'
|   |-IfStmt 0x1903d77c058 <line:652:5, line:659:5>
|   | |-OpaqueValueExpr 0x1903d77c040 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1903d77c028 <line:652:37, line:659:5>
|   |   `-IfStmt 0x1903d77c000 <line:653:9, line:658:22> has_else
|   |     |-OpaqueValueExpr 0x1903d77bfe8 <<invalid sloc>> '_Bool'
|   |     |-ReturnStmt 0x1903d77bee8 <line:654:13, col:23>
|   |     | `-ParenExpr 0x1903d77bec8 <col:20, col:23> 'int'
|   |     |   `-UnaryOperator 0x1903d77beb0 <col:21, col:22> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x1903d77be88 <col:22> 'int' 1
|   |     `-IfStmt 0x1903d77bfc0 <line:655:14, line:658:22> has_else
|   |       |-OpaqueValueExpr 0x1903d77bfa8 <<invalid sloc>> '_Bool'
|   |       |-ReturnStmt 0x1903d77bf40 <line:656:13, col:22>
|   |       | `-ParenExpr 0x1903d77bf20 <col:20, col:22> 'int'
|   |       |   `-IntegerLiteral 0x1903d77bef8 <col:21> 'int' 1
|   |       `-ReturnStmt 0x1903d77bf98 <line:658:13, col:22>
|   |         `-ParenExpr 0x1903d77bf78 <col:20, col:22> 'int'
|   |           `-IntegerLiteral 0x1903d77bf50 <col:21> 'int' 0
|   |-NullStmt 0x1903d77c070 <line:661:20>
|   |-NullStmt 0x1903d77c078 <line:662:20>
|   |-IfStmt 0x1903d77c1b8 <line:664:5, line:669:5>
|   | |-OpaqueValueExpr 0x1903d77c1a0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1903d77c188 <line:664:27, line:669:5>
|   |   `-IfStmt 0x1903d77c160 <line:665:9, line:668:22> has_else
|   |     |-OpaqueValueExpr 0x1903d77c148 <<invalid sloc>> '_Bool'
|   |     |-ReturnStmt 0x1903d77c0e0 <line:666:13, col:23>
|   |     | `-ParenExpr 0x1903d77c0c0 <col:20, col:23> 'int'
|   |     |   `-UnaryOperator 0x1903d77c0a8 <col:21, col:22> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x1903d77c080 <col:22> 'int' 1
|   |     `-ReturnStmt 0x1903d77c138 <line:668:13, col:22>
|   |       `-ParenExpr 0x1903d77c118 <col:20, col:22> 'int'
|   |         `-IntegerLiteral 0x1903d77c0f0 <col:21> 'int' 1
|   |-IfStmt 0x1903d77c450 <line:670:5, line:676:5> has_else
|   | |-OpaqueValueExpr 0x1903d77c438 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1903d77c310 <line:670:22, line:673:5>
|   | | |-BinaryOperator 0x1903d77c258 <line:671:9, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x1903d77c1f8 <col:9> 'int' lvalue Var 0x1903d77bd70 'gt' 'int'
|   | | | `-IntegerLiteral 0x1903d77c230 <col:14> 'int' 1
|   | | `-BinaryOperator 0x1903d77c2f0 <line:672:9, col:15> 'int' '='
|   | |   |-DeclRefExpr 0x1903d77c278 <col:9> 'int' lvalue Var 0x1903d77bdf0 'lt' 'int'
|   | |   `-UnaryOperator 0x1903d77c2d8 <col:14, col:15> 'int' prefix '-'
|   | |     `-IntegerLiteral 0x1903d77c2b0 <col:15> 'int' 1
|   | `-CompoundStmt 0x1903d77c418 <line:673:12, line:676:5>
|   |   |-BinaryOperator 0x1903d77c390 <line:674:9, col:15> 'int' '='
|   |   | |-DeclRefExpr 0x1903d77c330 <col:9> 'int' lvalue Var 0x1903d77bd70 'gt' 'int'
|   |   | `-UnaryOperator 0x1903d77c378 <col:14, col:15> 'int' prefix '-'
|   |   |   `-IntegerLiteral 0x1903d77c350 <col:15> 'int' 1
|   |   `-BinaryOperator 0x1903d77c3f8 <line:675:9, col:14> 'int' '='
|   |     |-DeclRefExpr 0x1903d77c3b0 <col:9> 'int' lvalue Var 0x1903d77bdf0 'lt' 'int'
|   |     `-IntegerLiteral 0x1903d77c3d0 <col:14> 'int' 1
|   |-IfStmt 0x1903d77c4f8 <line:678:5, line:679:19>
|   | |-OpaqueValueExpr 0x1903d77c4e0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1903d77c4d0 <col:9, col:19>
|   |   `-ImplicitCastExpr 0x1903d77c4b8 <col:16, col:19> 'int' <LValueToRValue>
|   |     `-ParenExpr 0x1903d77c498 <col:16, col:19> 'int' lvalue
|   |       `-DeclRefExpr 0x1903d77c478 <col:17> 'int' lvalue Var 0x1903d77bd70 'gt' 'int'
|   |-IfStmt 0x1903d77c590 <line:680:5, line:681:19>
|   | |-OpaqueValueExpr 0x1903d77c578 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1903d77c568 <col:9, col:19>
|   |   `-ImplicitCastExpr 0x1903d77c550 <col:16, col:19> 'int' <LValueToRValue>
|   |     `-ParenExpr 0x1903d77c530 <col:16, col:19> 'int' lvalue
|   |       `-DeclRefExpr 0x1903d77c510 <col:17> 'int' lvalue Var 0x1903d77bdf0 'lt' 'int'
|   |-ForStmt 0x1903d77c850 <line:682:5, line:689:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1903d77c668 <line:682:26, col:31> 'int' '>='
|   | | |-ImplicitCastExpr 0x1903d77c650 <col:26> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d77c608 <col:26> 'int' lvalue Var 0x1903d77fca8 'i' 'int'
|   | | `-IntegerLiteral 0x1903d77c628 <col:31> 'int' 0
|   | |-UnaryOperator 0x1903d77c6a8 <col:34, col:35> 'int' postfix '--'
|   | | `-DeclRefExpr 0x1903d77c688 <col:34> 'int' lvalue Var 0x1903d77fca8 'i' 'int'
|   | `-CompoundStmt 0x1903d77c830 <col:39, line:689:5>
|   |   |-IfStmt 0x1903d77c780 <line:685:9, line:686:23>
|   |   | |-OpaqueValueExpr 0x1903d77c768 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x1903d77c758 <col:13, col:23>
|   |   |   `-ImplicitCastExpr 0x1903d77c740 <col:20, col:23> 'int' <LValueToRValue>
|   |   |     `-ParenExpr 0x1903d77c720 <col:20, col:23> 'int' lvalue
|   |   |       `-DeclRefExpr 0x1903d77c700 <col:21> 'int' lvalue Var 0x1903d77bd70 'gt' 'int'
|   |   `-IfStmt 0x1903d77c818 <line:687:9, line:688:23>
|   |     |-OpaqueValueExpr 0x1903d77c800 <<invalid sloc>> '_Bool'
|   |     `-ReturnStmt 0x1903d77c7f0 <col:13, col:23>
|   |       `-ImplicitCastExpr 0x1903d77c7d8 <col:20, col:23> 'int' <LValueToRValue>
|   |         `-ParenExpr 0x1903d77c7b8 <col:20, col:23> 'int' lvalue
|   |           `-DeclRefExpr 0x1903d77c798 <col:21> 'int' lvalue Var 0x1903d77bdf0 'lt' 'int'
|   `-ReturnStmt 0x1903d77c8d0 <line:690:5, col:14>
|     `-ParenExpr 0x1903d77c8b0 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x1903d77c888 <col:13> 'int' 0
|-FunctionDecl 0x1903d77ca80 <line:693:1, line:714:1> line:693:5 invalid BN_set_bit 'int (int *, int)'
| |-ParmVarDecl 0x1903d77c960 <col:16, col:24> col:24 invalid a 'int *'
| |-ParmVarDecl 0x1903d77c9e0 <col:27, col:31> col:31 used n 'int'
| `-CompoundStmt 0x1903d7782e8 <line:694:1, line:714:1>
|   |-DeclStmt 0x1903d77cce8 <line:695:5, col:16>
|   | |-VarDecl 0x1903d77cb60 <col:5, col:9> col:9 used i 'int'
|   | |-VarDecl 0x1903d77cbe0 <col:5, col:12> col:12 used j 'int'
|   | `-VarDecl 0x1903d77cc60 <col:5, col:15> col:15 used k 'int'
|   |-IfStmt 0x1903d777da0 <line:697:5, line:698:16>
|   | |-BinaryOperator 0x1903d777d48 <line:697:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x1903d777d30 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d77cd00 <col:9> 'int' lvalue ParmVar 0x1903d77c9e0 'n' 'int'
|   | | `-IntegerLiteral 0x1903d77cd38 <col:13> 'int' 0
|   | `-ReturnStmt 0x1903d777d90 <line:698:9, col:16>
|   |   `-IntegerLiteral 0x1903d777d68 <col:16> 'int' 0
|   |-IfStmt 0x1903d778230 <line:702:5, line:709:5>
|   | |-OpaqueValueExpr 0x1903d778218 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1903d778200 <line:702:22, line:709:5>
|   |   `-IfStmt 0x1903d777f98 <line:703:9, line:704:22>
|   |     |-OpaqueValueExpr 0x1903d777f80 <<invalid sloc>> '_Bool'
|   |     `-ReturnStmt 0x1903d777f70 <col:13, col:22>
|   |       `-ParenExpr 0x1903d777f50 <col:20, col:22> 'int'
|   |         `-IntegerLiteral 0x1903d777f28 <col:21> 'int' 0
|   |-NullStmt 0x1903d778288 <line:712:20>
|   `-ReturnStmt 0x1903d7782d8 <line:713:5, col:14>
|     `-ParenExpr 0x1903d7782b8 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x1903d778290 <col:13> 'int' 1
|-FunctionDecl 0x1903d778458 <line:716:1, line:732:1> line:716:5 invalid BN_clear_bit 'int (int *, int)'
| |-ParmVarDecl 0x1903d778338 <col:18, col:26> col:26 invalid a 'int *'
| |-ParmVarDecl 0x1903d7783b8 <col:29, col:33> col:33 used n 'int'
| `-CompoundStmt 0x1903d778950 <line:717:1, line:732:1>
|   |-DeclStmt 0x1903d778638 <line:718:5, col:13>
|   | |-VarDecl 0x1903d778538 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x1903d7785b8 <col:5, col:12> col:12 used j 'int'
|   |-NullStmt 0x1903d778650 <line:720:20>
|   |-IfStmt 0x1903d778728 <line:721:5, line:722:16>
|   | |-BinaryOperator 0x1903d7786d0 <line:721:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x1903d7786b8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d778658 <col:9> 'int' lvalue ParmVar 0x1903d7783b8 'n' 'int'
|   | | `-IntegerLiteral 0x1903d778690 <col:13> 'int' 0
|   | `-ReturnStmt 0x1903d778718 <line:722:9, col:16>
|   |   `-IntegerLiteral 0x1903d7786f0 <col:16> 'int' 0
|   |-IfStmt 0x1903d778880 <line:726:5, line:727:18>
|   | |-OpaqueValueExpr 0x1903d778868 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1903d778858 <col:9, col:18>
|   |   `-ParenExpr 0x1903d778838 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x1903d778810 <col:17> 'int' 0
|   `-ReturnStmt 0x1903d778940 <line:731:5, col:14>
|     `-ParenExpr 0x1903d778920 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x1903d7788f8 <col:13> 'int' 1
|-FunctionDecl 0x1903d778b00 <line:734:1, line:746:1> line:734:5 invalid BN_is_bit_set 'int (const int *, int)'
| |-ParmVarDecl 0x1903d7789a0 <col:19, col:33> col:33 invalid a 'const int *'
| |-ParmVarDecl 0x1903d778a20 <col:36, col:40> col:40 used n 'int'
| `-CompoundStmt 0x1903d77fff0 <line:735:1, line:746:1>
|   |-DeclStmt 0x1903d778ce0 <line:736:5, col:13>
|   | |-VarDecl 0x1903d778be0 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x1903d778c60 <col:5, col:12> col:12 used j 'int'
|   |-NullStmt 0x1903d778cf8 <line:738:20>
|   |-IfStmt 0x1903d77fe60 <line:739:5, line:740:16>
|   | |-BinaryOperator 0x1903d77fe08 <line:739:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x1903d77fdf0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d778d00 <col:9> 'int' lvalue ParmVar 0x1903d778a20 'n' 'int'
|   | | `-IntegerLiteral 0x1903d77fdc8 <col:13> 'int' 0
|   | `-ReturnStmt 0x1903d77fe50 <line:740:9, col:16>
|   |   `-IntegerLiteral 0x1903d77fe28 <col:16> 'int' 0
|   `-IfStmt 0x1903d77ff98 <line:743:5, line:744:16>
|     |-OpaqueValueExpr 0x1903d77ff80 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x1903d77ff70 <col:9, col:16>
|       `-IntegerLiteral 0x1903d77ff48 <col:16> 'int' 0
|-FunctionDecl 0x1903d780158 <line:748:1, line:768:1> line:748:5 invalid BN_mask_bits 'int (int *, int)'
| |-ParmVarDecl 0x1903d780038 <col:18, col:26> col:26 invalid a 'int *'
| |-ParmVarDecl 0x1903d7800b8 <col:29, col:33> col:33 used n 'int'
| `-CompoundStmt 0x1903d780790 <line:749:1, line:768:1>
|   |-DeclStmt 0x1903d780338 <line:750:5, col:13>
|   | |-VarDecl 0x1903d780238 <col:5, col:9> col:9 used b 'int'
|   | `-VarDecl 0x1903d7802b8 <col:5, col:12> col:12 used w 'int'
|   |-NullStmt 0x1903d780350 <line:752:20>
|   |-IfStmt 0x1903d780428 <line:753:5, line:754:16>
|   | |-BinaryOperator 0x1903d7803d0 <line:753:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x1903d7803b8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d780358 <col:9> 'int' lvalue ParmVar 0x1903d7800b8 'n' 'int'
|   | | `-IntegerLiteral 0x1903d780390 <col:13> 'int' 0
|   | `-ReturnStmt 0x1903d780418 <line:754:9, col:16>
|   |   `-IntegerLiteral 0x1903d7803f0 <col:16> 'int' 0
|   |-IfStmt 0x1903d780560 <line:758:5, line:759:16>
|   | |-OpaqueValueExpr 0x1903d780548 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1903d780538 <col:9, col:16>
|   |   `-IntegerLiteral 0x1903d780510 <col:16> 'int' 0
|   |-IfStmt 0x1903d7806f0 <line:760:5, line:765:5> has_else
|   | |-BinaryOperator 0x1903d7805d8 <line:760:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x1903d7805c0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d780578 <col:9> 'int' lvalue Var 0x1903d780238 'b' 'int'
|   | | `-IntegerLiteral 0x1903d780598 <col:14> 'int' 0
|   | |-NullStmt 0x1903d7806e8 <line:761:9>
|   | `-CompoundStmt 0x1903d7806d8 <line:762:10, line:765:5>
|   `-ReturnStmt 0x1903d780780 <line:767:5, col:14>
|     `-ParenExpr 0x1903d780760 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x1903d780738 <col:13> 'int' 1
|-FunctionDecl 0x1903d780938 <line:770:1, line:776:1> line:770:6 invalid BN_set_negative 'void (int *, int)'
| |-ParmVarDecl 0x1903d7807e8 <col:22, col:30> col:30 invalid a 'int *'
| |-ParmVarDecl 0x1903d780868 <col:33, col:37> col:37 used b 'int'
| `-CompoundStmt 0x1903d780aa8 <line:771:1, line:776:1>
|-FunctionDecl 0x1903d780c78 <line:778:1, line:797:1> line:778:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x1903d780ad0 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x1903d780b50 <col:37, col:53> col:53 invalid b 'const int *'
| |-ParmVarDecl 0x1903d780bd0 <col:56, col:60> col:60 used n 'int'
| `-CompoundStmt 0x1903d7792e8 <line:779:1, line:797:1>
|   |-DeclStmt 0x1903d778da8 <line:780:5, col:10>
|   | `-VarDecl 0x1903d778d40 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x1903d778e90 <line:783:5, line:784:16>
|   | |-BinaryOperator 0x1903d778e38 <line:783:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x1903d778e20 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d778dc0 <col:9> 'int' lvalue ParmVar 0x1903d780bd0 'n' 'int'
|   | | `-IntegerLiteral 0x1903d778df8 <col:14> 'int' 0
|   | `-ReturnStmt 0x1903d778e80 <line:784:9, col:16>
|   |   `-IntegerLiteral 0x1903d778e58 <col:16> 'int' 0
|   |-ForStmt 0x1903d779258 <line:790:5, line:795:5>
|   | |-BinaryOperator 0x1903d7790c8 <line:790:10, col:18> 'int' '='
|   | | |-DeclRefExpr 0x1903d779010 <col:10> 'int' lvalue Var 0x1903d778d40 'i' 'int'
|   | | `-BinaryOperator 0x1903d7790a8 <col:14, col:18> 'int' '-'
|   | |   |-ImplicitCastExpr 0x1903d779090 <col:14> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1903d779048 <col:14> 'int' lvalue ParmVar 0x1903d780bd0 'n' 'int'
|   | |   `-IntegerLiteral 0x1903d779068 <col:18> 'int' 2
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1903d779148 <col:21, col:26> 'int' '>='
|   | | |-ImplicitCastExpr 0x1903d779130 <col:21> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d7790e8 <col:21> 'int' lvalue Var 0x1903d778d40 'i' 'int'
|   | | `-IntegerLiteral 0x1903d779108 <col:26> 'int' 0
|   | |-UnaryOperator 0x1903d779188 <col:29, col:30> 'int' postfix '--'
|   | | `-DeclRefExpr 0x1903d779168 <col:29> 'int' lvalue Var 0x1903d778d40 'i' 'int'
|   | `-CompoundStmt 0x1903d779248 <col:34, line:795:5>
|   `-ReturnStmt 0x1903d7792d8 <line:796:5, col:14>
|     `-ParenExpr 0x1903d7792b8 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x1903d779290 <col:13> 'int' 0
|-FunctionDecl 0x1903d779560 <line:808:1, line:826:1> line:808:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x1903d779330 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x1903d7793b0 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x1903d779430 <col:61, col:65> col:65 used cl 'int'
| |-ParmVarDecl 0x1903d7794b0 <col:69, col:73> col:73 used dl 'int'
| `-CompoundStmt 0x1903d787050 <line:809:1, line:826:1>
|   |-DeclStmt 0x1903d779750 <line:810:5, col:13>
|   | |-VarDecl 0x1903d779650 <col:5, col:9> col:9 used n 'int'
|   | `-VarDecl 0x1903d7796d0 <col:5, col:12> col:12 used i 'int'
|   |-BinaryOperator 0x1903d779838 <line:811:5, col:14> 'int' '='
|   | |-DeclRefExpr 0x1903d779768 <col:5> 'int' lvalue Var 0x1903d779650 'n' 'int'
|   | `-BinaryOperator 0x1903d779818 <col:9, col:14> 'int' '-'
|   |   |-ImplicitCastExpr 0x1903d779800 <col:9> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1903d7797a0 <col:9> 'int' lvalue ParmVar 0x1903d779430 'cl' 'int'
|   |   `-IntegerLiteral 0x1903d7797d8 <col:14> 'int' 1
|   |-IfStmt 0x1903d779bd8 <line:813:5, line:818:5>
|   | |-BinaryOperator 0x1903d7798d0 <line:813:9, col:14> 'int' '<'
|   | | |-ImplicitCastExpr 0x1903d7798b8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d779858 <col:9> 'int' lvalue ParmVar 0x1903d7794b0 'dl' 'int'
|   | | `-IntegerLiteral 0x1903d779890 <col:14> 'int' 0
|   | `-CompoundStmt 0x1903d779bc0 <col:17, line:818:5>
|   |   `-ForStmt 0x1903d779b88 <line:814:9, line:817:9>
|   |     |-BinaryOperator 0x1903d779960 <line:814:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x1903d7798f0 <col:14> 'int' lvalue Var 0x1903d7796d0 'i' 'int'
|   |     | `-ImplicitCastExpr 0x1903d779948 <col:18> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1903d779928 <col:18> 'int' lvalue ParmVar 0x1903d7794b0 'dl' 'int'
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x1903d7799e0 <col:22, col:26> 'int' '<'
|   |     | |-ImplicitCastExpr 0x1903d7799c8 <col:22> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1903d779980 <col:22> 'int' lvalue Var 0x1903d7796d0 'i' 'int'
|   |     | `-IntegerLiteral 0x1903d7799a0 <col:26> 'int' 0
|   |     |-UnaryOperator 0x1903d779a20 <col:29, col:30> 'int' postfix '++'
|   |     | `-DeclRefExpr 0x1903d779a00 <col:29> 'int' lvalue Var 0x1903d7796d0 'i' 'int'
|   |     `-CompoundStmt 0x1903d779b70 <col:34, line:817:9>
|   |       `-IfStmt 0x1903d779b58 <line:815:13, line:816:25>
|   |         |-OpaqueValueExpr 0x1903d779b40 <<invalid sloc>> '_Bool'
|   |         `-ReturnStmt 0x1903d779b30 <col:17, col:25>
|   |           `-UnaryOperator 0x1903d779b18 <col:24, col:25> 'int' prefix '-'
|   |             `-IntegerLiteral 0x1903d779af0 <col:25> 'int' 1
|   `-IfStmt 0x1903d787018 <line:819:5, line:824:5>
|     |-BinaryOperator 0x1903d779c50 <line:819:9, col:14> 'int' '>'
|     | |-ImplicitCastExpr 0x1903d779c38 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1903d779bf0 <col:9> 'int' lvalue ParmVar 0x1903d7794b0 'dl' 'int'
|     | `-IntegerLiteral 0x1903d779c10 <col:14> 'int' 0
|     `-CompoundStmt 0x1903d787000 <col:17, line:824:5>
|       `-ForStmt 0x1903d786fc8 <line:820:9, line:823:9>
|         |-BinaryOperator 0x1903d779cc8 <line:820:14, col:18> 'int' '='
|         | |-DeclRefExpr 0x1903d779c70 <col:14> 'int' lvalue Var 0x1903d7796d0 'i' 'int'
|         | `-ImplicitCastExpr 0x1903d779cb0 <col:18> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x1903d779c90 <col:18> 'int' lvalue ParmVar 0x1903d7794b0 'dl' 'int'
|         |-<<<NULL>>>
|         |-BinaryOperator 0x1903d786e38 <col:22, col:26> 'int' '>'
|         | |-ImplicitCastExpr 0x1903d786e20 <col:22> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x1903d779ce8 <col:22> 'int' lvalue Var 0x1903d7796d0 'i' 'int'
|         | `-IntegerLiteral 0x1903d779d08 <col:26> 'int' 0
|         |-UnaryOperator 0x1903d786e78 <col:29, col:30> 'int' postfix '--'
|         | `-DeclRefExpr 0x1903d786e58 <col:29> 'int' lvalue Var 0x1903d7796d0 'i' 'int'
|         `-CompoundStmt 0x1903d786fb0 <col:34, line:823:9>
|           `-IfStmt 0x1903d786f98 <line:821:13, line:822:24>
|             |-OpaqueValueExpr 0x1903d786f80 <<invalid sloc>> '_Bool'
|             `-ReturnStmt 0x1903d786f70 <col:17, col:24>
|               `-IntegerLiteral 0x1903d786f48 <col:24> 'int' 1
|-FunctionDecl 0x1903d787308 <line:835:1, line:919:1> line:835:6 invalid BN_consttime_swap 'void (int, int *, int *, int)'
| |-ParmVarDecl 0x1903d787098 <col:24, col:33> col:33 invalid condition 'int'
| |-ParmVarDecl 0x1903d787118 <col:44, col:52> col:52 invalid a 'int *'
| |-ParmVarDecl 0x1903d787198 <col:55, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x1903d787218 <col:66, col:70> col:70 used nwords 'int'
| `-CompoundStmt 0x1903d781e80 <line:836:1, line:919:1>
|   |-DeclStmt 0x1903d787460 <line:838:5, col:10>
|   | `-VarDecl 0x1903d7873f8 <col:5, col:9> col:9 used i 'int'
|   |-NullStmt 0x1903d787478 <line:840:30>
|   |-NullStmt 0x1903d787480 <line:841:30>
|   `-SwitchStmt 0x1903d787de8 <line:892:5, line:917:5>
|     |-ImplicitCastExpr 0x1903d787dd0 <line:892:13> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x1903d787d98 <col:13> 'int' lvalue ParmVar 0x1903d787218 'nwords' 'int'
|     `-CompoundStmt 0x1903d781e18 <col:21, line:917:5>
|       |-DefaultStmt 0x1903d784048 <line:893:5, line:890:19>
|       | `-ForStmt 0x1903d784010 <line:894:9, line:890:19>
|       |   |-BinaryOperator 0x1903d783e50 <line:894:14, col:18> 'int' '='
|       |   | |-DeclRefExpr 0x1903d783df0 <col:14> 'int' lvalue Var 0x1903d7873f8 'i' 'int'
|       |   | `-IntegerLiteral 0x1903d783e28 <col:18> 'int' 10
|       |   |-<<<NULL>>>
|       |   |-BinaryOperator 0x1903d783ee0 <col:22, col:26> 'int' '<'
|       |   | |-ImplicitCastExpr 0x1903d783eb0 <col:22> 'int' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x1903d783e70 <col:22> 'int' lvalue Var 0x1903d7873f8 'i' 'int'
|       |   | `-ImplicitCastExpr 0x1903d783ec8 <col:26> 'int' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x1903d783e90 <col:26> 'int' lvalue ParmVar 0x1903d787218 'nwords' 'int'
|       |   |-UnaryOperator 0x1903d783f20 <col:34, col:35> 'int' postfix '++'
|       |   | `-DeclRefExpr 0x1903d783f00 <col:34> 'int' lvalue Var 0x1903d7873f8 'i' 'int'
|       |   `-DoStmt 0x1903d783ff0 <line:886:9, line:890:19>
|       |     |-CompoundStmt 0x1903d783fb8 <line:886:12, line:890:9>
|       |     `-IntegerLiteral 0x1903d783fc8 <col:18> 'int' 0
|       |-CaseStmt 0x1903d7840a8 <line:897:5, line:890:19>
|       | |-ConstantExpr 0x1903d784090 <line:897:10> 'int'
|       | | `-IntegerLiteral 0x1903d784068 <col:10> 'int' 10
|       | `-DoStmt 0x1903d7841a8 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x1903d784170 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x1903d784180 <col:18> 'int' 0
|       |-CaseStmt 0x1903d784208 <line:899:5, line:890:19>
|       | |-ConstantExpr 0x1903d7841f0 <line:899:10> 'int'
|       | | `-IntegerLiteral 0x1903d7841c8 <col:10> 'int' 9
|       | `-DoStmt 0x1903d784308 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x1903d7842d0 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x1903d7842e0 <col:18> 'int' 0
|       |-CaseStmt 0x1903d784368 <line:901:5, line:890:19>
|       | |-ConstantExpr 0x1903d784350 <line:901:10> 'int'
|       | | `-IntegerLiteral 0x1903d784328 <col:10> 'int' 8
|       | `-DoStmt 0x1903d784468 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x1903d784430 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x1903d784440 <col:18> 'int' 0
|       |-CaseStmt 0x1903d7844c8 <line:903:5, line:890:19>
|       | |-ConstantExpr 0x1903d7844b0 <line:903:10> 'int'
|       | | `-IntegerLiteral 0x1903d784488 <col:10> 'int' 7
|       | `-DoStmt 0x1903d7845c8 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x1903d784590 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x1903d7845a0 <col:18> 'int' 0
|       |-CaseStmt 0x1903d784628 <line:905:5, line:890:19>
|       | |-ConstantExpr 0x1903d784610 <line:905:10> 'int'
|       | | `-IntegerLiteral 0x1903d7845e8 <col:10> 'int' 6
|       | `-DoStmt 0x1903d784728 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x1903d7846f0 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x1903d784700 <col:18> 'int' 0
|       |-CaseStmt 0x1903d784788 <line:907:5, line:890:19>
|       | |-ConstantExpr 0x1903d784770 <line:907:10> 'int'
|       | | `-IntegerLiteral 0x1903d784748 <col:10> 'int' 5
|       | `-DoStmt 0x1903d784888 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x1903d784850 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x1903d784860 <col:18> 'int' 0
|       |-CaseStmt 0x1903d7848e8 <line:909:5, line:890:19>
|       | |-ConstantExpr 0x1903d7848d0 <line:909:10> 'int'
|       | | `-IntegerLiteral 0x1903d7848a8 <col:10> 'int' 4
|       | `-DoStmt 0x1903d7849e8 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x1903d7849b0 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x1903d7849c0 <col:18> 'int' 0
|       |-CaseStmt 0x1903d784a48 <line:911:5, line:890:19>
|       | |-ConstantExpr 0x1903d784a30 <line:911:10> 'int'
|       | | `-IntegerLiteral 0x1903d784a08 <col:10> 'int' 3
|       | `-DoStmt 0x1903d784b48 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x1903d784b10 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x1903d784b20 <col:18> 'int' 0
|       |-CaseStmt 0x1903d784ba8 <line:913:5, line:890:19>
|       | |-ConstantExpr 0x1903d784b90 <line:913:10> 'int'
|       | | `-IntegerLiteral 0x1903d784b68 <col:10> 'int' 2
|       | `-DoStmt 0x1903d784ca8 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x1903d784c70 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x1903d784c80 <col:18> 'int' 0
|       `-CaseStmt 0x1903d784d08 <line:915:5, line:890:19>
|         |-ConstantExpr 0x1903d784cf0 <line:915:10> 'int'
|         | `-IntegerLiteral 0x1903d784cc8 <col:10> 'int' 1
|         `-DoStmt 0x1903d781df8 <line:886:9, line:890:19>
|           |-CompoundStmt 0x1903d784dd0 <line:886:12, line:890:9>
|           `-IntegerLiteral 0x1903d781dd0 <col:18> 'int' 0
|-FunctionDecl 0x1903d782050 <line:923:1, line:944:1> line:923:5 BN_security_bits 'int (int, int)'
| |-ParmVarDecl 0x1903d781ec8 <col:22, col:26> col:26 used L 'int'
| |-ParmVarDecl 0x1903d781f48 <col:29, col:33> col:33 used N 'int'
| `-CompoundStmt 0x1903d782bc8 <line:924:1, line:944:1>
|   |-DeclStmt 0x1903d782230 <line:925:5, col:22>
|   | |-VarDecl 0x1903d782130 <col:5, col:9> col:9 used secbits 'int'
|   | `-VarDecl 0x1903d7821b0 <col:5, col:18> col:18 used bits 'int'
|   |-IfStmt 0x1903d7827c0 <line:926:5, line:937:16> has_else
|   | |-BinaryOperator 0x1903d7822a8 <line:926:9, col:14> 'int' '>='
|   | | |-ImplicitCastExpr 0x1903d782290 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d782248 <col:9> 'int' lvalue ParmVar 0x1903d781ec8 'L' 'int'
|   | | `-IntegerLiteral 0x1903d782268 <col:14> 'int' 15360
|   | |-BinaryOperator 0x1903d782328 <line:927:9, col:19> 'int' '='
|   | | |-DeclRefExpr 0x1903d7822c8 <col:9> 'int' lvalue Var 0x1903d782130 'secbits' 'int'
|   | | `-IntegerLiteral 0x1903d782300 <col:19> 'int' 256
|   | `-IfStmt 0x1903d782798 <line:928:10, line:937:16> has_else
|   |   |-BinaryOperator 0x1903d7823a8 <line:928:14, col:19> 'int' '>='
|   |   | |-ImplicitCastExpr 0x1903d782390 <col:14> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1903d782348 <col:14> 'int' lvalue ParmVar 0x1903d781ec8 'L' 'int'
|   |   | `-IntegerLiteral 0x1903d782368 <col:19> 'int' 7680
|   |   |-BinaryOperator 0x1903d782410 <line:929:9, col:19> 'int' '='
|   |   | |-DeclRefExpr 0x1903d7823c8 <col:9> 'int' lvalue Var 0x1903d782130 'secbits' 'int'
|   |   | `-IntegerLiteral 0x1903d7823e8 <col:19> 'int' 192
|   |   `-IfStmt 0x1903d782770 <line:930:10, line:937:16> has_else
|   |     |-BinaryOperator 0x1903d782490 <line:930:14, col:19> 'int' '>='
|   |     | |-ImplicitCastExpr 0x1903d782478 <col:14> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1903d782430 <col:14> 'int' lvalue ParmVar 0x1903d781ec8 'L' 'int'
|   |     | `-IntegerLiteral 0x1903d782450 <col:19> 'int' 3072
|   |     |-BinaryOperator 0x1903d7824f8 <line:931:9, col:19> 'int' '='
|   |     | |-DeclRefExpr 0x1903d7824b0 <col:9> 'int' lvalue Var 0x1903d782130 'secbits' 'int'
|   |     | `-IntegerLiteral 0x1903d7824d0 <col:19> 'int' 128
|   |     `-IfStmt 0x1903d782748 <line:932:10, line:937:16> has_else
|   |       |-BinaryOperator 0x1903d782578 <line:932:14, col:19> 'int' '>='
|   |       | |-ImplicitCastExpr 0x1903d782560 <col:14> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x1903d782518 <col:14> 'int' lvalue ParmVar 0x1903d781ec8 'L' 'int'
|   |       | `-IntegerLiteral 0x1903d782538 <col:19> 'int' 2048
|   |       |-BinaryOperator 0x1903d7825e0 <line:933:9, col:19> 'int' '='
|   |       | |-DeclRefExpr 0x1903d782598 <col:9> 'int' lvalue Var 0x1903d782130 'secbits' 'int'
|   |       | `-IntegerLiteral 0x1903d7825b8 <col:19> 'int' 112
|   |       `-IfStmt 0x1903d782720 <line:934:10, line:937:16> has_else
|   |         |-BinaryOperator 0x1903d782660 <line:934:14, col:19> 'int' '>='
|   |         | |-ImplicitCastExpr 0x1903d782648 <col:14> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x1903d782600 <col:14> 'int' lvalue ParmVar 0x1903d781ec8 'L' 'int'
|   |         | `-IntegerLiteral 0x1903d782620 <col:19> 'int' 1024
|   |         |-BinaryOperator 0x1903d7826c8 <line:935:9, col:19> 'int' '='
|   |         | |-DeclRefExpr 0x1903d782680 <col:9> 'int' lvalue Var 0x1903d782130 'secbits' 'int'
|   |         | `-IntegerLiteral 0x1903d7826a0 <col:19> 'int' 80
|   |         `-ReturnStmt 0x1903d782710 <line:937:9, col:16>
|   |           `-IntegerLiteral 0x1903d7826e8 <col:16> 'int' 0
|   |-IfStmt 0x1903d7828c8 <line:938:5, line:939:16>
|   | |-BinaryOperator 0x1903d782860 <line:938:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x1903d782848 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d7827e8 <col:9> 'int' lvalue ParmVar 0x1903d781f48 'N' 'int'
|   | | `-UnaryOperator 0x1903d782830 <col:14, col:15> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x1903d782808 <col:15> 'int' 1
|   | `-ReturnStmt 0x1903d7828b8 <line:939:9, col:16>
|   |   `-ImplicitCastExpr 0x1903d7828a0 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1903d782880 <col:16> 'int' lvalue Var 0x1903d782130 'secbits' 'int'
|   |-BinaryOperator 0x1903d782998 <line:940:5, col:16> 'int' '='
|   | |-DeclRefExpr 0x1903d7828e0 <col:5> 'int' lvalue Var 0x1903d7821b0 'bits' 'int'
|   | `-BinaryOperator 0x1903d782978 <col:12, col:16> 'int' '/'
|   |   |-ImplicitCastExpr 0x1903d782960 <col:12> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1903d782918 <col:12> 'int' lvalue ParmVar 0x1903d781f48 'N' 'int'
|   |   `-IntegerLiteral 0x1903d782938 <col:16> 'int' 2
|   |-IfStmt 0x1903d782a70 <line:941:5, line:942:16>
|   | |-BinaryOperator 0x1903d782a18 <line:941:9, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x1903d782a00 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1903d7829b8 <col:9> 'int' lvalue Var 0x1903d7821b0 'bits' 'int'
|   | | `-IntegerLiteral 0x1903d7829d8 <col:16> 'int' 80
|   | `-ReturnStmt 0x1903d782a60 <line:942:9, col:16>
|   |   `-IntegerLiteral 0x1903d782a38 <col:16> 'int' 0
|   `-ReturnStmt 0x1903d782bb8 <line:943:5, col:40>
|     `-ConditionalOperator 0x1903d782b88 <col:12, col:40> 'int'
|       |-BinaryOperator 0x1903d782af8 <col:12, col:20> 'int' '>='
|       | |-ImplicitCastExpr 0x1903d782ac8 <col:12> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x1903d782a88 <col:12> 'int' lvalue Var 0x1903d7821b0 'bits' 'int'
|       | `-ImplicitCastExpr 0x1903d782ae0 <col:20> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x1903d782aa8 <col:20> 'int' lvalue Var 0x1903d782130 'secbits' 'int'
|       |-ImplicitCastExpr 0x1903d782b58 <col:30> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x1903d782b18 <col:30> 'int' lvalue Var 0x1903d782130 'secbits' 'int'
|       `-ImplicitCastExpr 0x1903d782b70 <col:40> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x1903d782b38 <col:40> 'int' lvalue Var 0x1903d7821b0 'bits' 'int'
|-FunctionDecl 0x1903d782cb0 <line:946:1, line:951:1> line:946:6 invalid BN_zero_ex 'void (int *)'
| |-ParmVarDecl 0x1903d782c20 <col:17, col:25> col:25 invalid a 'int *'
| `-CompoundStmt 0x1903d782e20 <line:947:1, line:951:1>
|-FunctionDecl 0x1903d782fa0 <line:953:1, line:956:1> line:953:5 invalid BN_abs_is_word 'int (const int *, const int)'
| |-ParmVarDecl 0x1903d782e48 <col:20, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x1903d782ec8 <col:37, col:52> col:52 invalid w 'const int'
| `-CompoundStmt 0x1903d783108 <line:954:1, line:956:1>
|-FunctionDecl 0x1903d7831c8 <line:958:1, line:961:1> line:958:5 invalid BN_is_zero 'int (const int *)'
| |-ParmVarDecl 0x1903d783130 <col:16, col:30> col:30 invalid a 'const int *'
| `-CompoundStmt 0x1903d7832b0 <line:959:1, line:961:1>
|-FunctionDecl 0x1903d783370 <line:963:1, line:966:1> line:963:5 invalid BN_is_one 'int (const int *)'
| |-ParmVarDecl 0x1903d7832d8 <col:15, col:29> col:29 invalid a 'const int *'
| `-CompoundStmt 0x1903d783458 <line:964:1, line:966:1>
|-FunctionDecl 0x1903d7835a0 <line:968:1, line:971:1> line:968:5 invalid BN_is_word 'int (const int *, const int)'
| |-ParmVarDecl 0x1903d783480 <col:16, col:30> col:30 invalid a 'const int *'
| |-ParmVarDecl 0x1903d783500 <col:33, col:48> col:48 invalid w 'const int'
| `-CompoundStmt 0x1903d783668 <line:969:1, line:971:1>
|-FunctionDecl 0x1903d783728 <line:973:1, line:976:1> line:973:5 invalid BN_is_odd 'int (const int *)'
| |-ParmVarDecl 0x1903d783690 <col:15, col:29> col:29 invalid a 'const int *'
| `-CompoundStmt 0x1903d783860 <line:974:1, line:976:1>
|-FunctionDecl 0x1903d783920 <line:978:1, line:981:1> line:978:5 invalid BN_is_negative 'int (const int *)'
| |-ParmVarDecl 0x1903d783888 <col:20, col:34> col:34 invalid a 'const int *'
| `-CompoundStmt 0x1903d783a08 <line:979:1, line:981:1>
|-FunctionDecl 0x1903d783cb0 <line:983:1, line:987:1> line:983:5 invalid BN_to_montgomery 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1903d783a30 <col:22, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1903d783ab0 <col:33, col:47> col:47 invalid a 'const int *'
| |-ParmVarDecl 0x1903d783b30 <col:50, col:63> col:63 invalid mont 'int *'
| |-ParmVarDecl 0x1903d783bb0 <line:984:22, col:30> col:30 invalid ctx 'int *'
| `-CompoundStmt 0x1903d785ef8 <line:985:1, line:987:1>
|-FunctionDecl 0x1903d7860c0 <line:989:1, line:998:1> line:989:6 invalid BN_with_flags 'void (int *, const int *, int)'
| |-ParmVarDecl 0x1903d785f20 <col:20, col:28> col:28 invalid dest 'int *'
| |-ParmVarDecl 0x1903d785fa0 <col:34, col:48> col:48 invalid b 'const int *'
| |-ParmVarDecl 0x1903d786020 <col:51, col:55> col:55 used flags 'int'
| `-CompoundStmt 0x1903d7861c8 <line:990:1, line:998:1>
|-FunctionDecl 0x1903d786278 <line:1000:1, line:1010:1> line:1000:11 invalid BN_GENCB_new 'int *(void)'
| `-CompoundStmt 0x1903d7864a0 <line:1001:1, line:1010:1>
|   `-IfStmt 0x1903d786488 <line:1004:5, line:1007:5>
|     |-OpaqueValueExpr 0x1903d786470 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x1903d786460 <line:1004:55, line:1007:5>
|-FunctionDecl 0x1903d786560 <line:1012:1, line:1017:1> line:1012:6 invalid BN_GENCB_free 'void (int *)'
| |-ParmVarDecl 0x1903d7864d0 <col:20, col:30> col:30 invalid cb 'int *'
| `-CompoundStmt 0x1903d786680 <line:1013:1, line:1017:1>
|   `-IfStmt 0x1903d786648 <line:1014:5, line:1015:9>
|     |-OpaqueValueExpr 0x1903d786630 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x1903d786620 <col:9>
|-FunctionDecl 0x1903d7867c8 <line:1019:1, line:1022:1> line:1019:6 invalid BN_set_flags 'void (int *, int)'
| |-ParmVarDecl 0x1903d7866b0 <col:19, col:27> col:27 invalid b 'int *'
| |-ParmVarDecl 0x1903d786730 <col:30, col:34> col:34 used n 'int'
| `-CompoundStmt 0x1903d7868c8 <line:1020:1, line:1022:1>
|-FunctionDecl 0x1903d786a10 <line:1024:1, line:1027:1> line:1024:5 invalid BN_get_flags 'int (const int *, int)'
| |-ParmVarDecl 0x1903d7868f0 <col:18, col:32> col:32 invalid b 'const int *'
| |-ParmVarDecl 0x1903d786970 <col:35, col:39> col:39 used n 'int'
| `-CompoundStmt 0x1903d786b10 <line:1025:1, line:1027:1>
|-FunctionDecl 0x1903d787f58 <line:1030:1, line:1037:1> line:1030:6 invalid BN_GENCB_set_old 'void (int *, void (*)(int, int, void *), void *)'
| |-ParmVarDecl 0x1903d786b38 <col:23, col:33> col:33 invalid gencb 'int *'
| |-ParmVarDecl 0x1903d786d68 <col:40, col:74> col:47 used callback 'void (*)(int, int, void *)'
| |-ParmVarDecl 0x1903d787e30 <line:1031:23, col:29> col:29 used cb_arg 'void *'
| `-CompoundStmt 0x1903d7880c0 <line:1032:1, line:1037:1>
|-FunctionDecl 0x1903d7884c8 <line:1040:1, line:1047:1> line:1040:6 invalid BN_GENCB_set 'void (int *, int (*)(int, int, int *), void *)'
| |-ParmVarDecl 0x1903d7880e8 <col:19, col:29> col:29 invalid gencb 'int *'
| |-ParmVarDecl 0x1903d788320 <col:36, col:73> col:42 used callback 'int (*)(int, int, int *)'
| |-ParmVarDecl 0x1903d7883a0 <line:1041:19, col:25> col:25 used cb_arg 'void *'
| `-CompoundStmt 0x1903d788630 <line:1042:1, line:1047:1>
|-FunctionDecl 0x1903d788720 <line:1049:1, line:1052:1> line:1049:7 invalid BN_GENCB_get_arg 'void *(int *)'
| |-ParmVarDecl 0x1903d788658 <col:24, col:34> col:34 invalid cb 'int *'
| `-CompoundStmt 0x1903d7887e0 <line:1050:1, line:1052:1>
|-FunctionDecl 0x1903d788928 <line:1054:1, line:1057:1> line:1054:9 invalid bn_wexpand 'int *(int *, int)'
| |-ParmVarDecl 0x1903d788808 <col:20, col:28> col:28 invalid a 'int *'
| |-ParmVarDecl 0x1903d788888 <col:31, col:35> col:35 used words 'int'
| `-CompoundStmt 0x1903d788a48 <line:1055:1, line:1057:1>
`-FunctionDecl 0x1903d788b00 <line:1059:1, line:1076:1> line:1059:6 invalid bn_correct_top 'void (int *)'
  |-ParmVarDecl 0x1903d788a70 <col:21, col:29> col:29 invalid a 'int *'
  `-CompoundStmt 0x1903d780ef8 <line:1060:1, line:1076:1>
    |-DeclStmt 0x1903d788c40 <line:1062:5, col:25>
    | `-VarDecl 0x1903d788bd8 <col:5, col:9> col:9 used tmp_top 'int'
    |-IfStmt 0x1903d780e48 <line:1064:5, line:1071:5>
    | |-BinaryOperator 0x1903d788cd0 <line:1064:9, col:19> 'int' '>'
    | | |-ImplicitCastExpr 0x1903d788cb8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1903d788c58 <col:9> 'int' lvalue Var 0x1903d788bd8 'tmp_top' 'int'
    | | `-IntegerLiteral 0x1903d788c90 <col:19> 'int' 0
    | `-CompoundStmt 0x1903d780e30 <col:22, line:1071:5>
    |   `-ForStmt 0x1903d780dd8 <line:1065:9, line:1069:9>
    |     |-<<<NULL>>>
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x1903d788d70 <line:1065:38, col:48> 'int' '>'
    |     | |-ImplicitCastExpr 0x1903d788d58 <col:38> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x1903d788d10 <col:38> 'int' lvalue Var 0x1903d788bd8 'tmp_top' 'int'
    |     | `-IntegerLiteral 0x1903d788d30 <col:48> 'int' 0
    |     |-UnaryOperator 0x1903d788db0 <col:51, col:58> 'int' postfix '--'
    |     | `-DeclRefExpr 0x1903d788d90 <col:51> 'int' lvalue Var 0x1903d788bd8 'tmp_top' 'int'
    |     `-CompoundStmt 0x1903d780dc0 <col:62, line:1069:9>
    |       `-IfStmt 0x1903d788e10 <line:1067:13, line:1068:17>
    |         |-OpaqueValueExpr 0x1903d788df8 <<invalid sloc>> '_Bool'
    |         `-BreakStmt 0x1903d788df0 <col:17>
    `-NullStmt 0x1903d780ef0 <line:1075:18>
