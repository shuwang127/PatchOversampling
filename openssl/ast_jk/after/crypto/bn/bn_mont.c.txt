TranslationUnitDecl 0x1bdefd82f88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1bdefd83820 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1bdefd83520 '__int128'
|-TypedefDecl 0x1bdefd83890 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1bdefd83540 'unsigned __int128'
|-TypedefDecl 0x1bdefd83bc8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1bdefd83980 'struct __NSConstantString_tag'
|   `-Record 0x1bdefd838e8 '__NSConstantString_tag'
|-TypedefDecl 0x1bdefd83c38 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1bdefd83160 'unsigned long long'
|-TypedefDecl 0x1bdefd83cd0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1bdefd83c90 'char *'
|   `-BuiltinType 0x1bdefd83020 'char'
|-TypedefDecl 0x1bdefd83d40 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1bdefd83c90 'char *'
|   `-BuiltinType 0x1bdefd83020 'char'
|-FunctionDecl 0x1bdf16efdd0 <.//openssl//file_jk/after\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1bdefd83de0 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x1bdefd83e60 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x1bdefd83ee0 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x1bdf16efcd0 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x1bdf16f00d8 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1bdf16efea8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1bdf16eff28 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1bdf16effa8 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x1bdf16f0028 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x1bdf16f0398 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x1bdf16f01b0 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x1bdf16f0230 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x1bdf16f02b0 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x1bdf16f0650 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x1bdf16f0468 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x1bdf16f04e8 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x1bdf16f0568 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x1bdf16f09a0 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1bdf16f0720 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1bdf16f07a0 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1bdf16f0820 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x1bdf16f08a0 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x1bdf16e8c60 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1bdf16f0a78 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1bdf16f0af8 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1bdf16f0b78 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x1bdf16f0bf8 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x1bdf16e8d20 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x1bdf16e8df8 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x1bdf16e8e68 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x1bdf16e8ed8 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x1bdf16e8f48 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x1bdf16e8fb8 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1bdf16e9010 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x1bdf16e90e8 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x1bdf16e9158 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x1bdf16e91c8 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x1bdf16e9238 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x1bdf16e9330 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x1bdf16e93a0 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1bdf16e93f8 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x1bdf16e94c8 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x1bdf16e9538 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x1bdf16e95a8 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x1bdf16e9618 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x1bdf16e9688 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1bdf16e96e0 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x1bdf16e97b8 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x1bdf16e9828 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x1bdf16e9880 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x1bdf16e9bd0 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x1bdf16f0f68 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x1bdf16f1018 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x1bdf16f11a8 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x1bdf16f10e8 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x1bdf16f12f8 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x1bdf16f1268 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x1bdf16f1448 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x1bdf16f13b8 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x1bdf16f1808 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x1bdf16f1508 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1bdf16f1588 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x1bdf16f1608 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x1bdf16f1688 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x1bdf16f1708 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x1bdf16f1ac8 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x1bdf16f18e8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1bdf16f1968 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x1bdf16f19e8 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x1bdf16f2da0 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x1bdf16f1b98 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1bdf16f1c18 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x1bdf16f2d00 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x1bdf16f30e8 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x1bdf16f2e70 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1bdf16f2ef0 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf16f2f70 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x1bdf16f2ff0 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x1bdf16f3318 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x1bdf16f31c0 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x1bdf16f3240 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x1bdf16f34f8 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x1bdf16f33e0 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x1bdf16f3460 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x1bdf16f37b0 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x1bdf16f35c0 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf16f3640 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x1bdf16f36c0 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x1bdf16f3b00 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x1bdf16f3880 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf16f3900 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x1bdf16f3980 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x1bdf16f3a00 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x1bdf1702358 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x1bdf16f3bd8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x1bdf16f3c58 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x1bdf1702030 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x1bdf17020b0 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x1bdf1702130 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x1bdf17021b0 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x1bdf1702230 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x1bdf1702808 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x1bdf1702448 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1bdf17024c8 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x1bdf1702548 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x1bdf17025c8 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x1bdf1702648 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x1bdf17026c8 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x1bdf1702748 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x1bdf1702b20 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x1bdf17028f8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x1bdf1702978 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf17029f8 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x1bdf1702a78 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x1bdf1702e68 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x1bdf1702bf8 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x1bdf1702c78 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x1bdf1702cf8 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x1bdf1702d78 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x1bdf1707298 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x1bdf1702f40 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x1bdf1702fc0 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x1bdf1707098 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x1bdf1707118 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x1bdf1707198 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x1bdf1707708 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x1bdf1707378 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x1bdf17073f8 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x1bdf1707478 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x1bdf17074f8 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x1bdf1707578 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x1bdf17075f8 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x1bdf1707b00 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x1bdf17077f0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1bdf1707870 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf17078f0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x1bdf1707970 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x1bdf17079f0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x1bdf1707e98 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x1bdf1707be0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1bdf1707c60 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf1707ce0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x1bdf1707d60 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x1bdf1707de0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x1bdf17002b0 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1bdf1707f78 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x1bdf1707ff8 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x1bdf1700010 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x1bdf1700090 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x1bdf1700110 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x1bdf1700190 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x1bdf17006a0 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1bdf1700398 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x1bdf1700418 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf1700498 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x1bdf1700518 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x1bdf1700598 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x1bdf1700a90 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x1bdf1700780 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x1bdf1700800 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x1bdf1700880 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x1bdf1700900 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x1bdf1700980 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x1bdf1700d60 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x1bdf1700b70 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x1bdf1700bf0 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x1bdf1700c70 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x1bdf1704050 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x1bdf1700e30 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x1bdf1700eb0 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x1bdf1700f30 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x1bdf1704120 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-FunctionDecl 0x1bdf17044b0 <.//openssl//file_jk/after\crypto\bn\bn_mont.c:26:1, line:35:1> line:26:5 invalid BN_mod_mul_montgomery 'int (int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1bdf17041a0 <col:27, col:35> col:35 invalid r 'int *'
| |-ParmVarDecl 0x1bdf1704220 <col:38, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf17042a0 <col:55, col:69> col:69 invalid b 'const int *'
| |-ParmVarDecl 0x1bdf1704320 <line:27:27, col:40> col:40 invalid mont 'int *'
| |-ParmVarDecl 0x1bdf17043a0 <col:46, col:54> col:54 invalid ctx 'int *'
| `-CompoundStmt 0x1bdf1704928 <line:28:1, line:35:1>
|   |-DeclStmt 0x1bdf1704798 <line:29:5, col:56>
|   | `-VarDecl 0x1bdf17045a8 <col:5, col:9> col:9 used ret 'int'
|   |-NullStmt 0x1bdf17048c0 <line:32:20>
|   `-ReturnStmt 0x1bdf1704918 <line:34:5, col:12>
|     `-ImplicitCastExpr 0x1bdf1704900 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1bdf17048c8 <col:12> 'int' lvalue Var 0x1bdf17045a8 'ret' 'int'
|-FunctionDecl 0x1bdf1704c20 <line:37:1, line:85:1> line:37:5 invalid bn_mul_mont_fixed_top 'int (int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1bdf1704968 <col:27, col:35> col:35 invalid r 'int *'
| |-ParmVarDecl 0x1bdf17049e8 <col:38, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf1704a68 <col:55, col:69> col:69 invalid b 'const int *'
| |-ParmVarDecl 0x1bdf1704ae8 <line:38:27, col:40> col:40 invalid mont 'int *'
| |-ParmVarDecl 0x1bdf1704b68 <col:46, col:54> col:54 invalid ctx 'int *'
| `-CompoundStmt 0x1bdf17068d0 <line:39:1, line:85:1>
|   |-DeclStmt 0x1bdf1704da8 <line:41:5, col:16>
|   | `-VarDecl 0x1bdf1704d18 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1bdf1704d80 <col:15> 'int' 0
|   |-DeclStmt 0x1bdf1704e40 <line:42:5, col:26>
|   | `-VarDecl 0x1bdf1704dd8 <col:5, col:9> col:9 used num 'int'
|   |-IfStmt 0x1bdf1704f40 <line:57:5, line:58:16>
|   | |-OpaqueValueExpr 0x1bdf1704f28 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1bdf1704f18 <col:9, col:16>
|   |   `-IntegerLiteral 0x1bdf1704ef0 <col:16> 'int' 0
|   |-IfStmt 0x1bdf1706220 <line:62:5, line:63:14>
|   | |-OpaqueValueExpr 0x1bdf1706208 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1bdf17061f0 <col:9, col:14> 'err' 0x1bdf17061a0
|   |-NullStmt 0x1bdf1706238 <line:65:22>
|   |-IfStmt 0x1bdf1706538 <line:66:5, line:72:5> has_else
|   | |-OpaqueValueExpr 0x1bdf1706520 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1bdf1706398 <line:66:17, line:69:5>
|   | | `-IfStmt 0x1bdf1706380 <line:67:9, line:68:18>
|   | |   |-OpaqueValueExpr 0x1bdf1706368 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x1bdf1706350 <col:13, col:18> 'err' 0x1bdf17061a0
|   | `-CompoundStmt 0x1bdf1706508 <line:69:12, line:72:5>
|   |   `-IfStmt 0x1bdf17064f0 <line:70:9, line:71:18>
|   |     |-OpaqueValueExpr 0x1bdf17064d8 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1bdf17064c0 <col:13, col:18> 'err' 0x1bdf17061a0
|   |-IfStmt 0x1bdf17066a0 <line:75:5, line:76:14>
|   | |-OpaqueValueExpr 0x1bdf1706688 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1bdf1706670 <col:9, col:14> 'err' 0x1bdf17061a0
|   |-BinaryOperator 0x1bdf1706718 <line:81:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x1bdf17066b8 <col:5> 'int' lvalue Var 0x1bdf1704d18 'ret' 'int'
|   | `-IntegerLiteral 0x1bdf17066f0 <col:11> 'int' 1
|   |-LabelStmt 0x1bdf1706850 <line:82:2, col:5> 'err'
|   | `-NullStmt 0x1bdf1706848 <col:5>
|   `-ReturnStmt 0x1bdf17068c0 <line:84:5, col:16>
|     `-ImplicitCastExpr 0x1bdf17068a8 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1bdf1706888 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1bdf1706868 <col:13> 'int' lvalue Var 0x1bdf1704d18 'ret' 'int'
|-FunctionDecl 0x1bdf1706b30 <line:88:1, line:158:1> line:88:12 invalid bn_from_montgomery_word 'int (int *, int *, int *)' static
| |-ParmVarDecl 0x1bdf1706948 <col:36, col:44> col:44 invalid ret 'int *'
| |-ParmVarDecl 0x1bdf17069c8 <col:49, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x1bdf1706a48 <col:60, col:73> col:73 invalid mont 'int *'
| `-CompoundStmt 0x1bdf1703ac0 <line:89:1, line:158:1>
|   |-DeclStmt 0x1bdf1706da0 <line:92:5, col:19>
|   | |-VarDecl 0x1bdf1706c18 <col:5, col:9> col:9 used nl 'int'
|   | |-VarDecl 0x1bdf1706c98 <col:5, col:13> col:13 used max 'int'
|   | `-VarDecl 0x1bdf1706d18 <col:5, col:18> col:18 used i 'int'
|   |-DeclStmt 0x1bdf1706e38 <line:93:5, col:22>
|   | `-VarDecl 0x1bdf1706dd0 <col:5, col:18> col:18 used rtop 'unsigned int'
|   |-IfStmt 0x1bdf1706fa0 <line:97:5, line:100:5>
|   | |-BinaryOperator 0x1bdf1706ee8 <line:97:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x1bdf1706ed0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bdf1706e88 <col:9> 'int' lvalue Var 0x1bdf1706c18 'nl' 'int'
|   | | `-IntegerLiteral 0x1bdf1706ea8 <col:15> 'int' 0
|   | `-CompoundStmt 0x1bdf1706f88 <col:18, line:100:5>
|   |   `-ReturnStmt 0x1bdf1706f78 <line:99:9, col:18>
|   |     `-ParenExpr 0x1bdf1706f58 <col:16, col:18> 'int'
|   |       `-IntegerLiteral 0x1bdf1706f30 <col:17> 'int' 1
|   |-BinaryOperator 0x1bdf1703060 <line:102:5, col:18> 'int' '='
|   | |-DeclRefExpr 0x1bdf1706fb8 <col:5> 'int' lvalue Var 0x1bdf1706c98 'max' 'int'
|   | `-ParenExpr 0x1bdf1703040 <col:11, col:18> 'int'
|   |   `-BinaryOperator 0x1bdf1707050 <col:12, col:16> 'int' '*'
|   |     |-IntegerLiteral 0x1bdf1706ff0 <col:12> 'int' 2
|   |     `-ImplicitCastExpr 0x1bdf1707038 <col:16> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1bdf1707018 <col:16> 'int' lvalue Var 0x1bdf1706c18 'nl' 'int'
|   |-IfStmt 0x1bdf1703220 <line:103:5, line:104:18>
|   | |-OpaqueValueExpr 0x1bdf1703208 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1bdf17031f8 <col:9, col:18>
|   |   `-ParenExpr 0x1bdf17031d8 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x1bdf17031b0 <col:17> 'int' 0
|   |-ForStmt 0x1bdf17033e8 <line:110:5, line:113:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1bdf1703360 <line:110:32, col:36> 'int' '<'
|   | | |-ImplicitCastExpr 0x1bdf1703330 <col:32> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bdf17032f0 <col:32> 'int' lvalue Var 0x1bdf1706d18 'i' 'int'
|   | | `-ImplicitCastExpr 0x1bdf1703348 <col:36> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1bdf1703310 <col:36> 'int' lvalue Var 0x1bdf1706c98 'max' 'int'
|   | |-UnaryOperator 0x1bdf17033a0 <col:41, col:42> 'int' postfix '++'
|   | | `-DeclRefExpr 0x1bdf1703380 <col:41> 'int' lvalue Var 0x1bdf1706d18 'i' 'int'
|   | `-CompoundStmt 0x1bdf17033d8 <col:46, line:113:5>
|   |-ForStmt 0x1bdf17036c0 <line:124:5, line:130:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1bdf1703590 <line:124:28, col:32> 'int' '<'
|   | | |-ImplicitCastExpr 0x1bdf1703560 <col:28> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bdf1703520 <col:28> 'int' lvalue Var 0x1bdf1706d18 'i' 'int'
|   | | `-ImplicitCastExpr 0x1bdf1703578 <col:32> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1bdf1703540 <col:32> 'int' lvalue Var 0x1bdf1706c18 'nl' 'int'
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x1bdf17036b0 <col:47, line:130:5>
|   |-IfStmt 0x1bdf17037a8 <line:132:5, line:133:18>
|   | |-OpaqueValueExpr 0x1bdf1703790 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1bdf1703780 <col:9, col:18>
|   |   `-ParenExpr 0x1bdf1703760 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x1bdf1703738 <col:17> 'int' 0
|   |-ForStmt 0x1bdf1703a30 <line:152:5, line:155:5>
|   | |-BinaryOperator 0x1bdf1703890 <line:152:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1bdf1703848 <col:10> 'int' lvalue Var 0x1bdf1706d18 'i' 'int'
|   | | `-IntegerLiteral 0x1bdf1703868 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1bdf1703920 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1bdf17038f0 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bdf17038b0 <col:17> 'int' lvalue Var 0x1bdf1706d18 'i' 'int'
|   | | `-ImplicitCastExpr 0x1bdf1703908 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1bdf17038d0 <col:21> 'int' lvalue Var 0x1bdf1706c18 'nl' 'int'
|   | |-UnaryOperator 0x1bdf1703960 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x1bdf1703940 <col:25> 'int' lvalue Var 0x1bdf1706d18 'i' 'int'
|   | `-CompoundStmt 0x1bdf1703a20 <col:30, line:155:5>
|   `-ReturnStmt 0x1bdf1703ab0 <line:157:5, col:14>
|     `-ParenExpr 0x1bdf1703a90 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x1bdf1703a68 <col:13> 'int' 1
|-FunctionDecl 0x1bdf1703db0 <line:161:1, line:171:1> line:161:5 invalid BN_from_montgomery 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1bdf1703b38 <col:24, col:32> col:32 invalid ret 'int *'
| |-ParmVarDecl 0x1bdf1703bb8 <col:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf1703c38 <col:54, col:67> col:67 invalid mont 'int *'
| |-ParmVarDecl 0x1bdf1703cb8 <line:162:24, col:32> col:32 invalid ctx 'int *'
| `-CompoundStmt 0x1bdf1708138 <line:163:1, line:171:1>
|   |-DeclStmt 0x1bdf1703f08 <line:164:5, col:13>
|   | `-VarDecl 0x1bdf1703ea0 <col:5, col:9> col:9 used retn 'int'
|   |-NullStmt 0x1bdf17080e8 <line:168:22>
|   `-ReturnStmt 0x1bdf1708128 <line:170:5, col:12>
|     `-ImplicitCastExpr 0x1bdf1708110 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1bdf17080f0 <col:12> 'int' lvalue Var 0x1bdf1703ea0 'retn' 'int'
|-FunctionDecl 0x1bdf17083a8 <line:173:1, line:219:1> line:173:5 invalid bn_from_mont_fixed_top 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1bdf1708178 <col:28, col:36> col:36 invalid ret 'int *'
| |-ParmVarDecl 0x1bdf17081f8 <col:41, col:55> col:55 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf1708278 <col:58, col:71> col:71 invalid mont 'int *'
| |-ParmVarDecl 0x1bdf17082f8 <line:174:28, col:36> col:36 invalid ctx 'int *'
| `-CompoundStmt 0x1bdf1708790 <line:175:1, line:219:1>
|   |-DeclStmt 0x1bdf1708528 <line:176:5, col:17>
|   | `-VarDecl 0x1bdf1708498 <col:5, col:16> col:9 used retn 'int' cinit
|   |   `-IntegerLiteral 0x1bdf1708500 <col:16> 'int' 0
|   |-IfStmt 0x1bdf17086f0 <line:181:5, line:183:5>
|   | |-OpaqueValueExpr 0x1bdf17086d8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1bdf17086c8 <line:181:49, line:183:5>
|   `-ReturnStmt 0x1bdf1708780 <line:218:5, col:17>
|     `-ImplicitCastExpr 0x1bdf1708768 <col:12, col:17> 'int' <LValueToRValue>
|       `-ParenExpr 0x1bdf1708748 <col:12, col:17> 'int' lvalue
|         `-DeclRefExpr 0x1bdf1708728 <col:13> 'int' lvalue Var 0x1bdf1708498 'retn' 'int'
|-FunctionDecl 0x1bdf1708a00 <line:221:1, line:225:1> line:221:5 invalid bn_to_mont_fixed_top 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1bdf17087d0 <col:26, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x1bdf1708850 <col:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1bdf17088d0 <col:54, col:67> col:67 invalid mont 'int *'
| |-ParmVarDecl 0x1bdf1708950 <line:222:26, col:34> col:34 invalid ctx 'int *'
| `-CompoundStmt 0x1bdf1708ad8 <line:223:1, line:225:1>
|-FunctionDecl 0x1bdf1708bb0 <line:227:1, line:237:1> line:227:14 invalid BN_MONT_CTX_new 'int *(void)'
| `-CompoundStmt 0x1bdf1708d78 <line:228:1, line:237:1>
|-FunctionDecl 0x1bdf1708e30 <line:239:1, line:247:1> line:239:6 invalid BN_MONT_CTX_init 'void (int *)'
| |-ParmVarDecl 0x1bdf1708da0 <col:23, col:36> col:36 invalid ctx 'int *'
| `-CompoundStmt 0x1bdf1708fb8 <line:240:1, line:247:1>
|-FunctionDecl 0x1bdf1701020 <line:249:1, line:259:1> line:249:6 invalid BN_MONT_CTX_free 'void (int *)'
| |-ParmVarDecl 0x1bdf1708fe0 <col:23, col:36> col:36 invalid mont 'int *'
| `-CompoundStmt 0x1bdf1701380 <line:250:1, line:259:1>
|   `-IfStmt 0x1bdf1701108 <line:251:5, line:252:9>
|     |-OpaqueValueExpr 0x1bdf17010f0 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x1bdf17010e0 <col:9>
|-FunctionDecl 0x1bdf17015a0 <line:261:1, line:407:1> line:261:5 invalid BN_MONT_CTX_set 'int (int *, const int *, int *)'
| |-ParmVarDecl 0x1bdf17013b0 <col:21, col:34> col:34 invalid mont 'int *'
| |-ParmVarDecl 0x1bdf1701430 <col:40, col:54> col:54 invalid mod 'const int *'
| |-ParmVarDecl 0x1bdf17014b0 <col:59, col:67> col:67 invalid ctx 'int *'
| `-CompoundStmt 0x1bdf170b220 <line:262:1, line:407:1>
|   |-DeclStmt 0x1bdf17017b0 <line:263:5, col:19>
|   | |-VarDecl 0x1bdf1701688 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x1bdf1701708 <col:5, col:18> col:12 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1bdf1701770 <col:18> 'int' 0
|   |-IfStmt 0x1bdf1701928 <line:266:5, line:267:16>
|   | |-OpaqueValueExpr 0x1bdf1701910 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1bdf1701900 <col:9, col:16>
|   |   `-IntegerLiteral 0x1bdf17018d8 <col:16> 'int' 0
|   |-IfStmt 0x1bdf1701a00 <line:270:5, line:271:14>
|   | |-OpaqueValueExpr 0x1bdf17019e8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1bdf17019d0 <col:9, col:14> 'err' 0x1bdf1701980
|   |-IfStmt 0x1bdf1701a68 <line:273:5, line:274:14>
|   | |-OpaqueValueExpr 0x1bdf1701a50 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1bdf1701a38 <col:9, col:14> 'err' 0x1bdf1701980
|   |-CompoundStmt 0x1bdf170dd28 <line:280:5, line:369:5>
|   | |-IfStmt 0x1bdf170d1f8 <line:340:9, line:341:18>
|   | | |-OpaqueValueExpr 0x1bdf170d1e0 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x1bdf170d1c8 <col:13, col:18> 'err' 0x1bdf1701980
|   | |-IfStmt 0x1bdf170d5f8 <line:347:9, line:350:18> has_else
|   | | |-OpaqueValueExpr 0x1bdf170d5e0 <<invalid sloc>> '_Bool'
|   | | |-NullStmt 0x1bdf170d5d8 <line:348:13>
|   | | `-IfStmt 0x1bdf170d5c0 <line:349:14, line:350:18>
|   | |   |-OpaqueValueExpr 0x1bdf170d5a8 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x1bdf170d590 <col:13, col:18> 'err' 0x1bdf1701980
|   | |-IfStmt 0x1bdf170d760 <line:351:9, line:352:18>
|   | | |-OpaqueValueExpr 0x1bdf170d748 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x1bdf170d730 <col:13, col:18> 'err' 0x1bdf1701980
|   | |-IfStmt 0x1bdf170dab8 <line:353:9, line:360:9> has_else
|   | | |-OpaqueValueExpr 0x1bdf170daa0 <<invalid sloc>> '_Bool'
|   | | |-CompoundStmt 0x1bdf170d918 <line:353:30, line:356:9>
|   | | | `-IfStmt 0x1bdf170d900 <line:354:13, line:355:22>
|   | | |   |-OpaqueValueExpr 0x1bdf170d8e8 <<invalid sloc>> '_Bool'
|   | | |   `-GotoStmt 0x1bdf170d8d0 <col:17, col:22> 'err' 0x1bdf1701980
|   | | `-CompoundStmt 0x1bdf170da88 <line:356:16, line:360:9>
|   | |   `-IfStmt 0x1bdf170da70 <line:358:13, line:359:22>
|   | |     |-OpaqueValueExpr 0x1bdf170da58 <<invalid sloc>> '_Bool'
|   | |     `-GotoStmt 0x1bdf170da40 <col:17, col:22> 'err' 0x1bdf1701980
|   | `-IfStmt 0x1bdf170dc20 <line:361:9, line:362:18>
|   |   |-OpaqueValueExpr 0x1bdf170dc08 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x1bdf170dbf0 <col:13, col:18> 'err' 0x1bdf1701980
|   |-IfStmt 0x1bdf170ddf8 <line:393:5, line:394:14>
|   | |-OpaqueValueExpr 0x1bdf170dde0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1bdf170ddc8 <col:9, col:14> 'err' 0x1bdf1701980
|   |-IfStmt 0x1bdf170df50 <line:395:5, line:396:14>
|   | |-OpaqueValueExpr 0x1bdf170df38 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1bdf170df20 <col:9, col:14> 'err' 0x1bdf1701980
|   |-BinaryOperator 0x1bdf170b178 <line:403:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x1bdf170b130 <col:5> 'int' lvalue Var 0x1bdf1701708 'ret' 'int'
|   | `-IntegerLiteral 0x1bdf170b150 <col:11> 'int' 1
|   |-LabelStmt 0x1bdf170b1c0 <line:404:2, col:5> 'err'
|   | `-NullStmt 0x1bdf170b1b8 <col:5>
|   `-ReturnStmt 0x1bdf170b210 <line:406:5, col:12>
|     `-ImplicitCastExpr 0x1bdf170b1f8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1bdf170b1d8 <col:12> 'int' lvalue Var 0x1bdf1701708 'ret' 'int'
|-FunctionDecl 0x1bdf170b3f0 <line:409:1, line:424:1> line:409:14 invalid BN_MONT_CTX_copy 'int *(int *, int *)'
| |-ParmVarDecl 0x1bdf170b298 <col:31, col:44> col:44 invalid to 'int *'
| |-ParmVarDecl 0x1bdf170b318 <col:48, col:61> col:61 invalid from 'int *'
| `-CompoundStmt 0x1bdf170b5b8 <line:410:1, line:424:1>
`-FunctionDecl 0x1bdf170b890 <line:426:1, line:462:1> line:426:14 invalid BN_MONT_CTX_set_locked 'int *(int **, int *, const int *, int *)'
  |-ParmVarDecl 0x1bdf170b618 <col:37, col:51> col:51 invalid pmont 'int **'
  |-ParmVarDecl 0x1bdf170b698 <col:58, col:73> col:73 invalid lock 'int *'
  |-ParmVarDecl 0x1bdf170b718 <line:427:37, col:51> col:51 invalid mod 'const int *'
  |-ParmVarDecl 0x1bdf170b798 <col:56, col:64> col:64 invalid ctx 'int *'
  `-CompoundStmt 0x1bdf170bd50 <line:428:1, line:462:1>
    |-IfStmt 0x1bdf170bbb0 <line:448:5, line:451:5>
    | |-OpaqueValueExpr 0x1bdf170bb98 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x1bdf170bb88 <line:448:42, line:451:5>
    `-IfStmt 0x1bdf170bd08 <line:455:5, line:459:9> has_else
      |-OpaqueValueExpr 0x1bdf170bcf0 <<invalid sloc>> '_Bool'
      |-CompoundStmt 0x1bdf170bcd8 <line:455:17, line:458:5>
      `-NullStmt 0x1bdf170bce8 <line:459:9>
