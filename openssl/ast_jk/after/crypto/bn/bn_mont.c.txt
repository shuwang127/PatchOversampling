TranslationUnitDecl 0x20462c90318 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x20462c90bb0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x20462c908b0 '__int128'
|-TypedefDecl 0x20462c90c20 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x20462c908d0 'unsigned __int128'
|-TypedefDecl 0x20462c90f58 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x20462c90d10 'struct __NSConstantString_tag'
|   `-Record 0x20462c90c78 '__NSConstantString_tag'
|-TypedefDecl 0x20462c90fc8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x20462c904f0 'unsigned long long'
|-TypedefDecl 0x20462c91060 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x20462c91020 'char *'
|   `-BuiltinType 0x20462c903b0 'char'
|-TypedefDecl 0x20462c910d0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x20462c91020 'char *'
|   `-BuiltinType 0x20462c903b0 'char'
|-FunctionDecl 0x2046466ae60 <.//openssl//file_jk/after\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x20462c91170 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x20462c911f0 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x20462c91270 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x2046466ad60 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x2046466b168 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x2046466af38 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x2046466afb8 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x2046466b038 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x2046466b0b8 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x2046466b428 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x2046466b240 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x2046466b2c0 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x2046466b340 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x2046466b6e0 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x2046466b4f8 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x2046466b578 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x2046466b5f8 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x2046466ba30 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x2046466b7b0 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x2046466b830 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x2046466b8b0 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x2046466b930 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x20464664d00 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x2046466bb08 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x2046466bb88 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x2046466bc08 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x2046466bc88 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x20464664dc0 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x20464664e98 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x20464664f08 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x20464664f78 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x20464664fe8 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x20464665058 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x204646650b0 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x20464665188 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x204646651f8 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x20464665268 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x204646652d8 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x204646653d0 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x20464665440 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x20464665498 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x20464665568 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x204646655d8 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x20464665648 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x204646656b8 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x20464665728 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x20464665780 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x20464665858 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x204646658c8 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x20464665920 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x20464665c70 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x2046466bff8 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x2046466c0a8 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/after\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x2046466c238 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x2046466c178 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x2046466c388 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x2046466c2f8 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x2046466c4d8 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x2046466c448 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x2046466c898 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x2046466c598 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x2046466c618 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x2046466c698 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x2046466c718 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x2046466c798 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x2046466cb58 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x2046466c978 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x2046466c9f8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x2046466ca78 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x2046466ee40 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x2046466cc28 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x2046466cca8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x2046466eda0 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x2046466f188 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x2046466ef10 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x2046466ef90 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x2046466f010 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x2046466f090 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x2046466f3b8 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x2046466f260 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x2046466f2e0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x2046466f598 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x2046466f480 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x2046466f500 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x2046466f850 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x2046466f660 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x2046466f6e0 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x2046466f760 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x2046466fba0 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x2046466f920 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x2046466f9a0 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x2046466fa20 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x2046466faa0 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x2046467d748 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x2046466fc78 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x2046466fcf8 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x2046467d420 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x2046467d4a0 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x2046467d520 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x2046467d5a0 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x2046467d620 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x2046467dbf8 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x2046467d838 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x2046467d8b8 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x2046467d938 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x2046467d9b8 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x2046467da38 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x2046467dab8 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x2046467db38 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x2046467df10 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x2046467dce8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x2046467dd68 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x2046467dde8 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x2046467de68 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x2046467e258 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x2046467dfe8 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x2046467e068 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x2046467e0e8 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x2046467e168 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x20464682688 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x2046467e330 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x2046467e3b0 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x20464682488 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x20464682508 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x20464682588 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x20464682af8 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x20464682768 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x204646827e8 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x20464682868 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x204646828e8 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x20464682968 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x204646829e8 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x20464682ef0 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x20464682be0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x20464682c60 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x20464682ce0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x20464682d60 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x20464682de0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x20464683288 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x20464682fd0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x20464683050 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x204646830d0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x20464683150 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x204646831d0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x2046467e6d0 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x20464683368 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x204646833e8 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x2046467e430 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x2046467e4b0 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x2046467e530 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x2046467e5b0 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x2046467eac0 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x2046467e7b8 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x2046467e838 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x2046467e8b8 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x2046467e938 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x2046467e9b8 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x2046467eeb0 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x2046467eba0 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x2046467ec20 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x2046467eca0 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x2046467ed20 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x2046467eda0 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x2046467f180 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x2046467ef90 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x2046467f010 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x2046467f090 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x20464683480 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x2046467f250 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x2046467f2d0 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x2046467f350 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x20464683550 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-FunctionDecl 0x204646838e0 <.//openssl//file_jk/after\crypto\bn\bn_mont.c:26:1, line:35:1> line:26:5 invalid BN_mod_mul_montgomery 'int (int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x204646835d0 <col:27, col:35> col:35 invalid r 'int *'
| |-ParmVarDecl 0x20464683650 <col:38, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x204646836d0 <col:55, col:69> col:69 invalid b 'const int *'
| |-ParmVarDecl 0x20464683750 <line:27:27, col:40> col:40 invalid mont 'int *'
| |-ParmVarDecl 0x204646837d0 <col:46, col:54> col:54 invalid ctx 'int *'
| `-CompoundStmt 0x20464683d58 <line:28:1, line:35:1>
|   |-DeclStmt 0x20464683bc8 <line:29:5, col:56>
|   | `-VarDecl 0x204646839d8 <col:5, col:9> col:9 used ret 'int'
|   |-NullStmt 0x20464683cf0 <line:32:20>
|   `-ReturnStmt 0x20464683d48 <line:34:5, col:12>
|     `-ImplicitCastExpr 0x20464683d30 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x20464683cf8 <col:12> 'int' lvalue Var 0x204646839d8 'ret' 'int'
|-FunctionDecl 0x20464684050 <line:37:1, line:85:1> line:37:5 invalid bn_mul_mont_fixed_top 'int (int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x20464683d98 <col:27, col:35> col:35 invalid r 'int *'
| |-ParmVarDecl 0x20464683e18 <col:38, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x20464683e98 <col:55, col:69> col:69 invalid b 'const int *'
| |-ParmVarDecl 0x20464683f18 <line:38:27, col:40> col:40 invalid mont 'int *'
| |-ParmVarDecl 0x20464683f98 <col:46, col:54> col:54 invalid ctx 'int *'
| `-CompoundStmt 0x20464681cc0 <line:39:1, line:85:1>
|   |-DeclStmt 0x204646841d8 <line:41:5, col:16>
|   | `-VarDecl 0x20464684148 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x204646841b0 <col:15> 'int' 0
|   |-DeclStmt 0x20464684270 <line:42:5, col:26>
|   | `-VarDecl 0x20464684208 <col:5, col:9> col:9 used num 'int'
|   |-IfStmt 0x20464684370 <line:57:5, line:58:16>
|   | |-OpaqueValueExpr 0x20464684358 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x20464684348 <col:9, col:16>
|   |   `-IntegerLiteral 0x20464684320 <col:16> 'int' 0
|   |-IfStmt 0x20464681610 <line:62:5, line:63:14>
|   | |-OpaqueValueExpr 0x204646815f8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x204646815e0 <col:9, col:14> 'err' 0x20464681590
|   |-NullStmt 0x20464681628 <line:65:22>
|   |-IfStmt 0x20464681928 <line:66:5, line:72:5> has_else
|   | |-OpaqueValueExpr 0x20464681910 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x20464681788 <line:66:17, line:69:5>
|   | | `-IfStmt 0x20464681770 <line:67:9, line:68:18>
|   | |   |-OpaqueValueExpr 0x20464681758 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x20464681740 <col:13, col:18> 'err' 0x20464681590
|   | `-CompoundStmt 0x204646818f8 <line:69:12, line:72:5>
|   |   `-IfStmt 0x204646818e0 <line:70:9, line:71:18>
|   |     |-OpaqueValueExpr 0x204646818c8 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x204646818b0 <col:13, col:18> 'err' 0x20464681590
|   |-IfStmt 0x20464681a90 <line:75:5, line:76:14>
|   | |-OpaqueValueExpr 0x20464681a78 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x20464681a60 <col:9, col:14> 'err' 0x20464681590
|   |-BinaryOperator 0x20464681b08 <line:81:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x20464681aa8 <col:5> 'int' lvalue Var 0x20464684148 'ret' 'int'
|   | `-IntegerLiteral 0x20464681ae0 <col:11> 'int' 1
|   |-LabelStmt 0x20464681c40 <line:82:2, col:5> 'err'
|   | `-NullStmt 0x20464681c38 <col:5>
|   `-ReturnStmt 0x20464681cb0 <line:84:5, col:16>
|     `-ImplicitCastExpr 0x20464681c98 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x20464681c78 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x20464681c58 <col:13> 'int' lvalue Var 0x20464684148 'ret' 'int'
|-FunctionDecl 0x20464681f20 <line:88:1, line:158:1> line:88:12 invalid bn_from_montgomery_word 'int (int *, int *, int *)' static
| |-ParmVarDecl 0x20464681d38 <col:36, col:44> col:44 invalid ret 'int *'
| |-ParmVarDecl 0x20464681db8 <col:49, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x20464681e38 <col:60, col:73> col:73 invalid mont 'int *'
| `-CompoundStmt 0x20464685f20 <line:89:1, line:158:1>
|   |-DeclStmt 0x20464682190 <line:92:5, col:19>
|   | |-VarDecl 0x20464682008 <col:5, col:9> col:9 used nl 'int'
|   | |-VarDecl 0x20464682088 <col:5, col:13> col:13 used max 'int'
|   | `-VarDecl 0x20464682108 <col:5, col:18> col:18 used i 'int'
|   |-DeclStmt 0x20464682228 <line:93:5, col:22>
|   | `-VarDecl 0x204646821c0 <col:5, col:18> col:18 used rtop 'unsigned int'
|   |-IfStmt 0x20464682390 <line:97:5, line:100:5>
|   | |-BinaryOperator 0x204646822d8 <line:97:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x204646822c0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20464682278 <col:9> 'int' lvalue Var 0x20464682008 'nl' 'int'
|   | | `-IntegerLiteral 0x20464682298 <col:15> 'int' 0
|   | `-CompoundStmt 0x20464682378 <col:18, line:100:5>
|   |   `-ReturnStmt 0x20464682368 <line:99:9, col:18>
|   |     `-ParenExpr 0x20464682348 <col:16, col:18> 'int'
|   |       `-IntegerLiteral 0x20464682320 <col:17> 'int' 1
|   |-BinaryOperator 0x204646854c0 <line:102:5, col:18> 'int' '='
|   | |-DeclRefExpr 0x204646823a8 <col:5> 'int' lvalue Var 0x20464682088 'max' 'int'
|   | `-ParenExpr 0x204646854a0 <col:11, col:18> 'int'
|   |   `-BinaryOperator 0x20464682440 <col:12, col:16> 'int' '*'
|   |     |-IntegerLiteral 0x204646823e0 <col:12> 'int' 2
|   |     `-ImplicitCastExpr 0x20464682428 <col:16> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x20464682408 <col:16> 'int' lvalue Var 0x20464682008 'nl' 'int'
|   |-IfStmt 0x20464685680 <line:103:5, line:104:18>
|   | |-OpaqueValueExpr 0x20464685668 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x20464685658 <col:9, col:18>
|   |   `-ParenExpr 0x20464685638 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x20464685610 <col:17> 'int' 0
|   |-ForStmt 0x20464685848 <line:110:5, line:113:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x204646857c0 <line:110:32, col:36> 'int' '<'
|   | | |-ImplicitCastExpr 0x20464685790 <col:32> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20464685750 <col:32> 'int' lvalue Var 0x20464682108 'i' 'int'
|   | | `-ImplicitCastExpr 0x204646857a8 <col:36> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20464685770 <col:36> 'int' lvalue Var 0x20464682088 'max' 'int'
|   | |-UnaryOperator 0x20464685800 <col:41, col:42> 'int' postfix '++'
|   | | `-DeclRefExpr 0x204646857e0 <col:41> 'int' lvalue Var 0x20464682108 'i' 'int'
|   | `-CompoundStmt 0x20464685838 <col:46, line:113:5>
|   |-ForStmt 0x20464685b20 <line:124:5, line:130:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x204646859f0 <line:124:28, col:32> 'int' '<'
|   | | |-ImplicitCastExpr 0x204646859c0 <col:28> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20464685980 <col:28> 'int' lvalue Var 0x20464682108 'i' 'int'
|   | | `-ImplicitCastExpr 0x204646859d8 <col:32> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x204646859a0 <col:32> 'int' lvalue Var 0x20464682008 'nl' 'int'
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x20464685b10 <col:47, line:130:5>
|   |-IfStmt 0x20464685c08 <line:132:5, line:133:18>
|   | |-OpaqueValueExpr 0x20464685bf0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x20464685be0 <col:9, col:18>
|   |   `-ParenExpr 0x20464685bc0 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x20464685b98 <col:17> 'int' 0
|   |-ForStmt 0x20464685e90 <line:152:5, line:155:5>
|   | |-BinaryOperator 0x20464685cf0 <line:152:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x20464685ca8 <col:10> 'int' lvalue Var 0x20464682108 'i' 'int'
|   | | `-IntegerLiteral 0x20464685cc8 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x20464685d80 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x20464685d50 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20464685d10 <col:17> 'int' lvalue Var 0x20464682108 'i' 'int'
|   | | `-ImplicitCastExpr 0x20464685d68 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20464685d30 <col:21> 'int' lvalue Var 0x20464682008 'nl' 'int'
|   | |-UnaryOperator 0x20464685dc0 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x20464685da0 <col:25> 'int' lvalue Var 0x20464682108 'i' 'int'
|   | `-CompoundStmt 0x20464685e80 <col:30, line:155:5>
|   `-ReturnStmt 0x20464685f10 <line:157:5, col:14>
|     `-ParenExpr 0x20464685ef0 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x20464685ec8 <col:13> 'int' 1
|-FunctionDecl 0x20464686210 <line:161:1, line:171:1> line:161:5 invalid BN_from_montgomery 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x20464685f98 <col:24, col:32> col:32 invalid ret 'int *'
| |-ParmVarDecl 0x20464686018 <col:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x20464686098 <col:54, col:67> col:67 invalid mont 'int *'
| |-ParmVarDecl 0x20464686118 <line:162:24, col:32> col:32 invalid ctx 'int *'
| `-CompoundStmt 0x20464686558 <line:163:1, line:171:1>
|   |-DeclStmt 0x20464686368 <line:164:5, col:13>
|   | `-VarDecl 0x20464686300 <col:5, col:9> col:9 used retn 'int'
|   |-NullStmt 0x20464686508 <line:168:22>
|   `-ReturnStmt 0x20464686548 <line:170:5, col:12>
|     `-ImplicitCastExpr 0x20464686530 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x20464686510 <col:12> 'int' lvalue Var 0x20464686300 'retn' 'int'
|-FunctionDecl 0x204646867c8 <line:173:1, line:219:1> line:173:5 invalid bn_from_mont_fixed_top 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x20464686598 <col:28, col:36> col:36 invalid ret 'int *'
| |-ParmVarDecl 0x20464686618 <col:41, col:55> col:55 invalid a 'const int *'
| |-ParmVarDecl 0x20464686698 <col:58, col:71> col:71 invalid mont 'int *'
| |-ParmVarDecl 0x20464686718 <line:174:28, col:36> col:36 invalid ctx 'int *'
| `-CompoundStmt 0x20464686bb0 <line:175:1, line:219:1>
|   |-DeclStmt 0x20464686948 <line:176:5, col:17>
|   | `-VarDecl 0x204646868b8 <col:5, col:16> col:9 used retn 'int' cinit
|   |   `-IntegerLiteral 0x20464686920 <col:16> 'int' 0
|   |-IfStmt 0x20464686b10 <line:181:5, line:183:5>
|   | |-OpaqueValueExpr 0x20464686af8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x20464686ae8 <line:181:49, line:183:5>
|   `-ReturnStmt 0x20464686ba0 <line:218:5, col:17>
|     `-ImplicitCastExpr 0x20464686b88 <col:12, col:17> 'int' <LValueToRValue>
|       `-ParenExpr 0x20464686b68 <col:12, col:17> 'int' lvalue
|         `-DeclRefExpr 0x20464686b48 <col:13> 'int' lvalue Var 0x204646868b8 'retn' 'int'
|-FunctionDecl 0x20464686e20 <line:221:1, line:225:1> line:221:5 invalid bn_to_mont_fixed_top 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x20464686bf0 <col:26, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x20464686c70 <col:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x20464686cf0 <col:54, col:67> col:67 invalid mont 'int *'
| |-ParmVarDecl 0x20464686d70 <line:222:26, col:34> col:34 invalid ctx 'int *'
| `-CompoundStmt 0x20464686ef8 <line:223:1, line:225:1>
|-FunctionDecl 0x20464686fd0 <line:227:1, line:237:1> line:227:14 invalid BN_MONT_CTX_new 'int *(void)'
| `-CompoundStmt 0x20464687198 <line:228:1, line:237:1>
|-FunctionDecl 0x20464687250 <line:239:1, line:247:1> line:239:6 invalid BN_MONT_CTX_init 'void (int *)'
| |-ParmVarDecl 0x204646871c0 <col:23, col:36> col:36 invalid ctx 'int *'
| `-CompoundStmt 0x204646873d8 <line:240:1, line:247:1>
|-FunctionDecl 0x20464684490 <line:249:1, line:259:1> line:249:6 invalid BN_MONT_CTX_free 'void (int *)'
| |-ParmVarDecl 0x20464687400 <col:23, col:36> col:36 invalid mont 'int *'
| `-CompoundStmt 0x204646847f0 <line:250:1, line:259:1>
|   `-IfStmt 0x20464684578 <line:251:5, line:252:9>
|     |-OpaqueValueExpr 0x20464684560 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x20464684550 <col:9>
|-FunctionDecl 0x20464684a10 <line:261:1, line:407:1> line:261:5 invalid BN_MONT_CTX_set 'int (int *, const int *, int *)'
| |-ParmVarDecl 0x20464684820 <col:21, col:34> col:34 invalid mont 'int *'
| |-ParmVarDecl 0x204646848a0 <col:40, col:54> col:54 invalid mod 'const int *'
| |-ParmVarDecl 0x20464684920 <col:59, col:67> col:67 invalid ctx 'int *'
| `-CompoundStmt 0x20464688630 <line:262:1, line:407:1>
|   |-DeclStmt 0x20464684c20 <line:263:5, col:19>
|   | |-VarDecl 0x20464684af8 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x20464684b78 <col:5, col:18> col:12 used ret 'int' cinit
|   |   `-IntegerLiteral 0x20464684be0 <col:18> 'int' 0
|   |-IfStmt 0x20464684d98 <line:266:5, line:267:16>
|   | |-OpaqueValueExpr 0x20464684d80 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x20464684d70 <col:9, col:16>
|   |   `-IntegerLiteral 0x20464684d48 <col:16> 'int' 0
|   |-IfStmt 0x20464684e70 <line:270:5, line:271:14>
|   | |-OpaqueValueExpr 0x20464684e58 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x20464684e40 <col:9, col:14> 'err' 0x20464684df0
|   |-IfStmt 0x20464684ed8 <line:273:5, line:274:14>
|   | |-OpaqueValueExpr 0x20464684ec0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x20464684ea8 <col:9, col:14> 'err' 0x20464684df0
|   |-CompoundStmt 0x20464680088 <line:280:5, line:369:5>
|   | |-IfStmt 0x2046467f558 <line:340:9, line:341:18>
|   | | |-OpaqueValueExpr 0x2046467f540 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x2046467f528 <col:13, col:18> 'err' 0x20464684df0
|   | |-IfStmt 0x2046467f958 <line:347:9, line:350:18> has_else
|   | | |-OpaqueValueExpr 0x2046467f940 <<invalid sloc>> '_Bool'
|   | | |-NullStmt 0x2046467f938 <line:348:13>
|   | | `-IfStmt 0x2046467f920 <line:349:14, line:350:18>
|   | |   |-OpaqueValueExpr 0x2046467f908 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x2046467f8f0 <col:13, col:18> 'err' 0x20464684df0
|   | |-IfStmt 0x2046467fac0 <line:351:9, line:352:18>
|   | | |-OpaqueValueExpr 0x2046467faa8 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x2046467fa90 <col:13, col:18> 'err' 0x20464684df0
|   | |-IfStmt 0x2046467fe18 <line:353:9, line:360:9> has_else
|   | | |-OpaqueValueExpr 0x2046467fe00 <<invalid sloc>> '_Bool'
|   | | |-CompoundStmt 0x2046467fc78 <line:353:30, line:356:9>
|   | | | `-IfStmt 0x2046467fc60 <line:354:13, line:355:22>
|   | | |   |-OpaqueValueExpr 0x2046467fc48 <<invalid sloc>> '_Bool'
|   | | |   `-GotoStmt 0x2046467fc30 <col:17, col:22> 'err' 0x20464684df0
|   | | `-CompoundStmt 0x2046467fde8 <line:356:16, line:360:9>
|   | |   `-IfStmt 0x2046467fdd0 <line:358:13, line:359:22>
|   | |     |-OpaqueValueExpr 0x2046467fdb8 <<invalid sloc>> '_Bool'
|   | |     `-GotoStmt 0x2046467fda0 <col:17, col:22> 'err' 0x20464684df0
|   | `-IfStmt 0x2046467ff80 <line:361:9, line:362:18>
|   |   |-OpaqueValueExpr 0x2046467ff68 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x2046467ff50 <col:13, col:18> 'err' 0x20464684df0
|   |-IfStmt 0x20464680158 <line:393:5, line:394:14>
|   | |-OpaqueValueExpr 0x20464680140 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x20464680128 <col:9, col:14> 'err' 0x20464684df0
|   |-IfStmt 0x204646802b0 <line:395:5, line:396:14>
|   | |-OpaqueValueExpr 0x20464680298 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x20464680280 <col:9, col:14> 'err' 0x20464684df0
|   |-BinaryOperator 0x20464688588 <line:403:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x20464688540 <col:5> 'int' lvalue Var 0x20464684b78 'ret' 'int'
|   | `-IntegerLiteral 0x20464688560 <col:11> 'int' 1
|   |-LabelStmt 0x204646885d0 <line:404:2, col:5> 'err'
|   | `-NullStmt 0x204646885c8 <col:5>
|   `-ReturnStmt 0x20464688620 <line:406:5, col:12>
|     `-ImplicitCastExpr 0x20464688608 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x204646885e8 <col:12> 'int' lvalue Var 0x20464684b78 'ret' 'int'
|-FunctionDecl 0x20464688800 <line:409:1, line:424:1> line:409:14 invalid BN_MONT_CTX_copy 'int *(int *, int *)'
| |-ParmVarDecl 0x204646886a8 <col:31, col:44> col:44 invalid to 'int *'
| |-ParmVarDecl 0x20464688728 <col:48, col:61> col:61 invalid from 'int *'
| `-CompoundStmt 0x204646889c8 <line:410:1, line:424:1>
`-FunctionDecl 0x20464688ca0 <line:426:1, line:462:1> line:426:14 invalid BN_MONT_CTX_set_locked 'int *(int **, int *, const int *, int *)'
  |-ParmVarDecl 0x20464688a28 <col:37, col:51> col:51 invalid pmont 'int **'
  |-ParmVarDecl 0x20464688aa8 <col:58, col:73> col:73 invalid lock 'int *'
  |-ParmVarDecl 0x20464688b28 <line:427:37, col:51> col:51 invalid mod 'const int *'
  |-ParmVarDecl 0x20464688ba8 <col:56, col:64> col:64 invalid ctx 'int *'
  `-CompoundStmt 0x20464689160 <line:428:1, line:462:1>
    |-IfStmt 0x20464688fc0 <line:448:5, line:451:5>
    | |-OpaqueValueExpr 0x20464688fa8 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x20464688f98 <line:448:42, line:451:5>
    `-IfStmt 0x20464689118 <line:455:5, line:459:9> has_else
      |-OpaqueValueExpr 0x20464689100 <<invalid sloc>> '_Bool'
      |-CompoundStmt 0x204646890e8 <line:455:17, line:458:5>
      `-NullStmt 0x204646890f8 <line:459:9>
