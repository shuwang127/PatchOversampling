TranslationUnitDecl 0x21cb74d2678 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x21cb74d2f10 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x21cb74d2c10 '__int128'
|-TypedefDecl 0x21cb74d2f80 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x21cb74d2c30 'unsigned __int128'
|-TypedefDecl 0x21cb74d32b8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x21cb74d3070 'struct __NSConstantString_tag'
|   `-Record 0x21cb74d2fd8 '__NSConstantString_tag'
|-TypedefDecl 0x21cb74d3328 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x21cb74d2850 'unsigned long long'
|-TypedefDecl 0x21cb74d33c0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x21cb74d3380 'char *'
|   `-BuiltinType 0x21cb74d2710 'char'
|-TypedefDecl 0x21cb74d3430 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x21cb74d3380 'char *'
|   `-BuiltinType 0x21cb74d2710 'char'
|-VarDecl 0x21cb74d3570 <.//openssl//file_jk/after\crypto\cast/cast_lcl.h:183:1, <invalid sloc>> col:24 invalid CAST_S_table0 'const int [256]' extern
|-VarDecl 0x21cb8dbac20 <line:184:1, <invalid sloc>> col:24 invalid CAST_S_table1 'const int [256]' extern
|-VarDecl 0x21cb8dbacf0 <line:185:1, <invalid sloc>> col:24 invalid CAST_S_table2 'const int [256]' extern
|-VarDecl 0x21cb8dbadc0 <line:186:1, <invalid sloc>> col:24 invalid CAST_S_table3 'const int [256]' extern
|-VarDecl 0x21cb8dbae90 <line:187:1, <invalid sloc>> col:24 invalid CAST_S_table4 'const int [256]' extern
|-VarDecl 0x21cb8dbaf60 <line:188:1, <invalid sloc>> col:24 invalid CAST_S_table5 'const int [256]' extern
|-VarDecl 0x21cb8dbb030 <line:189:1, <invalid sloc>> col:24 invalid CAST_S_table6 'const int [256]' extern
|-VarDecl 0x21cb8dbb100 <line:190:1, <invalid sloc>> col:24 invalid CAST_S_table7 'const int [256]' extern
`-FunctionDecl 0x21cb8dbb638 <.//openssl//file_jk/after\crypto\cast\c_cfb64.c:19:1, line:74:1> line:19:6 invalid CAST_cfb64_encrypt 'void (const unsigned char *, unsigned char *, long, const int *, unsigned char *, int *, int)'
  |-ParmVarDecl 0x21cb8dbb1b0 <col:25, col:46> col:46 used in 'const unsigned char *'
  |-ParmVarDecl 0x21cb8dbb260 <col:50, col:65> col:65 used out 'unsigned char *'
  |-ParmVarDecl 0x21cb8dbb2e0 <line:20:25, col:30> col:30 used length 'long'
  |-ParmVarDecl 0x21cb8dbb360 <col:38, col:54> col:54 invalid schedule 'const int *'
  |-ParmVarDecl 0x21cb8dbb3e0 <line:21:25, col:40> col:40 used ivec 'unsigned char *'
  |-ParmVarDecl 0x21cb8dbb490 <col:46, col:51> col:51 used num 'int *'
  |-ParmVarDecl 0x21cb8dbb510 <col:56, col:60> col:60 used enc 'int'
  `-CompoundStmt 0x21cb8dc15e0 <line:22:1, line:74:1>
    |-DeclStmt 0x21cb8dbb7a8 <line:23:5, col:33>
    | `-VarDecl 0x21cb8dbb740 <col:5, col:24> col:24 invalid v0 'int' register
    |-DeclStmt 0x21cb8dbb8c0 <line:24:5, col:26>
    | `-VarDecl 0x21cb8dbb7d8 <col:5, col:23> col:18 used n 'int' register cinit
    |   `-ImplicitCastExpr 0x21cb8dbb8a8 <col:22, col:23> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x21cb8dbb890 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x21cb8dbb878 <col:23> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x21cb8dbb840 <col:23> 'int *' lvalue ParmVar 0x21cb8dbb490 'num' 'int *'
    |-DeclStmt 0x21cb8dbb9a8 <line:25:5, col:29>
    | `-VarDecl 0x21cb8dbb8f0 <col:5, col:23> col:19 used l 'long' register cinit
    |   `-ImplicitCastExpr 0x21cb8dbb990 <col:23> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x21cb8dbb958 <col:23> 'long' lvalue ParmVar 0x21cb8dbb2e0 'length' 'long'
    |-DeclStmt 0x21cb8dbbb60 <line:27:5, col:29>
    | |-VarDecl 0x21cb8dbb9d8 <col:5, col:20> col:20 used iv 'unsigned char *'
    | |-VarDecl 0x21cb8dbba58 <col:5, col:24> col:24 used c 'unsigned char'
    | `-VarDecl 0x21cb8dbbad8 <col:5, col:27> col:27 used cc 'unsigned char'
    |-BinaryOperator 0x21cb8dbbc00 <line:29:5, col:10> 'unsigned char *' '='
    | |-DeclRefExpr 0x21cb8dbbb78 <col:5> 'unsigned char *' lvalue Var 0x21cb8dbb9d8 'iv' 'unsigned char *'
    | `-ImplicitCastExpr 0x21cb8dbbbe8 <col:10> 'unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x21cb8dbbbb0 <col:10> 'unsigned char *' lvalue ParmVar 0x21cb8dbb3e0 'ivec' 'unsigned char *'
    |-IfStmt 0x21cb8dc1400 <line:30:5, line:71:5> has_else
    | |-ImplicitCastExpr 0x21cb8dbcc78 <line:30:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x21cb8dbcc40 <col:9> 'int' lvalue ParmVar 0x21cb8dbb510 'enc' 'int'
    | |-CompoundStmt 0x21cb8dbe8c8 <col:14, line:50:5>
    | | `-WhileStmt 0x21cb8dbe8b0 <line:31:9, line:49:9>
    | |   |-UnaryOperator 0x21cb8dbccc8 <line:31:16, col:17> 'long' postfix '--'
    | |   | `-DeclRefExpr 0x21cb8dbcc90 <col:16> 'long' lvalue Var 0x21cb8dbb8f0 'l' 'long'
    | |   `-CompoundStmt 0x21cb8dbe878 <col:21, line:49:9>
    | |     |-IfStmt 0x21cb8dbe368 <line:32:13, line:44:13>
    | |     | |-BinaryOperator 0x21cb8dbcd58 <line:32:17, col:22> 'int' '=='
    | |     | | |-ImplicitCastExpr 0x21cb8dbcd40 <col:17> 'int' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x21cb8dbcce0 <col:17> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
    | |     | | `-IntegerLiteral 0x21cb8dbcd18 <col:22> 'int' 0
    | |     | `-CompoundStmt 0x21cb8dbe348 <col:25, line:44:13>
    | |     |   |-BinaryOperator 0x21cb8dbdb90 <line:38:17, col:22> 'unsigned char *' '='
    | |     |   | |-DeclRefExpr 0x21cb8dbdb38 <col:17> 'unsigned char *' lvalue Var 0x21cb8dbb9d8 'iv' 'unsigned char *'
    | |     |   | `-ImplicitCastExpr 0x21cb8dbdb78 <col:22> 'unsigned char *' <LValueToRValue>
    | |     |   |   `-DeclRefExpr 0x21cb8dbdb58 <col:22> 'unsigned char *' lvalue ParmVar 0x21cb8dbb3e0 'ivec' 'unsigned char *'
    | |     |   `-BinaryOperator 0x21cb8dbe328 <line:43:17, col:22> 'unsigned char *' '='
    | |     |     |-DeclRefExpr 0x21cb8dbe2d0 <col:17> 'unsigned char *' lvalue Var 0x21cb8dbb9d8 'iv' 'unsigned char *'
    | |     |     `-ImplicitCastExpr 0x21cb8dbe310 <col:22> 'unsigned char *' <LValueToRValue>
    | |     |       `-DeclRefExpr 0x21cb8dbe2f0 <col:22> 'unsigned char *' lvalue ParmVar 0x21cb8dbb3e0 'ivec' 'unsigned char *'
    | |     |-BinaryOperator 0x21cb8dbe568 <line:45:13, col:31> 'unsigned char' '='
    | |     | |-DeclRefExpr 0x21cb8dbe380 <col:13> 'unsigned char' lvalue Var 0x21cb8dbba58 'c' 'unsigned char'
    | |     | `-ImplicitCastExpr 0x21cb8dbe550 <col:17, col:31> 'unsigned char' <IntegralCast>
    | |     |   `-BinaryOperator 0x21cb8dbe530 <col:17, col:31> 'int' '^'
    | |     |     |-ImplicitCastExpr 0x21cb8dbe4e8 <col:17, col:23> 'int' <IntegralCast>
    | |     |     | `-ImplicitCastExpr 0x21cb8dbe4d0 <col:17, col:23> 'unsigned char' <LValueToRValue>
    | |     |     |   `-UnaryOperator 0x21cb8dbe428 <col:17, col:23> 'const unsigned char' lvalue prefix '*' cannot overflow
    | |     |     |     `-ParenExpr 0x21cb8dbe408 <col:18, col:23> 'const unsigned char *'
    | |     |     |       `-UnaryOperator 0x21cb8dbe3f0 <col:19, col:21> 'const unsigned char *' postfix '++'
    | |     |     |         `-DeclRefExpr 0x21cb8dbe3b8 <col:19> 'const unsigned char *' lvalue ParmVar 0x21cb8dbb1b0 'in' 'const unsigned char *'
    | |     |     `-ImplicitCastExpr 0x21cb8dbe518 <col:27, col:31> 'int' <IntegralCast>
    | |     |       `-ImplicitCastExpr 0x21cb8dbe500 <col:27, col:31> 'unsigned char' <LValueToRValue>
    | |     |         `-ArraySubscriptExpr 0x21cb8dbe4b0 <col:27, col:31> 'unsigned char' lvalue
    | |     |           |-ImplicitCastExpr 0x21cb8dbe480 <col:27> 'unsigned char *' <LValueToRValue>
    | |     |           | `-DeclRefExpr 0x21cb8dbe440 <col:27> 'unsigned char *' lvalue Var 0x21cb8dbb9d8 'iv' 'unsigned char *'
    | |     |           `-ImplicitCastExpr 0x21cb8dbe498 <col:30> 'int' <LValueToRValue>
    | |     |             `-DeclRefExpr 0x21cb8dbe460 <col:30> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
    | |     |-BinaryOperator 0x21cb8dbe648 <line:46:13, col:24> 'unsigned char' '='
    | |     | |-UnaryOperator 0x21cb8dbe5f8 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    | |     | | `-ParenExpr 0x21cb8dbe5d8 <col:14, col:20> 'unsigned char *'
    | |     | |   `-UnaryOperator 0x21cb8dbe5c0 <col:15, col:18> 'unsigned char *' postfix '++'
    | |     | |     `-DeclRefExpr 0x21cb8dbe588 <col:15> 'unsigned char *' lvalue ParmVar 0x21cb8dbb260 'out' 'unsigned char *'
    | |     | `-ImplicitCastExpr 0x21cb8dbe630 <col:24> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x21cb8dbe610 <col:24> 'unsigned char' lvalue Var 0x21cb8dbba58 'c' 'unsigned char'
    | |     |-BinaryOperator 0x21cb8dbe730 <line:47:13, col:21> 'unsigned char' '='
    | |     | |-ArraySubscriptExpr 0x21cb8dbe6d8 <col:13, col:17> 'unsigned char' lvalue
    | |     | | |-ImplicitCastExpr 0x21cb8dbe6a8 <col:13> 'unsigned char *' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x21cb8dbe668 <col:13> 'unsigned char *' lvalue Var 0x21cb8dbb9d8 'iv' 'unsigned char *'
    | |     | | `-ImplicitCastExpr 0x21cb8dbe6c0 <col:16> 'int' <LValueToRValue>
    | |     | |   `-DeclRefExpr 0x21cb8dbe688 <col:16> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
    | |     | `-ImplicitCastExpr 0x21cb8dbe718 <col:21> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x21cb8dbe6f8 <col:21> 'unsigned char' lvalue Var 0x21cb8dbba58 'c' 'unsigned char'
    | |     `-BinaryOperator 0x21cb8dbe858 <line:48:13, col:27> 'int' '='
    | |       |-DeclRefExpr 0x21cb8dbe750 <col:13> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
    | |       `-BinaryOperator 0x21cb8dbe838 <col:17, col:27> 'int' '&'
    | |         |-ParenExpr 0x21cb8dbe7f0 <col:17, col:23> 'int'
    | |         | `-BinaryOperator 0x21cb8dbe7d0 <col:18, col:22> 'int' '+'
    | |         |   |-ImplicitCastExpr 0x21cb8dbe7b8 <col:18> 'int' <LValueToRValue>
    | |         |   | `-DeclRefExpr 0x21cb8dbe770 <col:18> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
    | |         |   `-IntegerLiteral 0x21cb8dbe790 <col:22> 'int' 1
    | |         `-IntegerLiteral 0x21cb8dbe810 <col:27> 'int' 7
    | `-CompoundStmt 0x21cb8dc13e8 <line:50:12, line:71:5>
    |   `-WhileStmt 0x21cb8dc13d0 <line:51:9, line:70:9>
    |     |-UnaryOperator 0x21cb8dbe900 <line:51:16, col:17> 'long' postfix '--'
    |     | `-DeclRefExpr 0x21cb8dbe8e0 <col:16> 'long' lvalue Var 0x21cb8dbb8f0 'l' 'long'
    |     `-CompoundStmt 0x21cb8dc1390 <col:21, line:70:9>
    |       |-IfStmt 0x21cb8dc0e38 <line:52:13, line:64:13>
    |       | |-BinaryOperator 0x21cb8dbe978 <line:52:17, col:22> 'int' '=='
    |       | | |-ImplicitCastExpr 0x21cb8dbe960 <col:17> 'int' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x21cb8dbe918 <col:17> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
    |       | | `-IntegerLiteral 0x21cb8dbe938 <col:22> 'int' 0
    |       | `-CompoundStmt 0x21cb8dc0e18 <col:25, line:64:13>
    |       |   |-BinaryOperator 0x21cb8dbf660 <line:58:17, col:22> 'unsigned char *' '='
    |       |   | |-DeclRefExpr 0x21cb8dbf608 <col:17> 'unsigned char *' lvalue Var 0x21cb8dbb9d8 'iv' 'unsigned char *'
    |       |   | `-ImplicitCastExpr 0x21cb8dbf648 <col:22> 'unsigned char *' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x21cb8dbf628 <col:22> 'unsigned char *' lvalue ParmVar 0x21cb8dbb3e0 'ivec' 'unsigned char *'
    |       |   `-BinaryOperator 0x21cb8dc0df8 <line:63:17, col:22> 'unsigned char *' '='
    |       |     |-DeclRefExpr 0x21cb8dc0da0 <col:17> 'unsigned char *' lvalue Var 0x21cb8dbb9d8 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x21cb8dc0de0 <col:22> 'unsigned char *' <LValueToRValue>
    |       |       `-DeclRefExpr 0x21cb8dc0dc0 <col:22> 'unsigned char *' lvalue ParmVar 0x21cb8dbb3e0 'ivec' 'unsigned char *'
    |       |-BinaryOperator 0x21cb8dc0f10 <line:65:13, col:24> 'unsigned char' '='
    |       | |-DeclRefExpr 0x21cb8dc0e50 <col:13> 'unsigned char' lvalue Var 0x21cb8dbbad8 'cc' 'unsigned char'
    |       | `-ImplicitCastExpr 0x21cb8dc0ef8 <col:18, col:24> 'unsigned char' <LValueToRValue>
    |       |   `-UnaryOperator 0x21cb8dc0ee0 <col:18, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
    |       |     `-ParenExpr 0x21cb8dc0ec0 <col:19, col:24> 'const unsigned char *'
    |       |       `-UnaryOperator 0x21cb8dc0ea8 <col:20, col:22> 'const unsigned char *' postfix '++'
    |       |         `-DeclRefExpr 0x21cb8dc0e88 <col:20> 'const unsigned char *' lvalue ParmVar 0x21cb8dbb1b0 'in' 'const unsigned char *'
    |       |-BinaryOperator 0x21cb8dc0ff8 <line:66:13, col:21> 'unsigned char' '='
    |       | |-DeclRefExpr 0x21cb8dc0f30 <col:13> 'unsigned char' lvalue Var 0x21cb8dbba58 'c' 'unsigned char'
    |       | `-ImplicitCastExpr 0x21cb8dc0fe0 <col:17, col:21> 'unsigned char' <LValueToRValue>
    |       |   `-ArraySubscriptExpr 0x21cb8dc0fc0 <col:17, col:21> 'unsigned char' lvalue
    |       |     |-ImplicitCastExpr 0x21cb8dc0f90 <col:17> 'unsigned char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x21cb8dc0f50 <col:17> 'unsigned char *' lvalue Var 0x21cb8dbb9d8 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x21cb8dc0fa8 <col:20> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x21cb8dc0f70 <col:20> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
    |       |-BinaryOperator 0x21cb8dc10e0 <line:67:13, col:21> 'unsigned char' '='
    |       | |-ArraySubscriptExpr 0x21cb8dc1088 <col:13, col:17> 'unsigned char' lvalue
    |       | | |-ImplicitCastExpr 0x21cb8dc1058 <col:13> 'unsigned char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x21cb8dc1018 <col:13> 'unsigned char *' lvalue Var 0x21cb8dbb9d8 'iv' 'unsigned char *'
    |       | | `-ImplicitCastExpr 0x21cb8dc1070 <col:16> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x21cb8dc1038 <col:16> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
    |       | `-ImplicitCastExpr 0x21cb8dc10c8 <col:21> 'unsigned char' <LValueToRValue>
    |       |   `-DeclRefExpr 0x21cb8dc10a8 <col:21> 'unsigned char' lvalue Var 0x21cb8dbbad8 'cc' 'unsigned char'
    |       |-BinaryOperator 0x21cb8dc1248 <line:68:13, col:28> 'unsigned char' '='
    |       | |-UnaryOperator 0x21cb8dc1158 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    |       | | `-ParenExpr 0x21cb8dc1138 <col:14, col:20> 'unsigned char *'
    |       | |   `-UnaryOperator 0x21cb8dc1120 <col:15, col:18> 'unsigned char *' postfix '++'
    |       | |     `-DeclRefExpr 0x21cb8dc1100 <col:15> 'unsigned char *' lvalue ParmVar 0x21cb8dbb260 'out' 'unsigned char *'
    |       | `-ImplicitCastExpr 0x21cb8dc1230 <col:24, col:28> 'unsigned char' <IntegralCast>
    |       |   `-BinaryOperator 0x21cb8dc1210 <col:24, col:28> 'int' '^'
    |       |     |-ImplicitCastExpr 0x21cb8dc11c8 <col:24> 'int' <IntegralCast>
    |       |     | `-ImplicitCastExpr 0x21cb8dc11b0 <col:24> 'unsigned char' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x21cb8dc1170 <col:24> 'unsigned char' lvalue Var 0x21cb8dbba58 'c' 'unsigned char'
    |       |     `-ImplicitCastExpr 0x21cb8dc11f8 <col:28> 'int' <IntegralCast>
    |       |       `-ImplicitCastExpr 0x21cb8dc11e0 <col:28> 'unsigned char' <LValueToRValue>
    |       |         `-DeclRefExpr 0x21cb8dc1190 <col:28> 'unsigned char' lvalue Var 0x21cb8dbbad8 'cc' 'unsigned char'
    |       `-BinaryOperator 0x21cb8dc1370 <line:69:13, col:27> 'int' '='
    |         |-DeclRefExpr 0x21cb8dc1268 <col:13> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
    |         `-BinaryOperator 0x21cb8dc1350 <col:17, col:27> 'int' '&'
    |           |-ParenExpr 0x21cb8dc1308 <col:17, col:23> 'int'
    |           | `-BinaryOperator 0x21cb8dc12e8 <col:18, col:22> 'int' '+'
    |           |   |-ImplicitCastExpr 0x21cb8dc12d0 <col:18> 'int' <LValueToRValue>
    |           |   | `-DeclRefExpr 0x21cb8dc1288 <col:18> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
    |           |   `-IntegerLiteral 0x21cb8dc12a8 <col:22> 'int' 1
    |           `-IntegerLiteral 0x21cb8dc1328 <col:27> 'int' 7
    `-BinaryOperator 0x21cb8dc15c0 <line:73:5, col:12> 'int' '='
      |-UnaryOperator 0x21cb8dc1570 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x21cb8dc1558 <col:6> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x21cb8dc1538 <col:6> 'int *' lvalue ParmVar 0x21cb8dbb490 'num' 'int *'
      `-ImplicitCastExpr 0x21cb8dc15a8 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x21cb8dc1588 <col:12> 'int' lvalue Var 0x21cb8dbb7d8 'n' 'int'
