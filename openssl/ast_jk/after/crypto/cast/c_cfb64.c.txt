TranslationUnitDecl 0x204f0214098 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x204f0214930 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x204f0214630 '__int128'
|-TypedefDecl 0x204f02149a0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x204f0214650 'unsigned __int128'
|-TypedefDecl 0x204f0214cd8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x204f0214a90 'struct __NSConstantString_tag'
|   `-Record 0x204f02149f8 '__NSConstantString_tag'
|-TypedefDecl 0x204f0214d48 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x204f0214270 'unsigned long long'
|-TypedefDecl 0x204f0214de0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x204f0214da0 'char *'
|   `-BuiltinType 0x204f0214130 'char'
|-TypedefDecl 0x204f0214e50 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x204f0214da0 'char *'
|   `-BuiltinType 0x204f0214130 'char'
|-VarDecl 0x204f0214f90 <.//openssl//file_jk/after\crypto\cast/cast_lcl.h:183:1, <invalid sloc>> col:24 invalid CAST_S_table0 'const int [256]' extern
|-VarDecl 0x204f027ccd0 <line:184:1, <invalid sloc>> col:24 invalid CAST_S_table1 'const int [256]' extern
|-VarDecl 0x204f027cda0 <line:185:1, <invalid sloc>> col:24 invalid CAST_S_table2 'const int [256]' extern
|-VarDecl 0x204f027ce70 <line:186:1, <invalid sloc>> col:24 invalid CAST_S_table3 'const int [256]' extern
|-VarDecl 0x204f027cf40 <line:187:1, <invalid sloc>> col:24 invalid CAST_S_table4 'const int [256]' extern
|-VarDecl 0x204f027d010 <line:188:1, <invalid sloc>> col:24 invalid CAST_S_table5 'const int [256]' extern
|-VarDecl 0x204f027d0e0 <line:189:1, <invalid sloc>> col:24 invalid CAST_S_table6 'const int [256]' extern
|-VarDecl 0x204f027d1b0 <line:190:1, <invalid sloc>> col:24 invalid CAST_S_table7 'const int [256]' extern
`-FunctionDecl 0x204f027d6e8 <.//openssl//file_jk/after\crypto\cast\c_cfb64.c:19:1, line:74:1> line:19:6 invalid CAST_cfb64_encrypt 'void (const unsigned char *, unsigned char *, long, const int *, unsigned char *, int *, int)'
  |-ParmVarDecl 0x204f027d260 <col:25, col:46> col:46 used in 'const unsigned char *'
  |-ParmVarDecl 0x204f027d310 <col:50, col:65> col:65 used out 'unsigned char *'
  |-ParmVarDecl 0x204f027d390 <line:20:25, col:30> col:30 used length 'long'
  |-ParmVarDecl 0x204f027d410 <col:38, col:54> col:54 invalid schedule 'const int *'
  |-ParmVarDecl 0x204f027d490 <line:21:25, col:40> col:40 used ivec 'unsigned char *'
  |-ParmVarDecl 0x204f027d540 <col:46, col:51> col:51 used num 'int *'
  |-ParmVarDecl 0x204f027d5c0 <col:56, col:60> col:60 used enc 'int'
  `-CompoundStmt 0x204f0282680 <line:22:1, line:74:1>
    |-DeclStmt 0x204f027d858 <line:23:5, col:33>
    | `-VarDecl 0x204f027d7f0 <col:5, col:24> col:24 invalid v0 'int' register
    |-DeclStmt 0x204f027d970 <line:24:5, col:26>
    | `-VarDecl 0x204f027d888 <col:5, col:23> col:18 used n 'int' register cinit
    |   `-ImplicitCastExpr 0x204f027d958 <col:22, col:23> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x204f027d940 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x204f027d928 <col:23> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x204f027d8f0 <col:23> 'int *' lvalue ParmVar 0x204f027d540 'num' 'int *'
    |-DeclStmt 0x204f027da58 <line:25:5, col:29>
    | `-VarDecl 0x204f027d9a0 <col:5, col:23> col:19 used l 'long' register cinit
    |   `-ImplicitCastExpr 0x204f027da40 <col:23> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x204f027da08 <col:23> 'long' lvalue ParmVar 0x204f027d390 'length' 'long'
    |-DeclStmt 0x204f027dc10 <line:27:5, col:29>
    | |-VarDecl 0x204f027da88 <col:5, col:20> col:20 used iv 'unsigned char *'
    | |-VarDecl 0x204f027db08 <col:5, col:24> col:24 used c 'unsigned char'
    | `-VarDecl 0x204f027db88 <col:5, col:27> col:27 used cc 'unsigned char'
    |-BinaryOperator 0x204f027dcb0 <line:29:5, col:10> 'unsigned char *' '='
    | |-DeclRefExpr 0x204f027dc28 <col:5> 'unsigned char *' lvalue Var 0x204f027da88 'iv' 'unsigned char *'
    | `-ImplicitCastExpr 0x204f027dc98 <col:10> 'unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x204f027dc60 <col:10> 'unsigned char *' lvalue ParmVar 0x204f027d490 'ivec' 'unsigned char *'
    |-IfStmt 0x204f02824a0 <line:30:5, line:71:5> has_else
    | |-ImplicitCastExpr 0x204f0279cd8 <line:30:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x204f0279ca0 <col:9> 'int' lvalue ParmVar 0x204f027d5c0 'enc' 'int'
    | |-CompoundStmt 0x204f0279908 <col:14, line:50:5>
    | | `-WhileStmt 0x204f02798f0 <line:31:9, line:49:9>
    | |   |-UnaryOperator 0x204f0279d28 <line:31:16, col:17> 'long' postfix '--'
    | |   | `-DeclRefExpr 0x204f0279cf0 <col:16> 'long' lvalue Var 0x204f027d9a0 'l' 'long'
    | |   `-CompoundStmt 0x204f02798b8 <col:21, line:49:9>
    | |     |-IfStmt 0x204f02793a8 <line:32:13, line:44:13>
    | |     | |-BinaryOperator 0x204f0279db8 <line:32:17, col:22> 'int' '=='
    | |     | | |-ImplicitCastExpr 0x204f0279da0 <col:17> 'int' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x204f0279d40 <col:17> 'int' lvalue Var 0x204f027d888 'n' 'int'
    | |     | | `-IntegerLiteral 0x204f0279d78 <col:22> 'int' 0
    | |     | `-CompoundStmt 0x204f0279388 <col:25, line:44:13>
    | |     |   |-BinaryOperator 0x204f027abf0 <line:38:17, col:22> 'unsigned char *' '='
    | |     |   | |-DeclRefExpr 0x204f027ab98 <col:17> 'unsigned char *' lvalue Var 0x204f027da88 'iv' 'unsigned char *'
    | |     |   | `-ImplicitCastExpr 0x204f027abd8 <col:22> 'unsigned char *' <LValueToRValue>
    | |     |   |   `-DeclRefExpr 0x204f027abb8 <col:22> 'unsigned char *' lvalue ParmVar 0x204f027d490 'ivec' 'unsigned char *'
    | |     |   `-BinaryOperator 0x204f0279368 <line:43:17, col:22> 'unsigned char *' '='
    | |     |     |-DeclRefExpr 0x204f0279310 <col:17> 'unsigned char *' lvalue Var 0x204f027da88 'iv' 'unsigned char *'
    | |     |     `-ImplicitCastExpr 0x204f0279350 <col:22> 'unsigned char *' <LValueToRValue>
    | |     |       `-DeclRefExpr 0x204f0279330 <col:22> 'unsigned char *' lvalue ParmVar 0x204f027d490 'ivec' 'unsigned char *'
    | |     |-BinaryOperator 0x204f02795a8 <line:45:13, col:31> 'unsigned char' '='
    | |     | |-DeclRefExpr 0x204f02793c0 <col:13> 'unsigned char' lvalue Var 0x204f027db08 'c' 'unsigned char'
    | |     | `-ImplicitCastExpr 0x204f0279590 <col:17, col:31> 'unsigned char' <IntegralCast>
    | |     |   `-BinaryOperator 0x204f0279570 <col:17, col:31> 'int' '^'
    | |     |     |-ImplicitCastExpr 0x204f0279528 <col:17, col:23> 'int' <IntegralCast>
    | |     |     | `-ImplicitCastExpr 0x204f0279510 <col:17, col:23> 'unsigned char' <LValueToRValue>
    | |     |     |   `-UnaryOperator 0x204f0279468 <col:17, col:23> 'const unsigned char' lvalue prefix '*' cannot overflow
    | |     |     |     `-ParenExpr 0x204f0279448 <col:18, col:23> 'const unsigned char *'
    | |     |     |       `-UnaryOperator 0x204f0279430 <col:19, col:21> 'const unsigned char *' postfix '++'
    | |     |     |         `-DeclRefExpr 0x204f02793f8 <col:19> 'const unsigned char *' lvalue ParmVar 0x204f027d260 'in' 'const unsigned char *'
    | |     |     `-ImplicitCastExpr 0x204f0279558 <col:27, col:31> 'int' <IntegralCast>
    | |     |       `-ImplicitCastExpr 0x204f0279540 <col:27, col:31> 'unsigned char' <LValueToRValue>
    | |     |         `-ArraySubscriptExpr 0x204f02794f0 <col:27, col:31> 'unsigned char' lvalue
    | |     |           |-ImplicitCastExpr 0x204f02794c0 <col:27> 'unsigned char *' <LValueToRValue>
    | |     |           | `-DeclRefExpr 0x204f0279480 <col:27> 'unsigned char *' lvalue Var 0x204f027da88 'iv' 'unsigned char *'
    | |     |           `-ImplicitCastExpr 0x204f02794d8 <col:30> 'int' <LValueToRValue>
    | |     |             `-DeclRefExpr 0x204f02794a0 <col:30> 'int' lvalue Var 0x204f027d888 'n' 'int'
    | |     |-BinaryOperator 0x204f0279688 <line:46:13, col:24> 'unsigned char' '='
    | |     | |-UnaryOperator 0x204f0279638 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    | |     | | `-ParenExpr 0x204f0279618 <col:14, col:20> 'unsigned char *'
    | |     | |   `-UnaryOperator 0x204f0279600 <col:15, col:18> 'unsigned char *' postfix '++'
    | |     | |     `-DeclRefExpr 0x204f02795c8 <col:15> 'unsigned char *' lvalue ParmVar 0x204f027d310 'out' 'unsigned char *'
    | |     | `-ImplicitCastExpr 0x204f0279670 <col:24> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x204f0279650 <col:24> 'unsigned char' lvalue Var 0x204f027db08 'c' 'unsigned char'
    | |     |-BinaryOperator 0x204f0279770 <line:47:13, col:21> 'unsigned char' '='
    | |     | |-ArraySubscriptExpr 0x204f0279718 <col:13, col:17> 'unsigned char' lvalue
    | |     | | |-ImplicitCastExpr 0x204f02796e8 <col:13> 'unsigned char *' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x204f02796a8 <col:13> 'unsigned char *' lvalue Var 0x204f027da88 'iv' 'unsigned char *'
    | |     | | `-ImplicitCastExpr 0x204f0279700 <col:16> 'int' <LValueToRValue>
    | |     | |   `-DeclRefExpr 0x204f02796c8 <col:16> 'int' lvalue Var 0x204f027d888 'n' 'int'
    | |     | `-ImplicitCastExpr 0x204f0279758 <col:21> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x204f0279738 <col:21> 'unsigned char' lvalue Var 0x204f027db08 'c' 'unsigned char'
    | |     `-BinaryOperator 0x204f0279898 <line:48:13, col:27> 'int' '='
    | |       |-DeclRefExpr 0x204f0279790 <col:13> 'int' lvalue Var 0x204f027d888 'n' 'int'
    | |       `-BinaryOperator 0x204f0279878 <col:17, col:27> 'int' '&'
    | |         |-ParenExpr 0x204f0279830 <col:17, col:23> 'int'
    | |         | `-BinaryOperator 0x204f0279810 <col:18, col:22> 'int' '+'
    | |         |   |-ImplicitCastExpr 0x204f02797f8 <col:18> 'int' <LValueToRValue>
    | |         |   | `-DeclRefExpr 0x204f02797b0 <col:18> 'int' lvalue Var 0x204f027d888 'n' 'int'
    | |         |   `-IntegerLiteral 0x204f02797d0 <col:22> 'int' 1
    | |         `-IntegerLiteral 0x204f0279850 <col:27> 'int' 7
    | `-CompoundStmt 0x204f0282488 <line:50:12, line:71:5>
    |   `-WhileStmt 0x204f0282470 <line:51:9, line:70:9>
    |     |-UnaryOperator 0x204f0279940 <line:51:16, col:17> 'long' postfix '--'
    |     | `-DeclRefExpr 0x204f0279920 <col:16> 'long' lvalue Var 0x204f027d9a0 'l' 'long'
    |     `-CompoundStmt 0x204f0282430 <col:21, line:70:9>
    |       |-IfStmt 0x204f0281ed8 <line:52:13, line:64:13>
    |       | |-BinaryOperator 0x204f02799b8 <line:52:17, col:22> 'int' '=='
    |       | | |-ImplicitCastExpr 0x204f02799a0 <col:17> 'int' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x204f0279958 <col:17> 'int' lvalue Var 0x204f027d888 'n' 'int'
    |       | | `-IntegerLiteral 0x204f0279978 <col:22> 'int' 0
    |       | `-CompoundStmt 0x204f0281eb8 <col:25, line:64:13>
    |       |   |-BinaryOperator 0x204f0281710 <line:58:17, col:22> 'unsigned char *' '='
    |       |   | |-DeclRefExpr 0x204f02816b8 <col:17> 'unsigned char *' lvalue Var 0x204f027da88 'iv' 'unsigned char *'
    |       |   | `-ImplicitCastExpr 0x204f02816f8 <col:22> 'unsigned char *' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x204f02816d8 <col:22> 'unsigned char *' lvalue ParmVar 0x204f027d490 'ivec' 'unsigned char *'
    |       |   `-BinaryOperator 0x204f0281e98 <line:63:17, col:22> 'unsigned char *' '='
    |       |     |-DeclRefExpr 0x204f0281e40 <col:17> 'unsigned char *' lvalue Var 0x204f027da88 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x204f0281e80 <col:22> 'unsigned char *' <LValueToRValue>
    |       |       `-DeclRefExpr 0x204f0281e60 <col:22> 'unsigned char *' lvalue ParmVar 0x204f027d490 'ivec' 'unsigned char *'
    |       |-BinaryOperator 0x204f0281fb0 <line:65:13, col:24> 'unsigned char' '='
    |       | |-DeclRefExpr 0x204f0281ef0 <col:13> 'unsigned char' lvalue Var 0x204f027db88 'cc' 'unsigned char'
    |       | `-ImplicitCastExpr 0x204f0281f98 <col:18, col:24> 'unsigned char' <LValueToRValue>
    |       |   `-UnaryOperator 0x204f0281f80 <col:18, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
    |       |     `-ParenExpr 0x204f0281f60 <col:19, col:24> 'const unsigned char *'
    |       |       `-UnaryOperator 0x204f0281f48 <col:20, col:22> 'const unsigned char *' postfix '++'
    |       |         `-DeclRefExpr 0x204f0281f28 <col:20> 'const unsigned char *' lvalue ParmVar 0x204f027d260 'in' 'const unsigned char *'
    |       |-BinaryOperator 0x204f0282098 <line:66:13, col:21> 'unsigned char' '='
    |       | |-DeclRefExpr 0x204f0281fd0 <col:13> 'unsigned char' lvalue Var 0x204f027db08 'c' 'unsigned char'
    |       | `-ImplicitCastExpr 0x204f0282080 <col:17, col:21> 'unsigned char' <LValueToRValue>
    |       |   `-ArraySubscriptExpr 0x204f0282060 <col:17, col:21> 'unsigned char' lvalue
    |       |     |-ImplicitCastExpr 0x204f0282030 <col:17> 'unsigned char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x204f0281ff0 <col:17> 'unsigned char *' lvalue Var 0x204f027da88 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x204f0282048 <col:20> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x204f0282010 <col:20> 'int' lvalue Var 0x204f027d888 'n' 'int'
    |       |-BinaryOperator 0x204f0282180 <line:67:13, col:21> 'unsigned char' '='
    |       | |-ArraySubscriptExpr 0x204f0282128 <col:13, col:17> 'unsigned char' lvalue
    |       | | |-ImplicitCastExpr 0x204f02820f8 <col:13> 'unsigned char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x204f02820b8 <col:13> 'unsigned char *' lvalue Var 0x204f027da88 'iv' 'unsigned char *'
    |       | | `-ImplicitCastExpr 0x204f0282110 <col:16> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x204f02820d8 <col:16> 'int' lvalue Var 0x204f027d888 'n' 'int'
    |       | `-ImplicitCastExpr 0x204f0282168 <col:21> 'unsigned char' <LValueToRValue>
    |       |   `-DeclRefExpr 0x204f0282148 <col:21> 'unsigned char' lvalue Var 0x204f027db88 'cc' 'unsigned char'
    |       |-BinaryOperator 0x204f02822e8 <line:68:13, col:28> 'unsigned char' '='
    |       | |-UnaryOperator 0x204f02821f8 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    |       | | `-ParenExpr 0x204f02821d8 <col:14, col:20> 'unsigned char *'
    |       | |   `-UnaryOperator 0x204f02821c0 <col:15, col:18> 'unsigned char *' postfix '++'
    |       | |     `-DeclRefExpr 0x204f02821a0 <col:15> 'unsigned char *' lvalue ParmVar 0x204f027d310 'out' 'unsigned char *'
    |       | `-ImplicitCastExpr 0x204f02822d0 <col:24, col:28> 'unsigned char' <IntegralCast>
    |       |   `-BinaryOperator 0x204f02822b0 <col:24, col:28> 'int' '^'
    |       |     |-ImplicitCastExpr 0x204f0282268 <col:24> 'int' <IntegralCast>
    |       |     | `-ImplicitCastExpr 0x204f0282250 <col:24> 'unsigned char' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x204f0282210 <col:24> 'unsigned char' lvalue Var 0x204f027db08 'c' 'unsigned char'
    |       |     `-ImplicitCastExpr 0x204f0282298 <col:28> 'int' <IntegralCast>
    |       |       `-ImplicitCastExpr 0x204f0282280 <col:28> 'unsigned char' <LValueToRValue>
    |       |         `-DeclRefExpr 0x204f0282230 <col:28> 'unsigned char' lvalue Var 0x204f027db88 'cc' 'unsigned char'
    |       `-BinaryOperator 0x204f0282410 <line:69:13, col:27> 'int' '='
    |         |-DeclRefExpr 0x204f0282308 <col:13> 'int' lvalue Var 0x204f027d888 'n' 'int'
    |         `-BinaryOperator 0x204f02823f0 <col:17, col:27> 'int' '&'
    |           |-ParenExpr 0x204f02823a8 <col:17, col:23> 'int'
    |           | `-BinaryOperator 0x204f0282388 <col:18, col:22> 'int' '+'
    |           |   |-ImplicitCastExpr 0x204f0282370 <col:18> 'int' <LValueToRValue>
    |           |   | `-DeclRefExpr 0x204f0282328 <col:18> 'int' lvalue Var 0x204f027d888 'n' 'int'
    |           |   `-IntegerLiteral 0x204f0282348 <col:22> 'int' 1
    |           `-IntegerLiteral 0x204f02823c8 <col:27> 'int' 7
    `-BinaryOperator 0x204f0282660 <line:73:5, col:12> 'int' '='
      |-UnaryOperator 0x204f0282610 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x204f02825f8 <col:6> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x204f02825d8 <col:6> 'int *' lvalue ParmVar 0x204f027d540 'num' 'int *'
      `-ImplicitCastExpr 0x204f0282648 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x204f0282628 <col:12> 'int' lvalue Var 0x204f027d888 'n' 'int'
