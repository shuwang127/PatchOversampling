TranslationUnitDecl 0x1553cf55478 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1553cf55d10 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1553cf55a10 '__int128'
|-TypedefDecl 0x1553cf55d80 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1553cf55a30 'unsigned __int128'
|-TypedefDecl 0x1553cf560b8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1553cf55e70 'struct __NSConstantString_tag'
|   `-Record 0x1553cf55dd8 '__NSConstantString_tag'
|-TypedefDecl 0x1553cf56128 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1553cf55650 'unsigned long long'
|-TypedefDecl 0x1553cf561c0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1553cf56180 'char *'
|   `-BuiltinType 0x1553cf55510 'char'
|-TypedefDecl 0x1553cf56230 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1553cf56180 'char *'
|   `-BuiltinType 0x1553cf55510 'char'
|-TypedefDecl 0x1553cf562f0 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1553cf55650 'unsigned long long'
|-TypedefDecl 0x1553cf56360 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1553cf56180 'char *'
|   `-BuiltinType 0x1553cf55510 'char'
|-FunctionDecl 0x1553e986450 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1553e9864f0 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1553e986560 <col:21> Implicit
|-FunctionDecl 0x1553e9865b8 prev 0x1553e986450 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1553e9862e0 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1553e9866a8 <col:21> Inherited Implicit
|-TypedefDecl 0x1553e9866e8 prev 0x1553cf56128 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1553cf55650 'unsigned long long'
|-TypedefDecl 0x1553e986790 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1553e986760 'size_t' sugar
|   |-Typedef 0x1553e9866e8 'size_t'
|   `-BuiltinType 0x1553cf55650 'unsigned long long'
|-TypedefDecl 0x1553e986800 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1553cf555b0 'long long'
|-TypedefDecl 0x1553e986870 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1553cf555b0 'long long'
|-TypedefDecl 0x1553e9868e0 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1553cf555f0 'unsigned short'
|-TypedefDecl 0x1553e986950 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x1553cf555f0 'unsigned short'
|-TypedefDecl 0x1553e9869c0 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x1553cf555f0 'unsigned short'
|-TypedefDecl 0x1553e986a30 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x1553cf55570 'int'
|-TypedefDecl 0x1553e986aa0 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1553cf55590 'long'
|-TypedefDecl 0x1553e986b10 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1553cf555b0 'long long'
|-TypedefDecl 0x1553e986ba0 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1553e986b70 '__time64_t' sugar
|   |-Typedef 0x1553e986b10 '__time64_t'
|   `-BuiltinType 0x1553cf555b0 'long long'
|-FunctionDecl 0x1553e986d18 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1553e986f38 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1553e9b19a0 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1553e987078 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1553e9870f0 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1553e987168 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1553e9871e8 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1553e9b1740 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1553e9b1a80 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1553e9b1b40 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1553e9b1cb0 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1553e9b1c60 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1553e9b1c00 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1553e9b1b20 'struct threadlocaleinfostruct'
|       `-Record 0x1553e9ba7d0 'threadlocaleinfostruct'
|-TypedefDecl 0x1553e9b1dc0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1553e9b1d70 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1553e9b1d10 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1553e9b1be0 'struct threadmbcinfostruct'
|       `-Record 0x1553e9b1b40 'threadmbcinfostruct'
|-RecordDecl 0x1553e9b1e18 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1553e9b1ed0 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1553e9b1f90 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1553e9b2020 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1553e9b20b0 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1553e9b2168 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1553e9b2110 'struct localeinfo_struct' sugar
|   `-RecordType 0x1553e9b1f70 'struct localeinfo_struct'
|     `-Record 0x1553e9b1ed0 'localeinfo_struct'
|-TypedefDecl 0x1553e9b2240 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1553e9b21f0 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1553e9b2110 'struct localeinfo_struct' sugar
|     `-RecordType 0x1553e9b1f70 'struct localeinfo_struct'
|       `-Record 0x1553e9b1ed0 'localeinfo_struct'
|-RecordDecl 0x1553e9b22b8 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1553e9b2370 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1553e9b23e8 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1553e9b24a8 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1553e9b2540 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1553e9b25b0 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1553e9b2668 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1553e9b2610 'struct localerefcount' sugar
|   `-RecordType 0x1553e9b2350 'struct localerefcount'
|     `-Record 0x1553e9b22b8 'localerefcount'
|-RecordDecl 0x1553e9ba7d0 prev 0x1553e9b1a80 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1553e9ba850 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1553e9ba8c8 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1553e9ba938 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1553e9ba9a8 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1553e9baa18 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1553e9babd8 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1553e9bac48 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1553e9bacb8 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1553e9bad28 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1553e9bad98 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1553e9bae08 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1553e9bae60 parent 0x1553cf55478 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1553e9baff0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1553e9bb060 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1553e9bb0d0 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1553e9bb140 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1553e9bb1e0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1553e9bb250 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1553e9bb360 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1553e9bb498 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1553e9bb548 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1553e9bb4f0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1553e9b1b20 'struct threadlocaleinfostruct'
|     `-Record 0x1553e9ba7d0 'threadlocaleinfostruct'
|-TypedefDecl 0x1553e9bb5d0 <D:\Microsoft Visual Studio 12.0\VC\include\stdint.h:8:1, col:28> col:28 int8_t 'signed char'
| `-BuiltinType 0x1553cf55530 'signed char'
|-TypedefDecl 0x1553e9bb640 <line:9:1, col:28> col:28 int16_t 'short'
| `-BuiltinType 0x1553cf55550 'short'
|-TypedefDecl 0x1553e9bb6b0 <line:10:1, col:28> col:28 referenced int32_t 'int'
| `-BuiltinType 0x1553cf55570 'int'
|-TypedefDecl 0x1553e9bb720 <line:11:1, col:28> col:28 int64_t 'long long'
| `-BuiltinType 0x1553cf555b0 'long long'
|-TypedefDecl 0x1553e9b97c0 <line:12:1, col:28> col:28 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x1553cf555d0 'unsigned char'
|-TypedefDecl 0x1553e9b9830 <line:13:1, col:28> col:28 uint16_t 'unsigned short'
| `-BuiltinType 0x1553cf555f0 'unsigned short'
|-TypedefDecl 0x1553e9b98a0 <line:14:1, col:28> col:28 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x1553cf55610 'unsigned int'
|-TypedefDecl 0x1553e9b9910 <line:15:1, col:28> col:28 referenced uint64_t 'unsigned long long'
| `-BuiltinType 0x1553cf55650 'unsigned long long'
|-TypedefDecl 0x1553e9b9980 <line:17:1, col:28> col:28 int_least8_t 'signed char'
| `-BuiltinType 0x1553cf55530 'signed char'
|-TypedefDecl 0x1553e9b99f0 <line:18:1, col:28> col:28 int_least16_t 'short'
| `-BuiltinType 0x1553cf55550 'short'
|-TypedefDecl 0x1553e9b9a60 <line:19:1, col:28> col:28 int_least32_t 'int'
| `-BuiltinType 0x1553cf55570 'int'
|-TypedefDecl 0x1553e9b9ad0 <line:20:1, col:28> col:28 int_least64_t 'long long'
| `-BuiltinType 0x1553cf555b0 'long long'
|-TypedefDecl 0x1553e9b9b40 <line:21:1, col:28> col:28 uint_least8_t 'unsigned char'
| `-BuiltinType 0x1553cf555d0 'unsigned char'
|-TypedefDecl 0x1553e9b9bb0 <line:22:1, col:28> col:28 uint_least16_t 'unsigned short'
| `-BuiltinType 0x1553cf555f0 'unsigned short'
|-TypedefDecl 0x1553e9b9c20 <line:23:1, col:28> col:28 uint_least32_t 'unsigned int'
| `-BuiltinType 0x1553cf55610 'unsigned int'
|-TypedefDecl 0x1553e9b9c90 <line:24:1, col:28> col:28 uint_least64_t 'unsigned long long'
| `-BuiltinType 0x1553cf55650 'unsigned long long'
|-TypedefDecl 0x1553e9b9d00 <line:26:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x1553cf55530 'signed char'
|-TypedefDecl 0x1553e9b9d70 <line:27:1, col:28> col:28 int_fast16_t 'int'
| `-BuiltinType 0x1553cf55570 'int'
|-TypedefDecl 0x1553e9b9de0 <line:28:1, col:28> col:28 int_fast32_t 'int'
| `-BuiltinType 0x1553cf55570 'int'
|-TypedefDecl 0x1553e9b9e50 <line:29:1, col:28> col:28 int_fast64_t 'long long'
| `-BuiltinType 0x1553cf555b0 'long long'
|-TypedefDecl 0x1553e9b9ec0 <line:30:1, col:28> col:28 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x1553cf555d0 'unsigned char'
|-TypedefDecl 0x1553e9b9f30 <line:31:1, col:28> col:28 uint_fast16_t 'unsigned int'
| `-BuiltinType 0x1553cf55610 'unsigned int'
|-TypedefDecl 0x1553e9b9fa0 <line:32:1, col:28> col:28 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x1553cf55610 'unsigned int'
|-TypedefDecl 0x1553e9ba010 <line:33:1, col:28> col:28 uint_fast64_t 'unsigned long long'
| `-BuiltinType 0x1553cf55650 'unsigned long long'
|-TypedefDecl 0x1553e9ba080 <line:53:1, col:28> col:28 intmax_t 'long long'
| `-BuiltinType 0x1553cf555b0 'long long'
|-TypedefDecl 0x1553e9ba0f0 <line:54:1, col:28> col:28 uintmax_t 'unsigned long long'
| `-BuiltinType 0x1553cf55650 'unsigned long long'
|-FunctionDecl 0x1553e9ba510 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x1553e9ba160 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x1553e9ba210 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x1553e9ba290 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x1553e9ba308 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553e9be938 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1553e9be9d8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1553e9bea40 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1553e9beaa8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553e9beb28 prev 0x1553e9be938 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1553e9ba600 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x1553e9ba680 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x1553e9ba6f8 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553e9beee8 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1553e9bec10 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x1553e9bec90 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x1553e9bed08 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1553e9bf370 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553e9befd0 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x1553e9bf050 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x1553e9bf0c8 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553e9bf160 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553e9bf678 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1553e9bf718 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1553e9bf780 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1553e9c6890 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553e9c6910 prev 0x1553e9bf678 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1553e9bf460 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x1553e9bf4e0 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x1553e9bf558 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1553e9c6cc8 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1553e9c6d68 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1553e9c6dd0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1553e9c6e38 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553e9c6eb8 prev 0x1553e9c6cc8 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1553e9c69f8 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x1553e9c6a78 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x1553e9c6af0 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1553e9c7358 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1553e9c6fc8 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x1553e9c7060 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1553e9c70e0 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1553e9c7158 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1553e9c7718 <line:94:25> col:25 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1553e9c77b8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1553e9c7820 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1553e9c5880 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553e9c5900 prev 0x1553e9c7718 <col:9, col:107> col:25 used memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x1553e9c7448 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x1553e9c74c8 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x1553e9c7540 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1553e9c5d78 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1553e9c5e18 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1553e9c5e80 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1553e9c5ee8 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1553e9c5f50 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553e9c5fd8 prev 0x1553e9c5d78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1553e9c5ac0 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x1553e9c5b40 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x1553e9c5bc0 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x1553e9c5c38 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553e9c6098 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x1553e9c6478 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1553e9c6260 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x1553e9c62e0 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x1553e9c6358 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553e9c6530 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x1553e9bf8c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1553e9c6658 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1553e9c66d0 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553e9c6750 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x1553e9bfc90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1553e9bfaa0 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x1553e9bfb20 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x1553e9bfd40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553e9c0150 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1553e9bfe88 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1553e9bff00 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1553e9bff80 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x1553e9c0520 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1553e9c05c0 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1553e9c0628 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1553e9c06a0 prev 0x1553e9c0520 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x1553e9c0330 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x1553e9c03b0 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x1553e9c0750 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553e9c1b50 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1553e9c1940 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1553e9c19b8 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1553e9c1a38 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x1553e9c1e78 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1553e9c1f18 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1553e9c1f80 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1553e9c1ff8 prev 0x1553e9c1e78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x1553e9c1cf8 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x1553e9c1d78 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x1553e9c20a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553e9c23e0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x1553e9c2480 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553e9c24e8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1553e9c2560 prev 0x1553e9c23e0 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x1553e9c21f0 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x1553e9c2270 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x1553e9c3860 <line:121:32> col:32 implicit strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x1553e9c3900 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1553e9c3970 prev 0x1553e9c3860 <col:16, col:63> col:32 strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x1553e9c2640 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x1553e9c3c68 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1553e9c3a48 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1553e9c3ac0 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553e9c3eb8 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x1553e9c3d48 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x1553e9c3dc0 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1553e9c41e8 <line:131:1, line:133:1>
|   `-ReturnStmt 0x1553e9c41d8 <line:132:5, col:51>
|     `-ConditionalOperator 0x1553e9c41a8 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x1553e9c4018 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x1553e9c3ff8 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x1553e9c3fc8 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1553e9c3f80 <col:13> 'const char *' lvalue ParmVar 0x1553e9c3d48 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x1553e9c3fe0 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x1553e9c3fa0 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x1553e9c4190 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1553e9c4038 <col:24> 'int' 0
|       `-CallExpr 0x1553e9c4130 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1553e9c4118 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1553e9c4060 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x1553e9c3c68 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x1553e9c4160 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1553e9c4080 <col:36> 'const char *' lvalue ParmVar 0x1553e9c3d48 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x1553e9c4178 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1553e9c40a0 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x1553e9c3dc0 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1553e9c44c0 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1553e9c4218 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x1553e9c4290 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1553e9c4310 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x1553e9c4388 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1553e9c78a0 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1553e9c7940 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1553e9c79a8 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1553e9c7a10 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553e9c7a90 prev 0x1553e9c78a0 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1553e9c45b0 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x1553e9c4630 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1553e9c46a8 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1553e9c7cc8 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x1553e9c7b78 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x1553e9c7f90 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1553e9c8030 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553e9c8098 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1553e9c8110 prev 0x1553e9c7f90 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1553e9c7da0 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x1553e9c7e20 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x1553e9c8370 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1553e9c81f0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1553e9c8270 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1553e9c85d0 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1553e9c8450 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1553e9c84d0 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1553e9c0918 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1553e9c86b0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1553e9c8730 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1553e9c87a8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553e9c0b80 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1553e9c0a00 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x1553e9c0a80 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1553e9c0e78 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1553e9c0c60 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1553e9c0ce0 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1553e9c0d58 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553e9c10e0 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1553e9c0f60 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x1553e9c0fe0 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x1553e9c13d8 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1553e9c11c0 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x1553e9c1240 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x1553e9c12b8 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea16f90 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1553e9c14c0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1553e9c1540 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1553e9c15b8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea173f0 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea17078 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1553ea170f8 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1553ea17170 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea171e8 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea176f8 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1553ea174e0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1553ea17560 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1553ea175d8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea17a90 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea177e0 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x1553ea17860 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x1553ea178d8 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea17950 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea17da8 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1553ea17e48 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea17eb0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1553ea12f50 prev 0x1553ea17da8 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1553ea17b80 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1553ea17c00 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x1553ea13210 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1553ea13130 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x1553ea132b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea13690 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x1553ea13400 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x1553ea13478 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea134f8 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x1553ea139a8 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x1553ea13a48 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1553ea13ab8 prev 0x1553ea139a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x1553ea13870 <col:90> col:93 'int'
| `-DeprecatedAttr 0x1553ea13b60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea13f60 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1553ea13ca8 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x1553ea13d20 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea13da0 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x1553ea14268 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1553ea14048 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1553ea140c0 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea14558 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1553ea14408 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1553ea14600 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea14a10 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea14748 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1553ea147c0 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea14838 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea14de0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1553ea14bb8 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1553ea14c30 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1553ea14e90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea153e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1553ea15070 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x1553ea150e8 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea15168 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x1553ea151e0 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1553ea15868 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1553ea15908 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1553ea15970 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea159d8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553ea15a58 prev 0x1553ea15868 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1553ea15598 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x1553ea15618 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x1553ea15690 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea15b10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea15e70 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1553ea17fa0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1553ea18008 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea18070 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553ea180f0 prev 0x1553ea15e70 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1553ea15c58 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x1553ea15cd8 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x1553ea15d50 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea183f0 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1553ea181d8 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x1553ea18258 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x1553ea182d0 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea18788 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea184d8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1553ea18558 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1553ea185d0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea18648 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea18b20 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1553ea18878 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1553ea188f0 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea18970 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x1553ea189e8 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1553ea18ee8 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1553ea11f40 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1553ea11fa8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea12010 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553ea12090 prev 0x1553ea18ee8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1553ea18cd0 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x1553ea18d50 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x1553ea18dc8 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea12148 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea12608 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x1553ea12290 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x1553ea12308 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea12388 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x1553ea12400 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea12a88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1553ea127b8 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x1553ea12838 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x1553ea128b0 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea12b40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea12e70 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1553ea15f80 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea15fe8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1553ea16060 prev 0x1553ea12e70 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1553ea12c88 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1553ea12d08 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x1553ea162c0 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1553ea16360 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea163c8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1553ea16440 prev 0x1553ea162c0 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1553ea16140 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1553ea161c0 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x1553ea16600 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x1553ea16520 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x1553ea16850 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1553ea168f0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea16958 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1553ea169d0 prev 0x1553ea16850 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1553ea166d8 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x1553ea16758 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x1553ea16c30 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1553ea16cd0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea16d38 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1553ea16db0 prev 0x1553ea16c30 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1553ea16ab0 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x1553ea16b30 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x1553ea110b0 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1553ea11150 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1553ea111b8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1553ea11230 prev 0x1553ea110b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x1553ea10f30 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x1553ea10fb0 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x1553ea112e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea116c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x1553ea11428 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x1553ea114a8 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x1553ea11528 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x1553ea11920 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1553ea117b0 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1553ea11828 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea11ba0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1553ea11ac0 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1553ea11c48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea1f078 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea11d90 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1553ea11e08 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea11e80 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea1f398 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1553ea1f220 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1553ea1f298 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1553ea1f448 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea1f860 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1553ea1f900 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1553ea1f968 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea1f9d0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553ea1fa50 prev 0x1553ea1f860 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1553ea1f590 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1553ea1f610 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x1553ea1f688 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea1fea8 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea1fb38 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1553ea1fbb8 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x1553ea1fc30 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea1fca8 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea1d188 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x1553ea1d228 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1553ea1d298 prev 0x1553ea1d188 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x1553ea1d0a8 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x1553ea1d340 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x1553ea1d688 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1553ea1d508 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1553ea1d588 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1553ea1d738 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x1553ea1da80 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1553ea1d900 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1553ea1d980 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1553ea1db30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x1553ea1ddd8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1553ea1dcf8 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1553ea1de80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x1553ea202f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1553ea200d8 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x1553ea20158 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x1553ea201d0 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea203a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x1553ea20788 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1553ea20570 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x1553ea205f0 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x1553ea20668 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea20840 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x1553ea20ae8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1553ea20a08 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1553ea20b90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x1553ea20ed8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1553ea20d58 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x1553ea20dd8 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x1553ea20f88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x1553ea19210 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1553ea19130 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1553ea192b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x1553ea19550 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x1553ea193d8 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x1553ea198e0 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1553ea19620 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1553ea19698 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea19710 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x1553ea19c98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea19a80 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1553ea19af8 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1553ea19d48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea21138 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x1553ea211d8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1553ea21240 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x1553ea212b8 prev 0x1553ea21138 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x1553ea19e88 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea19f00 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1553ea215b0 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x1553ea21650 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1553ea216b8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1553ea21730 prev 0x1553ea215b0 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x1553ea21390 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1553ea21408 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x1553ea21a10 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1553ea21808 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1553ea21880 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea218f8 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x1553ea21d20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea21bb0 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1553ea21c28 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1553ea21dd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea1a0c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea21f10 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea21f88 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x1553ea1a310 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x1553ea1a3b0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1553ea1a420 prev 0x1553ea1a310 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x1553ea1a1a0 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x1553ea1a708 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea1a4f0 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1553ea1a568 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea1a950 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x1553ea1a7e0 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x1553ea1a858 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1553ea1ace8 <line:306:1, line:308:1>
|   `-ReturnStmt 0x1553ea1acd8 <line:307:5, col:56>
|     `-ConditionalOperator 0x1553ea1aca8 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x1553ea1ab10 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x1553ea1aaf0 <col:13, line:36:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x1553ea1aac0 <line:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1553ea1aa18 <col:13> 'const wchar_t *' lvalue ParmVar 0x1553ea1a7e0 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x1553ea1aad8 <line:36:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x1553ea1aaa0 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x1553ea1aa78 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x1553ea1aa38 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x1553ea1ac90 <line:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1553ea1ab30 <col:29> 'int' 0
|       `-CallExpr 0x1553ea1ac30 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1553ea1ac18 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1553ea1ab58 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x1553ea1a708 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x1553ea1ac60 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x1553ea1ab78 <col:41> 'const wchar_t *' lvalue ParmVar 0x1553ea1a7e0 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x1553ea1ac78 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1553ea1ab98 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x1553ea1a858 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea22128 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1553ea1ad10 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1553ea1ad88 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea1ae00 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1553ea1ae78 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1553ea22590 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea222d0 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1553ea22348 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1553ea223c0 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea22648 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea22a58 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x1553ea22af8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x1553ea22b60 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1553ea22bc8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553ea22c48 prev 0x1553ea22a58 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x1553ea22788 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea22800 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1553ea22878 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea1afd0 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1553ea22d28 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1553ea22da0 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea22e18 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1553ea22e90 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1553ea1b380 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea1b178 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1553ea1b1f0 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1553ea1b268 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea1b438 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea1b798 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea1b578 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea1b5f0 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x1553ea1b9e0 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1553ea1b870 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea1b8e8 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1553ea1bc28 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea1bab8 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea1bb30 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x1553ea1be70 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea1bd00 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea1bd78 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x1553ea2a300 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea2a190 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1553ea2a208 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x1553ea2a3b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea2a810 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1553ea2a4f0 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x1553ea2a568 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x1553ea2a640 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x1553ea2ab30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x1553ea2a9b8 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x1553ea2abd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea2afe0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1553ea2ad18 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x1553ea2ad90 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea2ae10 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x1553ea23230 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1553ea23158 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1553ea232d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea236a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1553ea23418 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x1553ea23490 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea23508 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1553ea238f8 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea23780 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1553ea237f8 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x1553ea23c98 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1553ea239d0 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea23a48 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1553ea23ac0 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea23f88 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea23d78 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea23df0 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1553ea23e68 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea26420 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea260a8 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea26120 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1553ea26198 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea26210 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea26878 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x1553ea26508 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1553ea26580 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea265f8 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1553ea26670 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea26ce0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1553ea26a20 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x1553ea26a98 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1553ea26b10 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea26d98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea2b0d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x1553ea26ed8 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x1553ea2b460 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x1553ea2b1a0 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1553ea2b218 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea2b290 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x1553ea2b818 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1553ea2b600 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x1553ea2b678 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1553ea2b8c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea2bc28 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea2ba08 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x1553ea2ba80 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea2be98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1553ea2bdc0 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1553ea2bf40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea25330 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea25070 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x1553ea250e8 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea25160 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea256e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1553ea254d0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1553ea25548 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1553ea25798 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea25a48 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea258d8 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x1553ea25950 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea25cb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1553ea25be0 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1553ea25d60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea270d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea25ea0 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x1553ea25f18 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea25f90 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea273e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1553ea27270 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1553ea272e8 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1553ea27490 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea27890 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea275d0 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1553ea27648 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1553ea276c0 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea27cd8 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea27970 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1553ea279e8 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1553ea27a60 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea27ad8 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea27f38 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea27dc0 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1553ea27e38 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x1553ea28238 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1553ea28010 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea280a0 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1553ea28118 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea28490 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea28318 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1553ea28390 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x1553ea28778 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1553ea28568 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea285e0 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1553ea28658 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea28a68 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea28858 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea288d0 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1553ea28948 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea28df0 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea28b48 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea28bc0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1553ea28c38 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea28cb0 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea290f8 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea28ed8 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea28f50 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1553ea28fc8 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea29480 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea291d8 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea29250 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1553ea292c8 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea29340 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea296e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1553ea29608 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1553ea29788 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x1553ea29ac0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea29948 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea299c0 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1553ea29b70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x1553ea29f40 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea29d30 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea29da8 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1553ea29e20 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea29ff8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x1553ea243e0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1553ea241d8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1553ea24250 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1553ea242c8 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea24498 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x1553ea24730 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1553ea24658 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1553ea247d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x1553ea24b08 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1553ea24998 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x1553ea24a10 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1553ea24bb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x1553ea24e50 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1553ea24d78 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1553ea24ef8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x1553ea2d278 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1553ea2d1a0 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1553ea2d320 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x1553ea2d658 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea2d4e0 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1553ea2d558 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1553ea2d708 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-TypedefDecl 0x1553ea2da08 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:52:1, col:24> col:24 referenced _onexit_t 'int (*)(void) __attribute__((cdecl))'
| `-PointerType 0x1553ea2d9a0 'int (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x1553ea2d940 'int (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x1553ea2d8f0 'int (void)' sugar
|     | `-FunctionProtoType 0x1553ea2d8c0 'int (void)' cdecl
|     |   `-BuiltinType 0x1553cf55570 'int'
|     `-ParenType 0x1553ea2d8f0 'int (void)' sugar
|       `-FunctionProtoType 0x1553ea2d8c0 'int (void)' cdecl
|         `-BuiltinType 0x1553cf55570 'int'
|-RecordDecl 0x1553ea2da60 <line:75:9, line:78:1> line:75:16 struct _div_t definition
| |-MaxFieldAlignmentAttr 0x1553ea2db20 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1553ea2db98 <line:76:9, col:13> col:13 quot 'int'
| `-FieldDecl 0x1553ea2dc08 <line:77:9, col:13> col:13 rem 'int'
|-TypedefDecl 0x1553ea2dcb8 <line:75:1, line:78:3> col:3 referenced div_t 'struct _div_t':'struct _div_t'
| `-ElaboratedType 0x1553ea2dc60 'struct _div_t' sugar
|   `-RecordType 0x1553ea2db00 'struct _div_t'
|     `-Record 0x1553ea2da60 '_div_t'
|-RecordDecl 0x1553ea2dd28 <line:80:9, line:83:1> line:80:16 struct _ldiv_t definition
| |-MaxFieldAlignmentAttr 0x1553ea2dde0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1553ea2de58 <line:81:9, col:14> col:14 quot 'long'
| `-FieldDecl 0x1553ea2dec8 <line:82:9, col:14> col:14 rem 'long'
|-TypedefDecl 0x1553ea2df78 <line:80:1, line:83:3> col:3 referenced ldiv_t 'struct _ldiv_t':'struct _ldiv_t'
| `-ElaboratedType 0x1553ea2df20 'struct _ldiv_t' sugar
|   `-RecordType 0x1553ea2ddc0 'struct _ldiv_t'
|     `-Record 0x1553ea2dd28 '_ldiv_t'
|-RecordDecl 0x1553ea2dfe8 <line:85:9, line:88:1> line:85:16 struct _lldiv_t definition
| |-MaxFieldAlignmentAttr 0x1553ea2e0a0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1553ea3a018 <line:86:9, col:19> col:19 quot 'long long'
| `-FieldDecl 0x1553ea3a088 <line:87:9, col:19> col:19 rem 'long long'
|-TypedefDecl 0x1553ea3a138 <line:85:1, line:88:3> col:3 referenced lldiv_t 'struct _lldiv_t':'struct _lldiv_t'
| `-ElaboratedType 0x1553ea3a0e0 'struct _lldiv_t' sugar
|   `-RecordType 0x1553ea2e080 'struct _lldiv_t'
|     `-Record 0x1553ea2dfe8 '_lldiv_t'
|-RecordDecl 0x1553ea3a1d0 <line:103:9, line:105:1> line:103:9 struct definition
| |-MaxFieldAlignmentAttr 0x1553ea3a290 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x1553ea3a390 <line:104:5, col:24> col:19 ld 'unsigned char [10]'
|-TypedefDecl 0x1553ea3a448 <line:103:1, line:105:3> col:3 referenced _LDOUBLE 'struct _LDOUBLE':'_LDOUBLE'
| `-ElaboratedType 0x1553ea3a3f0 'struct _LDOUBLE' sugar
|   `-RecordType 0x1553ea3a270 '_LDOUBLE'
|     `-Record 0x1553ea3a1d0 ''
|-RecordDecl 0x1553ea3a4b8 <line:122:9, line:124:1> line:122:9 struct definition
| `-FieldDecl 0x1553ea3a588 <line:123:9, col:16> col:16 x 'double'
|-TypedefDecl 0x1553ea3a638 <line:122:1, line:124:3> col:3 referenced _CRT_DOUBLE 'struct _CRT_DOUBLE':'_CRT_DOUBLE'
| `-ElaboratedType 0x1553ea3a5e0 'struct _CRT_DOUBLE' sugar
|   `-RecordType 0x1553ea3a550 '_CRT_DOUBLE'
|     `-Record 0x1553ea3a4b8 ''
|-RecordDecl 0x1553ea3a6a8 <line:126:9, line:128:1> line:126:9 struct definition
| `-FieldDecl 0x1553ea3a778 <line:127:5, col:11> col:11 f 'float'
|-TypedefDecl 0x1553ea3a828 <line:126:1, line:128:3> col:3 referenced _CRT_FLOAT 'struct _CRT_FLOAT':'_CRT_FLOAT'
| `-ElaboratedType 0x1553ea3a7d0 'struct _CRT_FLOAT' sugar
|   `-RecordType 0x1553ea3a740 '_CRT_FLOAT'
|     `-Record 0x1553ea3a6a8 ''
|-RecordDecl 0x1553ea3a898 <line:134:9, line:139:1> line:134:9 struct definition
| `-FieldDecl 0x1553ea3a968 <line:138:9, col:21> col:21 x 'long double'
|-TypedefDecl 0x1553ea3aa18 <line:134:1, line:139:3> col:3 _LONGDOUBLE 'struct _LONGDOUBLE':'_LONGDOUBLE'
| `-ElaboratedType 0x1553ea3a9c0 'struct _LONGDOUBLE' sugar
|   `-RecordType 0x1553ea3a930 '_LONGDOUBLE'
|     `-Record 0x1553ea3a898 ''
|-RecordDecl 0x1553ea3aab0 <line:144:9, line:146:1> line:144:9 struct definition
| |-MaxFieldAlignmentAttr 0x1553ea3ab70 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x1553ea3ac70 <line:145:5, col:26> col:19 ld12 'unsigned char [12]'
|-TypedefDecl 0x1553ea3ad28 <line:144:1, line:146:3> col:3 _LDBL12 'struct _LDBL12':'_LDBL12'
| `-ElaboratedType 0x1553ea3acd0 'struct _LDBL12' sugar
|   `-RecordType 0x1553ea3ab50 '_LDBL12'
|     `-Record 0x1553ea3aab0 ''
|-VarDecl 0x1553ea3adb0 <line:170:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x1553ea3af30 <line:175:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1553ea35108 <line:176:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x1553ea34fa8 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-TypedefDecl 0x1553ea35350 <line:215:1, col:24> col:24 referenced _purecall_handler 'void (*)(void) __attribute__((cdecl))'
| `-PointerType 0x1553ea352f0 'void (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x1553ea35290 'void (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x1553ea35240 'void (void)' sugar
|     | `-FunctionProtoType 0x1553e986c70 'void (void)' cdecl
|     |   `-BuiltinType 0x1553cf554d0 'void'
|     `-ParenType 0x1553ea35240 'void (void)' sugar
|       `-FunctionProtoType 0x1553e986c70 'void (void)' cdecl
|         `-BuiltinType 0x1553cf554d0 'void'
|-FunctionDecl 0x1553ea35550 <line:218:9, col:92> col:35 _set_purecall_handler '_purecall_handler (_purecall_handler) __attribute__((cdecl))':'_purecall_handler (_purecall_handler)'
| `-ParmVarDecl 0x1553ea353e0 <col:66, col:84> col:84 _Handler '_purecall_handler':'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1553ea35768 <line:219:9, col:61> col:35 _get_purecall_handler '_purecall_handler (void) __attribute__((cdecl))':'_purecall_handler (void)'
|-TypedefDecl 0x1553ea35bb8 <line:235:1, col:24> col:24 referenced _invalid_parameter_handler 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
| `-PointerType 0x1553ea35b30 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|   `-AttributedType 0x1553ea35ad0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))' sugar
|     |-ParenType 0x1553ea35a80 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|     | `-FunctionProtoType 0x1553e9b1800 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|     |   |-BuiltinType 0x1553cf554d0 'void'
|     |   |-PointerType 0x1553e987040 'const wchar_t *'
|     |   | `-QualType 0x1553e986ff1 'const wchar_t' const
|     |   |   `-TypedefType 0x1553e986ff0 'wchar_t' sugar
|     |   |     |-Typedef 0x1553e9868e0 'wchar_t'
|     |   |     `-BuiltinType 0x1553cf555f0 'unsigned short'
|     |   |-PointerType 0x1553e987040 'const wchar_t *'
|     |   | `-QualType 0x1553e986ff1 'const wchar_t' const
|     |   |   `-TypedefType 0x1553e986ff0 'wchar_t' sugar
|     |   |     |-Typedef 0x1553e9868e0 'wchar_t'
|     |   |     `-BuiltinType 0x1553cf555f0 'unsigned short'
|     |   |-PointerType 0x1553e987040 'const wchar_t *'
|     |   | `-QualType 0x1553e986ff1 'const wchar_t' const
|     |   |   `-TypedefType 0x1553e986ff0 'wchar_t' sugar
|     |   |     |-Typedef 0x1553e9868e0 'wchar_t'
|     |   |     `-BuiltinType 0x1553cf555f0 'unsigned short'
|     |   |-BuiltinType 0x1553cf55610 'unsigned int'
|     |   `-TypedefType 0x1553e987250 'uintptr_t' sugar
|     |     |-Typedef 0x1553cf562f0 'uintptr_t'
|     |     `-BuiltinType 0x1553cf55650 'unsigned long long'
|     `-ParenType 0x1553ea35a80 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|       `-FunctionProtoType 0x1553e9b1800 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|         |-BuiltinType 0x1553cf554d0 'void'
|         |-PointerType 0x1553e987040 'const wchar_t *'
|         | `-QualType 0x1553e986ff1 'const wchar_t' const
|         |   `-TypedefType 0x1553e986ff0 'wchar_t' sugar
|         |     |-Typedef 0x1553e9868e0 'wchar_t'
|         |     `-BuiltinType 0x1553cf555f0 'unsigned short'
|         |-PointerType 0x1553e987040 'const wchar_t *'
|         | `-QualType 0x1553e986ff1 'const wchar_t' const
|         |   `-TypedefType 0x1553e986ff0 'wchar_t' sugar
|         |     |-Typedef 0x1553e9868e0 'wchar_t'
|         |     `-BuiltinType 0x1553cf555f0 'unsigned short'
|         |-PointerType 0x1553e987040 'const wchar_t *'
|         | `-QualType 0x1553e986ff1 'const wchar_t' const
|         |   `-TypedefType 0x1553e986ff0 'wchar_t' sugar
|         |     |-Typedef 0x1553e9868e0 'wchar_t'
|         |     `-BuiltinType 0x1553cf555f0 'unsigned short'
|         |-BuiltinType 0x1553cf55610 'unsigned int'
|         `-TypedefType 0x1553e987250 'uintptr_t' sugar
|           |-Typedef 0x1553cf562f0 'uintptr_t'
|           `-BuiltinType 0x1553cf55650 'unsigned long long'
|-FunctionDecl 0x1553ea35db0 <line:238:9, col:119> col:44 _set_invalid_parameter_handler '_invalid_parameter_handler (_invalid_parameter_handler) __attribute__((cdecl))':'_invalid_parameter_handler (_invalid_parameter_handler)'
| `-ParmVarDecl 0x1553ea35c40 <col:84, col:111> col:111 _Handler '_invalid_parameter_handler':'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|-FunctionDecl 0x1553ea36ff8 <line:239:9, col:79> col:44 _get_invalid_parameter_handler '_invalid_parameter_handler (void) __attribute__((cdecl))':'_invalid_parameter_handler (void)'
|-FunctionDecl 0x1553ea371e0 <line:245:9, col:41> col:30 _errno 'int *(void) __attribute__((cdecl))':'int *(void)' extern
|-FunctionDecl 0x1553ea37420 <line:248:1, col:43> col:17 _set_errno 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x1553ea372b0 <col:33, col:37> col:37 _Value 'int'
|-FunctionDecl 0x1553ea37670 <line:249:1, col:46> col:17 _get_errno 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x1553ea374f8 <col:34, col:40> col:40 _Value 'int *'
|-FunctionDecl 0x1553ea37890 <line:252:9, col:48> col:33 __doserrno 'unsigned long *(void) __attribute__((cdecl))':'unsigned long *(void)'
|-FunctionDecl 0x1553ea37ad0 <line:255:1, col:56> col:17 _set_doserrno 'errno_t (unsigned long) __attribute__((cdecl))':'errno_t (unsigned long)'
| `-ParmVarDecl 0x1553ea37960 <col:36, col:50> col:50 _Value 'unsigned long'
|-FunctionDecl 0x1553ea37d20 <line:256:1, col:59> col:17 _get_doserrno 'errno_t (unsigned long *) __attribute__((cdecl))':'errno_t (unsigned long *)'
| `-ParmVarDecl 0x1553ea37ba8 <col:37, col:53> col:53 _Value 'unsigned long *'
|-FunctionDecl 0x1553ea3c020 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:259:77> col:59 __sys_errlist 'char **(void) __attribute__((cdecl))':'char **(void)'
| `-DeprecatedAttr 0x1553ea3c0c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea3c380 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:262:72> col:57 __sys_nerr 'int *(void) __attribute__((cdecl))':'int *(void)'
| `-DeprecatedAttr 0x1553ea3c420 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x1553ea3c568 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:288:9, col:20> col:20 __argc 'int' extern
|-VarDecl 0x1553ea3c600 <line:289:9, col:24> col:24 __argv 'char **' extern
|-VarDecl 0x1553ea3c698 <line:290:9, col:27> col:27 __wargv 'wchar_t **' extern
|-VarDecl 0x1553ea3c730 <line:306:9, col:24> col:24 _environ 'char **' extern
|-VarDecl 0x1553ea3c7c8 <line:307:9, col:27> col:27 _wenviron 'wchar_t **' extern
|-VarDecl 0x1553ea3c920 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:311:68> col:68 _pgmptr 'char *' extern
| `-DeprecatedAttr 0x1553ea3c988 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x1553ea3cb88 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:312:72> col:72 _wpgmptr 'wchar_t *' extern
| `-DeprecatedAttr 0x1553ea3cbf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea3ceb0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:339:1, col:61> col:17 _get_pgmptr 'errno_t (char **) __attribute__((cdecl))':'errno_t (char **)'
| `-ParmVarDecl 0x1553ea3cd38 <col:47, col:55> col:55 _Value 'char **'
|-FunctionDecl 0x1553ea42160 <line:340:1, col:65> col:17 _get_wpgmptr 'errno_t (wchar_t **) __attribute__((cdecl))':'errno_t (wchar_t **)'
| `-ParmVarDecl 0x1553ea3cf88 <col:48, col:59> col:59 _Value 'wchar_t **'
|-VarDecl 0x1553ea422f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:346:64> col:64 _fmode 'int' extern
| `-DeprecatedAttr 0x1553ea42360 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea42580 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:353:9, col:50> col:25 _set_fmode 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x1553ea424a8 <col:41, col:45> col:45 _Mode 'int'
|-FunctionDecl 0x1553ea42730 <line:354:9, col:54> col:25 _get_fmode 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x1553ea42658 <col:42, col:48> col:48 _PMode 'int *'
|-FunctionDecl 0x1553ea42980 <line:376:43> col:43 implicit exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x1553ea42a20 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1553ea42a90 prev 0x1553ea42980 <col:9, col:62> col:43 exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x1553ea42808 <col:53, col:57> col:57 _Code 'int'
|-FunctionDecl 0x1553ea42c40 <line:378:43> col:43 implicit _exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x1553ea42ce0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1553ea42d50 prev 0x1553ea42c40 <col:9, col:63> col:43 _exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x1553ea42b68 <col:54, col:58> col:58 _Code 'int'
|-FunctionDecl 0x1553ea42ed8 <line:379:43> col:43 implicit abort 'void (void) __attribute__((noreturn))' extern
|-FunctionDecl 0x1553ea42f78 prev 0x1553ea42ed8 <col:9, col:53> col:43 abort 'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1553ea3b1d0 <line:382:9, col:99> col:30 _set_abort_behavior 'unsigned int (unsigned int, unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int, unsigned int)'
| |-ParmVarDecl 0x1553ea3afe0 <col:55, col:68> col:68 _Flags 'unsigned int'
| `-ParmVarDecl 0x1553ea3b060 <col:81, col:94> col:94 _Mask 'unsigned int'
|-FunctionDecl 0x1553ea3b3c8 <line:384:19> col:19 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x1553ea3b468 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1553ea3b4d8 <col:19> Implicit
| `-ConstAttr 0x1553ea3b530 <col:19> Implicit
|-FunctionDecl 0x1553ea3b558 prev 0x1553ea3b3c8 <col:1, col:34> col:19 abs 'int (int)'
| |-ParmVarDecl 0x1553ea3b2b0 <col:28, col:32> col:32 _X 'int'
| |-NoThrowAttr 0x1553ea3b648 <col:19> Inherited Implicit
| `-ConstAttr 0x1553ea3b670 <col:19> Inherited Implicit
|-FunctionDecl 0x1553ea3b7f8 <line:385:19> col:19 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x1553ea3b898 <<invalid sloc>> <invalid sloc> 'long'
| |-NoThrowAttr 0x1553ea3b908 <col:19> Implicit
| `-ConstAttr 0x1553ea3b960 <col:19> Implicit
|-FunctionDecl 0x1553ea3b988 prev 0x1553ea3b7f8 <col:1, col:36> col:19 labs 'long (long)'
| |-ParmVarDecl 0x1553ea3b6b0 <col:29, col:34> col:34 _X 'long'
| |-NoThrowAttr 0x1553ea3ba78 <col:19> Inherited Implicit
| `-ConstAttr 0x1553ea3baa0 <col:19> Inherited Implicit
|-FunctionDecl 0x1553ea3bc28 <line:386:19> col:19 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x1553ea3bcc8 <<invalid sloc>> <invalid sloc> 'long long'
| |-NoThrowAttr 0x1553ea3bd38 <col:19> Implicit
| `-ConstAttr 0x1553ea3bd90 <col:19> Implicit
|-FunctionDecl 0x1553ea3bdb8 prev 0x1553ea3bc28 <col:1, col:42> col:19 llabs 'long long (long long)'
| |-ParmVarDecl 0x1553ea3bae0 <col:30, col:40> col:40 _X 'long long'
| |-NoThrowAttr 0x1553ea3bea8 <col:19> Inherited Implicit
| `-ConstAttr 0x1553ea3bed0 <col:19> Inherited Implicit
|-FunctionDecl 0x1553ea41040 <line:388:9, col:42> col:28 _abs64 'long long (long long) __attribute__((cdecl))':'long long (long long)'
| `-ParmVarDecl 0x1553ea3bf10 <col:35> col:42 'long long'
|-FunctionDecl 0x1553ea41338 <line:426:9, col:53> col:24 atexit 'int (void (*)(void) __attribute__((cdecl))) __attribute__((cdecl))':'int (void (*)(void) __attribute__((cdecl)))'
| `-ParmVarDecl 0x1553ea411d8 <col:31, col:45> col:46 'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1553ea41558 <line:428:24, col:71> col:40 atof 'double (const char *) __attribute__((cdecl))':'double (const char *)'
| `-ParmVarDecl 0x1553ea41410 <col:52, col:64> col:64 _String 'const char *'
|-FunctionDecl 0x1553ea41850 <line:429:24, col:102> col:40 _atof_l 'double (const char *, _locale_t) __attribute__((cdecl))':'double (const char *, _locale_t)'
| |-ParmVarDecl 0x1553ea41630 <col:55, col:67> col:67 _String 'const char *'
| `-ParmVarDecl 0x1553ea416a8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea41a78 <line:430:43, col:86> col:58 atoi 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1553ea41930 <col:70, col:82> col:82 _Str 'const char *'
|-FunctionDecl 0x1553ea41d70 <line:431:24, col:98> col:39 _atoi_l 'int (const char *, _locale_t) __attribute__((cdecl))':'int (const char *, _locale_t)'
| |-ParmVarDecl 0x1553ea41b50 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1553ea41bc8 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea41f98 <line:432:24, col:67> col:39 atol 'long (const char *) __attribute__((cdecl))':'long (const char *)'
| `-ParmVarDecl 0x1553ea41e50 <col:51, col:63> col:63 _Str 'const char *'
|-FunctionDecl 0x1553ea40280 <line:433:24, col:98> col:39 _atol_l 'long (const char *, _locale_t) __attribute__((cdecl))':'long (const char *, _locale_t)'
| |-ParmVarDecl 0x1553ea40060 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1553ea400d8 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea404a8 <line:434:24, col:71> col:42 atoll 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x1553ea40360 <col:55, col:67> col:67 _Str 'const char *'
|-FunctionDecl 0x1553ea407a0 <line:435:24, col:102> col:42 _atoll_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x1553ea40580 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x1553ea405f8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea440d0 <line:439:24, line:441:97> line:439:39 bsearch_s 'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x1553ea40880 <col:54, col:67> col:67 _Key 'const void *'
| |-ParmVarDecl 0x1553ea40900 <col:124, col:137> col:137 _Base 'const void *'
| |-ParmVarDecl 0x1553ea40978 <line:440:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea409f0 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea40d50 <line:441:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x1553ea40dd0 <col:82, col:89> col:89 _Context 'void *'
|-FunctionDecl 0x1553ea44858 <line:443:24, line:445:72> line:443:39 bsearch 'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x1553ea441d0 <col:52, col:65> col:65 _Key 'const void *'
| |-ParmVarDecl 0x1553ea44250 <col:122, col:135> col:135 _Base 'const void *'
| |-ParmVarDecl 0x1553ea442c8 <line:444:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea44340 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea44618 <line:445:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x1553ea44f60 <line:448:9, line:450:96> line:448:22 qsort_s 'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x1553ea44950 <col:85, col:92> col:92 _Base 'void *'
| |-ParmVarDecl 0x1553ea449c8 <line:449:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea44a40 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea44ca8 <line:450:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x1553ea44d28 <col:82, col:88> col:88 _Context 'void *'
|-FunctionDecl 0x1553ea3e4e8 <line:452:9, line:454:72> line:452:22 qsort 'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x1553ea3e010 <col:84, col:91> col:91 _Base 'void *'
| |-ParmVarDecl 0x1553ea3e088 <line:453:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea3e100 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea3e2e0 <line:454:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x1553ea3e728 <line:456:47> col:47 implicit _byteswap_ushort 'unsigned short (unsigned short)' extern
| |-ParmVarDecl 0x1553ea3e7c8 <<invalid sloc>> <invalid sloc> 'unsigned short'
| |-NoThrowAttr 0x1553ea3e838 <col:47> Implicit
| `-ConstAttr 0x1553ea3e890 <col:47> Implicit
|-FunctionDecl 0x1553ea3e8b8 prev 0x1553ea3e728 <col:24, col:90> col:47 _byteswap_ushort 'unsigned short (unsigned short)'
| |-ParmVarDecl 0x1553ea3e5d8 <col:69, col:84> col:84 _Short 'unsigned short'
| |-NoThrowAttr 0x1553ea3e9a8 <col:47> Inherited Implicit
| `-ConstAttr 0x1553ea3e9d0 <col:47> Inherited Implicit
|-FunctionDecl 0x1553ea3eb58 <line:457:47> col:47 implicit _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x1553ea3ebf8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x1553ea3ec68 <col:47> Implicit
| `-ConstAttr 0x1553ea3ecc0 <col:47> Implicit
|-FunctionDecl 0x1553ea3ece8 prev 0x1553ea3eb58 <col:24, col:88> col:47 _byteswap_ulong 'unsigned long (unsigned long)'
| |-ParmVarDecl 0x1553ea3ea10 <col:69, col:83> col:83 _Long 'unsigned long'
| |-NoThrowAttr 0x1553ea3edd8 <col:47> Inherited Implicit
| `-ConstAttr 0x1553ea3ee00 <col:47> Inherited Implicit
|-FunctionDecl 0x1553ea43060 <line:458:49> col:49 implicit _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x1553ea43100 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x1553ea43170 <col:49> Implicit
| `-ConstAttr 0x1553ea431c8 <col:49> Implicit
|-FunctionDecl 0x1553ea431f0 prev 0x1553ea43060 <col:24, col:94> col:49 _byteswap_uint64 'unsigned long long (unsigned long long)'
| |-ParmVarDecl 0x1553ea3ee40 <col:71, col:88> col:88 _Int64 'unsigned long long'
| |-NoThrowAttr 0x1553ea432e0 <col:49> Inherited Implicit
| `-ConstAttr 0x1553ea43308 <col:49> Inherited Implicit
|-FunctionDecl 0x1553ea43588 <line:459:24, col:85> col:39 div 'div_t (int, int) __attribute__((cdecl))':'div_t (int, int)'
| |-ParmVarDecl 0x1553ea43368 <col:48, col:52> col:52 _Numerator 'int'
| `-ParmVarDecl 0x1553ea433e8 <col:69, col:73> col:73 _Denominator 'int'
|-FunctionDecl 0x1553ea43808 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:462:109> col:74 getenv 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1553ea43728 <col:88, col:101> col:101 _VarName 'const char *'
| `-DeprecatedAttr 0x1553ea438b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea43dc8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:464:28, col:177> col:44 getenv_s 'errno_t (size_t *, char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (size_t *, char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1553ea43a48 <col:59, col:68> col:68 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x1553ea43ac8 <col:110, col:117> col:117 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea43b40 <col:131, col:139> col:139 _DstSize 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea43bc0 <col:156, col:169> col:169 _VarName 'const char *'
|-FunctionDecl 0x1553ea451a0 <line:472:28, col:212> col:44 _dupenv_s 'errno_t (char **, size_t *, const char *) __attribute__((cdecl))':'errno_t (char **, size_t *, const char *)'
| |-ParmVarDecl 0x1553ea43eb8 <col:127, col:134> col:134 _PBuffer 'char **'
| |-ParmVarDecl 0x1553ea43f30 <col:154, col:163> col:163 _PBufferSizeInBytes 'size_t *'
| `-ParmVarDecl 0x1553ea43fb0 <col:191, col:204> col:204 _VarName 'const char *'
|-FunctionDecl 0x1553ea45608 <line:479:28, col:141> col:44 _itoa_s 'errno_t (int, char *, size_t, int) __attribute__((cdecl))':'errno_t (int, char *, size_t, int)'
| |-ParmVarDecl 0x1553ea45288 <col:57, col:61> col:61 _Value 'int'
| |-ParmVarDecl 0x1553ea45308 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea45380 <col:112, col:119> col:119 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea45400 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x1553ea45a88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:481:79 _itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x1553ea457f0 <col:91, col:96> col:96 _Value 'int'
| |-ParmVarDecl 0x1553ea45870 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1553ea458f0 <col:146, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x1553ea45b40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea46090 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:482:28, col:145> col:44 _i64toa_s 'errno_t (long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long long, char *, size_t, int)'
| |-ParmVarDecl 0x1553ea45c88 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x1553ea45d08 <col:95, col:102> col:102 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea45d80 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea45e00 <col:135, col:139> col:139 _Radix 'int'
|-FunctionDecl 0x1553ea464d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:483:140> col:59 _i64toa 'char *(long long, char *, int) __attribute__((cdecl))':'char *(long long, char *, int)'
| |-ParmVarDecl 0x1553ea46240 <col:72, col:80> col:80 _Val 'long long'
| |-ParmVarDecl 0x1553ea462c0 <col:109, col:116> col:116 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea46340 <col:130, col:134> col:134 _Radix 'int'
| `-DeprecatedAttr 0x1553ea46590 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea46a58 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:484:28, col:155> col:44 _ui64toa_s 'errno_t (unsigned long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, char *, size_t, int)'
| |-ParmVarDecl 0x1553ea466d8 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x1553ea46758 <col:105, col:112> col:112 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea467d0 <col:126, col:133> col:133 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea46850 <col:145, col:149> col:149 _Radix 'int'
|-FunctionDecl 0x1553ea46ea8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:485:151> col:60 _ui64toa 'char *(unsigned long long, char *, int) __attribute__((cdecl))':'char *(unsigned long long, char *, int)'
| |-ParmVarDecl 0x1553ea46c08 <col:74, col:91> col:91 _Val 'unsigned long long'
| |-ParmVarDecl 0x1553ea46c88 <col:120, col:127> col:127 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea46d08 <col:141, col:145> col:145 _Radix 'int'
| `-DeprecatedAttr 0x1553ea46f60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea3f118 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:486:24, col:75> col:40 _atoi64 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x1553ea3f038 <col:55, col:68> col:68 _String 'const char *'
|-FunctionDecl 0x1553ea3f368 <line:487:24, col:105> col:40 _atoi64_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x1553ea3f1f0 <col:57, col:70> col:70 _String 'const char *'
| `-ParmVarDecl 0x1553ea3f268 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea3f6e8 <line:488:24, col:136> col:40 _strtoi64 'long long (const char *, char **, int) __attribute__((cdecl))':'long long (const char *, char **, int)'
| |-ParmVarDecl 0x1553ea3f448 <col:57, col:70> col:70 _String 'const char *'
| |-ParmVarDecl 0x1553ea3f4c8 <col:104, col:112> col:112 _EndPtr 'char **'
| `-ParmVarDecl 0x1553ea3f548 <col:126, col:130> col:130 _Radix 'int'
|-FunctionDecl 0x1553ea3fb50 <line:489:24, col:166> col:40 _strtoi64_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea3f7d0 <col:59, col:72> col:72 _String 'const char *'
| |-ParmVarDecl 0x1553ea3f850 <col:106, col:114> col:114 _EndPtr 'char **'
| |-ParmVarDecl 0x1553ea3f8d0 <col:128, col:132> col:132 _Radix 'int'
| `-ParmVarDecl 0x1553ea3f948 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea3fed8 <line:490:24, col:146> col:49 _strtoui64 'unsigned long long (const char *, char **, int) __attribute__((cdecl))':'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x1553ea3fc40 <col:67, col:80> col:80 _String 'const char *'
| |-ParmVarDecl 0x1553ea3fcc0 <col:114, col:122> col:122 _EndPtr 'char **'
| `-ParmVarDecl 0x1553ea3fd40 <col:136, col:140> col:140 _Radix 'int'
|-FunctionDecl 0x1553ea4e490 <line:491:24, col:177> col:49 _strtoui64_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea4e110 <col:69, col:82> col:82 _String 'const char *'
| |-ParmVarDecl 0x1553ea4e190 <col:116, col:124> col:124 _EndPtr 'char **'
| |-ParmVarDecl 0x1553ea4e210 <col:138, col:143> col:143 _Radix 'int'
| `-ParmVarDecl 0x1553ea4e288 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea4e7c8 <line:492:24, col:88> col:39 ldiv 'ldiv_t (long, long) __attribute__((cdecl))':'ldiv_t (long, long)'
| |-ParmVarDecl 0x1553ea4e5a8 <col:49, col:54> col:54 _Numerator 'long'
| `-ParmVarDecl 0x1553ea4e628 <col:71, col:76> col:76 _Denominator 'long'
|-FunctionDecl 0x1553ea4eae8 <line:493:24, col:100> col:40 lldiv 'lldiv_t (long long, long long) __attribute__((cdecl))':'lldiv_t (long long, long long)'
| |-ParmVarDecl 0x1553ea4e8c8 <col:51, col:61> col:61 _Numerator 'long long'
| `-ParmVarDecl 0x1553ea4e948 <col:78, col:88> col:88 _Denominator 'long long'
|-FunctionDecl 0x1553ea4ef48 <line:515:28, col:140> col:44 _ltoa_s 'errno_t (long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long, char *, size_t, int)'
| |-ParmVarDecl 0x1553ea4ebc8 <col:57, col:62> col:62 _Val 'long'
| |-ParmVarDecl 0x1553ea4ec48 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea4ecc0 <col:111, col:118> col:118 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea4ed40 <col:130, col:134> col:134 _Radix 'int'
|-FunctionDecl 0x1553ea4d398 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:517:79 _ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x1553ea4d100 <col:91, col:97> col:97 _Value 'long'
| |-ParmVarDecl 0x1553ea4d180 <col:129, col:135> col:135 _Dest 'char *'
| |-ParmVarDecl 0x1553ea4d200 <col:147, col:152> col:152 _Radix 'int'
| `-DeprecatedAttr 0x1553ea4d450 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea4d7c0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:518:24, col:128> col:39 mblen 'int (const char *, size_t) __attribute__((cdecl))':'int (const char *, size_t)'
| |-ParmVarDecl 0x1553ea4d598 <col:89, col:102> col:102 _Ch 'const char *'
| `-ParmVarDecl 0x1553ea4d610 <col:112, col:119> col:119 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea4db68 <line:519:24, col:159> col:39 _mblen_l 'int (const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea4d8a0 <col:92, col:105> col:105 _Ch 'const char *'
| |-ParmVarDecl 0x1553ea4d918 <col:115, col:122> col:122 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea4d990 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea4dd28 <line:520:24, col:73> col:39 _mbstrlen 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| `-ParmVarDecl 0x1553ea4dc50 <col:56, col:69> col:69 _Str 'const char *'
|-FunctionDecl 0x1553ea4e018 <line:521:24, col:102> col:39 _mbstrlen_l 'size_t (const char *, _locale_t) __attribute__((cdecl))':'size_t (const char *, _locale_t)'
| |-ParmVarDecl 0x1553ea4de00 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x1553ea4de78 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea49230 <line:522:24, col:96> col:39 _mbstrnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1553ea490c0 <col:57, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1553ea49138 <col:80, col:87> col:87 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea495d0 <line:523:24, col:126> col:39 _mbstrnlen_l 'size_t (const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea49310 <col:59, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x1553ea49388 <col:82, col:89> col:89 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea49400 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea49988 <line:524:9, col:170> col:24 mbtowc 'int (wchar_t *, const char *, size_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x1553ea496b0 <col:54, col:64> col:64 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x1553ea49730 <col:122, col:135> col:135 _SrcCh 'const char *'
| `-ParmVarDecl 0x1553ea497a8 <col:148, col:155> col:155 _SrcSizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea49de0 <line:525:9, col:201> col:24 _mbtowc_l 'int (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea49a68 <col:57, col:67> col:67 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x1553ea49ae8 <col:125, col:138> col:138 _SrcCh 'const char *'
| |-ParmVarDecl 0x1553ea49b60 <col:151, col:158> col:158 _SrcSizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea49bd8 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea4a300 <line:526:28, col:271> col:44 mbstowcs_s 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t)'
| |-ParmVarDecl 0x1553ea49ec8 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1553ea49f40 <col:155, col:165> col:165 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1553ea49fb8 <col:179, col:186> col:186 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea4a038 <col:227, col:240> col:240 _SrcBuf 'const char *'
| `-ParmVarDecl 0x1553ea4a0d0 <col:254, col:261> col:261 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea4a780 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:528:56 mbstowcs 'size_t (wchar_t *, const char *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x1553ea4a4b0 <col:97, col:106> col:106 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1553ea4a530 <col:120, col:134> col:134 _Source 'const char *'
| |-ParmVarDecl 0x1553ea4a5a8 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea4a838 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea4ae38 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:530:28, col:301> col:44 _mbstowcs_s_l 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea4a978 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1553ea4a9f0 <col:158, col:168> col:168 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1553ea4aa68 <col:182, col:189> col:189 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea4aae8 <col:230, col:243> col:243 _SrcBuf 'const char *'
| |-ParmVarDecl 0x1553ea4ab60 <col:257, col:264> col:264 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea4abd8 <col:284, col:294> col:294 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea4b3d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:532:59 _mbstowcs_l 'size_t (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea4b028 <col:149, col:158> col:158 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1553ea4b0e0 <col:172, col:186> col:186 _Source 'const char *'
| |-ParmVarDecl 0x1553ea4b158 <col:200, col:208> col:208 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea4b1d0 <col:228, col:239> col:239 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1553ea4b498 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea4b698 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:534:24, col:48> col:39 rand 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1553ea4b848 <line:539:28, col:73> col:43 _set_error_mode 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1553ea4b768 <col:64, col:68> col:68 _Mode 'int'
|-FunctionDecl 0x1553ea4ba60 <line:541:9, col:53> col:24 srand 'void (unsigned int) __attribute__((cdecl))':'void (unsigned int)'
| `-ParmVarDecl 0x1553ea4b920 <col:35, col:48> col:48 _Seed 'unsigned int'
|-FunctionDecl 0x1553ea4bd20 <line:542:39> col:39 implicit strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x1553ea4bdc0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea4be28 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1553ea4bea0 prev 0x1553ea4bd20 <col:24, col:112> col:39 strtod 'double (const char *, char **)'
| |-ParmVarDecl 0x1553ea4bb38 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1553ea4bbb8 <col:97, col:105> col:105 _EndPtr 'char **'
|-FunctionDecl 0x1553ea48228 <line:543:24, col:143> col:39 _strtod_l 'double (const char *, char **, _locale_t) __attribute__((cdecl))':'double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1553ea4bf80 <col:56, col:69> col:69 _Str 'const char *'
| |-ParmVarDecl 0x1553ea4c000 <col:100, col:108> col:108 _EndPtr 'char **'
| `-ParmVarDecl 0x1553ea4c078 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea485a8 <line:544:39> col:39 implicit strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1553ea48648 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1553ea486b0 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1553ea48718 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1553ea48798 prev 0x1553ea485a8 <col:24, col:130> col:39 strtol 'long (const char *, char **, int)'
| |-ParmVarDecl 0x1553ea48310 <col:53, col:66> col:66 _Str 'const char *'
| |-ParmVarDecl 0x1553ea48390 <col:97, col:105> col:105 _EndPtr 'char **'
| `-ParmVarDecl 0x1553ea48410 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x1553ea48c00 <line:545:24, col:158> col:39 _strtol_l 'long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea48880 <col:56, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x1553ea48900 <col:99, col:106> col:106 _EndPtr 'char **'
| |-ParmVarDecl 0x1553ea48980 <col:120, col:124> col:124 _Radix 'int'
| `-ParmVarDecl 0x1553ea489f8 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea48f10 <line:546:43> col:43 implicit strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1553ea48fb0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1553ea49018 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1553ea470a0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1553ea47120 prev 0x1553ea48f10 <col:24, col:135> col:43 strtoll 'long long (const char *, char **, int)'
| |-ParmVarDecl 0x1553ea48cf0 <col:58, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x1553ea48d70 <col:102, col:110> col:110 _EndPtr 'char **'
| `-ParmVarDecl 0x1553ea48df0 <col:124, col:128> col:128 _Radix 'int'
|-FunctionDecl 0x1553ea474c0 <line:547:24, col:166> col:43 _strtoll_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea47208 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x1553ea47288 <col:105, col:113> col:113 _EndPtr 'char **'
| |-ParmVarDecl 0x1553ea47308 <col:127, col:131> col:131 _Radix 'int'
| `-ParmVarDecl 0x1553ea47380 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea47848 <line:548:46> col:46 implicit strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1553ea478e8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1553ea47950 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1553ea479b8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1553ea47a38 prev 0x1553ea47848 <col:24, col:137> col:46 strtoul 'unsigned long (const char *, char **, int)'
| |-ParmVarDecl 0x1553ea475b0 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x1553ea47630 <col:105, col:113> col:113 _EndPtr 'char **'
| `-ParmVarDecl 0x1553ea476b0 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x1553ea47ea0 <line:549:24, col:160> col:46 _strtoul_l 'unsigned long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea47b20 <col:57, col:70> col:70 _Str 'const char *'
| |-ParmVarDecl 0x1553ea47ba0 <col:101, col:108> col:108 _EndPtr 'char **'
| |-ParmVarDecl 0x1553ea47c20 <col:122, col:126> col:126 _Radix 'int'
| `-ParmVarDecl 0x1553ea47c98 <col:143, col:153> col:153 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea4f240 <line:550:51> col:51 implicit strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1553ea4f2e0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1553ea4f348 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1553ea4f3b0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1553ea4f430 prev 0x1553ea4f240 <col:24, col:143> col:51 strtoull 'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x1553ea47f90 <col:67, col:80> col:80 _Str 'const char *'
| |-ParmVarDecl 0x1553ea48010 <col:111, col:119> col:119 _EndPtr 'char **'
| `-ParmVarDecl 0x1553ea4f120 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x1553ea4f7d0 <line:551:24, col:174> col:51 _strtoull_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea4f518 <col:70, col:83> col:83 _Str 'const char *'
| |-ParmVarDecl 0x1553ea4f598 <col:114, col:122> col:122 _EndPtr 'char **'
| |-ParmVarDecl 0x1553ea4f618 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x1553ea4f690 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea4fab0 <line:552:44> col:44 implicit strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x1553ea4fb50 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea4fbb8 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1553ea4fc30 prev 0x1553ea4fab0 <col:24, col:118> col:44 strtold 'long double (const char *, char **)'
| |-ParmVarDecl 0x1553ea4f8c0 <col:59, col:72> col:72 _Str 'const char *'
| `-ParmVarDecl 0x1553ea4f940 <col:103, col:111> col:111 _EndPtr 'char **'
|-FunctionDecl 0x1553ea4ffe8 <line:553:24, col:149> col:44 _strtold_l 'long double (const char *, char **, _locale_t) __attribute__((cdecl))':'long double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1553ea4fd10 <col:62, col:75> col:75 _Str 'const char *'
| |-ParmVarDecl 0x1553ea4fd90 <col:106, col:114> col:114 _EndPtr 'char **'
| `-ParmVarDecl 0x1553ea4fe08 <col:132, col:142> col:142 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea4c2e0 <line:554:38> col:38 implicit strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x1553ea4c380 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1553ea4c3e8 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1553ea4c460 prev 0x1553ea4c2e0 <col:24, col:111> col:38 strtof 'float (const char *, char **)'
| |-ParmVarDecl 0x1553ea4c0f0 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1553ea4c170 <col:96, col:104> col:104 _EndPtr 'char **'
|-FunctionDecl 0x1553ea4c818 <line:555:24, col:142> col:38 _strtof_l 'float (const char *, char **, _locale_t) __attribute__((cdecl))':'float (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1553ea4c540 <col:55, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x1553ea4c5c0 <col:99, col:107> col:107 _EndPtr 'char **'
| `-ParmVarDecl 0x1553ea4c638 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea4c9e0 <line:560:9, col:60> col:21 system 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1553ea4c900 <col:39, col:52> col:52 _Command 'const char *'
|-FunctionDecl 0x1553ea4ce38 <line:564:28, col:150> col:44 _ultoa_s 'errno_t (unsigned long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, char *, size_t, int)'
| |-ParmVarDecl 0x1553ea4cab8 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1553ea4cb38 <col:100, col:107> col:107 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea4cbb0 <col:121, col:128> col:128 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea4cc30 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x1553ea5f0e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:566:79 _ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x1553ea4cfe8 <col:92, col:107> col:107 _Value 'unsigned long'
| |-ParmVarDecl 0x1553ea4d068 <col:139, col:145> col:145 _Dest 'char *'
| |-ParmVarDecl 0x1553ea5ef50 <col:157, col:162> col:162 _Radix 'int'
| `-DeprecatedAttr 0x1553ea5f1a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea5f5d0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:567:127> col:58 wctomb 'int (char *, wchar_t) __attribute__((cdecl))':'int (char *, wchar_t)'
| |-ParmVarDecl 0x1553ea5f3a8 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x1553ea5f420 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1553ea5f680 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea5fb58 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:568:155> col:61 _wctomb_l 'int (char *, wchar_t, _locale_t) __attribute__((cdecl))':'int (char *, wchar_t, _locale_t)'
| |-ParmVarDecl 0x1553ea5f888 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x1553ea5f900 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1553ea5f978 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1553ea5fc10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea600e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:570:28, col:200> col:44 wctomb_s 'errno_t (int *, char *, rsize_t, wchar_t) __attribute__((cdecl))':'errno_t (int *, char *, rsize_t, wchar_t)'
| |-ParmVarDecl 0x1553ea5fd58 <col:63, col:69> col:69 _SizeConverted 'int *'
| |-ParmVarDecl 0x1553ea5fdd8 <col:142, col:149> col:149 _MbCh 'char *'
| |-ParmVarDecl 0x1553ea5fe50 <col:161, col:169> col:169 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea5fec8 <col:188, col:196> col:196 _WCh 'wchar_t':'unsigned short'
|-FunctionDecl 0x1553ea605f0 <line:572:28, col:206> col:44 _wctomb_s_l 'errno_t (int *, char *, size_t, wchar_t, _locale_t) __attribute__((cdecl))':'errno_t (int *, char *, size_t, wchar_t, _locale_t)'
| |-ParmVarDecl 0x1553ea601d8 <col:66, col:72> col:72 _SizeConverted 'int *'
| |-ParmVarDecl 0x1553ea60258 <col:121, col:128> col:128 _MbCh 'char *'
| |-ParmVarDecl 0x1553ea602d0 <col:140, col:147> col:147 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea60348 <col:166, col:174> col:174 _WCh 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1553ea603c0 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea60b00 <line:573:28, col:263> col:44 wcstombs_s 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea606e0 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1553ea60760 <col:164, col:171> col:171 _Dst 'char *'
| |-ParmVarDecl 0x1553ea607d8 <col:182, col:189> col:189 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea60850 <col:213, col:229> col:229 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1553ea608c8 <col:240, col:247> col:247 _MaxCountInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea59f40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:575:56 wcstombs 'size_t (char *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea60cb8 <col:97, col:103> col:103 _Dest 'char *'
| |-ParmVarDecl 0x1553ea60d30 <col:117, col:134> col:134 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1553ea60da8 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1553ea59ff8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea5a5f8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:576:28, col:294> col:44 _wcstombs_s_l 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea5a138 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1553ea5a1b8 <col:167, col:174> col:174 _Dst 'char *'
| |-ParmVarDecl 0x1553ea5a230 <col:185, col:192> col:192 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea5a2a8 <col:216, col:232> col:232 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1553ea5a320 <col:243, col:250> col:250 _MaxCountInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea5a398 <col:277, col:287> col:287 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea5ab28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:578:59 _wcstombs_l 'size_t (char *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1553ea5a7b8 <col:146, col:152> col:152 _Dest 'char *'
| |-ParmVarDecl 0x1553ea5a830 <col:166, col:183> col:183 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1553ea5a8a8 <col:197, col:205> col:205 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea5a920 <col:225, col:236> col:236 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1553ea5abe8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea60fe0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:142> col:142 implicit calloc 'void *(unsigned long long, unsigned long long)' extern
| |-ParmVarDecl 0x1553ea61080 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1553ea610e8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553ea61160 prev 0x1553ea60fe0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:224> col:142 calloc 'void *(unsigned long long, unsigned long long)'
| |-ParmVarDecl 0x1553ea5ad28 <col:173, col:180> col:180 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea5ada0 <col:212, col:219> col:219 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1553ea61210 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1553ea61268 <line:615:33> restrict
|-FunctionDecl 0x1553ea61400 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:641:182> col:132 free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x1553ea612c0 <col:168, col:175> col:175 _Memory 'void *'
| `-NoAliasAttr 0x1553ea614a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x1553ea616a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:161> col:161 implicit malloc 'void *(unsigned long long)' extern
| `-ParmVarDecl 0x1553ea61748 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553ea617b8 prev 0x1553ea616a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:204> col:161 malloc 'void *(unsigned long long)'
| |-ParmVarDecl 0x1553ea61528 <col:192, col:199> col:199 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1553ea61860 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1553ea618b8 <line:615:33> restrict
|-FunctionDecl 0x1553ea61b30 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:142> col:142 implicit realloc 'void *(void *, unsigned long long)' extern
| |-ParmVarDecl 0x1553ea61bd0 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x1553ea61c38 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1553ea61cb0 prev 0x1553ea61b30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:236> col:142 realloc 'void *(void *, unsigned long long)'
| |-ParmVarDecl 0x1553ea61910 <col:181, col:188> col:188 _Memory 'void *'
| |-ParmVarDecl 0x1553ea61988 <col:221, col:228> col:228 _NewSize 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1553ea61d60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1553ea61db8 <line:615:33> restrict
|-FunctionDecl 0x1553ea5b088 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:646:274> col:142 _recalloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x1553ea61e10 <col:183, col:190> col:190 _Memory 'void *'
| |-ParmVarDecl 0x1553ea61e88 <col:223, col:230> col:230 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea61f00 <col:262, col:269> col:269 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1553ea5b140 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1553ea5b198 <line:615:33> restrict
|-FunctionDecl 0x1553ea5b2c8 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:647:191> col:132 _aligned_free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x1553ea5b1f0 <col:177, col:184> col:184 _Memory 'void *'
| `-NoAliasAttr 0x1553ea5b370 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x1553ea5b568 <col:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:648:218> col:142 _aligned_malloc 'void *(size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t)'
| |-ParmVarDecl 0x1553ea5b3f0 <col:182, col:189> col:189 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea5b468 <col:201, col:208> col:208 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1553ea5b618 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1553ea5b670 <line:615:33> restrict
|-FunctionDecl 0x1553ea5b988 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:649:246> col:142 _aligned_offset_malloc 'void *(size_t, size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t, size_t)'
| |-ParmVarDecl 0x1553ea5b6c0 <col:189, col:196> col:196 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea5b738 <col:208, col:215> col:215 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea5b7b0 <col:232, col:239> col:239 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1553ea5ba40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1553ea5ba98 <line:615:33> restrict
|-FunctionDecl 0x1553ea5bd00 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:651:272> col:145 _aligned_realloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x1553ea5baf0 <col:193, col:200> col:200 _Memory 'void *'
| |-ParmVarDecl 0x1553ea5bb68 <col:233, col:240> col:240 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea5bbe0 <col:255, col:262> col:262 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1553ea5bdb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1553ea5be10 <line:615:33> restrict
|-FunctionDecl 0x1553ea63290 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:653:306> col:142 _aligned_recalloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1553ea5be68 <col:191, col:198> col:198 _Memory 'void *'
| |-ParmVarDecl 0x1553ea62f90 <col:231, col:238> col:238 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea63008 <col:270, col:277> col:277 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea63080 <col:289, col:296> col:296 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1553ea63350 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1553ea633a8 <line:615:33> restrict
|-FunctionDecl 0x1553ea636a8 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:655:300> col:145 _aligned_offset_realloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1553ea63400 <col:200, col:207> col:207 _Memory 'void *'
| |-ParmVarDecl 0x1553ea63478 <col:240, col:247> col:247 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea634f0 <col:262, col:269> col:269 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea63568 <col:286, col:293> col:293 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1553ea63768 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1553ea637c0 <line:615:33> restrict
|-FunctionDecl 0x1553ea63c38 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:657:334> col:142 _aligned_offset_recalloc 'void *(void *, size_t, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1553ea63818 <col:198, col:205> col:205 _Memory 'void *'
| |-ParmVarDecl 0x1553ea63890 <col:238, col:245> col:245 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea63908 <col:277, col:284> col:284 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea63980 <col:296, col:303> col:303 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea639f8 <col:320, col:327> col:327 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1553ea63d00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1553ea63d58 <line:615:33> restrict
|-FunctionDecl 0x1553ea5c000 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:658:73, col:176> col:88 _aligned_msize 'size_t (void *, size_t, size_t) __attribute__((cdecl))':'size_t (void *, size_t, size_t)'
| |-ParmVarDecl 0x1553ea63db0 <col:117, col:124> col:124 _Memory 'void *'
| |-ParmVarDecl 0x1553ea63e28 <col:138, col:145> col:145 _Alignment 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea63ea0 <col:162, col:169> col:169 _Offset 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea5c458 <line:685:28, col:157> col:44 _itow_s 'errno_t (int, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (int, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1553ea5c0e8 <col:58, col:62> col:62 _Val 'int'
| |-ParmVarDecl 0x1553ea5c160 <col:97, col:107> col:107 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1553ea5c1d8 <col:121, col:128> col:128 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea5c258 <col:147, col:151> col:151 _Radix 'int'
|-FunctionDecl 0x1553ea5c8d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:687:82 _itow 'wchar_t *(int, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(int, wchar_t *, int)'
| |-ParmVarDecl 0x1553ea5c608 <col:94, col:99> col:99 _Value 'int'
| |-ParmVarDecl 0x1553ea5c680 <col:131, col:140> col:140 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1553ea5c700 <col:152, col:157> col:157 _Radix 'int'
| `-DeprecatedAttr 0x1553ea5c988 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea5ce48 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:688:28, col:158> col:44 _ltow_s 'errno_t (long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1553ea5cad0 <col:58, col:63> col:63 _Val 'long'
| |-ParmVarDecl 0x1553ea5cb48 <col:98, col:108> col:108 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1553ea5cbc0 <col:122, col:129> col:129 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea5cc40 <col:148, col:152> col:152 _Radix 'int'
|-FunctionDecl 0x1553ea65350 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:690:82 _ltow 'wchar_t *(long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long, wchar_t *, int)'
| |-ParmVarDecl 0x1553ea65088 <col:94, col:100> col:100 _Value 'long'
| |-ParmVarDecl 0x1553ea65100 <col:132, col:141> col:141 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1553ea65180 <col:153, col:158> col:158 _Radix 'int'
| `-DeprecatedAttr 0x1553ea65408 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea658c8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:691:28, col:168> col:44 _ultow_s 'errno_t (unsigned long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1553ea65550 <col:59, col:73> col:73 _Val 'unsigned long'
| |-ParmVarDecl 0x1553ea655c8 <col:108, col:118> col:118 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1553ea65640 <col:132, col:139> col:139 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea656c0 <col:158, col:162> col:162 _Radix 'int'
|-FunctionDecl 0x1553ea65d40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:693:82 _ultow 'wchar_t *(unsigned long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long, wchar_t *, int)'
| |-ParmVarDecl 0x1553ea65a78 <col:95, col:110> col:110 _Value 'unsigned long'
| |-ParmVarDecl 0x1553ea65af0 <col:142, col:151> col:151 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1553ea65b70 <col:163, col:168> col:168 _Radix 'int'
| `-DeprecatedAttr 0x1553ea65df8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea64160 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:694:24, col:118> col:39 wcstod 'double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1553ea65f38 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea63fb8 <col:100, col:111> col:111 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1553ea64508 <line:695:24, col:148> col:39 _wcstod_l 'double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1553ea64238 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea642b8 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1553ea64330 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea648c8 <line:696:24, col:129> col:39 wcstol 'long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1553ea645e8 <col:53, col:68> col:68 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea64668 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1553ea646e8 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x1553ea64d30 <line:697:24, col:159> col:39 _wcstol_l 'long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea649a8 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea64a28 <col:102, col:112> col:112 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1553ea64aa8 <col:121, col:125> col:125 _Radix 'int'
| `-ParmVarDecl 0x1553ea64b20 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea5e098 <line:698:24, col:133> col:43 wcstoll 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1553ea64e18 <col:58, col:73> col:73 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea64e98 <col:104, col:114> col:114 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1553ea64f18 <col:123, col:127> col:127 _Radix 'int'
|-FunctionDecl 0x1553ea5e500 <line:699:24, col:164> col:43 _wcstoll_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea5e178 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea5e1f8 <col:107, col:117> col:117 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1553ea5e278 <col:126, col:130> col:130 _Radix 'int'
| `-ParmVarDecl 0x1553ea5e2f0 <col:147, col:157> col:157 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea5e8c8 <line:700:24, col:137> col:46 wcstoul 'unsigned long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1553ea5e5e8 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea5e668 <col:107, col:118> col:118 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1553ea5e6e8 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x1553ea5ed30 <line:701:24, col:167> col:46 _wcstoul_l 'unsigned long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea5e9a8 <col:64, col:79> col:79 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea5ea28 <col:110, col:120> col:120 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1553ea5eaa8 <col:129, col:133> col:133 _Radix 'int'
| `-ParmVarDecl 0x1553ea5eb20 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea6a1d8 <line:702:24, col:143> col:51 wcstoull 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1553ea5ee18 <col:67, col:82> col:82 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea5ee98 <col:113, col:124> col:124 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1553ea6a000 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x1553ea6a640 <line:703:24, col:174> col:51 _wcstoull_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea6a2b8 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea6a338 <col:116, col:127> col:127 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1553ea6a3b8 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x1553ea6a430 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea6a950 <line:704:24, col:124> col:44 wcstold 'long double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1553ea6a728 <col:59, col:75> col:75 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea6a7a8 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1553ea6acf8 <line:705:24, col:155> col:44 _wcstold_l 'long double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1553ea6aa28 <col:62, col:78> col:78 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea6aaa8 <col:109, col:120> col:120 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1553ea6ab20 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea67fe0 <line:706:24, col:117> col:38 wcstof 'float (const wchar_t *, wchar_t **) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1553ea6add8 <col:52, col:68> col:68 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea6ae58 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1553ea68388 <line:707:24, col:148> col:38 _wcstof_l 'float (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1553ea680b8 <col:55, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea68138 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1553ea681b0 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea68600 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:711:118> col:78 _wgetenv 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1553ea68528 <col:94, col:110> col:110 _VarName 'const wchar_t *'
| `-DeprecatedAttr 0x1553ea686a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea68b58 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:712:28, col:198> col:44 _wgetenv_s 'errno_t (size_t *, wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1553ea687e8 <col:61, col:70> col:70 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x1553ea68860 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1553ea688d8 <col:143, col:150> col:150 _DstSizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea68950 <col:174, col:190> col:190 _VarName 'const wchar_t *'
|-FunctionDecl 0x1553ea68f10 <line:720:28, col:214> col:44 _wdupenv_s 'errno_t (wchar_t **, size_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t **, size_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea68c48 <col:127, col:137> col:137 _Buffer 'wchar_t **'
| |-ParmVarDecl 0x1553ea68cc0 <col:156, col:164> col:164 _BufferSizeInWords 'size_t *'
| `-ParmVarDecl 0x1553ea68d38 <col:191, col:206> col:206 _VarName 'const wchar_t *'
|-FunctionDecl 0x1553ea6b198 <line:728:9, col:65> col:21 _wsystem 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1553ea6b020 <col:41, col:57> col:57 _Command 'const wchar_t *'
|-FunctionDecl 0x1553ea6b3e8 <line:733:24, col:71> col:39 _wtof 'double (const wchar_t *) __attribute__((cdecl))':'double (const wchar_t *)'
| `-ParmVarDecl 0x1553ea6b268 <col:52, col:67> col:67 _Str 'const wchar_t *'
|-FunctionDecl 0x1553ea6b6e0 <line:734:24, col:101> col:39 _wtof_l 'double (const wchar_t *, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1553ea6b4b8 <col:54, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea6b530 <col:84, col:94> col:94 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea6b898 <line:735:24, col:68> col:36 _wtoi 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1553ea6b7b8 <col:49, col:64> col:64 _Str 'const wchar_t *'
|-FunctionDecl 0x1553ea6bb90 <line:736:24, col:98> col:36 _wtoi_l 'int (const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1553ea6b968 <col:51, col:66> col:66 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea6b9e0 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea6bde8 <line:737:24, col:69> col:37 _wtol 'long (const wchar_t *) __attribute__((cdecl))':'long (const wchar_t *)'
| `-ParmVarDecl 0x1553ea6bc68 <col:50, col:65> col:65 _Str 'const wchar_t *'
|-FunctionDecl 0x1553ea6c0f0 <line:738:24, col:99> col:37 _wtol_l 'long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1553ea6beb8 <col:52, col:67> col:67 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea6bf30 <col:82, col:92> col:92 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea6c348 <line:739:24, col:75> col:42 _wtoll 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x1553ea6c1c8 <col:56, col:71> col:71 _Str 'const wchar_t *'
|-FunctionDecl 0x1553ea6c640 <line:740:24, col:105> col:42 _wtoll_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1553ea6c418 <col:58, col:73> col:73 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea6c490 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea6ca98 <line:742:28, col:162> col:44 _i64tow_s 'errno_t (long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1553ea6c720 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x1553ea6c798 <col:102, col:112> col:112 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1553ea6c810 <col:126, col:133> col:133 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea6c890 <col:152, col:156> col:156 _Radix 'int'
|-FunctionDecl 0x1553ea6cf10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:743:146> col:62 _i64tow 'wchar_t *(long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long long, wchar_t *, int)'
| |-ParmVarDecl 0x1553ea6cc48 <col:75, col:83> col:83 _Val 'long long'
| |-ParmVarDecl 0x1553ea6ccc0 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1553ea6cd40 <col:136, col:140> col:140 _Radix 'int'
| `-DeprecatedAttr 0x1553ea6cfc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea6d4a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:744:28, col:172> col:44 _ui64tow_s 'errno_t (unsigned long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1553ea6d130 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x1553ea6d1a8 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1553ea6d220 <col:136, col:143> col:143 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea6d2a0 <col:162, col:166> col:166 _Radix 'int'
|-FunctionDecl 0x1553ea6d920 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:745:157> col:63 _ui64tow 'wchar_t *(unsigned long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long long, wchar_t *, int)'
| |-ParmVarDecl 0x1553ea6d658 <col:77, col:94> col:94 _Val 'unsigned long long'
| |-ParmVarDecl 0x1553ea6d6d0 <col:123, col:133> col:133 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1553ea6d750 <col:147, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x1553ea6d9d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea6dbf8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:746:24, col:76> col:42 _wtoi64 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x1553ea6db18 <col:57, col:72> col:72 _Str 'const wchar_t *'
|-FunctionDecl 0x1553ea6de40 <line:747:24, col:106> col:42 _wtoi64_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1553ea6dcc8 <col:59, col:74> col:74 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1553ea6dd40 <col:89, col:99> col:99 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea660e0 <line:748:24, col:141> col:42 _wcstoi64 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1553ea6df18 <col:59, col:75> col:75 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea6df98 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1553ea65fc0 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x1553ea66478 <line:749:24, col:171> col:42 _wcstoi64_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea661c0 <col:61, col:77> col:77 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea66240 <col:108, col:119> col:119 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1553ea662c0 <col:133, col:137> col:137 _Radix 'int'
| `-ParmVarDecl 0x1553ea66338 <col:154, col:164> col:164 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea66780 <line:750:24, col:150> col:50 _wcstoui64 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1553ea66560 <col:68, col:84> col:84 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea665e0 <col:115, col:126> col:126 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1553ea66660 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x1553ea66b18 <line:751:24, col:180> col:50 _wcstoui64_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1553ea66860 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1553ea668e0 <col:117, col:128> col:128 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1553ea66960 <col:142, col:146> col:146 _Radix 'int'
| `-ParmVarDecl 0x1553ea669d8 <col:163, col:173> col:173 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea66e20 <line:770:24, col:151> col:39 _fullpath 'char *(char *, const char *, size_t) __attribute__((cdecl))':'char *(char *, const char *, size_t)'
| |-ParmVarDecl 0x1553ea66c08 <col:82, col:89> col:89 _FullPath 'char *'
| |-ParmVarDecl 0x1553ea66c88 <col:107, col:120> col:120 _Path 'const char *'
| `-ParmVarDecl 0x1553ea66d00 <col:132, col:139> col:139 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea6e4a8 <line:778:28, col:189> col:44 _ecvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x1553ea66f08 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea6e040 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea6e0c0 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x1553ea6e140 <col:132, col:136> col:136 _NumOfDights 'int'
| |-ParmVarDecl 0x1553ea6e1c0 <col:156, col:162> col:162 _PtDec 'int *'
| `-ParmVarDecl 0x1553ea6e240 <col:176, col:182> col:182 _PtSign 'int *'
|-FunctionDecl 0x1553ea6e9a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:780:158> col:72 _ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1553ea6e668 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x1553ea6e6e8 <col:101, col:105> col:105 _NumOfDigits 'int'
| |-ParmVarDecl 0x1553ea6e768 <col:125, col:131> col:131 _PtDec 'int *'
| |-ParmVarDecl 0x1553ea6e7e8 <col:145, col:151> col:151 _PtSign 'int *'
| `-DeprecatedAttr 0x1553ea6ea60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea6ef98 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:781:28, col:186> col:44 _fcvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x1553ea6eba8 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea6ec20 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea6eca0 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x1553ea6ed20 <col:132, col:136> col:136 _NumOfDec 'int'
| |-ParmVarDecl 0x1553ea6eda0 <col:153, col:159> col:159 _PtDec 'int *'
| `-ParmVarDecl 0x1553ea6ee20 <col:173, col:179> col:179 _PtSign 'int *'
|-FunctionDecl 0x1553ea673b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:783:155> col:72 _fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1553ea670f0 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x1553ea67170 <col:101, col:105> col:105 _NumOfDec 'int'
| |-ParmVarDecl 0x1553ea671f0 <col:122, col:128> col:128 _PtDec 'int *'
| |-ParmVarDecl 0x1553ea67270 <col:142, col:148> col:148 _PtSign 'int *'
| `-DeprecatedAttr 0x1553ea67470 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea67938 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:784:9, col:129> col:25 _gcvt_s 'errno_t (char *, size_t, double, int) __attribute__((cdecl))':'errno_t (char *, size_t, double, int)'
| |-ParmVarDecl 0x1553ea675b8 <col:55, col:62> col:62 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea67630 <col:76, col:83> col:83 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea676b0 <col:95, col:102> col:102 _Val 'double'
| `-ParmVarDecl 0x1553ea67730 <col:113, col:117> col:117 _NumOfDigits 'int'
|-FunctionDecl 0x1553ea67d88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:786:141> col:57 _gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x1553ea67ae8 <col:68, col:75> col:75 _Val 'double'
| |-ParmVarDecl 0x1553ea67b68 <col:86, col:90> col:90 _NumOfDigits 'int'
| |-ParmVarDecl 0x1553ea67be8 <col:127, col:134> col:134 _DstBuf 'char *'
| `-DeprecatedAttr 0x1553ea67e40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea69250 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:788:24, col:91> col:36 _atodbl 'int (_CRT_DOUBLE *, char *) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *)'
| |-ParmVarDecl 0x1553ea69028 <col:50, col:64> col:64 _Result '_CRT_DOUBLE *'
| `-ParmVarDecl 0x1553ea690a8 <col:80, col:87> col:87 _Str 'char *'
|-FunctionDecl 0x1553ea695d0 <line:789:24, col:89> col:36 _atoldbl 'int (_LDOUBLE *, char *) __attribute__((cdecl))':'int (_LDOUBLE *, char *)'
| |-ParmVarDecl 0x1553ea693a8 <col:51, col:62> col:62 _Result '_LDOUBLE *'
| `-ParmVarDecl 0x1553ea69428 <col:78, col:85> col:85 _Str 'char *'
|-FunctionDecl 0x1553ea69950 <line:790:24, col:96> col:36 _atoflt 'int (_CRT_FLOAT *, const char *) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *)'
| |-ParmVarDecl 0x1553ea69728 <col:50, col:63> col:63 _Result '_CRT_FLOAT *'
| `-ParmVarDecl 0x1553ea697a8 <col:79, col:92> col:92 _Str 'const char *'
|-FunctionDecl 0x1553ea69cf8 <line:791:24, col:121> col:36 _atodbl_l 'int (_CRT_DOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x1553ea69a28 <col:52, col:66> col:66 _Result '_CRT_DOUBLE *'
| |-ParmVarDecl 0x1553ea69aa8 <col:82, col:89> col:89 _Str 'char *'
| `-ParmVarDecl 0x1553ea69b20 <col:104, col:114> col:114 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea72168 <line:792:24, col:119> col:36 _atoldbl_l 'int (_LDOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_LDOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x1553ea69dd8 <col:53, col:64> col:64 _Result '_LDOUBLE *'
| |-ParmVarDecl 0x1553ea69e58 <col:80, col:87> col:87 _Str 'char *'
| `-ParmVarDecl 0x1553ea69ed0 <col:102, col:112> col:112 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea72518 <line:793:24, col:126> col:36 _atoflt_l 'int (_CRT_FLOAT *, const char *, _locale_t) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *, _locale_t)'
| |-ParmVarDecl 0x1553ea72248 <col:52, col:65> col:65 _Result '_CRT_FLOAT *'
| |-ParmVarDecl 0x1553ea722c8 <col:81, col:94> col:94 _Str 'const char *'
| `-ParmVarDecl 0x1553ea72340 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1553ea727f0 <line:794:46> col:46 implicit _lrotl 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x1553ea72890 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x1553ea728f8 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1553ea72970 <col:46> Implicit
|-FunctionDecl 0x1553ea729c8 prev 0x1553ea727f0 <col:24, col:93> col:46 _lrotl 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x1553ea72600 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1553ea72680 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x1553ea72ac0 <col:46> Inherited Implicit
|-FunctionDecl 0x1553ea72c80 <line:795:46> col:46 implicit _lrotr 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x1553ea72d20 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x1553ea72d88 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1553ea72e00 <col:46> Implicit
|-FunctionDecl 0x1553ea72e58 prev 0x1553ea72c80 <col:24, col:93> col:46 _lrotr 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x1553ea72b00 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1553ea72b80 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x1553ea72f50 <col:46> Inherited Implicit
|-FunctionDecl 0x1553ea71468 <line:796:40, line:797:37> line:796:58 _makepath_s 'errno_t (char *, size_t, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x1553ea72f90 <col:99, col:106> col:106 _PathResult 'char *'
| |-ParmVarDecl 0x1553ea73008 <col:124, col:131> col:131 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea71088 <col:156, col:169> col:169 _Drive 'const char *'
| |-ParmVarDecl 0x1553ea71108 <col:188, col:201> col:201 _Dir 'const char *'
| |-ParmVarDecl 0x1553ea71188 <col:218, col:231> col:231 _Filename 'const char *'
| `-ParmVarDecl 0x1553ea71208 <line:797:20, col:33> col:33 _Ext 'const char *'
|-FunctionDecl 0x1553ea71a10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:799:78 _makepath 'void (char *, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'void (char *, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x1553ea71628 <col:113, col:119> col:119 _Path 'char *'
| |-ParmVarDecl 0x1553ea716a8 <col:137, col:151> col:151 _Drive 'const char *'
| |-ParmVarDecl 0x1553ea71728 <col:170, col:184> col:184 _Dir 'const char *'
| |-ParmVarDecl 0x1553ea717a8 <col:201, col:215> col:215 _Filename 'const char *'
| |-ParmVarDecl 0x1553ea71828 <col:237, col:251> col:251 _Ext 'const char *'
| `-DeprecatedAttr 0x1553ea71ad8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea71db0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:826:9, col:59> col:27 _onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x1553ea71c40 <col:44, col:54> col:54 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1553ea71fd0 <line:831:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x1553ea71e88 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x1553ea741b8 <line:838:24, col:77> col:39 _putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1553ea740d8 <col:54, col:67> col:67 _EnvString 'const char *'
|-FunctionDecl 0x1553ea74478 <line:839:28, col:107> col:44 _putenv_s 'errno_t (const char *, const char *) __attribute__((cdecl))':'errno_t (const char *, const char *)'
| |-ParmVarDecl 0x1553ea74290 <col:61, col:74> col:74 _Name 'const char *'
| `-ParmVarDecl 0x1553ea74310 <col:88, col:101> col:101 _Value 'const char *'
|-FunctionDecl 0x1553ea74740 <line:842:30> col:30 implicit _rotl 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x1553ea747e0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x1553ea74848 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1553ea748c0 <col:30> Implicit
|-FunctionDecl 0x1553ea74918 prev 0x1553ea74740 <col:9, col:75> col:30 _rotl 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x1553ea74558 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x1553ea745d8 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x1553ea74a10 <col:30> Inherited Implicit
|-FunctionDecl 0x1553ea74c40 <line:843:34> col:34 implicit _rotl64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x1553ea74ce0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1553ea74d48 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1553ea74dc0 <col:34> Implicit
|-FunctionDecl 0x1553ea74e18 prev 0x1553ea74c40 <col:9, col:85> col:34 _rotl64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x1553ea74a50 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x1553ea74ad0 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x1553ea74f10 <col:34> Inherited Implicit
|-FunctionDecl 0x1553ea750f0 <line:844:30> col:30 implicit _rotr 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x1553ea75190 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x1553ea751f8 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1553ea75270 <col:30> Implicit
|-FunctionDecl 0x1553ea752c8 prev 0x1553ea750f0 <col:9, col:75> col:30 _rotr 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x1553ea74f50 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x1553ea74fd0 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x1553ea753c0 <col:30> Inherited Implicit
|-FunctionDecl 0x1553ea75580 <line:845:34> col:34 implicit _rotr64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x1553ea75620 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1553ea75688 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1553ea75700 <col:34> Implicit
|-FunctionDecl 0x1553ea75758 prev 0x1553ea75580 <col:9, col:85> col:34 _rotr64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x1553ea75400 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x1553ea75480 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x1553ea75850 <col:34> Inherited Implicit
|-FunctionDecl 0x1553ea75c08 <line:849:9, col:171> col:25 _searchenv_s 'errno_t (const char *, const char *, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, const char *, char *, size_t)'
| |-ParmVarDecl 0x1553ea75890 <col:45, col:58> col:58 _Filename 'const char *'
| |-ParmVarDecl 0x1553ea75910 <col:76, col:89> col:89 _EnvVar 'const char *'
| |-ParmVarDecl 0x1553ea75990 <col:127, col:134> col:134 _ResultPath 'char *'
| `-ParmVarDecl 0x1553ea75a08 <col:152, col:159> col:159 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea760c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:851:78 _searchenv 'void (const char *, const char *, char *) __attribute__((cdecl))':'void (const char *, const char *, char *)'
| |-ParmVarDecl 0x1553ea75db8 <col:97, col:111> col:111 _Filename 'const char *'
| |-ParmVarDecl 0x1553ea75e38 <col:129, col:143> col:143 _EnvVar 'const char *'
| |-ParmVarDecl 0x1553ea75eb8 <col:176, col:182> col:182 _ResultPath 'char *'
| `-DeprecatedAttr 0x1553ea76178 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea76760 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:854:261> col:62 _splitpath 'void (const char *, char *, char *, char *, char *) __attribute__((cdecl))':'void (const char *, char *, char *, char *, char *)'
| |-ParmVarDecl 0x1553ea76380 <col:80, col:93> col:93 _FullPath 'const char *'
| |-ParmVarDecl 0x1553ea76400 <col:129, col:136> col:136 _Drive 'char *'
| |-ParmVarDecl 0x1553ea76480 <col:169, col:176> col:176 _Dir 'char *'
| |-ParmVarDecl 0x1553ea76500 <col:207, col:214> col:214 _Filename 'char *'
| |-ParmVarDecl 0x1553ea76580 <col:250, col:257> col:257 _Ext 'char *'
| `-DeprecatedAttr 0x1553ea76828 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea6f050 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:855:40, line:859:79> line:855:57 _splitpath_s 'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t)'
| |-ParmVarDecl 0x1553ea76970 <col:77, col:90> col:90 _FullPath 'const char *'
| |-ParmVarDecl 0x1553ea769f0 <line:856:48, col:55> col:55 _Drive 'char *'
| |-ParmVarDecl 0x1553ea76a68 <col:68, col:75> col:75 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea76ae8 <line:857:46, col:53> col:53 _Dir 'char *'
| |-ParmVarDecl 0x1553ea76b60 <col:64, col:71> col:71 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea76be0 <line:858:51, col:58> col:58 _Filename 'char *'
| |-ParmVarDecl 0x1553ea76c58 <col:74, col:81> col:81 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea76cd8 <line:859:46, col:53> col:53 _Ext 'char *'
| `-ParmVarDecl 0x1553ea76d50 <col:64, col:71> col:71 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea6f400 <line:862:9, col:204> col:24 _swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x1553ea6f168 <col:95, col:102> col:102 _Buf1 'char *'
| |-ParmVarDecl 0x1553ea6f1e8 <col:174, col:181> col:181 _Buf2 'char *'
| `-ParmVarDecl 0x1553ea6f268 <col:188, col:192> col:192 _SizeInBytes 'int'
|-FunctionDecl 0x1553ea6f6e8 <line:873:24, col:161> col:42 _wfullpath 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea6f4e0 <col:86, col:96> col:96 _FullPath 'wchar_t *'
| |-ParmVarDecl 0x1553ea6f558 <col:114, col:130> col:130 _Path 'const wchar_t *'
| `-ParmVarDecl 0x1553ea6f5d0 <col:142, col:149> col:149 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea6fc88 <line:879:40, line:880:40> line:879:56 _wmakepath_s 'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea6f7c8 <col:91, col:101> col:101 _PathResult 'wchar_t *'
| |-ParmVarDecl 0x1553ea6f840 <col:119, col:126> col:126 _SIZE 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea6f8b8 <col:144, col:160> col:160 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x1553ea6f930 <col:179, col:195> col:195 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x1553ea6f9a8 <col:212, col:228> col:228 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x1553ea6fa20 <line:880:20, col:36> col:36 _Ext 'const wchar_t *'
|-FunctionDecl 0x1553ea77300 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:882:78 _wmakepath 'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea6fe40 <col:114, col:123> col:123 _ResultPath 'wchar_t *'
| |-ParmVarDecl 0x1553ea6feb8 <col:147, col:164> col:164 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x1553ea6ff30 <col:183, col:200> col:200 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x1553ea6ffa8 <col:217, col:234> col:234 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1553ea770d0 <col:256, col:273> col:273 _Ext 'const wchar_t *'
| `-DeprecatedAttr 0x1553ea773c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea77680 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:885:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x1553ea77508 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1553ea77830 <line:889:24, col:81> col:39 _wputenv 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1553ea77750 <col:55, col:71> col:71 _EnvString 'const wchar_t *'
|-FunctionDecl 0x1553ea77ad8 <line:890:28, col:114> col:44 _wputenv_s 'errno_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1553ea77900 <col:62, col:78> col:78 _Name 'const wchar_t *'
| `-ParmVarDecl 0x1553ea77978 <col:92, col:108> col:108 _Value 'const wchar_t *'
|-FunctionDecl 0x1553ea77f18 <line:891:9, col:181> col:25 _wsearchenv_s 'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea77bb0 <col:46, col:62> col:62 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1553ea77c28 <col:80, col:96> col:96 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x1553ea77ca0 <col:134, col:144> col:144 _ResultPath 'wchar_t *'
| `-ParmVarDecl 0x1553ea77d18 <col:162, col:169> col:169 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea70320 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:893:78 _wsearchenv 'void (const wchar_t *, const wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x1553ea70060 <col:98, col:115> col:115 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1553ea700d8 <col:133, col:150> col:150 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x1553ea70150 <col:183, col:192> col:192 _ResultPath 'wchar_t *'
| `-DeprecatedAttr 0x1553ea703d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea709f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:896:278> col:63 _wsplitpath 'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x1553ea705d8 <col:82, col:98> col:98 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x1553ea70650 <col:134, col:144> col:144 _Drive 'wchar_t *'
| |-ParmVarDecl 0x1553ea706c8 <col:177, col:187> col:187 _Dir 'wchar_t *'
| |-ParmVarDecl 0x1553ea70740 <col:218, col:228> col:228 _Filename 'wchar_t *'
| |-ParmVarDecl 0x1553ea707b8 <col:264, col:274> col:274 _Ext 'wchar_t *'
| `-DeprecatedAttr 0x1553ea70ab8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea7a360 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:897:21, line:901:82> line:897:37 _wsplitpath_s 'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t)'
| |-ParmVarDecl 0x1553ea70bf8 <col:58, col:74> col:74 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x1553ea70c70 <line:898:48, col:58> col:58 _Drive 'wchar_t *'
| |-ParmVarDecl 0x1553ea70ce8 <col:71, col:78> col:78 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea70d60 <line:899:46, col:56> col:56 _Dir 'wchar_t *'
| |-ParmVarDecl 0x1553ea70dd8 <col:67, col:74> col:74 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea70e50 <line:900:51, col:61> col:61 _Filename 'wchar_t *'
| |-ParmVarDecl 0x1553ea70ec8 <col:77, col:84> col:84 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea70f40 <line:901:46, col:56> col:56 _Ext 'wchar_t *'
| `-ParmVarDecl 0x1553ea70fb8 <col:67, col:74> col:74 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x1553ea7a680 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:909:78> col:50 _seterrormode 'void (int) __attribute__((cdecl))':'void (int)'
| |-ParmVarDecl 0x1553ea7a578 <col:69, col:73> col:73 _Mode 'int'
| `-DeprecatedAttr 0x1553ea7a728 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details." ""
|-FunctionDecl 0x1553ea7ab18 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:910:97> col:42 _beep 'void (unsigned int, unsigned int) __attribute__((cdecl))':'void (unsigned int, unsigned int)'
| |-ParmVarDecl 0x1553ea7a938 <col:53, col:62> col:62 _Frequency 'unsigned int'
| |-ParmVarDecl 0x1553ea7a9b8 <col:79, col:88> col:88 _Duration 'unsigned int'
| `-DeprecatedAttr 0x1553ea7abc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details." ""
|-FunctionDecl 0x1553ea7af10 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:911:78> col:43 _sleep 'void (unsigned long) __attribute__((cdecl))':'void (unsigned long)'
| |-ParmVarDecl 0x1553ea7add0 <col:55, col:69> col:69 _Duration 'unsigned long'
| `-DeprecatedAttr 0x1553ea7afb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details." ""
|-FunctionDecl 0x1553ea7c590 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:934:187> col:102 ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1553ea7c2d0 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x1553ea7c350 <col:130, col:134> col:134 _NumOfDigits 'int'
| |-ParmVarDecl 0x1553ea7c3d0 <col:154, col:160> col:160 _PtDec 'int *'
| |-ParmVarDecl 0x1553ea7c450 <col:174, col:180> col:180 _PtSign 'int *'
| |-DeprecatedAttr 0x1553ea7c650 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ecvt. See online help for details." ""
| `-DeprecatedAttr 0x1553ea7c748 <col:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea7cc80 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:935:184> col:102 fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1553ea7c9c0 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x1553ea7ca40 <col:130, col:134> col:134 _NumOfDec 'int'
| |-ParmVarDecl 0x1553ea7cac0 <col:151, col:157> col:157 _PtDec 'int *'
| |-ParmVarDecl 0x1553ea7cb40 <col:171, col:177> col:177 _PtSign 'int *'
| |-DeprecatedAttr 0x1553ea7cd40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcvt. See online help for details." ""
| `-DeprecatedAttr 0x1553ea7ce38 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea7d2e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:936:179> col:96 gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x1553ea7d0b0 <col:106, col:113> col:113 _Val 'double'
| |-ParmVarDecl 0x1553ea7d148 <col:124, col:128> col:128 _NumOfDigits 'int'
| |-ParmVarDecl 0x1553ea7d1c8 <col:165, col:172> col:172 _DstBuf 'char *'
| |-DeprecatedAttr 0x1553ea7d3a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _gcvt. See online help for details." ""
| `-DeprecatedAttr 0x1553ea7d498 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea7d930 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:937:170> col:96 itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x1553ea7d710 <col:106, col:110> col:110 _Val 'int'
| |-ParmVarDecl 0x1553ea7d790 <col:139, col:146> col:146 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea7d810 <col:160, col:164> col:164 _Radix 'int'
| |-DeprecatedAttr 0x1553ea7d9e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _itoa. See online help for details." ""
| `-DeprecatedAttr 0x1553ea7dae0 <col:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea7df78 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:938:171> col:96 ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x1553ea7dd58 <col:106, col:111> col:111 _Val 'long'
| |-ParmVarDecl 0x1553ea7ddd8 <col:140, col:147> col:147 _DstBuf 'char *'
| |-ParmVarDecl 0x1553ea7de58 <col:161, col:165> col:165 _Radix 'int'
| |-DeprecatedAttr 0x1553ea7e030 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ltoa. See online help for details." ""
| `-DeprecatedAttr 0x1553ea7b110 <col:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea7b3a8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:941:108> col:71 putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x1553ea7b2c8 <col:85, col:98> col:98 _EnvString 'const char *'
| `-DeprecatedAttr 0x1553ea7b450 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putenv. See online help for details." ""
|-FunctionDecl 0x1553ea7b830 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:944:245> col:128 swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x1553ea7b618 <col:165, col:172> col:172 _Buf1 'char *'
| |-ParmVarDecl 0x1553ea7b698 <col:210, col:217> col:217 _Buf2 'char *'
| |-ParmVarDecl 0x1553ea7b718 <col:229, col:233> col:233 _SizeInBytes 'int'
| `-DeprecatedAttr 0x1553ea7b8e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _swab. See online help for details." ""
|-FunctionDecl 0x1553ea7bdd0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:945:181> col:96 ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x1553ea7bbb0 <col:107, col:121> col:121 _Val 'unsigned long'
| |-ParmVarDecl 0x1553ea7bc30 <col:150, col:157> col:157 _Dstbuf 'char *'
| |-ParmVarDecl 0x1553ea7bcb0 <col:171, col:175> col:175 _Radix 'int'
| |-DeprecatedAttr 0x1553ea7be88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ultoa. See online help for details." ""
| `-DeprecatedAttr 0x1553ea7bf80 <col:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1553ea7e198 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:64:18, line:947:48> col:18 onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x1553ea7c090 <line:64:18, line:947:43> col:43 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-RecordDecl 0x1553ea7e258 <.//openssl//file_jk/after\crypto\ec/ec_lcl.h:52:1, line:180:1> line:52:8 struct ec_method_st definition
| |-FieldDecl 0x1553ea7e328 <line:54:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x1553ea7e398 <line:56:5, col:9> col:9 field_type 'int'
| |-FieldDecl 0x1553ea7e538 <line:61:5, col:34> col:11 group_init 'int (*)(int *)'
| |-FieldDecl 0x1553ea7e700 <line:62:5, col:37> col:12 group_finish 'void (*)(int *)'
| |-FieldDecl 0x1553ea7e810 <line:63:5, col:43> col:12 group_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x1553ea7ea80 <line:64:5, col:52> col:11 group_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1553ea7ee98 <line:67:5, line:68:54> line:67:11 group_set_curve 'int (*)(int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x1553ea78288 <line:69:5, line:70:37> line:69:11 group_get_curve 'int (*)(const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x1553ea78458 <line:72:5, col:46> col:11 group_get_degree 'int (*)(const int *)'
| |-FieldDecl 0x1553ea78570 <line:73:5, col:46> col:11 group_order_bits 'int (*)(const int *)'
| |-FieldDecl 0x1553ea787e0 <line:75:5, col:64> col:11 group_check_discriminant 'int (*)(const int *, int *)'
| |-FieldDecl 0x1553ea788f8 <line:80:5, col:34> col:11 point_init 'int (*)(int *)'
| |-FieldDecl 0x1553ea78a08 <line:81:5, col:37> col:12 point_finish 'void (*)(int *)'
| |-FieldDecl 0x1553ea78b18 <line:82:5, col:43> col:12 point_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x1553ea78cb8 <line:83:5, col:52> col:11 point_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1553ea78e58 <line:92:5, col:63> col:11 point_set_to_infinity 'int (*)(const int *, int *)'
| |-FieldDecl 0x1553ea87410 <line:93:5, line:96:76> line:93:11 point_set_Jprojective_coordinates_GFp 'int (*)(const int *, int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x1553ea878c0 <line:97:5, line:100:59> line:97:11 point_get_Jprojective_coordinates_GFp 'int (*)(const int *, const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x1553ea87cd8 <line:101:5, line:103:50> line:101:11 point_set_affine_coordinates 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1553ea880e8 <line:104:5, line:105:72> line:104:11 point_get_affine_coordinates 'int (*)(const int *, const int *, int *, int *, int *)'
| |-FieldDecl 0x1553ea814a8 <line:106:5, line:108:54> line:106:11 point_set_compressed_coordinates 'int (*)(const int *, int *, const int *, int, int *)'
| |-FieldDecl 0x1553ea819c8 <line:110:5, line:112:46> line:110:14 point2oct 'size_t (*)(const int *, const int *, int, unsigned char *, size_t, int *)'
| |-FieldDecl 0x1553ea81e28 <line:113:5, line:114:43> line:113:11 oct2point 'int (*)(const int *, int *, const unsigned char *, size_t, int *)'
| |-FieldDecl 0x1553ea851b0 <line:116:5, line:117:44> line:116:11 add 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1553ea85540 <line:118:5, col:75> col:11 dbl 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1553ea85838 <line:119:5, col:58> col:11 invert 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x1553ea85aa0 <line:123:5, col:62> col:11 is_at_infinity 'int (*)(const int *, const int *)'
| |-FieldDecl 0x1553ea85d98 <line:124:5, col:69> col:11 is_on_curve 'int (*)(const int *, const int *, int *)'
| |-FieldDecl 0x1553ea86120 <line:125:5, line:126:31> line:125:11 point_cmp 'int (*)(const int *, const int *, const int *, int *)'
| |-FieldDecl 0x1553ea80318 <line:128:5, col:63> col:11 make_affine 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x1553ea80790 <line:129:5, line:130:40> line:129:11 points_make_affine 'int (*)(const int *, size_t, int **, int *)'
| |-FieldDecl 0x1553ea80dc8 <line:136:5, line:138:25> line:136:11 mul 'int (*)(const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-FieldDecl 0x1553ea81030 <line:139:5, col:54> col:11 precompute_mult 'int (*)(int *, int *)'
| |-FieldDecl 0x1553ea881e0 <line:140:5, col:55> col:11 have_precompute_mult 'int (*)(const int *)'
| |-FieldDecl 0x1553ea88518 <line:148:5, line:149:48> line:148:11 field_mul 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1553ea887c8 <line:150:5, col:77> col:11 field_sqr 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1553ea88b00 <line:151:5, line:152:48> line:151:11 field_div 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1553ea88db0 <line:159:5, col:77> col:11 field_inv 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1553ea89060 <line:161:5, line:162:34> line:161:11 field_encode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1553ea89330 <line:164:5, line:165:34> line:164:11 field_decode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1553ea89558 <line:166:5, col:67> col:11 field_set_to_one 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x1553ea89880 <line:168:5, col:75> col:14 priv2oct 'size_t (*)(const int *, unsigned char *, size_t)'
| |-FieldDecl 0x1553ea89ba8 <line:169:5, col:72> col:11 oct2priv 'int (*)(int *, const unsigned char *, size_t)'
| |-FieldDecl 0x1553ea89d48 <line:170:5, col:61> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x1553ea89e60 <line:171:5, col:32> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x1553ea89f78 <line:172:5, col:40> col:11 keycheck 'int (*)(const int *)'
| |-FieldDecl 0x1553ea8a090 <line:173:5, col:35> col:11 keygenpub 'int (*)(int *)'
| |-FieldDecl 0x1553ea841e8 <line:174:5, col:50> col:11 keycopy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1553ea842f8 <line:175:5, col:36> col:12 keyfinish 'void (*)(int *)'
| |-FieldDecl 0x1553ea84700 <line:177:5, line:178:72> line:177:11 ecdh_compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| `-FieldDecl 0x1553ea84928 <line:179:5, col:77> col:11 blind_coordinates 'int (*)(const int *, int *, int *)'
|-RecordDecl 0x1553ea84980 <line:185:9, col:16> col:16 struct nistp224_pre_comp_st
|-TypedefDecl 0x1553ea84a98 <col:1, col:37> col:37 referenced NISTP224_PRE_COMP 'struct nistp224_pre_comp_st':'struct nistp224_pre_comp_st'
| `-ElaboratedType 0x1553ea84a40 'struct nistp224_pre_comp_st' sugar
|   `-RecordType 0x1553ea84a20 'struct nistp224_pre_comp_st'
|     `-Record 0x1553ea84980 'nistp224_pre_comp_st'
|-RecordDecl 0x1553ea84b08 <line:186:9, col:16> col:16 struct nistp256_pre_comp_st
|-TypedefDecl 0x1553ea84c18 <col:1, col:37> col:37 referenced NISTP256_PRE_COMP 'struct nistp256_pre_comp_st':'struct nistp256_pre_comp_st'
| `-ElaboratedType 0x1553ea84bc0 'struct nistp256_pre_comp_st' sugar
|   `-RecordType 0x1553ea84ba0 'struct nistp256_pre_comp_st'
|     `-Record 0x1553ec25d58 'nistp256_pre_comp_st'
|-RecordDecl 0x1553ea84c88 <line:187:9, col:16> col:16 struct nistp521_pre_comp_st
|-TypedefDecl 0x1553ea84d98 <col:1, col:37> col:37 referenced NISTP521_PRE_COMP 'struct nistp521_pre_comp_st':'struct nistp521_pre_comp_st'
| `-ElaboratedType 0x1553ea84d40 'struct nistp521_pre_comp_st' sugar
|   `-RecordType 0x1553ea84d20 'struct nistp521_pre_comp_st'
|     `-Record 0x1553ea84c88 'nistp521_pre_comp_st'
|-RecordDecl 0x1553ea84e08 <line:188:9, col:16> col:16 struct nistz256_pre_comp_st
|-TypedefDecl 0x1553ea84f18 <col:1, col:37> col:37 referenced NISTZ256_PRE_COMP 'struct nistz256_pre_comp_st':'struct nistz256_pre_comp_st'
| `-ElaboratedType 0x1553ea84ec0 'struct nistz256_pre_comp_st' sugar
|   `-RecordType 0x1553ea84ea0 'struct nistz256_pre_comp_st'
|     `-Record 0x1553ea84e08 'nistz256_pre_comp_st'
|-RecordDecl 0x1553ea84f88 <line:189:9, col:16> col:16 struct ec_pre_comp_st
|-TypedefDecl 0x1553ea85098 <col:1, col:31> col:31 referenced EC_PRE_COMP 'struct ec_pre_comp_st':'struct ec_pre_comp_st'
| `-ElaboratedType 0x1553ea85040 'struct ec_pre_comp_st' sugar
|   `-RecordType 0x1553ea85020 'struct ec_pre_comp_st'
|     `-Record 0x1553ea84f88 'ec_pre_comp_st'
|-RecordDecl 0x1553ea85108 <line:191:1, line:256:1> line:191:8 invalid struct ec_group_st definition
| |-FieldDecl 0x1553ea821b8 <line:192:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x1553ea82228 <line:193:5, col:15> col:15 invalid generator 'int *'
| |-FieldDecl 0x1553ea82298 <line:194:5, col:13> col:13 invalid order 'int *'
| |-FieldDecl 0x1553ea82308 <col:5, col:21> col:21 invalid cofactor 'int *'
| |-FieldDecl 0x1553ea82378 <line:195:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x1553ea823e8 <line:196:5, col:9> col:9 asn1_flag 'int'
| |-FieldDecl 0x1553ea82458 <line:197:5, col:29> col:29 invalid asn1_form 'int'
| |-FieldDecl 0x1553ea824c8 <line:198:5, col:20> col:20 seed 'unsigned char *'
| |-FieldDecl 0x1553ea82530 <line:200:5, col:12> col:12 seed_len 'size_t':'unsigned long long'
| |-FieldDecl 0x1553ea825a0 <line:210:5, col:13> col:13 invalid field 'int *'
| |-FieldDecl 0x1553ea826a0 <line:218:5, col:15> col:9 poly 'int [6]'
| |-FieldDecl 0x1553ea82710 <line:226:5, col:13> col:13 invalid a 'int *'
| |-FieldDecl 0x1553ea82780 <col:5, col:17> col:17 invalid b 'int *'
| |-FieldDecl 0x1553ea827f0 <line:228:5, col:9> col:9 a_is_minus3 'int'
| |-FieldDecl 0x1553ea82860 <line:230:5, col:11> col:11 field_data1 'void *'
| |-FieldDecl 0x1553ea828d0 <line:232:5, col:11> col:11 field_data2 'void *'
| |-FieldDecl 0x1553ea82c60 <line:234:5, line:235:36> line:234:11 field_mod_func 'int (*)(int *, const int *, const int *, int *)'
| |-FieldDecl 0x1553ea82cd0 <line:237:5, col:18> col:18 invalid mont_data 'int *'
| |-EnumDecl 0x1553ea82d28 <line:244:5, line:248:5> line:244:5
| | |-EnumConstantDecl 0x1553ea82e00 <line:245:9> col:9 PCT_none 'int'
| | |-EnumConstantDecl 0x1553ea82e58 <line:246:9> col:9 PCT_nistp224 'int'
| | |-EnumConstantDecl 0x1553ea82eb0 <col:23> col:23 referenced PCT_nistp256 'int'
| | |-EnumConstantDecl 0x1553ea82f08 <col:37> col:37 PCT_nistp521 'int'
| | |-EnumConstantDecl 0x1553ea82f60 <col:51> col:51 PCT_nistz256 'int'
| | `-EnumConstantDecl 0x1553ea82fb8 <line:247:9> col:9 PCT_ec 'int'
| |-FieldDecl 0x1553ea83068 <line:244:5, line:248:7> col:7 pre_comp_type 'enum (anonymous enum at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:244:5)':'enum ec_group_st::(anonymous at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:244:5)'
| |-RecordDecl 0x1553ea830c0 <line:249:5, line:255:5> line:249:5 union definition
| | |-FieldDecl 0x1553ea8a288 <line:250:9, col:28> col:28 nistp224 'NISTP224_PRE_COMP *'
| | |-FieldDecl 0x1553ea8a368 <line:251:9, col:28> col:28 nistp256 'NISTP256_PRE_COMP *'
| | |-FieldDecl 0x1553ea8a448 <line:252:9, col:28> col:28 nistp521 'NISTP521_PRE_COMP *'
| | |-FieldDecl 0x1553ea8a528 <line:253:9, col:28> col:28 nistz256 'NISTZ256_PRE_COMP *'
| | `-FieldDecl 0x1553ea8a608 <line:254:9, col:22> col:22 ec 'EC_PRE_COMP *'
| `-FieldDecl 0x1553ea8a6b8 <line:249:5, line:255:7> col:7 pre_comp 'union (anonymous union at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:249:5)':'union ec_group_st::(anonymous at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:249:5)'
|-RecordDecl 0x1553ea8a710 <line:263:1, line:276:1> line:263:8 invalid struct ec_key_st definition
| |-FieldDecl 0x1553ea8a7e8 <line:264:5, col:26> col:26 invalid meth 'const int *'
| |-FieldDecl 0x1553ea8a858 <line:265:5, col:13> col:13 invalid engine 'int *'
| |-FieldDecl 0x1553ea8a8c8 <line:266:5, col:9> col:9 version 'int'
| |-FieldDecl 0x1553ea8a938 <line:267:5, col:15> col:15 invalid group 'int *'
| |-FieldDecl 0x1553ea8a9a8 <line:268:5, col:15> col:15 invalid pub_key 'int *'
| |-FieldDecl 0x1553ea8aa18 <line:269:5, col:13> col:13 invalid priv_key 'int *'
| |-FieldDecl 0x1553ea8aa88 <line:270:5, col:18> col:18 enc_flag 'unsigned int'
| |-FieldDecl 0x1553ea8aaf8 <line:271:5, col:29> col:29 invalid conv_form 'int'
| |-FieldDecl 0x1553ea8ab68 <line:272:5, col:9> col:9 references 'int'
| |-FieldDecl 0x1553ea8abd8 <line:273:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x1553ea8ac48 <line:274:5, col:20> col:20 invalid ex_data 'int'
| `-FieldDecl 0x1553ea8acb8 <line:275:5, col:20> col:20 invalid lock 'int *'
|-RecordDecl 0x1553ea8ad10 <line:278:1, line:292:1> line:278:8 invalid struct ec_point_st definition
| |-FieldDecl 0x1553ea8ade8 <line:279:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x1553ea8ae58 <line:281:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x1553ea8aec8 <line:286:5, col:13> col:13 invalid X 'int *'
| |-FieldDecl 0x1553ea8af38 <line:287:5, col:13> col:13 invalid Y 'int *'
| |-FieldDecl 0x1553ea8afa8 <line:288:5, col:13> col:13 invalid Z 'int *'
| `-FieldDecl 0x1553ea8b018 <line:290:5, col:9> col:9 Z_is_one 'int'
|-FunctionDecl 0x1553ea83190 <line:295:1, line:305:1> line:295:24 invalid ec_point_is_compat 'int (const int *, const int *)' static
| |-ParmVarDecl 0x1553ea8b088 <col:43, col:59> col:59 invalid point 'const int *'
| |-ParmVarDecl 0x1553ea8b108 <line:296:43, col:59> col:59 invalid group 'const int *'
| `-CompoundStmt 0x1553ea83348 <line:297:1, line:305:1>
|   |-IfStmt 0x1553ea832f8 <line:298:5, line:302:16>
|   | |-OpaqueValueExpr 0x1553ea832e0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1553ea832d0 <col:9, col:16>
|   |   `-IntegerLiteral 0x1553ea832a8 <col:16> 'int' 0
|   `-ReturnStmt 0x1553ea83338 <line:304:5, col:12>
|     `-IntegerLiteral 0x1553ea83310 <col:12> 'int' 1
|-FunctionDecl 0x1553ea83468 <line:308:1, col:64> col:20 EC_nistp224_pre_comp_dup 'NISTP224_PRE_COMP *(NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea83378 <col:45, col:63> col:64 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x1553ea83628 <line:309:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea83538 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1553ea837e8 <line:310:1, col:64> col:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea836f8 <col:45, col:63> col:64 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x1553ea839a8 <line:311:1, col:64> col:20 EC_nistz256_pre_comp_dup 'NISTZ256_PRE_COMP *(NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea838b8 <col:45, col:63> col:64 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x1553ea83b08 prev 0x1553ea83628 <line:312:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea83a78 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1553ea83cb8 <line:313:1, col:46> col:14 EC_ec_pre_comp_dup 'EC_PRE_COMP *(EC_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea83bc0 <col:33, col:45> col:46 'EC_PRE_COMP *'
|-FunctionDecl 0x1553ea83e20 <line:315:1, col:38> col:6 invalid EC_pre_comp_free 'void (int *)'
| `-ParmVarDecl 0x1553ea83d90 <col:23, col:33> col:33 invalid group 'int *'
|-FunctionDecl 0x1553ea83fc8 <line:316:1, col:51> col:6 EC_nistp224_pre_comp_free 'void (NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea83ed8 <col:32, col:50> col:51 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x1553ea8d230 <line:317:1, col:51> col:6 used EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea84098 <col:32, col:50> col:51 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1553ea8d3f8 <line:318:1, col:51> col:6 EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea8d300 <col:32, col:50> col:51 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x1553ea8d5b8 <line:319:1, col:51> col:6 EC_nistz256_pre_comp_free 'void (NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea8d4c8 <col:32, col:50> col:51 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x1553ea8d778 <line:320:1, col:39> col:6 EC_ec_pre_comp_free 'void (EC_PRE_COMP *)'
| `-ParmVarDecl 0x1553ea8d688 <col:26, col:38> col:39 'EC_PRE_COMP *'
|-FunctionDecl 0x1553ea8dc30 <line:326:1, line:328:25> line:326:5 invalid ec_wNAF_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1553ea8d850 <col:17, col:33> col:33 invalid group 'const int *'
| |-ParmVarDecl 0x1553ea8d8d0 <col:40, col:50> col:50 invalid r 'int *'
| |-ParmVarDecl 0x1553ea8d950 <col:53, col:67> col:67 invalid scalar 'const int *'
| |-ParmVarDecl 0x1553ea8d9c8 <line:327:17, col:24> col:24 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea8da58 <col:29, <invalid sloc>> col:45 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1553ea8dae8 <col:55, <invalid sloc>> col:69 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1553ea8db68 <line:328:17, <invalid sloc>> col:25 invalid 'int *'
|-FunctionDecl 0x1553ea8de40 <line:329:1, col:54> col:5 invalid ec_wNAF_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1553ea8dd20 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x1553ea8dda0 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1553ea8dfa0 <line:330:1, col:55> col:5 invalid ec_wNAF_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1553ea8df08 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x1553ea8e0f8 <line:333:1, col:40> col:5 invalid ec_GFp_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x1553ea8e060 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x1553ea8f278 <line:334:1, col:43> col:6 invalid ec_GFp_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x1553ea8e1b8 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x1553ea8f3c8 <line:335:1, col:49> col:6 invalid ec_GFp_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1553ea8f338 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x1553ea8f5a8 <line:336:1, col:58> col:5 invalid ec_GFp_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1553ea8f488 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x1553ea8f508 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x1553ea8f928 <line:337:1, line:338:77> line:337:5 invalid ec_GFp_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8f670 <col:35, <invalid sloc>> col:45 invalid 'int *'
| |-ParmVarDecl 0x1553ea8f6f0 <col:47, col:61> col:61 invalid p 'const int *'
| |-ParmVarDecl 0x1553ea8f770 <line:338:35, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea8f7f0 <col:52, col:66> col:66 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea8f870 <col:69, <invalid sloc>> col:77 invalid 'int *'
|-FunctionDecl 0x1553ea8fcc0 <line:339:1, line:340:54> line:339:5 invalid ec_GFp_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x1553ea8fa08 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8fa88 <col:53, col:61> col:61 invalid p 'int *'
| |-ParmVarDecl 0x1553ea8fb08 <col:64, col:72> col:72 invalid a 'int *'
| |-ParmVarDecl 0x1553ea8fb88 <line:340:35, col:43> col:43 invalid b 'int *'
| `-ParmVarDecl 0x1553ea8fc08 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1553ea8fe38 <line:341:1, col:52> col:5 invalid ec_GFp_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x1553ea8fda0 <col:36, <invalid sloc>> col:52 invalid 'const int *'
|-FunctionDecl 0x1553ea90018 <line:342:1, col:70> col:5 invalid ec_GFp_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x1553ea8fef8 <col:44, <invalid sloc>> col:60 invalid 'const int *'
| `-ParmVarDecl 0x1553ea8ff78 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x1553ea90178 <line:343:1, col:40> col:5 invalid ec_GFp_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x1553ea900e0 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x1553ea902f0 <line:344:1, col:43> col:6 invalid ec_GFp_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x1553ea90260 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x1553ea90440 <line:345:1, col:49> col:6 invalid ec_GFp_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1553ea903b0 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x1553ea90620 <line:346:1, col:58> col:5 invalid ec_GFp_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1553ea90500 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x1553ea90580 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x1553ea90808 <line:347:1, col:69> col:5 invalid ec_GFp_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x1553ea906e8 <col:41, <invalid sloc>> col:57 invalid 'const int *'
| `-ParmVarDecl 0x1553ea90768 <col:59, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x1553ea90c10 <line:348:1, line:351:76> line:348:5 invalid ec_GFp_simple_set_Jprojective_coordinates_GFp 'int (const int *, int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea908d0 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1553ea90950 <line:349:51, <invalid sloc>> col:61 invalid 'int *'
| |-ParmVarDecl 0x1553ea909d0 <col:63, col:77> col:77 invalid x 'const int *'
| |-ParmVarDecl 0x1553ea90a50 <line:350:51, col:65> col:65 invalid y 'const int *'
| |-ParmVarDecl 0x1553ea90ad0 <line:351:51, col:65> col:65 invalid z 'const int *'
| `-ParmVarDecl 0x1553ea90b50 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x1553ea91038 <line:352:1, line:355:59> line:352:5 invalid ec_GFp_simple_get_Jprojective_coordinates_GFp 'int (const int *, const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x1553ea90cf8 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1553ea90d78 <line:353:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1553ea90df8 <col:69, col:77> col:77 invalid x 'int *'
| |-ParmVarDecl 0x1553ea90e78 <line:354:51, col:59> col:59 invalid y 'int *'
| |-ParmVarDecl 0x1553ea90ef8 <col:62, col:70> col:70 invalid z 'int *'
| `-ParmVarDecl 0x1553ea90f78 <line:355:51, <invalid sloc>> col:59 invalid 'int *'
|-FunctionDecl 0x1553ea91428 <line:356:1, line:358:73> line:356:5 invalid ec_GFp_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea91120 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x1553ea911a0 <col:66, <invalid sloc>> col:76 invalid 'int *'
| |-ParmVarDecl 0x1553ea91270 <line:357:48, col:62> col:62 invalid x 'const int *'
| |-ParmVarDecl 0x1553ea912f0 <line:358:48, col:62> col:62 invalid y 'const int *'
| `-ParmVarDecl 0x1553ea91370 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x1553ea917c0 <line:359:1, line:361:67> line:359:5 invalid ec_GFp_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1553ea91508 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x1553ea91588 <line:360:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x1553ea91608 <col:66, col:74> col:74 invalid x 'int *'
| |-ParmVarDecl 0x1553ea91688 <line:361:48, col:56> col:56 invalid y 'int *'
| `-ParmVarDecl 0x1553ea91708 <col:59, <invalid sloc>> col:67 invalid 'int *'
|-FunctionDecl 0x1553ea91b58 <line:362:1, line:364:54> line:362:5 invalid ec_GFp_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x1553ea918a0 <col:46, <invalid sloc>> col:62 invalid 'const int *'
| |-ParmVarDecl 0x1553ea91920 <col:64, <invalid sloc>> col:74 invalid 'int *'
| |-ParmVarDecl 0x1553ea919a0 <line:363:46, col:60> col:60 invalid x 'const int *'
| |-ParmVarDecl 0x1553ea91a20 <col:63, col:67> col:67 y_bit 'int'
| `-ParmVarDecl 0x1553ea91aa0 <line:364:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1553ea91f68 <line:365:1, line:367:72> line:365:8 invalid ec_GFp_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1553ea91c38 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x1553ea91cb8 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| |-ParmVarDecl 0x1553ea91d38 <line:366:32, col:56> col:56 invalid form 'int'
| |-ParmVarDecl 0x1553ea91db8 <line:367:32, col:47> col:47 buf 'unsigned char *'
| |-ParmVarDecl 0x1553ea91e30 <col:52, col:59> col:59 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea91eb0 <col:64, <invalid sloc>> col:72 invalid 'int *'
|-FunctionDecl 0x1553ea8e2f8 <line:368:1, line:369:75> line:368:5 invalid ec_GFp_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1553ea92050 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1553ea920d0 <col:47, <invalid sloc>> col:57 invalid 'int *'
| |-ParmVarDecl 0x1553ea92150 <line:369:29, col:50> col:50 buf 'const unsigned char *'
| |-ParmVarDecl 0x1553ea921c8 <col:55, col:62> col:62 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea8e240 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x1553ea8e690 <line:370:1, line:371:50> line:370:5 invalid ec_GFp_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8e3d8 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8e458 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x1553ea8e4d8 <col:54, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea8e558 <line:371:23, col:39> col:39 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea8e5d8 <col:42, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x1553ea8e9a0 <line:372:1, line:373:31> line:372:5 invalid ec_GFp_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8e770 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8e7f0 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x1553ea8e870 <col:54, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1553ea8e8f0 <line:373:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x1553ea8ec20 <line:374:1, col:64> col:5 invalid ec_GFp_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1553ea8ea78 <col:26, <invalid sloc>> col:42 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8eaf8 <col:44, <invalid sloc>> col:54 invalid 'int *'
| `-ParmVarDecl 0x1553ea8eb78 <col:56, <invalid sloc>> col:64 invalid 'int *'
|-FunctionDecl 0x1553ea8ee10 <line:375:1, col:68> col:5 invalid ec_GFp_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x1553ea8ecf0 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| `-ParmVarDecl 0x1553ea8ed70 <col:52, <invalid sloc>> col:68 invalid 'const int *'
|-FunctionDecl 0x1553ea8f080 <line:376:1, col:75> col:5 invalid ec_GFp_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8eed8 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8ef58 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| `-ParmVarDecl 0x1553ea8efd8 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x1553ea8b358 <line:377:1, line:378:31> line:377:5 invalid ec_GFp_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8f150 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8f1d0 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea8b228 <col:60, col:76> col:76 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea8b2a8 <line:378:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x1553ea8b5d8 <line:379:1, col:69> col:5 invalid ec_GFp_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1553ea8b430 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8b4b0 <col:49, <invalid sloc>> col:59 invalid 'int *'
| `-ParmVarDecl 0x1553ea8b530 <col:61, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x1553ea8b8e0 <line:380:1, line:381:60> line:380:5 invalid ec_GFp_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x1553ea8b6a8 <col:38, <invalid sloc>> col:54 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8b720 <col:56, col:63> col:63 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea8b7b0 <line:381:38, <invalid sloc>> col:48 invalid 'int **':'int **'
| `-ParmVarDecl 0x1553ea8b830 <col:52, <invalid sloc>> col:60 invalid 'int *'
|-FunctionDecl 0x1553ea8bc70 <line:382:1, line:383:54> line:382:5 invalid ec_GFp_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8b9b8 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8ba38 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x1553ea8bab8 <col:58, col:72> col:72 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea8bb38 <line:383:29, col:43> col:43 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea8bbb8 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1553ea8bf80 <line:384:1, line:385:37> line:384:5 invalid ec_GFp_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8bd50 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8bdd0 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x1553ea8be50 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x1553ea8bed0 <line:385:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x1553ea93340 <line:386:1, line:387:37> line:386:5 invalid ec_GFp_simple_field_inv 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8c058 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8c0d8 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x1553ea8c158 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x1553ea93290 <line:387:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x1553ea935c0 <line:388:1, line:389:48> line:388:5 invalid ec_GFp_simple_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1553ea93418 <col:37, col:53> col:53 invalid group 'const int *'
| |-ParmVarDecl 0x1553ea93498 <col:60, col:70> col:70 invalid p 'int *'
| `-ParmVarDecl 0x1553ea93518 <line:389:37, col:45> col:45 invalid ctx 'int *'
|-FunctionDecl 0x1553ea93728 <line:392:1, col:38> col:5 invalid ec_GFp_mont_group_init 'int (int *)'
| `-ParmVarDecl 0x1553ea93690 <col:28, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1553ea93aa0 <line:393:1, line:394:58> line:393:5 invalid ec_GFp_mont_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea937e8 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x1553ea93868 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x1553ea938e8 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea93968 <line:394:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea939e8 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x1553ea93c10 <line:395:1, col:41> col:6 invalid ec_GFp_mont_group_finish 'void (int *)'
| `-ParmVarDecl 0x1553ea93b80 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x1553ea93d60 <line:396:1, col:47> col:6 invalid ec_GFp_mont_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1553ea93cd0 <col:37, <invalid sloc>> col:47 invalid 'int *'
|-FunctionDecl 0x1553ea93f40 <line:397:1, col:56> col:5 invalid ec_GFp_mont_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1553ea93e20 <col:28, <invalid sloc>> col:38 invalid 'int *'
| `-ParmVarDecl 0x1553ea93ea0 <col:40, <invalid sloc>> col:56 invalid 'const int *'
|-FunctionDecl 0x1553ea8c270 <line:398:1, line:399:52> line:398:5 invalid ec_GFp_mont_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea94008 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1553ea94088 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1553ea94108 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea94188 <line:399:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea94208 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x1553ea8c580 <line:400:1, line:401:35> line:400:5 invalid ec_GFp_mont_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8c350 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8c3d0 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1553ea8c450 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1553ea8c4d0 <line:401:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x1553ea8c888 <line:402:1, line:403:35> line:402:5 invalid ec_GFp_mont_field_inv 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8c658 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8c6d8 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1553ea8c758 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1553ea8c7d8 <line:403:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x1553ea8cb90 <line:404:1, line:405:38> line:404:5 invalid ec_GFp_mont_field_encode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8c960 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8c9e0 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1553ea8ca60 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x1553ea8cae0 <line:405:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1553ea8ce98 <line:406:1, line:407:38> line:406:5 invalid ec_GFp_mont_field_decode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea8cc68 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8cce8 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1553ea8cd68 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x1553ea8cde8 <line:407:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1553ea8d118 <line:408:1, col:71> col:5 invalid ec_GFp_mont_field_set_to_one 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1553ea8cf70 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| |-ParmVarDecl 0x1553ea8cff0 <col:52, col:60> col:60 invalid r 'int *'
| `-ParmVarDecl 0x1553ea8d070 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x1553ea943c0 <line:411:1, col:63> col:5 invalid ec_GFp_nist_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1553ea942a0 <col:28, col:38> col:38 invalid dest 'int *'
| `-ParmVarDecl 0x1553ea94320 <col:44, col:60> col:60 invalid src 'const int *'
|-FunctionDecl 0x1553ea94740 <line:412:1, line:413:58> line:412:5 invalid ec_GFp_nist_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea94488 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x1553ea94508 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x1553ea94588 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea94608 <line:413:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea94688 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x1553ea94ad8 <line:414:1, line:415:52> line:414:5 invalid ec_GFp_nist_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea94820 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1553ea948a0 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1553ea94920 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea949a0 <line:415:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea94a20 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x1553ea94de8 <line:416:1, line:417:35> line:416:5 invalid ec_GFp_nist_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea94bb8 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1553ea94c38 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1553ea94cb8 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1553ea94d38 <line:417:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x1553ea94f58 <line:420:1, col:41> col:5 invalid ec_GF2m_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x1553ea94ec0 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x1553ea950a8 <line:421:1, col:44> col:6 invalid ec_GF2m_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x1553ea95018 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x1553ea951f8 <line:422:1, col:50> col:6 invalid ec_GF2m_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1553ea95168 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x1553ea953e8 <line:423:1, col:59> col:5 invalid ec_GF2m_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1553ea952c8 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x1553ea95348 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x1553ea95768 <line:424:1, line:426:44> line:424:5 invalid ec_GF2m_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea954b0 <col:36, <invalid sloc>> col:46 invalid 'int *'
| |-ParmVarDecl 0x1553ea95530 <col:48, col:62> col:62 invalid p 'const int *'
| |-ParmVarDecl 0x1553ea955b0 <line:425:36, col:50> col:50 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea95630 <col:53, col:67> col:67 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea956b0 <line:426:36, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x1553ea95b00 <line:427:1, line:428:55> line:427:5 invalid ec_GF2m_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x1553ea95848 <col:36, <invalid sloc>> col:52 invalid 'const int *'
| |-ParmVarDecl 0x1553ea958c8 <col:54, col:62> col:62 invalid p 'int *'
| |-ParmVarDecl 0x1553ea95948 <col:65, col:73> col:73 invalid a 'int *'
| |-ParmVarDecl 0x1553ea959c8 <line:428:36, col:44> col:44 invalid b 'int *'
| `-ParmVarDecl 0x1553ea95a48 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1553ea95c78 <line:429:1, col:53> col:5 invalid ec_GF2m_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x1553ea95be0 <col:37, <invalid sloc>> col:53 invalid 'const int *'
|-FunctionDecl 0x1553ea95e58 <line:430:1, col:71> col:5 invalid ec_GF2m_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x1553ea95d38 <col:45, <invalid sloc>> col:61 invalid 'const int *'
| `-ParmVarDecl 0x1553ea95db8 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x1553ea95fb8 <line:431:1, col:41> col:5 invalid ec_GF2m_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x1553ea95f20 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x1553ea96108 <line:432:1, col:44> col:6 invalid ec_GF2m_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x1553ea96078 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x1553ea962c0 <line:433:1, col:50> col:6 invalid ec_GF2m_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1553ea961c8 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x1553ea964a0 <line:434:1, col:59> col:5 invalid ec_GF2m_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1553ea96380 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x1553ea96400 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x1553ea96688 <line:435:1, col:70> col:5 invalid ec_GF2m_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x1553ea96568 <col:42, <invalid sloc>> col:58 invalid 'const int *'
| `-ParmVarDecl 0x1553ea965e8 <col:60, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x1553ea96a08 <line:436:1, line:438:74> line:436:5 invalid ec_GF2m_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea96750 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x1553ea967d0 <col:67, <invalid sloc>> col:77 invalid 'int *'
| |-ParmVarDecl 0x1553ea96850 <line:437:49, col:63> col:63 invalid x 'const int *'
| |-ParmVarDecl 0x1553ea968d0 <line:438:49, col:63> col:63 invalid y 'const int *'
| `-ParmVarDecl 0x1553ea96950 <col:66, <invalid sloc>> col:74 invalid 'int *'
|-FunctionDecl 0x1553ea96da0 <line:439:1, line:441:68> line:439:5 invalid ec_GF2m_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1553ea96ae8 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x1553ea96b68 <line:440:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x1553ea96be8 <col:67, col:75> col:75 invalid x 'int *'
| |-ParmVarDecl 0x1553ea96c68 <line:441:49, col:57> col:57 invalid y 'int *'
| `-ParmVarDecl 0x1553ea96ce8 <col:60, <invalid sloc>> col:68 invalid 'int *'
|-FunctionDecl 0x1553ea97138 <line:442:1, line:444:55> line:442:5 invalid ec_GF2m_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x1553ea96e80 <col:47, <invalid sloc>> col:63 invalid 'const int *'
| |-ParmVarDecl 0x1553ea96f00 <col:65, <invalid sloc>> col:75 invalid 'int *'
| |-ParmVarDecl 0x1553ea96f80 <line:443:47, col:61> col:61 invalid x 'const int *'
| |-ParmVarDecl 0x1553ea97000 <col:64, col:68> col:68 y_bit 'int'
| `-ParmVarDecl 0x1553ea97080 <line:444:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1553ea98590 <line:445:1, line:447:73> line:445:8 invalid ec_GF2m_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1553ea97218 <col:33, <invalid sloc>> col:49 invalid 'const int *'
| |-ParmVarDecl 0x1553ea982e0 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1553ea98360 <line:446:33, col:57> col:57 invalid form 'int'
| |-ParmVarDecl 0x1553ea983e0 <line:447:33, col:48> col:48 buf 'unsigned char *'
| |-ParmVarDecl 0x1553ea98458 <col:53, col:60> col:60 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea984d8 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x1553ea98928 <line:448:1, line:449:76> line:448:5 invalid ec_GF2m_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1553ea98678 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1553ea986f8 <col:48, <invalid sloc>> col:58 invalid 'int *'
| |-ParmVarDecl 0x1553ea98778 <line:449:30, col:51> col:51 buf 'const unsigned char *'
| |-ParmVarDecl 0x1553ea987f0 <col:56, col:63> col:63 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1553ea98870 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x1553ea98cc0 <line:450:1, line:451:51> line:450:5 invalid ec_GF2m_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea98a08 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x1553ea98a88 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x1553ea98b08 <col:55, col:71> col:71 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea98b88 <line:451:24, col:40> col:40 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea98c08 <col:43, <invalid sloc>> col:51 invalid 'int *'
|-FunctionDecl 0x1553ea98fd0 <line:452:1, line:453:32> line:452:5 invalid ec_GF2m_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea98da0 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x1553ea98e20 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x1553ea98ea0 <col:55, col:71> col:71 invalid a 'const int *'
| `-ParmVarDecl 0x1553ea98f20 <line:453:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x1553ea2c0e0 <line:454:1, col:65> col:5 invalid ec_GF2m_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1553ea990a8 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1553ea99128 <col:45, <invalid sloc>> col:55 invalid 'int *'
| `-ParmVarDecl 0x1553ea991a8 <col:57, <invalid sloc>> col:65 invalid 'int *'
|-FunctionDecl 0x1553ea2c2d0 <line:455:1, col:69> col:5 invalid ec_GF2m_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x1553ea2c1b0 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| `-ParmVarDecl 0x1553ea2c230 <col:53, <invalid sloc>> col:69 invalid 'const int *'
|-FunctionDecl 0x1553ea2c540 <line:456:1, col:76> col:5 invalid ec_GF2m_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea2c398 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x1553ea2c418 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| `-ParmVarDecl 0x1553ea2c498 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x1553ea2c840 <line:457:1, line:458:32> line:457:5 invalid ec_GF2m_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea2c610 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x1553ea2c690 <col:42, col:58> col:58 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea2c710 <col:61, col:77> col:77 invalid b 'const int *'
| `-ParmVarDecl 0x1553ea2c790 <line:458:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x1553ea2cac0 <line:459:1, col:70> col:5 invalid ec_GF2m_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1553ea2c918 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x1553ea2c998 <col:50, <invalid sloc>> col:60 invalid 'int *'
| `-ParmVarDecl 0x1553ea2ca18 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x1553ea2cdc8 <line:460:1, line:461:61> line:460:5 invalid ec_GF2m_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x1553ea2cb90 <col:39, <invalid sloc>> col:55 invalid 'const int *'
| |-ParmVarDecl 0x1553ea2cc08 <col:57, col:64> col:64 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ea2cc98 <line:461:39, <invalid sloc>> col:49 invalid 'int **':'int **'
| `-ParmVarDecl 0x1553ea2cd18 <col:53, <invalid sloc>> col:61 invalid 'int *'
|-FunctionDecl 0x1553eaaa0d8 <line:462:1, line:463:55> line:462:5 invalid ec_GF2m_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ea2cea0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1553ea2cf20 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1553ea2cfa0 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x1553ea2d020 <line:463:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x1553eaaa020 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1553eaaa3e8 <line:464:1, line:465:38> line:464:5 invalid ec_GF2m_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1553eaaa1b8 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1553eaaa238 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1553eaaa2b8 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x1553eaaa338 <line:465:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1553eaaa778 <line:466:1, line:467:55> line:466:5 invalid ec_GF2m_simple_field_div 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553eaaa4c0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1553eaaa540 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1553eaaa5c0 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x1553eaaa640 <line:467:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x1553eaaa6c0 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1553eaaac38 <line:470:1, line:473:32> line:470:5 invalid ec_GF2m_simple_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1553eaaa858 <col:24, col:40> col:40 invalid group 'const int *'
| |-ParmVarDecl 0x1553eaaa8d8 <col:47, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x1553eaaa958 <line:471:24, col:38> col:38 invalid scalar 'const int *'
| |-ParmVarDecl 0x1553eaaa9d0 <col:46, col:53> col:53 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553eaaaa60 <line:472:24, <invalid sloc>> col:40 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1553eaaaaf0 <col:50, <invalid sloc>> col:64 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1553eaaab70 <line:473:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x1553eaaae48 <line:474:1, col:57> col:5 invalid ec_GF2m_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1553eaaad28 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x1553eaaada8 <col:46, col:54> col:54 invalid ctx 'int *'
|-FunctionDecl 0x1553eab0080 <line:475:1, col:55> col:5 invalid ec_GF2m_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1553eaaaf10 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x1553eab01d8 <line:479:1, col:47> col:5 invalid ec_GFp_nistp224_group_init 'int (int *)'
| `-ParmVarDecl 0x1553eab0140 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x1553eab0550 <line:480:1, line:482:45> line:480:5 invalid ec_GFp_nistp224_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553eab0298 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1553eab0318 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1553eab0398 <line:481:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1553eab0418 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x1553eab0498 <line:482:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x1553eab08e8 <line:483:1, line:486:61> line:483:5 invalid ec_GFp_nistp224_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1553eab0630 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1553eab06b0 <line:484:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1553eab0730 <line:485:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1553eab07b0 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x1553eab0830 <line:486:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x1553eab0da8 <line:487:1, line:490:33> line:487:5 invalid ec_GFp_nistp224_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1553eab09c8 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x1553eab0a48 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x1553eab0ac8 <line:488:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x1553eab0b40 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553eab0bd0 <line:489:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1553eab0c60 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1553eab0ce0 <line:490:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x1553eab22a0 <line:491:1, line:494:68> line:491:5 invalid ec_GFp_nistp224_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1553eab0e98 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1553eab0f18 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1553eab0f98 <line:492:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1553eab1010 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553eab20c8 <line:493:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1553eab2158 <line:494:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1553eab21d8 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x1553eab24b0 <line:495:1, col:65> col:5 invalid ec_GFp_nistp224_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1553eab2390 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x1553eab2410 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x1553eab2610 <line:496:1, col:63> col:5 invalid ec_GFp_nistp224_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1553eab2578 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x1553eab2768 <line:499:1, col:47> col:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| `-ParmVarDecl 0x1553eab26d0 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x1553eab2ae0 <line:500:1, line:502:45> line:500:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553eab2828 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1553eab28a8 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1553eab2928 <line:501:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1553eab29a8 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x1553eab2a28 <line:502:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x1553eab2e78 <line:503:1, line:506:61> line:503:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1553eab2bc0 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1553eab2c40 <line:504:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1553eab2cc0 <line:505:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1553eab2d40 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x1553eab2dc0 <line:506:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x1553eab1370 <line:507:1, line:510:33> line:507:5 invalid ec_GFp_nistp256_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1553eab2f58 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x1553eab2fd8 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x1553eab1090 <line:508:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x1553eab1108 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553eab1198 <line:509:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1553eab1228 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1553eab12a8 <line:510:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x1553eab1840 <line:511:1, line:514:68> line:511:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1553eab1460 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1553eab14e0 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1553eab1560 <line:512:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1553eab15d8 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553eab1668 <line:513:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1553eab16f8 <line:514:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1553eab1778 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x1553eab1a50 <line:515:1, col:65> col:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1553eab1930 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x1553eab19b0 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x1553eab1bb0 <line:516:1, col:63> col:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1553eab1b18 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x1553eab1d08 <line:519:1, col:47> col:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| `-ParmVarDecl 0x1553eab1c70 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x1553eaae060 <line:520:1, line:522:45> line:520:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553eab1dc8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1553eab1e48 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1553eab1ec8 <line:521:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1553eab1f48 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x1553eab1fc8 <line:522:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x1553eaae3f8 <line:523:1, line:526:61> line:523:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1553eaae140 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1553eaae1c0 <line:524:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1553eaae240 <line:525:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1553eaae2c0 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x1553eaae340 <line:526:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x1553eaae8b8 <line:527:1, line:530:33> line:527:5 invalid ec_GFp_nistp521_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1553eaae4d8 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x1553eaae558 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x1553eaae5d8 <line:528:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x1553eaae650 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553eaae6e0 <line:529:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1553eaae770 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1553eaae7f0 <line:530:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x1553eaaed88 <line:531:1, line:534:68> line:531:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1553eaae9a8 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1553eaaea28 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1553eaaeaa8 <line:532:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1553eaaeb20 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553eaaebb0 <line:533:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1553eaaec40 <line:534:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1553eaaecc0 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x1553eaaef98 <line:535:1, col:65> col:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1553eaaee78 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x1553eaaeef8 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x1553eaaf108 <line:536:1, col:63> col:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1553eaaf070 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x1553eab35b8 <line:539:1, line:563:75> line:539:6 used ec_GFp_nistp_points_make_affine_internal 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
| |-ParmVarDecl 0x1553eaaf1c0 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553eaaf240 <col:59, col:65> col:65 point_array 'void *'
| |-ParmVarDecl 0x1553eaaf2b8 <line:540:47, col:54> col:54 felem_size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553eaaf338 <line:541:47, col:53> col:53 tmp_felems 'void *'
| |-ParmVarDecl 0x1553eaaf500 <line:542:47, col:75> col:54 felem_one 'void (*)(void *)'
| |-ParmVarDecl 0x1553eaaf6f8 <line:543:47, line:544:72> line:543:53 felem_is_zero 'int (*)(const void *)'
| |-ParmVarDecl 0x1553eaaf998 <line:545:47, line:547:72> line:545:54 felem_assign 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x1553eaafb70 <line:548:47, line:550:72> line:548:54 felem_square 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x1553eaafeb0 <line:551:47, line:555:70> line:551:54 felem_mul 'void (*)(void *, const void *, const void *)'
| |-ParmVarDecl 0x1553eab30f0 <line:556:47, line:558:69> line:556:54 felem_inv 'void (*)(void *, const void *)'
| `-ParmVarDecl 0x1553eab32c8 <line:559:47, line:563:74> line:559:54 felem_contract 'void (*)(void *, const void *)'
|-FunctionDecl 0x1553eab3908 <line:564:1, line:565:76> line:564:6 used ec_GFp_nistp_recode_scalar_bits 'void (unsigned char *, unsigned char *, unsigned char)'
| |-ParmVarDecl 0x1553eab36e0 <col:38, col:53> col:53 sign 'unsigned char *'
| |-ParmVarDecl 0x1553eab3760 <line:565:38, col:53> col:53 digit 'unsigned char *'
| `-ParmVarDecl 0x1553eab37e0 <col:60, col:74> col:74 in 'unsigned char'
|-FunctionDecl 0x1553eab3a88 <line:567:1, col:39> col:5 invalid ec_precompute_mont_data 'int (int *)'
| `-ParmVarDecl 0x1553eab39f0 <col:29, <invalid sloc>> col:39 invalid 'int *'
|-FunctionDecl 0x1553eab3be0 <line:568:1, col:53> col:5 invalid ec_group_simple_order_bits 'int (const int *)'
| `-ParmVarDecl 0x1553eab3b48 <col:32, col:48> col:48 invalid group 'const int *'
|-FunctionDecl 0x1553eab3e38 <line:578:1, line:579:61> line:578:8 invalid ec_key_simple_priv2oct 'size_t (const int *, unsigned char *, size_t)'
| |-ParmVarDecl 0x1553eab3ca0 <col:31, col:45> col:45 invalid eckey 'const int *'
| |-ParmVarDecl 0x1553eab3d20 <line:579:31, col:46> col:46 buf 'unsigned char *'
| `-ParmVarDecl 0x1553eab3d98 <col:51, col:58> col:58 len 'size_t':'unsigned long long'
|-FunctionDecl 0x1553eaac040 <line:580:1, col:79> col:5 invalid ec_key_simple_oct2priv 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x1553eab3f08 <col:28, col:36> col:36 invalid eckey 'int *'
| |-ParmVarDecl 0x1553eab3f88 <col:43, col:64> col:64 buf 'const unsigned char *'
| `-ParmVarDecl 0x1553eab4000 <col:69, col:76> col:76 len 'size_t':'unsigned long long'
|-FunctionDecl 0x1553eaac1a8 <line:581:1, col:45> col:5 invalid ec_key_simple_generate_key 'int (int *)'
| `-ParmVarDecl 0x1553eaac110 <col:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x1553eaac300 <line:582:1, col:52> col:5 invalid ec_key_simple_generate_public_key 'int (int *)'
| `-ParmVarDecl 0x1553eaac268 <col:39, col:47> col:47 invalid eckey 'int *'
|-FunctionDecl 0x1553eaac458 <line:583:1, col:48> col:5 invalid ec_key_simple_check_key 'int (const int *)'
| `-ParmVarDecl 0x1553eaac3c0 <col:29, col:43> col:43 invalid eckey 'const int *'
|-RecordDecl 0x1553eaac500 <line:587:1, line:612:1> line:587:8 invalid struct ec_key_method_st definition
| |-FieldDecl 0x1553eaac5d8 <line:588:5, col:17> col:17 name 'const char *'
| |-FieldDecl 0x1553eaac660 <line:589:5, col:13> col:13 flags 'int32_t':'int'
| |-FieldDecl 0x1553eaac778 <line:590:5, col:28> col:11 init 'int (*)(int *)'
| |-FieldDecl 0x1553eaac888 <line:591:5, col:31> col:12 finish 'void (*)(int *)'
| |-FieldDecl 0x1553eaaca28 <line:592:5, col:48> col:11 copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1553eaacbc8 <line:593:5, col:54> col:11 set_group 'int (*)(int *, const int *)'
| |-FieldDecl 0x1553eaacd68 <line:594:5, col:59> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x1553eaacf08 <line:595:5, col:59> col:11 set_public 'int (*)(int *, const int *)'
| |-FieldDecl 0x1553eaad050 <line:596:5, col:30> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x1553eaad300 <line:597:5, line:598:67> line:597:11 compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| |-FieldDecl 0x1553eaad900 <line:599:5, line:601:47> line:599:11 sign 'int (*)(int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-FieldDecl 0x1553eaadca0 <line:602:5, line:603:34> line:602:11 sign_setup 'int (*)(int *, int *, int **, int **)'
| |-FieldDecl 0x1553eab4148 <line:604:5, <invalid sloc>> col:18 invalid sign_sig 'int *(*)(const unsigned char *, int, const int *, const int *, int *)'
| |-FieldDecl 0x1553eab45f0 <line:608:5, line:609:74> line:608:11 verify 'int (*)(int, const unsigned char *, int, const unsigned char *, int, int *)'
| `-FieldDecl 0x1553eab4980 <line:610:5, line:611:58> line:610:11 verify_sig 'int (*)(const unsigned char *, int, const int *, int *)'
|-FunctionDecl 0x1553eab4a88 <line:616:1, col:34> col:5 invalid ossl_ec_key_gen 'int (int *)'
| `-ParmVarDecl 0x1553eab49f0 <col:21, col:29> col:29 invalid eckey 'int *'
|-FunctionDecl 0x1553eab4d78 <line:617:1, line:618:70> line:617:5 invalid ossl_ecdh_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x1553eab4b50 <col:27, col:43> col:43 pout 'unsigned char **'
| |-ParmVarDecl 0x1553eab4bc8 <col:49, col:57> col:57 poutlen 'size_t *'
| |-ParmVarDecl 0x1553eab4c48 <line:618:27, col:43> col:43 invalid pub_key 'const int *'
| `-ParmVarDecl 0x1553eab4cc8 <col:52, col:66> col:66 invalid ecdh 'const int *'
|-FunctionDecl 0x1553eaa2c60 <line:619:1, line:620:72> line:619:5 invalid ecdh_simple_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x1553eab4e58 <col:29, col:45> col:45 pout 'unsigned char **'
| |-ParmVarDecl 0x1553eab4ed0 <col:51, col:59> col:59 poutlen 'size_t *'
| |-ParmVarDecl 0x1553eab4f50 <line:620:29, col:45> col:45 invalid pub_key 'const int *'
| `-ParmVarDecl 0x1553eab4fd0 <col:54, col:68> col:68 invalid ecdh 'const int *'
|-RecordDecl 0x1553eaa2d20 <line:622:1, line:625:1> line:622:8 invalid struct ECDSA_SIG_st definition
| |-FieldDecl 0x1553eaa2df8 <line:623:5, col:13> col:13 invalid r 'int *'
| `-FieldDecl 0x1553eaa2e68 <line:624:5, col:13> col:13 invalid s 'int *'
|-FunctionDecl 0x1553eaa3118 <line:627:1, line:628:38> line:627:5 invalid ossl_ecdsa_sign_setup 'int (int *, int *, int **, int **)'
| |-ParmVarDecl 0x1553eaa2ed8 <col:27, col:35> col:35 invalid eckey 'int *'
| |-ParmVarDecl 0x1553eaa2f58 <col:42, col:50> col:50 invalid ctx_in 'int *'
| |-ParmVarDecl 0x1553eaa2fe0 <col:58, col:67> col:67 invalid kinvp 'int **'
| `-ParmVarDecl 0x1553eaa3068 <line:628:27, col:36> col:36 invalid rp 'int **'
|-FunctionDecl 0x1553eaa3640 <line:629:1, line:631:71> line:629:5 invalid ossl_ecdsa_sign 'int (int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553eaa31f0 <col:21, col:25> col:25 type 'int'
| |-ParmVarDecl 0x1553eaa3270 <col:31, col:52> col:52 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1553eaa32f0 <col:58, col:62> col:62 dlen 'int'
| |-ParmVarDecl 0x1553eaa3370 <line:630:21, col:36> col:36 sig 'unsigned char *'
| |-ParmVarDecl 0x1553eaa33f0 <col:41, col:55> col:55 siglen 'unsigned int *'
| |-ParmVarDecl 0x1553eaa3470 <line:631:21, col:35> col:35 invalid kinv 'const int *'
| |-ParmVarDecl 0x1553eaa34f0 <col:41, col:55> col:55 invalid r 'const int *'
| `-ParmVarDecl 0x1553eaa3570 <col:58, col:66> col:66 invalid eckey 'int *'
|-FunctionDecl 0x1553eaa39f0 <line:632:1, line:634:45> line:632:12 invalid ossl_ecdsa_sign_sig 'int *(const unsigned char *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553eaa3738 <col:32, col:53> col:53 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1553eaa37b8 <col:59, col:63> col:63 dgst_len 'int'
| |-ParmVarDecl 0x1553eaa3838 <line:633:32, col:46> col:46 invalid in_kinv 'const int *'
| |-ParmVarDecl 0x1553eaa38b8 <col:55, col:69> col:69 invalid in_r 'const int *'
| `-ParmVarDecl 0x1553eaa3938 <line:634:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x1553eaa3e10 <line:635:1, line:636:78> line:635:5 invalid ossl_ecdsa_verify 'int (int, const unsigned char *, int, const unsigned char *, int, int *)'
| |-ParmVarDecl 0x1553eaa3ad0 <col:23, col:27> col:27 type 'int'
| |-ParmVarDecl 0x1553eaa3b50 <col:33, col:54> col:54 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1553eaa3bd0 <col:60, col:64> col:64 dgst_len 'int'
| |-ParmVarDecl 0x1553eaa3c50 <line:636:23, col:44> col:44 sigbuf 'const unsigned char *'
| |-ParmVarDecl 0x1553eaa3cd0 <col:52, col:56> col:56 sig_len 'int'
| `-ParmVarDecl 0x1553eaa3d50 <col:65, col:73> col:73 invalid eckey 'int *'
|-FunctionDecl 0x1553eaa4128 <line:637:1, line:638:62> line:637:5 invalid ossl_ecdsa_verify_sig 'int (const unsigned char *, int, const int *, int *)'
| |-ParmVarDecl 0x1553eaa3ef8 <col:27, col:48> col:48 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1553eaa3f78 <col:54, col:58> col:58 dgst_len 'int'
| |-ParmVarDecl 0x1553eaa3ff8 <line:638:27, col:44> col:44 invalid sig 'const int *'
| `-ParmVarDecl 0x1553eaa4078 <col:49, col:57> col:57 invalid eckey 'int *'
|-FunctionDecl 0x1553eaa4700 <line:640:1, line:641:47> line:640:5 X25519 'int (uint8_t *, const uint8_t *, const uint8_t *)'
| |-ParmVarDecl 0x1553eaa4350 <col:12, col:37> col:20 out_shared_key 'uint8_t *':'uint8_t *'
| |-ParmVarDecl 0x1553eaa44c0 <col:40, col:68> col:54 private_key 'const uint8_t *':'const uint8_t *'
| `-ParmVarDecl 0x1553eaa4588 <line:641:12, col:46> col:26 peer_public_value 'const uint8_t *':'const uint8_t *'
|-FunctionDecl 0x1553eaa4a38 <line:642:1, line:643:62> line:642:6 X25519_public_from_private 'void (uint8_t *, const uint8_t *)'
| |-ParmVarDecl 0x1553eaa4830 <col:33, col:60> col:41 out_public_value 'uint8_t *':'uint8_t *'
| `-ParmVarDecl 0x1553eaa48f8 <line:643:33, col:61> col:47 private_key 'const uint8_t *':'const uint8_t *'
|-FunctionDecl 0x1553eaa4d18 <line:645:1, col:79> col:5 invalid ec_point_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1553eaa4b18 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1553eaa4b98 <col:55, col:65> col:65 invalid p 'int *'
| `-ParmVarDecl 0x1553eaa4c70 <col:68, col:76> col:76 invalid ctx 'int *'
|-TypedefDecl 0x1553eaa4de0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:53:1, col:17> col:17 referenced u8 'uint8_t':'unsigned char'
| `-TypedefType 0x1553eaa41f0 'uint8_t' sugar
|   |-Typedef 0x1553e9b97c0 'uint8_t'
|   `-BuiltinType 0x1553cf555d0 'unsigned char'
|-TypedefDecl 0x1553eaa4e70 <line:54:1, col:18> col:18 u32 'uint32_t':'unsigned int'
| `-TypedefType 0x1553eaa4e40 'uint32_t' sugar
|   |-Typedef 0x1553e9b98a0 'uint32_t'
|   `-BuiltinType 0x1553cf55610 'unsigned int'
|-TypedefDecl 0x1553eaa4f00 <line:55:1, col:18> col:18 referenced u64 'uint64_t':'unsigned long long'
| `-TypedefType 0x1553eaa4ed0 'uint64_t' sugar
|   |-Typedef 0x1553e9b9910 'uint64_t'
|   `-BuiltinType 0x1553cf55650 'unsigned long long'
|-TypedefDecl 0x1553eaa5018 <line:63:1, col:30> col:12 referenced felem_bytearray 'u8 [32]'
| `-ConstantArrayType 0x1553eaa4fc0 'u8 [32]' 32 
|   `-TypedefType 0x1553eaa4f60 'u8' sugar
|     |-Typedef 0x1553eaa4de0 'u8'
|     `-TypedefType 0x1553eaa41f0 'uint8_t' sugar
|       |-Typedef 0x1553e9b97c0 'uint8_t'
|       `-BuiltinType 0x1553cf555d0 'unsigned char'
|-VarDecl 0x1553eaa5168 <line:69:1, line:90:1> line:69:30 used nistp256_curve_params 'const felem_bytearray [5]' static cinit
| `-InitListExpr 0x1553eaa7238 <col:57, line:90:1> 'const felem_bytearray [5]'
|   |-InitListExpr 0x1553eaa72b0 <line:70:5, line:73:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x1553eaa73f0 <line:70:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa51d0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7408 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa51f8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7420 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5220 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7438 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5248 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7450 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5270 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7468 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5298 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7480 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa52c0 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7498 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa52e8 <col:48> 'int' 1
|   | |-ImplicitCastExpr 0x1553eaa74b0 <line:71:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5310 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa74c8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5338 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa74e0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5360 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa74f8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5388 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7510 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa53b0 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7528 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa53d8 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7540 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5400 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7558 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5428 <col:48> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7570 <line:72:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5450 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7588 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5478 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa75a0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa54a0 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa75b8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa54c8 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa75d0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa54f0 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa75e8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5518 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7600 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5540 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7618 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5568 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7630 <line:73:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5590 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7648 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa55b8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7660 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa55e0 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7678 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5608 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7690 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5630 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa76a8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5658 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa76c0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5680 <col:42> 'int' 255
|   | `-ImplicitCastExpr 0x1553eaa76d8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eaa56a8 <col:48> 'int' 255
|   |-InitListExpr 0x1553eaa7700 <line:74:5, line:77:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x1553eaa7840 <line:74:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5810 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7858 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5838 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7870 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5860 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7888 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5888 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa78a0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa58b0 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa78b8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa58d8 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa78d0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5900 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa78e8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5928 <col:48> 'int' 1
|   | |-ImplicitCastExpr 0x1553eaa7900 <line:75:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5950 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7918 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5978 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7930 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa59a0 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7948 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa59c8 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7960 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa59f0 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7978 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5a18 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7990 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5a40 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa79a8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5a68 <col:48> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa79c0 <line:76:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5a90 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa79d8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5ab8 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa79f0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5ae0 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7a08 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5b08 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x1553eaa7a20 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5b30 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7a38 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5b58 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7a50 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5b80 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7a68 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5ba8 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7a80 <line:77:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5bd0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7a98 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5bf8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7ab0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5c20 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7ac8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5c48 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7ae0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5c70 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7af8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5c98 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1553eaa7b10 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5cc0 <col:42> 'int' 255
|   | `-ImplicitCastExpr 0x1553eaa7b28 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eaa5ce8 <col:48> 'int' 252
|   |-InitListExpr 0x1553eaa7b50 <line:78:5, line:81:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x1553eaa7c90 <line:78:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5e50 <col:6> 'int' 90
|   | |-ImplicitCastExpr 0x1553eaa7ca8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5e78 <col:12> 'int' 198
|   | |-ImplicitCastExpr 0x1553eaa7cc0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5ea0 <col:18> 'int' 53
|   | |-ImplicitCastExpr 0x1553eaa7cd8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5ec8 <col:24> 'int' 216
|   | |-ImplicitCastExpr 0x1553eaa7cf0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5ef0 <col:30> 'int' 170
|   | |-ImplicitCastExpr 0x1553eaa7d08 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5f18 <col:36> 'int' 58
|   | |-ImplicitCastExpr 0x1553eaa7d20 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5f40 <col:42> 'int' 147
|   | |-ImplicitCastExpr 0x1553eaa7d38 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5f68 <col:48> 'int' 231
|   | |-ImplicitCastExpr 0x1553eaa7d50 <line:79:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5f90 <col:6> 'int' 179
|   | |-ImplicitCastExpr 0x1553eaa7d68 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5fb8 <col:12> 'int' 235
|   | |-ImplicitCastExpr 0x1553eaa7d80 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa5fe0 <col:18> 'int' 189
|   | |-ImplicitCastExpr 0x1553eaa7d98 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6008 <col:24> 'int' 85
|   | |-ImplicitCastExpr 0x1553eaa7db0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6030 <col:30> 'int' 118
|   | |-ImplicitCastExpr 0x1553eaa7dc8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6058 <col:36> 'int' 152
|   | |-ImplicitCastExpr 0x1553eaa7de0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6080 <col:42> 'int' 134
|   | |-ImplicitCastExpr 0x1553eaa7df8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa60a8 <col:48> 'int' 188
|   | |-ImplicitCastExpr 0x1553eaa7e10 <line:80:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa60d0 <col:6> 'int' 101
|   | |-ImplicitCastExpr 0x1553eaa7e28 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa60f8 <col:12> 'int' 29
|   | |-ImplicitCastExpr 0x1553eaa7e40 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6120 <col:18> 'int' 6
|   | |-ImplicitCastExpr 0x1553eaa7e58 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6148 <col:24> 'int' 176
|   | |-ImplicitCastExpr 0x1553eaa7e70 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6170 <col:30> 'int' 204
|   | |-ImplicitCastExpr 0x1553eaa7e88 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6198 <col:36> 'int' 83
|   | |-ImplicitCastExpr 0x1553eaa7ea0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa61c0 <col:42> 'int' 176
|   | |-ImplicitCastExpr 0x1553eaa7eb8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa61e8 <col:48> 'int' 246
|   | |-ImplicitCastExpr 0x1553eaa7ed0 <line:81:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6210 <col:6> 'int' 59
|   | |-ImplicitCastExpr 0x1553eaa7ee8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6238 <col:12> 'int' 206
|   | |-ImplicitCastExpr 0x1553eaa7f00 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6260 <col:18> 'int' 60
|   | |-ImplicitCastExpr 0x1553eaa7f18 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6288 <col:24> 'int' 62
|   | |-ImplicitCastExpr 0x1553eaa7f30 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa62b0 <col:30> 'int' 39
|   | |-ImplicitCastExpr 0x1553eaa7f48 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa62d8 <col:36> 'int' 210
|   | |-ImplicitCastExpr 0x1553eaa7f60 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6300 <col:42> 'int' 96
|   | `-ImplicitCastExpr 0x1553eaa7f78 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eaa6328 <col:48> 'int' 75
|   |-InitListExpr 0x1553eaa7fa0 <line:82:5, line:85:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x1553eaa80e0 <line:82:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6490 <col:6> 'int' 107
|   | |-ImplicitCastExpr 0x1553eaa80f8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa64b8 <col:12> 'int' 23
|   | |-ImplicitCastExpr 0x1553eaa8110 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa64e0 <col:18> 'int' 209
|   | |-ImplicitCastExpr 0x1553eaa8128 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6508 <col:24> 'int' 242
|   | |-ImplicitCastExpr 0x1553eaa8140 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6530 <col:30> 'int' 225
|   | |-ImplicitCastExpr 0x1553eaa8158 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6558 <col:36> 'int' 44
|   | |-ImplicitCastExpr 0x1553eaa8170 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6580 <col:42> 'int' 66
|   | |-ImplicitCastExpr 0x1553eaa8188 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa65a8 <col:48> 'int' 71
|   | |-ImplicitCastExpr 0x1553eaa81a0 <line:83:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa65d0 <col:6> 'int' 248
|   | |-ImplicitCastExpr 0x1553eaa81b8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa65f8 <col:12> 'int' 188
|   | |-ImplicitCastExpr 0x1553eaa81d0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6620 <col:18> 'int' 230
|   | |-ImplicitCastExpr 0x1553eaa81e8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6648 <col:24> 'int' 229
|   | |-ImplicitCastExpr 0x1553eaa8200 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6670 <col:30> 'int' 99
|   | |-ImplicitCastExpr 0x1553eaa8218 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6698 <col:36> 'int' 164
|   | |-ImplicitCastExpr 0x1553eaa8230 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa66c0 <col:42> 'int' 64
|   | |-ImplicitCastExpr 0x1553eaa8248 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa66e8 <col:48> 'int' 242
|   | |-ImplicitCastExpr 0x1553eaa8260 <line:84:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6710 <col:6> 'int' 119
|   | |-ImplicitCastExpr 0x1553eaa8278 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6738 <col:12> 'int' 3
|   | |-ImplicitCastExpr 0x1553eaa8290 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6760 <col:18> 'int' 125
|   | |-ImplicitCastExpr 0x1553eaa82a8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6788 <col:24> 'int' 129
|   | |-ImplicitCastExpr 0x1553eaa82c0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa67b0 <col:30> 'int' 45
|   | |-ImplicitCastExpr 0x1553eaa82d8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa67d8 <col:36> 'int' 235
|   | |-ImplicitCastExpr 0x1553eaa82f0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6800 <col:42> 'int' 51
|   | |-ImplicitCastExpr 0x1553eaa8308 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6828 <col:48> 'int' 160
|   | |-ImplicitCastExpr 0x1553eaa8320 <line:85:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6850 <col:6> 'int' 244
|   | |-ImplicitCastExpr 0x1553eaa8338 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6878 <col:12> 'int' 161
|   | |-ImplicitCastExpr 0x1553eaa8350 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa68a0 <col:18> 'int' 57
|   | |-ImplicitCastExpr 0x1553eaa8368 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa68c8 <col:24> 'int' 69
|   | |-ImplicitCastExpr 0x1553eaa8380 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa68f0 <col:30> 'int' 216
|   | |-ImplicitCastExpr 0x1553eaa8398 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6918 <col:36> 'int' 152
|   | |-ImplicitCastExpr 0x1553eaa83b0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1553eaa6940 <col:42> 'int' 194
|   | `-ImplicitCastExpr 0x1553eaa83c8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eaa6968 <col:48> 'int' 150
|   `-InitListExpr 0x1553eaa83f0 <line:86:5, line:89:52> 'const felem_bytearray':'u8 const[32]'
|     |-ImplicitCastExpr 0x1553eaa8530 <line:86:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6ad0 <col:6> 'int' 79
|     |-ImplicitCastExpr 0x1553eaa8548 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6af8 <col:12> 'int' 227
|     |-ImplicitCastExpr 0x1553eaa8560 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6b20 <col:18> 'int' 66
|     |-ImplicitCastExpr 0x1553eaa8578 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6b48 <col:24> 'int' 226
|     |-ImplicitCastExpr 0x1553eaa8590 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6b70 <col:30> 'int' 254
|     |-ImplicitCastExpr 0x1553eaa85a8 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6b98 <col:36> 'int' 26
|     |-ImplicitCastExpr 0x1553eaa85c0 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6bc0 <col:42> 'int' 127
|     |-ImplicitCastExpr 0x1553eaa85d8 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6be8 <col:48> 'int' 155
|     |-ImplicitCastExpr 0x1553eaa85f0 <line:87:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6c10 <col:6> 'int' 142
|     |-ImplicitCastExpr 0x1553eaa8608 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6c38 <col:12> 'int' 231
|     |-ImplicitCastExpr 0x1553eaa8620 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6c80 <col:18> 'int' 235
|     |-ImplicitCastExpr 0x1553eaa8638 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6ca8 <col:24> 'int' 74
|     |-ImplicitCastExpr 0x1553eaa8650 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6cd0 <col:30> 'int' 124
|     |-ImplicitCastExpr 0x1553eaa8668 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6cf8 <col:36> 'int' 15
|     |-ImplicitCastExpr 0x1553eaa8680 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6d20 <col:42> 'int' 158
|     |-ImplicitCastExpr 0x1553eaa8698 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6d48 <col:48> 'int' 22
|     |-ImplicitCastExpr 0x1553eaa86b0 <line:88:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6d70 <col:6> 'int' 43
|     |-ImplicitCastExpr 0x1553eaa86c8 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6d98 <col:12> 'int' 206
|     |-ImplicitCastExpr 0x1553eaa86e0 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6dc0 <col:18> 'int' 51
|     |-ImplicitCastExpr 0x1553eaa86f8 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6de8 <col:24> 'int' 87
|     |-ImplicitCastExpr 0x1553eaa8710 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6e10 <col:30> 'int' 107
|     |-ImplicitCastExpr 0x1553eaa8728 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6e38 <col:36> 'int' 49
|     |-ImplicitCastExpr 0x1553eaa8740 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6e60 <col:42> 'int' 94
|     |-ImplicitCastExpr 0x1553eaa8758 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6e88 <col:48> 'int' 206
|     |-ImplicitCastExpr 0x1553eaa8770 <line:89:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6eb0 <col:6> 'int' 203
|     |-ImplicitCastExpr 0x1553eaa8788 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6ed8 <col:12> 'int' 182
|     |-ImplicitCastExpr 0x1553eaa87a0 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6f00 <col:18> 'int' 64
|     |-ImplicitCastExpr 0x1553eaa87b8 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6f28 <col:24> 'int' 104
|     |-ImplicitCastExpr 0x1553eaa87d0 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6f50 <col:30> 'int' 55
|     |-ImplicitCastExpr 0x1553eaa87e8 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6f78 <col:36> 'int' 191
|     |-ImplicitCastExpr 0x1553eaa8800 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1553eaa6fa0 <col:42> 'int' 81
|     `-ImplicitCastExpr 0x1553eaa8818 <col:48> 'u8':'unsigned char' <IntegralCast>
|       `-IntegerLiteral 0x1553eaa6fc8 <col:48> 'int' 245
|-TypedefDecl 0x1553eaa8848 <line:115:1, col:19> col:19 referenced invalid limb 'int'
| `-BuiltinType 0x1553cf55570 'int'
|-TypedefDecl 0x1553eaa8998 <line:116:1, col:26> col:14 referenced felem 'limb [4]'
| `-ConstantArrayType 0x1553eaa8940 'limb [4]' 4 
|   `-TypedefType 0x1553eaa88a0 'limb' sugar
|     |-Typedef 0x1553eaa8848 'limb'
|     `-BuiltinType 0x1553cf55570 'int'
|-TypedefDecl 0x1553eaa8b18 <line:117:1, col:34> col:14 referenced longfelem 'limb [8]'
| `-ConstantArrayType 0x1553eaa8ac0 'limb [8]' 8 
|   `-TypedefType 0x1553eaa88a0 'limb' sugar
|     |-Typedef 0x1553eaa8848 'limb'
|     `-BuiltinType 0x1553cf55570 'int'
|-TypedefDecl 0x1553e9f2f20 <line:118:1, col:30> col:13 referenced smallfelem 'u64 [4]'
| `-ConstantArrayType 0x1553eaa8c10 'u64 [4]' 4 
|   `-TypedefType 0x1553eaa8b70 'u64' sugar
|     |-Typedef 0x1553eaa4f00 'u64'
|     `-TypedefType 0x1553eaa4ed0 'uint64_t' sugar
|       |-Typedef 0x1553e9b9910 'uint64_t'
|       `-BuiltinType 0x1553cf55650 'unsigned long long'
|-VarDecl 0x1553e9f3018 <line:121:1, line:122:65> line:121:18 used kPrime 'const u64 [4]' static cinit
| `-InitListExpr 0x1553e9f31a8 <line:122:5, col:65> 'const u64 [4]'
|   |-IntegerLiteral 0x1553e9f3080 <col:7> 'unsigned long long' 18446744073709551615
|   |-ImplicitCastExpr 0x1553e9f3208 <col:29> 'u64':'unsigned long long' <IntegralCast>
|   | `-IntegerLiteral 0x1553e9f30a8 <col:29> 'unsigned int' 4294967295
|   |-ImplicitCastExpr 0x1553e9f3220 <col:41> 'u64':'unsigned long long' <IntegralCast>
|   | `-IntegerLiteral 0x1553e9f30d0 <col:41> 'int' 0
|   `-IntegerLiteral 0x1553e9f30f8 <col:44> 'unsigned long long' 18446744069414584321
|-VarDecl 0x1553e9f3248 <line:123:1, col:33> col:18 used bottom63bits 'const u64':'const unsigned long long' static cinit
| `-IntegerLiteral 0x1553e9f32b0 <col:33> 'unsigned long long' 9223372036854775807
|-FunctionDecl 0x1553e9f35f8 <line:129:1, line:135:1> line:129:13 used bin32_to_felem 'void (limb *, const u8 *)' static
| |-ParmVarDecl 0x1553e9f3380 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9f34b0 <col:39, col:53> col:48 used in 'const u8 *':'const u8 *'
| `-CompoundStmt 0x1553e9f3e50 <line:130:1, line:135:1>
|   |-BinaryOperator 0x1553e9f38a8 <line:131:5, col:29> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553e9f3720 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f3708 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f36c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f3380 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f36e0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9f3890 <col:14, col:29> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553e9f3878 <col:14, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1553e9f3860 <col:14, col:29> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x1553e9f3840 <col:15, col:29> 'u64 *'
|   |         `-CStyleCastExpr 0x1553e9f3818 <col:16, col:28> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x1553e9f37c0 <col:23, col:28> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x1553e9f37a0 <col:24, col:28> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x1553e9f3788 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x1553e9f3740 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x1553e9f34b0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x1553e9f3760 <col:27> 'int' 0
|   |-BinaryOperator 0x1553e9f3a80 <line:132:5, col:29> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553e9f3928 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f3910 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f38c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f3380 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f38e8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9f3a68 <col:14, col:29> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553e9f3a50 <col:14, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1553e9f3a38 <col:14, col:29> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x1553e9f3a18 <col:15, col:29> 'u64 *'
|   |         `-CStyleCastExpr 0x1553e9f39f0 <col:16, col:28> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x1553e9f39c8 <col:23, col:28> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x1553e9f39a8 <col:24, col:28> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x1553e9f3990 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x1553e9f3948 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x1553e9f34b0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x1553e9f3968 <col:27> 'int' 8
|   |-BinaryOperator 0x1553e9f3c58 <line:133:5, col:30> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553e9f3b00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f3ae8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f3aa0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f3380 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f3ac0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9f3c40 <col:14, col:30> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553e9f3c28 <col:14, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1553e9f3c10 <col:14, col:30> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x1553e9f3bf0 <col:15, col:30> 'u64 *'
|   |         `-CStyleCastExpr 0x1553e9f3bc8 <col:16, col:29> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x1553e9f3ba0 <col:23, col:29> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x1553e9f3b80 <col:24, col:29> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x1553e9f3b68 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x1553e9f3b20 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x1553e9f34b0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x1553e9f3b40 <col:27> 'int' 16
|   `-BinaryOperator 0x1553e9f3e30 <line:134:5, col:30> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1553e9f3cd8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553e9f3cc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9f3c78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f3380 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553e9f3c98 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553e9f3e18 <col:14, col:30> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x1553e9f3e00 <col:14, col:30> 'u64':'unsigned long long' <LValueToRValue>
|         `-UnaryOperator 0x1553e9f3de8 <col:14, col:30> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|           `-ParenExpr 0x1553e9f3dc8 <col:15, col:30> 'u64 *'
|             `-CStyleCastExpr 0x1553e9f3da0 <col:16, col:29> 'u64 *' <BitCast>
|               `-UnaryOperator 0x1553e9f3d78 <col:23, col:29> 'const u8 *' prefix '&' cannot overflow
|                 `-ArraySubscriptExpr 0x1553e9f3d58 <col:24, col:29> 'const u8':'const unsigned char' lvalue
|                   |-ImplicitCastExpr 0x1553e9f3d40 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|                   | `-DeclRefExpr 0x1553e9f3cf8 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x1553e9f34b0 'in' 'const u8 *':'const u8 *'
|                   `-IntegerLiteral 0x1553e9f3d18 <col:27> 'int' 24
|-FunctionDecl 0x1553e9f41b8 <line:141:1, line:147:1> line:141:13 used smallfelem_to_bin32 'void (u8 *, const u64 *)' static
| |-ParmVarDecl 0x1553e9f3f40 <col:33, col:42> col:36 used out 'u8 *':'u8 *'
| |-ParmVarDecl 0x1553e9f4070 <col:45, col:62> col:62 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553e9f4980 <line:142:1, line:147:1>
|   |-BinaryOperator 0x1553e9f4420 <line:143:5, col:29> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x1553e9f4370 <col:5, col:21> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x1553e9f4350 <col:6, col:21> 'u64 *'
|   | |   `-CStyleCastExpr 0x1553e9f4328 <col:7, col:20> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x1553e9f4300 <col:14, col:20> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x1553e9f42e0 <col:15, col:20> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x1553e9f42c8 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x1553e9f4280 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x1553e9f3f40 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x1553e9f42a0 <col:19> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9f4408 <col:25, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f43e8 <col:25, col:29> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f43d0 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f4388 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f4070 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1553e9f43a8 <col:28> 'int' 0
|   |-BinaryOperator 0x1553e9f45e0 <line:144:5, col:29> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x1553e9f4530 <col:5, col:21> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x1553e9f4510 <col:6, col:21> 'u64 *'
|   | |   `-CStyleCastExpr 0x1553e9f44e8 <col:7, col:20> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x1553e9f44c0 <col:14, col:20> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x1553e9f44a0 <col:15, col:20> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x1553e9f4488 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x1553e9f4440 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x1553e9f3f40 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x1553e9f4460 <col:19> 'int' 8
|   | `-ImplicitCastExpr 0x1553e9f45c8 <col:25, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f45a8 <col:25, col:29> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f4590 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f4548 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f4070 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1553e9f4568 <col:28> 'int' 1
|   |-BinaryOperator 0x1553e9f47a0 <line:145:5, col:30> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x1553e9f46f0 <col:5, col:22> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x1553e9f46d0 <col:6, col:22> 'u64 *'
|   | |   `-CStyleCastExpr 0x1553e9f46a8 <col:7, col:21> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x1553e9f4680 <col:14, col:21> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x1553e9f4660 <col:15, col:21> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x1553e9f4648 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x1553e9f4600 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x1553e9f3f40 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x1553e9f4620 <col:19> 'int' 16
|   | `-ImplicitCastExpr 0x1553e9f4788 <col:26, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f4768 <col:26, col:30> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f4750 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f4708 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f4070 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1553e9f4728 <col:29> 'int' 2
|   `-BinaryOperator 0x1553e9f4960 <line:146:5, col:30> 'u64':'unsigned long long' '='
|     |-UnaryOperator 0x1553e9f48b0 <col:5, col:22> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|     | `-ParenExpr 0x1553e9f4890 <col:6, col:22> 'u64 *'
|     |   `-CStyleCastExpr 0x1553e9f4868 <col:7, col:21> 'u64 *' <BitCast>
|     |     `-UnaryOperator 0x1553e9f4840 <col:14, col:21> 'u8 *' prefix '&' cannot overflow
|     |       `-ArraySubscriptExpr 0x1553e9f4820 <col:15, col:21> 'u8':'unsigned char' lvalue
|     |         |-ImplicitCastExpr 0x1553e9f4808 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|     |         | `-DeclRefExpr 0x1553e9f47c0 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x1553e9f3f40 'out' 'u8 *':'u8 *'
|     |         `-IntegerLiteral 0x1553e9f47e0 <col:19> 'int' 24
|     `-ImplicitCastExpr 0x1553e9f4948 <col:26, col:30> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1553e9f4928 <col:26, col:30> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x1553e9f4910 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x1553e9f48c8 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f4070 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x1553e9f48e8 <col:29> 'int' 3
|-FunctionDecl 0x1553e9f4c28 <line:150:1, line:155:1> line:150:13 used flip_endian 'void (u8 *, const u8 *, unsigned int)' static
| |-ParmVarDecl 0x1553e9f49c0 <col:25, col:29> col:29 used out 'u8 *'
| |-ParmVarDecl 0x1553e9f4a38 <col:34, col:44> col:44 used in 'const u8 *'
| |-ParmVarDecl 0x1553e9f4ab8 <col:48, col:57> col:57 used len 'unsigned int'
| `-CompoundStmt 0x1553e9f5158 <line:151:1, line:155:1>
|   |-DeclStmt 0x1553e9f4d78 <line:152:5, col:15>
|   | `-VarDecl 0x1553e9f4d10 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x1553e9f5120 <line:153:5, line:154:32>
|     |-BinaryOperator 0x1553e9f4e08 <line:153:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1553e9f4d90 <col:10> 'unsigned int' lvalue Var 0x1553e9f4d10 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1553e9f4df0 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1553e9f4dc8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1553e9f4e98 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1553e9f4e68 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9f4e28 <col:17> 'unsigned int' lvalue Var 0x1553e9f4d10 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1553e9f4e80 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x1553e9f4e48 <col:21> 'unsigned int' lvalue ParmVar 0x1553e9f4ab8 'len' 'unsigned int'
|     |-UnaryOperator 0x1553e9f4ed8 <col:26, col:28> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x1553e9f4eb8 <col:28> 'unsigned int' lvalue Var 0x1553e9f4d10 'i' 'unsigned int'
|     `-BinaryOperator 0x1553e9f5100 <line:154:9, col:32> 'u8':'unsigned char' '='
|       |-ArraySubscriptExpr 0x1553e9f4f80 <col:9, col:14> 'u8':'unsigned char' lvalue
|       | |-ImplicitCastExpr 0x1553e9f4f50 <col:9> 'u8 *' <LValueToRValue>
|       | | `-DeclRefExpr 0x1553e9f4ef0 <col:9> 'u8 *' lvalue ParmVar 0x1553e9f49c0 'out' 'u8 *'
|       | `-ImplicitCastExpr 0x1553e9f4f68 <col:13> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x1553e9f4f30 <col:13> 'unsigned int' lvalue Var 0x1553e9f4d10 'i' 'unsigned int'
|       `-ImplicitCastExpr 0x1553e9f50e8 <col:18, col:32> 'u8':'unsigned char' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1553e9f50c8 <col:18, col:32> 'const u8':'const unsigned char' lvalue
|           |-ImplicitCastExpr 0x1553e9f50b0 <col:18> 'const u8 *' <LValueToRValue>
|           | `-DeclRefExpr 0x1553e9f4fa0 <col:18> 'const u8 *' lvalue ParmVar 0x1553e9f4a38 'in' 'const u8 *'
|           `-BinaryOperator 0x1553e9f5090 <col:21, col:31> 'unsigned int' '-'
|             |-BinaryOperator 0x1553e9f5038 <col:21, col:27> 'unsigned int' '-'
|             | |-ImplicitCastExpr 0x1553e9f5008 <col:21> 'unsigned int' <LValueToRValue>
|             | | `-DeclRefExpr 0x1553e9f4fc0 <col:21> 'unsigned int' lvalue ParmVar 0x1553e9f4ab8 'len' 'unsigned int'
|             | `-ImplicitCastExpr 0x1553e9f5020 <col:27> 'unsigned int' <IntegralCast>
|             |   `-IntegerLiteral 0x1553e9f4fe0 <col:27> 'int' 1
|             `-ImplicitCastExpr 0x1553e9f5078 <col:31> 'unsigned int' <LValueToRValue>
|               `-DeclRefExpr 0x1553e9f5058 <col:31> 'unsigned int' lvalue Var 0x1553e9f4d10 'i' 'unsigned int'
|-FunctionDecl 0x1553e9f52e0 <line:158:1, line:179:1> line:158:12 invalid BN_to_felem 'int (limb *, const int *)' static
| |-ParmVarDecl 0x1553e9f5188 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9f5208 <col:35, col:49> col:49 invalid bn 'const int *'
| `-CompoundStmt 0x1553e9f6100 <line:159:1, line:179:1>
|   |-DeclStmt 0x1553e9f5420 <line:160:5, col:25>
|   | `-VarDecl 0x1553e9f53b8 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x1553e9f54b0 <line:161:5, col:26>
|   | `-VarDecl 0x1553e9f5448 <col:5, col:21> col:21 used b_out 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x1553e9f5548 <line:162:5, col:23>
|   | `-VarDecl 0x1553e9f54e0 <col:5, col:14> col:14 used num_bytes 'unsigned int'
|   |-CallExpr 0x1553e9f56a0 <line:165:5, col:35> 'void *'
|   | |-ImplicitCastExpr 0x1553e9f5688 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553e9f5560 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1553e9c5900 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1553e9f56f0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1553e9f56d8 <col:12> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553e9f5580 <col:12> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553e9f5448 'b_out' 'felem_bytearray':'u8 [32]'
|   | |-IntegerLiteral 0x1553e9f55b8 <col:19> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x1553e9f5620 <col:22, col:34> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x1553e9f5600 <col:28, col:34> 'felem_bytearray':'u8 [32]' lvalue
|   |     `-DeclRefExpr 0x1553e9f55e0 <col:29> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553e9f5448 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   |-IfStmt 0x1553e9f5aa8 <line:167:5, line:170:5>
|   | |-BinaryOperator 0x1553e9f5928 <line:167:9, col:33> 'int' '>'
|   | | |-ImplicitCastExpr 0x1553e9f5910 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1553e9f58f8 <col:9> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1553e9f5878 <col:9> 'unsigned int' lvalue Var 0x1553e9f54e0 'num_bytes' 'unsigned int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1553e9f58d8 <col:21, col:33> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1553e9f58b8 <col:27, col:33> 'felem_bytearray':'u8 [32]' lvalue
|   | |     `-DeclRefExpr 0x1553e9f5898 <col:28> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553e9f5448 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   | `-CompoundStmt 0x1553e9f5a90 <col:36, line:170:5>
|   |   `-ReturnStmt 0x1553e9f5a80 <line:169:9, col:16>
|   |     `-IntegerLiteral 0x1553e9f5a58 <col:16> 'int' 0
|   |-IfStmt 0x1553e9f5c58 <line:171:5, line:174:5>
|   | |-OpaqueValueExpr 0x1553e9f5c40 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1553e9f5c28 <line:171:29, line:174:5>
|   |   `-ReturnStmt 0x1553e9f5c18 <line:173:9, col:16>
|   |     `-IntegerLiteral 0x1553e9f5bf0 <col:16> 'int' 0
|   |-CallExpr 0x1553e9f5ed0 <line:176:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1553e9f5eb8 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553e9f5dd8 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x1553e9f4c28 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | |-ImplicitCastExpr 0x1553e9f5f08 <col:17> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553e9f5df8 <col:17> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553e9f5448 'b_out' 'felem_bytearray':'u8 [32]'
|   | |-ImplicitCastExpr 0x1553e9f5f38 <col:24> 'const u8 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553e9f5f20 <col:24> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553e9f5e18 <col:24> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553e9f53b8 'b_in' 'felem_bytearray':'u8 [32]'
|   | `-ImplicitCastExpr 0x1553e9f5f50 <col:30> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f5e38 <col:30> 'unsigned int' lvalue Var 0x1553e9f54e0 'num_bytes' 'unsigned int'
|   |-CallExpr 0x1553e9f6050 <line:177:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553e9f6038 <col:5> 'void (*)(limb *, const u8 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553e9f5f68 <col:5> 'void (limb *, const u8 *)' Function 0x1553e9f35f8 'bin32_to_felem' 'void (limb *, const u8 *)'
|   | |-ImplicitCastExpr 0x1553e9f6080 <col:20> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553e9f5f88 <col:20> 'limb *':'limb *' lvalue ParmVar 0x1553e9f5188 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1553e9f60b0 <col:25> 'const u8 *':'const u8 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553e9f6098 <col:25> 'u8 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553e9f5fc0 <col:25> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553e9f5448 'b_out' 'felem_bytearray':'u8 [32]'
|   `-ReturnStmt 0x1553e9f60f0 <line:178:5, col:12>
|     `-IntegerLiteral 0x1553e9f60c8 <col:12> 'int' 1
|-FunctionDecl 0x1553e9f6300 <line:182:1, line:188:1> line:182:16 invalid smallfelem_to_BN 'int *(int *, const u64 *)' static
| |-ParmVarDecl 0x1553e9f6170 <col:33, col:41> col:41 invalid out 'int *'
| |-ParmVarDecl 0x1553e9f61e8 <col:46, col:63> col:63 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553e9f6968 <line:183:1, line:188:1>
|   |-DeclStmt 0x1553e9f64d0 <line:184:5, col:32>
|   | |-VarDecl 0x1553e9f63d8 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [32]'
|   | `-VarDecl 0x1553e9f6450 <col:5, col:27> col:27 used b_out 'felem_bytearray':'u8 [32]'
|   |-CallExpr 0x1553e9f65f0 <line:185:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x1553e9f65d8 <col:5> 'void (*)(u8 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553e9f64e8 <col:5> 'void (u8 *, const u64 *)' Function 0x1553e9f41b8 'smallfelem_to_bin32' 'void (u8 *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553e9f6620 <col:25> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553e9f6508 <col:25> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553e9f63d8 'b_in' 'felem_bytearray':'u8 [32]'
|   | `-ImplicitCastExpr 0x1553e9f6638 <col:31> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f6540 <col:31> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f61e8 'in' 'const u64 *':'const u64 *'
|   `-CallExpr 0x1553e9f6740 <line:186:5, col:43> 'void'
|     |-ImplicitCastExpr 0x1553e9f6728 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553e9f6650 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x1553e9f4c28 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|     |-ImplicitCastExpr 0x1553e9f6778 <col:17> 'u8 *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x1553e9f6670 <col:17> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553e9f6450 'b_out' 'felem_bytearray':'u8 [32]'
|     |-ImplicitCastExpr 0x1553e9f67a8 <col:24> 'const u8 *' <NoOp>
|     | `-ImplicitCastExpr 0x1553e9f6790 <col:24> 'u8 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x1553e9f66a8 <col:24> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553e9f63d8 'b_in' 'felem_bytearray':'u8 [32]'
|     `-ImplicitCastExpr 0x1553e9f67c0 <col:30, col:42> 'unsigned int' <IntegralCast>
|       `-UnaryExprOrTypeTraitExpr 0x1553e9f6708 <col:30, col:42> 'unsigned long long' sizeof
|         `-ParenExpr 0x1553e9f66e8 <col:36, col:42> 'felem_bytearray':'u8 [32]' lvalue
|           `-DeclRefExpr 0x1553e9f66c8 <col:37> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553e9f6450 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|-FunctionDecl 0x1553e9f6ad8 <line:195:1, line:201:1> line:195:13 used smallfelem_one 'void (u64 *)' static
| |-ParmVarDecl 0x1553e9f69d0 <col:28, col:39> col:39 used out 'u64 *':'u64 *'
| `-CompoundStmt 0x1553e9f6f40 <line:196:1, line:201:1>
|   |-BinaryOperator 0x1553e9f6c58 <line:197:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1553e9f6bf8 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f6be0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f6b98 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553e9f69d0 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1553e9f6bb8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9f6c40 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553e9f6c18 <col:14> 'int' 1
|   |-BinaryOperator 0x1553e9f6d38 <line:198:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1553e9f6cd8 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f6cc0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f6c78 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553e9f69d0 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1553e9f6c98 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9f6d20 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553e9f6cf8 <col:14> 'int' 0
|   |-BinaryOperator 0x1553e9f6e18 <line:199:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1553e9f6db8 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f6da0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f6d58 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553e9f69d0 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1553e9f6d78 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9f6e00 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553e9f6dd8 <col:14> 'int' 0
|   `-BinaryOperator 0x1553e9f6ef8 <line:200:5, col:14> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1553e9f6e98 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1553e9f6e80 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9f6e38 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553e9f69d0 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x1553e9f6e58 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553e9f6ee0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x1553e9f6eb8 <col:14> 'int' 0
|-FunctionDecl 0x1553e9f7138 <line:203:1, line:209:1> line:203:13 used smallfelem_assign 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x1553e9f6f80 <col:31, col:42> col:42 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553e9f6ff8 <col:47, col:64> col:64 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553e9f76e0 <line:204:1, line:209:1>
|   |-BinaryOperator 0x1553e9f7318 <line:205:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1553e9f7260 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f7248 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f7200 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553e9f6f80 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1553e9f7220 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9f7300 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f72e0 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f72c8 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f7280 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f6ff8 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1553e9f72a0 <col:17> 'int' 0
|   |-BinaryOperator 0x1553e9f7450 <line:206:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1553e9f7398 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f7380 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f7338 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553e9f6f80 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1553e9f7358 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9f7438 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f7418 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f7400 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f73b8 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f6ff8 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1553e9f73d8 <col:17> 'int' 1
|   |-BinaryOperator 0x1553e9f7588 <line:207:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1553e9f74d0 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f74b8 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f7470 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553e9f6f80 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1553e9f7490 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9f7570 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f7550 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f7538 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f74f0 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f6ff8 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1553e9f7510 <col:17> 'int' 2
|   `-BinaryOperator 0x1553e9f76c0 <line:208:5, col:18> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1553e9f7608 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1553e9f75f0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9f75a8 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553e9f6f80 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x1553e9f75c8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553e9f76a8 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1553e9f7688 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x1553e9f7670 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x1553e9f7628 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f6ff8 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x1553e9f7648 <col:17> 'int' 3
|-FunctionDecl 0x1553e9f7988 <line:211:1, line:217:1> line:211:13 used felem_assign 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1553e9f7720 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9f7840 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553e9f7f30 <line:212:1, line:217:1>
|   |-BinaryOperator 0x1553e9f7b68 <line:213:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553e9f7ab0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f7a98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f7a50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f7720 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f7a70 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9f7b50 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f7b30 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f7b18 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f7ad0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9f7840 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9f7af0 <col:17> 'int' 0
|   |-BinaryOperator 0x1553e9f7ca0 <line:214:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553e9f7be8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f7bd0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f7b88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f7720 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f7ba8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9f7c88 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f7c68 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f7c50 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f7c08 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9f7840 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9f7c28 <col:17> 'int' 1
|   |-BinaryOperator 0x1553e9f7dd8 <line:215:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553e9f7d20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f7d08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f7cc0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f7720 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f7ce0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9f7dc0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f7da0 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f7d88 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f7d40 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9f7840 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9f7d60 <col:17> 'int' 2
|   `-BinaryOperator 0x1553e9f7f10 <line:216:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1553e9f7e58 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553e9f7e40 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9f7df8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f7720 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553e9f7e18 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553e9f7ef8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1553e9f7ed8 <col:14, col:18> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x1553e9f7ec0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1553e9f7e78 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9f7840 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1553e9f7e98 <col:17> 'int' 3
|-FunctionDecl 0x1553e9f80b0 <line:220:1, line:226:1> line:220:13 used felem_sum 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1553e9f7f70 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9f7fe8 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553e9f8698 <line:221:1, line:226:1>
|   |-CompoundAssignOperator 0x1553e9f8290 <line:222:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9f81d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f81c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f8178 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f7f70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f8198 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9f8278 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f8258 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f8240 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f81f8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9f7fe8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9f8218 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1553e9f83d8 <line:223:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9f8320 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f8308 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f82c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f7f70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f82e0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9f83c0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f83a0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f8388 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f8340 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9f7fe8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9f8360 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1553e9f8520 <line:224:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9f8468 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f8450 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f8408 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f7f70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f8428 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9f8508 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f84e8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f84d0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f8488 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9f7fe8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9f84a8 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1553e9f8668 <line:225:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1553e9f85b0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553e9f8598 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9f8550 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f7f70 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553e9f8570 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553e9f8650 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1553e9f8630 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x1553e9f8618 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1553e9f85d0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9f7fe8 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1553e9f85f0 <col:18> 'int' 3
|-FunctionDecl 0x1553e9f8898 <line:229:1, line:235:1> line:229:13 used felem_small_sum 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x1553e9f86d8 <col:29, col:35> col:35 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9f8750 <col:40, col:57> col:57 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553e9f8e80 <line:230:1, line:235:1>
|   |-CompoundAssignOperator 0x1553e9f8a78 <line:231:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f89c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f89a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f8960 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f86d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f8980 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9f8a60 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f8a40 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f8a28 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f89e0 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f8750 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1553e9f8a00 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1553e9f8bc0 <line:232:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f8b08 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f8af0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f8aa8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f86d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f8ac8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9f8ba8 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f8b88 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f8b70 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f8b28 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f8750 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1553e9f8b48 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1553e9f8d08 <line:233:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f8c50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f8c38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f8bf0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f86d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f8c10 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9f8cf0 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9f8cd0 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1553e9f8cb8 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9f8c70 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f8750 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1553e9f8c90 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1553e9f8e50 <line:234:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x1553e9f8d98 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553e9f8d80 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9f8d38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f86d8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553e9f8d58 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553e9f8e38 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1553e9f8e18 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x1553e9f8e00 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x1553e9f8db8 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9f8750 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x1553e9f8dd8 <col:18> 'int' 3
|-FunctionDecl 0x1553e9f9098 <line:238:1, line:244:1> line:238:13 used felem_scalar 'void (limb *, const u64)' static
| |-ParmVarDecl 0x1553e9f8ec0 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9f8f50 <col:37, col:47> col:47 used scalar 'const u64':'const unsigned long long'
| `-CompoundStmt 0x1553e9f9500 <line:239:1, line:244:1>
|   |-CompoundAssignOperator 0x1553e9f9218 <line:240:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f91c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f91a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f9160 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f8ec0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f9180 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9f9200 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f91e0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f8f50 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1553e9f9300 <line:241:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f92a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f9290 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f9248 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f8ec0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f9268 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9f92e8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f92c8 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f8f50 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1553e9f93e8 <line:242:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f9390 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f9378 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f9330 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f8ec0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f9350 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9f93d0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f93b0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f8f50 'scalar' 'const u64':'const unsigned long long'
|   `-CompoundAssignOperator 0x1553e9f94d0 <line:243:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x1553e9f9478 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553e9f9460 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9f9418 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f8ec0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553e9f9438 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553e9f94b8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x1553e9f9498 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f8f50 'scalar' 'const u64':'const unsigned long long'
|-FunctionDecl 0x1553e9f9708 <line:247:1, line:257:1> line:247:13 used longfelem_scalar 'void (limb *, const u64)' static
| |-ParmVarDecl 0x1553e9f9590 <col:30, col:40> col:40 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9f9608 <col:45, col:55> col:55 used scalar 'const u64':'const unsigned long long'
| `-CompoundStmt 0x1553e9f9f10 <line:248:1, line:257:1>
|   |-CompoundAssignOperator 0x1553e9f9888 <line:249:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f9830 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f9818 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f97d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f9590 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f97f0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9f9870 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f9850 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f9608 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1553e9f9970 <line:250:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f9918 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f9900 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f98b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f9590 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f98d8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9f9958 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f9938 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f9608 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1553e9f9a58 <line:251:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f9a00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f99e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f99a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f9590 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f99c0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9f9a40 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f9a20 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f9608 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1553e9f9b40 <line:252:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f9ae8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f9ad0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f9a88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f9590 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f9aa8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553e9f9b28 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f9b08 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f9608 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1553e9f9c28 <line:253:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f9bd0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f9bb8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f9b70 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f9590 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f9b90 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553e9f9c10 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f9bf0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f9608 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1553e9f9d10 <line:254:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f9cb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f9ca0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f9c58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f9590 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f9c78 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553e9f9cf8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f9cd8 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f9608 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1553e9f9df8 <line:255:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553e9f9da0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9f9d88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9f9d40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f9590 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9f9d60 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1553e9f9de0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9f9dc0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f9608 'scalar' 'const u64':'const unsigned long long'
|   `-CompoundAssignOperator 0x1553e9f9ee0 <line:256:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x1553e9f9e88 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553e9f9e70 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9f9e28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9f9590 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553e9f9e48 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x1553e9f9ec8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x1553e9f9ea8 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553e9f9608 'scalar' 'const u64':'const unsigned long long'
|-VarDecl 0x1553e9f9f70 <line:264:1, line:265:53> line:264:20 used zero105 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x1553e9faa30 <line:265:5, col:53> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x1553e9fa2b0 <line:259:22, col:78> 'int' '-'
|   | |-BinaryOperator 0x1553e9fa1a8 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x1553e9fa0a0 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x1553e9fa080 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1553e9fa038 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1553e9fa010 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1553e9f9fd8 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x1553e9fa058 <col:36> 'int' 105
|   | | `-ParenExpr 0x1553e9fa188 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x1553e9fa168 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1553e9fa120 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1553e9fa0f8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1553e9fa0c0 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x1553e9fa140 <col:57> 'int' 41
|   | `-ParenExpr 0x1553e9fa290 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x1553e9fa270 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1553e9fa228 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1553e9fa200 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1553e9fa1c8 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x1553e9fa248 <col:77> 'int' 9
|   |-ParenExpr 0x1553e9fa398 <line:260:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x1553e9fa378 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1553e9fa330 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1553e9fa308 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x1553e9fa2d0 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x1553e9fa350 <col:31> 'int' 105
|   |-BinaryOperator 0x1553e9fa690 <line:261:22, col:78> 'int' '+'
|   | |-BinaryOperator 0x1553e9fa588 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x1553e9fa480 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x1553e9fa460 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1553e9fa418 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1553e9fa3f0 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1553e9fa3b8 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x1553e9fa438 <col:36> 'int' 105
|   | | `-ParenExpr 0x1553e9fa568 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x1553e9fa548 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1553e9fa500 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1553e9fa4d8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1553e9fa4a0 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x1553e9fa520 <col:57> 'int' 41
|   | `-ParenExpr 0x1553e9fa670 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x1553e9fa650 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1553e9fa608 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1553e9fa5e0 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1553e9fa5a8 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x1553e9fa628 <col:77> 'int' 9
|   `-BinaryOperator 0x1553e9fa988 <col:22, col:78> 'int' '+'
|     |-BinaryOperator 0x1553e9fa880 <col:22, col:59> 'int' '-'
|     | |-ParenExpr 0x1553e9fa778 <col:22, col:39> 'limb':'int'
|     | | `-BinaryOperator 0x1553e9fa758 <col:23, col:36> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x1553e9fa710 <col:23, col:31> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x1553e9fa6e8 <col:24, col:30> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x1553e9fa6b0 <col:30> 'int' 1
|     | |   `-IntegerLiteral 0x1553e9fa730 <col:36> 'int' 105
|     | `-ParenExpr 0x1553e9fa860 <col:43, col:59> 'limb':'int'
|     |   `-BinaryOperator 0x1553e9fa840 <col:44, col:57> 'limb':'int' '<<'
|     |     |-ParenExpr 0x1553e9fa7f8 <col:44, col:52> 'limb':'int'
|     |     | `-CStyleCastExpr 0x1553e9fa7d0 <col:45, col:51> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x1553e9fa798 <col:51> 'int' 1
|     |     `-IntegerLiteral 0x1553e9fa818 <col:57> 'int' 41
|     `-ParenExpr 0x1553e9fa968 <col:63, col:78> 'limb':'int'
|       `-BinaryOperator 0x1553e9fa948 <col:64, col:77> 'limb':'int' '<<'
|         |-ParenExpr 0x1553e9fa900 <col:64, col:72> 'limb':'int'
|         | `-CStyleCastExpr 0x1553e9fa8d8 <col:65, col:71> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x1553e9fa8a0 <col:71> 'int' 1
|         `-IntegerLiteral 0x1553e9fa920 <col:77> 'int' 9
|-FunctionDecl 0x1553e9fabe0 <line:272:1, line:279:1> line:272:13 used smallfelem_neg 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x1553e9faaa0 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9fab18 <col:39, col:56> col:56 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553e9fb5a0 <line:273:1, line:279:1>
|   |-BinaryOperator 0x1553e9faea8 <line:275:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553e9fad08 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9facf0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9faca8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9faaa0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9facc8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9fae90 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1553e9fae70 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1553e9fae58 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1553e9fae28 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1553e9fad88 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x1553e9fad70 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1553e9fad28 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x1553e9fad48 <col:22> 'int' 0
|   |     `-ImplicitCastExpr 0x1553e9fae40 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x1553e9fae08 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x1553e9fadf0 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1553e9fada8 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9fab18 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x1553e9fadc8 <col:33> 'int' 0
|   |-BinaryOperator 0x1553e9fb140 <line:276:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553e9fafa0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9faf88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9faf10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9faaa0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9faf60 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9fb128 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1553e9fb108 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1553e9fb0f0 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1553e9fb0c0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1553e9fb020 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x1553e9fb008 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1553e9fafc0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x1553e9fafe0 <col:22> 'int' 1
|   |     `-ImplicitCastExpr 0x1553e9fb0d8 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x1553e9fb0a0 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x1553e9fb088 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1553e9fb040 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9fab18 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x1553e9fb060 <col:33> 'int' 1
|   |-BinaryOperator 0x1553e9fb360 <line:277:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553e9fb1c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fb1a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fb160 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9faaa0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fb180 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9fb348 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1553e9fb328 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1553e9fb310 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1553e9fb2e0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1553e9fb240 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x1553e9fb228 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1553e9fb1e0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x1553e9fb200 <col:22> 'int' 2
|   |     `-ImplicitCastExpr 0x1553e9fb2f8 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x1553e9fb2c0 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x1553e9fb2a8 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1553e9fb260 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9fab18 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x1553e9fb280 <col:33> 'int' 2
|   `-BinaryOperator 0x1553e9fb580 <line:278:5, col:34> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1553e9fb3e0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553e9fb3c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9fb380 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9faaa0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553e9fb3a0 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553e9fb568 <col:14, col:34> 'limb':'int' <IntegralCast>
|       `-BinaryOperator 0x1553e9fb548 <col:14, col:34> 'unsigned long long' '-'
|         |-ImplicitCastExpr 0x1553e9fb530 <col:14, col:23> 'unsigned long long' <IntegralCast>
|         | `-ImplicitCastExpr 0x1553e9fb500 <col:14, col:23> 'limb':'int' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x1553e9fb460 <col:14, col:23> 'const limb':'const int' lvalue
|         |     |-ImplicitCastExpr 0x1553e9fb448 <col:14> 'const limb *' <ArrayToPointerDecay>
|         |     | `-DeclRefExpr 0x1553e9fb400 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|         |     `-IntegerLiteral 0x1553e9fb420 <col:22> 'int' 3
|         `-ImplicitCastExpr 0x1553e9fb518 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|           `-ArraySubscriptExpr 0x1553e9fb4e0 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|             |-ImplicitCastExpr 0x1553e9fb4c8 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|             | `-DeclRefExpr 0x1553e9fb480 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553e9fab18 'small' 'const u64 *':'const u64 *'
|             `-IntegerLiteral 0x1553e9fb4a0 <col:33> 'int' 3
|-FunctionDecl 0x1553e9fb720 <line:288:1, line:302:1> line:288:13 used felem_diff 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1553e9fb5e0 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9fb658 <col:35, col:47> col:47 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553e9fc228 <line:289:1, line:302:1>
|   |-CompoundAssignOperator 0x1553e9fb900 <line:293:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fb848 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fb830 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fb7e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fb5e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fb808 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9fb8e8 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fb8c8 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fb8b0 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553e9fb868 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1553e9fb888 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x1553e9fba48 <line:294:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fb990 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fb978 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fb930 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fb5e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fb950 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9fba30 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fba10 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fb9f8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553e9fb9b0 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1553e9fb9d0 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x1553e9fbb90 <line:295:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fbad8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fbac0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fba78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fb5e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fba98 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9fbb78 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fbb58 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fbb40 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553e9fbaf8 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1553e9fbb18 <col:23> 'int' 2
|   |-CompoundAssignOperator 0x1553e9fbcd8 <line:296:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fbc20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fbc08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fbbc0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fb5e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fbbe0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553e9fbcc0 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fbca0 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fbc88 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553e9fbc40 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1553e9fbc60 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x1553e9fbe20 <line:298:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fbd68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fbd50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fbd08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fb5e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fbd28 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9fbe08 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fbde8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fbdd0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9fbd88 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fb658 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9fbda8 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1553e9fbf68 <line:299:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fbeb0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fbe98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fbe50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fb5e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fbe70 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9fbf50 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fbf30 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fbf18 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9fbed0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fb658 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9fbef0 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1553e9fc0b0 <line:300:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fbff8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fbfe0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fbf98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fb5e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fbfb8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9fc098 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fc078 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fc060 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9fc018 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fb658 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9fc038 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1553e9fc1f8 <line:301:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1553e9fc140 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553e9fc128 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9fc0e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fb5e0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553e9fc100 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553e9fc1e0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1553e9fc1c0 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x1553e9fc1a8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1553e9fc160 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fb658 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1553e9fc180 <col:18> 'int' 3
|-VarDecl 0x1553e9fc288 <line:309:1, line:310:56> line:309:20 used zero107 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x1553e9fcd48 <line:310:5, col:56> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x1553e9fc5c8 <line:304:23, col:80> 'int' '-'
|   | |-BinaryOperator 0x1553e9fc4c0 <col:23, col:60> 'int' '-'
|   | | |-ParenExpr 0x1553e9fc3b8 <col:23, col:40> 'limb':'int'
|   | | | `-BinaryOperator 0x1553e9fc398 <col:24, col:37> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1553e9fc350 <col:24, col:32> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1553e9fc328 <col:25, col:31> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1553e9fc2f0 <col:31> 'int' 1
|   | | |   `-IntegerLiteral 0x1553e9fc370 <col:37> 'int' 107
|   | | `-ParenExpr 0x1553e9fc4a0 <col:44, col:60> 'limb':'int'
|   | |   `-BinaryOperator 0x1553e9fc480 <col:45, col:58> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1553e9fc438 <col:45, col:53> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1553e9fc410 <col:46, col:52> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1553e9fc3d8 <col:52> 'int' 1
|   | |     `-IntegerLiteral 0x1553e9fc458 <col:58> 'int' 43
|   | `-ParenExpr 0x1553e9fc5a8 <col:64, col:80> 'limb':'int'
|   |   `-BinaryOperator 0x1553e9fc588 <col:65, col:78> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1553e9fc540 <col:65, col:73> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1553e9fc518 <col:66, col:72> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1553e9fc4e0 <col:72> 'int' 1
|   |     `-IntegerLiteral 0x1553e9fc560 <col:78> 'int' 11
|   |-ParenExpr 0x1553e9fc6b0 <line:305:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x1553e9fc690 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1553e9fc648 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1553e9fc620 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x1553e9fc5e8 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x1553e9fc668 <col:31> 'int' 107
|   |-BinaryOperator 0x1553e9fc9a8 <line:306:23, col:80> 'int' '+'
|   | |-BinaryOperator 0x1553e9fc8a0 <col:23, col:60> 'int' '-'
|   | | |-ParenExpr 0x1553e9fc798 <col:23, col:40> 'limb':'int'
|   | | | `-BinaryOperator 0x1553e9fc778 <col:24, col:37> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1553e9fc730 <col:24, col:32> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1553e9fc708 <col:25, col:31> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1553e9fc6d0 <col:31> 'int' 1
|   | | |   `-IntegerLiteral 0x1553e9fc750 <col:37> 'int' 107
|   | | `-ParenExpr 0x1553e9fc880 <col:44, col:60> 'limb':'int'
|   | |   `-BinaryOperator 0x1553e9fc860 <col:45, col:58> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1553e9fc818 <col:45, col:53> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1553e9fc7f0 <col:46, col:52> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1553e9fc7b8 <col:52> 'int' 1
|   | |     `-IntegerLiteral 0x1553e9fc838 <col:58> 'int' 43
|   | `-ParenExpr 0x1553e9fc988 <col:64, col:80> 'limb':'int'
|   |   `-BinaryOperator 0x1553e9fc968 <col:65, col:78> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1553e9fc920 <col:65, col:73> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1553e9fc8f8 <col:66, col:72> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1553e9fc8c0 <col:72> 'int' 1
|   |     `-IntegerLiteral 0x1553e9fc940 <col:78> 'int' 11
|   `-BinaryOperator 0x1553e9fcca0 <col:23, col:80> 'int' '+'
|     |-BinaryOperator 0x1553e9fcb98 <col:23, col:60> 'int' '-'
|     | |-ParenExpr 0x1553e9fca90 <col:23, col:40> 'limb':'int'
|     | | `-BinaryOperator 0x1553e9fca70 <col:24, col:37> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x1553e9fca28 <col:24, col:32> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x1553e9fca00 <col:25, col:31> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x1553e9fc9c8 <col:31> 'int' 1
|     | |   `-IntegerLiteral 0x1553e9fca48 <col:37> 'int' 107
|     | `-ParenExpr 0x1553e9fcb78 <col:44, col:60> 'limb':'int'
|     |   `-BinaryOperator 0x1553e9fcb58 <col:45, col:58> 'limb':'int' '<<'
|     |     |-ParenExpr 0x1553e9fcb10 <col:45, col:53> 'limb':'int'
|     |     | `-CStyleCastExpr 0x1553e9fcae8 <col:46, col:52> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x1553e9fcab0 <col:52> 'int' 1
|     |     `-IntegerLiteral 0x1553e9fcb30 <col:58> 'int' 43
|     `-ParenExpr 0x1553e9fcc80 <col:64, col:80> 'limb':'int'
|       `-BinaryOperator 0x1553e9fcc60 <col:65, col:78> 'limb':'int' '<<'
|         |-ParenExpr 0x1553e9fcc18 <col:65, col:73> 'limb':'int'
|         | `-CStyleCastExpr 0x1553e9fcbf0 <col:66, col:72> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x1553e9fcbb8 <col:72> 'int' 1
|         `-IntegerLiteral 0x1553e9fcc38 <col:78> 'int' 11
|-FunctionDecl 0x1553e9fcf70 <line:320:1, line:334:1> line:320:13 used felem_diff_zero107 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1553e9fcdb8 <col:32, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9fce30 <col:43, col:55> col:55 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553e9fdac0 <line:321:1, line:334:1>
|   |-CompoundAssignOperator 0x1553e9fd150 <line:325:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fd098 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fd080 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fd038 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fcdb8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fd058 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9fd138 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fd118 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fd100 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553e9fd0b8 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1553e9fc288 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1553e9fd0d8 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x1553e9fd2e0 <line:326:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fd228 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fd210 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fd1c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fcdb8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fd1e8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9fd2c8 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fd2a8 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fd290 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553e9fd248 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1553e9fc288 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1553e9fd268 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x1553e9fd428 <line:327:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fd370 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fd358 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fd310 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fcdb8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fd330 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9fd410 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fd3f0 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fd3d8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553e9fd390 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1553e9fc288 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1553e9fd3b0 <col:23> 'int' 2
|   |-CompoundAssignOperator 0x1553e9fd570 <line:328:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fd4b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fd4a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fd458 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fcdb8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fd478 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553e9fd558 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fd538 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fd520 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553e9fd4d8 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1553e9fc288 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1553e9fd4f8 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x1553e9fd6b8 <line:330:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fd600 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fd5e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fd5a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fcdb8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fd5c0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9fd6a0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fd680 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fd668 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9fd620 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fce30 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9fd640 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1553e9fd800 <line:331:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fd748 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fd730 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fd6e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fcdb8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fd708 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9fd7e8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fd7c8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fd7b0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9fd768 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fce30 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9fd788 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1553e9fd948 <line:332:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fd890 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fd878 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fd830 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fcdb8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fd850 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9fd930 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9fd910 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9fd8f8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9fd8b0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fce30 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9fd8d0 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1553e9fda90 <line:333:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1553e9fd9d8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553e9fd9c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9fd978 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fcdb8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553e9fd998 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553e9fda78 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1553e9fda58 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x1553e9fda40 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1553e9fd9f8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fce30 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1553e9fda18 <col:18> 'int' 3
|-FunctionDecl 0x1553e9fdd18 <line:343:1, line:373:1> line:343:13 used longfelem_diff 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1553e9fdb20 <col:28, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553e9fdc10 <col:43, col:59> col:59 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553e9ffff0 <line:344:1, line:373:1>
|   |-DeclStmt 0x1553e9fe150 <line:345:5, line:346:67>
|   | `-VarDecl 0x1553e9fddf0 <line:345:5, line:346:66> line:345:23 used two70m8p6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x1553e9fe130 <line:346:9, col:66> 'int' '+'
|   |     |-BinaryOperator 0x1553e9fe028 <col:9, col:46> 'int' '-'
|   |     | |-ParenExpr 0x1553e9fdf20 <col:9, col:26> 'limb':'int'
|   |     | | `-BinaryOperator 0x1553e9fdf00 <col:10, col:24> 'limb':'int' '<<'
|   |     | |   |-ParenExpr 0x1553e9fdeb8 <col:10, col:19> 'limb':'int'
|   |     | |   | `-CStyleCastExpr 0x1553e9fde90 <col:11, col:18> 'limb':'int' <NoOp>
|   |     | |   |   `-IntegerLiteral 0x1553e9fde58 <col:18> 'int' 1
|   |     | |   `-IntegerLiteral 0x1553e9fded8 <col:24> 'int' 70
|   |     | `-ParenExpr 0x1553e9fe008 <col:30, col:46> 'limb':'int'
|   |     |   `-BinaryOperator 0x1553e9fdfe8 <col:31, col:45> 'limb':'int' '<<'
|   |     |     |-ParenExpr 0x1553e9fdfa0 <col:31, col:40> 'limb':'int'
|   |     |     | `-CStyleCastExpr 0x1553e9fdf78 <col:32, col:39> 'limb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x1553e9fdf40 <col:39> 'int' 1
|   |     |     `-IntegerLiteral 0x1553e9fdfc0 <col:45> 'int' 8
|   |     `-ParenExpr 0x1553e9fe110 <col:50, col:66> 'limb':'int'
|   |       `-BinaryOperator 0x1553e9fe0f0 <col:51, col:65> 'limb':'int' '<<'
|   |         |-ParenExpr 0x1553e9fe0a8 <col:51, col:60> 'limb':'int'
|   |         | `-CStyleCastExpr 0x1553e9fe080 <col:52, col:59> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1553e9fe048 <col:59> 'int' 1
|   |         `-IntegerLiteral 0x1553e9fe0c8 <col:65> 'int' 6
|   |-DeclStmt 0x1553e9fe3d0 <line:347:5, col:73>
|   | `-VarDecl 0x1553e9fe178 <col:5, col:72> col:23 used two70p40 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x1553e9fe3b0 <col:34, col:72> 'int' '+'
|   |     |-ParenExpr 0x1553e9fe2a8 <col:34, col:51> 'limb':'int'
|   |     | `-BinaryOperator 0x1553e9fe288 <col:35, col:49> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x1553e9fe240 <col:35, col:44> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x1553e9fe218 <col:36, col:43> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x1553e9fe1e0 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x1553e9fe260 <col:49> 'int' 70
|   |     `-ParenExpr 0x1553e9fe390 <col:55, col:72> 'limb':'int'
|   |       `-BinaryOperator 0x1553e9fe370 <col:56, col:70> 'limb':'int' '<<'
|   |         |-ParenExpr 0x1553e9fe328 <col:56, col:65> 'limb':'int'
|   |         | `-CStyleCastExpr 0x1553e9fe300 <col:57, col:64> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1553e9fe2c8 <col:64> 'int' 1
|   |         `-IntegerLiteral 0x1553e9fe348 <col:70> 'int' 40
|   |-DeclStmt 0x1553e9fe548 <line:348:5, col:49>
|   | `-VarDecl 0x1553e9fe3f8 <col:5, col:48> col:23 used two70 'const limb':'const int' static cinit
|   |   `-ParenExpr 0x1553e9fe528 <col:31, col:48> 'limb':'int'
|   |     `-BinaryOperator 0x1553e9fe508 <col:32, col:46> 'limb':'int' '<<'
|   |       |-ParenExpr 0x1553e9fe4c0 <col:32, col:41> 'limb':'int'
|   |       | `-CStyleCastExpr 0x1553e9fe498 <col:33, col:40> 'limb':'int' <NoOp>
|   |       |   `-IntegerLiteral 0x1553e9fe460 <col:40> 'int' 1
|   |       `-IntegerLiteral 0x1553e9fe4e0 <col:46> 'int' 70
|   |-DeclStmt 0x1553e9fe9d8 <line:349:5, line:351:26>
|   | `-VarDecl 0x1553e9fe570 <line:349:5, line:351:25> line:349:23 used two70m40m38p6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x1553e9fe9b8 <line:350:9, line:351:25> 'int' '+'
|   |     |-BinaryOperator 0x1553e9fe8b0 <line:350:9, col:68> 'int' '-'
|   |     | |-BinaryOperator 0x1553e9fe7a8 <col:9, col:47> 'int' '-'
|   |     | | |-ParenExpr 0x1553e9fe6a0 <col:9, col:26> 'limb':'int'
|   |     | | | `-BinaryOperator 0x1553e9fe680 <col:10, col:24> 'limb':'int' '<<'
|   |     | | |   |-ParenExpr 0x1553e9fe638 <col:10, col:19> 'limb':'int'
|   |     | | |   | `-CStyleCastExpr 0x1553e9fe610 <col:11, col:18> 'limb':'int' <NoOp>
|   |     | | |   |   `-IntegerLiteral 0x1553e9fe5d8 <col:18> 'int' 1
|   |     | | |   `-IntegerLiteral 0x1553e9fe658 <col:24> 'int' 70
|   |     | | `-ParenExpr 0x1553e9fe788 <col:30, col:47> 'limb':'int'
|   |     | |   `-BinaryOperator 0x1553e9fe768 <col:31, col:45> 'limb':'int' '<<'
|   |     | |     |-ParenExpr 0x1553e9fe720 <col:31, col:40> 'limb':'int'
|   |     | |     | `-CStyleCastExpr 0x1553e9fe6f8 <col:32, col:39> 'limb':'int' <NoOp>
|   |     | |     |   `-IntegerLiteral 0x1553e9fe6c0 <col:39> 'int' 1
|   |     | |     `-IntegerLiteral 0x1553e9fe740 <col:45> 'int' 40
|   |     | `-ParenExpr 0x1553e9fe890 <col:51, col:68> 'limb':'int'
|   |     |   `-BinaryOperator 0x1553e9fe870 <col:52, col:66> 'limb':'int' '<<'
|   |     |     |-ParenExpr 0x1553e9fe828 <col:52, col:61> 'limb':'int'
|   |     |     | `-CStyleCastExpr 0x1553e9fe800 <col:53, col:60> 'limb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x1553e9fe7c8 <col:60> 'int' 1
|   |     |     `-IntegerLiteral 0x1553e9fe848 <col:66> 'int' 38
|   |     `-ParenExpr 0x1553e9fe998 <line:351:9, col:25> 'limb':'int'
|   |       `-BinaryOperator 0x1553e9fe978 <col:10, col:24> 'limb':'int' '<<'
|   |         |-ParenExpr 0x1553e9fe930 <col:10, col:19> 'limb':'int'
|   |         | `-CStyleCastExpr 0x1553e9fe908 <col:11, col:18> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1553e9fe8d0 <col:18> 'int' 1
|   |         `-IntegerLiteral 0x1553e9fe950 <col:24> 'int' 6
|   |-DeclStmt 0x1553e9fec58 <line:352:5, col:71>
|   | `-VarDecl 0x1553e9fea00 <col:5, col:70> col:23 used two70m6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x1553e9fec38 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x1553e9feb30 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x1553e9feb10 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x1553e9feac8 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x1553e9feaa0 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x1553e9fea68 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x1553e9feae8 <col:48> 'int' 70
|   |     `-ParenExpr 0x1553e9fec18 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x1553e9febf8 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x1553e9febb0 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x1553e9feb88 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1553e9feb50 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x1553e9febd0 <col:69> 'int' 6
|   |-CompoundAssignOperator 0x1553e9fed40 <line:355:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fecd0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fecb8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fec70 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fec90 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9fed28 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9fecf0 <col:15> 'const limb':'const int' lvalue Var 0x1553e9fddf0 'two70m8p6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1553e9fee88 <line:356:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fee18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fee00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fedb8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fedd8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9fee70 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9fee38 <col:15> 'const limb':'const int' lvalue Var 0x1553e9fe178 'two70p40' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1553e9feff0 <line:357:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9fef80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9fef48 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9fef00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9fef20 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9fefd8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9fefa0 <col:15> 'const limb':'const int' lvalue Var 0x1553e9fe3f8 'two70' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1553e9ff138 <line:358:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ff0c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ff0b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ff068 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ff088 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553e9ff120 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9ff0e8 <col:15> 'const limb':'const int' lvalue Var 0x1553e9fe570 'two70m40m38p6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1553e9ff280 <line:359:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ff210 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ff1f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ff1b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ff1d0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553e9ff268 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9ff230 <col:15> 'const limb':'const int' lvalue Var 0x1553e9fea00 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1553e9ff3b0 <line:360:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ff358 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ff340 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ff2f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ff318 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553e9ff398 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9ff378 <col:15> 'const limb':'const int' lvalue Var 0x1553e9fea00 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1553e9ff498 <line:361:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ff440 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ff428 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ff3e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ff400 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1553e9ff480 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9ff460 <col:15> 'const limb':'const int' lvalue Var 0x1553e9fea00 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1553e9ff580 <line:362:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ff528 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ff510 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ff4c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ff4e8 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x1553e9ff568 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553e9ff548 <col:15> 'const limb':'const int' lvalue Var 0x1553e9fea00 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1553e9ff6c8 <line:365:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ff610 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ff5f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ff5b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ff5d0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553e9ff6b0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9ff690 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9ff678 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9ff630 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fdc10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9ff650 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1553e9ff810 <line:366:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ff758 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ff740 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ff6f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ff718 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553e9ff7f8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9ff7d8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9ff7c0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9ff778 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fdc10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9ff798 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1553e9ff958 <line:367:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ff8a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ff888 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ff840 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ff860 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553e9ff940 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9ff920 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9ff908 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9ff8c0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fdc10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9ff8e0 <col:18> 'int' 2
|   |-CompoundAssignOperator 0x1553e9ffaa0 <line:368:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ff9e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ff9d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ff988 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ff9a8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553e9ffa88 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9ffa68 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9ffa50 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9ffa08 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fdc10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9ffa28 <col:18> 'int' 3
|   |-CompoundAssignOperator 0x1553e9ffbe8 <line:369:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ffb30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ffb18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ffad0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ffaf0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553e9ffbd0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9ffbb0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9ffb98 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9ffb50 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fdc10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9ffb70 <col:18> 'int' 4
|   |-CompoundAssignOperator 0x1553e9ffd30 <line:370:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ffc78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ffc60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ffc18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ffc38 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553e9ffd18 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9ffcf8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9ffce0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9ffc98 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fdc10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9ffcb8 <col:18> 'int' 5
|   |-CompoundAssignOperator 0x1553e9ffe78 <line:371:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553e9ffdc0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553e9ffda8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553e9ffd60 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553e9ffd80 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1553e9ffe60 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553e9ffe40 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553e9ffe28 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553e9ffde0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fdc10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553e9ffe00 <col:18> 'int' 6
|   `-CompoundAssignOperator 0x1553e9fffc0 <line:372:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1553e9fff08 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553e9ffef0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553e9ffea8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553e9fdb20 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553e9ffec8 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x1553e9fffa8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1553e9fff88 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x1553e9fff70 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1553e9fff28 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553e9fdc10 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1553e9fff48 <col:18> 'int' 7
|-VarDecl 0x1553ea000b8 <line:381:1, col:73> col:20 used zero110 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x1553ea008f0 <col:30, col:73> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x1553ea00230 <line:375:18, col:38> 'int' '-'
|   | |-ParenExpr 0x1553ea001e8 <col:18, col:34> 'limb':'int'
|   | | `-BinaryOperator 0x1553ea001c8 <col:19, col:32> 'limb':'int' '<<'
|   | |   |-ParenExpr 0x1553ea00180 <col:19, col:27> 'limb':'int'
|   | |   | `-CStyleCastExpr 0x1553ea00158 <col:20, col:26> 'limb':'int' <NoOp>
|   | |   |   `-IntegerLiteral 0x1553ea00120 <col:26> 'int' 1
|   | |   `-IntegerLiteral 0x1553ea001a0 <col:32> 'int' 64
|   | `-IntegerLiteral 0x1553ea00208 <col:38> 'int' 1
|   |-BinaryOperator 0x1553ea00468 <line:376:22, col:63> 'int' '-'
|   | |-BinaryOperator 0x1553ea00420 <col:22, col:59> 'int' '+'
|   | | |-ParenExpr 0x1553ea00318 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x1553ea002f8 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1553ea002b0 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1553ea00288 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1553ea00250 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x1553ea002d0 <col:36> 'int' 110
|   | | `-ParenExpr 0x1553ea00400 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x1553ea003e0 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1553ea00398 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1553ea00370 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1553ea00338 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x1553ea003b8 <col:57> 'int' 32
|   | `-IntegerLiteral 0x1553ea00440 <col:63> 'int' 1
|   |-BinaryOperator 0x1553ea00658 <line:377:19, col:55> 'int' '-'
|   | |-ParenExpr 0x1553ea00550 <col:19, col:35> 'limb':'int'
|   | | `-BinaryOperator 0x1553ea00530 <col:20, col:33> 'limb':'int' '<<'
|   | |   |-ParenExpr 0x1553ea004e8 <col:20, col:28> 'limb':'int'
|   | |   | `-CStyleCastExpr 0x1553ea004c0 <col:21, col:27> 'limb':'int' <NoOp>
|   | |   |   `-IntegerLiteral 0x1553ea00488 <col:27> 'int' 1
|   | |   `-IntegerLiteral 0x1553ea00508 <col:33> 'int' 64
|   | `-ParenExpr 0x1553ea00638 <col:39, col:55> 'limb':'int'
|   |   `-BinaryOperator 0x1553ea00618 <col:40, col:53> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1553ea005d0 <col:40, col:48> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1553ea005a8 <col:41, col:47> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1553ea00570 <col:47> 'int' 1
|   |     `-IntegerLiteral 0x1553ea005f0 <col:53> 'int' 46
|   `-BinaryOperator 0x1553ea00848 <line:378:19, col:55> 'int' '-'
|     |-ParenExpr 0x1553ea00740 <col:19, col:35> 'limb':'int'
|     | `-BinaryOperator 0x1553ea00720 <col:20, col:33> 'limb':'int' '<<'
|     |   |-ParenExpr 0x1553ea006d8 <col:20, col:28> 'limb':'int'
|     |   | `-CStyleCastExpr 0x1553ea006b0 <col:21, col:27> 'limb':'int' <NoOp>
|     |   |   `-IntegerLiteral 0x1553ea00678 <col:27> 'int' 1
|     |   `-IntegerLiteral 0x1553ea006f8 <col:33> 'int' 64
|     `-ParenExpr 0x1553ea00828 <col:39, col:55> 'limb':'int'
|       `-BinaryOperator 0x1553ea00808 <col:40, col:53> 'limb':'int' '<<'
|         |-ParenExpr 0x1553ea007c0 <col:40, col:48> 'limb':'int'
|         | `-CStyleCastExpr 0x1553ea00798 <col:41, col:47> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x1553ea00760 <col:47> 'int' 1
|         `-IntegerLiteral 0x1553ea007e0 <col:53> 'int' 32
|-FunctionDecl 0x1553ea00b18 <line:392:1, line:481:1> line:392:13 used felem_shrink 'void (u64 *, const limb *)' static
| |-ParmVarDecl 0x1553ea00960 <col:26, col:37> col:37 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553ea009d8 <col:42, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553ea04810 <line:393:1, line:481:1>
|   |-DeclStmt 0x1553ea00c58 <line:394:5, col:14>
|   | `-VarDecl 0x1553ea00bf0 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-DeclStmt 0x1553ea00df8 <line:395:5, col:19>
|   | |-VarDecl 0x1553ea00c80 <col:5, col:9> col:9 used a 'u64':'unsigned long long'
|   | |-VarDecl 0x1553ea00cf8 <col:5, col:12> col:12 used b 'u64':'unsigned long long'
|   | `-VarDecl 0x1553ea00d70 <col:5, col:15> col:15 used mask 'u64':'unsigned long long'
|   |-DeclStmt 0x1553ea00f18 <line:396:5, col:18>
|   | |-VarDecl 0x1553ea00e20 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x1553ea00e98 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-DeclStmt 0x1553ea01020 <line:397:5, col:56>
|   | `-VarDecl 0x1553ea00f90 <col:5, col:36> col:22 used kPrime3Test 'const u64':'const unsigned long long' static cinit
|   |   `-IntegerLiteral 0x1553ea00ff8 <col:36> 'unsigned long long' 9223372032559808513
|   |-BinaryOperator 0x1553ea013e8 <line:400:5, col:54> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea010b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea01098 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea01038 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea01070 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea013d0 <col:14, col:54> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea013b0 <col:14, col:54> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x1553ea01398 <col:14, col:31> 'unsigned long long' <IntegralCast>
|   |     | `-BinaryOperator 0x1553ea01200 <col:14, col:31> 'int' '+'
|   |     |   |-ImplicitCastExpr 0x1553ea011d0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   | `-ArraySubscriptExpr 0x1553ea01130 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |   |   |-ImplicitCastExpr 0x1553ea01118 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |   |   | `-DeclRefExpr 0x1553ea010d0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553ea000b8 'zero110' 'const felem':'limb const[4]'
|   |     |   |   `-IntegerLiteral 0x1553ea010f0 <col:22> 'int' 3
|   |     |   `-ImplicitCastExpr 0x1553ea011e8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x1553ea011b0 <col:27, col:31> 'const limb':'const int' lvalue
|   |     |       |-ImplicitCastExpr 0x1553ea01198 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x1553ea01150 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553ea009d8 'in' 'const limb *':'const limb *'
|   |     |       `-IntegerLiteral 0x1553ea01170 <col:30> 'int' 3
|   |     `-ParenExpr 0x1553ea01378 <col:35, col:54> 'u64':'unsigned long long'
|   |       `-CStyleCastExpr 0x1553ea01350 <col:36, col:53> 'u64':'unsigned long long' <IntegralCast>
|   |         `-ParenExpr 0x1553ea01330 <col:41, col:53> 'limb':'int'
|   |           `-BinaryOperator 0x1553ea012e0 <col:42, col:51> 'limb':'int' '>>'
|   |             |-ImplicitCastExpr 0x1553ea012c8 <col:42, col:46> 'limb':'int' <LValueToRValue>
|   |             | `-ArraySubscriptExpr 0x1553ea01280 <col:42, col:46> 'const limb':'const int' lvalue
|   |             |   |-ImplicitCastExpr 0x1553ea01268 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x1553ea01220 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x1553ea009d8 'in' 'const limb *':'const limb *'
|   |             |   `-IntegerLiteral 0x1553ea01240 <col:45> 'int' 2
|   |             `-IntegerLiteral 0x1553ea012a0 <col:51> 'int' 64
|   |-BinaryOperator 0x1553ea01688 <line:403:5, col:36> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea014b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea01498 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea01450 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea01470 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea01670 <col:14, col:36> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea01650 <col:14, col:36> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x1553ea01638 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1553ea01620 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1553ea01530 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x1553ea01518 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1553ea014d0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553ea000b8 'zero110' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x1553ea014f0 <col:22> 'int' 2
|   |     `-CStyleCastExpr 0x1553ea015f8 <col:27, col:36> 'u64':'unsigned long long' <IntegralCast>
|   |       `-ImplicitCastExpr 0x1553ea015e0 <col:32, col:36> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |         `-ArraySubscriptExpr 0x1553ea015b0 <col:32, col:36> 'const limb':'const int' lvalue
|   |           |-ImplicitCastExpr 0x1553ea01598 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1553ea01550 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x1553ea009d8 'in' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x1553ea01570 <col:35> 'int' 2
|   |-BinaryOperator 0x1553ea01878 <line:404:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea01708 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea016f0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea016a8 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea016c8 <col:9> 'int' 0
|   | `-BinaryOperator 0x1553ea01858 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1553ea01828 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1553ea01788 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1553ea01770 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553ea01728 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553ea000b8 'zero110' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1553ea01748 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x1553ea01840 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea01808 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1553ea017f0 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553ea017a8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553ea009d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1553ea017c8 <col:30> 'int' 0
|   |-BinaryOperator 0x1553ea01a68 <line:405:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea018f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea018e0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea01898 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea018b8 <col:9> 'int' 1
|   | `-BinaryOperator 0x1553ea01a48 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1553ea01a18 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1553ea01978 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1553ea01960 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553ea01918 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553ea000b8 'zero110' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1553ea01938 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x1553ea01a30 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea019f8 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1553ea019e0 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553ea01998 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553ea009d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1553ea019b8 <col:30> 'int' 1
|   |-BinaryOperator 0x1553ea01bb8 <line:412:5, col:19> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea01a88 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00c80 'a' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea01ba0 <col:9, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea01b80 <col:9, col:19> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea01b68 <col:9, col:14> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553ea01b20 <col:9, col:14> 'limb':'int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553ea01b08 <col:9> 'limb *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x1553ea01ac0 <col:9> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |     |   `-IntegerLiteral 0x1553ea01ae0 <col:13> 'int' 3
|   |     `-IntegerLiteral 0x1553ea01b40 <col:19> 'int' 64
|   |-BinaryOperator 0x1553ea01d40 <line:413:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea01c38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea01c20 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea01bd8 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea01bf8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea01d28 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x1553ea01d00 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1553ea01ce8 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x1553ea01cb8 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x1553ea01ca0 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x1553ea01c58 <col:19> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x1553ea01c78 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x1553ea01e18 <line:414:5, col:15> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea01dc0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea01da8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea01d60 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea01d80 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea01e00 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea01de0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea00c80 'a' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea01fa0 <line:415:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553ea01ea8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea01e90 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea01e48 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea01e68 <col:9> 'int' 3
|   | `-BinaryOperator 0x1553ea01f80 <col:15, col:29> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1553ea01f38 <col:15, col:24> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1553ea01f10 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x1553ea01ef8 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x1553ea01ec8 <col:23> 'u64':'unsigned long long' lvalue Var 0x1553ea00c80 'a' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553ea01f58 <col:29> 'int' 32
|   |-BinaryOperator 0x1553ea02040 <line:418:5, col:9> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea01fd0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00cf8 'b' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea02028 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea02008 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553ea00c80 'a' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea02178 <line:419:5, col:19> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea02060 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00c80 'a' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea02160 <col:9, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea02140 <col:9, col:19> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea02128 <col:9, col:14> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553ea020e0 <col:9, col:14> 'limb':'int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553ea020c8 <col:9> 'limb *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x1553ea02080 <col:9> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |     |   `-IntegerLiteral 0x1553ea020a0 <col:13> 'int' 3
|   |     `-IntegerLiteral 0x1553ea02100 <col:19> 'int' 64
|   |-CompoundAssignOperator 0x1553ea021f0 <line:420:5, col:10> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553ea02198 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00cf8 'b' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea021d8 <col:10> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea021b8 <col:10> 'u64':'unsigned long long' lvalue Var 0x1553ea00c80 'a' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea02388 <line:421:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea02280 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea02268 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea02220 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea02240 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea02370 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x1553ea02348 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1553ea02330 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x1553ea02300 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x1553ea022e8 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x1553ea022a0 <col:19> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x1553ea022c0 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x1553ea02460 <line:422:5, col:15> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea02408 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea023f0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea023a8 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea023c8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea02448 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea02428 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea00c80 'a' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea025e8 <line:423:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553ea024f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea024d8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea02490 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea024b0 <col:9> 'int' 3
|   | `-BinaryOperator 0x1553ea025c8 <col:15, col:29> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1553ea02580 <col:15, col:24> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1553ea02558 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x1553ea02540 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x1553ea02510 <col:23> 'u64':'unsigned long long' lvalue Var 0x1553ea00c80 'a' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553ea025a0 <col:29> 'int' 32
|   |-CompoundAssignOperator 0x1553ea026d0 <line:430:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea02678 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea02660 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea02618 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea02638 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553ea026b8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea02698 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea00cf8 'b' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea02878 <line:431:5, col:32> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553ea02760 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea02748 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea02700 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea02720 <col:9> 'int' 1
|   | `-ParenExpr 0x1553ea02858 <col:15, col:32> 'limb':'int'
|   |   `-BinaryOperator 0x1553ea02838 <col:16, col:30> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1553ea027f0 <col:16, col:25> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1553ea027c8 <col:17, col:24> 'limb':'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x1553ea027b0 <col:24> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x1553ea02780 <col:24> 'u64':'unsigned long long' lvalue Var 0x1553ea00cf8 'b' 'u64':'unsigned long long'
|   |     `-IntegerLiteral 0x1553ea02810 <col:30> 'int' 32
|   |-BinaryOperator 0x1553ea02a38 <line:437:5, col:30> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea028a8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00e20 'high' 'u64':'unsigned long long'
|   | `-CStyleCastExpr 0x1553ea02a10 <col:12, col:30> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ParenExpr 0x1553ea029f0 <col:17, col:30> 'limb':'int'
|   |     `-BinaryOperator 0x1553ea029a0 <col:18, col:28> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x1553ea02988 <col:18, col:23> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x1553ea02940 <col:18, col:23> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x1553ea02928 <col:18> 'limb *' <ArrayToPointerDecay>
|   |       |   | `-DeclRefExpr 0x1553ea028e0 <col:18> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |       |   `-IntegerLiteral 0x1553ea02900 <col:22> 'int' 3
|   |       `-IntegerLiteral 0x1553ea02960 <col:28> 'int' 64
|   |-BinaryOperator 0x1553ea02b10 <line:439:5, col:16> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea02a58 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00e20 'high' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553ea02af0 <col:12, col:16> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1553ea02ad8 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1553ea02a78 <col:12> 'int' 0
|   |   `-ImplicitCastExpr 0x1553ea02ac0 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea02aa0 <col:16> 'u64':'unsigned long long' lvalue Var 0x1553ea00e20 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea02c38 <line:445:5, col:21> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea02b30 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00e98 'low' 'u64':'unsigned long long'
|   | `-CStyleCastExpr 0x1553ea02c10 <col:11, col:21> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea02bf8 <col:16, col:21> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |     `-ArraySubscriptExpr 0x1553ea02bc8 <col:16, col:21> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x1553ea02bb0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553ea02b68 <col:16> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x1553ea02b88 <col:20> 'int' 3
|   |-BinaryOperator 0x1553ea02d90 <line:446:5, col:26> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea02c58 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00d70 'mask' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553ea02d70 <col:12, col:26> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1553ea02d58 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1553ea02c90 <col:12> 'int' 0
|   |   `-ParenExpr 0x1553ea02d38 <col:16, col:26> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x1553ea02d18 <col:17, col:24> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x1553ea02d00 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553ea02cb8 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553ea00e98 'low' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x1553ea02cd8 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x1553ea02e08 <line:452:5, col:12> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553ea02db0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00e98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea02df0 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea02dd0 <col:12> 'const u64':'const unsigned long long' lvalue Var 0x1553e9f3248 'bottom63bits' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1553ea02ef0 <line:453:5, col:12> 'u64':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553ea02e80 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00e98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea02ed8 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea02ea0 <col:12> 'const u64':'const unsigned long long' lvalue Var 0x1553ea00f90 'kPrime3Test' 'const u64':'const unsigned long long'
|   |-BinaryOperator 0x1553ea02ff0 <line:455:5, col:12> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea02f68 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00e98 'low' 'u64':'unsigned long long'
|   | `-UnaryOperator 0x1553ea02fd8 <col:11, col:12> 'u64':'unsigned long long' prefix '~' cannot overflow
|   |   `-ImplicitCastExpr 0x1553ea02fc0 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea02fa0 <col:12> 'u64':'unsigned long long' lvalue Var 0x1553ea00e98 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea03130 <line:456:5, col:25> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea03010 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00e98 'low' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553ea03110 <col:11, col:25> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1553ea030f8 <col:11> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1553ea03030 <col:11> 'int' 0
|   |   `-ParenExpr 0x1553ea030d8 <col:15, col:25> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x1553ea030b8 <col:16, col:23> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x1553ea030a0 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553ea03058 <col:16> 'u64':'unsigned long long' lvalue Var 0x1553ea00e98 'low' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x1553ea03078 <col:23> 'int' 63
|   |-BinaryOperator 0x1553ea03278 <line:462:5, col:27> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea03150 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea00d70 'mask' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553ea03258 <col:12, col:27> 'unsigned long long' '|'
|   |   |-ParenExpr 0x1553ea03200 <col:12, col:23> 'unsigned long long'
|   |   | `-BinaryOperator 0x1553ea031e0 <col:13, col:20> 'unsigned long long' '&'
|   |   |   |-ImplicitCastExpr 0x1553ea031b0 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1553ea03170 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553ea00d70 'mask' 'u64':'unsigned long long'
|   |   |   `-ImplicitCastExpr 0x1553ea031c8 <col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1553ea03190 <col:20> 'u64':'unsigned long long' lvalue Var 0x1553ea00e98 'low' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1553ea03240 <col:27> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea03220 <col:27> 'u64':'unsigned long long' lvalue Var 0x1553ea00e20 'high' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea03408 <line:463:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea032f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea032e0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea03298 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea032b8 <col:9> 'int' 0
|   | `-BinaryOperator 0x1553ea033e8 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1553ea033b8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553ea03318 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea00d70 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1553ea033d0 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea03398 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1553ea03380 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553ea03338 <col:22> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1553ea03358 <col:29> 'int' 0
|   |-CompoundAssignOperator 0x1553ea035f0 <line:464:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea034e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea034c8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea03480 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea034a0 <col:9> 'int' 1
|   | `-BinaryOperator 0x1553ea035d0 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1553ea035a0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553ea03500 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea00d70 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1553ea035b8 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea03580 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1553ea03568 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553ea03520 <col:22> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1553ea03540 <col:29> 'int' 1
|   |-CompoundAssignOperator 0x1553ea03790 <line:466:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea03680 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea03668 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea03620 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea03640 <col:9> 'int' 3
|   | `-BinaryOperator 0x1553ea03770 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1553ea03740 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553ea036a0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea00d70 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1553ea03758 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea03720 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1553ea03708 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553ea036c0 <col:22> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1553ea036e0 <col:29> 'int' 3
|   |-CompoundAssignOperator 0x1553ea039b8 <line:469:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea03820 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea03808 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea037c0 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea037e0 <col:9> 'int' 1
|   | `-ParenExpr 0x1553ea03998 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x1553ea03970 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x1553ea03950 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x1553ea03900 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x1553ea038e8 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x1553ea038a0 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ea03888 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1553ea03840 <col:22> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x1553ea03860 <col:26> 'int' 0
|   |         `-IntegerLiteral 0x1553ea038c0 <col:32> 'int' 64
|   |-BinaryOperator 0x1553ea03b50 <line:470:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea03a48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea03a30 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea039e8 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea03a08 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553ea03b38 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x1553ea03b10 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1553ea03af8 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x1553ea03ac8 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x1553ea03ab0 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x1553ea03a68 <col:19> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x1553ea03a88 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x1553ea03d68 <line:471:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea03bd0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea03bb8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea03b70 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea03b90 <col:9> 'int' 2
|   | `-ParenExpr 0x1553ea03d48 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x1553ea03d20 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x1553ea03d00 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x1553ea03cb0 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x1553ea03c98 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x1553ea03c50 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ea03c38 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1553ea03bf0 <col:22> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x1553ea03c10 <col:26> 'int' 1
|   |         `-IntegerLiteral 0x1553ea03c70 <col:32> 'int' 64
|   |-BinaryOperator 0x1553ea03f00 <line:472:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea03df8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea03de0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea03d98 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea03db8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553ea03ee8 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x1553ea03ec0 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1553ea03ea8 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x1553ea03e78 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x1553ea03e60 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x1553ea03e18 <col:19> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x1553ea03e38 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x1553ea04118 <line:473:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea03f80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea03f68 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea03f20 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea03f40 <col:9> 'int' 3
|   | `-ParenExpr 0x1553ea040f8 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x1553ea040d0 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x1553ea040b0 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x1553ea04060 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x1553ea04048 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x1553ea04000 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ea03fe8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1553ea03fa0 <col:22> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x1553ea03fc0 <col:26> 'int' 2
|   |         `-IntegerLiteral 0x1553ea04020 <col:32> 'int' 64
|   |-BinaryOperator 0x1553ea042b0 <line:474:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea041a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea04190 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1553ea04148 <col:5> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1553ea04168 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea04298 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x1553ea04270 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1553ea04258 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x1553ea04228 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x1553ea04210 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x1553ea041c8 <col:19> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x1553ea041e8 <col:23> 'int' 2
|   |-BinaryOperator 0x1553ea04400 <line:477:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1553ea04330 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1553ea04318 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea042d0 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553ea00960 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1553ea042f0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553ea043e8 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea043d0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea043b0 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x1553ea04398 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553ea04350 <col:14> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x1553ea04370 <col:18> 'int' 0
|   |-BinaryOperator 0x1553ea04550 <line:478:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1553ea04480 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1553ea04468 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea04420 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553ea00960 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1553ea04440 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553ea04538 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea04520 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea04500 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x1553ea044e8 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553ea044a0 <col:14> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x1553ea044c0 <col:18> 'int' 1
|   |-BinaryOperator 0x1553ea046a0 <line:479:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1553ea045d0 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1553ea045b8 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea04570 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553ea00960 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1553ea04590 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea04688 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea04670 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea04650 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x1553ea04638 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553ea045f0 <col:14> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x1553ea04610 <col:18> 'int' 2
|   `-BinaryOperator 0x1553ea047f0 <line:480:5, col:19> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1553ea04720 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1553ea04708 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553ea046c0 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1553ea00960 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x1553ea046e0 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553ea047d8 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|       `-ImplicitCastExpr 0x1553ea047c0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1553ea047a0 <col:14, col:19> 'limb':'int' lvalue
|           |-ImplicitCastExpr 0x1553ea04788 <col:14> 'limb *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x1553ea04740 <col:14> 'felem':'limb [4]' lvalue Var 0x1553ea00bf0 'tmp' 'felem':'limb [4]'
|           `-IntegerLiteral 0x1553ea04760 <col:18> 'int' 3
|-FunctionDecl 0x1553ea04ac0 <line:484:1, line:490:1> line:484:13 used smallfelem_expand 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x1553ea04980 <col:31, col:37> col:37 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553ea049f8 <col:42, col:59> col:59 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553ea050e0 <line:485:1, line:490:1>
|   |-BinaryOperator 0x1553ea04cb8 <line:486:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea04be8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea04bd0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea04b88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea04980 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea04ba8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553ea04ca0 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea04c88 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea04c68 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1553ea04c50 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553ea04c08 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553ea049f8 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x1553ea04c28 <col:17> 'int' 0
|   |-BinaryOperator 0x1553ea04e08 <line:487:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea04d38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea04d20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea04cd8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea04980 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea04cf8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553ea04df0 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea04dd8 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea04db8 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1553ea04da0 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553ea04d58 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553ea049f8 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x1553ea04d78 <col:17> 'int' 1
|   |-BinaryOperator 0x1553ea04f58 <line:488:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea04e88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea04e70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea04e28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea04980 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea04e48 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea04f40 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea04f28 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553ea04f08 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1553ea04ef0 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553ea04ea8 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553ea049f8 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x1553ea04ec8 <col:17> 'int' 2
|   `-BinaryOperator 0x1553ea050c0 <line:489:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1553ea04ff0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553ea04fd8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553ea04f78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea04980 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553ea04fb0 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1553ea050a8 <col:14, col:18> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x1553ea05090 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1553ea05070 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|           |-ImplicitCastExpr 0x1553ea05058 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|           | `-DeclRefExpr 0x1553ea05010 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553ea049f8 'in' 'const u64 *':'const u64 *'
|           `-IntegerLiteral 0x1553ea05030 <col:17> 'int' 3
|-FunctionDecl 0x1553ea05298 <line:499:1, line:569:1> line:499:13 used smallfelem_square 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x1553ea05120 <col:31, col:41> col:41 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553ea05198 <col:46, col:63> col:63 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553ea08150 <line:500:1, line:569:1>
|   |-DeclStmt 0x1553ea053d8 <line:501:5, col:11>
|   | `-VarDecl 0x1553ea05370 <col:5, col:10> col:10 used a 'limb':'int'
|   |-DeclStmt 0x1553ea054f8 <line:502:5, col:18>
|   | |-VarDecl 0x1553ea05400 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x1553ea05478 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea05650 <line:505:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea055c8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea05638 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea05620 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea05600 <col:11> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea05740 <line:506:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea05670 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea05728 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea05708 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea056f0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea056a8 <col:12> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea056c8 <col:17> 'int' 64
|   |-BinaryOperator 0x1553ea05830 <line:507:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea057c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea057a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea05760 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea05780 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553ea05818 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea05800 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea057e0 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea05920 <line:508:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea058b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea05898 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea05850 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea05870 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553ea05908 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea058f0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea058d0 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea05a50 <line:511:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea059e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea05a38 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea05a20 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea05a00 <col:11> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea05b28 <line:512:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea05a70 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea05b10 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea05af0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea05ad8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea05a90 <col:12> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea05ab0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea05c00 <line:513:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea05ba8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea05b90 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea05b48 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea05b68 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553ea05be8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea05bc8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea05ce8 <line:514:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea05c90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea05c78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea05c30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea05c50 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553ea05cd0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea05cb0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea05de8 <line:515:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea05d78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea05d60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea05d18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea05d38 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea05dd0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea05db8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea05d98 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea05f18 <line:518:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea05ea8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea05f00 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea05ee8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea05ec8 <col:11> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea05ff0 <line:519:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea05f38 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea05fd8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea05fb8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea05fa0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea05f58 <col:12> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea05f78 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea060c8 <line:520:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea06070 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea06058 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea06010 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea06030 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea060b0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea06090 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea061a0 <line:521:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553ea06158 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea06140 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea060f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea06118 <col:9> 'int' 2
|   | `-IntegerLiteral 0x1553ea06178 <col:15> 'int' 2
|   |-BinaryOperator 0x1553ea062a0 <line:522:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea06230 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea06218 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea061d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea061f0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea06288 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea06270 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea06250 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea063d0 <line:525:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea06360 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea063b8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea063a0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea06380 <col:11> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea064a8 <line:526:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea063f0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea06490 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea06470 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea06458 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea06410 <col:12> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea06430 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea06580 <line:527:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea06528 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea06510 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea064c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea064e8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea06568 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea06548 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea06680 <line:528:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea06610 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea065f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea065b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea065d0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea06668 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea06650 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea06630 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea067b0 <line:531:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea06740 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea06798 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea06780 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea06760 <col:11> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea06888 <line:532:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea067d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea06870 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea06850 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea06838 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea067f0 <col:12> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea06810 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea06960 <line:533:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea06908 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea068f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea068a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea068c8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea06948 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea06928 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea06a38 <line:534:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553ea069f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea069d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea06990 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea069b0 <col:9> 'int' 3
|   | `-IntegerLiteral 0x1553ea06a10 <col:15> 'int' 2
|   |-CompoundAssignOperator 0x1553ea06b20 <line:535:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea06ac8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea06ab0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea06a68 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea06a88 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea06b08 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea06ae8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea06c60 <line:538:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea06bf0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea06c48 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea06c30 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea06c10 <col:11> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea06d38 <line:539:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea06c80 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea06d20 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea06d00 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea06ce8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea06ca0 <col:12> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea06cc0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea06e10 <line:540:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea06db8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea06da0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea06d58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea06d78 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea06df8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea06dd8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea06ef8 <line:541:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea06ea0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea06e88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea06e40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea06e60 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea06ee0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea06ec0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea07050 <line:544:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea06fe0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea07038 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea07020 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea07000 <col:11> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea07128 <line:545:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea07070 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea07110 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea070f0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea070d8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea07090 <col:12> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea070b0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea07200 <line:546:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea071a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea07190 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea07148 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea07168 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea071e8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea071c8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea072d8 <line:547:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553ea07290 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea07278 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea07230 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea07250 <col:9> 'int' 4
|   | `-IntegerLiteral 0x1553ea072b0 <col:15> 'int' 2
|   |-BinaryOperator 0x1553ea073d8 <line:548:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea07368 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea07350 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea07308 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea07328 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553ea073c0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea073a8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea07388 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea07508 <line:551:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea07498 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea074f0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea074d8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea074b8 <col:11> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea075e0 <line:552:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea07528 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea075c8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea075a8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea07590 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea07548 <col:12> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea07568 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea076b8 <line:553:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea07660 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea07648 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea07600 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea07620 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553ea076a0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea07680 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea07790 <line:554:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553ea07748 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea07730 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea076e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea07708 <col:9> 'int' 5
|   | `-IntegerLiteral 0x1553ea07768 <col:15> 'int' 2
|   |-BinaryOperator 0x1553ea07890 <line:555:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea07820 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea07808 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea077c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea077e0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1553ea07878 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea07860 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea07840 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea07968 <line:556:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea07910 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea078f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea078b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea078d0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1553ea07950 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea07930 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea07aa8 <line:559:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea07a38 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea07a90 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea07a78 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea07a58 <col:11> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea07b80 <line:560:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea07ac8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea07b68 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea07b48 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea07b30 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea07ae8 <col:12> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea07b08 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea07c58 <line:561:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea07c00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea07be8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea07ba0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea07bc0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea07c40 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea07c20 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea07d40 <line:562:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea07ce8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea07cd0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea07c88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea07ca8 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553ea07d28 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea07d08 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea07e80 <line:565:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea07e10 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea07e68 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea07e50 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea07e30 <col:11> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea07f58 <line:566:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea07ea0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea07f40 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea07f20 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea07f08 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea07ec0 <col:12> 'limb':'int' lvalue Var 0x1553ea05370 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea07ee0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea08030 <line:567:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea07fd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea07fc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea07f78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea07f98 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1553ea08018 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea07ff8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea05478 'low' 'u64':'unsigned long long'
|   `-BinaryOperator 0x1553ea08130 <line:568:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1553ea080c0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553ea080a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553ea08060 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea05120 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553ea08080 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x1553ea08118 <col:14> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x1553ea08100 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x1553ea080e0 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea05400 'high' 'u64':'unsigned long long'
|-FunctionDecl 0x1553ea08468 <line:578:1, line:583:1> line:578:13 used felem_square 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1553ea082f0 <col:26, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553ea08368 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553ea088a8 <line:579:1, line:583:1>
|   |-DeclStmt 0x1553ea085f8 <line:580:5, col:17>
|   | `-VarDecl 0x1553ea08590 <col:5, col:16> col:9 used small 'u64 [4]'
|   |-CallExpr 0x1553ea08700 <line:581:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553ea086e8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ea08610 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ea08730 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ea08630 <col:18> 'u64 [4]' lvalue Var 0x1553ea08590 'small' 'u64 [4]'
|   | `-ImplicitCastExpr 0x1553ea08748 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea08668 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x1553ea08368 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x1553ea08830 <line:582:5, col:33> 'void'
|     |-ImplicitCastExpr 0x1553ea08818 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553ea08760 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea05298 'smallfelem_square' 'void (limb *, const u64 *)'
|     |-ImplicitCastExpr 0x1553ea08860 <col:23> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553ea08780 <col:23> 'limb *':'limb *' lvalue ParmVar 0x1553ea082f0 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1553ea08890 <col:28> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x1553ea08878 <col:28> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553ea087a0 <col:28> 'u64 [4]' lvalue Var 0x1553ea08590 'small' 'u64 [4]'
|-FunctionDecl 0x1553ea08b38 <line:593:1, line:694:1> line:593:13 used smallfelem_mul 'void (limb *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x1553ea088e0 <col:28, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553ea08958 <col:43, col:60> col:60 small1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1553ea089d0 <line:594:28, col:45> col:45 used small2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553ea0cbf8 <line:595:1, line:694:1>
|   |-DeclStmt 0x1553ea08c80 <line:596:5, col:11>
|   | `-VarDecl 0x1553ea08c18 <col:5, col:10> col:10 used a 'limb':'int'
|   |-DeclStmt 0x1553ea08da0 <line:597:5, col:18>
|   | |-VarDecl 0x1553ea08ca8 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x1553ea08d20 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea08ef8 <line:600:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea08e70 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea08ee0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea08ec8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea08ea8 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea09008 <line:601:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea08f18 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea08ff0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea08fd0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea08f98 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea08f50 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea08f70 <col:17> 'int' 64
|   |-BinaryOperator 0x1553ea090f8 <line:602:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea09088 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea09070 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea09028 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea09048 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553ea090e0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea090c8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea090a8 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea091e8 <line:603:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea09178 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea09160 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea09118 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea09138 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553ea091d0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea091b8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea09198 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea09318 <line:606:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea092a8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea09300 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea092e8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea092c8 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea093f0 <line:607:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea09338 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea093d8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea093b8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea093a0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea09358 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea09378 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea094c8 <line:608:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea09470 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea09458 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea09410 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea09430 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553ea094b0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea09490 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea095c8 <line:609:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea09558 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea09540 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea094f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea09518 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea095b0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea09598 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea09578 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea096f8 <line:612:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea09688 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea096e0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea096c8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea096a8 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea097d0 <line:613:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea09718 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea097b8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea09798 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea09780 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea09738 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea09758 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea098a8 <line:614:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea09850 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea09838 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea097f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea09810 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1553ea09890 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea09870 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea09990 <line:615:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea09938 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea09920 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea098d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea098f8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea09978 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea09958 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea09ad0 <line:618:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea09a60 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea09ab8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea09aa0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea09a80 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea09ba8 <line:619:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea09af0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea09b90 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea09b70 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea09b58 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea09b10 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea09b30 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea09c80 <line:620:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea09c28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea09c10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea09bc8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea09be8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea09c68 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea09c48 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea09d80 <line:621:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea09d10 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea09cf8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea09cb0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea09cd0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea09d68 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea09d50 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea09d30 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea09eb0 <line:624:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea09e40 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea09e98 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea09e80 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea09e60 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea09f88 <line:625:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea09ed0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea09f70 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea09f50 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea09f38 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea09ef0 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea09f10 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0a060 <line:626:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0a008 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea09ff0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea09fa8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea09fc8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea0a048 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0a028 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea0a148 <line:627:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0a0f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0a0d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0a090 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0a0b0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea0a130 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0a110 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0a288 <line:630:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0a218 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0a270 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0a258 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0a238 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0a360 <line:631:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0a2a8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0a348 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0a328 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0a310 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0a2c8 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0a2e8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0a438 <line:632:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0a3e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0a3c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0a380 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0a3a0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1553ea0a420 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0a400 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea0a520 <line:633:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0a4c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0a4b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0a468 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0a488 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea0a508 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0a4e8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0a660 <line:636:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0a5f0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0a648 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0a630 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0a610 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0a738 <line:637:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0a680 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0a720 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0a700 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0a6e8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0a6a0 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0a6c0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0a810 <line:638:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0a7b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0a7a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0a758 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0a778 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea0a7f8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0a7d8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0a910 <line:639:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea0a8a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0a888 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0a840 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0a860 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea0a8f8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0a8e0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0a8c0 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0aa40 <line:642:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0a9d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0aa28 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0aa10 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0a9f0 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0ab18 <line:643:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0aa60 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0ab00 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0aae0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0aac8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0aa80 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0aaa0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0abf0 <line:644:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0ab98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0ab80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0ab38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0ab58 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea0abd8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0abb8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea0acd8 <line:645:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0ac80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0ac68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0ac20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0ac40 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea0acc0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0aca0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0ae18 <line:648:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0ada8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0ae00 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0ade8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0adc8 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0aef0 <line:649:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0ae38 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0aed8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0aeb8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0aea0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0ae58 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0ae78 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0afe0 <line:650:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0af70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0af58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0af10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0af30 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea0afb0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0af90 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea0b0c8 <line:651:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0b070 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0b058 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0b010 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0b030 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea0b0b0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0b090 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0b208 <line:654:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0b198 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0b1f0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0b1d8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0b1b8 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0b2e0 <line:655:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0b228 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0b2c8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0b2a8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0b290 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0b248 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0b268 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0b3b8 <line:656:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0b360 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0b348 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0b300 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0b320 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1553ea0b3a0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0b380 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea0b4a0 <line:657:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0b448 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0b430 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0b3e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0b408 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea0b488 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0b468 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0b5e0 <line:660:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0b570 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0b5c8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0b5b0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0b590 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0b6b8 <line:661:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0b600 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0b6a0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0b680 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0b668 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0b620 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0b640 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0b790 <line:662:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0b738 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0b720 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0b6d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0b6f8 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea0b778 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0b758 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0b890 <line:663:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea0b820 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0b808 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0b7c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0b7e0 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553ea0b878 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0b860 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0b840 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0b9c0 <line:666:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0b950 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0b9a8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0b990 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0b970 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0ba98 <line:667:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0b9e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0ba80 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0ba60 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0ba48 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0ba00 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0ba20 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0bb70 <line:668:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0bb18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0bb00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0bab8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0bad8 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea0bb58 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0bb38 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea0bc58 <line:669:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0bc00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0bbe8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0bba0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0bbc0 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553ea0bc40 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0bc20 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0bd98 <line:672:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0bd28 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0bd80 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0bd68 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0bd48 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0be70 <line:673:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0bdb8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0be58 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0be38 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0be20 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0bdd8 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0bdf8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0bf48 <line:674:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0bef0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0bed8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0be90 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0beb0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1553ea0bf30 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0bf10 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea0c030 <line:675:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0bfd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0bfc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0bf78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0bf98 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553ea0c018 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0bff8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0c170 <line:678:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0c100 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0c158 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0c140 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0c120 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0c248 <line:679:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0c190 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0c230 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0c210 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0c1f8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0c1b0 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0c1d0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0c320 <line:680:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0c2c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0c2b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0c268 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0c288 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553ea0c308 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0c2e8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0c420 <line:681:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553ea0c3b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0c398 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0c350 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0c370 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1553ea0c408 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0c3f0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0c3d0 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0c550 <line:684:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0c4e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0c538 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0c520 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0c500 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0c628 <line:685:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0c570 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0c610 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0c5f0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0c5d8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0c590 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0c5b0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0c700 <line:686:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0c6a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0c690 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0c648 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0c668 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1553ea0c6e8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0c6c8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553ea0c7e8 <line:687:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0c790 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0c778 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0c730 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0c750 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1553ea0c7d0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0c7b0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553ea0c928 <line:690:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0c8b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0c910 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553ea0c8f8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ea0c8d8 <col:11> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |-BinaryOperator 0x1553ea0ca00 <line:691:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553ea0c948 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553ea0c9e8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1553ea0c9c8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1553ea0c9b0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ea0c968 <col:12> 'limb':'int' lvalue Var 0x1553ea08c18 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1553ea0c988 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1553ea0cad8 <line:692:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1553ea0ca80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553ea0ca68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ea0ca20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553ea0ca40 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1553ea0cac0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ea0caa0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553ea08d20 'low' 'u64':'unsigned long long'
|   `-BinaryOperator 0x1553ea0cbd8 <line:693:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1553ea0cb68 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553ea0cb50 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553ea0cb08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553ea088e0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553ea0cb28 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x1553ea0cbc0 <col:14> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x1553ea0cba8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x1553ea0cb88 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553ea08ca8 'high' 'u64':'unsigned long long'
|-FunctionDecl 0x1553eafae08 <line:704:1, line:710:1> line:704:13 used felem_mul 'void (limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x1553ea0ce28 <col:23, col:33> col:33 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553ea0cea0 <col:38, col:50> col:50 used in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1553ea0cf18 <col:55, col:67> col:67 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x1553eafb380 <line:705:1, line:710:1>
|   |-DeclStmt 0x1553eafafe0 <line:706:5, col:30>
|   | |-VarDecl 0x1553eafaee8 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x1553eafaf60 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1553eafb088 <line:707:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eafb070 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafaff8 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eafb0b8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafb018 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1553eafaee8 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eafb0d0 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eafb050 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1553ea0cea0 'in1' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eafb178 <line:708:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eafb160 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafb0e8 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eafb1a8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafb108 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1553eafaf60 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eafb1c0 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eafb140 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1553ea0cf18 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x1553eafb2d0 <line:709:5, col:39> 'void'
|     |-ImplicitCastExpr 0x1553eafb2b8 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eafb1d8 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x1553ea08b38 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|     |-ImplicitCastExpr 0x1553eafb308 <col:20> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eafb1f8 <col:20> 'limb *':'limb *' lvalue ParmVar 0x1553ea0ce28 'out' 'limb *':'limb *'
|     |-ImplicitCastExpr 0x1553eafb338 <col:25> 'const u64 *':'const u64 *' <NoOp>
|     | `-ImplicitCastExpr 0x1553eafb320 <col:25> 'u64 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x1553eafb218 <col:25> 'smallfelem':'u64 [4]' lvalue Var 0x1553eafaee8 'small1' 'smallfelem':'u64 [4]'
|     `-ImplicitCastExpr 0x1553eafb368 <col:33> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x1553eafb350 <col:33> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553eafb238 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x1553eafaf60 'small2' 'smallfelem':'u64 [4]'
|-FunctionDecl 0x1553eafb618 <line:720:1, line:726:1> line:720:13 used felem_small_mul 'void (limb *, const u64 *, const limb *)' static
| |-ParmVarDecl 0x1553eafb3c0 <col:29, col:39> col:39 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553eafb438 <col:44, col:61> col:61 used small1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1553eafb4b0 <line:721:29, col:41> col:41 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x1553eafb998 <line:722:1, line:726:1>
|   |-DeclStmt 0x1553eafb760 <line:723:5, col:22>
|   | `-VarDecl 0x1553eafb6f8 <col:5, col:16> col:16 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1553eafb808 <line:724:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eafb7f0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafb778 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eafb838 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafb798 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1553eafb6f8 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eafb850 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eafb7d0 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafb4b0 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x1553eafb900 <line:725:5, col:39> 'void'
|     |-ImplicitCastExpr 0x1553eafb8e8 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eafb868 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x1553ea08b38 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|     |-ImplicitCastExpr 0x1553eafb938 <col:20> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eafb888 <col:20> 'limb *':'limb *' lvalue ParmVar 0x1553eafb3c0 'out' 'limb *':'limb *'
|     |-ImplicitCastExpr 0x1553eafb950 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eafb8a8 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eafb438 'small1' 'const u64 *':'const u64 *'
|     `-ImplicitCastExpr 0x1553eafb980 <col:33> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x1553eafb968 <col:33> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553eafb8c8 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x1553eafb6f8 'small2' 'smallfelem':'u64 [4]'
|-VarDecl 0x1553eafb9d0 <line:732:1, line:733:53> line:732:20 used zero100 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x1553eafc490 <line:733:5, col:53> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x1553eafbd10 <line:728:22, col:78> 'int' '-'
|   | |-BinaryOperator 0x1553eafbc08 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x1553eafbb00 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x1553eafbae0 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1553eafba98 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1553eafba70 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1553eafba38 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x1553eafbab8 <col:36> 'int' 100
|   | | `-ParenExpr 0x1553eafbbe8 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x1553eafbbc8 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1553eafbb80 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1553eafbb58 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1553eafbb20 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x1553eafbba0 <col:57> 'int' 36
|   | `-ParenExpr 0x1553eafbcf0 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x1553eafbcd0 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1553eafbc88 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1553eafbc60 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1553eafbc28 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x1553eafbca8 <col:77> 'int' 4
|   |-ParenExpr 0x1553eafbdf8 <line:729:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x1553eafbdd8 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1553eafbd90 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1553eafbd68 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x1553eafbd30 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x1553eafbdb0 <col:31> 'int' 100
|   |-BinaryOperator 0x1553eafc0f0 <line:730:22, col:78> 'int' '+'
|   | |-BinaryOperator 0x1553eafbfe8 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x1553eafbee0 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x1553eafbec0 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1553eafbe78 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1553eafbe50 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1553eafbe18 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x1553eafbe98 <col:36> 'int' 100
|   | | `-ParenExpr 0x1553eafbfc8 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x1553eafbfa8 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1553eafbf60 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1553eafbf38 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1553eafbf00 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x1553eafbf80 <col:57> 'int' 36
|   | `-ParenExpr 0x1553eafc0d0 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x1553eafc0b0 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1553eafc068 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1553eafc040 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1553eafc008 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x1553eafc088 <col:77> 'int' 4
|   `-BinaryOperator 0x1553eafc3e8 <col:22, col:78> 'int' '+'
|     |-BinaryOperator 0x1553eafc2e0 <col:22, col:59> 'int' '-'
|     | |-ParenExpr 0x1553eafc1d8 <col:22, col:39> 'limb':'int'
|     | | `-BinaryOperator 0x1553eafc1b8 <col:23, col:36> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x1553eafc170 <col:23, col:31> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x1553eafc148 <col:24, col:30> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x1553eafc110 <col:30> 'int' 1
|     | |   `-IntegerLiteral 0x1553eafc190 <col:36> 'int' 100
|     | `-ParenExpr 0x1553eafc2c0 <col:43, col:59> 'limb':'int'
|     |   `-BinaryOperator 0x1553eafc2a0 <col:44, col:57> 'limb':'int' '<<'
|     |     |-ParenExpr 0x1553eafc258 <col:44, col:52> 'limb':'int'
|     |     | `-CStyleCastExpr 0x1553eafc230 <col:45, col:51> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x1553eafc1f8 <col:51> 'int' 1
|     |     `-IntegerLiteral 0x1553eafc278 <col:57> 'int' 36
|     `-ParenExpr 0x1553eafc3c8 <col:63, col:78> 'limb':'int'
|       `-BinaryOperator 0x1553eafc3a8 <col:64, col:77> 'limb':'int' '<<'
|         |-ParenExpr 0x1553eafc360 <col:64, col:72> 'limb':'int'
|         | `-CStyleCastExpr 0x1553eafc338 <col:65, col:71> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x1553eafc300 <col:71> 'int' 1
|         `-IntegerLiteral 0x1553eafc380 <col:77> 'int' 4
|-FunctionDecl 0x1553eafc678 <line:749:1, line:781:1> line:749:13 used felem_reduce_ 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1553eafc500 <col:27, col:33> col:33 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553eafc578 <col:38, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553eaf7fa0 <line:750:1, line:781:1>
|   |-CompoundAssignOperator 0x1553eaf6db0 <line:763:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eafcca8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eafcc90 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eafcc48 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eafcc68 <col:9> 'int' 1
|   | `-ParenExpr 0x1553eaf6d90 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1553eaf6d70 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1553eaf6d58 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553eafcd28 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553eafcd10 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1553eafccc8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1553eafcce8 <col:19> 'int' 4
|   |     `-IntegerLiteral 0x1553eaf6d30 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1553eaf6f60 <line:764:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eaf6e40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf6e28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf6de0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf6e00 <col:9> 'int' 3
|   | `-ParenExpr 0x1553eaf6f40 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1553eaf6f20 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1553eaf6f08 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553eaf6ec0 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553eaf6ea8 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1553eaf6e60 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1553eaf6e80 <col:19> 'int' 4
|   |     `-IntegerLiteral 0x1553eaf6ee0 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1553eaf7110 <line:767:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eaf6ff0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf6fd8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf6f90 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf6fb0 <col:9> 'int' 2
|   | `-ParenExpr 0x1553eaf70f0 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1553eaf70d0 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1553eaf70b8 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553eaf7070 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553eaf7058 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1553eaf7010 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1553eaf7030 <col:19> 'int' 5
|   |     `-IntegerLiteral 0x1553eaf7090 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1553eaf7258 <line:770:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eaf71a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf7188 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf7140 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf7160 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553eaf7240 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553eaf7220 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553eaf7208 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553eaf71c0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553eaf71e0 <col:18> 'int' 6
|   |-CompoundAssignOperator 0x1553eaf7408 <line:771:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eaf72e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf72d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf7288 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf72a8 <col:9> 'int' 0
|   | `-ParenExpr 0x1553eaf73e8 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1553eaf73c8 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1553eaf73b0 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553eaf7368 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553eaf7350 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1553eaf7308 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1553eaf7328 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x1553eaf7388 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1553eaf75b8 <line:772:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eaf7498 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf7480 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf7438 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf7458 <col:9> 'int' 1
|   | `-ParenExpr 0x1553eaf7598 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1553eaf7578 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1553eaf7560 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553eaf7518 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553eaf7500 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1553eaf74b8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1553eaf74d8 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x1553eaf7538 <col:25> 'int' 33
|   |-CompoundAssignOperator 0x1553eaf7768 <line:773:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eaf7648 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf7630 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf75e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf7608 <col:9> 'int' 2
|   | `-ParenExpr 0x1553eaf7748 <col:15, col:25> 'int'
|   |   `-BinaryOperator 0x1553eaf7728 <col:16, col:24> 'int' '*'
|   |     |-ImplicitCastExpr 0x1553eaf7710 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553eaf76c8 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553eaf76b0 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1553eaf7668 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1553eaf7688 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x1553eaf76e8 <col:24> 'int' 2
|   |-CompoundAssignOperator 0x1553eaf7918 <line:774:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eaf77f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf77e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf7798 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf77b8 <col:9> 'int' 3
|   | `-ParenExpr 0x1553eaf78f8 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1553eaf78d8 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1553eaf78c0 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553eaf7878 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553eaf7860 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1553eaf7818 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1553eaf7838 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x1553eaf7898 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1553eaf7a60 <line:777:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eaf79a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf7990 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf7948 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf7968 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1553eaf7a48 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1553eaf7a28 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1553eaf7a10 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553eaf79c8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1553eaf79e8 <col:18> 'int' 7
|   |-CompoundAssignOperator 0x1553eaf7c10 <line:778:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eaf7af0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf7ad8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf7a90 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf7ab0 <col:9> 'int' 0
|   | `-ParenExpr 0x1553eaf7bf0 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1553eaf7bd0 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1553eaf7bb8 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553eaf7b70 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553eaf7b58 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1553eaf7b10 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1553eaf7b30 <col:19> 'int' 7
|   |     `-IntegerLiteral 0x1553eaf7b90 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1553eaf7dc0 <line:779:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1553eaf7ca0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf7c88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf7c40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf7c60 <col:9> 'int' 2
|   | `-ParenExpr 0x1553eaf7da0 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1553eaf7d80 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1553eaf7d68 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1553eaf7d20 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1553eaf7d08 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1553eaf7cc0 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1553eaf7ce0 <col:19> 'int' 7
|   |     `-IntegerLiteral 0x1553eaf7d40 <col:25> 'int' 33
|   `-CompoundAssignOperator 0x1553eaf7f70 <line:780:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1553eaf7e50 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1553eaf7e38 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553eaf7df0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eafc500 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1553eaf7e10 <col:9> 'int' 3
|     `-ParenExpr 0x1553eaf7f50 <col:15, col:25> 'int'
|       `-BinaryOperator 0x1553eaf7f30 <col:16, col:24> 'int' '*'
|         |-ImplicitCastExpr 0x1553eaf7f18 <col:16, col:20> 'limb':'int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x1553eaf7ed0 <col:16, col:20> 'const limb':'const int' lvalue
|         |   |-ImplicitCastExpr 0x1553eaf7eb8 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|         |   | `-DeclRefExpr 0x1553eaf7e70 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1553eafc578 'in' 'const limb *':'const limb *'
|         |   `-IntegerLiteral 0x1553eaf7e90 <col:19> 'int' 7
|         `-IntegerLiteral 0x1553eaf7ef0 <col:24> 'int' 3
|-FunctionDecl 0x1553eaf8160 <line:792:1, line:812:1> line:792:13 used felem_reduce 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1553eaf8020 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553eaf8098 <col:37, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553eaf8b60 <line:793:1, line:812:1>
|   |-BinaryOperator 0x1553eaf83f8 <line:794:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553eaf8288 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf8270 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf8228 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eaf8020 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf8248 <col:9> 'int' 0
|   | `-BinaryOperator 0x1553eaf83d8 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1553eaf83a8 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1553eaf8308 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1553eaf82f0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553eaf82a8 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553eafb9d0 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1553eaf82c8 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x1553eaf83c0 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaf8388 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1553eaf8370 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553eaf8328 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf8098 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1553eaf8348 <col:30> 'int' 0
|   |-BinaryOperator 0x1553eaf8630 <line:795:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553eaf84c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf84a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf8460 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eaf8020 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf8480 <col:9> 'int' 1
|   | `-BinaryOperator 0x1553eaf8610 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1553eaf85e0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1553eaf8540 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1553eaf8528 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553eaf84e0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553eafb9d0 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1553eaf8500 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x1553eaf85f8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaf85c0 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1553eaf85a8 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553eaf8560 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf8098 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1553eaf8580 <col:30> 'int' 1
|   |-BinaryOperator 0x1553eaf8820 <line:796:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553eaf86b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf8698 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf8650 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eaf8020 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf8670 <col:9> 'int' 2
|   | `-BinaryOperator 0x1553eaf8800 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1553eaf87d0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1553eaf8730 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1553eaf8718 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553eaf86d0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553eafb9d0 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1553eaf86f0 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x1553eaf87e8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaf87b0 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1553eaf8798 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553eaf8750 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf8098 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1553eaf8770 <col:30> 'int' 2
|   |-BinaryOperator 0x1553eaf8a10 <line:797:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553eaf88a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf8888 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf8840 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eaf8020 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf8860 <col:9> 'int' 3
|   | `-BinaryOperator 0x1553eaf89f0 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1553eaf89c0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1553eaf8920 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1553eaf8908 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553eaf88c0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553eafb9d0 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1553eaf88e0 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x1553eaf89d8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaf89a0 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1553eaf8988 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553eaf8940 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf8098 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1553eaf8960 <col:30> 'int' 3
|   `-CallExpr 0x1553eaf8b00 <line:799:5, col:26> 'void'
|     |-ImplicitCastExpr 0x1553eaf8ae8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eaf8a30 <col:5> 'void (limb *, const limb *)' Function 0x1553eafc678 'felem_reduce_' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1553eaf8b30 <col:19> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eaf8a50 <col:19> 'limb *':'limb *' lvalue ParmVar 0x1553eaf8020 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1553eaf8b48 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|       `-DeclRefExpr 0x1553eaf8a70 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf8098 'in' 'const limb *':'const limb *'
|-FunctionDecl 0x1553eaf8d40 <line:821:1, line:841:1> line:821:13 used felem_reduce_zero105 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1553eaf8ba8 <col:34, col:40> col:40 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553eaf8c20 <col:45, col:61> col:61 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553eaf96a0 <line:822:1, line:841:1>
|   |-BinaryOperator 0x1553eaf8fd8 <line:823:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553eaf8e68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf8e50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf8e08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eaf8ba8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf8e28 <col:9> 'int' 0
|   | `-BinaryOperator 0x1553eaf8fb8 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1553eaf8f88 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1553eaf8ee8 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1553eaf8ed0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553eaf8e88 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1553eaf8ea8 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x1553eaf8fa0 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaf8f68 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1553eaf8f50 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553eaf8f08 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf8c20 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1553eaf8f28 <col:30> 'int' 0
|   |-BinaryOperator 0x1553eaf91c8 <line:824:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553eaf9058 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf9040 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf8ff8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eaf8ba8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf9018 <col:9> 'int' 1
|   | `-BinaryOperator 0x1553eaf91a8 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1553eaf9178 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1553eaf90d8 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1553eaf90c0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553eaf9078 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1553eaf9098 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x1553eaf9190 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaf9158 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1553eaf9140 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553eaf90f8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf8c20 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1553eaf9118 <col:30> 'int' 1
|   |-BinaryOperator 0x1553eaf93b8 <line:825:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553eaf9248 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf9230 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf91e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eaf8ba8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf9208 <col:9> 'int' 2
|   | `-BinaryOperator 0x1553eaf9398 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1553eaf9368 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1553eaf92c8 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1553eaf92b0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553eaf9268 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1553eaf9288 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x1553eaf9380 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaf9348 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1553eaf9330 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553eaf92e8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf8c20 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1553eaf9308 <col:30> 'int' 2
|   |-BinaryOperator 0x1553eaf95a8 <line:826:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1553eaf9438 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1553eaf9420 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf93d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1553eaf8ba8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1553eaf93f8 <col:9> 'int' 3
|   | `-BinaryOperator 0x1553eaf9588 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1553eaf9558 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1553eaf94b8 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1553eaf94a0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553eaf9458 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1553e9f9f70 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1553eaf9478 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x1553eaf9570 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaf9538 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1553eaf9520 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553eaf94d8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf8c20 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1553eaf94f8 <col:30> 'int' 3
|   `-CallExpr 0x1553eaf9640 <line:828:5, col:26> 'void'
|     |-ImplicitCastExpr 0x1553eaf9628 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eaf95c8 <col:5> 'void (limb *, const limb *)' Function 0x1553eafc678 'felem_reduce_' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1553eaf9670 <col:19> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eaf95e8 <col:19> 'limb *':'limb *' lvalue ParmVar 0x1553eaf8ba8 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1553eaf9688 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|       `-DeclRefExpr 0x1553eaf9608 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf8c20 'in' 'const limb *':'const limb *'
|-FunctionDecl 0x1553eaf9948 <line:847:1, line:853:1> line:847:13 used subtract_u64 'void (u64 *, u64 *, u64)' static
| |-ParmVarDecl 0x1553eaf96e8 <col:26, col:31> col:31 used result 'u64 *'
| |-ParmVarDecl 0x1553eaf9760 <col:39, col:44> col:44 used carry 'u64 *'
| |-ParmVarDecl 0x1553eaf97d8 <col:51, col:55> col:55 used v 'u64':'unsigned long long'
| `-CompoundStmt 0x1553eaf9b28 <line:848:1, line:853:1>
|-FunctionDecl 0x1553eaf9c88 <line:859:1, line:920:1> line:859:13 used felem_contract 'void (u64 *, const limb *)' static
| |-ParmVarDecl 0x1553eaf9b48 <col:28, col:39> col:39 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eaf9bc0 <col:44, col:56> col:56 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553eaedf28 <line:860:1, line:920:1>
|   |-DeclStmt 0x1553eaf9dd0 <line:861:5, col:15>
|   | `-VarDecl 0x1553eaf9d68 <col:5, col:14> col:14 used i 'unsigned int'
|   |-DeclStmt 0x1553eaf9ff0 <line:862:5, col:48>
|   | |-VarDecl 0x1553eaf9df8 <col:5, col:28> col:9 used all_equal_so_far 'u64':'unsigned long long' cinit
|   | | `-ImplicitCastExpr 0x1553eaf9e88 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eaf9e60 <col:28> 'int' 0
|   | |-VarDecl 0x1553eaf9eb0 <col:5, col:40> col:31 used result 'u64':'unsigned long long' cinit
|   | | `-ImplicitCastExpr 0x1553eaf9f40 <col:40> 'u64':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eaf9f18 <col:40> 'int' 0
|   | `-VarDecl 0x1553eaf9f68 <col:5, col:43> col:43 used carry 'u64':'unsigned long long'
|   |-CallExpr 0x1553eafa080 <line:864:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1553eafa068 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafa008 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eafa0b0 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eafa028 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1553eafa0c8 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eafa048 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaf9bc0 'in' 'const limb *':'const limb *'
|   |-UnaryOperator 0x1553eafa118 <line:867:5, col:21> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x1553eafa0e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eaf9df8 'all_equal_so_far' 'u64':'unsigned long long'
|   |-ForStmt 0x1553eafacb8 <line:874:5, line:898:5>
|   | |-BinaryOperator 0x1553eafa1a8 <line:874:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1553eafa130 <col:10> 'unsigned int' lvalue Var 0x1553eaf9d68 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eafa190 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eafa168 <col:14> 'int' 3
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553eafa240 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1553eafa210 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eafa1c8 <col:17> 'unsigned int' lvalue Var 0x1553eaf9d68 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eafa228 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eafa1e8 <col:21> 'int' 4
|   | |-UnaryOperator 0x1553eafa280 <col:24, col:25> 'unsigned int' postfix '--'
|   | | `-DeclRefExpr 0x1553eafa260 <col:24> 'unsigned int' lvalue Var 0x1553eaf9d68 'i' 'unsigned int'
|   | `-CompoundStmt 0x1553eafac50 <col:29, line:898:5>
|   |   |-DeclStmt 0x1553eafa310 <line:875:9, col:18>
|   |   | `-VarDecl 0x1553eafa2a8 <col:9, col:13> col:13 used equal 'u64':'unsigned long long'
|   |   |-BinaryOperator 0x1553eafa550 <line:887:9, col:34> 'u64':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x1553eafa3a8 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1553eafa530 <col:17, col:34> 'unsigned long long' '^'
|   |   |   |-ImplicitCastExpr 0x1553eafa500 <col:17, col:25> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x1553eafa450 <col:17, col:25> 'const u64':'const unsigned long long' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1553eafa420 <col:17> 'const u64 *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1553eafa3e0 <col:17> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |   |   |   `-ImplicitCastExpr 0x1553eafa438 <col:24> 'unsigned int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x1553eafa400 <col:24> 'unsigned int' lvalue Var 0x1553eaf9d68 'i' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1553eafa518 <col:29, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x1553eafa4e0 <col:29, col:34> 'u64':'unsigned long long' lvalue
|   |   |       |-ImplicitCastExpr 0x1553eafa4b0 <col:29> 'u64 *':'u64 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x1553eafa470 <col:29> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   |   |       `-ImplicitCastExpr 0x1553eafa4c8 <col:33> 'unsigned int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1553eafa490 <col:33> 'unsigned int' lvalue Var 0x1553eaf9d68 'i' 'unsigned int'
|   |   |-UnaryOperator 0x1553eafa590 <line:888:9, col:14> 'u64':'unsigned long long' postfix '--'
|   |   | `-DeclRefExpr 0x1553eafa570 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   |-CompoundAssignOperator 0x1553eafa648 <line:889:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1553eafa5a8 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1553eafa628 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1553eafa610 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1553eafa5c8 <col:18> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1553eafa5e8 <col:27> 'int' 32
|   |   |-CompoundAssignOperator 0x1553eafa718 <line:890:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1553eafa678 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1553eafa6f8 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1553eafa6e0 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1553eafa698 <col:18> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1553eafa6b8 <col:27> 'int' 16
|   |   |-CompoundAssignOperator 0x1553eafa7e8 <line:891:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1553eafa748 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1553eafa7c8 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1553eafa7b0 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1553eafa768 <col:18> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1553eafa788 <col:27> 'int' 8
|   |   |-CompoundAssignOperator 0x1553eafa8b8 <line:892:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1553eafa818 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1553eafa898 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1553eafa880 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1553eafa838 <col:18> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1553eafa858 <col:27> 'int' 4
|   |   |-CompoundAssignOperator 0x1553eafa988 <line:893:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1553eafa8e8 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1553eafa968 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1553eafa950 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1553eafa908 <col:18> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1553eafa928 <col:27> 'int' 2
|   |   |-CompoundAssignOperator 0x1553eafaa58 <line:894:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1553eafa9b8 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1553eafaa38 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1553eafaa20 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1553eafa9d8 <col:18> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1553eafa9f8 <col:27> 'int' 1
|   |   |-BinaryOperator 0x1553eafaba8 <line:895:9, col:33> 'u64':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x1553eafaa88 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1553eafab88 <col:17, col:33> 'unsigned long long' '-'
|   |   |   |-ImplicitCastExpr 0x1553eafab70 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | `-IntegerLiteral 0x1553eafaaa8 <col:17> 'int' 0
|   |   |   `-ParenExpr 0x1553eafab50 <col:21, col:33> 'u64':'unsigned long long'
|   |   |     `-BinaryOperator 0x1553eafab30 <col:22, col:31> 'u64':'unsigned long long' '>>'
|   |   |       |-ImplicitCastExpr 0x1553eafab18 <col:22> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x1553eafaad0 <col:22> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |   |       `-IntegerLiteral 0x1553eafaaf0 <col:31> 'int' 63
|   |   `-CompoundAssignOperator 0x1553eafac20 <line:897:9, col:29> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x1553eafabc8 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553eaf9df8 'all_equal_so_far' 'u64':'unsigned long long'
|   |     `-ImplicitCastExpr 0x1553eafac08 <col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1553eafabe8 <col:29> 'u64':'unsigned long long' lvalue Var 0x1553eafa2a8 'equal' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553eaeccf8 <line:904:5, col:15> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafacf0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eaf9eb0 'result' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553eaecce0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eafad10 <col:15> 'u64':'unsigned long long' lvalue Var 0x1553eaf9df8 'all_equal_so_far' 'u64':'unsigned long long'
|   |-CallExpr 0x1553eaecf90 <line:907:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x1553eaecf78 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaecd28 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1553eaf9948 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1553eaecdc8 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1553eaecda8 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1553eaecd90 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1553eaecd48 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1553eaecd68 <col:23> 'int' 0
|   | |-UnaryOperator 0x1553eaece18 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1553eaecde0 <col:28> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eaecf00 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1553eaeced0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eaece30 <col:35> 'u64':'unsigned long long' lvalue Var 0x1553eaf9eb0 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1553eaecee8 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaeceb0 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1553eaece98 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553eaece50 <col:44> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1553eaece70 <col:51> 'int' 0
|   |-CallExpr 0x1553eaed0f0 <line:908:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1553eaed0d8 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaecfc8 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1553eaf9948 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1553eaed068 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1553eaed048 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1553eaed030 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1553eaecfe8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1553eaed008 <col:23> 'int' 1
|   | |-UnaryOperator 0x1553eaed0a0 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1553eaed080 <col:28> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553eaed128 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaed0b8 <col:35> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x1553eaed268 <line:909:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1553eaed250 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaed140 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1553eaf9948 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1553eaed1e0 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1553eaed1c0 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1553eaed1a8 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1553eaed160 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1553eaed180 <col:23> 'int' 2
|   | |-UnaryOperator 0x1553eaed218 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1553eaed1f8 <col:28> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553eaed2a0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaed230 <col:35> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x1553eaed3e0 <line:910:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1553eaed3c8 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaed2b8 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1553eaf9948 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1553eaed358 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1553eaed338 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1553eaed320 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1553eaed2d8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1553eaed2f8 <col:23> 'int' 3
|   | |-UnaryOperator 0x1553eaed390 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1553eaed370 <col:28> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553eaed418 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaed3a8 <col:35> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x1553eaed628 <line:912:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x1553eaed610 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaed430 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1553eaf9948 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1553eaed4d0 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1553eaed4b0 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1553eaed498 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1553eaed450 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1553eaed470 <col:23> 'int' 1
|   | |-UnaryOperator 0x1553eaed508 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1553eaed4e8 <col:28> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eaed5f0 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1553eaed5c0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eaed520 <col:35> 'u64':'unsigned long long' lvalue Var 0x1553eaf9eb0 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1553eaed5d8 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaed5a0 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1553eaed588 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553eaed540 <col:44> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1553eaed560 <col:51> 'int' 1
|   |-CallExpr 0x1553eaed788 <line:913:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1553eaed770 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaed660 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1553eaf9948 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1553eaed700 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1553eaed6e0 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1553eaed6c8 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1553eaed680 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1553eaed6a0 <col:23> 'int' 2
|   | |-UnaryOperator 0x1553eaed738 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1553eaed718 <col:28> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553eaed7c0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaed750 <col:35> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x1553eaed900 <line:914:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1553eaed8e8 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaed7d8 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1553eaf9948 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1553eaed878 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1553eaed858 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1553eaed840 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1553eaed7f8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1553eaed818 <col:23> 'int' 3
|   | |-UnaryOperator 0x1553eaed8b0 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1553eaed890 <col:28> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553eaed938 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaed8c8 <col:35> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x1553eaedb48 <line:916:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x1553eaedb30 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaed950 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1553eaf9948 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1553eaed9f0 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1553eaed9d0 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1553eaed9b8 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1553eaed970 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1553eaed990 <col:23> 'int' 2
|   | |-UnaryOperator 0x1553eaeda28 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1553eaeda08 <col:28> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eaedb10 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1553eaedae0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eaeda40 <col:35> 'u64':'unsigned long long' lvalue Var 0x1553eaf9eb0 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1553eaedaf8 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1553eaedac0 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1553eaedaa8 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553eaeda60 <col:44> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1553eaeda80 <col:51> 'int' 2
|   |-CallExpr 0x1553eaedca8 <line:917:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1553eaedc90 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaedb80 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1553eaf9948 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1553eaedc20 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1553eaedc00 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1553eaedbe8 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1553eaedba0 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1553eaedbc0 <col:23> 'int' 3
|   | |-UnaryOperator 0x1553eaedc58 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1553eaedc38 <col:28> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553eaedce0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaedc70 <col:35> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|   `-CallExpr 0x1553eaedef0 <line:919:5, col:53> 'void'
|     |-ImplicitCastExpr 0x1553eaeded8 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eaedcf8 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1553eaf9948 'subtract_u64' 'void (u64 *, u64 *, u64)'
|     |-UnaryOperator 0x1553eaedd98 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x1553eaedd78 <col:19, col:24> 'u64':'unsigned long long' lvalue
|     |   |-ImplicitCastExpr 0x1553eaedd60 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x1553eaedd18 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf9b48 'out' 'u64 *':'u64 *'
|     |   `-IntegerLiteral 0x1553eaedd38 <col:23> 'int' 3
|     |-UnaryOperator 0x1553eaeddd0 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|     | `-DeclRefExpr 0x1553eaeddb0 <col:28> 'u64':'unsigned long long' lvalue Var 0x1553eaf9f68 'carry' 'u64':'unsigned long long'
|     `-BinaryOperator 0x1553eaedeb8 <col:35, col:52> 'unsigned long long' '&'
|       |-ImplicitCastExpr 0x1553eaede88 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1553eaedde8 <col:35> 'u64':'unsigned long long' lvalue Var 0x1553eaf9eb0 'result' 'u64':'unsigned long long'
|       `-ImplicitCastExpr 0x1553eaedea0 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1553eaede68 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|           |-ImplicitCastExpr 0x1553eaede50 <col:44> 'const u64 *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x1553eaede08 <col:44> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|           `-IntegerLiteral 0x1553eaede28 <col:51> 'int' 3
|-FunctionDecl 0x1553eaee108 <line:922:1, line:930:1> line:922:13 used smallfelem_square_contract 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x1553eaedfc8 <col:40, col:51> col:51 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eaee040 <col:56, col:73> col:73 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553eaee5d8 <line:923:1, line:930:1>
|   |-DeclStmt 0x1553eaee248 <line:924:5, col:22>
|   | `-VarDecl 0x1553eaee1e0 <col:5, col:15> col:15 used longtmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x1553eaee2d8 <line:925:5, col:14>
|   | `-VarDecl 0x1553eaee270 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x1553eaee380 <line:927:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1553eaee368 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaee2f0 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea05298 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eaee3b0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaee310 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1553eaee1e0 'longtmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaee3c8 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaee348 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eaee040 'in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1553eaee470 <line:928:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553eaee458 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaee3e0 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaee4a0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaee400 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaee270 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaee4d0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaee4b8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaee438 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1553eaee1e0 'longtmp' 'longfelem':'limb [8]'
|   `-CallExpr 0x1553eaee560 <line:929:5, col:28> 'void'
|     |-ImplicitCastExpr 0x1553eaee548 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eaee4e8 <col:5> 'void (u64 *, const limb *)' Function 0x1553eaf9c88 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x1553eaee590 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eaee508 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaedfc8 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x1553eaee5c0 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1553eaee5a8 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553eaee528 <col:25> 'felem':'limb [4]' lvalue Var 0x1553eaee270 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x1553eaee878 <line:932:1, line:941:1> line:932:13 used smallfelem_mul_contract 'void (u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x1553eaee620 <col:37, col:48> col:48 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eaee698 <col:53, col:70> col:70 used in1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1553eaee710 <line:933:37, col:54> col:54 used in2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553eafce10 <line:934:1, line:941:1>
|   |-DeclStmt 0x1553eaee9c0 <line:935:5, col:22>
|   | `-VarDecl 0x1553eaee958 <col:5, col:15> col:15 used longtmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x1553eaeea50 <line:936:5, col:14>
|   | `-VarDecl 0x1553eaee9e8 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x1553eaeeb18 <line:938:5, col:37> 'void'
|   | |-ImplicitCastExpr 0x1553eaeeb00 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaeea68 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x1553ea08b38 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eaeeb50 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaeea88 <col:20> 'longfelem':'limb [8]' lvalue Var 0x1553eaee958 'longtmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaeeb68 <col:29> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eaeeac0 <col:29> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eaee698 'in1' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1553eaeeb80 <col:34> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaeeae0 <col:34> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eaee710 'in2' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1553eaeec28 <line:939:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553eaeec10 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaeeb98 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaeec58 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaeebb8 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaee9e8 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaeec88 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaeec70 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaeebf0 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1553eaee958 'longtmp' 'longfelem':'limb [8]'
|   `-CallExpr 0x1553eafcd98 <line:940:5, col:28> 'void'
|     |-ImplicitCastExpr 0x1553eafcd80 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eaeeca0 <col:5> 'void (u64 *, const limb *)' Function 0x1553eaf9c88 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x1553eafcdc8 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eaeecc0 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaee620 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x1553eafcdf8 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1553eafcde0 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553eafcd60 <col:25> 'felem':'limb [4]' lvalue Var 0x1553eaee9e8 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x1553eafcf68 <line:949:1, line:981:1> line:949:13 used smallfelem_is_zero 'limb (const u64 *)' static
| |-ParmVarDecl 0x1553eafce58 <col:32, col:49> col:49 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553eafea78 <line:950:1, line:981:1>
|   |-DeclStmt 0x1553eafd0a0 <line:951:5, col:16>
|   | `-VarDecl 0x1553eafd038 <col:5, col:10> col:10 used result 'limb':'int'
|   |-DeclStmt 0x1553eafd130 <line:952:5, col:13>
|   | `-VarDecl 0x1553eafd0c8 <col:5, col:9> col:9 used is_p 'u64':'unsigned long long'
|   |-DeclStmt 0x1553eafd480 <line:954:5, col:60>
|   | `-VarDecl 0x1553eafd158 <col:5, col:59> col:9 used is_zero 'u64':'unsigned long long' cinit
|   |   `-BinaryOperator 0x1553eafd460 <col:19, col:59> 'unsigned long long' '|'
|   |     |-BinaryOperator 0x1553eafd3a8 <col:19, col:48> 'unsigned long long' '|'
|   |     | |-BinaryOperator 0x1553eafd2f0 <col:19, col:37> 'unsigned long long' '|'
|   |     | | |-ImplicitCastExpr 0x1553eafd2c0 <col:19, col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |     | | | `-ArraySubscriptExpr 0x1553eafd220 <col:19, col:26> 'const u64':'const unsigned long long' lvalue
|   |     | | |   |-ImplicitCastExpr 0x1553eafd208 <col:19> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x1553eafd1c0 <col:19> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eafce58 'small' 'const u64 *':'const u64 *'
|   |     | | |   `-IntegerLiteral 0x1553eafd1e0 <col:25> 'int' 0
|   |     | | `-ImplicitCastExpr 0x1553eafd2d8 <col:30, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x1553eafd2a0 <col:30, col:37> 'const u64':'const unsigned long long' lvalue
|   |     | |     |-ImplicitCastExpr 0x1553eafd288 <col:30> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x1553eafd240 <col:30> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eafce58 'small' 'const u64 *':'const u64 *'
|   |     | |     `-IntegerLiteral 0x1553eafd260 <col:36> 'int' 1
|   |     | `-ImplicitCastExpr 0x1553eafd390 <col:41, col:48> 'u64':'unsigned long long' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1553eafd370 <col:41, col:48> 'const u64':'const unsigned long long' lvalue
|   |     |     |-ImplicitCastExpr 0x1553eafd358 <col:41> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x1553eafd310 <col:41> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eafce58 'small' 'const u64 *':'const u64 *'
|   |     |     `-IntegerLiteral 0x1553eafd330 <col:47> 'int' 2
|   |     `-ImplicitCastExpr 0x1553eafd448 <col:52, col:59> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x1553eafd428 <col:52, col:59> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x1553eafd410 <col:52> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1553eafd3c8 <col:52> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eafce58 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x1553eafd3e8 <col:58> 'int' 3
|   |-UnaryOperator 0x1553eafd4d0 <line:955:5, col:12> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x1553eafd498 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553eafd588 <line:956:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafd4e8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafd568 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafd550 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafd508 <col:16> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafd528 <col:27> 'int' 32
|   |-CompoundAssignOperator 0x1553eafd658 <line:957:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafd5b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafd638 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafd620 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafd5d8 <col:16> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafd5f8 <col:27> 'int' 16
|   |-CompoundAssignOperator 0x1553eafd728 <line:958:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafd688 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafd708 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafd6f0 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafd6a8 <col:16> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafd6c8 <col:27> 'int' 8
|   |-CompoundAssignOperator 0x1553eafd7f8 <line:959:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafd758 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafd7d8 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafd7c0 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafd778 <col:16> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafd798 <col:27> 'int' 4
|   |-CompoundAssignOperator 0x1553eafd8c8 <line:960:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafd828 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafd8a8 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafd890 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafd848 <col:16> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafd868 <col:27> 'int' 2
|   |-CompoundAssignOperator 0x1553eafd998 <line:961:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafd8f8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafd978 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafd960 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafd918 <col:16> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafd938 <col:27> 'int' 1
|   |-BinaryOperator 0x1553eafdae8 <line:962:5, col:33> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553eafd9c8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafdac8 <col:15, col:33> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1553eafdab0 <col:15> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1553eafd9e8 <col:15> 'int' 0
|   |   `-ParenExpr 0x1553eafda90 <col:19, col:33> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x1553eafda70 <col:20, col:31> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x1553eafda58 <col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553eafda10 <col:20> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x1553eafda30 <col:31> 'int' 63
|   |-BinaryOperator 0x1553eafe160 <line:964:5, line:966:55> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553eafdb08 <line:964:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafe140 <col:12, line:966:55> 'unsigned long long' '|'
|   |   |-BinaryOperator 0x1553eafdfb0 <line:964:12, line:966:30> 'unsigned long long' '|'
|   |   | |-BinaryOperator 0x1553eafde20 <line:964:12, line:965:30> 'unsigned long long' '|'
|   |   | | |-ParenExpr 0x1553eafdc90 <line:964:12, col:33> 'unsigned long long'
|   |   | | | `-BinaryOperator 0x1553eafdc70 <col:13, col:32> 'unsigned long long' '^'
|   |   | | |   |-ImplicitCastExpr 0x1553eafdc40 <col:13, col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |   | | |   | `-ArraySubscriptExpr 0x1553eafdba0 <col:13, col:20> 'const u64':'const unsigned long long' lvalue
|   |   | | |   |   |-ImplicitCastExpr 0x1553eafdb88 <col:13> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   | | |   |   | `-DeclRefExpr 0x1553eafdb40 <col:13> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eafce58 'small' 'const u64 *':'const u64 *'
|   |   | | |   |   `-IntegerLiteral 0x1553eafdb60 <col:19> 'int' 0
|   |   | | |   `-ImplicitCastExpr 0x1553eafdc58 <col:24, col:32> 'u64':'unsigned long long' <LValueToRValue>
|   |   | | |     `-ArraySubscriptExpr 0x1553eafdc20 <col:24, col:32> 'const u64':'const unsigned long long' lvalue
|   |   | | |       |-ImplicitCastExpr 0x1553eafdc08 <col:24> 'const u64 *' <ArrayToPointerDecay>
|   |   | | |       | `-DeclRefExpr 0x1553eafdbc0 <col:24> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |   | | |       `-IntegerLiteral 0x1553eafdbe0 <col:31> 'int' 0
|   |   | | `-ParenExpr 0x1553eafde00 <line:965:9, col:30> 'unsigned long long'
|   |   | |   `-BinaryOperator 0x1553eafdde0 <col:10, col:29> 'unsigned long long' '^'
|   |   | |     |-ImplicitCastExpr 0x1553eafddb0 <col:10, col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |   | |     | `-ArraySubscriptExpr 0x1553eafdd10 <col:10, col:17> 'const u64':'const unsigned long long' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1553eafdcf8 <col:10> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   | |     |   | `-DeclRefExpr 0x1553eafdcb0 <col:10> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eafce58 'small' 'const u64 *':'const u64 *'
|   |   | |     |   `-IntegerLiteral 0x1553eafdcd0 <col:16> 'int' 1
|   |   | |     `-ImplicitCastExpr 0x1553eafddc8 <col:21, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   | |       `-ArraySubscriptExpr 0x1553eafdd90 <col:21, col:29> 'const u64':'const unsigned long long' lvalue
|   |   | |         |-ImplicitCastExpr 0x1553eafdd78 <col:21> 'const u64 *' <ArrayToPointerDecay>
|   |   | |         | `-DeclRefExpr 0x1553eafdd30 <col:21> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |   | |         `-IntegerLiteral 0x1553eafdd50 <col:28> 'int' 1
|   |   | `-ParenExpr 0x1553eafdf90 <line:966:9, col:30> 'unsigned long long'
|   |   |   `-BinaryOperator 0x1553eafdf70 <col:10, col:29> 'unsigned long long' '^'
|   |   |     |-ImplicitCastExpr 0x1553eafdf40 <col:10, col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     | `-ArraySubscriptExpr 0x1553eafdea0 <col:10, col:17> 'const u64':'const unsigned long long' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553eafde88 <col:10> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1553eafde40 <col:10> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eafce58 'small' 'const u64 *':'const u64 *'
|   |   |     |   `-IntegerLiteral 0x1553eafde60 <col:16> 'int' 2
|   |   |     `-ImplicitCastExpr 0x1553eafdf58 <col:21, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       `-ArraySubscriptExpr 0x1553eafdf20 <col:21, col:29> 'const u64':'const unsigned long long' lvalue
|   |   |         |-ImplicitCastExpr 0x1553eafdf08 <col:21> 'const u64 *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x1553eafdec0 <col:21> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |   |         `-IntegerLiteral 0x1553eafdee0 <col:28> 'int' 2
|   |   `-ParenExpr 0x1553eafe120 <col:34, col:55> 'unsigned long long'
|   |     `-BinaryOperator 0x1553eafe100 <col:35, col:54> 'unsigned long long' '^'
|   |       |-ImplicitCastExpr 0x1553eafe0d0 <col:35, col:42> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x1553eafe030 <col:35, col:42> 'const u64':'const unsigned long long' lvalue
|   |       |   |-ImplicitCastExpr 0x1553eafe018 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1553eafdfd0 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eafce58 'small' 'const u64 *':'const u64 *'
|   |       |   `-IntegerLiteral 0x1553eafdff0 <col:41> 'int' 3
|   |       `-ImplicitCastExpr 0x1553eafe0e8 <col:46, col:54> 'u64':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x1553eafe0b0 <col:46, col:54> 'const u64':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x1553eafe098 <col:46> 'const u64 *' <ArrayToPointerDecay>
|   |           | `-DeclRefExpr 0x1553eafe050 <col:46> 'const u64 [4]' lvalue Var 0x1553e9f3018 'kPrime' 'const u64 [4]'
|   |           `-IntegerLiteral 0x1553eafe070 <col:53> 'int' 3
|   |-UnaryOperator 0x1553eafe1a0 <line:967:5, col:9> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x1553eafe180 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553eafe258 <line:968:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafe1b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafe238 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafe220 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafe1d8 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafe1f8 <col:21> 'int' 32
|   |-CompoundAssignOperator 0x1553eafe328 <line:969:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafe288 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafe308 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafe2f0 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafe2a8 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafe2c8 <col:21> 'int' 16
|   |-CompoundAssignOperator 0x1553eafe3f8 <line:970:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafe358 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafe3d8 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafe3c0 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafe378 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafe398 <col:21> 'int' 8
|   |-CompoundAssignOperator 0x1553eafe4c8 <line:971:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafe428 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafe4a8 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafe490 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafe448 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafe468 <col:21> 'int' 4
|   |-CompoundAssignOperator 0x1553eafe598 <line:972:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafe4f8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafe578 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafe560 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafe518 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafe538 <col:21> 'int' 2
|   |-CompoundAssignOperator 0x1553eafe668 <line:973:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafe5c8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafe648 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1553eafe630 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553eafe5e8 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafe608 <col:21> 'int' 1
|   |-BinaryOperator 0x1553eafe7b8 <line:974:5, col:27> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1553eafe698 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1553eafe798 <col:12, col:27> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1553eafe780 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1553eafe6b8 <col:12> 'int' 0
|   |   `-ParenExpr 0x1553eafe760 <col:16, col:27> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x1553eafe740 <col:17, col:25> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x1553eafe728 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1553eafe6e0 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x1553eafe700 <col:25> 'int' 63
|   |-CompoundAssignOperator 0x1553eafe830 <line:976:5, col:16> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1553eafe7d8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1553eafe818 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eafe7f8 <col:16> 'u64':'unsigned long long' lvalue Var 0x1553eafd0c8 'is_p' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1553eafe8e8 <line:978:5, col:14> 'limb':'int' '='
|   | |-DeclRefExpr 0x1553eafe860 <col:5> 'limb':'int' lvalue Var 0x1553eafd038 'result' 'limb':'int'
|   | `-ImplicitCastExpr 0x1553eafe8d0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1553eafe8b8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553eafe898 <col:14> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1553eafea00 <line:979:5, col:35> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x1553eafe908 <col:5> 'limb':'int' lvalue Var 0x1553eafd038 'result' 'limb':'int'
|   | `-BinaryOperator 0x1553eafe9e0 <col:15, col:35> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1553eafe998 <col:15, col:30> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1553eafe970 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x1553eafe958 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x1553eafe928 <col:23> 'u64':'unsigned long long' lvalue Var 0x1553eafd158 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1553eafe9b8 <col:35> 'int' 64
|   `-ReturnStmt 0x1553eafea68 <line:980:5, col:12>
|     `-ImplicitCastExpr 0x1553eafea50 <col:12> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x1553eafea30 <col:12> 'limb':'int' lvalue Var 0x1553eafd038 'result' 'limb':'int'
|-FunctionDecl 0x1553eafec10 <line:983:1, line:986:1> line:983:12 used smallfelem_is_zero_int 'int (const void *)' static
| |-ParmVarDecl 0x1553eafeb60 <col:35, col:47> col:47 used small 'const void *'
| `-CompoundStmt 0x1553eaeeeb8 <line:984:1, line:986:1>
|   `-ReturnStmt 0x1553eaeeea8 <line:985:5, col:56>
|     `-CStyleCastExpr 0x1553eaeee80 <col:12, col:56> 'int' <NoOp>
|       `-ParenExpr 0x1553eaeee60 <col:17, col:56> 'int'
|         `-BinaryOperator 0x1553eaeee08 <col:18, col:55> 'int' '&'
|           |-CallExpr 0x1553eaeed30 <col:18, col:42> 'limb':'int'
|           | |-ImplicitCastExpr 0x1553eaeed18 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x1553eafecd0 <col:18> 'limb (const u64 *)' Function 0x1553eafcf68 'smallfelem_is_zero' 'limb (const u64 *)'
|           | `-ImplicitCastExpr 0x1553eaeed70 <col:37> 'const u64 *':'const u64 *' <BitCast>
|           |   `-ImplicitCastExpr 0x1553eaeed58 <col:37> 'const void *' <LValueToRValue>
|           |     `-DeclRefExpr 0x1553eafecf0 <col:37> 'const void *' lvalue ParmVar 0x1553eafeb60 'small' 'const void *'
|           `-ParenExpr 0x1553eaeede8 <col:46, col:55> 'limb':'int'
|             `-CStyleCastExpr 0x1553eaeedc0 <col:47, col:54> 'limb':'int' <NoOp>
|               `-IntegerLiteral 0x1553eaeed88 <col:54> 'int' 1
|-FunctionDecl 0x1553eaef020 <line:996:1, line:1088:1> line:996:13 used felem_inv 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1553eaeeee0 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553eaeef58 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553eaf2798 <line:997:1, line:1088:1>
|   |-DeclStmt 0x1553eaef1f0 <line:998:5, col:22>
|   | |-VarDecl 0x1553eaef0f8 <col:5, col:11> col:11 used ftmp 'felem':'limb [4]'
|   | `-VarDecl 0x1553eaef170 <col:5, col:17> col:17 used ftmp2 'felem':'limb [4]'
|   |-DeclStmt 0x1553eaef510 <line:1000:5, col:36>
|   | |-VarDecl 0x1553eaef218 <col:5, col:11> col:11 used e2 'felem':'limb [4]'
|   | |-VarDecl 0x1553eaef290 <col:5, col:15> col:15 used e4 'felem':'limb [4]'
|   | |-VarDecl 0x1553eaef308 <col:5, col:19> col:19 used e8 'felem':'limb [4]'
|   | |-VarDecl 0x1553eaef380 <col:5, col:23> col:23 used e16 'felem':'limb [4]'
|   | |-VarDecl 0x1553eaef3f8 <col:5, col:28> col:28 used e32 'felem':'limb [4]'
|   | `-VarDecl 0x1553eaef470 <col:5, col:33> col:33 used e64 'felem':'limb [4]'
|   |-DeclStmt 0x1553eaef5a0 <line:1001:5, col:18>
|   | `-VarDecl 0x1553eaef538 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x1553eaef638 <line:1002:5, col:15>
|   | `-VarDecl 0x1553eaef5d0 <col:5, col:14> col:14 used i 'unsigned int'
|   |-CallExpr 0x1553eaef710 <line:1004:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1553eaef6f8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaef650 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaef740 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaef670 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaef758 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaef6a8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaeef58 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eaef800 <line:1005:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaef7e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaef770 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaef830 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaef790 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaef860 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaef848 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaef7c8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaef970 <line:1006:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaef958 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaef878 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaef9a8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaef898 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaef9c0 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eaef8b8 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaeef58 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1553eaef9f0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaef9d8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaef8d8 <col:24> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaefa80 <line:1007:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaefa68 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefa08 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaefab0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefa28 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaefae0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaefac8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaefa48 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaefbb0 <line:1008:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1553eaefb98 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefaf8 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaefbe0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefb18 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef218 'e2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaefc10 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaefbf8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaefb50 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaefca0 <line:1009:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaefc88 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefc28 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaefcd0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefc48 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaefd00 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaefce8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaefc68 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaefd90 <line:1010:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaefd78 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefd18 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaefdc0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefd38 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaefdf0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaefdd8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaefd58 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaefe80 <line:1011:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaefe68 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefe08 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaefeb0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefe28 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaefee0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaefec8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaefe48 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaeff70 <line:1012:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaeff58 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaefef8 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaeffa0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaeff18 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaeffd0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaeffb8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaeff38 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf0080 <line:1013:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0068 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaeffe8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf00b8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0008 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaf00e8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaf00d0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaf0028 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf0118 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf0100 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0048 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eaef218 'e2' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf01a8 <line:1014:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0190 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0130 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf01d8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0150 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf0208 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf01f0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0170 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf02b0 <line:1015:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0298 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0220 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf02e0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0240 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef290 'e4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf0310 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf02f8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0278 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf03a0 <line:1016:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0388 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0328 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf03d0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0348 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf0400 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf03e8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0368 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf0490 <line:1017:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0478 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0418 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf04c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0438 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf04f0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf04d8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0458 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf0580 <line:1018:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0568 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0508 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf05b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0528 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf05e0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf05c8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0548 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf0670 <line:1019:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0658 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf05f8 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf06a0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0618 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf06d0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf06b8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0638 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf0760 <line:1020:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0748 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf06e8 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf0790 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0708 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf07c0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf07a8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0728 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf0850 <line:1021:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0838 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf07d8 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf0880 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf07f8 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf08b0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf0898 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0818 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf0940 <line:1022:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0928 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf08c8 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf0970 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf08e8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf09a0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf0988 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0908 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf0a30 <line:1023:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0a18 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf09b8 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf0a60 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf09d8 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf0a90 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf0a78 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf09f8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf0b40 <line:1024:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0b28 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0aa8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf0b78 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0ac8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaf0ba8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaf0b90 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaf0ae8 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf0bd8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf0bc0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0b08 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eaef290 'e4' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf0c68 <line:1025:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0c50 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0bf0 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf0c98 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0c10 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf0cc8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf0cb0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0c30 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eafee00 <line:1026:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1553eafede8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafed70 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eafee30 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafed90 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef308 'e8' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eafee60 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eafee48 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eafedc8 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x1553eaff1e0 <line:1027:5, line:1030:5>
|   | |-BinaryOperator 0x1553eafeef0 <line:1027:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1553eafee78 <col:10> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eafeed8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eafeeb0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553eafef88 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1553eafef58 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eafef10 <col:17> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eafef70 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eafef30 <col:21> 'int' 8
|   | |-UnaryOperator 0x1553eafefc8 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1553eafefa8 <col:24> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1553eaff1c0 <col:29, line:1030:5>
|   |   |-CallExpr 0x1553eaff058 <line:1028:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1553eaff040 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eafefe0 <col:9> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1553eaff088 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaff000 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1553eaff0b8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1553eaff0a0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1553eaff020 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x1553eaff148 <line:1029:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1553eaff130 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eaff0d0 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1553eaff178 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eaff0f0 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1553eaff1a8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1553eaff190 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1553eaff110 <col:28> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaff2b0 <line:1031:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaff298 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaff218 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaff2e8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaff238 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaff318 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaff300 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaff258 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaff348 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaff330 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaff278 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eaef308 'e8' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaff3d8 <line:1032:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaff3c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaff360 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaff408 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaff380 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaff438 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaff420 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaff3a0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaff4e0 <line:1033:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaff4c8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaff450 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaff510 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaff470 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef380 'e16' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaff540 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaff528 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaff4a8 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x1553eaff8a8 <line:1034:5, line:1037:5>
|   | |-BinaryOperator 0x1553eaff5b8 <line:1034:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1553eaff558 <col:10> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eaff5a0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eaff578 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553eaff650 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1553eaff620 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaff5d8 <col:17> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eaff638 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eaff5f8 <col:21> 'int' 16
|   | |-UnaryOperator 0x1553eaff690 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1553eaff670 <col:25> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1553eaff888 <col:30, line:1037:5>
|   |   |-CallExpr 0x1553eaff720 <line:1035:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1553eaff708 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaff6a8 <col:9> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1553eaff750 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaff6c8 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1553eaff780 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1553eaff768 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1553eaff6e8 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x1553eaff810 <line:1036:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1553eaff7f8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eaff798 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1553eaff840 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eaff7b8 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1553eaff870 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1553eaff858 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1553eaff7d8 <col:28> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaff978 <line:1038:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eaff960 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaff8e0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaff9b0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaff900 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaff9e0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaff9c8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaff920 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaffa10 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaff9f8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaff940 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eaef380 'e16' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaffaa0 <line:1039:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaffa88 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaffa28 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaffad0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaffa48 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaffb00 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaffae8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaffa68 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaffba8 <line:1040:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaffb90 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaffb18 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaffbd8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaffb38 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef3f8 'e32' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaffc08 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaffbf0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaffb70 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x1553eafff70 <line:1041:5, line:1044:5>
|   | |-BinaryOperator 0x1553eaffc80 <line:1041:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1553eaffc20 <col:10> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eaffc68 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eaffc40 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553eaffd18 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1553eaffce8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaffca0 <col:17> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eaffd00 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eaffcc0 <col:21> 'int' 32
|   | |-UnaryOperator 0x1553eaffd58 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1553eaffd38 <col:25> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1553eafff50 <col:30, line:1044:5>
|   |   |-CallExpr 0x1553eaffde8 <line:1042:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1553eaffdd0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaffd70 <col:9> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1553eaffe18 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaffd90 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1553eaffe48 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1553eaffe30 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1553eaffdb0 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x1553eaffed8 <line:1043:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1553eaffec0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eaffe60 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1553eafff08 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eaffe80 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1553eafff38 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1553eafff20 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1553eaffea0 <col:28> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb00038 <line:1045:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb00020 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafffa8 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb00068 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eafffc8 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef470 'e64' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb00098 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb00080 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb00000 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb00148 <line:1046:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb00130 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb000b0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb00180 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb000d0 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb001b0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb00198 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb000f0 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb001c8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb00110 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaeef58 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eb00258 <line:1047:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb00240 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb001e0 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb00288 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb00200 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb002b8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb002a0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb00220 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x1553eb00620 <line:1048:5, line:1051:5>
|   | |-BinaryOperator 0x1553eb00330 <line:1048:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1553eb002d0 <col:10> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eb00318 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eb002f0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553eb003c8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1553eb00398 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eb00350 <col:17> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eb003b0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eb00370 <col:21> 'int' 192
|   | |-UnaryOperator 0x1553eb00408 <col:26, col:27> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1553eb003e8 <col:26> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1553eb00600 <col:31, line:1051:5>
|   |   |-CallExpr 0x1553eb00498 <line:1049:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1553eb00480 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eb00420 <col:9> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1553eb004c8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eb00440 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1553eb004f8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1553eb004e0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1553eb00460 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x1553eb00588 <line:1050:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1553eb00570 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eb00510 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1553eb005b8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eb00530 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1553eb005e8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1553eb005d0 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1553eb00550 <col:28> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb006f0 <line:1053:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb006d8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb00658 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb00728 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb00678 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb00758 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb00740 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb00698 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef470 'e64' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb00788 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb00770 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb006b8 <col:25> 'felem':'limb [4]' lvalue Var 0x1553eaef3f8 'e32' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb00830 <line:1054:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb00818 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb007a0 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb00860 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb007c0 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb00890 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb00878 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb007f8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x1553eb00bf8 <line:1055:5, line:1058:5>
|   | |-BinaryOperator 0x1553eb00908 <line:1055:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1553eb008a8 <col:10> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eb008f0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eb008c8 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553eb009a0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1553eb00970 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eb00928 <col:17> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eb00988 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eb00948 <col:21> 'int' 16
|   | |-UnaryOperator 0x1553eb009e0 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1553eb009c0 <col:25> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1553eb00bd8 <col:30, line:1058:5>
|   |   |-CallExpr 0x1553eb00a70 <line:1056:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1553eb00a58 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eb009f8 <col:9> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1553eb00aa0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eb00a18 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1553eb00ad0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1553eb00ab8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1553eb00a38 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x1553eb00b60 <line:1057:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1553eb00b48 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eb00ae8 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1553eb00b90 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eb00b08 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1553eb00bc0 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1553eb00ba8 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1553eb00b28 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb00cc8 <line:1059:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553eb00cb0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb00c30 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb00d00 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb00c50 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb00d30 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb00d18 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb00c70 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf0d00 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb00d48 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb00c90 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef380 'e16' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf0d90 <line:1060:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf0d78 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0d18 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf0dc0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf0d38 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf0df0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf0dd8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf0d58 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x1553eaf1158 <line:1061:5, line:1064:5>
|   | |-BinaryOperator 0x1553eaf0e68 <line:1061:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1553eaf0e08 <col:10> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eaf0e50 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eaf0e28 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553eaf0f00 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1553eaf0ed0 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf0e88 <col:17> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eaf0ee8 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eaf0ea8 <col:21> 'int' 8
|   | |-UnaryOperator 0x1553eaf0f40 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1553eaf0f20 <col:24> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1553eaf1138 <col:29, line:1064:5>
|   |   |-CallExpr 0x1553eaf0fd0 <line:1062:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1553eaf0fb8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaf0f58 <col:9> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1553eaf1000 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaf0f78 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1553eaf1030 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1553eaf1018 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1553eaf0f98 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x1553eaf10c0 <line:1063:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1553eaf10a8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eaf1048 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1553eaf10f0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eaf1068 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1553eaf1120 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1553eaf1108 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1553eaf1088 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf1228 <line:1065:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eaf1210 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1190 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf1260 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf11b0 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaf1290 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaf1278 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaf11d0 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf12c0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf12a8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf11f0 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef308 'e8' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf1350 <line:1066:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf1338 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf12d8 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf1380 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf12f8 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf13b0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf1398 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf1318 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x1553eaf1718 <line:1067:5, line:1070:5>
|   | |-BinaryOperator 0x1553eaf1428 <line:1067:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1553eaf13c8 <col:10> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eaf1410 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eaf13e8 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553eaf14c0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1553eaf1490 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553eaf1448 <col:17> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1553eaf14a8 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553eaf1468 <col:21> 'int' 4
|   | |-UnaryOperator 0x1553eaf1500 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1553eaf14e0 <col:24> 'unsigned int' lvalue Var 0x1553eaef5d0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1553eaf16f8 <col:29, line:1070:5>
|   |   |-CallExpr 0x1553eaf1590 <line:1068:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1553eaf1578 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaf1518 <col:9> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1553eaf15c0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaf1538 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1553eaf15f0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1553eaf15d8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1553eaf1558 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x1553eaf1680 <line:1069:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1553eaf1668 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eaf1608 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1553eaf16b0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eaf1628 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1553eaf16e0 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1553eaf16c8 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1553eaf1648 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf17e8 <line:1071:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eaf17d0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1750 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf1820 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1770 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaf1850 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaf1838 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaf1790 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf1880 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf1868 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf17b0 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef290 'e4' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf1910 <line:1072:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf18f8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1898 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf1940 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf18b8 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf1970 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf1958 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf18d8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf1a00 <line:1073:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf19e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1988 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf1a30 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf19a8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf1a60 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf1a48 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf19c8 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf1af0 <line:1074:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf1ad8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1a78 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf1b20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1a98 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf1b50 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf1b38 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf1ab8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf1be0 <line:1075:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf1bc8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1b68 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf1c10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1b88 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf1c40 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf1c28 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf1ba8 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf1cd0 <line:1076:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf1cb8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1c58 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf1d00 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1c78 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf1d30 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf1d18 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf1c98 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf1de0 <line:1077:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eaf1dc8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1d48 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf1e18 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1d68 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaf1e48 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaf1e30 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaf1d88 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf1e78 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf1e60 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf1da8 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef218 'e2' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf1f08 <line:1078:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf1ef0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1e90 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf1f38 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1eb0 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf1f68 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf1f50 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf1ed0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf1ff8 <line:1079:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf1fe0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1f80 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf2028 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf1fa0 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf2058 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf2040 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf1fc0 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf20e8 <line:1080:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf20d0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2070 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf2118 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2090 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf2148 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf2130 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf20b0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf21d8 <line:1081:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf21c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2160 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf2208 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2180 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf2238 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf2220 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf21a0 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf22c8 <line:1082:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf22b0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2250 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf22f8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2270 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf2328 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf2310 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf2290 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf23d8 <line:1083:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eaf23c0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2340 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf2410 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2360 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaf2440 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaf2428 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaf2380 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf2458 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaf23a0 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1553eaeef58 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eaf24e8 <line:1084:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf24d0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2470 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf2518 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2490 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf2548 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf2530 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf24b0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf25f8 <line:1086:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553eaf25e0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2560 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf2630 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2580 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaf2660 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaf2648 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaf25a0 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaef170 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf2690 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf2678 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf25c0 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eaef0f8 'ftmp' 'felem':'limb [4]'
|   `-CallExpr 0x1553eaf2720 <line:1087:5, col:26> 'void'
|     |-ImplicitCastExpr 0x1553eaf2708 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eaf26a8 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1553eaf2750 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eaf26c8 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1553eaeeee0 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1553eaf2780 <col:23> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1553eaf2768 <col:23> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553eaf26e8 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1553eaef538 'tmp' 'longfelem':'limb [8]'
|-FunctionDecl 0x1553eaf2b00 <line:1090:1, line:1097:1> line:1090:13 used smallfelem_inv_contract 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x1553eaf29c0 <col:37, col:48> col:48 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eaf2a38 <col:53, col:70> col:70 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553eb00fd8 <line:1091:1, line:1097:1>
|   |-DeclStmt 0x1553eaf2c40 <line:1092:5, col:14>
|   | `-VarDecl 0x1553eaf2bd8 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x1553eb00d98 <line:1094:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553eb00d80 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2c58 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eb00dc8 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2c78 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaf2bd8 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb00de0 <col:28> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaf2cb0 <col:28> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eaf2a38 'in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1553eb00e70 <line:1095:5, col:23> 'void'
|   | |-ImplicitCastExpr 0x1553eb00e58 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb00df8 <col:5> 'void (limb *, const limb *)' Function 0x1553eaef020 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb00ea0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb00e18 <col:15> 'felem':'limb [4]' lvalue Var 0x1553eaf2bd8 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb00ed0 <col:20> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb00eb8 <col:20> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb00e38 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eaf2bd8 'tmp' 'felem':'limb [4]'
|   `-CallExpr 0x1553eb00f60 <line:1096:5, col:28> 'void'
|     |-ImplicitCastExpr 0x1553eb00f48 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eb00ee8 <col:5> 'void (u64 *, const limb *)' Function 0x1553eaf9c88 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x1553eb00f90 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eb00f08 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf29c0 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x1553eb00fc0 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1553eb00fa8 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553eb00f28 <col:25> 'felem':'limb [4]' lvalue Var 0x1553eaf2bd8 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x1553eb01478 <line:1117:1, line:1193:1> line:1118:1 used point_double 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x1553eb01018 <col:14, col:20> col:20 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x1553eb01090 <col:27, col:33> col:33 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x1553eb01108 <col:40, col:46> col:46 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x1553eb01180 <line:1119:14, col:26> col:26 used x_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x1553eb011f8 <col:32, col:44> col:44 used y_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x1553eb01270 <col:50, col:62> col:62 used z_in 'const limb *':'const limb *'
| `-CompoundStmt 0x1553eaf3b68 <line:1120:1, line:1193:1>
|   |-DeclStmt 0x1553eb01668 <line:1121:5, col:24>
|   | |-VarDecl 0x1553eb01570 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   | `-VarDecl 0x1553eb015e8 <col:5, col:20> col:20 used tmp2 'longfelem':'limb [8]'
|   |-DeclStmt 0x1553eb01988 <line:1122:5, col:49>
|   | |-VarDecl 0x1553eb01690 <col:5, col:11> col:11 used delta 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb01708 <col:5, col:18> col:18 used gamma 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb01780 <col:5, col:25> col:25 used beta 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb017f8 <col:5, col:31> col:31 used alpha 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb01870 <col:5, col:38> col:38 used ftmp 'felem':'limb [4]'
|   | `-VarDecl 0x1553eb018e8 <col:5, col:44> col:44 used ftmp2 'felem':'limb [4]'
|   |-DeclStmt 0x1553eb01aa8 <line:1123:5, col:30>
|   | |-VarDecl 0x1553eb019b0 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x1553eb01a28 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1553eb01b50 <line:1125:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb01b38 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01ac0 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb01b80 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01ae0 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb01870 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb01b98 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb01b18 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb01180 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eb01c40 <line:1127:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eb01c28 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01bb0 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb01c70 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01bd0 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb018e8 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb01c88 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb01c08 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb01180 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eb01d30 <line:1131:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb01d18 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01ca0 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb01d60 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01cc0 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eb01d78 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb01cf8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb01270 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eb01e20 <line:1132:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb01e08 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01d90 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb01e50 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01db0 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb01690 'delta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb01e80 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb01e68 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb01de8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb01f10 <line:1136:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb01ef8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01e98 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb01f40 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01eb8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eb01f58 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb01ed8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb011f8 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eb02000 <line:1137:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb01fe8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01f70 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb02030 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb01f90 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb01708 'gamma' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb02060 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb02048 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb01fc8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb02108 <line:1139:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553eb020f0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02078 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb02138 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02098 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1553eb019b0 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eb02168 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb02150 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb020d0 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eb01708 'gamma' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb02270 <line:1142:5, col:38> 'void'
|   | |-ImplicitCastExpr 0x1553eb02258 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02180 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x1553eafb618 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb022a8 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb021a0 <col:21> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb022d8 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb022c0 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb021c0 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x1553eb019b0 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eb022f0 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb021e0 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb01180 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eb02398 <line:1143:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb02380 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02308 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb023c8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02328 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb01780 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb023f8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb023e0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb02360 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb02488 <line:1147:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb02470 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02410 <col:5> 'void (limb *, const limb *)' Function 0x1553e9fb720 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb024b8 <col:16> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02430 <col:16> 'felem':'limb [4]' lvalue Var 0x1553eb01870 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb024e8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb024d0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb02450 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb01690 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb02578 <line:1149:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb02560 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02500 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f80b0 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb025a8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02520 <col:15> 'felem':'limb [4]' lvalue Var 0x1553eb018e8 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb025d8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb025c0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb02540 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb01690 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb026d0 <line:1151:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1553eb026b8 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb025f0 <col:5> 'void (limb *, const u64)' Function 0x1553e9f9098 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1553eb02700 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02610 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb018e8 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb02718 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eb02630 <col:25> 'int' 3
|   |-CallExpr 0x1553eb027c8 <line:1153:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553eb027b0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02730 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb02800 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02750 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb02830 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb02818 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb02770 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eb01870 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb02860 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb02848 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb02790 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eb018e8 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb02908 <line:1154:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb028f0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02878 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb02938 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02898 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb017f8 'alpha' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb02968 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb02950 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb028d0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb02a10 <line:1156:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553eb029f8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02980 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb02a40 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb029a0 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1553eb01a28 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eb02a70 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb02a58 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb029d8 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eb017f8 'alpha' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb02b00 <line:1159:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1553eb02ae8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02a88 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea05298 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eb02b30 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02aa8 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eb02b60 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb02b48 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb02ac8 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x1553eb01a28 'small2' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1553eb02bf0 <line:1160:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb02bd8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02b78 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb02c20 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb02b98 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1553eb01018 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1553eb02c50 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb02c38 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb02bb8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb02ce0 <line:1161:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb02cc8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02c68 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb02d10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02c88 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb01870 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb02d40 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb02d28 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb02ca8 <col:24> 'felem':'limb [4]' lvalue Var 0x1553eb01780 'beta' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf2d70 <line:1162:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1553eaf2d58 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb02d58 <col:5> 'void (limb *, const u64)' Function 0x1553e9f9098 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1553eaf2da0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2d10 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb01870 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf2db8 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eaf2d30 <col:24> 'int' 8
|   |-CallExpr 0x1553eaf2e48 <line:1164:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf2e30 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2dd0 <col:5> 'void (limb *, const limb *)' Function 0x1553e9fb720 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf2e78 <col:16> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eaf2df0 <col:16> 'limb *':'limb *' lvalue ParmVar 0x1553eb01018 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1553eaf2ea8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf2e90 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf2e10 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eb01870 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf2f38 <line:1168:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf2f20 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2ec0 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f80b0 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf2f68 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2ee0 <col:15> 'felem':'limb [4]' lvalue Var 0x1553eb01690 'delta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf2f98 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf2f80 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf2f00 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb01708 'gamma' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf3028 <line:1170:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf3010 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2fb0 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf3058 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf2fd0 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb01870 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf3070 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaf2ff0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb011f8 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eaf3100 <line:1171:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1553eaf30e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3088 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f80b0 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf3130 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf30a8 <col:15> 'felem':'limb [4]' lvalue Var 0x1553eb01870 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf3148 <col:21> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaf30c8 <col:21> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb01270 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eaf31d8 <line:1173:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf31c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3160 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf3208 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3180 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf3238 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf3220 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf31a0 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eb01870 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf32c8 <line:1174:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf32b0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3250 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf32f8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eaf3270 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1553eb01108 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1553eaf3328 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf3310 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf3290 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf33b8 <line:1175:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf33a0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3340 <col:5> 'void (limb *, const limb *)' Function 0x1553e9fb720 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf33e8 <col:16> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eaf3360 <col:16> 'limb *':'limb *' lvalue ParmVar 0x1553eb01108 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1553eaf3418 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf3400 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf3380 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eb01690 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf34b0 <line:1179:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1553eaf3498 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3430 <col:5> 'void (limb *, const u64)' Function 0x1553e9f9098 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1553eaf34e0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3450 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb01780 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf34f8 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eaf3470 <col:24> 'int' 4
|   |-CallExpr 0x1553eaf3588 <line:1181:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1553eaf3570 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3510 <col:5> 'void (limb *, const limb *)' Function 0x1553e9fcf70 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf35b8 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3530 <col:24> 'felem':'limb [4]' lvalue Var 0x1553eb01780 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf35e8 <col:30> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf35d0 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553eaf3550 <col:30> 'limb *':'limb *' lvalue ParmVar 0x1553eb01018 'x_out' 'limb *':'limb *'
|   |-CallExpr 0x1553eaf3698 <line:1183:5, col:38> 'void'
|   | |-ImplicitCastExpr 0x1553eaf3680 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3600 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x1553eafb618 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf36d0 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3620 <col:21> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eaf3700 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaf36e8 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaf3640 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x1553eb01a28 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eaf3730 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf3718 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf3660 <col:34> 'felem':'limb [4]' lvalue Var 0x1553eb01780 'beta' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf37d8 <line:1185:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1553eaf37c0 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3748 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea05298 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eaf3808 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3768 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1553eb015e8 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf3838 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf3820 <col:29> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf37a0 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x1553eb019b0 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1553eaf3900 <line:1187:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eaf38e8 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3850 <col:5> 'void (limb *, const u64)' Function 0x1553e9f9708 'longfelem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1553eaf3930 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3870 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553eb015e8 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf3948 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eaf3890 <col:28> 'int' 8
|   |-CallExpr 0x1553eaf3a00 <line:1189:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eaf39e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3960 <col:5> 'void (limb *, const limb *)' Function 0x1553e9fdd18 'longfelem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf3a30 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf3980 <col:20> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf3a60 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf3a48 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf39a0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eb015e8 'tmp2' 'longfelem':'limb [8]'
|   `-CallExpr 0x1553eaf3af0 <line:1191:5, col:36> 'void'
|     |-ImplicitCastExpr 0x1553eaf3ad8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eaf3a78 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8d40 'felem_reduce_zero105' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1553eaf3b20 <col:26> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eaf3a98 <col:26> 'limb *':'limb *' lvalue ParmVar 0x1553eb01090 'y_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1553eaf3b50 <col:33> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1553eaf3b38 <col:33> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553eaf3ab8 <col:33> 'longfelem':'limb [8]' lvalue Var 0x1553eb01570 'tmp' 'longfelem':'limb [8]'
|-FunctionDecl 0x1553eaf4108 <line:1199:1, line:1215:1> line:1200:1 used point_double_small 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x1553eaf3ca8 <col:20, col:31> col:31 used x_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eaf3d20 <col:38, col:49> col:49 used y_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eaf3d98 <col:56, col:67> col:67 used z_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eaf3e10 <line:1201:20, col:37> col:37 used x_in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1553eaf3e88 <col:43, col:60> col:60 used y_in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1553eaf3f00 <line:1202:20, col:37> col:37 used z_in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553eb02e20 <line:1203:1, line:1215:1>
|   |-DeclStmt 0x1553eaf4378 <line:1204:5, col:48>
|   | |-VarDecl 0x1553eaf4200 <col:5, col:11> col:11 used felem_x_out 'felem':'limb [4]'
|   | |-VarDecl 0x1553eaf4278 <col:5, col:24> col:24 used felem_y_out 'felem':'limb [4]'
|   | `-VarDecl 0x1553eaf42f0 <col:5, col:37> col:37 used felem_z_out 'felem':'limb [4]'
|   |-DeclStmt 0x1553eaf4518 <line:1205:5, col:45>
|   | |-VarDecl 0x1553eaf43a0 <col:5, col:11> col:11 used felem_x_in 'felem':'limb [4]'
|   | |-VarDecl 0x1553eaf4418 <col:5, col:23> col:23 used felem_y_in 'felem':'limb [4]'
|   | `-VarDecl 0x1553eaf4490 <col:5, col:35> col:35 used felem_z_in 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf45c0 <line:1207:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1553eaf45a8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4530 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eaf45f0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4550 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaf43a0 'felem_x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf4608 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaf4588 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eaf3e10 'x_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1553eaf46b0 <line:1208:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1553eaf4698 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4620 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eaf46e0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4640 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaf4418 'felem_y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf46f8 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaf4678 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eaf3e88 'y_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1553eaf47a0 <line:1209:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1553eaf4788 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4710 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eaf47d0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4730 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eaf4490 'felem_z_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf47e8 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaf4768 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eaf3f00 'z_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1553eaf49a0 <line:1210:5, line:1211:52> 'void'
|   | |-ImplicitCastExpr 0x1553eaf4988 <line:1210:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4800 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1553eb01478 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf49f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4820 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaf4200 'felem_x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eaf4a08 <col:31> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4858 <col:31> 'felem':'limb [4]' lvalue Var 0x1553eaf4278 'felem_y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eaf4a20 <col:44> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4890 <col:44> 'felem':'limb [4]' lvalue Var 0x1553eaf42f0 'felem_z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eaf4a50 <line:1211:18> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaf4a38 <col:18> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaf48c8 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaf43a0 'felem_x_in' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eaf4a80 <col:30> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eaf4a68 <col:30> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eaf48e8 <col:30> 'felem':'limb [4]' lvalue Var 0x1553eaf4418 'felem_y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf4ab0 <col:42> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf4a98 <col:42> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf4908 <col:42> 'felem':'limb [4]' lvalue Var 0x1553eaf4490 'felem_z_in' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf4b40 <line:1212:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1553eaf4b28 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4ac8 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf4b70 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eaf4ae8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf3ca8 'x_out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1553eaf4ba0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf4b88 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf4b08 <col:25> 'felem':'limb [4]' lvalue Var 0x1553eaf4200 'felem_x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1553eaf4c30 <line:1213:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1553eaf4c18 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf4bb8 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf4c60 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eaf4bd8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf3d20 'y_out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1553eaf4c90 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf4c78 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf4bf8 <col:25> 'felem':'limb [4]' lvalue Var 0x1553eaf4278 'felem_y_out' 'felem':'limb [4]'
|   `-CallExpr 0x1553eb02da8 <line:1214:5, col:36> 'void'
|     |-ImplicitCastExpr 0x1553eb02d90 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eaf4ca8 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x1553eb02dd8 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eaf4cc8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1553eaf3d98 'z_out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x1553eb02e08 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1553eb02df0 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553eaf4ce8 <col:25> 'felem':'limb [4]' lvalue Var 0x1553eaf42f0 'felem_z_out' 'felem':'limb [4]'
|-FunctionDecl 0x1553eb030e8 <line:1218:1, line:1225:1> line:1218:13 used copy_conditional 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x1553eb02e88 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553eb02f00 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x1553eb02f78 <col:57, col:62> col:62 used mask 'limb':'int'
| `-CompoundStmt 0x1553eb037e0 <line:1219:1, line:1225:1>
|   |-DeclStmt 0x1553eb03238 <line:1220:5, col:15>
|   | `-VarDecl 0x1553eb031d0 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x1553eb037a8 <line:1221:5, line:1224:5>
|     |-BinaryOperator 0x1553eb032c8 <line:1221:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1553eb03250 <col:10> 'unsigned int' lvalue Var 0x1553eb031d0 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1553eb032b0 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1553eb03288 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1553eb03360 <col:17, line:113:17> 'int' '<'
|     | |-ImplicitCastExpr 0x1553eb03330 <line:1221:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553eb032e8 <col:17> 'unsigned int' lvalue Var 0x1553eb031d0 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1553eb03348 <line:113:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1553eb03308 <col:17> 'int' 4
|     |-UnaryOperator 0x1553eb033a0 <line:1221:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x1553eb03380 <col:31> 'unsigned int' lvalue Var 0x1553eb031d0 'i' 'unsigned int'
|     `-CompoundStmt 0x1553eb03788 <col:34, line:1224:5>
|       |-DeclStmt 0x1553eb03618 <line:1222:9, col:49>
|       | `-VarDecl 0x1553eb033c8 <col:9, col:48> col:20 used tmp 'const limb':'const int' cinit
|       |   `-BinaryOperator 0x1553eb035f8 <col:26, col:48> 'int' '&'
|       |     |-ImplicitCastExpr 0x1553eb035e0 <col:26> 'limb':'int' <LValueToRValue>
|       |     | `-DeclRefExpr 0x1553eb03430 <col:26> 'limb':'int' lvalue ParmVar 0x1553eb02f78 'mask' 'limb':'int'
|       |     `-ParenExpr 0x1553eb035c0 <col:33, col:48> 'int'
|       |       `-BinaryOperator 0x1553eb035a0 <col:34, col:47> 'int' '^'
|       |         |-ImplicitCastExpr 0x1553eb03570 <col:34, col:38> 'limb':'int' <LValueToRValue>
|       |         | `-ArraySubscriptExpr 0x1553eb034c0 <col:34, col:38> 'const limb':'const int' lvalue
|       |         |   |-ImplicitCastExpr 0x1553eb03490 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|       |         |   | `-DeclRefExpr 0x1553eb03450 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb02f00 'in' 'const limb *':'const limb *'
|       |         |   `-ImplicitCastExpr 0x1553eb034a8 <col:37> 'unsigned int' <LValueToRValue>
|       |         |     `-DeclRefExpr 0x1553eb03470 <col:37> 'unsigned int' lvalue Var 0x1553eb031d0 'i' 'unsigned int'
|       |         `-ImplicitCastExpr 0x1553eb03588 <col:42, col:47> 'limb':'int' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x1553eb03550 <col:42, col:47> 'limb':'int' lvalue
|       |             |-ImplicitCastExpr 0x1553eb03520 <col:42> 'limb *':'limb *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x1553eb034e0 <col:42> 'limb *':'limb *' lvalue ParmVar 0x1553eb02e88 'out' 'limb *':'limb *'
|       |             `-ImplicitCastExpr 0x1553eb03538 <col:46> 'unsigned int' <LValueToRValue>
|       |               `-DeclRefExpr 0x1553eb03500 <col:46> 'unsigned int' lvalue Var 0x1553eb031d0 'i' 'unsigned int'
|       `-CompoundAssignOperator 0x1553eb03710 <line:1223:9, col:19> 'limb':'int' '^=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-ArraySubscriptExpr 0x1553eb036a0 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x1553eb03670 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x1553eb03630 <col:9> 'limb *':'limb *' lvalue ParmVar 0x1553eb02e88 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x1553eb03688 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x1553eb03650 <col:13> 'unsigned int' lvalue Var 0x1553eb031d0 'i' 'unsigned int'
|         `-ImplicitCastExpr 0x1553eb036f8 <col:19> 'limb':'int' <LValueToRValue>
|           `-DeclRefExpr 0x1553eb036c0 <col:19> 'const limb':'const int' lvalue Var 0x1553eb033c8 'tmp' 'const limb':'const int'
|-FunctionDecl 0x1553eb03a68 <line:1228:1, line:1235:1> line:1228:13 used copy_small_conditional 'void (limb *, const u64 *, limb)' static
| |-ParmVarDecl 0x1553eb03810 <col:36, col:42> col:42 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1553eb03888 <col:47, col:64> col:64 used in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1553eb03900 <col:68, col:73> col:73 used mask 'limb':'int'
| `-CompoundStmt 0x1553eb04268 <line:1229:1, line:1235:1>
|   |-DeclStmt 0x1553eb03bb8 <line:1230:5, col:15>
|   | `-VarDecl 0x1553eb03b50 <col:5, col:14> col:14 used i 'unsigned int'
|   |-DeclStmt 0x1553eb03c98 <line:1231:5, col:28>
|   | `-VarDecl 0x1553eb03be0 <col:5, col:24> col:15 used mask64 'const u64':'const unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x1553eb03c80 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1553eb03c68 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1553eb03c48 <col:24> 'limb':'int' lvalue ParmVar 0x1553eb03900 'mask' 'limb':'int'
|   `-ForStmt 0x1553eb04230 <line:1232:5, line:1234:5>
|     |-BinaryOperator 0x1553eb03d28 <line:1232:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1553eb03cb0 <col:10> 'unsigned int' lvalue Var 0x1553eb03b50 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1553eb03d10 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1553eb03ce8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1553eb03dc0 <col:17, line:113:17> 'int' '<'
|     | |-ImplicitCastExpr 0x1553eb03d90 <line:1232:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553eb03d48 <col:17> 'unsigned int' lvalue Var 0x1553eb03b50 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1553eb03da8 <line:113:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1553eb03d68 <col:17> 'int' 4
|     |-UnaryOperator 0x1553eb03e00 <line:1232:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x1553eb03de0 <col:31> 'unsigned int' lvalue Var 0x1553eb03b50 'i' 'unsigned int'
|     `-CompoundStmt 0x1553eb04218 <col:34, line:1234:5>
|       `-BinaryOperator 0x1553eb041b0 <line:1233:9, col:61> 'limb':'int' '='
|         |-ArraySubscriptExpr 0x1553eb03e88 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x1553eb03e58 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x1553eb03e18 <col:9> 'limb *':'limb *' lvalue ParmVar 0x1553eb03810 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x1553eb03e70 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x1553eb03e38 <col:13> 'unsigned int' lvalue Var 0x1553eb03b50 'i' 'unsigned int'
|         `-BinaryOperator 0x1553eb04190 <col:18, col:61> 'int' '|'
|           |-ParenExpr 0x1553eb04038 <col:18, col:42> 'limb':'int'
|           | `-CStyleCastExpr 0x1553eb04010 <col:19, col:41> 'limb':'int' <IntegralCast>
|           |   `-ParenExpr 0x1553eb03ff0 <col:26, col:41> 'unsigned long long'
|           |     `-BinaryOperator 0x1553eb03fa0 <col:27, col:35> 'unsigned long long' '&'
|           |       |-ImplicitCastExpr 0x1553eb03f70 <col:27, col:31> 'u64':'unsigned long long' <LValueToRValue>
|           |       | `-ArraySubscriptExpr 0x1553eb03f18 <col:27, col:31> 'const u64':'const unsigned long long' lvalue
|           |       |   |-ImplicitCastExpr 0x1553eb03ee8 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|           |       |   | `-DeclRefExpr 0x1553eb03ea8 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eb03888 'in' 'const u64 *':'const u64 *'
|           |       |   `-ImplicitCastExpr 0x1553eb03f00 <col:30> 'unsigned int' <LValueToRValue>
|           |       |     `-DeclRefExpr 0x1553eb03ec8 <col:30> 'unsigned int' lvalue Var 0x1553eb03b50 'i' 'unsigned int'
|           |       `-ImplicitCastExpr 0x1553eb03f88 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|           |         `-DeclRefExpr 0x1553eb03f38 <col:35> 'const u64':'const unsigned long long' lvalue Var 0x1553eb03be0 'mask64' 'const u64':'const unsigned long long'
|           `-ParenExpr 0x1553eb04170 <col:46, col:61> 'int'
|             `-BinaryOperator 0x1553eb04150 <col:47, col:57> 'int' '&'
|               |-ImplicitCastExpr 0x1553eb04138 <col:47, col:52> 'limb':'int' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x1553eb040c8 <col:47, col:52> 'limb':'int' lvalue
|               |   |-ImplicitCastExpr 0x1553eb04098 <col:47> 'limb *':'limb *' <LValueToRValue>
|               |   | `-DeclRefExpr 0x1553eb04058 <col:47> 'limb *':'limb *' lvalue ParmVar 0x1553eb03810 'out' 'limb *':'limb *'
|               |   `-ImplicitCastExpr 0x1553eb040b0 <col:51> 'unsigned int' <LValueToRValue>
|               |     `-DeclRefExpr 0x1553eb04078 <col:51> 'unsigned int' lvalue Var 0x1553eb03b50 'i' 'unsigned int'
|               `-UnaryOperator 0x1553eb04120 <col:56, col:57> 'limb':'int' prefix '~' cannot overflow
|                 `-ImplicitCastExpr 0x1553eb04108 <col:57> 'limb':'int' <LValueToRValue>
|                   `-DeclRefExpr 0x1553eb040e8 <col:57> 'limb':'int' lvalue ParmVar 0x1553eb03900 'mask' 'limb':'int'
|-FunctionDecl 0x1553eb049a8 <line:1249:1, line:1408:1> line:1249:13 used point_add 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x1553eb042a0 <col:23, col:29> col:29 used x3 'limb *':'limb *'
| |-ParmVarDecl 0x1553eb04318 <col:33, col:39> col:39 used y3 'limb *':'limb *'
| |-ParmVarDecl 0x1553eb04390 <col:43, col:49> col:49 used z3 'limb *':'limb *'
| |-ParmVarDecl 0x1553eb04408 <line:1250:23, col:35> col:35 used x1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1553eb04480 <col:39, col:51> col:51 used y1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1553eb044f8 <col:55, col:67> col:67 used z1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1553eb04578 <line:1251:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x1553eb045f0 <col:40, col:57> col:57 used x2 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1553eb04668 <line:1252:23, col:40> col:40 used y2 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1553eb046e0 <col:44, col:61> col:61 used z2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1553eb081a0 <line:1253:1, line:1408:1>
|   |-DeclStmt 0x1553eaf4ec8 <line:1254:5, col:71>
|   | |-VarDecl 0x1553eb04ac0 <col:5, col:11> col:11 used ftmp 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb04b38 <col:5, col:17> col:17 used ftmp2 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb04bb0 <col:5, col:24> col:24 used ftmp3 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb04c28 <col:5, col:31> col:31 used ftmp4 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb04ca0 <col:5, col:38> col:38 used ftmp5 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb04d18 <col:5, col:45> col:45 used ftmp6 'felem':'limb [4]'
|   | |-VarDecl 0x1553eaf4d20 <col:5, col:52> col:52 used x_out 'felem':'limb [4]'
|   | |-VarDecl 0x1553eaf4d98 <col:5, col:59> col:59 used y_out 'felem':'limb [4]'
|   | `-VarDecl 0x1553eaf4e10 <col:5, col:66> col:66 used z_out 'felem':'limb [4]'
|   |-DeclStmt 0x1553eaf4fe8 <line:1255:5, col:24>
|   | |-VarDecl 0x1553eaf4ef0 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   | `-VarDecl 0x1553eaf4f68 <col:5, col:20> col:20 used tmp2 'longfelem':'limb [8]'
|   |-DeclStmt 0x1553eaf5288 <line:1256:5, col:54>
|   | |-VarDecl 0x1553eaf5010 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x1553eaf5088 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x1553eaf5100 <col:5, col:32> col:32 used small3 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x1553eaf5178 <col:5, col:40> col:40 used small4 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x1553eaf51f0 <col:5, col:48> col:48 used small5 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x1553eaf54a8 <line:1257:5, col:50>
|   | |-VarDecl 0x1553eaf52b0 <col:5, col:10> col:10 used x_equal 'limb':'int'
|   | |-VarDecl 0x1553eaf5328 <col:5, col:19> col:19 used y_equal 'limb':'int'
|   | |-VarDecl 0x1553eaf53a0 <col:5, col:28> col:28 used z1_is_zero 'limb':'int'
|   | `-VarDecl 0x1553eaf5418 <col:5, col:40> col:40 used z2_is_zero 'limb':'int'
|   |-CallExpr 0x1553eaf5550 <line:1259:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eaf5538 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf54c0 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf5580 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf54e0 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5100 'small3' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eaf5598 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eaf5518 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb044f8 'z1' 'const limb *':'const limb *'
|   |-BinaryOperator 0x1553eaf5698 <line:1261:5, col:43> 'limb':'int' '='
|   | |-DeclRefExpr 0x1553eaf55b0 <col:5> 'limb':'int' lvalue Var 0x1553eaf53a0 'z1_is_zero' 'limb':'int'
|   | `-CallExpr 0x1553eaf5640 <col:18, col:43> 'limb':'int'
|   |   |-ImplicitCastExpr 0x1553eaf5628 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1553eaf55e8 <col:18> 'limb (const u64 *)' Function 0x1553eafcf68 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x1553eaf5680 <col:37> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x1553eaf5668 <col:37> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x1553eaf5608 <col:37> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5100 'small3' 'smallfelem':'u64 [4]'
|   |-BinaryOperator 0x1553eaf5788 <line:1262:5, col:39> 'limb':'int' '='
|   | |-DeclRefExpr 0x1553eaf56b8 <col:5> 'limb':'int' lvalue Var 0x1553eaf5418 'z2_is_zero' 'limb':'int'
|   | `-CallExpr 0x1553eaf5748 <col:18, col:39> 'limb':'int'
|   |   |-ImplicitCastExpr 0x1553eaf5730 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1553eaf56f0 <col:18> 'limb (const u64 *)' Function 0x1553eafcf68 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x1553eaf5770 <col:37> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553eaf5710 <col:37> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eb046e0 'z2' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1553eaf5838 <line:1265:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1553eaf5820 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf57a8 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea05298 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eaf5868 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf57c8 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eaf5898 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf5880 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf5800 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5100 'small3' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1553eaf5940 <line:1266:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eaf5928 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf58b0 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf5970 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf58d0 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eaf59a0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf5988 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf5908 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eaf5a48 <line:1268:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553eaf5a30 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf59b8 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eaf5a78 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eaf59d8 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5010 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eaf5aa8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eaf5a90 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eaf5a10 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   |-IfStmt 0x1553eb04fe8 <line:1270:5, line:1323:5> has_else
|   | |-UnaryOperator 0x1553eaf5af8 <line:1270:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1553eaf5ae0 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1553eaf5ac0 <col:10> 'const int' lvalue ParmVar 0x1553eb04578 'mixed' 'const int'
|   | |-CompoundStmt 0x1553eaf6b18 <col:17, line:1306:5>
|   | | |-CallExpr 0x1553eaf5b88 <line:1272:9, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf5b70 <col:9> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf5b10 <col:9> 'void (limb *, const u64 *)' Function 0x1553ea05298 'smallfelem_square' 'void (limb *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x1553eaf5bb8 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf5b30 <col:27> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | | | `-ImplicitCastExpr 0x1553eaf5bd0 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1553eaf5b50 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eb046e0 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x1553eaf5c78 <line:1273:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf5c60 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf5be8 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf5ca8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf5c08 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04b38 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf5cd8 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1553eaf5cc0 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1553eaf5c40 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x1553eaf5d80 <line:1275:9, col:35> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf5d68 <col:9> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf5cf0 <col:9> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf5db0 <col:22> 'u64 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf5d10 <col:22> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5088 'small2' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf5de0 <col:30> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1553eaf5dc8 <col:30> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1553eaf5d48 <col:30> 'felem':'limb [4]' lvalue Var 0x1553eb04b38 'ftmp2' 'felem':'limb [4]'
|   | | |-CallExpr 0x1553eaf5e88 <line:1277:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf5e70 <col:9> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf5df8 <col:9> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf5eb8 <col:22> 'u64 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf5e18 <col:22> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf51f0 'small5' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf5ed0 <col:30> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1553eaf5e50 <col:30> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb04408 'x1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x1553eaf5f80 <line:1280:9, col:43> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf5f68 <col:9> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf5ee8 <col:9> 'void (limb *, const u64 *, const u64 *)' Function 0x1553ea08b38 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x1553eaf5fb8 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf5f08 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x1553eaf5fe8 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1553eaf5fd0 <col:29> 'u64 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1553eaf5f28 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf51f0 'small5' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf6018 <col:37> 'const u64 *':'const u64 *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1553eaf6000 <col:37> 'u64 *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1553eaf5f48 <col:37> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5088 'small2' 'smallfelem':'u64 [4]'
|   | | |-CallExpr 0x1553eaf60c0 <line:1281:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf60a8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6030 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf60f0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6050 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04bb0 'ftmp3' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf6120 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1553eaf6108 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1553eaf6088 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x1553eaf61c8 <line:1285:9, col:31> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf61b0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6138 <col:9> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf61f8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6158 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf6210 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1553eaf6190 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb044f8 'z1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x1553eaf62a0 <line:1286:9, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf6288 <col:9> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6228 <col:9> 'void (limb *, const u64 *)' Function 0x1553e9f8898 'felem_small_sum' 'void (limb *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x1553eaf62d0 <col:25> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6248 <col:25> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf62e8 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1553eaf6268 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eb046e0 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x1553eaf6378 <line:1290:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf6360 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6300 <col:9> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf63a8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6320 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | | | `-ImplicitCastExpr 0x1553eaf63d8 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1553eaf63c0 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1553eaf6340 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   | | |-CallExpr 0x1553eaf6468 <line:1291:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf6450 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf63f0 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf6498 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6410 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf64c8 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1553eaf64b0 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1553eaf6430 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x1553eaf6558 <line:1293:9, col:30> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf6540 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf64e0 <col:9> 'void (limb *, const limb *)' Function 0x1553e9f80b0 'felem_sum' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf6588 <col:19> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6500 <col:19> 'felem':'limb [4]' lvalue Var 0x1553eb04b38 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf65b8 <col:26> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1553eaf65a0 <col:26> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1553eaf6520 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   | | |-CallExpr 0x1553eaf6648 <line:1295:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf6630 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf65d0 <col:9> 'void (limb *, const limb *)' Function 0x1553e9fb720 'felem_diff' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf6678 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf65f0 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf66a8 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1553eaf6690 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1553eaf6610 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eb04b38 'ftmp2' 'felem':'limb [4]'
|   | | |-CallExpr 0x1553eaf6758 <line:1299:9, col:39> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf6740 <col:9> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf66c0 <col:9> 'void (limb *, const u64 *, const u64 *)' Function 0x1553ea08b38 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x1553eaf6790 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf66e0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x1553eaf67c0 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1553eaf67a8 <col:29> 'u64 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1553eaf6700 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5088 'small2' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf67d8 <col:37> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1553eaf6720 <col:37> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eb046e0 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x1553eaf6868 <line:1300:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf6850 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf67f0 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf6898 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6810 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04b38 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1553eaf68c8 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1553eaf68b0 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1553eaf6830 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x1553eaf6978 <line:1303:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x1553eaf6960 <col:9> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf68e0 <col:9> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1553eaf69b0 <col:19> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553eaf6900 <col:19> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x1553eaf69c8 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1553eaf6920 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb04480 'y1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x1553eaf69f8 <col:28> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1553eaf69e0 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1553eaf6940 <col:28> 'felem':'limb [4]' lvalue Var 0x1553eb04b38 'ftmp2' 'felem':'limb [4]'
|   | | `-CallExpr 0x1553eaf6aa0 <line:1304:9, col:32> 'void'
|   | |   |-ImplicitCastExpr 0x1553eaf6a88 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1553eaf6a10 <col:9> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |   |-ImplicitCastExpr 0x1553eaf6ad0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1553eaf6a30 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04d18 'ftmp6' 'felem':'limb [4]'
|   | |   `-ImplicitCastExpr 0x1553eaf6b00 <col:29> 'const limb *':'const limb *' <NoOp>
|   | |     `-ImplicitCastExpr 0x1553eaf6ae8 <col:29> 'limb *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x1553eaf6a68 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | `-CompoundStmt 0x1553eb04fb8 <line:1306:12, line:1323:5>
|   |   |-CallExpr 0x1553eaf6c20 <line:1312:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1553eaf6c08 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaf6ba8 <col:9> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1553eaf6c50 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaf6bc8 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04bb0 'ftmp3' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x1553eaf6c68 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1553eaf6be8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb04408 'x1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x1553eb04da0 <line:1316:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1553eaf6ce0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaf6c80 <col:9> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1553eb04dd0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eaf6ca0 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x1553eb04de8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1553eaf6cc0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb044f8 'z1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x1553eb04e80 <line:1317:9, col:30> 'void'
|   |   | |-ImplicitCastExpr 0x1553eb04e68 <col:9> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eb04e00 <col:9> 'void (limb *, const u64)' Function 0x1553e9f9098 'felem_scalar' 'void (limb *, const u64)'
|   |   | |-ImplicitCastExpr 0x1553eb04eb0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eb04e20 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x1553eb04ec8 <col:29> 'u64':'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1553eb04e40 <col:29> 'int' 2
|   |   `-CallExpr 0x1553eb04f58 <line:1321:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1553eb04f40 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eb04ee0 <col:9> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1553eb04f88 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1553eb04f00 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04d18 'ftmp6' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1553eb04fa0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1553eb04f20 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb04480 'y1' 'const limb *':'const limb *'
|   |-CallExpr 0x1553eb050a8 <line:1326:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1553eb05090 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05010 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x1553ea08b38 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eb050e0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05030 <col:20> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb050f8 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb05050 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eb045f0 'x2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1553eb05128 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb05110 <col:29> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb05070 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5010 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1553eb051d0 <line:1327:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb051b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05140 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb05200 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05160 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04c28 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb05230 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb05218 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb05198 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb052c0 <line:1330:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1553eb052a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05248 <col:5> 'void (limb *, const limb *)' Function 0x1553e9fcf70 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb052f0 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05268 <col:24> 'felem':'limb [4]' lvalue Var 0x1553eb04c28 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb05320 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb05308 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb05288 <col:31> 'felem':'limb [4]' lvalue Var 0x1553eb04bb0 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb053c8 <line:1332:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553eb053b0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05338 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb053f8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05358 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5178 'small4' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eb05428 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb05410 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb05390 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eb04c28 'ftmp4' 'felem':'limb [4]'
|   |-BinaryOperator 0x1553eb05528 <line:1334:5, col:40> 'limb':'int' '='
|   | |-DeclRefExpr 0x1553eb05440 <col:5> 'limb':'int' lvalue Var 0x1553eaf52b0 'x_equal' 'limb':'int'
|   | `-CallExpr 0x1553eb054d0 <col:15, col:40> 'limb':'int'
|   |   |-ImplicitCastExpr 0x1553eb054b8 <col:15> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1553eb05478 <col:15> 'limb (const u64 *)' Function 0x1553eafcf68 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x1553eb05510 <col:34> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x1553eb054f8 <col:34> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x1553eb05498 <col:34> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5178 'small4' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1553eb055e0 <line:1337:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1553eb055c8 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05548 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x1553eafb618 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb05618 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05568 <col:21> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb05648 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb05630 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb05588 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5178 'small4' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eb05678 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb05660 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb055a8 <col:34> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb05720 <line:1338:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb05708 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05690 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb05750 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb056b0 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaf4e10 'z_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb05780 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb05768 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb056e8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb05830 <line:1342:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1553eb05818 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05798 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x1553ea08b38 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eb05868 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb057b8 <col:20> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb05898 <col:25> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb05880 <col:25> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb057d8 <col:25> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5010 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eb058c8 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb058b0 <col:33> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb057f8 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5100 'small3' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1553eb05958 <line:1343:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb05940 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb058e0 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb05988 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05900 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb059b8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb059a0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb05920 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb05a68 <line:1346:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1553eb05a50 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb059d0 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x1553eafb618 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb05aa0 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb059f0 <col:21> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb05ab8 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb05a10 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eb04668 'y2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1553eb05ae8 <col:30> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb05ad0 <col:30> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb05a30 <col:30> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb05b78 <line:1347:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb05b60 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05b00 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb05ba8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05b20 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb05bd8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb05bc0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb05b40 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb05c68 <line:1350:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1553eb05c50 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05bf0 <col:5> 'void (limb *, const limb *)' Function 0x1553e9fcf70 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb05c98 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05c10 <col:24> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb05cc8 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb05cb0 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb05c30 <col:31> 'felem':'limb [4]' lvalue Var 0x1553eb04d18 'ftmp6' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb05d60 <line:1352:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1553eb05d48 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05ce0 <col:5> 'void (limb *, const u64)' Function 0x1553e9f9098 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1553eb05d90 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05d00 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb05da8 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eb05d20 <col:25> 'int' 2
|   |-CallExpr 0x1553eb05e38 <line:1354:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553eb05e20 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05dc0 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb05e68 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb05de0 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5010 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eb05e98 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb05e80 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb05e00 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eb04ca0 'ftmp5' 'felem':'limb [4]'
|   |-BinaryOperator 0x1553eb05f98 <line:1355:5, col:40> 'limb':'int' '='
|   | |-DeclRefExpr 0x1553eb05eb0 <col:5> 'limb':'int' lvalue Var 0x1553eaf5328 'y_equal' 'limb':'int'
|   | `-CallExpr 0x1553eb05f40 <col:15, col:40> 'limb':'int'
|   |   |-ImplicitCastExpr 0x1553eb05f28 <col:15> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1553eb05ee8 <col:15> 'limb (const u64 *)' Function 0x1553eafcf68 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x1553eb05f80 <col:34> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x1553eb05f68 <col:34> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x1553eb05f08 <col:34> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5010 'small1' 'smallfelem':'u64 [4]'
|   |-IfStmt 0x1553eb06330 <line:1357:5, line:1360:5>
|   | |-BinaryOperator 0x1553eb06108 <line:1357:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x1553eb06098 <col:9, col:32> 'int' '&&'
|   | | | |-BinaryOperator 0x1553eb06028 <col:9, col:20> 'int' '&&'
|   | | | | |-ImplicitCastExpr 0x1553eb05ff8 <col:9> 'limb':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x1553eb05fb8 <col:9> 'limb':'int' lvalue Var 0x1553eaf52b0 'x_equal' 'limb':'int'
|   | | | | `-ImplicitCastExpr 0x1553eb06010 <col:20> 'limb':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1553eb05fd8 <col:20> 'limb':'int' lvalue Var 0x1553eaf5328 'y_equal' 'limb':'int'
|   | | | `-UnaryOperator 0x1553eb06080 <col:31, col:32> 'int' prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x1553eb06068 <col:32> 'limb':'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1553eb06048 <col:32> 'limb':'int' lvalue Var 0x1553eaf53a0 'z1_is_zero' 'limb':'int'
|   | | `-UnaryOperator 0x1553eb060f0 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x1553eb060d8 <col:47> 'limb':'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1553eb060b8 <col:47> 'limb':'int' lvalue Var 0x1553eaf5418 'z2_is_zero' 'limb':'int'
|   | `-CompoundStmt 0x1553eb06310 <col:59, line:1360:5>
|   |   |-CallExpr 0x1553eb06220 <line:1358:9, col:44> 'void'
|   |   | |-ImplicitCastExpr 0x1553eb06208 <col:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553eb06128 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1553eb01478 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1553eb06270 <col:22> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1553eb06148 <col:22> 'limb *':'limb *' lvalue ParmVar 0x1553eb042a0 'x3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x1553eb06288 <col:26> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1553eb06168 <col:26> 'limb *':'limb *' lvalue ParmVar 0x1553eb04318 'y3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x1553eb062a0 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1553eb06188 <col:30> 'limb *':'limb *' lvalue ParmVar 0x1553eb04390 'z3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x1553eb062b8 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1553eb061a8 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb04408 'x1' 'const limb *':'const limb *'
|   |   | |-ImplicitCastExpr 0x1553eb062d0 <col:38> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1553eb061c8 <col:38> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb04480 'y1' 'const limb *':'const limb *'
|   |   | `-ImplicitCastExpr 0x1553eb062e8 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1553eb061e8 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb044f8 'z1' 'const limb *':'const limb *'
|   |   `-ReturnStmt 0x1553eb06300 <line:1359:9>
|   |-CallExpr 0x1553eb063c0 <line:1363:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eb063a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06348 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb063f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06368 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb06420 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb06408 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06388 <col:24> 'felem':'limb [4]' lvalue Var 0x1553eb04c28 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb064b8 <line:1364:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1553eb064a0 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06438 <col:5> 'void (limb *, const u64)' Function 0x1553e9f9098 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1553eb064e8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06458 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb06500 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eb06478 <col:24> 'int' 2
|   |-CallExpr 0x1553eb06590 <line:1366:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb06578 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06518 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb065c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06538 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eb065f0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb065d8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06558 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb06680 <line:1367:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb06668 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06608 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb066b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06628 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb066e0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb066c8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06648 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb06790 <line:1370:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553eb06778 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb066f8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb067c8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06718 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb067f8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb067e0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb06738 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eb04c28 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb06828 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb06810 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06758 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb068b8 <line:1371:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb068a0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06840 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb068e8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06860 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04b38 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb06918 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb06900 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06880 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb069c8 <line:1374:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553eb069b0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06930 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb06a00 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06950 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb06a30 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb06a18 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb06970 <col:20> 'felem':'limb [4]' lvalue Var 0x1553eb04bb0 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb06a60 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb06a48 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06990 <col:27> 'felem':'limb [4]' lvalue Var 0x1553eb04ac0 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb06af0 <line:1375:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb06ad8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06a78 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb06b20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06a98 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04c28 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb06b50 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb06b38 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06ab8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb06be0 <line:1378:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1553eb06bc8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06b68 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea05298 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eb06c10 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06b88 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eb06c40 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb06c28 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06ba8 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5010 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1553eb06ce8 <line:1379:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb06cd0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06c58 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb06d18 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06c78 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eaf4d20 'x_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb06d48 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb06d30 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06cb0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb06de8 <line:1380:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553eb06dd0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06d60 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb06e18 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06d80 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04bb0 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb06e48 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb06e30 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06db0 <col:25> 'felem':'limb [4]' lvalue Var 0x1553eb04c28 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb06ee0 <line:1381:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1553eb06ec8 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06e60 <col:5> 'void (limb *, const u64)' Function 0x1553e9f9098 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1553eb06f10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06e80 <col:18> 'felem':'limb [4]' lvalue Var 0x1553eb04c28 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb06f28 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eb06ea0 <col:25> 'int' 2
|   |-CallExpr 0x1553eb06fb8 <line:1382:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb06fa0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06f40 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f80b0 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb06fe8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb06f60 <col:15> 'felem':'limb [4]' lvalue Var 0x1553eb04c28 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb07018 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb07000 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb06f80 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb04b38 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb070a8 <line:1384:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553eb07090 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07030 <col:5> 'void (limb *, const limb *)' Function 0x1553e9fb720 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb070d8 <col:16> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07050 <col:16> 'felem':'limb [4]' lvalue Var 0x1553eaf4d20 'x_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb07108 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb070f0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb07070 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eb04c28 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb07198 <line:1388:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1553eb07180 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07120 <col:5> 'void (limb *, const limb *)' Function 0x1553e9fcf70 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb071c8 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07140 <col:24> 'felem':'limb [4]' lvalue Var 0x1553eb04bb0 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb071f8 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb071e0 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb07160 <col:31> 'felem':'limb [4]' lvalue Var 0x1553eaf4d20 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb072a8 <line:1390:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1553eb07290 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07210 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x1553eafb618 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb072e0 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07230 <col:21> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb07310 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb072f8 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb07250 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x1553eaf5010 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553eb07340 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb07328 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb07270 <col:34> 'felem':'limb [4]' lvalue Var 0x1553eb04bb0 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb07408 <line:1391:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x1553eb073f0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07358 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb07440 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07378 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4f68 'tmp2' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553eb07470 <col:21> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb07458 <col:21> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb073b0 <col:21> 'felem':'limb [4]' lvalue Var 0x1553eb04d18 'ftmp6' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb074a0 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb07488 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb073d0 <col:28> 'felem':'limb [4]' lvalue Var 0x1553eb04b38 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb07538 <line:1392:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eb07520 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb074b8 <col:5> 'void (limb *, const u64)' Function 0x1553e9f9708 'longfelem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1553eb07568 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb074d8 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4f68 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eb07580 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1553eb074f8 <col:28> 'int' 2
|   |-CallExpr 0x1553eb07610 <line:1394:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1553eb075f8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07598 <col:5> 'void (limb *, const limb *)' Function 0x1553e9fdd18 'longfelem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb07640 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb075b8 <col:20> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553eb07670 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb07658 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb075d8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4f68 'tmp2' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb07718 <line:1396:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1553eb07700 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07688 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8d40 'felem_reduce_zero105' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb07748 <col:26> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb076a8 <col:26> 'felem':'limb [4]' lvalue Var 0x1553eaf4d98 'y_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb07778 <col:33> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb07760 <col:33> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb076e0 <col:33> 'longfelem':'limb [8]' lvalue Var 0x1553eaf4ef0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553eb07880 <line:1399:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1553eb07868 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07790 <col:5> 'void (limb *, const u64 *, limb)' Function 0x1553eb03a68 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x1553eb078b8 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb077b0 <col:28> 'felem':'limb [4]' lvalue Var 0x1553eaf4d20 'x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb078d0 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb077d0 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eb045f0 'x2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1553eb078e8 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb077f0 <col:39> 'limb':'int' lvalue Var 0x1553eaf53a0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x1553eb079f0 <line:1400:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1553eb079d8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07900 <col:5> 'void (limb *, const limb *, limb)' Function 0x1553eb030e8 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1553eb07a28 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07920 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaf4d20 'x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb07a40 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb07940 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb04408 'x1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1553eb07a58 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb07960 <col:33> 'limb':'int' lvalue Var 0x1553eaf5418 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x1553eb07b08 <line:1401:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1553eb07af0 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07a70 <col:5> 'void (limb *, const u64 *, limb)' Function 0x1553eb03a68 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x1553eb07b40 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07a90 <col:28> 'felem':'limb [4]' lvalue Var 0x1553eaf4d98 'y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb07b58 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb07ab0 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eb04668 'y2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1553eb07b70 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb07ad0 <col:39> 'limb':'int' lvalue Var 0x1553eaf53a0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x1553eb07c20 <line:1402:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1553eb07c08 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07b88 <col:5> 'void (limb *, const limb *, limb)' Function 0x1553eb030e8 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1553eb07c58 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07ba8 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaf4d98 'y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb07c70 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb07bc8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb04480 'y1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1553eb07c88 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb07be8 <col:33> 'limb':'int' lvalue Var 0x1553eaf5418 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x1553eb07d38 <line:1403:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1553eb07d20 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07ca0 <col:5> 'void (limb *, const u64 *, limb)' Function 0x1553eb03a68 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x1553eb07d70 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07cc0 <col:28> 'felem':'limb [4]' lvalue Var 0x1553eaf4e10 'z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb07d88 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb07ce0 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1553eb046e0 'z2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1553eb07da0 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb07d00 <col:39> 'limb':'int' lvalue Var 0x1553eaf53a0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x1553eb07e50 <line:1404:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1553eb07e38 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07db8 <col:5> 'void (limb *, const limb *, limb)' Function 0x1553eb030e8 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1553eb07e88 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07dd8 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaf4e10 'z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb07ea0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb07df8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1553eb044f8 'z1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1553eb07eb8 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553eb07e18 <col:33> 'limb':'int' lvalue Var 0x1553eaf5418 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x1553eb07f48 <line:1405:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb07f30 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07ed0 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb07f78 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb07ef0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1553eb042a0 'x3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1553eb07fa8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb07f90 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb07f10 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaf4d20 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb08038 <line:1406:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553eb08020 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb07fc0 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb08068 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb07fe0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1553eb04318 'y3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1553eb08098 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb08080 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb08000 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaf4d98 'y_out' 'felem':'limb [4]'
|   `-CallExpr 0x1553eb08128 <line:1407:5, col:27> 'void'
|     |-ImplicitCastExpr 0x1553eb08110 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eb080b0 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1553eb08158 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eb080d0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1553eb04390 'z3' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1553eb08188 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1553eb08170 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553eb080f0 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eaf4e10 'z_out' 'felem':'limb [4]'
|-FunctionDecl 0x1553eb089c8 <line:1414:1, line:1428:1> line:1414:13 used point_add_small 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' static
| |-ParmVarDecl 0x1553eb08380 <col:29, col:40> col:40 used x3 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eb083f8 <col:44, col:55> col:55 used y3 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eb08470 <col:59, col:70> col:70 used z3 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eb084e8 <line:1415:29, col:40> col:40 used x1 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eb08560 <col:44, col:55> col:55 used y1 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eb085d8 <col:59, col:70> col:70 used z1 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eb08650 <line:1416:29, col:40> col:40 used x2 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eb086c8 <col:44, col:55> col:55 used y2 'u64 *':'u64 *'
| |-ParmVarDecl 0x1553eb08740 <col:59, col:70> col:70 used z2 'u64 *':'u64 *'
| `-CompoundStmt 0x1553eb09848 <line:1417:1, line:1428:1>
|   |-DeclStmt 0x1553eb08c50 <line:1418:5, col:39>
|   | |-VarDecl 0x1553eb08ad8 <col:5, col:11> col:11 used felem_x3 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb08b50 <col:5, col:21> col:21 used felem_y3 'felem':'limb [4]'
|   | `-VarDecl 0x1553eb08bc8 <col:5, col:31> col:31 used felem_z3 'felem':'limb [4]'
|   |-DeclStmt 0x1553eb08e48 <line:1419:5, col:39>
|   | |-VarDecl 0x1553eb08c78 <col:5, col:11> col:11 used felem_x1 'felem':'limb [4]'
|   | |-VarDecl 0x1553eb08cf0 <col:5, col:21> col:21 used felem_y1 'felem':'limb [4]'
|   | `-VarDecl 0x1553eb08dc0 <col:5, col:31> col:31 used felem_z1 'felem':'limb [4]'
|   |-CallExpr 0x1553eb08ef0 <line:1420:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1553eb08ed8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb08e60 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eb08f20 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb08e80 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eb08c78 'felem_x1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb08f50 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb08f38 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553eb08eb8 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x1553eb084e8 'x1' 'u64 *':'u64 *'
|   |-CallExpr 0x1553eb08ff8 <line:1421:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1553eb08fe0 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb08f68 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eb09028 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb08f88 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eb08cf0 'felem_y1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb09058 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb09040 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553eb08fc0 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x1553eb08560 'y1' 'u64 *':'u64 *'
|   |-CallExpr 0x1553eb09100 <line:1422:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1553eb090e8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb09070 <col:5> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eb09130 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb09090 <col:23> 'felem':'limb [4]' lvalue Var 0x1553eb08dc0 'felem_z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553eb09160 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb09148 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553eb090c8 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x1553eb085d8 'z1' 'u64 *':'u64 *'
|   |-CallExpr 0x1553eb093a0 <line:1423:5, line:1424:25> 'void'
|   | |-ImplicitCastExpr 0x1553eb09388 <line:1423:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb09178 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x1553eb049a8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x1553eb09410 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb09198 <col:15> 'felem':'limb [4]' lvalue Var 0x1553eb08ad8 'felem_x3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb09428 <col:25> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb091d0 <col:25> 'felem':'limb [4]' lvalue Var 0x1553eb08b50 'felem_y3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb09440 <col:35> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb09208 <col:35> 'felem':'limb [4]' lvalue Var 0x1553eb08bc8 'felem_z3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb09470 <col:45> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb09458 <col:45> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb09240 <col:45> 'felem':'limb [4]' lvalue Var 0x1553eb08c78 'felem_x1' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb094a0 <col:55> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb09488 <col:55> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb09260 <col:55> 'felem':'limb [4]' lvalue Var 0x1553eb08cf0 'felem_y1' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1553eb094d0 <col:65> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb094b8 <col:65> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553eb09280 <col:65> 'felem':'limb [4]' lvalue Var 0x1553eb08dc0 'felem_z1' 'felem':'limb [4]'
|   | |-IntegerLiteral 0x1553eb092a0 <col:75> 'int' 0
|   | |-ImplicitCastExpr 0x1553eb09500 <line:1424:15> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb094e8 <col:15> 'u64 *':'u64 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1553eb092c8 <col:15> 'u64 *':'u64 *' lvalue ParmVar 0x1553eb08650 'x2' 'u64 *':'u64 *'
|   | |-ImplicitCastExpr 0x1553eb09530 <col:19> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553eb09518 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1553eb092e8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1553eb086c8 'y2' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1553eb09560 <col:23> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb09548 <col:23> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553eb09308 <col:23> 'u64 *':'u64 *' lvalue ParmVar 0x1553eb08740 'z2' 'u64 *':'u64 *'
|   |-CallExpr 0x1553eb095f0 <line:1425:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553eb095d8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb09578 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb09620 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb09598 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1553eb08380 'x3' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1553eb09650 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb09638 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb095b8 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb08ad8 'felem_x3' 'felem':'limb [4]'
|   |-CallExpr 0x1553eb096e0 <line:1426:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553eb096c8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553eb09668 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553eb09710 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553eb09688 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1553eb083f8 'y3' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1553eb09740 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553eb09728 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553eb096a8 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb08b50 'felem_y3' 'felem':'limb [4]'
|   `-CallExpr 0x1553eb097d0 <line:1427:5, col:30> 'void'
|     |-ImplicitCastExpr 0x1553eb097b8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553eb09758 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x1553eb09800 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553eb09778 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1553eb08470 'z3' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x1553eb09830 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1553eb09818 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1553eb09798 <col:22> 'felem':'limb [4]' lvalue Var 0x1553eb08bc8 'felem_z3' 'felem':'limb [4]'
|-VarDecl 0x1553eb09b08 <line:1467:1, line:1624:1> line:1467:25 used gmul 'const smallfelem [2][16][3]' static cinit
| `-InitListExpr 0x1553ec1d050 <col:42, line:1624:1> 'const smallfelem [2][16][3]'
|   |-InitListExpr 0x1553ec1d3a0 <line:1468:5, line:1545:20> 'const smallfelem [16][3]'
|   | |-InitListExpr 0x1553ec1d490 <line:1468:6, line:1470:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec1d4f8 <line:1468:7, col:18> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec1d558 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb09b70 <col:8> 'int' 0
|   | | | |-ImplicitCastExpr 0x1553ec1d570 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb09b98 <col:11> 'int' 0
|   | | | |-ImplicitCastExpr 0x1553ec1d588 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb09bc0 <col:14> 'int' 0
|   | | | `-ImplicitCastExpr 0x1553ec1d5a0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553eb09be8 <col:17> 'int' 0
|   | | |-InitListExpr 0x1553ec1d5c8 <line:1469:7, col:18> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec1d628 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb09c70 <col:8> 'int' 0
|   | | | |-ImplicitCastExpr 0x1553ec1d640 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb09c98 <col:11> 'int' 0
|   | | | |-ImplicitCastExpr 0x1553ec1d658 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb09cc0 <col:14> 'int' 0
|   | | | `-ImplicitCastExpr 0x1553ec1d670 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553eb09ce8 <col:17> 'int' 0
|   | | `-InitListExpr 0x1553ec1d698 <line:1470:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec1d6f8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb09d70 <col:8> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1d710 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb09d98 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1d728 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb09dc0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec1d740 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553eb09de8 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec1d788 <line:1471:6, line:1475:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec1d7f0 <line:1471:7, line:1472:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553eb09ec8 <line:1471:8> 'unsigned long long' 17627433388654248598
|   | | | |-ImplicitCastExpr 0x1553ec1d850 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb09ef0 <col:28> 'long long' 8575836109218198432
|   | | | |-IntegerLiteral 0x1553eb09f18 <col:48> 'unsigned long long' 17923454489921339634
|   | | | `-ImplicitCastExpr 0x1553ec1d868 <line:1472:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553eb09f40 <col:8> 'long long' 7716867327612699207
|   | | |-InitListExpr 0x1553ec1d890 <line:1473:7, line:1474:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553eb09fc8 <line:1473:8> 'unsigned long long' 14678990851816772085
|   | | | |-ImplicitCastExpr 0x1553ec1d8f0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb09ff0 <col:28> 'long long' 3156516839386865358
|   | | | |-IntegerLiteral 0x1553eb0a018 <col:48> 'unsigned long long' 10297457778147434006
|   | | | `-ImplicitCastExpr 0x1553ec1d908 <line:1474:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553eb0a040 <col:8> 'long long' 5756518291402817435
|   | | `-InitListExpr 0x1553ec1d930 <line:1475:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec1d990 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0a0c8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec1d9a8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0a0f0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1d9c0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0a118 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec1d9d8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553eb0a140 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec1da20 <line:1476:6, line:1480:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec1da88 <line:1476:7, line:1477:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553eb0a220 <line:1476:8> 'unsigned long long' 10441416191629384547
|   | | | |-ImplicitCastExpr 0x1553ec1dae8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0a248 <col:28> 'long long' 2974974633094487934
|   | | | |-IntegerLiteral 0x1553eb0a270 <col:48> 'unsigned long long' 9552795814555690462
|   | | | `-ImplicitCastExpr 0x1553ec1db00 <line:1477:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553eb0a298 <col:8> 'long long' 1128189898177751717
|   | | |-InitListExpr 0x1553ec1db28 <line:1478:7, line:1479:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553eb0a320 <line:1478:8> 'unsigned long long' 16433956460045938407
|   | | | |-ImplicitCastExpr 0x1553ec1db88 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0a348 <col:28> 'long long' 3796998824736490229
|   | | | |-ImplicitCastExpr 0x1553ec1dba0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0a370 <col:48> 'long long' 8019455993423272075
|   | | | `-IntegerLiteral 0x1553eb0a398 <line:1479:8> 'unsigned long long' 13831762719979317261
|   | | `-InitListExpr 0x1553ec1dbc8 <line:1480:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec1dc28 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0a420 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec1dc40 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0a448 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1dc58 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0a470 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec1dc70 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553eb0a498 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec1dcb8 <line:1481:6, line:1485:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec1dd20 <line:1481:7, line:1482:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553eb0a578 <line:1481:8> 'unsigned long long' 10608542154395062959
|   | | | |-IntegerLiteral 0x1553eb0a5a0 <col:28> 'unsigned long long' 16819986920937746938
|   | | | |-IntegerLiteral 0x1553eb0a5c8 <col:48> 'unsigned long long' 12850952123954767753
|   | | | `-ImplicitCastExpr 0x1553ec1dd80 <line:1482:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553eb0a5f0 <col:8> 'long long' 3461662536726114927
|   | | |-InitListExpr 0x1553ec1dda8 <line:1483:7, line:1484:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553eb0a678 <line:1483:8> 'unsigned long long' 12273613631375091616
|   | | | |-ImplicitCastExpr 0x1553ec1de08 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0a6a0 <col:28> 'long long' 6607324557975488165
|   | | | |-ImplicitCastExpr 0x1553ec1de20 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0a6c8 <col:48> 'long long' 9159718173381901423
|   | | | `-ImplicitCastExpr 0x1553ec1de38 <line:1484:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553eb0a6f0 <col:8> 'long long' 8262636234751034948
|   | | `-InitListExpr 0x1553ec1de60 <line:1485:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec1dec0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0a778 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec1ded8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0a7a0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1def0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0a7c8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec1df08 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553eb0a7f0 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec1df50 <line:1486:6, line:1490:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec1dfb8 <line:1486:7, line:1487:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec1e018 <line:1486:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0a8d0 <col:8> 'long long' 6325393404965010821
|   | | | |-IntegerLiteral 0x1553eb0a8f8 <col:28> 'unsigned long long' 18173712786924235459
|   | | | |-IntegerLiteral 0x1553eb0a920 <col:48> 'unsigned long long' 18129292894149178990
|   | | | `-ImplicitCastExpr 0x1553ec1e030 <line:1487:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553eb0a948 <col:8> 'long long' 4935227880232410727
|   | | |-InitListExpr 0x1553ec1e058 <line:1488:7, line:1489:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec1e0b8 <line:1488:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0a9d0 <col:8> 'long long' 900213915829558066
|   | | | |-ImplicitCastExpr 0x1553ec1e0d0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0a9f8 <col:28> 'long long' 4410321002173228288
|   | | | |-IntegerLiteral 0x1553eb0aa20 <col:48> 'unsigned long long' 16226079771716136951
|   | | | `-ImplicitCastExpr 0x1553ec1e0e8 <line:1489:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553eb0aa48 <col:8> 'long long' 3262899348601647598
|   | | `-InitListExpr 0x1553ec1e110 <line:1490:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec1e170 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0aad0 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec1e188 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0aaf8 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1e1a0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553eb0ab20 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec1e1b8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553eb0ab48 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec1e200 <line:1491:6, line:1495:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec1e268 <line:1491:7, line:1492:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec1e2c8 <line:1491:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0ac28 <col:8> 'long long' 1410924739154491007
|   | | | |-IntegerLiteral 0x1553eb0ac50 <col:28> 'unsigned long long' 17257720289925140919
|   | | | |-IntegerLiteral 0x1553eb0ac78 <col:48> 'unsigned long long' 15980467524946754656
|   | | | `-IntegerLiteral 0x1553eb0aca0 <line:1492:8> 'unsigned long long' 17263732451459232511
|   | | |-InitListExpr 0x1553ec1e2f0 <line:1493:7, line:1494:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec1e350 <line:1493:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0ad28 <col:8> 'long long' 1828520442025400488
|   | | | |-ImplicitCastExpr 0x1553ec1e368 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553eb0ad50 <col:28> 'long long' 2528836098827360064
|   | | | |-IntegerLiteral 0x1553eb0ad78 <col:48> 'unsigned long long' 13974273849645867420
|   | | | `-ImplicitCastExpr 0x1553ec1e380 <line:1494:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec18f70 <col:8> 'long long' 6998206532957187227
|   | | `-InitListExpr 0x1553ec1e3a8 <line:1495:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec1e408 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec18ff8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec1e420 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec19020 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1e438 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec19048 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec1e450 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553ec19070 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec1e498 <line:1496:6, line:1500:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec1e500 <line:1496:7, line:1497:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553ec19150 <line:1496:8> 'unsigned long long' 14619442581211706556
|   | | | |-ImplicitCastExpr 0x1553ec1e560 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19178 <col:28> 'long long' 2969806602452450358
|   | | | |-ImplicitCastExpr 0x1553ec1e578 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec191a0 <col:48> 'long long' 9073174912575879359
|   | | | `-ImplicitCastExpr 0x1553ec1e590 <line:1497:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec191c8 <col:8> 'long long' 6126693716495300056
|   | | |-InitListExpr 0x1553ec1e5b8 <line:1498:7, line:1499:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec1e618 <line:1498:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19250 <col:8> 'long long' 4971941098638972492
|   | | | |-IntegerLiteral 0x1553ec19278 <col:28> 'unsigned long long' 11507776179333430241
|   | | | |-ImplicitCastExpr 0x1553ec1e630 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec192a0 <col:48> 'long long' 791015059971985637
|   | | | `-ImplicitCastExpr 0x1553ec1e648 <line:1499:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec192c8 <col:8> 'long long' 1545126667594020945
|   | | `-InitListExpr 0x1553ec1e670 <line:1500:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec1e6d0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec19350 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec1e6e8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec19378 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1e700 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec193a0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec1e718 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553ec193c8 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec1e760 <line:1501:6, line:1505:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec1e7c8 <line:1501:7, line:1502:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553ec194a8 <line:1501:8> 'unsigned long long' 16469324088139898369
|   | | | |-ImplicitCastExpr 0x1553ec1e828 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec194d0 <col:28> 'long long' 8992990158826594086
|   | | | |-IntegerLiteral 0x1553ec194f8 <col:48> 'unsigned long long' 11738901276316812177
|   | | | `-IntegerLiteral 0x1553ec19520 <line:1502:8> 'unsigned long long' 16959842912971080170
|   | | |-InitListExpr 0x1553ec1e850 <line:1503:7, line:1504:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553ec195a8 <line:1503:8> 'unsigned long long' 14612236727341429881
|   | | | |-IntegerLiteral 0x1553ec195d0 <col:28> 'unsigned long long' 9651826421517301317
|   | | | |-ImplicitCastExpr 0x1553ec1e8b0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec195f8 <col:48> 'long long' 689304323628231918
|   | | | `-IntegerLiteral 0x1553ec19620 <line:1504:8> 'unsigned long long' 16932816531315540347
|   | | `-InitListExpr 0x1553ec1e8d8 <line:1505:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec1e938 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec196a8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec1e950 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec196d0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1e968 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec196f8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec1e980 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553ec19720 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec1e9c8 <line:1506:6, line:1510:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec1ea30 <line:1506:7, line:1507:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec1ea90 <line:1506:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19800 <col:8> 'long long' 7850354671997102270
|   | | | |-IntegerLiteral 0x1553ec19828 <col:28> 'unsigned long long' 10827662381879310666
|   | | | |-ImplicitCastExpr 0x1553ec1eaa8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19850 <col:48> 'long long' 2825726755471450053
|   | | | `-IntegerLiteral 0x1553ec19878 <line:1507:8> 'unsigned long long' 12021117271037743734
|   | | |-InitListExpr 0x1553ec1ead0 <line:1508:7, line:1509:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553ec19900 <line:1508:8> 'unsigned long long' 17490494635306907124
|   | | | |-IntegerLiteral 0x1553ec19928 <col:28> 'unsigned long long' 9388476954023560603
|   | | | |-ImplicitCastExpr 0x1553ec1eb30 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19950 <col:48> 'long long' 7401871309252586719
|   | | | `-ImplicitCastExpr 0x1553ec1eb48 <line:1509:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec19978 <col:8> 'long long' 7444314345419016214
|   | | `-InitListExpr 0x1553ec1eb70 <line:1510:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec1ebd0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec19a00 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec1ebe8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec19a28 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1ec00 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec19a50 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec1ec18 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553ec19a78 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec1ec60 <line:1511:6, line:1515:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec1ecc8 <line:1511:7, line:1512:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec1ed28 <line:1511:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19b58 <col:8> 'long long' 3311425576568130110
|   | | | |-ImplicitCastExpr 0x1553ec1ed40 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19b80 <col:28> 'long long' 8421783014622864747
|   | | | |-ImplicitCastExpr 0x1553ec1ed58 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19ba8 <col:48> 'long long' 3568363273336651483
|   | | | `-ImplicitCastExpr 0x1553ec1ed70 <line:1512:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec19bd0 <col:8> 'long long' 5653880613779398061
|   | | |-InitListExpr 0x1553ec1ed98 <line:1513:7, line:1514:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553ec19c58 <line:1513:8> 'unsigned long long' 11872440132187765680
|   | | | |-IntegerLiteral 0x1553ec19c80 <col:28> 'unsigned long long' 18130051117790339749
|   | | | |-ImplicitCastExpr 0x1553ec1edf8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19ca8 <col:48> 'long long' 2215777003961086593
|   | | | `-ImplicitCastExpr 0x1553ec1ee10 <line:1514:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec19cd0 <col:8> 'long long' 4808032968947992163
|   | | `-InitListExpr 0x1553ec1ee38 <line:1515:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec1ee98 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec19d58 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec1eeb0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec19d80 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec1eec8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec19da8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec1eee0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553ec19dd0 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec1ef28 <line:1516:6, line:1520:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec16f60 <line:1516:7, line:1517:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec16fc0 <line:1516:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19eb0 <col:8> 'long long' 7996512021131061433
|   | | | |-IntegerLiteral 0x1553ec19ed8 <col:28> 'unsigned long long' 15130017193297502513
|   | | | |-ImplicitCastExpr 0x1553ec16fd8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19f00 <col:48> 'long long' 9213270411358356600
|   | | | `-ImplicitCastExpr 0x1553ec16ff0 <line:1517:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec19f28 <col:8> 'long long' 8685067594097287245
|   | | |-InitListExpr 0x1553ec17018 <line:1518:7, line:1519:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553ec19fb0 <line:1518:8> 'unsigned long long' 11268772705129781622
|   | | | |-ImplicitCastExpr 0x1553ec17078 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec19fd8 <col:28> 'long long' 7696184534049525071
|   | | | |-IntegerLiteral 0x1553ec1a000 <col:48> 'unsigned long long' 16020170479003278831
|   | | | `-IntegerLiteral 0x1553ec1a028 <line:1519:8> 'unsigned long long' 13171691205910774561
|   | | `-InitListExpr 0x1553ec170a0 <line:1520:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec17100 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1a0b0 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec17118 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1a0d8 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec17130 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1a100 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec17148 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553ec1a128 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec17190 <line:1521:6, line:1525:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec171f8 <line:1521:7, line:1522:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec17258 <line:1521:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a208 <col:8> 'long long' 9194414004818818419
|   | | | |-ImplicitCastExpr 0x1553ec17270 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a230 <col:28> 'long long' 6594076190914360470
|   | | | |-ImplicitCastExpr 0x1553ec17288 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a258 <col:48> 'long long' 6439111866792803502
|   | | | `-ImplicitCastExpr 0x1553ec172a0 <line:1522:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec1a280 <col:8> 'long long' 903178766089130631
|   | | |-InitListExpr 0x1553ec172c8 <line:1523:7, line:1524:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec17328 <line:1523:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a308 <col:8> 'long long' 4204039210694913192
|   | | | |-ImplicitCastExpr 0x1553ec17340 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a330 <col:28> 'long long' 8971594821414511859
|   | | | |-ImplicitCastExpr 0x1553ec17358 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a358 <col:48> 'long long' 1788410310064137898
|   | | | `-IntegerLiteral 0x1553ec1a380 <line:1524:8> 'unsigned long long' 15951150250963508678
|   | | `-InitListExpr 0x1553ec17380 <line:1525:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec173e0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1a408 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec173f8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1a430 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec17410 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1a458 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec17428 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553ec1a480 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec17470 <line:1526:6, line:1530:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec174d8 <line:1526:7, line:1527:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553ec1a560 <line:1526:8> 'unsigned long long' 16819389878359993612
|   | | | |-ImplicitCastExpr 0x1553ec17538 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a588 <col:28> 'long long' 4873073520113514799
|   | | | |-IntegerLiteral 0x1553ec1a5b0 <col:48> 'unsigned long long' 17284995840217074163
|   | | | `-ImplicitCastExpr 0x1553ec17550 <line:1527:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec1a5d8 <col:8> 'long long' 7562463719493563494
|   | | |-InitListExpr 0x1553ec17578 <line:1528:7, line:1529:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553ec1a660 <line:1528:8> 'unsigned long long' 14843327652293659978
|   | | | |-ImplicitCastExpr 0x1553ec175d8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a688 <col:28> 'long long' 7389276838502450726
|   | | | |-ImplicitCastExpr 0x1553ec175f0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a6b0 <col:48> 'long long' 6939722928163815411
|   | | | `-ImplicitCastExpr 0x1553ec17608 <line:1529:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec1a6d8 <col:8> 'long long' 3583110508470077984
|   | | `-InitListExpr 0x1553ec17630 <line:1530:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec17690 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1a760 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec176a8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1a788 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec176c0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1a7b0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec176d8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553ec1a7d8 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec17720 <line:1531:6, line:1535:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec17788 <line:1531:7, line:1532:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553ec1a8b8 <line:1531:8> 'unsigned long long' 15234348820970614399
|   | | | |-ImplicitCastExpr 0x1553ec177e8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a8e0 <col:28> 'long long' 944084751294372904
|   | | | |-ImplicitCastExpr 0x1553ec17800 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a908 <col:48> 'long long' 7366871684117878688
|   | | | `-ImplicitCastExpr 0x1553ec17818 <line:1532:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec1a930 <col:8> 'long long' 4634977297227980217
|   | | |-InitListExpr 0x1553ec17840 <line:1533:7, line:1534:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec178a0 <line:1533:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1a9b8 <col:8> 'long long' 2547392258115446251
|   | | | |-IntegerLiteral 0x1553ec1a9e0 <col:28> 'unsigned long long' 16655704750641106011
|   | | | |-IntegerLiteral 0x1553ec1aa08 <col:48> 'unsigned long long' 9668074726414027976
|   | | | `-IntegerLiteral 0x1553ec1aa30 <line:1534:8> 'unsigned long long' 18360979218528009313
|   | | `-InitListExpr 0x1553ec178c8 <line:1535:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec17928 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1aab8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec17940 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1aae0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec17958 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1ab08 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec17970 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553ec1ab30 <col:17> 'int' 0
|   | |-InitListExpr 0x1553ec179b8 <line:1536:6, line:1540:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1553ec17a20 <line:1536:7, line:1537:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1553ec17a80 <line:1536:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1ac10 <col:8> 'long long' 8373436425878949804
|   | | | |-IntegerLiteral 0x1553ec1ac38 <col:28> 'unsigned long long' 12672949858381244324
|   | | | |-ImplicitCastExpr 0x1553ec17a98 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1ac60 <col:48> 'long long' 1311113366226075514
|   | | | `-ImplicitCastExpr 0x1553ec17ab0 <line:1537:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec1ac88 <col:8> 'long long' 2224139274171900954
|   | | |-InitListExpr 0x1553ec17ad8 <line:1538:7, line:1539:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1553ec1ad10 <line:1538:8> 'unsigned long long' 10349464555096373316
|   | | | |-ImplicitCastExpr 0x1553ec17b38 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1ad38 <col:28> 'long long' 3954278663023761687
|   | | | |-ImplicitCastExpr 0x1553ec17b50 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1553ec1ad60 <col:48> 'long long' 884381536816411552
|   | | | `-ImplicitCastExpr 0x1553ec17b68 <line:1539:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1553ec1ad88 <col:8> 'long long' 4832447639533305084
|   | | `-InitListExpr 0x1553ec17b90 <line:1540:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1553ec17bf0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1ae10 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1553ec17c08 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1ae38 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1553ec17c20 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1553ec1ae60 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1553ec17c38 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1553ec1ae88 <col:17> 'int' 0
|   | `-InitListExpr 0x1553ec17c80 <line:1541:6, line:1545:19> 'const smallfelem [3]'
|   |   |-InitListExpr 0x1553ec17ce8 <line:1541:7, line:1542:26> 'const smallfelem':'u64 const[4]'
|   |   | |-IntegerLiteral 0x1553ec1efa0 <line:1541:8> 'unsigned long long' 10814749165039220965
|   |   | |-ImplicitCastExpr 0x1553ec17d48 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1553ec1efc8 <col:28> 'long long' 7399658494733087819
|   |   | |-ImplicitCastExpr 0x1553ec17d60 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1553ec1eff0 <col:48> 'long long' 741483134296471098
|   |   | `-IntegerLiteral 0x1553ec1f018 <line:1542:8> 'unsigned long long' 13010378930286731804
|   |   |-InitListExpr 0x1553ec17d88 <line:1543:7, line:1544:26> 'const smallfelem':'u64 const[4]'
|   |   | |-ImplicitCastExpr 0x1553ec17de8 <line:1543:8> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1553ec1f0a0 <col:8> 'long long' 498686754927156013
|   |   | |-IntegerLiteral 0x1553ec1f0c8 <col:28> 'unsigned long long' 13836434663360106392
|   |   | |-ImplicitCastExpr 0x1553ec17e00 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1553ec1f0f0 <col:48> 'long long' 7211137999908042344
|   |   | `-IntegerLiteral 0x1553ec1f118 <line:1544:8> 'unsigned long long' 18068465070929427883
|   |   `-InitListExpr 0x1553ec17e28 <line:1545:7, col:18> 'const smallfelem':'u64 const[4]'
|   |     |-ImplicitCastExpr 0x1553ec17e88 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x1553ec1f1a0 <col:8> 'int' 1
|   |     |-ImplicitCastExpr 0x1553ec17ea0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x1553ec1f1c8 <col:11> 'int' 0
|   |     |-ImplicitCastExpr 0x1553ec17eb8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x1553ec1f1f0 <col:14> 'int' 0
|   |     `-ImplicitCastExpr 0x1553ec17ed0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   |       `-IntegerLiteral 0x1553ec1f218 <col:17> 'int' 0
|   `-InitListExpr 0x1553ec181e8 <line:1546:5, line:1623:20> 'const smallfelem [16][3]'
|     |-InitListExpr 0x1553ec182d8 <line:1546:6, line:1548:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec18340 <line:1546:7, col:18> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec183a0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1f3b8 <col:8> 'int' 0
|     | | |-ImplicitCastExpr 0x1553ec183b8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1f3e0 <col:11> 'int' 0
|     | | |-ImplicitCastExpr 0x1553ec183d0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1f408 <col:14> 'int' 0
|     | | `-ImplicitCastExpr 0x1553ec183e8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec1f430 <col:17> 'int' 0
|     | |-InitListExpr 0x1553ec18410 <line:1547:7, col:18> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec18470 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1f4b8 <col:8> 'int' 0
|     | | |-ImplicitCastExpr 0x1553ec18488 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1f4e0 <col:11> 'int' 0
|     | | |-ImplicitCastExpr 0x1553ec184a0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1f508 <col:14> 'int' 0
|     | | `-ImplicitCastExpr 0x1553ec184b8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec1f530 <col:17> 'int' 0
|     | `-InitListExpr 0x1553ec184e0 <line:1548:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec18540 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1f5b8 <col:8> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec18558 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1f5e0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec18570 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1f608 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec18588 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec1f630 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec185d0 <line:1549:6, line:1553:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec18638 <line:1549:7, line:1550:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec18698 <line:1549:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1f710 <col:8> 'long long' 4204847071378430275
|     | | |-ImplicitCastExpr 0x1553ec186b0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1f738 <col:28> 'long long' 1925598036946706358
|     | | |-ImplicitCastExpr 0x1553ec186c8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1f760 <col:48> 'long long' 2406447439032381914
|     | | `-ImplicitCastExpr 0x1553ec186e0 <line:1550:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec1f788 <col:8> 'long long' 9215327188090531721
|     | |-InitListExpr 0x1553ec18708 <line:1551:7, line:1552:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec1f810 <line:1551:8> 'unsigned long long' 15351949985270505729
|     | | |-ImplicitCastExpr 0x1553ec18768 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1f838 <col:28> 'long long' 8409299702805885458
|     | | |-IntegerLiteral 0x1553ec1f860 <col:48> 'unsigned long long' 11459959024969885425
|     | | `-IntegerLiteral 0x1553ec1f888 <line:1552:8> 'unsigned long long' 16615982825261643300
|     | `-InitListExpr 0x1553ec18790 <line:1553:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec187f0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1f910 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec18808 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1f938 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec18820 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1f960 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec18838 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec1f988 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec18880 <line:1554:6, line:1558:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec188e8 <line:1554:7, line:1555:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec1fa68 <line:1554:8> 'unsigned long long' 12126691010890834318
|     | | |-IntegerLiteral 0x1553ec1fa90 <col:28> 'unsigned long long' 16835899823751823681
|     | | |-ImplicitCastExpr 0x1553ec18948 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1fab8 <col:48> 'long long' 6307303622281718018
|     | | `-ImplicitCastExpr 0x1553ec18960 <line:1555:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec1fae0 <col:8> 'long long' 5357964581017122726
|     | |-InitListExpr 0x1553ec18988 <line:1556:7, line:1557:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec189e8 <line:1556:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1fb68 <col:8> 'long long' 858738897768626240
|     | | |-ImplicitCastExpr 0x1553ec18a00 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1fb90 <col:28> 'long long' 7092519962948038045
|     | | |-IntegerLiteral 0x1553ec1fbb8 <col:48> 'unsigned long long' 14133989960413510976
|     | | `-IntegerLiteral 0x1553ec1fbe0 <line:1557:8> 'unsigned long long' 16938959713482082801
|     | `-InitListExpr 0x1553ec18a28 <line:1558:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec18a88 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1fc68 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec18aa0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1fc90 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec18ab8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1fcb8 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec18ad0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec1fce0 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec18b18 <line:1559:6, line:1563:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec18b80 <line:1559:7, line:1560:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec1fdc0 <line:1559:8> 'unsigned long long' 18012970283197280897
|     | | |-ImplicitCastExpr 0x1553ec18be0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1fde8 <col:28> 'long long' 6796710378924666044
|     | | |-IntegerLiteral 0x1553ec1fe10 <col:48> 'unsigned long long' 14069973639409027159
|     | | `-ImplicitCastExpr 0x1553ec18bf8 <line:1560:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec1fe38 <col:8> 'long long' 540915916971057674
|     | |-InitListExpr 0x1553ec18c20 <line:1561:7, line:1562:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec18c80 <line:1561:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec1fec0 <col:8> 'long long' 6522131241343737728
|     | | |-IntegerLiteral 0x1553ec1fee8 <col:28> 'unsigned long long' 9869655002594280931
|     | | |-IntegerLiteral 0x1553ec1ff10 <col:48> 'unsigned long long' 10930976606567621684
|     | | `-ImplicitCastExpr 0x1553ec18c98 <line:1562:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec1ff38 <col:8> 'long long' 7569669774902629779
|     | `-InitListExpr 0x1553ec18cc0 <line:1563:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec18d20 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1ffc0 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec18d38 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec1ffe8 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec18d50 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec20010 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec18d68 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec20038 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec18db0 <line:1564:6, line:1568:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec18e18 <line:1564:7, line:1565:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec20118 <line:1564:8> 'unsigned long long' 12603824238579167018
|     | | |-IntegerLiteral 0x1553ec20140 <col:28> 'unsigned long long' 11406550811417637946
|     | | |-IntegerLiteral 0x1553ec20168 <col:48> 'unsigned long long' 17681745613931615014
|     | | `-IntegerLiteral 0x1553ec20190 <line:1565:8> 'unsigned long long' 9967415225131415063
|     | |-InitListExpr 0x1553ec18e88 <line:1566:7, line:1567:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec20218 <line:1566:8> 'unsigned long long' 14265609955841184951
|     | | |-IntegerLiteral 0x1553ec20240 <col:28> 'unsigned long long' 14836321199344875113
|     | | |-ImplicitCastExpr 0x1553ec18ee8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec20268 <col:48> 'long long' 4026262154848670399
|     | | `-ImplicitCastExpr 0x1553ec18f00 <line:1567:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec20290 <col:8> 'long long' 312367424096734167
|     | `-InitListExpr 0x1553ec1af80 <line:1568:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1afe0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec20318 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1aff8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec20340 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1b010 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec20368 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1b028 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec20390 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec1b070 <line:1569:6, line:1573:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec1b0d8 <line:1569:7, line:1570:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1b138 <line:1569:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec20470 <col:8> 'long long' 867627015970731481
|     | | |-IntegerLiteral 0x1553ec20498 <col:28> 'unsigned long long' 17988713241524421700
|     | | |-ImplicitCastExpr 0x1553ec1b150 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec204c0 <col:48> 'long long' 5787311655235732089
|     | | `-ImplicitCastExpr 0x1553ec1b168 <line:1570:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec204e8 <col:8> 'long long' 484940130495201910
|     | |-InitListExpr 0x1553ec1b190 <line:1571:7, line:1572:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec20570 <line:1571:8> 'unsigned long long' 14462376519995546313
|     | | |-IntegerLiteral 0x1553ec20598 <col:28> 'unsigned long long' 16050136703869978383
|     | | |-ImplicitCastExpr 0x1553ec1b1f0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec205c0 <col:48> 'long long' 4791065911985892208
|     | | `-ImplicitCastExpr 0x1553ec1b208 <line:1572:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec205e8 <col:8> 'long long' 6577346714434056586
|     | `-InitListExpr 0x1553ec1b230 <line:1573:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1b290 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec20670 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1b2a8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec20698 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1b2c0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec206c0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1b2d8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec206e8 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec1b320 <line:1574:6, line:1578:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec1b388 <line:1574:7, line:1575:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1b3e8 <line:1574:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec207c8 <col:8> 'long long' 8961105821002642442
|     | | |-ImplicitCastExpr 0x1553ec1b400 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec207f0 <col:28> 'long long' 5572184639073054523
|     | | |-ImplicitCastExpr 0x1553ec1b418 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec20818 <col:48> 'long long' 3001457500238366168
|     | | `-ImplicitCastExpr 0x1553ec1b430 <line:1575:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec20840 <col:8> 'long long' 4479258976280561928
|     | |-InitListExpr 0x1553ec1b458 <line:1576:7, line:1577:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1b4b8 <line:1576:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec208c8 <col:8> 'long long' 1453864872937502800
|     | | |-IntegerLiteral 0x1553ec208f0 <col:28> 'unsigned long long' 12472513303615887232
|     | | |-ImplicitCastExpr 0x1553ec1b4d0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec20918 <col:48> 'long long' 2239712233336787437
|     | | `-ImplicitCastExpr 0x1553ec1b4e8 <line:1577:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec20940 <col:8> 'long long' 2565803748450573950
|     | `-InitListExpr 0x1553ec1b510 <line:1578:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1b570 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec209c8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1b588 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec209f0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1b5a0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec20a18 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1b5b8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec20a40 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec1b600 <line:1579:6, line:1583:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec1b668 <line:1579:7, line:1580:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1b6c8 <line:1579:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec20b20 <col:8> 'long long' 8702104923482042922
|     | | |-ImplicitCastExpr 0x1553ec1b6e0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec20b48 <col:28> 'long long' 3485186220776451982
|     | | |-IntegerLiteral 0x1553ec20b70 <col:48> 'unsigned long long' 15837672636651286228
|     | | `-IntegerLiteral 0x1553ec20b98 <line:1580:8> 'unsigned long long' 9371794945225469943
|     | |-InitListExpr 0x1553ec1b708 <line:1581:7, line:1582:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1b768 <line:1581:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec20c20 <col:8> 'long long' 7837746206991051732
|     | | |-ImplicitCastExpr 0x1553ec1b780 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec20c48 <col:28> 'long long' 8484321636022914244
|     | | |-ImplicitCastExpr 0x1553ec1b798 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec20c70 <col:48> 'long long' 1965851040684971219
|     | | `-ImplicitCastExpr 0x1553ec1b7b0 <line:1582:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec20c98 <col:8> 'long long' 1442285393364518380
|     | `-InitListExpr 0x1553ec1b7d8 <line:1583:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1b838 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec20d20 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1b850 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec20d48 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1b868 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec20d70 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1b880 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec20d98 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec1b8c8 <line:1584:6, line:1588:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec1b930 <line:1584:7, line:1585:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1b990 <line:1584:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec20e78 <col:8> 'long long' 7669699507266117383
|     | | |-IntegerLiteral 0x1553ec20ea0 <col:28> 'unsigned long long' 18263772118963940312
|     | | |-IntegerLiteral 0x1553ec20ec8 <col:48> 'unsigned long long' 16959156411216990206
|     | | `-ImplicitCastExpr 0x1553ec1b9a8 <line:1585:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec20ef0 <col:8> 'long long' 7563435295795044334
|     | |-InitListExpr 0x1553ec1b9d0 <line:1586:7, line:1587:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec20f78 <line:1586:8> 'unsigned long long' 10432429702343894613
|     | | |-IntegerLiteral 0x1553ec14f50 <col:28> 'unsigned long long' 14939165448171732863
|     | | |-IntegerLiteral 0x1553ec14f78 <col:48> 'unsigned long long' 18142755831876440104
|     | | `-IntegerLiteral 0x1553ec14fa0 <line:1587:8> 'unsigned long long' 14691303536741059814
|     | `-InitListExpr 0x1553ec1ba40 <line:1588:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1baa0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15028 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1bab8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15050 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1bad0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15078 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1bae8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec150a0 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec1bb30 <line:1589:6, line:1593:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec1bb98 <line:1589:7, line:1590:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec15180 <line:1589:8> 'unsigned long long' 16832431112848860353
|     | | |-IntegerLiteral 0x1553ec151a8 <col:28> 'unsigned long long' 18195368276845830772
|     | | |-ImplicitCastExpr 0x1553ec1bbf8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec151d0 <col:48> 'long long' 2526363943779232039
|     | | `-IntegerLiteral 0x1553ec151f8 <line:1590:8> 'unsigned long long' 15038356215644160265
|     | |-InitListExpr 0x1553ec1bc20 <line:1591:7, line:1592:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1bc80 <line:1591:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec15280 <col:8> 'long long' 4829457343136483686
|     | | |-ImplicitCastExpr 0x1553ec1bc98 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec152a8 <col:28> 'long long' 1204775539773815621
|     | | |-ImplicitCastExpr 0x1553ec1bcb0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec152d0 <col:48> 'long long' 9057411091819482746
|     | | `-IntegerLiteral 0x1553ec152f8 <line:1592:8> 'unsigned long long' 10886424616474450405
|     | `-InitListExpr 0x1553ec1bcd8 <line:1593:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1bd38 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15380 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1bd50 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec153a8 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1bd68 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec153d0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1bd80 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec153f8 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec1bdc8 <line:1594:6, line:1598:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec1be30 <line:1594:7, line:1595:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1be90 <line:1594:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec154d8 <col:8> 'long long' 5464756572288098249
|     | | |-ImplicitCastExpr 0x1553ec1bea8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec15500 <col:28> 'long long' 6337288834372384886
|     | | |-IntegerLiteral 0x1553ec15528 <col:48> 'unsigned long long' 14039351322695960199
|     | | `-IntegerLiteral 0x1553ec15550 <line:1595:8> 'unsigned long long' 10814849148613192378
|     | |-InitListExpr 0x1553ec1bed0 <line:1596:7, line:1597:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1bf30 <line:1596:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec155d8 <col:8> 'long long' 5303406157379959390
|     | | |-ImplicitCastExpr 0x1553ec1bf48 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec15600 <col:28> 'long long' 7614207622125570852
|     | | |-ImplicitCastExpr 0x1553ec1bf60 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec15628 <col:48> 'long long' 3238635979046982428
|     | | `-ImplicitCastExpr 0x1553ec1bf78 <line:1597:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec15650 <col:8> 'long long' 8848341461748899396
|     | `-InitListExpr 0x1553ec1bfa0 <line:1598:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1c000 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec156d8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1c018 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15700 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1c030 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15728 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1c048 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec15750 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec1c090 <line:1599:6, line:1603:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec1c0f8 <line:1599:7, line:1600:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1c158 <line:1599:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec15830 <col:8> 'long long' 2688230699866182848
|     | | |-IntegerLiteral 0x1553ec15858 <col:28> 'unsigned long long' 17689871680306571355
|     | | |-IntegerLiteral 0x1553ec15880 <col:48> 'unsigned long long' 11965369384869145322
|     | | `-ImplicitCastExpr 0x1553ec1c170 <line:1600:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec158a8 <col:8> 'long long' 2660390208594493275
|     | |-InitListExpr 0x1553ec1c198 <line:1601:7, line:1602:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec15930 <line:1601:8> 'unsigned long long' 16419645726685552106
|     | | |-IntegerLiteral 0x1553ec15958 <col:28> 'unsigned long long' 18370063315756542799
|     | | |-ImplicitCastExpr 0x1553ec1c1f8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec15980 <col:48> 'long long' 8372514931683904589
|     | | `-ImplicitCastExpr 0x1553ec1c210 <line:1602:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec159a8 <col:8> 'long long' 7636013446400604620
|     | `-InitListExpr 0x1553ec1c238 <line:1603:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1c298 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15a30 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1c2b0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15a58 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1c2c8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15a80 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1c2e0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec15aa8 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec1c328 <line:1604:6, line:1608:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec1c390 <line:1604:7, line:1605:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec15b88 <line:1604:8> 'unsigned long long' 17213966368603666101
|     | | |-ImplicitCastExpr 0x1553ec1c3f0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec15bb0 <col:28> 'long long' 9137858211030508120
|     | | |-IntegerLiteral 0x1553ec15bd8 <col:48> 'unsigned long long' 12980167869281043732
|     | | `-IntegerLiteral 0x1553ec15c00 <line:1605:8> 'unsigned long long' 16510007652016890119
|     | |-InitListExpr 0x1553ec1c418 <line:1606:7, line:1607:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec15c88 <line:1606:8> 'unsigned long long' 11699170337035859005
|     | | |-IntegerLiteral 0x1553ec15cb0 <col:28> 'unsigned long long' 10135670842130700366
|     | | |-IntegerLiteral 0x1553ec15cd8 <col:48> 'unsigned long long' 11974957831620041222
|     | | `-ImplicitCastExpr 0x1553ec1c478 <line:1607:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec15d00 <col:8> 'long long' 2031292942051382151
|     | `-InitListExpr 0x1553ec1c4a0 <line:1608:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1c500 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15d88 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1c518 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15db0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1c530 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec15dd8 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1c548 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec15e00 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec1c590 <line:1609:6, line:1613:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec1c5f8 <line:1609:7, line:1610:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec15ee0 <line:1609:8> 'unsigned long long' 10562590303857394777
|     | | |-IntegerLiteral 0x1553ec15f08 <col:28> 'unsigned long long' 12682497754009880974
|     | | |-IntegerLiteral 0x1553ec15f30 <col:48> 'unsigned long long' 14196638462869837864
|     | | `-ImplicitCastExpr 0x1553ec1c658 <line:1610:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec15f58 <col:8> 'long long' 2357770240294970627
|     | |-InitListExpr 0x1553ec1c680 <line:1611:7, line:1612:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1553ec1c6e0 <line:1611:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec15fe0 <col:8> 'long long' 3486656228478141047
|     | | |-ImplicitCastExpr 0x1553ec1c6f8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec16008 <col:28> 'long long' 2005572102683722461
|     | | |-ImplicitCastExpr 0x1553ec1c710 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec16030 <col:48> 'long long' 941725040706691140
|     | | `-IntegerLiteral 0x1553ec16058 <line:1612:8> 'unsigned long long' 17710117778563233470
|     | `-InitListExpr 0x1553ec1c738 <line:1613:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1c798 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec160e0 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1c7b0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec16108 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1c7c8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec16130 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1c7e0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec16158 <col:17> 'int' 0
|     |-InitListExpr 0x1553ec1c828 <line:1614:6, line:1618:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1553ec1c890 <line:1614:7, line:1615:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec16238 <line:1614:8> 'unsigned long long' 10129807730841853457
|     | | |-ImplicitCastExpr 0x1553ec1c8f0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec16260 <col:28> 'long long' 4068663205997555039
|     | | |-IntegerLiteral 0x1553ec16288 <col:48> 'unsigned long long' 11841304802401167958
|     | | `-ImplicitCastExpr 0x1553ec1c908 <line:1615:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec162b0 <col:8> 'long long' 2222475534487523513
|     | |-InitListExpr 0x1553ec1c930 <line:1616:7, line:1617:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1553ec16338 <line:1616:8> 'unsigned long long' 11601582869891561609
|     | | |-ImplicitCastExpr 0x1553ec1c990 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec16360 <col:28> 'long long' 424693911077573444
|     | | |-ImplicitCastExpr 0x1553ec1c9a8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1553ec16388 <col:48> 'long long' 5959705901008562724
|     | | `-ImplicitCastExpr 0x1553ec1c9c0 <line:1617:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1553ec163b0 <col:8> 'long long' 4191448208365790586
|     | `-InitListExpr 0x1553ec1c9e8 <line:1618:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1553ec1ca48 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec16438 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1553ec1ca60 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec16460 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1553ec1ca78 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1553ec16488 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1553ec1ca90 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1553ec164b0 <col:17> 'int' 0
|     `-InitListExpr 0x1553ec1cad8 <line:1619:6, line:1623:19> 'const smallfelem [3]'
|       |-InitListExpr 0x1553ec1cb40 <line:1619:7, line:1620:26> 'const smallfelem':'u64 const[4]'
|       | |-IntegerLiteral 0x1553ec16590 <line:1619:8> 'unsigned long long' 17442373942447506493
|       | |-IntegerLiteral 0x1553ec165b8 <col:28> 'unsigned long long' 17523545791397714530
|       | |-IntegerLiteral 0x1553ec165e0 <col:48> 'unsigned long long' 18193736125741632571
|       | `-ImplicitCastExpr 0x1553ec1cba0 <line:1620:8> 'u64':'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x1553ec16608 <col:8> 'long long' 1584956206744459766
|       |-InitListExpr 0x1553ec1cbc8 <line:1621:7, line:1622:26> 'const smallfelem':'u64 const[4]'
|       | |-ImplicitCastExpr 0x1553ec1cc28 <line:1621:8> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1553ec16690 <col:8> 'long long' 5773195294502653146
|       | |-ImplicitCastExpr 0x1553ec1cc40 <col:28> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1553ec166b8 <col:28> 'long long' 4751157856429321220
|       | |-ImplicitCastExpr 0x1553ec1cc58 <col:48> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1553ec166e0 <col:48> 'long long' 6160255002369724667
|       | `-ImplicitCastExpr 0x1553ec1cc70 <line:1622:8> 'u64':'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x1553ec16708 <col:8> 'long long' 5383409808306421633
|       `-InitListExpr 0x1553ec1cc98 <line:1623:7, col:18> 'const smallfelem':'u64 const[4]'
|         |-ImplicitCastExpr 0x1553ec1ccf8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x1553ec16790 <col:8> 'int' 1
|         |-ImplicitCastExpr 0x1553ec1cd10 <col:11> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x1553ec167b8 <col:11> 'int' 0
|         |-ImplicitCastExpr 0x1553ec1cd28 <col:14> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x1553ec167e0 <col:14> 'int' 0
|         `-ImplicitCastExpr 0x1553ec1cd40 <col:17> 'u64':'unsigned long long' <IntegralCast>
|           `-IntegerLiteral 0x1553ec16808 <col:17> 'int' 0
|-FunctionDecl 0x1553ec112a8 <line:1630:1, line:1649:1> line:1630:13 used select_point 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' static
| |-ParmVarDecl 0x1553ec1cd68 <col:26, col:36> col:36 used idx 'const u64':'const unsigned long long'
| |-ParmVarDecl 0x1553ec1cde8 <col:41, col:54> col:54 used size 'unsigned int'
| |-ParmVarDecl 0x1553ec10f60 <line:1631:26, col:57> col:43 used pre_comp 'const smallfelem (*)[3]':'const smallfelem (*)[3]'
| |-ParmVarDecl 0x1553ec11100 <col:60, col:76> col:71 used out 'smallfelem *':'smallfelem *'
| `-CompoundStmt 0x1553ec12518 <line:1632:1, line:1649:1>
|   |-DeclStmt 0x1553ec11498 <line:1633:5, col:18>
|   | |-VarDecl 0x1553ec11398 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x1553ec11418 <col:5, col:17> col:17 used j 'unsigned int'
|   |-DeclStmt 0x1553ec11620 <line:1634:5, col:31>
|   | `-VarDecl 0x1553ec114c0 <col:5, col:30> col:10 used outlimbs 'u64 *' cinit
|   |   `-UnaryOperator 0x1553ec11608 <col:21, col:30> 'u64 *' prefix '&' cannot overflow
|   |     `-ArraySubscriptExpr 0x1553ec115e8 <col:22, col:30> 'u64':'unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1553ec115d0 <col:22, col:27> 'u64 *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x1553ec11588 <col:22, col:27> 'smallfelem':'u64 [4]' lvalue
|   |       |   |-ImplicitCastExpr 0x1553ec11570 <col:22> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1553ec11528 <col:22> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x1553ec11100 'out' 'smallfelem *':'smallfelem *'
|   |       |   `-IntegerLiteral 0x1553ec11548 <col:26> 'int' 0
|   |       `-IntegerLiteral 0x1553ec115a8 <col:29> 'int' 0
|   |-CallExpr 0x1553ec117c0 <line:1636:5, col:36> 'void *'
|   | |-ImplicitCastExpr 0x1553ec117a8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec11638 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1553e9c5900 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1553ec11810 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1553ec117f8 <col:12> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1553ec11658 <col:12> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x1553ec11100 'out' 'smallfelem *':'smallfelem *'
|   | |-IntegerLiteral 0x1553ec11678 <col:17> 'int' 0
|   | `-BinaryOperator 0x1553ec11770 <col:20, col:35> 'unsigned long long' '*'
|   |   |-UnaryExprOrTypeTraitExpr 0x1553ec11710 <col:20, col:31> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x1553ec116f0 <col:26, col:31> 'smallfelem':'u64 [4]' lvalue
|   |   |   `-UnaryOperator 0x1553ec116d8 <col:27, col:28> 'smallfelem':'u64 [4]' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x1553ec116c0 <col:28> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1553ec116a0 <col:28> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x1553ec11100 'out' 'smallfelem *':'smallfelem *' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x1553ec11758 <col:35> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1553ec11730 <col:35> 'int' 3
|   `-ForStmt 0x1553ec124e0 <line:1638:5, line:1648:5>
|     |-BinaryOperator 0x1553ec118a0 <line:1638:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1553ec11828 <col:10> 'unsigned int' lvalue Var 0x1553ec11398 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1553ec11888 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1553ec11860 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1553ec11930 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1553ec11900 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1553ec118c0 <col:17> 'unsigned int' lvalue Var 0x1553ec11398 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1553ec11918 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x1553ec118e0 <col:21> 'unsigned int' lvalue ParmVar 0x1553ec1cde8 'size' 'unsigned int'
|     |-UnaryOperator 0x1553ec11970 <col:27, col:28> 'unsigned int' postfix '++'
|     | `-DeclRefExpr 0x1553ec11950 <col:27> 'unsigned int' lvalue Var 0x1553ec11398 'i' 'unsigned int'
|     `-CompoundStmt 0x1553ec12490 <col:32, line:1648:5>
|       |-DeclStmt 0x1553ec11c18 <line:1639:9, col:55>
|       | `-VarDecl 0x1553ec11998 <col:9, col:54> col:20 used inlimbs 'const u64 *' cinit
|       |   `-ImplicitCastExpr 0x1553ec11c00 <col:30, col:54> 'const u64 *' <NoOp>
|       |     `-CStyleCastExpr 0x1553ec11bd8 <col:30, col:54> 'u64 *' <NoOp>
|       |       `-UnaryOperator 0x1553ec11bb0 <col:37, col:54> 'const u64 *' prefix '&' cannot overflow
|       |         `-ArraySubscriptExpr 0x1553ec11b90 <col:38, col:54> 'const u64':'const unsigned long long' lvalue
|       |           |-ImplicitCastExpr 0x1553ec11b78 <col:38, col:51> 'const u64 *' <ArrayToPointerDecay>
|       |           | `-ArraySubscriptExpr 0x1553ec11b30 <col:38, col:51> 'const smallfelem':'u64 const[4]' lvalue
|       |           |   |-ImplicitCastExpr 0x1553ec11b18 <col:38, col:48> 'const smallfelem *' <ArrayToPointerDecay>
|       |           |   | `-ArraySubscriptExpr 0x1553ec11a70 <col:38, col:48> 'const smallfelem [3]' lvalue
|       |           |   |   |-ImplicitCastExpr 0x1553ec11a40 <col:38> 'const smallfelem (*)[3]':'const smallfelem (*)[3]' <LValueToRValue>
|       |           |   |   | `-DeclRefExpr 0x1553ec11a00 <col:38> 'const smallfelem (*)[3]':'const smallfelem (*)[3]' lvalue ParmVar 0x1553ec10f60 'pre_comp' 'const smallfelem (*)[3]':'const smallfelem (*)[3]'
|       |           |   |   `-ImplicitCastExpr 0x1553ec11a58 <col:47> 'unsigned int' <LValueToRValue>
|       |           |   |     `-DeclRefExpr 0x1553ec11a20 <col:47> 'unsigned int' lvalue Var 0x1553ec11398 'i' 'unsigned int'
|       |           |   `-IntegerLiteral 0x1553ec11a90 <col:50> 'int' 0
|       |           `-IntegerLiteral 0x1553ec11b50 <col:53> 'int' 0
|       |-DeclStmt 0x1553ec11d50 <line:1640:9, col:27>
|       | `-VarDecl 0x1553ec11c40 <col:9, col:24> col:13 used mask 'u64':'unsigned long long' cinit
|       |   `-BinaryOperator 0x1553ec11d30 <col:20, col:24> 'unsigned long long' '^'
|       |     |-ImplicitCastExpr 0x1553ec11d18 <col:20> 'unsigned long long' <IntegralCast>
|       |     | `-ImplicitCastExpr 0x1553ec11ce8 <col:20> 'unsigned int' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x1553ec11ca8 <col:20> 'unsigned int' lvalue Var 0x1553ec11398 'i' 'unsigned int'
|       |     `-ImplicitCastExpr 0x1553ec11d00 <col:24> 'u64':'unsigned long long' <LValueToRValue>
|       |       `-DeclRefExpr 0x1553ec11cc8 <col:24> 'const u64':'const unsigned long long' lvalue ParmVar 0x1553ec1cd68 'idx' 'const u64':'const unsigned long long'
|       |-CompoundAssignOperator 0x1553ec11e20 <line:1641:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1553ec11d68 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553ec11c40 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x1553ec11e00 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x1553ec11de8 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1553ec11da0 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553ec11c40 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x1553ec11dc0 <col:25> 'int' 4
|       |-CompoundAssignOperator 0x1553ec11ef0 <line:1642:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1553ec11e50 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553ec11c40 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x1553ec11ed0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x1553ec11eb8 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1553ec11e70 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553ec11c40 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x1553ec11e90 <col:25> 'int' 2
|       |-CompoundAssignOperator 0x1553ec11fc0 <line:1643:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1553ec11f20 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553ec11c40 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x1553ec11fa0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x1553ec11f88 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1553ec11f40 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553ec11c40 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x1553ec11f60 <col:25> 'int' 1
|       |-CompoundAssignOperator 0x1553ec12050 <line:1644:9, col:17> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1553ec11ff0 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553ec11c40 'mask' 'u64':'unsigned long long'
|       | `-ImplicitCastExpr 0x1553ec12038 <col:17> 'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x1553ec12010 <col:17> 'int' 1
|       |-UnaryOperator 0x1553ec120a0 <line:1645:9, col:13> 'u64':'unsigned long long' postfix '--'
|       | `-DeclRefExpr 0x1553ec12080 <col:9> 'u64':'unsigned long long' lvalue Var 0x1553ec11c40 'mask' 'u64':'unsigned long long'
|       `-ForStmt 0x1553ec12458 <line:1646:9, line:1647:41>
|         |-BinaryOperator 0x1553ec12130 <line:1646:14, col:18> 'unsigned int' '='
|         | |-DeclRefExpr 0x1553ec120b8 <col:14> 'unsigned int' lvalue Var 0x1553ec11418 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x1553ec12118 <col:18> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x1553ec120f0 <col:18> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x1553ec12210 <col:21, col:34> 'int' '<'
|         | |-ImplicitCastExpr 0x1553ec121e0 <col:21> 'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x1553ec12150 <col:21> 'unsigned int' lvalue Var 0x1553ec11418 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x1553ec121f8 <line:113:17, line:1646:34> 'unsigned int' <IntegralCast>
|         |   `-BinaryOperator 0x1553ec121c0 <line:113:17, line:1646:34> 'int' '*'
|         |     |-IntegerLiteral 0x1553ec12170 <line:113:17> 'int' 4
|         |     `-IntegerLiteral 0x1553ec12198 <line:1646:34> 'int' 3
|         |-UnaryOperator 0x1553ec12250 <col:37, col:38> 'unsigned int' postfix '++'
|         | `-DeclRefExpr 0x1553ec12230 <col:37> 'unsigned int' lvalue Var 0x1553ec11418 'j' 'unsigned int'
|         `-CompoundAssignOperator 0x1553ec12428 <line:1647:13, col:41> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|           |-ArraySubscriptExpr 0x1553ec122f0 <col:13, col:23> 'u64':'unsigned long long' lvalue
|           | |-ImplicitCastExpr 0x1553ec122c0 <col:13> 'u64 *' <LValueToRValue>
|           | | `-DeclRefExpr 0x1553ec12268 <col:13> 'u64 *' lvalue Var 0x1553ec114c0 'outlimbs' 'u64 *'
|           | `-ImplicitCastExpr 0x1553ec122d8 <col:22> 'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x1553ec122a0 <col:22> 'unsigned int' lvalue Var 0x1553ec11418 'j' 'unsigned int'
|           `-BinaryOperator 0x1553ec12408 <col:28, col:41> 'unsigned long long' '&'
|             |-ImplicitCastExpr 0x1553ec123d8 <col:28, col:37> 'u64':'unsigned long long' <LValueToRValue>
|             | `-ArraySubscriptExpr 0x1553ec12398 <col:28, col:37> 'const u64':'const unsigned long long' lvalue
|             |   |-ImplicitCastExpr 0x1553ec12368 <col:28> 'const u64 *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x1553ec12310 <col:28> 'const u64 *' lvalue Var 0x1553ec11998 'inlimbs' 'const u64 *'
|             |   `-ImplicitCastExpr 0x1553ec12380 <col:36> 'unsigned int' <LValueToRValue>
|             |     `-DeclRefExpr 0x1553ec12348 <col:36> 'unsigned int' lvalue Var 0x1553ec11418 'j' 'unsigned int'
|             `-ImplicitCastExpr 0x1553ec123f0 <col:41> 'u64':'unsigned long long' <LValueToRValue>
|               `-DeclRefExpr 0x1553ec123b8 <col:41> 'u64':'unsigned long long' lvalue Var 0x1553ec11c40 'mask' 'u64':'unsigned long long'
|-FunctionDecl 0x1553ec12758 <line:1652:1, line:1657:1> line:1652:13 used get_bit 'char (const u8 *, int)' static
| |-ParmVarDecl 0x1553ec12590 <col:21, col:43> col:43 used in 'const u8 *':'const u8 *'
| |-ParmVarDecl 0x1553ec12610 <col:47, col:51> col:51 used i 'int'
| `-CompoundStmt 0x1553ec12c40 <line:1653:1, line:1657:1>
|   |-IfStmt 0x1553ec129d0 <line:1654:5, line:1655:16>
|   | |-BinaryOperator 0x1553ec12960 <line:1654:9, col:29> 'int' '||'
|   | | |-ParenExpr 0x1553ec128a0 <col:9, col:15> 'int'
|   | | | `-BinaryOperator 0x1553ec12880 <col:10, col:14> 'int' '<'
|   | | |   |-ImplicitCastExpr 0x1553ec12868 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1553ec12820 <col:10> 'int' lvalue ParmVar 0x1553ec12610 'i' 'int'
|   | | |   `-IntegerLiteral 0x1553ec12840 <col:14> 'int' 0
|   | | `-ParenExpr 0x1553ec12940 <col:20, col:29> 'int'
|   | |   `-BinaryOperator 0x1553ec12920 <col:21, col:26> 'int' '>='
|   | |     |-ImplicitCastExpr 0x1553ec12908 <col:21> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1553ec128c0 <col:21> 'int' lvalue ParmVar 0x1553ec12610 'i' 'int'
|   | |     `-IntegerLiteral 0x1553ec128e0 <col:26> 'int' 256
|   | `-ReturnStmt 0x1553ec129c0 <line:1655:9, col:16>
|   |   `-ImplicitCastExpr 0x1553ec129a8 <col:16> 'char' <IntegralCast>
|   |     `-IntegerLiteral 0x1553ec12980 <col:16> 'int' 0
|   `-ReturnStmt 0x1553ec12c30 <line:1656:5, col:38>
|     `-ImplicitCastExpr 0x1553ec12c18 <col:12, col:38> 'char' <IntegralCast>
|       `-BinaryOperator 0x1553ec12bf8 <col:12, col:38> 'int' '&'
|         |-ParenExpr 0x1553ec12bb0 <col:12, col:34> 'int'
|         | `-BinaryOperator 0x1553ec12b90 <col:13, col:33> 'int' '>>'
|         |   |-ImplicitCastExpr 0x1553ec12b78 <col:13, col:22> 'int' <IntegralCast>
|         |   | `-ImplicitCastExpr 0x1553ec12b60 <col:13, col:22> 'u8':'unsigned char' <LValueToRValue>
|         |   |   `-ArraySubscriptExpr 0x1553ec12aa0 <col:13, col:22> 'const u8':'const unsigned char' lvalue
|         |   |     |-ImplicitCastExpr 0x1553ec12a88 <col:13> 'const u8 *':'const u8 *' <LValueToRValue>
|         |   |     | `-DeclRefExpr 0x1553ec129e8 <col:13> 'const u8 *':'const u8 *' lvalue ParmVar 0x1553ec12590 'in' 'const u8 *':'const u8 *'
|         |   |     `-BinaryOperator 0x1553ec12a68 <col:16, col:21> 'int' '>>'
|         |   |       |-ImplicitCastExpr 0x1553ec12a50 <col:16> 'int' <LValueToRValue>
|         |   |       | `-DeclRefExpr 0x1553ec12a08 <col:16> 'int' lvalue ParmVar 0x1553ec12610 'i' 'int'
|         |   |       `-IntegerLiteral 0x1553ec12a28 <col:21> 'int' 3
|         |   `-ParenExpr 0x1553ec12b40 <col:27, col:33> 'int'
|         |     `-BinaryOperator 0x1553ec12b20 <col:28, col:32> 'int' '&'
|         |       |-ImplicitCastExpr 0x1553ec12b08 <col:28> 'int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x1553ec12ac0 <col:28> 'int' lvalue ParmVar 0x1553ec12610 'i' 'int'
|         |       `-IntegerLiteral 0x1553ec12ae0 <col:32> 'int' 7
|         `-IntegerLiteral 0x1553ec12bd0 <col:38> 'int' 1
|-FunctionDecl 0x1553ec21848 <line:1666:1, line:1764:1> line:1666:13 used batch_mul 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' static
| |-ParmVarDecl 0x1553ec12c70 <col:23, col:29> col:29 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x1553ec12ce8 <col:36, col:42> col:42 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x1553ec12d60 <col:49, col:55> col:55 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x1553ec20fb0 <line:1667:23, col:53> col:45 used scalars 'const felem_bytearray *':'const felem_bytearray *'
| |-ParmVarDecl 0x1553ec21030 <line:1668:23, col:38> col:38 used num_points 'const unsigned int'
| |-ParmVarDecl 0x1553ec210a8 <col:50, col:60> col:60 used g_scalar 'const u8 *'
| |-ParmVarDecl 0x1553ec21128 <line:1669:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x1553ec213c0 <col:40, col:73> col:57 used pre_comp 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]'
| |-ParmVarDecl 0x1553ec215c0 <line:1670:23, col:59> col:40 used g_pre_comp 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
| `-CompoundStmt 0x1553ec25ce8 <line:1671:1, line:1764:1>
|   |-DeclStmt 0x1553ec21a60 <line:1672:5, col:16>
|   | |-VarDecl 0x1553ec21960 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x1553ec219e0 <col:5, col:12> col:12 used skip 'int'
|   |-DeclStmt 0x1553ec21cc0 <line:1673:5, col:47>
|   | |-VarDecl 0x1553ec21a90 <col:5, col:14> col:14 used num 'unsigned int'
|   | `-VarDecl 0x1553ec21b10 <col:5, col:46> col:19 used gen_mul 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x1553ec21c90 <col:29, col:46> 'unsigned int' <IntegralCast>
|   |     `-ParenExpr 0x1553ec21c70 <col:29, col:46> 'int'
|   |       `-BinaryOperator 0x1553ec21c50 <col:30, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '!='
|   |         |-ImplicitCastExpr 0x1553ec21c20 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1673:30> 'const u8 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1553ec21b78 <col:30> 'const u8 *' lvalue ParmVar 0x1553ec210a8 'g_scalar' 'const u8 *'
|   |         `-ImplicitCastExpr 0x1553ec21c38 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <BitCast>
|   |           `-ParenExpr 0x1553ec21c00 <col:17, col:27> 'void *'
|   |             `-CStyleCastExpr 0x1553ec21bd8 <col:18, col:26> 'void *' <NullToPointer>
|   |               `-IntegerLiteral 0x1553ec21b98 <col:26> 'int' 0
|   |-DeclStmt 0x1553ec21eb0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1674:5, col:22>
|   | |-VarDecl 0x1553ec21db8 <col:5, col:15> col:11 used nq 'felem [3]'
|   | `-VarDecl 0x1553ec21e30 <col:5, col:18> col:18 used ftmp 'felem':'limb [4]'
|   |-DeclStmt 0x1553ec21f90 <line:1675:5, col:22>
|   | `-VarDecl 0x1553ec21f28 <col:5, col:21> col:16 used tmp 'smallfelem [3]'
|   |-DeclStmt 0x1553ec22020 <line:1676:5, col:13>
|   | `-VarDecl 0x1553ec21fb8 <col:5, col:9> col:9 used bits 'u64':'unsigned long long'
|   |-DeclStmt 0x1553ec22140 <line:1677:5, col:19>
|   | |-VarDecl 0x1553ec22048 <col:5, col:8> col:8 used sign 'u8':'unsigned char'
|   | `-VarDecl 0x1553ec220c0 <col:5, col:14> col:14 used digit 'u8':'unsigned char'
|   |-CallExpr 0x1553ec222c8 <line:1680:5, col:29> 'void *'
|   | |-ImplicitCastExpr 0x1553ec222b0 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec22158 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1553e9c5900 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1553ec22318 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1553ec22300 <col:12> 'felem *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553ec22178 <col:12> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   | |-IntegerLiteral 0x1553ec221b0 <col:16> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x1553ec22218 <col:19, col:28> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x1553ec221f8 <col:25, col:28> 'felem [3]' lvalue
|   |     `-DeclRefExpr 0x1553ec221d8 <col:26> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]' non_odr_use_unevaluated
|   |-BinaryOperator 0x1553ec22390 <line:1687:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x1553ec22330 <col:5> 'int' lvalue Var 0x1553ec219e0 'skip' 'int'
|   | `-IntegerLiteral 0x1553ec22368 <col:12> 'int' 1
|   |-ForStmt 0x1553ec258c0 <line:1689:5, line:1760:5>
|   | |-BinaryOperator 0x1553ec224c0 <line:1689:10, col:36> 'int' '='
|   | | |-DeclRefExpr 0x1553ec223b0 <col:10> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   | | `-ParenExpr 0x1553ec224a0 <col:14, col:36> 'int'
|   | |   `-ConditionalOperator 0x1553ec22470 <col:15, col:34> 'int'
|   | |     |-ImplicitCastExpr 0x1553ec22458 <col:15> 'unsigned int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1553ec223e8 <col:15> 'const unsigned int' lvalue ParmVar 0x1553ec21030 'num_points' 'const unsigned int'
|   | |     |-IntegerLiteral 0x1553ec22408 <col:28> 'int' 255
|   | |     `-IntegerLiteral 0x1553ec22430 <col:34> 'int' 31
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553ec22540 <col:39, col:44> 'int' '>='
|   | | |-ImplicitCastExpr 0x1553ec22528 <col:39> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ec224e0 <col:39> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   | | `-IntegerLiteral 0x1553ec22500 <col:44> 'int' 0
|   | |-UnaryOperator 0x1553ec22580 <col:47, col:49> 'int' prefix '--'
|   | | `-DeclRefExpr 0x1553ec22560 <col:49> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   | `-CompoundStmt 0x1553ec25898 <col:52, line:1760:5>
|   |   |-IfStmt 0x1553ec22a48 <line:1691:9, line:1692:66>
|   |   | |-UnaryOperator 0x1553ec225d0 <line:1691:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1553ec225b8 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1553ec22598 <col:14> 'int' lvalue Var 0x1553ec219e0 'skip' 'int'
|   |   | `-CallExpr 0x1553ec22920 <line:1692:13, col:66> 'void'
|   |   |   |-ImplicitCastExpr 0x1553ec22908 <col:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1553ec225e8 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1553eb01478 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |   |-ImplicitCastExpr 0x1553ec22970 <col:26, col:30> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x1553ec22668 <col:26, col:30> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1553ec22650 <col:26> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1553ec22608 <col:26> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x1553ec22628 <col:29> 'int' 0
|   |   |   |-ImplicitCastExpr 0x1553ec22988 <col:33, col:37> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x1553ec226e8 <col:33, col:37> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1553ec226d0 <col:33> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1553ec22688 <col:33> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x1553ec226a8 <col:36> 'int' 1
|   |   |   |-ImplicitCastExpr 0x1553ec229a0 <col:40, col:44> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x1553ec22768 <col:40, col:44> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1553ec22750 <col:40> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1553ec22708 <col:40> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x1553ec22728 <col:43> 'int' 2
|   |   |   |-ImplicitCastExpr 0x1553ec229d0 <col:47, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x1553ec229b8 <col:47, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x1553ec227e8 <col:47, col:51> 'felem':'limb [4]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x1553ec227d0 <col:47> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1553ec22788 <col:47> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x1553ec227a8 <col:50> 'int' 0
|   |   |   |-ImplicitCastExpr 0x1553ec22a00 <col:54, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x1553ec229e8 <col:54, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x1553ec22868 <col:54, col:58> 'felem':'limb [4]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x1553ec22850 <col:54> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1553ec22808 <col:54> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x1553ec22828 <col:57> 'int' 1
|   |   |   `-ImplicitCastExpr 0x1553ec22a30 <col:61, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x1553ec22a18 <col:61, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |       `-ArraySubscriptExpr 0x1553ec228e8 <col:61, col:65> 'felem':'limb [4]' lvalue
|   |   |         |-ImplicitCastExpr 0x1553ec228d0 <col:61> 'felem *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x1553ec22888 <col:61> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |         `-IntegerLiteral 0x1553ec228a8 <col:64> 'int' 2
|   |   |-IfStmt 0x1553ec29250 <line:1695:9, line:1725:9>
|   |   | |-BinaryOperator 0x1553ec22b50 <line:1695:13, col:32> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x1553ec22b38 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1553ec22a60 <col:13> 'unsigned int' lvalue Var 0x1553ec21b10 'gen_mul' 'unsigned int'
|   |   | | `-ParenExpr 0x1553ec22b18 <col:24, col:32> 'int'
|   |   | |   `-BinaryOperator 0x1553ec22af8 <col:25, col:30> 'int' '<='
|   |   | |     |-ImplicitCastExpr 0x1553ec22ae0 <col:25> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x1553ec22a98 <col:25> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1553ec22ab8 <col:30> 'int' 31
|   |   | `-CompoundStmt 0x1553ec291e0 <col:35, line:1725:9>
|   |   |   |-BinaryOperator 0x1553ec22da0 <line:1697:13, col:50> 'u64':'unsigned long long' '='
|   |   |   | |-DeclRefExpr 0x1553ec22b70 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1553ec22d88 <col:20, col:50> 'u64':'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1553ec22d68 <col:20, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1553ec22d50 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1553ec22ce0 <col:20, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec22cc8 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec22ba8 <col:20> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec22d10 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec22bc8 <col:28> 'const u8 *' lvalue ParmVar 0x1553ec210a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1553ec22c48 <col:38, col:42> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1553ec22c30 <col:38> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1553ec22be8 <col:38> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1553ec22c08 <col:42> 'int' 224
|   |   |   |     `-IntegerLiteral 0x1553ec22d28 <col:50> 'int' 3
|   |   |   |-CompoundAssignOperator 0x1553ec22f78 <line:1698:13, col:51> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1553ec22dc0 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1553ec22f60 <col:21, col:51> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1553ec22f40 <col:21, col:51> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1553ec22f28 <col:21, col:46> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1553ec22eb8 <col:21, col:46> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec22ea0 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec22de0 <col:21> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec22ee8 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec22e00 <col:29> 'const u8 *' lvalue ParmVar 0x1553ec210a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1553ec22e80 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1553ec22e68 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1553ec22e20 <col:39> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1553ec22e40 <col:43> 'int' 160
|   |   |   |     `-IntegerLiteral 0x1553ec22f00 <col:51> 'int' 2
|   |   |   |-CompoundAssignOperator 0x1553ec130f8 <line:1699:13, col:50> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1553ec12f40 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1553ec130e0 <col:21, col:50> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1553ec130c0 <col:21, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1553ec130a8 <col:21, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1553ec13038 <col:21, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec13020 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec12f60 <col:21> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec13068 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec12f80 <col:29> 'const u8 *' lvalue ParmVar 0x1553ec210a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1553ec13000 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1553ec12fe8 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1553ec12fa0 <col:39> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1553ec12fc0 <col:43> 'int' 96
|   |   |   |     `-IntegerLiteral 0x1553ec13080 <col:50> 'int' 1
|   |   |   |-CompoundAssignOperator 0x1553ec13280 <line:1700:13, col:45> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1553ec13128 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1553ec13268 <col:21, col:45> 'unsigned long long' <IntegralCast>
|   |   |   |   `-CallExpr 0x1553ec13220 <col:21, col:45> 'char'
|   |   |   |     |-ImplicitCastExpr 0x1553ec13208 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1553ec13148 <col:21> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |-ImplicitCastExpr 0x1553ec13250 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x1553ec13168 <col:29> 'const u8 *' lvalue ParmVar 0x1553ec210a8 'g_scalar' 'const u8 *'
|   |   |   |     `-BinaryOperator 0x1553ec131e8 <col:39, col:43> 'int' '+'
|   |   |   |       |-ImplicitCastExpr 0x1553ec131d0 <col:39> 'int' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x1553ec13188 <col:39> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |   |   |       `-IntegerLiteral 0x1553ec131a8 <col:43> 'int' 32
|   |   |   |-CallExpr 0x1553ec13440 <line:1702:13, col:54> 'void'
|   |   |   | |-ImplicitCastExpr 0x1553ec13428 <col:13> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x1553ec132b0 <col:13> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x1553ec112a8 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |   |   | |-ImplicitCastExpr 0x1553ec13480 <col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1553ec132d0 <col:26> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |   |   | |-ImplicitCastExpr 0x1553ec13498 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x1553ec132f0 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x1553ec134b0 <col:36, col:48> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |   | | `-ArraySubscriptExpr 0x1553ec13378 <col:36, col:48> 'const smallfelem [16][3]' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x1553ec13360 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1553ec13318 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' lvalue ParmVar 0x1553ec215c0 'g_pre_comp' 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
|   |   |   | |   `-IntegerLiteral 0x1553ec13338 <col:47> 'int' 1
|   |   |   | `-ImplicitCastExpr 0x1553ec134c8 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x1553ec13398 <col:51> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |   |-IfStmt 0x1553ec141a8 <line:1704:13, line:1713:13> has_else
|   |   |   | |-UnaryOperator 0x1553ec13518 <line:1704:17, col:18> 'int' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x1553ec13500 <col:18> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1553ec134e0 <col:18> 'int' lvalue Var 0x1553ec219e0 'skip' 'int'
|   |   |   | |-CompoundStmt 0x1553ec13be8 <col:24, line:1708:13>
|   |   |   | | `-CallExpr 0x1553ec13a10 <line:1706:17, line:1707:73> 'void'
|   |   |   | |   |-ImplicitCastExpr 0x1553ec139f8 <line:1706:17> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x1553ec13530 <col:17> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x1553eb049a8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |   |   | |   |-ImplicitCastExpr 0x1553ec13a80 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x1553ec135b0 <col:27, col:31> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x1553ec13598 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x1553ec13550 <col:27> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x1553ec13570 <col:30> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x1553ec13a98 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x1553ec13630 <col:34, col:38> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x1553ec13618 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x1553ec135d0 <col:34> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x1553ec135f0 <col:37> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x1553ec13ab0 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x1553ec136b0 <col:41, col:45> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x1553ec13698 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x1553ec13650 <col:41> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x1553ec13670 <col:44> 'int' 2
|   |   |   | |   |-ImplicitCastExpr 0x1553ec13ae0 <line:1707:27, col:31> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1553ec13ac8 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1553ec13730 <col:27, col:31> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1553ec13718 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1553ec136d0 <col:27> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1553ec136f0 <col:30> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x1553ec13b10 <col:34, col:38> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1553ec13af8 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1553ec137b0 <col:34, col:38> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1553ec13798 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1553ec13750 <col:34> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1553ec13770 <col:37> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x1553ec13b40 <col:41, col:45> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1553ec13b28 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1553ec13830 <col:41, col:45> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1553ec13818 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1553ec137d0 <col:41> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1553ec137f0 <col:44> 'int' 2
|   |   |   | |   |-IntegerLiteral 0x1553ec13850 <col:48> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x1553ec13b70 <col:51, col:56> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1553ec13b58 <col:51, col:56> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1553ec138d8 <col:51, col:56> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1553ec138c0 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1553ec13878 <col:51> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1553ec13898 <col:55> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x1553ec13ba0 <col:59, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1553ec13b88 <col:59, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1553ec13958 <col:59, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1553ec13940 <col:59> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1553ec138f8 <col:59> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1553ec13918 <col:63> 'int' 1
|   |   |   | |   `-ImplicitCastExpr 0x1553ec13bd0 <col:67, col:72> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |     `-ImplicitCastExpr 0x1553ec13bb8 <col:67, col:72> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |       `-ArraySubscriptExpr 0x1553ec139d8 <col:67, col:72> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |         |-ImplicitCastExpr 0x1553ec139c0 <col:67> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |         | `-DeclRefExpr 0x1553ec13978 <col:67> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |   | |         `-IntegerLiteral 0x1553ec13998 <col:71> 'int' 2
|   |   |   | `-CompoundStmt 0x1553ec14178 <line:1708:20, line:1713:13>
|   |   |   |   |-CallExpr 0x1553ec13d38 <line:1709:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x1553ec13d20 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x1553ec13c00 <col:17> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x1553ec13d68 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x1553ec13c80 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x1553ec13c68 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x1553ec13c20 <col:35> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x1553ec13c40 <col:38> 'int' 0
|   |   |   |   | `-ImplicitCastExpr 0x1553ec13d98 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x1553ec13d80 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x1553ec13d00 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x1553ec13ce8 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x1553ec13ca0 <col:42> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x1553ec13cc0 <col:46> 'int' 0
|   |   |   |   |-CallExpr 0x1553ec13ee8 <line:1710:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x1553ec13ed0 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x1553ec13db0 <col:17> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x1553ec13f18 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x1553ec13e30 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x1553ec13e18 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x1553ec13dd0 <col:35> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x1553ec13df0 <col:38> 'int' 1
|   |   |   |   | `-ImplicitCastExpr 0x1553ec13f48 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x1553ec13f30 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x1553ec13eb0 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x1553ec13e98 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x1553ec13e50 <col:42> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x1553ec13e70 <col:46> 'int' 1
|   |   |   |   |-CallExpr 0x1553ec14098 <line:1711:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x1553ec14080 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x1553ec13f60 <col:17> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x1553ec140c8 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x1553ec13fe0 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x1553ec13fc8 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x1553ec13f80 <col:35> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x1553ec13fa0 <col:38> 'int' 2
|   |   |   |   | `-ImplicitCastExpr 0x1553ec140f8 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x1553ec140e0 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x1553ec14060 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x1553ec14048 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x1553ec14000 <col:42> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x1553ec14020 <col:46> 'int' 2
|   |   |   |   `-BinaryOperator 0x1553ec14158 <line:1712:17, col:24> 'int' '='
|   |   |   |     |-DeclRefExpr 0x1553ec14110 <col:17> 'int' lvalue Var 0x1553ec219e0 'skip' 'int'
|   |   |   |     `-IntegerLiteral 0x1553ec14130 <col:24> 'int' 0
|   |   |   |-BinaryOperator 0x1553ec14388 <line:1716:13, col:50> 'u64':'unsigned long long' '='
|   |   |   | |-DeclRefExpr 0x1553ec141d0 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1553ec14370 <col:20, col:50> 'u64':'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1553ec14350 <col:20, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1553ec14338 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1553ec142c8 <col:20, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec142b0 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec141f0 <col:20> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec142f8 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec14210 <col:28> 'const u8 *' lvalue ParmVar 0x1553ec210a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1553ec14290 <col:38, col:42> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1553ec14278 <col:38> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1553ec14230 <col:38> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1553ec14250 <col:42> 'int' 192
|   |   |   |     `-IntegerLiteral 0x1553ec14310 <col:50> 'int' 3
|   |   |   |-CompoundAssignOperator 0x1553ec14560 <line:1717:13, col:51> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1553ec143a8 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1553ec14548 <col:21, col:51> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1553ec14528 <col:21, col:51> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1553ec14510 <col:21, col:46> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1553ec144a0 <col:21, col:46> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec14488 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec143c8 <col:21> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec144d0 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec143e8 <col:29> 'const u8 *' lvalue ParmVar 0x1553ec210a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1553ec14468 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1553ec14450 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1553ec14408 <col:39> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1553ec14428 <col:43> 'int' 128
|   |   |   |     `-IntegerLiteral 0x1553ec144e8 <col:51> 'int' 2
|   |   |   |-CompoundAssignOperator 0x1553ec14748 <line:1718:13, col:50> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1553ec14590 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1553ec14730 <col:21, col:50> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1553ec14710 <col:21, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1553ec146f8 <col:21, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1553ec14688 <col:21, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec14670 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec145b0 <col:21> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1553ec146b8 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1553ec145d0 <col:29> 'const u8 *' lvalue ParmVar 0x1553ec210a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1553ec14650 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1553ec14638 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1553ec145f0 <col:39> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1553ec14610 <col:43> 'int' 64
|   |   |   |     `-IntegerLiteral 0x1553ec146d0 <col:50> 'int' 1
|   |   |   |-CompoundAssignOperator 0x1553ec14888 <line:1719:13, col:40> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1553ec14778 <col:13> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1553ec14870 <col:21, col:40> 'unsigned long long' <IntegralCast>
|   |   |   |   `-CallExpr 0x1553ec14810 <col:21, col:40> 'char'
|   |   |   |     |-ImplicitCastExpr 0x1553ec147f8 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1553ec14798 <col:21> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |-ImplicitCastExpr 0x1553ec14840 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x1553ec147b8 <col:29> 'const u8 *' lvalue ParmVar 0x1553ec210a8 'g_scalar' 'const u8 *'
|   |   |   |     `-ImplicitCastExpr 0x1553ec14858 <col:39> 'int' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x1553ec147d8 <col:39> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |   |   |-CallExpr 0x1553ec149d8 <line:1721:13, col:54> 'void'
|   |   |   | |-ImplicitCastExpr 0x1553ec149c0 <col:13> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x1553ec148b8 <col:13> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x1553ec112a8 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |   |   | |-ImplicitCastExpr 0x1553ec14a18 <col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1553ec148d8 <col:26> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |   |   | |-ImplicitCastExpr 0x1553ec14a30 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x1553ec148f8 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x1553ec14a48 <col:36, col:48> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |   | | `-ArraySubscriptExpr 0x1553ec14980 <col:36, col:48> 'const smallfelem [16][3]' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x1553ec14968 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1553ec14920 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' lvalue ParmVar 0x1553ec215c0 'g_pre_comp' 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
|   |   |   | |   `-IntegerLiteral 0x1553ec14940 <col:47> 'int' 0
|   |   |   | `-ImplicitCastExpr 0x1553ec14a60 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x1553ec149a0 <col:51> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |   `-CallExpr 0x1553ec29008 <line:1723:13, line:1724:69> 'void'
|   |   |     |-ImplicitCastExpr 0x1553ec28ff0 <line:1723:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1553ec14a78 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x1553eb049a8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |   |     |-ImplicitCastExpr 0x1553ec29078 <col:23, col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1553ec14af8 <col:23, col:27> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553ec14ae0 <col:23> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1553ec14a98 <col:23> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x1553ec14ab8 <col:26> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1553ec29090 <col:30, col:34> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1553ec14b78 <col:30, col:34> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553ec14b60 <col:30> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1553ec14b18 <col:30> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x1553ec14b38 <col:33> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1553ec290a8 <col:37, col:41> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1553ec14bf8 <col:37, col:41> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553ec14be0 <col:37> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1553ec14b98 <col:37> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x1553ec14bb8 <col:40> 'int' 2
|   |   |     |-ImplicitCastExpr 0x1553ec290d8 <line:1724:23, col:27> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1553ec290c0 <col:23, col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1553ec14c78 <col:23, col:27> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1553ec14c60 <col:23> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1553ec14c18 <col:23> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x1553ec14c38 <col:26> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1553ec29108 <col:30, col:34> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1553ec290f0 <col:30, col:34> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1553ec14cf8 <col:30, col:34> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1553ec14ce0 <col:30> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1553ec14c98 <col:30> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x1553ec14cb8 <col:33> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1553ec29138 <col:37, col:41> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1553ec29120 <col:37, col:41> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1553ec14d78 <col:37, col:41> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1553ec14d60 <col:37> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1553ec14d18 <col:37> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x1553ec14d38 <col:40> 'int' 2
|   |   |     |-IntegerLiteral 0x1553ec14d98 <col:44> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1553ec29168 <col:47, col:52> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1553ec29150 <col:47, col:52> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1553ec14e20 <col:47, col:52> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1553ec14e08 <col:47> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1553ec14dc0 <col:47> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |     |     `-IntegerLiteral 0x1553ec14de0 <col:51> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1553ec29198 <col:55, col:60> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1553ec29180 <col:55, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1553ec14ea0 <col:55, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1553ec14e88 <col:55> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1553ec14e40 <col:55> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |     |     `-IntegerLiteral 0x1553ec14e60 <col:59> 'int' 1
|   |   |     `-ImplicitCastExpr 0x1553ec291c8 <col:63, col:68> 'const u64 *':'const u64 *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x1553ec291b0 <col:63, col:68> 'u64 *' <ArrayToPointerDecay>
|   |   |         `-ArraySubscriptExpr 0x1553ec14f20 <col:63, col:68> 'smallfelem':'u64 [4]' lvalue
|   |   |           |-ImplicitCastExpr 0x1553ec14f08 <col:63> 'smallfelem *' <ArrayToPointerDecay>
|   |   |           | `-DeclRefExpr 0x1553ec14ec0 <col:63> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |   |           `-IntegerLiteral 0x1553ec14ee0 <col:67> 'int' 2
|   |   `-IfStmt 0x1553ec25880 <line:1728:9, line:1759:9>
|   |     |-BinaryOperator 0x1553ec29388 <line:1728:13, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x1553ec29370 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1553ec29268 <col:13> 'const unsigned int' lvalue ParmVar 0x1553ec21030 'num_points' 'const unsigned int'
|   |     | `-ParenExpr 0x1553ec29350 <col:27, col:38> 'int'
|   |     |   `-BinaryOperator 0x1553ec29330 <col:28, col:37> 'int' '=='
|   |     |     |-BinaryOperator 0x1553ec292e8 <col:28, col:32> 'int' '%'
|   |     |     | |-ImplicitCastExpr 0x1553ec292d0 <col:28> 'int' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x1553ec29288 <col:28> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |     |     | `-IntegerLiteral 0x1553ec292a8 <col:32> 'int' 5
|   |     |     `-IntegerLiteral 0x1553ec29308 <col:37> 'int' 0
|   |     `-CompoundStmt 0x1553ec25868 <col:41, line:1759:9>
|   |       `-ForStmt 0x1553ec25830 <line:1730:13, line:1758:13>
|   |         |-BinaryOperator 0x1553ec29420 <line:1730:18, col:24> 'unsigned int' '='
|   |         | |-DeclRefExpr 0x1553ec293a8 <col:18> 'unsigned int' lvalue Var 0x1553ec21a90 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x1553ec29408 <col:24> 'unsigned int' <IntegralCast>
|   |         |   `-IntegerLiteral 0x1553ec293e0 <col:24> 'int' 0
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x1553ec294b0 <col:27, col:33> 'int' '<'
|   |         | |-ImplicitCastExpr 0x1553ec29480 <col:27> 'unsigned int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x1553ec29440 <col:27> 'unsigned int' lvalue Var 0x1553ec21a90 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x1553ec29498 <col:33> 'unsigned int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x1553ec29460 <col:33> 'const unsigned int' lvalue ParmVar 0x1553ec21030 'num_points' 'const unsigned int'
|   |         |-UnaryOperator 0x1553ec294f0 <col:45, col:47> 'unsigned int' prefix '++'
|   |         | `-DeclRefExpr 0x1553ec294d0 <col:47> 'unsigned int' lvalue Var 0x1553ec21a90 'num' 'unsigned int'
|   |         `-CompoundStmt 0x1553ec257c0 <col:52, line:1758:13>
|   |           |-BinaryOperator 0x1553ec29730 <line:1731:17, col:56> 'u64':'unsigned long long' '='
|   |           | |-DeclRefExpr 0x1553ec29508 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1553ec29718 <col:24, col:56> 'u64':'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1553ec296f8 <col:24, col:56> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1553ec296e0 <col:24, col:51> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1553ec29670 <col:24, col:51> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1553ec29658 <col:24> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1553ec29528 <col:24> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x1553ec296a0 <col:32, col:43> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1553ec295b8 <col:32, col:43> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1553ec29588 <col:32> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1553ec29548 <col:32> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1553ec20fb0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1553ec295a0 <col:40> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1553ec29568 <col:40> 'unsigned int' lvalue Var 0x1553ec21a90 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x1553ec29638 <col:46, col:50> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x1553ec29620 <col:46> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x1553ec295d8 <col:46> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x1553ec295f8 <col:50> 'int' 4
|   |           |     `-IntegerLiteral 0x1553ec296b8 <col:56> 'int' 5
|   |           |-CompoundAssignOperator 0x1553ec29978 <line:1732:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1553ec29750 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1553ec29960 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1553ec29940 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1553ec29928 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1553ec298b8 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1553ec298a0 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1553ec29770 <col:25> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x1553ec298e8 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1553ec29800 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1553ec297d0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1553ec29790 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1553ec20fb0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1553ec297e8 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1553ec297b0 <col:41> 'unsigned int' lvalue Var 0x1553ec21a90 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x1553ec29880 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x1553ec29868 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x1553ec29820 <col:47> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x1553ec29840 <col:51> 'int' 3
|   |           |     `-IntegerLiteral 0x1553ec29900 <col:57> 'int' 4
|   |           |-CompoundAssignOperator 0x1553ec29bd0 <line:1733:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1553ec299a8 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1553ec29bb8 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1553ec29b98 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1553ec29b80 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1553ec29b10 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1553ec29af8 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1553ec299c8 <col:25> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x1553ec29b40 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1553ec29a58 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1553ec29a28 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1553ec299e8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1553ec20fb0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1553ec29a40 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1553ec29a08 <col:41> 'unsigned int' lvalue Var 0x1553ec21a90 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x1553ec29ad8 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x1553ec29ac0 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x1553ec29a78 <col:47> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x1553ec29a98 <col:51> 'int' 2
|   |           |     `-IntegerLiteral 0x1553ec29b58 <col:57> 'int' 3
|   |           |-CompoundAssignOperator 0x1553ec29e28 <line:1734:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1553ec29c00 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1553ec29e10 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1553ec29df0 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1553ec29dd8 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1553ec29d68 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1553ec29d50 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1553ec29c20 <col:25> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x1553ec29d98 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1553ec29cb0 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1553ec29c80 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1553ec29c40 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1553ec20fb0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1553ec29c98 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1553ec29c60 <col:41> 'unsigned int' lvalue Var 0x1553ec21a90 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x1553ec29d30 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x1553ec29d18 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x1553ec29cd0 <col:47> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x1553ec29cf0 <col:51> 'int' 1
|   |           |     `-IntegerLiteral 0x1553ec29db0 <col:57> 'int' 2
|   |           |-CompoundAssignOperator 0x1553ec2a038 <line:1735:17, col:53> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1553ec29e58 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1553ec2a020 <col:25, col:53> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1553ec2a000 <col:25, col:53> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1553ec29fe8 <col:25, col:48> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1553ec29f60 <col:25, col:48> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1553ec29f48 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1553ec29e78 <col:25> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x1553ec29f90 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1553ec29f08 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1553ec29ed8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1553ec29e98 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1553ec20fb0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1553ec29ef0 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1553ec29eb8 <col:41> 'unsigned int' lvalue Var 0x1553ec21a90 'num' 'unsigned int'
|   |           |     |   `-ImplicitCastExpr 0x1553ec29fa8 <col:47> 'int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x1553ec29f28 <col:47> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |           |     `-IntegerLiteral 0x1553ec29fc0 <col:53> 'int' 1
|   |           |-CompoundAssignOperator 0x1553ec2a230 <line:1736:17, col:52> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1553ec2a068 <col:17> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1553ec2a218 <col:25, col:52> 'unsigned long long' <IntegralCast>
|   |           |   `-CallExpr 0x1553ec2a1d0 <col:25, col:52> 'char'
|   |           |     |-ImplicitCastExpr 0x1553ec2a1b8 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     | `-DeclRefExpr 0x1553ec2a088 <col:25> 'char (const u8 *, int)' Function 0x1553ec12758 'get_bit' 'char (const u8 *, int)'
|   |           |     |-ImplicitCastExpr 0x1553ec2a200 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     | `-ArraySubscriptExpr 0x1553ec2a118 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |-ImplicitCastExpr 0x1553ec2a0e8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   | `-DeclRefExpr 0x1553ec2a0a8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1553ec20fb0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   `-ImplicitCastExpr 0x1553ec2a100 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x1553ec2a0c8 <col:41> 'unsigned int' lvalue Var 0x1553ec21a90 'num' 'unsigned int'
|   |           |     `-BinaryOperator 0x1553ec2a198 <col:47, col:51> 'int' '-'
|   |           |       |-ImplicitCastExpr 0x1553ec2a180 <col:47> 'int' <LValueToRValue>
|   |           |       | `-DeclRefExpr 0x1553ec2a138 <col:47> 'int' lvalue Var 0x1553ec21960 'i' 'int'
|   |           |       `-IntegerLiteral 0x1553ec2a158 <col:51> 'int' 1
|   |           |-CallExpr 0x1553ec2a380 <line:1737:17, col:68> 'void'
|   |           | |-ImplicitCastExpr 0x1553ec2a368 <col:17> 'void (*)(unsigned char *, unsigned char *, unsigned char)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1553ec2a260 <col:17> 'void (unsigned char *, unsigned char *, unsigned char)' Function 0x1553eab3908 'ec_GFp_nistp_recode_scalar_bits' 'void (unsigned char *, unsigned char *, unsigned char)'
|   |           | |-UnaryOperator 0x1553ec2a2b8 <col:49, col:50> 'u8 *' prefix '&' cannot overflow
|   |           | | `-DeclRefExpr 0x1553ec2a280 <col:50> 'u8':'unsigned char' lvalue Var 0x1553ec22048 'sign' 'u8':'unsigned char'
|   |           | |-UnaryOperator 0x1553ec2a308 <col:56, col:57> 'u8 *' prefix '&' cannot overflow
|   |           | | `-DeclRefExpr 0x1553ec2a2d0 <col:57> 'u8':'unsigned char' lvalue Var 0x1553ec220c0 'digit' 'u8':'unsigned char'
|   |           | `-ImplicitCastExpr 0x1553ec2a3d0 <col:64> 'unsigned char' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x1553ec2a3b8 <col:64> 'u64':'unsigned long long' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x1553ec2a320 <col:64> 'u64':'unsigned long long' lvalue Var 0x1553ec21fb8 'bits' 'u64':'unsigned long long'
|   |           |-CallExpr 0x1553ec2a518 <line:1742:17, col:59> 'void'
|   |           | |-ImplicitCastExpr 0x1553ec2a500 <col:17> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1553ec2a3e8 <col:17> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x1553ec112a8 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |           | |-ImplicitCastExpr 0x1553ec2a570 <col:30> 'u64':'unsigned long long' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x1553ec2a558 <col:30> 'u8':'unsigned char' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x1553ec2a408 <col:30> 'u8':'unsigned char' lvalue Var 0x1553ec220c0 'digit' 'u8':'unsigned char'
|   |           | |-ImplicitCastExpr 0x1553ec2a588 <col:37> 'unsigned int' <IntegralCast>
|   |           | | `-IntegerLiteral 0x1553ec2a428 <col:37> 'int' 17
|   |           | |-ImplicitCastExpr 0x1553ec2a5a0 <col:41, col:53> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x1553ec2a4c0 <col:41, col:53> 'const smallfelem [17][3]' lvalue
|   |           | |   |-ImplicitCastExpr 0x1553ec2a490 <col:41> 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]' <LValueToRValue>
|   |           | |   | `-DeclRefExpr 0x1553ec2a450 <col:41> 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]' lvalue ParmVar 0x1553ec213c0 'pre_comp' 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]'
|   |           | |   `-ImplicitCastExpr 0x1553ec2a4a8 <col:50> 'unsigned int' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x1553ec2a470 <col:50> 'unsigned int' lvalue Var 0x1553ec21a90 'num' 'unsigned int'
|   |           | `-ImplicitCastExpr 0x1553ec2a5b8 <col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |           |   `-DeclRefExpr 0x1553ec2a4e0 <col:56> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |           |-CallExpr 0x1553ec2a6c0 <line:1743:17, col:44> 'void'
|   |           | |-ImplicitCastExpr 0x1553ec2a6a8 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1553ec2a5d0 <col:17> 'void (limb *, const u64 *)' Function 0x1553e9fabe0 'smallfelem_neg' 'void (limb *, const u64 *)'
|   |           | |-ImplicitCastExpr 0x1553ec2a6f0 <col:32> 'limb *' <ArrayToPointerDecay>
|   |           | | `-DeclRefExpr 0x1553ec2a5f0 <col:32> 'felem':'limb [4]' lvalue Var 0x1553ec21e30 'ftmp' 'felem':'limb [4]'
|   |           | `-ImplicitCastExpr 0x1553ec2a720 <col:38, col:43> 'const u64 *':'const u64 *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x1553ec2a708 <col:38, col:43> 'u64 *' <ArrayToPointerDecay>
|   |           |     `-ArraySubscriptExpr 0x1553ec2a688 <col:38, col:43> 'smallfelem':'u64 [4]' lvalue
|   |           |       |-ImplicitCastExpr 0x1553ec2a670 <col:38> 'smallfelem *' <ArrayToPointerDecay>
|   |           |       | `-DeclRefExpr 0x1553ec2a628 <col:38> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |           |       `-IntegerLiteral 0x1553ec2a648 <col:42> 'int' 1
|   |           |-CallExpr 0x1553ec2a908 <line:1745:17, col:73> 'void'
|   |           | |-ImplicitCastExpr 0x1553ec2a8f0 <col:17> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1553ec2a738 <col:17> 'void (limb *, const u64 *, limb)' Function 0x1553eb03a68 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   |           | |-ImplicitCastExpr 0x1553ec2a940 <col:40> 'limb *' <ArrayToPointerDecay>
|   |           | | `-DeclRefExpr 0x1553ec2a758 <col:40> 'felem':'limb [4]' lvalue Var 0x1553ec21e30 'ftmp' 'felem':'limb [4]'
|   |           | |-ImplicitCastExpr 0x1553ec2a970 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |           | | `-ImplicitCastExpr 0x1553ec2a958 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |           | |   `-ArraySubscriptExpr 0x1553ec2a7d8 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |           | |     |-ImplicitCastExpr 0x1553ec2a7c0 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |           | |     | `-DeclRefExpr 0x1553ec2a778 <col:46> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |           | |     `-IntegerLiteral 0x1553ec2a798 <col:50> 'int' 1
|   |           | `-ParenExpr 0x1553ec2a8d0 <col:54, col:72> 'int'
|   |           |   `-BinaryOperator 0x1553ec2a8b0 <col:55, col:71> 'int' '-'
|   |           |     |-ParenExpr 0x1553ec2a868 <col:55, col:67> 'limb':'int'
|   |           |     | `-CStyleCastExpr 0x1553ec2a840 <col:56, col:63> 'limb':'int' <IntegralCast>
|   |           |     |   `-ImplicitCastExpr 0x1553ec2a828 <col:63> 'u8':'unsigned char' <LValueToRValue> part_of_explicit_cast
|   |           |     |     `-DeclRefExpr 0x1553ec2a7f8 <col:63> 'u8':'unsigned char' lvalue Var 0x1553ec22048 'sign' 'u8':'unsigned char'
|   |           |     `-IntegerLiteral 0x1553ec2a888 <col:71> 'int' 1
|   |           |-CallExpr 0x1553ec2aa60 <line:1746:17, col:44> 'void'
|   |           | |-ImplicitCastExpr 0x1553ec2aa48 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1553ec2a988 <col:17> 'void (u64 *, const limb *)' Function 0x1553eaf9c88 'felem_contract' 'void (u64 *, const limb *)'
|   |           | |-ImplicitCastExpr 0x1553ec2aa90 <col:32, col:37> 'u64 *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x1553ec2aa08 <col:32, col:37> 'smallfelem':'u64 [4]' lvalue
|   |           | |   |-ImplicitCastExpr 0x1553ec2a9f0 <col:32> 'smallfelem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x1553ec2a9a8 <col:32> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |           | |   `-IntegerLiteral 0x1553ec2a9c8 <col:36> 'int' 1
|   |           | `-ImplicitCastExpr 0x1553ec2aac0 <col:40> 'const limb *':'const limb *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x1553ec2aaa8 <col:40> 'limb *' <ArrayToPointerDecay>
|   |           |     `-DeclRefExpr 0x1553ec2aa28 <col:40> 'felem':'limb [4]' lvalue Var 0x1553ec21e30 'ftmp' 'felem':'limb [4]'
|   |           `-IfStmt 0x1553ec25798 <line:1748:17, line:1757:17> has_else
|   |             |-UnaryOperator 0x1553ec2ab10 <line:1748:21, col:22> 'int' prefix '!' cannot overflow
|   |             | `-ImplicitCastExpr 0x1553ec2aaf8 <col:22> 'int' <LValueToRValue>
|   |             |   `-DeclRefExpr 0x1553ec2aad8 <col:22> 'int' lvalue Var 0x1553ec219e0 'skip' 'int'
|   |             |-CompoundStmt 0x1553ec251d8 <col:28, line:1752:17>
|   |             | `-CallExpr 0x1553ec24fe8 <line:1749:21, line:1751:60> 'void'
|   |             |   |-ImplicitCastExpr 0x1553ec24fd0 <line:1749:21> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x1553ec2ab28 <col:21> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x1553eb049a8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |             |   |-ImplicitCastExpr 0x1553ec25058 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1553ec2aba8 <col:31, col:35> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1553ec2ab90 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x1553ec2ab48 <col:31> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x1553ec2ab68 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x1553ec25070 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1553ec2ac28 <col:38, col:42> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1553ec2ac10 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x1553ec2abc8 <col:38> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x1553ec2abe8 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x1553ec25088 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1553ec2aca8 <col:45, col:49> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1553ec2ac90 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x1553ec2ac48 <col:45> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x1553ec2ac68 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x1553ec250b8 <line:1750:31, col:35> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1553ec250a0 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1553ec2ad28 <col:31, col:35> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1553ec2ad10 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1553ec2acc8 <col:31> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x1553ec2ace8 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x1553ec250e8 <col:38, col:42> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1553ec250d0 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1553ec2ada8 <col:38, col:42> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1553ec2ad90 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1553ec2ad48 <col:38> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x1553ec2ad68 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x1553ec25118 <col:45, col:49> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1553ec25100 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1553ec2ae28 <col:45, col:49> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1553ec2ae10 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1553ec2adc8 <col:45> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x1553ec2ade8 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x1553ec25130 <line:1751:31> 'int' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x1553ec2ae48 <col:31> 'const int' lvalue ParmVar 0x1553ec21128 'mixed' 'const int'
|   |             |   |-ImplicitCastExpr 0x1553ec25160 <col:38, col:43> 'const u64 *':'const u64 *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1553ec25148 <col:38, col:43> 'u64 *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1553ec2aec8 <col:38, col:43> 'smallfelem':'u64 [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1553ec2aeb0 <col:38> 'smallfelem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1553ec2ae68 <col:38> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |             |   |     `-IntegerLiteral 0x1553ec2ae88 <col:42> 'int' 0
|   |             |   |-ImplicitCastExpr 0x1553ec25190 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1553ec25178 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1553ec2af48 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1553ec2af30 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1553ec2aee8 <col:46> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |             |   |     `-IntegerLiteral 0x1553ec2af08 <col:50> 'int' 1
|   |             |   `-ImplicitCastExpr 0x1553ec251c0 <col:54, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x1553ec251a8 <col:54, col:59> 'u64 *' <ArrayToPointerDecay>
|   |             |       `-ArraySubscriptExpr 0x1553ec2afc8 <col:54, col:59> 'smallfelem':'u64 [4]' lvalue
|   |             |         |-ImplicitCastExpr 0x1553ec2afb0 <col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |             |         | `-DeclRefExpr 0x1553ec2af68 <col:54> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |             |         `-IntegerLiteral 0x1553ec2af88 <col:58> 'int' 2
|   |             `-CompoundStmt 0x1553ec25768 <line:1752:24, line:1757:17>
|   |               |-CallExpr 0x1553ec25328 <line:1753:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x1553ec25310 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x1553ec251f0 <col:21> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x1553ec25358 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x1553ec25270 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x1553ec25258 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x1553ec25210 <col:39> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x1553ec25230 <col:42> 'int' 0
|   |               | `-ImplicitCastExpr 0x1553ec25388 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x1553ec25370 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x1553ec252f0 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x1553ec252d8 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x1553ec25290 <col:46> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x1553ec252b0 <col:50> 'int' 0
|   |               |-CallExpr 0x1553ec254d8 <line:1754:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x1553ec254c0 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x1553ec253a0 <col:21> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x1553ec25508 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x1553ec25420 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x1553ec25408 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x1553ec253c0 <col:39> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x1553ec253e0 <col:42> 'int' 1
|   |               | `-ImplicitCastExpr 0x1553ec25538 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x1553ec25520 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x1553ec254a0 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x1553ec25488 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x1553ec25440 <col:46> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x1553ec25460 <col:50> 'int' 1
|   |               |-CallExpr 0x1553ec25688 <line:1755:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x1553ec25670 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x1553ec25550 <col:21> 'void (limb *, const u64 *)' Function 0x1553ea04ac0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x1553ec256b8 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x1553ec255d0 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x1553ec255b8 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x1553ec25570 <col:39> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x1553ec25590 <col:42> 'int' 2
|   |               | `-ImplicitCastExpr 0x1553ec256e8 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x1553ec256d0 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x1553ec25650 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x1553ec25638 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x1553ec255f0 <col:46> 'smallfelem [3]' lvalue Var 0x1553ec21f28 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x1553ec25610 <col:50> 'int' 2
|   |               `-BinaryOperator 0x1553ec25748 <line:1756:21, col:28> 'int' '='
|   |                 |-DeclRefExpr 0x1553ec25700 <col:21> 'int' lvalue Var 0x1553ec219e0 'skip' 'int'
|   |                 `-IntegerLiteral 0x1553ec25720 <col:28> 'int' 0
|   |-CallExpr 0x1553ec259d0 <line:1761:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553ec259b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec258f8 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec25a00 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553ec25918 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1553ec12c70 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1553ec25a30 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec25a18 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x1553ec25998 <col:25, col:29> 'felem':'limb [4]' lvalue
|   |       |-ImplicitCastExpr 0x1553ec25980 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553ec25938 <col:25> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x1553ec25958 <col:28> 'int' 0
|   |-CallExpr 0x1553ec25b20 <line:1762:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1553ec25b08 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec25a48 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec25b50 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1553ec25a68 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1553ec12ce8 'y_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1553ec25b80 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec25b68 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x1553ec25ae8 <col:25, col:29> 'felem':'limb [4]' lvalue
|   |       |-ImplicitCastExpr 0x1553ec25ad0 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1553ec25a88 <col:25> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x1553ec25aa8 <col:28> 'int' 1
|   `-CallExpr 0x1553ec25c70 <line:1763:5, col:30> 'void'
|     |-ImplicitCastExpr 0x1553ec25c58 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553ec25b98 <col:5> 'void (limb *, const limb *)' Function 0x1553e9f7988 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1553ec25ca0 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1553ec25bb8 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1553ec12d60 'z_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1553ec25cd0 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1553ec25cb8 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|         `-ArraySubscriptExpr 0x1553ec25c38 <col:25, col:29> 'felem':'limb [4]' lvalue
|           |-ImplicitCastExpr 0x1553ec25c20 <col:25> 'felem *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x1553ec25bd8 <col:25> 'felem [3]' lvalue Var 0x1553ec21db8 'nq' 'felem [3]'
|           `-IntegerLiteral 0x1553ec25bf8 <col:28> 'int' 2
|-RecordDecl 0x1553ec25d58 prev 0x1553ea84b08 <line:1767:1, line:1771:1> line:1767:8 invalid struct nistp256_pre_comp_st definition
| |-FieldDecl 0x1553ec25f48 <line:1768:5, col:35> col:16 referenced g_pre_comp 'smallfelem [2][16][3]'
| |-FieldDecl 0x1553ec25fb8 <line:1769:5, col:9> col:9 referenced references 'int'
| `-FieldDecl 0x1553ec26028 <line:1770:5, col:20> col:20 invalid lock 'int *'
|-FunctionDecl 0x1553ec26150 <line:1773:1, line:1829:1> line:1773:18 invalid EC_GFp_nistp256_method 'const int *(void)'
| `-CompoundStmt 0x1553ec26488 <line:1774:1, line:1829:1>
|   `-DeclStmt 0x1553ec26440 <line:1775:5, line:1826:6>
|     `-VarDecl 0x1553ec26220 <line:1775:5, col:28> col:28 invalid ret 'const int' static
|-FunctionDecl 0x1553ec26518 <line:1836:1, line:1854:1> line:1836:27 used nistp256_pre_comp_new 'NISTP256_PRE_COMP *()' static
| |-CompoundStmt 0x1553ec27028 <line:1837:1, line:1854:1>
| | |-DeclStmt 0x1553ec26870 <line:1838:5, col:58>
| | | `-VarDecl 0x1553ec265e0 <col:5, col:57> col:24 used ret 'NISTP256_PRE_COMP *' cinit
| | |   `-ImplicitCastExpr 0x1553ec26858 <col:30, col:57> 'NISTP256_PRE_COMP *' <IntegralToPointer>
| | |     `-CallExpr 0x1553ec26830 <col:30, col:57> 'int'
| | |       |-ImplicitCastExpr 0x1553ec26818 <col:30> 'int (*)()' <FunctionToPointerDecay>
| | |       | `-DeclRefExpr 0x1553ec26738 <col:30> 'int ()' Function 0x1553ec26670 'OPENSSL_zalloc' 'int ()'
| | |       `-UnaryExprOrTypeTraitExpr 0x1553ec267c8 <col:45, col:56> 'unsigned long long' sizeof
| | |         `-ParenExpr 0x1553ec267a8 <col:51, col:56> 'NISTP256_PRE_COMP':'struct nistp256_pre_comp_st' lvalue
| | |           `-UnaryOperator 0x1553ec26790 <col:52, col:53> 'NISTP256_PRE_COMP':'struct nistp256_pre_comp_st' lvalue prefix '*' cannot overflow
| | |             `-ImplicitCastExpr 0x1553ec26778 <col:53> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |               `-DeclRefExpr 0x1553ec26758 <col:53> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec265e0 'ret' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
| | |-IfStmt 0x1553ec26a18 <line:1840:5, line:1843:5>
| | | |-BinaryOperator 0x1553ec26978 <line:1840:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
| | | | |-ImplicitCastExpr 0x1553ec26948 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1840:9> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x1553ec26888 <col:9> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec265e0 'ret' 'NISTP256_PRE_COMP *'
| | | | `-ImplicitCastExpr 0x1553ec26960 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
| | | |   `-ParenExpr 0x1553ec26928 <col:17, col:27> 'void *'
| | | |     `-CStyleCastExpr 0x1553ec26900 <col:18, col:26> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x1553ec268c0 <col:26> 'int' 0
| | | `-CompoundStmt 0x1553ec26a00 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1840:22, line:1843:5>
| | |   `-ReturnStmt 0x1553ec269f0 <line:1842:9, col:16>
| | |     `-ImplicitCastExpr 0x1553ec269d8 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |       `-DeclRefExpr 0x1553ec269b8 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec265e0 'ret' 'NISTP256_PRE_COMP *'
| | |-BinaryOperator 0x1553ec26ac0 <line:1845:5, col:23> 'int' '='
| | | |-MemberExpr 0x1553ec26a68 <col:5, col:10> 'int' lvalue ->references 0x1553ec25fb8
| | | | `-ImplicitCastExpr 0x1553ec26a50 <col:5> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x1553ec26a30 <col:5> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec265e0 'ret' 'NISTP256_PRE_COMP *'
| | | `-IntegerLiteral 0x1553ec26a98 <col:23> 'int' 1
| | |-IfStmt 0x1553ec26fb0 <line:1848:5, line:1852:5>
| | | |-OpaqueValueExpr 0x1553ec26f98 <<invalid sloc>> '_Bool'
| | | `-CompoundStmt 0x1553ec26f78 <line:1848:28, line:1852:5>
| | |   |-CallExpr 0x1553ec26e88 <line:1850:9, col:25> 'int'
| | |   | |-ImplicitCastExpr 0x1553ec26e70 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x1553ec26e30 <col:9> 'int ()' Function 0x1553ec26d68 'OPENSSL_free' 'int ()'
| | |   | `-ImplicitCastExpr 0x1553ec26eb0 <col:22> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x1553ec26e50 <col:22> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec265e0 'ret' 'NISTP256_PRE_COMP *'
| | |   `-ReturnStmt 0x1553ec26f68 <line:1851:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27>
| | |     `-ImplicitCastExpr 0x1553ec26f50 <col:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
| | |       `-ParenExpr 0x1553ec26f30 <col:17, col:27> 'void *'
| | |         `-CStyleCastExpr 0x1553ec26f08 <col:18, col:26> 'void *' <NullToPointer>
| | |           `-IntegerLiteral 0x1553ec26ec8 <col:26> 'int' 0
| | `-ReturnStmt 0x1553ec27018 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1853:5, col:12>
| |   `-ImplicitCastExpr 0x1553ec27000 <col:12> 'NISTP256_PRE_COMP *' <LValueToRValue>
| |     `-DeclRefExpr 0x1553ec26fe0 <col:12> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec265e0 'ret' 'NISTP256_PRE_COMP *'
| `-FullComment 0x1553ec4c9b8 <line:1831:4, col:78>
|   `-ParagraphComment 0x1553ec4c990 <col:4, col:78>
|     `-TextComment 0x1553ec4c968 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x1553ec27118 prev 0x1553ea83b08 <line:1856:1, line:1862:1> line:1856:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| |-ParmVarDecl 0x1553ec27070 <col:45, col:64> col:64 used p 'NISTP256_PRE_COMP *'
| `-CompoundStmt 0x1553ec275d8 <line:1857:1, line:1862:1>
|   |-DeclStmt 0x1553ec27240 <line:1858:5, col:10>
|   | `-VarDecl 0x1553ec271d8 <col:5, col:9> col:9 used i 'int'
|   `-ReturnStmt 0x1553ec275c8 <line:1861:5, col:12>
|     `-ImplicitCastExpr 0x1553ec275b0 <col:12> 'NISTP256_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x1553ec27590 <col:12> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x1553ec27070 'p' 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1553ec276b0 prev 0x1553ea8d230 <line:1864:1, line:1879:1> line:1864:6 used EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| |-ParmVarDecl 0x1553ec27608 <col:32, col:51> col:51 used pre 'NISTP256_PRE_COMP *'
| `-CompoundStmt 0x1553ec28078 <line:1865:1, line:1879:1>
|   |-DeclStmt 0x1553ec277d8 <line:1866:5, col:10>
|   | `-VarDecl 0x1553ec27770 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x1553ec278f8 <line:1868:5, line:1869:9>
|   | |-BinaryOperator 0x1553ec278c8 <line:1868:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1553ec27898 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1868:9> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ec277f0 <col:9> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x1553ec27608 'pre' 'NISTP256_PRE_COMP *'
|   | | `-ImplicitCastExpr 0x1553ec278b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x1553ec27878 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1553ec27850 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1553ec27810 <col:26> 'int' 0
|   | `-ReturnStmt 0x1553ec278e8 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1869:9>
|   |-IfStmt 0x1553ec27c80 <line:1873:5, line:1874:9>
|   | |-BinaryOperator 0x1553ec27c50 <line:1873:9, col:13> 'int' '>'
|   | | |-ImplicitCastExpr 0x1553ec27c38 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ec27bf0 <col:9> 'int' lvalue Var 0x1553ec27770 'i' 'int'
|   | | `-IntegerLiteral 0x1553ec27c10 <col:13> 'int' 0
|   | `-ReturnStmt 0x1553ec27c70 <line:1874:9>
|   |-CallExpr 0x1553ec27e40 <line:1875:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x1553ec27e28 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec27d88 <col:5> 'int ()' Function 0x1553ec27cc0 'REF_ASSERT_ISNT' 'int ()'
|   | `-BinaryOperator 0x1553ec27e08 <col:21, col:25> 'int' '<'
|   |   |-ImplicitCastExpr 0x1553ec27df0 <col:21> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553ec27da8 <col:21> 'int' lvalue Var 0x1553ec27770 'i' 'int'
|   |   `-IntegerLiteral 0x1553ec27dc8 <col:25> 'int' 0
|   `-CallExpr 0x1553ec28008 <line:1878:5, col:21> 'int'
|     |-ImplicitCastExpr 0x1553ec27ff0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553ec27fb0 <col:5> 'int ()' Function 0x1553ec26d68 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x1553ec28030 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x1553ec27fd0 <col:18> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x1553ec27608 'pre' 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1553ec28160 <line:1886:1, line:1892:1> line:1886:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| |-ParmVarDecl 0x1553ec280c8 <col:32, col:42> col:42 invalid group 'int *'
| |-CompoundStmt 0x1553ec28360 <line:1887:1, line:1892:1>
| | |-DeclStmt 0x1553ec282a0 <line:1888:5, col:12>
| | | `-VarDecl 0x1553ec28238 <col:5, col:9> col:9 used ret 'int'
| | `-ReturnStmt 0x1553ec28350 <line:1891:5, col:12>
| |   `-ImplicitCastExpr 0x1553ec28338 <col:12> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x1553ec28318 <col:12> 'int' lvalue Var 0x1553ec28238 'ret' 'int'
| `-FullComment 0x1553ec4ca80 <line:1881:4, col:78>
|   `-ParagraphComment 0x1553ec4ca58 <col:4, col:78>
|     `-TextComment 0x1553ec4ca30 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x1553ec28650 <line:1894:1, line:1924:1> line:1894:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1553ec28398 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1553ec28418 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1553ec28498 <line:1895:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1553ec28518 <col:54, col:68> col:68 invalid b 'const int *'
| |-ParmVarDecl 0x1553ec28598 <line:1896:37, col:45> col:45 invalid ctx 'int *'
| `-CompoundStmt 0x1553ec2b718 <line:1897:1, line:1924:1>
|   |-DeclStmt 0x1553ec287d8 <line:1898:5, col:16>
|   | `-VarDecl 0x1553ec28748 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1553ec287b0 <col:15> 'int' 0
|   |-IfStmt 0x1553ec28b50 <line:1902:5, line:1904:20>
|   | |-OpaqueValueExpr 0x1553ec28b38 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x1553ec28b20 <line:1903:9, line:1904:20>
|   |   |-OpaqueValueExpr 0x1553ec28b08 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x1553ec28af8 <col:13, col:20>
|   |     `-IntegerLiteral 0x1553ec28ad0 <col:20> 'int' 0
|   |-IfStmt 0x1553ec2b000 <line:1906:5, line:1909:14>
|   | |-OpaqueValueExpr 0x1553ec28fc8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1553ec28fb0 <col:9, col:14> 'err' 0x1553ec28f60
|   |-IfStmt 0x1553ec2b440 <line:1913:5, line:1917:5>
|   | |-OpaqueValueExpr 0x1553ec2b428 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1553ec2b410 <line:1913:79, line:1917:5>
|   |   `-GotoStmt 0x1553ec2b3f8 <line:1916:9, col:14> 'err' 0x1553ec28f60
|   |-LabelStmt 0x1553ec2b5a8 <line:1920:2, col:5> 'err'
|   | `-NullStmt 0x1553ec2b5a0 <col:5>
|   `-ReturnStmt 0x1553ec2b708 <line:1923:5, col:12>
|     `-ImplicitCastExpr 0x1553ec2b6f0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1553ec2b6d0 <col:12> 'int' lvalue Var 0x1553ec28748 'ret' 'int'
|-FunctionDecl 0x1553ec2ba28 <line:1930:1, line:1973:1> line:1930:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1553ec2b770 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1553ec2b7f0 <line:1931:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1553ec2b870 <line:1932:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1553ec2b8f0 <col:61, col:69> col:69 invalid y 'int *'
| |-ParmVarDecl 0x1553ec2b970 <line:1933:50, col:58> col:58 invalid ctx 'int *'
| `-CompoundStmt 0x1553ec23070 <line:1934:1, line:1973:1>
|   |-DeclStmt 0x1553ec2bd10 <line:1935:5, col:29>
|   | |-VarDecl 0x1553ec2bb18 <col:5, col:11> col:11 used z1 'felem':'limb [4]'
|   | |-VarDecl 0x1553ec2bb90 <col:5, col:15> col:15 used z2 'felem':'limb [4]'
|   | |-VarDecl 0x1553ec2bc08 <col:5, col:19> col:19 used x_in 'felem':'limb [4]'
|   | `-VarDecl 0x1553ec2bc80 <col:5, col:25> col:25 used y_in 'felem':'limb [4]'
|   |-DeclStmt 0x1553ec2be30 <line:1936:5, col:28>
|   | |-VarDecl 0x1553ec2bd38 <col:5, col:16> col:16 used x_out 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x1553ec2bdb0 <col:5, col:23> col:23 used y_out 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x1553ec2bec0 <line:1937:5, col:18>
|   | `-VarDecl 0x1553ec2be58 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   |-IfStmt 0x1553ec2c070 <line:1939:5, line:1943:5>
|   | |-OpaqueValueExpr 0x1553ec2c058 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1553ec2c040 <line:1939:48, line:1943:5>
|   |   `-ReturnStmt 0x1553ec2c030 <line:1942:9, col:16>
|   |     `-IntegerLiteral 0x1553ec2c008 <col:16> 'int' 0
|   |-IfStmt 0x1553ec2c180 <line:1944:5, line:1946:16>
|   | |-OpaqueValueExpr 0x1553ec2c168 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1553ec2c158 <col:9, col:16>
|   |   `-IntegerLiteral 0x1553ec2c130 <col:16> 'int' 0
|   |-CallExpr 0x1553ec2c228 <line:1947:5, col:21> 'void'
|   | |-ImplicitCastExpr 0x1553ec2c210 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c198 <col:5> 'void (limb *, const limb *)' Function 0x1553eaef020 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2c258 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c1b8 <col:15> 'felem':'limb [4]' lvalue Var 0x1553ec2bb90 'z2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553ec2c288 <col:19> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2c270 <col:19> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2c1f0 <col:19> 'felem':'limb [4]' lvalue Var 0x1553ec2bb18 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x1553ec2c330 <line:1948:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1553ec2c318 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c2a0 <col:5> 'void (limb *, const limb *)' Function 0x1553ea08468 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2c360 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c2c0 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1553ec2be58 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1553ec2c390 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2c378 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2c2f8 <col:23> 'felem':'limb [4]' lvalue Var 0x1553ec2bb90 'z2' 'felem':'limb [4]'
|   |-CallExpr 0x1553ec2c420 <line:1949:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1553ec2c408 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c3a8 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2c450 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c3c8 <col:18> 'felem':'limb [4]' lvalue Var 0x1553ec2bb18 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553ec2c480 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2c468 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2c3e8 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553ec2be58 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553ec2c530 <line:1950:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553ec2c518 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c498 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2c568 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c4b8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553ec2be58 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553ec2c598 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553ec2c580 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553ec2c4d8 <col:20> 'felem':'limb [4]' lvalue Var 0x1553ec2bc08 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553ec2c5c8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2c5b0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2c4f8 <col:26> 'felem':'limb [4]' lvalue Var 0x1553ec2bb18 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x1553ec2c658 <line:1951:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553ec2c640 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c5e0 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2c688 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c600 <col:18> 'felem':'limb [4]' lvalue Var 0x1553ec2bc08 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553ec2c6b8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2c6a0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2c620 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553ec2be58 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553ec2c760 <line:1952:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553ec2c748 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c6d0 <col:5> 'void (u64 *, const limb *)' Function 0x1553eaf9c88 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2c790 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c6f0 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x1553ec2bd38 'x_out' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553ec2c7c0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2c7a8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2c728 <col:27> 'felem':'limb [4]' lvalue Var 0x1553ec2bc08 'x_in' 'felem':'limb [4]'
|   |-IfStmt 0x1553ec2c950 <line:1953:5, line:1959:5>
|   | |-OpaqueValueExpr 0x1553ec2c938 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1553ec2c920 <line:1953:20, line:1959:5>
|   |   `-IfStmt 0x1553ec2c908 <line:1954:9, line:1958:9>
|   |     |-OpaqueValueExpr 0x1553ec2c8f0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1553ec2c8d8 <line:1954:42, line:1958:9>
|   |       `-ReturnStmt 0x1553ec2c8c8 <line:1957:13, col:20>
|   |         `-IntegerLiteral 0x1553ec2c8a0 <col:20> 'int' 0
|   |-CallExpr 0x1553ec2ca00 <line:1960:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1553ec2c9e8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c968 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2ca38 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2c988 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553ec2be58 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553ec2ca68 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553ec2ca50 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553ec2c9a8 <col:20> 'felem':'limb [4]' lvalue Var 0x1553ec2bb18 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553ec2ca98 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2ca80 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2c9c8 <col:24> 'felem':'limb [4]' lvalue Var 0x1553ec2bb90 'z2' 'felem':'limb [4]'
|   |-CallExpr 0x1553ec2cb28 <line:1961:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1553ec2cb10 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2cab0 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2cb58 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2cad0 <col:18> 'felem':'limb [4]' lvalue Var 0x1553ec2bb18 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553ec2cb88 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2cb70 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2caf0 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1553ec2be58 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553ec2cc38 <line:1962:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1553ec2cc20 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2cba0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1553eafae08 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2cc70 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2cbc0 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1553ec2be58 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1553ec2cca0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1553ec2cc88 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1553ec2cbe0 <col:20> 'felem':'limb [4]' lvalue Var 0x1553ec2bc80 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553ec2ccd0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2ccb8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2cc00 <col:26> 'felem':'limb [4]' lvalue Var 0x1553ec2bb18 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x1553ec2cd60 <line:1963:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1553ec2cd48 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2cce8 <col:5> 'void (limb *, const limb *)' Function 0x1553eaf8160 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2cd90 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2cd08 <col:18> 'felem':'limb [4]' lvalue Var 0x1553ec2bc80 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1553ec2cdc0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2cda8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2cd28 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1553ec2be58 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1553ec2ce68 <line:1964:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553ec2ce50 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2cdd8 <col:5> 'void (u64 *, const limb *)' Function 0x1553eaf9c88 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec2ce98 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec2cdf8 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x1553ec2bdb0 'y_out' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553ec2cec8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec2ceb0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec2ce30 <col:27> 'felem':'limb [4]' lvalue Var 0x1553ec2bc80 'y_in' 'felem':'limb [4]'
|   |-IfStmt 0x1553ec23020 <line:1965:5, line:1971:5>
|   | |-OpaqueValueExpr 0x1553ec23008 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1553ec22ff0 <line:1965:20, line:1971:5>
|   |   `-IfStmt 0x1553ec22fd8 <line:1966:9, line:1970:9>
|   |     |-OpaqueValueExpr 0x1553ec22fc0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1553ec2cfe0 <line:1966:42, line:1970:9>
|   |       `-ReturnStmt 0x1553ec2cfd0 <line:1969:13, col:20>
|   |         `-IntegerLiteral 0x1553ec2cfa8 <col:20> 'int' 0
|   `-ReturnStmt 0x1553ec23060 <line:1972:5, col:12>
|     `-IntegerLiteral 0x1553ec23038 <col:12> 'int' 1
|-FunctionDecl 0x1553ec23578 <line:1976:1, line:2002:1> line:1976:13 used make_points_affine 'void (size_t, smallfelem (*)[3], smallfelem *)' static
| |-ParmVarDecl 0x1553ec23128 <col:32, col:39> col:39 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ec232f0 <col:44, col:65> col:55 used points 'smallfelem (*)[3]':'smallfelem (*)[3]'
| |-ParmVarDecl 0x1553ec23410 <line:1977:32, col:59> col:43 used tmp_smallfelems 'smallfelem *':'smallfelem *'
| `-CompoundStmt 0x1553ec24368 <line:1978:1, line:2002:1>
|   `-CallExpr 0x1553ec24260 <line:1983:5, line:2001:63> 'void'
|     |-ImplicitCastExpr 0x1553ec24248 <line:1983:5> 'void (*)(size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553ec23648 <col:5> 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' Function 0x1553eab35b8 'ec_GFp_nistp_points_make_affine_internal' 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
|     |-ImplicitCastExpr 0x1553ec242d8 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|     | `-DeclRefExpr 0x1553ec23668 <col:46> 'size_t':'unsigned long long' lvalue ParmVar 0x1553ec23128 'num' 'size_t':'unsigned long long'
|     |-ImplicitCastExpr 0x1553ec24308 <line:1984:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x1553ec242f0 <col:46> 'smallfelem (*)[3]':'smallfelem (*)[3]' <LValueToRValue>
|     |   `-DeclRefExpr 0x1553ec23688 <col:46> 'smallfelem (*)[3]':'smallfelem (*)[3]' lvalue ParmVar 0x1553ec232f0 'points' 'smallfelem (*)[3]':'smallfelem (*)[3]'
|     |-UnaryExprOrTypeTraitExpr 0x1553ec236b8 <line:1985:46, col:63> 'unsigned long long' sizeof 'smallfelem':'u64 [4]'
|     |-ImplicitCastExpr 0x1553ec24338 <line:1986:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x1553ec24320 <col:46> 'smallfelem *':'smallfelem *' <LValueToRValue>
|     |   `-DeclRefExpr 0x1553ec236d8 <col:46> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x1553ec23410 'tmp_smallfelems' 'smallfelem *':'smallfelem *'
|     |-CStyleCastExpr 0x1553ec23840 <line:1987:46, col:64> 'void (*)(void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1553ec23828 <col:64> 'void (*)(u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1553ec23778 <col:64> 'void (u64 *)' Function 0x1553e9f6ad8 'smallfelem_one' 'void (u64 *)'
|     |-ImplicitCastExpr 0x1553ec24350 <line:1988:46> 'int (*)(const void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1553ec23868 <col:46> 'int (const void *)' Function 0x1553eafec10 'smallfelem_is_zero_int' 'int (const void *)'
|     |-CStyleCastExpr 0x1553ec23a60 <line:1989:46, line:1990:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1553ec23a48 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1553ec23988 <col:46> 'void (u64 *, const u64 *)' Function 0x1553e9f7138 'smallfelem_assign' 'void (u64 *, const u64 *)'
|     |-CStyleCastExpr 0x1553ec23c00 <line:1991:46, line:1992:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1553ec23be8 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1553ec23b88 <col:46> 'void (u64 *, const u64 *)' Function 0x1553eaee108 'smallfelem_square_contract' 'void (u64 *, const u64 *)'
|     |-CStyleCastExpr 0x1553ec23e80 <line:1993:46, line:1996:46> 'void (*)(void *, const void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1553ec23e68 <col:46> 'void (*)(u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1553ec23da8 <col:46> 'void (u64 *, const u64 *, const u64 *)' Function 0x1553eaee878 'smallfelem_mul_contract' 'void (u64 *, const u64 *, const u64 *)'
|     |-CStyleCastExpr 0x1553ec24020 <line:1997:46, line:1998:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1553ec24008 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1553ec23fa8 <col:46> 'void (u64 *, const u64 *)' Function 0x1553eaf2b00 'smallfelem_inv_contract' 'void (u64 *, const u64 *)'
|     `-CStyleCastExpr 0x1553ec241c0 <line:2000:46, line:2001:46> 'void (*)(void *, const void *)' <BitCast>
|       `-ImplicitCastExpr 0x1553ec241a8 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|         `-DeclRefExpr 0x1553ec24148 <col:46> 'void (u64 *, const u64 *)' Function 0x1553e9f7138 'smallfelem_assign' 'void (u64 *, const u64 *)'
|-FunctionDecl 0x1553ec24778 <line:2008:1, line:2209:1> line:2008:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1553ec24398 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1553ec24418 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1553ec24498 <line:2009:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1553ec24510 <col:54, col:61> col:61 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1553ec245a0 <line:2010:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1553ec24630 <line:2011:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| |-ParmVarDecl 0x1553ec246b0 <col:57, col:65> col:65 invalid ctx 'int *'
| `-CompoundStmt 0x1553ec3ee48 <line:2012:1, line:2209:1>
|   |-DeclStmt 0x1553ec24910 <line:2013:5, col:16>
|   | `-VarDecl 0x1553ec24880 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1553ec248e8 <col:15> 'int' 0
|   |-DeclStmt 0x1553ec249a8 <line:2014:5, col:10>
|   | `-VarDecl 0x1553ec24940 <col:5, col:9> col:9 used j 'int'
|   |-DeclStmt 0x1553ec24a68 <line:2015:5, col:18>
|   | `-VarDecl 0x1553ec249d8 <col:5, col:17> col:9 used mixed 'int' cinit
|   |   `-IntegerLiteral 0x1553ec24a40 <col:17> 'int' 0
|   |-DeclStmt 0x1553ec24b80 <line:2018:5, col:29>
|   | `-VarDecl 0x1553ec24b18 <col:5, col:21> col:21 used g_secret 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x1553ec24d10 <line:2019:5, col:36>
|   | `-VarDecl 0x1553ec24c08 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2019:22 used secrets 'felem_bytearray *' cinit
|   |   `-ImplicitCastExpr 0x1553ec24cf8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <NullToPointer>
|   |     `-ParenExpr 0x1553ec24cd8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1553ec24cb0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1553ec24c70 <col:26> 'int' 0
|   |-DeclStmt 0x1553ec2d010 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2020:5, col:41>
|   | `-VarDecl 0x1553ec24eb8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2020:18 used pre_comp 'smallfelem (*)[17][3]' cinit
|   |   `-ImplicitCastExpr 0x1553ec24fa8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem (*)[17][3]' <NullToPointer>
|   |     `-ParenExpr 0x1553ec24f88 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1553ec24f60 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1553ec24f20 <col:26> 'int' 0
|   |-DeclStmt 0x1553ec2d140 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2021:5, col:39>
|   | `-VarDecl 0x1553ec2d038 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2021:17 used tmp_smallfelems 'smallfelem *' cinit
|   |   `-ImplicitCastExpr 0x1553ec2d128 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem *' <NullToPointer>
|   |     `-ParenExpr 0x1553ec2d108 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1553ec2d0e0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1553ec2d0a0 <col:26> 'int' 0
|   |-DeclStmt 0x1553ec2d1d0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2022:5, col:24>
|   | `-VarDecl 0x1553ec2d168 <col:5, col:21> col:21 used tmp 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x1553ec2d300 <line:2023:5, col:26>
|   | |-VarDecl 0x1553ec2d200 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x1553ec2d280 <col:5, col:17> col:17 used num_bytes 'unsigned int'
|   |-DeclStmt 0x1553ec2d3c0 <line:2024:5, col:26>
|   | `-VarDecl 0x1553ec2d330 <col:5, col:25> col:9 used have_pre_comp 'int' cinit
|   |   `-IntegerLiteral 0x1553ec2d398 <col:25> 'int' 0
|   |-DeclStmt 0x1553ec2d4a0 <line:2025:5, col:28>
|   | `-VarDecl 0x1553ec2d3e8 <col:5, col:25> col:12 used num_points 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x1553ec2d488 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1553ec2d450 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x1553ec24510 'num' 'size_t':'unsigned long long'
|   |-DeclStmt 0x1553ec2d640 <line:2026:5, col:32>
|   | |-VarDecl 0x1553ec2d4c8 <col:5, col:16> col:16 used x_in 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x1553ec2d540 <col:5, col:22> col:22 used y_in 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x1553ec2d5b8 <col:5, col:28> col:28 used z_in 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x1553ec2d7e0 <line:2027:5, col:30>
|   | |-VarDecl 0x1553ec2d668 <col:5, col:11> col:11 used x_out 'felem':'limb [4]'
|   | |-VarDecl 0x1553ec2d6e0 <col:5, col:18> col:18 used y_out 'felem':'limb [4]'
|   | `-VarDecl 0x1553ec2d758 <col:5, col:25> col:25 used z_out 'felem':'limb [4]'
|   |-DeclStmt 0x1553ec2d910 <line:2028:5, col:34>
|   | `-VarDecl 0x1553ec2d808 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2028:24 used pre 'NISTP256_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x1553ec2d8f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x1553ec2d8d8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1553ec2d8b0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1553ec2d870 <col:26> 'int' 0
|   |-DeclStmt 0x1553ec2db50 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2029:5, col:48>
|   | `-VarDecl 0x1553ec2da48 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2029:23 used g_pre_comp 'const smallfelem (*)[16][3]' cinit
|   |   `-ImplicitCastExpr 0x1553ec2db38 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const smallfelem (*)[16][3]' <NullToPointer>
|   |     `-ParenExpr 0x1553ec2db18 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1553ec2daf0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1553ec2dab0 <col:26> 'int' 0
|   |-DeclStmt 0x1553ec2dcf8 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2031:5, col:29>
|   | `-VarDecl 0x1553ec2dc08 <col:5, col:21> col:21 invalid p 'const int *'
|   |-DeclStmt 0x1553ec2de18 <line:2032:5, col:34>
|   | `-VarDecl 0x1553ec2dd28 <col:5, col:19> col:19 invalid p_scalar 'const int *'
|   |-IfStmt 0x1553ec2e018 <line:2034:5, line:2036:20>
|   | |-OpaqueValueExpr 0x1553ec2e000 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x1553ec2dfe8 <line:2035:9, line:2036:20>
|   |   |-OpaqueValueExpr 0x1553ec2dfd0 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x1553ec2dfc0 <col:13, col:20>
|   |     `-IntegerLiteral 0x1553ec2df98 <col:20> 'int' 0
|   |-IfStmt 0x1553ec2e370 <line:2038:5, line:2042:14>
|   | |-OpaqueValueExpr 0x1553ec2e358 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1553ec2e340 <col:9, col:14> 'err' 0x1553ec2e2f0
|   |-IfStmt 0x1553ec312a0 <line:2044:5, line:2075:5>
|   | |-OpaqueValueExpr 0x1553ec31288 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1553ec31250 <line:2044:25, line:2075:5>
|   |   |-IfStmt 0x1553ec2e828 <line:2046:9, line:2051:33> has_else
|   |   | |-ImplicitCastExpr 0x1553ec2e468 <line:2046:13> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1553ec2e448 <col:13> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec2d808 'pre' 'NISTP256_PRE_COMP *'
|   |   | |-BinaryOperator 0x1553ec2e730 <line:2048:13, col:59> 'const smallfelem (*)[16][3]' '='
|   |   | | |-DeclRefExpr 0x1553ec2e480 <col:13> 'const smallfelem (*)[16][3]' lvalue Var 0x1553ec2da48 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   |   | | `-CStyleCastExpr 0x1553ec2e708 <col:26, col:59> 'const smallfelem (*)[16][3]' <NoOp>
|   |   | |   `-ImplicitCastExpr 0x1553ec2e638 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay> part_of_explicit_cast
|   |   | |     `-MemberExpr 0x1553ec2e540 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |       `-ImplicitCastExpr 0x1553ec2e528 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x1553ec2e508 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec2d808 'pre' 'NISTP256_PRE_COMP *'
|   |   | `-BinaryOperator 0x1553ec2e808 <line:2051:13, col:33> 'const smallfelem (*)[16][3]' '='
|   |   |   |-DeclRefExpr 0x1553ec2e750 <col:13> 'const smallfelem (*)[16][3]' lvalue Var 0x1553ec2da48 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   |   |   `-UnaryOperator 0x1553ec2e7f0 <col:26, col:33> 'const smallfelem (*)[16][3]' prefix '&' cannot overflow
|   |   |     `-ArraySubscriptExpr 0x1553ec2e7d0 <col:27, col:33> 'const smallfelem [16][3]' lvalue
|   |   |       |-ImplicitCastExpr 0x1553ec2e7b8 <col:27> 'const smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       | `-DeclRefExpr 0x1553ec2e770 <col:27> 'const smallfelem [2][16][3]' lvalue Var 0x1553eb09b08 'gmul' 'const smallfelem [2][16][3]'
|   |   |       `-IntegerLiteral 0x1553ec2e790 <col:32> 'int' 0
|   |   |-IfStmt 0x1553ec2ea18 <line:2053:9, line:2054:18>
|   |   | |-OpaqueValueExpr 0x1553ec2ea00 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1553ec2e9e8 <col:13, col:18> 'err' 0x1553ec2e2f0
|   |   |-IfStmt 0x1553ec2ee58 <line:2056:9, line:2061:9>
|   |   | |-OpaqueValueExpr 0x1553ec2ee40 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x1553ec2ee28 <line:2058:56, line:2061:9>
|   |   |   `-GotoStmt 0x1553ec2ee10 <line:2060:13, col:18> 'err' 0x1553ec2e2f0
|   |   |-IfStmt 0x1553ec2efb0 <line:2062:9, line:2065:18>
|   |   | |-OpaqueValueExpr 0x1553ec2ef98 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1553ec2ef80 <col:13, col:18> 'err' 0x1553ec2e2f0
|   |   `-IfStmt 0x1553ec31228 <line:2066:9, line:2074:23> has_else
|   |     |-OpaqueValueExpr 0x1553ec31210 <<invalid sloc>> '_Bool'
|   |     |-BinaryOperator 0x1553ec311a0 <line:2068:13, col:29> 'int' '='
|   |     | |-DeclRefExpr 0x1553ec31140 <col:13> 'int' lvalue Var 0x1553ec2d330 'have_pre_comp' 'int'
|   |     | `-IntegerLiteral 0x1553ec31178 <col:29> 'int' 1
|   |     `-UnaryOperator 0x1553ec311f8 <line:2074:13, col:23> 'size_t':'unsigned long long' postfix '++'
|   |       `-DeclRefExpr 0x1553ec311c0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   |-IfStmt 0x1553ec3d638 <line:2076:5, line:2161:5>
|   | |-BinaryOperator 0x1553ec31330 <line:2076:9, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1553ec31300 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ec312b8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1553ec31318 <col:22> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1553ec312d8 <col:22> 'int' 0
|   | `-CompoundStmt 0x1553ec3d5e0 <col:25, line:2161:5>
|   |   |-IfStmt 0x1553ec31480 <line:2077:9, line:2083:9>
|   |   | |-BinaryOperator 0x1553ec313c8 <line:2077:13, col:27> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x1553ec31398 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1553ec31350 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x1553ec313b0 <col:27> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1553ec31370 <col:27> 'int' 3
|   |   | `-CompoundStmt 0x1553ec31468 <col:30, line:2083:9>
|   |   |   `-BinaryOperator 0x1553ec31448 <line:2082:13, col:21> 'int' '='
|   |   |     |-DeclRefExpr 0x1553ec313e8 <col:13> 'int' lvalue Var 0x1553ec249d8 'mixed' 'int'
|   |   |     `-IntegerLiteral 0x1553ec31420 <col:21> 'int' 1
|   |   |-BinaryOperator 0x1553ec31720 <line:2084:9, col:63> 'felem_bytearray *' '='
|   |   | |-DeclRefExpr 0x1553ec31498 <col:9> 'felem_bytearray *' lvalue Var 0x1553ec24c08 'secrets' 'felem_bytearray *'
|   |   | `-ImplicitCastExpr 0x1553ec31708 <col:19, col:63> 'felem_bytearray *' <IntegralToPointer>
|   |   |   `-CallExpr 0x1553ec316e0 <col:19, col:63> 'int'
|   |   |     |-ImplicitCastExpr 0x1553ec316c8 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1553ec315c0 <col:19> 'int ()' Function 0x1553ec314f8 'OPENSSL_malloc' 'int ()'
|   |   |     `-BinaryOperator 0x1553ec316a8 <col:34, col:53> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x1553ec31650 <col:34, col:49> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x1553ec31630 <col:40, col:49> 'felem_bytearray':'u8 [32]' lvalue
|   |   |       |   `-UnaryOperator 0x1553ec31618 <col:41, col:42> 'felem_bytearray':'u8 [32]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x1553ec31600 <col:42> 'felem_bytearray *' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x1553ec315e0 <col:42> 'felem_bytearray *' lvalue Var 0x1553ec24c08 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x1553ec31690 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1553ec31670 <col:53> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   |   |-BinaryOperator 0x1553ec318d8 <line:2085:9, col:65> 'smallfelem (*)[17][3]' '='
|   |   | |-DeclRefExpr 0x1553ec31740 <col:9> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | `-ImplicitCastExpr 0x1553ec318c0 <col:20, col:65> 'smallfelem (*)[17][3]' <IntegralToPointer>
|   |   |   `-CallExpr 0x1553ec31898 <col:20, col:65> 'int'
|   |   |     |-ImplicitCastExpr 0x1553ec31880 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1553ec31778 <col:20> 'int ()' Function 0x1553ec314f8 'OPENSSL_malloc' 'int ()'
|   |   |     `-BinaryOperator 0x1553ec31860 <col:35, col:55> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x1553ec31808 <col:35, col:51> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x1553ec317e8 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       |   `-UnaryOperator 0x1553ec317d0 <col:42, col:43> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x1553ec317b8 <col:43> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x1553ec31798 <col:43> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x1553ec31848 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1553ec31828 <col:55> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   |   |-IfStmt 0x1553ec31bc8 <line:2086:9, line:2088:78>
|   |   | |-ImplicitCastExpr 0x1553ec31918 <line:2086:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1553ec318f8 <col:13> 'int' lvalue Var 0x1553ec249d8 'mixed' 'int'
|   |   | `-BinaryOperator 0x1553ec31ba8 <line:2087:13, line:2088:78> 'smallfelem *' '='
|   |   |   |-DeclRefExpr 0x1553ec31930 <line:2087:13> 'smallfelem *' lvalue Var 0x1553ec2d038 'tmp_smallfelems' 'smallfelem *'
|   |   |   `-ImplicitCastExpr 0x1553ec31b90 <line:2088:15, col:78> 'smallfelem *' <IntegralToPointer>
|   |   |     `-CallExpr 0x1553ec31b68 <col:15, col:78> 'int'
|   |   |       |-ImplicitCastExpr 0x1553ec31b50 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x1553ec31968 <col:15> 'int ()' Function 0x1553ec314f8 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x1553ec31b30 <col:30, col:77> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x1553ec319f8 <col:30, col:53> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x1553ec319d8 <col:36, col:53> 'smallfelem':'u64 [4]' lvalue
|   |   |         |   `-UnaryOperator 0x1553ec319c0 <col:37, col:38> 'smallfelem':'u64 [4]' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x1553ec319a8 <col:38> 'smallfelem *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x1553ec31988 <col:38> 'smallfelem *' lvalue Var 0x1553ec2d038 'tmp_smallfelems' 'smallfelem *' non_odr_use_unevaluated
|   |   |         `-ParenExpr 0x1553ec31b10 <col:57, col:77> 'unsigned long long'
|   |   |           `-BinaryOperator 0x1553ec31af0 <col:58, col:76> 'unsigned long long' '+'
|   |   |             |-BinaryOperator 0x1553ec31a90 <col:58, col:71> 'unsigned long long' '*'
|   |   |             | |-ImplicitCastExpr 0x1553ec31a60 <col:58> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x1553ec31a18 <col:58> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   |   |             | `-ImplicitCastExpr 0x1553ec31a78 <col:71> 'unsigned long long' <IntegralCast>
|   |   |             |   `-IntegerLiteral 0x1553ec31a38 <col:71> 'int' 17
|   |   |             `-ImplicitCastExpr 0x1553ec31ad8 <col:76> 'unsigned long long' <IntegralCast>
|   |   |               `-IntegerLiteral 0x1553ec31ab0 <col:76> 'int' 1
|   |   |-IfStmt 0x1553ec32030 <line:2089:9, line:2093:9>
|   |   | |-BinaryOperator 0x1553ec31fc0 <line:2089:13, line:2090:51> 'int' '||'
|   |   | | |-BinaryOperator 0x1553ec31e10 <line:2089:13, col:51> 'int' '||'
|   |   | | | |-ParenExpr 0x1553ec31cd8 <col:13, col:29> 'int'
|   |   | | | | `-BinaryOperator 0x1553ec31cb8 <col:14, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | | |   |-ImplicitCastExpr 0x1553ec31c88 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2089:14> 'felem_bytearray *' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x1553ec31be0 <col:14> 'felem_bytearray *' lvalue Var 0x1553ec24c08 'secrets' 'felem_bytearray *'
|   |   | | | |   `-ImplicitCastExpr 0x1553ec31ca0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <BitCast>
|   |   | | | |     `-ParenExpr 0x1553ec31c68 <col:17, col:27> 'void *'
|   |   | | | |       `-CStyleCastExpr 0x1553ec31c40 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | | |         `-IntegerLiteral 0x1553ec31c00 <col:26> 'int' 0
|   |   | | | `-ParenExpr 0x1553ec31df0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2089:34, col:51> 'int'
|   |   | | |   `-BinaryOperator 0x1553ec31dd0 <col:35, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | |     |-ImplicitCastExpr 0x1553ec31da0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2089:35> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x1553ec31cf8 <col:35> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | | |     `-ImplicitCastExpr 0x1553ec31db8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem (*)[17][3]' <BitCast>
|   |   | | |       `-ParenExpr 0x1553ec31d80 <col:17, col:27> 'void *'
|   |   | | |         `-CStyleCastExpr 0x1553ec31d58 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | |           `-IntegerLiteral 0x1553ec31d18 <col:26> 'int' 0
|   |   | | `-ParenExpr 0x1553ec31fa0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2090:16, col:51> 'int'
|   |   | |   `-BinaryOperator 0x1553ec31f80 <col:17, col:50> 'int' '&&'
|   |   | |     |-ImplicitCastExpr 0x1553ec31f68 <col:17> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x1553ec31e30 <col:17> 'int' lvalue Var 0x1553ec249d8 'mixed' 'int'
|   |   | |     `-ParenExpr 0x1553ec31f48 <col:26, col:50> 'int'
|   |   | |       `-BinaryOperator 0x1553ec31f28 <col:27, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | |         |-ImplicitCastExpr 0x1553ec31ef8 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2090:27> 'smallfelem *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x1553ec31e50 <col:27> 'smallfelem *' lvalue Var 0x1553ec2d038 'tmp_smallfelems' 'smallfelem *'
|   |   | |         `-ImplicitCastExpr 0x1553ec31f10 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem *' <BitCast>
|   |   | |           `-ParenExpr 0x1553ec31ed8 <col:17, col:27> 'void *'
|   |   | |             `-CStyleCastExpr 0x1553ec31eb0 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |               `-IntegerLiteral 0x1553ec31e70 <col:26> 'int' 0
|   |   | `-CompoundStmt 0x1553ec32018 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2090:54, line:2093:9>
|   |   |   `-GotoStmt 0x1553ec32000 <line:2092:13, col:18> 'err' 0x1553ec2e2f0
|   |   |-CallExpr 0x1553ec321c8 <line:2099:9, col:57> 'void *'
|   |   | |-ImplicitCastExpr 0x1553ec321b0 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553ec32048 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1553e9c5900 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1553ec32218 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1553ec32200 <col:16> 'felem_bytearray *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1553ec32068 <col:16> 'felem_bytearray *' lvalue Var 0x1553ec24c08 'secrets' 'felem_bytearray *'
|   |   | |-IntegerLiteral 0x1553ec32088 <col:25> 'int' 0
|   |   | `-BinaryOperator 0x1553ec32178 <col:28, col:47> 'unsigned long long' '*'
|   |   |   |-UnaryExprOrTypeTraitExpr 0x1553ec32120 <col:28, col:43> 'unsigned long long' sizeof
|   |   |   | `-ParenExpr 0x1553ec32100 <col:34, col:43> 'felem_bytearray':'u8 [32]' lvalue
|   |   |   |   `-UnaryOperator 0x1553ec320e8 <col:35, col:36> 'felem_bytearray':'u8 [32]' lvalue prefix '*' cannot overflow
|   |   |   |     `-ImplicitCastExpr 0x1553ec320d0 <col:36> 'felem_bytearray *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x1553ec320b0 <col:36> 'felem_bytearray *' lvalue Var 0x1553ec24c08 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |   `-ImplicitCastExpr 0x1553ec32160 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1553ec32140 <col:47> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   |   |-CallExpr 0x1553ec323b0 <line:2100:9, col:59> 'void *'
|   |   | |-ImplicitCastExpr 0x1553ec32398 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553ec32230 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1553e9c5900 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1553ec32400 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1553ec323e8 <col:16> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1553ec32250 <col:16> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | |-IntegerLiteral 0x1553ec32270 <col:26> 'int' 0
|   |   | `-BinaryOperator 0x1553ec32360 <col:29, col:49> 'unsigned long long' '*'
|   |   |   |-UnaryExprOrTypeTraitExpr 0x1553ec32308 <col:29, col:45> 'unsigned long long' sizeof
|   |   |   | `-ParenExpr 0x1553ec322e8 <col:35, col:45> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |   |   `-UnaryOperator 0x1553ec322d0 <col:36, col:37> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue prefix '*' cannot overflow
|   |   |   |     `-ImplicitCastExpr 0x1553ec322b8 <col:37> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x1553ec32298 <col:37> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]' non_odr_use_unevaluated
|   |   |   `-ImplicitCastExpr 0x1553ec32348 <col:49> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1553ec32328 <col:49> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   |   |-ForStmt 0x1553ec3d320 <line:2101:9, line:2158:9>
|   |   | |-BinaryOperator 0x1553ec32490 <line:2101:14, col:18> 'unsigned int' '='
|   |   | | |-DeclRefExpr 0x1553ec32418 <col:14> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x1553ec32478 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1553ec32450 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x1553ec32538 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1553ec32520 <col:21> 'unsigned long long' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x1553ec324f0 <col:21> 'unsigned int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1553ec324b0 <col:21> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x1553ec32508 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1553ec324d0 <col:25> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   |   | |-UnaryOperator 0x1553ec32578 <col:37, col:39> 'unsigned int' prefix '++'
|   |   | | `-DeclRefExpr 0x1553ec32558 <col:39> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   | `-CompoundStmt 0x1553ec3d300 <col:42, line:2158:9>
|   |   |   |-IfStmt 0x1553ec327a8 <line:2102:13, line:2115:13> has_else
|   |   |   | |-BinaryOperator 0x1553ec32618 <line:2102:17, col:22> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x1553ec32600 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x1553ec325d0 <col:17> 'unsigned int' <LValueToRValue>
|   |   |   | | |   `-DeclRefExpr 0x1553ec32590 <col:17> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |   | | `-ImplicitCastExpr 0x1553ec325e8 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1553ec325b0 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x1553ec24510 'num' 'size_t':'unsigned long long'
|   |   |   | |-CompoundStmt 0x1553ec32748 <line:2107:13, line:2110:13>
|   |   |   | `-CompoundStmt 0x1553ec32798 <line:2112:13, line:2115:13>
|   |   |   `-IfStmt 0x1553ec3d2e8 <line:2116:13, line:2157:13>
|   |   |     |-OpaqueValueExpr 0x1553ec3d2d0 <<invalid sloc>> '_Bool'
|   |   |     `-CompoundStmt 0x1553ec3d288 <line:2116:52, line:2157:13>
|   |   |       |-IfStmt 0x1553ec32cf0 <line:2118:17, line:2130:21> has_else
|   |   |       | |-OpaqueValueExpr 0x1553ec32cd8 <<invalid sloc>> '_Bool'
|   |   |       | |-CompoundStmt 0x1553ec32c58 <line:2119:52, line:2129:17>
|   |   |       | | `-IfStmt 0x1553ec32bb0 <line:2124:21, line:2127:21>
|   |   |       | |   |-OpaqueValueExpr 0x1553ec32b98 <<invalid sloc>> '_Bool'
|   |   |       | |   `-CompoundStmt 0x1553ec32b80 <line:2124:77, line:2127:21>
|   |   |       | |     `-GotoStmt 0x1553ec32b68 <line:2126:25, col:30> 'err' 0x1553ec2e2f0
|   |   |       | `-NullStmt 0x1553ec32cd0 <line:2130:21>
|   |   |       |-CallExpr 0x1553ec32e20 <line:2131:17, col:55> 'void'
|   |   |       | |-ImplicitCastExpr 0x1553ec32e08 <col:17> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1553ec32d18 <col:17> 'void (u8 *, const u8 *, unsigned int)' Function 0x1553e9f4c28 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   |   |       | |-ImplicitCastExpr 0x1553ec32e58 <col:29, col:38> 'u8 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1553ec32da8 <col:29, col:38> 'felem_bytearray':'u8 [32]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1553ec32d78 <col:29> 'felem_bytearray *' <LValueToRValue>
|   |   |       | |   | `-DeclRefExpr 0x1553ec32d38 <col:29> 'felem_bytearray *' lvalue Var 0x1553ec24c08 'secrets' 'felem_bytearray *'
|   |   |       | |   `-ImplicitCastExpr 0x1553ec32d90 <col:37> 'unsigned int' <LValueToRValue>
|   |   |       | |     `-DeclRefExpr 0x1553ec32d58 <col:37> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |       | |-ImplicitCastExpr 0x1553ec32e88 <col:41> 'const u8 *' <NoOp>
|   |   |       | | `-ImplicitCastExpr 0x1553ec32e70 <col:41> 'u8 *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x1553ec32dc8 <col:41> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553ec2d168 'tmp' 'felem_bytearray':'u8 [32]'
|   |   |       | `-ImplicitCastExpr 0x1553ec32ea0 <col:46> 'unsigned int' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x1553ec32de8 <col:46> 'unsigned int' lvalue Var 0x1553ec2d280 'num_bytes' 'unsigned int'
|   |   |       |-IfStmt 0x1553ec32f90 <line:2133:17, line:2136:26>
|   |   |       | |-OpaqueValueExpr 0x1553ec32f78 <<invalid sloc>> '_Bool'
|   |   |       | `-GotoStmt 0x1553ec32f60 <col:21, col:26> 'err' 0x1553ec2e2f0
|   |   |       |-CallExpr 0x1553ec35180 <line:2137:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x1553ec35168 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1553ec32fa8 <col:17> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x1553ec351b0 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1553ec35128 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1553ec35110 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x1553ec350c8 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x1553ec350b0 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x1553ec35068 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x1553ec33008 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x1553ec32fc8 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x1553ec35050 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x1553ec32fe8 <col:39> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x1553ec35088 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x1553ec350e8 <col:45> 'int' 0
|   |   |       | `-ImplicitCastExpr 0x1553ec351e0 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x1553ec351c8 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x1553ec35148 <col:49> 'felem':'limb [4]' lvalue Var 0x1553ec2d668 'x_out' 'felem':'limb [4]'
|   |   |       |-CallExpr 0x1553ec353a0 <line:2138:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x1553ec35388 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1553ec351f8 <col:17> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x1553ec353d0 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1553ec35348 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1553ec35330 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x1553ec352e8 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x1553ec352d0 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x1553ec35288 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x1553ec35258 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x1553ec35218 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x1553ec35270 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x1553ec35238 <col:39> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x1553ec352a8 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x1553ec35308 <col:45> 'int' 1
|   |   |       | `-ImplicitCastExpr 0x1553ec35400 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x1553ec353e8 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x1553ec35368 <col:49> 'felem':'limb [4]' lvalue Var 0x1553ec2d6e0 'y_out' 'felem':'limb [4]'
|   |   |       |-CallExpr 0x1553ec355c0 <line:2139:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x1553ec355a8 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1553ec35418 <col:17> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x1553ec355f0 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1553ec35568 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1553ec35550 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x1553ec35508 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x1553ec354f0 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x1553ec354a8 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x1553ec35478 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x1553ec35438 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x1553ec35490 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x1553ec35458 <col:39> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x1553ec354c8 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x1553ec35528 <col:45> 'int' 2
|   |   |       | `-ImplicitCastExpr 0x1553ec35620 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x1553ec35608 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x1553ec35588 <col:49> 'felem':'limb [4]' lvalue Var 0x1553ec2d758 'z_out' 'felem':'limb [4]'
|   |   |       `-ForStmt 0x1553ec3d250 <line:2140:17, line:2156:17>
|   |   |         |-BinaryOperator 0x1553ec35698 <line:2140:22, col:26> 'int' '='
|   |   |         | |-DeclRefExpr 0x1553ec35638 <col:22> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |         | `-IntegerLiteral 0x1553ec35670 <col:26> 'int' 2
|   |   |         |-<<<NULL>>>
|   |   |         |-BinaryOperator 0x1553ec35718 <col:29, col:34> 'int' '<='
|   |   |         | |-ImplicitCastExpr 0x1553ec35700 <col:29> 'int' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x1553ec356b8 <col:29> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |         | `-IntegerLiteral 0x1553ec356d8 <col:34> 'int' 16
|   |   |         |-UnaryOperator 0x1553ec35758 <col:38, col:40> 'int' prefix '++'
|   |   |         | `-DeclRefExpr 0x1553ec35738 <col:40> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |         `-CompoundStmt 0x1553ec3d238 <col:43, line:2156:17>
|   |   |           `-IfStmt 0x1553ec3d210 <line:2141:21, line:2155:21> has_else
|   |   |             |-BinaryOperator 0x1553ec357d0 <line:2141:25, col:29> 'int' '&'
|   |   |             | |-ImplicitCastExpr 0x1553ec357b8 <col:25> 'int' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x1553ec35770 <col:25> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |             | `-IntegerLiteral 0x1553ec35790 <col:29> 'int' 1
|   |   |             |-CompoundStmt 0x1553ec366d0 <col:32, line:2148:21>
|   |   |             | `-CallExpr 0x1553ec36590 <line:2142:25, line:2147:62> 'void'
|   |   |             |   |-ImplicitCastExpr 0x1553ec36578 <line:2142:25> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   |             |   | `-DeclRefExpr 0x1553ec357f0 <col:25> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1553eb089c8 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   |             |   |-ImplicitCastExpr 0x1553ec365f8 <col:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1553ec35950 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1553ec35938 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1553ec358f0 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1553ec358c0 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1553ec35880 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1553ec35850 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1553ec35810 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1553ec35868 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1553ec35830 <col:50> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x1553ec358d8 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x1553ec358a0 <col:53> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x1553ec35910 <col:56> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x1553ec36610 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1553ec35ab0 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1553ec35a98 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1553ec35a50 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1553ec35a20 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1553ec359e0 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1553ec359b0 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1553ec35970 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1553ec359c8 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1553ec35990 <col:69> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x1553ec35a38 <col:72> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x1553ec35a00 <col:72> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x1553ec35a70 <col:75> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x1553ec36628 <line:2143:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1553ec35c10 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1553ec35bf8 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1553ec35bb0 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1553ec35b80 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1553ec35b40 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1553ec35b10 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1553ec35ad0 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1553ec35b28 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1553ec35af0 <col:50> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x1553ec35b98 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x1553ec35b60 <col:53> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x1553ec35bd0 <col:56> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x1553ec36640 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1553ec35d60 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1553ec35d48 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1553ec35d00 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1553ec35ce8 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1553ec35ca0 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1553ec35c70 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1553ec35c30 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1553ec35c88 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1553ec35c50 <col:69> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x1553ec35cc0 <col:72> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x1553ec35d20 <col:75> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x1553ec36658 <line:2144:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1553ec35eb0 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1553ec35e98 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1553ec35e50 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1553ec35e38 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1553ec35df0 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1553ec35dc0 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1553ec35d80 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1553ec35dd8 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1553ec35da0 <col:50> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x1553ec35e10 <col:53> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x1553ec35e70 <col:56> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x1553ec36670 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1553ec36000 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1553ec35fe8 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1553ec35fa0 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1553ec35f88 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1553ec35f40 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1553ec35f10 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1553ec35ed0 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1553ec35f28 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1553ec35ef0 <col:69> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x1553ec35f60 <col:72> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x1553ec35fc0 <col:75> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x1553ec36688 <line:2145:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1553ec361a8 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1553ec36190 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1553ec36148 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1553ec36130 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1553ec36090 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1553ec36060 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1553ec36020 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1553ec36078 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1553ec36040 <col:50> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |             |   |   |   `-BinaryOperator 0x1553ec36110 <col:53, col:57> 'int' '-'
|   |   |             |   |   |     |-ImplicitCastExpr 0x1553ec360f8 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     | `-DeclRefExpr 0x1553ec360b0 <col:53> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |             |   |   |     `-IntegerLiteral 0x1553ec360d0 <col:57> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x1553ec36168 <col:60> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x1553ec366a0 <line:2146:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1553ec36350 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1553ec36338 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1553ec362f0 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1553ec362d8 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1553ec36238 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1553ec36208 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1553ec361c8 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1553ec36220 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1553ec361e8 <col:50> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |             |   |   |   `-BinaryOperator 0x1553ec362b8 <col:53, col:57> 'int' '-'
|   |   |             |   |   |     |-ImplicitCastExpr 0x1553ec362a0 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     | `-DeclRefExpr 0x1553ec36258 <col:53> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |             |   |   |     `-IntegerLiteral 0x1553ec36278 <col:57> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x1553ec36310 <col:60> 'int' 1
|   |   |             |   `-ImplicitCastExpr 0x1553ec366b8 <line:2147:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |     `-ArraySubscriptExpr 0x1553ec364f8 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |       |-ImplicitCastExpr 0x1553ec364e0 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |       | `-ArraySubscriptExpr 0x1553ec36498 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |       |   |-ImplicitCastExpr 0x1553ec36480 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |       |   | `-ArraySubscriptExpr 0x1553ec363e0 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |       |   |   |-ImplicitCastExpr 0x1553ec363b0 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |       |   |   | `-DeclRefExpr 0x1553ec36370 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |       |   |   `-ImplicitCastExpr 0x1553ec363c8 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |       |   |     `-DeclRefExpr 0x1553ec36390 <col:50> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |             |       |   `-BinaryOperator 0x1553ec36460 <col:53, col:57> 'int' '-'
|   |   |             |       |     |-ImplicitCastExpr 0x1553ec36448 <col:53> 'int' <LValueToRValue>
|   |   |             |       |     | `-DeclRefExpr 0x1553ec36400 <col:53> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |             |       |     `-IntegerLiteral 0x1553ec36420 <col:57> 'int' 1
|   |   |             |       `-IntegerLiteral 0x1553ec364b8 <col:60> 'int' 2
|   |   |             `-CompoundStmt 0x1553ec3d1f8 <line:2148:28, line:2155:21>
|   |   |               `-CallExpr 0x1553ec3d0d0 <line:2149:25, line:2154:65> 'void'
|   |   |                 |-ImplicitCastExpr 0x1553ec3d0b8 <line:2149:25> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x1553ec366e8 <col:25> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x1553eaf4108 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   |                 |-ImplicitCastExpr 0x1553ec3d120 <col:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x1553ec36848 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x1553ec36830 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x1553ec367e8 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x1553ec367b8 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x1553ec36778 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x1553ec36748 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x1553ec36708 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x1553ec36760 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x1553ec36728 <col:53> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x1553ec367d0 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x1553ec36798 <col:56> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x1553ec36808 <col:59> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x1553ec3d138 <line:2150:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x1553ec369a8 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x1553ec36990 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x1553ec36948 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x1553ec36918 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x1553ec368d8 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x1553ec368a8 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x1553ec36868 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x1553ec368c0 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x1553ec36888 <col:53> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x1553ec36930 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x1553ec368f8 <col:56> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x1553ec36968 <col:59> 'int' 1
|   |   |                 |-ImplicitCastExpr 0x1553ec3d150 <line:2151:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x1553ec36b08 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x1553ec36af0 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x1553ec36aa8 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x1553ec36a78 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x1553ec36a38 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x1553ec36a08 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x1553ec369c8 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x1553ec36a20 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x1553ec369e8 <col:53> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x1553ec36a90 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x1553ec36a58 <col:56> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x1553ec36ac8 <col:59> 'int' 2
|   |   |                 |-ImplicitCastExpr 0x1553ec3d180 <line:2152:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x1553ec3d168 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x1553ec36cb0 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x1553ec36c98 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x1553ec36c50 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x1553ec36c38 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x1553ec36b98 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x1553ec36b68 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x1553ec36b28 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x1553ec36b80 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x1553ec36b48 <col:53> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x1553ec36c18 <col:56, col:60> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x1553ec36c00 <col:56> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x1553ec36bb8 <col:56> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x1553ec36bd8 <col:60> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x1553ec36c70 <col:63> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x1553ec3d1b0 <line:2153:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x1553ec3d198 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x1553ec36e58 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x1553ec36e40 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x1553ec36df8 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x1553ec36de0 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x1553ec36d40 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x1553ec36d10 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x1553ec36cd0 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x1553ec36d28 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x1553ec36cf0 <col:53> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x1553ec36dc0 <col:56, col:60> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x1553ec36da8 <col:56> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x1553ec36d60 <col:56> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x1553ec36d80 <col:60> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x1553ec36e18 <col:63> 'int' 1
|   |   |                 `-ImplicitCastExpr 0x1553ec3d1e0 <line:2154:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                   `-ImplicitCastExpr 0x1553ec3d1c8 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                     `-ArraySubscriptExpr 0x1553ec37000 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                       |-ImplicitCastExpr 0x1553ec36fe8 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                       | `-ArraySubscriptExpr 0x1553ec36fa0 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                       |   |-ImplicitCastExpr 0x1553ec36f88 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                       |   | `-ArraySubscriptExpr 0x1553ec36ee8 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                       |   |   |-ImplicitCastExpr 0x1553ec36eb8 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                       |   |   | `-DeclRefExpr 0x1553ec36e78 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                       |   |   `-ImplicitCastExpr 0x1553ec36ed0 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                       |   |     `-DeclRefExpr 0x1553ec36e98 <col:53> 'unsigned int' lvalue Var 0x1553ec2d200 'i' 'unsigned int'
|   |   |                       |   `-BinaryOperator 0x1553ec36f68 <col:56, col:60> 'int' '/'
|   |   |                       |     |-ImplicitCastExpr 0x1553ec36f50 <col:56> 'int' <LValueToRValue>
|   |   |                       |     | `-DeclRefExpr 0x1553ec36f08 <col:56> 'int' lvalue Var 0x1553ec24940 'j' 'int'
|   |   |                       |     `-IntegerLiteral 0x1553ec36f28 <col:60> 'int' 2
|   |   |                       `-IntegerLiteral 0x1553ec36fc0 <col:63> 'int' 2
|   |   `-IfStmt 0x1553ec3d5c8 <line:2159:9, line:2160:77>
|   |     |-ImplicitCastExpr 0x1553ec3d378 <line:2159:13> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1553ec3d358 <col:13> 'int' lvalue Var 0x1553ec249d8 'mixed' 'int'
|   |     `-CallExpr 0x1553ec3d560 <line:2160:13, col:77> 'void'
|   |       |-ImplicitCastExpr 0x1553ec3d548 <col:13> 'void (*)(size_t, smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1553ec3d390 <col:13> 'void (size_t, smallfelem (*)[3], smallfelem *)' Function 0x1553ec23578 'make_points_affine' 'void (size_t, smallfelem (*)[3], smallfelem *)'
|   |       |-BinaryOperator 0x1553ec3d428 <col:32, col:45> 'unsigned long long' '*'
|   |       | |-ImplicitCastExpr 0x1553ec3d3f8 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x1553ec3d3b0 <col:32> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x1553ec3d410 <col:45> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x1553ec3d3d0 <col:45> 'int' 17
|   |       |-ImplicitCastExpr 0x1553ec3d598 <col:49, col:59> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x1553ec3d4a8 <col:49, col:59> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |       |   |-ImplicitCastExpr 0x1553ec3d490 <col:49> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1553ec3d448 <col:49> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |       |   `-IntegerLiteral 0x1553ec3d468 <col:58> 'int' 0
|   |       `-ImplicitCastExpr 0x1553ec3d5b0 <col:62> 'smallfelem *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1553ec3d4c8 <col:62> 'smallfelem *' lvalue Var 0x1553ec2d038 'tmp_smallfelems' 'smallfelem *'
|   |-IfStmt 0x1553ec3e650 <line:2164:5, line:2189:74> has_else
|   | |-OpaqueValueExpr 0x1553ec3e638 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1553ec3e160 <line:2164:46, line:2185:5>
|   | | |-CallExpr 0x1553ec3d828 <line:2165:9, col:45> 'void *'
|   | | | |-ImplicitCastExpr 0x1553ec3d810 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553ec3d718 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1553e9c5900 'memset' 'void *(void *, int, unsigned long long)'
|   | | | |-ImplicitCastExpr 0x1553ec3d878 <col:16> 'void *' <BitCast>
|   | | | | `-ImplicitCastExpr 0x1553ec3d860 <col:16> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1553ec3d738 <col:16> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553ec24b18 'g_secret' 'felem_bytearray':'u8 [32]'
|   | | | |-IntegerLiteral 0x1553ec3d770 <col:26> 'int' 0
|   | | | `-UnaryExprOrTypeTraitExpr 0x1553ec3d7d8 <col:29, col:44> 'unsigned long long' sizeof
|   | | |   `-ParenExpr 0x1553ec3d7b8 <col:35, col:44> 'felem_bytearray':'u8 [32]' lvalue
|   | | |     `-DeclRefExpr 0x1553ec3d798 <col:36> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553ec24b18 'g_secret' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   | | |-IfStmt 0x1553ec3da90 <line:2167:9, line:2178:13> has_else
|   | | | |-OpaqueValueExpr 0x1553ec3da78 <<invalid sloc>> '_Bool'
|   | | | |-CompoundStmt 0x1553ec3d9f8 <line:2167:70, line:2177:9>
|   | | | | `-IfStmt 0x1553ec3d980 <line:2172:13, line:2175:13>
|   | | | |   |-OpaqueValueExpr 0x1553ec3d968 <<invalid sloc>> '_Bool'
|   | | | |   `-CompoundStmt 0x1553ec3d950 <line:2172:67, line:2175:13>
|   | | | |     `-GotoStmt 0x1553ec3d938 <line:2174:17, col:22> 'err' 0x1553ec2e2f0
|   | | | `-NullStmt 0x1553ec3da70 <line:2178:13>
|   | | |-CallExpr 0x1553ec3db50 <line:2179:9, col:45> 'void'
|   | | | |-ImplicitCastExpr 0x1553ec3db38 <col:9> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553ec3dab8 <col:9> 'void (u8 *, const u8 *, unsigned int)' Function 0x1553e9f4c28 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | | | |-ImplicitCastExpr 0x1553ec3db88 <col:21> 'u8 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1553ec3dad8 <col:21> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553ec24b18 'g_secret' 'felem_bytearray':'u8 [32]'
|   | | | |-ImplicitCastExpr 0x1553ec3dbb8 <col:31> 'const u8 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1553ec3dba0 <col:31> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1553ec3daf8 <col:31> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553ec2d168 'tmp' 'felem_bytearray':'u8 [32]'
|   | | | `-ImplicitCastExpr 0x1553ec3dbd0 <col:36> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1553ec3db18 <col:36> 'unsigned int' lvalue Var 0x1553ec2d280 'num_bytes' 'unsigned int'
|   | | `-CallExpr 0x1553ec3e020 <line:2181:9, line:2184:74> 'void'
|   | |   |-ImplicitCastExpr 0x1553ec3e008 <line:2181:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1553ec3dbe8 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' Function 0x1553ec21848 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])'
|   | |   |-ImplicitCastExpr 0x1553ec3e088 <col:19> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1553ec3dc08 <col:19> 'felem':'limb [4]' lvalue Var 0x1553ec2d668 'x_out' 'felem':'limb [4]'
|   | |   |-ImplicitCastExpr 0x1553ec3e0a0 <col:26> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1553ec3dc28 <col:26> 'felem':'limb [4]' lvalue Var 0x1553ec2d6e0 'y_out' 'felem':'limb [4]'
|   | |   |-ImplicitCastExpr 0x1553ec3e0b8 <col:33> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1553ec3dc48 <col:33> 'felem':'limb [4]' lvalue Var 0x1553ec2d758 'z_out' 'felem':'limb [4]'
|   | |   |-CStyleCastExpr 0x1553ec3dd58 <line:2182:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1553ec3dd00 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x1553ec3dc68 <col:45> 'felem_bytearray *' lvalue Var 0x1553ec24c08 'secrets' 'felem_bytearray *'
|   | |   |-ImplicitCastExpr 0x1553ec3e0e8 <col:54> 'unsigned int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x1553ec3e0d0 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x1553ec3dd80 <col:54> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1553ec3e118 <line:2183:19> 'const u8 *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1553ec3e100 <col:19> 'u8 *' <ArrayToPointerDecay>
|   | |   |   `-DeclRefExpr 0x1553ec3dda0 <col:19> 'felem_bytearray':'u8 [32]' lvalue Var 0x1553ec24b18 'g_secret' 'felem_bytearray':'u8 [32]'
|   | |   |-ImplicitCastExpr 0x1553ec3e130 <line:2184:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1553ec3ddc0 <col:19> 'int' lvalue Var 0x1553ec249d8 'mixed' 'int'
|   | |   |-CStyleCastExpr 0x1553ec3df68 <col:26, col:54> 'const smallfelem (*)[17][3]' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1553ec3df18 <col:54> 'smallfelem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x1553ec3de30 <col:54> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   | |   `-ImplicitCastExpr 0x1553ec3e148 <col:64> 'const smallfelem (*)[16][3]' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1553ec3df90 <col:64> 'const smallfelem (*)[16][3]' lvalue Var 0x1553ec2da48 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   | `-CallExpr 0x1553ec3e510 <line:2187:9, line:2189:74> 'void'
|   |   |-ImplicitCastExpr 0x1553ec3e4f8 <line:2187:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1553ec3e190 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' Function 0x1553ec21848 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])'
|   |   |-ImplicitCastExpr 0x1553ec3e578 <col:19> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1553ec3e1b0 <col:19> 'felem':'limb [4]' lvalue Var 0x1553ec2d668 'x_out' 'felem':'limb [4]'
|   |   |-ImplicitCastExpr 0x1553ec3e590 <col:26> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1553ec3e1d0 <col:26> 'felem':'limb [4]' lvalue Var 0x1553ec2d6e0 'y_out' 'felem':'limb [4]'
|   |   |-ImplicitCastExpr 0x1553ec3e5a8 <col:33> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1553ec3e1f0 <col:33> 'felem':'limb [4]' lvalue Var 0x1553ec2d758 'z_out' 'felem':'limb [4]'
|   |   |-CStyleCastExpr 0x1553ec3e260 <line:2188:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   |   | `-ImplicitCastExpr 0x1553ec3e248 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x1553ec3e210 <col:45> 'felem_bytearray *' lvalue Var 0x1553ec24c08 'secrets' 'felem_bytearray *'
|   |   |-ImplicitCastExpr 0x1553ec3e5d8 <col:54> 'unsigned int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x1553ec3e5c0 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1553ec3e288 <col:54> 'size_t':'unsigned long long' lvalue Var 0x1553ec2d3e8 'num_points' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1553ec3e5f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <NullToPointer>
|   |   | `-ParenExpr 0x1553ec3e310 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x1553ec3e2e8 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x1553ec3e2a8 <col:26> 'int' 0
|   |   |-ImplicitCastExpr 0x1553ec3e608 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2189:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1553ec3e330 <col:25> 'int' lvalue Var 0x1553ec249d8 'mixed' 'int'
|   |   |-CStyleCastExpr 0x1553ec3e448 <col:32, col:60> 'const smallfelem (*)[17][3]' <NoOp>
|   |   | `-ImplicitCastExpr 0x1553ec3e430 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x1553ec3e3a0 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   `-ImplicitCastExpr 0x1553ec3e620 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <NullToPointer>
|   |     `-ParenExpr 0x1553ec3e4d8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1553ec3e4b0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1553ec3e470 <col:26> 'int' 0
|   |-CallExpr 0x1553ec3e708 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2191:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553ec3e6f0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3e678 <col:5> 'void (u64 *, const limb *)' Function 0x1553eaf9c88 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec3e738 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3e698 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x1553ec2d4c8 'x_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553ec3e768 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec3e750 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec3e6d0 <col:26> 'felem':'limb [4]' lvalue Var 0x1553ec2d668 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1553ec3e810 <line:2192:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553ec3e7f8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3e780 <col:5> 'void (u64 *, const limb *)' Function 0x1553eaf9c88 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec3e840 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3e7a0 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x1553ec2d540 'y_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553ec3e870 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec3e858 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec3e7d8 <col:26> 'felem':'limb [4]' lvalue Var 0x1553ec2d6e0 'y_out' 'felem':'limb [4]'
|   |-CallExpr 0x1553ec3e918 <line:2193:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1553ec3e900 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3e888 <col:5> 'void (u64 *, const limb *)' Function 0x1553eaf9c88 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec3e948 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3e8a8 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x1553ec2d5b8 'z_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1553ec3e978 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec3e960 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec3e8e0 <col:26> 'felem':'limb [4]' lvalue Var 0x1553ec2d758 'z_out' 'felem':'limb [4]'
|   |-IfStmt 0x1553ec3ea58 <line:2194:5, line:2198:5>
|   | |-OpaqueValueExpr 0x1553ec3ea40 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1553ec3ea28 <line:2195:39, line:2198:5>
|   |   `-GotoStmt 0x1553ec3ea10 <line:2197:9, col:14> 'err' 0x1553ec2e2f0
|   |-LabelStmt 0x1553ec3eaf0 <line:2201:2, col:5> 'err'
|   | `-NullStmt 0x1553ec3eae8 <col:5>
|   |-CallExpr 0x1553ec3ec90 <line:2205:5, col:25> 'int'
|   | |-ImplicitCastExpr 0x1553ec3ec78 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3ec38 <col:5> 'int ()' Function 0x1553ec26d68 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1553ec3ecb8 <col:18> 'felem_bytearray *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ec3ec58 <col:18> 'felem_bytearray *' lvalue Var 0x1553ec24c08 'secrets' 'felem_bytearray *'
|   |-CallExpr 0x1553ec3ed28 <line:2206:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x1553ec3ed10 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3ecd0 <col:5> 'int ()' Function 0x1553ec26d68 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1553ec3ed50 <col:18> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ec3ecf0 <col:18> 'smallfelem (*)[17][3]' lvalue Var 0x1553ec24eb8 'pre_comp' 'smallfelem (*)[17][3]'
|   |-CallExpr 0x1553ec3edc0 <line:2207:5, col:33> 'int'
|   | |-ImplicitCastExpr 0x1553ec3eda8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3ed68 <col:5> 'int ()' Function 0x1553ec26d68 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1553ec3ede8 <col:18> 'smallfelem *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ec3ed88 <col:18> 'smallfelem *' lvalue Var 0x1553ec2d038 'tmp_smallfelems' 'smallfelem *'
|   `-ReturnStmt 0x1553ec3ee38 <line:2208:5, col:12>
|     `-ImplicitCastExpr 0x1553ec3ee20 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1553ec3ee00 <col:12> 'int' lvalue Var 0x1553ec24880 'ret' 'int'
|-FunctionDecl 0x1553ec39070 <line:2211:1, line:2345:1> line:2211:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1553ec3ef68 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1553ec3efe8 <col:54, col:62> col:62 invalid ctx 'int *'
| `-CompoundStmt 0x1553ec48188 <line:2212:1, line:2345:1>
|   |-DeclStmt 0x1553ec391e0 <line:2213:5, col:16>
|   | `-VarDecl 0x1553ec39150 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1553ec391b8 <col:15> 'int' 0
|   |-DeclStmt 0x1553ec39310 <line:2214:5, col:34>
|   | `-VarDecl 0x1553ec39208 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2214:24 used pre 'NISTP256_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x1553ec392f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x1553ec392d8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1553ec392b0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1553ec39270 <col:26> 'int' 0
|   |-DeclStmt 0x1553ec39440 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2215:5, col:13>
|   | |-VarDecl 0x1553ec39340 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x1553ec393c0 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x1553ec396b0 <line:2219:5, col:35>
|   | `-VarDecl 0x1553ec39648 <col:5, col:34> col:16 used tmp_smallfelems 'smallfelem [32]'
|   |-DeclStmt 0x1553ec39850 <line:2220:5, col:30>
|   | |-VarDecl 0x1553ec396d8 <col:5, col:11> col:11 used x_tmp 'felem':'limb [4]'
|   | |-VarDecl 0x1553ec39750 <col:5, col:18> col:18 used y_tmp 'felem':'limb [4]'
|   | `-VarDecl 0x1553ec397c8 <col:5, col:25> col:25 used z_tmp 'felem':'limb [4]'
|   |-IfStmt 0x1553ec39a50 <line:2224:5, line:2226:20>
|   | |-OpaqueValueExpr 0x1553ec39a38 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x1553ec39a20 <line:2225:9, line:2226:20>
|   |   |-OpaqueValueExpr 0x1553ec39a08 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x1553ec399f8 <col:13, col:20>
|   |     `-IntegerLiteral 0x1553ec399d0 <col:20> 'int' 0
|   |-IfStmt 0x1553ec39c58 <line:2228:5, line:2229:14>
|   | |-OpaqueValueExpr 0x1553ec39c40 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1553ec39c28 <col:9, col:14> 'err' 0x1553ec39bd8
|   |-IfStmt 0x1553ec39d28 <line:2231:5, line:2232:14>
|   | |-OpaqueValueExpr 0x1553ec39d10 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1553ec39cf8 <col:9, col:14> 'err' 0x1553ec39bd8
|   |-IfStmt 0x1553ec39e18 <line:2234:5, line:2235:14>
|   | |-OpaqueValueExpr 0x1553ec39e00 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1553ec39de8 <col:9, col:14> 'err' 0x1553ec39bd8
|   |-IfStmt 0x1553ec3a110 <line:2238:5, line:2239:14>
|   | |-OpaqueValueExpr 0x1553ec3a0f8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1553ec3a0e0 <col:9, col:14> 'err' 0x1553ec39bd8
|   |-IfStmt 0x1553ec3a328 <line:2240:5, line:2241:14>
|   | |-BinaryOperator 0x1553ec3a2f0 <line:2240:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ParenExpr 0x1553ec3a230 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2240:9, col:39> 'NISTP256_PRE_COMP *'
|   | | | `-BinaryOperator 0x1553ec3a210 <col:10, col:38> 'NISTP256_PRE_COMP *' '='
|   | | |   |-DeclRefExpr 0x1553ec3a128 <col:10> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   | | |   `-CallExpr 0x1553ec3a1f0 <col:16, col:38> 'NISTP256_PRE_COMP *'
|   | | |     `-ImplicitCastExpr 0x1553ec3a1d8 <col:16> 'NISTP256_PRE_COMP *(*)()' <FunctionToPointerDecay>
|   | | |       `-DeclRefExpr 0x1553ec3a160 <col:16> 'NISTP256_PRE_COMP *()' Function 0x1553ec26518 'nistp256_pre_comp_new' 'NISTP256_PRE_COMP *()'
|   | | `-ImplicitCastExpr 0x1553ec3a2d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x1553ec3a2b8 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1553ec3a290 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1553ec3a250 <col:26> 'int' 0
|   | `-GotoStmt 0x1553ec3a310 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2241:9, col:14> 'err' 0x1553ec39bd8
|   |-IfStmt 0x1553ec3a688 <line:2245:5, line:2248:5>
|   | |-OpaqueValueExpr 0x1553ec3a670 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1553ec3a650 <line:2245:69, line:2248:5>
|   |   |-CallExpr 0x1553ec3a550 <line:2246:9, col:62> 'void *'
|   |   | |-ImplicitCastExpr 0x1553ec3a538 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553ec3a388 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x1553e9c6eb8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1553ec3a5a0 <col:16, col:21> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1553ec3a588 <col:16, col:21> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   `-MemberExpr 0x1553ec3a3e0 <col:16, col:21> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |     `-ImplicitCastExpr 0x1553ec3a3c8 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1553ec3a3a8 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |-ImplicitCastExpr 0x1553ec3a5d0 <col:33> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1553ec3a5b8 <col:33> 'const smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   `-DeclRefExpr 0x1553ec3a410 <col:33> 'const smallfelem [2][16][3]' lvalue Var 0x1553eb09b08 'gmul' 'const smallfelem [2][16][3]'
|   |   | `-UnaryExprOrTypeTraitExpr 0x1553ec3a4b8 <col:39, col:61> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x1553ec3a498 <col:45, col:61> 'smallfelem [2][16][3]' lvalue
|   |   |     `-MemberExpr 0x1553ec3a468 <col:46, col:51> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48 non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x1553ec3a450 <col:46> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1553ec3a430 <col:46> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
|   |   `-GotoStmt 0x1553ec3a638 <line:2247:9, col:14> 'done' 0x1553ec3a5e8
|   |-IfStmt 0x1553ec3a778 <line:2249:5, line:2252:14>
|   | |-OpaqueValueExpr 0x1553ec3a760 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1553ec3a748 <col:9, col:14> 'err' 0x1553ec39bd8
|   |-CallExpr 0x1553ec3a970 <line:2253:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1553ec3a958 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3a790 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec3a9a0 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x1553ec3a918 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x1553ec3a900 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x1553ec3a8b8 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x1553ec3a8a0 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x1553ec3a858 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x1553ec3a840 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x1553ec3a7e8 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3a7d0 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x1553ec3a7b0 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x1553ec3a818 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x1553ec3a878 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x1553ec3a8d8 <col:40> 'int' 0
|   | `-ImplicitCastExpr 0x1553ec3a9d0 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec3a9b8 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec3a938 <col:44> 'felem':'limb [4]' lvalue Var 0x1553ec396d8 'x_tmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553ec3abc8 <line:2254:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1553ec3abb0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3a9e8 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec3abf8 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x1553ec3ab70 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x1553ec3ab58 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x1553ec3ab10 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x1553ec3aaf8 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x1553ec3aab0 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x1553ec3aa98 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x1553ec3aa40 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3aa28 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x1553ec3aa08 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x1553ec3aa70 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x1553ec3aad0 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x1553ec3ab30 <col:40> 'int' 1
|   | `-ImplicitCastExpr 0x1553ec3ac28 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec3ac10 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec3ab90 <col:44> 'felem':'limb [4]' lvalue Var 0x1553ec39750 'y_tmp' 'felem':'limb [4]'
|   |-CallExpr 0x1553ec3ae20 <line:2255:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1553ec3ae08 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec3ac40 <col:5> 'void (u64 *, const limb *)' Function 0x1553ea00b18 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1553ec3ae50 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x1553ec3adc8 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x1553ec3adb0 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x1553ec3ad68 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x1553ec3ad50 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x1553ec3ad08 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x1553ec3acf0 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x1553ec3ac98 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3ac80 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x1553ec3ac60 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x1553ec3acc8 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x1553ec3ad28 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x1553ec3ad88 <col:40> 'int' 2
|   | `-ImplicitCastExpr 0x1553ec3ae80 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1553ec3ae68 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1553ec3ade8 <col:44> 'felem':'limb [4]' lvalue Var 0x1553ec397c8 'z_tmp' 'felem':'limb [4]'
|   |-ForStmt 0x1553ec34230 <line:2260:5, line:2288:5>
|   | |-BinaryOperator 0x1553ec3aef8 <line:2260:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1553ec3ae98 <col:10> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   | | `-IntegerLiteral 0x1553ec3aed0 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553ec3af78 <col:17, col:22> 'int' '<='
|   | | |-ImplicitCastExpr 0x1553ec3af60 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ec3af18 <col:17> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   | | `-IntegerLiteral 0x1553ec3af38 <col:22> 'int' 8
|   | |-CompoundAssignOperator 0x1553ec3aff8 <col:25, col:31> 'int' '<<=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x1553ec3af98 <col:25> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   | | `-IntegerLiteral 0x1553ec3afb8 <col:31> 'int' 1
|   | `-CompoundStmt 0x1553ec341f8 <col:34, line:2288:5>
|   |   |-CallExpr 0x1553ec379e8 <line:2261:9, line:2264:52> 'void'
|   |   | |-ImplicitCastExpr 0x1553ec379d0 <line:2261:9> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553ec3b028 <col:9> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x1553eaf4108 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   | |-ImplicitCastExpr 0x1553ec37a38 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec371b8 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec371a0 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec37158 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec37128 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec370e8 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec370d0 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec37078 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec37060 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3b048 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1553ec370a8 <col:44> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x1553ec37140 <col:47> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x1553ec37108 <col:47> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1553ec37178 <col:50> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec37a50 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec37350 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec37338 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec372f0 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec372c0 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec37280 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec37268 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec37210 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec371f8 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec371d8 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1553ec37240 <col:70> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x1553ec372d8 <col:73> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x1553ec372a0 <col:73> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1553ec37310 <col:76> 'int' 1
|   |   | |-ImplicitCastExpr 0x1553ec37a68 <line:2262:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec374e8 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec374d0 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec37488 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec37458 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec37418 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec37400 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec373a8 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec37390 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec37370 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1553ec373d8 <col:44> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x1553ec37470 <col:47> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x1553ec37438 <col:47> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1553ec374a8 <col:50> 'int' 2
|   |   | |-ImplicitCastExpr 0x1553ec37a98 <col:54, col:77> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1553ec37a80 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1553ec37680 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1553ec37668 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1553ec37620 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1553ec375f0 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1553ec375b0 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1553ec37598 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1553ec37540 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1553ec37528 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1553ec37508 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1553ec37570 <col:70> 'int' 0
|   |   | |     |   `-ImplicitCastExpr 0x1553ec37608 <col:73> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1553ec375d0 <col:73> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1553ec37640 <col:76> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec37ac8 <line:2263:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1553ec37ab0 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1553ec37818 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1553ec37800 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1553ec377b8 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1553ec37788 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1553ec37748 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1553ec37730 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1553ec376d8 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1553ec376c0 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1553ec376a0 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1553ec37708 <col:44> 'int' 0
|   |   | |     |   `-ImplicitCastExpr 0x1553ec377a0 <col:47> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1553ec37768 <col:47> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1553ec377d8 <col:50> 'int' 1
|   |   | `-ImplicitCastExpr 0x1553ec37af8 <line:2264:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1553ec37ae0 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x1553ec379b0 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x1553ec37998 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1553ec37950 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1553ec37920 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x1553ec378e0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x1553ec378c8 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x1553ec37870 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |       |   |   |   `-ImplicitCastExpr 0x1553ec37858 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x1553ec37838 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |       |   |   `-IntegerLiteral 0x1553ec378a0 <col:44> 'int' 0
|   |   |       |   `-ImplicitCastExpr 0x1553ec37938 <col:47> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1553ec37900 <col:47> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |       `-IntegerLiteral 0x1553ec37970 <col:50> 'int' 2
|   |   |-ForStmt 0x1553ec38750 <line:2265:9, line:2272:9>
|   |   | |-BinaryOperator 0x1553ec37b70 <line:2265:14, col:18> 'int' '='
|   |   | | |-DeclRefExpr 0x1553ec37b10 <col:14> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |   | | `-IntegerLiteral 0x1553ec37b48 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x1553ec37bf0 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1553ec37bd8 <col:21> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1553ec37b90 <col:21> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |   | | `-IntegerLiteral 0x1553ec37bb0 <col:25> 'int' 31
|   |   | |-UnaryOperator 0x1553ec37c30 <col:29, col:31> 'int' prefix '++'
|   |   | | `-DeclRefExpr 0x1553ec37c10 <col:31> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |   | `-CompoundStmt 0x1553ec38738 <col:34, line:2272:9>
|   |   |   `-CallExpr 0x1553ec38610 <line:2266:13, line:2271:56> 'void'
|   |   |     |-ImplicitCastExpr 0x1553ec385f8 <line:2266:13> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1553ec37c48 <col:13> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x1553eaf4108 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   |     |-ImplicitCastExpr 0x1553ec38660 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1553ec37de0 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553ec37dc8 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1553ec37d80 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1553ec37d50 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x1553ec37d10 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x1553ec37cf8 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x1553ec37ca0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x1553ec37c88 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x1553ec37c68 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x1553ec37cd0 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x1553ec37d68 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1553ec37d30 <col:51> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1553ec37da0 <col:54> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1553ec38678 <line:2267:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1553ec37f78 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553ec37f60 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1553ec37f18 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1553ec37ee8 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x1553ec37ea8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x1553ec37e90 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x1553ec37e38 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x1553ec37e20 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x1553ec37e00 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x1553ec37e68 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x1553ec37f00 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1553ec37ec8 <col:51> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1553ec37f38 <col:54> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1553ec38690 <line:2268:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1553ec38110 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553ec380f8 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1553ec380b0 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1553ec38080 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x1553ec38040 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x1553ec38028 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x1553ec37fd0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x1553ec37fb8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x1553ec37f98 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x1553ec38000 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x1553ec38098 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1553ec38060 <col:51> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1553ec380d0 <col:54> 'int' 2
|   |   |     |-ImplicitCastExpr 0x1553ec386c0 <line:2269:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1553ec386a8 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1553ec382a8 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1553ec38290 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-ArraySubscriptExpr 0x1553ec38248 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |     |   |-ImplicitCastExpr 0x1553ec38218 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |     |   | `-ArraySubscriptExpr 0x1553ec381d8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |     |   |   |-ImplicitCastExpr 0x1553ec381c0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |     |   |   | `-MemberExpr 0x1553ec38168 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |     |     |   |   |   `-ImplicitCastExpr 0x1553ec38150 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |     |   |   |     `-DeclRefExpr 0x1553ec38130 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |     |   |   `-IntegerLiteral 0x1553ec38198 <col:48> 'int' 1
|   |   |     |     |   `-ImplicitCastExpr 0x1553ec38230 <col:51> 'int' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x1553ec381f8 <col:51> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |     |     `-IntegerLiteral 0x1553ec38268 <col:54> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1553ec386f0 <line:2270:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1553ec386d8 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1553ec38440 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1553ec38428 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-ArraySubscriptExpr 0x1553ec383e0 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |     |   |-ImplicitCastExpr 0x1553ec383b0 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |     |   | `-ArraySubscriptExpr 0x1553ec38370 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |     |   |   |-ImplicitCastExpr 0x1553ec38358 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |     |   |   | `-MemberExpr 0x1553ec38300 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |     |     |   |   |   `-ImplicitCastExpr 0x1553ec382e8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |     |   |   |     `-DeclRefExpr 0x1553ec382c8 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |     |   |   `-IntegerLiteral 0x1553ec38330 <col:48> 'int' 1
|   |   |     |     |   `-ImplicitCastExpr 0x1553ec383c8 <col:51> 'int' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x1553ec38390 <col:51> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |     |     `-IntegerLiteral 0x1553ec38400 <col:54> 'int' 1
|   |   |     `-ImplicitCastExpr 0x1553ec38720 <line:2271:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x1553ec38708 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |         `-ArraySubscriptExpr 0x1553ec385d8 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |           |-ImplicitCastExpr 0x1553ec385c0 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |           | `-ArraySubscriptExpr 0x1553ec38578 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |           |   |-ImplicitCastExpr 0x1553ec38548 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |           |   | `-ArraySubscriptExpr 0x1553ec38508 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |           |   |   |-ImplicitCastExpr 0x1553ec384f0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |           |   |   | `-MemberExpr 0x1553ec38498 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |           |   |   |   `-ImplicitCastExpr 0x1553ec38480 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |           |   |   |     `-DeclRefExpr 0x1553ec38460 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |           |   |   `-IntegerLiteral 0x1553ec384c8 <col:48> 'int' 1
|   |   |           |   `-ImplicitCastExpr 0x1553ec38560 <col:51> 'int' <LValueToRValue>
|   |   |           |     `-DeclRefExpr 0x1553ec38528 <col:51> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |           `-IntegerLiteral 0x1553ec38598 <col:54> 'int' 2
|   |   |-IfStmt 0x1553ec38810 <line:2273:9, line:2274:13>
|   |   | |-BinaryOperator 0x1553ec387e8 <line:2273:13, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1553ec387d0 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1553ec38788 <col:13> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | | `-IntegerLiteral 0x1553ec387a8 <col:18> 'int' 8
|   |   | `-BreakStmt 0x1553ec38808 <line:2274:13>
|   |   |-CallExpr 0x1553ec332c0 <line:2275:9, line:2279:52> 'void'
|   |   | |-ImplicitCastExpr 0x1553ec332a8 <line:2275:9> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553ec38828 <col:9> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x1553eaf4108 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   | |-ImplicitCastExpr 0x1553ec33310 <col:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec38a08 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec389f0 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec389a8 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec38990 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec388f0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec388d8 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec38880 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec38868 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec38848 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1553ec388b0 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x1553ec38970 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x1553ec38910 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x1553ec38958 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x1553ec38938 <col:51> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1553ec389c8 <col:54> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec33328 <line:2276:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec38be8 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec38bd0 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec38b88 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec38b70 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec38ad0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec38ab8 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec38a60 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec38a48 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec38a28 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1553ec38a90 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x1553ec38b50 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x1553ec38af0 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x1553ec38b38 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x1553ec38b18 <col:51> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1553ec38ba8 <col:54> 'int' 1
|   |   | |-ImplicitCastExpr 0x1553ec33340 <line:2277:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec38dc8 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec38db0 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec38d68 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec38d50 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec38cb0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec38c98 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec38c40 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec38c28 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec38c08 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1553ec38c70 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x1553ec38d30 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x1553ec38cd0 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x1553ec38d18 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x1553ec38cf8 <col:51> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1553ec38d88 <col:54> 'int' 2
|   |   | |-ImplicitCastExpr 0x1553ec33370 <line:2278:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1553ec33358 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1553ec38f60 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1553ec38f48 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1553ec38f00 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1553ec38ed0 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1553ec38e90 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1553ec38e78 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1553ec38e20 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1553ec38e08 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1553ec38de8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1553ec38e50 <col:44> 'int' 1
|   |   | |     |   `-ImplicitCastExpr 0x1553ec38ee8 <col:47> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1553ec38eb0 <col:47> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1553ec38f20 <col:50> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec333a0 <col:54, col:77> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1553ec33388 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1553ec330f0 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1553ec330d8 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1553ec33090 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1553ec33060 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1553ec39028 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1553ec39010 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1553ec38fb8 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1553ec38fa0 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1553ec38f80 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1553ec38fe8 <col:70> 'int' 1
|   |   | |     |   `-ImplicitCastExpr 0x1553ec33078 <col:73> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1553ec33040 <col:73> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1553ec330b0 <col:76> 'int' 1
|   |   | `-ImplicitCastExpr 0x1553ec333d0 <line:2279:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1553ec333b8 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x1553ec33288 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x1553ec33270 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1553ec33228 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1553ec331f8 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x1553ec331b8 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x1553ec331a0 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x1553ec33148 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |       |   |   |   `-ImplicitCastExpr 0x1553ec33130 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x1553ec33110 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |       |   |   `-IntegerLiteral 0x1553ec33178 <col:44> 'int' 1
|   |   |       |   `-ImplicitCastExpr 0x1553ec33210 <col:47> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1553ec331d8 <col:47> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |       `-IntegerLiteral 0x1553ec33248 <col:50> 'int' 2
|   |   `-ForStmt 0x1553ec341c0 <line:2280:9, line:2287:9>
|   |     |-BinaryOperator 0x1553ec33430 <line:2280:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x1553ec333e8 <col:14> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |     | `-IntegerLiteral 0x1553ec33408 <col:18> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x1553ec334b0 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x1553ec33498 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1553ec33450 <col:21> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |     | `-IntegerLiteral 0x1553ec33470 <col:25> 'int' 31
|   |     |-UnaryOperator 0x1553ec334f0 <col:29, col:31> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x1553ec334d0 <col:31> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |     `-CompoundStmt 0x1553ec341a8 <col:34, line:2287:9>
|   |       `-CallExpr 0x1553ec34080 <line:2281:13, line:2286:60> 'void'
|   |         |-ImplicitCastExpr 0x1553ec34068 <line:2281:13> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x1553ec33508 <col:13> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x1553eaf4108 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |         |-ImplicitCastExpr 0x1553ec340d0 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec336e8 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec336d0 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec33688 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec33670 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec335d0 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec335b8 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec33560 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec33548 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec33528 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x1553ec33590 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x1553ec33650 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1553ec335f0 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1553ec33638 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1553ec33618 <col:55> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   `-IntegerLiteral 0x1553ec336a8 <col:58> 'int' 0
|   |         |-ImplicitCastExpr 0x1553ec340e8 <line:2282:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec338c8 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec338b0 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec33868 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec33850 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec337b0 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec33798 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec33740 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec33728 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec33708 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x1553ec33770 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x1553ec33830 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1553ec337d0 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1553ec33818 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1553ec337f8 <col:55> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   `-IntegerLiteral 0x1553ec33888 <col:58> 'int' 1
|   |         |-ImplicitCastExpr 0x1553ec34100 <line:2283:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec33aa8 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec33a90 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec33a48 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec33a30 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec33990 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec33978 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec33920 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec33908 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec338e8 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x1553ec33950 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x1553ec33a10 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1553ec339b0 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1553ec339f8 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1553ec339d8 <col:55> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   `-IntegerLiteral 0x1553ec33a68 <col:58> 'int' 2
|   |         |-ImplicitCastExpr 0x1553ec34130 <line:2284:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1553ec34118 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1553ec33c88 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1553ec33c70 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1553ec33c28 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1553ec33c10 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1553ec33b70 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1553ec33b58 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1553ec33b00 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |     |   |   |   `-ImplicitCastExpr 0x1553ec33ae8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1553ec33ac8 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |     |   |   `-IntegerLiteral 0x1553ec33b30 <col:48> 'int' 0
|   |         |     |   `-BinaryOperator 0x1553ec33bf0 <col:51, col:55> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x1553ec33b90 <col:51> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x1553ec33bd8 <col:55> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x1553ec33bb8 <col:55> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |     `-IntegerLiteral 0x1553ec33c48 <col:58> 'int' 0
|   |         |-ImplicitCastExpr 0x1553ec34160 <line:2285:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1553ec34148 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1553ec33e68 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1553ec33e50 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1553ec33e08 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1553ec33df0 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1553ec33d50 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1553ec33d38 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1553ec33ce0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |     |   |   |   `-ImplicitCastExpr 0x1553ec33cc8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1553ec33ca8 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |     |   |   `-IntegerLiteral 0x1553ec33d10 <col:48> 'int' 0
|   |         |     |   `-BinaryOperator 0x1553ec33dd0 <col:51, col:55> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x1553ec33d70 <col:51> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x1553ec33db8 <col:55> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x1553ec33d98 <col:55> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |     `-IntegerLiteral 0x1553ec33e28 <col:58> 'int' 1
|   |         `-ImplicitCastExpr 0x1553ec34190 <line:2286:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |           `-ImplicitCastExpr 0x1553ec34178 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |             `-ArraySubscriptExpr 0x1553ec34048 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |               |-ImplicitCastExpr 0x1553ec34030 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |               | `-ArraySubscriptExpr 0x1553ec33fe8 <col:32, col:56> 'smallfelem [3]' lvalue
|   |               |   |-ImplicitCastExpr 0x1553ec33fd0 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |               |   | `-ArraySubscriptExpr 0x1553ec33f30 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |               |   |   |-ImplicitCastExpr 0x1553ec33f18 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |               |   |   | `-MemberExpr 0x1553ec33ec0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |               |   |   |   `-ImplicitCastExpr 0x1553ec33ea8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |               |   |   |     `-DeclRefExpr 0x1553ec33e88 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |               |   |   `-IntegerLiteral 0x1553ec33ef0 <col:48> 'int' 0
|   |               |   `-BinaryOperator 0x1553ec33fb0 <col:51, col:55> 'int' '*'
|   |               |     |-IntegerLiteral 0x1553ec33f50 <col:51> 'int' 2
|   |               |     `-ImplicitCastExpr 0x1553ec33f98 <col:55> 'int' <LValueToRValue>
|   |               |       `-DeclRefExpr 0x1553ec33f78 <col:55> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |               `-IntegerLiteral 0x1553ec34008 <col:58> 'int' 2
|   |-ForStmt 0x1553ec47b70 <line:2289:5, line:2331:5>
|   | |-BinaryOperator 0x1553ec342b0 <line:2289:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1553ec34268 <col:10> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   | | `-IntegerLiteral 0x1553ec34288 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1553ec34330 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1553ec34318 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1553ec342d0 <col:17> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   | | `-IntegerLiteral 0x1553ec342f0 <col:21> 'int' 2
|   | |-UnaryOperator 0x1553ec34370 <col:24, col:25> 'int' postfix '++'
|   | | `-DeclRefExpr 0x1553ec34350 <col:24> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   | `-CompoundStmt 0x1553ec47b30 <col:29, line:2331:5>
|   |   |-CallExpr 0x1553ec346b0 <line:2291:9, col:71> 'void *'
|   |   | |-ImplicitCastExpr 0x1553ec34698 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553ec34388 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1553e9c5900 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1553ec34700 <col:16, col:36> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1553ec346e8 <col:16, col:36> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1553ec344c0 <col:16, col:36> 'smallfelem [3]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1553ec344a8 <col:16, col:33> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1553ec34460 <col:16, col:33> 'smallfelem [16][3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1553ec34430 <col:16, col:21> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x1553ec343e0 <col:16, col:21> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |     |   |   `-ImplicitCastExpr 0x1553ec343c8 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1553ec343a8 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x1553ec34448 <col:32> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1553ec34410 <col:32> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1553ec34480 <col:35> 'int' 0
|   |   | |-IntegerLiteral 0x1553ec344e0 <col:39> 'int' 0
|   |   | `-UnaryExprOrTypeTraitExpr 0x1553ec34660 <col:42, col:70> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x1553ec34640 <col:48, col:70> 'smallfelem [3]' lvalue
|   |   |     `-ArraySubscriptExpr 0x1553ec34620 <col:49, col:69> 'smallfelem [3]' lvalue
|   |   |       |-ImplicitCastExpr 0x1553ec34608 <col:49, col:66> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1553ec345c0 <col:49, col:66> 'smallfelem [16][3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1553ec34590 <col:49, col:54> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   | `-MemberExpr 0x1553ec34540 <col:49, col:54> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48 non_odr_use_unevaluated
|   |   |       |   |   `-ImplicitCastExpr 0x1553ec34528 <col:49> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x1553ec34508 <col:49> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
|   |   |       |   `-ImplicitCastExpr 0x1553ec345a8 <col:65> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1553ec34570 <col:65> 'int' lvalue Var 0x1553ec39340 'i' 'int' non_odr_use_unevaluated
|   |   |       `-IntegerLiteral 0x1553ec345e0 <col:68> 'int' 0
|   |   |-CallExpr 0x1553ec3b5f8 <line:2294:9, line:2298:49> 'void'
|   |   | |-ImplicitCastExpr 0x1553ec3b5e0 <line:2294:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553ec34718 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1553eb089c8 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x1553ec3b660 <col:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec348b0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec34898 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec34850 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec34838 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec347f0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec347c0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec34770 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec34758 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec34738 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec347d8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec347a0 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec34810 <col:44> 'int' 6
|   |   | |   `-IntegerLiteral 0x1553ec34870 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec3b678 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec34a48 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec34a30 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec349e8 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec349d0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec34988 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec34958 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec34908 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec348f0 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec348d0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec34970 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec34938 <col:67> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec349a8 <col:70> 'int' 6
|   |   | |   `-IntegerLiteral 0x1553ec34a08 <col:73> 'int' 1
|   |   | |-ImplicitCastExpr 0x1553ec3b690 <line:2295:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec34be0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec34bc8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec34b80 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec34b68 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec34b20 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec34af0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec34aa0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec34a88 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec34a68 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec34b08 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec34ad0 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec34b40 <col:44> 'int' 6
|   |   | |   `-IntegerLiteral 0x1553ec34ba0 <col:47> 'int' 2
|   |   | |-ImplicitCastExpr 0x1553ec3b6a8 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec34d78 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec34d60 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec34d18 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec34d00 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec34cb8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec34c88 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec34c38 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec34c20 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec34c00 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec34ca0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec34c68 <col:67> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec34cd8 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x1553ec34d38 <col:73> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec3b6c0 <line:2296:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec34f10 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec34ef8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec34eb0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec34e98 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec34e50 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec34e20 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec34dd0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec34db8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec34d98 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec34e38 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec34e00 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec34e70 <col:44> 'int' 4
|   |   | |   `-IntegerLiteral 0x1553ec34ed0 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x1553ec3b6d8 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3b0f8 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3b0e0 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3b098 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3b080 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec34fe8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec34fb8 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec34f68 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec34f50 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec34f30 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec34fd0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec34f98 <col:67> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec35008 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x1553ec3b0b8 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x1553ec3b6f0 <line:2297:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3b290 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3b278 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3b230 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3b218 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3b1d0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3b1a0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3b150 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3b138 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3b118 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3b1b8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3b180 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3b1f0 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x1553ec3b250 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec3b708 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3b428 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3b410 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3b3c8 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3b3b0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3b368 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3b338 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3b2e8 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3b2d0 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3b2b0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3b350 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3b318 <col:67> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3b388 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x1553ec3b3e8 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x1553ec3b720 <line:2298:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x1553ec3b5c0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x1553ec3b5a8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1553ec3b560 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553ec3b548 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1553ec3b500 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1553ec3b4d0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x1553ec3b480 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |     |   |   |   `-ImplicitCastExpr 0x1553ec3b468 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x1553ec3b448 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x1553ec3b4e8 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1553ec3b4b0 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1553ec3b520 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x1553ec3b580 <col:47> 'int' 2
|   |   |-CallExpr 0x1553ec3c5c8 <line:2300:9, line:2304:49> 'void'
|   |   | |-ImplicitCastExpr 0x1553ec3c5b0 <line:2300:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553ec3b738 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1553eb089c8 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x1553ec3c630 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3b8d0 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3b8b8 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3b870 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3b858 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3b810 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3b7e0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3b790 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3b778 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3b758 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3b7f8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3b7c0 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3b830 <col:44> 'int' 10
|   |   | |   `-IntegerLiteral 0x1553ec3b890 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec3c648 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3ba68 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3ba50 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3ba08 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3b9f0 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3b9a8 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3b978 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3b928 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3b910 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3b8f0 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3b990 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3b958 <col:68> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3b9c8 <col:71> 'int' 10
|   |   | |   `-IntegerLiteral 0x1553ec3ba28 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x1553ec3c660 <line:2301:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3bc00 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3bbe8 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3bba0 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3bb88 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3bb40 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3bb10 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3bac0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3baa8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3ba88 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3bb28 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3baf0 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3bb60 <col:44> 'int' 10
|   |   | |   `-IntegerLiteral 0x1553ec3bbc0 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x1553ec3c678 <col:52, col:75> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3bd98 <col:52, col:75> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3bd80 <col:52, col:72> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3bd38 <col:52, col:72> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3bd20 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3bcd8 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3bca8 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3bc58 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3bc40 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3bc20 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3bcc0 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3bc88 <col:68> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3bcf8 <col:71> 'int' 8
|   |   | |   `-IntegerLiteral 0x1553ec3bd58 <col:74> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec3c690 <line:2302:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3bf30 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3bf18 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3bed0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3beb8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3be70 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3be40 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3bdf0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3bdd8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3bdb8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3be58 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3be20 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3be90 <col:44> 'int' 8
|   |   | |   `-IntegerLiteral 0x1553ec3bef0 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x1553ec3c6a8 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3c0c8 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3c0b0 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3c068 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3c050 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3c008 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3bfd8 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3bf88 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3bf70 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3bf50 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3bff0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3bfb8 <col:67> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3c028 <col:70> 'int' 8
|   |   | |   `-IntegerLiteral 0x1553ec3c088 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x1553ec3c6c0 <line:2303:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3c260 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3c248 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3c200 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3c1e8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3c1a0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3c170 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3c120 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3c108 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3c0e8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3c188 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3c150 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3c1c0 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x1553ec3c220 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec3c6d8 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3c3f8 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3c3e0 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3c398 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3c380 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3c338 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3c308 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3c2b8 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3c2a0 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3c280 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3c320 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3c2e8 <col:67> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3c358 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x1553ec3c3b8 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x1553ec3c6f0 <line:2304:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x1553ec3c590 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x1553ec3c578 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1553ec3c530 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553ec3c518 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1553ec3c4d0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1553ec3c4a0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x1553ec3c450 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |     |   |   |   `-ImplicitCastExpr 0x1553ec3c438 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x1553ec3c418 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x1553ec3c4b8 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1553ec3c480 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1553ec3c4f0 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x1553ec3c550 <col:47> 'int' 2
|   |   |-CallExpr 0x1553ec2f538 <line:2306:9, line:2310:49> 'void'
|   |   | |-ImplicitCastExpr 0x1553ec2f520 <line:2306:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553ec3c708 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1553eb089c8 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x1553ec2f5a0 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3c8a0 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3c888 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3c840 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3c828 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3c7e0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3c7b0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3c760 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3c748 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3c728 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3c7c8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3c790 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3c800 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x1553ec3c860 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec2f5b8 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3ca38 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3ca20 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3c9d8 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3c9c0 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3c978 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3c948 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3c8f8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3c8e0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3c8c0 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3c960 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3c928 <col:68> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3c998 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x1553ec3c9f8 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x1553ec2f5d0 <line:2307:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3cbd0 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3cbb8 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3cb70 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3cb58 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3cb10 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3cae0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3ca90 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3ca78 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3ca58 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3caf8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3cac0 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3cb30 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x1553ec3cb90 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x1553ec2f5e8 <col:52, col:75> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3cd68 <col:52, col:75> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3cd50 <col:52, col:72> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3cd08 <col:52, col:72> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3ccf0 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3cca8 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3cc78 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3cc28 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3cc10 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3cbf0 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3cc90 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3cc58 <col:68> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3ccc8 <col:71> 'int' 8
|   |   | |   `-IntegerLiteral 0x1553ec3cd28 <col:74> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec2f600 <line:2308:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec3cf00 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec3cee8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3cea0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3ce88 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3ce40 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3ce10 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3cdc0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3cda8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3cd88 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3ce28 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3cdf0 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3ce60 <col:44> 'int' 8
|   |   | |   `-IntegerLiteral 0x1553ec3cec0 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x1553ec2f618 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec2f038 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec2f020 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec3d038 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec3d020 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec3cfd8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec3cfa8 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec3cf58 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec3cf40 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec3cf20 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec3cfc0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec3cf88 <col:67> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec3cff8 <col:70> 'int' 8
|   |   | |   `-IntegerLiteral 0x1553ec3d058 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x1553ec2f630 <line:2309:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec2f1d0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec2f1b8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec2f170 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec2f158 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec2f110 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec2f0e0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec2f090 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec2f078 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec2f058 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec2f0f8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec2f0c0 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec2f130 <col:44> 'int' 4
|   |   | |   `-IntegerLiteral 0x1553ec2f190 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec2f648 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec2f368 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec2f350 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec2f308 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec2f2f0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec2f2a8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec2f278 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec2f228 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec2f210 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec2f1f0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec2f290 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec2f258 <col:67> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec2f2c8 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x1553ec2f328 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x1553ec2f660 <line:2310:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x1553ec2f500 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x1553ec2f4e8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1553ec2f4a0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553ec2f488 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1553ec2f440 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1553ec2f410 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x1553ec2f3c0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |     |   |   |   `-ImplicitCastExpr 0x1553ec2f3a8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x1553ec2f388 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x1553ec2f428 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1553ec2f3f0 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1553ec2f460 <col:44> 'int' 4
|   |   |     `-IntegerLiteral 0x1553ec2f4c0 <col:47> 'int' 2
|   |   |-CallExpr 0x1553ec30508 <line:2314:9, line:2318:49> 'void'
|   |   | |-ImplicitCastExpr 0x1553ec304f0 <line:2314:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1553ec2f678 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1553eb089c8 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x1553ec30570 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec2f810 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec2f7f8 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec2f7b0 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec2f798 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec2f750 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec2f720 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec2f6d0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec2f6b8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec2f698 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec2f738 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec2f700 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec2f770 <col:44> 'int' 14
|   |   | |   `-IntegerLiteral 0x1553ec2f7d0 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec30588 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec2f9a8 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec2f990 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec2f948 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec2f930 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec2f8e8 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec2f8b8 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec2f868 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec2f850 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec2f830 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec2f8d0 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec2f898 <col:68> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec2f908 <col:71> 'int' 14
|   |   | |   `-IntegerLiteral 0x1553ec2f968 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x1553ec305a0 <line:2315:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec2fb40 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec2fb28 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec2fae0 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec2fac8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec2fa80 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec2fa50 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec2fa00 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec2f9e8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec2f9c8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec2fa68 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec2fa30 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec2faa0 <col:44> 'int' 14
|   |   | |   `-IntegerLiteral 0x1553ec2fb00 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x1553ec305b8 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec2fcd8 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec2fcc0 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec2fc78 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec2fc60 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec2fc18 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec2fbe8 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec2fb98 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec2fb80 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec2fb60 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec2fc00 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec2fbc8 <col:68> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec2fc38 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x1553ec2fc98 <col:75> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec305d0 <line:2316:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec2fe70 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec2fe58 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec2fe10 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec2fdf8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec2fdb0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec2fd80 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec2fd30 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec2fd18 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec2fcf8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec2fd98 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec2fd60 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec2fdd0 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x1553ec2fe30 <col:48> 'int' 1
|   |   | |-ImplicitCastExpr 0x1553ec305e8 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec30008 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec2fff0 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec2ffa8 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec2ff90 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec2ff48 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec2ff18 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec2fec8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec2feb0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec2fe90 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec2ff30 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec2fef8 <col:68> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec2ff68 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x1553ec2ffc8 <col:75> 'int' 2
|   |   | |-ImplicitCastExpr 0x1553ec30600 <line:2317:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec301a0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec30188 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec30140 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec30128 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec300e0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec300b0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec30060 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec30048 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec30028 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec300c8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec30090 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec30100 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x1553ec30160 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x1553ec30618 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1553ec30338 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1553ec30320 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1553ec302d8 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1553ec302c0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1553ec30278 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1553ec30248 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1553ec301f8 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1553ec301e0 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1553ec301c0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1553ec30260 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1553ec30228 <col:67> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1553ec30298 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x1553ec302f8 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x1553ec30630 <line:2318:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x1553ec304d0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x1553ec304b8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1553ec30470 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1553ec30458 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1553ec30410 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1553ec303e0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x1553ec30390 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |   |     |   |   |   `-ImplicitCastExpr 0x1553ec30378 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x1553ec30358 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x1553ec303f8 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1553ec303c0 <col:41> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1553ec30430 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x1553ec30490 <col:47> 'int' 2
|   |   `-ForStmt 0x1553ec47af8 <line:2319:9, line:2330:9>
|   |     |-BinaryOperator 0x1553ec30690 <line:2319:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x1553ec30648 <col:14> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |     | `-IntegerLiteral 0x1553ec30668 <col:18> 'int' 1
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x1553ec30710 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x1553ec306f8 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1553ec306b0 <col:21> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |     | `-IntegerLiteral 0x1553ec306d0 <col:25> 'int' 8
|   |     |-UnaryOperator 0x1553ec30750 <col:28, col:30> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x1553ec30730 <col:30> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |     `-CompoundStmt 0x1553ec47ae0 <col:33, line:2330:9>
|   |       `-CallExpr 0x1553ec479a0 <line:2321:13, line:2329:53> 'void'
|   |         |-ImplicitCastExpr 0x1553ec47988 <line:2321:13> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x1553ec30768 <col:13> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1553eb089c8 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |         |-ImplicitCastExpr 0x1553ec47a08 <col:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec309a0 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec30988 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec30940 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec30928 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec30840 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec30810 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec307c0 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec307a8 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec30788 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1553ec30828 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1553ec307f0 <col:45> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1553ec30908 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x1553ec308c0 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x1553ec30860 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x1553ec308a8 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x1553ec30888 <col:52> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x1553ec308e0 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x1553ec30960 <col:59> 'int' 0
|   |         |-ImplicitCastExpr 0x1553ec47a20 <line:2322:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec30bd8 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec30bc0 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec30b78 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec30b60 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec30a78 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec30a48 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec309f8 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec309e0 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec309c0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1553ec30a60 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1553ec30a28 <col:45> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1553ec30b40 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x1553ec30af8 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x1553ec30a98 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x1553ec30ae0 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x1553ec30ac0 <col:52> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x1553ec30b18 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x1553ec30b98 <col:59> 'int' 1
|   |         |-ImplicitCastExpr 0x1553ec47a38 <line:2323:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec30e10 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec30df8 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec30db0 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec30d98 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec30cb0 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec30c80 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec30c30 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec30c18 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec30bf8 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1553ec30c98 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1553ec30c60 <col:45> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1553ec30d78 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x1553ec30d30 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x1553ec30cd0 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x1553ec30d18 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x1553ec30cf8 <col:52> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x1553ec30d50 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x1553ec30dd0 <col:59> 'int' 2
|   |         |-ImplicitCastExpr 0x1553ec47a50 <line:2324:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec31000 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec30fe8 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec30fa0 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec30f88 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec30ee8 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec30eb8 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec30e68 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec30e50 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec30e30 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1553ec30ed0 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1553ec30e98 <col:45> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1553ec30f68 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1553ec30f08 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1553ec30f50 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1553ec30f30 <col:52> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |         |   `-IntegerLiteral 0x1553ec30fc0 <col:55> 'int' 0
|   |         |-ImplicitCastExpr 0x1553ec47a68 <line:2325:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec472b0 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec47298 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec47250 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec47238 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec47198 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec47168 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec47118 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec47100 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec470e0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1553ec47180 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1553ec47148 <col:45> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1553ec47218 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1553ec471b8 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1553ec47200 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1553ec471e0 <col:52> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |         |   `-IntegerLiteral 0x1553ec47270 <col:55> 'int' 1
|   |         |-ImplicitCastExpr 0x1553ec47a80 <line:2326:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec474a0 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec47488 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec47440 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec47428 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec47388 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec47358 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec47308 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec472f0 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec472d0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1553ec47370 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1553ec47338 <col:45> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1553ec47408 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1553ec473a8 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1553ec473f0 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1553ec473d0 <col:52> 'int' lvalue Var 0x1553ec393c0 'j' 'int'
|   |         |   `-IntegerLiteral 0x1553ec47460 <col:55> 'int' 2
|   |         |-ImplicitCastExpr 0x1553ec47a98 <line:2327:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec47638 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec47620 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec475d8 <col:29, col:49> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec475c0 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec47578 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec47548 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec474f8 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec474e0 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec474c0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1553ec47560 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1553ec47528 <col:45> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   |   `-IntegerLiteral 0x1553ec47598 <col:48> 'int' 1
|   |         |   `-IntegerLiteral 0x1553ec475f8 <col:51> 'int' 0
|   |         |-ImplicitCastExpr 0x1553ec47ab0 <line:2328:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1553ec477d0 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1553ec477b8 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1553ec47770 <col:29, col:49> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1553ec47758 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1553ec47710 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1553ec476e0 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1553ec47690 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |         |   |   |   |   `-ImplicitCastExpr 0x1553ec47678 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1553ec47658 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1553ec476f8 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1553ec476c0 <col:45> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |         |   |   `-IntegerLiteral 0x1553ec47730 <col:48> 'int' 1
|   |         |   `-IntegerLiteral 0x1553ec47790 <col:51> 'int' 1
|   |         `-ImplicitCastExpr 0x1553ec47ac8 <line:2329:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |           `-ArraySubscriptExpr 0x1553ec47968 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |             |-ImplicitCastExpr 0x1553ec47950 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |             | `-ArraySubscriptExpr 0x1553ec47908 <col:29, col:49> 'smallfelem [3]' lvalue
|   |             |   |-ImplicitCastExpr 0x1553ec478f0 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1553ec478a8 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1553ec47878 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |             |   |   | `-MemberExpr 0x1553ec47828 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   |             |   |   |   `-ImplicitCastExpr 0x1553ec47810 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |             |   |   |     `-DeclRefExpr 0x1553ec477f0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   |             |   |   `-ImplicitCastExpr 0x1553ec47890 <col:45> 'int' <LValueToRValue>
|   |             |   |     `-DeclRefExpr 0x1553ec47858 <col:45> 'int' lvalue Var 0x1553ec39340 'i' 'int'
|   |             |   `-IntegerLiteral 0x1553ec478c8 <col:48> 'int' 1
|   |             `-IntegerLiteral 0x1553ec47928 <col:51> 'int' 2
|   |-CallExpr 0x1553ec47da0 <line:2332:5, col:69> 'void'
|   | |-ImplicitCastExpr 0x1553ec47d88 <col:5> 'void (*)(size_t, smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec47ba8 <col:5> 'void (size_t, smallfelem (*)[3], smallfelem *)' Function 0x1553ec23578 'make_points_affine' 'void (size_t, smallfelem (*)[3], smallfelem *)'
|   | |-ImplicitCastExpr 0x1553ec47dd8 <col:24> 'size_t':'unsigned long long' <IntegralCast>
|   | | `-IntegerLiteral 0x1553ec47bc8 <col:24> 'int' 31
|   | |-UnaryOperator 0x1553ec47d38 <col:28, col:51> 'smallfelem (*)[3]' prefix '&' cannot overflow
|   | | `-ParenExpr 0x1553ec47d18 <col:29, col:51> 'smallfelem [3]' lvalue
|   | |   `-ArraySubscriptExpr 0x1553ec47cf8 <col:30, col:50> 'smallfelem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x1553ec47ce0 <col:30, col:47> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x1553ec47c98 <col:30, col:47> 'smallfelem [16][3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x1553ec47c80 <col:30, col:35> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x1553ec47c28 <col:30, col:35> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1553ec25f48
|   | |     |   |   `-ImplicitCastExpr 0x1553ec47c10 <col:30> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x1553ec47bf0 <col:30> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x1553ec47c58 <col:46> 'int' 0
|   | |     `-IntegerLiteral 0x1553ec47cb8 <col:49> 'int' 1
|   | `-ImplicitCastExpr 0x1553ec47df0 <col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x1553ec47d50 <col:54> 'smallfelem [32]' lvalue Var 0x1553ec39648 'tmp_smallfelems' 'smallfelem [32]'
|   |-LabelStmt 0x1553ec47e50 <line:2334:2, col:6> 'done'
|   | `-NullStmt 0x1553ec47e48 <col:6>
|   |-BinaryOperator 0x1553ec47f28 <line:2336:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'NISTP256_PRE_COMP *' '='
|   | |-DeclRefExpr 0x1553ec47e68 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2336:5> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   | `-ImplicitCastExpr 0x1553ec47f10 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |   `-ParenExpr 0x1553ec47ef0 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x1553ec47ec8 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x1553ec47e88 <col:26> 'int' 0
|   |-BinaryOperator 0x1553ec47fa8 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2337:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x1553ec47f48 <col:5> 'int' lvalue Var 0x1553ec39150 'ret' 'int'
|   | `-IntegerLiteral 0x1553ec47f80 <col:11> 'int' 1
|   |-LabelStmt 0x1553ec47ff0 <line:2339:2, col:5> 'err'
|   | `-NullStmt 0x1553ec47fe8 <col:5>
|   |-CallExpr 0x1553ec48100 <line:2343:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1553ec480e8 <col:5> 'void (*)(NISTP256_PRE_COMP *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1553ec48048 <col:5> 'void (NISTP256_PRE_COMP *)' Function 0x1553ec276b0 'EC_nistp256_pre_comp_free' 'void (NISTP256_PRE_COMP *)'
|   | `-ImplicitCastExpr 0x1553ec48128 <col:31> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1553ec48068 <col:31> 'NISTP256_PRE_COMP *' lvalue Var 0x1553ec39208 'pre' 'NISTP256_PRE_COMP *'
|   `-ReturnStmt 0x1553ec48178 <line:2344:5, col:12>
|     `-ImplicitCastExpr 0x1553ec48160 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1553ec48140 <col:12> 'int' lvalue Var 0x1553ec39150 'ret' 'int'
`-FunctionDecl 0x1553ec48310 <line:2347:1, line:2350:1> line:2347:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
  |-ParmVarDecl 0x1553ec48278 <col:42, col:58> col:58 invalid group 'const int *'
  `-CompoundStmt 0x1553ec48478 <line:2348:1, line:2350:1>
