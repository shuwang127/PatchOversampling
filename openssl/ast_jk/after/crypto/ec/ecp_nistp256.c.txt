TranslationUnitDecl 0x1c6172ec668 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1c6172ecf00 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1c6172ecc00 '__int128'
|-TypedefDecl 0x1c6172ecf70 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1c6172ecc20 'unsigned __int128'
|-TypedefDecl 0x1c6172ed2a8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1c6172ed060 'struct __NSConstantString_tag'
|   `-Record 0x1c6172ecfc8 '__NSConstantString_tag'
|-TypedefDecl 0x1c6172ed318 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-TypedefDecl 0x1c6172ed3b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1c6172ed370 'char *'
|   `-BuiltinType 0x1c6172ec700 'char'
|-TypedefDecl 0x1c6172ed420 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1c6172ed370 'char *'
|   `-BuiltinType 0x1c6172ec700 'char'
|-TypedefDecl 0x1c6172ed4e0 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-TypedefDecl 0x1c6172ed550 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1c6172ed370 'char *'
|   `-BuiltinType 0x1c6172ec700 'char'
|-FunctionDecl 0x1c618dfe470 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1c618dfe510 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1c618dfe580 <col:21> Implicit
|-FunctionDecl 0x1c618dfe5d8 prev 0x1c618dfe470 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1c618dfe300 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1c618dfe6c8 <col:21> Inherited Implicit
|-TypedefDecl 0x1c618dfe708 prev 0x1c6172ed318 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-TypedefDecl 0x1c618dfe7b0 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1c618dfe780 'size_t' sugar
|   |-Typedef 0x1c618dfe708 'size_t'
|   `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-TypedefDecl 0x1c618dfe820 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1c6172ec7a0 'long long'
|-TypedefDecl 0x1c618dfe890 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1c6172ec7a0 'long long'
|-TypedefDecl 0x1c618dfe900 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|-TypedefDecl 0x1c618dfe970 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|-TypedefDecl 0x1c618dfe9e0 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|-TypedefDecl 0x1c618dfea50 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x1c6172ec760 'int'
|-TypedefDecl 0x1c618dfeac0 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1c6172ec780 'long'
|-TypedefDecl 0x1c618dfeb30 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1c6172ec7a0 'long long'
|-TypedefDecl 0x1c618dfebc0 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1c618dfeb90 '__time64_t' sugar
|   |-Typedef 0x1c618dfeb30 '__time64_t'
|   `-BuiltinType 0x1c6172ec7a0 'long long'
|-FunctionDecl 0x1c618dfed38 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1c618dfef58 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1c618e268b0 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1c618dff098 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1c618dff110 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1c618dff188 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1c618dff208 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1c618e26650 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1c618e26990 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1c618e26a50 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1c618e26bc0 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1c618e26b70 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1c618e26b10 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1c618e26a30 'struct threadlocaleinfostruct'
|       `-Record 0x1c618e2a690 'threadlocaleinfostruct'
|-TypedefDecl 0x1c618e26cd0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1c618e26c80 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1c618e26c20 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1c618e26af0 'struct threadmbcinfostruct'
|       `-Record 0x1c618e26a50 'threadmbcinfostruct'
|-RecordDecl 0x1c618e26d28 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1c618e26de0 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1c618e26ea0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1c618e26f30 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1c618e26fc0 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1c618e27078 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1c618e27020 'struct localeinfo_struct' sugar
|   `-RecordType 0x1c618e26e80 'struct localeinfo_struct'
|     `-Record 0x1c618e26de0 'localeinfo_struct'
|-TypedefDecl 0x1c618e27150 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1c618e27100 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1c618e27020 'struct localeinfo_struct' sugar
|     `-RecordType 0x1c618e26e80 'struct localeinfo_struct'
|       `-Record 0x1c618e26de0 'localeinfo_struct'
|-RecordDecl 0x1c618e271c8 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1c618e27280 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1c618e272f8 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1c618e273b8 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1c618e27450 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1c618e274c0 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1c618e27578 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1c618e27520 'struct localerefcount' sugar
|   `-RecordType 0x1c618e27260 'struct localerefcount'
|     `-Record 0x1c618e271c8 'localerefcount'
|-RecordDecl 0x1c618e2a690 prev 0x1c618e26990 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1c618e2a710 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1c618e2a788 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1c618e2a7f8 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1c618e2a868 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1c618e2a8d8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1c618e2aa98 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1c618e2ab08 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1c618e2ab78 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1c618e2abe8 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1c618e2ac58 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1c618e2acc8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1c618e2ad20 parent 0x1c6172ec668 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1c618e2aeb0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1c618e2af20 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1c618e2af90 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1c618e2b000 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1c618e2b0a0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1c618e2b110 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1c618e2b220 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1c618e2b358 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1c618e2b408 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1c618e2b3b0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1c618e26a30 'struct threadlocaleinfostruct'
|     `-Record 0x1c618e2a690 'threadlocaleinfostruct'
|-TypedefDecl 0x1c618e2b490 <D:\Microsoft Visual Studio 12.0\VC\include\stdint.h:8:1, col:28> col:28 int8_t 'signed char'
| `-BuiltinType 0x1c6172ec720 'signed char'
|-TypedefDecl 0x1c618e2b500 <line:9:1, col:28> col:28 int16_t 'short'
| `-BuiltinType 0x1c6172ec740 'short'
|-TypedefDecl 0x1c618e2b570 <line:10:1, col:28> col:28 referenced int32_t 'int'
| `-BuiltinType 0x1c6172ec760 'int'
|-TypedefDecl 0x1c618e2b5e0 <line:11:1, col:28> col:28 int64_t 'long long'
| `-BuiltinType 0x1c6172ec7a0 'long long'
|-TypedefDecl 0x1c618e31700 <line:12:1, col:28> col:28 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x1c6172ec7c0 'unsigned char'
|-TypedefDecl 0x1c618e31770 <line:13:1, col:28> col:28 uint16_t 'unsigned short'
| `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|-TypedefDecl 0x1c618e317e0 <line:14:1, col:28> col:28 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x1c6172ec800 'unsigned int'
|-TypedefDecl 0x1c618e31850 <line:15:1, col:28> col:28 referenced uint64_t 'unsigned long long'
| `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-TypedefDecl 0x1c618e318c0 <line:17:1, col:28> col:28 int_least8_t 'signed char'
| `-BuiltinType 0x1c6172ec720 'signed char'
|-TypedefDecl 0x1c618e31930 <line:18:1, col:28> col:28 int_least16_t 'short'
| `-BuiltinType 0x1c6172ec740 'short'
|-TypedefDecl 0x1c618e319a0 <line:19:1, col:28> col:28 int_least32_t 'int'
| `-BuiltinType 0x1c6172ec760 'int'
|-TypedefDecl 0x1c618e31a10 <line:20:1, col:28> col:28 int_least64_t 'long long'
| `-BuiltinType 0x1c6172ec7a0 'long long'
|-TypedefDecl 0x1c618e31a80 <line:21:1, col:28> col:28 uint_least8_t 'unsigned char'
| `-BuiltinType 0x1c6172ec7c0 'unsigned char'
|-TypedefDecl 0x1c618e31af0 <line:22:1, col:28> col:28 uint_least16_t 'unsigned short'
| `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|-TypedefDecl 0x1c618e31b60 <line:23:1, col:28> col:28 uint_least32_t 'unsigned int'
| `-BuiltinType 0x1c6172ec800 'unsigned int'
|-TypedefDecl 0x1c618e31bd0 <line:24:1, col:28> col:28 uint_least64_t 'unsigned long long'
| `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-TypedefDecl 0x1c618e31c40 <line:26:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x1c6172ec720 'signed char'
|-TypedefDecl 0x1c618e31cb0 <line:27:1, col:28> col:28 int_fast16_t 'int'
| `-BuiltinType 0x1c6172ec760 'int'
|-TypedefDecl 0x1c618e31d20 <line:28:1, col:28> col:28 int_fast32_t 'int'
| `-BuiltinType 0x1c6172ec760 'int'
|-TypedefDecl 0x1c618e31d90 <line:29:1, col:28> col:28 int_fast64_t 'long long'
| `-BuiltinType 0x1c6172ec7a0 'long long'
|-TypedefDecl 0x1c618e31e00 <line:30:1, col:28> col:28 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x1c6172ec7c0 'unsigned char'
|-TypedefDecl 0x1c618e31e70 <line:31:1, col:28> col:28 uint_fast16_t 'unsigned int'
| `-BuiltinType 0x1c6172ec800 'unsigned int'
|-TypedefDecl 0x1c618e31ee0 <line:32:1, col:28> col:28 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x1c6172ec800 'unsigned int'
|-TypedefDecl 0x1c618e31f50 <line:33:1, col:28> col:28 uint_fast64_t 'unsigned long long'
| `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-TypedefDecl 0x1c618e31fc0 <line:53:1, col:28> col:28 intmax_t 'long long'
| `-BuiltinType 0x1c6172ec7a0 'long long'
|-TypedefDecl 0x1c618e32030 <line:54:1, col:28> col:28 uintmax_t 'unsigned long long'
| `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-FunctionDecl 0x1c618e32450 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x1c618e320a0 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x1c618e32150 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x1c618e321d0 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x1c618e32248 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e36878 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e36918 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1c618e36980 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1c618e369e8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e36a68 prev 0x1c618e36878 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1c618e32540 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x1c618e325c0 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x1c618e32638 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e36e28 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1c618e36b50 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x1c618e36bd0 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x1c618e36c48 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e372b0 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618e36f10 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x1c618e36f90 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x1c618e37008 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e370a0 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e375b8 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e37658 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1c618e376c0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1c618e3c7b0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e3c830 prev 0x1c618e375b8 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1c618e373a0 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x1c618e37420 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x1c618e37498 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e3cbe8 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e3cc88 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1c618e3ccf0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1c618e3cd58 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e3cdd8 prev 0x1c618e3cbe8 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1c618e3c918 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x1c618e3c998 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x1c618e3ca10 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e3d278 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1c618e3cee8 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x1c618e3cf80 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1c618e3d000 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1c618e3d078 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1c618e3d638 <line:94:25> col:25 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e3d6d8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1c618e3d740 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1c618e35740 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e357c0 prev 0x1c618e3d638 <col:9, col:107> col:25 used memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x1c618e3d368 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x1c618e3d3e8 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x1c618e3d460 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e35c38 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e35cd8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1c618e35d40 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1c618e35da8 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1c618e35e10 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e35e98 prev 0x1c618e35c38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1c618e35980 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x1c618e35a00 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x1c618e35a80 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x1c618e35af8 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618e35f58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x1c618e36338 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1c618e36120 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x1c618e361a0 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x1c618e36218 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618e363f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x1c618e3d860 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1c618e36518 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1c618e36590 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e36610 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x1c618e3dc30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1c618e3da40 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x1c618e3dac0 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x1c618e3dce0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e3e0f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1c618e3de28 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1c618e3dea0 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e3df20 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x1c618e3e4c0 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1c618e3e560 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1c618e3e5c8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1c618e3e640 prev 0x1c618e3e4c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x1c618e3e2d0 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x1c618e3e350 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x1c618e3e6f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e38a80 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1c618e38870 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1c618e388e8 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e38968 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x1c618e38da8 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1c618e38e48 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1c618e38eb0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1c618e38f28 prev 0x1c618e38da8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x1c618e38c28 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x1c618e38ca8 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x1c618e38fd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e39310 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x1c618e393b0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e39418 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1c618e39490 prev 0x1c618e39310 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x1c618e39120 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x1c618e391a0 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x1c618e37760 <line:121:32> col:32 implicit strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x1c618e37800 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1c618e37870 prev 0x1c618e37760 <col:16, col:63> col:32 strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x1c618e39570 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x1c618e37b68 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1c618e37948 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1c618e379c0 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e37db8 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x1c618e37c48 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x1c618e37cc0 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1c618e380e8 <line:131:1, line:133:1>
|   `-ReturnStmt 0x1c618e380d8 <line:132:5, col:51>
|     `-ConditionalOperator 0x1c618e380a8 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x1c618e37f18 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x1c618e37ef8 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x1c618e37ec8 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1c618e37e80 <col:13> 'const char *' lvalue ParmVar 0x1c618e37c48 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x1c618e37ee0 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x1c618e37ea0 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x1c618e38090 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1c618e37f38 <col:24> 'int' 0
|       `-CallExpr 0x1c618e38030 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1c618e38018 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1c618e37f60 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x1c618e37b68 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x1c618e38060 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1c618e37f80 <col:36> 'const char *' lvalue ParmVar 0x1c618e37c48 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x1c618e38078 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1c618e37fa0 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x1c618e37cc0 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e383c0 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1c618e38118 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x1c618e38190 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1c618e38210 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x1c618e38288 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1c618e39780 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e39820 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1c618e39888 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1c618e398f0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e39970 prev 0x1c618e39780 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1c618e384b0 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x1c618e38530 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1c618e385a8 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e39ba8 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x1c618e39a58 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x1c618e39e70 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1c618e39f10 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e39f78 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1c618e39ff0 prev 0x1c618e39e70 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1c618e39c80 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x1c618e39d00 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x1c618e3a250 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1c618e3a0d0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1c618e3a150 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1c618e3a4b0 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1c618e3a330 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1c618e3a3b0 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1c618e8d098 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1c618e3a590 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e3a610 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1c618e3a688 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e8d300 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1c618e8d180 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x1c618e8d200 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1c618e8d5f8 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1c618e8d3e0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e8d460 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1c618e8d4d8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e8d860 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1c618e8d6e0 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x1c618e8d760 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x1c618e8db58 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1c618e8d940 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e8d9c0 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x1c618e8da38 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e8bfa0 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1c618e8dc40 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e8dcc0 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1c618e8dd38 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e8c400 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618e8c088 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e8c108 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1c618e8c180 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e8c1f8 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e8c708 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1c618e8c4f0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e8c570 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1c618e8c5e8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e8caa0 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618e8c7f0 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e8c870 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x1c618e8c8e8 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e8c960 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e8cdb8 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1c618e8ce58 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e8cec0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1c618e8dfc0 prev 0x1c618e8cdb8 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1c618e8cb90 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1c618e8cc10 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x1c618e8e280 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1c618e8e1a0 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x1c618e8e328 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e8e700 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x1c618e8e470 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x1c618e8e4e8 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e8e568 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x1c618e8ea18 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x1c618e8eab8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1c618e8eb28 prev 0x1c618e8ea18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x1c618e8e8e0 <col:90> col:93 'int'
| `-DeprecatedAttr 0x1c618e8ebd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e86f50 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1c618e8ed18 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x1c618e8ed90 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e8ee10 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x1c618e87258 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1c618e87038 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1c618e870b0 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e87548 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1c618e873f8 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1c618e875f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e87a00 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618e87738 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1c618e877b0 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e87828 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e87dd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1c618e87ba8 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1c618e87c20 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1c618e87e80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e8a3f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1c618e8a080 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x1c618e8a0f8 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1c618e8a178 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x1c618e8a1f0 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1c618e8a878 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e8a918 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1c618e8a980 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e8a9e8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e8aa68 prev 0x1c618e8a878 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1c618e8a5a8 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x1c618e8a628 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x1c618e8a6a0 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618e8ab20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e8ae80 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e8efd0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1c618e8f038 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e8f0a0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e8f120 prev 0x1c618e8ae80 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1c618e8ac68 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e8ace8 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x1c618e8ad60 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e8f420 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1c618e8f208 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e8f288 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x1c618e8f300 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e8f7b8 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618e8f508 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e8f588 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1c618e8f600 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e8f678 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e8fb50 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1c618e8f8a8 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1c618e8f920 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1c618e8f9a0 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x1c618e8fa18 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1c618e8ff18 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e87f60 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1c618e87fc8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e88030 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e880b0 prev 0x1c618e8ff18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1c618e8fd00 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x1c618e8fd80 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x1c618e8fdf8 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618e88168 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e88628 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x1c618e882b0 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x1c618e88328 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618e883a8 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x1c618e88420 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e88aa8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1c618e887d8 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x1c618e88858 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x1c618e888d0 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618e88b60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e88e90 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1c618e8ffe0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e90048 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1c618e900c0 prev 0x1c618e88e90 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1c618e88ca8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1c618e88d28 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x1c618e90320 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1c618e903c0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e90428 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1c618e904a0 prev 0x1c618e90320 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1c618e901a0 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1c618e90220 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x1c618e90660 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x1c618e90580 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x1c618e908b0 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1c618e90950 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e909b8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1c618e90a30 prev 0x1c618e908b0 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1c618e90738 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x1c618e907b8 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x1c618e90c90 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1c618e90d30 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e90d98 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1c618e90e10 prev 0x1c618e90c90 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1c618e90b10 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x1c618e90b90 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x1c618e890f0 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1c618e89190 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1c618e891f8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1c618e89270 prev 0x1c618e890f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x1c618e88f70 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x1c618e88ff0 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x1c618e89320 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e89708 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x1c618e89468 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x1c618e894e8 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x1c618e89568 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x1c618e89960 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1c618e897f0 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1c618e89868 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e89be0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1c618e89b00 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1c618e89c88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e91058 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618e89dd0 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1c618e89e48 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e89ec0 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e91378 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1c618e91200 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1c618e91278 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1c618e91428 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e91840 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e918e0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1c618e91948 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618e919b0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e91a30 prev 0x1c618e91840 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1c618e91570 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1c618e915f0 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x1c618e91668 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e91e88 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618e91b18 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1c618e91b98 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x1c618e91c10 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e91c88 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e92198 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x1c618e92238 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1c618e922a8 prev 0x1c618e92198 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x1c618e920b8 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x1c618e92350 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x1c618e92698 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1c618e92518 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e92598 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1c618e92748 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x1c618e92a90 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1c618e92910 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e92990 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1c618e92b40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x1c618e92de8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1c618e92d08 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1c618e92e90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x1c618e8b260 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1c618e8b048 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x1c618e8b0c8 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x1c618e8b140 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618e8b318 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x1c618e8b6f8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1c618e8b4e0 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x1c618e8b560 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x1c618e8b5d8 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618e8b7b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x1c618e8ba58 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1c618e8b978 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1c618e8bb00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x1c618e8be48 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1c618e8bcc8 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x1c618e8bd48 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x1c618e8bef8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x1c618e992d0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1c618e991f0 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1c618e99378 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x1c618e99610 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x1c618e99498 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x1c618e999a0 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1c618e996e0 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1c618e99758 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e997d0 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x1c618e99d58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618e99b40 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1c618e99bb8 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1c618e99e08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e9a188 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x1c618e9a228 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1c618e9a290 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x1c618e9a308 prev 0x1c618e9a188 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x1c618e99f48 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618e99fc0 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1c618e9a600 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x1c618e9a6a0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1c618e9a708 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1c618e9a780 prev 0x1c618e9a600 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x1c618e9a3e0 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1c618e9a458 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x1c618e9aa60 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1c618e9a858 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1c618e9a8d0 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e9a948 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x1c618e9ad70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618e9ac00 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1c618e9ac78 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1c618e9ae20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e93118 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618e9af60 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618e9afd8 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x1c618e93360 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x1c618e93400 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1c618e93470 prev 0x1c618e93360 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x1c618e931f0 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x1c618e93758 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618e93540 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1c618e935b8 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e939a0 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x1c618e93830 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x1c618e938a8 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1c618e93d38 <line:306:1, line:308:1>
|   `-ReturnStmt 0x1c618e93d28 <line:307:5, col:56>
|     `-ConditionalOperator 0x1c618e93cf8 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x1c618e93b60 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x1c618e93b40 <col:13, line:36:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x1c618e93b10 <line:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1c618e93a68 <col:13> 'const wchar_t *' lvalue ParmVar 0x1c618e93830 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x1c618e93b28 <line:36:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x1c618e93af0 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x1c618e93ac8 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x1c618e93a88 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x1c618e93ce0 <line:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1c618e93b80 <col:29> 'int' 0
|       `-CallExpr 0x1c618e93c80 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1c618e93c68 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1c618e93ba8 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x1c618e93758 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x1c618e93cb0 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x1c618e93bc8 <col:41> 'const wchar_t *' lvalue ParmVar 0x1c618e93830 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x1c618e93cc8 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1c618e93be8 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x1c618e938a8 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e94108 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1c618e93d60 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1c618e93dd8 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1c618e93e50 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1c618e93ec8 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1c618e94570 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618e942b0 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1c618e94328 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1c618e943a0 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618e94628 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e94a38 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x1c618e94ad8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x1c618e94b40 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1c618e94ba8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618e94c28 prev 0x1c618e94a38 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x1c618e94768 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618e947e0 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1c618e94858 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e95030 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1c618e94d08 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1c618e94d80 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1c618e94df8 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1c618e94e70 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1c618e953e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618e951d8 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1c618e95250 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1c618e952c8 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618e95498 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e957f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618e955d8 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618e95650 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x1c618e95a40 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1c618e958d0 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618e95948 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1c618e95c88 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618e95b18 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618e95b90 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x1c618e95ed0 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618e95d60 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618e95dd8 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x1c618e9c2e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618e9c170 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1c618e9c1e8 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x1c618e9c390 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e9c7f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1c618e9c4d0 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x1c618e9c548 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x1c618e9c620 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x1c618e9cb10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x1c618e9c998 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x1c618e9cbb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e9cfc0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1c618e9ccf8 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x1c618e9cd70 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e9cdf0 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x1c618e9d290 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1c618e9d1b8 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1c618e9d338 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e9d700 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1c618e9d478 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x1c618e9d4f0 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e9d568 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1c618e9d958 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618e9d7e0 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1c618e9d858 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x1c618e9dcf8 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1c618e9da30 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618e9daa8 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1c618e9db20 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e9dfe8 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618e9ddd8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618e9de50 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1c618e9dec8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e963e0 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618e96068 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618e960e0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1c618e96158 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e961d0 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618e96838 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x1c618e964c8 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1c618e96540 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618e965b8 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1c618e96630 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e96ca0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1c618e969e0 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x1c618e96a58 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1c618e96ad0 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618e96d58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e97050 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x1c618e96e98 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x1c618e973e0 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x1c618e97120 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1c618e97198 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e97210 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x1c618e97798 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1c618e97580 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x1c618e975f8 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1c618e97848 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618e97ba8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618e97988 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x1c618e97a00 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618e97e18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1c618e97d40 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1c618e97ec0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ea23c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ea2100 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x1c618ea2178 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ea21f0 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ea2778 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1c618ea2560 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1c618ea25d8 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1c618ea2828 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ea2ad8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618ea2968 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x1c618ea29e0 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ea2d48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1c618ea2c70 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1c618ea2df0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ea3150 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ea2f30 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x1c618ea2fa8 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ea3020 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ea3460 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1c618ea32f0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1c618ea3368 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1c618ea3510 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ea3910 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618ea3650 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1c618ea36c8 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1c618ea3740 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ea3d58 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ea39f0 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1c618ea3a68 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea3ae0 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ea3b58 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ea3fb8 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618ea3e40 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1c618ea3eb8 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x1c618ea42b8 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1c618ea4090 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea4120 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1c618ea4198 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ea4510 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618ea4398 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1c618ea4410 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x1c618ea47f8 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1c618ea45e8 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea4660 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1c618ea46d8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ea4ae8 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618ea48d8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea4950 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1c618ea49c8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ea4e70 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ea4bc8 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea4c40 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea4cb8 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ea4d30 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ea0128 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618ea4f58 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea4fd0 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1c618ea5048 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ea04b0 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ea0208 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea0280 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea02f8 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ea0370 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ea0710 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1c618ea0638 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1c618ea07b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x1c618ea0af0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618ea0978 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea09f0 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1c618ea0ba0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x1c618ea0f70 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618ea0d60 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea0dd8 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1c618ea0e50 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618ea1028 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x1c618ea54b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1c618ea52a8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1c618ea5320 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1c618ea5398 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618ea5568 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x1c618ea5800 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1c618ea5728 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1c618ea58a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x1c618ea5bd8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1c618ea5a68 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x1c618ea5ae0 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1c618ea5c88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x1c618ea5f20 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1c618ea5e48 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1c618ea5fc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x1c618e9e248 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1c618e9e170 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1c618e9e2f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x1c618e9e628 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618e9e4b0 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1c618e9e528 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1c618e9e6d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-TypedefDecl 0x1c618e9e9d8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:52:1, col:24> col:24 referenced _onexit_t 'int (*)(void) __attribute__((cdecl))'
| `-PointerType 0x1c618e9e970 'int (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x1c618e9e910 'int (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x1c618e9e8c0 'int (void)' sugar
|     | `-FunctionProtoType 0x1c618e9e890 'int (void)' cdecl
|     |   `-BuiltinType 0x1c6172ec760 'int'
|     `-ParenType 0x1c618e9e8c0 'int (void)' sugar
|       `-FunctionProtoType 0x1c618e9e890 'int (void)' cdecl
|         `-BuiltinType 0x1c6172ec760 'int'
|-RecordDecl 0x1c618e9ea30 <line:75:9, line:78:1> line:75:16 struct _div_t definition
| |-MaxFieldAlignmentAttr 0x1c618e9eaf0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1c618e9eb68 <line:76:9, col:13> col:13 quot 'int'
| `-FieldDecl 0x1c618e9ebd8 <line:77:9, col:13> col:13 rem 'int'
|-TypedefDecl 0x1c618e9ec88 <line:75:1, line:78:3> col:3 referenced div_t 'struct _div_t':'struct _div_t'
| `-ElaboratedType 0x1c618e9ec30 'struct _div_t' sugar
|   `-RecordType 0x1c618e9ead0 'struct _div_t'
|     `-Record 0x1c618e9ea30 '_div_t'
|-RecordDecl 0x1c618e9ecf8 <line:80:9, line:83:1> line:80:16 struct _ldiv_t definition
| |-MaxFieldAlignmentAttr 0x1c618e9edb0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1c618e9ee28 <line:81:9, col:14> col:14 quot 'long'
| `-FieldDecl 0x1c618e9ee98 <line:82:9, col:14> col:14 rem 'long'
|-TypedefDecl 0x1c618e9ef48 <line:80:1, line:83:3> col:3 referenced ldiv_t 'struct _ldiv_t':'struct _ldiv_t'
| `-ElaboratedType 0x1c618e9eef0 'struct _ldiv_t' sugar
|   `-RecordType 0x1c618e9ed90 'struct _ldiv_t'
|     `-Record 0x1c618e9ecf8 '_ldiv_t'
|-RecordDecl 0x1c618e9efb8 <line:85:9, line:88:1> line:85:16 struct _lldiv_t definition
| |-MaxFieldAlignmentAttr 0x1c618e9f070 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1c618eb0038 <line:86:9, col:19> col:19 quot 'long long'
| `-FieldDecl 0x1c618eb00a8 <line:87:9, col:19> col:19 rem 'long long'
|-TypedefDecl 0x1c618eb0158 <line:85:1, line:88:3> col:3 referenced lldiv_t 'struct _lldiv_t':'struct _lldiv_t'
| `-ElaboratedType 0x1c618eb0100 'struct _lldiv_t' sugar
|   `-RecordType 0x1c618e9f050 'struct _lldiv_t'
|     `-Record 0x1c618e9efb8 '_lldiv_t'
|-RecordDecl 0x1c618eb01f0 <line:103:9, line:105:1> line:103:9 struct definition
| |-MaxFieldAlignmentAttr 0x1c618eb02b0 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x1c618eb03b0 <line:104:5, col:24> col:19 ld 'unsigned char [10]'
|-TypedefDecl 0x1c618eb0468 <line:103:1, line:105:3> col:3 referenced _LDOUBLE 'struct _LDOUBLE':'_LDOUBLE'
| `-ElaboratedType 0x1c618eb0410 'struct _LDOUBLE' sugar
|   `-RecordType 0x1c618eb0290 '_LDOUBLE'
|     `-Record 0x1c618eb01f0 ''
|-RecordDecl 0x1c618eb04d8 <line:122:9, line:124:1> line:122:9 struct definition
| `-FieldDecl 0x1c618eb05a8 <line:123:9, col:16> col:16 x 'double'
|-TypedefDecl 0x1c618eb0658 <line:122:1, line:124:3> col:3 referenced _CRT_DOUBLE 'struct _CRT_DOUBLE':'_CRT_DOUBLE'
| `-ElaboratedType 0x1c618eb0600 'struct _CRT_DOUBLE' sugar
|   `-RecordType 0x1c618eb0570 '_CRT_DOUBLE'
|     `-Record 0x1c618eb04d8 ''
|-RecordDecl 0x1c618eb06c8 <line:126:9, line:128:1> line:126:9 struct definition
| `-FieldDecl 0x1c618eb0798 <line:127:5, col:11> col:11 f 'float'
|-TypedefDecl 0x1c618eb0848 <line:126:1, line:128:3> col:3 referenced _CRT_FLOAT 'struct _CRT_FLOAT':'_CRT_FLOAT'
| `-ElaboratedType 0x1c618eb07f0 'struct _CRT_FLOAT' sugar
|   `-RecordType 0x1c618eb0760 '_CRT_FLOAT'
|     `-Record 0x1c618eb06c8 ''
|-RecordDecl 0x1c618eb08b8 <line:134:9, line:139:1> line:134:9 struct definition
| `-FieldDecl 0x1c618eb0988 <line:138:9, col:21> col:21 x 'long double'
|-TypedefDecl 0x1c618eb0a38 <line:134:1, line:139:3> col:3 _LONGDOUBLE 'struct _LONGDOUBLE':'_LONGDOUBLE'
| `-ElaboratedType 0x1c618eb09e0 'struct _LONGDOUBLE' sugar
|   `-RecordType 0x1c618eb0950 '_LONGDOUBLE'
|     `-Record 0x1c618eb08b8 ''
|-RecordDecl 0x1c618eb0ad0 <line:144:9, line:146:1> line:144:9 struct definition
| |-MaxFieldAlignmentAttr 0x1c618eb0b90 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x1c618eb0c90 <line:145:5, col:26> col:19 ld12 'unsigned char [12]'
|-TypedefDecl 0x1c618eb0d48 <line:144:1, line:146:3> col:3 _LDBL12 'struct _LDBL12':'_LDBL12'
| `-ElaboratedType 0x1c618eb0cf0 'struct _LDBL12' sugar
|   `-RecordType 0x1c618eb0b70 '_LDBL12'
|     `-Record 0x1c618eb0ad0 ''
|-VarDecl 0x1c618eb0dd0 <line:170:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x1c618eb0f50 <line:175:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1c618ead148 <line:176:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x1c618eacfe8 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-TypedefDecl 0x1c618ead390 <line:215:1, col:24> col:24 referenced _purecall_handler 'void (*)(void) __attribute__((cdecl))'
| `-PointerType 0x1c618ead330 'void (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x1c618ead2d0 'void (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x1c618ead280 'void (void)' sugar
|     | `-FunctionProtoType 0x1c618dfec90 'void (void)' cdecl
|     |   `-BuiltinType 0x1c6172ec6c0 'void'
|     `-ParenType 0x1c618ead280 'void (void)' sugar
|       `-FunctionProtoType 0x1c618dfec90 'void (void)' cdecl
|         `-BuiltinType 0x1c6172ec6c0 'void'
|-FunctionDecl 0x1c618ead590 <line:218:9, col:92> col:35 _set_purecall_handler '_purecall_handler (_purecall_handler) __attribute__((cdecl))':'_purecall_handler (_purecall_handler)'
| `-ParmVarDecl 0x1c618ead420 <col:66, col:84> col:84 _Handler '_purecall_handler':'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1c618ead7a8 <line:219:9, col:61> col:35 _get_purecall_handler '_purecall_handler (void) __attribute__((cdecl))':'_purecall_handler (void)'
|-TypedefDecl 0x1c618eadbf8 <line:235:1, col:24> col:24 referenced _invalid_parameter_handler 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
| `-PointerType 0x1c618eadb70 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|   `-AttributedType 0x1c618eadb10 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))' sugar
|     |-ParenType 0x1c618eadac0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|     | `-FunctionProtoType 0x1c618e26710 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|     |   |-BuiltinType 0x1c6172ec6c0 'void'
|     |   |-PointerType 0x1c618dff060 'const wchar_t *'
|     |   | `-QualType 0x1c618dff011 'const wchar_t' const
|     |   |   `-TypedefType 0x1c618dff010 'wchar_t' sugar
|     |   |     |-Typedef 0x1c618dfe900 'wchar_t'
|     |   |     `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|     |   |-PointerType 0x1c618dff060 'const wchar_t *'
|     |   | `-QualType 0x1c618dff011 'const wchar_t' const
|     |   |   `-TypedefType 0x1c618dff010 'wchar_t' sugar
|     |   |     |-Typedef 0x1c618dfe900 'wchar_t'
|     |   |     `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|     |   |-PointerType 0x1c618dff060 'const wchar_t *'
|     |   | `-QualType 0x1c618dff011 'const wchar_t' const
|     |   |   `-TypedefType 0x1c618dff010 'wchar_t' sugar
|     |   |     |-Typedef 0x1c618dfe900 'wchar_t'
|     |   |     `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|     |   |-BuiltinType 0x1c6172ec800 'unsigned int'
|     |   `-TypedefType 0x1c618dff270 'uintptr_t' sugar
|     |     |-Typedef 0x1c6172ed4e0 'uintptr_t'
|     |     `-BuiltinType 0x1c6172ec840 'unsigned long long'
|     `-ParenType 0x1c618eadac0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|       `-FunctionProtoType 0x1c618e26710 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|         |-BuiltinType 0x1c6172ec6c0 'void'
|         |-PointerType 0x1c618dff060 'const wchar_t *'
|         | `-QualType 0x1c618dff011 'const wchar_t' const
|         |   `-TypedefType 0x1c618dff010 'wchar_t' sugar
|         |     |-Typedef 0x1c618dfe900 'wchar_t'
|         |     `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|         |-PointerType 0x1c618dff060 'const wchar_t *'
|         | `-QualType 0x1c618dff011 'const wchar_t' const
|         |   `-TypedefType 0x1c618dff010 'wchar_t' sugar
|         |     |-Typedef 0x1c618dfe900 'wchar_t'
|         |     `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|         |-PointerType 0x1c618dff060 'const wchar_t *'
|         | `-QualType 0x1c618dff011 'const wchar_t' const
|         |   `-TypedefType 0x1c618dff010 'wchar_t' sugar
|         |     |-Typedef 0x1c618dfe900 'wchar_t'
|         |     `-BuiltinType 0x1c6172ec7e0 'unsigned short'
|         |-BuiltinType 0x1c6172ec800 'unsigned int'
|         `-TypedefType 0x1c618dff270 'uintptr_t' sugar
|           |-Typedef 0x1c6172ed4e0 'uintptr_t'
|           `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-FunctionDecl 0x1c618eaddf0 <line:238:9, col:119> col:44 _set_invalid_parameter_handler '_invalid_parameter_handler (_invalid_parameter_handler) __attribute__((cdecl))':'_invalid_parameter_handler (_invalid_parameter_handler)'
| `-ParmVarDecl 0x1c618eadc80 <col:84, col:111> col:111 _Handler '_invalid_parameter_handler':'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|-FunctionDecl 0x1c618ea8fd8 <line:239:9, col:79> col:44 _get_invalid_parameter_handler '_invalid_parameter_handler (void) __attribute__((cdecl))':'_invalid_parameter_handler (void)'
|-FunctionDecl 0x1c618ea91c0 <line:245:9, col:41> col:30 _errno 'int *(void) __attribute__((cdecl))':'int *(void)' extern
|-FunctionDecl 0x1c618ea9400 <line:248:1, col:43> col:17 _set_errno 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x1c618ea9290 <col:33, col:37> col:37 _Value 'int'
|-FunctionDecl 0x1c618ea9650 <line:249:1, col:46> col:17 _get_errno 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x1c618ea94d8 <col:34, col:40> col:40 _Value 'int *'
|-FunctionDecl 0x1c618ea9870 <line:252:9, col:48> col:33 __doserrno 'unsigned long *(void) __attribute__((cdecl))':'unsigned long *(void)'
|-FunctionDecl 0x1c618ea9ab0 <line:255:1, col:56> col:17 _set_doserrno 'errno_t (unsigned long) __attribute__((cdecl))':'errno_t (unsigned long)'
| `-ParmVarDecl 0x1c618ea9940 <col:36, col:50> col:50 _Value 'unsigned long'
|-FunctionDecl 0x1c618ea9d00 <line:256:1, col:59> col:17 _get_doserrno 'errno_t (unsigned long *) __attribute__((cdecl))':'errno_t (unsigned long *)'
| `-ParmVarDecl 0x1c618ea9b88 <col:37, col:53> col:53 _Value 'unsigned long *'
|-FunctionDecl 0x1c618eb1030 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:259:77> col:59 __sys_errlist 'char **(void) __attribute__((cdecl))':'char **(void)'
| `-DeprecatedAttr 0x1c618eb10d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618eb1390 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:262:72> col:57 __sys_nerr 'int *(void) __attribute__((cdecl))':'int *(void)'
| `-DeprecatedAttr 0x1c618eb1430 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x1c618eb1578 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:288:9, col:20> col:20 __argc 'int' extern
|-VarDecl 0x1c618eb1610 <line:289:9, col:24> col:24 __argv 'char **' extern
|-VarDecl 0x1c618eb16a8 <line:290:9, col:27> col:27 __wargv 'wchar_t **' extern
|-VarDecl 0x1c618eb1740 <line:306:9, col:24> col:24 _environ 'char **' extern
|-VarDecl 0x1c618eb17d8 <line:307:9, col:27> col:27 _wenviron 'wchar_t **' extern
|-VarDecl 0x1c618eb1930 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:311:68> col:68 _pgmptr 'char *' extern
| `-DeprecatedAttr 0x1c618eb1998 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x1c618eb1b98 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:312:72> col:72 _wpgmptr 'wchar_t *' extern
| `-DeprecatedAttr 0x1c618eb1c00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618eb1ec0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:339:1, col:61> col:17 _get_pgmptr 'errno_t (char **) __attribute__((cdecl))':'errno_t (char **)'
| `-ParmVarDecl 0x1c618eb1d48 <col:47, col:55> col:55 _Value 'char **'
|-FunctionDecl 0x1c618eb8180 <line:340:1, col:65> col:17 _get_wpgmptr 'errno_t (wchar_t **) __attribute__((cdecl))':'errno_t (wchar_t **)'
| `-ParmVarDecl 0x1c618eb1f98 <col:48, col:59> col:59 _Value 'wchar_t **'
|-VarDecl 0x1c618eb8318 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:346:64> col:64 _fmode 'int' extern
| `-DeprecatedAttr 0x1c618eb8380 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618eb85a0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:353:9, col:50> col:25 _set_fmode 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x1c618eb84c8 <col:41, col:45> col:45 _Mode 'int'
|-FunctionDecl 0x1c618eb8750 <line:354:9, col:54> col:25 _get_fmode 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x1c618eb8678 <col:42, col:48> col:48 _PMode 'int *'
|-FunctionDecl 0x1c618eb89a0 <line:376:43> col:43 implicit exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x1c618eb8a40 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1c618eb8ab0 prev 0x1c618eb89a0 <col:9, col:62> col:43 exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x1c618eb8828 <col:53, col:57> col:57 _Code 'int'
|-FunctionDecl 0x1c618eb8c60 <line:378:43> col:43 implicit _exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x1c618eb8d00 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1c618eb8d70 prev 0x1c618eb8c60 <col:9, col:63> col:43 _exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x1c618eb8b88 <col:54, col:58> col:58 _Code 'int'
|-FunctionDecl 0x1c618eb8ef8 <line:379:43> col:43 implicit abort 'void (void) __attribute__((noreturn))' extern
|-FunctionDecl 0x1c618eb8f98 prev 0x1c618eb8ef8 <col:9, col:53> col:43 abort 'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1c618eb7250 <line:382:9, col:99> col:30 _set_abort_behavior 'unsigned int (unsigned int, unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int, unsigned int)'
| |-ParmVarDecl 0x1c618eb7060 <col:55, col:68> col:68 _Flags 'unsigned int'
| `-ParmVarDecl 0x1c618eb70e0 <col:81, col:94> col:94 _Mask 'unsigned int'
|-FunctionDecl 0x1c618eb7448 <line:384:19> col:19 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x1c618eb74e8 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1c618eb7558 <col:19> Implicit
| `-ConstAttr 0x1c618eb75b0 <col:19> Implicit
|-FunctionDecl 0x1c618eb75d8 prev 0x1c618eb7448 <col:1, col:34> col:19 abs 'int (int)'
| |-ParmVarDecl 0x1c618eb7330 <col:28, col:32> col:32 _X 'int'
| |-NoThrowAttr 0x1c618eb76c8 <col:19> Inherited Implicit
| `-ConstAttr 0x1c618eb76f0 <col:19> Inherited Implicit
|-FunctionDecl 0x1c618eb7878 <line:385:19> col:19 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x1c618eb7918 <<invalid sloc>> <invalid sloc> 'long'
| |-NoThrowAttr 0x1c618eb7988 <col:19> Implicit
| `-ConstAttr 0x1c618eb79e0 <col:19> Implicit
|-FunctionDecl 0x1c618eb7a08 prev 0x1c618eb7878 <col:1, col:36> col:19 labs 'long (long)'
| |-ParmVarDecl 0x1c618eb7730 <col:29, col:34> col:34 _X 'long'
| |-NoThrowAttr 0x1c618eb7af8 <col:19> Inherited Implicit
| `-ConstAttr 0x1c618eb7b20 <col:19> Inherited Implicit
|-FunctionDecl 0x1c618eb7ca8 <line:386:19> col:19 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x1c618eb7d48 <<invalid sloc>> <invalid sloc> 'long long'
| |-NoThrowAttr 0x1c618eb7db8 <col:19> Implicit
| `-ConstAttr 0x1c618eb7e10 <col:19> Implicit
|-FunctionDecl 0x1c618eb7e38 prev 0x1c618eb7ca8 <col:1, col:42> col:19 llabs 'long long (long long)'
| |-ParmVarDecl 0x1c618eb7b60 <col:30, col:40> col:40 _X 'long long'
| |-NoThrowAttr 0x1c618eb7f28 <col:19> Inherited Implicit
| `-ConstAttr 0x1c618eb7f50 <col:19> Inherited Implicit
|-FunctionDecl 0x1c618eb3020 <line:388:9, col:42> col:28 _abs64 'long long (long long) __attribute__((cdecl))':'long long (long long)'
| `-ParmVarDecl 0x1c618eb7f90 <col:35> col:42 'long long'
|-FunctionDecl 0x1c618eb3318 <line:426:9, col:53> col:24 atexit 'int (void (*)(void) __attribute__((cdecl))) __attribute__((cdecl))':'int (void (*)(void) __attribute__((cdecl)))'
| `-ParmVarDecl 0x1c618eb31b8 <col:31, col:45> col:46 'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1c618eb3538 <line:428:24, col:71> col:40 atof 'double (const char *) __attribute__((cdecl))':'double (const char *)'
| `-ParmVarDecl 0x1c618eb33f0 <col:52, col:64> col:64 _String 'const char *'
|-FunctionDecl 0x1c618eb3830 <line:429:24, col:102> col:40 _atof_l 'double (const char *, _locale_t) __attribute__((cdecl))':'double (const char *, _locale_t)'
| |-ParmVarDecl 0x1c618eb3610 <col:55, col:67> col:67 _String 'const char *'
| `-ParmVarDecl 0x1c618eb3688 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618eb3a58 <line:430:43, col:86> col:58 atoi 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1c618eb3910 <col:70, col:82> col:82 _Str 'const char *'
|-FunctionDecl 0x1c618eb3d50 <line:431:24, col:98> col:39 _atoi_l 'int (const char *, _locale_t) __attribute__((cdecl))':'int (const char *, _locale_t)'
| |-ParmVarDecl 0x1c618eb3b30 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1c618eb3ba8 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618eb3f78 <line:432:24, col:67> col:39 atol 'long (const char *) __attribute__((cdecl))':'long (const char *)'
| `-ParmVarDecl 0x1c618eb3e30 <col:51, col:63> col:63 _Str 'const char *'
|-FunctionDecl 0x1c618eb4280 <line:433:24, col:98> col:39 _atol_l 'long (const char *, _locale_t) __attribute__((cdecl))':'long (const char *, _locale_t)'
| |-ParmVarDecl 0x1c618eb4060 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1c618eb40d8 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618eb44a8 <line:434:24, col:71> col:42 atoll 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x1c618eb4360 <col:55, col:67> col:67 _Str 'const char *'
|-FunctionDecl 0x1c618eb47a0 <line:435:24, col:102> col:42 _atoll_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x1c618eb4580 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x1c618eb45f8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618eb2070 <line:439:24, line:441:97> line:439:39 bsearch_s 'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x1c618eb4880 <col:54, col:67> col:67 _Key 'const void *'
| |-ParmVarDecl 0x1c618eb4900 <col:124, col:137> col:137 _Base 'const void *'
| |-ParmVarDecl 0x1c618eb4978 <line:440:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eb49f0 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eb4d50 <line:441:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x1c618eb4dd0 <col:82, col:89> col:89 _Context 'void *'
|-FunctionDecl 0x1c618eb27f8 <line:443:24, line:445:72> line:443:39 bsearch 'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x1c618eb2170 <col:52, col:65> col:65 _Key 'const void *'
| |-ParmVarDecl 0x1c618eb21f0 <col:122, col:135> col:135 _Base 'const void *'
| |-ParmVarDecl 0x1c618eb2268 <line:444:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eb22e0 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618eb25b8 <line:445:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x1c618eb2f00 <line:448:9, line:450:96> line:448:22 qsort_s 'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x1c618eb28f0 <col:85, col:92> col:92 _Base 'void *'
| |-ParmVarDecl 0x1c618eb2968 <line:449:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eb29e0 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eb2c48 <line:450:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x1c618eb2cc8 <col:82, col:88> col:88 _Context 'void *'
|-FunctionDecl 0x1c618eb9558 <line:452:9, line:454:72> line:452:22 qsort 'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x1c618eb9080 <col:84, col:91> col:91 _Base 'void *'
| |-ParmVarDecl 0x1c618eb90f8 <line:453:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eb9170 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618eb9350 <line:454:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x1c618eb9798 <line:456:47> col:47 implicit _byteswap_ushort 'unsigned short (unsigned short)' extern
| |-ParmVarDecl 0x1c618eb9838 <<invalid sloc>> <invalid sloc> 'unsigned short'
| |-NoThrowAttr 0x1c618eb98a8 <col:47> Implicit
| `-ConstAttr 0x1c618eb9900 <col:47> Implicit
|-FunctionDecl 0x1c618eb9928 prev 0x1c618eb9798 <col:24, col:90> col:47 _byteswap_ushort 'unsigned short (unsigned short)'
| |-ParmVarDecl 0x1c618eb9648 <col:69, col:84> col:84 _Short 'unsigned short'
| |-NoThrowAttr 0x1c618eb9a18 <col:47> Inherited Implicit
| `-ConstAttr 0x1c618eb9a40 <col:47> Inherited Implicit
|-FunctionDecl 0x1c618eb9bc8 <line:457:47> col:47 implicit _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x1c618eb9c68 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x1c618eb9cd8 <col:47> Implicit
| `-ConstAttr 0x1c618eb9d30 <col:47> Implicit
|-FunctionDecl 0x1c618eb9d58 prev 0x1c618eb9bc8 <col:24, col:88> col:47 _byteswap_ulong 'unsigned long (unsigned long)'
| |-ParmVarDecl 0x1c618eb9a80 <col:69, col:83> col:83 _Long 'unsigned long'
| |-NoThrowAttr 0x1c618eb9e48 <col:47> Inherited Implicit
| `-ConstAttr 0x1c618eb9e70 <col:47> Inherited Implicit
|-FunctionDecl 0x1c618eb5040 <line:458:49> col:49 implicit _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x1c618eb50e0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x1c618eb5150 <col:49> Implicit
| `-ConstAttr 0x1c618eb51a8 <col:49> Implicit
|-FunctionDecl 0x1c618eb51d0 prev 0x1c618eb5040 <col:24, col:94> col:49 _byteswap_uint64 'unsigned long long (unsigned long long)'
| |-ParmVarDecl 0x1c618eb9eb0 <col:71, col:88> col:88 _Int64 'unsigned long long'
| |-NoThrowAttr 0x1c618eb52c0 <col:49> Inherited Implicit
| `-ConstAttr 0x1c618eb52e8 <col:49> Inherited Implicit
|-FunctionDecl 0x1c618eb5568 <line:459:24, col:85> col:39 div 'div_t (int, int) __attribute__((cdecl))':'div_t (int, int)'
| |-ParmVarDecl 0x1c618eb5348 <col:48, col:52> col:52 _Numerator 'int'
| `-ParmVarDecl 0x1c618eb53c8 <col:69, col:73> col:73 _Denominator 'int'
|-FunctionDecl 0x1c618eb57e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:462:109> col:74 getenv 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1c618eb5708 <col:88, col:101> col:101 _VarName 'const char *'
| `-DeprecatedAttr 0x1c618eb5890 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618eb5da8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:464:28, col:177> col:44 getenv_s 'errno_t (size_t *, char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (size_t *, char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1c618eb5a28 <col:59, col:68> col:68 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x1c618eb5aa8 <col:110, col:117> col:117 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618eb5b20 <col:131, col:139> col:139 _DstSize 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1c618eb5ba0 <col:156, col:169> col:169 _VarName 'const char *'
|-FunctionDecl 0x1c618ec1220 <line:472:28, col:212> col:44 _dupenv_s 'errno_t (char **, size_t *, const char *) __attribute__((cdecl))':'errno_t (char **, size_t *, const char *)'
| |-ParmVarDecl 0x1c618eb5e98 <col:127, col:134> col:134 _PBuffer 'char **'
| |-ParmVarDecl 0x1c618eb5f10 <col:154, col:163> col:163 _PBufferSizeInBytes 'size_t *'
| `-ParmVarDecl 0x1c618eb5f90 <col:191, col:204> col:204 _VarName 'const char *'
|-FunctionDecl 0x1c618ec1688 <line:479:28, col:141> col:44 _itoa_s 'errno_t (int, char *, size_t, int) __attribute__((cdecl))':'errno_t (int, char *, size_t, int)'
| |-ParmVarDecl 0x1c618ec1308 <col:57, col:61> col:61 _Value 'int'
| |-ParmVarDecl 0x1c618ec1388 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618ec1400 <col:112, col:119> col:119 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ec1480 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x1c618ec1b08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:481:79 _itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x1c618ec1870 <col:91, col:96> col:96 _Value 'int'
| |-ParmVarDecl 0x1c618ec18f0 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1c618ec1970 <col:146, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x1c618ec1bc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618eba090 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:482:28, col:145> col:44 _i64toa_s 'errno_t (long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long long, char *, size_t, int)'
| |-ParmVarDecl 0x1c618ec1d08 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x1c618ec1d88 <col:95, col:102> col:102 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618ec1e00 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ec1e80 <col:135, col:139> col:139 _Radix 'int'
|-FunctionDecl 0x1c618eba4d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:483:140> col:59 _i64toa 'char *(long long, char *, int) __attribute__((cdecl))':'char *(long long, char *, int)'
| |-ParmVarDecl 0x1c618eba240 <col:72, col:80> col:80 _Val 'long long'
| |-ParmVarDecl 0x1c618eba2c0 <col:109, col:116> col:116 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618eba340 <col:130, col:134> col:134 _Radix 'int'
| `-DeprecatedAttr 0x1c618eba590 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ebaa58 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:484:28, col:155> col:44 _ui64toa_s 'errno_t (unsigned long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, char *, size_t, int)'
| |-ParmVarDecl 0x1c618eba6d8 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x1c618eba758 <col:105, col:112> col:112 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618eba7d0 <col:126, col:133> col:133 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618eba850 <col:145, col:149> col:149 _Radix 'int'
|-FunctionDecl 0x1c618ebaea8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:485:151> col:60 _ui64toa 'char *(unsigned long long, char *, int) __attribute__((cdecl))':'char *(unsigned long long, char *, int)'
| |-ParmVarDecl 0x1c618ebac08 <col:74, col:91> col:91 _Val 'unsigned long long'
| |-ParmVarDecl 0x1c618ebac88 <col:120, col:127> col:127 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618ebad08 <col:141, col:145> col:145 _Radix 'int'
| `-DeprecatedAttr 0x1c618ebaf60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ec01e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:486:24, col:75> col:40 _atoi64 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x1c618ec0108 <col:55, col:68> col:68 _String 'const char *'
|-FunctionDecl 0x1c618ec0438 <line:487:24, col:105> col:40 _atoi64_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x1c618ec02c0 <col:57, col:70> col:70 _String 'const char *'
| `-ParmVarDecl 0x1c618ec0338 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ec07b8 <line:488:24, col:136> col:40 _strtoi64 'long long (const char *, char **, int) __attribute__((cdecl))':'long long (const char *, char **, int)'
| |-ParmVarDecl 0x1c618ec0518 <col:57, col:70> col:70 _String 'const char *'
| |-ParmVarDecl 0x1c618ec0598 <col:104, col:112> col:112 _EndPtr 'char **'
| `-ParmVarDecl 0x1c618ec0618 <col:126, col:130> col:130 _Radix 'int'
|-FunctionDecl 0x1c618ec0c20 <line:489:24, col:166> col:40 _strtoi64_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1c618ec08a0 <col:59, col:72> col:72 _String 'const char *'
| |-ParmVarDecl 0x1c618ec0920 <col:106, col:114> col:114 _EndPtr 'char **'
| |-ParmVarDecl 0x1c618ec09a0 <col:128, col:132> col:132 _Radix 'int'
| `-ParmVarDecl 0x1c618ec0a18 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ec0fa8 <line:490:24, col:146> col:49 _strtoui64 'unsigned long long (const char *, char **, int) __attribute__((cdecl))':'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x1c618ec0d10 <col:67, col:80> col:80 _String 'const char *'
| |-ParmVarDecl 0x1c618ec0d90 <col:114, col:122> col:122 _EndPtr 'char **'
| `-ParmVarDecl 0x1c618ec0e10 <col:136, col:140> col:140 _Radix 'int'
|-FunctionDecl 0x1c618ebd440 <line:491:24, col:177> col:49 _strtoui64_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1c618ebd0c0 <col:69, col:82> col:82 _String 'const char *'
| |-ParmVarDecl 0x1c618ebd140 <col:116, col:124> col:124 _EndPtr 'char **'
| |-ParmVarDecl 0x1c618ebd1c0 <col:138, col:143> col:143 _Radix 'int'
| `-ParmVarDecl 0x1c618ebd238 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ebd778 <line:492:24, col:88> col:39 ldiv 'ldiv_t (long, long) __attribute__((cdecl))':'ldiv_t (long, long)'
| |-ParmVarDecl 0x1c618ebd558 <col:49, col:54> col:54 _Numerator 'long'
| `-ParmVarDecl 0x1c618ebd5d8 <col:71, col:76> col:76 _Denominator 'long'
|-FunctionDecl 0x1c618ebda98 <line:493:24, col:100> col:40 lldiv 'lldiv_t (long long, long long) __attribute__((cdecl))':'lldiv_t (long long, long long)'
| |-ParmVarDecl 0x1c618ebd878 <col:51, col:61> col:61 _Numerator 'long long'
| `-ParmVarDecl 0x1c618ebd8f8 <col:78, col:88> col:88 _Denominator 'long long'
|-FunctionDecl 0x1c618ebdef8 <line:515:28, col:140> col:44 _ltoa_s 'errno_t (long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long, char *, size_t, int)'
| |-ParmVarDecl 0x1c618ebdb78 <col:57, col:62> col:62 _Val 'long'
| |-ParmVarDecl 0x1c618ebdbf8 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618ebdc70 <col:111, col:118> col:118 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ebdcf0 <col:130, col:134> col:134 _Radix 'int'
|-FunctionDecl 0x1c618ec23a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:517:79 _ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x1c618ec2110 <col:91, col:97> col:97 _Value 'long'
| |-ParmVarDecl 0x1c618ec2190 <col:129, col:135> col:135 _Dest 'char *'
| |-ParmVarDecl 0x1c618ec2210 <col:147, col:152> col:152 _Radix 'int'
| `-DeprecatedAttr 0x1c618ec2460 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ec27d0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:518:24, col:128> col:39 mblen 'int (const char *, size_t) __attribute__((cdecl))':'int (const char *, size_t)'
| |-ParmVarDecl 0x1c618ec25a8 <col:89, col:102> col:102 _Ch 'const char *'
| `-ParmVarDecl 0x1c618ec2620 <col:112, col:119> col:119 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ec2b78 <line:519:24, col:159> col:39 _mblen_l 'int (const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ec28b0 <col:92, col:105> col:105 _Ch 'const char *'
| |-ParmVarDecl 0x1c618ec2928 <col:115, col:122> col:122 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ec29a0 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ec2d38 <line:520:24, col:73> col:39 _mbstrlen 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| `-ParmVarDecl 0x1c618ec2c60 <col:56, col:69> col:69 _Str 'const char *'
|-FunctionDecl 0x1c618ec3028 <line:521:24, col:102> col:39 _mbstrlen_l 'size_t (const char *, _locale_t) __attribute__((cdecl))':'size_t (const char *, _locale_t)'
| |-ParmVarDecl 0x1c618ec2e10 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x1c618ec2e88 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ebb210 <line:522:24, col:96> col:39 _mbstrnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1c618ebb0a0 <col:57, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1c618ebb118 <col:80, col:87> col:87 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ebb5b0 <line:523:24, col:126> col:39 _mbstrnlen_l 'size_t (const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ebb2f0 <col:59, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x1c618ebb368 <col:82, col:89> col:89 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ebb3e0 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ebb968 <line:524:9, col:170> col:24 mbtowc 'int (wchar_t *, const char *, size_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x1c618ebb690 <col:54, col:64> col:64 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x1c618ebb710 <col:122, col:135> col:135 _SrcCh 'const char *'
| `-ParmVarDecl 0x1c618ebb788 <col:148, col:155> col:155 _SrcSizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ebbdc0 <line:525:9, col:201> col:24 _mbtowc_l 'int (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ebba48 <col:57, col:67> col:67 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x1c618ebbac8 <col:125, col:138> col:138 _SrcCh 'const char *'
| |-ParmVarDecl 0x1c618ebbb40 <col:151, col:158> col:158 _SrcSizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ebbbb8 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ec3350 <line:526:28, col:271> col:44 mbstowcs_s 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t)'
| |-ParmVarDecl 0x1c618ebbea8 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1c618ebbf20 <col:155, col:165> col:165 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1c618ebbf98 <col:179, col:186> col:186 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ebc018 <col:227, col:240> col:240 _SrcBuf 'const char *'
| `-ParmVarDecl 0x1c618ec3120 <col:254, col:261> col:261 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ec37d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:528:56 mbstowcs 'size_t (wchar_t *, const char *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x1c618ec3500 <col:97, col:106> col:106 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1c618ec3580 <col:120, col:134> col:134 _Source 'const char *'
| |-ParmVarDecl 0x1c618ec35f8 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618ec3888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ec3e88 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:530:28, col:301> col:44 _mbstowcs_s_l 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ec39c8 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1c618ec3a40 <col:158, col:168> col:168 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1c618ec3ab8 <col:182, col:189> col:189 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ec3b38 <col:230, col:243> col:243 _SrcBuf 'const char *'
| |-ParmVarDecl 0x1c618ec3bb0 <col:257, col:264> col:264 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ec3c28 <col:284, col:294> col:294 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ebe3c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:532:59 _mbstowcs_l 'size_t (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ec4078 <col:149, col:158> col:158 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1c618ebe0d0 <col:172, col:186> col:186 _Source 'const char *'
| |-ParmVarDecl 0x1c618ebe148 <col:200, col:208> col:208 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ebe1c0 <col:228, col:239> col:239 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1c618ebe488 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ebe688 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:534:24, col:48> col:39 rand 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1c618ebe838 <line:539:28, col:73> col:43 _set_error_mode 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1c618ebe758 <col:64, col:68> col:68 _Mode 'int'
|-FunctionDecl 0x1c618ebea50 <line:541:9, col:53> col:24 srand 'void (unsigned int) __attribute__((cdecl))':'void (unsigned int)'
| `-ParmVarDecl 0x1c618ebe910 <col:35, col:48> col:48 _Seed 'unsigned int'
|-FunctionDecl 0x1c618ebed10 <line:542:39> col:39 implicit strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x1c618ebedb0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618ebee18 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1c618ebee90 prev 0x1c618ebed10 <col:24, col:112> col:39 strtod 'double (const char *, char **)'
| |-ParmVarDecl 0x1c618ebeb28 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1c618ebeba8 <col:97, col:105> col:105 _EndPtr 'char **'
|-FunctionDecl 0x1c618ebf258 <line:543:24, col:143> col:39 _strtod_l 'double (const char *, char **, _locale_t) __attribute__((cdecl))':'double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1c618ebef70 <col:56, col:69> col:69 _Str 'const char *'
| |-ParmVarDecl 0x1c618ebeff0 <col:100, col:108> col:108 _EndPtr 'char **'
| `-ParmVarDecl 0x1c618ebf068 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ebf5d8 <line:544:39> col:39 implicit strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1c618ebf678 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1c618ebf6e0 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1c618ebf748 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1c618ebf7c8 prev 0x1c618ebf5d8 <col:24, col:130> col:39 strtol 'long (const char *, char **, int)'
| |-ParmVarDecl 0x1c618ebf340 <col:53, col:66> col:66 _Str 'const char *'
| |-ParmVarDecl 0x1c618ebf3c0 <col:97, col:105> col:105 _EndPtr 'char **'
| `-ParmVarDecl 0x1c618ebf440 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x1c618ebfc30 <line:545:24, col:158> col:39 _strtol_l 'long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1c618ebf8b0 <col:56, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x1c618ebf930 <col:99, col:106> col:106 _EndPtr 'char **'
| |-ParmVarDecl 0x1c618ebf9b0 <col:120, col:124> col:124 _Radix 'int'
| `-ParmVarDecl 0x1c618ebfa28 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ebff40 <line:546:43> col:43 implicit strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1c618ebffe0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1c618ec0048 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1c618ec4130 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1c618ec41b0 prev 0x1c618ebff40 <col:24, col:135> col:43 strtoll 'long long (const char *, char **, int)'
| |-ParmVarDecl 0x1c618ebfd20 <col:58, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x1c618ebfda0 <col:102, col:110> col:110 _EndPtr 'char **'
| `-ParmVarDecl 0x1c618ebfe20 <col:124, col:128> col:128 _Radix 'int'
|-FunctionDecl 0x1c618ec4550 <line:547:24, col:166> col:43 _strtoll_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1c618ec4298 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x1c618ec4318 <col:105, col:113> col:113 _EndPtr 'char **'
| |-ParmVarDecl 0x1c618ec4398 <col:127, col:131> col:131 _Radix 'int'
| `-ParmVarDecl 0x1c618ec4410 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ec48d8 <line:548:46> col:46 implicit strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1c618ec4978 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1c618ec49e0 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1c618ec4a48 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1c618ec4ac8 prev 0x1c618ec48d8 <col:24, col:137> col:46 strtoul 'unsigned long (const char *, char **, int)'
| |-ParmVarDecl 0x1c618ec4640 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x1c618ec46c0 <col:105, col:113> col:113 _EndPtr 'char **'
| `-ParmVarDecl 0x1c618ec4740 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x1c618ec4f30 <line:549:24, col:160> col:46 _strtoul_l 'unsigned long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1c618ec4bb0 <col:57, col:70> col:70 _Str 'const char *'
| |-ParmVarDecl 0x1c618ec4c30 <col:101, col:108> col:108 _EndPtr 'char **'
| |-ParmVarDecl 0x1c618ec4cb0 <col:122, col:126> col:126 _Radix 'int'
| `-ParmVarDecl 0x1c618ec4d28 <col:143, col:153> col:153 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ec5260 <line:550:51> col:51 implicit strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1c618ec5300 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1c618ec5368 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1c618ec53d0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1c618ec5450 prev 0x1c618ec5260 <col:24, col:143> col:51 strtoull 'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x1c618ec5020 <col:67, col:80> col:80 _Str 'const char *'
| |-ParmVarDecl 0x1c618ec50a0 <col:111, col:119> col:119 _EndPtr 'char **'
| `-ParmVarDecl 0x1c618ec5140 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x1c618ec57f0 <line:551:24, col:174> col:51 _strtoull_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1c618ec5538 <col:70, col:83> col:83 _Str 'const char *'
| |-ParmVarDecl 0x1c618ec55b8 <col:114, col:122> col:122 _EndPtr 'char **'
| |-ParmVarDecl 0x1c618ec5638 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x1c618ec56b0 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ec5ad0 <line:552:44> col:44 implicit strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x1c618ec5b70 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618ec5bd8 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1c618ec5c50 prev 0x1c618ec5ad0 <col:24, col:118> col:44 strtold 'long double (const char *, char **)'
| |-ParmVarDecl 0x1c618ec58e0 <col:59, col:72> col:72 _Str 'const char *'
| `-ParmVarDecl 0x1c618ec5960 <col:103, col:111> col:111 _EndPtr 'char **'
|-FunctionDecl 0x1c618ec6008 <line:553:24, col:149> col:44 _strtold_l 'long double (const char *, char **, _locale_t) __attribute__((cdecl))':'long double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1c618ec5d30 <col:62, col:75> col:75 _Str 'const char *'
| |-ParmVarDecl 0x1c618ec5db0 <col:106, col:114> col:114 _EndPtr 'char **'
| `-ParmVarDecl 0x1c618ec5e28 <col:132, col:142> col:142 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ed3170 <line:554:38> col:38 implicit strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x1c618ed3210 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1c618ed3278 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1c618ed32f0 prev 0x1c618ed3170 <col:24, col:111> col:38 strtof 'float (const char *, char **)'
| |-ParmVarDecl 0x1c618ed2f80 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1c618ed3000 <col:96, col:104> col:104 _EndPtr 'char **'
|-FunctionDecl 0x1c618ed36a8 <line:555:24, col:142> col:38 _strtof_l 'float (const char *, char **, _locale_t) __attribute__((cdecl))':'float (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1c618ed33d0 <col:55, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x1c618ed3450 <col:99, col:107> col:107 _EndPtr 'char **'
| `-ParmVarDecl 0x1c618ed34c8 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ed3870 <line:560:9, col:60> col:21 system 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1c618ed3790 <col:39, col:52> col:52 _Command 'const char *'
|-FunctionDecl 0x1c618ed3cc8 <line:564:28, col:150> col:44 _ultoa_s 'errno_t (unsigned long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, char *, size_t, int)'
| |-ParmVarDecl 0x1c618ed3948 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1c618ed39c8 <col:100, col:107> col:107 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618ed3a40 <col:121, col:128> col:128 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ed3ac0 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x1c618ed2108 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:566:79 _ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x1c618ed3e78 <col:92, col:107> col:107 _Value 'unsigned long'
| |-ParmVarDecl 0x1c618ed3ef8 <col:139, col:145> col:145 _Dest 'char *'
| |-ParmVarDecl 0x1c618ed1f70 <col:157, col:162> col:162 _Radix 'int'
| `-DeprecatedAttr 0x1c618ed21c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ed25f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:567:127> col:58 wctomb 'int (char *, wchar_t) __attribute__((cdecl))':'int (char *, wchar_t)'
| |-ParmVarDecl 0x1c618ed23c8 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x1c618ed2440 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1c618ed26a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ed2b78 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:568:155> col:61 _wctomb_l 'int (char *, wchar_t, _locale_t) __attribute__((cdecl))':'int (char *, wchar_t, _locale_t)'
| |-ParmVarDecl 0x1c618ed28a8 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x1c618ed2920 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1c618ed2998 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1c618ed2c30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ed7148 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:570:28, col:200> col:44 wctomb_s 'errno_t (int *, char *, rsize_t, wchar_t) __attribute__((cdecl))':'errno_t (int *, char *, rsize_t, wchar_t)'
| |-ParmVarDecl 0x1c618ed2d78 <col:63, col:69> col:69 _SizeConverted 'int *'
| |-ParmVarDecl 0x1c618ed2df8 <col:142, col:149> col:149 _MbCh 'char *'
| |-ParmVarDecl 0x1c618ed2e70 <col:161, col:169> col:169 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ed2ee8 <col:188, col:196> col:196 _WCh 'wchar_t':'unsigned short'
|-FunctionDecl 0x1c618ed7650 <line:572:28, col:206> col:44 _wctomb_s_l 'errno_t (int *, char *, size_t, wchar_t, _locale_t) __attribute__((cdecl))':'errno_t (int *, char *, size_t, wchar_t, _locale_t)'
| |-ParmVarDecl 0x1c618ed7238 <col:66, col:72> col:72 _SizeConverted 'int *'
| |-ParmVarDecl 0x1c618ed72b8 <col:121, col:128> col:128 _MbCh 'char *'
| |-ParmVarDecl 0x1c618ed7330 <col:140, col:147> col:147 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed73a8 <col:166, col:174> col:174 _WCh 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1c618ed7420 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ed7b60 <line:573:28, col:263> col:44 wcstombs_s 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618ed7740 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1c618ed77c0 <col:164, col:171> col:171 _Dst 'char *'
| |-ParmVarDecl 0x1c618ed7838 <col:182, col:189> col:189 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed78b0 <col:213, col:229> col:229 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1c618ed7928 <col:240, col:247> col:247 _MaxCountInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ed5ff0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:575:56 wcstombs 'size_t (char *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618ed7d18 <col:97, col:103> col:103 _Dest 'char *'
| |-ParmVarDecl 0x1c618ed7d90 <col:117, col:134> col:134 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1c618ed7e08 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1c618ed60a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ed66a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:576:28, col:294> col:44 _wcstombs_s_l 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ed61e8 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1c618ed6268 <col:167, col:174> col:174 _Dst 'char *'
| |-ParmVarDecl 0x1c618ed62e0 <col:185, col:192> col:192 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed6358 <col:216, col:232> col:232 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1c618ed63d0 <col:243, col:250> col:250 _MaxCountInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ed6448 <col:277, col:287> col:287 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ed6bd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:578:59 _wcstombs_l 'size_t (char *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1c618ed6868 <col:146, col:152> col:152 _Dest 'char *'
| |-ParmVarDecl 0x1c618ed68e0 <col:166, col:183> col:183 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1c618ed6958 <col:197, col:205> col:205 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed69d0 <col:225, col:236> col:236 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1c618ed6c98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ecffc0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:142> col:142 implicit calloc 'void *(unsigned long long, unsigned long long)' extern
| |-ParmVarDecl 0x1c618ed0060 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1c618ed00c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618ed0140 prev 0x1c618ecffc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:224> col:142 calloc 'void *(unsigned long long, unsigned long long)'
| |-ParmVarDecl 0x1c618ed6dd8 <col:173, col:180> col:180 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed6e50 <col:212, col:219> col:219 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1c618ed01f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1c618ed0248 <line:615:33> restrict
|-FunctionDecl 0x1c618ed03e0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:641:182> col:132 free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x1c618ed02a0 <col:168, col:175> col:175 _Memory 'void *'
| `-NoAliasAttr 0x1c618ed0488 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x1c618ed0688 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:161> col:161 implicit malloc 'void *(unsigned long long)' extern
| `-ParmVarDecl 0x1c618ed0728 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618ed0798 prev 0x1c618ed0688 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:204> col:161 malloc 'void *(unsigned long long)'
| |-ParmVarDecl 0x1c618ed0508 <col:192, col:199> col:199 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1c618ed0840 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1c618ed0898 <line:615:33> restrict
|-FunctionDecl 0x1c618ed0b10 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:142> col:142 implicit realloc 'void *(void *, unsigned long long)' extern
| |-ParmVarDecl 0x1c618ed0bb0 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x1c618ed0c18 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1c618ed0c90 prev 0x1c618ed0b10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:236> col:142 realloc 'void *(void *, unsigned long long)'
| |-ParmVarDecl 0x1c618ed08f0 <col:181, col:188> col:188 _Memory 'void *'
| |-ParmVarDecl 0x1c618ed0968 <col:221, col:228> col:228 _NewSize 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1c618ed0d40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1c618ed0d98 <line:615:33> restrict
|-FunctionDecl 0x1c618ed8148 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:646:274> col:142 _recalloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x1c618ed0df0 <col:183, col:190> col:190 _Memory 'void *'
| |-ParmVarDecl 0x1c618ed0e68 <col:223, col:230> col:230 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed0ee0 <col:262, col:269> col:269 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1c618ed8200 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1c618ed8258 <line:615:33> restrict
|-FunctionDecl 0x1c618ed8388 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:647:191> col:132 _aligned_free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x1c618ed82b0 <col:177, col:184> col:184 _Memory 'void *'
| `-NoAliasAttr 0x1c618ed8430 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x1c618ed8628 <col:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:648:218> col:142 _aligned_malloc 'void *(size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t)'
| |-ParmVarDecl 0x1c618ed84b0 <col:182, col:189> col:189 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed8528 <col:201, col:208> col:208 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1c618ed86d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1c618ed8730 <line:615:33> restrict
|-FunctionDecl 0x1c618ed8a48 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:649:246> col:142 _aligned_offset_malloc 'void *(size_t, size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t, size_t)'
| |-ParmVarDecl 0x1c618ed8780 <col:189, col:196> col:196 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed87f8 <col:208, col:215> col:215 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed8870 <col:232, col:239> col:239 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1c618ed8b00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1c618ed8b58 <line:615:33> restrict
|-FunctionDecl 0x1c618ed8dc0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:651:272> col:145 _aligned_realloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x1c618ed8bb0 <col:193, col:200> col:200 _Memory 'void *'
| |-ParmVarDecl 0x1c618ed8c28 <col:233, col:240> col:240 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed8ca0 <col:255, col:262> col:262 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1c618ed8e78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1c618ed8ed0 <line:615:33> restrict
|-FunctionDecl 0x1c618ed1260 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:653:306> col:142 _aligned_recalloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1c618ed8f28 <col:191, col:198> col:198 _Memory 'void *'
| |-ParmVarDecl 0x1c618ed0f60 <col:231, col:238> col:238 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed0fd8 <col:270, col:277> col:277 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed1050 <col:289, col:296> col:296 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1c618ed1320 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1c618ed1378 <line:615:33> restrict
|-FunctionDecl 0x1c618ed1678 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:655:300> col:145 _aligned_offset_realloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1c618ed13d0 <col:200, col:207> col:207 _Memory 'void *'
| |-ParmVarDecl 0x1c618ed1448 <col:240, col:247> col:247 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed14c0 <col:262, col:269> col:269 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed1538 <col:286, col:293> col:293 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1c618ed1738 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1c618ed1790 <line:615:33> restrict
|-FunctionDecl 0x1c618ed1c08 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:657:334> col:142 _aligned_offset_recalloc 'void *(void *, size_t, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1c618ed17e8 <col:198, col:205> col:205 _Memory 'void *'
| |-ParmVarDecl 0x1c618ed1860 <col:238, col:245> col:245 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed18d8 <col:277, col:284> col:284 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed1950 <col:296, col:303> col:303 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ed19c8 <col:320, col:327> col:327 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1c618ed1cd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1c618ed1d28 <line:615:33> restrict
|-FunctionDecl 0x1c618ed90c0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:658:73, col:176> col:88 _aligned_msize 'size_t (void *, size_t, size_t) __attribute__((cdecl))':'size_t (void *, size_t, size_t)'
| |-ParmVarDecl 0x1c618ed1d80 <col:117, col:124> col:124 _Memory 'void *'
| |-ParmVarDecl 0x1c618ed1df8 <col:138, col:145> col:145 _Alignment 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ed1e70 <col:162, col:169> col:169 _Offset 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ed9518 <line:685:28, col:157> col:44 _itow_s 'errno_t (int, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (int, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1c618ed91a8 <col:58, col:62> col:62 _Val 'int'
| |-ParmVarDecl 0x1c618ed9220 <col:97, col:107> col:107 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1c618ed9298 <col:121, col:128> col:128 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ed9318 <col:147, col:151> col:151 _Radix 'int'
|-FunctionDecl 0x1c618ed9990 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:687:82 _itow 'wchar_t *(int, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(int, wchar_t *, int)'
| |-ParmVarDecl 0x1c618ed96c8 <col:94, col:99> col:99 _Value 'int'
| |-ParmVarDecl 0x1c618ed9740 <col:131, col:140> col:140 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1c618ed97c0 <col:152, col:157> col:157 _Radix 'int'
| `-DeprecatedAttr 0x1c618ed9a48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ed9f08 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:688:28, col:158> col:44 _ltow_s 'errno_t (long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1c618ed9b90 <col:58, col:63> col:63 _Val 'long'
| |-ParmVarDecl 0x1c618ed9c08 <col:98, col:108> col:108 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1c618ed9c80 <col:122, col:129> col:129 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ed9d00 <col:148, col:152> col:152 _Radix 'int'
|-FunctionDecl 0x1c618eda390 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:690:82 _ltow 'wchar_t *(long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long, wchar_t *, int)'
| |-ParmVarDecl 0x1c618eda0c8 <col:94, col:100> col:100 _Value 'long'
| |-ParmVarDecl 0x1c618eda140 <col:132, col:141> col:141 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1c618eda1c0 <col:153, col:158> col:158 _Radix 'int'
| `-DeprecatedAttr 0x1c618eda448 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618eda908 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:691:28, col:168> col:44 _ultow_s 'errno_t (unsigned long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1c618eda590 <col:59, col:73> col:73 _Val 'unsigned long'
| |-ParmVarDecl 0x1c618eda608 <col:108, col:118> col:118 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1c618eda680 <col:132, col:139> col:139 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618eda700 <col:158, col:162> col:162 _Radix 'int'
|-FunctionDecl 0x1c618edad80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:693:82 _ultow 'wchar_t *(unsigned long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long, wchar_t *, int)'
| |-ParmVarDecl 0x1c618edaab8 <col:95, col:110> col:110 _Value 'unsigned long'
| |-ParmVarDecl 0x1c618edab30 <col:142, col:151> col:151 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1c618edabb0 <col:163, col:168> col:168 _Radix 'int'
| `-DeprecatedAttr 0x1c618edae38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ed4150 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:694:24, col:118> col:39 wcstod 'double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1c618edaf78 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618ed3fa8 <col:100, col:111> col:111 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1c618ed44f8 <line:695:24, col:148> col:39 _wcstod_l 'double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1c618ed4228 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618ed42a8 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1c618ed4320 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ed48b8 <line:696:24, col:129> col:39 wcstol 'long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1c618ed45d8 <col:53, col:68> col:68 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618ed4658 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1c618ed46d8 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x1c618ed4d20 <line:697:24, col:159> col:39 _wcstol_l 'long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1c618ed4998 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618ed4a18 <col:102, col:112> col:112 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1c618ed4a98 <col:121, col:125> col:125 _Radix 'int'
| `-ParmVarDecl 0x1c618ed4b10 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618edd178 <line:698:24, col:133> col:43 wcstoll 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1c618ed4e08 <col:58, col:73> col:73 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618ed4e88 <col:104, col:114> col:114 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1c618ed4f08 <col:123, col:127> col:127 _Radix 'int'
|-FunctionDecl 0x1c618edd5e0 <line:699:24, col:164> col:43 _wcstoll_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1c618edd258 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618edd2d8 <col:107, col:117> col:117 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1c618edd358 <col:126, col:130> col:130 _Radix 'int'
| `-ParmVarDecl 0x1c618edd3d0 <col:147, col:157> col:157 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618edd9a8 <line:700:24, col:137> col:46 wcstoul 'unsigned long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1c618edd6c8 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618edd748 <col:107, col:118> col:118 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1c618edd7c8 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x1c618edde10 <line:701:24, col:167> col:46 _wcstoul_l 'unsigned long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1c618edda88 <col:64, col:79> col:79 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618eddb08 <col:110, col:120> col:120 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1c618eddb88 <col:129, col:133> col:133 _Radix 'int'
| `-ParmVarDecl 0x1c618eddc00 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee2248 <line:702:24, col:143> col:51 wcstoull 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1c618eddef8 <col:67, col:82> col:82 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618eddf78 <col:113, col:124> col:124 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1c618ee2070 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x1c618ee26b0 <line:703:24, col:174> col:51 _wcstoull_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1c618ee2328 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618ee23a8 <col:116, col:127> col:127 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1c618ee2428 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x1c618ee24a0 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee29c0 <line:704:24, col:124> col:44 wcstold 'long double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1c618ee2798 <col:59, col:75> col:75 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618ee2818 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1c618ee2d68 <line:705:24, col:155> col:44 _wcstold_l 'long double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1c618ee2a98 <col:62, col:78> col:78 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618ee2b18 <col:109, col:120> col:120 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1c618ee2b90 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee3080 <line:706:24, col:117> col:38 wcstof 'float (const wchar_t *, wchar_t **) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1c618ee2e48 <col:52, col:68> col:68 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618ee2ec8 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1c618ee3428 <line:707:24, col:148> col:38 _wcstof_l 'float (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1c618ee3158 <col:55, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618ee31d8 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1c618ee3250 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee36a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:711:118> col:78 _wgetenv 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1c618ee35c8 <col:94, col:110> col:110 _VarName 'const wchar_t *'
| `-DeprecatedAttr 0x1c618ee3748 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ee3bf8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:712:28, col:198> col:44 _wgetenv_s 'errno_t (size_t *, wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1c618ee3888 <col:61, col:70> col:70 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x1c618ee3900 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1c618ee3978 <col:143, col:150> col:150 _DstSizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ee39f0 <col:174, col:190> col:190 _VarName 'const wchar_t *'
|-FunctionDecl 0x1c618ee3fb0 <line:720:28, col:214> col:44 _wdupenv_s 'errno_t (wchar_t **, size_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t **, size_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618ee3ce8 <col:127, col:137> col:137 _Buffer 'wchar_t **'
| |-ParmVarDecl 0x1c618ee3d60 <col:156, col:164> col:164 _BufferSizeInWords 'size_t *'
| `-ParmVarDecl 0x1c618ee3dd8 <col:191, col:206> col:206 _VarName 'const wchar_t *'
|-FunctionDecl 0x1c618edf1c8 <line:728:9, col:65> col:21 _wsystem 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1c618edf050 <col:41, col:57> col:57 _Command 'const wchar_t *'
|-FunctionDecl 0x1c618edf418 <line:733:24, col:71> col:39 _wtof 'double (const wchar_t *) __attribute__((cdecl))':'double (const wchar_t *)'
| `-ParmVarDecl 0x1c618edf298 <col:52, col:67> col:67 _Str 'const wchar_t *'
|-FunctionDecl 0x1c618edf710 <line:734:24, col:101> col:39 _wtof_l 'double (const wchar_t *, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1c618edf4e8 <col:54, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618edf560 <col:84, col:94> col:94 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618edf8c8 <line:735:24, col:68> col:36 _wtoi 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1c618edf7e8 <col:49, col:64> col:64 _Str 'const wchar_t *'
|-FunctionDecl 0x1c618edfbc0 <line:736:24, col:98> col:36 _wtoi_l 'int (const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1c618edf998 <col:51, col:66> col:66 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618edfa10 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618edfe18 <line:737:24, col:69> col:37 _wtol 'long (const wchar_t *) __attribute__((cdecl))':'long (const wchar_t *)'
| `-ParmVarDecl 0x1c618edfc98 <col:50, col:65> col:65 _Str 'const wchar_t *'
|-FunctionDecl 0x1c618ee0120 <line:738:24, col:99> col:37 _wtol_l 'long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1c618edfee8 <col:52, col:67> col:67 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618edff60 <col:82, col:92> col:92 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee0378 <line:739:24, col:75> col:42 _wtoll 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x1c618ee01f8 <col:56, col:71> col:71 _Str 'const wchar_t *'
|-FunctionDecl 0x1c618ee0670 <line:740:24, col:105> col:42 _wtoll_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1c618ee0448 <col:58, col:73> col:73 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618ee04c0 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee0ac8 <line:742:28, col:162> col:44 _i64tow_s 'errno_t (long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1c618ee0750 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x1c618ee07c8 <col:102, col:112> col:112 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1c618ee0840 <col:126, col:133> col:133 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ee08c0 <col:152, col:156> col:156 _Radix 'int'
|-FunctionDecl 0x1c618ee0f40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:743:146> col:62 _i64tow 'wchar_t *(long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long long, wchar_t *, int)'
| |-ParmVarDecl 0x1c618ee0c78 <col:75, col:83> col:83 _Val 'long long'
| |-ParmVarDecl 0x1c618ee0cf0 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1c618ee0d70 <col:136, col:140> col:140 _Radix 'int'
| `-DeprecatedAttr 0x1c618ee0ff8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ede4a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:744:28, col:172> col:44 _ui64tow_s 'errno_t (unsigned long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1c618ede130 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x1c618ede1a8 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1c618ede220 <col:136, col:143> col:143 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618ede2a0 <col:162, col:166> col:166 _Radix 'int'
|-FunctionDecl 0x1c618ede920 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:745:157> col:63 _ui64tow 'wchar_t *(unsigned long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long long, wchar_t *, int)'
| |-ParmVarDecl 0x1c618ede658 <col:77, col:94> col:94 _Val 'unsigned long long'
| |-ParmVarDecl 0x1c618ede6d0 <col:123, col:133> col:133 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1c618ede750 <col:147, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x1c618ede9d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618edebf8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:746:24, col:76> col:42 _wtoi64 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x1c618edeb18 <col:57, col:72> col:72 _Str 'const wchar_t *'
|-FunctionDecl 0x1c618edee40 <line:747:24, col:106> col:42 _wtoi64_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1c618edecc8 <col:59, col:74> col:74 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1c618eded40 <col:89, col:99> col:99 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee1180 <line:748:24, col:141> col:42 _wcstoi64 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1c618edef18 <col:59, col:75> col:75 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618edef98 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1c618ee1060 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x1c618ee1518 <line:749:24, col:171> col:42 _wcstoi64_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1c618ee1260 <col:61, col:77> col:77 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618ee12e0 <col:108, col:119> col:119 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1c618ee1360 <col:133, col:137> col:137 _Radix 'int'
| `-ParmVarDecl 0x1c618ee13d8 <col:154, col:164> col:164 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee1820 <line:750:24, col:150> col:50 _wcstoui64 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1c618ee1600 <col:68, col:84> col:84 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618ee1680 <col:115, col:126> col:126 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1c618ee1700 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x1c618ee1bb8 <line:751:24, col:180> col:50 _wcstoui64_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1c618ee1900 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1c618ee1980 <col:117, col:128> col:128 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1c618ee1a00 <col:142, col:146> col:146 _Radix 'int'
| `-ParmVarDecl 0x1c618ee1a78 <col:163, col:173> col:173 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee1ec0 <line:770:24, col:151> col:39 _fullpath 'char *(char *, const char *, size_t) __attribute__((cdecl))':'char *(char *, const char *, size_t)'
| |-ParmVarDecl 0x1c618ee1ca8 <col:82, col:89> col:89 _FullPath 'char *'
| |-ParmVarDecl 0x1c618ee1d28 <col:107, col:120> col:120 _Path 'const char *'
| `-ParmVarDecl 0x1c618ee1da0 <col:132, col:139> col:139 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618edc478 <line:778:28, col:189> col:44 _ecvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x1c618ee1fa8 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618edc010 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618edc090 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x1c618edc110 <col:132, col:136> col:136 _NumOfDights 'int'
| |-ParmVarDecl 0x1c618edc190 <col:156, col:162> col:162 _PtDec 'int *'
| `-ParmVarDecl 0x1c618edc210 <col:176, col:182> col:182 _PtSign 'int *'
|-FunctionDecl 0x1c618edc970 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:780:158> col:72 _ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1c618edc638 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x1c618edc6b8 <col:101, col:105> col:105 _NumOfDigits 'int'
| |-ParmVarDecl 0x1c618edc738 <col:125, col:131> col:131 _PtDec 'int *'
| |-ParmVarDecl 0x1c618edc7b8 <col:145, col:151> col:151 _PtSign 'int *'
| `-DeprecatedAttr 0x1c618edca30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618edcf68 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:781:28, col:186> col:44 _fcvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x1c618edcb78 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618edcbf0 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618edcc70 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x1c618edccf0 <col:132, col:136> col:136 _NumOfDec 'int'
| |-ParmVarDecl 0x1c618edcd70 <col:153, col:159> col:159 _PtDec 'int *'
| `-ParmVarDecl 0x1c618edcdf0 <col:173, col:179> col:179 _PtSign 'int *'
|-FunctionDecl 0x1c618ee4470 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:783:155> col:72 _fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1c618ee41b0 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x1c618ee4230 <col:101, col:105> col:105 _NumOfDec 'int'
| |-ParmVarDecl 0x1c618ee42b0 <col:122, col:128> col:128 _PtDec 'int *'
| |-ParmVarDecl 0x1c618ee4330 <col:142, col:148> col:148 _PtSign 'int *'
| `-DeprecatedAttr 0x1c618ee4530 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ee49f8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:784:9, col:129> col:25 _gcvt_s 'errno_t (char *, size_t, double, int) __attribute__((cdecl))':'errno_t (char *, size_t, double, int)'
| |-ParmVarDecl 0x1c618ee4678 <col:55, col:62> col:62 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618ee46f0 <col:76, col:83> col:83 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ee4770 <col:95, col:102> col:102 _Val 'double'
| `-ParmVarDecl 0x1c618ee47f0 <col:113, col:117> col:117 _NumOfDigits 'int'
|-FunctionDecl 0x1c618ee4e48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:786:141> col:57 _gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x1c618ee4ba8 <col:68, col:75> col:75 _Val 'double'
| |-ParmVarDecl 0x1c618ee4c28 <col:86, col:90> col:90 _NumOfDigits 'int'
| |-ParmVarDecl 0x1c618ee4ca8 <col:127, col:134> col:134 _DstBuf 'char *'
| `-DeprecatedAttr 0x1c618ee4f00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ee5300 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:788:24, col:91> col:36 _atodbl 'int (_CRT_DOUBLE *, char *) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *)'
| |-ParmVarDecl 0x1c618ee50d8 <col:50, col:64> col:64 _Result '_CRT_DOUBLE *'
| `-ParmVarDecl 0x1c618ee5158 <col:80, col:87> col:87 _Str 'char *'
|-FunctionDecl 0x1c618ee5680 <line:789:24, col:89> col:36 _atoldbl 'int (_LDOUBLE *, char *) __attribute__((cdecl))':'int (_LDOUBLE *, char *)'
| |-ParmVarDecl 0x1c618ee5458 <col:51, col:62> col:62 _Result '_LDOUBLE *'
| `-ParmVarDecl 0x1c618ee54d8 <col:78, col:85> col:85 _Str 'char *'
|-FunctionDecl 0x1c618ee5a00 <line:790:24, col:96> col:36 _atoflt 'int (_CRT_FLOAT *, const char *) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *)'
| |-ParmVarDecl 0x1c618ee57d8 <col:50, col:63> col:63 _Result '_CRT_FLOAT *'
| `-ParmVarDecl 0x1c618ee5858 <col:79, col:92> col:92 _Str 'const char *'
|-FunctionDecl 0x1c618ee5da8 <line:791:24, col:121> col:36 _atodbl_l 'int (_CRT_DOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x1c618ee5ad8 <col:52, col:66> col:66 _Result '_CRT_DOUBLE *'
| |-ParmVarDecl 0x1c618ee5b58 <col:82, col:89> col:89 _Str 'char *'
| `-ParmVarDecl 0x1c618ee5bd0 <col:104, col:114> col:114 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee91c8 <line:792:24, col:119> col:36 _atoldbl_l 'int (_LDOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_LDOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x1c618ee5e88 <col:53, col:64> col:64 _Result '_LDOUBLE *'
| |-ParmVarDecl 0x1c618ee5f08 <col:80, col:87> col:87 _Str 'char *'
| `-ParmVarDecl 0x1c618ee5f80 <col:102, col:112> col:112 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee9578 <line:793:24, col:126> col:36 _atoflt_l 'int (_CRT_FLOAT *, const char *, _locale_t) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *, _locale_t)'
| |-ParmVarDecl 0x1c618ee92a8 <col:52, col:65> col:65 _Result '_CRT_FLOAT *'
| |-ParmVarDecl 0x1c618ee9328 <col:81, col:94> col:94 _Str 'const char *'
| `-ParmVarDecl 0x1c618ee93a0 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1c618ee9850 <line:794:46> col:46 implicit _lrotl 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x1c618ee98f0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x1c618ee9958 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1c618ee99d0 <col:46> Implicit
|-FunctionDecl 0x1c618ee9a28 prev 0x1c618ee9850 <col:24, col:93> col:46 _lrotl 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x1c618ee9660 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1c618ee96e0 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x1c618ee9b20 <col:46> Inherited Implicit
|-FunctionDecl 0x1c618ee9ce0 <line:795:46> col:46 implicit _lrotr 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x1c618ee9d80 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x1c618ee9de8 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1c618ee9e60 <col:46> Implicit
|-FunctionDecl 0x1c618ee9eb8 prev 0x1c618ee9ce0 <col:24, col:93> col:46 _lrotr 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x1c618ee9b60 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1c618ee9be0 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x1c618ee9fb0 <col:46> Inherited Implicit
|-FunctionDecl 0x1c618ee64a8 <line:796:40, line:797:37> line:796:58 _makepath_s 'errno_t (char *, size_t, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x1c618ee9ff0 <col:99, col:106> col:106 _PathResult 'char *'
| |-ParmVarDecl 0x1c618eea068 <col:124, col:131> col:131 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ee60c8 <col:156, col:169> col:169 _Drive 'const char *'
| |-ParmVarDecl 0x1c618ee6148 <col:188, col:201> col:201 _Dir 'const char *'
| |-ParmVarDecl 0x1c618ee61c8 <col:218, col:231> col:231 _Filename 'const char *'
| `-ParmVarDecl 0x1c618ee6248 <line:797:20, col:33> col:33 _Ext 'const char *'
|-FunctionDecl 0x1c618ee6a50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:799:78 _makepath 'void (char *, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'void (char *, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x1c618ee6668 <col:113, col:119> col:119 _Path 'char *'
| |-ParmVarDecl 0x1c618ee66e8 <col:137, col:151> col:151 _Drive 'const char *'
| |-ParmVarDecl 0x1c618ee6768 <col:170, col:184> col:184 _Dir 'const char *'
| |-ParmVarDecl 0x1c618ee67e8 <col:201, col:215> col:215 _Filename 'const char *'
| |-ParmVarDecl 0x1c618ee6868 <col:237, col:251> col:251 _Ext 'const char *'
| `-DeprecatedAttr 0x1c618ee6b18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ee6df0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:826:9, col:59> col:27 _onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x1c618ee6c80 <col:44, col:54> col:54 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1c618ee7010 <line:831:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x1c618ee6ec8 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x1c618eea208 <line:838:24, col:77> col:39 _putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1c618eea128 <col:54, col:67> col:67 _EnvString 'const char *'
|-FunctionDecl 0x1c618eea4c8 <line:839:28, col:107> col:44 _putenv_s 'errno_t (const char *, const char *) __attribute__((cdecl))':'errno_t (const char *, const char *)'
| |-ParmVarDecl 0x1c618eea2e0 <col:61, col:74> col:74 _Name 'const char *'
| `-ParmVarDecl 0x1c618eea360 <col:88, col:101> col:101 _Value 'const char *'
|-FunctionDecl 0x1c618eea790 <line:842:30> col:30 implicit _rotl 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x1c618eea830 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x1c618eea898 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1c618eea910 <col:30> Implicit
|-FunctionDecl 0x1c618eea968 prev 0x1c618eea790 <col:9, col:75> col:30 _rotl 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x1c618eea5a8 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x1c618eea628 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x1c618eeaa60 <col:30> Inherited Implicit
|-FunctionDecl 0x1c618eeac90 <line:843:34> col:34 implicit _rotl64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x1c618eead30 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1c618eead98 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1c618eeae10 <col:34> Implicit
|-FunctionDecl 0x1c618eeae68 prev 0x1c618eeac90 <col:9, col:85> col:34 _rotl64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x1c618eeaaa0 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x1c618eeab20 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x1c618eeaf60 <col:34> Inherited Implicit
|-FunctionDecl 0x1c618ee7100 <line:844:30> col:30 implicit _rotr 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x1c618ee71a0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x1c618ee7208 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1c618ee7280 <col:30> Implicit
|-FunctionDecl 0x1c618ee72d8 prev 0x1c618ee7100 <col:9, col:75> col:30 _rotr 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x1c618eeafa0 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x1c618eeb020 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x1c618ee73d0 <col:30> Inherited Implicit
|-FunctionDecl 0x1c618ee7590 <line:845:34> col:34 implicit _rotr64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x1c618ee7630 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1c618ee7698 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1c618ee7710 <col:34> Implicit
|-FunctionDecl 0x1c618ee7768 prev 0x1c618ee7590 <col:9, col:85> col:34 _rotr64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x1c618ee7410 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x1c618ee7490 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x1c618ee7860 <col:34> Inherited Implicit
|-FunctionDecl 0x1c618ee7c18 <line:849:9, col:171> col:25 _searchenv_s 'errno_t (const char *, const char *, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, const char *, char *, size_t)'
| |-ParmVarDecl 0x1c618ee78a0 <col:45, col:58> col:58 _Filename 'const char *'
| |-ParmVarDecl 0x1c618ee7920 <col:76, col:89> col:89 _EnvVar 'const char *'
| |-ParmVarDecl 0x1c618ee79a0 <col:127, col:134> col:134 _ResultPath 'char *'
| `-ParmVarDecl 0x1c618ee7a18 <col:152, col:159> col:159 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618eed120 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:851:78 _searchenv 'void (const char *, const char *, char *) __attribute__((cdecl))':'void (const char *, const char *, char *)'
| |-ParmVarDecl 0x1c618ee7dc8 <col:97, col:111> col:111 _Filename 'const char *'
| |-ParmVarDecl 0x1c618ee7e48 <col:129, col:143> col:143 _EnvVar 'const char *'
| |-ParmVarDecl 0x1c618ee7ec8 <col:176, col:182> col:182 _ResultPath 'char *'
| `-DeprecatedAttr 0x1c618eed1d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618eed7c0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:854:261> col:62 _splitpath 'void (const char *, char *, char *, char *, char *) __attribute__((cdecl))':'void (const char *, char *, char *, char *, char *)'
| |-ParmVarDecl 0x1c618eed3e0 <col:80, col:93> col:93 _FullPath 'const char *'
| |-ParmVarDecl 0x1c618eed460 <col:129, col:136> col:136 _Drive 'char *'
| |-ParmVarDecl 0x1c618eed4e0 <col:169, col:176> col:176 _Dir 'char *'
| |-ParmVarDecl 0x1c618eed560 <col:207, col:214> col:214 _Filename 'char *'
| |-ParmVarDecl 0x1c618eed5e0 <col:250, col:257> col:257 _Ext 'char *'
| `-DeprecatedAttr 0x1c618eed888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ef1160 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:855:40, line:859:79> line:855:57 _splitpath_s 'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t)'
| |-ParmVarDecl 0x1c618eed9d0 <col:77, col:90> col:90 _FullPath 'const char *'
| |-ParmVarDecl 0x1c618eeda50 <line:856:48, col:55> col:55 _Drive 'char *'
| |-ParmVarDecl 0x1c618eedac8 <col:68, col:75> col:75 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eedb48 <line:857:46, col:53> col:53 _Dir 'char *'
| |-ParmVarDecl 0x1c618eedbc0 <col:64, col:71> col:71 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eedc40 <line:858:51, col:58> col:58 _Filename 'char *'
| |-ParmVarDecl 0x1c618eedcb8 <col:74, col:81> col:81 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eedd38 <line:859:46, col:53> col:53 _Ext 'char *'
| `-ParmVarDecl 0x1c618eeddb0 <col:64, col:71> col:71 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ef1510 <line:862:9, col:204> col:24 _swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x1c618ef1278 <col:95, col:102> col:102 _Buf1 'char *'
| |-ParmVarDecl 0x1c618ef12f8 <col:174, col:181> col:181 _Buf2 'char *'
| `-ParmVarDecl 0x1c618ef1378 <col:188, col:192> col:192 _SizeInBytes 'int'
|-FunctionDecl 0x1c618ef17f8 <line:873:24, col:161> col:42 _wfullpath 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618ef15f0 <col:86, col:96> col:96 _FullPath 'wchar_t *'
| |-ParmVarDecl 0x1c618ef1668 <col:114, col:130> col:130 _Path 'const wchar_t *'
| `-ParmVarDecl 0x1c618ef16e0 <col:142, col:149> col:149 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618ef1d98 <line:879:40, line:880:40> line:879:56 _wmakepath_s 'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618ef18d8 <col:91, col:101> col:101 _PathResult 'wchar_t *'
| |-ParmVarDecl 0x1c618ef1950 <col:119, col:126> col:126 _SIZE 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618ef19c8 <col:144, col:160> col:160 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x1c618ef1a40 <col:179, col:195> col:195 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x1c618ef1ab8 <col:212, col:228> col:228 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x1c618ef1b30 <line:880:20, col:36> col:36 _Ext 'const wchar_t *'
|-FunctionDecl 0x1c618eee360 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:882:78 _wmakepath 'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618ef1f50 <col:114, col:123> col:123 _ResultPath 'wchar_t *'
| |-ParmVarDecl 0x1c618ef1fc8 <col:147, col:164> col:164 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x1c618ef2040 <col:183, col:200> col:200 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x1c618ef20b8 <col:217, col:234> col:234 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1c618eee130 <col:256, col:273> col:273 _Ext 'const wchar_t *'
| `-DeprecatedAttr 0x1c618eee428 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618eee6e0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:885:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x1c618eee568 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1c618eee890 <line:889:24, col:81> col:39 _wputenv 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1c618eee7b0 <col:55, col:71> col:71 _EnvString 'const wchar_t *'
|-FunctionDecl 0x1c618eeeb38 <line:890:28, col:114> col:44 _wputenv_s 'errno_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1c618eee960 <col:62, col:78> col:78 _Name 'const wchar_t *'
| `-ParmVarDecl 0x1c618eee9d8 <col:92, col:108> col:108 _Value 'const wchar_t *'
|-FunctionDecl 0x1c618eeef78 <line:891:9, col:181> col:25 _wsearchenv_s 'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618eeec10 <col:46, col:62> col:62 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1c618eeec88 <col:80, col:96> col:96 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x1c618eeed00 <col:134, col:144> col:144 _ResultPath 'wchar_t *'
| `-ParmVarDecl 0x1c618eeed78 <col:162, col:169> col:169 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618eeb3c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:893:78 _wsearchenv 'void (const wchar_t *, const wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x1c618eeb100 <col:98, col:115> col:115 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1c618eeb178 <col:133, col:150> col:150 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x1c618eeb1f0 <col:183, col:192> col:192 _ResultPath 'wchar_t *'
| `-DeprecatedAttr 0x1c618eeb478 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618eeba90 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:896:278> col:63 _wsplitpath 'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x1c618eeb678 <col:82, col:98> col:98 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x1c618eeb6f0 <col:134, col:144> col:144 _Drive 'wchar_t *'
| |-ParmVarDecl 0x1c618eeb768 <col:177, col:187> col:187 _Dir 'wchar_t *'
| |-ParmVarDecl 0x1c618eeb7e0 <col:218, col:228> col:228 _Filename 'wchar_t *'
| |-ParmVarDecl 0x1c618eeb858 <col:264, col:274> col:274 _Ext 'wchar_t *'
| `-DeprecatedAttr 0x1c618eebb58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618eec370 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:897:21, line:901:82> line:897:37 _wsplitpath_s 'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t)'
| |-ParmVarDecl 0x1c618eebc98 <col:58, col:74> col:74 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x1c618eebd10 <line:898:48, col:58> col:58 _Drive 'wchar_t *'
| |-ParmVarDecl 0x1c618eebd88 <col:71, col:78> col:78 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eebe00 <line:899:46, col:56> col:56 _Dir 'wchar_t *'
| |-ParmVarDecl 0x1c618eebe78 <col:67, col:74> col:74 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eebef0 <line:900:51, col:61> col:61 _Filename 'wchar_t *'
| |-ParmVarDecl 0x1c618eebf68 <col:77, col:84> col:84 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618eebfe0 <line:901:46, col:56> col:56 _Ext 'wchar_t *'
| `-ParmVarDecl 0x1c618eec058 <col:67, col:74> col:74 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618eec690 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:909:78> col:50 _seterrormode 'void (int) __attribute__((cdecl))':'void (int)'
| |-ParmVarDecl 0x1c618eec588 <col:69, col:73> col:73 _Mode 'int'
| `-DeprecatedAttr 0x1c618eec738 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details." ""
|-FunctionDecl 0x1c618eecb28 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:910:97> col:42 _beep 'void (unsigned int, unsigned int) __attribute__((cdecl))':'void (unsigned int, unsigned int)'
| |-ParmVarDecl 0x1c618eec948 <col:53, col:62> col:62 _Frequency 'unsigned int'
| |-ParmVarDecl 0x1c618eec9c8 <col:79, col:88> col:88 _Duration 'unsigned int'
| `-DeprecatedAttr 0x1c618eecbd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details." ""
|-FunctionDecl 0x1c618eecf20 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:911:78> col:43 _sleep 'void (unsigned long) __attribute__((cdecl))':'void (unsigned long)'
| |-ParmVarDecl 0x1c618eecde0 <col:55, col:69> col:69 _Duration 'unsigned long'
| `-DeprecatedAttr 0x1c618eecfc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details." ""
|-FunctionDecl 0x1c618ef35f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:934:187> col:102 ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1c618ef3330 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x1c618ef33b0 <col:130, col:134> col:134 _NumOfDigits 'int'
| |-ParmVarDecl 0x1c618ef3430 <col:154, col:160> col:160 _PtDec 'int *'
| |-ParmVarDecl 0x1c618ef34b0 <col:174, col:180> col:180 _PtSign 'int *'
| |-DeprecatedAttr 0x1c618ef36b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ecvt. See online help for details." ""
| `-DeprecatedAttr 0x1c618ef37a8 <col:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ef3ce0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:935:184> col:102 fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1c618ef3a20 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x1c618ef3aa0 <col:130, col:134> col:134 _NumOfDec 'int'
| |-ParmVarDecl 0x1c618ef3b20 <col:151, col:157> col:157 _PtDec 'int *'
| |-ParmVarDecl 0x1c618ef3ba0 <col:171, col:177> col:177 _PtSign 'int *'
| |-DeprecatedAttr 0x1c618ef3da0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcvt. See online help for details." ""
| `-DeprecatedAttr 0x1c618ef3e98 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ef0308 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:936:179> col:96 gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x1c618ef4110 <col:106, col:113> col:113 _Val 'double'
| |-ParmVarDecl 0x1c618ef0168 <col:124, col:128> col:128 _NumOfDigits 'int'
| |-ParmVarDecl 0x1c618ef01e8 <col:165, col:172> col:172 _DstBuf 'char *'
| |-DeprecatedAttr 0x1c618ef03c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _gcvt. See online help for details." ""
| `-DeprecatedAttr 0x1c618ef04b8 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ef0950 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:937:170> col:96 itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x1c618ef0730 <col:106, col:110> col:110 _Val 'int'
| |-ParmVarDecl 0x1c618ef07b0 <col:139, col:146> col:146 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618ef0830 <col:160, col:164> col:164 _Radix 'int'
| |-DeprecatedAttr 0x1c618ef0a08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _itoa. See online help for details." ""
| `-DeprecatedAttr 0x1c618ef0b00 <col:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ef0f98 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:938:171> col:96 ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x1c618ef0d78 <col:106, col:111> col:111 _Val 'long'
| |-ParmVarDecl 0x1c618ef0df8 <col:140, col:147> col:147 _DstBuf 'char *'
| |-ParmVarDecl 0x1c618ef0e78 <col:161, col:165> col:165 _Radix 'int'
| |-DeprecatedAttr 0x1c618ef1050 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ltoa. See online help for details." ""
| `-DeprecatedAttr 0x1c618ef51a0 <col:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ef5438 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:941:108> col:71 putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x1c618ef5358 <col:85, col:98> col:98 _EnvString 'const char *'
| `-DeprecatedAttr 0x1c618ef54e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putenv. See online help for details." ""
|-FunctionDecl 0x1c618ef58c0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:944:245> col:128 swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x1c618ef56a8 <col:165, col:172> col:172 _Buf1 'char *'
| |-ParmVarDecl 0x1c618ef5728 <col:210, col:217> col:217 _Buf2 'char *'
| |-ParmVarDecl 0x1c618ef57a8 <col:229, col:233> col:233 _SizeInBytes 'int'
| `-DeprecatedAttr 0x1c618ef5978 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _swab. See online help for details." ""
|-FunctionDecl 0x1c618ef5e60 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:945:181> col:96 ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x1c618ef5c40 <col:107, col:121> col:121 _Val 'unsigned long'
| |-ParmVarDecl 0x1c618ef5cc0 <col:150, col:157> col:157 _Dstbuf 'char *'
| |-ParmVarDecl 0x1c618ef5d40 <col:171, col:175> col:175 _Radix 'int'
| |-DeprecatedAttr 0x1c618ef5f18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ultoa. See online help for details." ""
| `-DeprecatedAttr 0x1c618ef6010 <col:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1c618ef6208 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:64:18, line:947:48> col:18 onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x1c618ef6120 <line:64:18, line:947:43> col:43 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-RecordDecl 0x1c618ef62c8 <.//openssl//file_jk/after\crypto\ec/ec_lcl.h:52:1, line:180:1> line:52:8 struct ec_method_st definition
| |-FieldDecl 0x1c618ef6398 <line:54:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x1c618ef6408 <line:56:5, col:9> col:9 field_type 'int'
| |-FieldDecl 0x1c618ef65a8 <line:61:5, col:34> col:11 group_init 'int (*)(int *)'
| |-FieldDecl 0x1c618ef6770 <line:62:5, col:37> col:12 group_finish 'void (*)(int *)'
| |-FieldDecl 0x1c618ef6880 <line:63:5, col:43> col:12 group_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x1c618ef6af0 <line:64:5, col:52> col:11 group_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1c618ef6f08 <line:67:5, line:68:54> line:67:11 group_set_curve 'int (*)(int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x1c618ef8378 <line:69:5, line:70:37> line:69:11 group_get_curve 'int (*)(const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x1c618ef8548 <line:72:5, col:46> col:11 group_get_degree 'int (*)(const int *)'
| |-FieldDecl 0x1c618ef8660 <line:73:5, col:46> col:11 group_order_bits 'int (*)(const int *)'
| |-FieldDecl 0x1c618ef88d0 <line:75:5, col:64> col:11 group_check_discriminant 'int (*)(const int *, int *)'
| |-FieldDecl 0x1c618ef89e8 <line:80:5, col:34> col:11 point_init 'int (*)(int *)'
| |-FieldDecl 0x1c618ef8af8 <line:81:5, col:37> col:12 point_finish 'void (*)(int *)'
| |-FieldDecl 0x1c618ef8c08 <line:82:5, col:43> col:12 point_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x1c618ef8da8 <line:83:5, col:52> col:11 point_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1c618ef8f48 <line:92:5, col:63> col:11 point_set_to_infinity 'int (*)(const int *, int *)'
| |-FieldDecl 0x1c618ef9420 <line:93:5, line:96:76> line:93:11 point_set_Jprojective_coordinates_GFp 'int (*)(const int *, int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x1c618ef98d0 <line:97:5, line:100:59> line:97:11 point_get_Jprojective_coordinates_GFp 'int (*)(const int *, const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x1c618ef9ce8 <line:101:5, line:103:50> line:101:11 point_set_affine_coordinates 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1c618efa0f8 <line:104:5, line:105:72> line:104:11 point_get_affine_coordinates 'int (*)(const int *, const int *, int *, int *, int *)'
| |-FieldDecl 0x1c618ef44c8 <line:106:5, line:108:54> line:106:11 point_set_compressed_coordinates 'int (*)(const int *, int *, const int *, int, int *)'
| |-FieldDecl 0x1c618ef49e8 <line:110:5, line:112:46> line:110:14 point2oct 'size_t (*)(const int *, const int *, int, unsigned char *, size_t, int *)'
| |-FieldDecl 0x1c618ef4e48 <line:113:5, line:114:43> line:113:11 oct2point 'int (*)(const int *, int *, const unsigned char *, size_t, int *)'
| |-FieldDecl 0x1c618ef2170 <line:116:5, line:117:44> line:116:11 add 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1c618ef2500 <line:118:5, col:75> col:11 dbl 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1c618ef27f8 <line:119:5, col:58> col:11 invert 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x1c618ef2a60 <line:123:5, col:62> col:11 is_at_infinity 'int (*)(const int *, const int *)'
| |-FieldDecl 0x1c618ef2d58 <line:124:5, col:69> col:11 is_on_curve 'int (*)(const int *, const int *, int *)'
| |-FieldDecl 0x1c618ef30e0 <line:125:5, line:126:31> line:125:11 point_cmp 'int (*)(const int *, const int *, const int *, int *)'
| |-FieldDecl 0x1c618efa3a8 <line:128:5, col:63> col:11 make_affine 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x1c618efa820 <line:129:5, line:130:40> line:129:11 points_make_affine 'int (*)(const int *, size_t, int **, int *)'
| |-FieldDecl 0x1c618efae58 <line:136:5, line:138:25> line:136:11 mul 'int (*)(const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-FieldDecl 0x1c618efb0c0 <line:139:5, col:54> col:11 precompute_mult 'int (*)(int *, int *)'
| |-FieldDecl 0x1c618f00250 <line:140:5, col:55> col:11 have_precompute_mult 'int (*)(const int *)'
| |-FieldDecl 0x1c618f00588 <line:148:5, line:149:48> line:148:11 field_mul 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1c618f00838 <line:150:5, col:77> col:11 field_sqr 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1c618f00b70 <line:151:5, line:152:48> line:151:11 field_div 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1c618f00e20 <line:159:5, col:77> col:11 field_inv 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1c618f010d0 <line:161:5, line:162:34> line:161:11 field_encode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1c618f023b0 <line:164:5, line:165:34> line:164:11 field_decode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1c618f025d8 <line:166:5, col:67> col:11 field_set_to_one 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x1c618f02900 <line:168:5, col:75> col:14 priv2oct 'size_t (*)(const int *, unsigned char *, size_t)'
| |-FieldDecl 0x1c618f02c28 <line:169:5, col:72> col:11 oct2priv 'int (*)(int *, const unsigned char *, size_t)'
| |-FieldDecl 0x1c618f02dc8 <line:170:5, col:61> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x1c618f02ee0 <line:171:5, col:32> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x1c618f02ff8 <line:172:5, col:40> col:11 keycheck 'int (*)(const int *)'
| |-FieldDecl 0x1c618f03110 <line:173:5, col:35> col:11 keygenpub 'int (*)(int *)'
| |-FieldDecl 0x1c618eff288 <line:174:5, col:50> col:11 keycopy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1c618eff398 <line:175:5, col:36> col:12 keyfinish 'void (*)(int *)'
| |-FieldDecl 0x1c618eff7a0 <line:177:5, line:178:72> line:177:11 ecdh_compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| `-FieldDecl 0x1c618eff9c8 <line:179:5, col:77> col:11 blind_coordinates 'int (*)(const int *, int *, int *)'
|-RecordDecl 0x1c618effa20 <line:185:9, col:16> col:16 struct nistp224_pre_comp_st
|-TypedefDecl 0x1c618effb38 <col:1, col:37> col:37 referenced NISTP224_PRE_COMP 'struct nistp224_pre_comp_st':'struct nistp224_pre_comp_st'
| `-ElaboratedType 0x1c618effae0 'struct nistp224_pre_comp_st' sugar
|   `-RecordType 0x1c618effac0 'struct nistp224_pre_comp_st'
|     `-Record 0x1c618effa20 'nistp224_pre_comp_st'
|-RecordDecl 0x1c618effba8 <line:186:9, col:16> col:16 struct nistp256_pre_comp_st
|-TypedefDecl 0x1c618effcb8 <col:1, col:37> col:37 referenced NISTP256_PRE_COMP 'struct nistp256_pre_comp_st':'struct nistp256_pre_comp_st'
| `-ElaboratedType 0x1c618effc60 'struct nistp256_pre_comp_st' sugar
|   `-RecordType 0x1c618effc40 'struct nistp256_pre_comp_st'
|     `-Record 0x1c61907dc28 'nistp256_pre_comp_st'
|-RecordDecl 0x1c618effd28 <line:187:9, col:16> col:16 struct nistp521_pre_comp_st
|-TypedefDecl 0x1c618effe38 <col:1, col:37> col:37 referenced NISTP521_PRE_COMP 'struct nistp521_pre_comp_st':'struct nistp521_pre_comp_st'
| `-ElaboratedType 0x1c618effde0 'struct nistp521_pre_comp_st' sugar
|   `-RecordType 0x1c618effdc0 'struct nistp521_pre_comp_st'
|     `-Record 0x1c618effd28 'nistp521_pre_comp_st'
|-RecordDecl 0x1c618effea8 <line:188:9, col:16> col:16 struct nistz256_pre_comp_st
|-TypedefDecl 0x1c618efffb8 <col:1, col:37> col:37 referenced NISTZ256_PRE_COMP 'struct nistz256_pre_comp_st':'struct nistz256_pre_comp_st'
| `-ElaboratedType 0x1c618efff60 'struct nistz256_pre_comp_st' sugar
|   `-RecordType 0x1c618efff40 'struct nistz256_pre_comp_st'
|     `-Record 0x1c618effea8 'nistz256_pre_comp_st'
|-RecordDecl 0x1c618f00028 <line:189:9, col:16> col:16 struct ec_pre_comp_st
|-TypedefDecl 0x1c618f00138 <col:1, col:31> col:31 referenced EC_PRE_COMP 'struct ec_pre_comp_st':'struct ec_pre_comp_st'
| `-ElaboratedType 0x1c618f000e0 'struct ec_pre_comp_st' sugar
|   `-RecordType 0x1c618f000c0 'struct ec_pre_comp_st'
|     `-Record 0x1c618f00028 'ec_pre_comp_st'
|-RecordDecl 0x1c618f001a8 <line:191:1, line:256:1> line:191:8 invalid struct ec_group_st definition
| |-FieldDecl 0x1c618efb238 <line:192:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x1c618efb2a8 <line:193:5, col:15> col:15 invalid generator 'int *'
| |-FieldDecl 0x1c618efb318 <line:194:5, col:13> col:13 invalid order 'int *'
| |-FieldDecl 0x1c618efb388 <col:5, col:21> col:21 invalid cofactor 'int *'
| |-FieldDecl 0x1c618efb3f8 <line:195:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x1c618efb468 <line:196:5, col:9> col:9 asn1_flag 'int'
| |-FieldDecl 0x1c618efb4d8 <line:197:5, col:29> col:29 invalid asn1_form 'int'
| |-FieldDecl 0x1c618efb548 <line:198:5, col:20> col:20 seed 'unsigned char *'
| |-FieldDecl 0x1c618efb5b0 <line:200:5, col:12> col:12 seed_len 'size_t':'unsigned long long'
| |-FieldDecl 0x1c618efb620 <line:210:5, col:13> col:13 invalid field 'int *'
| |-FieldDecl 0x1c618efb720 <line:218:5, col:15> col:9 poly 'int [6]'
| |-FieldDecl 0x1c618efb790 <line:226:5, col:13> col:13 invalid a 'int *'
| |-FieldDecl 0x1c618efb800 <col:5, col:17> col:17 invalid b 'int *'
| |-FieldDecl 0x1c618efb870 <line:228:5, col:9> col:9 a_is_minus3 'int'
| |-FieldDecl 0x1c618efb8e0 <line:230:5, col:11> col:11 field_data1 'void *'
| |-FieldDecl 0x1c618efb950 <line:232:5, col:11> col:11 field_data2 'void *'
| |-FieldDecl 0x1c618efbce0 <line:234:5, line:235:36> line:234:11 field_mod_func 'int (*)(int *, const int *, const int *, int *)'
| |-FieldDecl 0x1c618efbd50 <line:237:5, col:18> col:18 invalid mont_data 'int *'
| |-EnumDecl 0x1c618efbda8 <line:244:5, line:248:5> line:244:5
| | |-EnumConstantDecl 0x1c618efbe80 <line:245:9> col:9 PCT_none 'int'
| | |-EnumConstantDecl 0x1c618efbed8 <line:246:9> col:9 PCT_nistp224 'int'
| | |-EnumConstantDecl 0x1c618efbf30 <col:23> col:23 referenced PCT_nistp256 'int'
| | |-EnumConstantDecl 0x1c618efbf88 <col:37> col:37 PCT_nistp521 'int'
| | |-EnumConstantDecl 0x1c618efbfe0 <col:51> col:51 PCT_nistz256 'int'
| | `-EnumConstantDecl 0x1c618efc038 <line:247:9> col:9 PCT_ec 'int'
| |-FieldDecl 0x1c618efc0e8 <line:244:5, line:248:7> col:7 pre_comp_type 'enum (anonymous enum at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:244:5)':'enum ec_group_st::(anonymous at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:244:5)'
| |-RecordDecl 0x1c618efc140 <line:249:5, line:255:5> line:249:5 union definition
| | |-FieldDecl 0x1c618f03308 <line:250:9, col:28> col:28 nistp224 'NISTP224_PRE_COMP *'
| | |-FieldDecl 0x1c618f033e8 <line:251:9, col:28> col:28 nistp256 'NISTP256_PRE_COMP *'
| | |-FieldDecl 0x1c618f034c8 <line:252:9, col:28> col:28 nistp521 'NISTP521_PRE_COMP *'
| | |-FieldDecl 0x1c618f035a8 <line:253:9, col:28> col:28 nistz256 'NISTZ256_PRE_COMP *'
| | `-FieldDecl 0x1c618f03688 <line:254:9, col:22> col:22 ec 'EC_PRE_COMP *'
| `-FieldDecl 0x1c618f03738 <line:249:5, line:255:7> col:7 pre_comp 'union (anonymous union at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:249:5)':'union ec_group_st::(anonymous at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:249:5)'
|-RecordDecl 0x1c618f03790 <line:263:1, line:276:1> line:263:8 invalid struct ec_key_st definition
| |-FieldDecl 0x1c618f03868 <line:264:5, col:26> col:26 invalid meth 'const int *'
| |-FieldDecl 0x1c618f038d8 <line:265:5, col:13> col:13 invalid engine 'int *'
| |-FieldDecl 0x1c618f03948 <line:266:5, col:9> col:9 version 'int'
| |-FieldDecl 0x1c618f039b8 <line:267:5, col:15> col:15 invalid group 'int *'
| |-FieldDecl 0x1c618f03a28 <line:268:5, col:15> col:15 invalid pub_key 'int *'
| |-FieldDecl 0x1c618f03a98 <line:269:5, col:13> col:13 invalid priv_key 'int *'
| |-FieldDecl 0x1c618f03b08 <line:270:5, col:18> col:18 enc_flag 'unsigned int'
| |-FieldDecl 0x1c618f03b78 <line:271:5, col:29> col:29 invalid conv_form 'int'
| |-FieldDecl 0x1c618f03be8 <line:272:5, col:9> col:9 references 'int'
| |-FieldDecl 0x1c618f03c58 <line:273:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x1c618f03cc8 <line:274:5, col:20> col:20 invalid ex_data 'int'
| `-FieldDecl 0x1c618f03d38 <line:275:5, col:20> col:20 invalid lock 'int *'
|-RecordDecl 0x1c618f03d90 <line:278:1, line:292:1> line:278:8 invalid struct ec_point_st definition
| |-FieldDecl 0x1c618f03e68 <line:279:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x1c618f03ed8 <line:281:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x1c618f03f48 <line:286:5, col:13> col:13 invalid X 'int *'
| |-FieldDecl 0x1c618f03fb8 <line:287:5, col:13> col:13 invalid Y 'int *'
| |-FieldDecl 0x1c618f04028 <line:288:5, col:13> col:13 invalid Z 'int *'
| `-FieldDecl 0x1c618f04098 <line:290:5, col:9> col:9 Z_is_one 'int'
|-FunctionDecl 0x1c618efc210 <line:295:1, line:305:1> line:295:24 invalid ec_point_is_compat 'int (const int *, const int *)' static
| |-ParmVarDecl 0x1c618f04108 <col:43, col:59> col:59 invalid point 'const int *'
| |-ParmVarDecl 0x1c618f04188 <line:296:43, col:59> col:59 invalid group 'const int *'
| `-CompoundStmt 0x1c618efc3c8 <line:297:1, line:305:1>
|   |-IfStmt 0x1c618efc378 <line:298:5, line:302:16>
|   | |-OpaqueValueExpr 0x1c618efc360 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1c618efc350 <col:9, col:16>
|   |   `-IntegerLiteral 0x1c618efc328 <col:16> 'int' 0
|   `-ReturnStmt 0x1c618efc3b8 <line:304:5, col:12>
|     `-IntegerLiteral 0x1c618efc390 <col:12> 'int' 1
|-FunctionDecl 0x1c618efc4e8 <line:308:1, col:64> col:20 EC_nistp224_pre_comp_dup 'NISTP224_PRE_COMP *(NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efc3f8 <col:45, col:63> col:64 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x1c618efc6a8 <line:309:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efc5b8 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1c618efc868 <line:310:1, col:64> col:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efc778 <col:45, col:63> col:64 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x1c618efca28 <line:311:1, col:64> col:20 EC_nistz256_pre_comp_dup 'NISTZ256_PRE_COMP *(NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efc938 <col:45, col:63> col:64 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x1c618efcb88 prev 0x1c618efc6a8 <line:312:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efcaf8 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1c618efcd38 <line:313:1, col:46> col:14 EC_ec_pre_comp_dup 'EC_PRE_COMP *(EC_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efcc40 <col:33, col:45> col:46 'EC_PRE_COMP *'
|-FunctionDecl 0x1c618efcea0 <line:315:1, col:38> col:6 invalid EC_pre_comp_free 'void (int *)'
| `-ParmVarDecl 0x1c618efce10 <col:23, col:33> col:33 invalid group 'int *'
|-FunctionDecl 0x1c618efd048 <line:316:1, col:51> col:6 EC_nistp224_pre_comp_free 'void (NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efcf58 <col:32, col:50> col:51 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x1c618efe230 <line:317:1, col:51> col:6 used EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efd118 <col:32, col:50> col:51 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1c618efe3f8 <line:318:1, col:51> col:6 EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efe300 <col:32, col:50> col:51 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x1c618efe5b8 <line:319:1, col:51> col:6 EC_nistz256_pre_comp_free 'void (NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efe4c8 <col:32, col:50> col:51 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x1c618efe778 <line:320:1, col:39> col:6 EC_ec_pre_comp_free 'void (EC_PRE_COMP *)'
| `-ParmVarDecl 0x1c618efe688 <col:26, col:38> col:39 'EC_PRE_COMP *'
|-FunctionDecl 0x1c618efec30 <line:326:1, line:328:25> line:326:5 invalid ec_wNAF_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1c618efe850 <col:17, col:33> col:33 invalid group 'const int *'
| |-ParmVarDecl 0x1c618efe8d0 <col:40, col:50> col:50 invalid r 'int *'
| |-ParmVarDecl 0x1c618efe950 <col:53, col:67> col:67 invalid scalar 'const int *'
| |-ParmVarDecl 0x1c618efe9c8 <line:327:17, col:24> col:24 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618efea58 <col:29, <invalid sloc>> col:45 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1c618efeae8 <col:55, <invalid sloc>> col:69 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1c618efeb68 <line:328:17, <invalid sloc>> col:25 invalid 'int *'
|-FunctionDecl 0x1c618efee40 <line:329:1, col:54> col:5 invalid ec_wNAF_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1c618efed20 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x1c618efeda0 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1c618efefa0 <line:330:1, col:55> col:5 invalid ec_wNAF_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1c618efef08 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x1c618eff0f8 <line:333:1, col:40> col:5 invalid ec_GFp_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x1c618eff060 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x1c618f062d8 <line:334:1, col:43> col:6 invalid ec_GFp_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x1c618eff1b8 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x1c618f06428 <line:335:1, col:49> col:6 invalid ec_GFp_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1c618f06398 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x1c618f06608 <line:336:1, col:58> col:5 invalid ec_GFp_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1c618f064e8 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x1c618f06568 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x1c618f06988 <line:337:1, line:338:77> line:337:5 invalid ec_GFp_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f066d0 <col:35, <invalid sloc>> col:45 invalid 'int *'
| |-ParmVarDecl 0x1c618f06750 <col:47, col:61> col:61 invalid p 'const int *'
| |-ParmVarDecl 0x1c618f067d0 <line:338:35, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f06850 <col:52, col:66> col:66 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f068d0 <col:69, <invalid sloc>> col:77 invalid 'int *'
|-FunctionDecl 0x1c618f06d20 <line:339:1, line:340:54> line:339:5 invalid ec_GFp_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x1c618f06a68 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| |-ParmVarDecl 0x1c618f06ae8 <col:53, col:61> col:61 invalid p 'int *'
| |-ParmVarDecl 0x1c618f06b68 <col:64, col:72> col:72 invalid a 'int *'
| |-ParmVarDecl 0x1c618f06be8 <line:340:35, col:43> col:43 invalid b 'int *'
| `-ParmVarDecl 0x1c618f06c68 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1c618f06e98 <line:341:1, col:52> col:5 invalid ec_GFp_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x1c618f06e00 <col:36, <invalid sloc>> col:52 invalid 'const int *'
|-FunctionDecl 0x1c618f07078 <line:342:1, col:70> col:5 invalid ec_GFp_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x1c618f06f58 <col:44, <invalid sloc>> col:60 invalid 'const int *'
| `-ParmVarDecl 0x1c618f06fd8 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x1c618f071d8 <line:343:1, col:40> col:5 invalid ec_GFp_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x1c618f07140 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x1c618f0a380 <line:344:1, col:43> col:6 invalid ec_GFp_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x1c618f0a2f0 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x1c618f0a4d0 <line:345:1, col:49> col:6 invalid ec_GFp_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1c618f0a440 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x1c618f0a6b0 <line:346:1, col:58> col:5 invalid ec_GFp_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1c618f0a590 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x1c618f0a610 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x1c618f0a898 <line:347:1, col:69> col:5 invalid ec_GFp_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x1c618f0a778 <col:41, <invalid sloc>> col:57 invalid 'const int *'
| `-ParmVarDecl 0x1c618f0a7f8 <col:59, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x1c618f0aca0 <line:348:1, line:351:76> line:348:5 invalid ec_GFp_simple_set_Jprojective_coordinates_GFp 'int (const int *, int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f0a960 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0a9e0 <line:349:51, <invalid sloc>> col:61 invalid 'int *'
| |-ParmVarDecl 0x1c618f0aa60 <col:63, col:77> col:77 invalid x 'const int *'
| |-ParmVarDecl 0x1c618f0aae0 <line:350:51, col:65> col:65 invalid y 'const int *'
| |-ParmVarDecl 0x1c618f0ab60 <line:351:51, col:65> col:65 invalid z 'const int *'
| `-ParmVarDecl 0x1c618f0abe0 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x1c618f0b0c8 <line:352:1, line:355:59> line:352:5 invalid ec_GFp_simple_get_Jprojective_coordinates_GFp 'int (const int *, const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x1c618f0ad88 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0ae08 <line:353:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0ae88 <col:69, col:77> col:77 invalid x 'int *'
| |-ParmVarDecl 0x1c618f0af08 <line:354:51, col:59> col:59 invalid y 'int *'
| |-ParmVarDecl 0x1c618f0af88 <col:62, col:70> col:70 invalid z 'int *'
| `-ParmVarDecl 0x1c618f0b008 <line:355:51, <invalid sloc>> col:59 invalid 'int *'
|-FunctionDecl 0x1c618f05458 <line:356:1, line:358:73> line:356:5 invalid ec_GFp_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f0b1b0 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0b230 <col:66, <invalid sloc>> col:76 invalid 'int *'
| |-ParmVarDecl 0x1c618f052a0 <line:357:48, col:62> col:62 invalid x 'const int *'
| |-ParmVarDecl 0x1c618f05320 <line:358:48, col:62> col:62 invalid y 'const int *'
| `-ParmVarDecl 0x1c618f053a0 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x1c618f057f0 <line:359:1, line:361:67> line:359:5 invalid ec_GFp_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1c618f05538 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x1c618f055b8 <line:360:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x1c618f05638 <col:66, col:74> col:74 invalid x 'int *'
| |-ParmVarDecl 0x1c618f056b8 <line:361:48, col:56> col:56 invalid y 'int *'
| `-ParmVarDecl 0x1c618f05738 <col:59, <invalid sloc>> col:67 invalid 'int *'
|-FunctionDecl 0x1c618f05b88 <line:362:1, line:364:54> line:362:5 invalid ec_GFp_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x1c618f058d0 <col:46, <invalid sloc>> col:62 invalid 'const int *'
| |-ParmVarDecl 0x1c618f05950 <col:64, <invalid sloc>> col:74 invalid 'int *'
| |-ParmVarDecl 0x1c618f059d0 <line:363:46, col:60> col:60 invalid x 'const int *'
| |-ParmVarDecl 0x1c618f05a50 <col:63, col:67> col:67 y_bit 'int'
| `-ParmVarDecl 0x1c618f05ad0 <line:364:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1c618f05f98 <line:365:1, line:367:72> line:365:8 invalid ec_GFp_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1c618f05c68 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x1c618f05ce8 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| |-ParmVarDecl 0x1c618f05d68 <line:366:32, col:56> col:56 invalid form 'int'
| |-ParmVarDecl 0x1c618f05de8 <line:367:32, col:47> col:47 buf 'unsigned char *'
| |-ParmVarDecl 0x1c618f05e60 <col:52, col:59> col:59 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618f05ee0 <col:64, <invalid sloc>> col:72 invalid 'int *'
|-FunctionDecl 0x1c618f07378 <line:368:1, line:369:75> line:368:5 invalid ec_GFp_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1c618f06080 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1c618f06100 <col:47, <invalid sloc>> col:57 invalid 'int *'
| |-ParmVarDecl 0x1c618f06180 <line:369:29, col:50> col:50 buf 'const unsigned char *'
| |-ParmVarDecl 0x1c618f061f8 <col:55, col:62> col:62 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618f072c0 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x1c618f07710 <line:370:1, line:371:50> line:370:5 invalid ec_GFp_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f07458 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x1c618f074d8 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x1c618f07558 <col:54, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f075d8 <line:371:23, col:39> col:39 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f07658 <col:42, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x1c618f07a20 <line:372:1, line:373:31> line:372:5 invalid ec_GFp_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f077f0 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x1c618f07870 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x1c618f078f0 <col:54, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1c618f07970 <line:373:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x1c618f07ca0 <line:374:1, col:64> col:5 invalid ec_GFp_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1c618f07af8 <col:26, <invalid sloc>> col:42 invalid 'const int *'
| |-ParmVarDecl 0x1c618f07b78 <col:44, <invalid sloc>> col:54 invalid 'int *'
| `-ParmVarDecl 0x1c618f07bf8 <col:56, <invalid sloc>> col:64 invalid 'int *'
|-FunctionDecl 0x1c618f07e90 <line:375:1, col:68> col:5 invalid ec_GFp_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x1c618f07d70 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| `-ParmVarDecl 0x1c618f07df0 <col:52, <invalid sloc>> col:68 invalid 'const int *'
|-FunctionDecl 0x1c618f08100 <line:376:1, col:75> col:5 invalid ec_GFp_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f07f58 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x1c618f07fd8 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| `-ParmVarDecl 0x1c618f08058 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x1c618f08418 <line:377:1, line:378:31> line:377:5 invalid ec_GFp_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f081d0 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x1c618f08250 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f082e8 <col:60, col:76> col:76 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f08368 <line:378:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x1c618f08698 <line:379:1, col:69> col:5 invalid ec_GFp_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1c618f084f0 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x1c618f08570 <col:49, <invalid sloc>> col:59 invalid 'int *'
| `-ParmVarDecl 0x1c618f085f0 <col:61, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x1c618f089a0 <line:380:1, line:381:60> line:380:5 invalid ec_GFp_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x1c618f08768 <col:38, <invalid sloc>> col:54 invalid 'const int *'
| |-ParmVarDecl 0x1c618f087e0 <col:56, col:63> col:63 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f08870 <line:381:38, <invalid sloc>> col:48 invalid 'int **':'int **'
| `-ParmVarDecl 0x1c618f088f0 <col:52, <invalid sloc>> col:60 invalid 'int *'
|-FunctionDecl 0x1c618f08d30 <line:382:1, line:383:54> line:382:5 invalid ec_GFp_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f08a78 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1c618f08af8 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x1c618f08b78 <col:58, col:72> col:72 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f08bf8 <line:383:29, col:43> col:43 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f08c78 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1c618f09040 <line:384:1, line:385:37> line:384:5 invalid ec_GFp_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f08e10 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1c618f08e90 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x1c618f08f10 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x1c618f08f90 <line:385:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x1c618f09390 <line:386:1, line:387:37> line:386:5 invalid ec_GFp_simple_field_inv 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f09118 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1c618f09198 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x1c618f09218 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x1c618f092e0 <line:387:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x1c618f09610 <line:388:1, line:389:48> line:388:5 invalid ec_GFp_simple_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1c618f09468 <col:37, col:53> col:53 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f094e8 <col:60, col:70> col:70 invalid p 'int *'
| `-ParmVarDecl 0x1c618f09568 <line:389:37, col:45> col:45 invalid ctx 'int *'
|-FunctionDecl 0x1c618f09778 <line:392:1, col:38> col:5 invalid ec_GFp_mont_group_init 'int (int *)'
| `-ParmVarDecl 0x1c618f096e0 <col:28, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1c618f09af0 <line:393:1, line:394:58> line:393:5 invalid ec_GFp_mont_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f09838 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x1c618f098b8 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x1c618f09938 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f099b8 <line:394:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f09a38 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x1c618f09c60 <line:395:1, col:41> col:6 invalid ec_GFp_mont_group_finish 'void (int *)'
| `-ParmVarDecl 0x1c618f09bd0 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x1c618f09db0 <line:396:1, col:47> col:6 invalid ec_GFp_mont_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1c618f09d20 <col:37, <invalid sloc>> col:47 invalid 'int *'
|-FunctionDecl 0x1c618f09f90 <line:397:1, col:56> col:5 invalid ec_GFp_mont_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1c618f09e70 <col:28, <invalid sloc>> col:38 invalid 'int *'
| `-ParmVarDecl 0x1c618f09ef0 <col:40, <invalid sloc>> col:56 invalid 'const int *'
|-FunctionDecl 0x1c618f0b350 <line:398:1, line:399:52> line:398:5 invalid ec_GFp_mont_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f0a058 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0a0d8 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1c618f0a158 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f0a1d8 <line:399:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f0a258 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x1c618f0b660 <line:400:1, line:401:35> line:400:5 invalid ec_GFp_mont_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f0b430 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0b4b0 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1c618f0b530 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1c618f0b5b0 <line:401:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x1c618f0b968 <line:402:1, line:403:35> line:402:5 invalid ec_GFp_mont_field_inv 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f0b738 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0b7b8 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1c618f0b838 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1c618f0b8b8 <line:403:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x1c618f0bc70 <line:404:1, line:405:38> line:404:5 invalid ec_GFp_mont_field_encode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f0ba40 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0bac0 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1c618f0bb40 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x1c618f0bbc0 <line:405:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1c618f0bf78 <line:406:1, line:407:38> line:406:5 invalid ec_GFp_mont_field_decode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f0bd48 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0bdc8 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1c618f0be48 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x1c618f0bec8 <line:407:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1c618f0c1f8 <line:408:1, col:71> col:5 invalid ec_GFp_mont_field_set_to_one 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1c618f0c050 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0c0d0 <col:52, col:60> col:60 invalid r 'int *'
| `-ParmVarDecl 0x1c618f0c150 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x1c618f043b0 <line:411:1, col:63> col:5 invalid ec_GFp_nist_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1c618f04290 <col:28, col:38> col:38 invalid dest 'int *'
| `-ParmVarDecl 0x1c618f04310 <col:44, col:60> col:60 invalid src 'const int *'
|-FunctionDecl 0x1c618f04730 <line:412:1, line:413:58> line:412:5 invalid ec_GFp_nist_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f04478 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x1c618f044f8 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x1c618f04578 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f045f8 <line:413:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f04678 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x1c618f04ac8 <line:414:1, line:415:52> line:414:5 invalid ec_GFp_nist_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f04810 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1c618f04890 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1c618f04910 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f04990 <line:415:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f04a10 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x1c618f04dd8 <line:416:1, line:417:35> line:416:5 invalid ec_GFp_nist_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f04ba8 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1c618f04c28 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1c618f04ca8 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1c618f04d28 <line:417:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x1c618f04f48 <line:420:1, col:41> col:5 invalid ec_GF2m_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x1c618f04eb0 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x1c618f05098 <line:421:1, col:44> col:6 invalid ec_GF2m_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x1c618f05008 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x1c618f051e8 <line:422:1, col:50> col:6 invalid ec_GF2m_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1c618f05158 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x1c618f0c448 <line:423:1, col:59> col:5 invalid ec_GF2m_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1c618f0c328 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x1c618f0c3a8 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x1c618f0c7c8 <line:424:1, line:426:44> line:424:5 invalid ec_GF2m_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f0c510 <col:36, <invalid sloc>> col:46 invalid 'int *'
| |-ParmVarDecl 0x1c618f0c590 <col:48, col:62> col:62 invalid p 'const int *'
| |-ParmVarDecl 0x1c618f0c610 <line:425:36, col:50> col:50 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f0c690 <col:53, col:67> col:67 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f0c710 <line:426:36, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x1c618f0cb60 <line:427:1, line:428:55> line:427:5 invalid ec_GF2m_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x1c618f0c8a8 <col:36, <invalid sloc>> col:52 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0c928 <col:54, col:62> col:62 invalid p 'int *'
| |-ParmVarDecl 0x1c618f0c9a8 <col:65, col:73> col:73 invalid a 'int *'
| |-ParmVarDecl 0x1c618f0ca28 <line:428:36, col:44> col:44 invalid b 'int *'
| `-ParmVarDecl 0x1c618f0caa8 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1c618f0ccd8 <line:429:1, col:53> col:5 invalid ec_GF2m_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x1c618f0cc40 <col:37, <invalid sloc>> col:53 invalid 'const int *'
|-FunctionDecl 0x1c618f0ceb8 <line:430:1, col:71> col:5 invalid ec_GF2m_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x1c618f0cd98 <col:45, <invalid sloc>> col:61 invalid 'const int *'
| `-ParmVarDecl 0x1c618f0ce18 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x1c618f0d018 <line:431:1, col:41> col:5 invalid ec_GF2m_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x1c618f0cf80 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x1c618f0d168 <line:432:1, col:44> col:6 invalid ec_GF2m_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x1c618f0d0d8 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x1c618f0d320 <line:433:1, col:50> col:6 invalid ec_GF2m_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1c618f0d228 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x1c618f0d500 <line:434:1, col:59> col:5 invalid ec_GF2m_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1c618f0d3e0 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x1c618f0d460 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x1c618f0d6e8 <line:435:1, col:70> col:5 invalid ec_GF2m_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x1c618f0d5c8 <col:42, <invalid sloc>> col:58 invalid 'const int *'
| `-ParmVarDecl 0x1c618f0d648 <col:60, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x1c618f0da68 <line:436:1, line:438:74> line:436:5 invalid ec_GF2m_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f0d7b0 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0d830 <col:67, <invalid sloc>> col:77 invalid 'int *'
| |-ParmVarDecl 0x1c618f0d8b0 <line:437:49, col:63> col:63 invalid x 'const int *'
| |-ParmVarDecl 0x1c618f0d930 <line:438:49, col:63> col:63 invalid y 'const int *'
| `-ParmVarDecl 0x1c618f0d9b0 <col:66, <invalid sloc>> col:74 invalid 'int *'
|-FunctionDecl 0x1c618f0de00 <line:439:1, line:441:68> line:439:5 invalid ec_GF2m_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1c618f0db48 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0dbc8 <line:440:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0dc48 <col:67, col:75> col:75 invalid x 'int *'
| |-ParmVarDecl 0x1c618f0dcc8 <line:441:49, col:57> col:57 invalid y 'int *'
| `-ParmVarDecl 0x1c618f0dd48 <col:60, <invalid sloc>> col:68 invalid 'int *'
|-FunctionDecl 0x1c618f0e198 <line:442:1, line:444:55> line:442:5 invalid ec_GF2m_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x1c618f0dee0 <col:47, <invalid sloc>> col:63 invalid 'const int *'
| |-ParmVarDecl 0x1c618f0df60 <col:65, <invalid sloc>> col:75 invalid 'int *'
| |-ParmVarDecl 0x1c618f0dfe0 <line:443:47, col:61> col:61 invalid x 'const int *'
| |-ParmVarDecl 0x1c618f0e060 <col:64, col:68> col:68 y_bit 'int'
| `-ParmVarDecl 0x1c618f0e0e0 <line:444:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1c618e9f380 <line:445:1, line:447:73> line:445:8 invalid ec_GF2m_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1c618f0e278 <col:33, <invalid sloc>> col:49 invalid 'const int *'
| |-ParmVarDecl 0x1c618e9f0d0 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1c618e9f150 <line:446:33, col:57> col:57 invalid form 'int'
| |-ParmVarDecl 0x1c618e9f1d0 <line:447:33, col:48> col:48 buf 'unsigned char *'
| |-ParmVarDecl 0x1c618e9f248 <col:53, col:60> col:60 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e9f2c8 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x1c618e9f718 <line:448:1, line:449:76> line:448:5 invalid ec_GF2m_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1c618e9f468 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1c618e9f4e8 <col:48, <invalid sloc>> col:58 invalid 'int *'
| |-ParmVarDecl 0x1c618e9f568 <line:449:30, col:51> col:51 buf 'const unsigned char *'
| |-ParmVarDecl 0x1c618e9f5e0 <col:56, col:63> col:63 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1c618e9f660 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x1c618e9fab0 <line:450:1, line:451:51> line:450:5 invalid ec_GF2m_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618e9f7f8 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x1c618e9f878 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x1c618e9f8f8 <col:55, col:71> col:71 invalid a 'const int *'
| |-ParmVarDecl 0x1c618e9f978 <line:451:24, col:40> col:40 invalid b 'const int *'
| `-ParmVarDecl 0x1c618e9f9f8 <col:43, <invalid sloc>> col:51 invalid 'int *'
|-FunctionDecl 0x1c618e9fdc0 <line:452:1, line:453:32> line:452:5 invalid ec_GF2m_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1c618e9fb90 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x1c618e9fc10 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x1c618e9fc90 <col:55, col:71> col:71 invalid a 'const int *'
| `-ParmVarDecl 0x1c618e9fd10 <line:453:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x1c618f11060 <line:454:1, col:65> col:5 invalid ec_GF2m_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1c618e9fe98 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1c618e9ff18 <col:45, <invalid sloc>> col:55 invalid 'int *'
| `-ParmVarDecl 0x1c618e9ff98 <col:57, <invalid sloc>> col:65 invalid 'int *'
|-FunctionDecl 0x1c618f11250 <line:455:1, col:69> col:5 invalid ec_GF2m_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x1c618f11130 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| `-ParmVarDecl 0x1c618f111b0 <col:53, <invalid sloc>> col:69 invalid 'const int *'
|-FunctionDecl 0x1c618f114c0 <line:456:1, col:76> col:5 invalid ec_GF2m_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f11318 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x1c618f11398 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| `-ParmVarDecl 0x1c618f11418 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x1c618f117c0 <line:457:1, line:458:32> line:457:5 invalid ec_GF2m_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f11590 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x1c618f11610 <col:42, col:58> col:58 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f11690 <col:61, col:77> col:77 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f11710 <line:458:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x1c618f11a40 <line:459:1, col:70> col:5 invalid ec_GF2m_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1c618f11898 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x1c618f11918 <col:50, <invalid sloc>> col:60 invalid 'int *'
| `-ParmVarDecl 0x1c618f11998 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x1c618f11d48 <line:460:1, line:461:61> line:460:5 invalid ec_GF2m_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x1c618f11b10 <col:39, <invalid sloc>> col:55 invalid 'const int *'
| |-ParmVarDecl 0x1c618f11b88 <col:57, col:64> col:64 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f11c18 <line:461:39, <invalid sloc>> col:49 invalid 'int **':'int **'
| `-ParmVarDecl 0x1c618f11c98 <col:53, <invalid sloc>> col:61 invalid 'int *'
|-FunctionDecl 0x1c618f14148 <line:462:1, line:463:55> line:462:5 invalid ec_GF2m_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f11e20 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1c618f11ea0 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1c618f11f20 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f11fa0 <line:463:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f14090 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1c618f14458 <line:464:1, line:465:38> line:464:5 invalid ec_GF2m_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f14228 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1c618f142a8 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1c618f14328 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x1c618f143a8 <line:465:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1c618f147e8 <line:466:1, line:467:55> line:466:5 invalid ec_GF2m_simple_field_div 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f14530 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1c618f145b0 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1c618f14630 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f146b0 <line:467:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x1c618f14730 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1c618f14ca8 <line:470:1, line:473:32> line:470:5 invalid ec_GF2m_simple_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1c618f148c8 <col:24, col:40> col:40 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f14948 <col:47, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x1c618f149c8 <line:471:24, col:38> col:38 invalid scalar 'const int *'
| |-ParmVarDecl 0x1c618f14a40 <col:46, col:53> col:53 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f14ad0 <line:472:24, <invalid sloc>> col:40 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1c618f14b60 <col:50, <invalid sloc>> col:64 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1c618f14be0 <line:473:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x1c618f14eb8 <line:474:1, col:57> col:5 invalid ec_GF2m_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1c618f14d98 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x1c618f14e18 <col:46, col:54> col:54 invalid ctx 'int *'
|-FunctionDecl 0x1c618f12070 <line:475:1, col:55> col:5 invalid ec_GF2m_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1c618f14f80 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x1c618f121c8 <line:479:1, col:47> col:5 invalid ec_GFp_nistp224_group_init 'int (int *)'
| `-ParmVarDecl 0x1c618f12130 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x1c618f12540 <line:480:1, line:482:45> line:480:5 invalid ec_GFp_nistp224_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f12288 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1c618f12308 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1c618f12388 <line:481:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f12408 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x1c618f12488 <line:482:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x1c618f128d8 <line:483:1, line:486:61> line:483:5 invalid ec_GFp_nistp224_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1c618f12620 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f126a0 <line:484:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1c618f12720 <line:485:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1c618f127a0 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x1c618f12820 <line:486:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x1c618f12d98 <line:487:1, line:490:33> line:487:5 invalid ec_GFp_nistp224_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1c618f129b8 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f12a38 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x1c618f12ab8 <line:488:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x1c618f12b30 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f12bc0 <line:489:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1c618f12c50 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1c618f12cd0 <line:490:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x1c618f1a2f0 <line:491:1, line:494:68> line:491:5 invalid ec_GFp_nistp224_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1c618f12e88 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f12f08 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1c618f12f88 <line:492:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1c618f13000 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f1a118 <line:493:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1c618f1a1a8 <line:494:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1c618f1a228 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x1c618f1a500 <line:495:1, col:65> col:5 invalid ec_GFp_nistp224_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1c618f1a3e0 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x1c618f1a460 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x1c618f1a660 <line:496:1, col:63> col:5 invalid ec_GFp_nistp224_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1c618f1a5c8 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x1c618f1a7b8 <line:499:1, col:47> col:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| `-ParmVarDecl 0x1c618f1a720 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x1c618f1ab30 <line:500:1, line:502:45> line:500:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f1a878 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1c618f1a8f8 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1c618f1a978 <line:501:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f1a9f8 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x1c618f1aa78 <line:502:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x1c618f1aec8 <line:503:1, line:506:61> line:503:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1c618f1ac10 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f1ac90 <line:504:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1c618f1ad10 <line:505:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1c618f1ad90 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x1c618f1ae10 <line:506:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x1c618f13360 <line:507:1, line:510:33> line:507:5 invalid ec_GFp_nistp256_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1c618f1afa8 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f1b028 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x1c618f13080 <line:508:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x1c618f130f8 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f13188 <line:509:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1c618f13218 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1c618f13298 <line:510:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x1c618f13830 <line:511:1, line:514:68> line:511:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1c618f13450 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f134d0 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1c618f13550 <line:512:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1c618f135c8 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f13658 <line:513:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1c618f136e8 <line:514:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1c618f13768 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x1c618f13a40 <line:515:1, col:65> col:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1c618f13920 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x1c618f139a0 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x1c618f13ba0 <line:516:1, col:63> col:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1c618f13b08 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x1c618f13cf8 <line:519:1, col:47> col:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| `-ParmVarDecl 0x1c618f13c60 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x1c618f190e0 <line:520:1, line:522:45> line:520:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f13db8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1c618f13e38 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1c618f13eb8 <line:521:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1c618f13f38 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x1c618f13fb8 <line:522:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x1c618f19478 <line:523:1, line:526:61> line:523:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1c618f191c0 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f19240 <line:524:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1c618f192c0 <line:525:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1c618f19340 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x1c618f193c0 <line:526:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x1c618f19938 <line:527:1, line:530:33> line:527:5 invalid ec_GFp_nistp521_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1c618f19558 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f195d8 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x1c618f19658 <line:528:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x1c618f196d0 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f19760 <line:529:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1c618f197f0 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1c618f19870 <line:530:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x1c618f19e08 <line:531:1, line:534:68> line:531:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1c618f19a28 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f19aa8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1c618f19b28 <line:532:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1c618f19ba0 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f19c30 <line:533:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1c618f19cc0 <line:534:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1c618f19d40 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x1c618f1a018 <line:535:1, col:65> col:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1c618f19ef8 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x1c618f19f78 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x1c618f1b198 <line:536:1, col:63> col:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1c618f1b100 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x1c618f155a8 <line:539:1, line:563:75> line:539:6 used ec_GFp_nistp_points_make_affine_internal 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
| |-ParmVarDecl 0x1c618f1b250 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f1b2d0 <col:59, col:65> col:65 point_array 'void *'
| |-ParmVarDecl 0x1c618f1b348 <line:540:47, col:54> col:54 felem_size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c618f1b3c8 <line:541:47, col:53> col:53 tmp_felems 'void *'
| |-ParmVarDecl 0x1c618f1b590 <line:542:47, col:75> col:54 felem_one 'void (*)(void *)'
| |-ParmVarDecl 0x1c618f1b788 <line:543:47, line:544:72> line:543:53 felem_is_zero 'int (*)(const void *)'
| |-ParmVarDecl 0x1c618f1ba28 <line:545:47, line:547:72> line:545:54 felem_assign 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x1c618f1bc00 <line:548:47, line:550:72> line:548:54 felem_square 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x1c618f1bf40 <line:551:47, line:555:70> line:551:54 felem_mul 'void (*)(void *, const void *, const void *)'
| |-ParmVarDecl 0x1c618f150e0 <line:556:47, line:558:69> line:556:54 felem_inv 'void (*)(void *, const void *)'
| `-ParmVarDecl 0x1c618f152b8 <line:559:47, line:563:74> line:559:54 felem_contract 'void (*)(void *, const void *)'
|-FunctionDecl 0x1c618f158f8 <line:564:1, line:565:76> line:564:6 used ec_GFp_nistp_recode_scalar_bits 'void (unsigned char *, unsigned char *, unsigned char)'
| |-ParmVarDecl 0x1c618f156d0 <col:38, col:53> col:53 sign 'unsigned char *'
| |-ParmVarDecl 0x1c618f15750 <line:565:38, col:53> col:53 digit 'unsigned char *'
| `-ParmVarDecl 0x1c618f157d0 <col:60, col:74> col:74 in 'unsigned char'
|-FunctionDecl 0x1c618f15a78 <line:567:1, col:39> col:5 invalid ec_precompute_mont_data 'int (int *)'
| `-ParmVarDecl 0x1c618f159e0 <col:29, <invalid sloc>> col:39 invalid 'int *'
|-FunctionDecl 0x1c618f15bd0 <line:568:1, col:53> col:5 invalid ec_group_simple_order_bits 'int (const int *)'
| `-ParmVarDecl 0x1c618f15b38 <col:32, col:48> col:48 invalid group 'const int *'
|-FunctionDecl 0x1c618f15e28 <line:578:1, line:579:61> line:578:8 invalid ec_key_simple_priv2oct 'size_t (const int *, unsigned char *, size_t)'
| |-ParmVarDecl 0x1c618f15c90 <col:31, col:45> col:45 invalid eckey 'const int *'
| |-ParmVarDecl 0x1c618f15d10 <line:579:31, col:46> col:46 buf 'unsigned char *'
| `-ParmVarDecl 0x1c618f15d88 <col:51, col:58> col:58 len 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618f160b0 <line:580:1, col:79> col:5 invalid ec_key_simple_oct2priv 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x1c618f15ef8 <col:28, col:36> col:36 invalid eckey 'int *'
| |-ParmVarDecl 0x1c618f15f78 <col:43, col:64> col:64 buf 'const unsigned char *'
| `-ParmVarDecl 0x1c618f15ff0 <col:69, col:76> col:76 len 'size_t':'unsigned long long'
|-FunctionDecl 0x1c618f16218 <line:581:1, col:45> col:5 invalid ec_key_simple_generate_key 'int (int *)'
| `-ParmVarDecl 0x1c618f16180 <col:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x1c618f16370 <line:582:1, col:52> col:5 invalid ec_key_simple_generate_public_key 'int (int *)'
| `-ParmVarDecl 0x1c618f162d8 <col:39, col:47> col:47 invalid eckey 'int *'
|-FunctionDecl 0x1c618f164c8 <line:583:1, col:48> col:5 invalid ec_key_simple_check_key 'int (const int *)'
| `-ParmVarDecl 0x1c618f16430 <col:29, col:43> col:43 invalid eckey 'const int *'
|-RecordDecl 0x1c618f16570 <line:587:1, line:612:1> line:587:8 invalid struct ec_key_method_st definition
| |-FieldDecl 0x1c618f16648 <line:588:5, col:17> col:17 name 'const char *'
| |-FieldDecl 0x1c618f166d0 <line:589:5, col:13> col:13 flags 'int32_t':'int'
| |-FieldDecl 0x1c618f167e8 <line:590:5, col:28> col:11 init 'int (*)(int *)'
| |-FieldDecl 0x1c618f168f8 <line:591:5, col:31> col:12 finish 'void (*)(int *)'
| |-FieldDecl 0x1c618f16a98 <line:592:5, col:48> col:11 copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1c618f16c38 <line:593:5, col:54> col:11 set_group 'int (*)(int *, const int *)'
| |-FieldDecl 0x1c618f16dd8 <line:594:5, col:59> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x1c618f16f78 <line:595:5, col:59> col:11 set_public 'int (*)(int *, const int *)'
| |-FieldDecl 0x1c618f1d120 <line:596:5, col:30> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x1c618f1d3d0 <line:597:5, line:598:67> line:597:11 compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| |-FieldDecl 0x1c618f1d9d0 <line:599:5, line:601:47> line:599:11 sign 'int (*)(int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-FieldDecl 0x1c618f1dd70 <line:602:5, line:603:34> line:602:11 sign_setup 'int (*)(int *, int *, int **, int **)'
| |-FieldDecl 0x1c618f1e1b8 <line:604:5, <invalid sloc>> col:18 invalid sign_sig 'int *(*)(const unsigned char *, int, const int *, const int *, int *)'
| |-FieldDecl 0x1c618f1e660 <line:608:5, line:609:74> line:608:11 verify 'int (*)(int, const unsigned char *, int, const unsigned char *, int, int *)'
| `-FieldDecl 0x1c618f1e9f0 <line:610:5, line:611:58> line:610:11 verify_sig 'int (*)(const unsigned char *, int, const int *, int *)'
|-FunctionDecl 0x1c618f1eaf8 <line:616:1, col:34> col:5 invalid ossl_ec_key_gen 'int (int *)'
| `-ParmVarDecl 0x1c618f1ea60 <col:21, col:29> col:29 invalid eckey 'int *'
|-FunctionDecl 0x1c618f1ede8 <line:617:1, line:618:70> line:617:5 invalid ossl_ecdh_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x1c618f1ebc0 <col:27, col:43> col:43 pout 'unsigned char **'
| |-ParmVarDecl 0x1c618f1ec38 <col:49, col:57> col:57 poutlen 'size_t *'
| |-ParmVarDecl 0x1c618f1ecb8 <line:618:27, col:43> col:43 invalid pub_key 'const int *'
| `-ParmVarDecl 0x1c618f1ed38 <col:52, col:66> col:66 invalid ecdh 'const int *'
|-FunctionDecl 0x1c618f57020 <line:619:1, line:620:72> line:619:5 invalid ecdh_simple_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x1c618f1eec8 <col:29, col:45> col:45 pout 'unsigned char **'
| |-ParmVarDecl 0x1c618f1ef40 <col:51, col:59> col:59 poutlen 'size_t *'
| |-ParmVarDecl 0x1c618f1efc0 <line:620:29, col:45> col:45 invalid pub_key 'const int *'
| `-ParmVarDecl 0x1c618f1f040 <col:54, col:68> col:68 invalid ecdh 'const int *'
|-RecordDecl 0x1c618f570e0 <line:622:1, line:625:1> line:622:8 invalid struct ECDSA_SIG_st definition
| |-FieldDecl 0x1c618f571b8 <line:623:5, col:13> col:13 invalid r 'int *'
| `-FieldDecl 0x1c618f57228 <line:624:5, col:13> col:13 invalid s 'int *'
|-FunctionDecl 0x1c618f574d8 <line:627:1, line:628:38> line:627:5 invalid ossl_ecdsa_sign_setup 'int (int *, int *, int **, int **)'
| |-ParmVarDecl 0x1c618f57298 <col:27, col:35> col:35 invalid eckey 'int *'
| |-ParmVarDecl 0x1c618f57318 <col:42, col:50> col:50 invalid ctx_in 'int *'
| |-ParmVarDecl 0x1c618f573a0 <col:58, col:67> col:67 invalid kinvp 'int **'
| `-ParmVarDecl 0x1c618f57428 <line:628:27, col:36> col:36 invalid rp 'int **'
|-FunctionDecl 0x1c618f57a00 <line:629:1, line:631:71> line:629:5 invalid ossl_ecdsa_sign 'int (int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f575b0 <col:21, col:25> col:25 type 'int'
| |-ParmVarDecl 0x1c618f57630 <col:31, col:52> col:52 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1c618f576b0 <col:58, col:62> col:62 dlen 'int'
| |-ParmVarDecl 0x1c618f57730 <line:630:21, col:36> col:36 sig 'unsigned char *'
| |-ParmVarDecl 0x1c618f577b0 <col:41, col:55> col:55 siglen 'unsigned int *'
| |-ParmVarDecl 0x1c618f57830 <line:631:21, col:35> col:35 invalid kinv 'const int *'
| |-ParmVarDecl 0x1c618f578b0 <col:41, col:55> col:55 invalid r 'const int *'
| `-ParmVarDecl 0x1c618f57930 <col:58, col:66> col:66 invalid eckey 'int *'
|-FunctionDecl 0x1c618f57db0 <line:632:1, line:634:45> line:632:12 invalid ossl_ecdsa_sign_sig 'int *(const unsigned char *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c618f57af8 <col:32, col:53> col:53 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1c618f57b78 <col:59, col:63> col:63 dgst_len 'int'
| |-ParmVarDecl 0x1c618f57bf8 <line:633:32, col:46> col:46 invalid in_kinv 'const int *'
| |-ParmVarDecl 0x1c618f57c78 <col:55, col:69> col:69 invalid in_r 'const int *'
| `-ParmVarDecl 0x1c618f57cf8 <line:634:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x1c618f581d0 <line:635:1, line:636:78> line:635:5 invalid ossl_ecdsa_verify 'int (int, const unsigned char *, int, const unsigned char *, int, int *)'
| |-ParmVarDecl 0x1c618f57e90 <col:23, col:27> col:27 type 'int'
| |-ParmVarDecl 0x1c618f57f10 <col:33, col:54> col:54 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1c618f57f90 <col:60, col:64> col:64 dgst_len 'int'
| |-ParmVarDecl 0x1c618f58010 <line:636:23, col:44> col:44 sigbuf 'const unsigned char *'
| |-ParmVarDecl 0x1c618f58090 <col:52, col:56> col:56 sig_len 'int'
| `-ParmVarDecl 0x1c618f58110 <col:65, col:73> col:73 invalid eckey 'int *'
|-FunctionDecl 0x1c618f584e8 <line:637:1, line:638:62> line:637:5 invalid ossl_ecdsa_verify_sig 'int (const unsigned char *, int, const int *, int *)'
| |-ParmVarDecl 0x1c618f582b8 <col:27, col:48> col:48 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1c618f58338 <col:54, col:58> col:58 dgst_len 'int'
| |-ParmVarDecl 0x1c618f583b8 <line:638:27, col:44> col:44 invalid sig 'const int *'
| `-ParmVarDecl 0x1c618f58438 <col:49, col:57> col:57 invalid eckey 'int *'
|-FunctionDecl 0x1c618f58ac0 <line:640:1, line:641:47> line:640:5 X25519 'int (uint8_t *, const uint8_t *, const uint8_t *)'
| |-ParmVarDecl 0x1c618f58710 <col:12, col:37> col:20 out_shared_key 'uint8_t *':'uint8_t *'
| |-ParmVarDecl 0x1c618f58880 <col:40, col:68> col:54 private_key 'const uint8_t *':'const uint8_t *'
| `-ParmVarDecl 0x1c618f58948 <line:641:12, col:46> col:26 peer_public_value 'const uint8_t *':'const uint8_t *'
|-FunctionDecl 0x1c618f58df8 <line:642:1, line:643:62> line:642:6 X25519_public_from_private 'void (uint8_t *, const uint8_t *)'
| |-ParmVarDecl 0x1c618f58bf0 <col:33, col:60> col:41 out_public_value 'uint8_t *':'uint8_t *'
| `-ParmVarDecl 0x1c618f58cb8 <line:643:33, col:61> col:47 private_key 'const uint8_t *':'const uint8_t *'
|-FunctionDecl 0x1c618f590d8 <line:645:1, col:79> col:5 invalid ec_point_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1c618f58ed8 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1c618f58f58 <col:55, col:65> col:65 invalid p 'int *'
| `-ParmVarDecl 0x1c618f59030 <col:68, col:76> col:76 invalid ctx 'int *'
|-TypedefDecl 0x1c618f591a0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:53:1, col:17> col:17 referenced u8 'uint8_t':'unsigned char'
| `-TypedefType 0x1c618f585b0 'uint8_t' sugar
|   |-Typedef 0x1c618e31700 'uint8_t'
|   `-BuiltinType 0x1c6172ec7c0 'unsigned char'
|-TypedefDecl 0x1c618f59230 <line:54:1, col:18> col:18 u32 'uint32_t':'unsigned int'
| `-TypedefType 0x1c618f59200 'uint32_t' sugar
|   |-Typedef 0x1c618e317e0 'uint32_t'
|   `-BuiltinType 0x1c6172ec800 'unsigned int'
|-TypedefDecl 0x1c618f592c0 <line:55:1, col:18> col:18 referenced u64 'uint64_t':'unsigned long long'
| `-TypedefType 0x1c618f59290 'uint64_t' sugar
|   |-Typedef 0x1c618e31850 'uint64_t'
|   `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-TypedefDecl 0x1c618f593d8 <line:63:1, col:30> col:12 referenced felem_bytearray 'u8 [32]'
| `-ConstantArrayType 0x1c618f59380 'u8 [32]' 32 
|   `-TypedefType 0x1c618f59320 'u8' sugar
|     |-Typedef 0x1c618f591a0 'u8'
|     `-TypedefType 0x1c618f585b0 'uint8_t' sugar
|       |-Typedef 0x1c618e31700 'uint8_t'
|       `-BuiltinType 0x1c6172ec7c0 'unsigned char'
|-VarDecl 0x1c618f59528 <line:69:1, line:90:1> line:69:30 used nistp256_curve_params 'const felem_bytearray [5]' static cinit
| `-InitListExpr 0x1c618f5b5f8 <col:57, line:90:1> 'const felem_bytearray [5]'
|   |-InitListExpr 0x1c618f5b670 <line:70:5, line:73:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x1c618f5b7b0 <line:70:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59590 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5b7c8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f595b8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5b7e0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f595e0 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5b7f8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59608 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5b810 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59630 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b828 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59658 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b840 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59680 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b858 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f596a8 <col:48> 'int' 1
|   | |-ImplicitCastExpr 0x1c618f5b870 <line:71:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f596d0 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b888 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f596f8 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b8a0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59720 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b8b8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59748 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b8d0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59770 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b8e8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59798 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b900 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f597c0 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b918 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f597e8 <col:48> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b930 <line:72:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59810 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b948 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59838 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b960 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59860 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b978 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59888 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5b990 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f598b0 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5b9a8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f598d8 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5b9c0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59900 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5b9d8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59928 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5b9f0 <line:73:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59950 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5ba08 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59978 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5ba20 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f599a0 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5ba38 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f599c8 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5ba50 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f599f0 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5ba68 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59a18 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5ba80 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59a40 <col:42> 'int' 255
|   | `-ImplicitCastExpr 0x1c618f5ba98 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f59a68 <col:48> 'int' 255
|   |-InitListExpr 0x1c618f5bac0 <line:74:5, line:77:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x1c618f5bc00 <line:74:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59bd0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5bc18 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59bf8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5bc30 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59c20 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5bc48 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59c48 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5bc60 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59c70 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bc78 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59c98 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bc90 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59cc0 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bca8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59ce8 <col:48> 'int' 1
|   | |-ImplicitCastExpr 0x1c618f5bcc0 <line:75:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59d10 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bcd8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59d38 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bcf0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59d60 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bd08 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59d88 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bd20 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59db0 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bd38 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59dd8 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bd50 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59e00 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bd68 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59e28 <col:48> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bd80 <line:76:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59e50 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bd98 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59e78 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bdb0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59ea0 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bdc8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59ec8 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f5bde0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59ef0 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5bdf8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59f18 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5be10 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59f40 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5be28 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59f68 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5be40 <line:77:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59f90 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5be58 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59fb8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5be70 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f59fe0 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5be88 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a008 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5bea0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a030 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5beb8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a058 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1c618f5bed0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a080 <col:42> 'int' 255
|   | `-ImplicitCastExpr 0x1c618f5bee8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f5a0a8 <col:48> 'int' 252
|   |-InitListExpr 0x1c618f5bf10 <line:78:5, line:81:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x1c618f5c050 <line:78:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a210 <col:6> 'int' 90
|   | |-ImplicitCastExpr 0x1c618f5c068 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a238 <col:12> 'int' 198
|   | |-ImplicitCastExpr 0x1c618f5c080 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a260 <col:18> 'int' 53
|   | |-ImplicitCastExpr 0x1c618f5c098 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a288 <col:24> 'int' 216
|   | |-ImplicitCastExpr 0x1c618f5c0b0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a2b0 <col:30> 'int' 170
|   | |-ImplicitCastExpr 0x1c618f5c0c8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a2d8 <col:36> 'int' 58
|   | |-ImplicitCastExpr 0x1c618f5c0e0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a300 <col:42> 'int' 147
|   | |-ImplicitCastExpr 0x1c618f5c0f8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a328 <col:48> 'int' 231
|   | |-ImplicitCastExpr 0x1c618f5c110 <line:79:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a350 <col:6> 'int' 179
|   | |-ImplicitCastExpr 0x1c618f5c128 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a378 <col:12> 'int' 235
|   | |-ImplicitCastExpr 0x1c618f5c140 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a3a0 <col:18> 'int' 189
|   | |-ImplicitCastExpr 0x1c618f5c158 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a3c8 <col:24> 'int' 85
|   | |-ImplicitCastExpr 0x1c618f5c170 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a3f0 <col:30> 'int' 118
|   | |-ImplicitCastExpr 0x1c618f5c188 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a418 <col:36> 'int' 152
|   | |-ImplicitCastExpr 0x1c618f5c1a0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a440 <col:42> 'int' 134
|   | |-ImplicitCastExpr 0x1c618f5c1b8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a468 <col:48> 'int' 188
|   | |-ImplicitCastExpr 0x1c618f5c1d0 <line:80:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a490 <col:6> 'int' 101
|   | |-ImplicitCastExpr 0x1c618f5c1e8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a4b8 <col:12> 'int' 29
|   | |-ImplicitCastExpr 0x1c618f5c200 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a4e0 <col:18> 'int' 6
|   | |-ImplicitCastExpr 0x1c618f5c218 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a508 <col:24> 'int' 176
|   | |-ImplicitCastExpr 0x1c618f5c230 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a530 <col:30> 'int' 204
|   | |-ImplicitCastExpr 0x1c618f5c248 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a558 <col:36> 'int' 83
|   | |-ImplicitCastExpr 0x1c618f5c260 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a580 <col:42> 'int' 176
|   | |-ImplicitCastExpr 0x1c618f5c278 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a5a8 <col:48> 'int' 246
|   | |-ImplicitCastExpr 0x1c618f5c290 <line:81:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a5d0 <col:6> 'int' 59
|   | |-ImplicitCastExpr 0x1c618f5c2a8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a5f8 <col:12> 'int' 206
|   | |-ImplicitCastExpr 0x1c618f5c2c0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a620 <col:18> 'int' 60
|   | |-ImplicitCastExpr 0x1c618f5c2d8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a648 <col:24> 'int' 62
|   | |-ImplicitCastExpr 0x1c618f5c2f0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a670 <col:30> 'int' 39
|   | |-ImplicitCastExpr 0x1c618f5c308 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a698 <col:36> 'int' 210
|   | |-ImplicitCastExpr 0x1c618f5c320 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a6c0 <col:42> 'int' 96
|   | `-ImplicitCastExpr 0x1c618f5c338 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f5a6e8 <col:48> 'int' 75
|   |-InitListExpr 0x1c618f5c360 <line:82:5, line:85:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x1c618f5c4a0 <line:82:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a850 <col:6> 'int' 107
|   | |-ImplicitCastExpr 0x1c618f5c4b8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a878 <col:12> 'int' 23
|   | |-ImplicitCastExpr 0x1c618f5c4d0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a8a0 <col:18> 'int' 209
|   | |-ImplicitCastExpr 0x1c618f5c4e8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a8c8 <col:24> 'int' 242
|   | |-ImplicitCastExpr 0x1c618f5c500 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a8f0 <col:30> 'int' 225
|   | |-ImplicitCastExpr 0x1c618f5c518 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a918 <col:36> 'int' 44
|   | |-ImplicitCastExpr 0x1c618f5c530 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a940 <col:42> 'int' 66
|   | |-ImplicitCastExpr 0x1c618f5c548 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a968 <col:48> 'int' 71
|   | |-ImplicitCastExpr 0x1c618f5c560 <line:83:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a990 <col:6> 'int' 248
|   | |-ImplicitCastExpr 0x1c618f5c578 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a9b8 <col:12> 'int' 188
|   | |-ImplicitCastExpr 0x1c618f5c590 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5a9e0 <col:18> 'int' 230
|   | |-ImplicitCastExpr 0x1c618f5c5a8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5aa08 <col:24> 'int' 229
|   | |-ImplicitCastExpr 0x1c618f5c5c0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5aa30 <col:30> 'int' 99
|   | |-ImplicitCastExpr 0x1c618f5c5d8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5aa58 <col:36> 'int' 164
|   | |-ImplicitCastExpr 0x1c618f5c5f0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5aa80 <col:42> 'int' 64
|   | |-ImplicitCastExpr 0x1c618f5c608 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5aaa8 <col:48> 'int' 242
|   | |-ImplicitCastExpr 0x1c618f5c620 <line:84:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5aad0 <col:6> 'int' 119
|   | |-ImplicitCastExpr 0x1c618f5c638 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5aaf8 <col:12> 'int' 3
|   | |-ImplicitCastExpr 0x1c618f5c650 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5ab20 <col:18> 'int' 125
|   | |-ImplicitCastExpr 0x1c618f5c668 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5ab48 <col:24> 'int' 129
|   | |-ImplicitCastExpr 0x1c618f5c680 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5ab70 <col:30> 'int' 45
|   | |-ImplicitCastExpr 0x1c618f5c698 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5ab98 <col:36> 'int' 235
|   | |-ImplicitCastExpr 0x1c618f5c6b0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5abc0 <col:42> 'int' 51
|   | |-ImplicitCastExpr 0x1c618f5c6c8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5abe8 <col:48> 'int' 160
|   | |-ImplicitCastExpr 0x1c618f5c6e0 <line:85:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5ac10 <col:6> 'int' 244
|   | |-ImplicitCastExpr 0x1c618f5c6f8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5ac38 <col:12> 'int' 161
|   | |-ImplicitCastExpr 0x1c618f5c710 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5ac60 <col:18> 'int' 57
|   | |-ImplicitCastExpr 0x1c618f5c728 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5ac88 <col:24> 'int' 69
|   | |-ImplicitCastExpr 0x1c618f5c740 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5acb0 <col:30> 'int' 216
|   | |-ImplicitCastExpr 0x1c618f5c758 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5acd8 <col:36> 'int' 152
|   | |-ImplicitCastExpr 0x1c618f5c770 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1c618f5ad00 <col:42> 'int' 194
|   | `-ImplicitCastExpr 0x1c618f5c788 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f5ad28 <col:48> 'int' 150
|   `-InitListExpr 0x1c618f5c7b0 <line:86:5, line:89:52> 'const felem_bytearray':'u8 const[32]'
|     |-ImplicitCastExpr 0x1c618f5c8f0 <line:86:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5ae90 <col:6> 'int' 79
|     |-ImplicitCastExpr 0x1c618f5c908 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5aeb8 <col:12> 'int' 227
|     |-ImplicitCastExpr 0x1c618f5c920 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5aee0 <col:18> 'int' 66
|     |-ImplicitCastExpr 0x1c618f5c938 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5af08 <col:24> 'int' 226
|     |-ImplicitCastExpr 0x1c618f5c950 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5af30 <col:30> 'int' 254
|     |-ImplicitCastExpr 0x1c618f5c968 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5af58 <col:36> 'int' 26
|     |-ImplicitCastExpr 0x1c618f5c980 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5af80 <col:42> 'int' 127
|     |-ImplicitCastExpr 0x1c618f5c998 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5afa8 <col:48> 'int' 155
|     |-ImplicitCastExpr 0x1c618f5c9b0 <line:87:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5afd0 <col:6> 'int' 142
|     |-ImplicitCastExpr 0x1c618f5c9c8 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5aff8 <col:12> 'int' 231
|     |-ImplicitCastExpr 0x1c618f5c9e0 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b040 <col:18> 'int' 235
|     |-ImplicitCastExpr 0x1c618f5c9f8 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b068 <col:24> 'int' 74
|     |-ImplicitCastExpr 0x1c618f5ca10 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b090 <col:30> 'int' 124
|     |-ImplicitCastExpr 0x1c618f5ca28 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b0b8 <col:36> 'int' 15
|     |-ImplicitCastExpr 0x1c618f5ca40 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b0e0 <col:42> 'int' 158
|     |-ImplicitCastExpr 0x1c618f5ca58 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b108 <col:48> 'int' 22
|     |-ImplicitCastExpr 0x1c618f5ca70 <line:88:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b130 <col:6> 'int' 43
|     |-ImplicitCastExpr 0x1c618f5ca88 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b158 <col:12> 'int' 206
|     |-ImplicitCastExpr 0x1c618f5caa0 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b180 <col:18> 'int' 51
|     |-ImplicitCastExpr 0x1c618f5cab8 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b1a8 <col:24> 'int' 87
|     |-ImplicitCastExpr 0x1c618f5cad0 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b1d0 <col:30> 'int' 107
|     |-ImplicitCastExpr 0x1c618f5cae8 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b1f8 <col:36> 'int' 49
|     |-ImplicitCastExpr 0x1c618f5cb00 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b220 <col:42> 'int' 94
|     |-ImplicitCastExpr 0x1c618f5cb18 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b248 <col:48> 'int' 206
|     |-ImplicitCastExpr 0x1c618f5cb30 <line:89:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b270 <col:6> 'int' 203
|     |-ImplicitCastExpr 0x1c618f5cb48 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b298 <col:12> 'int' 182
|     |-ImplicitCastExpr 0x1c618f5cb60 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b2c0 <col:18> 'int' 64
|     |-ImplicitCastExpr 0x1c618f5cb78 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b2e8 <col:24> 'int' 104
|     |-ImplicitCastExpr 0x1c618f5cb90 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b310 <col:30> 'int' 55
|     |-ImplicitCastExpr 0x1c618f5cba8 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b338 <col:36> 'int' 191
|     |-ImplicitCastExpr 0x1c618f5cbc0 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1c618f5b360 <col:42> 'int' 81
|     `-ImplicitCastExpr 0x1c618f5cbd8 <col:48> 'u8':'unsigned char' <IntegralCast>
|       `-IntegerLiteral 0x1c618f5b388 <col:48> 'int' 245
|-TypedefDecl 0x1c618f5cc08 <line:115:1, col:19> col:19 referenced invalid limb 'int'
| `-BuiltinType 0x1c6172ec760 'int'
|-TypedefDecl 0x1c618f5cd58 <line:116:1, col:26> col:14 referenced felem 'limb [4]'
| `-ConstantArrayType 0x1c618f5cd00 'limb [4]' 4 
|   `-TypedefType 0x1c618f5cc60 'limb' sugar
|     |-Typedef 0x1c618f5cc08 'limb'
|     `-BuiltinType 0x1c6172ec760 'int'
|-TypedefDecl 0x1c618f5ced8 <line:117:1, col:34> col:14 referenced longfelem 'limb [8]'
| `-ConstantArrayType 0x1c618f5ce80 'limb [8]' 8 
|   `-TypedefType 0x1c618f5cc60 'limb' sugar
|     |-Typedef 0x1c618f5cc08 'limb'
|     `-BuiltinType 0x1c6172ec760 'int'
|-TypedefDecl 0x1c618f5d050 <line:118:1, col:30> col:13 referenced smallfelem 'u64 [4]'
| `-ConstantArrayType 0x1c618f5cfd0 'u64 [4]' 4 
|   `-TypedefType 0x1c618f5cf30 'u64' sugar
|     |-Typedef 0x1c618f592c0 'u64'
|     `-TypedefType 0x1c618f59290 'uint64_t' sugar
|       |-Typedef 0x1c618e31850 'uint64_t'
|       `-BuiltinType 0x1c6172ec840 'unsigned long long'
|-VarDecl 0x1c618f5d148 <line:121:1, line:122:65> line:121:18 used kPrime 'const u64 [4]' static cinit
| `-InitListExpr 0x1c618f5d2d8 <line:122:5, col:65> 'const u64 [4]'
|   |-IntegerLiteral 0x1c618f5d1b0 <col:7> 'unsigned long long' 18446744073709551615
|   |-ImplicitCastExpr 0x1c618f5d338 <col:29> 'u64':'unsigned long long' <IntegralCast>
|   | `-IntegerLiteral 0x1c618f5d1d8 <col:29> 'unsigned int' 4294967295
|   |-ImplicitCastExpr 0x1c618f5d350 <col:41> 'u64':'unsigned long long' <IntegralCast>
|   | `-IntegerLiteral 0x1c618f5d200 <col:41> 'int' 0
|   `-IntegerLiteral 0x1c618f5d228 <col:44> 'unsigned long long' 18446744069414584321
|-VarDecl 0x1c618f5d378 <line:123:1, col:33> col:18 used bottom63bits 'const u64':'const unsigned long long' static cinit
| `-IntegerLiteral 0x1c618f5d3e0 <col:33> 'unsigned long long' 9223372036854775807
|-FunctionDecl 0x1c618f5d728 <line:129:1, line:135:1> line:129:13 used bin32_to_felem 'void (limb *, const u8 *)' static
| |-ParmVarDecl 0x1c618f5d4b0 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f5d5e0 <col:39, col:53> col:48 used in 'const u8 *':'const u8 *'
| `-CompoundStmt 0x1c618f5df80 <line:130:1, line:135:1>
|   |-BinaryOperator 0x1c618f5d9d8 <line:131:5, col:29> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f5d850 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f5d838 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f5d7f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f5d4b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f5d810 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618f5d9c0 <col:14, col:29> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f5d9a8 <col:14, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1c618f5d990 <col:14, col:29> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x1c618f5d970 <col:15, col:29> 'u64 *'
|   |         `-CStyleCastExpr 0x1c618f5d948 <col:16, col:28> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x1c618f5d8f0 <col:23, col:28> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x1c618f5d8d0 <col:24, col:28> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x1c618f5d8b8 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x1c618f5d870 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x1c618f5d5e0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x1c618f5d890 <col:27> 'int' 0
|   |-BinaryOperator 0x1c618f5dbb0 <line:132:5, col:29> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f5da58 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f5da40 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f5d9f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f5d4b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f5da18 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618f5db98 <col:14, col:29> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f5db80 <col:14, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1c618f5db68 <col:14, col:29> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x1c618f5db48 <col:15, col:29> 'u64 *'
|   |         `-CStyleCastExpr 0x1c618f5db20 <col:16, col:28> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x1c618f5daf8 <col:23, col:28> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x1c618f5dad8 <col:24, col:28> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x1c618f5dac0 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x1c618f5da78 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x1c618f5d5e0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x1c618f5da98 <col:27> 'int' 8
|   |-BinaryOperator 0x1c618f5dd88 <line:133:5, col:30> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f5dc30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f5dc18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f5dbd0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f5d4b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f5dbf0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618f5dd70 <col:14, col:30> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f5dd58 <col:14, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1c618f5dd40 <col:14, col:30> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x1c618f5dd20 <col:15, col:30> 'u64 *'
|   |         `-CStyleCastExpr 0x1c618f5dcf8 <col:16, col:29> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x1c618f5dcd0 <col:23, col:29> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x1c618f5dcb0 <col:24, col:29> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x1c618f5dc98 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x1c618f5dc50 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x1c618f5d5e0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x1c618f5dc70 <col:27> 'int' 16
|   `-BinaryOperator 0x1c618f5df60 <line:134:5, col:30> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1c618f5de08 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618f5ddf0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618f5dda8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f5d4b0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618f5ddc8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618f5df48 <col:14, col:30> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x1c618f5df30 <col:14, col:30> 'u64':'unsigned long long' <LValueToRValue>
|         `-UnaryOperator 0x1c618f5df18 <col:14, col:30> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|           `-ParenExpr 0x1c618f5def8 <col:15, col:30> 'u64 *'
|             `-CStyleCastExpr 0x1c618f5ded0 <col:16, col:29> 'u64 *' <BitCast>
|               `-UnaryOperator 0x1c618f5dea8 <col:23, col:29> 'const u8 *' prefix '&' cannot overflow
|                 `-ArraySubscriptExpr 0x1c618f5de88 <col:24, col:29> 'const u8':'const unsigned char' lvalue
|                   |-ImplicitCastExpr 0x1c618f5de70 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|                   | `-DeclRefExpr 0x1c618f5de28 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x1c618f5d5e0 'in' 'const u8 *':'const u8 *'
|                   `-IntegerLiteral 0x1c618f5de48 <col:27> 'int' 24
|-FunctionDecl 0x1c618f5e2e8 <line:141:1, line:147:1> line:141:13 used smallfelem_to_bin32 'void (u8 *, const u64 *)' static
| |-ParmVarDecl 0x1c618f5e070 <col:33, col:42> col:36 used out 'u8 *':'u8 *'
| |-ParmVarDecl 0x1c618f5e1a0 <col:45, col:62> col:62 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618f5eab0 <line:142:1, line:147:1>
|   |-BinaryOperator 0x1c618f5e550 <line:143:5, col:29> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x1c618f5e4a0 <col:5, col:21> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x1c618f5e480 <col:6, col:21> 'u64 *'
|   | |   `-CStyleCastExpr 0x1c618f5e458 <col:7, col:20> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x1c618f5e430 <col:14, col:20> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x1c618f5e410 <col:15, col:20> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x1c618f5e3f8 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x1c618f5e3b0 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x1c618f5e070 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x1c618f5e3d0 <col:19> 'int' 0
|   | `-ImplicitCastExpr 0x1c618f5e538 <col:25, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618f5e518 <col:25, col:29> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1c618f5e500 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f5e4b8 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f5e1a0 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1c618f5e4d8 <col:28> 'int' 0
|   |-BinaryOperator 0x1c618f5e710 <line:144:5, col:29> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x1c618f5e660 <col:5, col:21> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x1c618f5e640 <col:6, col:21> 'u64 *'
|   | |   `-CStyleCastExpr 0x1c618f5e618 <col:7, col:20> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x1c618f5e5f0 <col:14, col:20> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x1c618f5e5d0 <col:15, col:20> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x1c618f5e5b8 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x1c618f5e570 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x1c618f5e070 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x1c618f5e590 <col:19> 'int' 8
|   | `-ImplicitCastExpr 0x1c618f5e6f8 <col:25, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618f5e6d8 <col:25, col:29> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1c618f5e6c0 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f5e678 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f5e1a0 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1c618f5e698 <col:28> 'int' 1
|   |-BinaryOperator 0x1c618f5e8d0 <line:145:5, col:30> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x1c618f5e820 <col:5, col:22> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x1c618f5e800 <col:6, col:22> 'u64 *'
|   | |   `-CStyleCastExpr 0x1c618f5e7d8 <col:7, col:21> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x1c618f5e7b0 <col:14, col:21> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x1c618f5e790 <col:15, col:21> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x1c618f5e778 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x1c618f5e730 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x1c618f5e070 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x1c618f5e750 <col:19> 'int' 16
|   | `-ImplicitCastExpr 0x1c618f5e8b8 <col:26, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618f5e898 <col:26, col:30> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1c618f5e880 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f5e838 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f5e1a0 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1c618f5e858 <col:29> 'int' 2
|   `-BinaryOperator 0x1c618f5ea90 <line:146:5, col:30> 'u64':'unsigned long long' '='
|     |-UnaryOperator 0x1c618f5e9e0 <col:5, col:22> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|     | `-ParenExpr 0x1c618f5e9c0 <col:6, col:22> 'u64 *'
|     |   `-CStyleCastExpr 0x1c618f5e998 <col:7, col:21> 'u64 *' <BitCast>
|     |     `-UnaryOperator 0x1c618f5e970 <col:14, col:21> 'u8 *' prefix '&' cannot overflow
|     |       `-ArraySubscriptExpr 0x1c618f5e950 <col:15, col:21> 'u8':'unsigned char' lvalue
|     |         |-ImplicitCastExpr 0x1c618f5e938 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|     |         | `-DeclRefExpr 0x1c618f5e8f0 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x1c618f5e070 'out' 'u8 *':'u8 *'
|     |         `-IntegerLiteral 0x1c618f5e910 <col:19> 'int' 24
|     `-ImplicitCastExpr 0x1c618f5ea78 <col:26, col:30> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1c618f5ea58 <col:26, col:30> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x1c618f5ea40 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x1c618f5e9f8 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f5e1a0 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x1c618f5ea18 <col:29> 'int' 3
|-FunctionDecl 0x1c618f5ed58 <line:150:1, line:155:1> line:150:13 used flip_endian 'void (u8 *, const u8 *, unsigned int)' static
| |-ParmVarDecl 0x1c618f5eaf0 <col:25, col:29> col:29 used out 'u8 *'
| |-ParmVarDecl 0x1c618f5eb68 <col:34, col:44> col:44 used in 'const u8 *'
| |-ParmVarDecl 0x1c618f5ebe8 <col:48, col:57> col:57 used len 'unsigned int'
| `-CompoundStmt 0x1c618f5f288 <line:151:1, line:155:1>
|   |-DeclStmt 0x1c618f5eea8 <line:152:5, col:15>
|   | `-VarDecl 0x1c618f5ee40 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x1c618f5f250 <line:153:5, line:154:32>
|     |-BinaryOperator 0x1c618f5ef38 <line:153:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1c618f5eec0 <col:10> 'unsigned int' lvalue Var 0x1c618f5ee40 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1c618f5ef20 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1c618f5eef8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1c618f5efc8 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1c618f5ef98 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618f5ef58 <col:17> 'unsigned int' lvalue Var 0x1c618f5ee40 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1c618f5efb0 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x1c618f5ef78 <col:21> 'unsigned int' lvalue ParmVar 0x1c618f5ebe8 'len' 'unsigned int'
|     |-UnaryOperator 0x1c618f5f008 <col:26, col:28> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x1c618f5efe8 <col:28> 'unsigned int' lvalue Var 0x1c618f5ee40 'i' 'unsigned int'
|     `-BinaryOperator 0x1c618f5f230 <line:154:9, col:32> 'u8':'unsigned char' '='
|       |-ArraySubscriptExpr 0x1c618f5f0b0 <col:9, col:14> 'u8':'unsigned char' lvalue
|       | |-ImplicitCastExpr 0x1c618f5f080 <col:9> 'u8 *' <LValueToRValue>
|       | | `-DeclRefExpr 0x1c618f5f020 <col:9> 'u8 *' lvalue ParmVar 0x1c618f5eaf0 'out' 'u8 *'
|       | `-ImplicitCastExpr 0x1c618f5f098 <col:13> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x1c618f5f060 <col:13> 'unsigned int' lvalue Var 0x1c618f5ee40 'i' 'unsigned int'
|       `-ImplicitCastExpr 0x1c618f5f218 <col:18, col:32> 'u8':'unsigned char' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1c618f5f1f8 <col:18, col:32> 'const u8':'const unsigned char' lvalue
|           |-ImplicitCastExpr 0x1c618f5f1e0 <col:18> 'const u8 *' <LValueToRValue>
|           | `-DeclRefExpr 0x1c618f5f0d0 <col:18> 'const u8 *' lvalue ParmVar 0x1c618f5eb68 'in' 'const u8 *'
|           `-BinaryOperator 0x1c618f5f1c0 <col:21, col:31> 'unsigned int' '-'
|             |-BinaryOperator 0x1c618f5f168 <col:21, col:27> 'unsigned int' '-'
|             | |-ImplicitCastExpr 0x1c618f5f138 <col:21> 'unsigned int' <LValueToRValue>
|             | | `-DeclRefExpr 0x1c618f5f0f0 <col:21> 'unsigned int' lvalue ParmVar 0x1c618f5ebe8 'len' 'unsigned int'
|             | `-ImplicitCastExpr 0x1c618f5f150 <col:27> 'unsigned int' <IntegralCast>
|             |   `-IntegerLiteral 0x1c618f5f110 <col:27> 'int' 1
|             `-ImplicitCastExpr 0x1c618f5f1a8 <col:31> 'unsigned int' <LValueToRValue>
|               `-DeclRefExpr 0x1c618f5f188 <col:31> 'unsigned int' lvalue Var 0x1c618f5ee40 'i' 'unsigned int'
|-FunctionDecl 0x1c618f5f410 <line:158:1, line:179:1> line:158:12 invalid BN_to_felem 'int (limb *, const int *)' static
| |-ParmVarDecl 0x1c618f5f2b8 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f5f338 <col:35, col:49> col:49 invalid bn 'const int *'
| `-CompoundStmt 0x1c618f60230 <line:159:1, line:179:1>
|   |-DeclStmt 0x1c618f5f550 <line:160:5, col:25>
|   | `-VarDecl 0x1c618f5f4e8 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x1c618f5f5e0 <line:161:5, col:26>
|   | `-VarDecl 0x1c618f5f578 <col:5, col:21> col:21 used b_out 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x1c618f5f678 <line:162:5, col:23>
|   | `-VarDecl 0x1c618f5f610 <col:5, col:14> col:14 used num_bytes 'unsigned int'
|   |-CallExpr 0x1c618f5f7d0 <line:165:5, col:35> 'void *'
|   | |-ImplicitCastExpr 0x1c618f5f7b8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f5f690 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1c618e357c0 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1c618f5f820 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1c618f5f808 <col:12> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f5f6b0 <col:12> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c618f5f578 'b_out' 'felem_bytearray':'u8 [32]'
|   | |-IntegerLiteral 0x1c618f5f6e8 <col:19> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x1c618f5f750 <col:22, col:34> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x1c618f5f730 <col:28, col:34> 'felem_bytearray':'u8 [32]' lvalue
|   |     `-DeclRefExpr 0x1c618f5f710 <col:29> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c618f5f578 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   |-IfStmt 0x1c618f5fbd8 <line:167:5, line:170:5>
|   | |-BinaryOperator 0x1c618f5fa58 <line:167:9, col:33> 'int' '>'
|   | | |-ImplicitCastExpr 0x1c618f5fa40 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1c618f5fa28 <col:9> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1c618f5f9a8 <col:9> 'unsigned int' lvalue Var 0x1c618f5f610 'num_bytes' 'unsigned int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1c618f5fa08 <col:21, col:33> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1c618f5f9e8 <col:27, col:33> 'felem_bytearray':'u8 [32]' lvalue
|   | |     `-DeclRefExpr 0x1c618f5f9c8 <col:28> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c618f5f578 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   | `-CompoundStmt 0x1c618f5fbc0 <col:36, line:170:5>
|   |   `-ReturnStmt 0x1c618f5fbb0 <line:169:9, col:16>
|   |     `-IntegerLiteral 0x1c618f5fb88 <col:16> 'int' 0
|   |-IfStmt 0x1c618f5fd88 <line:171:5, line:174:5>
|   | |-OpaqueValueExpr 0x1c618f5fd70 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1c618f5fd58 <line:171:29, line:174:5>
|   |   `-ReturnStmt 0x1c618f5fd48 <line:173:9, col:16>
|   |     `-IntegerLiteral 0x1c618f5fd20 <col:16> 'int' 0
|   |-CallExpr 0x1c618f60000 <line:176:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1c618f5ffe8 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f5ff08 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x1c618f5ed58 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | |-ImplicitCastExpr 0x1c618f60038 <col:17> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f5ff28 <col:17> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c618f5f578 'b_out' 'felem_bytearray':'u8 [32]'
|   | |-ImplicitCastExpr 0x1c618f60068 <col:24> 'const u8 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f60050 <col:24> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f5ff48 <col:24> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c618f5f4e8 'b_in' 'felem_bytearray':'u8 [32]'
|   | `-ImplicitCastExpr 0x1c618f60080 <col:30> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f5ff68 <col:30> 'unsigned int' lvalue Var 0x1c618f5f610 'num_bytes' 'unsigned int'
|   |-CallExpr 0x1c618f60180 <line:177:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c618f60168 <col:5> 'void (*)(limb *, const u8 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f60098 <col:5> 'void (limb *, const u8 *)' Function 0x1c618f5d728 'bin32_to_felem' 'void (limb *, const u8 *)'
|   | |-ImplicitCastExpr 0x1c618f601b0 <col:20> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f600b8 <col:20> 'limb *':'limb *' lvalue ParmVar 0x1c618f5f2b8 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1c618f601e0 <col:25> 'const u8 *':'const u8 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f601c8 <col:25> 'u8 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f600f0 <col:25> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c618f5f578 'b_out' 'felem_bytearray':'u8 [32]'
|   `-ReturnStmt 0x1c618f60220 <line:178:5, col:12>
|     `-IntegerLiteral 0x1c618f601f8 <col:12> 'int' 1
|-FunctionDecl 0x1c618f60430 <line:182:1, line:188:1> line:182:16 invalid smallfelem_to_BN 'int *(int *, const u64 *)' static
| |-ParmVarDecl 0x1c618f602a0 <col:33, col:41> col:41 invalid out 'int *'
| |-ParmVarDecl 0x1c618f60318 <col:46, col:63> col:63 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618f60a98 <line:183:1, line:188:1>
|   |-DeclStmt 0x1c618f60600 <line:184:5, col:32>
|   | |-VarDecl 0x1c618f60508 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [32]'
|   | `-VarDecl 0x1c618f60580 <col:5, col:27> col:27 used b_out 'felem_bytearray':'u8 [32]'
|   |-CallExpr 0x1c618f60720 <line:185:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x1c618f60708 <col:5> 'void (*)(u8 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f60618 <col:5> 'void (u8 *, const u64 *)' Function 0x1c618f5e2e8 'smallfelem_to_bin32' 'void (u8 *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f60750 <col:25> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f60638 <col:25> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c618f60508 'b_in' 'felem_bytearray':'u8 [32]'
|   | `-ImplicitCastExpr 0x1c618f60768 <col:31> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f60670 <col:31> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f60318 'in' 'const u64 *':'const u64 *'
|   `-CallExpr 0x1c618f60870 <line:186:5, col:43> 'void'
|     |-ImplicitCastExpr 0x1c618f60858 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f60780 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x1c618f5ed58 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|     |-ImplicitCastExpr 0x1c618f608a8 <col:17> 'u8 *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x1c618f607a0 <col:17> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c618f60580 'b_out' 'felem_bytearray':'u8 [32]'
|     |-ImplicitCastExpr 0x1c618f608d8 <col:24> 'const u8 *' <NoOp>
|     | `-ImplicitCastExpr 0x1c618f608c0 <col:24> 'u8 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x1c618f607d8 <col:24> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c618f60508 'b_in' 'felem_bytearray':'u8 [32]'
|     `-ImplicitCastExpr 0x1c618f608f0 <col:30, col:42> 'unsigned int' <IntegralCast>
|       `-UnaryExprOrTypeTraitExpr 0x1c618f60838 <col:30, col:42> 'unsigned long long' sizeof
|         `-ParenExpr 0x1c618f60818 <col:36, col:42> 'felem_bytearray':'u8 [32]' lvalue
|           `-DeclRefExpr 0x1c618f607f8 <col:37> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c618f60580 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|-FunctionDecl 0x1c618f60c08 <line:195:1, line:201:1> line:195:13 used smallfelem_one 'void (u64 *)' static
| |-ParmVarDecl 0x1c618f60b00 <col:28, col:39> col:39 used out 'u64 *':'u64 *'
| `-CompoundStmt 0x1c618e72f20 <line:196:1, line:201:1>
|   |-BinaryOperator 0x1c618f60d88 <line:197:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1c618f60d28 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1c618f60d10 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f60cc8 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f60b00 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1c618f60ce8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618f60d70 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f60d48 <col:14> 'int' 1
|   |-BinaryOperator 0x1c618f60e68 <line:198:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1c618f60e08 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1c618f60df0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f60da8 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f60b00 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1c618f60dc8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618f60e50 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f60e28 <col:14> 'int' 0
|   |-BinaryOperator 0x1c618f60f48 <line:199:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1c618f60ee8 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1c618f60ed0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f60e88 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f60b00 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1c618f60ea8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618f60f30 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f60f08 <col:14> 'int' 0
|   `-BinaryOperator 0x1c618f61028 <line:200:5, col:14> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1c618f60fc8 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1c618f60fb0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618f60f68 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f60b00 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x1c618f60f88 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618f61010 <col:14> 'u64':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x1c618f60fe8 <col:14> 'int' 0
|-FunctionDecl 0x1c618e73118 <line:203:1, line:209:1> line:203:13 used smallfelem_assign 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x1c618e72f60 <col:31, col:42> col:42 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618e72fd8 <col:47, col:64> col:64 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618e736c0 <line:204:1, line:209:1>
|   |-BinaryOperator 0x1c618e732f8 <line:205:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1c618e73240 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1c618e73228 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e731e0 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618e72f60 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1c618e73200 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e732e0 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e732c0 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1c618e732a8 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e73260 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e72fd8 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1c618e73280 <col:17> 'int' 0
|   |-BinaryOperator 0x1c618e73430 <line:206:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1c618e73378 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1c618e73360 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e73318 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618e72f60 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1c618e73338 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e73418 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e733f8 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1c618e733e0 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e73398 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e72fd8 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1c618e733b8 <col:17> 'int' 1
|   |-BinaryOperator 0x1c618e73568 <line:207:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1c618e734b0 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1c618e73498 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e73450 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618e72f60 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1c618e73470 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e73550 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e73530 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1c618e73518 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e734d0 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e72fd8 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1c618e734f0 <col:17> 'int' 2
|   `-BinaryOperator 0x1c618e736a0 <line:208:5, col:18> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1c618e735e8 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1c618e735d0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e73588 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618e72f60 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x1c618e735a8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618e73688 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1c618e73668 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x1c618e73650 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x1c618e73608 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e72fd8 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x1c618e73628 <col:17> 'int' 3
|-FunctionDecl 0x1c618e73968 <line:211:1, line:217:1> line:211:13 used felem_assign 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1c618e73700 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e73820 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618e73f10 <line:212:1, line:217:1>
|   |-BinaryOperator 0x1c618e73b48 <line:213:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e73a90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e73a78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e73a30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e73700 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e73a50 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e73b30 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e73b10 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e73af8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e73ab0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e73820 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e73ad0 <col:17> 'int' 0
|   |-BinaryOperator 0x1c618e73c80 <line:214:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e73bc8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e73bb0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e73b68 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e73700 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e73b88 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e73c68 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e73c48 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e73c30 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e73be8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e73820 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e73c08 <col:17> 'int' 1
|   |-BinaryOperator 0x1c618e73db8 <line:215:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e73d00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e73ce8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e73ca0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e73700 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e73cc0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e73da0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e73d80 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e73d68 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e73d20 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e73820 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e73d40 <col:17> 'int' 2
|   `-BinaryOperator 0x1c618e73ef0 <line:216:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1c618e73e38 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e73e20 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e73dd8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e73700 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e73df8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618e73ed8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1c618e73eb8 <col:14, col:18> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x1c618e73ea0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1c618e73e58 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e73820 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1c618e73e78 <col:17> 'int' 3
|-FunctionDecl 0x1c618e74090 <line:220:1, line:226:1> line:220:13 used felem_sum 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1c618e73f50 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e73fc8 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618e74678 <line:221:1, line:226:1>
|   |-CompoundAssignOperator 0x1c618e74270 <line:222:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e741b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e741a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e74158 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e73f50 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e74178 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e74258 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e74238 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e74220 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e741d8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e73fc8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e741f8 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1c618e743b8 <line:223:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e74300 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e742e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e742a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e73f50 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e742c0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e743a0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e74380 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e74368 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e74320 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e73fc8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e74340 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1c618e74500 <line:224:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e74448 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e74430 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e743e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e73f50 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e74408 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e744e8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e744c8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e744b0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e74468 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e73fc8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e74488 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1c618e74648 <line:225:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1c618e74590 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e74578 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e74530 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e73f50 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e74550 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618e74630 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1c618e74610 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x1c618e745f8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1c618e745b0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e73fc8 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1c618e745d0 <col:18> 'int' 3
|-FunctionDecl 0x1c618e74878 <line:229:1, line:235:1> line:229:13 used felem_small_sum 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x1c618e746b8 <col:29, col:35> col:35 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e74730 <col:40, col:57> col:57 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618e74e60 <line:230:1, line:235:1>
|   |-CompoundAssignOperator 0x1c618e74a58 <line:231:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e749a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e74988 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e74940 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e746b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e74960 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e74a40 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e74a20 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1c618e74a08 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e749c0 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e74730 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1c618e749e0 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1c618e74ba0 <line:232:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e74ae8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e74ad0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e74a88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e746b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e74aa8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e74b88 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e74b68 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1c618e74b50 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e74b08 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e74730 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1c618e74b28 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1c618e74ce8 <line:233:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e74c30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e74c18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e74bd0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e746b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e74bf0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e74cd0 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e74cb0 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1c618e74c98 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e74c50 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e74730 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x1c618e74c70 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1c618e74e30 <line:234:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x1c618e74d78 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e74d60 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e74d18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e746b8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e74d38 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618e74e18 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1c618e74df8 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x1c618e74de0 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x1c618e74d98 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e74730 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x1c618e74db8 <col:18> 'int' 3
|-FunctionDecl 0x1c618e75078 <line:238:1, line:244:1> line:238:13 used felem_scalar 'void (limb *, const u64)' static
| |-ParmVarDecl 0x1c618e74ea0 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e74f30 <col:37, col:47> col:47 used scalar 'const u64':'const unsigned long long'
| `-CompoundStmt 0x1c618e754e0 <line:239:1, line:244:1>
|   |-CompoundAssignOperator 0x1c618e751f8 <line:240:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e751a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e75188 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e75140 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e74ea0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e75160 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e751e0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e751c0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e74f30 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1c618e752e0 <line:241:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e75288 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e75270 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e75228 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e74ea0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e75248 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e752c8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e752a8 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e74f30 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1c618e753c8 <line:242:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e75370 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e75358 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e75310 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e74ea0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e75330 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e753b0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e75390 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e74f30 'scalar' 'const u64':'const unsigned long long'
|   `-CompoundAssignOperator 0x1c618e754b0 <line:243:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x1c618e75458 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e75440 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e753f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e74ea0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e75418 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618e75498 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x1c618e75478 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e74f30 'scalar' 'const u64':'const unsigned long long'
|-FunctionDecl 0x1c618e756e8 <line:247:1, line:257:1> line:247:13 used longfelem_scalar 'void (limb *, const u64)' static
| |-ParmVarDecl 0x1c618e75570 <col:30, col:40> col:40 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e755e8 <col:45, col:55> col:55 used scalar 'const u64':'const unsigned long long'
| `-CompoundStmt 0x1c618e75ef0 <line:248:1, line:257:1>
|   |-CompoundAssignOperator 0x1c618e75868 <line:249:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e75810 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e757f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e757b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e75570 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e757d0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e75850 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e75830 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e755e8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1c618e75950 <line:250:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e758f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e758e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e75898 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e75570 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e758b8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e75938 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e75918 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e755e8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1c618e75a38 <line:251:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e759e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e759c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e75980 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e75570 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e759a0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e75a20 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e75a00 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e755e8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1c618e75b20 <line:252:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e75ac8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e75ab0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e75a68 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e75570 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e75a88 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e75b08 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e75ae8 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e755e8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1c618e75c08 <line:253:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e75bb0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e75b98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e75b50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e75570 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e75b70 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618e75bf0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e75bd0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e755e8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1c618e75cf0 <line:254:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e75c98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e75c80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e75c38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e75570 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e75c58 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618e75cd8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e75cb8 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e755e8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1c618e75dd8 <line:255:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e75d80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e75d68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e75d20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e75570 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e75d40 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1c618e75dc0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e75da0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e755e8 'scalar' 'const u64':'const unsigned long long'
|   `-CompoundAssignOperator 0x1c618e75ec0 <line:256:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x1c618e75e68 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e75e50 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e75e08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e75570 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e75e28 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x1c618e75ea8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x1c618e75e88 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c618e755e8 'scalar' 'const u64':'const unsigned long long'
|-VarDecl 0x1c618e75f50 <line:264:1, line:265:53> line:264:20 used zero105 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x1c618e76a10 <line:265:5, col:53> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x1c618e76290 <line:259:22, col:78> 'int' '-'
|   | |-BinaryOperator 0x1c618e76188 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x1c618e76080 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x1c618e76060 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1c618e76018 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1c618e75ff0 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1c618e75fb8 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x1c618e76038 <col:36> 'int' 105
|   | | `-ParenExpr 0x1c618e76168 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x1c618e76148 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1c618e76100 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1c618e760d8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1c618e760a0 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x1c618e76120 <col:57> 'int' 41
|   | `-ParenExpr 0x1c618e76270 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x1c618e76250 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1c618e76208 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1c618e761e0 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1c618e761a8 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x1c618e76228 <col:77> 'int' 9
|   |-ParenExpr 0x1c618e76378 <line:260:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x1c618e76358 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1c618e76310 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1c618e762e8 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x1c618e762b0 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x1c618e76330 <col:31> 'int' 105
|   |-BinaryOperator 0x1c618e76670 <line:261:22, col:78> 'int' '+'
|   | |-BinaryOperator 0x1c618e76568 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x1c618e76460 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x1c618e76440 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1c618e763f8 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1c618e763d0 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1c618e76398 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x1c618e76418 <col:36> 'int' 105
|   | | `-ParenExpr 0x1c618e76548 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x1c618e76528 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1c618e764e0 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1c618e764b8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1c618e76480 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x1c618e76500 <col:57> 'int' 41
|   | `-ParenExpr 0x1c618e76650 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x1c618e76630 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1c618e765e8 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1c618e765c0 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1c618e76588 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x1c618e76608 <col:77> 'int' 9
|   `-BinaryOperator 0x1c618e76968 <col:22, col:78> 'int' '+'
|     |-BinaryOperator 0x1c618e76860 <col:22, col:59> 'int' '-'
|     | |-ParenExpr 0x1c618e76758 <col:22, col:39> 'limb':'int'
|     | | `-BinaryOperator 0x1c618e76738 <col:23, col:36> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x1c618e766f0 <col:23, col:31> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x1c618e766c8 <col:24, col:30> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x1c618e76690 <col:30> 'int' 1
|     | |   `-IntegerLiteral 0x1c618e76710 <col:36> 'int' 105
|     | `-ParenExpr 0x1c618e76840 <col:43, col:59> 'limb':'int'
|     |   `-BinaryOperator 0x1c618e76820 <col:44, col:57> 'limb':'int' '<<'
|     |     |-ParenExpr 0x1c618e767d8 <col:44, col:52> 'limb':'int'
|     |     | `-CStyleCastExpr 0x1c618e767b0 <col:45, col:51> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x1c618e76778 <col:51> 'int' 1
|     |     `-IntegerLiteral 0x1c618e767f8 <col:57> 'int' 41
|     `-ParenExpr 0x1c618e76948 <col:63, col:78> 'limb':'int'
|       `-BinaryOperator 0x1c618e76928 <col:64, col:77> 'limb':'int' '<<'
|         |-ParenExpr 0x1c618e768e0 <col:64, col:72> 'limb':'int'
|         | `-CStyleCastExpr 0x1c618e768b8 <col:65, col:71> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x1c618e76880 <col:71> 'int' 1
|         `-IntegerLiteral 0x1c618e76900 <col:77> 'int' 9
|-FunctionDecl 0x1c618e76bc0 <line:272:1, line:279:1> line:272:13 used smallfelem_neg 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x1c618e76a80 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e76af8 <col:39, col:56> col:56 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618e77580 <line:273:1, line:279:1>
|   |-BinaryOperator 0x1c618e76e88 <line:275:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e76ce8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e76cd0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e76c88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e76a80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e76ca8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e76e70 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e76e50 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1c618e76e38 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1c618e76e08 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1c618e76d68 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x1c618e76d50 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1c618e76d08 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x1c618e76d28 <col:22> 'int' 0
|   |     `-ImplicitCastExpr 0x1c618e76e20 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x1c618e76de8 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x1c618e76dd0 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1c618e76d88 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e76af8 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x1c618e76da8 <col:33> 'int' 0
|   |-BinaryOperator 0x1c618e77120 <line:276:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e76f80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e76f68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e76ef0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e76a80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e76f40 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e77108 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e770e8 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1c618e770d0 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1c618e770a0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1c618e77000 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x1c618e76fe8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1c618e76fa0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x1c618e76fc0 <col:22> 'int' 1
|   |     `-ImplicitCastExpr 0x1c618e770b8 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x1c618e77080 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x1c618e77068 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1c618e77020 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e76af8 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x1c618e77040 <col:33> 'int' 1
|   |-BinaryOperator 0x1c618e77340 <line:277:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e771a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e77188 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e77140 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e76a80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e77160 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e77328 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e77308 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1c618e772f0 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1c618e772c0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1c618e77220 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x1c618e77208 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1c618e771c0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x1c618e771e0 <col:22> 'int' 2
|   |     `-ImplicitCastExpr 0x1c618e772d8 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x1c618e772a0 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x1c618e77288 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1c618e77240 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e76af8 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x1c618e77260 <col:33> 'int' 2
|   `-BinaryOperator 0x1c618e77560 <line:278:5, col:34> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1c618e773c0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e773a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e77360 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e76a80 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e77380 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618e77548 <col:14, col:34> 'limb':'int' <IntegralCast>
|       `-BinaryOperator 0x1c618e77528 <col:14, col:34> 'unsigned long long' '-'
|         |-ImplicitCastExpr 0x1c618e77510 <col:14, col:23> 'unsigned long long' <IntegralCast>
|         | `-ImplicitCastExpr 0x1c618e774e0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x1c618e77440 <col:14, col:23> 'const limb':'const int' lvalue
|         |     |-ImplicitCastExpr 0x1c618e77428 <col:14> 'const limb *' <ArrayToPointerDecay>
|         |     | `-DeclRefExpr 0x1c618e773e0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|         |     `-IntegerLiteral 0x1c618e77400 <col:22> 'int' 3
|         `-ImplicitCastExpr 0x1c618e774f8 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|           `-ArraySubscriptExpr 0x1c618e774c0 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|             |-ImplicitCastExpr 0x1c618e774a8 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|             | `-DeclRefExpr 0x1c618e77460 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e76af8 'small' 'const u64 *':'const u64 *'
|             `-IntegerLiteral 0x1c618e77480 <col:33> 'int' 3
|-FunctionDecl 0x1c618e77700 <line:288:1, line:302:1> line:288:13 used felem_diff 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1c618e775c0 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e77638 <col:35, col:47> col:47 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618e78208 <line:289:1, line:302:1>
|   |-CompoundAssignOperator 0x1c618e778e0 <line:293:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e77828 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e77810 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e777c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e775c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e777e8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e778c8 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e778a8 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e77890 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618e77848 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1c618e77868 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x1c618e77a28 <line:294:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e77970 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e77958 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e77910 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e775c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e77930 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e77a10 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e779f0 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e779d8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618e77990 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1c618e779b0 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x1c618e77b70 <line:295:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e77ab8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e77aa0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e77a58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e775c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e77a78 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e77b58 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e77b38 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e77b20 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618e77ad8 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1c618e77af8 <col:23> 'int' 2
|   |-CompoundAssignOperator 0x1c618e77cb8 <line:296:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e77c00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e77be8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e77ba0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e775c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e77bc0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e77ca0 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e77c80 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e77c68 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618e77c20 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1c618e77c40 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x1c618e77e00 <line:298:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e77d48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e77d30 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e77ce8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e775c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e77d08 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e77de8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e77dc8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e77db0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e77d68 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e77638 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e77d88 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1c618e77f48 <line:299:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e77e90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e77e78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e77e30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e775c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e77e50 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e77f30 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e77f10 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e77ef8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e77eb0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e77638 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e77ed0 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1c618e78090 <line:300:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e77fd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e77fc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e77f78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e775c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e77f98 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e78078 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e78058 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e78040 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e77ff8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e77638 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e78018 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1c618e781d8 <line:301:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1c618e78120 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e78108 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e780c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e775c0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e780e0 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618e781c0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1c618e781a0 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x1c618e78188 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1c618e78140 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e77638 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1c618e78160 <col:18> 'int' 3
|-VarDecl 0x1c618e78268 <line:309:1, line:310:56> line:309:20 used zero107 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x1c618e78d28 <line:310:5, col:56> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x1c618e785a8 <line:304:23, col:80> 'int' '-'
|   | |-BinaryOperator 0x1c618e784a0 <col:23, col:60> 'int' '-'
|   | | |-ParenExpr 0x1c618e78398 <col:23, col:40> 'limb':'int'
|   | | | `-BinaryOperator 0x1c618e78378 <col:24, col:37> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1c618e78330 <col:24, col:32> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1c618e78308 <col:25, col:31> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1c618e782d0 <col:31> 'int' 1
|   | | |   `-IntegerLiteral 0x1c618e78350 <col:37> 'int' 107
|   | | `-ParenExpr 0x1c618e78480 <col:44, col:60> 'limb':'int'
|   | |   `-BinaryOperator 0x1c618e78460 <col:45, col:58> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1c618e78418 <col:45, col:53> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1c618e783f0 <col:46, col:52> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1c618e783b8 <col:52> 'int' 1
|   | |     `-IntegerLiteral 0x1c618e78438 <col:58> 'int' 43
|   | `-ParenExpr 0x1c618e78588 <col:64, col:80> 'limb':'int'
|   |   `-BinaryOperator 0x1c618e78568 <col:65, col:78> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1c618e78520 <col:65, col:73> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1c618e784f8 <col:66, col:72> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1c618e784c0 <col:72> 'int' 1
|   |     `-IntegerLiteral 0x1c618e78540 <col:78> 'int' 11
|   |-ParenExpr 0x1c618e78690 <line:305:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x1c618e78670 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1c618e78628 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1c618e78600 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x1c618e785c8 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x1c618e78648 <col:31> 'int' 107
|   |-BinaryOperator 0x1c618e78988 <line:306:23, col:80> 'int' '+'
|   | |-BinaryOperator 0x1c618e78880 <col:23, col:60> 'int' '-'
|   | | |-ParenExpr 0x1c618e78778 <col:23, col:40> 'limb':'int'
|   | | | `-BinaryOperator 0x1c618e78758 <col:24, col:37> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1c618e78710 <col:24, col:32> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1c618e786e8 <col:25, col:31> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1c618e786b0 <col:31> 'int' 1
|   | | |   `-IntegerLiteral 0x1c618e78730 <col:37> 'int' 107
|   | | `-ParenExpr 0x1c618e78860 <col:44, col:60> 'limb':'int'
|   | |   `-BinaryOperator 0x1c618e78840 <col:45, col:58> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1c618e787f8 <col:45, col:53> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1c618e787d0 <col:46, col:52> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1c618e78798 <col:52> 'int' 1
|   | |     `-IntegerLiteral 0x1c618e78818 <col:58> 'int' 43
|   | `-ParenExpr 0x1c618e78968 <col:64, col:80> 'limb':'int'
|   |   `-BinaryOperator 0x1c618e78948 <col:65, col:78> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1c618e78900 <col:65, col:73> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1c618e788d8 <col:66, col:72> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1c618e788a0 <col:72> 'int' 1
|   |     `-IntegerLiteral 0x1c618e78920 <col:78> 'int' 11
|   `-BinaryOperator 0x1c618e78c80 <col:23, col:80> 'int' '+'
|     |-BinaryOperator 0x1c618e78b78 <col:23, col:60> 'int' '-'
|     | |-ParenExpr 0x1c618e78a70 <col:23, col:40> 'limb':'int'
|     | | `-BinaryOperator 0x1c618e78a50 <col:24, col:37> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x1c618e78a08 <col:24, col:32> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x1c618e789e0 <col:25, col:31> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x1c618e789a8 <col:31> 'int' 1
|     | |   `-IntegerLiteral 0x1c618e78a28 <col:37> 'int' 107
|     | `-ParenExpr 0x1c618e78b58 <col:44, col:60> 'limb':'int'
|     |   `-BinaryOperator 0x1c618e78b38 <col:45, col:58> 'limb':'int' '<<'
|     |     |-ParenExpr 0x1c618e78af0 <col:45, col:53> 'limb':'int'
|     |     | `-CStyleCastExpr 0x1c618e78ac8 <col:46, col:52> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x1c618e78a90 <col:52> 'int' 1
|     |     `-IntegerLiteral 0x1c618e78b10 <col:58> 'int' 43
|     `-ParenExpr 0x1c618e78c60 <col:64, col:80> 'limb':'int'
|       `-BinaryOperator 0x1c618e78c40 <col:65, col:78> 'limb':'int' '<<'
|         |-ParenExpr 0x1c618e78bf8 <col:65, col:73> 'limb':'int'
|         | `-CStyleCastExpr 0x1c618e78bd0 <col:66, col:72> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x1c618e78b98 <col:72> 'int' 1
|         `-IntegerLiteral 0x1c618e78c18 <col:78> 'int' 11
|-FunctionDecl 0x1c618e78f50 <line:320:1, line:334:1> line:320:13 used felem_diff_zero107 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1c618e78d98 <col:32, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e78e10 <col:43, col:55> col:55 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618e79aa0 <line:321:1, line:334:1>
|   |-CompoundAssignOperator 0x1c618e79130 <line:325:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e79078 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e79060 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e79018 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e78d98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e79038 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e79118 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e790f8 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e790e0 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618e79098 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1c618e78268 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1c618e790b8 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x1c618e792c0 <line:326:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e79208 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e791f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e791a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e78d98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e791c8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e792a8 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e79288 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e79270 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618e79228 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1c618e78268 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1c618e79248 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x1c618e79408 <line:327:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e79350 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e79338 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e792f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e78d98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e79310 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e793f0 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e793d0 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e793b8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618e79370 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1c618e78268 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1c618e79390 <col:23> 'int' 2
|   |-CompoundAssignOperator 0x1c618e79550 <line:328:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e79498 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e79480 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e79438 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e78d98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e79458 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e79538 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e79518 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e79500 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618e794b8 <col:15> 'const felem':'limb const[4]' lvalue Var 0x1c618e78268 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x1c618e794d8 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x1c618e79698 <line:330:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e795e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e795c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e79580 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e78d98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e795a0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e79680 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e79660 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e79648 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e79600 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e78e10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e79620 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1c618e797e0 <line:331:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e79728 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e79710 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e796c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e78d98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e796e8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e797c8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e797a8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e79790 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e79748 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e78e10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e79768 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1c618e79928 <line:332:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e79870 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e79858 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e79810 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e78d98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e79830 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e79910 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e798f0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e798d8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e79890 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e78e10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e798b0 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1c618e79a70 <line:333:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1c618e799b8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e799a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e79958 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e78d98 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e79978 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618e79a58 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1c618e79a38 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x1c618e79a20 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1c618e799d8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e78e10 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1c618e799f8 <col:18> 'int' 3
|-FunctionDecl 0x1c618e79cf8 <line:343:1, line:373:1> line:343:13 used longfelem_diff 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1c618e79b00 <col:28, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e79bf0 <col:43, col:59> col:59 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618e7bfd0 <line:344:1, line:373:1>
|   |-DeclStmt 0x1c618e7a130 <line:345:5, line:346:67>
|   | `-VarDecl 0x1c618e79dd0 <line:345:5, line:346:66> line:345:23 used two70m8p6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x1c618e7a110 <line:346:9, col:66> 'int' '+'
|   |     |-BinaryOperator 0x1c618e7a008 <col:9, col:46> 'int' '-'
|   |     | |-ParenExpr 0x1c618e79f00 <col:9, col:26> 'limb':'int'
|   |     | | `-BinaryOperator 0x1c618e79ee0 <col:10, col:24> 'limb':'int' '<<'
|   |     | |   |-ParenExpr 0x1c618e79e98 <col:10, col:19> 'limb':'int'
|   |     | |   | `-CStyleCastExpr 0x1c618e79e70 <col:11, col:18> 'limb':'int' <NoOp>
|   |     | |   |   `-IntegerLiteral 0x1c618e79e38 <col:18> 'int' 1
|   |     | |   `-IntegerLiteral 0x1c618e79eb8 <col:24> 'int' 70
|   |     | `-ParenExpr 0x1c618e79fe8 <col:30, col:46> 'limb':'int'
|   |     |   `-BinaryOperator 0x1c618e79fc8 <col:31, col:45> 'limb':'int' '<<'
|   |     |     |-ParenExpr 0x1c618e79f80 <col:31, col:40> 'limb':'int'
|   |     |     | `-CStyleCastExpr 0x1c618e79f58 <col:32, col:39> 'limb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x1c618e79f20 <col:39> 'int' 1
|   |     |     `-IntegerLiteral 0x1c618e79fa0 <col:45> 'int' 8
|   |     `-ParenExpr 0x1c618e7a0f0 <col:50, col:66> 'limb':'int'
|   |       `-BinaryOperator 0x1c618e7a0d0 <col:51, col:65> 'limb':'int' '<<'
|   |         |-ParenExpr 0x1c618e7a088 <col:51, col:60> 'limb':'int'
|   |         | `-CStyleCastExpr 0x1c618e7a060 <col:52, col:59> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1c618e7a028 <col:59> 'int' 1
|   |         `-IntegerLiteral 0x1c618e7a0a8 <col:65> 'int' 6
|   |-DeclStmt 0x1c618e7a3b0 <line:347:5, col:73>
|   | `-VarDecl 0x1c618e7a158 <col:5, col:72> col:23 used two70p40 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x1c618e7a390 <col:34, col:72> 'int' '+'
|   |     |-ParenExpr 0x1c618e7a288 <col:34, col:51> 'limb':'int'
|   |     | `-BinaryOperator 0x1c618e7a268 <col:35, col:49> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x1c618e7a220 <col:35, col:44> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x1c618e7a1f8 <col:36, col:43> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x1c618e7a1c0 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x1c618e7a240 <col:49> 'int' 70
|   |     `-ParenExpr 0x1c618e7a370 <col:55, col:72> 'limb':'int'
|   |       `-BinaryOperator 0x1c618e7a350 <col:56, col:70> 'limb':'int' '<<'
|   |         |-ParenExpr 0x1c618e7a308 <col:56, col:65> 'limb':'int'
|   |         | `-CStyleCastExpr 0x1c618e7a2e0 <col:57, col:64> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1c618e7a2a8 <col:64> 'int' 1
|   |         `-IntegerLiteral 0x1c618e7a328 <col:70> 'int' 40
|   |-DeclStmt 0x1c618e7a528 <line:348:5, col:49>
|   | `-VarDecl 0x1c618e7a3d8 <col:5, col:48> col:23 used two70 'const limb':'const int' static cinit
|   |   `-ParenExpr 0x1c618e7a508 <col:31, col:48> 'limb':'int'
|   |     `-BinaryOperator 0x1c618e7a4e8 <col:32, col:46> 'limb':'int' '<<'
|   |       |-ParenExpr 0x1c618e7a4a0 <col:32, col:41> 'limb':'int'
|   |       | `-CStyleCastExpr 0x1c618e7a478 <col:33, col:40> 'limb':'int' <NoOp>
|   |       |   `-IntegerLiteral 0x1c618e7a440 <col:40> 'int' 1
|   |       `-IntegerLiteral 0x1c618e7a4c0 <col:46> 'int' 70
|   |-DeclStmt 0x1c618e7a9b8 <line:349:5, line:351:26>
|   | `-VarDecl 0x1c618e7a550 <line:349:5, line:351:25> line:349:23 used two70m40m38p6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x1c618e7a998 <line:350:9, line:351:25> 'int' '+'
|   |     |-BinaryOperator 0x1c618e7a890 <line:350:9, col:68> 'int' '-'
|   |     | |-BinaryOperator 0x1c618e7a788 <col:9, col:47> 'int' '-'
|   |     | | |-ParenExpr 0x1c618e7a680 <col:9, col:26> 'limb':'int'
|   |     | | | `-BinaryOperator 0x1c618e7a660 <col:10, col:24> 'limb':'int' '<<'
|   |     | | |   |-ParenExpr 0x1c618e7a618 <col:10, col:19> 'limb':'int'
|   |     | | |   | `-CStyleCastExpr 0x1c618e7a5f0 <col:11, col:18> 'limb':'int' <NoOp>
|   |     | | |   |   `-IntegerLiteral 0x1c618e7a5b8 <col:18> 'int' 1
|   |     | | |   `-IntegerLiteral 0x1c618e7a638 <col:24> 'int' 70
|   |     | | `-ParenExpr 0x1c618e7a768 <col:30, col:47> 'limb':'int'
|   |     | |   `-BinaryOperator 0x1c618e7a748 <col:31, col:45> 'limb':'int' '<<'
|   |     | |     |-ParenExpr 0x1c618e7a700 <col:31, col:40> 'limb':'int'
|   |     | |     | `-CStyleCastExpr 0x1c618e7a6d8 <col:32, col:39> 'limb':'int' <NoOp>
|   |     | |     |   `-IntegerLiteral 0x1c618e7a6a0 <col:39> 'int' 1
|   |     | |     `-IntegerLiteral 0x1c618e7a720 <col:45> 'int' 40
|   |     | `-ParenExpr 0x1c618e7a870 <col:51, col:68> 'limb':'int'
|   |     |   `-BinaryOperator 0x1c618e7a850 <col:52, col:66> 'limb':'int' '<<'
|   |     |     |-ParenExpr 0x1c618e7a808 <col:52, col:61> 'limb':'int'
|   |     |     | `-CStyleCastExpr 0x1c618e7a7e0 <col:53, col:60> 'limb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x1c618e7a7a8 <col:60> 'int' 1
|   |     |     `-IntegerLiteral 0x1c618e7a828 <col:66> 'int' 38
|   |     `-ParenExpr 0x1c618e7a978 <line:351:9, col:25> 'limb':'int'
|   |       `-BinaryOperator 0x1c618e7a958 <col:10, col:24> 'limb':'int' '<<'
|   |         |-ParenExpr 0x1c618e7a910 <col:10, col:19> 'limb':'int'
|   |         | `-CStyleCastExpr 0x1c618e7a8e8 <col:11, col:18> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1c618e7a8b0 <col:18> 'int' 1
|   |         `-IntegerLiteral 0x1c618e7a930 <col:24> 'int' 6
|   |-DeclStmt 0x1c618e7ac38 <line:352:5, col:71>
|   | `-VarDecl 0x1c618e7a9e0 <col:5, col:70> col:23 used two70m6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x1c618e7ac18 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x1c618e7ab10 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x1c618e7aaf0 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x1c618e7aaa8 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x1c618e7aa80 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x1c618e7aa48 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x1c618e7aac8 <col:48> 'int' 70
|   |     `-ParenExpr 0x1c618e7abf8 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x1c618e7abd8 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x1c618e7ab90 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x1c618e7ab68 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1c618e7ab30 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x1c618e7abb0 <col:69> 'int' 6
|   |-CompoundAssignOperator 0x1c618e7ad20 <line:355:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7acb0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7ac98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7ac50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7ac70 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e7ad08 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7acd0 <col:15> 'const limb':'const int' lvalue Var 0x1c618e79dd0 'two70m8p6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1c618e7ae68 <line:356:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7adf8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7ade0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7ad98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7adb8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e7ae50 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7ae18 <col:15> 'const limb':'const int' lvalue Var 0x1c618e7a158 'two70p40' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1c618e7afd0 <line:357:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7af60 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7af28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7aee0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7af00 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e7afb8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7af80 <col:15> 'const limb':'const int' lvalue Var 0x1c618e7a3d8 'two70' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1c618e7b118 <line:358:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7b0a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7b090 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7b048 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7b068 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e7b100 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7b0c8 <col:15> 'const limb':'const int' lvalue Var 0x1c618e7a550 'two70m40m38p6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1c618e7b260 <line:359:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7b1f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7b1d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7b190 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7b1b0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618e7b248 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7b210 <col:15> 'const limb':'const int' lvalue Var 0x1c618e7a9e0 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1c618e7b390 <line:360:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7b338 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7b320 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7b2d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7b2f8 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618e7b378 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7b358 <col:15> 'const limb':'const int' lvalue Var 0x1c618e7a9e0 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1c618e7b478 <line:361:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7b420 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7b408 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7b3c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7b3e0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1c618e7b460 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7b440 <col:15> 'const limb':'const int' lvalue Var 0x1c618e7a9e0 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1c618e7b560 <line:362:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7b508 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7b4f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7b4a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7b4c8 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x1c618e7b548 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7b528 <col:15> 'const limb':'const int' lvalue Var 0x1c618e7a9e0 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x1c618e7b6a8 <line:365:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7b5f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7b5d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7b590 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7b5b0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e7b690 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e7b670 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e7b658 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e7b610 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e79bf0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e7b630 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1c618e7b7f0 <line:366:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7b738 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7b720 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7b6d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7b6f8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e7b7d8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e7b7b8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e7b7a0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e7b758 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e79bf0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e7b778 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1c618e7b938 <line:367:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7b880 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7b868 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7b820 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7b840 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e7b920 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e7b900 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e7b8e8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e7b8a0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e79bf0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e7b8c0 <col:18> 'int' 2
|   |-CompoundAssignOperator 0x1c618e7ba80 <line:368:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7b9c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7b9b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7b968 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7b988 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e7ba68 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e7ba48 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e7ba30 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e7b9e8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e79bf0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e7ba08 <col:18> 'int' 3
|   |-CompoundAssignOperator 0x1c618e7bbc8 <line:369:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7bb10 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7baf8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7bab0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7bad0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618e7bbb0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e7bb90 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e7bb78 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e7bb30 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e79bf0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e7bb50 <col:18> 'int' 4
|   |-CompoundAssignOperator 0x1c618e7bd10 <line:370:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7bc58 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7bc40 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7bbf8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7bc18 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618e7bcf8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e7bcd8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e7bcc0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e7bc78 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e79bf0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e7bc98 <col:18> 'int' 5
|   |-CompoundAssignOperator 0x1c618e7be58 <line:371:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7bda0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7bd88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e7bd40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e7bd60 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1c618e7be40 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618e7be20 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618e7be08 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e7bdc0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e79bf0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618e7bde0 <col:18> 'int' 6
|   `-CompoundAssignOperator 0x1c618e7bfa0 <line:372:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1c618e7bee8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e7bed0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e7be88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e79b00 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e7bea8 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x1c618e7bf88 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1c618e7bf68 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x1c618e7bf50 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1c618e7bf08 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e79bf0 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1c618e7bf28 <col:18> 'int' 7
|-VarDecl 0x1c618e7c098 <line:381:1, col:73> col:20 used zero110 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x1c618e7c8d0 <col:30, col:73> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x1c618e7c210 <line:375:18, col:38> 'int' '-'
|   | |-ParenExpr 0x1c618e7c1c8 <col:18, col:34> 'limb':'int'
|   | | `-BinaryOperator 0x1c618e7c1a8 <col:19, col:32> 'limb':'int' '<<'
|   | |   |-ParenExpr 0x1c618e7c160 <col:19, col:27> 'limb':'int'
|   | |   | `-CStyleCastExpr 0x1c618e7c138 <col:20, col:26> 'limb':'int' <NoOp>
|   | |   |   `-IntegerLiteral 0x1c618e7c100 <col:26> 'int' 1
|   | |   `-IntegerLiteral 0x1c618e7c180 <col:32> 'int' 64
|   | `-IntegerLiteral 0x1c618e7c1e8 <col:38> 'int' 1
|   |-BinaryOperator 0x1c618e7c448 <line:376:22, col:63> 'int' '-'
|   | |-BinaryOperator 0x1c618e7c400 <col:22, col:59> 'int' '+'
|   | | |-ParenExpr 0x1c618e7c2f8 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x1c618e7c2d8 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1c618e7c290 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1c618e7c268 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1c618e7c230 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x1c618e7c2b0 <col:36> 'int' 110
|   | | `-ParenExpr 0x1c618e7c3e0 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x1c618e7c3c0 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1c618e7c378 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1c618e7c350 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1c618e7c318 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x1c618e7c398 <col:57> 'int' 32
|   | `-IntegerLiteral 0x1c618e7c420 <col:63> 'int' 1
|   |-BinaryOperator 0x1c618e7c638 <line:377:19, col:55> 'int' '-'
|   | |-ParenExpr 0x1c618e7c530 <col:19, col:35> 'limb':'int'
|   | | `-BinaryOperator 0x1c618e7c510 <col:20, col:33> 'limb':'int' '<<'
|   | |   |-ParenExpr 0x1c618e7c4c8 <col:20, col:28> 'limb':'int'
|   | |   | `-CStyleCastExpr 0x1c618e7c4a0 <col:21, col:27> 'limb':'int' <NoOp>
|   | |   |   `-IntegerLiteral 0x1c618e7c468 <col:27> 'int' 1
|   | |   `-IntegerLiteral 0x1c618e7c4e8 <col:33> 'int' 64
|   | `-ParenExpr 0x1c618e7c618 <col:39, col:55> 'limb':'int'
|   |   `-BinaryOperator 0x1c618e7c5f8 <col:40, col:53> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1c618e7c5b0 <col:40, col:48> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1c618e7c588 <col:41, col:47> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1c618e7c550 <col:47> 'int' 1
|   |     `-IntegerLiteral 0x1c618e7c5d0 <col:53> 'int' 46
|   `-BinaryOperator 0x1c618e7c828 <line:378:19, col:55> 'int' '-'
|     |-ParenExpr 0x1c618e7c720 <col:19, col:35> 'limb':'int'
|     | `-BinaryOperator 0x1c618e7c700 <col:20, col:33> 'limb':'int' '<<'
|     |   |-ParenExpr 0x1c618e7c6b8 <col:20, col:28> 'limb':'int'
|     |   | `-CStyleCastExpr 0x1c618e7c690 <col:21, col:27> 'limb':'int' <NoOp>
|     |   |   `-IntegerLiteral 0x1c618e7c658 <col:27> 'int' 1
|     |   `-IntegerLiteral 0x1c618e7c6d8 <col:33> 'int' 64
|     `-ParenExpr 0x1c618e7c808 <col:39, col:55> 'limb':'int'
|       `-BinaryOperator 0x1c618e7c7e8 <col:40, col:53> 'limb':'int' '<<'
|         |-ParenExpr 0x1c618e7c7a0 <col:40, col:48> 'limb':'int'
|         | `-CStyleCastExpr 0x1c618e7c778 <col:41, col:47> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x1c618e7c740 <col:47> 'int' 1
|         `-IntegerLiteral 0x1c618e7c7c0 <col:53> 'int' 32
|-FunctionDecl 0x1c618e7caf8 <line:392:1, line:481:1> line:392:13 used felem_shrink 'void (u64 *, const limb *)' static
| |-ParmVarDecl 0x1c618e7c940 <col:26, col:37> col:37 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618e7c9b8 <col:42, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618e807f0 <line:393:1, line:481:1>
|   |-DeclStmt 0x1c618e7cc38 <line:394:5, col:14>
|   | `-VarDecl 0x1c618e7cbd0 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-DeclStmt 0x1c618e7cdd8 <line:395:5, col:19>
|   | |-VarDecl 0x1c618e7cc60 <col:5, col:9> col:9 used a 'u64':'unsigned long long'
|   | |-VarDecl 0x1c618e7ccd8 <col:5, col:12> col:12 used b 'u64':'unsigned long long'
|   | `-VarDecl 0x1c618e7cd50 <col:5, col:15> col:15 used mask 'u64':'unsigned long long'
|   |-DeclStmt 0x1c618e7cef8 <line:396:5, col:18>
|   | |-VarDecl 0x1c618e7ce00 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x1c618e7ce78 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-DeclStmt 0x1c618e7d000 <line:397:5, col:56>
|   | `-VarDecl 0x1c618e7cf70 <col:5, col:36> col:22 used kPrime3Test 'const u64':'const unsigned long long' static cinit
|   |   `-IntegerLiteral 0x1c618e7cfd8 <col:36> 'unsigned long long' 9223372032559808513
|   |-BinaryOperator 0x1c618e7d3c8 <line:400:5, col:54> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e7d090 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7d078 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7d018 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7d050 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e7d3b0 <col:14, col:54> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e7d390 <col:14, col:54> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x1c618e7d378 <col:14, col:31> 'unsigned long long' <IntegralCast>
|   |     | `-BinaryOperator 0x1c618e7d1e0 <col:14, col:31> 'int' '+'
|   |     |   |-ImplicitCastExpr 0x1c618e7d1b0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   | `-ArraySubscriptExpr 0x1c618e7d110 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |   |   |-ImplicitCastExpr 0x1c618e7d0f8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |   |   | `-DeclRefExpr 0x1c618e7d0b0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e7c098 'zero110' 'const felem':'limb const[4]'
|   |     |   |   `-IntegerLiteral 0x1c618e7d0d0 <col:22> 'int' 3
|   |     |   `-ImplicitCastExpr 0x1c618e7d1c8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x1c618e7d190 <col:27, col:31> 'const limb':'const int' lvalue
|   |     |       |-ImplicitCastExpr 0x1c618e7d178 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x1c618e7d130 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e7c9b8 'in' 'const limb *':'const limb *'
|   |     |       `-IntegerLiteral 0x1c618e7d150 <col:30> 'int' 3
|   |     `-ParenExpr 0x1c618e7d358 <col:35, col:54> 'u64':'unsigned long long'
|   |       `-CStyleCastExpr 0x1c618e7d330 <col:36, col:53> 'u64':'unsigned long long' <IntegralCast>
|   |         `-ParenExpr 0x1c618e7d310 <col:41, col:53> 'limb':'int'
|   |           `-BinaryOperator 0x1c618e7d2c0 <col:42, col:51> 'limb':'int' '>>'
|   |             |-ImplicitCastExpr 0x1c618e7d2a8 <col:42, col:46> 'limb':'int' <LValueToRValue>
|   |             | `-ArraySubscriptExpr 0x1c618e7d260 <col:42, col:46> 'const limb':'const int' lvalue
|   |             |   |-ImplicitCastExpr 0x1c618e7d248 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x1c618e7d200 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e7c9b8 'in' 'const limb *':'const limb *'
|   |             |   `-IntegerLiteral 0x1c618e7d220 <col:45> 'int' 2
|   |             `-IntegerLiteral 0x1c618e7d280 <col:51> 'int' 64
|   |-BinaryOperator 0x1c618e7d668 <line:403:5, col:36> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e7d490 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7d478 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7d430 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7d450 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e7d650 <col:14, col:36> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e7d630 <col:14, col:36> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x1c618e7d618 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1c618e7d600 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1c618e7d510 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x1c618e7d4f8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1c618e7d4b0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e7c098 'zero110' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x1c618e7d4d0 <col:22> 'int' 2
|   |     `-CStyleCastExpr 0x1c618e7d5d8 <col:27, col:36> 'u64':'unsigned long long' <IntegralCast>
|   |       `-ImplicitCastExpr 0x1c618e7d5c0 <col:32, col:36> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |         `-ArraySubscriptExpr 0x1c618e7d590 <col:32, col:36> 'const limb':'const int' lvalue
|   |           |-ImplicitCastExpr 0x1c618e7d578 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1c618e7d530 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e7c9b8 'in' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x1c618e7d550 <col:35> 'int' 2
|   |-BinaryOperator 0x1c618e7d858 <line:404:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e7d6e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7d6d0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7d688 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7d6a8 <col:9> 'int' 0
|   | `-BinaryOperator 0x1c618e7d838 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1c618e7d808 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1c618e7d768 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1c618e7d750 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c618e7d708 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e7c098 'zero110' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1c618e7d728 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x1c618e7d820 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e7d7e8 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1c618e7d7d0 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618e7d788 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e7c9b8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1c618e7d7a8 <col:30> 'int' 0
|   |-BinaryOperator 0x1c618e7da48 <line:405:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e7d8d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7d8c0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7d878 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7d898 <col:9> 'int' 1
|   | `-BinaryOperator 0x1c618e7da28 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1c618e7d9f8 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1c618e7d958 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1c618e7d940 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c618e7d8f8 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e7c098 'zero110' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1c618e7d918 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x1c618e7da10 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e7d9d8 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1c618e7d9c0 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618e7d978 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e7c9b8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1c618e7d998 <col:30> 'int' 1
|   |-BinaryOperator 0x1c618e7db98 <line:412:5, col:19> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e7da68 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7cc60 'a' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e7db80 <col:9, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e7db60 <col:9, col:19> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e7db48 <col:9, col:14> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618e7db00 <col:9, col:14> 'limb':'int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618e7dae8 <col:9> 'limb *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x1c618e7daa0 <col:9> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |     |   `-IntegerLiteral 0x1c618e7dac0 <col:13> 'int' 3
|   |     `-IntegerLiteral 0x1c618e7db20 <col:19> 'int' 64
|   |-BinaryOperator 0x1c618e7dd20 <line:413:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e7dc18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7dc00 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7dbb8 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7dbd8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e7dd08 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x1c618e7dce0 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1c618e7dcc8 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x1c618e7dc98 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x1c618e7dc80 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x1c618e7dc38 <col:19> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x1c618e7dc58 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x1c618e7ddf8 <line:414:5, col:15> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e7dda0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7dd88 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7dd40 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7dd60 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e7dde0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7ddc0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e7cc60 'a' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e7df80 <line:415:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7de88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7de70 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7de28 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7de48 <col:9> 'int' 3
|   | `-BinaryOperator 0x1c618e7df60 <col:15, col:29> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1c618e7df18 <col:15, col:24> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1c618e7def0 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x1c618e7ded8 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x1c618e7dea8 <col:23> 'u64':'unsigned long long' lvalue Var 0x1c618e7cc60 'a' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618e7df38 <col:29> 'int' 32
|   |-BinaryOperator 0x1c618e7e020 <line:418:5, col:9> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e7dfb0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7ccd8 'b' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e7e008 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7dfe8 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618e7cc60 'a' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e7e158 <line:419:5, col:19> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e7e040 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7cc60 'a' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e7e140 <col:9, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e7e120 <col:9, col:19> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e7e108 <col:9, col:14> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618e7e0c0 <col:9, col:14> 'limb':'int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618e7e0a8 <col:9> 'limb *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x1c618e7e060 <col:9> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |     |   `-IntegerLiteral 0x1c618e7e080 <col:13> 'int' 3
|   |     `-IntegerLiteral 0x1c618e7e0e0 <col:19> 'int' 64
|   |-CompoundAssignOperator 0x1c618e7e1d0 <line:420:5, col:10> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618e7e178 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7ccd8 'b' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e7e1b8 <col:10> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7e198 <col:10> 'u64':'unsigned long long' lvalue Var 0x1c618e7cc60 'a' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e7e368 <line:421:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e7e260 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7e248 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7e200 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7e220 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e7e350 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x1c618e7e328 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1c618e7e310 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x1c618e7e2e0 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x1c618e7e2c8 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x1c618e7e280 <col:19> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x1c618e7e2a0 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x1c618e7e440 <line:422:5, col:15> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e7e3e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7e3d0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7e388 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7e3a8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e7e428 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7e408 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e7cc60 'a' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e7e5c8 <line:423:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7e4d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7e4b8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7e470 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7e490 <col:9> 'int' 3
|   | `-BinaryOperator 0x1c618e7e5a8 <col:15, col:29> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1c618e7e560 <col:15, col:24> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1c618e7e538 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x1c618e7e520 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x1c618e7e4f0 <col:23> 'u64':'unsigned long long' lvalue Var 0x1c618e7cc60 'a' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618e7e580 <col:29> 'int' 32
|   |-CompoundAssignOperator 0x1c618e7e6b0 <line:430:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e7e658 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7e640 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7e5f8 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7e618 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e7e698 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7e678 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e7ccd8 'b' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e7e858 <line:431:5, col:32> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e7e740 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7e728 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7e6e0 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7e700 <col:9> 'int' 1
|   | `-ParenExpr 0x1c618e7e838 <col:15, col:32> 'limb':'int'
|   |   `-BinaryOperator 0x1c618e7e818 <col:16, col:30> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1c618e7e7d0 <col:16, col:25> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1c618e7e7a8 <col:17, col:24> 'limb':'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x1c618e7e790 <col:24> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x1c618e7e760 <col:24> 'u64':'unsigned long long' lvalue Var 0x1c618e7ccd8 'b' 'u64':'unsigned long long'
|   |     `-IntegerLiteral 0x1c618e7e7f0 <col:30> 'int' 32
|   |-BinaryOperator 0x1c618e7ea18 <line:437:5, col:30> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e7e888 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce00 'high' 'u64':'unsigned long long'
|   | `-CStyleCastExpr 0x1c618e7e9f0 <col:12, col:30> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ParenExpr 0x1c618e7e9d0 <col:17, col:30> 'limb':'int'
|   |     `-BinaryOperator 0x1c618e7e980 <col:18, col:28> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x1c618e7e968 <col:18, col:23> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x1c618e7e920 <col:18, col:23> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x1c618e7e908 <col:18> 'limb *' <ArrayToPointerDecay>
|   |       |   | `-DeclRefExpr 0x1c618e7e8c0 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |       |   `-IntegerLiteral 0x1c618e7e8e0 <col:22> 'int' 3
|   |       `-IntegerLiteral 0x1c618e7e940 <col:28> 'int' 64
|   |-BinaryOperator 0x1c618e7eaf0 <line:439:5, col:16> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e7ea38 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce00 'high' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618e7ead0 <col:12, col:16> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1c618e7eab8 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1c618e7ea58 <col:12> 'int' 0
|   |   `-ImplicitCastExpr 0x1c618e7eaa0 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e7ea80 <col:16> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce00 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e7ec18 <line:445:5, col:21> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e7eb10 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce78 'low' 'u64':'unsigned long long'
|   | `-CStyleCastExpr 0x1c618e7ebf0 <col:11, col:21> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e7ebd8 <col:16, col:21> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |     `-ArraySubscriptExpr 0x1c618e7eba8 <col:16, col:21> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x1c618e7eb90 <col:16> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c618e7eb48 <col:16> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x1c618e7eb68 <col:20> 'int' 3
|   |-BinaryOperator 0x1c618e7ed70 <line:446:5, col:26> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e7ec38 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7cd50 'mask' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618e7ed50 <col:12, col:26> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1c618e7ed38 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1c618e7ec70 <col:12> 'int' 0
|   |   `-ParenExpr 0x1c618e7ed18 <col:16, col:26> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x1c618e7ecf8 <col:17, col:24> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x1c618e7ece0 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618e7ec98 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce78 'low' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x1c618e7ecb8 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x1c618e7ede8 <line:452:5, col:12> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618e7ed90 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce78 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e7edd0 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7edb0 <col:12> 'const u64':'const unsigned long long' lvalue Var 0x1c618f5d378 'bottom63bits' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x1c618e7eed0 <line:453:5, col:12> 'u64':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618e7ee60 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce78 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e7eeb8 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e7ee80 <col:12> 'const u64':'const unsigned long long' lvalue Var 0x1c618e7cf70 'kPrime3Test' 'const u64':'const unsigned long long'
|   |-BinaryOperator 0x1c618e7efd0 <line:455:5, col:12> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e7ef48 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce78 'low' 'u64':'unsigned long long'
|   | `-UnaryOperator 0x1c618e7efb8 <col:11, col:12> 'u64':'unsigned long long' prefix '~' cannot overflow
|   |   `-ImplicitCastExpr 0x1c618e7efa0 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e7ef80 <col:12> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce78 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e7f110 <line:456:5, col:25> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e7eff0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce78 'low' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618e7f0f0 <col:11, col:25> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1c618e7f0d8 <col:11> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1c618e7f010 <col:11> 'int' 0
|   |   `-ParenExpr 0x1c618e7f0b8 <col:15, col:25> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x1c618e7f098 <col:16, col:23> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x1c618e7f080 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618e7f038 <col:16> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce78 'low' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x1c618e7f058 <col:23> 'int' 63
|   |-BinaryOperator 0x1c618e7f258 <line:462:5, col:27> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e7f130 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e7cd50 'mask' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618e7f238 <col:12, col:27> 'unsigned long long' '|'
|   |   |-ParenExpr 0x1c618e7f1e0 <col:12, col:23> 'unsigned long long'
|   |   | `-BinaryOperator 0x1c618e7f1c0 <col:13, col:20> 'unsigned long long' '&'
|   |   |   |-ImplicitCastExpr 0x1c618e7f190 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1c618e7f150 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c618e7cd50 'mask' 'u64':'unsigned long long'
|   |   |   `-ImplicitCastExpr 0x1c618e7f1a8 <col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1c618e7f170 <col:20> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce78 'low' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1c618e7f220 <col:27> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e7f200 <col:27> 'u64':'unsigned long long' lvalue Var 0x1c618e7ce00 'high' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e7f3e8 <line:463:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e7f2d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7f2c0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7f278 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7f298 <col:9> 'int' 0
|   | `-BinaryOperator 0x1c618e7f3c8 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1c618e7f398 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618e7f2f8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e7cd50 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1c618e7f3b0 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e7f378 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1c618e7f360 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c618e7f318 <col:22> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1c618e7f338 <col:29> 'int' 0
|   |-CompoundAssignOperator 0x1c618e7f5d0 <line:464:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e7f4c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7f4a8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7f460 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7f480 <col:9> 'int' 1
|   | `-BinaryOperator 0x1c618e7f5b0 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1c618e7f580 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618e7f4e0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e7cd50 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1c618e7f598 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e7f560 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1c618e7f548 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c618e7f500 <col:22> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1c618e7f520 <col:29> 'int' 1
|   |-CompoundAssignOperator 0x1c618e7f770 <line:466:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e7f660 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7f648 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7f600 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7f620 <col:9> 'int' 3
|   | `-BinaryOperator 0x1c618e7f750 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1c618e7f720 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618e7f680 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e7cd50 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1c618e7f738 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e7f700 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1c618e7f6e8 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c618e7f6a0 <col:22> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1c618e7f6c0 <col:29> 'int' 3
|   |-CompoundAssignOperator 0x1c618e7f998 <line:469:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e7f800 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7f7e8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7f7a0 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7f7c0 <col:9> 'int' 1
|   | `-ParenExpr 0x1c618e7f978 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x1c618e7f950 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x1c618e7f930 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x1c618e7f8e0 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x1c618e7f8c8 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x1c618e7f880 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x1c618e7f868 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1c618e7f820 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x1c618e7f840 <col:26> 'int' 0
|   |         `-IntegerLiteral 0x1c618e7f8a0 <col:32> 'int' 64
|   |-BinaryOperator 0x1c618e7fb30 <line:470:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e7fa28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7fa10 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7f9c8 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7f9e8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e7fb18 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x1c618e7faf0 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1c618e7fad8 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x1c618e7faa8 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x1c618e7fa90 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x1c618e7fa48 <col:19> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x1c618e7fa68 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x1c618e7fd48 <line:471:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e7fbb0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7fb98 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7fb50 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7fb70 <col:9> 'int' 2
|   | `-ParenExpr 0x1c618e7fd28 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x1c618e7fd00 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x1c618e7fce0 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x1c618e7fc90 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x1c618e7fc78 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x1c618e7fc30 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x1c618e7fc18 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1c618e7fbd0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x1c618e7fbf0 <col:26> 'int' 1
|   |         `-IntegerLiteral 0x1c618e7fc50 <col:32> 'int' 64
|   |-BinaryOperator 0x1c618e7fee0 <line:472:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e7fdd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7fdc0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7fd78 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7fd98 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e7fec8 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x1c618e7fea0 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1c618e7fe88 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x1c618e7fe58 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x1c618e7fe40 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x1c618e7fdf8 <col:19> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x1c618e7fe18 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x1c618e800f8 <line:473:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e7ff60 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e7ff48 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e7ff00 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e7ff20 <col:9> 'int' 3
|   | `-ParenExpr 0x1c618e800d8 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x1c618e800b0 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x1c618e80090 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x1c618e80040 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x1c618e80028 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x1c618e7ffe0 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x1c618e7ffc8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1c618e7ff80 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x1c618e7ffa0 <col:26> 'int' 2
|   |         `-IntegerLiteral 0x1c618e80000 <col:32> 'int' 64
|   |-BinaryOperator 0x1c618e80290 <line:474:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e80188 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e80170 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1c618e80128 <col:5> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x1c618e80148 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e80278 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x1c618e80250 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1c618e80238 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x1c618e80208 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x1c618e801f0 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x1c618e801a8 <col:19> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x1c618e801c8 <col:23> 'int' 2
|   |-BinaryOperator 0x1c618e803e0 <line:477:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1c618e80310 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1c618e802f8 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e802b0 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618e7c940 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1c618e802d0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e803c8 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e803b0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e80390 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x1c618e80378 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c618e80330 <col:14> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x1c618e80350 <col:18> 'int' 0
|   |-BinaryOperator 0x1c618e80530 <line:478:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1c618e80460 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1c618e80448 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e80400 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618e7c940 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1c618e80420 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e80518 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e80500 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e804e0 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x1c618e804c8 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c618e80480 <col:14> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x1c618e804a0 <col:18> 'int' 1
|   |-BinaryOperator 0x1c618e80680 <line:479:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1c618e805b0 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1c618e80598 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e80550 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618e7c940 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x1c618e80570 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e80668 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e80650 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e80630 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x1c618e80618 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c618e805d0 <col:14> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x1c618e805f0 <col:18> 'int' 2
|   `-BinaryOperator 0x1c618e807d0 <line:480:5, col:19> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1c618e80700 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1c618e806e8 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e806a0 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x1c618e7c940 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x1c618e806c0 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618e807b8 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|       `-ImplicitCastExpr 0x1c618e807a0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1c618e80780 <col:14, col:19> 'limb':'int' lvalue
|           |-ImplicitCastExpr 0x1c618e80768 <col:14> 'limb *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x1c618e80720 <col:14> 'felem':'limb [4]' lvalue Var 0x1c618e7cbd0 'tmp' 'felem':'limb [4]'
|           `-IntegerLiteral 0x1c618e80740 <col:18> 'int' 3
|-FunctionDecl 0x1c618e80aa0 <line:484:1, line:490:1> line:484:13 used smallfelem_expand 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x1c618e80960 <col:31, col:37> col:37 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e809d8 <col:42, col:59> col:59 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618e810c0 <line:485:1, line:490:1>
|   |-BinaryOperator 0x1c618e80c98 <line:486:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e80bc8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e80bb0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e80b68 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e80960 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e80b88 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e80c80 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e80c68 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e80c48 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1c618e80c30 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618e80be8 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e809d8 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x1c618e80c08 <col:17> 'int' 0
|   |-BinaryOperator 0x1c618e80de8 <line:487:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e80d18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e80d00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e80cb8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e80960 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e80cd8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e80dd0 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e80db8 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e80d98 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1c618e80d80 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618e80d38 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e809d8 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x1c618e80d58 <col:17> 'int' 1
|   |-BinaryOperator 0x1c618e80f38 <line:488:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e80e68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e80e50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e80e08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e80960 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e80e28 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e80f20 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e80f08 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618e80ee8 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1c618e80ed0 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618e80e88 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e809d8 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x1c618e80ea8 <col:17> 'int' 2
|   `-BinaryOperator 0x1c618e810a0 <line:489:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1c618e80fd0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e80fb8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e80f58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e80960 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e80f90 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1c618e81088 <col:14, col:18> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x1c618e81070 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1c618e81050 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|           |-ImplicitCastExpr 0x1c618e81038 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|           | `-DeclRefExpr 0x1c618e80ff0 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618e809d8 'in' 'const u64 *':'const u64 *'
|           `-IntegerLiteral 0x1c618e81010 <col:17> 'int' 3
|-FunctionDecl 0x1c618e81278 <line:499:1, line:569:1> line:499:13 used smallfelem_square 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x1c618e81100 <col:31, col:41> col:41 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e81178 <col:46, col:63> col:63 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618e84130 <line:500:1, line:569:1>
|   |-DeclStmt 0x1c618e813b8 <line:501:5, col:11>
|   | `-VarDecl 0x1c618e81350 <col:5, col:10> col:10 used a 'limb':'int'
|   |-DeclStmt 0x1c618e814d8 <line:502:5, col:18>
|   | |-VarDecl 0x1c618e813e0 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x1c618e81458 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e81630 <line:505:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e815a8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e81618 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e81600 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e815e0 <col:11> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618e81720 <line:506:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e81650 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e81708 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e816e8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e816d0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e81688 <col:12> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e816a8 <col:17> 'int' 64
|   |-BinaryOperator 0x1c618e81810 <line:507:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e817a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e81788 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e81740 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e81760 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618e817f8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e817e0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e817c0 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e81900 <line:508:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e81890 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e81878 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e81830 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e81850 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e818e8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e818d0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e818b0 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e81a30 <line:511:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e819c0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e81a18 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e81a00 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e819e0 <col:11> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618e81b08 <line:512:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e81a50 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e81af0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e81ad0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e81ab8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e81a70 <col:12> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e81a90 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618e81be0 <line:513:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e81b88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e81b70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e81b28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e81b48 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e81bc8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e81ba8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e81cc8 <line:514:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e81c70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e81c58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e81c10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e81c30 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618e81cb0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e81c90 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e81dc8 <line:515:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e81d58 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e81d40 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e81cf8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e81d18 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e81db0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e81d98 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e81d78 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e81ef8 <line:518:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e81e88 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e81ee0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e81ec8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e81ea8 <col:11> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618e81fd0 <line:519:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e81f18 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e81fb8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e81f98 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e81f80 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e81f38 <col:12> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e81f58 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618e820a8 <line:520:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e82050 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e82038 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e81ff0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e82010 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e82090 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e82070 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e82180 <line:521:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e82138 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e82120 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e820d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e820f8 <col:9> 'int' 2
|   | `-IntegerLiteral 0x1c618e82158 <col:15> 'int' 2
|   |-BinaryOperator 0x1c618e82280 <line:522:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e82210 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e821f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e821b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e821d0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e82268 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e82250 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e82230 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e823b0 <line:525:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e82340 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e82398 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e82380 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e82360 <col:11> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618e82488 <line:526:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e823d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e82470 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e82450 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e82438 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e823f0 <col:12> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e82410 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618e82560 <line:527:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e82508 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e824f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e824a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e824c8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e82548 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e82528 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e82660 <line:528:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e825f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e825d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e82590 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e825b0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618e82648 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e82630 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e82610 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e82790 <line:531:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e82720 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e82778 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e82760 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e82740 <col:11> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618e82868 <line:532:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e827b0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e82850 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e82830 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e82818 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e827d0 <col:12> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e827f0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618e82940 <line:533:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e828e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e828d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e82888 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e828a8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e82928 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e82908 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e82a18 <line:534:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e829d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e829b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e82970 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e82990 <col:9> 'int' 3
|   | `-IntegerLiteral 0x1c618e829f0 <col:15> 'int' 2
|   |-CompoundAssignOperator 0x1c618e82b00 <line:535:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e82aa8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e82a90 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e82a48 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e82a68 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618e82ae8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e82ac8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e82c40 <line:538:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e82bd0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e82c28 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e82c10 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e82bf0 <col:11> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618e82d18 <line:539:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e82c60 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e82d00 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e82ce0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e82cc8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e82c80 <col:12> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e82ca0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618e82df0 <line:540:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e82d98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e82d80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e82d38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e82d58 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618e82dd8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e82db8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e82ed8 <line:541:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e82e80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e82e68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e82e20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e82e40 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618e82ec0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e82ea0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e83030 <line:544:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e82fc0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e83018 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e83000 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e82fe0 <col:11> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618e83108 <line:545:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e83050 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e830f0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e830d0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e830b8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e83070 <col:12> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e83090 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618e831e0 <line:546:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e83188 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e83170 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e83128 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e83148 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618e831c8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e831a8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e832b8 <line:547:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e83270 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e83258 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e83210 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e83230 <col:9> 'int' 4
|   | `-IntegerLiteral 0x1c618e83290 <col:15> 'int' 2
|   |-BinaryOperator 0x1c618e833b8 <line:548:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e83348 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e83330 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e832e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e83308 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618e833a0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e83388 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e83368 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e834e8 <line:551:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e83478 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e834d0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e834b8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e83498 <col:11> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618e835c0 <line:552:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e83508 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e835a8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e83588 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e83570 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e83528 <col:12> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e83548 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618e83698 <line:553:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e83640 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e83628 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e835e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e83600 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618e83680 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e83660 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e83770 <line:554:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618e83728 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e83710 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e836c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e836e8 <col:9> 'int' 5
|   | `-IntegerLiteral 0x1c618e83748 <col:15> 'int' 2
|   |-BinaryOperator 0x1c618e83870 <line:555:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618e83800 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e837e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e837a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e837c0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1c618e83858 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e83840 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e83820 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e83948 <line:556:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e838f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e838d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e83890 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e838b0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1c618e83930 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e83910 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e83a88 <line:559:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e83a18 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e83a70 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e83a58 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e83a38 <col:11> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618e83b60 <line:560:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e83aa8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e83b48 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e83b28 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e83b10 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e83ac8 <col:12> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e83ae8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618e83c38 <line:561:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e83be0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e83bc8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e83b80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e83ba0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618e83c20 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e83c00 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618e83d20 <line:562:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e83cc8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e83cb0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e83c68 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e83c88 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618e83d08 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e83ce8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e83e60 <line:565:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e83df0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e83e48 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e83e30 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e83e10 <col:11> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618e83f38 <line:566:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e83e80 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e83f20 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618e83f00 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e83ee8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e83ea0 <col:12> 'limb':'int' lvalue Var 0x1c618e81350 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e83ec0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618e84010 <line:567:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618e83fb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618e83fa0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618e83f58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618e83f78 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1c618e83ff8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e83fd8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e81458 'low' 'u64':'unsigned long long'
|   `-BinaryOperator 0x1c618e84110 <line:568:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1c618e840a0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618e84088 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618e84040 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e81100 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618e84060 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x1c618e840f8 <col:14> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x1c618e840e0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x1c618e840c0 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e813e0 'high' 'u64':'unsigned long long'
|-FunctionDecl 0x1c618e84448 <line:578:1, line:583:1> line:578:13 used felem_square 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1c618e842d0 <col:26, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e84348 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618e84888 <line:579:1, line:583:1>
|   |-DeclStmt 0x1c618e845d8 <line:580:5, col:17>
|   | `-VarDecl 0x1c618e84570 <col:5, col:16> col:9 used small 'u64 [4]'
|   |-CallExpr 0x1c618e846e0 <line:581:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618e846c8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618e845f0 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618e84710 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618e84610 <col:18> 'u64 [4]' lvalue Var 0x1c618e84570 'small' 'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618e84728 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618e84648 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x1c618e84348 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x1c618e84810 <line:582:5, col:33> 'void'
|     |-ImplicitCastExpr 0x1c618e847f8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618e84740 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e81278 'smallfelem_square' 'void (limb *, const u64 *)'
|     |-ImplicitCastExpr 0x1c618e84840 <col:23> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618e84760 <col:23> 'limb *':'limb *' lvalue ParmVar 0x1c618e842d0 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1c618e84870 <col:28> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x1c618e84858 <col:28> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618e84780 <col:28> 'u64 [4]' lvalue Var 0x1c618e84570 'small' 'u64 [4]'
|-FunctionDecl 0x1c618e84b18 <line:593:1, line:694:1> line:593:13 used smallfelem_mul 'void (limb *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x1c618e848c0 <col:28, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618e84938 <col:43, col:60> col:60 small1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1c618e849b0 <line:594:28, col:45> col:45 used small2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618f64c98 <line:595:1, line:694:1>
|   |-DeclStmt 0x1c618e84c60 <line:596:5, col:11>
|   | `-VarDecl 0x1c618e84bf8 <col:5, col:10> col:10 used a 'limb':'int'
|   |-DeclStmt 0x1c618e84d80 <line:597:5, col:18>
|   | |-VarDecl 0x1c618e84c88 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x1c618e84d00 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618e84ed8 <line:600:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e84e50 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618e84ec0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618e84ea8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618e84e88 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f610a8 <line:601:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618e84ef8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f61090 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f61070 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618e84f78 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618e84f30 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618e84f50 <col:17> 'int' 64
|   |-BinaryOperator 0x1c618f61198 <line:602:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f61128 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f61110 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f610c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f610e8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618f61180 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f61168 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f61148 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f61288 <line:603:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f61218 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f61200 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f611b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f611d8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618f61270 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f61258 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f61238 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f613b8 <line:606:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f61348 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f613a0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f61388 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f61368 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f61490 <line:607:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f613d8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f61478 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f61458 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f61440 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f613f8 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f61418 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f61568 <line:608:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f61510 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f614f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f614b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f614d0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618f61550 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f61530 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f61668 <line:609:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f615f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f615e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f61598 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f615b8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618f61650 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f61638 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f61618 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f61798 <line:612:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f61728 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f61780 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f61768 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f61748 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f61870 <line:613:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f617b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f61858 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f61838 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f61820 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f617d8 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f617f8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f61948 <line:614:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f618f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f618d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f61890 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f618b0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1c618f61930 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f61910 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f61a30 <line:615:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f619d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f619c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f61978 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f61998 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618f61a18 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f619f8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f61b70 <line:618:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f61b00 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f61b58 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f61b40 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f61b20 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f61c48 <line:619:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f61b90 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f61c30 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f61c10 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f61bf8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f61bb0 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f61bd0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f61d20 <line:620:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f61cc8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f61cb0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f61c68 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f61c88 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618f61d08 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f61ce8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f61e20 <line:621:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f61db0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f61d98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f61d50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f61d70 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618f61e08 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f61df0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f61dd0 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f61f50 <line:624:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f61ee0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f61f38 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f61f20 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f61f00 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f62028 <line:625:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f61f70 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f62010 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f61ff0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f61fd8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f61f90 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f61fb0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f62100 <line:626:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f620a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f62090 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f62048 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f62068 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618f620e8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f620c8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f621e8 <line:627:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f62190 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f62178 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f62130 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f62150 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618f621d0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f621b0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f62328 <line:630:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f622b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f62310 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f622f8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f622d8 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f62400 <line:631:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f62348 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f623e8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f623c8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f623b0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f62368 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f62388 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f624d8 <line:632:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f62480 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f62468 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f62420 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f62440 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1c618f624c0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f624a0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f625c0 <line:633:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f62568 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f62550 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f62508 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f62528 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618f625a8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f62588 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f62700 <line:636:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f62690 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f626e8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f626d0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f626b0 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f627d8 <line:637:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f62720 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f627c0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f627a0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f62788 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f62740 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f62760 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f628b0 <line:638:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f62858 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f62840 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f627f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f62818 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618f62898 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f62878 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f629b0 <line:639:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f62940 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f62928 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f628e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f62900 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618f62998 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f62980 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f62960 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f62ae0 <line:642:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f62a70 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f62ac8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f62ab0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f62a90 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f62bb8 <line:643:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f62b00 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f62ba0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f62b80 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f62b68 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f62b20 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f62b40 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f62c90 <line:644:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f62c38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f62c20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f62bd8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f62bf8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618f62c78 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f62c58 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f62d78 <line:645:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f62d20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f62d08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f62cc0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f62ce0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618f62d60 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f62d40 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f62eb8 <line:648:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f62e48 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f62ea0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f62e88 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f62e68 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f62f90 <line:649:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f62ed8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f62f78 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f62f58 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f62f40 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f62ef8 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f62f18 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f63080 <line:650:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f63010 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f62ff8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f62fb0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f62fd0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618f63050 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f63030 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f63168 <line:651:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f63110 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f630f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f630b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f630d0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618f63150 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f63130 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f632a8 <line:654:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f63238 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f63290 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f63278 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f63258 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f63380 <line:655:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f632c8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f63368 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f63348 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f63330 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f632e8 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f63308 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f63458 <line:656:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f63400 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f633e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f633a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f633c0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1c618f63440 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f63420 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f63540 <line:657:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f634e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f634d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f63488 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f634a8 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618f63528 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f63508 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f63680 <line:660:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f63610 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f63668 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f63650 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f63630 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f63758 <line:661:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f636a0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f63740 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f63720 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f63708 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f636c0 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f636e0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f63830 <line:662:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f637d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f637c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f63778 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f63798 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618f63818 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f637f8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f63930 <line:663:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f638c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f638a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f63860 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f63880 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618f63918 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f63900 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f638e0 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f63a60 <line:666:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f639f0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f63a48 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f63a30 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f63a10 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f63b38 <line:667:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f63a80 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f63b20 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f63b00 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f63ae8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f63aa0 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f63ac0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f63c10 <line:668:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f63bb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f63ba0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f63b58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f63b78 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618f63bf8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f63bd8 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f63cf8 <line:669:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f63ca0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f63c88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f63c40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f63c60 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618f63ce0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f63cc0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f63e38 <line:672:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f63dc8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f63e20 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f63e08 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f63de8 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f63f10 <line:673:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f63e58 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f63ef8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f63ed8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f63ec0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f63e78 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f63e98 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f63fe8 <line:674:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f63f90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f63f78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f63f30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f63f50 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1c618f63fd0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f63fb0 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f640d0 <line:675:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f64078 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f64060 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f64018 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f64038 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618f640b8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f64098 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f64210 <line:678:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f641a0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f641f8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f641e0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f641c0 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f642e8 <line:679:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f64230 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f642d0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f642b0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f64298 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f64250 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f64270 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f643c0 <line:680:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f64368 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f64350 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f64308 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f64328 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618f643a8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f64388 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f644c0 <line:681:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f64450 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f64438 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f643f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f64410 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1c618f644a8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f64490 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f64470 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f645f0 <line:684:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f64580 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f645d8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f645c0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f645a0 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f646c8 <line:685:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f64610 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f646b0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f64690 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f64678 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f64630 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f64650 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f647a0 <line:686:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f64748 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f64730 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f646e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f64708 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1c618f64788 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f64768 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f64888 <line:687:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f64830 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f64818 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f647d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f647f0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1c618f64870 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f64850 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f649c8 <line:690:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f64958 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f649b0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f64998 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f64978 <col:11> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |-BinaryOperator 0x1c618f64aa0 <line:691:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f649e8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f64a88 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1c618f64a68 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x1c618f64a50 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f64a08 <col:12> 'limb':'int' lvalue Var 0x1c618e84bf8 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x1c618f64a28 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x1c618f64b78 <line:692:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1c618f64b20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f64b08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f64ac0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f64ae0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1c618f64b60 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f64b40 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618e84d00 'low' 'u64':'unsigned long long'
|   `-BinaryOperator 0x1c618f64c78 <line:693:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x1c618f64c08 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618f64bf0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618f64ba8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618e848c0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618f64bc8 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x1c618f64c60 <col:14> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x1c618f64c48 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x1c618f64c28 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618e84c88 'high' 'u64':'unsigned long long'
|-FunctionDecl 0x1c618f740c8 <line:704:1, line:710:1> line:704:13 used felem_mul 'void (limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x1c618f64ec8 <col:23, col:33> col:33 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f64f40 <col:38, col:50> col:50 used in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1c618f64fb8 <col:55, col:67> col:67 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618f74640 <line:705:1, line:710:1>
|   |-DeclStmt 0x1c618f742a0 <line:706:5, col:30>
|   | |-VarDecl 0x1c618f741a8 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x1c618f74220 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1c618f74348 <line:707:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f74330 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f742b8 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f74378 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f742d8 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f741a8 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f74390 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f74310 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f64f40 'in1' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f74438 <line:708:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f74420 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f743a8 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f74468 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f743c8 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f74220 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f74480 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f74400 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f64fb8 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x1c618f74590 <line:709:5, col:39> 'void'
|     |-ImplicitCastExpr 0x1c618f74578 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f74498 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x1c618e84b18 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|     |-ImplicitCastExpr 0x1c618f745c8 <col:20> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f744b8 <col:20> 'limb *':'limb *' lvalue ParmVar 0x1c618f64ec8 'out' 'limb *':'limb *'
|     |-ImplicitCastExpr 0x1c618f745f8 <col:25> 'const u64 *':'const u64 *' <NoOp>
|     | `-ImplicitCastExpr 0x1c618f745e0 <col:25> 'u64 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x1c618f744d8 <col:25> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f741a8 'small1' 'smallfelem':'u64 [4]'
|     `-ImplicitCastExpr 0x1c618f74628 <col:33> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x1c618f74610 <col:33> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618f744f8 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f74220 'small2' 'smallfelem':'u64 [4]'
|-FunctionDecl 0x1c618f748d8 <line:720:1, line:726:1> line:720:13 used felem_small_mul 'void (limb *, const u64 *, const limb *)' static
| |-ParmVarDecl 0x1c618f74680 <col:29, col:39> col:39 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f746f8 <col:44, col:61> col:61 used small1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1c618f74770 <line:721:29, col:41> col:41 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618f74c58 <line:722:1, line:726:1>
|   |-DeclStmt 0x1c618f74a20 <line:723:5, col:22>
|   | `-VarDecl 0x1c618f749b8 <col:5, col:16> col:16 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1c618f74ac8 <line:724:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f74ab0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f74a38 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f74af8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f74a58 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f749b8 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f74b10 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f74a90 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f74770 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x1c618f74bc0 <line:725:5, col:39> 'void'
|     |-ImplicitCastExpr 0x1c618f74ba8 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f74b28 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x1c618e84b18 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|     |-ImplicitCastExpr 0x1c618f74bf8 <col:20> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f74b48 <col:20> 'limb *':'limb *' lvalue ParmVar 0x1c618f74680 'out' 'limb *':'limb *'
|     |-ImplicitCastExpr 0x1c618f74c10 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f74b68 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f746f8 'small1' 'const u64 *':'const u64 *'
|     `-ImplicitCastExpr 0x1c618f74c40 <col:33> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x1c618f74c28 <col:33> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618f74b88 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f749b8 'small2' 'smallfelem':'u64 [4]'
|-VarDecl 0x1c618f74c90 <line:732:1, line:733:53> line:732:20 used zero100 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x1c618f75750 <line:733:5, col:53> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x1c618f74fd0 <line:728:22, col:78> 'int' '-'
|   | |-BinaryOperator 0x1c618f74ec8 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x1c618f74dc0 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x1c618f74da0 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1c618f74d58 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1c618f74d30 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1c618f74cf8 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x1c618f74d78 <col:36> 'int' 100
|   | | `-ParenExpr 0x1c618f74ea8 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x1c618f74e88 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1c618f74e40 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1c618f74e18 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1c618f74de0 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x1c618f74e60 <col:57> 'int' 36
|   | `-ParenExpr 0x1c618f74fb0 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x1c618f74f90 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1c618f74f48 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1c618f74f20 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1c618f74ee8 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x1c618f74f68 <col:77> 'int' 4
|   |-ParenExpr 0x1c618f750b8 <line:729:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x1c618f75098 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1c618f75050 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1c618f75028 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x1c618f74ff0 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x1c618f75070 <col:31> 'int' 100
|   |-BinaryOperator 0x1c618f753b0 <line:730:22, col:78> 'int' '+'
|   | |-BinaryOperator 0x1c618f752a8 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x1c618f751a0 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x1c618f75180 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x1c618f75138 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x1c618f75110 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x1c618f750d8 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x1c618f75158 <col:36> 'int' 100
|   | | `-ParenExpr 0x1c618f75288 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x1c618f75268 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x1c618f75220 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x1c618f751f8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x1c618f751c0 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x1c618f75240 <col:57> 'int' 36
|   | `-ParenExpr 0x1c618f75390 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x1c618f75370 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x1c618f75328 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x1c618f75300 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1c618f752c8 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x1c618f75348 <col:77> 'int' 4
|   `-BinaryOperator 0x1c618f756a8 <col:22, col:78> 'int' '+'
|     |-BinaryOperator 0x1c618f755a0 <col:22, col:59> 'int' '-'
|     | |-ParenExpr 0x1c618f75498 <col:22, col:39> 'limb':'int'
|     | | `-BinaryOperator 0x1c618f75478 <col:23, col:36> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x1c618f75430 <col:23, col:31> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x1c618f75408 <col:24, col:30> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x1c618f753d0 <col:30> 'int' 1
|     | |   `-IntegerLiteral 0x1c618f75450 <col:36> 'int' 100
|     | `-ParenExpr 0x1c618f75580 <col:43, col:59> 'limb':'int'
|     |   `-BinaryOperator 0x1c618f75560 <col:44, col:57> 'limb':'int' '<<'
|     |     |-ParenExpr 0x1c618f75518 <col:44, col:52> 'limb':'int'
|     |     | `-CStyleCastExpr 0x1c618f754f0 <col:45, col:51> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x1c618f754b8 <col:51> 'int' 1
|     |     `-IntegerLiteral 0x1c618f75538 <col:57> 'int' 36
|     `-ParenExpr 0x1c618f75688 <col:63, col:78> 'limb':'int'
|       `-BinaryOperator 0x1c618f75668 <col:64, col:77> 'limb':'int' '<<'
|         |-ParenExpr 0x1c618f75620 <col:64, col:72> 'limb':'int'
|         | `-CStyleCastExpr 0x1c618f755f8 <col:65, col:71> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x1c618f755c0 <col:71> 'int' 1
|         `-IntegerLiteral 0x1c618f75640 <col:77> 'int' 4
|-FunctionDecl 0x1c618f75938 <line:749:1, line:781:1> line:749:13 used felem_reduce_ 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1c618f757c0 <col:27, col:33> col:33 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f75838 <col:38, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618f6d240 <line:750:1, line:781:1>
|   |-CompoundAssignOperator 0x1c618f6c050 <line:763:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f75f68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f75f50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f75f08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f75f28 <col:9> 'int' 1
|   | `-ParenExpr 0x1c618f6c030 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1c618f6c010 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1c618f6bff8 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618f75fe8 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618f75fd0 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1c618f75f88 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1c618f75fa8 <col:19> 'int' 4
|   |     `-IntegerLiteral 0x1c618f6bfd0 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1c618f6c200 <line:764:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f6c0e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6c0c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6c080 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6c0a0 <col:9> 'int' 3
|   | `-ParenExpr 0x1c618f6c1e0 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1c618f6c1c0 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1c618f6c1a8 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618f6c160 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618f6c148 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1c618f6c100 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1c618f6c120 <col:19> 'int' 4
|   |     `-IntegerLiteral 0x1c618f6c180 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1c618f6c3b0 <line:767:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f6c290 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6c278 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6c230 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6c250 <col:9> 'int' 2
|   | `-ParenExpr 0x1c618f6c390 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1c618f6c370 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1c618f6c358 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618f6c310 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618f6c2f8 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1c618f6c2b0 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1c618f6c2d0 <col:19> 'int' 5
|   |     `-IntegerLiteral 0x1c618f6c330 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1c618f6c4f8 <line:770:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f6c440 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6c428 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6c3e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6c400 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618f6c4e0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618f6c4c0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618f6c4a8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f6c460 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618f6c480 <col:18> 'int' 6
|   |-CompoundAssignOperator 0x1c618f6c6a8 <line:771:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f6c588 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6c570 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6c528 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6c548 <col:9> 'int' 0
|   | `-ParenExpr 0x1c618f6c688 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1c618f6c668 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1c618f6c650 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618f6c608 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618f6c5f0 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1c618f6c5a8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1c618f6c5c8 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x1c618f6c628 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1c618f6c858 <line:772:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f6c738 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6c720 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6c6d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6c6f8 <col:9> 'int' 1
|   | `-ParenExpr 0x1c618f6c838 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1c618f6c818 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1c618f6c800 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618f6c7b8 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618f6c7a0 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1c618f6c758 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1c618f6c778 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x1c618f6c7d8 <col:25> 'int' 33
|   |-CompoundAssignOperator 0x1c618f6ca08 <line:773:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f6c8e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6c8d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6c888 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6c8a8 <col:9> 'int' 2
|   | `-ParenExpr 0x1c618f6c9e8 <col:15, col:25> 'int'
|   |   `-BinaryOperator 0x1c618f6c9c8 <col:16, col:24> 'int' '*'
|   |     |-ImplicitCastExpr 0x1c618f6c9b0 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618f6c968 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618f6c950 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1c618f6c908 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1c618f6c928 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x1c618f6c988 <col:24> 'int' 2
|   |-CompoundAssignOperator 0x1c618f6cbb8 <line:774:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f6ca98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6ca80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6ca38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6ca58 <col:9> 'int' 3
|   | `-ParenExpr 0x1c618f6cb98 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1c618f6cb78 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1c618f6cb60 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618f6cb18 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618f6cb00 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1c618f6cab8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1c618f6cad8 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x1c618f6cb38 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1c618f6cd00 <line:777:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f6cc48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6cc30 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6cbe8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6cc08 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1c618f6cce8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1c618f6ccc8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1c618f6ccb0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c618f6cc68 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1c618f6cc88 <col:18> 'int' 7
|   |-CompoundAssignOperator 0x1c618f6ceb0 <line:778:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f6cd90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6cd78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6cd30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6cd50 <col:9> 'int' 0
|   | `-ParenExpr 0x1c618f6ce90 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1c618f6ce70 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1c618f6ce58 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618f6ce10 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618f6cdf8 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1c618f6cdb0 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1c618f6cdd0 <col:19> 'int' 7
|   |     `-IntegerLiteral 0x1c618f6ce30 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x1c618f6d060 <line:779:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1c618f6cf40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6cf28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6cee0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6cf00 <col:9> 'int' 2
|   | `-ParenExpr 0x1c618f6d040 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x1c618f6d020 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x1c618f6d008 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x1c618f6cfc0 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x1c618f6cfa8 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1c618f6cf60 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x1c618f6cf80 <col:19> 'int' 7
|   |     `-IntegerLiteral 0x1c618f6cfe0 <col:25> 'int' 33
|   `-CompoundAssignOperator 0x1c618f6d210 <line:780:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1c618f6d0f0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x1c618f6d0d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618f6d090 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f757c0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1c618f6d0b0 <col:9> 'int' 3
|     `-ParenExpr 0x1c618f6d1f0 <col:15, col:25> 'int'
|       `-BinaryOperator 0x1c618f6d1d0 <col:16, col:24> 'int' '*'
|         |-ImplicitCastExpr 0x1c618f6d1b8 <col:16, col:20> 'limb':'int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x1c618f6d170 <col:16, col:20> 'const limb':'const int' lvalue
|         |   |-ImplicitCastExpr 0x1c618f6d158 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|         |   | `-DeclRefExpr 0x1c618f6d110 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f75838 'in' 'const limb *':'const limb *'
|         |   `-IntegerLiteral 0x1c618f6d130 <col:19> 'int' 7
|         `-IntegerLiteral 0x1c618f6d190 <col:24> 'int' 3
|-FunctionDecl 0x1c618f6d400 <line:792:1, line:812:1> line:792:13 used felem_reduce 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1c618f6d2c0 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f6d338 <col:37, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618f6de00 <line:793:1, line:812:1>
|   |-BinaryOperator 0x1c618f6d698 <line:794:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f6d528 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6d510 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6d4c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f6d2c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6d4e8 <col:9> 'int' 0
|   | `-BinaryOperator 0x1c618f6d678 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1c618f6d648 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1c618f6d5a8 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1c618f6d590 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c618f6d548 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618f74c90 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1c618f6d568 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x1c618f6d660 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f6d628 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1c618f6d610 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618f6d5c8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f6d338 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1c618f6d5e8 <col:30> 'int' 0
|   |-BinaryOperator 0x1c618f6d8d0 <line:795:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f6d760 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6d748 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6d700 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f6d2c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6d720 <col:9> 'int' 1
|   | `-BinaryOperator 0x1c618f6d8b0 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1c618f6d880 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1c618f6d7e0 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1c618f6d7c8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c618f6d780 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618f74c90 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1c618f6d7a0 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x1c618f6d898 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f6d860 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1c618f6d848 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618f6d800 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f6d338 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1c618f6d820 <col:30> 'int' 1
|   |-BinaryOperator 0x1c618f6dac0 <line:796:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f6d950 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6d938 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6d8f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f6d2c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6d910 <col:9> 'int' 2
|   | `-BinaryOperator 0x1c618f6daa0 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1c618f6da70 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1c618f6d9d0 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1c618f6d9b8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c618f6d970 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618f74c90 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1c618f6d990 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x1c618f6da88 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f6da50 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1c618f6da38 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618f6d9f0 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f6d338 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1c618f6da10 <col:30> 'int' 2
|   |-BinaryOperator 0x1c618f6dcb0 <line:797:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f6db40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f6db28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f6dae0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f6d2c0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f6db00 <col:9> 'int' 3
|   | `-BinaryOperator 0x1c618f6dc90 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1c618f6dc60 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1c618f6dbc0 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1c618f6dba8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c618f6db60 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618f74c90 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1c618f6db80 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x1c618f6dc78 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f6dc40 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1c618f6dc28 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618f6dbe0 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f6d338 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1c618f6dc00 <col:30> 'int' 3
|   `-CallExpr 0x1c618f6dda0 <line:799:5, col:26> 'void'
|     |-ImplicitCastExpr 0x1c618f6dd88 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f6dcd0 <col:5> 'void (limb *, const limb *)' Function 0x1c618f75938 'felem_reduce_' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1c618f6ddd0 <col:19> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f6dcf0 <col:19> 'limb *':'limb *' lvalue ParmVar 0x1c618f6d2c0 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1c618f6dde8 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|       `-DeclRefExpr 0x1c618f6dd10 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f6d338 'in' 'const limb *':'const limb *'
|-FunctionDecl 0x1c618f65fa0 <line:821:1, line:841:1> line:821:13 used felem_reduce_zero105 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1c618f6de48 <col:34, col:40> col:40 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f6dec0 <col:45, col:61> col:61 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618f66900 <line:822:1, line:841:1>
|   |-BinaryOperator 0x1c618f66238 <line:823:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f660c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f660b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f66068 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f6de48 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f66088 <col:9> 'int' 0
|   | `-BinaryOperator 0x1c618f66218 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1c618f661e8 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1c618f66148 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1c618f66130 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c618f660e8 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1c618f66108 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x1c618f66200 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f661c8 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1c618f661b0 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618f66168 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f6dec0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1c618f66188 <col:30> 'int' 0
|   |-BinaryOperator 0x1c618f66428 <line:824:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f662b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f662a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f66258 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f6de48 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f66278 <col:9> 'int' 1
|   | `-BinaryOperator 0x1c618f66408 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1c618f663d8 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1c618f66338 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1c618f66320 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c618f662d8 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1c618f662f8 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x1c618f663f0 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f663b8 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1c618f663a0 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618f66358 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f6dec0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1c618f66378 <col:30> 'int' 1
|   |-BinaryOperator 0x1c618f66618 <line:825:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f664a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f66490 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f66448 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f6de48 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f66468 <col:9> 'int' 2
|   | `-BinaryOperator 0x1c618f665f8 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1c618f665c8 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1c618f66528 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1c618f66510 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c618f664c8 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1c618f664e8 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x1c618f665e0 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f665a8 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1c618f66590 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618f66548 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f6dec0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1c618f66568 <col:30> 'int' 2
|   |-BinaryOperator 0x1c618f66808 <line:826:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x1c618f66698 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1c618f66680 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f66638 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1c618f6de48 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1c618f66658 <col:9> 'int' 3
|   | `-BinaryOperator 0x1c618f667e8 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x1c618f667b8 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1c618f66718 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1c618f66700 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c618f666b8 <col:14> 'const felem':'limb const[4]' lvalue Var 0x1c618e75f50 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x1c618f666d8 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x1c618f667d0 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f66798 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x1c618f66780 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618f66738 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f6dec0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1c618f66758 <col:30> 'int' 3
|   `-CallExpr 0x1c618f668a0 <line:828:5, col:26> 'void'
|     |-ImplicitCastExpr 0x1c618f66888 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f66828 <col:5> 'void (limb *, const limb *)' Function 0x1c618f75938 'felem_reduce_' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1c618f668d0 <col:19> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f66848 <col:19> 'limb *':'limb *' lvalue ParmVar 0x1c618f6de48 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1c618f668e8 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|       `-DeclRefExpr 0x1c618f66868 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f6dec0 'in' 'const limb *':'const limb *'
|-FunctionDecl 0x1c618f66ba8 <line:847:1, line:853:1> line:847:13 used subtract_u64 'void (u64 *, u64 *, u64)' static
| |-ParmVarDecl 0x1c618f66948 <col:26, col:31> col:31 used result 'u64 *'
| |-ParmVarDecl 0x1c618f669c0 <col:39, col:44> col:44 used carry 'u64 *'
| |-ParmVarDecl 0x1c618f66a38 <col:51, col:55> col:55 used v 'u64':'unsigned long long'
| `-CompoundStmt 0x1c618f66d88 <line:848:1, line:853:1>
|-FunctionDecl 0x1c618f66ee8 <line:859:1, line:920:1> line:859:13 used felem_contract 'void (u64 *, const limb *)' static
| |-ParmVarDecl 0x1c618f66da8 <col:28, col:39> col:39 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f66e20 <col:44, col:56> col:56 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618f6f228 <line:860:1, line:920:1>
|   |-DeclStmt 0x1c618f67030 <line:861:5, col:15>
|   | `-VarDecl 0x1c618f66fc8 <col:5, col:14> col:14 used i 'unsigned int'
|   |-DeclStmt 0x1c618f67250 <line:862:5, col:48>
|   | |-VarDecl 0x1c618f67058 <col:5, col:28> col:9 used all_equal_so_far 'u64':'unsigned long long' cinit
|   | | `-ImplicitCastExpr 0x1c618f670e8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f670c0 <col:28> 'int' 0
|   | |-VarDecl 0x1c618f67110 <col:5, col:40> col:31 used result 'u64':'unsigned long long' cinit
|   | | `-ImplicitCastExpr 0x1c618f671a0 <col:40> 'u64':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f67178 <col:40> 'int' 0
|   | `-VarDecl 0x1c618f671c8 <col:5, col:43> col:43 used carry 'u64':'unsigned long long'
|   |-CallExpr 0x1c618f672e0 <line:864:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1c618f672c8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f67268 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f67310 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f67288 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1c618f67328 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f672a8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f66e20 'in' 'const limb *':'const limb *'
|   |-UnaryOperator 0x1c618f67378 <line:867:5, col:21> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x1c618f67340 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f67058 'all_equal_so_far' 'u64':'unsigned long long'
|   |-ForStmt 0x1c618f67f18 <line:874:5, line:898:5>
|   | |-BinaryOperator 0x1c618f67408 <line:874:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1c618f67390 <col:10> 'unsigned int' lvalue Var 0x1c618f66fc8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f673f0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f673c8 <col:14> 'int' 3
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c618f674a0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1c618f67470 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f67428 <col:17> 'unsigned int' lvalue Var 0x1c618f66fc8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f67488 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f67448 <col:21> 'int' 4
|   | |-UnaryOperator 0x1c618f674e0 <col:24, col:25> 'unsigned int' postfix '--'
|   | | `-DeclRefExpr 0x1c618f674c0 <col:24> 'unsigned int' lvalue Var 0x1c618f66fc8 'i' 'unsigned int'
|   | `-CompoundStmt 0x1c618f67eb0 <col:29, line:898:5>
|   |   |-DeclStmt 0x1c618f67570 <line:875:9, col:18>
|   |   | `-VarDecl 0x1c618f67508 <col:9, col:13> col:13 used equal 'u64':'unsigned long long'
|   |   |-BinaryOperator 0x1c618f677b0 <line:887:9, col:34> 'u64':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x1c618f67608 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1c618f67790 <col:17, col:34> 'unsigned long long' '^'
|   |   |   |-ImplicitCastExpr 0x1c618f67760 <col:17, col:25> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x1c618f676b0 <col:17, col:25> 'const u64':'const unsigned long long' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1c618f67680 <col:17> 'const u64 *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1c618f67640 <col:17> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |   |   |   `-ImplicitCastExpr 0x1c618f67698 <col:24> 'unsigned int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x1c618f67660 <col:24> 'unsigned int' lvalue Var 0x1c618f66fc8 'i' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1c618f67778 <col:29, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x1c618f67740 <col:29, col:34> 'u64':'unsigned long long' lvalue
|   |   |       |-ImplicitCastExpr 0x1c618f67710 <col:29> 'u64 *':'u64 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x1c618f676d0 <col:29> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   |   |       `-ImplicitCastExpr 0x1c618f67728 <col:33> 'unsigned int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1c618f676f0 <col:33> 'unsigned int' lvalue Var 0x1c618f66fc8 'i' 'unsigned int'
|   |   |-UnaryOperator 0x1c618f677f0 <line:888:9, col:14> 'u64':'unsigned long long' postfix '--'
|   |   | `-DeclRefExpr 0x1c618f677d0 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   |-CompoundAssignOperator 0x1c618f678a8 <line:889:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1c618f67808 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1c618f67888 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1c618f67870 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1c618f67828 <col:18> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1c618f67848 <col:27> 'int' 32
|   |   |-CompoundAssignOperator 0x1c618f67978 <line:890:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1c618f678d8 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1c618f67958 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1c618f67940 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1c618f678f8 <col:18> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1c618f67918 <col:27> 'int' 16
|   |   |-CompoundAssignOperator 0x1c618f67a48 <line:891:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1c618f679a8 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1c618f67a28 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1c618f67a10 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1c618f679c8 <col:18> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1c618f679e8 <col:27> 'int' 8
|   |   |-CompoundAssignOperator 0x1c618f67b18 <line:892:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1c618f67a78 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1c618f67af8 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1c618f67ae0 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1c618f67a98 <col:18> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1c618f67ab8 <col:27> 'int' 4
|   |   |-CompoundAssignOperator 0x1c618f67be8 <line:893:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1c618f67b48 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1c618f67bc8 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1c618f67bb0 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1c618f67b68 <col:18> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1c618f67b88 <col:27> 'int' 2
|   |   |-CompoundAssignOperator 0x1c618f67cb8 <line:894:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x1c618f67c18 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1c618f67c98 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x1c618f67c80 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1c618f67c38 <col:18> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x1c618f67c58 <col:27> 'int' 1
|   |   |-BinaryOperator 0x1c618f67e08 <line:895:9, col:33> 'u64':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x1c618f67ce8 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x1c618f67de8 <col:17, col:33> 'unsigned long long' '-'
|   |   |   |-ImplicitCastExpr 0x1c618f67dd0 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | `-IntegerLiteral 0x1c618f67d08 <col:17> 'int' 0
|   |   |   `-ParenExpr 0x1c618f67db0 <col:21, col:33> 'u64':'unsigned long long'
|   |   |     `-BinaryOperator 0x1c618f67d90 <col:22, col:31> 'u64':'unsigned long long' '>>'
|   |   |       |-ImplicitCastExpr 0x1c618f67d78 <col:22> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x1c618f67d30 <col:22> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |   |       `-IntegerLiteral 0x1c618f67d50 <col:31> 'int' 63
|   |   `-CompoundAssignOperator 0x1c618f67e80 <line:897:9, col:29> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x1c618f67e28 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c618f67058 'all_equal_so_far' 'u64':'unsigned long long'
|   |     `-ImplicitCastExpr 0x1c618f67e68 <col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1c618f67e48 <col:29> 'u64':'unsigned long long' lvalue Var 0x1c618f67508 'equal' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f6dff8 <line:904:5, col:15> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f67f50 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f67110 'result' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f6dfe0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f67f70 <col:15> 'u64':'unsigned long long' lvalue Var 0x1c618f67058 'all_equal_so_far' 'u64':'unsigned long long'
|   |-CallExpr 0x1c618f6e290 <line:907:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x1c618f6e278 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6e028 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1c618f66ba8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1c618f6e0c8 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1c618f6e0a8 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1c618f6e090 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1c618f6e048 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1c618f6e068 <col:23> 'int' 0
|   | |-UnaryOperator 0x1c618f6e118 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1c618f6e0e0 <col:28> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f6e200 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1c618f6e1d0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f6e130 <col:35> 'u64':'unsigned long long' lvalue Var 0x1c618f67110 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1c618f6e1e8 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f6e1b0 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1c618f6e198 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c618f6e150 <col:44> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1c618f6e170 <col:51> 'int' 0
|   |-CallExpr 0x1c618f6e3f0 <line:908:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1c618f6e3d8 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6e2c8 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1c618f66ba8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1c618f6e368 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1c618f6e348 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1c618f6e330 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1c618f6e2e8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1c618f6e308 <col:23> 'int' 1
|   | |-UnaryOperator 0x1c618f6e3a0 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1c618f6e380 <col:28> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f6e428 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6e3b8 <col:35> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x1c618f6e568 <line:909:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1c618f6e550 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6e440 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1c618f66ba8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1c618f6e4e0 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1c618f6e4c0 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1c618f6e4a8 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1c618f6e460 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1c618f6e480 <col:23> 'int' 2
|   | |-UnaryOperator 0x1c618f6e518 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1c618f6e4f8 <col:28> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f6e5a0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6e530 <col:35> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x1c618f6e6e0 <line:910:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1c618f6e6c8 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6e5b8 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1c618f66ba8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1c618f6e658 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1c618f6e638 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1c618f6e620 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1c618f6e5d8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1c618f6e5f8 <col:23> 'int' 3
|   | |-UnaryOperator 0x1c618f6e690 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1c618f6e670 <col:28> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f6e718 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6e6a8 <col:35> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x1c618f6e928 <line:912:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x1c618f6e910 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6e730 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1c618f66ba8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1c618f6e7d0 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1c618f6e7b0 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1c618f6e798 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1c618f6e750 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1c618f6e770 <col:23> 'int' 1
|   | |-UnaryOperator 0x1c618f6e808 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1c618f6e7e8 <col:28> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f6e8f0 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1c618f6e8c0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f6e820 <col:35> 'u64':'unsigned long long' lvalue Var 0x1c618f67110 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1c618f6e8d8 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f6e8a0 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1c618f6e888 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c618f6e840 <col:44> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1c618f6e860 <col:51> 'int' 1
|   |-CallExpr 0x1c618f6ea88 <line:913:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1c618f6ea70 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6e960 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1c618f66ba8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1c618f6ea00 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1c618f6e9e0 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1c618f6e9c8 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1c618f6e980 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1c618f6e9a0 <col:23> 'int' 2
|   | |-UnaryOperator 0x1c618f6ea38 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1c618f6ea18 <col:28> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f6eac0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6ea50 <col:35> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x1c618f6ec00 <line:914:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1c618f6ebe8 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6ead8 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1c618f66ba8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1c618f6eb78 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1c618f6eb58 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1c618f6eb40 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1c618f6eaf8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1c618f6eb18 <col:23> 'int' 3
|   | |-UnaryOperator 0x1c618f6ebb0 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1c618f6eb90 <col:28> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f6ec38 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6ebc8 <col:35> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x1c618f6ee48 <line:916:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x1c618f6ee30 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6ec50 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1c618f66ba8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1c618f6ecf0 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1c618f6ecd0 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1c618f6ecb8 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1c618f6ec70 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1c618f6ec90 <col:23> 'int' 2
|   | |-UnaryOperator 0x1c618f6ed28 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1c618f6ed08 <col:28> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f6ee10 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1c618f6ede0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f6ed40 <col:35> 'u64':'unsigned long long' lvalue Var 0x1c618f67110 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1c618f6edf8 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1c618f6edc0 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1c618f6eda8 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c618f6ed60 <col:44> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x1c618f6ed80 <col:51> 'int' 2
|   |-CallExpr 0x1c618f6efa8 <line:917:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x1c618f6ef90 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6ee80 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1c618f66ba8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x1c618f6ef20 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x1c618f6ef00 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x1c618f6eee8 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1c618f6eea0 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x1c618f6eec0 <col:23> 'int' 3
|   | |-UnaryOperator 0x1c618f6ef58 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1c618f6ef38 <col:28> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f6efe0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6ef70 <col:35> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|   `-CallExpr 0x1c618f6f1f0 <line:919:5, col:53> 'void'
|     |-ImplicitCastExpr 0x1c618f6f1d8 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f6eff8 <col:5> 'void (u64 *, u64 *, u64)' Function 0x1c618f66ba8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|     |-UnaryOperator 0x1c618f6f098 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x1c618f6f078 <col:19, col:24> 'u64':'unsigned long long' lvalue
|     |   |-ImplicitCastExpr 0x1c618f6f060 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x1c618f6f018 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f66da8 'out' 'u64 *':'u64 *'
|     |   `-IntegerLiteral 0x1c618f6f038 <col:23> 'int' 3
|     |-UnaryOperator 0x1c618f6f0d0 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|     | `-DeclRefExpr 0x1c618f6f0b0 <col:28> 'u64':'unsigned long long' lvalue Var 0x1c618f671c8 'carry' 'u64':'unsigned long long'
|     `-BinaryOperator 0x1c618f6f1b8 <col:35, col:52> 'unsigned long long' '&'
|       |-ImplicitCastExpr 0x1c618f6f188 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1c618f6f0e8 <col:35> 'u64':'unsigned long long' lvalue Var 0x1c618f67110 'result' 'u64':'unsigned long long'
|       `-ImplicitCastExpr 0x1c618f6f1a0 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1c618f6f168 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|           |-ImplicitCastExpr 0x1c618f6f150 <col:44> 'const u64 *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x1c618f6f108 <col:44> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|           `-IntegerLiteral 0x1c618f6f128 <col:51> 'int' 3
|-FunctionDecl 0x1c618f6f408 <line:922:1, line:930:1> line:922:13 used smallfelem_square_contract 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x1c618f6f2c8 <col:40, col:51> col:51 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f6f340 <col:56, col:73> col:73 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618f6f8d8 <line:923:1, line:930:1>
|   |-DeclStmt 0x1c618f6f548 <line:924:5, col:22>
|   | `-VarDecl 0x1c618f6f4e0 <col:5, col:15> col:15 used longtmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x1c618f6f5d8 <line:925:5, col:14>
|   | `-VarDecl 0x1c618f6f570 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6f680 <line:927:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1c618f6f668 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6f5f0 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e81278 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f6f6b0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6f610 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1c618f6f4e0 'longtmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f6f6c8 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6f648 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f6f340 'in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1c618f6f770 <line:928:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c618f6f758 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6f6e0 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6f7a0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6f700 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f6f570 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6f7d0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6f7b8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6f738 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1c618f6f4e0 'longtmp' 'longfelem':'limb [8]'
|   `-CallExpr 0x1c618f6f860 <line:929:5, col:28> 'void'
|     |-ImplicitCastExpr 0x1c618f6f848 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f6f7e8 <col:5> 'void (u64 *, const limb *)' Function 0x1c618f66ee8 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x1c618f6f890 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f6f808 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f6f2c8 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x1c618f6f8c0 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1c618f6f8a8 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618f6f828 <col:25> 'felem':'limb [4]' lvalue Var 0x1c618f6f570 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x1c618f6fb78 <line:932:1, line:941:1> line:932:13 used smallfelem_mul_contract 'void (u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x1c618f6f920 <col:37, col:48> col:48 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f6f998 <col:53, col:70> col:70 used in1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1c618f6fa10 <line:933:37, col:54> col:54 used in2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618f700a0 <line:934:1, line:941:1>
|   |-DeclStmt 0x1c618f6fcc0 <line:935:5, col:22>
|   | `-VarDecl 0x1c618f6fc58 <col:5, col:15> col:15 used longtmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x1c618f6fd50 <line:936:5, col:14>
|   | `-VarDecl 0x1c618f6fce8 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6fe18 <line:938:5, col:37> 'void'
|   | |-ImplicitCastExpr 0x1c618f6fe00 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6fd68 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x1c618e84b18 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f6fe50 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6fd88 <col:20> 'longfelem':'limb [8]' lvalue Var 0x1c618f6fc58 'longtmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f6fe68 <col:29> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f6fdc0 <col:29> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f6f998 'in1' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1c618f6fe80 <col:34> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6fde0 <col:34> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f6fa10 'in2' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1c618f6ff28 <line:939:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c618f6ff10 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6fe98 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6ff58 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6feb8 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f6fce8 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6ff88 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6ff70 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6fef0 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1c618f6fc58 'longtmp' 'longfelem':'limb [8]'
|   `-CallExpr 0x1c618f70028 <line:940:5, col:28> 'void'
|     |-ImplicitCastExpr 0x1c618f70010 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f6ffa0 <col:5> 'void (u64 *, const limb *)' Function 0x1c618f66ee8 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x1c618f70058 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f6ffc0 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f6f920 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x1c618f70088 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1c618f70070 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618f6fff0 <col:25> 'felem':'limb [4]' lvalue Var 0x1c618f6fce8 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x1c618f701f8 <line:949:1, line:981:1> line:949:13 used smallfelem_is_zero 'limb (const u64 *)' static
| |-ParmVarDecl 0x1c618f700e8 <col:32, col:49> col:49 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618f71d08 <line:950:1, line:981:1>
|   |-DeclStmt 0x1c618f70330 <line:951:5, col:16>
|   | `-VarDecl 0x1c618f702c8 <col:5, col:10> col:10 used result 'limb':'int'
|   |-DeclStmt 0x1c618f703c0 <line:952:5, col:13>
|   | `-VarDecl 0x1c618f70358 <col:5, col:9> col:9 used is_p 'u64':'unsigned long long'
|   |-DeclStmt 0x1c618f70710 <line:954:5, col:60>
|   | `-VarDecl 0x1c618f703e8 <col:5, col:59> col:9 used is_zero 'u64':'unsigned long long' cinit
|   |   `-BinaryOperator 0x1c618f706f0 <col:19, col:59> 'unsigned long long' '|'
|   |     |-BinaryOperator 0x1c618f70638 <col:19, col:48> 'unsigned long long' '|'
|   |     | |-BinaryOperator 0x1c618f70580 <col:19, col:37> 'unsigned long long' '|'
|   |     | | |-ImplicitCastExpr 0x1c618f70550 <col:19, col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |     | | | `-ArraySubscriptExpr 0x1c618f704b0 <col:19, col:26> 'const u64':'const unsigned long long' lvalue
|   |     | | |   |-ImplicitCastExpr 0x1c618f70498 <col:19> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x1c618f70450 <col:19> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f700e8 'small' 'const u64 *':'const u64 *'
|   |     | | |   `-IntegerLiteral 0x1c618f70470 <col:25> 'int' 0
|   |     | | `-ImplicitCastExpr 0x1c618f70568 <col:30, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x1c618f70530 <col:30, col:37> 'const u64':'const unsigned long long' lvalue
|   |     | |     |-ImplicitCastExpr 0x1c618f70518 <col:30> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x1c618f704d0 <col:30> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f700e8 'small' 'const u64 *':'const u64 *'
|   |     | |     `-IntegerLiteral 0x1c618f704f0 <col:36> 'int' 1
|   |     | `-ImplicitCastExpr 0x1c618f70620 <col:41, col:48> 'u64':'unsigned long long' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1c618f70600 <col:41, col:48> 'const u64':'const unsigned long long' lvalue
|   |     |     |-ImplicitCastExpr 0x1c618f705e8 <col:41> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x1c618f705a0 <col:41> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f700e8 'small' 'const u64 *':'const u64 *'
|   |     |     `-IntegerLiteral 0x1c618f705c0 <col:47> 'int' 2
|   |     `-ImplicitCastExpr 0x1c618f706d8 <col:52, col:59> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x1c618f706b8 <col:52, col:59> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x1c618f706a0 <col:52> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1c618f70658 <col:52> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f700e8 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x1c618f70678 <col:58> 'int' 3
|   |-UnaryOperator 0x1c618f70760 <line:955:5, col:12> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x1c618f70728 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f70818 <line:956:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f70778 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f707f8 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f707e0 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f70798 <col:16> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f707b8 <col:27> 'int' 32
|   |-CompoundAssignOperator 0x1c618f708e8 <line:957:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f70848 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f708c8 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f708b0 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f70868 <col:16> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f70888 <col:27> 'int' 16
|   |-CompoundAssignOperator 0x1c618f709b8 <line:958:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f70918 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f70998 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f70980 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f70938 <col:16> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f70958 <col:27> 'int' 8
|   |-CompoundAssignOperator 0x1c618f70a88 <line:959:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f709e8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f70a68 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f70a50 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f70a08 <col:16> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f70a28 <col:27> 'int' 4
|   |-CompoundAssignOperator 0x1c618f70b58 <line:960:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f70ab8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f70b38 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f70b20 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f70ad8 <col:16> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f70af8 <col:27> 'int' 2
|   |-CompoundAssignOperator 0x1c618f70c28 <line:961:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f70b88 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f70c08 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f70bf0 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f70ba8 <col:16> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f70bc8 <col:27> 'int' 1
|   |-BinaryOperator 0x1c618f70d78 <line:962:5, col:33> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f70c58 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f70d58 <col:15, col:33> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1c618f70d40 <col:15> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1c618f70c78 <col:15> 'int' 0
|   |   `-ParenExpr 0x1c618f70d20 <col:19, col:33> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x1c618f70d00 <col:20, col:31> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x1c618f70ce8 <col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618f70ca0 <col:20> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x1c618f70cc0 <col:31> 'int' 63
|   |-BinaryOperator 0x1c618f713f0 <line:964:5, line:966:55> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f70d98 <line:964:5> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f713d0 <col:12, line:966:55> 'unsigned long long' '|'
|   |   |-BinaryOperator 0x1c618f71240 <line:964:12, line:966:30> 'unsigned long long' '|'
|   |   | |-BinaryOperator 0x1c618f710b0 <line:964:12, line:965:30> 'unsigned long long' '|'
|   |   | | |-ParenExpr 0x1c618f70f20 <line:964:12, col:33> 'unsigned long long'
|   |   | | | `-BinaryOperator 0x1c618f70f00 <col:13, col:32> 'unsigned long long' '^'
|   |   | | |   |-ImplicitCastExpr 0x1c618f70ed0 <col:13, col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |   | | |   | `-ArraySubscriptExpr 0x1c618f70e30 <col:13, col:20> 'const u64':'const unsigned long long' lvalue
|   |   | | |   |   |-ImplicitCastExpr 0x1c618f70e18 <col:13> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   | | |   |   | `-DeclRefExpr 0x1c618f70dd0 <col:13> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f700e8 'small' 'const u64 *':'const u64 *'
|   |   | | |   |   `-IntegerLiteral 0x1c618f70df0 <col:19> 'int' 0
|   |   | | |   `-ImplicitCastExpr 0x1c618f70ee8 <col:24, col:32> 'u64':'unsigned long long' <LValueToRValue>
|   |   | | |     `-ArraySubscriptExpr 0x1c618f70eb0 <col:24, col:32> 'const u64':'const unsigned long long' lvalue
|   |   | | |       |-ImplicitCastExpr 0x1c618f70e98 <col:24> 'const u64 *' <ArrayToPointerDecay>
|   |   | | |       | `-DeclRefExpr 0x1c618f70e50 <col:24> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |   | | |       `-IntegerLiteral 0x1c618f70e70 <col:31> 'int' 0
|   |   | | `-ParenExpr 0x1c618f71090 <line:965:9, col:30> 'unsigned long long'
|   |   | |   `-BinaryOperator 0x1c618f71070 <col:10, col:29> 'unsigned long long' '^'
|   |   | |     |-ImplicitCastExpr 0x1c618f71040 <col:10, col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |   | |     | `-ArraySubscriptExpr 0x1c618f70fa0 <col:10, col:17> 'const u64':'const unsigned long long' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1c618f70f88 <col:10> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   | |     |   | `-DeclRefExpr 0x1c618f70f40 <col:10> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f700e8 'small' 'const u64 *':'const u64 *'
|   |   | |     |   `-IntegerLiteral 0x1c618f70f60 <col:16> 'int' 1
|   |   | |     `-ImplicitCastExpr 0x1c618f71058 <col:21, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   | |       `-ArraySubscriptExpr 0x1c618f71020 <col:21, col:29> 'const u64':'const unsigned long long' lvalue
|   |   | |         |-ImplicitCastExpr 0x1c618f71008 <col:21> 'const u64 *' <ArrayToPointerDecay>
|   |   | |         | `-DeclRefExpr 0x1c618f70fc0 <col:21> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |   | |         `-IntegerLiteral 0x1c618f70fe0 <col:28> 'int' 1
|   |   | `-ParenExpr 0x1c618f71220 <line:966:9, col:30> 'unsigned long long'
|   |   |   `-BinaryOperator 0x1c618f71200 <col:10, col:29> 'unsigned long long' '^'
|   |   |     |-ImplicitCastExpr 0x1c618f711d0 <col:10, col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     | `-ArraySubscriptExpr 0x1c618f71130 <col:10, col:17> 'const u64':'const unsigned long long' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c618f71118 <col:10> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1c618f710d0 <col:10> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f700e8 'small' 'const u64 *':'const u64 *'
|   |   |     |   `-IntegerLiteral 0x1c618f710f0 <col:16> 'int' 2
|   |   |     `-ImplicitCastExpr 0x1c618f711e8 <col:21, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       `-ArraySubscriptExpr 0x1c618f711b0 <col:21, col:29> 'const u64':'const unsigned long long' lvalue
|   |   |         |-ImplicitCastExpr 0x1c618f71198 <col:21> 'const u64 *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x1c618f71150 <col:21> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |   |         `-IntegerLiteral 0x1c618f71170 <col:28> 'int' 2
|   |   `-ParenExpr 0x1c618f713b0 <col:34, col:55> 'unsigned long long'
|   |     `-BinaryOperator 0x1c618f71390 <col:35, col:54> 'unsigned long long' '^'
|   |       |-ImplicitCastExpr 0x1c618f71360 <col:35, col:42> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x1c618f712c0 <col:35, col:42> 'const u64':'const unsigned long long' lvalue
|   |       |   |-ImplicitCastExpr 0x1c618f712a8 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1c618f71260 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f700e8 'small' 'const u64 *':'const u64 *'
|   |       |   `-IntegerLiteral 0x1c618f71280 <col:41> 'int' 3
|   |       `-ImplicitCastExpr 0x1c618f71378 <col:46, col:54> 'u64':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x1c618f71340 <col:46, col:54> 'const u64':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x1c618f71328 <col:46> 'const u64 *' <ArrayToPointerDecay>
|   |           | `-DeclRefExpr 0x1c618f712e0 <col:46> 'const u64 [4]' lvalue Var 0x1c618f5d148 'kPrime' 'const u64 [4]'
|   |           `-IntegerLiteral 0x1c618f71300 <col:53> 'int' 3
|   |-UnaryOperator 0x1c618f71430 <line:967:5, col:9> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x1c618f71410 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f714e8 <line:968:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f71448 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f714c8 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f714b0 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f71468 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f71488 <col:21> 'int' 32
|   |-CompoundAssignOperator 0x1c618f715b8 <line:969:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f71518 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f71598 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f71580 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f71538 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f71558 <col:21> 'int' 16
|   |-CompoundAssignOperator 0x1c618f71688 <line:970:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f715e8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f71668 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f71650 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f71608 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f71628 <col:21> 'int' 8
|   |-CompoundAssignOperator 0x1c618f71758 <line:971:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f716b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f71738 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f71720 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f716d8 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f716f8 <col:21> 'int' 4
|   |-CompoundAssignOperator 0x1c618f71828 <line:972:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f71788 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f71808 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f717f0 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f717a8 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f717c8 <col:21> 'int' 2
|   |-CompoundAssignOperator 0x1c618f718f8 <line:973:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f71858 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f718d8 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x1c618f718c0 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c618f71878 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f71898 <col:21> 'int' 1
|   |-BinaryOperator 0x1c618f71a48 <line:974:5, col:27> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x1c618f71928 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x1c618f71a28 <col:12, col:27> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1c618f71a10 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1c618f71948 <col:12> 'int' 0
|   |   `-ParenExpr 0x1c618f719f0 <col:16, col:27> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x1c618f719d0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x1c618f719b8 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1c618f71970 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x1c618f71990 <col:25> 'int' 63
|   |-CompoundAssignOperator 0x1c618f71ac0 <line:976:5, col:16> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x1c618f71a68 <col:5> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x1c618f71aa8 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f71a88 <col:16> 'u64':'unsigned long long' lvalue Var 0x1c618f70358 'is_p' 'u64':'unsigned long long'
|   |-BinaryOperator 0x1c618f71b78 <line:978:5, col:14> 'limb':'int' '='
|   | |-DeclRefExpr 0x1c618f71af0 <col:5> 'limb':'int' lvalue Var 0x1c618f702c8 'result' 'limb':'int'
|   | `-ImplicitCastExpr 0x1c618f71b60 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1c618f71b48 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f71b28 <col:14> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x1c618f71c90 <line:979:5, col:35> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x1c618f71b98 <col:5> 'limb':'int' lvalue Var 0x1c618f702c8 'result' 'limb':'int'
|   | `-BinaryOperator 0x1c618f71c70 <col:15, col:35> 'limb':'int' '<<'
|   |   |-ParenExpr 0x1c618f71c28 <col:15, col:30> 'limb':'int'
|   |   | `-CStyleCastExpr 0x1c618f71c00 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x1c618f71be8 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x1c618f71bb8 <col:23> 'u64':'unsigned long long' lvalue Var 0x1c618f703e8 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x1c618f71c48 <col:35> 'int' 64
|   `-ReturnStmt 0x1c618f71cf8 <line:980:5, col:12>
|     `-ImplicitCastExpr 0x1c618f71ce0 <col:12> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x1c618f71cc0 <col:12> 'limb':'int' lvalue Var 0x1c618f702c8 'result' 'limb':'int'
|-FunctionDecl 0x1c618f71ea0 <line:983:1, line:986:1> line:983:12 used smallfelem_is_zero_int 'int (const void *)' static
| |-ParmVarDecl 0x1c618f71df0 <col:35, col:47> col:47 used small 'const void *'
| `-CompoundStmt 0x1c618f761e8 <line:984:1, line:986:1>
|   `-ReturnStmt 0x1c618f761d8 <line:985:5, col:56>
|     `-CStyleCastExpr 0x1c618f761b0 <col:12, col:56> 'int' <NoOp>
|       `-ParenExpr 0x1c618f76190 <col:17, col:56> 'int'
|         `-BinaryOperator 0x1c618f76138 <col:18, col:55> 'int' '&'
|           |-CallExpr 0x1c618f76060 <col:18, col:42> 'limb':'int'
|           | |-ImplicitCastExpr 0x1c618f76048 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x1c618f71f60 <col:18> 'limb (const u64 *)' Function 0x1c618f701f8 'smallfelem_is_zero' 'limb (const u64 *)'
|           | `-ImplicitCastExpr 0x1c618f760a0 <col:37> 'const u64 *':'const u64 *' <BitCast>
|           |   `-ImplicitCastExpr 0x1c618f76088 <col:37> 'const void *' <LValueToRValue>
|           |     `-DeclRefExpr 0x1c618f71f80 <col:37> 'const void *' lvalue ParmVar 0x1c618f71df0 'small' 'const void *'
|           `-ParenExpr 0x1c618f76118 <col:46, col:55> 'limb':'int'
|             `-CStyleCastExpr 0x1c618f760f0 <col:47, col:54> 'limb':'int' <NoOp>
|               `-IntegerLiteral 0x1c618f760b8 <col:54> 'int' 1
|-FunctionDecl 0x1c618f76350 <line:996:1, line:1088:1> line:996:13 used felem_inv 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1c618f76210 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f76288 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618f69a48 <line:997:1, line:1088:1>
|   |-DeclStmt 0x1c618f76520 <line:998:5, col:22>
|   | |-VarDecl 0x1c618f76428 <col:5, col:11> col:11 used ftmp 'felem':'limb [4]'
|   | `-VarDecl 0x1c618f764a0 <col:5, col:17> col:17 used ftmp2 'felem':'limb [4]'
|   |-DeclStmt 0x1c618f76840 <line:1000:5, col:36>
|   | |-VarDecl 0x1c618f76548 <col:5, col:11> col:11 used e2 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f765c0 <col:5, col:15> col:15 used e4 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f76638 <col:5, col:19> col:19 used e8 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f766b0 <col:5, col:23> col:23 used e16 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f76728 <col:5, col:28> col:28 used e32 'felem':'limb [4]'
|   | `-VarDecl 0x1c618f767a0 <col:5, col:33> col:33 used e64 'felem':'limb [4]'
|   |-DeclStmt 0x1c618f768d0 <line:1001:5, col:18>
|   | `-VarDecl 0x1c618f76868 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x1c618f76968 <line:1002:5, col:15>
|   | `-VarDecl 0x1c618f76900 <col:5, col:14> col:14 used i 'unsigned int'
|   |-CallExpr 0x1c618f76a40 <line:1004:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1c618f76a28 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76980 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f76a70 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f769a0 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f76a88 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f769d8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f76288 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f76b30 <line:1005:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f76b18 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76aa0 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f76b60 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76ac0 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f76b90 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f76b78 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f76af8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f76ca0 <line:1006:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f76c88 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76ba8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f76cd8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76bc8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f76cf0 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f76be8 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f76288 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1c618f76d20 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f76d08 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f76c08 <col:24> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f76db0 <line:1007:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f76d98 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76d38 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f76de0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76d58 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f76e10 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f76df8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f76d78 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f76ee0 <line:1008:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1c618f76ec8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76e28 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f76f10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76e48 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76548 'e2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f76f40 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f76f28 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f76e80 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f76fd0 <line:1009:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f76fb8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76f58 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f77000 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f76f78 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f77030 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77018 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f76f98 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f770c0 <line:1010:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f770a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77048 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f770f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77068 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77120 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77108 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77088 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f771b0 <line:1011:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f77198 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77138 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f771e0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77158 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f77210 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f771f8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77178 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f772a0 <line:1012:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f77288 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77228 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f772d0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77248 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77300 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f772e8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77268 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f773b0 <line:1013:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f77398 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77318 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f773e8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77338 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f77418 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f77400 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f77358 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77448 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77430 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77378 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f76548 'e2' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f774d8 <line:1014:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f774c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77460 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f77508 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77480 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77538 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77520 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f774a0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f775e0 <line:1015:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1c618f775c8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77550 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f77610 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77570 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f765c0 'e4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77640 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77628 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f775a8 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f776d0 <line:1016:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f776b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77658 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f77700 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77678 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f77730 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77718 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77698 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f777c0 <line:1017:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f777a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77748 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f777f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77768 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77820 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77808 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77788 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f778b0 <line:1018:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f77898 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77838 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f778e0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77858 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f77910 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f778f8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77878 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f779a0 <line:1019:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f77988 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77928 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f779d0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77948 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77a00 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f779e8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77968 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f77a90 <line:1020:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f77a78 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77a18 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f77ac0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77a38 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f77af0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77ad8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77a58 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f77b80 <line:1021:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f77b68 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77b08 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f77bb0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77b28 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77be0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77bc8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77b48 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f77c70 <line:1022:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f77c58 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77bf8 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f77ca0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77c18 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f77cd0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77cb8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77c38 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f77d60 <line:1023:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f77d48 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77ce8 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f77d90 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77d08 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77dc0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77da8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77d28 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f77e70 <line:1024:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f77e58 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77dd8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f77ea8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77df8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f77ed8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f77ec0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f77e18 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77f08 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77ef0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77e38 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f765c0 'e4' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f77f98 <line:1025:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f77f80 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77f20 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f77fc8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f77f40 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f77ff8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f77fe0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f77f60 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f72090 <line:1026:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1c618f72078 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f72000 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f720c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f72020 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76638 'e8' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f720f0 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f720d8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f72058 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x1c618f72470 <line:1027:5, line:1030:5>
|   | |-BinaryOperator 0x1c618f72180 <line:1027:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1c618f72108 <col:10> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f72168 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f72140 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c618f72218 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1c618f721e8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f721a0 <col:17> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f72200 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f721c0 <col:21> 'int' 8
|   | |-UnaryOperator 0x1c618f72258 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1c618f72238 <col:24> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | `-CompoundStmt 0x1c618f72450 <col:29, line:1030:5>
|   |   |-CallExpr 0x1c618f722e8 <line:1028:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f722d0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f72270 <col:9> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1c618f72318 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f72290 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1c618f72348 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1c618f72330 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1c618f722b0 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x1c618f723d8 <line:1029:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1c618f723c0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f72360 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1c618f72408 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f72380 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1c618f72438 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1c618f72420 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1c618f723a0 <col:28> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f72540 <line:1031:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f72528 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f724a8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f72578 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f724c8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f725a8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f72590 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f724e8 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f725d8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f725c0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f72508 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f76638 'e8' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f72668 <line:1032:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f72650 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f725f0 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f72698 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f72610 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f726c8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f726b0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f72630 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f72770 <line:1033:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f72758 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f726e0 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f727a0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f72700 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f766b0 'e16' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f727d0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f727b8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f72738 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x1c618f72b38 <line:1034:5, line:1037:5>
|   | |-BinaryOperator 0x1c618f72848 <line:1034:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1c618f727e8 <col:10> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f72830 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f72808 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c618f728e0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1c618f728b0 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f72868 <col:17> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f728c8 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f72888 <col:21> 'int' 16
|   | |-UnaryOperator 0x1c618f72920 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1c618f72900 <col:25> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | `-CompoundStmt 0x1c618f72b18 <col:30, line:1037:5>
|   |   |-CallExpr 0x1c618f729b0 <line:1035:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f72998 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f72938 <col:9> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1c618f729e0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f72958 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1c618f72a10 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1c618f729f8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1c618f72978 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x1c618f72aa0 <line:1036:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1c618f72a88 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f72a28 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1c618f72ad0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f72a48 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1c618f72b00 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1c618f72ae8 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1c618f72a68 <col:28> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f72c08 <line:1038:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f72bf0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f72b70 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f72c40 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f72b90 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f72c70 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f72c58 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f72bb0 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f72ca0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f72c88 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f72bd0 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f766b0 'e16' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f72d30 <line:1039:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f72d18 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f72cb8 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f72d60 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f72cd8 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f72d90 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f72d78 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f72cf8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f72e38 <line:1040:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f72e20 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f72da8 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f72e68 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f72dc8 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76728 'e32' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f72e98 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f72e80 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f72e00 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x1c618f73200 <line:1041:5, line:1044:5>
|   | |-BinaryOperator 0x1c618f72f10 <line:1041:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1c618f72eb0 <col:10> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f72ef8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f72ed0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c618f72fa8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1c618f72f78 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f72f30 <col:17> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f72f90 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f72f50 <col:21> 'int' 32
|   | |-UnaryOperator 0x1c618f72fe8 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1c618f72fc8 <col:25> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | `-CompoundStmt 0x1c618f731e0 <col:30, line:1044:5>
|   |   |-CallExpr 0x1c618f73078 <line:1042:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f73060 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f73000 <col:9> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1c618f730a8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f73020 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1c618f730d8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1c618f730c0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1c618f73040 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x1c618f73168 <line:1043:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1c618f73150 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f730f0 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1c618f73198 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f73110 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1c618f731c8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1c618f731b0 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1c618f73130 <col:28> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f732c8 <line:1045:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f732b0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73238 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f732f8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73258 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f767a0 'e64' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f73328 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f73310 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f73290 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f733d8 <line:1046:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f733c0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73340 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f73410 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73360 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f73440 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f73428 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f73380 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f73458 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f733a0 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f76288 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f734e8 <line:1047:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f734d0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73470 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f73518 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73490 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f73548 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f73530 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f734b0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x1c618f738b0 <line:1048:5, line:1051:5>
|   | |-BinaryOperator 0x1c618f735c0 <line:1048:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1c618f73560 <col:10> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f735a8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f73580 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c618f73658 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1c618f73628 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f735e0 <col:17> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f73640 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f73600 <col:21> 'int' 192
|   | |-UnaryOperator 0x1c618f73698 <col:26, col:27> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1c618f73678 <col:26> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | `-CompoundStmt 0x1c618f73890 <col:31, line:1051:5>
|   |   |-CallExpr 0x1c618f73728 <line:1049:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f73710 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f736b0 <col:9> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1c618f73758 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f736d0 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1c618f73788 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1c618f73770 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1c618f736f0 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x1c618f73818 <line:1050:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1c618f73800 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f737a0 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1c618f73848 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f737c0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1c618f73878 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1c618f73860 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1c618f737e0 <col:28> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f73980 <line:1053:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f73968 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f738e8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f739b8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73908 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f739e8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f739d0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f73928 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f767a0 'e64' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f73a18 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f73a00 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f73948 <col:25> 'felem':'limb [4]' lvalue Var 0x1c618f76728 'e32' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f73ac0 <line:1054:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f73aa8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73a30 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f73af0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73a50 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f73b20 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f73b08 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f73a88 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x1c618f73e88 <line:1055:5, line:1058:5>
|   | |-BinaryOperator 0x1c618f73b98 <line:1055:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1c618f73b38 <col:10> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f73b80 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f73b58 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c618f73c30 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1c618f73c00 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f73bb8 <col:17> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f73c18 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f73bd8 <col:21> 'int' 16
|   | |-UnaryOperator 0x1c618f73c70 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1c618f73c50 <col:25> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | `-CompoundStmt 0x1c618f73e68 <col:30, line:1058:5>
|   |   |-CallExpr 0x1c618f73d00 <line:1056:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f73ce8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f73c88 <col:9> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1c618f73d30 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f73ca8 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1c618f73d60 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1c618f73d48 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1c618f73cc8 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x1c618f73df0 <line:1057:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1c618f73dd8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f73d78 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1c618f73e20 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f73d98 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1c618f73e50 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1c618f73e38 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1c618f73db8 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f73f58 <line:1059:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c618f73f40 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73ec0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f73f90 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f73ee0 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f73fc0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f73fa8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f73f00 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f67fb0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f73fd8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f73f20 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f766b0 'e16' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f68040 <line:1060:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f68028 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f67fc8 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f68070 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f67fe8 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f680a0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f68088 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f68008 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x1c618f68408 <line:1061:5, line:1064:5>
|   | |-BinaryOperator 0x1c618f68118 <line:1061:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1c618f680b8 <col:10> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f68100 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f680d8 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c618f681b0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1c618f68180 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f68138 <col:17> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f68198 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f68158 <col:21> 'int' 8
|   | |-UnaryOperator 0x1c618f681f0 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1c618f681d0 <col:24> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | `-CompoundStmt 0x1c618f683e8 <col:29, line:1064:5>
|   |   |-CallExpr 0x1c618f68280 <line:1062:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f68268 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f68208 <col:9> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1c618f682b0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f68228 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1c618f682e0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1c618f682c8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1c618f68248 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x1c618f68370 <line:1063:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1c618f68358 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f682f8 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1c618f683a0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f68318 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1c618f683d0 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1c618f683b8 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1c618f68338 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f684d8 <line:1065:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f684c0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68440 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f68510 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68460 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f68540 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f68528 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f68480 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f68570 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f68558 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f684a0 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f76638 'e8' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f68600 <line:1066:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f685e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68588 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f68630 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f685a8 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f68660 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f68648 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f685c8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x1c618f689c8 <line:1067:5, line:1070:5>
|   | |-BinaryOperator 0x1c618f686d8 <line:1067:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1c618f68678 <col:10> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f686c0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f68698 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c618f68770 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1c618f68740 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c618f686f8 <col:17> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c618f68758 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c618f68718 <col:21> 'int' 4
|   | |-UnaryOperator 0x1c618f687b0 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x1c618f68790 <col:24> 'unsigned int' lvalue Var 0x1c618f76900 'i' 'unsigned int'
|   | `-CompoundStmt 0x1c618f689a8 <col:29, line:1070:5>
|   |   |-CallExpr 0x1c618f68840 <line:1068:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f68828 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f687c8 <col:9> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1c618f68870 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f687e8 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x1c618f688a0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1c618f68888 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1c618f68808 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x1c618f68930 <line:1069:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1c618f68918 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f688b8 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1c618f68960 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f688d8 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1c618f68990 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1c618f68978 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1c618f688f8 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f68a98 <line:1071:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f68a80 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68a00 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f68ad0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68a20 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f68b00 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f68ae8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f68a40 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f68b30 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f68b18 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f68a60 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f765c0 'e4' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f68bc0 <line:1072:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f68ba8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68b48 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f68bf0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68b68 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f68c20 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f68c08 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f68b88 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f68cb0 <line:1073:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f68c98 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68c38 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f68ce0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68c58 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f68d10 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f68cf8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f68c78 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f68da0 <line:1074:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f68d88 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68d28 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f68dd0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68d48 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f68e00 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f68de8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f68d68 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f68e90 <line:1075:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f68e78 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68e18 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f68ec0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68e38 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f68ef0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f68ed8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f68e58 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f68f80 <line:1076:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f68f68 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68f08 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f68fb0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68f28 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f68fe0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f68fc8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f68f48 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f69090 <line:1077:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f69078 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f68ff8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f690c8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69018 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f690f8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f690e0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f69038 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f69128 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f69110 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f69058 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f76548 'e2' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f691b8 <line:1078:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f691a0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69140 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f691e8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69160 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f69218 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f69200 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f69180 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f692a8 <line:1079:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f69290 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69230 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f692d8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69250 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f69308 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f692f0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f69270 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f69398 <line:1080:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f69380 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69320 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f693c8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69340 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f693f8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f693e0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f69360 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f69488 <line:1081:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f69470 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69410 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f694b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69430 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f694e8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f694d0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f69450 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f69578 <line:1082:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f69560 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69500 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f695a8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69520 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f695d8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f695c0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f69540 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f69688 <line:1083:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f69670 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f695f0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f696c0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69610 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f696f0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f696d8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f69630 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f69708 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f69650 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f76288 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f69798 <line:1084:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f69780 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69720 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f697c8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69740 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f697f8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f697e0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f69760 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f698a8 <line:1086:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c618f69890 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69810 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f698e0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69830 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f69910 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f698f8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f69850 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f764a0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f69940 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f69928 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f69870 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f76428 'ftmp' 'felem':'limb [4]'
|   `-CallExpr 0x1c618f699d0 <line:1087:5, col:26> 'void'
|     |-ImplicitCastExpr 0x1c618f699b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f69958 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1c618f69a00 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f69978 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1c618f76210 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1c618f69a30 <col:23> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1c618f69a18 <col:23> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618f69998 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1c618f76868 'tmp' 'longfelem':'limb [8]'
|-FunctionDecl 0x1c618f69db0 <line:1090:1, line:1097:1> line:1090:13 used smallfelem_inv_contract 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x1c618f69c70 <col:37, col:48> col:48 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f69ce8 <col:53, col:70> col:70 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618f78288 <line:1091:1, line:1097:1>
|   |-DeclStmt 0x1c618f69ef0 <line:1092:5, col:14>
|   | `-VarDecl 0x1c618f69e88 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x1c618f78048 <line:1094:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c618f78030 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69f08 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f78078 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69f28 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f69e88 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f78090 <col:28> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f69f60 <col:28> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f69ce8 'in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1c618f78120 <line:1095:5, col:23> 'void'
|   | |-ImplicitCastExpr 0x1c618f78108 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f780a8 <col:5> 'void (limb *, const limb *)' Function 0x1c618f76350 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f78150 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f780c8 <col:15> 'felem':'limb [4]' lvalue Var 0x1c618f69e88 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f78180 <col:20> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f78168 <col:20> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f780e8 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f69e88 'tmp' 'felem':'limb [4]'
|   `-CallExpr 0x1c618f78210 <line:1096:5, col:28> 'void'
|     |-ImplicitCastExpr 0x1c618f781f8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f78198 <col:5> 'void (u64 *, const limb *)' Function 0x1c618f66ee8 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x1c618f78240 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f781b8 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f69c70 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x1c618f78270 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1c618f78258 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618f781d8 <col:25> 'felem':'limb [4]' lvalue Var 0x1c618f69e88 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x1c618f78728 <line:1117:1, line:1193:1> line:1118:1 used point_double 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x1c618f782c8 <col:14, col:20> col:20 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f78340 <col:27, col:33> col:33 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f783b8 <col:40, col:46> col:46 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f78430 <line:1119:14, col:26> col:26 used x_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x1c618f784a8 <col:32, col:44> col:44 used y_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x1c618f78520 <col:50, col:62> col:62 used z_in 'const limb *':'const limb *'
| `-CompoundStmt 0x1c618f6ae18 <line:1120:1, line:1193:1>
|   |-DeclStmt 0x1c618f78918 <line:1121:5, col:24>
|   | |-VarDecl 0x1c618f78820 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   | `-VarDecl 0x1c618f78898 <col:5, col:20> col:20 used tmp2 'longfelem':'limb [8]'
|   |-DeclStmt 0x1c618f78c38 <line:1122:5, col:49>
|   | |-VarDecl 0x1c618f78940 <col:5, col:11> col:11 used delta 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f789b8 <col:5, col:18> col:18 used gamma 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f78a30 <col:5, col:25> col:25 used beta 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f78aa8 <col:5, col:31> col:31 used alpha 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f78b20 <col:5, col:38> col:38 used ftmp 'felem':'limb [4]'
|   | `-VarDecl 0x1c618f78b98 <col:5, col:44> col:44 used ftmp2 'felem':'limb [4]'
|   |-DeclStmt 0x1c618f78d58 <line:1123:5, col:30>
|   | |-VarDecl 0x1c618f78c60 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x1c618f78cd8 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1c618f78e00 <line:1125:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f78de8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f78d70 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f78e30 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f78d90 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f78b20 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f78e48 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f78dc8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f78430 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f78ef0 <line:1127:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f78ed8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f78e60 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f78f20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f78e80 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f78b98 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f78f38 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f78eb8 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f78430 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f78fe0 <line:1131:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f78fc8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f78f50 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79010 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f78f70 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f79028 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f78fa8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f78520 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f790d0 <line:1132:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f790b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79040 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79100 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79060 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f78940 'delta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f79130 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79118 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79098 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f791c0 <line:1136:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f791a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79148 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f791f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79168 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f79208 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f79188 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f784a8 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f792b0 <line:1137:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f79298 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79220 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f792e0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79240 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f789b8 'gamma' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f79310 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f792f8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79278 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f793b8 <line:1139:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c618f793a0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79328 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f793e8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79348 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f78c60 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f79418 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79400 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79380 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f789b8 'gamma' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f79520 <line:1142:5, col:38> 'void'
|   | |-ImplicitCastExpr 0x1c618f79508 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79430 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x1c618f748d8 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79558 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79450 <col:21> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f79588 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f79570 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f79470 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f78c60 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f795a0 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f79490 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f78430 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f79648 <line:1143:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f79630 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f795b8 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79678 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f795d8 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f78a30 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f796a8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79690 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79610 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f79738 <line:1147:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f79720 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f796c0 <col:5> 'void (limb *, const limb *)' Function 0x1c618e77700 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79768 <col:16> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f796e0 <col:16> 'felem':'limb [4]' lvalue Var 0x1c618f78b20 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f79798 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79780 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79700 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f78940 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f79828 <line:1149:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f79810 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f797b0 <col:5> 'void (limb *, const limb *)' Function 0x1c618e74090 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79858 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f797d0 <col:15> 'felem':'limb [4]' lvalue Var 0x1c618f78b98 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f79888 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79870 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f797f0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f78940 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f79980 <line:1151:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1c618f79968 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f798a0 <col:5> 'void (limb *, const u64)' Function 0x1c618e75078 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1c618f799b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f798c0 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f78b98 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f799c8 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f798e0 <col:25> 'int' 3
|   |-CallExpr 0x1c618f79a78 <line:1153:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c618f79a60 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f799e0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79ab0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79a00 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f79ae0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f79ac8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f79a20 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f78b20 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f79b10 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79af8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79a40 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f78b98 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f79bb8 <line:1154:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f79ba0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79b28 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79be8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79b48 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f78aa8 'alpha' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f79c18 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79c00 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79b80 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f79cc0 <line:1156:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c618f79ca8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79c30 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79cf0 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79c50 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f78cd8 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f79d20 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79d08 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79c88 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f78aa8 'alpha' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f79db0 <line:1159:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1c618f79d98 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79d38 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e81278 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f79de0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79d58 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f79e10 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79df8 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79d78 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f78cd8 'small2' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1c618f79ea0 <line:1160:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f79e88 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79e28 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79ed0 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f79e48 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1c618f782c8 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1c618f79f00 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79ee8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79e68 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f79f90 <line:1161:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f79f78 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79f18 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f79fc0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f79f38 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f78b20 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f79ff0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f79fd8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f79f58 <col:24> 'felem':'limb [4]' lvalue Var 0x1c618f78a30 'beta' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6a020 <line:1162:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a008 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7a008 <col:5> 'void (limb *, const u64)' Function 0x1c618e75078 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1c618f6a050 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f69fc0 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f78b20 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6a068 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f69fe0 <col:24> 'int' 8
|   |-CallExpr 0x1c618f6a0f8 <line:1164:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a0e0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a080 <col:5> 'void (limb *, const limb *)' Function 0x1c618e77700 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6a128 <col:16> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f6a0a0 <col:16> 'limb *':'limb *' lvalue ParmVar 0x1c618f782c8 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1c618f6a158 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6a140 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6a0c0 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f78b20 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6a1e8 <line:1168:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a1d0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a170 <col:5> 'void (limb *, const limb *)' Function 0x1c618e74090 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6a218 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a190 <col:15> 'felem':'limb [4]' lvalue Var 0x1c618f78940 'delta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6a248 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6a230 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6a1b0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f789b8 'gamma' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6a2d8 <line:1170:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a2c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a260 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6a308 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a280 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f78b20 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6a320 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6a2a0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f784a8 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f6a3b0 <line:1171:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a398 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a338 <col:5> 'void (limb *, const limb *)' Function 0x1c618e74090 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6a3e0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a358 <col:15> 'felem':'limb [4]' lvalue Var 0x1c618f78b20 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6a3f8 <col:21> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6a378 <col:21> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f78520 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f6a488 <line:1173:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a470 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a410 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6a4b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a430 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f6a4e8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6a4d0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6a450 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f78b20 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6a578 <line:1174:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a560 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a500 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6a5a8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f6a520 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1c618f783b8 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1c618f6a5d8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6a5c0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6a540 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f6a668 <line:1175:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a650 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a5f0 <col:5> 'void (limb *, const limb *)' Function 0x1c618e77700 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6a698 <col:16> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f6a610 <col:16> 'limb *':'limb *' lvalue ParmVar 0x1c618f783b8 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1c618f6a6c8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6a6b0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6a630 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f78940 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6a760 <line:1179:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a748 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a6e0 <col:5> 'void (limb *, const u64)' Function 0x1c618e75078 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1c618f6a790 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a700 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f78a30 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6a7a8 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f6a720 <col:24> 'int' 4
|   |-CallExpr 0x1c618f6a838 <line:1181:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a820 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a7c0 <col:5> 'void (limb *, const limb *)' Function 0x1c618e78f50 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6a868 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a7e0 <col:24> 'felem':'limb [4]' lvalue Var 0x1c618f78a30 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6a898 <col:30> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6a880 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f6a800 <col:30> 'limb *':'limb *' lvalue ParmVar 0x1c618f782c8 'x_out' 'limb *':'limb *'
|   |-CallExpr 0x1c618f6a948 <line:1183:5, col:38> 'void'
|   | |-ImplicitCastExpr 0x1c618f6a930 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a8b0 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x1c618f748d8 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6a980 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a8d0 <col:21> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f6a9b0 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f6a998 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f6a8f0 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f78cd8 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f6a9e0 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6a9c8 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6a910 <col:34> 'felem':'limb [4]' lvalue Var 0x1c618f78a30 'beta' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6aa88 <line:1185:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1c618f6aa70 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6a9f8 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e81278 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f6aab8 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6aa18 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1c618f78898 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f6aae8 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6aad0 <col:29> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6aa50 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f78c60 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1c618f6abb0 <line:1187:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f6ab98 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6ab00 <col:5> 'void (limb *, const u64)' Function 0x1c618e756e8 'longfelem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1c618f6abe0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6ab20 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c618f78898 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f6abf8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f6ab40 <col:28> 'int' 8
|   |-CallExpr 0x1c618f6acb0 <line:1189:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f6ac98 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6ac10 <col:5> 'void (limb *, const limb *)' Function 0x1c618e79cf8 'longfelem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6ace0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6ac30 <col:20> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f6ad10 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6acf8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6ac50 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f78898 'tmp2' 'longfelem':'limb [8]'
|   `-CallExpr 0x1c618f6ada0 <line:1191:5, col:36> 'void'
|     |-ImplicitCastExpr 0x1c618f6ad88 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f6ad28 <col:5> 'void (limb *, const limb *)' Function 0x1c618f65fa0 'felem_reduce_zero105' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1c618f6add0 <col:26> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f6ad48 <col:26> 'limb *':'limb *' lvalue ParmVar 0x1c618f78340 'y_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1c618f6ae00 <col:33> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1c618f6ade8 <col:33> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618f6ad68 <col:33> 'longfelem':'limb [8]' lvalue Var 0x1c618f78820 'tmp' 'longfelem':'limb [8]'
|-FunctionDecl 0x1c618f6b3b8 <line:1199:1, line:1215:1> line:1200:1 used point_double_small 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x1c618f6af58 <col:20, col:31> col:31 used x_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f6afd0 <col:38, col:49> col:49 used y_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f6b048 <col:56, col:67> col:67 used z_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f6b0c0 <line:1201:20, col:37> col:37 used x_in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1c618f6b138 <col:43, col:60> col:60 used y_in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1c618f6b1b0 <line:1202:20, col:37> col:37 used z_in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618f7a0d0 <line:1203:1, line:1215:1>
|   |-DeclStmt 0x1c618f6b628 <line:1204:5, col:48>
|   | |-VarDecl 0x1c618f6b4b0 <col:5, col:11> col:11 used felem_x_out 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f6b528 <col:5, col:24> col:24 used felem_y_out 'felem':'limb [4]'
|   | `-VarDecl 0x1c618f6b5a0 <col:5, col:37> col:37 used felem_z_out 'felem':'limb [4]'
|   |-DeclStmt 0x1c618f6b7c8 <line:1205:5, col:45>
|   | |-VarDecl 0x1c618f6b650 <col:5, col:11> col:11 used felem_x_in 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f6b6c8 <col:5, col:23> col:23 used felem_y_in 'felem':'limb [4]'
|   | `-VarDecl 0x1c618f6b740 <col:5, col:35> col:35 used felem_z_in 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6b870 <line:1207:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1c618f6b858 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6b7e0 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f6b8a0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6b800 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f6b650 'felem_x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6b8b8 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6b838 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f6b0c0 'x_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1c618f6b960 <line:1208:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1c618f6b948 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6b8d0 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f6b990 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6b8f0 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f6b6c8 'felem_y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6b9a8 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6b928 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f6b138 'y_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1c618f6ba50 <line:1209:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1c618f6ba38 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6b9c0 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f6ba80 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6b9e0 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f6b740 'felem_z_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6ba98 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f6ba18 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f6b1b0 'z_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1c618f6bc50 <line:1210:5, line:1211:52> 'void'
|   | |-ImplicitCastExpr 0x1c618f6bc38 <line:1210:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6bab0 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1c618f78728 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6bca0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6bad0 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f6b4b0 'felem_x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f6bcb8 <col:31> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6bb08 <col:31> 'felem':'limb [4]' lvalue Var 0x1c618f6b528 'felem_y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f6bcd0 <col:44> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6bb40 <col:44> 'felem':'limb [4]' lvalue Var 0x1c618f6b5a0 'felem_z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f6bd00 <line:1211:18> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f6bce8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f6bb78 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f6b650 'felem_x_in' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f6bd30 <col:30> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f6bd18 <col:30> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f6bb98 <col:30> 'felem':'limb [4]' lvalue Var 0x1c618f6b6c8 'felem_y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f6bd60 <col:42> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6bd48 <col:42> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6bbb8 <col:42> 'felem':'limb [4]' lvalue Var 0x1c618f6b740 'felem_z_in' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6bdf0 <line:1212:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1c618f6bdd8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6bd78 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6be20 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f6bd98 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f6af58 'x_out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1c618f6be50 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6be38 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6bdb8 <col:25> 'felem':'limb [4]' lvalue Var 0x1c618f6b4b0 'felem_x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f6bee0 <line:1213:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1c618f6bec8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f6be68 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f6bf10 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f6be88 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f6afd0 'y_out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1c618f6bf40 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f6bf28 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f6bea8 <col:25> 'felem':'limb [4]' lvalue Var 0x1c618f6b528 'felem_y_out' 'felem':'limb [4]'
|   `-CallExpr 0x1c618f7a058 <line:1214:5, col:36> 'void'
|     |-ImplicitCastExpr 0x1c618f7a040 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f6bf58 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x1c618f7a088 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f6bf78 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f6b048 'z_out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x1c618f7a0b8 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1c618f7a0a0 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618f6bf98 <col:25> 'felem':'limb [4]' lvalue Var 0x1c618f6b5a0 'felem_z_out' 'felem':'limb [4]'
|-FunctionDecl 0x1c618f7a398 <line:1218:1, line:1225:1> line:1218:13 used copy_conditional 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x1c618f7a138 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f7a1b0 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x1c618f7a228 <col:57, col:62> col:62 used mask 'limb':'int'
| `-CompoundStmt 0x1c618f7aa90 <line:1219:1, line:1225:1>
|   |-DeclStmt 0x1c618f7a4e8 <line:1220:5, col:15>
|   | `-VarDecl 0x1c618f7a480 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x1c618f7aa58 <line:1221:5, line:1224:5>
|     |-BinaryOperator 0x1c618f7a578 <line:1221:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1c618f7a500 <col:10> 'unsigned int' lvalue Var 0x1c618f7a480 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1c618f7a560 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1c618f7a538 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1c618f7a610 <col:17, line:113:17> 'int' '<'
|     | |-ImplicitCastExpr 0x1c618f7a5e0 <line:1221:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618f7a598 <col:17> 'unsigned int' lvalue Var 0x1c618f7a480 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1c618f7a5f8 <line:113:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1c618f7a5b8 <col:17> 'int' 4
|     |-UnaryOperator 0x1c618f7a650 <line:1221:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x1c618f7a630 <col:31> 'unsigned int' lvalue Var 0x1c618f7a480 'i' 'unsigned int'
|     `-CompoundStmt 0x1c618f7aa38 <col:34, line:1224:5>
|       |-DeclStmt 0x1c618f7a8c8 <line:1222:9, col:49>
|       | `-VarDecl 0x1c618f7a678 <col:9, col:48> col:20 used tmp 'const limb':'const int' cinit
|       |   `-BinaryOperator 0x1c618f7a8a8 <col:26, col:48> 'int' '&'
|       |     |-ImplicitCastExpr 0x1c618f7a890 <col:26> 'limb':'int' <LValueToRValue>
|       |     | `-DeclRefExpr 0x1c618f7a6e0 <col:26> 'limb':'int' lvalue ParmVar 0x1c618f7a228 'mask' 'limb':'int'
|       |     `-ParenExpr 0x1c618f7a870 <col:33, col:48> 'int'
|       |       `-BinaryOperator 0x1c618f7a850 <col:34, col:47> 'int' '^'
|       |         |-ImplicitCastExpr 0x1c618f7a820 <col:34, col:38> 'limb':'int' <LValueToRValue>
|       |         | `-ArraySubscriptExpr 0x1c618f7a770 <col:34, col:38> 'const limb':'const int' lvalue
|       |         |   |-ImplicitCastExpr 0x1c618f7a740 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|       |         |   | `-DeclRefExpr 0x1c618f7a700 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7a1b0 'in' 'const limb *':'const limb *'
|       |         |   `-ImplicitCastExpr 0x1c618f7a758 <col:37> 'unsigned int' <LValueToRValue>
|       |         |     `-DeclRefExpr 0x1c618f7a720 <col:37> 'unsigned int' lvalue Var 0x1c618f7a480 'i' 'unsigned int'
|       |         `-ImplicitCastExpr 0x1c618f7a838 <col:42, col:47> 'limb':'int' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x1c618f7a800 <col:42, col:47> 'limb':'int' lvalue
|       |             |-ImplicitCastExpr 0x1c618f7a7d0 <col:42> 'limb *':'limb *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x1c618f7a790 <col:42> 'limb *':'limb *' lvalue ParmVar 0x1c618f7a138 'out' 'limb *':'limb *'
|       |             `-ImplicitCastExpr 0x1c618f7a7e8 <col:46> 'unsigned int' <LValueToRValue>
|       |               `-DeclRefExpr 0x1c618f7a7b0 <col:46> 'unsigned int' lvalue Var 0x1c618f7a480 'i' 'unsigned int'
|       `-CompoundAssignOperator 0x1c618f7a9c0 <line:1223:9, col:19> 'limb':'int' '^=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-ArraySubscriptExpr 0x1c618f7a950 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x1c618f7a920 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x1c618f7a8e0 <col:9> 'limb *':'limb *' lvalue ParmVar 0x1c618f7a138 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x1c618f7a938 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x1c618f7a900 <col:13> 'unsigned int' lvalue Var 0x1c618f7a480 'i' 'unsigned int'
|         `-ImplicitCastExpr 0x1c618f7a9a8 <col:19> 'limb':'int' <LValueToRValue>
|           `-DeclRefExpr 0x1c618f7a970 <col:19> 'const limb':'const int' lvalue Var 0x1c618f7a678 'tmp' 'const limb':'const int'
|-FunctionDecl 0x1c618f7ad18 <line:1228:1, line:1235:1> line:1228:13 used copy_small_conditional 'void (limb *, const u64 *, limb)' static
| |-ParmVarDecl 0x1c618f7aac0 <col:36, col:42> col:42 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f7ab38 <col:47, col:64> col:64 used in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1c618f7abb0 <col:68, col:73> col:73 used mask 'limb':'int'
| `-CompoundStmt 0x1c618f7b518 <line:1229:1, line:1235:1>
|   |-DeclStmt 0x1c618f7ae68 <line:1230:5, col:15>
|   | `-VarDecl 0x1c618f7ae00 <col:5, col:14> col:14 used i 'unsigned int'
|   |-DeclStmt 0x1c618f7af48 <line:1231:5, col:28>
|   | `-VarDecl 0x1c618f7ae90 <col:5, col:24> col:15 used mask64 'const u64':'const unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x1c618f7af30 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1c618f7af18 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1c618f7aef8 <col:24> 'limb':'int' lvalue ParmVar 0x1c618f7abb0 'mask' 'limb':'int'
|   `-ForStmt 0x1c618f7b4e0 <line:1232:5, line:1234:5>
|     |-BinaryOperator 0x1c618f7afd8 <line:1232:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1c618f7af60 <col:10> 'unsigned int' lvalue Var 0x1c618f7ae00 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1c618f7afc0 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1c618f7af98 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1c618f7b070 <col:17, line:113:17> 'int' '<'
|     | |-ImplicitCastExpr 0x1c618f7b040 <line:1232:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c618f7aff8 <col:17> 'unsigned int' lvalue Var 0x1c618f7ae00 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1c618f7b058 <line:113:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1c618f7b018 <col:17> 'int' 4
|     |-UnaryOperator 0x1c618f7b0b0 <line:1232:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x1c618f7b090 <col:31> 'unsigned int' lvalue Var 0x1c618f7ae00 'i' 'unsigned int'
|     `-CompoundStmt 0x1c618f7b4c8 <col:34, line:1234:5>
|       `-BinaryOperator 0x1c618f7b460 <line:1233:9, col:61> 'limb':'int' '='
|         |-ArraySubscriptExpr 0x1c618f7b138 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x1c618f7b108 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x1c618f7b0c8 <col:9> 'limb *':'limb *' lvalue ParmVar 0x1c618f7aac0 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x1c618f7b120 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x1c618f7b0e8 <col:13> 'unsigned int' lvalue Var 0x1c618f7ae00 'i' 'unsigned int'
|         `-BinaryOperator 0x1c618f7b440 <col:18, col:61> 'int' '|'
|           |-ParenExpr 0x1c618f7b2e8 <col:18, col:42> 'limb':'int'
|           | `-CStyleCastExpr 0x1c618f7b2c0 <col:19, col:41> 'limb':'int' <IntegralCast>
|           |   `-ParenExpr 0x1c618f7b2a0 <col:26, col:41> 'unsigned long long'
|           |     `-BinaryOperator 0x1c618f7b250 <col:27, col:35> 'unsigned long long' '&'
|           |       |-ImplicitCastExpr 0x1c618f7b220 <col:27, col:31> 'u64':'unsigned long long' <LValueToRValue>
|           |       | `-ArraySubscriptExpr 0x1c618f7b1c8 <col:27, col:31> 'const u64':'const unsigned long long' lvalue
|           |       |   |-ImplicitCastExpr 0x1c618f7b198 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|           |       |   | `-DeclRefExpr 0x1c618f7b158 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f7ab38 'in' 'const u64 *':'const u64 *'
|           |       |   `-ImplicitCastExpr 0x1c618f7b1b0 <col:30> 'unsigned int' <LValueToRValue>
|           |       |     `-DeclRefExpr 0x1c618f7b178 <col:30> 'unsigned int' lvalue Var 0x1c618f7ae00 'i' 'unsigned int'
|           |       `-ImplicitCastExpr 0x1c618f7b238 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|           |         `-DeclRefExpr 0x1c618f7b1e8 <col:35> 'const u64':'const unsigned long long' lvalue Var 0x1c618f7ae90 'mask64' 'const u64':'const unsigned long long'
|           `-ParenExpr 0x1c618f7b420 <col:46, col:61> 'int'
|             `-BinaryOperator 0x1c618f7b400 <col:47, col:57> 'int' '&'
|               |-ImplicitCastExpr 0x1c618f7b3e8 <col:47, col:52> 'limb':'int' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x1c618f7b378 <col:47, col:52> 'limb':'int' lvalue
|               |   |-ImplicitCastExpr 0x1c618f7b348 <col:47> 'limb *':'limb *' <LValueToRValue>
|               |   | `-DeclRefExpr 0x1c618f7b308 <col:47> 'limb *':'limb *' lvalue ParmVar 0x1c618f7aac0 'out' 'limb *':'limb *'
|               |   `-ImplicitCastExpr 0x1c618f7b360 <col:51> 'unsigned int' <LValueToRValue>
|               |     `-DeclRefExpr 0x1c618f7b328 <col:51> 'unsigned int' lvalue Var 0x1c618f7ae00 'i' 'unsigned int'
|               `-UnaryOperator 0x1c618f7b3d0 <col:56, col:57> 'limb':'int' prefix '~' cannot overflow
|                 `-ImplicitCastExpr 0x1c618f7b3b8 <col:57> 'limb':'int' <LValueToRValue>
|                   `-DeclRefExpr 0x1c618f7b398 <col:57> 'limb':'int' lvalue ParmVar 0x1c618f7abb0 'mask' 'limb':'int'
|-FunctionDecl 0x1c618f7bc58 <line:1249:1, line:1408:1> line:1249:13 used point_add 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x1c618f7b550 <col:23, col:29> col:29 used x3 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f7b5c8 <col:33, col:39> col:39 used y3 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f7b640 <col:43, col:49> col:49 used z3 'limb *':'limb *'
| |-ParmVarDecl 0x1c618f7b6b8 <line:1250:23, col:35> col:35 used x1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1c618f7b730 <col:39, col:51> col:51 used y1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1c618f7b7a8 <col:55, col:67> col:67 used z1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1c618f7b828 <line:1251:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x1c618f7b8a0 <col:40, col:57> col:57 used x2 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1c618f7b918 <line:1252:23, col:40> col:40 used y2 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x1c618f7b990 <col:44, col:61> col:61 used z2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x1c618f81460 <line:1253:1, line:1408:1>
|   |-DeclStmt 0x1c618f7c1f8 <line:1254:5, col:71>
|   | |-VarDecl 0x1c618f7bd70 <col:5, col:11> col:11 used ftmp 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f7bde8 <col:5, col:17> col:17 used ftmp2 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f7be60 <col:5, col:24> col:24 used ftmp3 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f7bed8 <col:5, col:31> col:31 used ftmp4 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f7bf50 <col:5, col:38> col:38 used ftmp5 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f7bfc8 <col:5, col:45> col:45 used ftmp6 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f7c050 <col:5, col:52> col:52 used x_out 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f7c0c8 <col:5, col:59> col:59 used y_out 'felem':'limb [4]'
|   | `-VarDecl 0x1c618f7c140 <col:5, col:66> col:66 used z_out 'felem':'limb [4]'
|   |-DeclStmt 0x1c618f7c318 <line:1255:5, col:24>
|   | |-VarDecl 0x1c618f7c220 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   | `-VarDecl 0x1c618f7c298 <col:5, col:20> col:20 used tmp2 'longfelem':'limb [8]'
|   |-DeclStmt 0x1c618f7c5b8 <line:1256:5, col:54>
|   | |-VarDecl 0x1c618f7c340 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x1c618f7c3b8 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x1c618f7c430 <col:5, col:32> col:32 used small3 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x1c618f7c4a8 <col:5, col:40> col:40 used small4 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x1c618f7c520 <col:5, col:48> col:48 used small5 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x1c618f7c7d8 <line:1257:5, col:50>
|   | |-VarDecl 0x1c618f7c5e0 <col:5, col:10> col:10 used x_equal 'limb':'int'
|   | |-VarDecl 0x1c618f7c658 <col:5, col:19> col:19 used y_equal 'limb':'int'
|   | |-VarDecl 0x1c618f7c6d0 <col:5, col:28> col:28 used z1_is_zero 'limb':'int'
|   | `-VarDecl 0x1c618f7c748 <col:5, col:40> col:40 used z2_is_zero 'limb':'int'
|   |-CallExpr 0x1c618f7c880 <line:1259:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f7c868 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7c7f0 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7c8b0 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7c810 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c430 'small3' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f7c8c8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f7c848 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b7a8 'z1' 'const limb *':'const limb *'
|   |-BinaryOperator 0x1c618f7c9c8 <line:1261:5, col:43> 'limb':'int' '='
|   | |-DeclRefExpr 0x1c618f7c8e0 <col:5> 'limb':'int' lvalue Var 0x1c618f7c6d0 'z1_is_zero' 'limb':'int'
|   | `-CallExpr 0x1c618f7c970 <col:18, col:43> 'limb':'int'
|   |   |-ImplicitCastExpr 0x1c618f7c958 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1c618f7c918 <col:18> 'limb (const u64 *)' Function 0x1c618f701f8 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x1c618f7c9b0 <col:37> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x1c618f7c998 <col:37> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x1c618f7c938 <col:37> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c430 'small3' 'smallfelem':'u64 [4]'
|   |-BinaryOperator 0x1c618f7cab8 <line:1262:5, col:39> 'limb':'int' '='
|   | |-DeclRefExpr 0x1c618f7c9e8 <col:5> 'limb':'int' lvalue Var 0x1c618f7c748 'z2_is_zero' 'limb':'int'
|   | `-CallExpr 0x1c618f7ca78 <col:18, col:39> 'limb':'int'
|   |   |-ImplicitCastExpr 0x1c618f7ca60 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1c618f7ca20 <col:18> 'limb (const u64 *)' Function 0x1c618f701f8 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x1c618f7caa0 <col:37> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f7ca40 <col:37> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f7b990 'z2' 'const u64 *':'const u64 *'
|   |-CallExpr 0x1c618f7cb68 <line:1265:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1c618f7cb50 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7cad8 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e81278 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f7cb98 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7caf8 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f7cbc8 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7cbb0 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7cb30 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c430 'small3' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1c618f7cc70 <line:1266:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f7cc58 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7cbe0 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7cca0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7cc00 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7ccd0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7ccb8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7cc38 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f7cd78 <line:1268:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c618f7cd60 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7cce8 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7cda8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7cd08 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c340 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f7cdd8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7cdc0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7cd40 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   |-IfStmt 0x1c618f7e2a8 <line:1270:5, line:1323:5> has_else
|   | |-UnaryOperator 0x1c618f7ce28 <line:1270:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1c618f7ce10 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1c618f7cdf0 <col:10> 'const int' lvalue ParmVar 0x1c618f7b828 'mixed' 'const int'
|   | |-CompoundStmt 0x1c618f7de48 <col:17, line:1306:5>
|   | | |-CallExpr 0x1c618f7ceb8 <line:1272:9, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7cea0 <col:9> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7ce40 <col:9> 'void (limb *, const u64 *)' Function 0x1c618e81278 'smallfelem_square' 'void (limb *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x1c618f7cee8 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7ce60 <col:27> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | | | `-ImplicitCastExpr 0x1c618f7cf00 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1c618f7ce80 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f7b990 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x1c618f7cfa8 <line:1273:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7cf90 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7cf18 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7cfd8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7cf38 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7bde8 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7d008 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1c618f7cff0 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1c618f7cf70 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x1c618f7d0b0 <line:1275:9, col:35> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7d098 <col:9> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d020 <col:9> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7d0e0 <col:22> 'u64 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d040 <col:22> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c3b8 'small2' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7d110 <col:30> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1c618f7d0f8 <col:30> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1c618f7d078 <col:30> 'felem':'limb [4]' lvalue Var 0x1c618f7bde8 'ftmp2' 'felem':'limb [4]'
|   | | |-CallExpr 0x1c618f7d1b8 <line:1277:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7d1a0 <col:9> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d128 <col:9> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7d1e8 <col:22> 'u64 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d148 <col:22> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c520 'small5' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7d200 <col:30> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1c618f7d180 <col:30> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b6b8 'x1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x1c618f7d2b0 <line:1280:9, col:43> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7d298 <col:9> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d218 <col:9> 'void (limb *, const u64 *, const u64 *)' Function 0x1c618e84b18 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x1c618f7d2e8 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d238 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x1c618f7d318 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1c618f7d300 <col:29> 'u64 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1c618f7d258 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c520 'small5' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7d348 <col:37> 'const u64 *':'const u64 *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1c618f7d330 <col:37> 'u64 *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1c618f7d278 <col:37> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c3b8 'small2' 'smallfelem':'u64 [4]'
|   | | |-CallExpr 0x1c618f7d3f0 <line:1281:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7d3d8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d360 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7d420 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d380 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7be60 'ftmp3' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7d450 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1c618f7d438 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1c618f7d3b8 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x1c618f7d4f8 <line:1285:9, col:31> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7d4e0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d468 <col:9> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7d528 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d488 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7d540 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1c618f7d4c0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b7a8 'z1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x1c618f7d5d0 <line:1286:9, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7d5b8 <col:9> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d558 <col:9> 'void (limb *, const u64 *)' Function 0x1c618e74878 'felem_small_sum' 'void (limb *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x1c618f7d600 <col:25> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d578 <col:25> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7d618 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1c618f7d598 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f7b990 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x1c618f7d6a8 <line:1290:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7d690 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d630 <col:9> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7d6d8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d650 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | | | `-ImplicitCastExpr 0x1c618f7d708 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1c618f7d6f0 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1c618f7d670 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   | | |-CallExpr 0x1c618f7d798 <line:1291:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7d780 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d720 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7d7c8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d740 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7d7f8 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1c618f7d7e0 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1c618f7d760 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x1c618f7d888 <line:1293:9, col:30> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7d870 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d810 <col:9> 'void (limb *, const limb *)' Function 0x1c618e74090 'felem_sum' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7d8b8 <col:19> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d830 <col:19> 'felem':'limb [4]' lvalue Var 0x1c618f7bde8 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7d8e8 <col:26> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1c618f7d8d0 <col:26> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1c618f7d850 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   | | |-CallExpr 0x1c618f7d978 <line:1295:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7d960 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d900 <col:9> 'void (limb *, const limb *)' Function 0x1c618e77700 'felem_diff' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7d9a8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d920 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7d9d8 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1c618f7d9c0 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1c618f7d940 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f7bde8 'ftmp2' 'felem':'limb [4]'
|   | | |-CallExpr 0x1c618f7da88 <line:1299:9, col:39> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7da70 <col:9> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7d9f0 <col:9> 'void (limb *, const u64 *, const u64 *)' Function 0x1c618e84b18 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x1c618f7dac0 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7da10 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x1c618f7daf0 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1c618f7dad8 <col:29> 'u64 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1c618f7da30 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c3b8 'small2' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7db08 <col:37> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1c618f7da50 <col:37> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f7b990 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x1c618f7db98 <line:1300:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7db80 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7db20 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7dbc8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7db40 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7bde8 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1c618f7dbf8 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1c618f7dbe0 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1c618f7db60 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x1c618f7dca8 <line:1303:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x1c618f7dc90 <col:9> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7dc10 <col:9> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1c618f7dce0 <col:19> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c618f7dc30 <col:19> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x1c618f7dcf8 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1c618f7dc50 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b730 'y1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x1c618f7dd28 <col:28> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1c618f7dd10 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1c618f7dc70 <col:28> 'felem':'limb [4]' lvalue Var 0x1c618f7bde8 'ftmp2' 'felem':'limb [4]'
|   | | `-CallExpr 0x1c618f7ddd0 <line:1304:9, col:32> 'void'
|   | |   |-ImplicitCastExpr 0x1c618f7ddb8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1c618f7dd40 <col:9> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |   |-ImplicitCastExpr 0x1c618f7de00 <col:22> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1c618f7dd60 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7bfc8 'ftmp6' 'felem':'limb [4]'
|   | |   `-ImplicitCastExpr 0x1c618f7de30 <col:29> 'const limb *':'const limb *' <NoOp>
|   | |     `-ImplicitCastExpr 0x1c618f7de18 <col:29> 'limb *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x1c618f7dd98 <col:29> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | `-CompoundStmt 0x1c618f7e278 <line:1306:12, line:1323:5>
|   |   |-CallExpr 0x1c618f7df50 <line:1312:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f7df38 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f7ded8 <col:9> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1c618f7df80 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f7def8 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7be60 'ftmp3' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x1c618f7df98 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1c618f7df18 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b6b8 'x1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x1c618f7e060 <line:1316:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f7e010 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f7dfb0 <col:9> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1c618f7e090 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f7dfd0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x1c618f7e0a8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1c618f7dff0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b7a8 'z1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x1c618f7e140 <line:1317:9, col:30> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f7e128 <col:9> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f7e0c0 <col:9> 'void (limb *, const u64)' Function 0x1c618e75078 'felem_scalar' 'void (limb *, const u64)'
|   |   | |-ImplicitCastExpr 0x1c618f7e170 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f7e0e0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x1c618f7e188 <col:29> 'u64':'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1c618f7e100 <col:29> 'int' 2
|   |   `-CallExpr 0x1c618f7e218 <line:1321:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1c618f7e200 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f7e1a0 <col:9> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1c618f7e248 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1c618f7e1c0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7bfc8 'ftmp6' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1c618f7e260 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1c618f7e1e0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b730 'y1' 'const limb *':'const limb *'
|   |-CallExpr 0x1c618f7e368 <line:1326:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1c618f7e350 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e2d0 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x1c618e84b18 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f7e3a0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e2f0 <col:20> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f7e3b8 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f7e310 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f7b8a0 'x2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1c618f7e3e8 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7e3d0 <col:29> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7e330 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c340 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1c618f7e490 <line:1327:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f7e478 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e400 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7e4c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e420 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bed8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7e4f0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7e4d8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7e458 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f7e580 <line:1330:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1c618f7e568 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e508 <col:5> 'void (limb *, const limb *)' Function 0x1c618e78f50 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7e5b0 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e528 <col:24> 'felem':'limb [4]' lvalue Var 0x1c618f7bed8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7e5e0 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7e5c8 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7e548 <col:31> 'felem':'limb [4]' lvalue Var 0x1c618f7be60 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f7e688 <line:1332:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c618f7e670 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e5f8 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7e6b8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e618 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c4a8 'small4' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f7e6e8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7e6d0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7e650 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f7bed8 'ftmp4' 'felem':'limb [4]'
|   |-BinaryOperator 0x1c618f7e7e8 <line:1334:5, col:40> 'limb':'int' '='
|   | |-DeclRefExpr 0x1c618f7e700 <col:5> 'limb':'int' lvalue Var 0x1c618f7c5e0 'x_equal' 'limb':'int'
|   | `-CallExpr 0x1c618f7e790 <col:15, col:40> 'limb':'int'
|   |   |-ImplicitCastExpr 0x1c618f7e778 <col:15> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1c618f7e738 <col:15> 'limb (const u64 *)' Function 0x1c618f701f8 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x1c618f7e7d0 <col:34> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x1c618f7e7b8 <col:34> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x1c618f7e758 <col:34> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c4a8 'small4' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1c618f7e8a0 <line:1337:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1c618f7e888 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e808 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x1c618f748d8 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7e8d8 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e828 <col:21> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f7e908 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f7e8f0 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f7e848 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c4a8 'small4' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f7e938 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7e920 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7e868 <col:34> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f7e9e0 <line:1338:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f7e9c8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e950 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7ea10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7e970 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7c140 'z_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7ea40 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7ea28 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7e9a8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f7eaf0 <line:1342:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1c618f7ead8 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7ea58 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x1c618e84b18 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f7eb28 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7ea78 <col:20> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f7eb58 <col:25> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f7eb40 <col:25> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f7ea98 <col:25> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c340 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f7eb88 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7eb70 <col:33> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7eab8 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c430 'small3' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1c618f7ec18 <line:1343:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f7ec00 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7eba0 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7ec48 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7ebc0 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7ec78 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7ec60 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7ebe0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f7ed28 <line:1346:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1c618f7ed10 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7ec90 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x1c618f748d8 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7ed60 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7ecb0 <col:21> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f7ed78 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f7ecd0 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f7b918 'y2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1c618f7eda8 <col:30> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7ed90 <col:30> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7ecf0 <col:30> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f7ee38 <line:1347:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f7ee20 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7edc0 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7ee68 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7ede0 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7ee98 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7ee80 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7ee00 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f7ef28 <line:1350:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1c618f7ef10 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7eeb0 <col:5> 'void (limb *, const limb *)' Function 0x1c618e78f50 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7ef58 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7eed0 <col:24> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7ef88 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7ef70 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7eef0 <col:31> 'felem':'limb [4]' lvalue Var 0x1c618f7bfc8 'ftmp6' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f7f020 <line:1352:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1c618f7f008 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7efa0 <col:5> 'void (limb *, const u64)' Function 0x1c618e75078 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1c618f7f050 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7efc0 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7f068 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f7efe0 <col:25> 'int' 2
|   |-CallExpr 0x1c618f7f0f8 <line:1354:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c618f7f0e0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f080 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7f128 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f0a0 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c340 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f7f158 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7f140 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7f0c0 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f7bf50 'ftmp5' 'felem':'limb [4]'
|   |-BinaryOperator 0x1c618f7f258 <line:1355:5, col:40> 'limb':'int' '='
|   | |-DeclRefExpr 0x1c618f7f170 <col:5> 'limb':'int' lvalue Var 0x1c618f7c658 'y_equal' 'limb':'int'
|   | `-CallExpr 0x1c618f7f200 <col:15, col:40> 'limb':'int'
|   |   |-ImplicitCastExpr 0x1c618f7f1e8 <col:15> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1c618f7f1a8 <col:15> 'limb (const u64 *)' Function 0x1c618f701f8 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x1c618f7f240 <col:34> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x1c618f7f228 <col:34> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x1c618f7f1c8 <col:34> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c340 'small1' 'smallfelem':'u64 [4]'
|   |-IfStmt 0x1c618f7f5f0 <line:1357:5, line:1360:5>
|   | |-BinaryOperator 0x1c618f7f3c8 <line:1357:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x1c618f7f358 <col:9, col:32> 'int' '&&'
|   | | | |-BinaryOperator 0x1c618f7f2e8 <col:9, col:20> 'int' '&&'
|   | | | | |-ImplicitCastExpr 0x1c618f7f2b8 <col:9> 'limb':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x1c618f7f278 <col:9> 'limb':'int' lvalue Var 0x1c618f7c5e0 'x_equal' 'limb':'int'
|   | | | | `-ImplicitCastExpr 0x1c618f7f2d0 <col:20> 'limb':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1c618f7f298 <col:20> 'limb':'int' lvalue Var 0x1c618f7c658 'y_equal' 'limb':'int'
|   | | | `-UnaryOperator 0x1c618f7f340 <col:31, col:32> 'int' prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x1c618f7f328 <col:32> 'limb':'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1c618f7f308 <col:32> 'limb':'int' lvalue Var 0x1c618f7c6d0 'z1_is_zero' 'limb':'int'
|   | | `-UnaryOperator 0x1c618f7f3b0 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x1c618f7f398 <col:47> 'limb':'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1c618f7f378 <col:47> 'limb':'int' lvalue Var 0x1c618f7c748 'z2_is_zero' 'limb':'int'
|   | `-CompoundStmt 0x1c618f7f5d0 <col:59, line:1360:5>
|   |   |-CallExpr 0x1c618f7f4e0 <line:1358:9, col:44> 'void'
|   |   | |-ImplicitCastExpr 0x1c618f7f4c8 <col:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c618f7f3e8 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1c618f78728 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1c618f7f530 <col:22> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1c618f7f408 <col:22> 'limb *':'limb *' lvalue ParmVar 0x1c618f7b550 'x3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x1c618f7f548 <col:26> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1c618f7f428 <col:26> 'limb *':'limb *' lvalue ParmVar 0x1c618f7b5c8 'y3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x1c618f7f560 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1c618f7f448 <col:30> 'limb *':'limb *' lvalue ParmVar 0x1c618f7b640 'z3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x1c618f7f578 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1c618f7f468 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b6b8 'x1' 'const limb *':'const limb *'
|   |   | |-ImplicitCastExpr 0x1c618f7f590 <col:38> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1c618f7f488 <col:38> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b730 'y1' 'const limb *':'const limb *'
|   |   | `-ImplicitCastExpr 0x1c618f7f5a8 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1c618f7f4a8 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b7a8 'z1' 'const limb *':'const limb *'
|   |   `-ReturnStmt 0x1c618f7f5c0 <line:1359:9>
|   |-CallExpr 0x1c618f7f680 <line:1363:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f7f668 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f608 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7f6b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f628 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7f6e0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7f6c8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7f648 <col:24> 'felem':'limb [4]' lvalue Var 0x1c618f7bed8 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f7f778 <line:1364:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1c618f7f760 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f6f8 <col:5> 'void (limb *, const u64)' Function 0x1c618e75078 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1c618f7f7a8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f718 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7f7c0 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f7f738 <col:24> 'int' 2
|   |-CallExpr 0x1c618f7f850 <line:1366:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f7f838 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f7d8 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7f880 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f7f8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f7f8b0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7f898 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7f818 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f7f940 <line:1367:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f7f928 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f8c8 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7f970 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f8e8 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7f9a0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7f988 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7f908 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f7fa50 <line:1370:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c618f7fa38 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f9b8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7fa88 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7f9d8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f7fab8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f7faa0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f7f9f8 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f7bed8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7fae8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7fad0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7fa18 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f7fb78 <line:1371:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f7fb60 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7fb00 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7fba8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7fb20 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bde8 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7fbd8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7fbc0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7fb40 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f7fc88 <line:1374:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c618f7fc70 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7fbf0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7fcc0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7fc10 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f7fcf0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f7fcd8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f7fc30 <col:20> 'felem':'limb [4]' lvalue Var 0x1c618f7be60 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7fd20 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7fd08 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7fc50 <col:27> 'felem':'limb [4]' lvalue Var 0x1c618f7bd70 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f7fdb0 <line:1375:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f7fd98 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7fd38 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7fde0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7fd58 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bed8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f7fe10 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7fdf8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7fd78 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f7fea0 <line:1378:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1c618f7fe88 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7fe28 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e81278 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f7fed0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7fe48 <col:23> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f7ff00 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7fee8 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7fe68 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c340 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x1c618f7ffa8 <line:1379:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f7ff90 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7ff18 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f7ffd8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f7ff38 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7c050 'x_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f80008 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f7fff0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f7ff70 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f800a8 <line:1380:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c618f80090 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80020 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f800d8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80040 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7be60 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f80108 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f800f0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f80070 <col:25> 'felem':'limb [4]' lvalue Var 0x1c618f7bed8 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f801a0 <line:1381:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1c618f80188 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80120 <col:5> 'void (limb *, const u64)' Function 0x1c618e75078 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1c618f801d0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80140 <col:18> 'felem':'limb [4]' lvalue Var 0x1c618f7bed8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f801e8 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f80160 <col:25> 'int' 2
|   |-CallExpr 0x1c618f80278 <line:1382:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f80260 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80200 <col:5> 'void (limb *, const limb *)' Function 0x1c618e74090 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f802a8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80220 <col:15> 'felem':'limb [4]' lvalue Var 0x1c618f7bed8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f802d8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f802c0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f80240 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7bde8 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f80368 <line:1384:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c618f80350 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f802f0 <col:5> 'void (limb *, const limb *)' Function 0x1c618e77700 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f80398 <col:16> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80310 <col:16> 'felem':'limb [4]' lvalue Var 0x1c618f7c050 'x_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f803c8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f803b0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f80330 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f7bed8 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f80458 <line:1388:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1c618f80440 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f803e0 <col:5> 'void (limb *, const limb *)' Function 0x1c618e78f50 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f80488 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80400 <col:24> 'felem':'limb [4]' lvalue Var 0x1c618f7be60 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f804b8 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f804a0 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f80420 <col:31> 'felem':'limb [4]' lvalue Var 0x1c618f7c050 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f80568 <line:1390:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1c618f80550 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f804d0 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x1c618f748d8 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f805a0 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f804f0 <col:21> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f805d0 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f805b8 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f80510 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x1c618f7c340 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c618f80600 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f805e8 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f80530 <col:34> 'felem':'limb [4]' lvalue Var 0x1c618f7be60 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f806c8 <line:1391:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x1c618f806b0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80618 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f80700 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80638 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c298 'tmp2' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c618f80730 <col:21> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f80718 <col:21> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f80670 <col:21> 'felem':'limb [4]' lvalue Var 0x1c618f7bfc8 'ftmp6' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f80760 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f80748 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f80690 <col:28> 'felem':'limb [4]' lvalue Var 0x1c618f7bde8 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f807f8 <line:1392:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f807e0 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80778 <col:5> 'void (limb *, const u64)' Function 0x1c618e756e8 'longfelem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x1c618f80828 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80798 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c298 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f80840 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1c618f807b8 <col:28> 'int' 2
|   |-CallExpr 0x1c618f808d0 <line:1394:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1c618f808b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80858 <col:5> 'void (limb *, const limb *)' Function 0x1c618e79cf8 'longfelem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f80900 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80878 <col:20> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c618f80930 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f80918 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f80898 <col:25> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c298 'tmp2' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f809d8 <line:1396:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x1c618f809c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80948 <col:5> 'void (limb *, const limb *)' Function 0x1c618f65fa0 'felem_reduce_zero105' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f80a08 <col:26> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80968 <col:26> 'felem':'limb [4]' lvalue Var 0x1c618f7c0c8 'y_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f80a38 <col:33> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f80a20 <col:33> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f809a0 <col:33> 'longfelem':'limb [8]' lvalue Var 0x1c618f7c220 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c618f80b40 <line:1399:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1c618f80b28 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80a50 <col:5> 'void (limb *, const u64 *, limb)' Function 0x1c618f7ad18 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x1c618f80b78 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80a70 <col:28> 'felem':'limb [4]' lvalue Var 0x1c618f7c050 'x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f80b90 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f80a90 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f7b8a0 'x2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1c618f80ba8 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f80ab0 <col:39> 'limb':'int' lvalue Var 0x1c618f7c6d0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x1c618f80cb0 <line:1400:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1c618f80c98 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80bc0 <col:5> 'void (limb *, const limb *, limb)' Function 0x1c618f7a398 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1c618f80ce8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80be0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7c050 'x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f80d00 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f80c00 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b6b8 'x1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1c618f80d18 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f80c20 <col:33> 'limb':'int' lvalue Var 0x1c618f7c748 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x1c618f80dc8 <line:1401:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1c618f80db0 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80d30 <col:5> 'void (limb *, const u64 *, limb)' Function 0x1c618f7ad18 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x1c618f80e00 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80d50 <col:28> 'felem':'limb [4]' lvalue Var 0x1c618f7c0c8 'y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f80e18 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f80d70 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f7b918 'y2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1c618f80e30 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f80d90 <col:39> 'limb':'int' lvalue Var 0x1c618f7c6d0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x1c618f80ee0 <line:1402:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1c618f80ec8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80e48 <col:5> 'void (limb *, const limb *, limb)' Function 0x1c618f7a398 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1c618f80f18 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80e68 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7c0c8 'y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f80f30 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f80e88 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b730 'y1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1c618f80f48 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f80ea8 <col:33> 'limb':'int' lvalue Var 0x1c618f7c748 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x1c618f80ff8 <line:1403:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1c618f80fe0 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80f60 <col:5> 'void (limb *, const u64 *, limb)' Function 0x1c618f7ad18 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x1c618f81030 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f80f80 <col:28> 'felem':'limb [4]' lvalue Var 0x1c618f7c140 'z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f81048 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f80fa0 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x1c618f7b990 'z2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x1c618f81060 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f80fc0 <col:39> 'limb':'int' lvalue Var 0x1c618f7c6d0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x1c618f81110 <line:1404:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1c618f810f8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f81078 <col:5> 'void (limb *, const limb *, limb)' Function 0x1c618f7a398 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1c618f81148 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f81098 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7c140 'z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f81160 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f810b8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1c618f7b7a8 'z1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1c618f81178 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c618f810d8 <col:33> 'limb':'int' lvalue Var 0x1c618f7c748 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x1c618f81208 <line:1405:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f811f0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f81190 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f81238 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f811b0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1c618f7b550 'x3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1c618f81268 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f81250 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f811d0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7c050 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f812f8 <line:1406:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c618f812e0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f81280 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f81328 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f812a0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1c618f7b5c8 'y3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1c618f81358 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f81340 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f812c0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7c0c8 'y_out' 'felem':'limb [4]'
|   `-CallExpr 0x1c618f813e8 <line:1407:5, col:27> 'void'
|     |-ImplicitCastExpr 0x1c618f813d0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f81370 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1c618f81418 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f81390 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1c618f7b640 'z3' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1c618f81448 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1c618f81430 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618f813b0 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f7c140 'z_out' 'felem':'limb [4]'
|-FunctionDecl 0x1c618f81c88 <line:1414:1, line:1428:1> line:1414:13 used point_add_small 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' static
| |-ParmVarDecl 0x1c618f81640 <col:29, col:40> col:40 used x3 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f816b8 <col:44, col:55> col:55 used y3 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f81730 <col:59, col:70> col:70 used z3 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f817a8 <line:1415:29, col:40> col:40 used x1 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f81820 <col:44, col:55> col:55 used y1 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f81898 <col:59, col:70> col:70 used z1 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f81910 <line:1416:29, col:40> col:40 used x2 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f81988 <col:44, col:55> col:55 used y2 'u64 *':'u64 *'
| |-ParmVarDecl 0x1c618f81a00 <col:59, col:70> col:70 used z2 'u64 *':'u64 *'
| `-CompoundStmt 0x1c618f82b08 <line:1417:1, line:1428:1>
|   |-DeclStmt 0x1c618f81f10 <line:1418:5, col:39>
|   | |-VarDecl 0x1c618f81d98 <col:5, col:11> col:11 used felem_x3 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f81e10 <col:5, col:21> col:21 used felem_y3 'felem':'limb [4]'
|   | `-VarDecl 0x1c618f81e88 <col:5, col:31> col:31 used felem_z3 'felem':'limb [4]'
|   |-DeclStmt 0x1c618f82108 <line:1419:5, col:39>
|   | |-VarDecl 0x1c618f81f38 <col:5, col:11> col:11 used felem_x1 'felem':'limb [4]'
|   | |-VarDecl 0x1c618f81fb0 <col:5, col:21> col:21 used felem_y1 'felem':'limb [4]'
|   | `-VarDecl 0x1c618f82080 <col:5, col:31> col:31 used felem_z1 'felem':'limb [4]'
|   |-CallExpr 0x1c618f821b0 <line:1420:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1c618f82198 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82120 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f821e0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82140 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f81f38 'felem_x1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f82210 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f821f8 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f82178 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f817a8 'x1' 'u64 *':'u64 *'
|   |-CallExpr 0x1c618f822b8 <line:1421:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1c618f822a0 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82228 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f822e8 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82248 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f81fb0 'felem_y1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f82318 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f82300 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f82280 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f81820 'y1' 'u64 *':'u64 *'
|   |-CallExpr 0x1c618f823c0 <line:1422:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x1c618f823a8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82330 <col:5> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f823f0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82350 <col:23> 'felem':'limb [4]' lvalue Var 0x1c618f82080 'felem_z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c618f82420 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f82408 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f82388 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f81898 'z1' 'u64 *':'u64 *'
|   |-CallExpr 0x1c618f82660 <line:1423:5, line:1424:25> 'void'
|   | |-ImplicitCastExpr 0x1c618f82648 <line:1423:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82438 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x1c618f7bc58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x1c618f826d0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82458 <col:15> 'felem':'limb [4]' lvalue Var 0x1c618f81d98 'felem_x3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f826e8 <col:25> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82490 <col:25> 'felem':'limb [4]' lvalue Var 0x1c618f81e10 'felem_y3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f82700 <col:35> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f824c8 <col:35> 'felem':'limb [4]' lvalue Var 0x1c618f81e88 'felem_z3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f82730 <col:45> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f82718 <col:45> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f82500 <col:45> 'felem':'limb [4]' lvalue Var 0x1c618f81f38 'felem_x1' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f82760 <col:55> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f82748 <col:55> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f82520 <col:55> 'felem':'limb [4]' lvalue Var 0x1c618f81fb0 'felem_y1' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1c618f82790 <col:65> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f82778 <col:65> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c618f82540 <col:65> 'felem':'limb [4]' lvalue Var 0x1c618f82080 'felem_z1' 'felem':'limb [4]'
|   | |-IntegerLiteral 0x1c618f82560 <col:75> 'int' 0
|   | |-ImplicitCastExpr 0x1c618f827c0 <line:1424:15> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f827a8 <col:15> 'u64 *':'u64 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1c618f82588 <col:15> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f81910 'x2' 'u64 *':'u64 *'
|   | |-ImplicitCastExpr 0x1c618f827f0 <col:19> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c618f827d8 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1c618f825a8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f81988 'y2' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1c618f82820 <col:23> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f82808 <col:23> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c618f825c8 <col:23> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f81a00 'z2' 'u64 *':'u64 *'
|   |-CallExpr 0x1c618f828b0 <line:1425:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c618f82898 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82838 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f828e0 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f82858 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f81640 'x3' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1c618f82910 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f828f8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f82878 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f81d98 'felem_x3' 'felem':'limb [4]'
|   |-CallExpr 0x1c618f829a0 <line:1426:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c618f82988 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c618f82928 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c618f829d0 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c618f82948 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f816b8 'y3' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x1c618f82a00 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c618f829e8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c618f82968 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f81e10 'felem_y3' 'felem':'limb [4]'
|   `-CallExpr 0x1c618f82a90 <line:1427:5, col:30> 'void'
|     |-ImplicitCastExpr 0x1c618f82a78 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c618f82a18 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x1c618f82ac0 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c618f82a38 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x1c618f81730 'z3' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x1c618f82af0 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1c618f82ad8 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1c618f82a58 <col:22> 'felem':'limb [4]' lvalue Var 0x1c618f81e88 'felem_z3' 'felem':'limb [4]'
|-VarDecl 0x1c618f82dc8 <line:1467:1, line:1624:1> line:1467:25 used gmul 'const smallfelem [2][16][3]' static cinit
| `-InitListExpr 0x1c61906cee0 <col:42, line:1624:1> 'const smallfelem [2][16][3]'
|   |-InitListExpr 0x1c61906d230 <line:1468:5, line:1545:20> 'const smallfelem [16][3]'
|   | |-InitListExpr 0x1c61906d320 <line:1468:6, line:1470:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906d388 <line:1468:7, col:18> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906d3e8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f82e30 <col:8> 'int' 0
|   | | | |-ImplicitCastExpr 0x1c61906d400 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f82e58 <col:11> 'int' 0
|   | | | |-ImplicitCastExpr 0x1c61906d418 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f82e80 <col:14> 'int' 0
|   | | | `-ImplicitCastExpr 0x1c61906d430 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c618f82ea8 <col:17> 'int' 0
|   | | |-InitListExpr 0x1c61906d458 <line:1469:7, col:18> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906d4b8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f82f30 <col:8> 'int' 0
|   | | | |-ImplicitCastExpr 0x1c61906d4d0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f82f58 <col:11> 'int' 0
|   | | | |-ImplicitCastExpr 0x1c61906d4e8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f82f80 <col:14> 'int' 0
|   | | | `-ImplicitCastExpr 0x1c61906d500 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c618f82fa8 <col:17> 'int' 0
|   | | `-InitListExpr 0x1c61906d528 <line:1470:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906d588 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83030 <col:8> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906d5a0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83058 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906d5b8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83080 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906d5d0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c618f830a8 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906d618 <line:1471:6, line:1475:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906d680 <line:1471:7, line:1472:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c618f83188 <line:1471:8> 'unsigned long long' 17627433388654248598
|   | | | |-ImplicitCastExpr 0x1c61906d6e0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f831b0 <col:28> 'long long' 8575836109218198432
|   | | | |-IntegerLiteral 0x1c618f831d8 <col:48> 'unsigned long long' 17923454489921339634
|   | | | `-ImplicitCastExpr 0x1c61906d6f8 <line:1472:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c618f83200 <col:8> 'long long' 7716867327612699207
|   | | |-InitListExpr 0x1c61906d720 <line:1473:7, line:1474:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c618f83288 <line:1473:8> 'unsigned long long' 14678990851816772085
|   | | | |-ImplicitCastExpr 0x1c61906d780 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f832b0 <col:28> 'long long' 3156516839386865358
|   | | | |-IntegerLiteral 0x1c618f832d8 <col:48> 'unsigned long long' 10297457778147434006
|   | | | `-ImplicitCastExpr 0x1c61906d798 <line:1474:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c618f83300 <col:8> 'long long' 5756518291402817435
|   | | `-InitListExpr 0x1c61906d7c0 <line:1475:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906d820 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83388 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906d838 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f833b0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906d850 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f833d8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906d868 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c618f83400 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906d8b0 <line:1476:6, line:1480:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906d918 <line:1476:7, line:1477:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c618f834e0 <line:1476:8> 'unsigned long long' 10441416191629384547
|   | | | |-ImplicitCastExpr 0x1c61906d978 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f83508 <col:28> 'long long' 2974974633094487934
|   | | | |-IntegerLiteral 0x1c618f83530 <col:48> 'unsigned long long' 9552795814555690462
|   | | | `-ImplicitCastExpr 0x1c61906d990 <line:1477:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c618f83558 <col:8> 'long long' 1128189898177751717
|   | | |-InitListExpr 0x1c61906d9b8 <line:1478:7, line:1479:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c618f835e0 <line:1478:8> 'unsigned long long' 16433956460045938407
|   | | | |-ImplicitCastExpr 0x1c61906da18 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f83608 <col:28> 'long long' 3796998824736490229
|   | | | |-ImplicitCastExpr 0x1c61906da30 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f83630 <col:48> 'long long' 8019455993423272075
|   | | | `-IntegerLiteral 0x1c618f83658 <line:1479:8> 'unsigned long long' 13831762719979317261
|   | | `-InitListExpr 0x1c61906da58 <line:1480:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906dab8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f836e0 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906dad0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83708 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906dae8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83730 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906db00 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c618f83758 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906db48 <line:1481:6, line:1485:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906dbb0 <line:1481:7, line:1482:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c618f83838 <line:1481:8> 'unsigned long long' 10608542154395062959
|   | | | |-IntegerLiteral 0x1c618f83860 <col:28> 'unsigned long long' 16819986920937746938
|   | | | |-IntegerLiteral 0x1c618f83888 <col:48> 'unsigned long long' 12850952123954767753
|   | | | `-ImplicitCastExpr 0x1c61906dc10 <line:1482:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c618f838b0 <col:8> 'long long' 3461662536726114927
|   | | |-InitListExpr 0x1c61906dc38 <line:1483:7, line:1484:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c618f83938 <line:1483:8> 'unsigned long long' 12273613631375091616
|   | | | |-ImplicitCastExpr 0x1c61906dc98 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f83960 <col:28> 'long long' 6607324557975488165
|   | | | |-ImplicitCastExpr 0x1c61906dcb0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f83988 <col:48> 'long long' 9159718173381901423
|   | | | `-ImplicitCastExpr 0x1c61906dcc8 <line:1484:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c618f839b0 <col:8> 'long long' 8262636234751034948
|   | | `-InitListExpr 0x1c61906dcf0 <line:1485:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906dd50 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83a38 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906dd68 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83a60 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906dd80 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83a88 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906dd98 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c618f83ab0 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906dde0 <line:1486:6, line:1490:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906de48 <line:1486:7, line:1487:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906dea8 <line:1486:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f83b90 <col:8> 'long long' 6325393404965010821
|   | | | |-IntegerLiteral 0x1c618f83bb8 <col:28> 'unsigned long long' 18173712786924235459
|   | | | |-IntegerLiteral 0x1c618f83be0 <col:48> 'unsigned long long' 18129292894149178990
|   | | | `-ImplicitCastExpr 0x1c61906dec0 <line:1487:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c618f83c08 <col:8> 'long long' 4935227880232410727
|   | | |-InitListExpr 0x1c61906dee8 <line:1488:7, line:1489:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906df48 <line:1488:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f83c90 <col:8> 'long long' 900213915829558066
|   | | | |-ImplicitCastExpr 0x1c61906df60 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f83cb8 <col:28> 'long long' 4410321002173228288
|   | | | |-IntegerLiteral 0x1c618f83ce0 <col:48> 'unsigned long long' 16226079771716136951
|   | | | `-ImplicitCastExpr 0x1c61906df78 <line:1489:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c618f83d08 <col:8> 'long long' 3262899348601647598
|   | | `-InitListExpr 0x1c61906dfa0 <line:1490:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906e000 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83d90 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906e018 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83db8 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906e030 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c618f83de0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906e048 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c618f83e08 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906e090 <line:1491:6, line:1495:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906e0f8 <line:1491:7, line:1492:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906e158 <line:1491:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f83ee8 <col:8> 'long long' 1410924739154491007
|   | | | |-IntegerLiteral 0x1c618f83f10 <col:28> 'unsigned long long' 17257720289925140919
|   | | | |-IntegerLiteral 0x1c618f83f38 <col:48> 'unsigned long long' 15980467524946754656
|   | | | `-IntegerLiteral 0x1c618f83f60 <line:1492:8> 'unsigned long long' 17263732451459232511
|   | | |-InitListExpr 0x1c61906e180 <line:1493:7, line:1494:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906e1e0 <line:1493:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f83fe8 <col:8> 'long long' 1828520442025400488
|   | | | |-ImplicitCastExpr 0x1c61906e1f8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c618f84010 <col:28> 'long long' 2528836098827360064
|   | | | |-IntegerLiteral 0x1c618f84038 <col:48> 'unsigned long long' 13974273849645867420
|   | | | `-ImplicitCastExpr 0x1c61906e210 <line:1494:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906ae10 <col:8> 'long long' 6998206532957187227
|   | | `-InitListExpr 0x1c61906e238 <line:1495:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906e298 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906ae98 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906e2b0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906aec0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906e2c8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906aee8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906e2e0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c61906af10 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906e328 <line:1496:6, line:1500:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906e390 <line:1496:7, line:1497:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c61906aff0 <line:1496:8> 'unsigned long long' 14619442581211706556
|   | | | |-ImplicitCastExpr 0x1c61906e3f0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906b018 <col:28> 'long long' 2969806602452450358
|   | | | |-ImplicitCastExpr 0x1c61906e408 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906b040 <col:48> 'long long' 9073174912575879359
|   | | | `-ImplicitCastExpr 0x1c61906e420 <line:1497:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906b068 <col:8> 'long long' 6126693716495300056
|   | | |-InitListExpr 0x1c61906e448 <line:1498:7, line:1499:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906e4a8 <line:1498:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906b0f0 <col:8> 'long long' 4971941098638972492
|   | | | |-IntegerLiteral 0x1c61906b118 <col:28> 'unsigned long long' 11507776179333430241
|   | | | |-ImplicitCastExpr 0x1c61906e4c0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906b140 <col:48> 'long long' 791015059971985637
|   | | | `-ImplicitCastExpr 0x1c61906e4d8 <line:1499:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906b168 <col:8> 'long long' 1545126667594020945
|   | | `-InitListExpr 0x1c61906e500 <line:1500:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906e560 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906b1f0 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906e578 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906b218 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906e590 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906b240 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906e5a8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c61906b268 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906e5f0 <line:1501:6, line:1505:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906e658 <line:1501:7, line:1502:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c61906b348 <line:1501:8> 'unsigned long long' 16469324088139898369
|   | | | |-ImplicitCastExpr 0x1c61906e6b8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906b370 <col:28> 'long long' 8992990158826594086
|   | | | |-IntegerLiteral 0x1c61906b398 <col:48> 'unsigned long long' 11738901276316812177
|   | | | `-IntegerLiteral 0x1c61906b3c0 <line:1502:8> 'unsigned long long' 16959842912971080170
|   | | |-InitListExpr 0x1c61906e6e0 <line:1503:7, line:1504:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c61906b448 <line:1503:8> 'unsigned long long' 14612236727341429881
|   | | | |-IntegerLiteral 0x1c61906b470 <col:28> 'unsigned long long' 9651826421517301317
|   | | | |-ImplicitCastExpr 0x1c61906e740 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906b498 <col:48> 'long long' 689304323628231918
|   | | | `-IntegerLiteral 0x1c61906b4c0 <line:1504:8> 'unsigned long long' 16932816531315540347
|   | | `-InitListExpr 0x1c61906e768 <line:1505:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906e7c8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906b548 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906e7e0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906b570 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906e7f8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906b598 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906e810 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c61906b5c0 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906e858 <line:1506:6, line:1510:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906e8c0 <line:1506:7, line:1507:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906e920 <line:1506:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906b6a0 <col:8> 'long long' 7850354671997102270
|   | | | |-IntegerLiteral 0x1c61906b6c8 <col:28> 'unsigned long long' 10827662381879310666
|   | | | |-ImplicitCastExpr 0x1c61906e938 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906b6f0 <col:48> 'long long' 2825726755471450053
|   | | | `-IntegerLiteral 0x1c61906b718 <line:1507:8> 'unsigned long long' 12021117271037743734
|   | | |-InitListExpr 0x1c61906e960 <line:1508:7, line:1509:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c61906b7a0 <line:1508:8> 'unsigned long long' 17490494635306907124
|   | | | |-IntegerLiteral 0x1c61906b7c8 <col:28> 'unsigned long long' 9388476954023560603
|   | | | |-ImplicitCastExpr 0x1c61906e9c0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906b7f0 <col:48> 'long long' 7401871309252586719
|   | | | `-ImplicitCastExpr 0x1c61906e9d8 <line:1509:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906b818 <col:8> 'long long' 7444314345419016214
|   | | `-InitListExpr 0x1c61906ea00 <line:1510:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906ea60 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906b8a0 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906ea78 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906b8c8 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906ea90 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906b8f0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906eaa8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c61906b918 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906eaf0 <line:1511:6, line:1515:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906eb58 <line:1511:7, line:1512:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906ebb8 <line:1511:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906b9f8 <col:8> 'long long' 3311425576568130110
|   | | | |-ImplicitCastExpr 0x1c61906ebd0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906ba20 <col:28> 'long long' 8421783014622864747
|   | | | |-ImplicitCastExpr 0x1c61906ebe8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906ba48 <col:48> 'long long' 3568363273336651483
|   | | | `-ImplicitCastExpr 0x1c61906ec00 <line:1512:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906ba70 <col:8> 'long long' 5653880613779398061
|   | | |-InitListExpr 0x1c61906ec28 <line:1513:7, line:1514:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c61906baf8 <line:1513:8> 'unsigned long long' 11872440132187765680
|   | | | |-IntegerLiteral 0x1c61906bb20 <col:28> 'unsigned long long' 18130051117790339749
|   | | | |-ImplicitCastExpr 0x1c61906ec88 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906bb48 <col:48> 'long long' 2215777003961086593
|   | | | `-ImplicitCastExpr 0x1c61906eca0 <line:1514:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906bb70 <col:8> 'long long' 4808032968947992163
|   | | `-InitListExpr 0x1c61906ecc8 <line:1515:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906ed28 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906bbf8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906ed40 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906bc20 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906ed58 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906bc48 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906ed70 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c61906bc70 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906edb8 <line:1516:6, line:1520:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906ee30 <line:1516:7, line:1517:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906ee90 <line:1516:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906bd50 <col:8> 'long long' 7996512021131061433
|   | | | |-IntegerLiteral 0x1c61906bd78 <col:28> 'unsigned long long' 15130017193297502513
|   | | | |-ImplicitCastExpr 0x1c61906eea8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906bda0 <col:48> 'long long' 9213270411358356600
|   | | | `-ImplicitCastExpr 0x1c61906eec0 <line:1517:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906bdc8 <col:8> 'long long' 8685067594097287245
|   | | |-InitListExpr 0x1c61906eee8 <line:1518:7, line:1519:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c61906be50 <line:1518:8> 'unsigned long long' 11268772705129781622
|   | | | |-ImplicitCastExpr 0x1c61906ef48 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906be78 <col:28> 'long long' 7696184534049525071
|   | | | |-IntegerLiteral 0x1c61906bea0 <col:48> 'unsigned long long' 16020170479003278831
|   | | | `-IntegerLiteral 0x1c61906bec8 <line:1519:8> 'unsigned long long' 13171691205910774561
|   | | `-InitListExpr 0x1c61906ef70 <line:1520:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906efd0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906bf50 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906efe8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906bf78 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906f000 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906bfa0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906f018 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c61906bfc8 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906f060 <line:1521:6, line:1525:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906f0c8 <line:1521:7, line:1522:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906f128 <line:1521:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c0a8 <col:8> 'long long' 9194414004818818419
|   | | | |-ImplicitCastExpr 0x1c61906f140 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c0d0 <col:28> 'long long' 6594076190914360470
|   | | | |-ImplicitCastExpr 0x1c61906f158 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c0f8 <col:48> 'long long' 6439111866792803502
|   | | | `-ImplicitCastExpr 0x1c61906f170 <line:1522:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906c120 <col:8> 'long long' 903178766089130631
|   | | |-InitListExpr 0x1c61906f198 <line:1523:7, line:1524:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906f1f8 <line:1523:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c1a8 <col:8> 'long long' 4204039210694913192
|   | | | |-ImplicitCastExpr 0x1c61906f210 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c1d0 <col:28> 'long long' 8971594821414511859
|   | | | |-ImplicitCastExpr 0x1c61906f228 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c1f8 <col:48> 'long long' 1788410310064137898
|   | | | `-IntegerLiteral 0x1c61906c220 <line:1524:8> 'unsigned long long' 15951150250963508678
|   | | `-InitListExpr 0x1c61906f250 <line:1525:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906f2b0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906c2a8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906f2c8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906c2d0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906f2e0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906c2f8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906f2f8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c61906c320 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906f340 <line:1526:6, line:1530:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906f3a8 <line:1526:7, line:1527:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c61906c400 <line:1526:8> 'unsigned long long' 16819389878359993612
|   | | | |-ImplicitCastExpr 0x1c61906f408 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c428 <col:28> 'long long' 4873073520113514799
|   | | | |-IntegerLiteral 0x1c61906c450 <col:48> 'unsigned long long' 17284995840217074163
|   | | | `-ImplicitCastExpr 0x1c61906f420 <line:1527:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906c478 <col:8> 'long long' 7562463719493563494
|   | | |-InitListExpr 0x1c61906f448 <line:1528:7, line:1529:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c61906c500 <line:1528:8> 'unsigned long long' 14843327652293659978
|   | | | |-ImplicitCastExpr 0x1c61906f4a8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c528 <col:28> 'long long' 7389276838502450726
|   | | | |-ImplicitCastExpr 0x1c61906f4c0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c550 <col:48> 'long long' 6939722928163815411
|   | | | `-ImplicitCastExpr 0x1c61906f4d8 <line:1529:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906c578 <col:8> 'long long' 3583110508470077984
|   | | `-InitListExpr 0x1c61906f500 <line:1530:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906f560 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906c600 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906f578 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906c628 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906f590 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906c650 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906f5a8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c61906c678 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906f5f0 <line:1531:6, line:1535:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906f658 <line:1531:7, line:1532:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c61906c758 <line:1531:8> 'unsigned long long' 15234348820970614399
|   | | | |-ImplicitCastExpr 0x1c61906f6b8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c780 <col:28> 'long long' 944084751294372904
|   | | | |-ImplicitCastExpr 0x1c61906f6d0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c7a8 <col:48> 'long long' 7366871684117878688
|   | | | `-ImplicitCastExpr 0x1c61906f6e8 <line:1532:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906c7d0 <col:8> 'long long' 4634977297227980217
|   | | |-InitListExpr 0x1c61906f710 <line:1533:7, line:1534:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906f770 <line:1533:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906c858 <col:8> 'long long' 2547392258115446251
|   | | | |-IntegerLiteral 0x1c61906c880 <col:28> 'unsigned long long' 16655704750641106011
|   | | | |-IntegerLiteral 0x1c61906c8a8 <col:48> 'unsigned long long' 9668074726414027976
|   | | | `-IntegerLiteral 0x1c61906c8d0 <line:1534:8> 'unsigned long long' 18360979218528009313
|   | | `-InitListExpr 0x1c61906f798 <line:1535:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906f7f8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906c958 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906f810 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906c980 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906f828 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906c9a8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906f840 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c61906c9d0 <col:17> 'int' 0
|   | |-InitListExpr 0x1c61906f888 <line:1536:6, line:1540:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x1c61906f8f0 <line:1536:7, line:1537:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x1c61906f950 <line:1536:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906cab0 <col:8> 'long long' 8373436425878949804
|   | | | |-IntegerLiteral 0x1c61906cad8 <col:28> 'unsigned long long' 12672949858381244324
|   | | | |-ImplicitCastExpr 0x1c61906f968 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906cb00 <col:48> 'long long' 1311113366226075514
|   | | | `-ImplicitCastExpr 0x1c61906f980 <line:1537:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906cb28 <col:8> 'long long' 2224139274171900954
|   | | |-InitListExpr 0x1c61906f9a8 <line:1538:7, line:1539:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x1c61906cbb0 <line:1538:8> 'unsigned long long' 10349464555096373316
|   | | | |-ImplicitCastExpr 0x1c61906fa08 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906cbd8 <col:28> 'long long' 3954278663023761687
|   | | | |-ImplicitCastExpr 0x1c61906fa20 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1c61906cc00 <col:48> 'long long' 884381536816411552
|   | | | `-ImplicitCastExpr 0x1c61906fa38 <line:1539:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1c61906cc28 <col:8> 'long long' 4832447639533305084
|   | | `-InitListExpr 0x1c61906fa60 <line:1540:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x1c61906fac0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906ccb0 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x1c61906fad8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906ccd8 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x1c61906faf0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1c61906cd00 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x1c61906fb08 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1c61906cd28 <col:17> 'int' 0
|   | `-InitListExpr 0x1c61906fb50 <line:1541:6, line:1545:19> 'const smallfelem [3]'
|   |   |-InitListExpr 0x1c61906fbb8 <line:1541:7, line:1542:26> 'const smallfelem':'u64 const[4]'
|   |   | |-IntegerLiteral 0x1c619066df0 <line:1541:8> 'unsigned long long' 10814749165039220965
|   |   | |-ImplicitCastExpr 0x1c61906fc18 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1c619066e18 <col:28> 'long long' 7399658494733087819
|   |   | |-ImplicitCastExpr 0x1c61906fc30 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1c619066e40 <col:48> 'long long' 741483134296471098
|   |   | `-IntegerLiteral 0x1c619066e68 <line:1542:8> 'unsigned long long' 13010378930286731804
|   |   |-InitListExpr 0x1c61906fc58 <line:1543:7, line:1544:26> 'const smallfelem':'u64 const[4]'
|   |   | |-ImplicitCastExpr 0x1c61906fcb8 <line:1543:8> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1c619066ef0 <col:8> 'long long' 498686754927156013
|   |   | |-IntegerLiteral 0x1c619066f18 <col:28> 'unsigned long long' 13836434663360106392
|   |   | |-ImplicitCastExpr 0x1c61906fcd0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1c619066f40 <col:48> 'long long' 7211137999908042344
|   |   | `-IntegerLiteral 0x1c619066f68 <line:1544:8> 'unsigned long long' 18068465070929427883
|   |   `-InitListExpr 0x1c61906fcf8 <line:1545:7, col:18> 'const smallfelem':'u64 const[4]'
|   |     |-ImplicitCastExpr 0x1c61906fd58 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x1c619066ff0 <col:8> 'int' 1
|   |     |-ImplicitCastExpr 0x1c61906fd70 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x1c619067018 <col:11> 'int' 0
|   |     |-ImplicitCastExpr 0x1c61906fd88 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x1c619067040 <col:14> 'int' 0
|   |     `-ImplicitCastExpr 0x1c61906fda0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   |       `-IntegerLiteral 0x1c619067068 <col:17> 'int' 0
|   `-InitListExpr 0x1c6190700b8 <line:1546:5, line:1623:20> 'const smallfelem [16][3]'
|     |-InitListExpr 0x1c6190701a8 <line:1546:6, line:1548:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c619070210 <line:1546:7, col:18> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619070270 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067208 <col:8> 'int' 0
|     | | |-ImplicitCastExpr 0x1c619070288 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067230 <col:11> 'int' 0
|     | | |-ImplicitCastExpr 0x1c6190702a0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067258 <col:14> 'int' 0
|     | | `-ImplicitCastExpr 0x1c6190702b8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619067280 <col:17> 'int' 0
|     | |-InitListExpr 0x1c6190702e0 <line:1547:7, col:18> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619070340 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067308 <col:8> 'int' 0
|     | | |-ImplicitCastExpr 0x1c619070358 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067330 <col:11> 'int' 0
|     | | |-ImplicitCastExpr 0x1c619070370 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067358 <col:14> 'int' 0
|     | | `-ImplicitCastExpr 0x1c619070388 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619067380 <col:17> 'int' 0
|     | `-InitListExpr 0x1c6190703b0 <line:1548:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c619070410 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067408 <col:8> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619070428 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067430 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619070440 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067458 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619070458 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c619067480 <col:17> 'int' 0
|     |-InitListExpr 0x1c6190704a0 <line:1549:6, line:1553:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c619070508 <line:1549:7, line:1550:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619070568 <line:1549:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067560 <col:8> 'long long' 4204847071378430275
|     | | |-ImplicitCastExpr 0x1c619070580 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067588 <col:28> 'long long' 1925598036946706358
|     | | |-ImplicitCastExpr 0x1c619070598 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c6190675b0 <col:48> 'long long' 2406447439032381914
|     | | `-ImplicitCastExpr 0x1c6190705b0 <line:1550:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c6190675d8 <col:8> 'long long' 9215327188090531721
|     | |-InitListExpr 0x1c6190705d8 <line:1551:7, line:1552:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c619067660 <line:1551:8> 'unsigned long long' 15351949985270505729
|     | | |-ImplicitCastExpr 0x1c619070638 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067688 <col:28> 'long long' 8409299702805885458
|     | | |-IntegerLiteral 0x1c6190676b0 <col:48> 'unsigned long long' 11459959024969885425
|     | | `-IntegerLiteral 0x1c6190676d8 <line:1552:8> 'unsigned long long' 16615982825261643300
|     | `-InitListExpr 0x1c619070660 <line:1553:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c6190706c0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067760 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c6190706d8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067788 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c6190706f0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c6190677b0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619070708 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c6190677d8 <col:17> 'int' 0
|     |-InitListExpr 0x1c619070750 <line:1554:6, line:1558:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c6190707b8 <line:1554:7, line:1555:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c6190678b8 <line:1554:8> 'unsigned long long' 12126691010890834318
|     | | |-IntegerLiteral 0x1c6190678e0 <col:28> 'unsigned long long' 16835899823751823681
|     | | |-ImplicitCastExpr 0x1c619070818 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067908 <col:48> 'long long' 6307303622281718018
|     | | `-ImplicitCastExpr 0x1c619070830 <line:1555:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619067930 <col:8> 'long long' 5357964581017122726
|     | |-InitListExpr 0x1c619070858 <line:1556:7, line:1557:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c6190708b8 <line:1556:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c6190679b8 <col:8> 'long long' 858738897768626240
|     | | |-ImplicitCastExpr 0x1c6190708d0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c6190679e0 <col:28> 'long long' 7092519962948038045
|     | | |-IntegerLiteral 0x1c619067a08 <col:48> 'unsigned long long' 14133989960413510976
|     | | `-IntegerLiteral 0x1c619067a30 <line:1557:8> 'unsigned long long' 16938959713482082801
|     | `-InitListExpr 0x1c6190708f8 <line:1558:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c619070958 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067ab8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c619070970 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067ae0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619070988 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067b08 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c6190709a0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c619067b30 <col:17> 'int' 0
|     |-InitListExpr 0x1c6190709e8 <line:1559:6, line:1563:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c619070a50 <line:1559:7, line:1560:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c619067c10 <line:1559:8> 'unsigned long long' 18012970283197280897
|     | | |-ImplicitCastExpr 0x1c619070ab0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067c38 <col:28> 'long long' 6796710378924666044
|     | | |-IntegerLiteral 0x1c619067c60 <col:48> 'unsigned long long' 14069973639409027159
|     | | `-ImplicitCastExpr 0x1c619070ac8 <line:1560:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619067c88 <col:8> 'long long' 540915916971057674
|     | |-InitListExpr 0x1c619070af0 <line:1561:7, line:1562:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619070b50 <line:1561:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619067d10 <col:8> 'long long' 6522131241343737728
|     | | |-IntegerLiteral 0x1c619067d38 <col:28> 'unsigned long long' 9869655002594280931
|     | | |-IntegerLiteral 0x1c619067d60 <col:48> 'unsigned long long' 10930976606567621684
|     | | `-ImplicitCastExpr 0x1c619070b68 <line:1562:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619067d88 <col:8> 'long long' 7569669774902629779
|     | `-InitListExpr 0x1c619070b90 <line:1563:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c619070bf0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067e10 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c619070c08 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067e38 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619070c20 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619067e60 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619070c38 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c619067e88 <col:17> 'int' 0
|     |-InitListExpr 0x1c619070c80 <line:1564:6, line:1568:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c619070ce8 <line:1564:7, line:1565:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c619067f68 <line:1564:8> 'unsigned long long' 12603824238579167018
|     | | |-IntegerLiteral 0x1c619067f90 <col:28> 'unsigned long long' 11406550811417637946
|     | | |-IntegerLiteral 0x1c619067fb8 <col:48> 'unsigned long long' 17681745613931615014
|     | | `-IntegerLiteral 0x1c619067fe0 <line:1565:8> 'unsigned long long' 9967415225131415063
|     | |-InitListExpr 0x1c619070d58 <line:1566:7, line:1567:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c619068068 <line:1566:8> 'unsigned long long' 14265609955841184951
|     | | |-IntegerLiteral 0x1c619068090 <col:28> 'unsigned long long' 14836321199344875113
|     | | |-ImplicitCastExpr 0x1c619070db8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c6190680b8 <col:48> 'long long' 4026262154848670399
|     | | `-ImplicitCastExpr 0x1c619070dd0 <line:1567:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c6190680e0 <col:8> 'long long' 312367424096734167
|     | `-InitListExpr 0x1c619060dc0 <line:1568:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c619060e20 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068168 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c619060e38 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068190 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619060e50 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c6190681b8 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619060e68 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c6190681e0 <col:17> 'int' 0
|     |-InitListExpr 0x1c619060eb0 <line:1569:6, line:1573:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c619060f18 <line:1569:7, line:1570:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619060f78 <line:1569:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c6190682c0 <col:8> 'long long' 867627015970731481
|     | | |-IntegerLiteral 0x1c6190682e8 <col:28> 'unsigned long long' 17988713241524421700
|     | | |-ImplicitCastExpr 0x1c619060f90 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068310 <col:48> 'long long' 5787311655235732089
|     | | `-ImplicitCastExpr 0x1c619060fa8 <line:1570:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619068338 <col:8> 'long long' 484940130495201910
|     | |-InitListExpr 0x1c619060fd0 <line:1571:7, line:1572:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c6190683c0 <line:1571:8> 'unsigned long long' 14462376519995546313
|     | | |-IntegerLiteral 0x1c6190683e8 <col:28> 'unsigned long long' 16050136703869978383
|     | | |-ImplicitCastExpr 0x1c619061030 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068410 <col:48> 'long long' 4791065911985892208
|     | | `-ImplicitCastExpr 0x1c619061048 <line:1572:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619068438 <col:8> 'long long' 6577346714434056586
|     | `-InitListExpr 0x1c619061070 <line:1573:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c6190610d0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c6190684c0 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c6190610e8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c6190684e8 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619061100 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068510 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619061118 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c619068538 <col:17> 'int' 0
|     |-InitListExpr 0x1c619061160 <line:1574:6, line:1578:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c6190611c8 <line:1574:7, line:1575:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619061228 <line:1574:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068618 <col:8> 'long long' 8961105821002642442
|     | | |-ImplicitCastExpr 0x1c619061240 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068640 <col:28> 'long long' 5572184639073054523
|     | | |-ImplicitCastExpr 0x1c619061258 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068668 <col:48> 'long long' 3001457500238366168
|     | | `-ImplicitCastExpr 0x1c619061270 <line:1575:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619068690 <col:8> 'long long' 4479258976280561928
|     | |-InitListExpr 0x1c619061298 <line:1576:7, line:1577:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c6190612f8 <line:1576:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068718 <col:8> 'long long' 1453864872937502800
|     | | |-IntegerLiteral 0x1c619068740 <col:28> 'unsigned long long' 12472513303615887232
|     | | |-ImplicitCastExpr 0x1c619061310 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068768 <col:48> 'long long' 2239712233336787437
|     | | `-ImplicitCastExpr 0x1c619061328 <line:1577:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619068790 <col:8> 'long long' 2565803748450573950
|     | `-InitListExpr 0x1c619061350 <line:1578:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c6190613b0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068818 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c6190613c8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068840 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c6190613e0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068868 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c6190613f8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c619068890 <col:17> 'int' 0
|     |-InitListExpr 0x1c619061440 <line:1579:6, line:1583:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c6190614a8 <line:1579:7, line:1580:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619061508 <line:1579:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068970 <col:8> 'long long' 8702104923482042922
|     | | |-ImplicitCastExpr 0x1c619061520 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068998 <col:28> 'long long' 3485186220776451982
|     | | |-IntegerLiteral 0x1c6190689c0 <col:48> 'unsigned long long' 15837672636651286228
|     | | `-IntegerLiteral 0x1c6190689e8 <line:1580:8> 'unsigned long long' 9371794945225469943
|     | |-InitListExpr 0x1c619061548 <line:1581:7, line:1582:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c6190615a8 <line:1581:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068a70 <col:8> 'long long' 7837746206991051732
|     | | |-ImplicitCastExpr 0x1c6190615c0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068a98 <col:28> 'long long' 8484321636022914244
|     | | |-ImplicitCastExpr 0x1c6190615d8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068ac0 <col:48> 'long long' 1965851040684971219
|     | | `-ImplicitCastExpr 0x1c6190615f0 <line:1582:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619068ae8 <col:8> 'long long' 1442285393364518380
|     | `-InitListExpr 0x1c619061618 <line:1583:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c619061678 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068b70 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c619061690 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068b98 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c6190616a8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068bc0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c6190616c0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c619068be8 <col:17> 'int' 0
|     |-InitListExpr 0x1c619061708 <line:1584:6, line:1588:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c619061770 <line:1584:7, line:1585:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c6190617d0 <line:1584:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619068cc8 <col:8> 'long long' 7669699507266117383
|     | | |-IntegerLiteral 0x1c619068cf0 <col:28> 'unsigned long long' 18263772118963940312
|     | | |-IntegerLiteral 0x1c619068d18 <col:48> 'unsigned long long' 16959156411216990206
|     | | `-ImplicitCastExpr 0x1c6190617e8 <line:1585:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619068d40 <col:8> 'long long' 7563435295795044334
|     | |-InitListExpr 0x1c619061810 <line:1586:7, line:1587:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c619068dc8 <line:1586:8> 'unsigned long long' 10432429702343894613
|     | | |-IntegerLiteral 0x1c619068e00 <col:28> 'unsigned long long' 14939165448171732863
|     | | |-IntegerLiteral 0x1c619068e28 <col:48> 'unsigned long long' 18142755831876440104
|     | | `-IntegerLiteral 0x1c619068e50 <line:1587:8> 'unsigned long long' 14691303536741059814
|     | `-InitListExpr 0x1c619061880 <line:1588:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c6190618e0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068ed8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c6190618f8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068f00 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619061910 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619068f28 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619061928 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c619068f50 <col:17> 'int' 0
|     |-InitListExpr 0x1c619061970 <line:1589:6, line:1593:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c6190619d8 <line:1589:7, line:1590:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c619069030 <line:1589:8> 'unsigned long long' 16832431112848860353
|     | | |-IntegerLiteral 0x1c619069058 <col:28> 'unsigned long long' 18195368276845830772
|     | | |-ImplicitCastExpr 0x1c619061a38 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069080 <col:48> 'long long' 2526363943779232039
|     | | `-IntegerLiteral 0x1c6190690a8 <line:1590:8> 'unsigned long long' 15038356215644160265
|     | |-InitListExpr 0x1c619061a60 <line:1591:7, line:1592:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619061ac0 <line:1591:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069130 <col:8> 'long long' 4829457343136483686
|     | | |-ImplicitCastExpr 0x1c619061ad8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069158 <col:28> 'long long' 1204775539773815621
|     | | |-ImplicitCastExpr 0x1c619061af0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069180 <col:48> 'long long' 9057411091819482746
|     | | `-IntegerLiteral 0x1c6190691a8 <line:1592:8> 'unsigned long long' 10886424616474450405
|     | `-InitListExpr 0x1c619061b18 <line:1593:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c619061b78 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069230 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c619061b90 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069258 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619061ba8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069280 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619061bc0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c6190692a8 <col:17> 'int' 0
|     |-InitListExpr 0x1c619061c08 <line:1594:6, line:1598:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c619061c70 <line:1594:7, line:1595:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619061cd0 <line:1594:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069388 <col:8> 'long long' 5464756572288098249
|     | | |-ImplicitCastExpr 0x1c619061ce8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c6190693b0 <col:28> 'long long' 6337288834372384886
|     | | |-IntegerLiteral 0x1c6190693d8 <col:48> 'unsigned long long' 14039351322695960199
|     | | `-IntegerLiteral 0x1c619069400 <line:1595:8> 'unsigned long long' 10814849148613192378
|     | |-InitListExpr 0x1c619061d10 <line:1596:7, line:1597:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619061d70 <line:1596:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069488 <col:8> 'long long' 5303406157379959390
|     | | |-ImplicitCastExpr 0x1c619061d88 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c6190694b0 <col:28> 'long long' 7614207622125570852
|     | | |-ImplicitCastExpr 0x1c619061da0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c6190694d8 <col:48> 'long long' 3238635979046982428
|     | | `-ImplicitCastExpr 0x1c619061db8 <line:1597:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619069500 <col:8> 'long long' 8848341461748899396
|     | `-InitListExpr 0x1c619061de0 <line:1598:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c619061e40 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069588 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c619061e58 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c6190695b0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619061e70 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c6190695d8 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619061e88 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c619069600 <col:17> 'int' 0
|     |-InitListExpr 0x1c619061ed0 <line:1599:6, line:1603:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c619061f38 <line:1599:7, line:1600:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619061f98 <line:1599:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c6190696e0 <col:8> 'long long' 2688230699866182848
|     | | |-IntegerLiteral 0x1c619069708 <col:28> 'unsigned long long' 17689871680306571355
|     | | |-IntegerLiteral 0x1c619069730 <col:48> 'unsigned long long' 11965369384869145322
|     | | `-ImplicitCastExpr 0x1c619061fb0 <line:1600:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619069758 <col:8> 'long long' 2660390208594493275
|     | |-InitListExpr 0x1c619061fd8 <line:1601:7, line:1602:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c6190697e0 <line:1601:8> 'unsigned long long' 16419645726685552106
|     | | |-IntegerLiteral 0x1c619069808 <col:28> 'unsigned long long' 18370063315756542799
|     | | |-ImplicitCastExpr 0x1c619062038 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069830 <col:48> 'long long' 8372514931683904589
|     | | `-ImplicitCastExpr 0x1c619062050 <line:1602:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619069858 <col:8> 'long long' 7636013446400604620
|     | `-InitListExpr 0x1c619062078 <line:1603:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c6190620d8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c6190698e0 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c6190620f0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069908 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619062108 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069930 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619062120 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c619069958 <col:17> 'int' 0
|     |-InitListExpr 0x1c619062168 <line:1604:6, line:1608:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c6190621d0 <line:1604:7, line:1605:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c619069a38 <line:1604:8> 'unsigned long long' 17213966368603666101
|     | | |-ImplicitCastExpr 0x1c619062230 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069a60 <col:28> 'long long' 9137858211030508120
|     | | |-IntegerLiteral 0x1c619069a88 <col:48> 'unsigned long long' 12980167869281043732
|     | | `-IntegerLiteral 0x1c619069ab0 <line:1605:8> 'unsigned long long' 16510007652016890119
|     | |-InitListExpr 0x1c619062258 <line:1606:7, line:1607:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c619069b38 <line:1606:8> 'unsigned long long' 11699170337035859005
|     | | |-IntegerLiteral 0x1c619069b60 <col:28> 'unsigned long long' 10135670842130700366
|     | | |-IntegerLiteral 0x1c619069b88 <col:48> 'unsigned long long' 11974957831620041222
|     | | `-ImplicitCastExpr 0x1c6190622b8 <line:1607:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619069bb0 <col:8> 'long long' 2031292942051382151
|     | `-InitListExpr 0x1c6190622e0 <line:1608:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c619062340 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069c38 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c619062358 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069c60 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619062370 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069c88 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619062388 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c619069cb0 <col:17> 'int' 0
|     |-InitListExpr 0x1c6190623d0 <line:1609:6, line:1613:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c619062438 <line:1609:7, line:1610:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c619069d90 <line:1609:8> 'unsigned long long' 10562590303857394777
|     | | |-IntegerLiteral 0x1c619069db8 <col:28> 'unsigned long long' 12682497754009880974
|     | | |-IntegerLiteral 0x1c619069de0 <col:48> 'unsigned long long' 14196638462869837864
|     | | `-ImplicitCastExpr 0x1c619062498 <line:1610:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c619069e08 <col:8> 'long long' 2357770240294970627
|     | |-InitListExpr 0x1c6190624c0 <line:1611:7, line:1612:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x1c619062520 <line:1611:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069e90 <col:8> 'long long' 3486656228478141047
|     | | |-ImplicitCastExpr 0x1c619062538 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069eb8 <col:28> 'long long' 2005572102683722461
|     | | |-ImplicitCastExpr 0x1c619062550 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c619069ee0 <col:48> 'long long' 941725040706691140
|     | | `-IntegerLiteral 0x1c619069f08 <line:1612:8> 'unsigned long long' 17710117778563233470
|     | `-InitListExpr 0x1c619062578 <line:1613:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c6190625d8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069f90 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c6190625f0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069fb8 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c619062608 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c619069fe0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c619062620 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c61906a008 <col:17> 'int' 0
|     |-InitListExpr 0x1c619062668 <line:1614:6, line:1618:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x1c6190626d0 <line:1614:7, line:1615:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c61906a0e8 <line:1614:8> 'unsigned long long' 10129807730841853457
|     | | |-ImplicitCastExpr 0x1c619062730 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c61906a110 <col:28> 'long long' 4068663205997555039
|     | | |-IntegerLiteral 0x1c61906a138 <col:48> 'unsigned long long' 11841304802401167958
|     | | `-ImplicitCastExpr 0x1c619062748 <line:1615:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c61906a160 <col:8> 'long long' 2222475534487523513
|     | |-InitListExpr 0x1c619062770 <line:1616:7, line:1617:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x1c61906a1e8 <line:1616:8> 'unsigned long long' 11601582869891561609
|     | | |-ImplicitCastExpr 0x1c6190627d0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c61906a210 <col:28> 'long long' 424693911077573444
|     | | |-ImplicitCastExpr 0x1c6190627e8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1c61906a238 <col:48> 'long long' 5959705901008562724
|     | | `-ImplicitCastExpr 0x1c619062800 <line:1617:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1c61906a260 <col:8> 'long long' 4191448208365790586
|     | `-InitListExpr 0x1c619062828 <line:1618:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x1c619062888 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c61906a2e8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x1c6190628a0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c61906a310 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x1c6190628b8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1c61906a338 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x1c6190628d0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1c61906a360 <col:17> 'int' 0
|     `-InitListExpr 0x1c619062918 <line:1619:6, line:1623:19> 'const smallfelem [3]'
|       |-InitListExpr 0x1c619062980 <line:1619:7, line:1620:26> 'const smallfelem':'u64 const[4]'
|       | |-IntegerLiteral 0x1c61906a440 <line:1619:8> 'unsigned long long' 17442373942447506493
|       | |-IntegerLiteral 0x1c61906a468 <col:28> 'unsigned long long' 17523545791397714530
|       | |-IntegerLiteral 0x1c61906a490 <col:48> 'unsigned long long' 18193736125741632571
|       | `-ImplicitCastExpr 0x1c6190629e0 <line:1620:8> 'u64':'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x1c61906a4b8 <col:8> 'long long' 1584956206744459766
|       |-InitListExpr 0x1c619062a08 <line:1621:7, line:1622:26> 'const smallfelem':'u64 const[4]'
|       | |-ImplicitCastExpr 0x1c619062a68 <line:1621:8> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1c61906a540 <col:8> 'long long' 5773195294502653146
|       | |-ImplicitCastExpr 0x1c619062a80 <col:28> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1c61906a568 <col:28> 'long long' 4751157856429321220
|       | |-ImplicitCastExpr 0x1c619062a98 <col:48> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1c61906a590 <col:48> 'long long' 6160255002369724667
|       | `-ImplicitCastExpr 0x1c619062ab0 <line:1622:8> 'u64':'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x1c61906a5b8 <col:8> 'long long' 5383409808306421633
|       `-InitListExpr 0x1c619062ad8 <line:1623:7, col:18> 'const smallfelem':'u64 const[4]'
|         |-ImplicitCastExpr 0x1c619062b38 <col:8> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x1c61906a640 <col:8> 'int' 1
|         |-ImplicitCastExpr 0x1c619062b50 <col:11> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x1c61906a668 <col:11> 'int' 0
|         |-ImplicitCastExpr 0x1c619062b68 <col:14> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x1c61906a690 <col:14> 'int' 0
|         `-ImplicitCastExpr 0x1c619062b80 <col:17> 'u64':'unsigned long long' <IntegralCast>
|           `-IntegerLiteral 0x1c61906a6b8 <col:17> 'int' 0
|-FunctionDecl 0x1c6190711b8 <line:1630:1, line:1649:1> line:1630:13 used select_point 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' static
| |-ParmVarDecl 0x1c619062ba8 <col:26, col:36> col:36 used idx 'const u64':'const unsigned long long'
| |-ParmVarDecl 0x1c619062c28 <col:41, col:54> col:54 used size 'unsigned int'
| |-ParmVarDecl 0x1c619070e70 <line:1631:26, col:57> col:43 used pre_comp 'const smallfelem (*)[3]':'const smallfelem (*)[3]'
| |-ParmVarDecl 0x1c619071010 <col:60, col:76> col:71 used out 'smallfelem *':'smallfelem *'
| `-CompoundStmt 0x1c619072428 <line:1632:1, line:1649:1>
|   |-DeclStmt 0x1c6190713a8 <line:1633:5, col:18>
|   | |-VarDecl 0x1c6190712a8 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x1c619071328 <col:5, col:17> col:17 used j 'unsigned int'
|   |-DeclStmt 0x1c619071530 <line:1634:5, col:31>
|   | `-VarDecl 0x1c6190713d0 <col:5, col:30> col:10 used outlimbs 'u64 *' cinit
|   |   `-UnaryOperator 0x1c619071518 <col:21, col:30> 'u64 *' prefix '&' cannot overflow
|   |     `-ArraySubscriptExpr 0x1c6190714f8 <col:22, col:30> 'u64':'unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1c6190714e0 <col:22, col:27> 'u64 *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x1c619071498 <col:22, col:27> 'smallfelem':'u64 [4]' lvalue
|   |       |   |-ImplicitCastExpr 0x1c619071480 <col:22> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1c619071438 <col:22> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x1c619071010 'out' 'smallfelem *':'smallfelem *'
|   |       |   `-IntegerLiteral 0x1c619071458 <col:26> 'int' 0
|   |       `-IntegerLiteral 0x1c6190714b8 <col:29> 'int' 0
|   |-CallExpr 0x1c6190716d0 <line:1636:5, col:36> 'void *'
|   | |-ImplicitCastExpr 0x1c6190716b8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619071548 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1c618e357c0 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1c619071720 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1c619071708 <col:12> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1c619071568 <col:12> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x1c619071010 'out' 'smallfelem *':'smallfelem *'
|   | |-IntegerLiteral 0x1c619071588 <col:17> 'int' 0
|   | `-BinaryOperator 0x1c619071680 <col:20, col:35> 'unsigned long long' '*'
|   |   |-UnaryExprOrTypeTraitExpr 0x1c619071620 <col:20, col:31> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x1c619071600 <col:26, col:31> 'smallfelem':'u64 [4]' lvalue
|   |   |   `-UnaryOperator 0x1c6190715e8 <col:27, col:28> 'smallfelem':'u64 [4]' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x1c6190715d0 <col:28> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1c6190715b0 <col:28> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x1c619071010 'out' 'smallfelem *':'smallfelem *' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x1c619071668 <col:35> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1c619071640 <col:35> 'int' 3
|   `-ForStmt 0x1c6190723f0 <line:1638:5, line:1648:5>
|     |-BinaryOperator 0x1c6190717b0 <line:1638:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1c619071738 <col:10> 'unsigned int' lvalue Var 0x1c6190712a8 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1c619071798 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1c619071770 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1c619071840 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1c619071810 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1c6190717d0 <col:17> 'unsigned int' lvalue Var 0x1c6190712a8 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1c619071828 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x1c6190717f0 <col:21> 'unsigned int' lvalue ParmVar 0x1c619062c28 'size' 'unsigned int'
|     |-UnaryOperator 0x1c619071880 <col:27, col:28> 'unsigned int' postfix '++'
|     | `-DeclRefExpr 0x1c619071860 <col:27> 'unsigned int' lvalue Var 0x1c6190712a8 'i' 'unsigned int'
|     `-CompoundStmt 0x1c6190723a0 <col:32, line:1648:5>
|       |-DeclStmt 0x1c619071b28 <line:1639:9, col:55>
|       | `-VarDecl 0x1c6190718a8 <col:9, col:54> col:20 used inlimbs 'const u64 *' cinit
|       |   `-ImplicitCastExpr 0x1c619071b10 <col:30, col:54> 'const u64 *' <NoOp>
|       |     `-CStyleCastExpr 0x1c619071ae8 <col:30, col:54> 'u64 *' <NoOp>
|       |       `-UnaryOperator 0x1c619071ac0 <col:37, col:54> 'const u64 *' prefix '&' cannot overflow
|       |         `-ArraySubscriptExpr 0x1c619071aa0 <col:38, col:54> 'const u64':'const unsigned long long' lvalue
|       |           |-ImplicitCastExpr 0x1c619071a88 <col:38, col:51> 'const u64 *' <ArrayToPointerDecay>
|       |           | `-ArraySubscriptExpr 0x1c619071a40 <col:38, col:51> 'const smallfelem':'u64 const[4]' lvalue
|       |           |   |-ImplicitCastExpr 0x1c619071a28 <col:38, col:48> 'const smallfelem *' <ArrayToPointerDecay>
|       |           |   | `-ArraySubscriptExpr 0x1c619071980 <col:38, col:48> 'const smallfelem [3]' lvalue
|       |           |   |   |-ImplicitCastExpr 0x1c619071950 <col:38> 'const smallfelem (*)[3]':'const smallfelem (*)[3]' <LValueToRValue>
|       |           |   |   | `-DeclRefExpr 0x1c619071910 <col:38> 'const smallfelem (*)[3]':'const smallfelem (*)[3]' lvalue ParmVar 0x1c619070e70 'pre_comp' 'const smallfelem (*)[3]':'const smallfelem (*)[3]'
|       |           |   |   `-ImplicitCastExpr 0x1c619071968 <col:47> 'unsigned int' <LValueToRValue>
|       |           |   |     `-DeclRefExpr 0x1c619071930 <col:47> 'unsigned int' lvalue Var 0x1c6190712a8 'i' 'unsigned int'
|       |           |   `-IntegerLiteral 0x1c6190719a0 <col:50> 'int' 0
|       |           `-IntegerLiteral 0x1c619071a60 <col:53> 'int' 0
|       |-DeclStmt 0x1c619071c60 <line:1640:9, col:27>
|       | `-VarDecl 0x1c619071b50 <col:9, col:24> col:13 used mask 'u64':'unsigned long long' cinit
|       |   `-BinaryOperator 0x1c619071c40 <col:20, col:24> 'unsigned long long' '^'
|       |     |-ImplicitCastExpr 0x1c619071c28 <col:20> 'unsigned long long' <IntegralCast>
|       |     | `-ImplicitCastExpr 0x1c619071bf8 <col:20> 'unsigned int' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x1c619071bb8 <col:20> 'unsigned int' lvalue Var 0x1c6190712a8 'i' 'unsigned int'
|       |     `-ImplicitCastExpr 0x1c619071c10 <col:24> 'u64':'unsigned long long' <LValueToRValue>
|       |       `-DeclRefExpr 0x1c619071bd8 <col:24> 'const u64':'const unsigned long long' lvalue ParmVar 0x1c619062ba8 'idx' 'const u64':'const unsigned long long'
|       |-CompoundAssignOperator 0x1c619071d30 <line:1641:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1c619071c78 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c619071b50 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x1c619071d10 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x1c619071cf8 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1c619071cb0 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c619071b50 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x1c619071cd0 <col:25> 'int' 4
|       |-CompoundAssignOperator 0x1c619071e00 <line:1642:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1c619071d60 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c619071b50 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x1c619071de0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x1c619071dc8 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1c619071d80 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c619071b50 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x1c619071da0 <col:25> 'int' 2
|       |-CompoundAssignOperator 0x1c619071ed0 <line:1643:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1c619071e30 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c619071b50 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x1c619071eb0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x1c619071e98 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1c619071e50 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c619071b50 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x1c619071e70 <col:25> 'int' 1
|       |-CompoundAssignOperator 0x1c619071f60 <line:1644:9, col:17> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1c619071f00 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c619071b50 'mask' 'u64':'unsigned long long'
|       | `-ImplicitCastExpr 0x1c619071f48 <col:17> 'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x1c619071f20 <col:17> 'int' 1
|       |-UnaryOperator 0x1c619071fb0 <line:1645:9, col:13> 'u64':'unsigned long long' postfix '--'
|       | `-DeclRefExpr 0x1c619071f90 <col:9> 'u64':'unsigned long long' lvalue Var 0x1c619071b50 'mask' 'u64':'unsigned long long'
|       `-ForStmt 0x1c619072368 <line:1646:9, line:1647:41>
|         |-BinaryOperator 0x1c619072040 <line:1646:14, col:18> 'unsigned int' '='
|         | |-DeclRefExpr 0x1c619071fc8 <col:14> 'unsigned int' lvalue Var 0x1c619071328 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x1c619072028 <col:18> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x1c619072000 <col:18> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x1c619072120 <col:21, col:34> 'int' '<'
|         | |-ImplicitCastExpr 0x1c6190720f0 <col:21> 'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x1c619072060 <col:21> 'unsigned int' lvalue Var 0x1c619071328 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x1c619072108 <line:113:17, line:1646:34> 'unsigned int' <IntegralCast>
|         |   `-BinaryOperator 0x1c6190720d0 <line:113:17, line:1646:34> 'int' '*'
|         |     |-IntegerLiteral 0x1c619072080 <line:113:17> 'int' 4
|         |     `-IntegerLiteral 0x1c6190720a8 <line:1646:34> 'int' 3
|         |-UnaryOperator 0x1c619072160 <col:37, col:38> 'unsigned int' postfix '++'
|         | `-DeclRefExpr 0x1c619072140 <col:37> 'unsigned int' lvalue Var 0x1c619071328 'j' 'unsigned int'
|         `-CompoundAssignOperator 0x1c619072338 <line:1647:13, col:41> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|           |-ArraySubscriptExpr 0x1c619072200 <col:13, col:23> 'u64':'unsigned long long' lvalue
|           | |-ImplicitCastExpr 0x1c6190721d0 <col:13> 'u64 *' <LValueToRValue>
|           | | `-DeclRefExpr 0x1c619072178 <col:13> 'u64 *' lvalue Var 0x1c6190713d0 'outlimbs' 'u64 *'
|           | `-ImplicitCastExpr 0x1c6190721e8 <col:22> 'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x1c6190721b0 <col:22> 'unsigned int' lvalue Var 0x1c619071328 'j' 'unsigned int'
|           `-BinaryOperator 0x1c619072318 <col:28, col:41> 'unsigned long long' '&'
|             |-ImplicitCastExpr 0x1c6190722e8 <col:28, col:37> 'u64':'unsigned long long' <LValueToRValue>
|             | `-ArraySubscriptExpr 0x1c6190722a8 <col:28, col:37> 'const u64':'const unsigned long long' lvalue
|             |   |-ImplicitCastExpr 0x1c619072278 <col:28> 'const u64 *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x1c619072220 <col:28> 'const u64 *' lvalue Var 0x1c6190718a8 'inlimbs' 'const u64 *'
|             |   `-ImplicitCastExpr 0x1c619072290 <col:36> 'unsigned int' <LValueToRValue>
|             |     `-DeclRefExpr 0x1c619072258 <col:36> 'unsigned int' lvalue Var 0x1c619071328 'j' 'unsigned int'
|             `-ImplicitCastExpr 0x1c619072300 <col:41> 'u64':'unsigned long long' <LValueToRValue>
|               `-DeclRefExpr 0x1c6190722c8 <col:41> 'u64':'unsigned long long' lvalue Var 0x1c619071b50 'mask' 'u64':'unsigned long long'
|-FunctionDecl 0x1c619072668 <line:1652:1, line:1657:1> line:1652:13 used get_bit 'char (const u8 *, int)' static
| |-ParmVarDecl 0x1c6190724a0 <col:21, col:43> col:43 used in 'const u8 *':'const u8 *'
| |-ParmVarDecl 0x1c619072520 <col:47, col:51> col:51 used i 'int'
| `-CompoundStmt 0x1c619072b50 <line:1653:1, line:1657:1>
|   |-IfStmt 0x1c6190728e0 <line:1654:5, line:1655:16>
|   | |-BinaryOperator 0x1c619072870 <line:1654:9, col:29> 'int' '||'
|   | | |-ParenExpr 0x1c6190727b0 <col:9, col:15> 'int'
|   | | | `-BinaryOperator 0x1c619072790 <col:10, col:14> 'int' '<'
|   | | |   |-ImplicitCastExpr 0x1c619072778 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1c619072730 <col:10> 'int' lvalue ParmVar 0x1c619072520 'i' 'int'
|   | | |   `-IntegerLiteral 0x1c619072750 <col:14> 'int' 0
|   | | `-ParenExpr 0x1c619072850 <col:20, col:29> 'int'
|   | |   `-BinaryOperator 0x1c619072830 <col:21, col:26> 'int' '>='
|   | |     |-ImplicitCastExpr 0x1c619072818 <col:21> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1c6190727d0 <col:21> 'int' lvalue ParmVar 0x1c619072520 'i' 'int'
|   | |     `-IntegerLiteral 0x1c6190727f0 <col:26> 'int' 256
|   | `-ReturnStmt 0x1c6190728d0 <line:1655:9, col:16>
|   |   `-ImplicitCastExpr 0x1c6190728b8 <col:16> 'char' <IntegralCast>
|   |     `-IntegerLiteral 0x1c619072890 <col:16> 'int' 0
|   `-ReturnStmt 0x1c619072b40 <line:1656:5, col:38>
|     `-ImplicitCastExpr 0x1c619072b28 <col:12, col:38> 'char' <IntegralCast>
|       `-BinaryOperator 0x1c619072b08 <col:12, col:38> 'int' '&'
|         |-ParenExpr 0x1c619072ac0 <col:12, col:34> 'int'
|         | `-BinaryOperator 0x1c619072aa0 <col:13, col:33> 'int' '>>'
|         |   |-ImplicitCastExpr 0x1c619072a88 <col:13, col:22> 'int' <IntegralCast>
|         |   | `-ImplicitCastExpr 0x1c619072a70 <col:13, col:22> 'u8':'unsigned char' <LValueToRValue>
|         |   |   `-ArraySubscriptExpr 0x1c6190729b0 <col:13, col:22> 'const u8':'const unsigned char' lvalue
|         |   |     |-ImplicitCastExpr 0x1c619072998 <col:13> 'const u8 *':'const u8 *' <LValueToRValue>
|         |   |     | `-DeclRefExpr 0x1c6190728f8 <col:13> 'const u8 *':'const u8 *' lvalue ParmVar 0x1c6190724a0 'in' 'const u8 *':'const u8 *'
|         |   |     `-BinaryOperator 0x1c619072978 <col:16, col:21> 'int' '>>'
|         |   |       |-ImplicitCastExpr 0x1c619072960 <col:16> 'int' <LValueToRValue>
|         |   |       | `-DeclRefExpr 0x1c619072918 <col:16> 'int' lvalue ParmVar 0x1c619072520 'i' 'int'
|         |   |       `-IntegerLiteral 0x1c619072938 <col:21> 'int' 3
|         |   `-ParenExpr 0x1c619072a50 <col:27, col:33> 'int'
|         |     `-BinaryOperator 0x1c619072a30 <col:28, col:32> 'int' '&'
|         |       |-ImplicitCastExpr 0x1c619072a18 <col:28> 'int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x1c6190729d0 <col:28> 'int' lvalue ParmVar 0x1c619072520 'i' 'int'
|         |       `-IntegerLiteral 0x1c6190729f0 <col:32> 'int' 7
|         `-IntegerLiteral 0x1c619072ae0 <col:38> 'int' 1
|-FunctionDecl 0x1c619063668 <line:1666:1, line:1764:1> line:1666:13 used batch_mul 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' static
| |-ParmVarDecl 0x1c619072b80 <col:23, col:29> col:29 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x1c619072bf8 <col:36, col:42> col:42 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x1c619072c70 <col:49, col:55> col:55 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x1c619062dd0 <line:1667:23, col:53> col:45 used scalars 'const felem_bytearray *':'const felem_bytearray *'
| |-ParmVarDecl 0x1c619062e50 <line:1668:23, col:38> col:38 used num_points 'const unsigned int'
| |-ParmVarDecl 0x1c619062ec8 <col:50, col:60> col:60 used g_scalar 'const u8 *'
| |-ParmVarDecl 0x1c619062f48 <line:1669:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x1c6190631e0 <col:40, col:73> col:57 used pre_comp 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]'
| |-ParmVarDecl 0x1c6190633e0 <line:1670:23, col:59> col:40 used g_pre_comp 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
| `-CompoundStmt 0x1c61907dbb8 <line:1671:1, line:1764:1>
|   |-DeclStmt 0x1c619063880 <line:1672:5, col:16>
|   | |-VarDecl 0x1c619063780 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x1c619063800 <col:5, col:12> col:12 used skip 'int'
|   |-DeclStmt 0x1c619063ae0 <line:1673:5, col:47>
|   | |-VarDecl 0x1c6190638b0 <col:5, col:14> col:14 used num 'unsigned int'
|   | `-VarDecl 0x1c619063930 <col:5, col:46> col:19 used gen_mul 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x1c619063ab0 <col:29, col:46> 'unsigned int' <IntegralCast>
|   |     `-ParenExpr 0x1c619063a90 <col:29, col:46> 'int'
|   |       `-BinaryOperator 0x1c619063a70 <col:30, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '!='
|   |         |-ImplicitCastExpr 0x1c619063a40 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1673:30> 'const u8 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1c619063998 <col:30> 'const u8 *' lvalue ParmVar 0x1c619062ec8 'g_scalar' 'const u8 *'
|   |         `-ImplicitCastExpr 0x1c619063a58 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <BitCast>
|   |           `-ParenExpr 0x1c619063a20 <col:17, col:27> 'void *'
|   |             `-CStyleCastExpr 0x1c6190639f8 <col:18, col:26> 'void *' <NullToPointer>
|   |               `-IntegerLiteral 0x1c6190639b8 <col:26> 'int' 0
|   |-DeclStmt 0x1c619063cd0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1674:5, col:22>
|   | |-VarDecl 0x1c619063bd8 <col:5, col:15> col:11 used nq 'felem [3]'
|   | `-VarDecl 0x1c619063c50 <col:5, col:18> col:18 used ftmp 'felem':'limb [4]'
|   |-DeclStmt 0x1c619063db0 <line:1675:5, col:22>
|   | `-VarDecl 0x1c619063d48 <col:5, col:21> col:16 used tmp 'smallfelem [3]'
|   |-DeclStmt 0x1c619063e40 <line:1676:5, col:13>
|   | `-VarDecl 0x1c619063dd8 <col:5, col:9> col:9 used bits 'u64':'unsigned long long'
|   |-DeclStmt 0x1c619063f60 <line:1677:5, col:19>
|   | |-VarDecl 0x1c619063e68 <col:5, col:8> col:8 used sign 'u8':'unsigned char'
|   | `-VarDecl 0x1c619063ee0 <col:5, col:14> col:14 used digit 'u8':'unsigned char'
|   |-CallExpr 0x1c6190640e8 <line:1680:5, col:29> 'void *'
|   | |-ImplicitCastExpr 0x1c6190640d0 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619063f78 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1c618e357c0 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1c619064138 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1c619064120 <col:12> 'felem *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c619063f98 <col:12> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   | |-IntegerLiteral 0x1c619063fd0 <col:16> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x1c619064038 <col:19, col:28> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x1c619064018 <col:25, col:28> 'felem [3]' lvalue
|   |     `-DeclRefExpr 0x1c619063ff8 <col:26> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]' non_odr_use_unevaluated
|   |-BinaryOperator 0x1c6190641b0 <line:1687:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x1c619064150 <col:5> 'int' lvalue Var 0x1c619063800 'skip' 'int'
|   | `-IntegerLiteral 0x1c619064188 <col:12> 'int' 1
|   |-ForStmt 0x1c61907d790 <line:1689:5, line:1760:5>
|   | |-BinaryOperator 0x1c6190642e0 <line:1689:10, col:36> 'int' '='
|   | | |-DeclRefExpr 0x1c6190641d0 <col:10> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   | | `-ParenExpr 0x1c6190642c0 <col:14, col:36> 'int'
|   | |   `-ConditionalOperator 0x1c619064290 <col:15, col:34> 'int'
|   | |     |-ImplicitCastExpr 0x1c619064278 <col:15> 'unsigned int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1c619064208 <col:15> 'const unsigned int' lvalue ParmVar 0x1c619062e50 'num_points' 'const unsigned int'
|   | |     |-IntegerLiteral 0x1c619064228 <col:28> 'int' 255
|   | |     `-IntegerLiteral 0x1c619064250 <col:34> 'int' 31
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c619064360 <col:39, col:44> 'int' '>='
|   | | |-ImplicitCastExpr 0x1c619064348 <col:39> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c619064300 <col:39> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   | | `-IntegerLiteral 0x1c619064320 <col:44> 'int' 0
|   | |-UnaryOperator 0x1c6190643a0 <col:47, col:49> 'int' prefix '--'
|   | | `-DeclRefExpr 0x1c619064380 <col:49> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   | `-CompoundStmt 0x1c61907d768 <col:52, line:1760:5>
|   |   |-IfStmt 0x1c619064868 <line:1691:9, line:1692:66>
|   |   | |-UnaryOperator 0x1c6190643f0 <line:1691:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1c6190643d8 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1c6190643b8 <col:14> 'int' lvalue Var 0x1c619063800 'skip' 'int'
|   |   | `-CallExpr 0x1c619064740 <line:1692:13, col:66> 'void'
|   |   |   |-ImplicitCastExpr 0x1c619064728 <col:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1c619064408 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1c618f78728 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |   |-ImplicitCastExpr 0x1c619064790 <col:26, col:30> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x1c619064488 <col:26, col:30> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1c619064470 <col:26> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1c619064428 <col:26> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x1c619064448 <col:29> 'int' 0
|   |   |   |-ImplicitCastExpr 0x1c6190647a8 <col:33, col:37> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x1c619064508 <col:33, col:37> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1c6190644f0 <col:33> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1c6190644a8 <col:33> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x1c6190644c8 <col:36> 'int' 1
|   |   |   |-ImplicitCastExpr 0x1c6190647c0 <col:40, col:44> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x1c619064588 <col:40, col:44> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1c619064570 <col:40> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1c619064528 <col:40> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x1c619064548 <col:43> 'int' 2
|   |   |   |-ImplicitCastExpr 0x1c6190647f0 <col:47, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x1c6190647d8 <col:47, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x1c619064608 <col:47, col:51> 'felem':'limb [4]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x1c6190645f0 <col:47> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1c6190645a8 <col:47> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x1c6190645c8 <col:50> 'int' 0
|   |   |   |-ImplicitCastExpr 0x1c619064820 <col:54, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x1c619064808 <col:54, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x1c619064688 <col:54, col:58> 'felem':'limb [4]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x1c619064670 <col:54> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1c619064628 <col:54> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x1c619064648 <col:57> 'int' 1
|   |   |   `-ImplicitCastExpr 0x1c619064850 <col:61, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x1c619064838 <col:61, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |       `-ArraySubscriptExpr 0x1c619064708 <col:61, col:65> 'felem':'limb [4]' lvalue
|   |   |         |-ImplicitCastExpr 0x1c6190646f0 <col:61> 'felem *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x1c6190646a8 <col:61> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |         `-IntegerLiteral 0x1c6190646c8 <col:64> 'int' 2
|   |   |-IfStmt 0x1c619065040 <line:1695:9, line:1725:9>
|   |   | |-BinaryOperator 0x1c619064970 <line:1695:13, col:32> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x1c619064958 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1c619064880 <col:13> 'unsigned int' lvalue Var 0x1c619063930 'gen_mul' 'unsigned int'
|   |   | | `-ParenExpr 0x1c619064938 <col:24, col:32> 'int'
|   |   | |   `-BinaryOperator 0x1c619064918 <col:25, col:30> 'int' '<='
|   |   | |     |-ImplicitCastExpr 0x1c619064900 <col:25> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x1c6190648b8 <col:25> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1c6190648d8 <col:30> 'int' 31
|   |   | `-CompoundStmt 0x1c619064fd0 <col:35, line:1725:9>
|   |   |   |-BinaryOperator 0x1c619064bc0 <line:1697:13, col:50> 'u64':'unsigned long long' '='
|   |   |   | |-DeclRefExpr 0x1c619064990 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1c619064ba8 <col:20, col:50> 'u64':'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1c619064b88 <col:20, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1c619064b70 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1c619064b00 <col:20, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1c619064ae8 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1c6190649c8 <col:20> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1c619064b30 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1c6190649e8 <col:28> 'const u8 *' lvalue ParmVar 0x1c619062ec8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1c619064a68 <col:38, col:42> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1c619064a50 <col:38> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1c619064a08 <col:38> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1c619064a28 <col:42> 'int' 224
|   |   |   |     `-IntegerLiteral 0x1c619064b48 <col:50> 'int' 3
|   |   |   |-CompoundAssignOperator 0x1c619064d98 <line:1698:13, col:51> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1c619064be0 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1c619064d80 <col:21, col:51> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1c619064d60 <col:21, col:51> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1c619064d48 <col:21, col:46> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1c619064cd8 <col:21, col:46> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1c619064cc0 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1c619064c00 <col:21> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1c619064d08 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1c619064c20 <col:29> 'const u8 *' lvalue ParmVar 0x1c619062ec8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1c619064ca0 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1c619064c88 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1c619064c40 <col:39> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1c619064c60 <col:43> 'int' 160
|   |   |   |     `-IntegerLiteral 0x1c619064d20 <col:51> 'int' 2
|   |   |   |-CompoundAssignOperator 0x1c619073008 <line:1699:13, col:50> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1c619072e50 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1c619072ff0 <col:21, col:50> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1c619072fd0 <col:21, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1c619072fb8 <col:21, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1c619072f48 <col:21, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1c619072f30 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1c619072e70 <col:21> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1c619072f78 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1c619072e90 <col:29> 'const u8 *' lvalue ParmVar 0x1c619062ec8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1c619072f10 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1c619072ef8 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1c619072eb0 <col:39> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1c619072ed0 <col:43> 'int' 96
|   |   |   |     `-IntegerLiteral 0x1c619072f90 <col:50> 'int' 1
|   |   |   |-CompoundAssignOperator 0x1c619073190 <line:1700:13, col:45> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1c619073038 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1c619073178 <col:21, col:45> 'unsigned long long' <IntegralCast>
|   |   |   |   `-CallExpr 0x1c619073130 <col:21, col:45> 'char'
|   |   |   |     |-ImplicitCastExpr 0x1c619073118 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1c619073058 <col:21> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |-ImplicitCastExpr 0x1c619073160 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x1c619073078 <col:29> 'const u8 *' lvalue ParmVar 0x1c619062ec8 'g_scalar' 'const u8 *'
|   |   |   |     `-BinaryOperator 0x1c6190730f8 <col:39, col:43> 'int' '+'
|   |   |   |       |-ImplicitCastExpr 0x1c6190730e0 <col:39> 'int' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x1c619073098 <col:39> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |   |   |       `-IntegerLiteral 0x1c6190730b8 <col:43> 'int' 32
|   |   |   |-CallExpr 0x1c619073350 <line:1702:13, col:54> 'void'
|   |   |   | |-ImplicitCastExpr 0x1c619073338 <col:13> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x1c6190731c0 <col:13> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x1c6190711b8 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |   |   | |-ImplicitCastExpr 0x1c619073390 <col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1c6190731e0 <col:26> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |   |   | |-ImplicitCastExpr 0x1c6190733a8 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x1c619073200 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x1c6190733c0 <col:36, col:48> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |   | | `-ArraySubscriptExpr 0x1c619073288 <col:36, col:48> 'const smallfelem [16][3]' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x1c619073270 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1c619073228 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' lvalue ParmVar 0x1c6190633e0 'g_pre_comp' 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
|   |   |   | |   `-IntegerLiteral 0x1c619073248 <col:47> 'int' 1
|   |   |   | `-ImplicitCastExpr 0x1c6190733d8 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x1c6190732a8 <col:51> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |   |-IfStmt 0x1c6190740b8 <line:1704:13, line:1713:13> has_else
|   |   |   | |-UnaryOperator 0x1c619073428 <line:1704:17, col:18> 'int' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x1c619073410 <col:18> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1c6190733f0 <col:18> 'int' lvalue Var 0x1c619063800 'skip' 'int'
|   |   |   | |-CompoundStmt 0x1c619073af8 <col:24, line:1708:13>
|   |   |   | | `-CallExpr 0x1c619073920 <line:1706:17, line:1707:73> 'void'
|   |   |   | |   |-ImplicitCastExpr 0x1c619073908 <line:1706:17> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x1c619073440 <col:17> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x1c618f7bc58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |   |   | |   |-ImplicitCastExpr 0x1c619073990 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x1c6190734c0 <col:27, col:31> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x1c6190734a8 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x1c619073460 <col:27> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x1c619073480 <col:30> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x1c6190739a8 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x1c619073540 <col:34, col:38> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x1c619073528 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x1c6190734e0 <col:34> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x1c619073500 <col:37> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x1c6190739c0 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x1c6190735c0 <col:41, col:45> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x1c6190735a8 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x1c619073560 <col:41> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x1c619073580 <col:44> 'int' 2
|   |   |   | |   |-ImplicitCastExpr 0x1c6190739f0 <line:1707:27, col:31> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1c6190739d8 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1c619073640 <col:27, col:31> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1c619073628 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1c6190735e0 <col:27> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1c619073600 <col:30> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x1c619073a20 <col:34, col:38> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1c619073a08 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1c6190736c0 <col:34, col:38> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1c6190736a8 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1c619073660 <col:34> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1c619073680 <col:37> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x1c619073a50 <col:41, col:45> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1c619073a38 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1c619073740 <col:41, col:45> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1c619073728 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1c6190736e0 <col:41> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1c619073700 <col:44> 'int' 2
|   |   |   | |   |-IntegerLiteral 0x1c619073760 <col:48> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x1c619073a80 <col:51, col:56> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1c619073a68 <col:51, col:56> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1c6190737e8 <col:51, col:56> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1c6190737d0 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1c619073788 <col:51> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1c6190737a8 <col:55> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x1c619073ab0 <col:59, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1c619073a98 <col:59, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1c619073868 <col:59, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1c619073850 <col:59> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1c619073808 <col:59> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1c619073828 <col:63> 'int' 1
|   |   |   | |   `-ImplicitCastExpr 0x1c619073ae0 <col:67, col:72> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |     `-ImplicitCastExpr 0x1c619073ac8 <col:67, col:72> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |       `-ArraySubscriptExpr 0x1c6190738e8 <col:67, col:72> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |         |-ImplicitCastExpr 0x1c6190738d0 <col:67> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |         | `-DeclRefExpr 0x1c619073888 <col:67> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |   | |         `-IntegerLiteral 0x1c6190738a8 <col:71> 'int' 2
|   |   |   | `-CompoundStmt 0x1c619074088 <line:1708:20, line:1713:13>
|   |   |   |   |-CallExpr 0x1c619073c48 <line:1709:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x1c619073c30 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x1c619073b10 <col:17> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x1c619073c78 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x1c619073b90 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x1c619073b78 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x1c619073b30 <col:35> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x1c619073b50 <col:38> 'int' 0
|   |   |   |   | `-ImplicitCastExpr 0x1c619073ca8 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x1c619073c90 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x1c619073c10 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x1c619073bf8 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x1c619073bb0 <col:42> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x1c619073bd0 <col:46> 'int' 0
|   |   |   |   |-CallExpr 0x1c619073df8 <line:1710:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x1c619073de0 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x1c619073cc0 <col:17> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x1c619073e28 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x1c619073d40 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x1c619073d28 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x1c619073ce0 <col:35> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x1c619073d00 <col:38> 'int' 1
|   |   |   |   | `-ImplicitCastExpr 0x1c619073e58 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x1c619073e40 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x1c619073dc0 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x1c619073da8 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x1c619073d60 <col:42> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x1c619073d80 <col:46> 'int' 1
|   |   |   |   |-CallExpr 0x1c619073fa8 <line:1711:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x1c619073f90 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x1c619073e70 <col:17> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x1c619073fd8 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x1c619073ef0 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x1c619073ed8 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x1c619073e90 <col:35> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x1c619073eb0 <col:38> 'int' 2
|   |   |   |   | `-ImplicitCastExpr 0x1c619074008 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x1c619073ff0 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x1c619073f70 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x1c619073f58 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x1c619073f10 <col:42> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x1c619073f30 <col:46> 'int' 2
|   |   |   |   `-BinaryOperator 0x1c619074068 <line:1712:17, col:24> 'int' '='
|   |   |   |     |-DeclRefExpr 0x1c619074020 <col:17> 'int' lvalue Var 0x1c619063800 'skip' 'int'
|   |   |   |     `-IntegerLiteral 0x1c619074040 <col:24> 'int' 0
|   |   |   |-BinaryOperator 0x1c619074298 <line:1716:13, col:50> 'u64':'unsigned long long' '='
|   |   |   | |-DeclRefExpr 0x1c6190740e0 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1c619074280 <col:20, col:50> 'u64':'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1c619074260 <col:20, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1c619074248 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1c6190741d8 <col:20, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1c6190741c0 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1c619074100 <col:20> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1c619074208 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1c619074120 <col:28> 'const u8 *' lvalue ParmVar 0x1c619062ec8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1c6190741a0 <col:38, col:42> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1c619074188 <col:38> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1c619074140 <col:38> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1c619074160 <col:42> 'int' 192
|   |   |   |     `-IntegerLiteral 0x1c619074220 <col:50> 'int' 3
|   |   |   |-CompoundAssignOperator 0x1c619074470 <line:1717:13, col:51> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1c6190742b8 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1c619074458 <col:21, col:51> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1c619074438 <col:21, col:51> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1c619074420 <col:21, col:46> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1c6190743b0 <col:21, col:46> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1c619074398 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1c6190742d8 <col:21> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1c6190743e0 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1c6190742f8 <col:29> 'const u8 *' lvalue ParmVar 0x1c619062ec8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1c619074378 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1c619074360 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1c619074318 <col:39> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1c619074338 <col:43> 'int' 128
|   |   |   |     `-IntegerLiteral 0x1c6190743f8 <col:51> 'int' 2
|   |   |   |-CompoundAssignOperator 0x1c619074658 <line:1718:13, col:50> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1c6190744a0 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1c619074640 <col:21, col:50> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1c619074620 <col:21, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1c619074608 <col:21, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1c619074598 <col:21, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1c619074580 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1c6190744c0 <col:21> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1c6190745c8 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1c6190744e0 <col:29> 'const u8 *' lvalue ParmVar 0x1c619062ec8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x1c619074560 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x1c619074548 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x1c619074500 <col:39> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x1c619074520 <col:43> 'int' 64
|   |   |   |     `-IntegerLiteral 0x1c6190745e0 <col:50> 'int' 1
|   |   |   |-CompoundAssignOperator 0x1c619074798 <line:1719:13, col:40> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1c619074688 <col:13> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1c619074780 <col:21, col:40> 'unsigned long long' <IntegralCast>
|   |   |   |   `-CallExpr 0x1c619074720 <col:21, col:40> 'char'
|   |   |   |     |-ImplicitCastExpr 0x1c619074708 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1c6190746a8 <col:21> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |-ImplicitCastExpr 0x1c619074750 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x1c6190746c8 <col:29> 'const u8 *' lvalue ParmVar 0x1c619062ec8 'g_scalar' 'const u8 *'
|   |   |   |     `-ImplicitCastExpr 0x1c619074768 <col:39> 'int' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x1c6190746e8 <col:39> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |   |   |-CallExpr 0x1c6190748e8 <line:1721:13, col:54> 'void'
|   |   |   | |-ImplicitCastExpr 0x1c6190748d0 <col:13> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x1c6190747c8 <col:13> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x1c6190711b8 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |   |   | |-ImplicitCastExpr 0x1c619074928 <col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1c6190747e8 <col:26> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |   |   | |-ImplicitCastExpr 0x1c619074940 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x1c619074808 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x1c619074958 <col:36, col:48> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |   | | `-ArraySubscriptExpr 0x1c619074890 <col:36, col:48> 'const smallfelem [16][3]' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x1c619074878 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1c619074830 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' lvalue ParmVar 0x1c6190633e0 'g_pre_comp' 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
|   |   |   | |   `-IntegerLiteral 0x1c619074850 <col:47> 'int' 0
|   |   |   | `-ImplicitCastExpr 0x1c619074970 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x1c6190748b0 <col:51> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |   `-CallExpr 0x1c619064df8 <line:1723:13, line:1724:69> 'void'
|   |   |     |-ImplicitCastExpr 0x1c619064de0 <line:1723:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1c619074988 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x1c618f7bc58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |   |     |-ImplicitCastExpr 0x1c619064e68 <col:23, col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1c619074a08 <col:23, col:27> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c6190749f0 <col:23> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1c6190749a8 <col:23> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x1c6190749c8 <col:26> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1c619064e80 <col:30, col:34> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1c619074a88 <col:30, col:34> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c619074a70 <col:30> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1c619074a28 <col:30> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x1c619074a48 <col:33> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1c619064e98 <col:37, col:41> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1c619074b08 <col:37, col:41> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c619074af0 <col:37> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1c619074aa8 <col:37> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x1c619074ac8 <col:40> 'int' 2
|   |   |     |-ImplicitCastExpr 0x1c619064ec8 <line:1724:23, col:27> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1c619064eb0 <col:23, col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1c619074b88 <col:23, col:27> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1c619074b70 <col:23> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1c619074b28 <col:23> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x1c619074b48 <col:26> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1c619064ef8 <col:30, col:34> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1c619064ee0 <col:30, col:34> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1c619074c08 <col:30, col:34> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1c619074bf0 <col:30> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1c619074ba8 <col:30> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x1c619074bc8 <col:33> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1c619064f28 <col:37, col:41> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1c619064f10 <col:37, col:41> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1c619074c88 <col:37, col:41> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1c619074c70 <col:37> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1c619074c28 <col:37> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x1c619074c48 <col:40> 'int' 2
|   |   |     |-IntegerLiteral 0x1c619074ca8 <col:44> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1c619064f58 <col:47, col:52> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1c619064f40 <col:47, col:52> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1c619074d30 <col:47, col:52> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1c619074d18 <col:47> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1c619074cd0 <col:47> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |     |     `-IntegerLiteral 0x1c619074cf0 <col:51> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1c619064f88 <col:55, col:60> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1c619064f70 <col:55, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1c619074db0 <col:55, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1c619074d98 <col:55> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1c619074d50 <col:55> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |     |     `-IntegerLiteral 0x1c619074d70 <col:59> 'int' 1
|   |   |     `-ImplicitCastExpr 0x1c619064fb8 <col:63, col:68> 'const u64 *':'const u64 *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x1c619064fa0 <col:63, col:68> 'u64 *' <ArrayToPointerDecay>
|   |   |         `-ArraySubscriptExpr 0x1c619074e30 <col:63, col:68> 'smallfelem':'u64 [4]' lvalue
|   |   |           |-ImplicitCastExpr 0x1c619074e18 <col:63> 'smallfelem *' <ArrayToPointerDecay>
|   |   |           | `-DeclRefExpr 0x1c619074dd0 <col:63> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |   |           `-IntegerLiteral 0x1c619074df0 <col:67> 'int' 2
|   |   `-IfStmt 0x1c61907d750 <line:1728:9, line:1759:9>
|   |     |-BinaryOperator 0x1c619065178 <line:1728:13, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x1c619065160 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1c619065058 <col:13> 'const unsigned int' lvalue ParmVar 0x1c619062e50 'num_points' 'const unsigned int'
|   |     | `-ParenExpr 0x1c619065140 <col:27, col:38> 'int'
|   |     |   `-BinaryOperator 0x1c619065120 <col:28, col:37> 'int' '=='
|   |     |     |-BinaryOperator 0x1c6190650d8 <col:28, col:32> 'int' '%'
|   |     |     | |-ImplicitCastExpr 0x1c6190650c0 <col:28> 'int' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x1c619065078 <col:28> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |     |     | `-IntegerLiteral 0x1c619065098 <col:32> 'int' 5
|   |     |     `-IntegerLiteral 0x1c6190650f8 <col:37> 'int' 0
|   |     `-CompoundStmt 0x1c61907d738 <col:41, line:1759:9>
|   |       `-ForStmt 0x1c61907d700 <line:1730:13, line:1758:13>
|   |         |-BinaryOperator 0x1c619065210 <line:1730:18, col:24> 'unsigned int' '='
|   |         | |-DeclRefExpr 0x1c619065198 <col:18> 'unsigned int' lvalue Var 0x1c6190638b0 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x1c6190651f8 <col:24> 'unsigned int' <IntegralCast>
|   |         |   `-IntegerLiteral 0x1c6190651d0 <col:24> 'int' 0
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x1c6190652a0 <col:27, col:33> 'int' '<'
|   |         | |-ImplicitCastExpr 0x1c619065270 <col:27> 'unsigned int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x1c619065230 <col:27> 'unsigned int' lvalue Var 0x1c6190638b0 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x1c619065288 <col:33> 'unsigned int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x1c619065250 <col:33> 'const unsigned int' lvalue ParmVar 0x1c619062e50 'num_points' 'const unsigned int'
|   |         |-UnaryOperator 0x1c6190652e0 <col:45, col:47> 'unsigned int' prefix '++'
|   |         | `-DeclRefExpr 0x1c6190652c0 <col:47> 'unsigned int' lvalue Var 0x1c6190638b0 'num' 'unsigned int'
|   |         `-CompoundStmt 0x1c61907d690 <col:52, line:1758:13>
|   |           |-BinaryOperator 0x1c619065520 <line:1731:17, col:56> 'u64':'unsigned long long' '='
|   |           | |-DeclRefExpr 0x1c6190652f8 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1c619065508 <col:24, col:56> 'u64':'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1c6190654e8 <col:24, col:56> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1c6190654d0 <col:24, col:51> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1c619065460 <col:24, col:51> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1c619065448 <col:24> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1c619065318 <col:24> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x1c619065490 <col:32, col:43> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1c6190653a8 <col:32, col:43> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1c619065378 <col:32> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1c619065338 <col:32> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1c619062dd0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1c619065390 <col:40> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1c619065358 <col:40> 'unsigned int' lvalue Var 0x1c6190638b0 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x1c619065428 <col:46, col:50> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x1c619065410 <col:46> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x1c6190653c8 <col:46> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x1c6190653e8 <col:50> 'int' 4
|   |           |     `-IntegerLiteral 0x1c6190654a8 <col:56> 'int' 5
|   |           |-CompoundAssignOperator 0x1c619065768 <line:1732:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1c619065540 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1c619065750 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1c619065730 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1c619065718 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1c6190656a8 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1c619065690 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1c619065560 <col:25> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x1c6190656d8 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1c6190655f0 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1c6190655c0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1c619065580 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1c619062dd0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1c6190655d8 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1c6190655a0 <col:41> 'unsigned int' lvalue Var 0x1c6190638b0 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x1c619065670 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x1c619065658 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x1c619065610 <col:47> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x1c619065630 <col:51> 'int' 3
|   |           |     `-IntegerLiteral 0x1c6190656f0 <col:57> 'int' 4
|   |           |-CompoundAssignOperator 0x1c6190659c0 <line:1733:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1c619065798 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1c6190659a8 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1c619065988 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1c619065970 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1c619065900 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1c6190658e8 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1c6190657b8 <col:25> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x1c619065930 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1c619065848 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1c619065818 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1c6190657d8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1c619062dd0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1c619065830 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1c6190657f8 <col:41> 'unsigned int' lvalue Var 0x1c6190638b0 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x1c6190658c8 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x1c6190658b0 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x1c619065868 <col:47> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x1c619065888 <col:51> 'int' 2
|   |           |     `-IntegerLiteral 0x1c619065948 <col:57> 'int' 3
|   |           |-CompoundAssignOperator 0x1c619065c18 <line:1734:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1c6190659f0 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1c619065c00 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1c619065be0 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1c619065bc8 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1c619065b58 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1c619065b40 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1c619065a10 <col:25> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x1c619065b88 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1c619065aa0 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1c619065a70 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1c619065a30 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1c619062dd0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1c619065a88 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1c619065a50 <col:41> 'unsigned int' lvalue Var 0x1c6190638b0 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x1c619065b20 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x1c619065b08 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x1c619065ac0 <col:47> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x1c619065ae0 <col:51> 'int' 1
|   |           |     `-IntegerLiteral 0x1c619065ba0 <col:57> 'int' 2
|   |           |-CompoundAssignOperator 0x1c619065e28 <line:1735:17, col:53> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1c619065c48 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1c619065e10 <col:25, col:53> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1c619065df0 <col:25, col:53> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1c619065dd8 <col:25, col:48> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1c619065d50 <col:25, col:48> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1c619065d38 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1c619065c68 <col:25> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x1c619065d80 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1c619065cf8 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1c619065cc8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1c619065c88 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1c619062dd0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1c619065ce0 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1c619065ca8 <col:41> 'unsigned int' lvalue Var 0x1c6190638b0 'num' 'unsigned int'
|   |           |     |   `-ImplicitCastExpr 0x1c619065d98 <col:47> 'int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x1c619065d18 <col:47> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |           |     `-IntegerLiteral 0x1c619065db0 <col:53> 'int' 1
|   |           |-CompoundAssignOperator 0x1c619066020 <line:1736:17, col:52> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1c619065e58 <col:17> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1c619066008 <col:25, col:52> 'unsigned long long' <IntegralCast>
|   |           |   `-CallExpr 0x1c619065fc0 <col:25, col:52> 'char'
|   |           |     |-ImplicitCastExpr 0x1c619065fa8 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     | `-DeclRefExpr 0x1c619065e78 <col:25> 'char (const u8 *, int)' Function 0x1c619072668 'get_bit' 'char (const u8 *, int)'
|   |           |     |-ImplicitCastExpr 0x1c619065ff0 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     | `-ArraySubscriptExpr 0x1c619065f08 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |-ImplicitCastExpr 0x1c619065ed8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   | `-DeclRefExpr 0x1c619065e98 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1c619062dd0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   `-ImplicitCastExpr 0x1c619065ef0 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x1c619065eb8 <col:41> 'unsigned int' lvalue Var 0x1c6190638b0 'num' 'unsigned int'
|   |           |     `-BinaryOperator 0x1c619065f88 <col:47, col:51> 'int' '-'
|   |           |       |-ImplicitCastExpr 0x1c619065f70 <col:47> 'int' <LValueToRValue>
|   |           |       | `-DeclRefExpr 0x1c619065f28 <col:47> 'int' lvalue Var 0x1c619063780 'i' 'int'
|   |           |       `-IntegerLiteral 0x1c619065f48 <col:51> 'int' 1
|   |           |-CallExpr 0x1c619066170 <line:1737:17, col:68> 'void'
|   |           | |-ImplicitCastExpr 0x1c619066158 <col:17> 'void (*)(unsigned char *, unsigned char *, unsigned char)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1c619066050 <col:17> 'void (unsigned char *, unsigned char *, unsigned char)' Function 0x1c618f158f8 'ec_GFp_nistp_recode_scalar_bits' 'void (unsigned char *, unsigned char *, unsigned char)'
|   |           | |-UnaryOperator 0x1c6190660a8 <col:49, col:50> 'u8 *' prefix '&' cannot overflow
|   |           | | `-DeclRefExpr 0x1c619066070 <col:50> 'u8':'unsigned char' lvalue Var 0x1c619063e68 'sign' 'u8':'unsigned char'
|   |           | |-UnaryOperator 0x1c6190660f8 <col:56, col:57> 'u8 *' prefix '&' cannot overflow
|   |           | | `-DeclRefExpr 0x1c6190660c0 <col:57> 'u8':'unsigned char' lvalue Var 0x1c619063ee0 'digit' 'u8':'unsigned char'
|   |           | `-ImplicitCastExpr 0x1c6190661c0 <col:64> 'unsigned char' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x1c6190661a8 <col:64> 'u64':'unsigned long long' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x1c619066110 <col:64> 'u64':'unsigned long long' lvalue Var 0x1c619063dd8 'bits' 'u64':'unsigned long long'
|   |           |-CallExpr 0x1c619066308 <line:1742:17, col:59> 'void'
|   |           | |-ImplicitCastExpr 0x1c6190662f0 <col:17> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1c6190661d8 <col:17> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x1c6190711b8 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |           | |-ImplicitCastExpr 0x1c619066360 <col:30> 'u64':'unsigned long long' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x1c619066348 <col:30> 'u8':'unsigned char' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x1c6190661f8 <col:30> 'u8':'unsigned char' lvalue Var 0x1c619063ee0 'digit' 'u8':'unsigned char'
|   |           | |-ImplicitCastExpr 0x1c619066378 <col:37> 'unsigned int' <IntegralCast>
|   |           | | `-IntegerLiteral 0x1c619066218 <col:37> 'int' 17
|   |           | |-ImplicitCastExpr 0x1c619066390 <col:41, col:53> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x1c6190662b0 <col:41, col:53> 'const smallfelem [17][3]' lvalue
|   |           | |   |-ImplicitCastExpr 0x1c619066280 <col:41> 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]' <LValueToRValue>
|   |           | |   | `-DeclRefExpr 0x1c619066240 <col:41> 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]' lvalue ParmVar 0x1c6190631e0 'pre_comp' 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]'
|   |           | |   `-ImplicitCastExpr 0x1c619066298 <col:50> 'unsigned int' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x1c619066260 <col:50> 'unsigned int' lvalue Var 0x1c6190638b0 'num' 'unsigned int'
|   |           | `-ImplicitCastExpr 0x1c6190663a8 <col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |           |   `-DeclRefExpr 0x1c6190662d0 <col:56> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |           |-CallExpr 0x1c6190664b0 <line:1743:17, col:44> 'void'
|   |           | |-ImplicitCastExpr 0x1c619066498 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1c6190663c0 <col:17> 'void (limb *, const u64 *)' Function 0x1c618e76bc0 'smallfelem_neg' 'void (limb *, const u64 *)'
|   |           | |-ImplicitCastExpr 0x1c6190664e0 <col:32> 'limb *' <ArrayToPointerDecay>
|   |           | | `-DeclRefExpr 0x1c6190663e0 <col:32> 'felem':'limb [4]' lvalue Var 0x1c619063c50 'ftmp' 'felem':'limb [4]'
|   |           | `-ImplicitCastExpr 0x1c619066510 <col:38, col:43> 'const u64 *':'const u64 *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x1c6190664f8 <col:38, col:43> 'u64 *' <ArrayToPointerDecay>
|   |           |     `-ArraySubscriptExpr 0x1c619066478 <col:38, col:43> 'smallfelem':'u64 [4]' lvalue
|   |           |       |-ImplicitCastExpr 0x1c619066460 <col:38> 'smallfelem *' <ArrayToPointerDecay>
|   |           |       | `-DeclRefExpr 0x1c619066418 <col:38> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |           |       `-IntegerLiteral 0x1c619066438 <col:42> 'int' 1
|   |           |-CallExpr 0x1c6190666f8 <line:1745:17, col:73> 'void'
|   |           | |-ImplicitCastExpr 0x1c6190666e0 <col:17> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1c619066528 <col:17> 'void (limb *, const u64 *, limb)' Function 0x1c618f7ad18 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   |           | |-ImplicitCastExpr 0x1c619066730 <col:40> 'limb *' <ArrayToPointerDecay>
|   |           | | `-DeclRefExpr 0x1c619066548 <col:40> 'felem':'limb [4]' lvalue Var 0x1c619063c50 'ftmp' 'felem':'limb [4]'
|   |           | |-ImplicitCastExpr 0x1c619066760 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |           | | `-ImplicitCastExpr 0x1c619066748 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |           | |   `-ArraySubscriptExpr 0x1c6190665c8 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |           | |     |-ImplicitCastExpr 0x1c6190665b0 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |           | |     | `-DeclRefExpr 0x1c619066568 <col:46> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |           | |     `-IntegerLiteral 0x1c619066588 <col:50> 'int' 1
|   |           | `-ParenExpr 0x1c6190666c0 <col:54, col:72> 'int'
|   |           |   `-BinaryOperator 0x1c6190666a0 <col:55, col:71> 'int' '-'
|   |           |     |-ParenExpr 0x1c619066658 <col:55, col:67> 'limb':'int'
|   |           |     | `-CStyleCastExpr 0x1c619066630 <col:56, col:63> 'limb':'int' <IntegralCast>
|   |           |     |   `-ImplicitCastExpr 0x1c619066618 <col:63> 'u8':'unsigned char' <LValueToRValue> part_of_explicit_cast
|   |           |     |     `-DeclRefExpr 0x1c6190665e8 <col:63> 'u8':'unsigned char' lvalue Var 0x1c619063e68 'sign' 'u8':'unsigned char'
|   |           |     `-IntegerLiteral 0x1c619066678 <col:71> 'int' 1
|   |           |-CallExpr 0x1c619066850 <line:1746:17, col:44> 'void'
|   |           | |-ImplicitCastExpr 0x1c619066838 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1c619066778 <col:17> 'void (u64 *, const limb *)' Function 0x1c618f66ee8 'felem_contract' 'void (u64 *, const limb *)'
|   |           | |-ImplicitCastExpr 0x1c619066880 <col:32, col:37> 'u64 *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x1c6190667f8 <col:32, col:37> 'smallfelem':'u64 [4]' lvalue
|   |           | |   |-ImplicitCastExpr 0x1c6190667e0 <col:32> 'smallfelem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x1c619066798 <col:32> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |           | |   `-IntegerLiteral 0x1c6190667b8 <col:36> 'int' 1
|   |           | `-ImplicitCastExpr 0x1c6190668b0 <col:40> 'const limb *':'const limb *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x1c619066898 <col:40> 'limb *' <ArrayToPointerDecay>
|   |           |     `-DeclRefExpr 0x1c619066818 <col:40> 'felem':'limb [4]' lvalue Var 0x1c619063c50 'ftmp' 'felem':'limb [4]'
|   |           `-IfStmt 0x1c61907d668 <line:1748:17, line:1757:17> has_else
|   |             |-UnaryOperator 0x1c619066900 <line:1748:21, col:22> 'int' prefix '!' cannot overflow
|   |             | `-ImplicitCastExpr 0x1c6190668e8 <col:22> 'int' <LValueToRValue>
|   |             |   `-DeclRefExpr 0x1c6190668c8 <col:22> 'int' lvalue Var 0x1c619063800 'skip' 'int'
|   |             |-CompoundStmt 0x1c61907d0a8 <col:28, line:1752:17>
|   |             | `-CallExpr 0x1c61907ceb8 <line:1749:21, line:1751:60> 'void'
|   |             |   |-ImplicitCastExpr 0x1c61907cea0 <line:1749:21> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x1c619066918 <col:21> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x1c618f7bc58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |             |   |-ImplicitCastExpr 0x1c61907cf28 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1c619066998 <col:31, col:35> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1c619066980 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x1c619066938 <col:31> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x1c619066958 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x1c61907cf40 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1c619066a18 <col:38, col:42> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1c619066a00 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x1c6190669b8 <col:38> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x1c6190669d8 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x1c61907cf58 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1c619066a98 <col:45, col:49> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1c619066a80 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x1c619066a38 <col:45> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x1c619066a58 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x1c61907cf88 <line:1750:31, col:35> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1c61907cf70 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1c619066b18 <col:31, col:35> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1c619066b00 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1c619066ab8 <col:31> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x1c619066ad8 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x1c61907cfb8 <col:38, col:42> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1c61907cfa0 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1c619066b98 <col:38, col:42> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1c619066b80 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1c619066b38 <col:38> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x1c619066b58 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x1c61907cfe8 <col:45, col:49> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1c61907cfd0 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1c619066c18 <col:45, col:49> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1c619066c00 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1c619066bb8 <col:45> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x1c619066bd8 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x1c61907d000 <line:1751:31> 'int' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x1c619066c38 <col:31> 'const int' lvalue ParmVar 0x1c619062f48 'mixed' 'const int'
|   |             |   |-ImplicitCastExpr 0x1c61907d030 <col:38, col:43> 'const u64 *':'const u64 *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1c61907d018 <col:38, col:43> 'u64 *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1c619066cb8 <col:38, col:43> 'smallfelem':'u64 [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1c619066ca0 <col:38> 'smallfelem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1c619066c58 <col:38> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |             |   |     `-IntegerLiteral 0x1c619066c78 <col:42> 'int' 0
|   |             |   |-ImplicitCastExpr 0x1c61907d060 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1c61907d048 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1c619066d38 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1c619066d20 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1c619066cd8 <col:46> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |             |   |     `-IntegerLiteral 0x1c619066cf8 <col:50> 'int' 1
|   |             |   `-ImplicitCastExpr 0x1c61907d090 <col:54, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x1c61907d078 <col:54, col:59> 'u64 *' <ArrayToPointerDecay>
|   |             |       `-ArraySubscriptExpr 0x1c619066db8 <col:54, col:59> 'smallfelem':'u64 [4]' lvalue
|   |             |         |-ImplicitCastExpr 0x1c619066da0 <col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |             |         | `-DeclRefExpr 0x1c619066d58 <col:54> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |             |         `-IntegerLiteral 0x1c619066d78 <col:58> 'int' 2
|   |             `-CompoundStmt 0x1c61907d638 <line:1752:24, line:1757:17>
|   |               |-CallExpr 0x1c61907d1f8 <line:1753:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x1c61907d1e0 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x1c61907d0c0 <col:21> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x1c61907d228 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x1c61907d140 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x1c61907d128 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x1c61907d0e0 <col:39> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x1c61907d100 <col:42> 'int' 0
|   |               | `-ImplicitCastExpr 0x1c61907d258 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x1c61907d240 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x1c61907d1c0 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x1c61907d1a8 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x1c61907d160 <col:46> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x1c61907d180 <col:50> 'int' 0
|   |               |-CallExpr 0x1c61907d3a8 <line:1754:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x1c61907d390 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x1c61907d270 <col:21> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x1c61907d3d8 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x1c61907d2f0 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x1c61907d2d8 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x1c61907d290 <col:39> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x1c61907d2b0 <col:42> 'int' 1
|   |               | `-ImplicitCastExpr 0x1c61907d408 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x1c61907d3f0 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x1c61907d370 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x1c61907d358 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x1c61907d310 <col:46> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x1c61907d330 <col:50> 'int' 1
|   |               |-CallExpr 0x1c61907d558 <line:1755:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x1c61907d540 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x1c61907d420 <col:21> 'void (limb *, const u64 *)' Function 0x1c618e80aa0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x1c61907d588 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x1c61907d4a0 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x1c61907d488 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x1c61907d440 <col:39> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x1c61907d460 <col:42> 'int' 2
|   |               | `-ImplicitCastExpr 0x1c61907d5b8 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x1c61907d5a0 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x1c61907d520 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x1c61907d508 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x1c61907d4c0 <col:46> 'smallfelem [3]' lvalue Var 0x1c619063d48 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x1c61907d4e0 <col:50> 'int' 2
|   |               `-BinaryOperator 0x1c61907d618 <line:1756:21, col:28> 'int' '='
|   |                 |-DeclRefExpr 0x1c61907d5d0 <col:21> 'int' lvalue Var 0x1c619063800 'skip' 'int'
|   |                 `-IntegerLiteral 0x1c61907d5f0 <col:28> 'int' 0
|   |-CallExpr 0x1c61907d8a0 <line:1761:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c61907d888 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c61907d7c8 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c61907d8d0 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c61907d7e8 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1c619072b80 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1c61907d900 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c61907d8e8 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x1c61907d868 <col:25, col:29> 'felem':'limb [4]' lvalue
|   |       |-ImplicitCastExpr 0x1c61907d850 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c61907d808 <col:25> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x1c61907d828 <col:28> 'int' 0
|   |-CallExpr 0x1c61907d9f0 <line:1762:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1c61907d9d8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c61907d918 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c61907da20 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1c61907d938 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1c619072bf8 'y_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1c61907da50 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c61907da38 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x1c61907d9b8 <col:25, col:29> 'felem':'limb [4]' lvalue
|   |       |-ImplicitCastExpr 0x1c61907d9a0 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1c61907d958 <col:25> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x1c61907d978 <col:28> 'int' 1
|   `-CallExpr 0x1c61907db40 <line:1763:5, col:30> 'void'
|     |-ImplicitCastExpr 0x1c61907db28 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c61907da68 <col:5> 'void (limb *, const limb *)' Function 0x1c618e73968 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1c61907db70 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1c61907da88 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1c619072c70 'z_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1c61907dba0 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1c61907db88 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|         `-ArraySubscriptExpr 0x1c61907db08 <col:25, col:29> 'felem':'limb [4]' lvalue
|           |-ImplicitCastExpr 0x1c61907daf0 <col:25> 'felem *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x1c61907daa8 <col:25> 'felem [3]' lvalue Var 0x1c619063bd8 'nq' 'felem [3]'
|           `-IntegerLiteral 0x1c61907dac8 <col:28> 'int' 2
|-RecordDecl 0x1c61907dc28 prev 0x1c618effba8 <line:1767:1, line:1771:1> line:1767:8 invalid struct nistp256_pre_comp_st definition
| |-FieldDecl 0x1c61907de18 <line:1768:5, col:35> col:16 referenced g_pre_comp 'smallfelem [2][16][3]'
| |-FieldDecl 0x1c61907de88 <line:1769:5, col:9> col:9 referenced references 'int'
| `-FieldDecl 0x1c61907def8 <line:1770:5, col:20> col:20 invalid lock 'int *'
|-FunctionDecl 0x1c61907e020 <line:1773:1, line:1829:1> line:1773:18 invalid EC_GFp_nistp256_method 'const int *(void)'
| `-CompoundStmt 0x1c61907e358 <line:1774:1, line:1829:1>
|   `-DeclStmt 0x1c61907e310 <line:1775:5, line:1826:6>
|     `-VarDecl 0x1c61907e0f0 <line:1775:5, col:28> col:28 invalid ret 'const int' static
|-FunctionDecl 0x1c61907e3e8 <line:1836:1, line:1854:1> line:1836:27 used nistp256_pre_comp_new 'NISTP256_PRE_COMP *()' static
| |-CompoundStmt 0x1c619082f18 <line:1837:1, line:1854:1>
| | |-DeclStmt 0x1c61907e740 <line:1838:5, col:58>
| | | `-VarDecl 0x1c61907e4b0 <col:5, col:57> col:24 used ret 'NISTP256_PRE_COMP *' cinit
| | |   `-ImplicitCastExpr 0x1c61907e728 <col:30, col:57> 'NISTP256_PRE_COMP *' <IntegralToPointer>
| | |     `-CallExpr 0x1c61907e700 <col:30, col:57> 'int'
| | |       |-ImplicitCastExpr 0x1c61907e6e8 <col:30> 'int (*)()' <FunctionToPointerDecay>
| | |       | `-DeclRefExpr 0x1c61907e608 <col:30> 'int ()' Function 0x1c61907e540 'OPENSSL_zalloc' 'int ()'
| | |       `-UnaryExprOrTypeTraitExpr 0x1c61907e698 <col:45, col:56> 'unsigned long long' sizeof
| | |         `-ParenExpr 0x1c61907e678 <col:51, col:56> 'NISTP256_PRE_COMP':'struct nistp256_pre_comp_st' lvalue
| | |           `-UnaryOperator 0x1c61907e660 <col:52, col:53> 'NISTP256_PRE_COMP':'struct nistp256_pre_comp_st' lvalue prefix '*' cannot overflow
| | |             `-ImplicitCastExpr 0x1c61907e648 <col:53> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |               `-DeclRefExpr 0x1c61907e628 <col:53> 'NISTP256_PRE_COMP *' lvalue Var 0x1c61907e4b0 'ret' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
| | |-IfStmt 0x1c61907e8e8 <line:1840:5, line:1843:5>
| | | |-BinaryOperator 0x1c61907e848 <line:1840:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
| | | | |-ImplicitCastExpr 0x1c61907e818 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1840:9> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x1c61907e758 <col:9> 'NISTP256_PRE_COMP *' lvalue Var 0x1c61907e4b0 'ret' 'NISTP256_PRE_COMP *'
| | | | `-ImplicitCastExpr 0x1c61907e830 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
| | | |   `-ParenExpr 0x1c61907e7f8 <col:17, col:27> 'void *'
| | | |     `-CStyleCastExpr 0x1c61907e7d0 <col:18, col:26> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x1c61907e790 <col:26> 'int' 0
| | | `-CompoundStmt 0x1c61907e8d0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1840:22, line:1843:5>
| | |   `-ReturnStmt 0x1c61907e8c0 <line:1842:9, col:16>
| | |     `-ImplicitCastExpr 0x1c61907e8a8 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |       `-DeclRefExpr 0x1c61907e888 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x1c61907e4b0 'ret' 'NISTP256_PRE_COMP *'
| | |-BinaryOperator 0x1c61907e990 <line:1845:5, col:23> 'int' '='
| | | |-MemberExpr 0x1c61907e938 <col:5, col:10> 'int' lvalue ->references 0x1c61907de88
| | | | `-ImplicitCastExpr 0x1c61907e920 <col:5> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x1c61907e900 <col:5> 'NISTP256_PRE_COMP *' lvalue Var 0x1c61907e4b0 'ret' 'NISTP256_PRE_COMP *'
| | | `-IntegerLiteral 0x1c61907e968 <col:23> 'int' 1
| | |-IfStmt 0x1c61907ee80 <line:1848:5, line:1852:5>
| | | |-OpaqueValueExpr 0x1c61907ee68 <<invalid sloc>> '_Bool'
| | | `-CompoundStmt 0x1c61907ee48 <line:1848:28, line:1852:5>
| | |   |-CallExpr 0x1c61907ed58 <line:1850:9, col:25> 'int'
| | |   | |-ImplicitCastExpr 0x1c61907ed40 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x1c61907ed00 <col:9> 'int ()' Function 0x1c61907ec38 'OPENSSL_free' 'int ()'
| | |   | `-ImplicitCastExpr 0x1c61907ed80 <col:22> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x1c61907ed20 <col:22> 'NISTP256_PRE_COMP *' lvalue Var 0x1c61907e4b0 'ret' 'NISTP256_PRE_COMP *'
| | |   `-ReturnStmt 0x1c61907ee38 <line:1851:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27>
| | |     `-ImplicitCastExpr 0x1c61907ee20 <col:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
| | |       `-ParenExpr 0x1c61907ee00 <col:17, col:27> 'void *'
| | |         `-CStyleCastExpr 0x1c61907edd8 <col:18, col:26> 'void *' <NullToPointer>
| | |           `-IntegerLiteral 0x1c61907ed98 <col:26> 'int' 0
| | `-ReturnStmt 0x1c619082f08 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1853:5, col:12>
| |   `-ImplicitCastExpr 0x1c619082ef0 <col:12> 'NISTP256_PRE_COMP *' <LValueToRValue>
| |     `-DeclRefExpr 0x1c619082ed0 <col:12> 'NISTP256_PRE_COMP *' lvalue Var 0x1c61907e4b0 'ret' 'NISTP256_PRE_COMP *'
| `-FullComment 0x1c6190887a8 <line:1831:4, col:78>
|   `-ParagraphComment 0x1c619088780 <col:4, col:78>
|     `-TextComment 0x1c619088758 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x1c619083008 prev 0x1c618efcb88 <line:1856:1, line:1862:1> line:1856:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| |-ParmVarDecl 0x1c619082f60 <col:45, col:64> col:64 used p 'NISTP256_PRE_COMP *'
| `-CompoundStmt 0x1c6190834c8 <line:1857:1, line:1862:1>
|   |-DeclStmt 0x1c619083130 <line:1858:5, col:10>
|   | `-VarDecl 0x1c6190830c8 <col:5, col:9> col:9 used i 'int'
|   `-ReturnStmt 0x1c6190834b8 <line:1861:5, col:12>
|     `-ImplicitCastExpr 0x1c6190834a0 <col:12> 'NISTP256_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x1c619083480 <col:12> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x1c619082f60 'p' 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1c6190835a0 prev 0x1c618efe230 <line:1864:1, line:1879:1> line:1864:6 used EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| |-ParmVarDecl 0x1c6190834f8 <col:32, col:51> col:51 used pre 'NISTP256_PRE_COMP *'
| `-CompoundStmt 0x1c619083f68 <line:1865:1, line:1879:1>
|   |-DeclStmt 0x1c6190836c8 <line:1866:5, col:10>
|   | `-VarDecl 0x1c619083660 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x1c6190837e8 <line:1868:5, line:1869:9>
|   | |-BinaryOperator 0x1c6190837b8 <line:1868:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1c619083788 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1868:9> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c6190836e0 <col:9> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x1c6190834f8 'pre' 'NISTP256_PRE_COMP *'
|   | | `-ImplicitCastExpr 0x1c6190837a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x1c619083768 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1c619083740 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1c619083700 <col:26> 'int' 0
|   | `-ReturnStmt 0x1c6190837d8 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:1869:9>
|   |-IfStmt 0x1c619083b70 <line:1873:5, line:1874:9>
|   | |-BinaryOperator 0x1c619083b40 <line:1873:9, col:13> 'int' '>'
|   | | |-ImplicitCastExpr 0x1c619083b28 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c619083ae0 <col:9> 'int' lvalue Var 0x1c619083660 'i' 'int'
|   | | `-IntegerLiteral 0x1c619083b00 <col:13> 'int' 0
|   | `-ReturnStmt 0x1c619083b60 <line:1874:9>
|   |-CallExpr 0x1c619083d30 <line:1875:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x1c619083d18 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619083c78 <col:5> 'int ()' Function 0x1c619083bb0 'REF_ASSERT_ISNT' 'int ()'
|   | `-BinaryOperator 0x1c619083cf8 <col:21, col:25> 'int' '<'
|   |   |-ImplicitCastExpr 0x1c619083ce0 <col:21> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c619083c98 <col:21> 'int' lvalue Var 0x1c619083660 'i' 'int'
|   |   `-IntegerLiteral 0x1c619083cb8 <col:25> 'int' 0
|   `-CallExpr 0x1c619083ef8 <line:1878:5, col:21> 'int'
|     |-ImplicitCastExpr 0x1c619083ee0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c619083ea0 <col:5> 'int ()' Function 0x1c61907ec38 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x1c619083f20 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x1c619083ec0 <col:18> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x1c6190834f8 'pre' 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1c619084050 <line:1886:1, line:1892:1> line:1886:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| |-ParmVarDecl 0x1c619083fb8 <col:32, col:42> col:42 invalid group 'int *'
| |-CompoundStmt 0x1c619084250 <line:1887:1, line:1892:1>
| | |-DeclStmt 0x1c619084190 <line:1888:5, col:12>
| | | `-VarDecl 0x1c619084128 <col:5, col:9> col:9 used ret 'int'
| | `-ReturnStmt 0x1c619084240 <line:1891:5, col:12>
| |   `-ImplicitCastExpr 0x1c619084228 <col:12> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x1c619084208 <col:12> 'int' lvalue Var 0x1c619084128 'ret' 'int'
| `-FullComment 0x1c619088870 <line:1881:4, col:78>
|   `-ParagraphComment 0x1c619088848 <col:4, col:78>
|     `-TextComment 0x1c619088820 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x1c619084540 <line:1894:1, line:1924:1> line:1894:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1c619084288 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1c619084308 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1c619084388 <line:1895:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1c619084408 <col:54, col:68> col:68 invalid b 'const int *'
| |-ParmVarDecl 0x1c619084488 <line:1896:37, col:45> col:45 invalid ctx 'int *'
| `-CompoundStmt 0x1c61907f5c8 <line:1897:1, line:1924:1>
|   |-DeclStmt 0x1c6190846c8 <line:1898:5, col:16>
|   | `-VarDecl 0x1c619084638 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1c6190846a0 <col:15> 'int' 0
|   |-IfStmt 0x1c619084a40 <line:1902:5, line:1904:20>
|   | |-OpaqueValueExpr 0x1c619084a28 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x1c619084a10 <line:1903:9, line:1904:20>
|   |   |-OpaqueValueExpr 0x1c6190849f8 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x1c6190849e8 <col:13, col:20>
|   |     `-IntegerLiteral 0x1c6190849c0 <col:20> 'int' 0
|   |-IfStmt 0x1c61907eeb0 <line:1906:5, line:1909:14>
|   | |-OpaqueValueExpr 0x1c619084eb8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1c619084ea0 <col:9, col:14> 'err' 0x1c619084e50
|   |-IfStmt 0x1c61907f2f0 <line:1913:5, line:1917:5>
|   | |-OpaqueValueExpr 0x1c61907f2d8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1c61907f2c0 <line:1913:79, line:1917:5>
|   |   `-GotoStmt 0x1c61907f2a8 <line:1916:9, col:14> 'err' 0x1c619084e50
|   |-LabelStmt 0x1c61907f458 <line:1920:2, col:5> 'err'
|   | `-NullStmt 0x1c61907f450 <col:5>
|   `-ReturnStmt 0x1c61907f5b8 <line:1923:5, col:12>
|     `-ImplicitCastExpr 0x1c61907f5a0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1c61907f580 <col:12> 'int' lvalue Var 0x1c619084638 'ret' 'int'
|-FunctionDecl 0x1c61907f8d8 <line:1930:1, line:1973:1> line:1930:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1c61907f620 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1c61907f6a0 <line:1931:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1c61907f720 <line:1932:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1c61907f7a0 <col:61, col:69> col:69 invalid y 'int *'
| |-ParmVarDecl 0x1c61907f820 <line:1933:50, col:58> col:58 invalid ctx 'int *'
| `-CompoundStmt 0x1c619078f30 <line:1934:1, line:1973:1>
|   |-DeclStmt 0x1c61907fbc0 <line:1935:5, col:29>
|   | |-VarDecl 0x1c61907f9c8 <col:5, col:11> col:11 used z1 'felem':'limb [4]'
|   | |-VarDecl 0x1c61907fa40 <col:5, col:15> col:15 used z2 'felem':'limb [4]'
|   | |-VarDecl 0x1c61907fab8 <col:5, col:19> col:19 used x_in 'felem':'limb [4]'
|   | `-VarDecl 0x1c61907fb30 <col:5, col:25> col:25 used y_in 'felem':'limb [4]'
|   |-DeclStmt 0x1c61907fce0 <line:1936:5, col:28>
|   | |-VarDecl 0x1c61907fbe8 <col:5, col:16> col:16 used x_out 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x1c61907fc60 <col:5, col:23> col:23 used y_out 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x1c61907fd70 <line:1937:5, col:18>
|   | `-VarDecl 0x1c61907fd08 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   |-IfStmt 0x1c61907ff20 <line:1939:5, line:1943:5>
|   | |-OpaqueValueExpr 0x1c61907ff08 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1c61907fef0 <line:1939:48, line:1943:5>
|   |   `-ReturnStmt 0x1c61907fee0 <line:1942:9, col:16>
|   |     `-IntegerLiteral 0x1c61907feb8 <col:16> 'int' 0
|   |-IfStmt 0x1c619080030 <line:1944:5, line:1946:16>
|   | |-OpaqueValueExpr 0x1c619080018 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1c619080008 <col:9, col:16>
|   |   `-IntegerLiteral 0x1c61907ffe0 <col:16> 'int' 0
|   |-CallExpr 0x1c6190800d8 <line:1947:5, col:21> 'void'
|   | |-ImplicitCastExpr 0x1c6190800c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080048 <col:5> 'void (limb *, const limb *)' Function 0x1c618f76350 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619080108 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080068 <col:15> 'felem':'limb [4]' lvalue Var 0x1c61907fa40 'z2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c619080138 <col:19> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080120 <col:19> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c6190800a0 <col:19> 'felem':'limb [4]' lvalue Var 0x1c61907f9c8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x1c6190801e0 <line:1948:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1c6190801c8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080150 <col:5> 'void (limb *, const limb *)' Function 0x1c618e84448 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619080210 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080170 <col:18> 'longfelem':'limb [8]' lvalue Var 0x1c61907fd08 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x1c619080240 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080228 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c6190801a8 <col:23> 'felem':'limb [4]' lvalue Var 0x1c61907fa40 'z2' 'felem':'limb [4]'
|   |-CallExpr 0x1c6190802d0 <line:1949:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1c6190802b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080258 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619080300 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080278 <col:18> 'felem':'limb [4]' lvalue Var 0x1c61907f9c8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c619080330 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080318 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619080298 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c61907fd08 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c6190803e0 <line:1950:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c6190803c8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080348 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619080418 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080368 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c61907fd08 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c619080448 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c619080430 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c619080388 <col:20> 'felem':'limb [4]' lvalue Var 0x1c61907fab8 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c619080478 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080460 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c6190803a8 <col:26> 'felem':'limb [4]' lvalue Var 0x1c61907f9c8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x1c619080508 <line:1951:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c6190804f0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080490 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619080538 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c6190804b0 <col:18> 'felem':'limb [4]' lvalue Var 0x1c61907fab8 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c619080568 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080550 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c6190804d0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c61907fd08 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c619080610 <line:1952:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c6190805f8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080580 <col:5> 'void (u64 *, const limb *)' Function 0x1c618f66ee8 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619080640 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c6190805a0 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x1c61907fbe8 'x_out' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c619080670 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080658 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c6190805d8 <col:27> 'felem':'limb [4]' lvalue Var 0x1c61907fab8 'x_in' 'felem':'limb [4]'
|   |-IfStmt 0x1c619080800 <line:1953:5, line:1959:5>
|   | |-OpaqueValueExpr 0x1c6190807e8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1c6190807d0 <line:1953:20, line:1959:5>
|   |   `-IfStmt 0x1c6190807b8 <line:1954:9, line:1958:9>
|   |     |-OpaqueValueExpr 0x1c6190807a0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1c619080788 <line:1954:42, line:1958:9>
|   |       `-ReturnStmt 0x1c619080778 <line:1957:13, col:20>
|   |         `-IntegerLiteral 0x1c619080750 <col:20> 'int' 0
|   |-CallExpr 0x1c6190808b0 <line:1960:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1c619080898 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080818 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c6190808e8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080838 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c61907fd08 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c619080918 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c619080900 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c619080858 <col:20> 'felem':'limb [4]' lvalue Var 0x1c61907f9c8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c619080948 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080930 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619080878 <col:24> 'felem':'limb [4]' lvalue Var 0x1c61907fa40 'z2' 'felem':'limb [4]'
|   |-CallExpr 0x1c6190809d8 <line:1961:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1c6190809c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080960 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619080a08 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080980 <col:18> 'felem':'limb [4]' lvalue Var 0x1c61907f9c8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c619080a38 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080a20 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c6190809a0 <col:22> 'longfelem':'limb [8]' lvalue Var 0x1c61907fd08 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c619080ae8 <line:1962:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1c619080ad0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080a50 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x1c618f740c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619080b20 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080a70 <col:15> 'longfelem':'limb [8]' lvalue Var 0x1c61907fd08 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x1c619080b50 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1c619080b38 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1c619080a90 <col:20> 'felem':'limb [4]' lvalue Var 0x1c61907fb30 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c619080b80 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080b68 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619080ab0 <col:26> 'felem':'limb [4]' lvalue Var 0x1c61907f9c8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x1c619080c10 <line:1963:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1c619080bf8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080b98 <col:5> 'void (limb *, const limb *)' Function 0x1c618f6d400 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619080c40 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080bb8 <col:18> 'felem':'limb [4]' lvalue Var 0x1c61907fb30 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1c619080c70 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080c58 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619080bd8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x1c61907fd08 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x1c619080d18 <line:1964:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c619080d00 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080c88 <col:5> 'void (u64 *, const limb *)' Function 0x1c618f66ee8 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619080d48 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c619080ca8 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x1c61907fc60 'y_out' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c619080d78 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619080d60 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619080ce0 <col:27> 'felem':'limb [4]' lvalue Var 0x1c61907fb30 'y_in' 'felem':'limb [4]'
|   |-IfStmt 0x1c619078ee0 <line:1965:5, line:1971:5>
|   | |-OpaqueValueExpr 0x1c619078ec8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1c619078eb0 <line:1965:20, line:1971:5>
|   |   `-IfStmt 0x1c619078e98 <line:1966:9, line:1970:9>
|   |     |-OpaqueValueExpr 0x1c619078e80 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1c619080e90 <line:1966:42, line:1970:9>
|   |       `-ReturnStmt 0x1c619080e80 <line:1969:13, col:20>
|   |         `-IntegerLiteral 0x1c619080e58 <col:20> 'int' 0
|   `-ReturnStmt 0x1c619078f20 <line:1972:5, col:12>
|     `-IntegerLiteral 0x1c619078ef8 <col:12> 'int' 1
|-FunctionDecl 0x1c619079438 <line:1976:1, line:2002:1> line:1976:13 used make_points_affine 'void (size_t, smallfelem (*)[3], smallfelem *)' static
| |-ParmVarDecl 0x1c619078fe8 <col:32, col:39> col:39 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c6190791b0 <col:44, col:65> col:55 used points 'smallfelem (*)[3]':'smallfelem (*)[3]'
| |-ParmVarDecl 0x1c6190792d0 <line:1977:32, col:59> col:43 used tmp_smallfelems 'smallfelem *':'smallfelem *'
| `-CompoundStmt 0x1c61907a228 <line:1978:1, line:2002:1>
|   `-CallExpr 0x1c61907a120 <line:1983:5, line:2001:63> 'void'
|     |-ImplicitCastExpr 0x1c61907a108 <line:1983:5> 'void (*)(size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c619079508 <col:5> 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' Function 0x1c618f155a8 'ec_GFp_nistp_points_make_affine_internal' 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
|     |-ImplicitCastExpr 0x1c61907a198 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|     | `-DeclRefExpr 0x1c619079528 <col:46> 'size_t':'unsigned long long' lvalue ParmVar 0x1c619078fe8 'num' 'size_t':'unsigned long long'
|     |-ImplicitCastExpr 0x1c61907a1c8 <line:1984:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x1c61907a1b0 <col:46> 'smallfelem (*)[3]':'smallfelem (*)[3]' <LValueToRValue>
|     |   `-DeclRefExpr 0x1c619079548 <col:46> 'smallfelem (*)[3]':'smallfelem (*)[3]' lvalue ParmVar 0x1c6190791b0 'points' 'smallfelem (*)[3]':'smallfelem (*)[3]'
|     |-UnaryExprOrTypeTraitExpr 0x1c619079578 <line:1985:46, col:63> 'unsigned long long' sizeof 'smallfelem':'u64 [4]'
|     |-ImplicitCastExpr 0x1c61907a1f8 <line:1986:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x1c61907a1e0 <col:46> 'smallfelem *':'smallfelem *' <LValueToRValue>
|     |   `-DeclRefExpr 0x1c619079598 <col:46> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x1c6190792d0 'tmp_smallfelems' 'smallfelem *':'smallfelem *'
|     |-CStyleCastExpr 0x1c619079700 <line:1987:46, col:64> 'void (*)(void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1c6190796e8 <col:64> 'void (*)(u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1c619079638 <col:64> 'void (u64 *)' Function 0x1c618f60c08 'smallfelem_one' 'void (u64 *)'
|     |-ImplicitCastExpr 0x1c61907a210 <line:1988:46> 'int (*)(const void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1c619079728 <col:46> 'int (const void *)' Function 0x1c618f71ea0 'smallfelem_is_zero_int' 'int (const void *)'
|     |-CStyleCastExpr 0x1c619079920 <line:1989:46, line:1990:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1c619079908 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1c619079848 <col:46> 'void (u64 *, const u64 *)' Function 0x1c618e73118 'smallfelem_assign' 'void (u64 *, const u64 *)'
|     |-CStyleCastExpr 0x1c619079ac0 <line:1991:46, line:1992:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1c619079aa8 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1c619079a48 <col:46> 'void (u64 *, const u64 *)' Function 0x1c618f6f408 'smallfelem_square_contract' 'void (u64 *, const u64 *)'
|     |-CStyleCastExpr 0x1c619079d40 <line:1993:46, line:1996:46> 'void (*)(void *, const void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1c619079d28 <col:46> 'void (*)(u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1c619079c68 <col:46> 'void (u64 *, const u64 *, const u64 *)' Function 0x1c618f6fb78 'smallfelem_mul_contract' 'void (u64 *, const u64 *, const u64 *)'
|     |-CStyleCastExpr 0x1c619079ee0 <line:1997:46, line:1998:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1c619079ec8 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1c619079e68 <col:46> 'void (u64 *, const u64 *)' Function 0x1c618f69db0 'smallfelem_inv_contract' 'void (u64 *, const u64 *)'
|     `-CStyleCastExpr 0x1c61907a080 <line:2000:46, line:2001:46> 'void (*)(void *, const void *)' <BitCast>
|       `-ImplicitCastExpr 0x1c61907a068 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|         `-DeclRefExpr 0x1c61907a008 <col:46> 'void (u64 *, const u64 *)' Function 0x1c618e73118 'smallfelem_assign' 'void (u64 *, const u64 *)'
|-FunctionDecl 0x1c61907a638 <line:2008:1, line:2209:1> line:2008:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1c61907a258 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1c61907a2d8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1c61907a358 <line:2009:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1c61907a3d0 <col:54, col:61> col:61 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1c61907a460 <line:2010:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1c61907a4f0 <line:2011:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| |-ParmVarDecl 0x1c61907a570 <col:57, col:65> col:65 invalid ctx 'int *'
| `-CompoundStmt 0x1c619086c98 <line:2012:1, line:2209:1>
|   |-DeclStmt 0x1c61907a7d0 <line:2013:5, col:16>
|   | `-VarDecl 0x1c61907a740 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1c61907a7a8 <col:15> 'int' 0
|   |-DeclStmt 0x1c61907a868 <line:2014:5, col:10>
|   | `-VarDecl 0x1c61907a800 <col:5, col:9> col:9 used j 'int'
|   |-DeclStmt 0x1c61907a928 <line:2015:5, col:18>
|   | `-VarDecl 0x1c61907a898 <col:5, col:17> col:9 used mixed 'int' cinit
|   |   `-IntegerLiteral 0x1c61907a900 <col:17> 'int' 0
|   |-DeclStmt 0x1c61907aa40 <line:2018:5, col:29>
|   | `-VarDecl 0x1c61907a9d8 <col:5, col:21> col:21 used g_secret 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x1c61907abd0 <line:2019:5, col:36>
|   | `-VarDecl 0x1c61907aac8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2019:22 used secrets 'felem_bytearray *' cinit
|   |   `-ImplicitCastExpr 0x1c61907abb8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <NullToPointer>
|   |     `-ParenExpr 0x1c61907ab98 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1c61907ab70 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1c61907ab30 <col:26> 'int' 0
|   |-DeclStmt 0x1c61907ae90 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2020:5, col:41>
|   | `-VarDecl 0x1c61907ad78 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2020:18 used pre_comp 'smallfelem (*)[17][3]' cinit
|   |   `-ImplicitCastExpr 0x1c61907ae68 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem (*)[17][3]' <NullToPointer>
|   |     `-ParenExpr 0x1c61907ae48 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1c61907ae20 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1c61907ade0 <col:26> 'int' 0
|   |-DeclStmt 0x1c61907afc0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2021:5, col:39>
|   | `-VarDecl 0x1c61907aeb8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2021:17 used tmp_smallfelems 'smallfelem *' cinit
|   |   `-ImplicitCastExpr 0x1c61907afa8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem *' <NullToPointer>
|   |     `-ParenExpr 0x1c61907af88 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1c61907af60 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1c61907af20 <col:26> 'int' 0
|   |-DeclStmt 0x1c61907b050 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2022:5, col:24>
|   | `-VarDecl 0x1c61907afe8 <col:5, col:21> col:21 used tmp 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x1c61907b180 <line:2023:5, col:26>
|   | |-VarDecl 0x1c61907b080 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x1c61907b100 <col:5, col:17> col:17 used num_bytes 'unsigned int'
|   |-DeclStmt 0x1c61907b240 <line:2024:5, col:26>
|   | `-VarDecl 0x1c61907b1b0 <col:5, col:25> col:9 used have_pre_comp 'int' cinit
|   |   `-IntegerLiteral 0x1c61907b218 <col:25> 'int' 0
|   |-DeclStmt 0x1c61907b320 <line:2025:5, col:28>
|   | `-VarDecl 0x1c61907b268 <col:5, col:25> col:12 used num_points 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x1c61907b308 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1c61907b2d0 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x1c61907a3d0 'num' 'size_t':'unsigned long long'
|   |-DeclStmt 0x1c61907b4c0 <line:2026:5, col:32>
|   | |-VarDecl 0x1c61907b348 <col:5, col:16> col:16 used x_in 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x1c61907b3c0 <col:5, col:22> col:22 used y_in 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x1c61907b438 <col:5, col:28> col:28 used z_in 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x1c61907b660 <line:2027:5, col:30>
|   | |-VarDecl 0x1c61907b4e8 <col:5, col:11> col:11 used x_out 'felem':'limb [4]'
|   | |-VarDecl 0x1c61907b560 <col:5, col:18> col:18 used y_out 'felem':'limb [4]'
|   | `-VarDecl 0x1c61907b5d8 <col:5, col:25> col:25 used z_out 'felem':'limb [4]'
|   |-DeclStmt 0x1c61907b790 <line:2028:5, col:34>
|   | `-VarDecl 0x1c61907b688 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2028:24 used pre 'NISTP256_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x1c61907b778 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x1c61907b758 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1c61907b730 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1c61907b6f0 <col:26> 'int' 0
|   |-DeclStmt 0x1c61907b9d0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2029:5, col:48>
|   | `-VarDecl 0x1c61907b8c8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2029:23 used g_pre_comp 'const smallfelem (*)[16][3]' cinit
|   |   `-ImplicitCastExpr 0x1c61907b9b8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const smallfelem (*)[16][3]' <NullToPointer>
|   |     `-ParenExpr 0x1c61907b998 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1c61907b970 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1c61907b930 <col:26> 'int' 0
|   |-DeclStmt 0x1c61907bb78 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2031:5, col:29>
|   | `-VarDecl 0x1c61907ba88 <col:5, col:21> col:21 invalid p 'const int *'
|   |-DeclStmt 0x1c61907bc98 <line:2032:5, col:34>
|   | `-VarDecl 0x1c61907bba8 <col:5, col:19> col:19 invalid p_scalar 'const int *'
|   |-IfStmt 0x1c61907be98 <line:2034:5, line:2036:20>
|   | |-OpaqueValueExpr 0x1c61907be80 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x1c61907be68 <line:2035:9, line:2036:20>
|   |   |-OpaqueValueExpr 0x1c61907be50 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x1c61907be40 <col:13, col:20>
|   |     `-IntegerLiteral 0x1c61907be18 <col:20> 'int' 0
|   |-IfStmt 0x1c61907c1f0 <line:2038:5, line:2042:14>
|   | |-OpaqueValueExpr 0x1c61907c1d8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1c61907c1c0 <col:9, col:14> 'err' 0x1c61907c170
|   |-IfStmt 0x1c619081130 <line:2044:5, line:2075:5>
|   | |-OpaqueValueExpr 0x1c619081118 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1c6190810e0 <line:2044:25, line:2075:5>
|   |   |-IfStmt 0x1c61907c6a8 <line:2046:9, line:2051:33> has_else
|   |   | |-ImplicitCastExpr 0x1c61907c2e8 <line:2046:13> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1c61907c2c8 <col:13> 'NISTP256_PRE_COMP *' lvalue Var 0x1c61907b688 'pre' 'NISTP256_PRE_COMP *'
|   |   | |-BinaryOperator 0x1c61907c5b0 <line:2048:13, col:59> 'const smallfelem (*)[16][3]' '='
|   |   | | |-DeclRefExpr 0x1c61907c300 <col:13> 'const smallfelem (*)[16][3]' lvalue Var 0x1c61907b8c8 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   |   | | `-CStyleCastExpr 0x1c61907c588 <col:26, col:59> 'const smallfelem (*)[16][3]' <NoOp>
|   |   | |   `-ImplicitCastExpr 0x1c61907c4b8 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay> part_of_explicit_cast
|   |   | |     `-MemberExpr 0x1c61907c3c0 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |       `-ImplicitCastExpr 0x1c61907c3a8 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x1c61907c388 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x1c61907b688 'pre' 'NISTP256_PRE_COMP *'
|   |   | `-BinaryOperator 0x1c61907c688 <line:2051:13, col:33> 'const smallfelem (*)[16][3]' '='
|   |   |   |-DeclRefExpr 0x1c61907c5d0 <col:13> 'const smallfelem (*)[16][3]' lvalue Var 0x1c61907b8c8 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   |   |   `-UnaryOperator 0x1c61907c670 <col:26, col:33> 'const smallfelem (*)[16][3]' prefix '&' cannot overflow
|   |   |     `-ArraySubscriptExpr 0x1c61907c650 <col:27, col:33> 'const smallfelem [16][3]' lvalue
|   |   |       |-ImplicitCastExpr 0x1c61907c638 <col:27> 'const smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       | `-DeclRefExpr 0x1c61907c5f0 <col:27> 'const smallfelem [2][16][3]' lvalue Var 0x1c618f82dc8 'gmul' 'const smallfelem [2][16][3]'
|   |   |       `-IntegerLiteral 0x1c61907c610 <col:32> 'int' 0
|   |   |-IfStmt 0x1c61907c898 <line:2053:9, line:2054:18>
|   |   | |-OpaqueValueExpr 0x1c61907c880 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1c61907c868 <col:13, col:18> 'err' 0x1c61907c170
|   |   |-IfStmt 0x1c61907ccd8 <line:2056:9, line:2061:9>
|   |   | |-OpaqueValueExpr 0x1c61907ccc0 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x1c61907cca8 <line:2058:56, line:2061:9>
|   |   |   `-GotoStmt 0x1c61907cc90 <line:2060:13, col:18> 'err' 0x1c61907c170
|   |   |-IfStmt 0x1c61907ce30 <line:2062:9, line:2065:18>
|   |   | |-OpaqueValueExpr 0x1c61907ce18 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1c61907ce00 <col:13, col:18> 'err' 0x1c61907c170
|   |   `-IfStmt 0x1c6190810b8 <line:2066:9, line:2074:23> has_else
|   |     |-OpaqueValueExpr 0x1c6190810a0 <<invalid sloc>> '_Bool'
|   |     |-BinaryOperator 0x1c619081030 <line:2068:13, col:29> 'int' '='
|   |     | |-DeclRefExpr 0x1c619080fd0 <col:13> 'int' lvalue Var 0x1c61907b1b0 'have_pre_comp' 'int'
|   |     | `-IntegerLiteral 0x1c619081008 <col:29> 'int' 1
|   |     `-UnaryOperator 0x1c619081088 <line:2074:13, col:23> 'size_t':'unsigned long long' postfix '++'
|   |       `-DeclRefExpr 0x1c619081050 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   |-IfStmt 0x1c619085488 <line:2076:5, line:2161:5>
|   | |-BinaryOperator 0x1c6190811c0 <line:2076:9, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1c619081190 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c619081148 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1c6190811a8 <col:22> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c619081168 <col:22> 'int' 0
|   | `-CompoundStmt 0x1c619085430 <col:25, line:2161:5>
|   |   |-IfStmt 0x1c619081310 <line:2077:9, line:2083:9>
|   |   | |-BinaryOperator 0x1c619081258 <line:2077:13, col:27> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x1c619081228 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1c6190811e0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x1c619081240 <col:27> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1c619081200 <col:27> 'int' 3
|   |   | `-CompoundStmt 0x1c6190812f8 <col:30, line:2083:9>
|   |   |   `-BinaryOperator 0x1c6190812d8 <line:2082:13, col:21> 'int' '='
|   |   |     |-DeclRefExpr 0x1c619081278 <col:13> 'int' lvalue Var 0x1c61907a898 'mixed' 'int'
|   |   |     `-IntegerLiteral 0x1c6190812b0 <col:21> 'int' 1
|   |   |-BinaryOperator 0x1c6190815b0 <line:2084:9, col:63> 'felem_bytearray *' '='
|   |   | |-DeclRefExpr 0x1c619081328 <col:9> 'felem_bytearray *' lvalue Var 0x1c61907aac8 'secrets' 'felem_bytearray *'
|   |   | `-ImplicitCastExpr 0x1c619081598 <col:19, col:63> 'felem_bytearray *' <IntegralToPointer>
|   |   |   `-CallExpr 0x1c619081570 <col:19, col:63> 'int'
|   |   |     |-ImplicitCastExpr 0x1c619081558 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1c619081450 <col:19> 'int ()' Function 0x1c619081388 'OPENSSL_malloc' 'int ()'
|   |   |     `-BinaryOperator 0x1c619081538 <col:34, col:53> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x1c6190814e0 <col:34, col:49> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x1c6190814c0 <col:40, col:49> 'felem_bytearray':'u8 [32]' lvalue
|   |   |       |   `-UnaryOperator 0x1c6190814a8 <col:41, col:42> 'felem_bytearray':'u8 [32]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x1c619081490 <col:42> 'felem_bytearray *' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x1c619081470 <col:42> 'felem_bytearray *' lvalue Var 0x1c61907aac8 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x1c619081520 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1c619081500 <col:53> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   |   |-BinaryOperator 0x1c619081768 <line:2085:9, col:65> 'smallfelem (*)[17][3]' '='
|   |   | |-DeclRefExpr 0x1c6190815d0 <col:9> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | `-ImplicitCastExpr 0x1c619081750 <col:20, col:65> 'smallfelem (*)[17][3]' <IntegralToPointer>
|   |   |   `-CallExpr 0x1c619081728 <col:20, col:65> 'int'
|   |   |     |-ImplicitCastExpr 0x1c619081710 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1c619081608 <col:20> 'int ()' Function 0x1c619081388 'OPENSSL_malloc' 'int ()'
|   |   |     `-BinaryOperator 0x1c6190816f0 <col:35, col:55> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x1c619081698 <col:35, col:51> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x1c619081678 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       |   `-UnaryOperator 0x1c619081660 <col:42, col:43> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x1c619081648 <col:43> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x1c619081628 <col:43> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x1c6190816d8 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1c6190816b8 <col:55> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   |   |-IfStmt 0x1c619081a58 <line:2086:9, line:2088:78>
|   |   | |-ImplicitCastExpr 0x1c6190817a8 <line:2086:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1c619081788 <col:13> 'int' lvalue Var 0x1c61907a898 'mixed' 'int'
|   |   | `-BinaryOperator 0x1c619081a38 <line:2087:13, line:2088:78> 'smallfelem *' '='
|   |   |   |-DeclRefExpr 0x1c6190817c0 <line:2087:13> 'smallfelem *' lvalue Var 0x1c61907aeb8 'tmp_smallfelems' 'smallfelem *'
|   |   |   `-ImplicitCastExpr 0x1c619081a20 <line:2088:15, col:78> 'smallfelem *' <IntegralToPointer>
|   |   |     `-CallExpr 0x1c6190819f8 <col:15, col:78> 'int'
|   |   |       |-ImplicitCastExpr 0x1c6190819e0 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x1c6190817f8 <col:15> 'int ()' Function 0x1c619081388 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x1c6190819c0 <col:30, col:77> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x1c619081888 <col:30, col:53> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x1c619081868 <col:36, col:53> 'smallfelem':'u64 [4]' lvalue
|   |   |         |   `-UnaryOperator 0x1c619081850 <col:37, col:38> 'smallfelem':'u64 [4]' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x1c619081838 <col:38> 'smallfelem *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x1c619081818 <col:38> 'smallfelem *' lvalue Var 0x1c61907aeb8 'tmp_smallfelems' 'smallfelem *' non_odr_use_unevaluated
|   |   |         `-ParenExpr 0x1c6190819a0 <col:57, col:77> 'unsigned long long'
|   |   |           `-BinaryOperator 0x1c619081980 <col:58, col:76> 'unsigned long long' '+'
|   |   |             |-BinaryOperator 0x1c619081920 <col:58, col:71> 'unsigned long long' '*'
|   |   |             | |-ImplicitCastExpr 0x1c6190818f0 <col:58> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x1c6190818a8 <col:58> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   |   |             | `-ImplicitCastExpr 0x1c619081908 <col:71> 'unsigned long long' <IntegralCast>
|   |   |             |   `-IntegerLiteral 0x1c6190818c8 <col:71> 'int' 17
|   |   |             `-ImplicitCastExpr 0x1c619081968 <col:76> 'unsigned long long' <IntegralCast>
|   |   |               `-IntegerLiteral 0x1c619081940 <col:76> 'int' 1
|   |   |-IfStmt 0x1c619081ec0 <line:2089:9, line:2093:9>
|   |   | |-BinaryOperator 0x1c619081e50 <line:2089:13, line:2090:51> 'int' '||'
|   |   | | |-BinaryOperator 0x1c619081ca0 <line:2089:13, col:51> 'int' '||'
|   |   | | | |-ParenExpr 0x1c619081b68 <col:13, col:29> 'int'
|   |   | | | | `-BinaryOperator 0x1c619081b48 <col:14, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | | |   |-ImplicitCastExpr 0x1c619081b18 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2089:14> 'felem_bytearray *' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x1c619081a70 <col:14> 'felem_bytearray *' lvalue Var 0x1c61907aac8 'secrets' 'felem_bytearray *'
|   |   | | | |   `-ImplicitCastExpr 0x1c619081b30 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <BitCast>
|   |   | | | |     `-ParenExpr 0x1c619081af8 <col:17, col:27> 'void *'
|   |   | | | |       `-CStyleCastExpr 0x1c619081ad0 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | | |         `-IntegerLiteral 0x1c619081a90 <col:26> 'int' 0
|   |   | | | `-ParenExpr 0x1c619081c80 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2089:34, col:51> 'int'
|   |   | | |   `-BinaryOperator 0x1c619081c60 <col:35, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | |     |-ImplicitCastExpr 0x1c619081c30 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2089:35> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x1c619081b88 <col:35> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | | |     `-ImplicitCastExpr 0x1c619081c48 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem (*)[17][3]' <BitCast>
|   |   | | |       `-ParenExpr 0x1c619081c10 <col:17, col:27> 'void *'
|   |   | | |         `-CStyleCastExpr 0x1c619081be8 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | |           `-IntegerLiteral 0x1c619081ba8 <col:26> 'int' 0
|   |   | | `-ParenExpr 0x1c619081e30 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2090:16, col:51> 'int'
|   |   | |   `-BinaryOperator 0x1c619081e10 <col:17, col:50> 'int' '&&'
|   |   | |     |-ImplicitCastExpr 0x1c619081df8 <col:17> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x1c619081cc0 <col:17> 'int' lvalue Var 0x1c61907a898 'mixed' 'int'
|   |   | |     `-ParenExpr 0x1c619081dd8 <col:26, col:50> 'int'
|   |   | |       `-BinaryOperator 0x1c619081db8 <col:27, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | |         |-ImplicitCastExpr 0x1c619081d88 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2090:27> 'smallfelem *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x1c619081ce0 <col:27> 'smallfelem *' lvalue Var 0x1c61907aeb8 'tmp_smallfelems' 'smallfelem *'
|   |   | |         `-ImplicitCastExpr 0x1c619081da0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem *' <BitCast>
|   |   | |           `-ParenExpr 0x1c619081d68 <col:17, col:27> 'void *'
|   |   | |             `-CStyleCastExpr 0x1c619081d40 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |               `-IntegerLiteral 0x1c619081d00 <col:26> 'int' 0
|   |   | `-CompoundStmt 0x1c619081ea8 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2090:54, line:2093:9>
|   |   |   `-GotoStmt 0x1c619081e90 <line:2092:13, col:18> 'err' 0x1c61907c170
|   |   |-CallExpr 0x1c619082058 <line:2099:9, col:57> 'void *'
|   |   | |-ImplicitCastExpr 0x1c619082040 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c619081ed8 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1c618e357c0 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1c6190820a8 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1c619082090 <col:16> 'felem_bytearray *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1c619081ef8 <col:16> 'felem_bytearray *' lvalue Var 0x1c61907aac8 'secrets' 'felem_bytearray *'
|   |   | |-IntegerLiteral 0x1c619081f18 <col:25> 'int' 0
|   |   | `-BinaryOperator 0x1c619082008 <col:28, col:47> 'unsigned long long' '*'
|   |   |   |-UnaryExprOrTypeTraitExpr 0x1c619081fb0 <col:28, col:43> 'unsigned long long' sizeof
|   |   |   | `-ParenExpr 0x1c619081f90 <col:34, col:43> 'felem_bytearray':'u8 [32]' lvalue
|   |   |   |   `-UnaryOperator 0x1c619081f78 <col:35, col:36> 'felem_bytearray':'u8 [32]' lvalue prefix '*' cannot overflow
|   |   |   |     `-ImplicitCastExpr 0x1c619081f60 <col:36> 'felem_bytearray *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x1c619081f40 <col:36> 'felem_bytearray *' lvalue Var 0x1c61907aac8 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |   `-ImplicitCastExpr 0x1c619081ff0 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1c619081fd0 <col:47> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   |   |-CallExpr 0x1c619082240 <line:2100:9, col:59> 'void *'
|   |   | |-ImplicitCastExpr 0x1c619082228 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c6190820c0 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1c618e357c0 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1c619082290 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1c619082278 <col:16> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1c6190820e0 <col:16> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | |-IntegerLiteral 0x1c619082100 <col:26> 'int' 0
|   |   | `-BinaryOperator 0x1c6190821f0 <col:29, col:49> 'unsigned long long' '*'
|   |   |   |-UnaryExprOrTypeTraitExpr 0x1c619082198 <col:29, col:45> 'unsigned long long' sizeof
|   |   |   | `-ParenExpr 0x1c619082178 <col:35, col:45> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |   |   `-UnaryOperator 0x1c619082160 <col:36, col:37> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue prefix '*' cannot overflow
|   |   |   |     `-ImplicitCastExpr 0x1c619082148 <col:37> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x1c619082128 <col:37> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]' non_odr_use_unevaluated
|   |   |   `-ImplicitCastExpr 0x1c6190821d8 <col:49> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1c6190821b8 <col:49> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   |   |-ForStmt 0x1c619085170 <line:2101:9, line:2158:9>
|   |   | |-BinaryOperator 0x1c619082320 <line:2101:14, col:18> 'unsigned int' '='
|   |   | | |-DeclRefExpr 0x1c6190822a8 <col:14> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x1c619082308 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1c6190822e0 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x1c6190823c8 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1c6190823b0 <col:21> 'unsigned long long' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x1c619082380 <col:21> 'unsigned int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1c619082340 <col:21> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x1c619082398 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1c619082360 <col:25> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   |   | |-UnaryOperator 0x1c619082408 <col:37, col:39> 'unsigned int' prefix '++'
|   |   | | `-DeclRefExpr 0x1c6190823e8 <col:39> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   | `-CompoundStmt 0x1c619085150 <col:42, line:2158:9>
|   |   |   |-IfStmt 0x1c619082638 <line:2102:13, line:2115:13> has_else
|   |   |   | |-BinaryOperator 0x1c6190824a8 <line:2102:17, col:22> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x1c619082490 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x1c619082460 <col:17> 'unsigned int' <LValueToRValue>
|   |   |   | | |   `-DeclRefExpr 0x1c619082420 <col:17> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |   | | `-ImplicitCastExpr 0x1c619082478 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1c619082440 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x1c61907a3d0 'num' 'size_t':'unsigned long long'
|   |   |   | |-CompoundStmt 0x1c6190825d8 <line:2107:13, line:2110:13>
|   |   |   | `-CompoundStmt 0x1c619082628 <line:2112:13, line:2115:13>
|   |   |   `-IfStmt 0x1c619085138 <line:2116:13, line:2157:13>
|   |   |     |-OpaqueValueExpr 0x1c619085120 <<invalid sloc>> '_Bool'
|   |   |     `-CompoundStmt 0x1c6190850d8 <line:2116:52, line:2157:13>
|   |   |       |-IfStmt 0x1c619082b80 <line:2118:17, line:2130:21> has_else
|   |   |       | |-OpaqueValueExpr 0x1c619082b68 <<invalid sloc>> '_Bool'
|   |   |       | |-CompoundStmt 0x1c619082ae8 <line:2119:52, line:2129:17>
|   |   |       | | `-IfStmt 0x1c619082a40 <line:2124:21, line:2127:21>
|   |   |       | |   |-OpaqueValueExpr 0x1c619082a28 <<invalid sloc>> '_Bool'
|   |   |       | |   `-CompoundStmt 0x1c619082a10 <line:2124:77, line:2127:21>
|   |   |       | |     `-GotoStmt 0x1c6190829f8 <line:2126:25, col:30> 'err' 0x1c61907c170
|   |   |       | `-NullStmt 0x1c619082b60 <line:2130:21>
|   |   |       |-CallExpr 0x1c619082cb0 <line:2131:17, col:55> 'void'
|   |   |       | |-ImplicitCastExpr 0x1c619082c98 <col:17> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1c619082ba8 <col:17> 'void (u8 *, const u8 *, unsigned int)' Function 0x1c618f5ed58 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   |   |       | |-ImplicitCastExpr 0x1c619082ce8 <col:29, col:38> 'u8 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1c619082c38 <col:29, col:38> 'felem_bytearray':'u8 [32]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1c619082c08 <col:29> 'felem_bytearray *' <LValueToRValue>
|   |   |       | |   | `-DeclRefExpr 0x1c619082bc8 <col:29> 'felem_bytearray *' lvalue Var 0x1c61907aac8 'secrets' 'felem_bytearray *'
|   |   |       | |   `-ImplicitCastExpr 0x1c619082c20 <col:37> 'unsigned int' <LValueToRValue>
|   |   |       | |     `-DeclRefExpr 0x1c619082be8 <col:37> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |       | |-ImplicitCastExpr 0x1c619082d18 <col:41> 'const u8 *' <NoOp>
|   |   |       | | `-ImplicitCastExpr 0x1c619082d00 <col:41> 'u8 *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x1c619082c58 <col:41> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c61907afe8 'tmp' 'felem_bytearray':'u8 [32]'
|   |   |       | `-ImplicitCastExpr 0x1c619082d30 <col:46> 'unsigned int' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x1c619082c78 <col:46> 'unsigned int' lvalue Var 0x1c61907b100 'num_bytes' 'unsigned int'
|   |   |       |-IfStmt 0x1c619082e20 <line:2133:17, line:2136:26>
|   |   |       | |-OpaqueValueExpr 0x1c619082e08 <<invalid sloc>> '_Bool'
|   |   |       | `-GotoStmt 0x1c619082df0 <col:21, col:26> 'err' 0x1c61907c170
|   |   |       |-CallExpr 0x1c619074f90 <line:2137:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x1c619074f78 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1c619082e38 <col:17> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x1c619074fc0 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1c619074f38 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1c619074f20 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x1c619074ed8 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x1c619074ec0 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x1c619074e78 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x1c619082e98 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x1c619082e58 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x1c619074e60 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x1c619082e78 <col:39> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x1c619074e98 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x1c619074ef8 <col:45> 'int' 0
|   |   |       | `-ImplicitCastExpr 0x1c619074ff0 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x1c619074fd8 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x1c619074f58 <col:49> 'felem':'limb [4]' lvalue Var 0x1c61907b4e8 'x_out' 'felem':'limb [4]'
|   |   |       |-CallExpr 0x1c6190751b0 <line:2138:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x1c619075198 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1c619075008 <col:17> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x1c6190751e0 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1c619075158 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1c619075140 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x1c6190750f8 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x1c6190750e0 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x1c619075098 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x1c619075068 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x1c619075028 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x1c619075080 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x1c619075048 <col:39> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x1c6190750b8 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x1c619075118 <col:45> 'int' 1
|   |   |       | `-ImplicitCastExpr 0x1c619075210 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x1c6190751f8 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x1c619075178 <col:49> 'felem':'limb [4]' lvalue Var 0x1c61907b560 'y_out' 'felem':'limb [4]'
|   |   |       |-CallExpr 0x1c6190753d0 <line:2139:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x1c6190753b8 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1c619075228 <col:17> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x1c619075400 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1c619075378 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1c619075360 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x1c619075318 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x1c619075300 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x1c6190752b8 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x1c619075288 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x1c619075248 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x1c6190752a0 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x1c619075268 <col:39> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x1c6190752d8 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x1c619075338 <col:45> 'int' 2
|   |   |       | `-ImplicitCastExpr 0x1c619075430 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x1c619075418 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x1c619075398 <col:49> 'felem':'limb [4]' lvalue Var 0x1c61907b5d8 'z_out' 'felem':'limb [4]'
|   |   |       `-ForStmt 0x1c6190850a0 <line:2140:17, line:2156:17>
|   |   |         |-BinaryOperator 0x1c6190754a8 <line:2140:22, col:26> 'int' '='
|   |   |         | |-DeclRefExpr 0x1c619075448 <col:22> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |         | `-IntegerLiteral 0x1c619075480 <col:26> 'int' 2
|   |   |         |-<<<NULL>>>
|   |   |         |-BinaryOperator 0x1c619075528 <col:29, col:34> 'int' '<='
|   |   |         | |-ImplicitCastExpr 0x1c619075510 <col:29> 'int' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x1c6190754c8 <col:29> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |         | `-IntegerLiteral 0x1c6190754e8 <col:34> 'int' 16
|   |   |         |-UnaryOperator 0x1c619075568 <col:38, col:40> 'int' prefix '++'
|   |   |         | `-DeclRefExpr 0x1c619075548 <col:40> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |         `-CompoundStmt 0x1c619085088 <col:43, line:2156:17>
|   |   |           `-IfStmt 0x1c619085060 <line:2141:21, line:2155:21> has_else
|   |   |             |-BinaryOperator 0x1c6190755e0 <line:2141:25, col:29> 'int' '&'
|   |   |             | |-ImplicitCastExpr 0x1c6190755c8 <col:25> 'int' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x1c619075580 <col:25> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |             | `-IntegerLiteral 0x1c6190755a0 <col:29> 'int' 1
|   |   |             |-CompoundStmt 0x1c6190764e0 <col:32, line:2148:21>
|   |   |             | `-CallExpr 0x1c6190763a0 <line:2142:25, line:2147:62> 'void'
|   |   |             |   |-ImplicitCastExpr 0x1c619076388 <line:2142:25> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   |             |   | `-DeclRefExpr 0x1c619075600 <col:25> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1c618f81c88 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   |             |   |-ImplicitCastExpr 0x1c619076408 <col:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1c619075760 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1c619075748 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1c619075700 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1c6190756d0 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1c619075690 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1c619075660 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1c619075620 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1c619075678 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1c619075640 <col:50> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x1c6190756e8 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x1c6190756b0 <col:53> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x1c619075720 <col:56> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x1c619076420 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1c6190758c0 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1c6190758a8 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1c619075860 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1c619075830 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1c6190757f0 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1c6190757c0 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1c619075780 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1c6190757d8 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1c6190757a0 <col:69> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x1c619075848 <col:72> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x1c619075810 <col:72> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x1c619075880 <col:75> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x1c619076438 <line:2143:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1c619075a20 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1c619075a08 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1c6190759c0 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1c619075990 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1c619075950 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1c619075920 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1c6190758e0 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1c619075938 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1c619075900 <col:50> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x1c6190759a8 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x1c619075970 <col:53> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x1c6190759e0 <col:56> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x1c619076450 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1c619075b70 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1c619075b58 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1c619075b10 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1c619075af8 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1c619075ab0 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1c619075a80 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1c619075a40 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1c619075a98 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1c619075a60 <col:69> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x1c619075ad0 <col:72> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x1c619075b30 <col:75> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x1c619076468 <line:2144:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1c619075cc0 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1c619075ca8 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1c619075c60 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1c619075c48 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1c619075c00 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1c619075bd0 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1c619075b90 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1c619075be8 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1c619075bb0 <col:50> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x1c619075c20 <col:53> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x1c619075c80 <col:56> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x1c619076480 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1c619075e10 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1c619075df8 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1c619075db0 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1c619075d98 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1c619075d50 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1c619075d20 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1c619075ce0 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1c619075d38 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1c619075d00 <col:69> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x1c619075d70 <col:72> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x1c619075dd0 <col:75> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x1c619076498 <line:2145:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1c619075fb8 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1c619075fa0 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1c619075f58 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1c619075f40 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1c619075ea0 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1c619075e70 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1c619075e30 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1c619075e88 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1c619075e50 <col:50> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |             |   |   |   `-BinaryOperator 0x1c619075f20 <col:53, col:57> 'int' '-'
|   |   |             |   |   |     |-ImplicitCastExpr 0x1c619075f08 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     | `-DeclRefExpr 0x1c619075ec0 <col:53> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |             |   |   |     `-IntegerLiteral 0x1c619075ee0 <col:57> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x1c619075f78 <col:60> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x1c6190764b0 <line:2146:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1c619076160 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1c619076148 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1c619076100 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1c6190760e8 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1c619076048 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1c619076018 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1c619075fd8 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1c619076030 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1c619075ff8 <col:50> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |             |   |   |   `-BinaryOperator 0x1c6190760c8 <col:53, col:57> 'int' '-'
|   |   |             |   |   |     |-ImplicitCastExpr 0x1c6190760b0 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     | `-DeclRefExpr 0x1c619076068 <col:53> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |             |   |   |     `-IntegerLiteral 0x1c619076088 <col:57> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x1c619076120 <col:60> 'int' 1
|   |   |             |   `-ImplicitCastExpr 0x1c6190764c8 <line:2147:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |     `-ArraySubscriptExpr 0x1c619076308 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |       |-ImplicitCastExpr 0x1c6190762f0 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |       | `-ArraySubscriptExpr 0x1c6190762a8 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |       |   |-ImplicitCastExpr 0x1c619076290 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |       |   | `-ArraySubscriptExpr 0x1c6190761f0 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |       |   |   |-ImplicitCastExpr 0x1c6190761c0 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |       |   |   | `-DeclRefExpr 0x1c619076180 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |       |   |   `-ImplicitCastExpr 0x1c6190761d8 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |       |   |     `-DeclRefExpr 0x1c6190761a0 <col:50> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |             |       |   `-BinaryOperator 0x1c619076270 <col:53, col:57> 'int' '-'
|   |   |             |       |     |-ImplicitCastExpr 0x1c619076258 <col:53> 'int' <LValueToRValue>
|   |   |             |       |     | `-DeclRefExpr 0x1c619076210 <col:53> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |             |       |     `-IntegerLiteral 0x1c619076230 <col:57> 'int' 1
|   |   |             |       `-IntegerLiteral 0x1c6190762c8 <col:60> 'int' 2
|   |   |             `-CompoundStmt 0x1c619085048 <line:2148:28, line:2155:21>
|   |   |               `-CallExpr 0x1c619084f20 <line:2149:25, line:2154:65> 'void'
|   |   |                 |-ImplicitCastExpr 0x1c619084f08 <line:2149:25> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x1c6190764f8 <col:25> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x1c618f6b3b8 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   |                 |-ImplicitCastExpr 0x1c619084f70 <col:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x1c619076658 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x1c619076640 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x1c6190765f8 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x1c6190765c8 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x1c619076588 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x1c619076558 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x1c619076518 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x1c619076570 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x1c619076538 <col:53> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x1c6190765e0 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x1c6190765a8 <col:56> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x1c619076618 <col:59> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x1c619084f88 <line:2150:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x1c6190767b8 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x1c6190767a0 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x1c619076758 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x1c619076728 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x1c6190766e8 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x1c6190766b8 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x1c619076678 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x1c6190766d0 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x1c619076698 <col:53> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x1c619076740 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x1c619076708 <col:56> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x1c619076778 <col:59> 'int' 1
|   |   |                 |-ImplicitCastExpr 0x1c619084fa0 <line:2151:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x1c619076918 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x1c619076900 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x1c6190768b8 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x1c619076888 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x1c619076848 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x1c619076818 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x1c6190767d8 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x1c619076830 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x1c6190767f8 <col:53> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x1c6190768a0 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x1c619076868 <col:56> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x1c6190768d8 <col:59> 'int' 2
|   |   |                 |-ImplicitCastExpr 0x1c619084fd0 <line:2152:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x1c619084fb8 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x1c619076ac0 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x1c619076aa8 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x1c619076a60 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x1c619076a48 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x1c6190769a8 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x1c619076978 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x1c619076938 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x1c619076990 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x1c619076958 <col:53> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x1c619076a28 <col:56, col:60> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x1c619076a10 <col:56> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x1c6190769c8 <col:56> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x1c6190769e8 <col:60> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x1c619076a80 <col:63> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x1c619085000 <line:2153:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x1c619084fe8 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x1c619076c68 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x1c619076c50 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x1c619076c08 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x1c619076bf0 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x1c619076b50 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x1c619076b20 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x1c619076ae0 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x1c619076b38 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x1c619076b00 <col:53> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x1c619076bd0 <col:56, col:60> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x1c619076bb8 <col:56> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x1c619076b70 <col:56> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x1c619076b90 <col:60> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x1c619076c28 <col:63> 'int' 1
|   |   |                 `-ImplicitCastExpr 0x1c619085030 <line:2154:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                   `-ImplicitCastExpr 0x1c619085018 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                     `-ArraySubscriptExpr 0x1c619076e10 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                       |-ImplicitCastExpr 0x1c619076df8 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                       | `-ArraySubscriptExpr 0x1c619076db0 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                       |   |-ImplicitCastExpr 0x1c619076d98 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                       |   | `-ArraySubscriptExpr 0x1c619076cf8 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                       |   |   |-ImplicitCastExpr 0x1c619076cc8 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                       |   |   | `-DeclRefExpr 0x1c619076c88 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                       |   |   `-ImplicitCastExpr 0x1c619076ce0 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                       |   |     `-DeclRefExpr 0x1c619076ca8 <col:53> 'unsigned int' lvalue Var 0x1c61907b080 'i' 'unsigned int'
|   |   |                       |   `-BinaryOperator 0x1c619076d78 <col:56, col:60> 'int' '/'
|   |   |                       |     |-ImplicitCastExpr 0x1c619076d60 <col:56> 'int' <LValueToRValue>
|   |   |                       |     | `-DeclRefExpr 0x1c619076d18 <col:56> 'int' lvalue Var 0x1c61907a800 'j' 'int'
|   |   |                       |     `-IntegerLiteral 0x1c619076d38 <col:60> 'int' 2
|   |   |                       `-IntegerLiteral 0x1c619076dd0 <col:63> 'int' 2
|   |   `-IfStmt 0x1c619085418 <line:2159:9, line:2160:77>
|   |     |-ImplicitCastExpr 0x1c6190851c8 <line:2159:13> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1c6190851a8 <col:13> 'int' lvalue Var 0x1c61907a898 'mixed' 'int'
|   |     `-CallExpr 0x1c6190853b0 <line:2160:13, col:77> 'void'
|   |       |-ImplicitCastExpr 0x1c619085398 <col:13> 'void (*)(size_t, smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1c6190851e0 <col:13> 'void (size_t, smallfelem (*)[3], smallfelem *)' Function 0x1c619079438 'make_points_affine' 'void (size_t, smallfelem (*)[3], smallfelem *)'
|   |       |-BinaryOperator 0x1c619085278 <col:32, col:45> 'unsigned long long' '*'
|   |       | |-ImplicitCastExpr 0x1c619085248 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x1c619085200 <col:32> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x1c619085260 <col:45> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x1c619085220 <col:45> 'int' 17
|   |       |-ImplicitCastExpr 0x1c6190853e8 <col:49, col:59> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x1c6190852f8 <col:49, col:59> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |       |   |-ImplicitCastExpr 0x1c6190852e0 <col:49> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1c619085298 <col:49> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |       |   `-IntegerLiteral 0x1c6190852b8 <col:58> 'int' 0
|   |       `-ImplicitCastExpr 0x1c619085400 <col:62> 'smallfelem *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1c619085318 <col:62> 'smallfelem *' lvalue Var 0x1c61907aeb8 'tmp_smallfelems' 'smallfelem *'
|   |-IfStmt 0x1c6190864a0 <line:2164:5, line:2189:74> has_else
|   | |-OpaqueValueExpr 0x1c619086488 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1c619085fb0 <line:2164:46, line:2185:5>
|   | | |-CallExpr 0x1c619085678 <line:2165:9, col:45> 'void *'
|   | | | |-ImplicitCastExpr 0x1c619085660 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c619085568 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1c618e357c0 'memset' 'void *(void *, int, unsigned long long)'
|   | | | |-ImplicitCastExpr 0x1c6190856c8 <col:16> 'void *' <BitCast>
|   | | | | `-ImplicitCastExpr 0x1c6190856b0 <col:16> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1c619085588 <col:16> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c61907a9d8 'g_secret' 'felem_bytearray':'u8 [32]'
|   | | | |-IntegerLiteral 0x1c6190855c0 <col:26> 'int' 0
|   | | | `-UnaryExprOrTypeTraitExpr 0x1c619085628 <col:29, col:44> 'unsigned long long' sizeof
|   | | |   `-ParenExpr 0x1c619085608 <col:35, col:44> 'felem_bytearray':'u8 [32]' lvalue
|   | | |     `-DeclRefExpr 0x1c6190855e8 <col:36> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c61907a9d8 'g_secret' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   | | |-IfStmt 0x1c6190858e0 <line:2167:9, line:2178:13> has_else
|   | | | |-OpaqueValueExpr 0x1c6190858c8 <<invalid sloc>> '_Bool'
|   | | | |-CompoundStmt 0x1c619085848 <line:2167:70, line:2177:9>
|   | | | | `-IfStmt 0x1c6190857d0 <line:2172:13, line:2175:13>
|   | | | |   |-OpaqueValueExpr 0x1c6190857b8 <<invalid sloc>> '_Bool'
|   | | | |   `-CompoundStmt 0x1c6190857a0 <line:2172:67, line:2175:13>
|   | | | |     `-GotoStmt 0x1c619085788 <line:2174:17, col:22> 'err' 0x1c61907c170
|   | | | `-NullStmt 0x1c6190858c0 <line:2178:13>
|   | | |-CallExpr 0x1c6190859a0 <line:2179:9, col:45> 'void'
|   | | | |-ImplicitCastExpr 0x1c619085988 <col:9> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c619085908 <col:9> 'void (u8 *, const u8 *, unsigned int)' Function 0x1c618f5ed58 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | | | |-ImplicitCastExpr 0x1c6190859d8 <col:21> 'u8 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1c619085928 <col:21> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c61907a9d8 'g_secret' 'felem_bytearray':'u8 [32]'
|   | | | |-ImplicitCastExpr 0x1c619085a08 <col:31> 'const u8 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1c6190859f0 <col:31> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1c619085948 <col:31> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c61907afe8 'tmp' 'felem_bytearray':'u8 [32]'
|   | | | `-ImplicitCastExpr 0x1c619085a20 <col:36> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1c619085968 <col:36> 'unsigned int' lvalue Var 0x1c61907b100 'num_bytes' 'unsigned int'
|   | | `-CallExpr 0x1c619085e70 <line:2181:9, line:2184:74> 'void'
|   | |   |-ImplicitCastExpr 0x1c619085e58 <line:2181:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1c619085a38 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' Function 0x1c619063668 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])'
|   | |   |-ImplicitCastExpr 0x1c619085ed8 <col:19> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1c619085a58 <col:19> 'felem':'limb [4]' lvalue Var 0x1c61907b4e8 'x_out' 'felem':'limb [4]'
|   | |   |-ImplicitCastExpr 0x1c619085ef0 <col:26> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1c619085a78 <col:26> 'felem':'limb [4]' lvalue Var 0x1c61907b560 'y_out' 'felem':'limb [4]'
|   | |   |-ImplicitCastExpr 0x1c619085f08 <col:33> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1c619085a98 <col:33> 'felem':'limb [4]' lvalue Var 0x1c61907b5d8 'z_out' 'felem':'limb [4]'
|   | |   |-CStyleCastExpr 0x1c619085ba8 <line:2182:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1c619085b50 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x1c619085ab8 <col:45> 'felem_bytearray *' lvalue Var 0x1c61907aac8 'secrets' 'felem_bytearray *'
|   | |   |-ImplicitCastExpr 0x1c619085f38 <col:54> 'unsigned int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x1c619085f20 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x1c619085bd0 <col:54> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1c619085f68 <line:2183:19> 'const u8 *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1c619085f50 <col:19> 'u8 *' <ArrayToPointerDecay>
|   | |   |   `-DeclRefExpr 0x1c619085bf0 <col:19> 'felem_bytearray':'u8 [32]' lvalue Var 0x1c61907a9d8 'g_secret' 'felem_bytearray':'u8 [32]'
|   | |   |-ImplicitCastExpr 0x1c619085f80 <line:2184:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1c619085c10 <col:19> 'int' lvalue Var 0x1c61907a898 'mixed' 'int'
|   | |   |-CStyleCastExpr 0x1c619085db8 <col:26, col:54> 'const smallfelem (*)[17][3]' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1c619085d68 <col:54> 'smallfelem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x1c619085c80 <col:54> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   | |   `-ImplicitCastExpr 0x1c619085f98 <col:64> 'const smallfelem (*)[16][3]' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1c619085de0 <col:64> 'const smallfelem (*)[16][3]' lvalue Var 0x1c61907b8c8 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   | `-CallExpr 0x1c619086360 <line:2187:9, line:2189:74> 'void'
|   |   |-ImplicitCastExpr 0x1c619086348 <line:2187:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1c619085fe0 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' Function 0x1c619063668 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])'
|   |   |-ImplicitCastExpr 0x1c6190863c8 <col:19> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1c619086000 <col:19> 'felem':'limb [4]' lvalue Var 0x1c61907b4e8 'x_out' 'felem':'limb [4]'
|   |   |-ImplicitCastExpr 0x1c6190863e0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1c619086020 <col:26> 'felem':'limb [4]' lvalue Var 0x1c61907b560 'y_out' 'felem':'limb [4]'
|   |   |-ImplicitCastExpr 0x1c6190863f8 <col:33> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1c619086040 <col:33> 'felem':'limb [4]' lvalue Var 0x1c61907b5d8 'z_out' 'felem':'limb [4]'
|   |   |-CStyleCastExpr 0x1c6190860b0 <line:2188:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   |   | `-ImplicitCastExpr 0x1c619086098 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x1c619086060 <col:45> 'felem_bytearray *' lvalue Var 0x1c61907aac8 'secrets' 'felem_bytearray *'
|   |   |-ImplicitCastExpr 0x1c619086428 <col:54> 'unsigned int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x1c619086410 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1c6190860d8 <col:54> 'size_t':'unsigned long long' lvalue Var 0x1c61907b268 'num_points' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1c619086440 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <NullToPointer>
|   |   | `-ParenExpr 0x1c619086160 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x1c619086138 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x1c6190860f8 <col:26> 'int' 0
|   |   |-ImplicitCastExpr 0x1c619086458 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2189:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1c619086180 <col:25> 'int' lvalue Var 0x1c61907a898 'mixed' 'int'
|   |   |-CStyleCastExpr 0x1c619086298 <col:32, col:60> 'const smallfelem (*)[17][3]' <NoOp>
|   |   | `-ImplicitCastExpr 0x1c619086280 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x1c6190861f0 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |   `-ImplicitCastExpr 0x1c619086470 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <NullToPointer>
|   |     `-ParenExpr 0x1c619086328 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1c619086300 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1c6190862c0 <col:26> 'int' 0
|   |-CallExpr 0x1c619086558 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2191:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c619086540 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c6190864c8 <col:5> 'void (u64 *, const limb *)' Function 0x1c618f66ee8 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619086588 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c6190864e8 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x1c61907b348 'x_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c6190865b8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c6190865a0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619086520 <col:26> 'felem':'limb [4]' lvalue Var 0x1c61907b4e8 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1c619086660 <line:2192:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c619086648 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c6190865d0 <col:5> 'void (u64 *, const limb *)' Function 0x1c618f66ee8 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619086690 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c6190865f0 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x1c61907b3c0 'y_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c6190866c0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c6190866a8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619086628 <col:26> 'felem':'limb [4]' lvalue Var 0x1c61907b560 'y_out' 'felem':'limb [4]'
|   |-CallExpr 0x1c619086768 <line:2193:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1c619086750 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c6190866d8 <col:5> 'void (u64 *, const limb *)' Function 0x1c618f66ee8 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619086798 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1c6190866f8 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x1c61907b438 'z_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x1c6190867c8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c6190867b0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619086730 <col:26> 'felem':'limb [4]' lvalue Var 0x1c61907b5d8 'z_out' 'felem':'limb [4]'
|   |-IfStmt 0x1c6190868a8 <line:2194:5, line:2198:5>
|   | |-OpaqueValueExpr 0x1c619086890 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1c619086878 <line:2195:39, line:2198:5>
|   |   `-GotoStmt 0x1c619086860 <line:2197:9, col:14> 'err' 0x1c61907c170
|   |-LabelStmt 0x1c619086940 <line:2201:2, col:5> 'err'
|   | `-NullStmt 0x1c619086938 <col:5>
|   |-CallExpr 0x1c619086ae0 <line:2205:5, col:25> 'int'
|   | |-ImplicitCastExpr 0x1c619086ac8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619086a88 <col:5> 'int ()' Function 0x1c61907ec38 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1c619086b08 <col:18> 'felem_bytearray *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c619086aa8 <col:18> 'felem_bytearray *' lvalue Var 0x1c61907aac8 'secrets' 'felem_bytearray *'
|   |-CallExpr 0x1c619086b78 <line:2206:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x1c619086b60 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619086b20 <col:5> 'int ()' Function 0x1c61907ec38 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1c619086ba0 <col:18> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c619086b40 <col:18> 'smallfelem (*)[17][3]' lvalue Var 0x1c61907ad78 'pre_comp' 'smallfelem (*)[17][3]'
|   |-CallExpr 0x1c619086c10 <line:2207:5, col:33> 'int'
|   | |-ImplicitCastExpr 0x1c619086bf8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619086bb8 <col:5> 'int ()' Function 0x1c61907ec38 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1c619086c38 <col:18> 'smallfelem *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c619086bd8 <col:18> 'smallfelem *' lvalue Var 0x1c61907aeb8 'tmp_smallfelems' 'smallfelem *'
|   `-ReturnStmt 0x1c619086c88 <line:2208:5, col:12>
|     `-ImplicitCastExpr 0x1c619086c70 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1c619086c50 <col:12> 'int' lvalue Var 0x1c61907a740 'ret' 'int'
|-FunctionDecl 0x1c619076e70 <line:2211:1, line:2345:1> line:2211:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1c619086db8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1c619086e38 <col:54, col:62> col:62 invalid ctx 'int *'
| `-CompoundStmt 0x1c619089fa8 <line:2212:1, line:2345:1>
|   |-DeclStmt 0x1c619076fe0 <line:2213:5, col:16>
|   | `-VarDecl 0x1c619076f50 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1c619076fb8 <col:15> 'int' 0
|   |-DeclStmt 0x1c619077110 <line:2214:5, col:34>
|   | `-VarDecl 0x1c619077008 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2214:24 used pre 'NISTP256_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x1c6190770f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x1c6190770d8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1c6190770b0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1c619077070 <col:26> 'int' 0
|   |-DeclStmt 0x1c619077240 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2215:5, col:13>
|   | |-VarDecl 0x1c619077140 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x1c6190771c0 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x1c6190774b0 <line:2219:5, col:35>
|   | `-VarDecl 0x1c619077448 <col:5, col:34> col:16 used tmp_smallfelems 'smallfelem [32]'
|   |-DeclStmt 0x1c619077650 <line:2220:5, col:30>
|   | |-VarDecl 0x1c6190774d8 <col:5, col:11> col:11 used x_tmp 'felem':'limb [4]'
|   | |-VarDecl 0x1c619077550 <col:5, col:18> col:18 used y_tmp 'felem':'limb [4]'
|   | `-VarDecl 0x1c6190775c8 <col:5, col:25> col:25 used z_tmp 'felem':'limb [4]'
|   |-IfStmt 0x1c619077850 <line:2224:5, line:2226:20>
|   | |-OpaqueValueExpr 0x1c619077838 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x1c619077820 <line:2225:9, line:2226:20>
|   |   |-OpaqueValueExpr 0x1c619077808 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x1c6190777f8 <col:13, col:20>
|   |     `-IntegerLiteral 0x1c6190777d0 <col:20> 'int' 0
|   |-IfStmt 0x1c619077a58 <line:2228:5, line:2229:14>
|   | |-OpaqueValueExpr 0x1c619077a40 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1c619077a28 <col:9, col:14> 'err' 0x1c6190779d8
|   |-IfStmt 0x1c619077b28 <line:2231:5, line:2232:14>
|   | |-OpaqueValueExpr 0x1c619077b10 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1c619077af8 <col:9, col:14> 'err' 0x1c6190779d8
|   |-IfStmt 0x1c619077c18 <line:2234:5, line:2235:14>
|   | |-OpaqueValueExpr 0x1c619077c00 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1c619077be8 <col:9, col:14> 'err' 0x1c6190779d8
|   |-IfStmt 0x1c619077f10 <line:2238:5, line:2239:14>
|   | |-OpaqueValueExpr 0x1c619077ef8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1c619077ee0 <col:9, col:14> 'err' 0x1c6190779d8
|   |-IfStmt 0x1c619078128 <line:2240:5, line:2241:14>
|   | |-BinaryOperator 0x1c6190780f0 <line:2240:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ParenExpr 0x1c619078030 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2240:9, col:39> 'NISTP256_PRE_COMP *'
|   | | | `-BinaryOperator 0x1c619078010 <col:10, col:38> 'NISTP256_PRE_COMP *' '='
|   | | |   |-DeclRefExpr 0x1c619077f28 <col:10> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   | | |   `-CallExpr 0x1c619077ff0 <col:16, col:38> 'NISTP256_PRE_COMP *'
|   | | |     `-ImplicitCastExpr 0x1c619077fd8 <col:16> 'NISTP256_PRE_COMP *(*)()' <FunctionToPointerDecay>
|   | | |       `-DeclRefExpr 0x1c619077f60 <col:16> 'NISTP256_PRE_COMP *()' Function 0x1c61907e3e8 'nistp256_pre_comp_new' 'NISTP256_PRE_COMP *()'
|   | | `-ImplicitCastExpr 0x1c6190780d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x1c6190780b8 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1c619078090 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1c619078050 <col:26> 'int' 0
|   | `-GotoStmt 0x1c619078110 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2241:9, col:14> 'err' 0x1c6190779d8
|   |-IfStmt 0x1c619078488 <line:2245:5, line:2248:5>
|   | |-OpaqueValueExpr 0x1c619078470 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1c619078450 <line:2245:69, line:2248:5>
|   |   |-CallExpr 0x1c619078350 <line:2246:9, col:62> 'void *'
|   |   | |-ImplicitCastExpr 0x1c619078338 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c619078188 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x1c618e3cdd8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1c6190783a0 <col:16, col:21> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1c619078388 <col:16, col:21> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   `-MemberExpr 0x1c6190781e0 <col:16, col:21> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |     `-ImplicitCastExpr 0x1c6190781c8 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1c6190781a8 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |-ImplicitCastExpr 0x1c6190783d0 <col:33> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1c6190783b8 <col:33> 'const smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   `-DeclRefExpr 0x1c619078210 <col:33> 'const smallfelem [2][16][3]' lvalue Var 0x1c618f82dc8 'gmul' 'const smallfelem [2][16][3]'
|   |   | `-UnaryExprOrTypeTraitExpr 0x1c6190782b8 <col:39, col:61> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x1c619078298 <col:45, col:61> 'smallfelem [2][16][3]' lvalue
|   |   |     `-MemberExpr 0x1c619078268 <col:46, col:51> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18 non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x1c619078250 <col:46> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1c619078230 <col:46> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
|   |   `-GotoStmt 0x1c619078438 <line:2247:9, col:14> 'done' 0x1c6190783e8
|   |-IfStmt 0x1c619078578 <line:2249:5, line:2252:14>
|   | |-OpaqueValueExpr 0x1c619078560 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1c619078548 <col:9, col:14> 'err' 0x1c6190779d8
|   |-CallExpr 0x1c619078770 <line:2253:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1c619078758 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619078590 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c6190787a0 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x1c619078718 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x1c619078700 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x1c6190786b8 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x1c6190786a0 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x1c619078658 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x1c619078640 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x1c6190785e8 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   | |   |   |   |   `-ImplicitCastExpr 0x1c6190785d0 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x1c6190785b0 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x1c619078618 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x1c619078678 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x1c6190786d8 <col:40> 'int' 0
|   | `-ImplicitCastExpr 0x1c6190787d0 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c6190787b8 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619078738 <col:44> 'felem':'limb [4]' lvalue Var 0x1c6190774d8 'x_tmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c6190789c8 <line:2254:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1c6190789b0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c6190787e8 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c6190789f8 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x1c619078970 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x1c619078958 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x1c619078910 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x1c6190788f8 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x1c6190788b0 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x1c619078898 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x1c619078840 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   | |   |   |   |   `-ImplicitCastExpr 0x1c619078828 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x1c619078808 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x1c619078870 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x1c6190788d0 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x1c619078930 <col:40> 'int' 1
|   | `-ImplicitCastExpr 0x1c619078a28 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619078a10 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619078990 <col:44> 'felem':'limb [4]' lvalue Var 0x1c619077550 'y_tmp' 'felem':'limb [4]'
|   |-CallExpr 0x1c619078c20 <line:2255:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1c619078c08 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619078a40 <col:5> 'void (u64 *, const limb *)' Function 0x1c618e7caf8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x1c619078c50 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x1c619078bc8 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x1c619078bb0 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x1c619078b68 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x1c619078b50 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x1c619078b08 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x1c619078af0 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x1c619078a98 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   | |   |   |   |   `-ImplicitCastExpr 0x1c619078a80 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x1c619078a60 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x1c619078ac8 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x1c619078b28 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x1c619078b88 <col:40> 'int' 2
|   | `-ImplicitCastExpr 0x1c619078c80 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1c619078c68 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1c619078be8 <col:44> 'felem':'limb [4]' lvalue Var 0x1c6190775c8 'z_tmp' 'felem':'limb [4]'
|   |-ForStmt 0x1c619094140 <line:2260:5, line:2288:5>
|   | |-BinaryOperator 0x1c619078cf8 <line:2260:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1c619078c98 <col:10> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   | | `-IntegerLiteral 0x1c619078cd0 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c619078d78 <col:17, col:22> 'int' '<='
|   | | |-ImplicitCastExpr 0x1c619078d60 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c619078d18 <col:17> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   | | `-IntegerLiteral 0x1c619078d38 <col:22> 'int' 8
|   | |-CompoundAssignOperator 0x1c619078df8 <col:25, col:31> 'int' '<<=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x1c619078d98 <col:25> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   | | `-IntegerLiteral 0x1c619078db8 <col:31> 'int' 1
|   | `-CompoundStmt 0x1c619094108 <col:34, line:2288:5>
|   |   |-CallExpr 0x1c6190918c8 <line:2261:9, line:2264:52> 'void'
|   |   | |-ImplicitCastExpr 0x1c6190918b0 <line:2261:9> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c619078e28 <col:9> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x1c618f6b3b8 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   | |-ImplicitCastExpr 0x1c619091918 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619091098 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619091080 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619091038 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619091008 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619090fc8 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619090fb0 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619090f58 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619090f40 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619078e48 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1c619090f88 <col:44> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x1c619091020 <col:47> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x1c619090fe8 <col:47> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1c619091058 <col:50> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c619091930 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619091230 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619091218 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c6190911d0 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c6190911a0 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619091160 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619091148 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c6190910f0 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c6190910d8 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c6190910b8 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1c619091120 <col:70> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x1c6190911b8 <col:73> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x1c619091180 <col:73> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1c6190911f0 <col:76> 'int' 1
|   |   | |-ImplicitCastExpr 0x1c619091948 <line:2262:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c6190913c8 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c6190913b0 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619091368 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619091338 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c6190912f8 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c6190912e0 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619091288 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619091270 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619091250 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1c6190912b8 <col:44> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x1c619091350 <col:47> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x1c619091318 <col:47> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1c619091388 <col:50> 'int' 2
|   |   | |-ImplicitCastExpr 0x1c619091978 <col:54, col:77> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1c619091960 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1c619091560 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1c619091548 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1c619091500 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1c6190914d0 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1c619091490 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1c619091478 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1c619091420 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1c619091408 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1c6190913e8 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1c619091450 <col:70> 'int' 0
|   |   | |     |   `-ImplicitCastExpr 0x1c6190914e8 <col:73> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1c6190914b0 <col:73> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1c619091520 <col:76> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c6190919a8 <line:2263:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1c619091990 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1c6190916f8 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1c6190916e0 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1c619091698 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1c619091668 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1c619091628 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1c619091610 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1c6190915b8 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1c6190915a0 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1c619091580 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1c6190915e8 <col:44> 'int' 0
|   |   | |     |   `-ImplicitCastExpr 0x1c619091680 <col:47> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1c619091648 <col:47> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1c6190916b8 <col:50> 'int' 1
|   |   | `-ImplicitCastExpr 0x1c6190919d8 <line:2264:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1c6190919c0 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x1c619091890 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x1c619091878 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1c619091830 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1c619091800 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x1c6190917c0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x1c6190917a8 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x1c619091750 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |       |   |   |   `-ImplicitCastExpr 0x1c619091738 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x1c619091718 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |       |   |   `-IntegerLiteral 0x1c619091780 <col:44> 'int' 0
|   |   |       |   `-ImplicitCastExpr 0x1c619091818 <col:47> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1c6190917e0 <col:47> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |       `-IntegerLiteral 0x1c619091850 <col:50> 'int' 2
|   |   |-ForStmt 0x1c619092630 <line:2265:9, line:2272:9>
|   |   | |-BinaryOperator 0x1c619091a50 <line:2265:14, col:18> 'int' '='
|   |   | | |-DeclRefExpr 0x1c6190919f0 <col:14> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |   | | `-IntegerLiteral 0x1c619091a28 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x1c619091ad0 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1c619091ab8 <col:21> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1c619091a70 <col:21> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |   | | `-IntegerLiteral 0x1c619091a90 <col:25> 'int' 31
|   |   | |-UnaryOperator 0x1c619091b10 <col:29, col:31> 'int' prefix '++'
|   |   | | `-DeclRefExpr 0x1c619091af0 <col:31> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |   | `-CompoundStmt 0x1c619092618 <col:34, line:2272:9>
|   |   |   `-CallExpr 0x1c6190924f0 <line:2266:13, line:2271:56> 'void'
|   |   |     |-ImplicitCastExpr 0x1c6190924d8 <line:2266:13> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1c619091b28 <col:13> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x1c618f6b3b8 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   |     |-ImplicitCastExpr 0x1c619092540 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1c619091cc0 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c619091ca8 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1c619091c60 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1c619091c30 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x1c619091bf0 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x1c619091bd8 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x1c619091b80 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x1c619091b68 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x1c619091b48 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x1c619091bb0 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x1c619091c48 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1c619091c10 <col:51> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1c619091c80 <col:54> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1c619092558 <line:2267:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1c619091e58 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c619091e40 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1c619091df8 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1c619091dc8 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x1c619091d88 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x1c619091d70 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x1c619091d18 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x1c619091d00 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x1c619091ce0 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x1c619091d48 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x1c619091de0 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1c619091da8 <col:51> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1c619091e18 <col:54> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1c619092570 <line:2268:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1c619091ff0 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c619091fd8 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1c619091f90 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1c619091f60 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x1c619091f20 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x1c619091f08 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x1c619091eb0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x1c619091e98 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x1c619091e78 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x1c619091ee0 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x1c619091f78 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1c619091f40 <col:51> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1c619091fb0 <col:54> 'int' 2
|   |   |     |-ImplicitCastExpr 0x1c6190925a0 <line:2269:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1c619092588 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1c619092188 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1c619092170 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-ArraySubscriptExpr 0x1c619092128 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |     |   |-ImplicitCastExpr 0x1c6190920f8 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |     |   | `-ArraySubscriptExpr 0x1c6190920b8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |     |   |   |-ImplicitCastExpr 0x1c6190920a0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |     |   |   | `-MemberExpr 0x1c619092048 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |     |     |   |   |   `-ImplicitCastExpr 0x1c619092030 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |     |   |   |     `-DeclRefExpr 0x1c619092010 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |     |   |   `-IntegerLiteral 0x1c619092078 <col:48> 'int' 1
|   |   |     |     |   `-ImplicitCastExpr 0x1c619092110 <col:51> 'int' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x1c6190920d8 <col:51> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |     |     `-IntegerLiteral 0x1c619092148 <col:54> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1c6190925d0 <line:2270:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1c6190925b8 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1c619092320 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1c619092308 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-ArraySubscriptExpr 0x1c6190922c0 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |     |   |-ImplicitCastExpr 0x1c619092290 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |     |   | `-ArraySubscriptExpr 0x1c619092250 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |     |   |   |-ImplicitCastExpr 0x1c619092238 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |     |   |   | `-MemberExpr 0x1c6190921e0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |     |     |   |   |   `-ImplicitCastExpr 0x1c6190921c8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |     |   |   |     `-DeclRefExpr 0x1c6190921a8 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |     |   |   `-IntegerLiteral 0x1c619092210 <col:48> 'int' 1
|   |   |     |     |   `-ImplicitCastExpr 0x1c6190922a8 <col:51> 'int' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x1c619092270 <col:51> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |     |     `-IntegerLiteral 0x1c6190922e0 <col:54> 'int' 1
|   |   |     `-ImplicitCastExpr 0x1c619092600 <line:2271:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x1c6190925e8 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |         `-ArraySubscriptExpr 0x1c6190924b8 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |           |-ImplicitCastExpr 0x1c6190924a0 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |           | `-ArraySubscriptExpr 0x1c619092458 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |           |   |-ImplicitCastExpr 0x1c619092428 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |           |   | `-ArraySubscriptExpr 0x1c6190923e8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |           |   |   |-ImplicitCastExpr 0x1c6190923d0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |           |   |   | `-MemberExpr 0x1c619092378 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |           |   |   |   `-ImplicitCastExpr 0x1c619092360 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |           |   |   |     `-DeclRefExpr 0x1c619092340 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |           |   |   `-IntegerLiteral 0x1c6190923a8 <col:48> 'int' 1
|   |   |           |   `-ImplicitCastExpr 0x1c619092440 <col:51> 'int' <LValueToRValue>
|   |   |           |     `-DeclRefExpr 0x1c619092408 <col:51> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |           `-IntegerLiteral 0x1c619092478 <col:54> 'int' 2
|   |   |-IfStmt 0x1c6190926f0 <line:2273:9, line:2274:13>
|   |   | |-BinaryOperator 0x1c6190926c8 <line:2273:13, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1c6190926b0 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1c619092668 <col:13> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | | `-IntegerLiteral 0x1c619092688 <col:18> 'int' 8
|   |   | `-BreakStmt 0x1c6190926e8 <line:2274:13>
|   |   |-CallExpr 0x1c6190931d0 <line:2275:9, line:2279:52> 'void'
|   |   | |-ImplicitCastExpr 0x1c6190931b8 <line:2275:9> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c619092708 <col:9> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x1c618f6b3b8 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   | |-ImplicitCastExpr 0x1c619093220 <col:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c6190928e8 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c6190928d0 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619092888 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619092870 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c6190927d0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c6190927b8 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619092760 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619092748 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619092728 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1c619092790 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x1c619092850 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x1c6190927f0 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x1c619092838 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x1c619092818 <col:51> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1c6190928a8 <col:54> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c619093238 <line:2276:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619092ac8 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619092ab0 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619092a68 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619092a50 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c6190929b0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619092998 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619092940 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619092928 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619092908 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1c619092970 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x1c619092a30 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x1c6190929d0 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x1c619092a18 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x1c6190929f8 <col:51> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1c619092a88 <col:54> 'int' 1
|   |   | |-ImplicitCastExpr 0x1c619093250 <line:2277:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619092ca8 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619092c90 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619092c48 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619092c30 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619092b90 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619092b78 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619092b20 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619092b08 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619092ae8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1c619092b50 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x1c619092c10 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x1c619092bb0 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x1c619092bf8 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x1c619092bd8 <col:51> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1c619092c68 <col:54> 'int' 2
|   |   | |-ImplicitCastExpr 0x1c619093280 <line:2278:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1c619093268 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1c619092e40 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1c619092e28 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1c619092de0 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1c619092db0 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1c619092d70 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1c619092d58 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1c619092d00 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1c619092ce8 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1c619092cc8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1c619092d30 <col:44> 'int' 1
|   |   | |     |   `-ImplicitCastExpr 0x1c619092dc8 <col:47> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1c619092d90 <col:47> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1c619092e00 <col:50> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c6190932b0 <col:54, col:77> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1c619093298 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1c619093000 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1c619092fe8 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1c619092fa0 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1c619092f70 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1c619092f08 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1c619092ef0 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1c619092e98 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1c619092e80 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1c619092e60 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1c619092ec8 <col:70> 'int' 1
|   |   | |     |   `-ImplicitCastExpr 0x1c619092f88 <col:73> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1c619092f50 <col:73> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1c619092fc0 <col:76> 'int' 1
|   |   | `-ImplicitCastExpr 0x1c6190932e0 <line:2279:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1c6190932c8 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x1c619093198 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x1c619093180 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1c619093138 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1c619093108 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x1c6190930c8 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x1c6190930b0 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x1c619093058 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |       |   |   |   `-ImplicitCastExpr 0x1c619093040 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x1c619093020 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |       |   |   `-IntegerLiteral 0x1c619093088 <col:44> 'int' 1
|   |   |       |   `-ImplicitCastExpr 0x1c619093120 <col:47> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1c6190930e8 <col:47> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |       `-IntegerLiteral 0x1c619093158 <col:50> 'int' 2
|   |   `-ForStmt 0x1c6190940d0 <line:2280:9, line:2287:9>
|   |     |-BinaryOperator 0x1c619093340 <line:2280:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x1c6190932f8 <col:14> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |     | `-IntegerLiteral 0x1c619093318 <col:18> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x1c6190933c0 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x1c6190933a8 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1c619093360 <col:21> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |     | `-IntegerLiteral 0x1c619093380 <col:25> 'int' 31
|   |     |-UnaryOperator 0x1c619093400 <col:29, col:31> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x1c6190933e0 <col:31> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |     `-CompoundStmt 0x1c6190940b8 <col:34, line:2287:9>
|   |       `-CallExpr 0x1c619093f90 <line:2281:13, line:2286:60> 'void'
|   |         |-ImplicitCastExpr 0x1c619093f78 <line:2281:13> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x1c619093418 <col:13> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x1c618f6b3b8 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |         |-ImplicitCastExpr 0x1c619093fe0 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c6190935f8 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c6190935e0 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c619093598 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c619093580 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c6190934e0 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c6190934c8 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c619093470 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c619093458 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c619093438 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x1c6190934a0 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x1c619093560 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1c619093500 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1c619093548 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1c619093528 <col:55> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   `-IntegerLiteral 0x1c6190935b8 <col:58> 'int' 0
|   |         |-ImplicitCastExpr 0x1c619093ff8 <line:2282:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c6190937d8 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c6190937c0 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c619093778 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c619093760 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c6190936c0 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c6190936a8 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c619093650 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c619093638 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c619093618 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x1c619093680 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x1c619093740 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1c6190936e0 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1c619093728 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1c619093708 <col:55> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   `-IntegerLiteral 0x1c619093798 <col:58> 'int' 1
|   |         |-ImplicitCastExpr 0x1c619094010 <line:2283:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c6190939b8 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c6190939a0 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c619093958 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c619093940 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c6190938a0 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c619093888 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c619093830 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c619093818 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c6190937f8 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x1c619093860 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x1c619093920 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1c6190938c0 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1c619093908 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1c6190938e8 <col:55> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   `-IntegerLiteral 0x1c619093978 <col:58> 'int' 2
|   |         |-ImplicitCastExpr 0x1c619094040 <line:2284:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1c619094028 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1c619093b98 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1c619093b80 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1c619093b38 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1c619093b20 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1c619093a80 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1c619093a68 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1c619093a10 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |     |   |   |   `-ImplicitCastExpr 0x1c6190939f8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1c6190939d8 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |     |   |   `-IntegerLiteral 0x1c619093a40 <col:48> 'int' 0
|   |         |     |   `-BinaryOperator 0x1c619093b00 <col:51, col:55> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x1c619093aa0 <col:51> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x1c619093ae8 <col:55> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x1c619093ac8 <col:55> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |     `-IntegerLiteral 0x1c619093b58 <col:58> 'int' 0
|   |         |-ImplicitCastExpr 0x1c619094070 <line:2285:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1c619094058 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1c619093d78 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1c619093d60 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1c619093d18 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1c619093d00 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1c619093c60 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1c619093c48 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1c619093bf0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |     |   |   |   `-ImplicitCastExpr 0x1c619093bd8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1c619093bb8 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |     |   |   `-IntegerLiteral 0x1c619093c20 <col:48> 'int' 0
|   |         |     |   `-BinaryOperator 0x1c619093ce0 <col:51, col:55> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x1c619093c80 <col:51> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x1c619093cc8 <col:55> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x1c619093ca8 <col:55> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |     `-IntegerLiteral 0x1c619093d38 <col:58> 'int' 1
|   |         `-ImplicitCastExpr 0x1c6190940a0 <line:2286:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |           `-ImplicitCastExpr 0x1c619094088 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |             `-ArraySubscriptExpr 0x1c619093f58 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |               |-ImplicitCastExpr 0x1c619093f40 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |               | `-ArraySubscriptExpr 0x1c619093ef8 <col:32, col:56> 'smallfelem [3]' lvalue
|   |               |   |-ImplicitCastExpr 0x1c619093ee0 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |               |   | `-ArraySubscriptExpr 0x1c619093e40 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |               |   |   |-ImplicitCastExpr 0x1c619093e28 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |               |   |   | `-MemberExpr 0x1c619093dd0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |               |   |   |   `-ImplicitCastExpr 0x1c619093db8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |               |   |   |     `-DeclRefExpr 0x1c619093d98 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |               |   |   `-IntegerLiteral 0x1c619093e00 <col:48> 'int' 0
|   |               |   `-BinaryOperator 0x1c619093ec0 <col:51, col:55> 'int' '*'
|   |               |     |-IntegerLiteral 0x1c619093e60 <col:51> 'int' 2
|   |               |     `-ImplicitCastExpr 0x1c619093ea8 <col:55> 'int' <LValueToRValue>
|   |               |       `-DeclRefExpr 0x1c619093e88 <col:55> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |               `-IntegerLiteral 0x1c619093f18 <col:58> 'int' 2
|   |-ForStmt 0x1c619089990 <line:2289:5, line:2331:5>
|   | |-BinaryOperator 0x1c6190941c0 <line:2289:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1c619094178 <col:10> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   | | `-IntegerLiteral 0x1c619094198 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1c619094240 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1c619094228 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c6190941e0 <col:17> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   | | `-IntegerLiteral 0x1c619094200 <col:21> 'int' 2
|   | |-UnaryOperator 0x1c619094280 <col:24, col:25> 'int' postfix '++'
|   | | `-DeclRefExpr 0x1c619094260 <col:24> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   | `-CompoundStmt 0x1c619089950 <col:29, line:2331:5>
|   |   |-CallExpr 0x1c6190945c0 <line:2291:9, col:71> 'void *'
|   |   | |-ImplicitCastExpr 0x1c6190945a8 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c619094298 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1c618e357c0 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1c619094610 <col:16, col:36> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1c6190945f8 <col:16, col:36> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1c6190943d0 <col:16, col:36> 'smallfelem [3]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1c6190943b8 <col:16, col:33> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1c619094370 <col:16, col:33> 'smallfelem [16][3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1c619094340 <col:16, col:21> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x1c6190942f0 <col:16, col:21> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |     |   |   `-ImplicitCastExpr 0x1c6190942d8 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1c6190942b8 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x1c619094358 <col:32> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1c619094320 <col:32> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1c619094390 <col:35> 'int' 0
|   |   | |-IntegerLiteral 0x1c6190943f0 <col:39> 'int' 0
|   |   | `-UnaryExprOrTypeTraitExpr 0x1c619094570 <col:42, col:70> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x1c619094550 <col:48, col:70> 'smallfelem [3]' lvalue
|   |   |     `-ArraySubscriptExpr 0x1c619094530 <col:49, col:69> 'smallfelem [3]' lvalue
|   |   |       |-ImplicitCastExpr 0x1c619094518 <col:49, col:66> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1c6190944d0 <col:49, col:66> 'smallfelem [16][3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1c6190944a0 <col:49, col:54> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   | `-MemberExpr 0x1c619094450 <col:49, col:54> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18 non_odr_use_unevaluated
|   |   |       |   |   `-ImplicitCastExpr 0x1c619094438 <col:49> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x1c619094418 <col:49> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
|   |   |       |   `-ImplicitCastExpr 0x1c6190944b8 <col:65> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1c619094480 <col:65> 'int' lvalue Var 0x1c619077140 'i' 'int' non_odr_use_unevaluated
|   |   |       `-IntegerLiteral 0x1c6190944f0 <col:68> 'int' 0
|   |   |-CallExpr 0x1c61908f4a8 <line:2294:9, line:2298:49> 'void'
|   |   | |-ImplicitCastExpr 0x1c61908f490 <line:2294:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c619094628 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1c618f81c88 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x1c61908f510 <col:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c6190947c0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c6190947a8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619094760 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619094748 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619094700 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c6190946d0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619094680 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619094668 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619094648 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c6190946e8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c6190946b0 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619094720 <col:44> 'int' 6
|   |   | |   `-IntegerLiteral 0x1c619094780 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c61908f528 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619094958 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619094940 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c6190948f8 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c6190948e0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619094898 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619094868 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619094818 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619094800 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c6190947e0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619094880 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619094848 <col:67> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c6190948b8 <col:70> 'int' 6
|   |   | |   `-IntegerLiteral 0x1c619094918 <col:73> 'int' 1
|   |   | |-ImplicitCastExpr 0x1c61908f540 <line:2295:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619094af0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619094ad8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619094a90 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619094a78 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619094a30 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619094a00 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c6190949b0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619094998 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619094978 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619094a18 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c6190949e0 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619094a50 <col:44> 'int' 6
|   |   | |   `-IntegerLiteral 0x1c619094ab0 <col:47> 'int' 2
|   |   | |-ImplicitCastExpr 0x1c61908f558 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619094c88 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619094c70 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619094c28 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619094c10 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619094bc8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619094b98 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619094b48 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619094b30 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619094b10 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619094bb0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619094b78 <col:67> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619094be8 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x1c619094c48 <col:73> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c61908f570 <line:2296:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619094e20 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619094e08 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619094dc0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619094da8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619094d60 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619094d30 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619094ce0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619094cc8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619094ca8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619094d48 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619094d10 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619094d80 <col:44> 'int' 4
|   |   | |   `-IntegerLiteral 0x1c619094de0 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x1c61908f588 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908efa8 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908ef90 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908ef48 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908ef30 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619094ef8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619094ec8 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619094e78 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619094e60 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619094e40 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619094ee0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619094ea8 <col:67> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619094f18 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x1c61908ef68 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x1c61908f5a0 <line:2297:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908f140 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908f128 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908f0e0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908f0c8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908f080 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908f050 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908f000 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908efe8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908efc8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908f068 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908f030 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908f0a0 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x1c61908f100 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c61908f5b8 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908f2d8 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908f2c0 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908f278 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908f260 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908f218 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908f1e8 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908f198 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908f180 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908f160 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908f200 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908f1c8 <col:67> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908f238 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x1c61908f298 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x1c61908f5d0 <line:2298:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x1c61908f470 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x1c61908f458 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1c61908f410 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c61908f3f8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1c61908f3b0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1c61908f380 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x1c61908f330 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |     |   |   |   `-ImplicitCastExpr 0x1c61908f318 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x1c61908f2f8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x1c61908f398 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1c61908f360 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1c61908f3d0 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x1c61908f430 <col:47> 'int' 2
|   |   |-CallExpr 0x1c619090478 <line:2300:9, line:2304:49> 'void'
|   |   | |-ImplicitCastExpr 0x1c619090460 <line:2300:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c61908f5e8 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1c618f81c88 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x1c6190904e0 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908f780 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908f768 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908f720 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908f708 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908f6c0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908f690 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908f640 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908f628 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908f608 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908f6a8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908f670 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908f6e0 <col:44> 'int' 10
|   |   | |   `-IntegerLiteral 0x1c61908f740 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c6190904f8 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908f918 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908f900 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908f8b8 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908f8a0 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908f858 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908f828 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908f7d8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908f7c0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908f7a0 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908f840 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908f808 <col:68> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908f878 <col:71> 'int' 10
|   |   | |   `-IntegerLiteral 0x1c61908f8d8 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x1c619090510 <line:2301:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908fab0 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908fa98 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908fa50 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908fa38 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908f9f0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908f9c0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908f970 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908f958 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908f938 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908f9d8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908f9a0 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908fa10 <col:44> 'int' 10
|   |   | |   `-IntegerLiteral 0x1c61908fa70 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x1c619090528 <col:52, col:75> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908fc48 <col:52, col:75> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908fc30 <col:52, col:72> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908fbe8 <col:52, col:72> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908fbd0 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908fb88 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908fb58 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908fb08 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908faf0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908fad0 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908fb70 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908fb38 <col:68> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908fba8 <col:71> 'int' 8
|   |   | |   `-IntegerLiteral 0x1c61908fc08 <col:74> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c619090540 <line:2302:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908fde0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908fdc8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908fd80 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908fd68 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908fd20 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908fcf0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908fca0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908fc88 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908fc68 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908fd08 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908fcd0 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908fd40 <col:44> 'int' 8
|   |   | |   `-IntegerLiteral 0x1c61908fda0 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x1c619090558 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908ff78 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908ff60 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908ff18 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908ff00 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908feb8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908fe88 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908fe38 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908fe20 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908fe00 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908fea0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908fe68 <col:67> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908fed8 <col:70> 'int' 8
|   |   | |   `-IntegerLiteral 0x1c61908ff38 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x1c619090570 <line:2303:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619090110 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c6190900f8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c6190900b0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619090098 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619090050 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619090020 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908ffd0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908ffb8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908ff98 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619090038 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619090000 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619090070 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x1c6190900d0 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c619090588 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c6190902a8 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619090290 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619090248 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619090230 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c6190901e8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c6190901b8 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619090168 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619090150 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619090130 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c6190901d0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619090198 <col:67> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619090208 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x1c619090268 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x1c6190905a0 <line:2304:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x1c619090440 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x1c619090428 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1c6190903e0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c6190903c8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1c619090380 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1c619090350 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x1c619090300 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |     |   |   |   `-ImplicitCastExpr 0x1c6190902e8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x1c6190902c8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x1c619090368 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1c619090330 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1c6190903a0 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x1c619090400 <col:47> 'int' 2
|   |   |-CallExpr 0x1c61908b428 <line:2306:9, line:2310:49> 'void'
|   |   | |-ImplicitCastExpr 0x1c61908b410 <line:2306:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c6190905b8 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1c618f81c88 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x1c61908b490 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619090750 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619090738 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c6190906f0 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c6190906d8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619090690 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619090660 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619090610 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c6190905f8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c6190905d8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619090678 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619090640 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c6190906b0 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x1c619090710 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c61908b4a8 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c6190908e8 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c6190908d0 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619090888 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619090870 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619090828 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c6190907f8 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c6190907a8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619090790 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619090770 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619090810 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c6190907d8 <col:68> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619090848 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x1c6190908a8 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x1c61908b4c0 <line:2307:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619090a80 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619090a68 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619090a20 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619090a08 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c6190909c0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619090990 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619090940 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619090928 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619090908 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c6190909a8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619090970 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c6190909e0 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x1c619090a40 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x1c61908b4d8 <col:52, col:75> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619090c18 <col:52, col:75> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619090c00 <col:52, col:72> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619090bb8 <col:52, col:72> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619090ba0 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619090b58 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619090b28 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619090ad8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619090ac0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619090aa0 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619090b40 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619090b08 <col:68> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619090b78 <col:71> 'int' 8
|   |   | |   `-IntegerLiteral 0x1c619090bd8 <col:74> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c61908b4f0 <line:2308:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c619090db0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c619090d98 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619090d50 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619090d38 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619090cf0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619090cc0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619090c70 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619090c58 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619090c38 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619090cd8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619090ca0 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619090d10 <col:44> 'int' 8
|   |   | |   `-IntegerLiteral 0x1c619090d70 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x1c61908b508 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908af28 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908af10 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c619090ee8 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c619090ed0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c619090e88 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c619090e58 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c619090e08 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c619090df0 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c619090dd0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c619090e70 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c619090e38 <col:67> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c619090ea8 <col:70> 'int' 8
|   |   | |   `-IntegerLiteral 0x1c619090f08 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x1c61908b520 <line:2309:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908b0c0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908b0a8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908b060 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908b048 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908b000 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908afd0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908af80 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908af68 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908af48 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908afe8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908afb0 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908b020 <col:44> 'int' 4
|   |   | |   `-IntegerLiteral 0x1c61908b080 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c61908b538 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908b258 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908b240 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908b1f8 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908b1e0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908b198 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908b168 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908b118 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908b100 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908b0e0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908b180 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908b148 <col:67> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908b1b8 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x1c61908b218 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x1c61908b550 <line:2310:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x1c61908b3f0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x1c61908b3d8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1c61908b390 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c61908b378 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1c61908b330 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1c61908b300 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x1c61908b2b0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |     |   |   |   `-ImplicitCastExpr 0x1c61908b298 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x1c61908b278 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x1c61908b318 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1c61908b2e0 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1c61908b350 <col:44> 'int' 4
|   |   |     `-IntegerLiteral 0x1c61908b3b0 <col:47> 'int' 2
|   |   |-CallExpr 0x1c61908c3f8 <line:2314:9, line:2318:49> 'void'
|   |   | |-ImplicitCastExpr 0x1c61908c3e0 <line:2314:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1c61908b568 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1c618f81c88 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x1c61908c460 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908b700 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908b6e8 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908b6a0 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908b688 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908b640 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908b610 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908b5c0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908b5a8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908b588 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908b628 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908b5f0 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908b660 <col:44> 'int' 14
|   |   | |   `-IntegerLiteral 0x1c61908b6c0 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c61908c478 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908b898 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908b880 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908b838 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908b820 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908b7d8 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908b7a8 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908b758 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908b740 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908b720 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908b7c0 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908b788 <col:68> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908b7f8 <col:71> 'int' 14
|   |   | |   `-IntegerLiteral 0x1c61908b858 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x1c61908c490 <line:2315:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908ba30 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908ba18 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908b9d0 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908b9b8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908b970 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908b940 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908b8f0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908b8d8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908b8b8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908b958 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908b920 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908b990 <col:44> 'int' 14
|   |   | |   `-IntegerLiteral 0x1c61908b9f0 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x1c61908c4a8 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908bbc8 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908bbb0 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908bb68 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908bb50 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908bb08 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908bad8 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908ba88 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908ba70 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908ba50 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908baf0 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908bab8 <col:68> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908bb28 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x1c61908bb88 <col:75> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c61908c4c0 <line:2316:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908bd60 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908bd48 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908bd00 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908bce8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908bca0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908bc70 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908bc20 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908bc08 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908bbe8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908bc88 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908bc50 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908bcc0 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x1c61908bd20 <col:48> 'int' 1
|   |   | |-ImplicitCastExpr 0x1c61908c4d8 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908bef8 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908bee0 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908be98 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908be80 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908be38 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908be08 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908bdb8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908bda0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908bd80 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908be20 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908bde8 <col:68> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908be58 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x1c61908beb8 <col:75> 'int' 2
|   |   | |-ImplicitCastExpr 0x1c61908c4f0 <line:2317:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908c090 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908c078 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908c030 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908c018 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908bfd0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908bfa0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908bf50 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908bf38 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908bf18 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908bfb8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908bf80 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908bff0 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x1c61908c050 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x1c61908c508 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1c61908c228 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1c61908c210 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1c61908c1c8 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1c61908c1b0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1c61908c168 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1c61908c138 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1c61908c0e8 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1c61908c0d0 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1c61908c0b0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1c61908c150 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1c61908c118 <col:67> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1c61908c188 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x1c61908c1e8 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x1c61908c520 <line:2318:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x1c61908c3c0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x1c61908c3a8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1c61908c360 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1c61908c348 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1c61908c300 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1c61908c2d0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x1c61908c280 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |   |     |   |   |   `-ImplicitCastExpr 0x1c61908c268 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x1c61908c248 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x1c61908c2e8 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1c61908c2b0 <col:41> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1c61908c320 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x1c61908c380 <col:47> 'int' 2
|   |   `-ForStmt 0x1c619089918 <line:2319:9, line:2330:9>
|   |     |-BinaryOperator 0x1c61908c580 <line:2319:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x1c61908c538 <col:14> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |     | `-IntegerLiteral 0x1c61908c558 <col:18> 'int' 1
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x1c61908c600 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x1c61908c5e8 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1c61908c5a0 <col:21> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |     | `-IntegerLiteral 0x1c61908c5c0 <col:25> 'int' 8
|   |     |-UnaryOperator 0x1c61908c640 <col:28, col:30> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x1c61908c620 <col:30> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |     `-CompoundStmt 0x1c619089900 <col:33, line:2330:9>
|   |       `-CallExpr 0x1c6190897c0 <line:2321:13, line:2329:53> 'void'
|   |         |-ImplicitCastExpr 0x1c6190897a8 <line:2321:13> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x1c61908c658 <col:13> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x1c618f81c88 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |         |-ImplicitCastExpr 0x1c619089828 <col:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c61908c890 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c61908c878 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c61908c830 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c61908c818 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c61908c730 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c61908c700 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c61908c6b0 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c61908c698 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c61908c678 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1c61908c718 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1c61908c6e0 <col:45> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1c61908c7f8 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x1c61908c7b0 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x1c61908c750 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x1c61908c798 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x1c61908c778 <col:52> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x1c61908c7d0 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x1c61908c850 <col:59> 'int' 0
|   |         |-ImplicitCastExpr 0x1c619089840 <line:2322:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c61908cac8 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c61908cab0 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c61908ca68 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c61908ca50 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c61908c968 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c61908c938 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c61908c8e8 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c61908c8d0 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c61908c8b0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1c61908c950 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1c61908c918 <col:45> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1c61908ca30 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x1c61908c9e8 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x1c61908c988 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x1c61908c9d0 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x1c61908c9b0 <col:52> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x1c61908ca08 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x1c61908ca88 <col:59> 'int' 1
|   |         |-ImplicitCastExpr 0x1c619089858 <line:2323:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c61908cd00 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c61908cce8 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c61908cca0 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c61908cc88 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c61908cba0 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c61908cb70 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c61908cb20 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c61908cb08 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c61908cae8 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1c61908cb88 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1c61908cb50 <col:45> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1c61908cc68 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x1c61908cc20 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x1c61908cbc0 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x1c61908cc08 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x1c61908cbe8 <col:52> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x1c61908cc40 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x1c61908ccc0 <col:59> 'int' 2
|   |         |-ImplicitCastExpr 0x1c619089870 <line:2324:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c61908cef0 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c61908ced8 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c61908ce90 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c61908ce78 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c61908cdd8 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c61908cda8 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c61908cd58 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c61908cd40 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c61908cd20 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1c61908cdc0 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1c61908cd88 <col:45> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1c61908ce58 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1c61908cdf8 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1c61908ce40 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1c61908ce20 <col:52> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |         |   `-IntegerLiteral 0x1c61908ceb0 <col:55> 'int' 0
|   |         |-ImplicitCastExpr 0x1c619089888 <line:2325:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c6190890d0 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c6190890b8 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c619089070 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c619089058 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c619088fb8 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c619088f88 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c619088f38 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c619088f20 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c619088f00 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1c619088fa0 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1c619088f68 <col:45> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1c619089038 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1c619088fd8 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1c619089020 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1c619089000 <col:52> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |         |   `-IntegerLiteral 0x1c619089090 <col:55> 'int' 1
|   |         |-ImplicitCastExpr 0x1c6190898a0 <line:2326:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c6190892c0 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c6190892a8 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c619089260 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c619089248 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c6190891a8 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c619089178 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c619089128 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c619089110 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c6190890f0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1c619089190 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1c619089158 <col:45> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1c619089228 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1c6190891c8 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1c619089210 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1c6190891f0 <col:52> 'int' lvalue Var 0x1c6190771c0 'j' 'int'
|   |         |   `-IntegerLiteral 0x1c619089280 <col:55> 'int' 2
|   |         |-ImplicitCastExpr 0x1c6190898b8 <line:2327:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c619089458 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c619089440 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c6190893f8 <col:29, col:49> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c6190893e0 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c619089398 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c619089368 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c619089318 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c619089300 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c6190892e0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1c619089380 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1c619089348 <col:45> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   |   `-IntegerLiteral 0x1c6190893b8 <col:48> 'int' 1
|   |         |   `-IntegerLiteral 0x1c619089418 <col:51> 'int' 0
|   |         |-ImplicitCastExpr 0x1c6190898d0 <line:2328:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1c6190895f0 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1c6190895d8 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1c619089590 <col:29, col:49> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1c619089578 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1c619089530 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1c619089500 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1c6190894b0 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |         |   |   |   |   `-ImplicitCastExpr 0x1c619089498 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1c619089478 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1c619089518 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1c6190894e0 <col:45> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |         |   |   `-IntegerLiteral 0x1c619089550 <col:48> 'int' 1
|   |         |   `-IntegerLiteral 0x1c6190895b0 <col:51> 'int' 1
|   |         `-ImplicitCastExpr 0x1c6190898e8 <line:2329:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |           `-ArraySubscriptExpr 0x1c619089788 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |             |-ImplicitCastExpr 0x1c619089770 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |             | `-ArraySubscriptExpr 0x1c619089728 <col:29, col:49> 'smallfelem [3]' lvalue
|   |             |   |-ImplicitCastExpr 0x1c619089710 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1c6190896c8 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1c619089698 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |             |   |   | `-MemberExpr 0x1c619089648 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   |             |   |   |   `-ImplicitCastExpr 0x1c619089630 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |             |   |   |     `-DeclRefExpr 0x1c619089610 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   |             |   |   `-ImplicitCastExpr 0x1c6190896b0 <col:45> 'int' <LValueToRValue>
|   |             |   |     `-DeclRefExpr 0x1c619089678 <col:45> 'int' lvalue Var 0x1c619077140 'i' 'int'
|   |             |   `-IntegerLiteral 0x1c6190896e8 <col:48> 'int' 1
|   |             `-IntegerLiteral 0x1c619089748 <col:51> 'int' 2
|   |-CallExpr 0x1c619089bc0 <line:2332:5, col:69> 'void'
|   | |-ImplicitCastExpr 0x1c619089ba8 <col:5> 'void (*)(size_t, smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c6190899c8 <col:5> 'void (size_t, smallfelem (*)[3], smallfelem *)' Function 0x1c619079438 'make_points_affine' 'void (size_t, smallfelem (*)[3], smallfelem *)'
|   | |-ImplicitCastExpr 0x1c619089bf8 <col:24> 'size_t':'unsigned long long' <IntegralCast>
|   | | `-IntegerLiteral 0x1c6190899e8 <col:24> 'int' 31
|   | |-UnaryOperator 0x1c619089b58 <col:28, col:51> 'smallfelem (*)[3]' prefix '&' cannot overflow
|   | | `-ParenExpr 0x1c619089b38 <col:29, col:51> 'smallfelem [3]' lvalue
|   | |   `-ArraySubscriptExpr 0x1c619089b18 <col:30, col:50> 'smallfelem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x1c619089b00 <col:30, col:47> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x1c619089ab8 <col:30, col:47> 'smallfelem [16][3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x1c619089aa0 <col:30, col:35> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x1c619089a48 <col:30, col:35> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x1c61907de18
|   | |     |   |   `-ImplicitCastExpr 0x1c619089a30 <col:30> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x1c619089a10 <col:30> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x1c619089a78 <col:46> 'int' 0
|   | |     `-IntegerLiteral 0x1c619089ad8 <col:49> 'int' 1
|   | `-ImplicitCastExpr 0x1c619089c10 <col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x1c619089b70 <col:54> 'smallfelem [32]' lvalue Var 0x1c619077448 'tmp_smallfelems' 'smallfelem [32]'
|   |-LabelStmt 0x1c619089c70 <line:2334:2, col:6> 'done'
|   | `-NullStmt 0x1c619089c68 <col:6>
|   |-BinaryOperator 0x1c619089d48 <line:2336:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'NISTP256_PRE_COMP *' '='
|   | |-DeclRefExpr 0x1c619089c88 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2336:5> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   | `-ImplicitCastExpr 0x1c619089d30 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |   `-ParenExpr 0x1c619089d10 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x1c619089ce8 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x1c619089ca8 <col:26> 'int' 0
|   |-BinaryOperator 0x1c619089dc8 <.//openssl//file_jk/after\crypto\ec\ecp_nistp256.c:2337:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x1c619089d68 <col:5> 'int' lvalue Var 0x1c619076f50 'ret' 'int'
|   | `-IntegerLiteral 0x1c619089da0 <col:11> 'int' 1
|   |-LabelStmt 0x1c619089e10 <line:2339:2, col:5> 'err'
|   | `-NullStmt 0x1c619089e08 <col:5>
|   |-CallExpr 0x1c619089f20 <line:2343:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1c619089f08 <col:5> 'void (*)(NISTP256_PRE_COMP *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1c619089e68 <col:5> 'void (NISTP256_PRE_COMP *)' Function 0x1c6190835a0 'EC_nistp256_pre_comp_free' 'void (NISTP256_PRE_COMP *)'
|   | `-ImplicitCastExpr 0x1c619089f48 <col:31> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c619089e88 <col:31> 'NISTP256_PRE_COMP *' lvalue Var 0x1c619077008 'pre' 'NISTP256_PRE_COMP *'
|   `-ReturnStmt 0x1c619089f98 <line:2344:5, col:12>
|     `-ImplicitCastExpr 0x1c619089f80 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1c619089f60 <col:12> 'int' lvalue Var 0x1c619076f50 'ret' 'int'
`-FunctionDecl 0x1c61908a130 <line:2347:1, line:2350:1> line:2347:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
  |-ParmVarDecl 0x1c61908a098 <col:42, col:58> col:58 invalid group 'const int *'
  `-CompoundStmt 0x1c61908a298 <line:2348:1, line:2350:1>
