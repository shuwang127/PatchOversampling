TranslationUnitDecl 0x2ac49a13c18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2ac49a144b0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2ac49a141b0 '__int128'
|-TypedefDecl 0x2ac49a14520 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2ac49a141d0 'unsigned __int128'
|-TypedefDecl 0x2ac49a14858 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x2ac49a14610 'struct __NSConstantString_tag'
|   `-Record 0x2ac49a14578 '__NSConstantString_tag'
|-TypedefDecl 0x2ac49a148c8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x2ac49a13df0 'unsigned long long'
|-TypedefDecl 0x2ac49a14960 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2ac49a14920 'char *'
|   `-BuiltinType 0x2ac49a13cb0 'char'
|-TypedefDecl 0x2ac49a149d0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x2ac49a14920 'char *'
|   `-BuiltinType 0x2ac49a13cb0 'char'
|-TypedefDecl 0x2ac49a14a90 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x2ac49a13df0 'unsigned long long'
|-TypedefDecl 0x2ac49a14b00 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x2ac49a14920 'char *'
|   `-BuiltinType 0x2ac49a13cb0 'char'
|-FunctionDecl 0x2ac4b43b3e0 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x2ac4b43b480 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x2ac4b43b4f0 <col:21> Implicit
|-FunctionDecl 0x2ac4b43b548 prev 0x2ac4b43b3e0 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x2ac4b43b270 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x2ac4b43b638 <col:21> Inherited Implicit
|-TypedefDecl 0x2ac4b43b678 prev 0x2ac49a148c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x2ac49a13df0 'unsigned long long'
|-TypedefDecl 0x2ac4b43b720 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x2ac4b43b6f0 'size_t' sugar
|   |-Typedef 0x2ac4b43b678 'size_t'
|   `-BuiltinType 0x2ac49a13df0 'unsigned long long'
|-TypedefDecl 0x2ac4b43b790 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x2ac49a13d50 'long long'
|-TypedefDecl 0x2ac4b43b800 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x2ac49a13d50 'long long'
|-TypedefDecl 0x2ac4b43b870 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x2ac49a13d90 'unsigned short'
|-TypedefDecl 0x2ac4b43b8e0 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x2ac49a13d90 'unsigned short'
|-TypedefDecl 0x2ac4b43b950 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x2ac49a13d90 'unsigned short'
|-TypedefDecl 0x2ac4b43b9c0 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x2ac49a13d10 'int'
|-TypedefDecl 0x2ac4b43ba30 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x2ac49a13d30 'long'
|-TypedefDecl 0x2ac4b43baa0 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x2ac49a13d50 'long long'
|-TypedefDecl 0x2ac4b43bb30 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x2ac4b43bb00 '__time64_t' sugar
|   |-Typedef 0x2ac4b43baa0 '__time64_t'
|   `-BuiltinType 0x2ac49a13d50 'long long'
|-FunctionDecl 0x2ac4b43bca8 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x2ac4b43bec8 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x2ac4b475600 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x2ac4b43c008 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b43c080 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b43c0f8 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b43c178 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x2ac4b4753a0 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x2ac4b4756e0 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x2ac4b4757a0 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x2ac4b475910 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x2ac4b4758c0 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x2ac4b475860 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x2ac4b475780 'struct threadlocaleinfostruct'
|       `-Record 0x2ac4b4874c0 'threadlocaleinfostruct'
|-TypedefDecl 0x2ac4b475a20 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x2ac4b4759d0 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x2ac4b475970 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x2ac4b475840 'struct threadmbcinfostruct'
|       `-Record 0x2ac4b4757a0 'threadmbcinfostruct'
|-RecordDecl 0x2ac4b475a78 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x2ac4b475b30 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x2ac4b475bf0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2ac4b475c80 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x2ac4b475d10 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x2ac4b475dc8 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x2ac4b475d70 'struct localeinfo_struct' sugar
|   `-RecordType 0x2ac4b475bd0 'struct localeinfo_struct'
|     `-Record 0x2ac4b475b30 'localeinfo_struct'
|-TypedefDecl 0x2ac4b475ea0 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x2ac4b475e50 'struct localeinfo_struct *'
|   `-ElaboratedType 0x2ac4b475d70 'struct localeinfo_struct' sugar
|     `-RecordType 0x2ac4b475bd0 'struct localeinfo_struct'
|       `-Record 0x2ac4b475b30 'localeinfo_struct'
|-RecordDecl 0x2ac4b475f18 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x2ac4b475fd0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2ac4b476048 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x2ac4b476108 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x2ac4b4761a0 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x2ac4b476210 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x2ac4b4762c8 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x2ac4b476270 'struct localerefcount' sugar
|   `-RecordType 0x2ac4b475fb0 'struct localerefcount'
|     `-Record 0x2ac4b475f18 'localerefcount'
|-RecordDecl 0x2ac4b4874c0 prev 0x2ac4b4756e0 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x2ac4b487540 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2ac4b4875b8 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x2ac4b487628 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x2ac4b487698 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x2ac4b487708 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x2ac4b4878c8 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x2ac4b487938 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x2ac4b4879a8 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x2ac4b487a18 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x2ac4b487a88 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x2ac4b487af8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x2ac4b487b50 parent 0x2ac49a13c18 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x2ac4b487ce0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x2ac4b487d50 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x2ac4b487dc0 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x2ac4b487e30 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x2ac4b487ed0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x2ac4b487f40 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x2ac4b488050 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x2ac4b488188 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x2ac4b488238 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x2ac4b4881e0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x2ac4b475780 'struct threadlocaleinfostruct'
|     `-Record 0x2ac4b4874c0 'threadlocaleinfostruct'
|-FunctionDecl 0x2ac4b482680 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x2ac4b4882c0 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x2ac4b488370 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x2ac4b4883f0 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x2ac4b482470 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b482a48 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b482ae8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x2ac4b482b50 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x2ac4b482bb8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b482c38 prev 0x2ac4b482a48 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x2ac4b482770 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x2ac4b4827f0 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x2ac4b482868 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b482ff8 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x2ac4b482d20 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x2ac4b482da0 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x2ac4b482e18 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b4804a0 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b4830e0 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x2ac4b483160 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x2ac4b4831d8 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b483270 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4807a8 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b480848 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x2ac4b4808b0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x2ac4b480918 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b480998 prev 0x2ac4b4807a8 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x2ac4b480590 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x2ac4b480610 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x2ac4b480688 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b480d58 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b480df8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2ac4b480e60 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x2ac4b480ec8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b480f48 prev 0x2ac4b480d58 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x2ac4b480a80 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x2ac4b480b00 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x2ac4b480b78 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b4884d0 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x2ac4b481058 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x2ac4b4810f0 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b481170 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x2ac4b4811e8 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2ac4b488898 <line:94:25> col:25 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b488938 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2ac4b4889a0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x2ac4b488a08 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b488a88 prev 0x2ac4b488898 <col:9, col:107> col:25 used memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x2ac4b4885c0 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x2ac4b488640 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x2ac4b4886b8 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b488f08 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b488fa8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2ac4b489010 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x2ac4b489078 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x2ac4b4890e0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b489168 prev 0x2ac4b488f08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x2ac4b488c50 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x2ac4b488cd0 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x2ac4b488d50 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x2ac4b488dc8 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b489228 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x2ac4b484628 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x2ac4b4893f0 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x2ac4b484490 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x2ac4b484508 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b4846e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x2ac4b484ad0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x2ac4b484808 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x2ac4b484880 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b484900 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x2ac4b484ea0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x2ac4b484cb0 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b484d30 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x2ac4b484f50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b485360 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x2ac4b485098 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x2ac4b485110 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b485190 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x2ac4b481720 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x2ac4b4817c0 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x2ac4b481828 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2ac4b4818a0 prev 0x2ac4b481720 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x2ac4b481538 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b4815b8 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x2ac4b481950 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b481ca8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x2ac4b481a98 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x2ac4b481b10 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b481b90 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x2ac4b481fd0 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x2ac4b482070 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x2ac4b4820d8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2ac4b482150 prev 0x2ac4b481fd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x2ac4b481e50 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b481ed0 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x2ac4b482200 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b48e600 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x2ac4b48e6a0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b48e708 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2ac4b48e780 prev 0x2ac4b48e600 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x2ac4b482348 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x2ac4b4823c8 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x2ac4b48e9d0 <line:121:32> col:32 implicit strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x2ac4b48ea70 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2ac4b48eae0 prev 0x2ac4b48e9d0 <col:16, col:63> col:32 strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x2ac4b48e860 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x2ac4b48edd8 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x2ac4b48ebb8 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b48ec30 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b48f028 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x2ac4b48eeb8 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x2ac4b48ef30 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x2ac4b48f358 <line:131:1, line:133:1>
|   `-ReturnStmt 0x2ac4b48f348 <line:132:5, col:51>
|     `-ConditionalOperator 0x2ac4b48f318 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x2ac4b48f188 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x2ac4b48f168 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x2ac4b48f138 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2ac4b48f0f0 <col:13> 'const char *' lvalue ParmVar 0x2ac4b48eeb8 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x2ac4b48f150 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x2ac4b48f110 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x2ac4b48f300 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x2ac4b48f1a8 <col:24> 'int' 0
|       `-CallExpr 0x2ac4b48f2a0 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x2ac4b48f288 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x2ac4b48f1d0 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x2ac4b48edd8 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x2ac4b48f2d0 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x2ac4b48f1f0 <col:36> 'const char *' lvalue ParmVar 0x2ac4b48eeb8 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x2ac4b48f2e8 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x2ac4b48f210 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x2ac4b48ef30 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b48f678 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x2ac4b48f388 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x2ac4b48f400 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b48f480 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x2ac4b48f540 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2ac4b48f980 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b48fa20 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2ac4b48fa88 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x2ac4b48faf0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b48fb70 prev 0x2ac4b48f980 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x2ac4b48f768 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x2ac4b48f7e8 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x2ac4b48f860 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b48fda8 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x2ac4b48fc58 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x2ac4b490070 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x2ac4b490110 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b490178 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2ac4b4901f0 prev 0x2ac4b490070 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x2ac4b48fe80 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b48ff00 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x2ac4b490450 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2ac4b4902d0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x2ac4b490350 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x2ac4b4906d0 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2ac4b490550 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x2ac4b4905d0 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x2ac4b490a88 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b4907b0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b490830 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x2ac4b4908a8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b490cf0 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2ac4b490b70 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x2ac4b490bf0 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x2ac4b490fe8 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b490dd0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b490e50 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x2ac4b490ec8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b491250 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2ac4b4910d0 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x2ac4b491150 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x2ac4b48c510 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b491330 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b4913b0 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x2ac4b491428 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b48c8c8 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x2ac4b48c5f8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b48c678 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x2ac4b48c6f0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b48cd30 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b48c9b0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b48ca30 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x2ac4b48caa8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b48cb20 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b48d038 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x2ac4b48ce20 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b48cea0 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x2ac4b48cf18 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b48d3d0 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b48d120 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b48d1a0 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x2ac4b48d218 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b48d290 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b489708 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x2ac4b4897a8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b489810 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2ac4b489888 prev 0x2ac4b489708 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x2ac4b4894e0 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b489560 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x2ac4b489b40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x2ac4b489a60 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x2ac4b489be8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b489fc0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x2ac4b489d30 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x2ac4b489da8 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b489e28 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x2ac4b48a2d8 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x2ac4b48a378 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2ac4b48a3e8 prev 0x2ac4b48a2d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x2ac4b48a1a0 <col:90> col:93 'int'
| `-DeprecatedAttr 0x2ac4b48a490 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b491870 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x2ac4b491660 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x2ac4b4916d8 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b491758 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x2ac4b491b78 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x2ac4b491958 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x2ac4b4919d0 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b491e68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2ac4b491d18 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x2ac4b491f10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b492320 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b492058 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x2ac4b4920d0 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b492148 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b48b6b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b4924c8 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x2ac4b48b500 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2ac4b48b760 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b48bc18 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x2ac4b48b8a8 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x2ac4b48b920 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b48b9a0 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x2ac4b48ba18 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2ac4b48c098 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b48c138 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x2ac4b48c1a0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b48c208 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b48c288 prev 0x2ac4b48c098 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x2ac4b48bdc8 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b48be48 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x2ac4b48bec0 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b48c340 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b48a6a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b48a740 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x2ac4b48a7a8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b48a810 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b48a890 prev 0x2ac4b48a6a0 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x2ac4b48c488 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b48a508 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x2ac4b48a580 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b48ab90 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x2ac4b48a978 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b48a9f8 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x2ac4b48aa70 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b48af28 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b48ac78 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b48acf8 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x2ac4b48ad70 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b48ade8 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b48b2c0 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x2ac4b48b018 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x2ac4b48b090 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b48b110 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x2ac4b48b188 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2ac4b492708 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b4927a8 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x2ac4b492810 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b492878 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b4928f8 prev 0x2ac4b492708 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x2ac4b48b470 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b492570 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x2ac4b4925e8 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b4929b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b492e68 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x2ac4b492af8 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x2ac4b492b70 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b492bf0 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x2ac4b492c68 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b4932e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x2ac4b493018 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b493098 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x2ac4b493110 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b4933a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4936f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x2ac4b493790 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b4937f8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2ac4b493870 prev 0x2ac4b4936f0 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x2ac4b4934e8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b493580 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x2ac4b493ad0 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x2ac4b493b70 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b493bd8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2ac4b493c50 prev 0x2ac4b493ad0 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x2ac4b493950 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b4939d0 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x2ac4b493e10 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x2ac4b493d30 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x2ac4b494060 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x2ac4b494100 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b494168 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2ac4b4941e0 prev 0x2ac4b494060 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x2ac4b493ee8 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b493f68 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x2ac4b494440 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x2ac4b4944e0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b50cff0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2ac4b50d068 prev 0x2ac4b494440 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x2ac4b4942c0 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b494340 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x2ac4b50d388 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x2ac4b50d428 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x2ac4b50d490 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2ac4b50d508 prev 0x2ac4b50d388 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x2ac4b50d208 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x2ac4b50d288 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x2ac4b50d5b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b50d998 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x2ac4b50d700 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x2ac4b50d780 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x2ac4b50d800 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x2ac4b50dbf0 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x2ac4b50da80 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x2ac4b50daf8 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b50de70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2ac4b50dd90 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x2ac4b50df18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b50c2e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b50c0e0 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x2ac4b50c158 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b50c1d0 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b50c608 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b50c490 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x2ac4b50c508 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2ac4b50c6b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b50cad0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b50cb70 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x2ac4b50cbd8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b50cc40 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b50ccc0 prev 0x2ac4b50cad0 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x2ac4b50c800 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x2ac4b50c880 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x2ac4b50c8f8 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b5080d8 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b50cda8 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x2ac4b50ce28 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x2ac4b50cea0 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b50cf18 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b508380 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x2ac4b508420 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2ac4b508490 prev 0x2ac4b508380 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x2ac4b5082a0 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x2ac4b508538 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x2ac4b508880 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2ac4b508700 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b508780 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x2ac4b508930 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x2ac4b508c78 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2ac4b508af8 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b508b78 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x2ac4b508d28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x2ac4b50e038 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2ac4b508ef0 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x2ac4b50e0e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x2ac4b50e4f8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x2ac4b50e2e0 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x2ac4b50e360 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b50e3d8 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b50e5b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x2ac4b50e990 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x2ac4b50e778 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x2ac4b50e7f8 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x2ac4b50e870 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b50ea48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x2ac4b50ecf0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2ac4b50ec10 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x2ac4b50ed98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x2ac4b507090 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x2ac4b50ef60 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x2ac4b506f90 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x2ac4b507140 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x2ac4b5073e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2ac4b507308 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x2ac4b507490 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x2ac4b507720 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x2ac4b5075b0 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x2ac4b507ab0 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b5077f0 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2ac4b507868 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b5078e0 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x2ac4b507e68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b507c50 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2ac4b507cc8 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x2ac4b507f18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b50b2e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x2ac4b50b388 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x2ac4b50b3f0 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x2ac4b50b468 prev 0x2ac4b50b2e8 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x2ac4b50b0c8 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b50b140 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x2ac4b50b760 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x2ac4b50b800 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x2ac4b50b868 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x2ac4b50b8e0 prev 0x2ac4b50b760 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x2ac4b50b540 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b50b5b8 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x2ac4b50bbc0 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b50b9b8 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2ac4b50ba30 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b50baa8 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x2ac4b50bed0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b50bd60 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2ac4b50bdd8 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x2ac4b50bf80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b5092c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b5090a8 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b509120 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x2ac4b509510 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x2ac4b5095b0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x2ac4b509620 prev 0x2ac4b509510 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x2ac4b5093a0 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x2ac4b509908 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b5096f0 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b509768 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b509b50 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x2ac4b5099e0 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b509a58 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x2ac4b509ee8 <line:306:1, line:308:1>
|   `-ReturnStmt 0x2ac4b509ed8 <line:307:5, col:56>
|     `-ConditionalOperator 0x2ac4b509ea8 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x2ac4b509d10 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x2ac4b509cf0 <col:13, line:36:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x2ac4b509cc0 <line:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2ac4b509c18 <col:13> 'const wchar_t *' lvalue ParmVar 0x2ac4b5099e0 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x2ac4b509cd8 <line:36:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x2ac4b509ca0 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x2ac4b509c78 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x2ac4b509c38 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x2ac4b509e90 <line:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x2ac4b509d30 <col:29> 'int' 0
|       `-CallExpr 0x2ac4b509e30 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x2ac4b509e18 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x2ac4b509d58 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x2ac4b509908 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x2ac4b509e60 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x2ac4b509d78 <col:41> 'const wchar_t *' lvalue ParmVar 0x2ac4b5099e0 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x2ac4b509e78 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x2ac4b509d98 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x2ac4b509a58 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b510318 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x2ac4b509f10 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2ac4b510020 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b510098 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b510110 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2ac4b510780 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b5104c0 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2ac4b510538 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b5105b0 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b510838 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b510c48 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b510ce8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x2ac4b510d50 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x2ac4b510db8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b510e38 prev 0x2ac4b510c48 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x2ac4b510978 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b5109f0 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b510a68 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b5111e0 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x2ac4b510f18 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2ac4b510f90 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b511030 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b5110a8 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2ac4b511590 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b511388 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2ac4b511400 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b511478 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b511648 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b5119a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b511788 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b511800 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x2ac4b511bf0 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x2ac4b511a80 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b511af8 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x2ac4b511e38 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b511cc8 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b511d40 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x2ac4b50a020 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b511f10 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b511f88 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x2ac4b50a328 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b50a1b8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x2ac4b50a230 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x2ac4b50a3d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b50a840 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x2ac4b50a518 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x2ac4b50a590 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b50a670 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x2ac4b50ab60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x2ac4b50a9e8 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x2ac4b50ac08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b5120b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2ac4b50ad48 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b50adc0 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b50ae40 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x2ac4b512360 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x2ac4b512288 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x2ac4b512408 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b5127d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b512548 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x2ac4b5125c0 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b512638 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x2ac4b512a28 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b5128b0 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b512928 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x2ac4b512dc8 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2ac4b512b00 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b512b78 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b512bf0 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b516108 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b512ea8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b512f20 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b512f98 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b516560 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b5161e8 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b516260 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b5162d8 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b516350 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b5169b8 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x2ac4b516648 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2ac4b5166c0 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b516738 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x2ac4b5167b0 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b516e20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x2ac4b516b60 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x2ac4b516bd8 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x2ac4b516c50 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b516ed8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b51a1d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x2ac4b517018 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x2ac4b51a560 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x2ac4b51a2a0 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2ac4b51a318 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b51a390 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x2ac4b51a918 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x2ac4b51a700 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x2ac4b51a778 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x2ac4b51a9c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b51ad28 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b51ab08 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x2ac4b51ab80 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b51af98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2ac4b51aec0 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x2ac4b51b040 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b517450 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b517188 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x2ac4b517200 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b517278 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b517808 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2ac4b5175f0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x2ac4b517668 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2ac4b5178b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b517b68 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b5179f8 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x2ac4b517a70 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b517dd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2ac4b517d00 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x2ac4b517e80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b5141f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b517fc0 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x2ac4b514060 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b5140d8 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b514500 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2ac4b514390 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x2ac4b514408 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2ac4b5145b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b5149b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b5146f0 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2ac4b514768 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b5147e0 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b514df8 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b514a90 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2ac4b514b08 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b514b80 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b514bf8 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b515070 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b514ee0 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b514f58 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x2ac4b515358 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2ac4b515148 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b5151c0 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b515238 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b5155b0 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b515438 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b5154b0 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x2ac4b515898 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2ac4b515688 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b515700 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b515778 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b515b88 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b515978 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b5159f0 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b515a68 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b515f10 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b515c68 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b515ce0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b515d58 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b515dd0 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b518238 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b515ff8 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b5180a0 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b518118 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b5185c0 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b518318 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b518390 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b518408 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b518480 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b518820 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x2ac4b518748 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x2ac4b5188c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x2ac4b518c00 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b518a88 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b518b00 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x2ac4b518cb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x2ac4b51b0d0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b518e70 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b518ee8 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b518f60 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b51b188 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x2ac4b51b550 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x2ac4b51b348 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x2ac4b51b3c0 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x2ac4b51b438 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b51b608 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x2ac4b51b8a0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2ac4b51b7c8 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x2ac4b51b948 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x2ac4b51bc78 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x2ac4b51bb08 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x2ac4b51bb80 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x2ac4b51bd28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x2ac4b51bfc0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2ac4b51bee8 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x2ac4b51c068 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x2ac4b5233a0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2ac4b5232c8 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x2ac4b523448 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x2ac4b523780 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b523608 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b523680 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x2ac4b523830 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-TypedefDecl 0x2ac4b523b28 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:52:1, col:24> col:24 referenced _onexit_t 'int (*)(void) __attribute__((cdecl))'
| `-PointerType 0x2ac4b523ac0 'int (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x2ac4b523a60 'int (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x2ac4b523a10 'int (void)' sugar
|     | `-FunctionProtoType 0x2ac4b5239e0 'int (void)' cdecl
|     |   `-BuiltinType 0x2ac49a13d10 'int'
|     `-ParenType 0x2ac4b523a10 'int (void)' sugar
|       `-FunctionProtoType 0x2ac4b5239e0 'int (void)' cdecl
|         `-BuiltinType 0x2ac49a13d10 'int'
|-RecordDecl 0x2ac4b523b80 <line:75:9, line:78:1> line:75:16 struct _div_t definition
| |-MaxFieldAlignmentAttr 0x2ac4b523c40 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2ac4b523cb8 <line:76:9, col:13> col:13 quot 'int'
| `-FieldDecl 0x2ac4b523d28 <line:77:9, col:13> col:13 rem 'int'
|-TypedefDecl 0x2ac4b523dd8 <line:75:1, line:78:3> col:3 referenced div_t 'struct _div_t':'struct _div_t'
| `-ElaboratedType 0x2ac4b523d80 'struct _div_t' sugar
|   `-RecordType 0x2ac4b523c20 'struct _div_t'
|     `-Record 0x2ac4b523b80 '_div_t'
|-RecordDecl 0x2ac4b523e48 <line:80:9, line:83:1> line:80:16 struct _ldiv_t definition
| |-MaxFieldAlignmentAttr 0x2ac4b523f00 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2ac4b523f78 <line:81:9, col:14> col:14 quot 'long'
| `-FieldDecl 0x2ac4b523fe8 <line:82:9, col:14> col:14 rem 'long'
|-TypedefDecl 0x2ac4b524098 <line:80:1, line:83:3> col:3 referenced ldiv_t 'struct _ldiv_t':'struct _ldiv_t'
| `-ElaboratedType 0x2ac4b524040 'struct _ldiv_t' sugar
|   `-RecordType 0x2ac4b523ee0 'struct _ldiv_t'
|     `-Record 0x2ac4b523e48 '_ldiv_t'
|-RecordDecl 0x2ac4b51d0f0 <line:85:9, line:88:1> line:85:16 struct _lldiv_t definition
| |-MaxFieldAlignmentAttr 0x2ac4b51d1b0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2ac4b51d228 <line:86:9, col:19> col:19 quot 'long long'
| `-FieldDecl 0x2ac4b51d298 <line:87:9, col:19> col:19 rem 'long long'
|-TypedefDecl 0x2ac4b51d348 <line:85:1, line:88:3> col:3 referenced lldiv_t 'struct _lldiv_t':'struct _lldiv_t'
| `-ElaboratedType 0x2ac4b51d2f0 'struct _lldiv_t' sugar
|   `-RecordType 0x2ac4b51d190 'struct _lldiv_t'
|     `-Record 0x2ac4b51d0f0 '_lldiv_t'
|-RecordDecl 0x2ac4b51d3e0 <line:103:9, line:105:1> line:103:9 struct definition
| |-MaxFieldAlignmentAttr 0x2ac4b51d4a0 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x2ac4b51d5a0 <line:104:5, col:24> col:19 ld 'unsigned char [10]'
|-TypedefDecl 0x2ac4b51d658 <line:103:1, line:105:3> col:3 referenced _LDOUBLE 'struct _LDOUBLE':'_LDOUBLE'
| `-ElaboratedType 0x2ac4b51d600 'struct _LDOUBLE' sugar
|   `-RecordType 0x2ac4b51d480 '_LDOUBLE'
|     `-Record 0x2ac4b51d3e0 ''
|-RecordDecl 0x2ac4b51d6c8 <line:122:9, line:124:1> line:122:9 struct definition
| `-FieldDecl 0x2ac4b51d798 <line:123:9, col:16> col:16 x 'double'
|-TypedefDecl 0x2ac4b51d848 <line:122:1, line:124:3> col:3 referenced _CRT_DOUBLE 'struct _CRT_DOUBLE':'_CRT_DOUBLE'
| `-ElaboratedType 0x2ac4b51d7f0 'struct _CRT_DOUBLE' sugar
|   `-RecordType 0x2ac4b51d760 '_CRT_DOUBLE'
|     `-Record 0x2ac4b51d6c8 ''
|-RecordDecl 0x2ac4b51d8b8 <line:126:9, line:128:1> line:126:9 struct definition
| `-FieldDecl 0x2ac4b51d988 <line:127:5, col:11> col:11 f 'float'
|-TypedefDecl 0x2ac4b51da38 <line:126:1, line:128:3> col:3 referenced _CRT_FLOAT 'struct _CRT_FLOAT':'_CRT_FLOAT'
| `-ElaboratedType 0x2ac4b51d9e0 'struct _CRT_FLOAT' sugar
|   `-RecordType 0x2ac4b51d950 '_CRT_FLOAT'
|     `-Record 0x2ac4b51d8b8 ''
|-RecordDecl 0x2ac4b51daa8 <line:134:9, line:139:1> line:134:9 struct definition
| `-FieldDecl 0x2ac4b51db78 <line:138:9, col:21> col:21 x 'long double'
|-TypedefDecl 0x2ac4b51dc28 <line:134:1, line:139:3> col:3 _LONGDOUBLE 'struct _LONGDOUBLE':'_LONGDOUBLE'
| `-ElaboratedType 0x2ac4b51dbd0 'struct _LONGDOUBLE' sugar
|   `-RecordType 0x2ac4b51db40 '_LONGDOUBLE'
|     `-Record 0x2ac4b51daa8 ''
|-RecordDecl 0x2ac4b51dcc0 <line:144:9, line:146:1> line:144:9 struct definition
| |-MaxFieldAlignmentAttr 0x2ac4b51dd80 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x2ac4b51de80 <line:145:5, col:26> col:19 ld12 'unsigned char [12]'
|-TypedefDecl 0x2ac4b51df38 <line:144:1, line:146:3> col:3 _LDBL12 'struct _LDBL12':'_LDBL12'
| `-ElaboratedType 0x2ac4b51dee0 'struct _LDBL12' sugar
|   `-RecordType 0x2ac4b51dd60 '_LDBL12'
|     `-Record 0x2ac4b51dcc0 ''
|-VarDecl 0x2ac4b51dfc0 <line:170:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x2ac4b5241c0 <line:175:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x2ac4b5243e8 <line:176:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x2ac4b524288 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-TypedefDecl 0x2ac4b524630 <line:215:1, col:24> col:24 referenced _purecall_handler 'void (*)(void) __attribute__((cdecl))'
| `-PointerType 0x2ac4b5245d0 'void (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x2ac4b524570 'void (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x2ac4b524520 'void (void)' sugar
|     | `-FunctionProtoType 0x2ac4b43bc00 'void (void)' cdecl
|     |   `-BuiltinType 0x2ac49a13c70 'void'
|     `-ParenType 0x2ac4b524520 'void (void)' sugar
|       `-FunctionProtoType 0x2ac4b43bc00 'void (void)' cdecl
|         `-BuiltinType 0x2ac49a13c70 'void'
|-FunctionDecl 0x2ac4b524830 <line:218:9, col:92> col:35 _set_purecall_handler '_purecall_handler (_purecall_handler) __attribute__((cdecl))':'_purecall_handler (_purecall_handler)'
| `-ParmVarDecl 0x2ac4b5246c0 <col:66, col:84> col:84 _Handler '_purecall_handler':'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x2ac4b524a48 <line:219:9, col:61> col:35 _get_purecall_handler '_purecall_handler (void) __attribute__((cdecl))':'_purecall_handler (void)'
|-TypedefDecl 0x2ac4b524e98 <line:235:1, col:24> col:24 referenced _invalid_parameter_handler 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
| `-PointerType 0x2ac4b524e10 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|   `-AttributedType 0x2ac4b524db0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))' sugar
|     |-ParenType 0x2ac4b524d60 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|     | `-FunctionProtoType 0x2ac4b475460 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|     |   |-BuiltinType 0x2ac49a13c70 'void'
|     |   |-PointerType 0x2ac4b43bfd0 'const wchar_t *'
|     |   | `-QualType 0x2ac4b43bf81 'const wchar_t' const
|     |   |   `-TypedefType 0x2ac4b43bf80 'wchar_t' sugar
|     |   |     |-Typedef 0x2ac4b43b870 'wchar_t'
|     |   |     `-BuiltinType 0x2ac49a13d90 'unsigned short'
|     |   |-PointerType 0x2ac4b43bfd0 'const wchar_t *'
|     |   | `-QualType 0x2ac4b43bf81 'const wchar_t' const
|     |   |   `-TypedefType 0x2ac4b43bf80 'wchar_t' sugar
|     |   |     |-Typedef 0x2ac4b43b870 'wchar_t'
|     |   |     `-BuiltinType 0x2ac49a13d90 'unsigned short'
|     |   |-PointerType 0x2ac4b43bfd0 'const wchar_t *'
|     |   | `-QualType 0x2ac4b43bf81 'const wchar_t' const
|     |   |   `-TypedefType 0x2ac4b43bf80 'wchar_t' sugar
|     |   |     |-Typedef 0x2ac4b43b870 'wchar_t'
|     |   |     `-BuiltinType 0x2ac49a13d90 'unsigned short'
|     |   |-BuiltinType 0x2ac49a13db0 'unsigned int'
|     |   `-TypedefType 0x2ac4b43c1e0 'uintptr_t' sugar
|     |     |-Typedef 0x2ac49a14a90 'uintptr_t'
|     |     `-BuiltinType 0x2ac49a13df0 'unsigned long long'
|     `-ParenType 0x2ac4b524d60 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|       `-FunctionProtoType 0x2ac4b475460 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|         |-BuiltinType 0x2ac49a13c70 'void'
|         |-PointerType 0x2ac4b43bfd0 'const wchar_t *'
|         | `-QualType 0x2ac4b43bf81 'const wchar_t' const
|         |   `-TypedefType 0x2ac4b43bf80 'wchar_t' sugar
|         |     |-Typedef 0x2ac4b43b870 'wchar_t'
|         |     `-BuiltinType 0x2ac49a13d90 'unsigned short'
|         |-PointerType 0x2ac4b43bfd0 'const wchar_t *'
|         | `-QualType 0x2ac4b43bf81 'const wchar_t' const
|         |   `-TypedefType 0x2ac4b43bf80 'wchar_t' sugar
|         |     |-Typedef 0x2ac4b43b870 'wchar_t'
|         |     `-BuiltinType 0x2ac49a13d90 'unsigned short'
|         |-PointerType 0x2ac4b43bfd0 'const wchar_t *'
|         | `-QualType 0x2ac4b43bf81 'const wchar_t' const
|         |   `-TypedefType 0x2ac4b43bf80 'wchar_t' sugar
|         |     |-Typedef 0x2ac4b43b870 'wchar_t'
|         |     `-BuiltinType 0x2ac49a13d90 'unsigned short'
|         |-BuiltinType 0x2ac49a13db0 'unsigned int'
|         `-TypedefType 0x2ac4b43c1e0 'uintptr_t' sugar
|           |-Typedef 0x2ac49a14a90 'uintptr_t'
|           `-BuiltinType 0x2ac49a13df0 'unsigned long long'
|-FunctionDecl 0x2ac4b525090 <line:238:9, col:119> col:44 _set_invalid_parameter_handler '_invalid_parameter_handler (_invalid_parameter_handler) __attribute__((cdecl))':'_invalid_parameter_handler (_invalid_parameter_handler)'
| `-ParmVarDecl 0x2ac4b524f20 <col:84, col:111> col:111 _Handler '_invalid_parameter_handler':'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|-FunctionDecl 0x2ac4b51f258 <line:239:9, col:79> col:44 _get_invalid_parameter_handler '_invalid_parameter_handler (void) __attribute__((cdecl))':'_invalid_parameter_handler (void)'
|-FunctionDecl 0x2ac4b51f440 <line:245:9, col:41> col:30 _errno 'int *(void) __attribute__((cdecl))':'int *(void)' extern
|-FunctionDecl 0x2ac4b51f680 <line:248:1, col:43> col:17 _set_errno 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x2ac4b51f510 <col:33, col:37> col:37 _Value 'int'
|-FunctionDecl 0x2ac4b51f8d0 <line:249:1, col:46> col:17 _get_errno 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x2ac4b51f758 <col:34, col:40> col:40 _Value 'int *'
|-FunctionDecl 0x2ac4b51faf0 <line:252:9, col:48> col:33 __doserrno 'unsigned long *(void) __attribute__((cdecl))':'unsigned long *(void)'
|-FunctionDecl 0x2ac4b51fd30 <line:255:1, col:56> col:17 _set_doserrno 'errno_t (unsigned long) __attribute__((cdecl))':'errno_t (unsigned long)'
| `-ParmVarDecl 0x2ac4b51fbc0 <col:36, col:50> col:50 _Value 'unsigned long'
|-FunctionDecl 0x2ac4b51ff80 <line:256:1, col:59> col:17 _get_doserrno 'errno_t (unsigned long *) __attribute__((cdecl))':'errno_t (unsigned long *)'
| `-ParmVarDecl 0x2ac4b51fe08 <col:37, col:53> col:53 _Value 'unsigned long *'
|-FunctionDecl 0x2ac4b4c97d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:259:77> col:59 __sys_errlist 'char **(void) __attribute__((cdecl))':'char **(void)'
| `-DeprecatedAttr 0x2ac4b4c9870 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4c9b30 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:262:72> col:57 __sys_nerr 'int *(void) __attribute__((cdecl))':'int *(void)'
| `-DeprecatedAttr 0x2ac4b4c9bd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x2ac4b4c9d18 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:288:9, col:20> col:20 __argc 'int' extern
|-VarDecl 0x2ac4b4c9db0 <line:289:9, col:24> col:24 __argv 'char **' extern
|-VarDecl 0x2ac4b4c9e48 <line:290:9, col:27> col:27 __wargv 'wchar_t **' extern
|-VarDecl 0x2ac4b4c9ee0 <line:306:9, col:24> col:24 _environ 'char **' extern
|-VarDecl 0x2ac4b4c9f78 <line:307:9, col:27> col:27 _wenviron 'wchar_t **' extern
|-VarDecl 0x2ac4b4ca0d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:311:68> col:68 _pgmptr 'char *' extern
| `-DeprecatedAttr 0x2ac4b4ca138 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x2ac4b4ca338 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:312:72> col:72 _wpgmptr 'wchar_t *' extern
| `-DeprecatedAttr 0x2ac4b4ca3a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4c3650 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:339:1, col:61> col:17 _get_pgmptr 'errno_t (char **) __attribute__((cdecl))':'errno_t (char **)'
| `-ParmVarDecl 0x2ac4b4ca4e8 <col:47, col:55> col:55 _Value 'char **'
|-FunctionDecl 0x2ac4b4c38a0 <line:340:1, col:65> col:17 _get_wpgmptr 'errno_t (wchar_t **) __attribute__((cdecl))':'errno_t (wchar_t **)'
| `-ParmVarDecl 0x2ac4b4c3728 <col:48, col:59> col:59 _Value 'wchar_t **'
|-VarDecl 0x2ac4b4c3a38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:346:64> col:64 _fmode 'int' extern
| `-DeprecatedAttr 0x2ac4b4c3aa0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4c3cc0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:353:9, col:50> col:25 _set_fmode 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x2ac4b4c3be8 <col:41, col:45> col:45 _Mode 'int'
|-FunctionDecl 0x2ac4b4c3e70 <line:354:9, col:54> col:25 _get_fmode 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x2ac4b4c3d98 <col:42, col:48> col:48 _PMode 'int *'
|-FunctionDecl 0x2ac4b4c40c0 <line:376:43> col:43 implicit exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x2ac4b4c4160 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2ac4b4c41d0 prev 0x2ac4b4c40c0 <col:9, col:62> col:43 exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x2ac4b4c3f48 <col:53, col:57> col:57 _Code 'int'
|-FunctionDecl 0x2ac4b4c4380 <line:378:43> col:43 implicit _exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x2ac4b4c4420 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2ac4b4c4490 prev 0x2ac4b4c4380 <col:9, col:63> col:43 _exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x2ac4b4c42a8 <col:54, col:58> col:58 _Code 'int'
|-FunctionDecl 0x2ac4b4c7690 <line:379:43> col:43 implicit abort 'void (void) __attribute__((noreturn))' extern
|-FunctionDecl 0x2ac4b4c7730 prev 0x2ac4b4c7690 <col:9, col:53> col:43 abort 'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x2ac4b4c79f0 <line:382:9, col:99> col:30 _set_abort_behavior 'unsigned int (unsigned int, unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int, unsigned int)'
| |-ParmVarDecl 0x2ac4b4c7800 <col:55, col:68> col:68 _Flags 'unsigned int'
| `-ParmVarDecl 0x2ac4b4c7880 <col:81, col:94> col:94 _Mask 'unsigned int'
|-FunctionDecl 0x2ac4b4c7be8 <line:384:19> col:19 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x2ac4b4c7c88 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x2ac4b4c7cf8 <col:19> Implicit
| `-ConstAttr 0x2ac4b4c7d50 <col:19> Implicit
|-FunctionDecl 0x2ac4b4c7d78 prev 0x2ac4b4c7be8 <col:1, col:34> col:19 abs 'int (int)'
| |-ParmVarDecl 0x2ac4b4c7ad0 <col:28, col:32> col:32 _X 'int'
| |-NoThrowAttr 0x2ac4b4c7e68 <col:19> Inherited Implicit
| `-ConstAttr 0x2ac4b4c7e90 <col:19> Inherited Implicit
|-FunctionDecl 0x2ac4b4c8018 <line:385:19> col:19 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x2ac4b4c80b8 <<invalid sloc>> <invalid sloc> 'long'
| |-NoThrowAttr 0x2ac4b4c8128 <col:19> Implicit
| `-ConstAttr 0x2ac4b4c8180 <col:19> Implicit
|-FunctionDecl 0x2ac4b4c81a8 prev 0x2ac4b4c8018 <col:1, col:36> col:19 labs 'long (long)'
| |-ParmVarDecl 0x2ac4b4c7ed0 <col:29, col:34> col:34 _X 'long'
| |-NoThrowAttr 0x2ac4b4c8298 <col:19> Inherited Implicit
| `-ConstAttr 0x2ac4b4c82c0 <col:19> Inherited Implicit
|-FunctionDecl 0x2ac4b4c8448 <line:386:19> col:19 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x2ac4b4c84e8 <<invalid sloc>> <invalid sloc> 'long long'
| |-NoThrowAttr 0x2ac4b4c8558 <col:19> Implicit
| `-ConstAttr 0x2ac4b4c85b0 <col:19> Implicit
|-FunctionDecl 0x2ac4b4c85d8 prev 0x2ac4b4c8448 <col:1, col:42> col:19 llabs 'long long (long long)'
| |-ParmVarDecl 0x2ac4b4c8300 <col:30, col:40> col:40 _X 'long long'
| |-NoThrowAttr 0x2ac4b4c2688 <col:19> Inherited Implicit
| `-ConstAttr 0x2ac4b4c26b0 <col:19> Inherited Implicit
|-FunctionDecl 0x2ac4b4c27b8 <line:388:9, col:42> col:28 _abs64 'long long (long long) __attribute__((cdecl))':'long long (long long)'
| `-ParmVarDecl 0x2ac4b4c26f0 <col:35> col:42 'long long'
|-FunctionDecl 0x2ac4b4c2ab8 <line:426:9, col:53> col:24 atexit 'int (void (*)(void) __attribute__((cdecl))) __attribute__((cdecl))':'int (void (*)(void) __attribute__((cdecl)))'
| `-ParmVarDecl 0x2ac4b4c2950 <col:31, col:45> col:46 'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x2ac4b4c2cd8 <line:428:24, col:71> col:40 atof 'double (const char *) __attribute__((cdecl))':'double (const char *)'
| `-ParmVarDecl 0x2ac4b4c2b90 <col:52, col:64> col:64 _String 'const char *'
|-FunctionDecl 0x2ac4b4c2fd0 <line:429:24, col:102> col:40 _atof_l 'double (const char *, _locale_t) __attribute__((cdecl))':'double (const char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b4c2db0 <col:55, col:67> col:67 _String 'const char *'
| `-ParmVarDecl 0x2ac4b4c2e28 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4c31f8 <line:430:43, col:86> col:58 atoi 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x2ac4b4c30b0 <col:70, col:82> col:82 _Str 'const char *'
|-FunctionDecl 0x2ac4b4c34f0 <line:431:24, col:98> col:39 _atoi_l 'int (const char *, _locale_t) __attribute__((cdecl))':'int (const char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b4c32d0 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b4c3348 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4ca7a8 <line:432:24, col:67> col:39 atol 'long (const char *) __attribute__((cdecl))':'long (const char *)'
| `-ParmVarDecl 0x2ac4b4c35d0 <col:51, col:63> col:63 _Str 'const char *'
|-FunctionDecl 0x2ac4b4caaa0 <line:433:24, col:98> col:39 _atol_l 'long (const char *, _locale_t) __attribute__((cdecl))':'long (const char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b4ca880 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b4ca8f8 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4cacc8 <line:434:24, col:71> col:42 atoll 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x2ac4b4cab80 <col:55, col:67> col:67 _Str 'const char *'
|-FunctionDecl 0x2ac4b4cafc0 <line:435:24, col:102> col:42 _atoll_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b4cada0 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b4cae18 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4cb870 <line:439:24, line:441:97> line:439:39 bsearch_s 'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x2ac4b4cb0a0 <col:54, col:67> col:67 _Key 'const void *'
| |-ParmVarDecl 0x2ac4b4cb120 <col:124, col:137> col:137 _Base 'const void *'
| |-ParmVarDecl 0x2ac4b4cb198 <line:440:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4cb210 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4cb570 <line:441:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x2ac4b4cb5f0 <col:82, col:89> col:89 _Context 'void *'
|-FunctionDecl 0x2ac4b4cbff8 <line:443:24, line:445:72> line:443:39 bsearch 'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x2ac4b4cb970 <col:52, col:65> col:65 _Key 'const void *'
| |-ParmVarDecl 0x2ac4b4cb9f0 <col:122, col:135> col:135 _Base 'const void *'
| |-ParmVarDecl 0x2ac4b4cba68 <line:444:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4cbae0 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4cbdb8 <line:445:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x2ac4b4c46b0 <line:448:9, line:450:96> line:448:22 qsort_s 'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x2ac4b4cc0f0 <col:85, col:92> col:92 _Base 'void *'
| |-ParmVarDecl 0x2ac4b4cc168 <line:449:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4cc1e0 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4cc448 <line:450:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x2ac4b4cc4c8 <col:82, col:88> col:88 _Context 'void *'
|-FunctionDecl 0x2ac4b4c4c78 <line:452:9, line:454:72> line:452:22 qsort 'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x2ac4b4c47a8 <col:84, col:91> col:91 _Base 'void *'
| |-ParmVarDecl 0x2ac4b4c4820 <line:453:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4c4898 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4c4a78 <line:454:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x2ac4b4c4eb8 <line:456:47> col:47 implicit _byteswap_ushort 'unsigned short (unsigned short)' extern
| |-ParmVarDecl 0x2ac4b4c4f58 <<invalid sloc>> <invalid sloc> 'unsigned short'
| |-NoThrowAttr 0x2ac4b4c4fc8 <col:47> Implicit
| `-ConstAttr 0x2ac4b4c5020 <col:47> Implicit
|-FunctionDecl 0x2ac4b4c5048 prev 0x2ac4b4c4eb8 <col:24, col:90> col:47 _byteswap_ushort 'unsigned short (unsigned short)'
| |-ParmVarDecl 0x2ac4b4c4d68 <col:69, col:84> col:84 _Short 'unsigned short'
| |-NoThrowAttr 0x2ac4b4c5138 <col:47> Inherited Implicit
| `-ConstAttr 0x2ac4b4c5160 <col:47> Inherited Implicit
|-FunctionDecl 0x2ac4b4c52e8 <line:457:47> col:47 implicit _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x2ac4b4c5388 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x2ac4b4c53f8 <col:47> Implicit
| `-ConstAttr 0x2ac4b4c5450 <col:47> Implicit
|-FunctionDecl 0x2ac4b4c5478 prev 0x2ac4b4c52e8 <col:24, col:88> col:47 _byteswap_ulong 'unsigned long (unsigned long)'
| |-ParmVarDecl 0x2ac4b4c51a0 <col:69, col:83> col:83 _Long 'unsigned long'
| |-NoThrowAttr 0x2ac4b4c5568 <col:47> Inherited Implicit
| `-ConstAttr 0x2ac4b4c5590 <col:47> Inherited Implicit
|-FunctionDecl 0x2ac4b4d17f8 <line:458:49> col:49 implicit _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b4d1898 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x2ac4b4d1908 <col:49> Implicit
| `-ConstAttr 0x2ac4b4d1960 <col:49> Implicit
|-FunctionDecl 0x2ac4b4d1988 prev 0x2ac4b4d17f8 <col:24, col:94> col:49 _byteswap_uint64 'unsigned long long (unsigned long long)'
| |-ParmVarDecl 0x2ac4b4c55d0 <col:71, col:88> col:88 _Int64 'unsigned long long'
| |-NoThrowAttr 0x2ac4b4d1a78 <col:49> Inherited Implicit
| `-ConstAttr 0x2ac4b4d1aa0 <col:49> Inherited Implicit
|-FunctionDecl 0x2ac4b4d1d28 <line:459:24, col:85> col:39 div 'div_t (int, int) __attribute__((cdecl))':'div_t (int, int)'
| |-ParmVarDecl 0x2ac4b4d1b08 <col:48, col:52> col:52 _Numerator 'int'
| `-ParmVarDecl 0x2ac4b4d1b88 <col:69, col:73> col:73 _Denominator 'int'
|-FunctionDecl 0x2ac4b4d1fa8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:462:109> col:74 getenv 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x2ac4b4d1ec8 <col:88, col:101> col:101 _VarName 'const char *'
| `-DeprecatedAttr 0x2ac4b4d2050 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4d2568 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:464:28, col:177> col:44 getenv_s 'errno_t (size_t *, char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (size_t *, char *, rsize_t, const char *)'
| |-ParmVarDecl 0x2ac4b4d21e8 <col:59, col:68> col:68 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x2ac4b4d2268 <col:110, col:117> col:117 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b4d22e0 <col:131, col:139> col:139 _DstSize 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4d2360 <col:156, col:169> col:169 _VarName 'const char *'
|-FunctionDecl 0x2ac4b4d2990 <line:472:28, col:212> col:44 _dupenv_s 'errno_t (char **, size_t *, const char *) __attribute__((cdecl))':'errno_t (char **, size_t *, const char *)'
| |-ParmVarDecl 0x2ac4b4d2658 <col:127, col:134> col:134 _PBuffer 'char **'
| |-ParmVarDecl 0x2ac4b4d2740 <col:154, col:163> col:163 _PBufferSizeInBytes 'size_t *'
| `-ParmVarDecl 0x2ac4b4d27c0 <col:191, col:204> col:204 _VarName 'const char *'
|-FunctionDecl 0x2ac4b4d2df8 <line:479:28, col:141> col:44 _itoa_s 'errno_t (int, char *, size_t, int) __attribute__((cdecl))':'errno_t (int, char *, size_t, int)'
| |-ParmVarDecl 0x2ac4b4d2a78 <col:57, col:61> col:61 _Value 'int'
| |-ParmVarDecl 0x2ac4b4d2af8 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b4d2b70 <col:112, col:119> col:119 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4d2bf0 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x2ac4b4d3278 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:481:79 _itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x2ac4b4d2fe0 <col:91, col:96> col:96 _Value 'int'
| |-ParmVarDecl 0x2ac4b4d3060 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b4d30e0 <col:146, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x2ac4b4d3330 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4d3838 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:482:28, col:145> col:44 _i64toa_s 'errno_t (long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long long, char *, size_t, int)'
| |-ParmVarDecl 0x2ac4b4d3478 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x2ac4b4d34f8 <col:95, col:102> col:102 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b4d3570 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4d35f0 <col:135, col:139> col:139 _Radix 'int'
|-FunctionDecl 0x2ac4b4d3c88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:483:140> col:59 _i64toa 'char *(long long, char *, int) __attribute__((cdecl))':'char *(long long, char *, int)'
| |-ParmVarDecl 0x2ac4b4d39e8 <col:72, col:80> col:80 _Val 'long long'
| |-ParmVarDecl 0x2ac4b4d3a68 <col:109, col:116> col:116 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b4d3ae8 <col:130, col:134> col:134 _Radix 'int'
| `-DeprecatedAttr 0x2ac4b4d3d40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4d4208 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:484:28, col:155> col:44 _ui64toa_s 'errno_t (unsigned long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, char *, size_t, int)'
| |-ParmVarDecl 0x2ac4b4d3e88 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d3f08 <col:105, col:112> col:112 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b4d3f80 <col:126, col:133> col:133 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4d4000 <col:145, col:149> col:149 _Radix 'int'
|-FunctionDecl 0x2ac4b4d4658 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:485:151> col:60 _ui64toa 'char *(unsigned long long, char *, int) __attribute__((cdecl))':'char *(unsigned long long, char *, int)'
| |-ParmVarDecl 0x2ac4b4d43b8 <col:74, col:91> col:91 _Val 'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d4438 <col:120, col:127> col:127 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b4d44b8 <col:141, col:145> col:145 _Radix 'int'
| `-DeprecatedAttr 0x2ac4b4cc6e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4cc908 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:486:24, col:75> col:40 _atoi64 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x2ac4b4cc828 <col:55, col:68> col:68 _String 'const char *'
|-FunctionDecl 0x2ac4b4ccb58 <line:487:24, col:105> col:40 _atoi64_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b4cc9e0 <col:57, col:70> col:70 _String 'const char *'
| `-ParmVarDecl 0x2ac4b4cca58 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4cced8 <line:488:24, col:136> col:40 _strtoi64 'long long (const char *, char **, int) __attribute__((cdecl))':'long long (const char *, char **, int)'
| |-ParmVarDecl 0x2ac4b4ccc38 <col:57, col:70> col:70 _String 'const char *'
| |-ParmVarDecl 0x2ac4b4cccb8 <col:104, col:112> col:112 _EndPtr 'char **'
| `-ParmVarDecl 0x2ac4b4ccd38 <col:126, col:130> col:130 _Radix 'int'
|-FunctionDecl 0x2ac4b4cd340 <line:489:24, col:166> col:40 _strtoi64_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b4ccfc0 <col:59, col:72> col:72 _String 'const char *'
| |-ParmVarDecl 0x2ac4b4cd040 <col:106, col:114> col:114 _EndPtr 'char **'
| |-ParmVarDecl 0x2ac4b4cd0c0 <col:128, col:132> col:132 _Radix 'int'
| `-ParmVarDecl 0x2ac4b4cd138 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4d4760 <line:490:24, col:146> col:49 _strtoui64 'unsigned long long (const char *, char **, int) __attribute__((cdecl))':'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x2ac4b4cd430 <col:67, col:80> col:80 _String 'const char *'
| |-ParmVarDecl 0x2ac4b4cd4b0 <col:114, col:122> col:122 _EndPtr 'char **'
| `-ParmVarDecl 0x2ac4b4cd530 <col:136, col:140> col:140 _Radix 'int'
|-FunctionDecl 0x2ac4b4d4bd0 <line:491:24, col:177> col:49 _strtoui64_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b4d4848 <col:69, col:82> col:82 _String 'const char *'
| |-ParmVarDecl 0x2ac4b4d48c8 <col:116, col:124> col:124 _EndPtr 'char **'
| |-ParmVarDecl 0x2ac4b4d4948 <col:138, col:143> col:143 _Radix 'int'
| `-ParmVarDecl 0x2ac4b4d49c0 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4d4f08 <line:492:24, col:88> col:39 ldiv 'ldiv_t (long, long) __attribute__((cdecl))':'ldiv_t (long, long)'
| |-ParmVarDecl 0x2ac4b4d4ce8 <col:49, col:54> col:54 _Numerator 'long'
| `-ParmVarDecl 0x2ac4b4d4d68 <col:71, col:76> col:76 _Denominator 'long'
|-FunctionDecl 0x2ac4b4d5228 <line:493:24, col:100> col:40 lldiv 'lldiv_t (long long, long long) __attribute__((cdecl))':'lldiv_t (long long, long long)'
| |-ParmVarDecl 0x2ac4b4d5008 <col:51, col:61> col:61 _Numerator 'long long'
| `-ParmVarDecl 0x2ac4b4d5088 <col:78, col:88> col:88 _Denominator 'long long'
|-FunctionDecl 0x2ac4b4d5688 <line:515:28, col:140> col:44 _ltoa_s 'errno_t (long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long, char *, size_t, int)'
| |-ParmVarDecl 0x2ac4b4d5308 <col:57, col:62> col:62 _Val 'long'
| |-ParmVarDecl 0x2ac4b4d5388 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b4d5400 <col:111, col:118> col:118 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4d5480 <col:130, col:134> col:134 _Radix 'int'
|-FunctionDecl 0x2ac4b4d5ae8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:517:79 _ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x2ac4b4d5848 <col:91, col:97> col:97 _Value 'long'
| |-ParmVarDecl 0x2ac4b4d58c8 <col:129, col:135> col:135 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b4d5948 <col:147, col:152> col:152 _Radix 'int'
| `-DeprecatedAttr 0x2ac4b4d5ba0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4d5f10 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:518:24, col:128> col:39 mblen 'int (const char *, size_t) __attribute__((cdecl))':'int (const char *, size_t)'
| |-ParmVarDecl 0x2ac4b4d5ce8 <col:89, col:102> col:102 _Ch 'const char *'
| `-ParmVarDecl 0x2ac4b4d5d60 <col:112, col:119> col:119 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b4d62b8 <line:519:24, col:159> col:39 _mblen_l 'int (const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b4d5ff0 <col:92, col:105> col:105 _Ch 'const char *'
| |-ParmVarDecl 0x2ac4b4d6068 <col:115, col:122> col:122 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4d60e0 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4d6478 <line:520:24, col:73> col:39 _mbstrlen 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| `-ParmVarDecl 0x2ac4b4d63a0 <col:56, col:69> col:69 _Str 'const char *'
|-FunctionDecl 0x2ac4b4ce700 <line:521:24, col:102> col:39 _mbstrlen_l 'size_t (const char *, _locale_t) __attribute__((cdecl))':'size_t (const char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b4d6550 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b4d65c8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4ce950 <line:522:24, col:96> col:39 _mbstrnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x2ac4b4ce7e0 <col:57, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b4ce858 <col:80, col:87> col:87 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b4cecf0 <line:523:24, col:126> col:39 _mbstrnlen_l 'size_t (const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b4cea30 <col:59, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4ceaa8 <col:82, col:89> col:89 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4ceb20 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4cf0a8 <line:524:9, col:170> col:24 mbtowc 'int (wchar_t *, const char *, size_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x2ac4b4cedd0 <col:54, col:64> col:64 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x2ac4b4cee50 <col:122, col:135> col:135 _SrcCh 'const char *'
| `-ParmVarDecl 0x2ac4b4ceec8 <col:148, col:155> col:155 _SrcSizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b4cf500 <line:525:9, col:201> col:24 _mbtowc_l 'int (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b4cf188 <col:57, col:67> col:67 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x2ac4b4cf208 <col:125, col:138> col:138 _SrcCh 'const char *'
| |-ParmVarDecl 0x2ac4b4cf280 <col:151, col:158> col:158 _SrcSizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4cf2f8 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4d6ab0 <line:526:28, col:271> col:44 mbstowcs_s 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t)'
| |-ParmVarDecl 0x2ac4b4cf5e8 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x2ac4b4cf660 <col:155, col:165> col:165 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b4d6780 <col:179, col:186> col:186 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d6800 <col:227, col:240> col:240 _SrcBuf 'const char *'
| `-ParmVarDecl 0x2ac4b4d6878 <col:254, col:261> col:261 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b4d6f30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:528:56 mbstowcs 'size_t (wchar_t *, const char *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x2ac4b4d6c60 <col:97, col:106> col:106 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2ac4b4d6ce0 <col:120, col:134> col:134 _Source 'const char *'
| |-ParmVarDecl 0x2ac4b4d6d58 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b4d6fe8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4d75e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:530:28, col:301> col:44 _mbstowcs_s_l 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b4d7128 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x2ac4b4d71a0 <col:158, col:168> col:168 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b4d7218 <col:182, col:189> col:189 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d7298 <col:230, col:243> col:243 _SrcBuf 'const char *'
| |-ParmVarDecl 0x2ac4b4d7310 <col:257, col:264> col:264 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4d7388 <col:284, col:294> col:294 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4d0b68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:532:59 _mbstowcs_l 'size_t (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b4d07f0 <col:149, col:158> col:158 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2ac4b4d0870 <col:172, col:186> col:186 _Source 'const char *'
| |-ParmVarDecl 0x2ac4b4d08e8 <col:200, col:208> col:208 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d0960 <col:228, col:239> col:239 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2ac4b4d0c28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4d0e28 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:534:24, col:48> col:39 rand 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x2ac4b4d0fd8 <line:539:28, col:73> col:43 _set_error_mode 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x2ac4b4d0ef8 <col:64, col:68> col:68 _Mode 'int'
|-FunctionDecl 0x2ac4b4d11f0 <line:541:9, col:53> col:24 srand 'void (unsigned int) __attribute__((cdecl))':'void (unsigned int)'
| `-ParmVarDecl 0x2ac4b4d10b0 <col:35, col:48> col:48 _Seed 'unsigned int'
|-FunctionDecl 0x2ac4b4d14b0 <line:542:39> col:39 implicit strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x2ac4b4d1550 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b4d15b8 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x2ac4b4d1630 prev 0x2ac4b4d14b0 <col:24, col:112> col:39 strtod 'double (const char *, char **)'
| |-ParmVarDecl 0x2ac4b4d12c8 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b4d1348 <col:97, col:105> col:105 _EndPtr 'char **'
|-FunctionDecl 0x2ac4b4cf9e8 <line:543:24, col:143> col:39 _strtod_l 'double (const char *, char **, _locale_t) __attribute__((cdecl))':'double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x2ac4b4cf710 <col:56, col:69> col:69 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4cf790 <col:100, col:108> col:108 _EndPtr 'char **'
| `-ParmVarDecl 0x2ac4b4cf808 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4cfd68 <line:544:39> col:39 implicit strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x2ac4b4cfe08 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x2ac4b4cfe70 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x2ac4b4cfed8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2ac4b4cff58 prev 0x2ac4b4cfd68 <col:24, col:130> col:39 strtol 'long (const char *, char **, int)'
| |-ParmVarDecl 0x2ac4b4cfad0 <col:53, col:66> col:66 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4cfb50 <col:97, col:105> col:105 _EndPtr 'char **'
| `-ParmVarDecl 0x2ac4b4cfbd0 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x2ac4b4d03c0 <line:545:24, col:158> col:39 _strtol_l 'long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b4d0040 <col:56, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4d00c0 <col:99, col:106> col:106 _EndPtr 'char **'
| |-ParmVarDecl 0x2ac4b4d0140 <col:120, col:124> col:124 _Radix 'int'
| `-ParmVarDecl 0x2ac4b4d01b8 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4dc7e0 <line:546:43> col:43 implicit strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x2ac4b4dc880 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x2ac4b4dc8e8 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x2ac4b4dc950 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2ac4b4dc9d0 prev 0x2ac4b4dc7e0 <col:24, col:135> col:43 strtoll 'long long (const char *, char **, int)'
| |-ParmVarDecl 0x2ac4b4d04b0 <col:58, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4d0530 <col:102, col:110> col:110 _EndPtr 'char **'
| `-ParmVarDecl 0x2ac4b4d05b0 <col:124, col:128> col:128 _Radix 'int'
|-FunctionDecl 0x2ac4b4dcd70 <line:547:24, col:166> col:43 _strtoll_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b4dcab8 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4dcb38 <col:105, col:113> col:113 _EndPtr 'char **'
| |-ParmVarDecl 0x2ac4b4dcbb8 <col:127, col:131> col:131 _Radix 'int'
| `-ParmVarDecl 0x2ac4b4dcc30 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4dd0f8 <line:548:46> col:46 implicit strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x2ac4b4dd198 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x2ac4b4dd200 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x2ac4b4dd268 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2ac4b4dd2e8 prev 0x2ac4b4dd0f8 <col:24, col:137> col:46 strtoul 'unsigned long (const char *, char **, int)'
| |-ParmVarDecl 0x2ac4b4dce60 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4dcee0 <col:105, col:113> col:113 _EndPtr 'char **'
| `-ParmVarDecl 0x2ac4b4dcf60 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x2ac4b4d7790 <line:549:24, col:160> col:46 _strtoul_l 'unsigned long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b4dd3d0 <col:57, col:70> col:70 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4dd450 <col:101, col:108> col:108 _EndPtr 'char **'
| |-ParmVarDecl 0x2ac4b4dd4d0 <col:122, col:126> col:126 _Radix 'int'
| `-ParmVarDecl 0x2ac4b4dd548 <col:143, col:153> col:153 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4d7aa0 <line:550:51> col:51 implicit strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x2ac4b4d7b40 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x2ac4b4d7ba8 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x2ac4b4d7c10 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2ac4b4d7c90 prev 0x2ac4b4d7aa0 <col:24, col:143> col:51 strtoull 'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x2ac4b4d7880 <col:67, col:80> col:80 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4d7900 <col:111, col:119> col:119 _EndPtr 'char **'
| `-ParmVarDecl 0x2ac4b4d7980 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x2ac4b4d8030 <line:551:24, col:174> col:51 _strtoull_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b4d7d78 <col:70, col:83> col:83 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4d7df8 <col:114, col:122> col:122 _EndPtr 'char **'
| |-ParmVarDecl 0x2ac4b4d7e78 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x2ac4b4d7ef0 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4d8310 <line:552:44> col:44 implicit strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x2ac4b4d83b0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b4d8418 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x2ac4b4d8490 prev 0x2ac4b4d8310 <col:24, col:118> col:44 strtold 'long double (const char *, char **)'
| |-ParmVarDecl 0x2ac4b4d8120 <col:59, col:72> col:72 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b4d81a0 <col:103, col:111> col:111 _EndPtr 'char **'
|-FunctionDecl 0x2ac4b4da8a8 <line:553:24, col:149> col:44 _strtold_l 'long double (const char *, char **, _locale_t) __attribute__((cdecl))':'long double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x2ac4b4d8570 <col:62, col:75> col:75 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4d85f0 <col:106, col:114> col:114 _EndPtr 'char **'
| `-ParmVarDecl 0x2ac4b4d8668 <col:132, col:142> col:142 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4dab80 <line:554:38> col:38 implicit strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x2ac4b4dac20 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2ac4b4dac88 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x2ac4b4dad00 prev 0x2ac4b4dab80 <col:24, col:111> col:38 strtof 'float (const char *, char **)'
| |-ParmVarDecl 0x2ac4b4da990 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b4daa10 <col:96, col:104> col:104 _EndPtr 'char **'
|-FunctionDecl 0x2ac4b4db0b8 <line:555:24, col:142> col:38 _strtof_l 'float (const char *, char **, _locale_t) __attribute__((cdecl))':'float (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x2ac4b4dade0 <col:55, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x2ac4b4dae60 <col:99, col:107> col:107 _EndPtr 'char **'
| `-ParmVarDecl 0x2ac4b4daed8 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4db280 <line:560:9, col:60> col:21 system 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x2ac4b4db1a0 <col:39, col:52> col:52 _Command 'const char *'
|-FunctionDecl 0x2ac4b4db6d8 <line:564:28, col:150> col:44 _ultoa_s 'errno_t (unsigned long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, char *, size_t, int)'
| |-ParmVarDecl 0x2ac4b4db358 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x2ac4b4db3d8 <col:100, col:107> col:107 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b4db450 <col:121, col:128> col:128 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4db4d0 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x2ac4b4deb78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:566:79 _ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x2ac4b4de8d8 <col:92, col:107> col:107 _Value 'unsigned long'
| |-ParmVarDecl 0x2ac4b4de958 <col:139, col:145> col:145 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b4de9d8 <col:157, col:162> col:162 _Radix 'int'
| `-DeprecatedAttr 0x2ac4b4dec30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4df060 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:567:127> col:58 wctomb 'int (char *, wchar_t) __attribute__((cdecl))':'int (char *, wchar_t)'
| |-ParmVarDecl 0x2ac4b4dee38 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x2ac4b4deeb0 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x2ac4b4df110 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4df5e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:568:155> col:61 _wctomb_l 'int (char *, wchar_t, _locale_t) __attribute__((cdecl))':'int (char *, wchar_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b4df318 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x2ac4b4df390 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x2ac4b4df408 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2ac4b4df6a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4ddb68 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:570:28, col:200> col:44 wctomb_s 'errno_t (int *, char *, rsize_t, wchar_t) __attribute__((cdecl))':'errno_t (int *, char *, rsize_t, wchar_t)'
| |-ParmVarDecl 0x2ac4b4dd7f0 <col:63, col:69> col:69 _SizeConverted 'int *'
| |-ParmVarDecl 0x2ac4b4dd870 <col:142, col:149> col:149 _MbCh 'char *'
| |-ParmVarDecl 0x2ac4b4dd8e8 <col:161, col:169> col:169 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4dd960 <col:188, col:196> col:196 _WCh 'wchar_t':'unsigned short'
|-FunctionDecl 0x2ac4b4de070 <line:572:28, col:206> col:44 _wctomb_s_l 'errno_t (int *, char *, size_t, wchar_t, _locale_t) __attribute__((cdecl))':'errno_t (int *, char *, size_t, wchar_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b4ddc58 <col:66, col:72> col:72 _SizeConverted 'int *'
| |-ParmVarDecl 0x2ac4b4ddcd8 <col:121, col:128> col:128 _MbCh 'char *'
| |-ParmVarDecl 0x2ac4b4ddd50 <col:140, col:147> col:147 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4dddc8 <col:166, col:174> col:174 _WCh 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x2ac4b4dde40 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4de580 <line:573:28, col:263> col:44 wcstombs_s 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b4de160 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x2ac4b4de1e0 <col:164, col:171> col:171 _Dst 'char *'
| |-ParmVarDecl 0x2ac4b4de258 <col:182, col:189> col:189 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4de2d0 <col:213, col:229> col:229 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b4de348 <col:240, col:247> col:247 _MaxCountInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b4dfa60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:575:56 wcstombs 'size_t (char *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b4de738 <col:97, col:103> col:103 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b4df810 <col:117, col:134> col:134 _Source 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b4df888 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2ac4b4dfb18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4e0118 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:576:28, col:294> col:44 _wcstombs_s_l 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b4dfc58 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x2ac4b4dfcd8 <col:167, col:174> col:174 _Dst 'char *'
| |-ParmVarDecl 0x2ac4b4dfd50 <col:185, col:192> col:192 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4dfdc8 <col:216, col:232> col:232 _Src 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b4dfe40 <col:243, col:250> col:250 _MaxCountInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b4dfeb8 <col:277, col:287> col:287 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b4e0648 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:578:59 _wcstombs_l 'size_t (char *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2ac4b4e02d8 <col:146, col:152> col:152 _Dest 'char *'
| |-ParmVarDecl 0x2ac4b4e0350 <col:166, col:183> col:183 _Source 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b4e03c8 <col:197, col:205> col:205 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4e0440 <col:225, col:236> col:236 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2ac4b4e0708 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b4d9a30 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:142> col:142 implicit calloc 'void *(unsigned long long, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b4d9ad0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x2ac4b4d9b38 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b4d9bb0 prev 0x2ac4b4d9a30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:224> col:142 calloc 'void *(unsigned long long, unsigned long long)'
| |-ParmVarDecl 0x2ac4b4d9808 <col:173, col:180> col:180 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d9880 <col:212, col:219> col:219 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2ac4b4d9c60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2ac4b4d9cb8 <line:615:33> restrict
|-FunctionDecl 0x2ac4b4d9e50 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:641:182> col:132 free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x2ac4b4d9d10 <col:168, col:175> col:175 _Memory 'void *'
| `-NoAliasAttr 0x2ac4b4d9ef8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x2ac4b4da0f8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:161> col:161 implicit malloc 'void *(unsigned long long)' extern
| `-ParmVarDecl 0x2ac4b4da198 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b4da208 prev 0x2ac4b4da0f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:204> col:161 malloc 'void *(unsigned long long)'
| |-ParmVarDecl 0x2ac4b4d9f78 <col:192, col:199> col:199 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2ac4b4da2b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2ac4b4da308 <line:615:33> restrict
|-FunctionDecl 0x2ac4b4da580 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:142> col:142 implicit realloc 'void *(void *, unsigned long long)' extern
| |-ParmVarDecl 0x2ac4b4da620 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x2ac4b4da688 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2ac4b4da700 prev 0x2ac4b4da580 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:236> col:142 realloc 'void *(void *, unsigned long long)'
| |-ParmVarDecl 0x2ac4b4da360 <col:181, col:188> col:188 _Memory 'void *'
| |-ParmVarDecl 0x2ac4b4da3d8 <col:221, col:228> col:228 _NewSize 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2ac4b4db7d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2ac4b4db828 <line:615:33> restrict
|-FunctionDecl 0x2ac4b4dbb48 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:646:274> col:142 _recalloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x2ac4b4db880 <col:183, col:190> col:190 _Memory 'void *'
| |-ParmVarDecl 0x2ac4b4db8f8 <col:223, col:230> col:230 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4db970 <col:262, col:269> col:269 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2ac4b4dbc00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2ac4b4dbc58 <line:615:33> restrict
|-FunctionDecl 0x2ac4b4dbd88 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:647:191> col:132 _aligned_free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x2ac4b4dbcb0 <col:177, col:184> col:184 _Memory 'void *'
| `-NoAliasAttr 0x2ac4b4dbe30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x2ac4b4dc028 <col:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:648:218> col:142 _aligned_malloc 'void *(size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t)'
| |-ParmVarDecl 0x2ac4b4dbeb0 <col:182, col:189> col:189 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4dbf28 <col:201, col:208> col:208 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2ac4b4dc0d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2ac4b4dc130 <line:615:33> restrict
|-FunctionDecl 0x2ac4b4dc448 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:649:246> col:142 _aligned_offset_malloc 'void *(size_t, size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t, size_t)'
| |-ParmVarDecl 0x2ac4b4dc180 <col:189, col:196> col:196 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4dc1f8 <col:208, col:215> col:215 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4dc270 <col:232, col:239> col:239 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2ac4b4dc500 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2ac4b4dc558 <line:615:33> restrict
|-FunctionDecl 0x2ac4b4d87a0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:651:272> col:145 _aligned_realloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x2ac4b4dc5b0 <col:193, col:200> col:200 _Memory 'void *'
| |-ParmVarDecl 0x2ac4b4dc628 <col:233, col:240> col:240 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4dc6a0 <col:255, col:262> col:262 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2ac4b4d8858 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2ac4b4d88b0 <line:615:33> restrict
|-FunctionDecl 0x2ac4b4d8c80 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:653:306> col:142 _aligned_recalloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x2ac4b4d8908 <col:191, col:198> col:198 _Memory 'void *'
| |-ParmVarDecl 0x2ac4b4d8980 <col:231, col:238> col:238 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d89f8 <col:270, col:277> col:277 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d8a70 <col:289, col:296> col:296 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2ac4b4d8d40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2ac4b4d8d98 <line:615:33> restrict
|-FunctionDecl 0x2ac4b4d9098 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:655:300> col:145 _aligned_offset_realloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x2ac4b4d8df0 <col:200, col:207> col:207 _Memory 'void *'
| |-ParmVarDecl 0x2ac4b4d8e68 <col:240, col:247> col:247 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d8ee0 <col:262, col:269> col:269 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d8f58 <col:286, col:293> col:293 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2ac4b4d9158 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2ac4b4d91b0 <line:615:33> restrict
|-FunctionDecl 0x2ac4b4d9628 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:657:334> col:142 _aligned_offset_recalloc 'void *(void *, size_t, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t, size_t)'
| |-ParmVarDecl 0x2ac4b4d9208 <col:198, col:205> col:205 _Memory 'void *'
| |-ParmVarDecl 0x2ac4b4d9280 <col:238, col:245> col:245 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d92f8 <col:277, col:284> col:284 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d9370 <col:296, col:303> col:303 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b4d93e8 <col:320, col:327> col:327 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2ac4b4d96f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2ac4b4d9748 <line:615:33> restrict
|-FunctionDecl 0x2ac4b527bb0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:658:73, col:176> col:88 _aligned_msize 'size_t (void *, size_t, size_t) __attribute__((cdecl))':'size_t (void *, size_t, size_t)'
| |-ParmVarDecl 0x2ac4b5278f0 <col:117, col:124> col:124 _Memory 'void *'
| |-ParmVarDecl 0x2ac4b527968 <col:138, col:145> col:145 _Alignment 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b5279e0 <col:162, col:169> col:169 _Offset 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b528008 <line:685:28, col:157> col:44 _itow_s 'errno_t (int, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (int, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2ac4b527c98 <col:58, col:62> col:62 _Val 'int'
| |-ParmVarDecl 0x2ac4b527d10 <col:97, col:107> col:107 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b527d88 <col:121, col:128> col:128 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b527e08 <col:147, col:151> col:151 _Radix 'int'
|-FunctionDecl 0x2ac4b528480 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:687:82 _itow 'wchar_t *(int, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(int, wchar_t *, int)'
| |-ParmVarDecl 0x2ac4b5281b8 <col:94, col:99> col:99 _Value 'int'
| |-ParmVarDecl 0x2ac4b528230 <col:131, col:140> col:140 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2ac4b5282b0 <col:152, col:157> col:157 _Radix 'int'
| `-DeprecatedAttr 0x2ac4b528538 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b529a48 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:688:28, col:158> col:44 _ltow_s 'errno_t (long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2ac4b528680 <col:58, col:63> col:63 _Val 'long'
| |-ParmVarDecl 0x2ac4b5286f8 <col:98, col:108> col:108 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b528770 <col:122, col:129> col:129 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b5287f0 <col:148, col:152> col:152 _Radix 'int'
|-FunctionDecl 0x2ac4b529ec0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:690:82 _ltow 'wchar_t *(long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long, wchar_t *, int)'
| |-ParmVarDecl 0x2ac4b529bf8 <col:94, col:100> col:100 _Value 'long'
| |-ParmVarDecl 0x2ac4b529c70 <col:132, col:141> col:141 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2ac4b529cf0 <col:153, col:158> col:158 _Radix 'int'
| `-DeprecatedAttr 0x2ac4b529f78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b52a438 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:691:28, col:168> col:44 _ultow_s 'errno_t (unsigned long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2ac4b52a0c0 <col:59, col:73> col:73 _Val 'unsigned long'
| |-ParmVarDecl 0x2ac4b52a138 <col:108, col:118> col:118 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b52a1b0 <col:132, col:139> col:139 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b52a230 <col:158, col:162> col:162 _Radix 'int'
|-FunctionDecl 0x2ac4b52f970 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:693:82 _ultow 'wchar_t *(unsigned long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long, wchar_t *, int)'
| |-ParmVarDecl 0x2ac4b52a5e8 <col:95, col:110> col:110 _Value 'unsigned long'
| |-ParmVarDecl 0x2ac4b52a660 <col:142, col:151> col:151 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2ac4b52a6e0 <col:163, col:168> col:168 _Radix 'int'
| `-DeprecatedAttr 0x2ac4b52fa28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b52fd90 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:694:24, col:118> col:39 wcstod 'double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x2ac4b52fb68 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b52fbe8 <col:100, col:111> col:111 _EndPtr 'wchar_t **'
|-FunctionDecl 0x2ac4b530138 <line:695:24, col:148> col:39 _wcstod_l 'double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x2ac4b52fe68 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b52fee8 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2ac4b52ff60 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b5304f8 <line:696:24, col:129> col:39 wcstol 'long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2ac4b530218 <col:53, col:68> col:68 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b530298 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2ac4b530318 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x2ac4b531990 <line:697:24, col:159> col:39 _wcstol_l 'long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b5305d8 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b530658 <col:102, col:112> col:112 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2ac4b5306d8 <col:121, col:125> col:125 _Radix 'int'
| `-ParmVarDecl 0x2ac4b530750 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b531d58 <line:698:24, col:133> col:43 wcstoll 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2ac4b531a78 <col:58, col:73> col:73 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b531af8 <col:104, col:114> col:114 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2ac4b531b78 <col:123, col:127> col:127 _Radix 'int'
|-FunctionDecl 0x2ac4b5321c0 <line:699:24, col:164> col:43 _wcstoll_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b531e38 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b531eb8 <col:107, col:117> col:117 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2ac4b531f38 <col:126, col:130> col:130 _Radix 'int'
| `-ParmVarDecl 0x2ac4b531fb0 <col:147, col:157> col:157 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b532588 <line:700:24, col:137> col:46 wcstoul 'unsigned long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2ac4b5322a8 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b532328 <col:107, col:118> col:118 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2ac4b5323a8 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x2ac4b52a9a0 <line:701:24, col:167> col:46 _wcstoul_l 'unsigned long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b532668 <col:64, col:79> col:79 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b5326e8 <col:110, col:120> col:120 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2ac4b532768 <col:129, col:133> col:133 _Radix 'int'
| `-ParmVarDecl 0x2ac4b5327e0 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b52ad68 <line:702:24, col:143> col:51 wcstoull 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2ac4b52aa88 <col:67, col:82> col:82 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b52ab08 <col:113, col:124> col:124 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2ac4b52ab88 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x2ac4b52b1d0 <line:703:24, col:174> col:51 _wcstoull_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b52ae48 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b52aec8 <col:116, col:127> col:127 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2ac4b52af48 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x2ac4b52afc0 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b52b4e0 <line:704:24, col:124> col:44 wcstold 'long double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x2ac4b52b2b8 <col:59, col:75> col:75 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b52b338 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
|-FunctionDecl 0x2ac4b5329a0 <line:705:24, col:155> col:44 _wcstold_l 'long double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x2ac4b52b5b8 <col:62, col:78> col:78 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b52b638 <col:109, col:120> col:120 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2ac4b52b6b0 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b532cb0 <line:706:24, col:117> col:38 wcstof 'float (const wchar_t *, wchar_t **) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x2ac4b532a80 <col:52, col:68> col:68 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b532b00 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
|-FunctionDecl 0x2ac4b533058 <line:707:24, col:148> col:38 _wcstof_l 'float (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x2ac4b532d88 <col:55, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b532e08 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2ac4b532e80 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b5332d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:711:118> col:78 _wgetenv 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x2ac4b5331f8 <col:94, col:110> col:110 _VarName 'const wchar_t *'
| `-DeprecatedAttr 0x2ac4b533378 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b533828 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:712:28, col:198> col:44 _wgetenv_s 'errno_t (size_t *, wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b5334b8 <col:61, col:70> col:70 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x2ac4b533530 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b5335a8 <col:143, col:150> col:150 _DstSizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b533620 <col:174, col:190> col:190 _VarName 'const wchar_t *'
|-FunctionDecl 0x2ac4b530bd0 <line:720:28, col:214> col:44 _wdupenv_s 'errno_t (wchar_t **, size_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t **, size_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b533918 <col:127, col:137> col:137 _Buffer 'wchar_t **'
| |-ParmVarDecl 0x2ac4b530980 <col:156, col:164> col:164 _BufferSizeInWords 'size_t *'
| `-ParmVarDecl 0x2ac4b5309f8 <col:191, col:206> col:206 _VarName 'const wchar_t *'
|-FunctionDecl 0x2ac4b530e28 <line:728:9, col:65> col:21 _wsystem 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x2ac4b530cb0 <col:41, col:57> col:57 _Command 'const wchar_t *'
|-FunctionDecl 0x2ac4b531078 <line:733:24, col:71> col:39 _wtof 'double (const wchar_t *) __attribute__((cdecl))':'double (const wchar_t *)'
| `-ParmVarDecl 0x2ac4b530ef8 <col:52, col:67> col:67 _Str 'const wchar_t *'
|-FunctionDecl 0x2ac4b531370 <line:734:24, col:101> col:39 _wtof_l 'double (const wchar_t *, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2ac4b531148 <col:54, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b5311c0 <col:84, col:94> col:94 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b531528 <line:735:24, col:68> col:36 _wtoi 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x2ac4b531448 <col:49, col:64> col:64 _Str 'const wchar_t *'
|-FunctionDecl 0x2ac4b531820 <line:736:24, col:98> col:36 _wtoi_l 'int (const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2ac4b5315f8 <col:51, col:66> col:66 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b531670 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b52ba28 <line:737:24, col:69> col:37 _wtol 'long (const wchar_t *) __attribute__((cdecl))':'long (const wchar_t *)'
| `-ParmVarDecl 0x2ac4b5318f8 <col:50, col:65> col:65 _Str 'const wchar_t *'
|-FunctionDecl 0x2ac4b52bd20 <line:738:24, col:99> col:37 _wtol_l 'long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2ac4b52baf8 <col:52, col:67> col:67 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b52bb70 <col:82, col:92> col:92 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b52bf78 <line:739:24, col:75> col:42 _wtoll 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x2ac4b52bdf8 <col:56, col:71> col:71 _Str 'const wchar_t *'
|-FunctionDecl 0x2ac4b52c270 <line:740:24, col:105> col:42 _wtoll_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2ac4b52c048 <col:58, col:73> col:73 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b52c0c0 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b52c6c8 <line:742:28, col:162> col:44 _i64tow_s 'errno_t (long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2ac4b52c350 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x2ac4b52c3c8 <col:102, col:112> col:112 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b52c440 <col:126, col:133> col:133 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b52c4c0 <col:152, col:156> col:156 _Radix 'int'
|-FunctionDecl 0x2ac4b533c00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:743:146> col:62 _i64tow 'wchar_t *(long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long long, wchar_t *, int)'
| |-ParmVarDecl 0x2ac4b52c878 <col:75, col:83> col:83 _Val 'long long'
| |-ParmVarDecl 0x2ac4b5339b0 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b533a30 <col:136, col:140> col:140 _Radix 'int'
| `-DeprecatedAttr 0x2ac4b533cb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b534178 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:744:28, col:172> col:44 _ui64tow_s 'errno_t (unsigned long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2ac4b533e00 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x2ac4b533e78 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b533ef0 <col:136, col:143> col:143 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b533f70 <col:162, col:166> col:166 _Radix 'int'
|-FunctionDecl 0x2ac4b5345f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:745:157> col:63 _ui64tow 'wchar_t *(unsigned long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long long, wchar_t *, int)'
| |-ParmVarDecl 0x2ac4b534328 <col:77, col:94> col:94 _Val 'unsigned long long'
| |-ParmVarDecl 0x2ac4b5343a0 <col:123, col:133> col:133 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2ac4b534420 <col:147, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x2ac4b5346a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b5348c8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:746:24, col:76> col:42 _wtoi64 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x2ac4b5347e8 <col:57, col:72> col:72 _Str 'const wchar_t *'
|-FunctionDecl 0x2ac4b52ead8 <line:747:24, col:106> col:42 _wtoi64_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2ac4b52e960 <col:59, col:74> col:74 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b52e9d8 <col:89, col:99> col:99 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b52edd0 <line:748:24, col:141> col:42 _wcstoi64 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2ac4b52ebb0 <col:59, col:75> col:75 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b52ec30 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2ac4b52ecb0 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x2ac4b52f168 <line:749:24, col:171> col:42 _wcstoi64_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b52eeb0 <col:61, col:77> col:77 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b52ef30 <col:108, col:119> col:119 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2ac4b52efb0 <col:133, col:137> col:137 _Radix 'int'
| `-ParmVarDecl 0x2ac4b52f028 <col:154, col:164> col:164 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b52f470 <line:750:24, col:150> col:50 _wcstoui64 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2ac4b52f250 <col:68, col:84> col:84 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b52f2d0 <col:115, col:126> col:126 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2ac4b52f350 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x2ac4b52f808 <line:751:24, col:180> col:50 _wcstoui64_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2ac4b52f550 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b52f5d0 <col:117, col:128> col:128 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2ac4b52f650 <col:142, col:146> col:146 _Radix 'int'
| `-ParmVarDecl 0x2ac4b52f6c8 <col:163, col:173> col:173 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b52caf0 <line:770:24, col:151> col:39 _fullpath 'char *(char *, const char *, size_t) __attribute__((cdecl))':'char *(char *, const char *, size_t)'
| |-ParmVarDecl 0x2ac4b52f8f8 <col:82, col:89> col:89 _FullPath 'char *'
| |-ParmVarDecl 0x2ac4b52c958 <col:107, col:120> col:120 _Path 'const char *'
| `-ParmVarDecl 0x2ac4b52c9d0 <col:132, col:139> col:139 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b52d0b8 <line:778:28, col:189> col:44 _ecvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x2ac4b52cbd8 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b52cc50 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b52ccd0 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x2ac4b52cd50 <col:132, col:136> col:136 _NumOfDights 'int'
| |-ParmVarDecl 0x2ac4b52cdd0 <col:156, col:162> col:162 _PtDec 'int *'
| `-ParmVarDecl 0x2ac4b52ce50 <col:176, col:182> col:182 _PtSign 'int *'
|-FunctionDecl 0x2ac4b52d5b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:780:158> col:72 _ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x2ac4b52d278 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x2ac4b52d2f8 <col:101, col:105> col:105 _NumOfDigits 'int'
| |-ParmVarDecl 0x2ac4b52d378 <col:125, col:131> col:131 _PtDec 'int *'
| |-ParmVarDecl 0x2ac4b52d3f8 <col:145, col:151> col:151 _PtSign 'int *'
| `-DeprecatedAttr 0x2ac4b52d670 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b534c38 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:781:28, col:186> col:44 _fcvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x2ac4b52d7b8 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b52d830 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b52d8b0 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x2ac4b5349c0 <col:132, col:136> col:136 _NumOfDec 'int'
| |-ParmVarDecl 0x2ac4b534a40 <col:153, col:159> col:159 _PtDec 'int *'
| `-ParmVarDecl 0x2ac4b534ac0 <col:173, col:179> col:179 _PtSign 'int *'
|-FunctionDecl 0x2ac4b5350b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:783:155> col:72 _fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x2ac4b534df8 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x2ac4b534e78 <col:101, col:105> col:105 _NumOfDec 'int'
| |-ParmVarDecl 0x2ac4b534ef8 <col:122, col:128> col:128 _PtDec 'int *'
| |-ParmVarDecl 0x2ac4b534f78 <col:142, col:148> col:148 _PtSign 'int *'
| `-DeprecatedAttr 0x2ac4b535178 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b535638 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:784:9, col:129> col:25 _gcvt_s 'errno_t (char *, size_t, double, int) __attribute__((cdecl))':'errno_t (char *, size_t, double, int)'
| |-ParmVarDecl 0x2ac4b5352c0 <col:55, col:62> col:62 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b535338 <col:76, col:83> col:83 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b5353b8 <col:95, col:102> col:102 _Val 'double'
| `-ParmVarDecl 0x2ac4b535438 <col:113, col:117> col:117 _NumOfDigits 'int'
|-FunctionDecl 0x2ac4b52da38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:786:141> col:57 _gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x2ac4b5357e8 <col:68, col:75> col:75 _Val 'double'
| |-ParmVarDecl 0x2ac4b535868 <col:86, col:90> col:90 _NumOfDigits 'int'
| |-ParmVarDecl 0x2ac4b5358e8 <col:127, col:134> col:134 _DstBuf 'char *'
| `-DeprecatedAttr 0x2ac4b52daf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b52ded0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:788:24, col:91> col:36 _atodbl 'int (_CRT_DOUBLE *, char *) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *)'
| |-ParmVarDecl 0x2ac4b52dca8 <col:50, col:64> col:64 _Result '_CRT_DOUBLE *'
| `-ParmVarDecl 0x2ac4b52dd28 <col:80, col:87> col:87 _Str 'char *'
|-FunctionDecl 0x2ac4b52e250 <line:789:24, col:89> col:36 _atoldbl 'int (_LDOUBLE *, char *) __attribute__((cdecl))':'int (_LDOUBLE *, char *)'
| |-ParmVarDecl 0x2ac4b52e028 <col:51, col:62> col:62 _Result '_LDOUBLE *'
| `-ParmVarDecl 0x2ac4b52e0a8 <col:78, col:85> col:85 _Str 'char *'
|-FunctionDecl 0x2ac4b52e5d0 <line:790:24, col:96> col:36 _atoflt 'int (_CRT_FLOAT *, const char *) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *)'
| |-ParmVarDecl 0x2ac4b52e3a8 <col:50, col:63> col:63 _Result '_CRT_FLOAT *'
| `-ParmVarDecl 0x2ac4b52e428 <col:79, col:92> col:92 _Str 'const char *'
|-FunctionDecl 0x2ac4b536a28 <line:791:24, col:121> col:36 _atodbl_l 'int (_CRT_DOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b52e6a8 <col:52, col:66> col:66 _Result '_CRT_DOUBLE *'
| |-ParmVarDecl 0x2ac4b52e728 <col:82, col:89> col:89 _Str 'char *'
| `-ParmVarDecl 0x2ac4b52e7a0 <col:104, col:114> col:114 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b536dd8 <line:792:24, col:119> col:36 _atoldbl_l 'int (_LDOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_LDOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b536b08 <col:53, col:64> col:64 _Result '_LDOUBLE *'
| |-ParmVarDecl 0x2ac4b536b88 <col:80, col:87> col:87 _Str 'char *'
| `-ParmVarDecl 0x2ac4b536c00 <col:102, col:112> col:112 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b537188 <line:793:24, col:126> col:36 _atoflt_l 'int (_CRT_FLOAT *, const char *, _locale_t) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *, _locale_t)'
| |-ParmVarDecl 0x2ac4b536eb8 <col:52, col:65> col:65 _Result '_CRT_FLOAT *'
| |-ParmVarDecl 0x2ac4b536f38 <col:81, col:94> col:94 _Str 'const char *'
| `-ParmVarDecl 0x2ac4b536fb0 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2ac4b537460 <line:794:46> col:46 implicit _lrotl 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x2ac4b537500 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x2ac4b537568 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2ac4b5375e0 <col:46> Implicit
|-FunctionDecl 0x2ac4b537638 prev 0x2ac4b537460 <col:24, col:93> col:46 _lrotl 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x2ac4b537270 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x2ac4b5372f0 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x2ac4b537730 <col:46> Inherited Implicit
|-FunctionDecl 0x2ac4b5378f0 <line:795:46> col:46 implicit _lrotr 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x2ac4b5359d0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x2ac4b535a38 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2ac4b535ab0 <col:46> Implicit
|-FunctionDecl 0x2ac4b535b08 prev 0x2ac4b5378f0 <col:24, col:93> col:46 _lrotr 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x2ac4b537770 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x2ac4b5377f0 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x2ac4b535c00 <col:46> Inherited Implicit
|-FunctionDecl 0x2ac4b536118 <line:796:40, line:797:37> line:796:58 _makepath_s 'errno_t (char *, size_t, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x2ac4b535c40 <col:99, col:106> col:106 _PathResult 'char *'
| |-ParmVarDecl 0x2ac4b535cb8 <col:124, col:131> col:131 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b535d38 <col:156, col:169> col:169 _Drive 'const char *'
| |-ParmVarDecl 0x2ac4b535db8 <col:188, col:201> col:201 _Dir 'const char *'
| |-ParmVarDecl 0x2ac4b535e38 <col:218, col:231> col:231 _Filename 'const char *'
| `-ParmVarDecl 0x2ac4b535eb8 <line:797:20, col:33> col:33 _Ext 'const char *'
|-FunctionDecl 0x2ac4b5366c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:799:78 _makepath 'void (char *, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'void (char *, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x2ac4b5362d8 <col:113, col:119> col:119 _Path 'char *'
| |-ParmVarDecl 0x2ac4b536358 <col:137, col:151> col:151 _Drive 'const char *'
| |-ParmVarDecl 0x2ac4b5363d8 <col:170, col:184> col:184 _Dir 'const char *'
| |-ParmVarDecl 0x2ac4b536458 <col:201, col:215> col:215 _Filename 'const char *'
| |-ParmVarDecl 0x2ac4b5364d8 <col:237, col:251> col:251 _Ext 'const char *'
| `-DeprecatedAttr 0x2ac4b536788 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b53bac0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:826:9, col:59> col:27 _onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x2ac4b5368f0 <col:44, col:54> col:54 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x2ac4b53bce0 <line:831:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x2ac4b53bb98 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x2ac4b53be98 <line:838:24, col:77> col:39 _putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x2ac4b53bdb8 <col:54, col:67> col:67 _EnvString 'const char *'
|-FunctionDecl 0x2ac4b53c158 <line:839:28, col:107> col:44 _putenv_s 'errno_t (const char *, const char *) __attribute__((cdecl))':'errno_t (const char *, const char *)'
| |-ParmVarDecl 0x2ac4b53bf70 <col:61, col:74> col:74 _Name 'const char *'
| `-ParmVarDecl 0x2ac4b53bff0 <col:88, col:101> col:101 _Value 'const char *'
|-FunctionDecl 0x2ac4b53c420 <line:842:30> col:30 implicit _rotl 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x2ac4b53c4c0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x2ac4b53c528 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2ac4b53c5a0 <col:30> Implicit
|-FunctionDecl 0x2ac4b53c5f8 prev 0x2ac4b53c420 <col:9, col:75> col:30 _rotl 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x2ac4b53c238 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x2ac4b53c2b8 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x2ac4b53c6f0 <col:30> Inherited Implicit
|-FunctionDecl 0x2ac4b53c920 <line:843:34> col:34 implicit _rotl64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x2ac4b53c9c0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x2ac4b53da50 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2ac4b53dac8 <col:34> Implicit
|-FunctionDecl 0x2ac4b53db20 prev 0x2ac4b53c920 <col:9, col:85> col:34 _rotl64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x2ac4b53c730 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x2ac4b53c7b0 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x2ac4b53dc18 <col:34> Inherited Implicit
|-FunctionDecl 0x2ac4b53ddd8 <line:844:30> col:30 implicit _rotr 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x2ac4b53de78 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x2ac4b53dee0 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2ac4b53df58 <col:30> Implicit
|-FunctionDecl 0x2ac4b53dfb0 prev 0x2ac4b53ddd8 <col:9, col:75> col:30 _rotr 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x2ac4b53dc58 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x2ac4b53dcd8 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x2ac4b53e0a8 <col:30> Inherited Implicit
|-FunctionDecl 0x2ac4b53e268 <line:845:34> col:34 implicit _rotr64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x2ac4b53e308 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x2ac4b53e370 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2ac4b53e3e8 <col:34> Implicit
|-FunctionDecl 0x2ac4b53e440 prev 0x2ac4b53e268 <col:9, col:85> col:34 _rotr64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x2ac4b53e0e8 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x2ac4b53e168 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x2ac4b53e538 <col:34> Inherited Implicit
|-FunctionDecl 0x2ac4b53e8f8 <line:849:9, col:171> col:25 _searchenv_s 'errno_t (const char *, const char *, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, const char *, char *, size_t)'
| |-ParmVarDecl 0x2ac4b53e578 <col:45, col:58> col:58 _Filename 'const char *'
| |-ParmVarDecl 0x2ac4b53e5f8 <col:76, col:89> col:89 _EnvVar 'const char *'
| |-ParmVarDecl 0x2ac4b53e678 <col:127, col:134> col:134 _ResultPath 'char *'
| `-ParmVarDecl 0x2ac4b53e6f0 <col:152, col:159> col:159 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b53ad90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:851:78 _searchenv 'void (const char *, const char *, char *) __attribute__((cdecl))':'void (const char *, const char *, char *)'
| |-ParmVarDecl 0x2ac4b53aaf8 <col:97, col:111> col:111 _Filename 'const char *'
| |-ParmVarDecl 0x2ac4b53ab78 <col:129, col:143> col:143 _EnvVar 'const char *'
| |-ParmVarDecl 0x2ac4b53abf8 <col:176, col:182> col:182 _ResultPath 'char *'
| `-DeprecatedAttr 0x2ac4b53ae48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b53b430 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:854:261> col:62 _splitpath 'void (const char *, char *, char *, char *, char *) __attribute__((cdecl))':'void (const char *, char *, char *, char *, char *)'
| |-ParmVarDecl 0x2ac4b53b050 <col:80, col:93> col:93 _FullPath 'const char *'
| |-ParmVarDecl 0x2ac4b53b0d0 <col:129, col:136> col:136 _Drive 'char *'
| |-ParmVarDecl 0x2ac4b53b150 <col:169, col:176> col:176 _Dir 'char *'
| |-ParmVarDecl 0x2ac4b53b1d0 <col:207, col:214> col:214 _Filename 'char *'
| |-ParmVarDecl 0x2ac4b53b250 <col:250, col:257> col:257 _Ext 'char *'
| `-DeprecatedAttr 0x2ac4b53b4f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b539d00 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:855:40, line:859:79> line:855:57 _splitpath_s 'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t)'
| |-ParmVarDecl 0x2ac4b53b640 <col:77, col:90> col:90 _FullPath 'const char *'
| |-ParmVarDecl 0x2ac4b53b6c0 <line:856:48, col:55> col:55 _Drive 'char *'
| |-ParmVarDecl 0x2ac4b53b738 <col:68, col:75> col:75 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b53b7b8 <line:857:46, col:53> col:53 _Dir 'char *'
| |-ParmVarDecl 0x2ac4b53b830 <col:64, col:71> col:71 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b53b8b0 <line:858:51, col:58> col:58 _Filename 'char *'
| |-ParmVarDecl 0x2ac4b53b928 <col:74, col:81> col:81 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b53b9a8 <line:859:46, col:53> col:53 _Ext 'char *'
| `-ParmVarDecl 0x2ac4b539a10 <col:64, col:71> col:71 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b53a0b0 <line:862:9, col:204> col:24 _swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x2ac4b539e18 <col:95, col:102> col:102 _Buf1 'char *'
| |-ParmVarDecl 0x2ac4b539e98 <col:174, col:181> col:181 _Buf2 'char *'
| `-ParmVarDecl 0x2ac4b539f18 <col:188, col:192> col:192 _SizeInBytes 'int'
|-FunctionDecl 0x2ac4b53a398 <line:873:24, col:161> col:42 _wfullpath 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b53a190 <col:86, col:96> col:96 _FullPath 'wchar_t *'
| |-ParmVarDecl 0x2ac4b53a208 <col:114, col:130> col:130 _Path 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b53a280 <col:142, col:149> col:149 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b53a938 <line:879:40, line:880:40> line:879:56 _wmakepath_s 'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b53a478 <col:91, col:101> col:101 _PathResult 'wchar_t *'
| |-ParmVarDecl 0x2ac4b53a4f0 <col:119, col:126> col:126 _SIZE 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b53a568 <col:144, col:160> col:160 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b53a5e0 <col:179, col:195> col:195 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b53a658 <col:212, col:228> col:228 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b53a6d0 <line:880:20, col:36> col:36 _Ext 'const wchar_t *'
|-FunctionDecl 0x2ac4b53cf40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:882:78 _wmakepath 'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b53cb28 <col:114, col:123> col:123 _ResultPath 'wchar_t *'
| |-ParmVarDecl 0x2ac4b53cba0 <col:147, col:164> col:164 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b53cc18 <col:183, col:200> col:200 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b53cc90 <col:217, col:234> col:234 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b53cd08 <col:256, col:273> col:273 _Ext 'const wchar_t *'
| `-DeprecatedAttr 0x2ac4b53d008 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b53d2c0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:885:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x2ac4b53d148 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x2ac4b53d470 <line:889:24, col:81> col:39 _wputenv 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x2ac4b53d390 <col:55, col:71> col:71 _EnvString 'const wchar_t *'
|-FunctionDecl 0x2ac4b53d718 <line:890:28, col:114> col:44 _wputenv_s 'errno_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2ac4b53d540 <col:62, col:78> col:78 _Name 'const wchar_t *'
| `-ParmVarDecl 0x2ac4b53d5b8 <col:92, col:108> col:108 _Value 'const wchar_t *'
|-FunctionDecl 0x2ac4b537b28 <line:891:9, col:181> col:25 _wsearchenv_s 'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b53d7f0 <col:46, col:62> col:62 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b53d868 <col:80, col:96> col:96 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b53d8e0 <col:134, col:144> col:144 _ResultPath 'wchar_t *'
| `-ParmVarDecl 0x2ac4b53d958 <col:162, col:169> col:169 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b537f90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:893:78 _wsearchenv 'void (const wchar_t *, const wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x2ac4b537cd0 <col:98, col:115> col:115 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b537d48 <col:133, col:150> col:150 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b537dc0 <col:183, col:192> col:192 _ResultPath 'wchar_t *'
| `-DeprecatedAttr 0x2ac4b538048 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b538660 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:896:278> col:63 _wsplitpath 'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x2ac4b538248 <col:82, col:98> col:98 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b5382c0 <col:134, col:144> col:144 _Drive 'wchar_t *'
| |-ParmVarDecl 0x2ac4b538338 <col:177, col:187> col:187 _Dir 'wchar_t *'
| |-ParmVarDecl 0x2ac4b5383b0 <col:218, col:228> col:228 _Filename 'wchar_t *'
| |-ParmVarDecl 0x2ac4b538428 <col:264, col:274> col:274 _Ext 'wchar_t *'
| `-DeprecatedAttr 0x2ac4b538728 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b53ffc0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:897:21, line:901:82> line:897:37 _wsplitpath_s 'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t)'
| |-ParmVarDecl 0x2ac4b538868 <col:58, col:74> col:74 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x2ac4b5388e0 <line:898:48, col:58> col:58 _Drive 'wchar_t *'
| |-ParmVarDecl 0x2ac4b538958 <col:71, col:78> col:78 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b53fa70 <line:899:46, col:56> col:56 _Dir 'wchar_t *'
| |-ParmVarDecl 0x2ac4b53fae8 <col:67, col:74> col:74 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b53fb60 <line:900:51, col:61> col:61 _Filename 'wchar_t *'
| |-ParmVarDecl 0x2ac4b53fbd8 <col:77, col:84> col:84 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b53fc50 <line:901:46, col:56> col:56 _Ext 'wchar_t *'
| `-ParmVarDecl 0x2ac4b53fcc8 <col:67, col:74> col:74 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b5402e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:909:78> col:50 _seterrormode 'void (int) __attribute__((cdecl))':'void (int)'
| |-ParmVarDecl 0x2ac4b5401d8 <col:69, col:73> col:73 _Mode 'int'
| `-DeprecatedAttr 0x2ac4b540388 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details." ""
|-FunctionDecl 0x2ac4b540778 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:910:97> col:42 _beep 'void (unsigned int, unsigned int) __attribute__((cdecl))':'void (unsigned int, unsigned int)'
| |-ParmVarDecl 0x2ac4b540598 <col:53, col:62> col:62 _Frequency 'unsigned int'
| |-ParmVarDecl 0x2ac4b540618 <col:79, col:88> col:88 _Duration 'unsigned int'
| `-DeprecatedAttr 0x2ac4b540828 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details." ""
|-FunctionDecl 0x2ac4b538b40 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:911:78> col:43 _sleep 'void (unsigned long) __attribute__((cdecl))':'void (unsigned long)'
| |-ParmVarDecl 0x2ac4b538a00 <col:55, col:69> col:69 _Duration 'unsigned long'
| `-DeprecatedAttr 0x2ac4b538be8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details." ""
|-FunctionDecl 0x2ac4b539190 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:934:187> col:102 ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x2ac4b538ed0 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x2ac4b538f50 <col:130, col:134> col:134 _NumOfDigits 'int'
| |-ParmVarDecl 0x2ac4b538fd0 <col:154, col:160> col:160 _PtDec 'int *'
| |-ParmVarDecl 0x2ac4b539050 <col:174, col:180> col:180 _PtSign 'int *'
| |-DeprecatedAttr 0x2ac4b539250 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ecvt. See online help for details." ""
| `-DeprecatedAttr 0x2ac4b539348 <col:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b539880 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:935:184> col:102 fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x2ac4b5395c0 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x2ac4b539640 <col:130, col:134> col:134 _NumOfDec 'int'
| |-ParmVarDecl 0x2ac4b5396c0 <col:151, col:157> col:157 _PtDec 'int *'
| |-ParmVarDecl 0x2ac4b539740 <col:171, col:177> col:177 _PtSign 'int *'
| |-DeprecatedAttr 0x2ac4b539940 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcvt. See online help for details." ""
| `-DeprecatedAttr 0x2ac4b547ba0 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b548038 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:936:179> col:96 gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x2ac4b547e18 <col:106, col:113> col:113 _Val 'double'
| |-ParmVarDecl 0x2ac4b547e98 <col:124, col:128> col:128 _NumOfDigits 'int'
| |-ParmVarDecl 0x2ac4b547f18 <col:165, col:172> col:172 _DstBuf 'char *'
| |-DeprecatedAttr 0x2ac4b5480f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _gcvt. See online help for details." ""
| `-DeprecatedAttr 0x2ac4b5481e8 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b548680 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:937:170> col:96 itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x2ac4b548460 <col:106, col:110> col:110 _Val 'int'
| |-ParmVarDecl 0x2ac4b5484e0 <col:139, col:146> col:146 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b548560 <col:160, col:164> col:164 _Radix 'int'
| |-DeprecatedAttr 0x2ac4b548738 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _itoa. See online help for details." ""
| `-DeprecatedAttr 0x2ac4b548830 <col:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b544ce0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:938:171> col:96 ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x2ac4b544ac0 <col:106, col:111> col:111 _Val 'long'
| |-ParmVarDecl 0x2ac4b544b40 <col:140, col:147> col:147 _DstBuf 'char *'
| |-ParmVarDecl 0x2ac4b544bc0 <col:161, col:165> col:165 _Radix 'int'
| |-DeprecatedAttr 0x2ac4b544d98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ltoa. See online help for details." ""
| `-DeprecatedAttr 0x2ac4b544e90 <col:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b545128 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:941:108> col:71 putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x2ac4b545048 <col:85, col:98> col:98 _EnvString 'const char *'
| `-DeprecatedAttr 0x2ac4b5451d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putenv. See online help for details." ""
|-FunctionDecl 0x2ac4b5455b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:944:245> col:128 swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x2ac4b545398 <col:165, col:172> col:172 _Buf1 'char *'
| |-ParmVarDecl 0x2ac4b545418 <col:210, col:217> col:217 _Buf2 'char *'
| |-ParmVarDecl 0x2ac4b545498 <col:229, col:233> col:233 _SizeInBytes 'int'
| `-DeprecatedAttr 0x2ac4b545668 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _swab. See online help for details." ""
|-FunctionDecl 0x2ac4b540b20 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:945:181> col:96 ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x2ac4b545930 <col:107, col:121> col:121 _Val 'unsigned long'
| |-ParmVarDecl 0x2ac4b5459b0 <col:150, col:157> col:157 _Dstbuf 'char *'
| |-ParmVarDecl 0x2ac4b545a30 <col:171, col:175> col:175 _Radix 'int'
| |-DeprecatedAttr 0x2ac4b540bd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ultoa. See online help for details." ""
| `-DeprecatedAttr 0x2ac4b540cd0 <col:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2ac4b540eb8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:64:18, line:947:48> col:18 onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x2ac4b540de0 <line:64:18, line:947:43> col:43 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-RecordDecl 0x2ac4b540f78 <.//openssl//file_jk/after\crypto\ec/ec_lcl.h:52:1, line:180:1> line:52:8 struct ec_method_st definition
| |-FieldDecl 0x2ac4b541048 <line:54:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x2ac4b5410b8 <line:56:5, col:9> col:9 field_type 'int'
| |-FieldDecl 0x2ac4b541258 <line:61:5, col:34> col:11 group_init 'int (*)(int *)'
| |-FieldDecl 0x2ac4b541420 <line:62:5, col:37> col:12 group_finish 'void (*)(int *)'
| |-FieldDecl 0x2ac4b541530 <line:63:5, col:43> col:12 group_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x2ac4b5417a0 <line:64:5, col:52> col:11 group_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x2ac4b541bc8 <line:67:5, line:68:54> line:67:11 group_set_curve 'int (*)(int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b541fd8 <line:69:5, line:70:37> line:69:11 group_get_curve 'int (*)(const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x2ac4b5421a8 <line:72:5, col:46> col:11 group_get_degree 'int (*)(const int *)'
| |-FieldDecl 0x2ac4b5422c0 <line:73:5, col:46> col:11 group_order_bits 'int (*)(const int *)'
| |-FieldDecl 0x2ac4b542530 <line:75:5, col:64> col:11 group_check_discriminant 'int (*)(const int *, int *)'
| |-FieldDecl 0x2ac4b542648 <line:80:5, col:34> col:11 point_init 'int (*)(int *)'
| |-FieldDecl 0x2ac4b542758 <line:81:5, col:37> col:12 point_finish 'void (*)(int *)'
| |-FieldDecl 0x2ac4b542868 <line:82:5, col:43> col:12 point_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x2ac4b542a08 <line:83:5, col:52> col:11 point_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x2ac4b546c10 <line:92:5, col:63> col:11 point_set_to_infinity 'int (*)(const int *, int *)'
| |-FieldDecl 0x2ac4b5470c0 <line:93:5, line:96:76> line:93:11 point_set_Jprojective_coordinates_GFp 'int (*)(const int *, int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b547570 <line:97:5, line:100:59> line:97:11 point_get_Jprojective_coordinates_GFp 'int (*)(const int *, const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x2ac4b547988 <line:101:5, line:103:50> line:101:11 point_set_affine_coordinates 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b548db8 <line:104:5, line:105:72> line:104:11 point_get_affine_coordinates 'int (*)(const int *, const int *, int *, int *, int *)'
| |-FieldDecl 0x2ac4b5491c8 <line:106:5, line:108:54> line:106:11 point_set_compressed_coordinates 'int (*)(const int *, int *, const int *, int, int *)'
| |-FieldDecl 0x2ac4b5496e8 <line:110:5, line:112:46> line:110:14 point2oct 'size_t (*)(const int *, const int *, int, unsigned char *, size_t, int *)'
| |-FieldDecl 0x2ac4b54ab80 <line:113:5, line:114:43> line:113:11 oct2point 'int (*)(const int *, int *, const unsigned char *, size_t, int *)'
| |-FieldDecl 0x2ac4b54aeb8 <line:116:5, line:117:44> line:116:11 add 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b54b240 <line:118:5, col:75> col:11 dbl 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x2ac4b54b538 <line:119:5, col:58> col:11 invert 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x2ac4b54b7a0 <line:123:5, col:62> col:11 is_at_infinity 'int (*)(const int *, const int *)'
| |-FieldDecl 0x2ac4b54ba98 <line:124:5, col:69> col:11 is_on_curve 'int (*)(const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b543dd0 <line:125:5, line:126:31> line:125:11 point_cmp 'int (*)(const int *, const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b543ff8 <line:128:5, col:63> col:11 make_affine 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x2ac4b544470 <line:129:5, line:130:40> line:129:11 points_make_affine 'int (*)(const int *, size_t, int **, int *)'
| |-FieldDecl 0x2ac4b54cb40 <line:136:5, line:138:25> line:136:11 mul 'int (*)(const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-FieldDecl 0x2ac4b54cdb0 <line:139:5, col:54> col:11 precompute_mult 'int (*)(int *, int *)'
| |-FieldDecl 0x2ac4b54cec8 <line:140:5, col:55> col:11 have_precompute_mult 'int (*)(const int *)'
| |-FieldDecl 0x2ac4b54d200 <line:148:5, line:149:48> line:148:11 field_mul 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b54d4b0 <line:150:5, col:77> col:11 field_sqr 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x2ac4b54d7e8 <line:151:5, line:152:48> line:151:11 field_div 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b54da98 <line:159:5, col:77> col:11 field_inv 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x2ac4b54bd70 <line:161:5, line:162:34> line:161:11 field_encode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x2ac4b54c020 <line:164:5, line:165:34> line:164:11 field_decode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x2ac4b54c248 <line:166:5, col:67> col:11 field_set_to_one 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x2ac4b54c570 <line:168:5, col:75> col:14 priv2oct 'size_t (*)(const int *, unsigned char *, size_t)'
| |-FieldDecl 0x2ac4b54c898 <line:169:5, col:72> col:11 oct2priv 'int (*)(int *, const unsigned char *, size_t)'
| |-FieldDecl 0x2ac4b54ca38 <line:170:5, col:61> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x2ac4b554c00 <line:171:5, col:32> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x2ac4b554d18 <line:172:5, col:40> col:11 keycheck 'int (*)(const int *)'
| |-FieldDecl 0x2ac4b554e30 <line:173:5, col:35> col:11 keygenpub 'int (*)(int *)'
| |-FieldDecl 0x2ac4b554fd0 <line:174:5, col:50> col:11 keycopy 'int (*)(int *, const int *)'
| |-FieldDecl 0x2ac4b5550e0 <line:175:5, col:36> col:12 keyfinish 'void (*)(int *)'
| |-FieldDecl 0x2ac4b5554f0 <line:177:5, line:178:72> line:177:11 ecdh_compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| `-FieldDecl 0x2ac4b555718 <line:179:5, col:77> col:11 blind_coordinates 'int (*)(const int *, int *, int *)'
|-RecordDecl 0x2ac4b555770 <line:185:9, col:16> col:16 struct nistp224_pre_comp_st
|-TypedefDecl 0x2ac4b555888 <col:1, col:37> col:37 referenced NISTP224_PRE_COMP 'struct nistp224_pre_comp_st':'struct nistp224_pre_comp_st'
| `-ElaboratedType 0x2ac4b555830 'struct nistp224_pre_comp_st' sugar
|   `-RecordType 0x2ac4b555810 'struct nistp224_pre_comp_st'
|     `-Record 0x2ac4b555770 'nistp224_pre_comp_st'
|-RecordDecl 0x2ac4b5558f8 <line:186:9, col:16> col:16 struct nistp256_pre_comp_st
|-TypedefDecl 0x2ac4b555a08 <col:1, col:37> col:37 referenced NISTP256_PRE_COMP 'struct nistp256_pre_comp_st':'struct nistp256_pre_comp_st'
| `-ElaboratedType 0x2ac4b5559b0 'struct nistp256_pre_comp_st' sugar
|   `-RecordType 0x2ac4b555990 'struct nistp256_pre_comp_st'
|     `-Record 0x2ac4b5558f8 'nistp256_pre_comp_st'
|-RecordDecl 0x2ac4b555a78 <line:187:9, col:16> col:16 struct nistp521_pre_comp_st
|-TypedefDecl 0x2ac4b553bb0 <col:1, col:37> col:37 referenced NISTP521_PRE_COMP 'struct nistp521_pre_comp_st':'struct nistp521_pre_comp_st'
| `-ElaboratedType 0x2ac4b555b30 'struct nistp521_pre_comp_st' sugar
|   `-RecordType 0x2ac4b555b10 'struct nistp521_pre_comp_st'
|     `-Record 0x2ac4b6e0640 'nistp521_pre_comp_st'
|-RecordDecl 0x2ac4b553c20 <line:188:9, col:16> col:16 struct nistz256_pre_comp_st
|-TypedefDecl 0x2ac4b553d38 <col:1, col:37> col:37 referenced NISTZ256_PRE_COMP 'struct nistz256_pre_comp_st':'struct nistz256_pre_comp_st'
| `-ElaboratedType 0x2ac4b553ce0 'struct nistz256_pre_comp_st' sugar
|   `-RecordType 0x2ac4b553cc0 'struct nistz256_pre_comp_st'
|     `-Record 0x2ac4b553c20 'nistz256_pre_comp_st'
|-RecordDecl 0x2ac4b553da8 <line:189:9, col:16> col:16 struct ec_pre_comp_st
|-TypedefDecl 0x2ac4b553eb8 <col:1, col:31> col:31 referenced EC_PRE_COMP 'struct ec_pre_comp_st':'struct ec_pre_comp_st'
| `-ElaboratedType 0x2ac4b553e60 'struct ec_pre_comp_st' sugar
|   `-RecordType 0x2ac4b553e40 'struct ec_pre_comp_st'
|     `-Record 0x2ac4b553da8 'ec_pre_comp_st'
|-RecordDecl 0x2ac4b553f28 <line:191:1, line:256:1> line:191:8 invalid struct ec_group_st definition
| |-FieldDecl 0x2ac4b553ff8 <line:192:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x2ac4b554068 <line:193:5, col:15> col:15 invalid generator 'int *'
| |-FieldDecl 0x2ac4b5540d8 <line:194:5, col:13> col:13 invalid order 'int *'
| |-FieldDecl 0x2ac4b554148 <col:5, col:21> col:21 invalid cofactor 'int *'
| |-FieldDecl 0x2ac4b5541b8 <line:195:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x2ac4b554228 <line:196:5, col:9> col:9 asn1_flag 'int'
| |-FieldDecl 0x2ac4b554298 <line:197:5, col:29> col:29 invalid asn1_form 'int'
| |-FieldDecl 0x2ac4b554308 <line:198:5, col:20> col:20 seed 'unsigned char *'
| |-FieldDecl 0x2ac4b554370 <line:200:5, col:12> col:12 seed_len 'size_t':'unsigned long long'
| |-FieldDecl 0x2ac4b5543e0 <line:210:5, col:13> col:13 invalid field 'int *'
| |-FieldDecl 0x2ac4b5544e0 <line:218:5, col:15> col:9 poly 'int [6]'
| |-FieldDecl 0x2ac4b554550 <line:226:5, col:13> col:13 invalid a 'int *'
| |-FieldDecl 0x2ac4b5545c0 <col:5, col:17> col:17 invalid b 'int *'
| |-FieldDecl 0x2ac4b554630 <line:228:5, col:9> col:9 a_is_minus3 'int'
| |-FieldDecl 0x2ac4b5546a0 <line:230:5, col:11> col:11 field_data1 'void *'
| |-FieldDecl 0x2ac4b554710 <line:232:5, col:11> col:11 field_data2 'void *'
| |-FieldDecl 0x2ac4b554aa0 <line:234:5, line:235:36> line:234:11 field_mod_func 'int (*)(int *, const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b554b10 <line:237:5, col:18> col:18 invalid mont_data 'int *'
| |-EnumDecl 0x2ac4b54db50 <line:244:5, line:248:5> line:244:5
| | |-EnumConstantDecl 0x2ac4b54dc30 <line:245:9> col:9 PCT_none 'int'
| | |-EnumConstantDecl 0x2ac4b54dc88 <line:246:9> col:9 PCT_nistp224 'int'
| | |-EnumConstantDecl 0x2ac4b54dce0 <col:23> col:23 PCT_nistp256 'int'
| | |-EnumConstantDecl 0x2ac4b54dd38 <col:37> col:37 referenced PCT_nistp521 'int'
| | |-EnumConstantDecl 0x2ac4b54dd90 <col:51> col:51 PCT_nistz256 'int'
| | `-EnumConstantDecl 0x2ac4b54dde8 <line:247:9> col:9 PCT_ec 'int'
| |-FieldDecl 0x2ac4b54de98 <line:244:5, line:248:7> col:7 pre_comp_type 'enum (anonymous enum at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:244:5)':'enum ec_group_st::(anonymous at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:244:5)'
| |-RecordDecl 0x2ac4b54def0 <line:249:5, line:255:5> line:249:5 union definition
| | |-FieldDecl 0x2ac4b54e038 <line:250:9, col:28> col:28 nistp224 'NISTP224_PRE_COMP *'
| | |-FieldDecl 0x2ac4b54e118 <line:251:9, col:28> col:28 nistp256 'NISTP256_PRE_COMP *'
| | |-FieldDecl 0x2ac4b54e1f8 <line:252:9, col:28> col:28 nistp521 'NISTP521_PRE_COMP *'
| | |-FieldDecl 0x2ac4b54e2d8 <line:253:9, col:28> col:28 nistz256 'NISTZ256_PRE_COMP *'
| | `-FieldDecl 0x2ac4b54e3b8 <line:254:9, col:22> col:22 ec 'EC_PRE_COMP *'
| `-FieldDecl 0x2ac4b54e468 <line:249:5, line:255:7> col:7 pre_comp 'union (anonymous union at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:249:5)':'union ec_group_st::(anonymous at .//openssl//file_jk/after\crypto\ec/ec_lcl.h:249:5)'
|-RecordDecl 0x2ac4b54e4c0 <line:263:1, line:276:1> line:263:8 invalid struct ec_key_st definition
| |-FieldDecl 0x2ac4b54e598 <line:264:5, col:26> col:26 invalid meth 'const int *'
| |-FieldDecl 0x2ac4b54e608 <line:265:5, col:13> col:13 invalid engine 'int *'
| |-FieldDecl 0x2ac4b54e678 <line:266:5, col:9> col:9 version 'int'
| |-FieldDecl 0x2ac4b54e6e8 <line:267:5, col:15> col:15 invalid group 'int *'
| |-FieldDecl 0x2ac4b54e758 <line:268:5, col:15> col:15 invalid pub_key 'int *'
| |-FieldDecl 0x2ac4b54e7c8 <line:269:5, col:13> col:13 invalid priv_key 'int *'
| |-FieldDecl 0x2ac4b54e838 <line:270:5, col:18> col:18 enc_flag 'unsigned int'
| |-FieldDecl 0x2ac4b54e8a8 <line:271:5, col:29> col:29 invalid conv_form 'int'
| |-FieldDecl 0x2ac4b54e918 <line:272:5, col:9> col:9 references 'int'
| |-FieldDecl 0x2ac4b54e988 <line:273:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x2ac4b54e9f8 <line:274:5, col:20> col:20 invalid ex_data 'int'
| `-FieldDecl 0x2ac4b54ea68 <line:275:5, col:20> col:20 invalid lock 'int *'
|-RecordDecl 0x2ac4b54eac0 <line:278:1, line:292:1> line:278:8 invalid struct ec_point_st definition
| |-FieldDecl 0x2ac4b551be8 <line:279:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x2ac4b551c58 <line:281:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x2ac4b551cc8 <line:286:5, col:13> col:13 invalid X 'int *'
| |-FieldDecl 0x2ac4b551d38 <line:287:5, col:13> col:13 invalid Y 'int *'
| |-FieldDecl 0x2ac4b551da8 <line:288:5, col:13> col:13 invalid Z 'int *'
| `-FieldDecl 0x2ac4b551e18 <line:290:5, col:9> col:9 Z_is_one 'int'
|-FunctionDecl 0x2ac4b551fa8 <line:295:1, line:305:1> line:295:24 invalid ec_point_is_compat 'int (const int *, const int *)' static
| |-ParmVarDecl 0x2ac4b551e88 <col:43, col:59> col:59 invalid point 'const int *'
| |-ParmVarDecl 0x2ac4b551f08 <line:296:43, col:59> col:59 invalid group 'const int *'
| `-CompoundStmt 0x2ac4b552160 <line:297:1, line:305:1>
|   |-IfStmt 0x2ac4b552110 <line:298:5, line:302:16>
|   | |-OpaqueValueExpr 0x2ac4b5520f8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2ac4b5520e8 <col:9, col:16>
|   |   `-IntegerLiteral 0x2ac4b5520c0 <col:16> 'int' 0
|   `-ReturnStmt 0x2ac4b552150 <line:304:5, col:12>
|     `-IntegerLiteral 0x2ac4b552128 <col:12> 'int' 1
|-FunctionDecl 0x2ac4b552288 <line:308:1, col:64> col:20 EC_nistp224_pre_comp_dup 'NISTP224_PRE_COMP *(NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b552190 <col:45, col:63> col:64 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x2ac4b552448 <line:309:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b552358 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x2ac4b552608 <line:310:1, col:64> col:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b552518 <col:45, col:63> col:64 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x2ac4b5527c8 <line:311:1, col:64> col:20 EC_nistz256_pre_comp_dup 'NISTZ256_PRE_COMP *(NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b5526d8 <col:45, col:63> col:64 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x2ac4b552928 prev 0x2ac4b552448 <line:312:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b552898 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x2ac4b552ad8 <line:313:1, col:46> col:14 EC_ec_pre_comp_dup 'EC_PRE_COMP *(EC_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b5529e0 <col:33, col:45> col:46 'EC_PRE_COMP *'
|-FunctionDecl 0x2ac4b556ca0 <line:315:1, col:38> col:6 invalid EC_pre_comp_free 'void (int *)'
| `-ParmVarDecl 0x2ac4b556c10 <col:23, col:33> col:33 invalid group 'int *'
|-FunctionDecl 0x2ac4b556e48 <line:316:1, col:51> col:6 EC_nistp224_pre_comp_free 'void (NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b556d58 <col:32, col:50> col:51 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x2ac4b557008 <line:317:1, col:51> col:6 EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b556f18 <col:32, col:50> col:51 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x2ac4b5571c8 <line:318:1, col:51> col:6 used EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b5570d8 <col:32, col:50> col:51 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x2ac4b557388 <line:319:1, col:51> col:6 EC_nistz256_pre_comp_free 'void (NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b557298 <col:32, col:50> col:51 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x2ac4b557548 <line:320:1, col:39> col:6 EC_ec_pre_comp_free 'void (EC_PRE_COMP *)'
| `-ParmVarDecl 0x2ac4b557458 <col:26, col:38> col:39 'EC_PRE_COMP *'
|-FunctionDecl 0x2ac4b557a00 <line:326:1, line:328:25> line:326:5 invalid ec_wNAF_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2ac4b557620 <col:17, col:33> col:33 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b5576a0 <col:40, col:50> col:50 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b557720 <col:53, col:67> col:67 invalid scalar 'const int *'
| |-ParmVarDecl 0x2ac4b557798 <line:327:17, col:24> col:24 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b557828 <col:29, <invalid sloc>> col:45 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2ac4b5578b8 <col:55, <invalid sloc>> col:69 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2ac4b557938 <line:328:17, <invalid sloc>> col:25 invalid 'int *'
|-FunctionDecl 0x2ac4b550bb8 <line:329:1, col:54> col:5 invalid ec_wNAF_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2ac4b557af0 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x2ac4b557b70 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x2ac4b550d18 <line:330:1, col:55> col:5 invalid ec_wNAF_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x2ac4b550c80 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x2ac4b550e70 <line:333:1, col:40> col:5 invalid ec_GFp_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x2ac4b550dd8 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x2ac4b550fc0 <line:334:1, col:43> col:6 invalid ec_GFp_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x2ac4b550f30 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x2ac4b551110 <line:335:1, col:49> col:6 invalid ec_GFp_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x2ac4b551080 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x2ac4b5512f0 <line:336:1, col:58> col:5 invalid ec_GFp_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2ac4b5511d0 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x2ac4b551250 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x2ac4b551670 <line:337:1, line:338:77> line:337:5 invalid ec_GFp_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b5513b8 <col:35, <invalid sloc>> col:45 invalid 'int *'
| |-ParmVarDecl 0x2ac4b551438 <col:47, col:61> col:61 invalid p 'const int *'
| |-ParmVarDecl 0x2ac4b5514b8 <line:338:35, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b551538 <col:52, col:66> col:66 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b5515b8 <col:69, <invalid sloc>> col:77 invalid 'int *'
|-FunctionDecl 0x2ac4b551a08 <line:339:1, line:340:54> line:339:5 invalid ec_GFp_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b551750 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b5517d0 <col:53, col:61> col:61 invalid p 'int *'
| |-ParmVarDecl 0x2ac4b551850 <col:64, col:72> col:72 invalid a 'int *'
| |-ParmVarDecl 0x2ac4b5518d0 <line:340:35, col:43> col:43 invalid b 'int *'
| `-ParmVarDecl 0x2ac4b551950 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x2ac4b552ba0 <line:341:1, col:52> col:5 invalid ec_GFp_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x2ac4b551ae8 <col:36, <invalid sloc>> col:52 invalid 'const int *'
|-FunctionDecl 0x2ac4b552d80 <line:342:1, col:70> col:5 invalid ec_GFp_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x2ac4b552c60 <col:44, <invalid sloc>> col:60 invalid 'const int *'
| `-ParmVarDecl 0x2ac4b552ce0 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x2ac4b552ee0 <line:343:1, col:40> col:5 invalid ec_GFp_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x2ac4b552e48 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x2ac4b553030 <line:344:1, col:43> col:6 invalid ec_GFp_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x2ac4b552fa0 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x2ac4b553180 <line:345:1, col:49> col:6 invalid ec_GFp_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x2ac4b5530f0 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x2ac4b553360 <line:346:1, col:58> col:5 invalid ec_GFp_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2ac4b553240 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x2ac4b5532c0 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x2ac4b553548 <line:347:1, col:69> col:5 invalid ec_GFp_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x2ac4b553428 <col:41, <invalid sloc>> col:57 invalid 'const int *'
| `-ParmVarDecl 0x2ac4b5534a8 <col:59, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x2ac4b553950 <line:348:1, line:351:76> line:348:5 invalid ec_GFp_simple_set_Jprojective_coordinates_GFp 'int (const int *, int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b553610 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b553690 <line:349:51, <invalid sloc>> col:61 invalid 'int *'
| |-ParmVarDecl 0x2ac4b553710 <col:63, col:77> col:77 invalid x 'const int *'
| |-ParmVarDecl 0x2ac4b553790 <line:350:51, col:65> col:65 invalid y 'const int *'
| |-ParmVarDecl 0x2ac4b553810 <line:351:51, col:65> col:65 invalid z 'const int *'
| `-ParmVarDecl 0x2ac4b553890 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x2ac4b557dc8 <line:352:1, line:355:59> line:352:5 invalid ec_GFp_simple_get_Jprojective_coordinates_GFp 'int (const int *, const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b553a38 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b553ab8 <line:353:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b553b38 <col:69, col:77> col:77 invalid x 'int *'
| |-ParmVarDecl 0x2ac4b557c08 <line:354:51, col:59> col:59 invalid y 'int *'
| |-ParmVarDecl 0x2ac4b557c88 <col:62, col:70> col:70 invalid z 'int *'
| `-ParmVarDecl 0x2ac4b557d08 <line:355:51, <invalid sloc>> col:59 invalid 'int *'
|-FunctionDecl 0x2ac4b558168 <line:356:1, line:358:73> line:356:5 invalid ec_GFp_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b557eb0 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b557f30 <col:66, <invalid sloc>> col:76 invalid 'int *'
| |-ParmVarDecl 0x2ac4b557fb0 <line:357:48, col:62> col:62 invalid x 'const int *'
| |-ParmVarDecl 0x2ac4b558030 <line:358:48, col:62> col:62 invalid y 'const int *'
| `-ParmVarDecl 0x2ac4b5580b0 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x2ac4b558500 <line:359:1, line:361:67> line:359:5 invalid ec_GFp_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b558248 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b5582c8 <line:360:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b558348 <col:66, col:74> col:74 invalid x 'int *'
| |-ParmVarDecl 0x2ac4b5583c8 <line:361:48, col:56> col:56 invalid y 'int *'
| `-ParmVarDecl 0x2ac4b558448 <col:59, <invalid sloc>> col:67 invalid 'int *'
|-FunctionDecl 0x2ac4b558898 <line:362:1, line:364:54> line:362:5 invalid ec_GFp_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x2ac4b5585e0 <col:46, <invalid sloc>> col:62 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b558660 <col:64, <invalid sloc>> col:74 invalid 'int *'
| |-ParmVarDecl 0x2ac4b5586e0 <line:363:46, col:60> col:60 invalid x 'const int *'
| |-ParmVarDecl 0x2ac4b558760 <col:63, col:67> col:67 y_bit 'int'
| `-ParmVarDecl 0x2ac4b5587e0 <line:364:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x2ac4b559cc8 <line:365:1, line:367:72> line:365:8 invalid ec_GFp_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x2ac4b558978 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b5589f8 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b558a78 <line:366:32, col:56> col:56 invalid form 'int'
| |-ParmVarDecl 0x2ac4b558af8 <line:367:32, col:47> col:47 buf 'unsigned char *'
| |-ParmVarDecl 0x2ac4b558b70 <col:52, col:59> col:59 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b559c10 <col:64, <invalid sloc>> col:72 invalid 'int *'
|-FunctionDecl 0x2ac4b55a060 <line:368:1, line:369:75> line:368:5 invalid ec_GFp_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x2ac4b559db0 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b559e30 <col:47, <invalid sloc>> col:57 invalid 'int *'
| |-ParmVarDecl 0x2ac4b559eb0 <line:369:29, col:50> col:50 buf 'const unsigned char *'
| |-ParmVarDecl 0x2ac4b559f28 <col:55, col:62> col:62 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b559fa8 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x2ac4b55a3f8 <line:370:1, line:371:50> line:370:5 invalid ec_GFp_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55a140 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55a1c0 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b55a240 <col:54, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b55a2c0 <line:371:23, col:39> col:39 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b55a340 <col:42, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x2ac4b55a708 <line:372:1, line:373:31> line:372:5 invalid ec_GFp_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55a4d8 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55a558 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b55a5d8 <col:54, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x2ac4b55a658 <line:373:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x2ac4b55a988 <line:374:1, col:64> col:5 invalid ec_GFp_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b55a7e0 <col:26, <invalid sloc>> col:42 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55a860 <col:44, <invalid sloc>> col:54 invalid 'int *'
| `-ParmVarDecl 0x2ac4b55a8e0 <col:56, <invalid sloc>> col:64 invalid 'int *'
|-FunctionDecl 0x2ac4b55cc40 <line:375:1, col:68> col:5 invalid ec_GFp_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x2ac4b55aa58 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| `-ParmVarDecl 0x2ac4b55aad8 <col:52, <invalid sloc>> col:68 invalid 'const int *'
|-FunctionDecl 0x2ac4b55ceb0 <line:376:1, col:75> col:5 invalid ec_GFp_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55cd08 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55cd88 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| `-ParmVarDecl 0x2ac4b55ce08 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x2ac4b55d1b0 <line:377:1, line:378:31> line:377:5 invalid ec_GFp_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55cf80 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55d000 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b55d080 <col:60, col:76> col:76 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b55d100 <line:378:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x2ac4b55d430 <line:379:1, col:69> col:5 invalid ec_GFp_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b55d288 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55d308 <col:49, <invalid sloc>> col:59 invalid 'int *'
| `-ParmVarDecl 0x2ac4b55d388 <col:61, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x2ac4b55d738 <line:380:1, line:381:60> line:380:5 invalid ec_GFp_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x2ac4b55d500 <col:38, <invalid sloc>> col:54 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55d578 <col:56, col:63> col:63 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b55d608 <line:381:38, <invalid sloc>> col:48 invalid 'int **':'int **'
| `-ParmVarDecl 0x2ac4b55d688 <col:52, <invalid sloc>> col:60 invalid 'int *'
|-FunctionDecl 0x2ac4b55dac8 <line:382:1, line:383:54> line:382:5 invalid ec_GFp_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55d810 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55d890 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b55d910 <col:58, col:72> col:72 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b55d990 <line:383:29, col:43> col:43 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b55da10 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x2ac4b55add0 <line:384:1, line:385:37> line:384:5 invalid ec_GFp_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55dba8 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55ac20 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b55aca0 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x2ac4b55ad20 <line:385:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x2ac4b55b0d8 <line:386:1, line:387:37> line:386:5 invalid ec_GFp_simple_field_inv 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55aea8 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55af28 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b55afa8 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x2ac4b55b028 <line:387:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x2ac4b55b358 <line:388:1, line:389:48> line:388:5 invalid ec_GFp_simple_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b55b1b0 <col:37, col:53> col:53 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b55b230 <col:60, col:70> col:70 invalid p 'int *'
| `-ParmVarDecl 0x2ac4b55b2b0 <line:389:37, col:45> col:45 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b55b4c0 <line:392:1, col:38> col:5 invalid ec_GFp_mont_group_init 'int (int *)'
| `-ParmVarDecl 0x2ac4b55b428 <col:28, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x2ac4b55b838 <line:393:1, line:394:58> line:393:5 invalid ec_GFp_mont_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55b580 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x2ac4b55b600 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x2ac4b55b680 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b55b700 <line:394:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b55b780 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x2ac4b55b9a8 <line:395:1, col:41> col:6 invalid ec_GFp_mont_group_finish 'void (int *)'
| `-ParmVarDecl 0x2ac4b55b918 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x2ac4b55baf8 <line:396:1, col:47> col:6 invalid ec_GFp_mont_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x2ac4b55ba68 <col:37, <invalid sloc>> col:47 invalid 'int *'
|-FunctionDecl 0x2ac4b558cb8 <line:397:1, col:56> col:5 invalid ec_GFp_mont_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2ac4b55bbb8 <col:28, <invalid sloc>> col:38 invalid 'int *'
| `-ParmVarDecl 0x2ac4b558c18 <col:40, <invalid sloc>> col:56 invalid 'const int *'
|-FunctionDecl 0x2ac4b559038 <line:398:1, line:399:52> line:398:5 invalid ec_GFp_mont_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b558d80 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b558e00 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b558e80 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b558f00 <line:399:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b558f80 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x2ac4b559348 <line:400:1, line:401:35> line:400:5 invalid ec_GFp_mont_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b559118 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b559198 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b559218 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x2ac4b559298 <line:401:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x2ac4b559650 <line:402:1, line:403:35> line:402:5 invalid ec_GFp_mont_field_inv 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b559420 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b5594a0 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b559520 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x2ac4b5595a0 <line:403:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x2ac4b559958 <line:404:1, line:405:38> line:404:5 invalid ec_GFp_mont_field_encode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b559728 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b5597a8 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b559828 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x2ac4b5598a8 <line:405:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x2ac4b55bce0 <line:406:1, line:407:38> line:406:5 invalid ec_GFp_mont_field_decode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b559a30 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b559ab0 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b559b30 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x2ac4b55bc30 <line:407:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x2ac4b55bf60 <line:408:1, col:71> col:5 invalid ec_GFp_mont_field_set_to_one 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b55bdb8 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55be38 <col:52, col:60> col:60 invalid r 'int *'
| `-ParmVarDecl 0x2ac4b55beb8 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x2ac4b55c150 <line:411:1, col:63> col:5 invalid ec_GFp_nist_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2ac4b55c030 <col:28, col:38> col:38 invalid dest 'int *'
| `-ParmVarDecl 0x2ac4b55c0b0 <col:44, col:60> col:60 invalid src 'const int *'
|-FunctionDecl 0x2ac4b55c4d0 <line:412:1, line:413:58> line:412:5 invalid ec_GFp_nist_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55c218 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x2ac4b55c298 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x2ac4b55c318 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b55c398 <line:413:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b55c418 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x2ac4b55c868 <line:414:1, line:415:52> line:414:5 invalid ec_GFp_nist_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55c5b0 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55c630 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b55c6b0 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b55c730 <line:415:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b55c7b0 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x2ac4b55cb78 <line:416:1, line:417:35> line:416:5 invalid ec_GFp_nist_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55c948 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55c9c8 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b55ca48 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x2ac4b55cac8 <line:417:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x2ac4b555ca0 <line:420:1, col:41> col:5 invalid ec_GF2m_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x2ac4b555c08 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x2ac4b555df0 <line:421:1, col:44> col:6 invalid ec_GF2m_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x2ac4b555d60 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x2ac4b555f40 <line:422:1, col:50> col:6 invalid ec_GF2m_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x2ac4b555eb0 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x2ac4b556120 <line:423:1, col:59> col:5 invalid ec_GF2m_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2ac4b556000 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x2ac4b556080 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x2ac4b5564a0 <line:424:1, line:426:44> line:424:5 invalid ec_GF2m_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b5561e8 <col:36, <invalid sloc>> col:46 invalid 'int *'
| |-ParmVarDecl 0x2ac4b556268 <col:48, col:62> col:62 invalid p 'const int *'
| |-ParmVarDecl 0x2ac4b5562e8 <line:425:36, col:50> col:50 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b556368 <col:53, col:67> col:67 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b5563e8 <line:426:36, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x2ac4b556838 <line:427:1, line:428:55> line:427:5 invalid ec_GF2m_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b556580 <col:36, <invalid sloc>> col:52 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b556600 <col:54, col:62> col:62 invalid p 'int *'
| |-ParmVarDecl 0x2ac4b556680 <col:65, col:73> col:73 invalid a 'int *'
| |-ParmVarDecl 0x2ac4b556700 <line:428:36, col:44> col:44 invalid b 'int *'
| `-ParmVarDecl 0x2ac4b556780 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x2ac4b5569b0 <line:429:1, col:53> col:5 invalid ec_GF2m_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x2ac4b556918 <col:37, <invalid sloc>> col:53 invalid 'const int *'
|-FunctionDecl 0x2ac4b55fc70 <line:430:1, col:71> col:5 invalid ec_GF2m_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x2ac4b556a70 <col:45, <invalid sloc>> col:61 invalid 'const int *'
| `-ParmVarDecl 0x2ac4b556af0 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x2ac4b55fdd0 <line:431:1, col:41> col:5 invalid ec_GF2m_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x2ac4b55fd38 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x2ac4b55ff20 <line:432:1, col:44> col:6 invalid ec_GF2m_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x2ac4b55fe90 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x2ac4b560070 <line:433:1, col:50> col:6 invalid ec_GF2m_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x2ac4b55ffe0 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x2ac4b560250 <line:434:1, col:59> col:5 invalid ec_GF2m_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2ac4b560130 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x2ac4b5601b0 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x2ac4b560438 <line:435:1, col:70> col:5 invalid ec_GF2m_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x2ac4b560318 <col:42, <invalid sloc>> col:58 invalid 'const int *'
| `-ParmVarDecl 0x2ac4b560398 <col:60, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x2ac4b5607b8 <line:436:1, line:438:74> line:436:5 invalid ec_GF2m_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b560500 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b560580 <col:67, <invalid sloc>> col:77 invalid 'int *'
| |-ParmVarDecl 0x2ac4b560600 <line:437:49, col:63> col:63 invalid x 'const int *'
| |-ParmVarDecl 0x2ac4b560680 <line:438:49, col:63> col:63 invalid y 'const int *'
| `-ParmVarDecl 0x2ac4b560700 <col:66, <invalid sloc>> col:74 invalid 'int *'
|-FunctionDecl 0x2ac4b560b50 <line:439:1, line:441:68> line:439:5 invalid ec_GF2m_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b560898 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b560918 <line:440:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b560998 <col:67, col:75> col:75 invalid x 'int *'
| |-ParmVarDecl 0x2ac4b560a18 <line:441:49, col:57> col:57 invalid y 'int *'
| `-ParmVarDecl 0x2ac4b560a98 <col:60, <invalid sloc>> col:68 invalid 'int *'
|-FunctionDecl 0x2ac4b560f38 <line:442:1, line:444:55> line:442:5 invalid ec_GF2m_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x2ac4b560c80 <col:47, <invalid sloc>> col:63 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b560d00 <col:65, <invalid sloc>> col:75 invalid 'int *'
| |-ParmVarDecl 0x2ac4b560d80 <line:443:47, col:61> col:61 invalid x 'const int *'
| |-ParmVarDecl 0x2ac4b560e00 <col:64, col:68> col:68 y_bit 'int'
| `-ParmVarDecl 0x2ac4b560e80 <line:444:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x2ac4b561348 <line:445:1, line:447:73> line:445:8 invalid ec_GF2m_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x2ac4b561018 <col:33, <invalid sloc>> col:49 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b561098 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b561118 <line:446:33, col:57> col:57 invalid form 'int'
| |-ParmVarDecl 0x2ac4b561198 <line:447:33, col:48> col:48 buf 'unsigned char *'
| |-ParmVarDecl 0x2ac4b561210 <col:53, col:60> col:60 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b561290 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x2ac4b5616e0 <line:448:1, line:449:76> line:448:5 invalid ec_GF2m_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x2ac4b561430 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b5614b0 <col:48, <invalid sloc>> col:58 invalid 'int *'
| |-ParmVarDecl 0x2ac4b561530 <line:449:30, col:51> col:51 buf 'const unsigned char *'
| |-ParmVarDecl 0x2ac4b5615a8 <col:56, col:63> col:63 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2ac4b561628 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x2ac4b561a78 <line:450:1, line:451:51> line:450:5 invalid ec_GF2m_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b5617c0 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b561840 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b5618c0 <col:55, col:71> col:71 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b561940 <line:451:24, col:40> col:40 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b5619c0 <col:43, <invalid sloc>> col:51 invalid 'int *'
|-FunctionDecl 0x2ac4b55dd80 <line:452:1, line:453:32> line:452:5 invalid ec_GF2m_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b561b58 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b561bd8 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b55dc50 <col:55, col:71> col:71 invalid a 'const int *'
| `-ParmVarDecl 0x2ac4b55dcd0 <line:453:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x2ac4b55e000 <line:454:1, col:65> col:5 invalid ec_GF2m_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b55de58 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55ded8 <col:45, <invalid sloc>> col:55 invalid 'int *'
| `-ParmVarDecl 0x2ac4b55df58 <col:57, <invalid sloc>> col:65 invalid 'int *'
|-FunctionDecl 0x2ac4b55e1f0 <line:455:1, col:69> col:5 invalid ec_GF2m_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x2ac4b55e0d0 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| `-ParmVarDecl 0x2ac4b55e150 <col:53, <invalid sloc>> col:69 invalid 'const int *'
|-FunctionDecl 0x2ac4b55e460 <line:456:1, col:76> col:5 invalid ec_GF2m_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55e2b8 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55e338 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| `-ParmVarDecl 0x2ac4b55e3b8 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x2ac4b55e760 <line:457:1, line:458:32> line:457:5 invalid ec_GF2m_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b55e530 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55e5b0 <col:42, col:58> col:58 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b55e630 <col:61, col:77> col:77 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b55e6b0 <line:458:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x2ac4b55e9e0 <line:459:1, col:70> col:5 invalid ec_GF2m_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b55e838 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55e8b8 <col:50, <invalid sloc>> col:60 invalid 'int *'
| `-ParmVarDecl 0x2ac4b55e938 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x2ac4b561d40 <line:460:1, line:461:61> line:460:5 invalid ec_GF2m_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x2ac4b55eab0 <col:39, <invalid sloc>> col:55 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b55eb28 <col:57, col:64> col:64 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b55ebb8 <line:461:39, <invalid sloc>> col:49 invalid 'int **':'int **'
| `-ParmVarDecl 0x2ac4b561c90 <col:53, <invalid sloc>> col:61 invalid 'int *'
|-FunctionDecl 0x2ac4b5620d0 <line:462:1, line:463:55> line:462:5 invalid ec_GF2m_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b561e18 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b561e98 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b561f18 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b561f98 <line:463:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b562018 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x2ac4b5623e0 <line:464:1, line:465:38> line:464:5 invalid ec_GF2m_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b5621b0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b562230 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b5622b0 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x2ac4b562330 <line:465:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x2ac4b562770 <line:466:1, line:467:55> line:466:5 invalid ec_GF2m_simple_field_div 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b5624b8 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2ac4b562538 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b5625b8 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b562638 <line:467:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x2ac4b5626b8 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x2ac4b562ca0 <line:470:1, line:473:32> line:470:5 invalid ec_GF2m_simple_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2ac4b562850 <col:24, col:40> col:40 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b5628d0 <col:47, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b562950 <line:471:24, col:38> col:38 invalid scalar 'const int *'
| |-ParmVarDecl 0x2ac4b5629c8 <col:46, col:53> col:53 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b562a58 <line:472:24, <invalid sloc>> col:40 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2ac4b562ae8 <col:50, <invalid sloc>> col:64 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2ac4b562b68 <line:473:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x2ac4b562eb0 <line:474:1, col:57> col:5 invalid ec_GF2m_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2ac4b562d90 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x2ac4b562e10 <col:46, col:54> col:54 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b563010 <line:475:1, col:55> col:5 invalid ec_GF2m_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x2ac4b562f78 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x2ac4b563168 <line:479:1, col:47> col:5 invalid ec_GFp_nistp224_group_init 'int (int *)'
| `-ParmVarDecl 0x2ac4b5630d0 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x2ac4b5634e0 <line:480:1, line:482:45> line:480:5 invalid ec_GFp_nistp224_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b563228 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x2ac4b5632a8 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x2ac4b563328 <line:481:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b5633a8 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x2ac4b563428 <line:482:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x2ac4b563878 <line:483:1, line:486:61> line:483:5 invalid ec_GFp_nistp224_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b5635c0 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b563640 <line:484:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x2ac4b5636c0 <line:485:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x2ac4b563740 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x2ac4b5637c0 <line:486:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b563d78 <line:487:1, line:490:33> line:487:5 invalid ec_GFp_nistp224_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2ac4b563958 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b5639d8 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b563a58 <line:488:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x2ac4b563ad0 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b563b60 <line:489:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2ac4b563bf0 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2ac4b563cb0 <line:490:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x2ac4b564248 <line:491:1, line:494:68> line:491:5 invalid ec_GFp_nistp224_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2ac4b563e68 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b563ee8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b563f68 <line:492:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x2ac4b563fe0 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b564070 <line:493:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2ac4b564100 <line:494:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2ac4b564180 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b564458 <line:495:1, col:65> col:5 invalid ec_GFp_nistp224_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2ac4b564338 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x2ac4b5643b8 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b5645b8 <line:496:1, col:63> col:5 invalid ec_GFp_nistp224_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x2ac4b564520 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x2ac4b564710 <line:499:1, col:47> col:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| `-ParmVarDecl 0x2ac4b564678 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x2ac4b564a88 <line:500:1, line:502:45> line:500:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b5647d0 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x2ac4b564850 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x2ac4b5648d0 <line:501:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b564950 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x2ac4b5649d0 <line:502:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x2ac4b564e78 <line:503:1, line:506:61> line:503:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b564b68 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b564be8 <line:504:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x2ac4b564cc0 <line:505:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x2ac4b564d40 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x2ac4b564dc0 <line:506:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b565338 <line:507:1, line:510:33> line:507:5 invalid ec_GFp_nistp256_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2ac4b564f58 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b564fd8 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b565058 <line:508:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x2ac4b5650d0 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b565160 <line:509:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2ac4b5651f0 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2ac4b565270 <line:510:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x2ac4b565808 <line:511:1, line:514:68> line:511:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2ac4b565428 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b5654a8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b565528 <line:512:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x2ac4b5655a0 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b565630 <line:513:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2ac4b5656c0 <line:514:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2ac4b565740 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b565a18 <line:515:1, col:65> col:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2ac4b5658f8 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x2ac4b565978 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b565b78 <line:516:1, col:63> col:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x2ac4b565ae0 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x2ac4b565d00 <line:519:1, col:47> col:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| `-ParmVarDecl 0x2ac4b565c38 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x2ac4b566078 <line:520:1, line:522:45> line:520:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b565dc0 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x2ac4b565e40 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x2ac4b565ec0 <line:521:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b565f40 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x2ac4b565fc0 <line:522:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x2ac4b566410 <line:523:1, line:526:61> line:523:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b566158 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b5661d8 <line:524:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x2ac4b566258 <line:525:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x2ac4b5662d8 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x2ac4b566358 <line:526:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b5668d0 <line:527:1, line:530:33> line:527:5 invalid ec_GFp_nistp521_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2ac4b5664f0 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b566570 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b5665f0 <line:528:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x2ac4b566668 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b5666f8 <line:529:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2ac4b566788 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2ac4b566808 <line:530:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x2ac4b566dc0 <line:531:1, line:534:68> line:531:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2ac4b5669c0 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b566a40 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b566ac0 <line:532:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x2ac4b566b38 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b566bc8 <line:533:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2ac4b566c58 <line:534:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2ac4b566cf8 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b566fd0 <line:535:1, col:65> col:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2ac4b566eb0 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x2ac4b566f30 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x2ac4b567130 <line:536:1, col:63> col:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x2ac4b567098 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x2ac4b4c6f58 <line:539:1, line:563:75> line:539:6 used ec_GFp_nistp_points_make_affine_internal 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
| |-ParmVarDecl 0x2ac4b5671e8 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b567268 <col:59, col:65> col:65 point_array 'void *'
| |-ParmVarDecl 0x2ac4b5672e0 <line:540:47, col:54> col:54 felem_size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b567360 <line:541:47, col:53> col:53 tmp_felems 'void *'
| |-ParmVarDecl 0x2ac4b567520 <line:542:47, col:75> col:54 felem_one 'void (*)(void *)'
| |-ParmVarDecl 0x2ac4b567718 <line:543:47, line:544:72> line:543:53 felem_is_zero 'int (*)(const void *)'
| |-ParmVarDecl 0x2ac4b5679b8 <line:545:47, line:547:72> line:545:54 felem_assign 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x2ac4b567b90 <line:548:47, line:550:72> line:548:54 felem_square 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x2ac4b4c68c0 <line:551:47, line:555:70> line:551:54 felem_mul 'void (*)(void *, const void *, const void *)'
| |-ParmVarDecl 0x2ac4b4c6a98 <line:556:47, line:558:69> line:556:54 felem_inv 'void (*)(void *, const void *)'
| `-ParmVarDecl 0x2ac4b4c6c70 <line:559:47, line:563:74> line:559:54 felem_contract 'void (*)(void *, const void *)'
|-FunctionDecl 0x2ac4b4c72a8 <line:564:1, line:565:76> line:564:6 used ec_GFp_nistp_recode_scalar_bits 'void (unsigned char *, unsigned char *, unsigned char)'
| |-ParmVarDecl 0x2ac4b4c7080 <col:38, col:53> col:53 sign 'unsigned char *'
| |-ParmVarDecl 0x2ac4b4c7100 <line:565:38, col:53> col:53 digit 'unsigned char *'
| `-ParmVarDecl 0x2ac4b4c7180 <col:60, col:74> col:74 in 'unsigned char'
|-FunctionDecl 0x2ac4b4c7428 <line:567:1, col:39> col:5 invalid ec_precompute_mont_data 'int (int *)'
| `-ParmVarDecl 0x2ac4b4c7390 <col:29, <invalid sloc>> col:39 invalid 'int *'
|-FunctionDecl 0x2ac4b4c7580 <line:568:1, col:53> col:5 invalid ec_group_simple_order_bits 'int (const int *)'
| `-ParmVarDecl 0x2ac4b4c74e8 <col:32, col:48> col:48 invalid group 'const int *'
|-FunctionDecl 0x2ac4b57a118 <line:578:1, line:579:61> line:578:8 invalid ec_key_simple_priv2oct 'size_t (const int *, unsigned char *, size_t)'
| |-ParmVarDecl 0x2ac4b579f80 <col:31, col:45> col:45 invalid eckey 'const int *'
| |-ParmVarDecl 0x2ac4b57a000 <line:579:31, col:46> col:46 buf 'unsigned char *'
| `-ParmVarDecl 0x2ac4b57a078 <col:51, col:58> col:58 len 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b57a388 <line:580:1, col:79> col:5 invalid ec_key_simple_oct2priv 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x2ac4b57a1e8 <col:28, col:36> col:36 invalid eckey 'int *'
| |-ParmVarDecl 0x2ac4b57a268 <col:43, col:64> col:64 buf 'const unsigned char *'
| `-ParmVarDecl 0x2ac4b57a2e0 <col:69, col:76> col:76 len 'size_t':'unsigned long long'
|-FunctionDecl 0x2ac4b57a4f0 <line:581:1, col:45> col:5 invalid ec_key_simple_generate_key 'int (int *)'
| `-ParmVarDecl 0x2ac4b57a458 <col:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x2ac4b57a648 <line:582:1, col:52> col:5 invalid ec_key_simple_generate_public_key 'int (int *)'
| `-ParmVarDecl 0x2ac4b57a5b0 <col:39, col:47> col:47 invalid eckey 'int *'
|-FunctionDecl 0x2ac4b57a7a0 <line:583:1, col:48> col:5 invalid ec_key_simple_check_key 'int (const int *)'
| `-ParmVarDecl 0x2ac4b57a708 <col:29, col:43> col:43 invalid eckey 'const int *'
|-RecordDecl 0x2ac4b57a848 <line:587:1, line:612:1> line:587:8 invalid struct ec_key_method_st definition
| |-FieldDecl 0x2ac4b57a918 <line:588:5, col:17> col:17 name 'const char *'
| |-FieldDecl 0x2ac4b57a988 <line:589:5, col:13> col:13 invalid flags 'int'
| |-FieldDecl 0x2ac4b57aaa0 <line:590:5, col:28> col:11 init 'int (*)(int *)'
| |-FieldDecl 0x2ac4b57abb0 <line:591:5, col:31> col:12 finish 'void (*)(int *)'
| |-FieldDecl 0x2ac4b57ad50 <line:592:5, col:48> col:11 copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x2ac4b57aef0 <line:593:5, col:54> col:11 set_group 'int (*)(int *, const int *)'
| |-FieldDecl 0x2ac4b57b0c0 <line:594:5, col:59> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x2ac4b57b260 <line:595:5, col:59> col:11 set_public 'int (*)(int *, const int *)'
| |-FieldDecl 0x2ac4b57b378 <line:596:5, col:30> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x2ac4b57b628 <line:597:5, line:598:67> line:597:11 compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| |-FieldDecl 0x2ac4b57bc20 <line:599:5, line:601:47> line:599:11 sign 'int (*)(int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b57bff8 <line:602:5, line:603:34> line:602:11 sign_setup 'int (*)(int *, int *, int **, int **)'
| |-FieldDecl 0x2ac4b57c408 <line:604:5, <invalid sloc>> col:18 invalid sign_sig 'int *(*)(const unsigned char *, int, const int *, const int *, int *)'
| |-FieldDecl 0x2ac4b57c8b0 <line:608:5, line:609:74> line:608:11 verify 'int (*)(int, const unsigned char *, int, const unsigned char *, int, int *)'
| `-FieldDecl 0x2ac4b57cc40 <line:610:5, line:611:58> line:610:11 verify_sig 'int (*)(const unsigned char *, int, const int *, int *)'
|-FunctionDecl 0x2ac4b57cd48 <line:616:1, col:34> col:5 invalid ossl_ec_key_gen 'int (int *)'
| `-ParmVarDecl 0x2ac4b57ccb0 <col:21, col:29> col:29 invalid eckey 'int *'
|-FunctionDecl 0x2ac4b579020 <line:617:1, line:618:70> line:617:5 invalid ossl_ecdh_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x2ac4b57ce10 <col:27, col:43> col:43 pout 'unsigned char **'
| |-ParmVarDecl 0x2ac4b57ce88 <col:49, col:57> col:57 poutlen 'size_t *'
| |-ParmVarDecl 0x2ac4b57cf08 <line:618:27, col:43> col:43 invalid pub_key 'const int *'
| `-ParmVarDecl 0x2ac4b578f70 <col:52, col:66> col:66 invalid ecdh 'const int *'
|-FunctionDecl 0x2ac4b579328 <line:619:1, line:620:72> line:619:5 invalid ecdh_simple_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x2ac4b579100 <col:29, col:45> col:45 pout 'unsigned char **'
| |-ParmVarDecl 0x2ac4b579178 <col:51, col:59> col:59 poutlen 'size_t *'
| |-ParmVarDecl 0x2ac4b5791f8 <line:620:29, col:45> col:45 invalid pub_key 'const int *'
| `-ParmVarDecl 0x2ac4b579278 <col:54, col:68> col:68 invalid ecdh 'const int *'
|-RecordDecl 0x2ac4b5793e8 <line:622:1, line:625:1> line:622:8 invalid struct ECDSA_SIG_st definition
| |-FieldDecl 0x2ac4b5794b8 <line:623:5, col:13> col:13 invalid r 'int *'
| `-FieldDecl 0x2ac4b579528 <line:624:5, col:13> col:13 invalid s 'int *'
|-FunctionDecl 0x2ac4b5797d8 <line:627:1, line:628:38> line:627:5 invalid ossl_ecdsa_sign_setup 'int (int *, int *, int **, int **)'
| |-ParmVarDecl 0x2ac4b579598 <col:27, col:35> col:35 invalid eckey 'int *'
| |-ParmVarDecl 0x2ac4b579618 <col:42, col:50> col:50 invalid ctx_in 'int *'
| |-ParmVarDecl 0x2ac4b5796a0 <col:58, col:67> col:67 invalid kinvp 'int **'
| `-ParmVarDecl 0x2ac4b579728 <line:628:27, col:36> col:36 invalid rp 'int **'
|-FunctionDecl 0x2ac4b579d00 <line:629:1, line:631:71> line:629:5 invalid ossl_ecdsa_sign 'int (int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b5798b0 <col:21, col:25> col:25 type 'int'
| |-ParmVarDecl 0x2ac4b579930 <col:31, col:52> col:52 dgst 'const unsigned char *'
| |-ParmVarDecl 0x2ac4b5799b0 <col:58, col:62> col:62 dlen 'int'
| |-ParmVarDecl 0x2ac4b579a30 <line:630:21, col:36> col:36 sig 'unsigned char *'
| |-ParmVarDecl 0x2ac4b579ab0 <col:41, col:55> col:55 siglen 'unsigned int *'
| |-ParmVarDecl 0x2ac4b579b30 <line:631:21, col:35> col:35 invalid kinv 'const int *'
| |-ParmVarDecl 0x2ac4b579bb0 <col:41, col:55> col:55 invalid r 'const int *'
| `-ParmVarDecl 0x2ac4b579c30 <col:58, col:66> col:66 invalid eckey 'int *'
|-FunctionDecl 0x2ac4b5751f0 <line:632:1, line:634:45> line:632:12 invalid ossl_ecdsa_sign_sig 'int *(const unsigned char *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b579df8 <col:32, col:53> col:53 dgst 'const unsigned char *'
| |-ParmVarDecl 0x2ac4b579e78 <col:59, col:63> col:63 dgst_len 'int'
| |-ParmVarDecl 0x2ac4b579ef8 <line:633:32, col:46> col:46 invalid in_kinv 'const int *'
| |-ParmVarDecl 0x2ac4b5750b8 <col:55, col:69> col:69 invalid in_r 'const int *'
| `-ParmVarDecl 0x2ac4b575138 <line:634:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x2ac4b575610 <line:635:1, line:636:78> line:635:5 invalid ossl_ecdsa_verify 'int (int, const unsigned char *, int, const unsigned char *, int, int *)'
| |-ParmVarDecl 0x2ac4b5752d0 <col:23, col:27> col:27 type 'int'
| |-ParmVarDecl 0x2ac4b575350 <col:33, col:54> col:54 dgst 'const unsigned char *'
| |-ParmVarDecl 0x2ac4b5753d0 <col:60, col:64> col:64 dgst_len 'int'
| |-ParmVarDecl 0x2ac4b575450 <line:636:23, col:44> col:44 sigbuf 'const unsigned char *'
| |-ParmVarDecl 0x2ac4b5754d0 <col:52, col:56> col:56 sig_len 'int'
| `-ParmVarDecl 0x2ac4b575550 <col:65, col:73> col:73 invalid eckey 'int *'
|-FunctionDecl 0x2ac4b575928 <line:637:1, line:638:62> line:637:5 invalid ossl_ecdsa_verify_sig 'int (const unsigned char *, int, const int *, int *)'
| |-ParmVarDecl 0x2ac4b5756f8 <col:27, col:48> col:48 dgst 'const unsigned char *'
| |-ParmVarDecl 0x2ac4b575778 <col:54, col:58> col:58 dgst_len 'int'
| |-ParmVarDecl 0x2ac4b5757f8 <line:638:27, col:44> col:44 invalid sig 'const int *'
| `-ParmVarDecl 0x2ac4b575878 <col:49, col:57> col:57 invalid eckey 'int *'
|-FunctionDecl 0x2ac4b575e00 <line:640:1, line:641:47> line:640:5 invalid X25519 'int (int *, const int *, const int *)'
| |-ParmVarDecl 0x2ac4b575ac0 <col:12, <invalid sloc>> col:20 invalid out_shared_key 'int *':'int *'
| |-ParmVarDecl 0x2ac4b575c00 <col:40, <invalid sloc>> col:54 invalid private_key 'const int *':'const int *'
| `-ParmVarDecl 0x2ac4b575cd0 <line:641:12, <invalid sloc>> col:26 invalid peer_public_value 'const int *':'const int *'
|-FunctionDecl 0x2ac4b576108 <line:642:1, line:643:62> line:642:6 invalid X25519_public_from_private 'void (int *, const int *)'
| |-ParmVarDecl 0x2ac4b575f20 <col:33, <invalid sloc>> col:41 invalid out_public_value 'int *':'int *'
| `-ParmVarDecl 0x2ac4b575ff0 <line:643:33, <invalid sloc>> col:47 invalid private_key 'const int *':'const int *'
|-FunctionDecl 0x2ac4b576378 <line:645:1, col:79> col:5 invalid ec_point_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b5761d0 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b576250 <col:55, col:65> col:65 invalid p 'int *'
| `-ParmVarDecl 0x2ac4b5762d0 <col:68, col:76> col:76 invalid ctx 'int *'
|-TypedefDecl 0x2ac4b576448 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:51:1, col:17> col:17 referenced invalid u8 'int'
| `-BuiltinType 0x2ac49a13d10 'int'
|-TypedefDecl 0x2ac4b5764b8 <line:52:1, col:18> col:18 referenced invalid u64 'int'
| `-BuiltinType 0x2ac49a13d10 'int'
|-TypedefDecl 0x2ac4b576608 <line:60:1, col:30> col:12 referenced felem_bytearray 'u8 [66]'
| `-ConstantArrayType 0x2ac4b5765b0 'u8 [66]' 66 
|   `-TypedefType 0x2ac4b576510 'u8' sugar
|     |-Typedef 0x2ac4b576448 'u8'
|     `-BuiltinType 0x2ac49a13d10 'int'
|-VarDecl 0x2ac4b576758 <line:66:1, line:112:1> line:66:30 used nistp521_curve_params 'const felem_bytearray [5]' static cinit
| `-InitListExpr 0x2ac4b4e9dc8 <col:57, line:112:1> 'const felem_bytearray [5]'
|   |-InitListExpr 0x2ac4b4e9e40 <line:67:5, line:75:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x2ac4b5767c0 <line:67:6> 'int' 1
|   | |-IntegerLiteral 0x2ac4b5767e8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576810 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576838 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576860 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576888 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b5768b0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b5768d8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576900 <line:68:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576928 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576950 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576978 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b5769a0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b5769c8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b5769f0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576a18 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576a40 <line:69:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576a68 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576a90 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576ab8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576ae0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576b08 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576b30 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576b58 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576b80 <line:70:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576ba8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576bd0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576bf8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576c20 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576c48 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576c70 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576c98 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576cc0 <line:71:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576ce8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576d10 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576d38 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576d60 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576d88 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576db0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576dd8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576e00 <line:72:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576e28 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576e50 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576e78 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576ea0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576ec8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576ef0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576f18 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576f40 <line:73:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576f68 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576f90 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576fb8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b576fe0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b577008 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b577030 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b577058 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6640 <line:74:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6668 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6690 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e66b8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e66e0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6708 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6730 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6758 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6780 <line:75:6> 'int' 255
|   | `-IntegerLiteral 0x2ac4b4e67a8 <col:12> 'int' 255
|   |-InitListExpr 0x2ac4b4ea0a0 <line:76:5, line:84:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x2ac4b4e6a20 <line:76:6> 'int' 1
|   | |-IntegerLiteral 0x2ac4b4e6a48 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6a70 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6a98 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6ac0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6ae8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6b10 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6b38 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6b60 <line:77:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6b88 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6bb0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6bd8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6c00 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6c28 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6c50 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6c78 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6ca0 <line:78:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6cc8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6cf0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6d18 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6d40 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6d68 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6d90 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6db8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6de0 <line:79:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6e08 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6e30 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6e58 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6e80 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6ea8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6ed0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6ef8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6f20 <line:80:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6f48 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6f70 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6f98 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6fc0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e6fe8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7010 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7038 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7060 <line:81:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7088 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e70b0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e70d8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7100 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7128 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7150 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7178 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e71a0 <line:82:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e71c8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e71f0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7218 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7240 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7268 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7290 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e72b8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e72e0 <line:83:6> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7308 <col:12> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7330 <col:18> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7358 <col:24> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7380 <col:30> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e73a8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e73d0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e73f8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e7420 <line:84:6> 'int' 255
|   | `-IntegerLiteral 0x2ac4b4e7448 <col:12> 'int' 252
|   |-InitListExpr 0x2ac4b4ea300 <line:85:5, line:93:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x2ac4b4e76c0 <line:85:6> 'int' 0
|   | |-IntegerLiteral 0x2ac4b4e76e8 <col:12> 'int' 81
|   | |-IntegerLiteral 0x2ac4b4e7710 <col:18> 'int' 149
|   | |-IntegerLiteral 0x2ac4b4e7738 <col:24> 'int' 62
|   | |-IntegerLiteral 0x2ac4b4e7760 <col:30> 'int' 185
|   | |-IntegerLiteral 0x2ac4b4e7788 <col:36> 'int' 97
|   | |-IntegerLiteral 0x2ac4b4e77b0 <col:42> 'int' 142
|   | |-IntegerLiteral 0x2ac4b4e77d8 <col:48> 'int' 28
|   | |-IntegerLiteral 0x2ac4b4e7800 <line:86:6> 'int' 154
|   | |-IntegerLiteral 0x2ac4b4e7828 <col:12> 'int' 31
|   | |-IntegerLiteral 0x2ac4b4e7850 <col:18> 'int' 146
|   | |-IntegerLiteral 0x2ac4b4e7878 <col:24> 'int' 154
|   | |-IntegerLiteral 0x2ac4b4e78a0 <col:30> 'int' 33
|   | |-IntegerLiteral 0x2ac4b4e78c8 <col:36> 'int' 160
|   | |-IntegerLiteral 0x2ac4b4e78f0 <col:42> 'int' 182
|   | |-IntegerLiteral 0x2ac4b4e7918 <col:48> 'int' 133
|   | |-IntegerLiteral 0x2ac4b4e7940 <line:87:6> 'int' 64
|   | |-IntegerLiteral 0x2ac4b4e7968 <col:12> 'int' 238
|   | |-IntegerLiteral 0x2ac4b4e7990 <col:18> 'int' 162
|   | |-IntegerLiteral 0x2ac4b4e79b8 <col:24> 'int' 218
|   | |-IntegerLiteral 0x2ac4b4e79e0 <col:30> 'int' 114
|   | |-IntegerLiteral 0x2ac4b4e7a08 <col:36> 'int' 91
|   | |-IntegerLiteral 0x2ac4b4e7a30 <col:42> 'int' 153
|   | |-IntegerLiteral 0x2ac4b4e7a58 <col:48> 'int' 179
|   | |-IntegerLiteral 0x2ac4b4e7a80 <line:88:6> 'int' 21
|   | |-IntegerLiteral 0x2ac4b4e7aa8 <col:12> 'int' 243
|   | |-IntegerLiteral 0x2ac4b4e7ad0 <col:18> 'int' 184
|   | |-IntegerLiteral 0x2ac4b4e7af8 <col:24> 'int' 180
|   | |-IntegerLiteral 0x2ac4b4e7b20 <col:30> 'int' 137
|   | |-IntegerLiteral 0x2ac4b4e7b48 <col:36> 'int' 145
|   | |-IntegerLiteral 0x2ac4b4e7b70 <col:42> 'int' 142
|   | |-IntegerLiteral 0x2ac4b4e7b98 <col:48> 'int' 241
|   | |-IntegerLiteral 0x2ac4b4e7bc0 <line:89:6> 'int' 9
|   | |-IntegerLiteral 0x2ac4b4e7be8 <col:12> 'int' 225
|   | |-IntegerLiteral 0x2ac4b4e7c10 <col:18> 'int' 86
|   | |-IntegerLiteral 0x2ac4b4e7c38 <col:24> 'int' 25
|   | |-IntegerLiteral 0x2ac4b4e7c60 <col:30> 'int' 57
|   | |-IntegerLiteral 0x2ac4b4e7c88 <col:36> 'int' 81
|   | |-IntegerLiteral 0x2ac4b4e7cb0 <col:42> 'int' 236
|   | |-IntegerLiteral 0x2ac4b4e7cd8 <col:48> 'int' 126
|   | |-IntegerLiteral 0x2ac4b4e7d00 <line:90:6> 'int' 147
|   | |-IntegerLiteral 0x2ac4b4e7d28 <col:12> 'int' 123
|   | |-IntegerLiteral 0x2ac4b4e7d50 <col:18> 'int' 22
|   | |-IntegerLiteral 0x2ac4b4e7d78 <col:24> 'int' 82
|   | |-IntegerLiteral 0x2ac4b4e7da0 <col:30> 'int' 192
|   | |-IntegerLiteral 0x2ac4b4e7dc8 <col:36> 'int' 189
|   | |-IntegerLiteral 0x2ac4b4e7df0 <col:42> 'int' 59
|   | |-IntegerLiteral 0x2ac4b4e7e18 <col:48> 'int' 177
|   | |-IntegerLiteral 0x2ac4b4e7e40 <line:91:6> 'int' 191
|   | |-IntegerLiteral 0x2ac4b4e7e68 <col:12> 'int' 7
|   | |-IntegerLiteral 0x2ac4b4e7e90 <col:18> 'int' 53
|   | |-IntegerLiteral 0x2ac4b4e7eb8 <col:24> 'int' 115
|   | |-IntegerLiteral 0x2ac4b4e7ee0 <col:30> 'int' 223
|   | |-IntegerLiteral 0x2ac4b4e7f08 <col:36> 'int' 136
|   | |-IntegerLiteral 0x2ac4b4e7f30 <col:42> 'int' 61
|   | |-IntegerLiteral 0x2ac4b4e7f58 <col:48> 'int' 44
|   | |-IntegerLiteral 0x2ac4b4e7f80 <line:92:6> 'int' 52
|   | |-IntegerLiteral 0x2ac4b4e7fa8 <col:12> 'int' 241
|   | |-IntegerLiteral 0x2ac4b4e7fd0 <col:18> 'int' 239
|   | |-IntegerLiteral 0x2ac4b4e7ff8 <col:24> 'int' 69
|   | |-IntegerLiteral 0x2ac4b4e8020 <col:30> 'int' 31
|   | |-IntegerLiteral 0x2ac4b4e8048 <col:36> 'int' 212
|   | |-IntegerLiteral 0x2ac4b4e8070 <col:42> 'int' 107
|   | |-IntegerLiteral 0x2ac4b4e8098 <col:48> 'int' 80
|   | |-IntegerLiteral 0x2ac4b4e80c0 <line:93:6> 'int' 63
|   | `-IntegerLiteral 0x2ac4b4e80e8 <col:12> 'int' 0
|   |-InitListExpr 0x2ac4b4ea560 <line:94:5, line:102:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x2ac4b4e8360 <line:94:6> 'int' 0
|   | |-IntegerLiteral 0x2ac4b4e8388 <col:12> 'int' 198
|   | |-IntegerLiteral 0x2ac4b4e83b0 <col:18> 'int' 133
|   | |-IntegerLiteral 0x2ac4b4e83d8 <col:24> 'int' 142
|   | |-IntegerLiteral 0x2ac4b4e8400 <col:30> 'int' 6
|   | |-IntegerLiteral 0x2ac4b4e8428 <col:36> 'int' 183
|   | |-IntegerLiteral 0x2ac4b4e8450 <col:42> 'int' 4
|   | |-IntegerLiteral 0x2ac4b4e8478 <col:48> 'int' 4
|   | |-IntegerLiteral 0x2ac4b4e84a0 <line:95:6> 'int' 233
|   | |-IntegerLiteral 0x2ac4b4e84c8 <col:12> 'int' 205
|   | |-IntegerLiteral 0x2ac4b4e84f0 <col:18> 'int' 158
|   | |-IntegerLiteral 0x2ac4b4e8518 <col:24> 'int' 62
|   | |-IntegerLiteral 0x2ac4b4e8540 <col:30> 'int' 203
|   | |-IntegerLiteral 0x2ac4b4e8568 <col:36> 'int' 102
|   | |-IntegerLiteral 0x2ac4b4e8590 <col:42> 'int' 35
|   | |-IntegerLiteral 0x2ac4b4e85b8 <col:48> 'int' 149
|   | |-IntegerLiteral 0x2ac4b4e85e0 <line:96:6> 'int' 180
|   | |-IntegerLiteral 0x2ac4b4e8608 <col:12> 'int' 66
|   | |-IntegerLiteral 0x2ac4b4e8650 <col:18> 'int' 156
|   | |-IntegerLiteral 0x2ac4b4e8678 <col:24> 'int' 100
|   | |-IntegerLiteral 0x2ac4b4e86a0 <col:30> 'int' 129
|   | |-IntegerLiteral 0x2ac4b4e86c8 <col:36> 'int' 57
|   | |-IntegerLiteral 0x2ac4b4e86f0 <col:42> 'int' 5
|   | |-IntegerLiteral 0x2ac4b4e8718 <col:48> 'int' 63
|   | |-IntegerLiteral 0x2ac4b4e8740 <line:97:6> 'int' 181
|   | |-IntegerLiteral 0x2ac4b4e8768 <col:12> 'int' 33
|   | |-IntegerLiteral 0x2ac4b4e8790 <col:18> 'int' 248
|   | |-IntegerLiteral 0x2ac4b4e87b8 <col:24> 'int' 40
|   | |-IntegerLiteral 0x2ac4b4e87e0 <col:30> 'int' 175
|   | |-IntegerLiteral 0x2ac4b4e8808 <col:36> 'int' 96
|   | |-IntegerLiteral 0x2ac4b4e8830 <col:42> 'int' 107
|   | |-IntegerLiteral 0x2ac4b4e8858 <col:48> 'int' 77
|   | |-IntegerLiteral 0x2ac4b4e8880 <line:98:6> 'int' 61
|   | |-IntegerLiteral 0x2ac4b4e88a8 <col:12> 'int' 186
|   | |-IntegerLiteral 0x2ac4b4e88d0 <col:18> 'int' 161
|   | |-IntegerLiteral 0x2ac4b4e88f8 <col:24> 'int' 75
|   | |-IntegerLiteral 0x2ac4b4e8920 <col:30> 'int' 94
|   | |-IntegerLiteral 0x2ac4b4e8948 <col:36> 'int' 119
|   | |-IntegerLiteral 0x2ac4b4e8970 <col:42> 'int' 239
|   | |-IntegerLiteral 0x2ac4b4e8998 <col:48> 'int' 231
|   | |-IntegerLiteral 0x2ac4b4e89c0 <line:99:6> 'int' 89
|   | |-IntegerLiteral 0x2ac4b4e89e8 <col:12> 'int' 40
|   | |-IntegerLiteral 0x2ac4b4e8a10 <col:18> 'int' 254
|   | |-IntegerLiteral 0x2ac4b4e8a38 <col:24> 'int' 29
|   | |-IntegerLiteral 0x2ac4b4e8a60 <col:30> 'int' 193
|   | |-IntegerLiteral 0x2ac4b4e8a88 <col:36> 'int' 39
|   | |-IntegerLiteral 0x2ac4b4e8ab0 <col:42> 'int' 162
|   | |-IntegerLiteral 0x2ac4b4e8ad8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x2ac4b4e8b00 <line:100:6> 'int' 168
|   | |-IntegerLiteral 0x2ac4b4e8b28 <col:12> 'int' 222
|   | |-IntegerLiteral 0x2ac4b4e8b50 <col:18> 'int' 51
|   | |-IntegerLiteral 0x2ac4b4e8b78 <col:24> 'int' 72
|   | |-IntegerLiteral 0x2ac4b4e8ba0 <col:30> 'int' 179
|   | |-IntegerLiteral 0x2ac4b4e8bc8 <col:36> 'int' 193
|   | |-IntegerLiteral 0x2ac4b4e8bf0 <col:42> 'int' 133
|   | |-IntegerLiteral 0x2ac4b4e8c18 <col:48> 'int' 106
|   | |-IntegerLiteral 0x2ac4b4e8c40 <line:101:6> 'int' 66
|   | |-IntegerLiteral 0x2ac4b4e8c68 <col:12> 'int' 155
|   | |-IntegerLiteral 0x2ac4b4e8c90 <col:18> 'int' 249
|   | |-IntegerLiteral 0x2ac4b4e8cb8 <col:24> 'int' 126
|   | |-IntegerLiteral 0x2ac4b4e8ce0 <col:30> 'int' 126
|   | |-IntegerLiteral 0x2ac4b4e8d08 <col:36> 'int' 49
|   | |-IntegerLiteral 0x2ac4b4e8d30 <col:42> 'int' 194
|   | |-IntegerLiteral 0x2ac4b4e8d58 <col:48> 'int' 229
|   | |-IntegerLiteral 0x2ac4b4e8d80 <line:102:6> 'int' 189
|   | `-IntegerLiteral 0x2ac4b4e8da8 <col:12> 'int' 102
|   `-InitListExpr 0x2ac4b4ea880 <line:103:5, line:111:16> 'const felem_bytearray':'u8 const[66]'
|     |-IntegerLiteral 0x2ac4b4e9020 <line:103:6> 'int' 1
|     |-IntegerLiteral 0x2ac4b4e9048 <col:12> 'int' 24
|     |-IntegerLiteral 0x2ac4b4e9070 <col:18> 'int' 57
|     |-IntegerLiteral 0x2ac4b4e9098 <col:24> 'int' 41
|     |-IntegerLiteral 0x2ac4b4e90c0 <col:30> 'int' 106
|     |-IntegerLiteral 0x2ac4b4e90e8 <col:36> 'int' 120
|     |-IntegerLiteral 0x2ac4b4e9110 <col:42> 'int' 154
|     |-IntegerLiteral 0x2ac4b4e9138 <col:48> 'int' 59
|     |-IntegerLiteral 0x2ac4b4e9160 <line:104:6> 'int' 192
|     |-IntegerLiteral 0x2ac4b4e9188 <col:12> 'int' 4
|     |-IntegerLiteral 0x2ac4b4e91b0 <col:18> 'int' 92
|     |-IntegerLiteral 0x2ac4b4e91d8 <col:24> 'int' 138
|     |-IntegerLiteral 0x2ac4b4e9200 <col:30> 'int' 95
|     |-IntegerLiteral 0x2ac4b4e9228 <col:36> 'int' 180
|     |-IntegerLiteral 0x2ac4b4e9250 <col:42> 'int' 44
|     |-IntegerLiteral 0x2ac4b4e9278 <col:48> 'int' 125
|     |-IntegerLiteral 0x2ac4b4e92a0 <line:105:6> 'int' 27
|     |-IntegerLiteral 0x2ac4b4e92c8 <col:12> 'int' 217
|     |-IntegerLiteral 0x2ac4b4e92f0 <col:18> 'int' 152
|     |-IntegerLiteral 0x2ac4b4e9318 <col:24> 'int' 245
|     |-IntegerLiteral 0x2ac4b4e9340 <col:30> 'int' 68
|     |-IntegerLiteral 0x2ac4b4e9368 <col:36> 'int' 73
|     |-IntegerLiteral 0x2ac4b4e9390 <col:42> 'int' 87
|     |-IntegerLiteral 0x2ac4b4e93b8 <col:48> 'int' 155
|     |-IntegerLiteral 0x2ac4b4e93e0 <line:106:6> 'int' 68
|     |-IntegerLiteral 0x2ac4b4e9408 <col:12> 'int' 104
|     |-IntegerLiteral 0x2ac4b4e9430 <col:18> 'int' 23
|     |-IntegerLiteral 0x2ac4b4e9458 <col:24> 'int' 175
|     |-IntegerLiteral 0x2ac4b4e9480 <col:30> 'int' 189
|     |-IntegerLiteral 0x2ac4b4e94a8 <col:36> 'int' 23
|     |-IntegerLiteral 0x2ac4b4e94d0 <col:42> 'int' 39
|     |-IntegerLiteral 0x2ac4b4e94f8 <col:48> 'int' 62
|     |-IntegerLiteral 0x2ac4b4e9520 <line:107:6> 'int' 102
|     |-IntegerLiteral 0x2ac4b4e9548 <col:12> 'int' 44
|     |-IntegerLiteral 0x2ac4b4e9570 <col:18> 'int' 151
|     |-IntegerLiteral 0x2ac4b4e9598 <col:24> 'int' 238
|     |-IntegerLiteral 0x2ac4b4e95c0 <col:30> 'int' 114
|     |-IntegerLiteral 0x2ac4b4e95e8 <col:36> 'int' 153
|     |-IntegerLiteral 0x2ac4b4e9610 <col:42> 'int' 94
|     |-IntegerLiteral 0x2ac4b4e9638 <col:48> 'int' 244
|     |-IntegerLiteral 0x2ac4b4e9660 <line:108:6> 'int' 38
|     |-IntegerLiteral 0x2ac4b4e9688 <col:12> 'int' 64
|     |-IntegerLiteral 0x2ac4b4e96b0 <col:18> 'int' 197
|     |-IntegerLiteral 0x2ac4b4e96d8 <col:24> 'int' 80
|     |-IntegerLiteral 0x2ac4b4e9700 <col:30> 'int' 185
|     |-IntegerLiteral 0x2ac4b4e9728 <col:36> 'int' 1
|     |-IntegerLiteral 0x2ac4b4e9750 <col:42> 'int' 63
|     |-IntegerLiteral 0x2ac4b4e9778 <col:48> 'int' 173
|     |-IntegerLiteral 0x2ac4b4e97a0 <line:109:6> 'int' 7
|     |-IntegerLiteral 0x2ac4b4e97c8 <col:12> 'int' 97
|     |-IntegerLiteral 0x2ac4b4e97f0 <col:18> 'int' 53
|     |-IntegerLiteral 0x2ac4b4e9818 <col:24> 'int' 60
|     |-IntegerLiteral 0x2ac4b4e9840 <col:30> 'int' 112
|     |-IntegerLiteral 0x2ac4b4e9868 <col:36> 'int' 134
|     |-IntegerLiteral 0x2ac4b4e9890 <col:42> 'int' 162
|     |-IntegerLiteral 0x2ac4b4e98b8 <col:48> 'int' 114
|     |-IntegerLiteral 0x2ac4b4e98e0 <line:110:6> 'int' 194
|     |-IntegerLiteral 0x2ac4b4e9908 <col:12> 'int' 64
|     |-IntegerLiteral 0x2ac4b4e9930 <col:18> 'int' 136
|     |-IntegerLiteral 0x2ac4b4e9958 <col:24> 'int' 190
|     |-IntegerLiteral 0x2ac4b4e9980 <col:30> 'int' 148
|     |-IntegerLiteral 0x2ac4b4e99a8 <col:36> 'int' 118
|     |-IntegerLiteral 0x2ac4b4e99d0 <col:42> 'int' 159
|     |-IntegerLiteral 0x2ac4b4e99f8 <col:48> 'int' 209
|     |-IntegerLiteral 0x2ac4b4e9a20 <line:111:6> 'int' 102
|     `-IntegerLiteral 0x2ac4b4e9a48 <col:12> 'int' 80
|-TypedefDecl 0x2ac4b4eaae8 <line:130:1, col:18> col:18 referenced invalid limb 'int'
| `-BuiltinType 0x2ac49a13d10 'int'
|-TypedefDecl 0x2ac4b4eac38 <line:131:1, col:26> col:14 referenced felem 'limb [9]'
| `-ConstantArrayType 0x2ac4b4eabe0 'limb [9]' 9 
|   `-TypedefType 0x2ac4b4eab40 'limb' sugar
|     |-Typedef 0x2ac4b4eaae8 'limb'
|     `-BuiltinType 0x2ac49a13d10 'int'
|-TypedefDecl 0x2ac4b4eacf8 <line:132:1, <invalid sloc>> col:19 referenced invalid largefelem 'int [9]'
| `-ConstantArrayType 0x2ac4b4eaba0 'int [9]' 9 
|   `-BuiltinType 0x2ac49a13d10 'int'
|-VarDecl 0x2ac4b4ead60 <line:134:1, col:34> col:19 used bottom57bits 'const limb':'const int' static cinit
| `-ImplicitCastExpr 0x2ac4b4eae08 <col:34> 'limb':'int' <IntegralCast>
|   `-IntegerLiteral 0x2ac4b4eadc8 <col:34> 'long long' 144115188075855871
|-VarDecl 0x2ac4b4eae30 <line:135:1, col:34> col:19 used bottom58bits 'const limb':'const int' static cinit
| `-ImplicitCastExpr 0x2ac4b4eaed8 <col:34> 'limb':'int' <IntegralCast>
|   `-IntegerLiteral 0x2ac4b4eae98 <col:34> 'long long' 288230376151711743
|-FunctionDecl 0x2ac4b4eb1b8 <line:141:1, line:152:1> line:141:13 used bin66_to_felem 'void (limb *, const u8 *)' static
| |-ParmVarDecl 0x2ac4b4eaf80 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b4eb0b0 <col:39, col:53> col:48 used in 'const u8 *':'const u8 *'
| `-CompoundStmt 0x2ac4b4ec8d0 <line:142:1, line:152:1>
|   |-BinaryOperator 0x2ac4b4eb498 <line:143:5, col:38> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4eb2e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4eb2c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4eb280 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4eaf80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4eb2a0 <col:9> 'int' 0
|   | `-BinaryOperator 0x2ac4b4eb478 <col:14, col:38> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b4eb448 <col:14, col:34> 'limb':'int' <LValueToRValue>
|   |   | `-ParenExpr 0x2ac4b4eb408 <col:14, col:34> 'limb':'int' lvalue
|   |   |   `-UnaryOperator 0x2ac4b4eb3f0 <col:15, col:33> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |     `-ParenExpr 0x2ac4b4eb3d0 <col:16, col:33> 'limb *'
|   |   |       `-CStyleCastExpr 0x2ac4b4eb3a8 <col:17, col:32> 'limb *' <NoOp>
|   |   |         `-UnaryOperator 0x2ac4b4eb380 <col:26, col:32> 'const u8 *' prefix '&' cannot overflow
|   |   |           `-ArraySubscriptExpr 0x2ac4b4eb360 <col:28, col:32> 'const u8':'const int' lvalue
|   |   |             |-ImplicitCastExpr 0x2ac4b4eb348 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |             | `-DeclRefExpr 0x2ac4b4eb300 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x2ac4b4eb0b0 'in' 'const u8 *':'const u8 *'
|   |   |             `-IntegerLiteral 0x2ac4b4eb320 <col:31> 'int' 0
|   |   `-ImplicitCastExpr 0x2ac4b4eb460 <col:38> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4eb428 <col:38> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b4eb760 <line:144:5, col:43> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4eb560 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4eb548 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4eb500 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4eaf80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4eb520 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b4eb740 <col:14, col:43> 'int' '&'
|   |   |-ParenExpr 0x2ac4b4eb6e8 <col:14, col:39> 'limb':'int'
|   |   | `-BinaryOperator 0x2ac4b4eb6c8 <col:15, col:38> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x2ac4b4eb6b0 <col:15, col:33> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x2ac4b4eb670 <col:15, col:33> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x2ac4b4eb650 <col:16, col:33> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x2ac4b4eb628 <col:17, col:32> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x2ac4b4eb600 <col:26, col:32> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x2ac4b4eb5e0 <col:28, col:32> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x2ac4b4eb5c8 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x2ac4b4eb580 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x2ac4b4eb0b0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x2ac4b4eb5a0 <col:31> 'int' 7
|   |   |   `-IntegerLiteral 0x2ac4b4eb688 <col:38> 'int' 2
|   |   `-ImplicitCastExpr 0x2ac4b4eb728 <col:43> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4eb708 <col:43> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b4eb9e0 <line:145:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4eb7e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4eb7c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4eb780 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4eaf80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4eb7a0 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b4eb9c0 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x2ac4b4eb968 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x2ac4b4eb948 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x2ac4b4eb930 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x2ac4b4eb8f0 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x2ac4b4eb8d0 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x2ac4b4eb8a8 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x2ac4b4eb880 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x2ac4b4eb860 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x2ac4b4eb848 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x2ac4b4eb800 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x2ac4b4eb0b0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x2ac4b4eb820 <col:31> 'int' 14
|   |   |   `-IntegerLiteral 0x2ac4b4eb908 <col:39> 'int' 4
|   |   `-ImplicitCastExpr 0x2ac4b4eb9a8 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4eb988 <col:44> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b4ebc60 <line:146:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4eba60 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4eba48 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4eba00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4eaf80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4eba20 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b4ebc40 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x2ac4b4ebbe8 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x2ac4b4ebbc8 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x2ac4b4ebbb0 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x2ac4b4ebb70 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x2ac4b4ebb50 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x2ac4b4ebb28 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x2ac4b4ebb00 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x2ac4b4ebae0 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x2ac4b4ebac8 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x2ac4b4eba80 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x2ac4b4eb0b0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x2ac4b4ebaa0 <col:31> 'int' 21
|   |   |   `-IntegerLiteral 0x2ac4b4ebb88 <col:39> 'int' 6
|   |   `-ImplicitCastExpr 0x2ac4b4ebc28 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4ebc08 <col:44> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b4ebe98 <line:147:5, col:39> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4ebce0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4ebcc8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4ebc80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4eaf80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4ebca0 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b4ebe78 <col:14, col:39> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b4ebe48 <col:14, col:35> 'limb':'int' <LValueToRValue>
|   |   | `-ParenExpr 0x2ac4b4ebe08 <col:14, col:35> 'limb':'int' lvalue
|   |   |   `-UnaryOperator 0x2ac4b4ebdf0 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |     `-ParenExpr 0x2ac4b4ebdd0 <col:16, col:34> 'limb *'
|   |   |       `-CStyleCastExpr 0x2ac4b4ebda8 <col:17, col:33> 'limb *' <NoOp>
|   |   |         `-UnaryOperator 0x2ac4b4ebd80 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |           `-ArraySubscriptExpr 0x2ac4b4ebd60 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |             |-ImplicitCastExpr 0x2ac4b4ebd48 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |             | `-DeclRefExpr 0x2ac4b4ebd00 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x2ac4b4eb0b0 'in' 'const u8 *':'const u8 *'
|   |   |             `-IntegerLiteral 0x2ac4b4ebd20 <col:31> 'int' 29
|   |   `-ImplicitCastExpr 0x2ac4b4ebe60 <col:39> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4ebe28 <col:39> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b4ec118 <line:148:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4ebf18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4ebf00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4ebeb8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4eaf80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4ebed8 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b4ec0f8 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x2ac4b4ec0a0 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x2ac4b4ec080 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x2ac4b4ec068 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x2ac4b4ec028 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x2ac4b4ec008 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x2ac4b4ebfe0 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x2ac4b4ebfb8 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x2ac4b4ebf98 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x2ac4b4ebf80 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x2ac4b4ebf38 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x2ac4b4eb0b0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x2ac4b4ebf58 <col:31> 'int' 36
|   |   |   `-IntegerLiteral 0x2ac4b4ec040 <col:39> 'int' 2
|   |   `-ImplicitCastExpr 0x2ac4b4ec0e0 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4ec0c0 <col:44> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b4ec398 <line:149:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4ec198 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4ec180 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4ec138 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4eaf80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4ec158 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b4ec378 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x2ac4b4ec320 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x2ac4b4ec300 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x2ac4b4ec2e8 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x2ac4b4ec2a8 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x2ac4b4ec288 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x2ac4b4ec260 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x2ac4b4ec238 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x2ac4b4ec218 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x2ac4b4ec200 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x2ac4b4ec1b8 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x2ac4b4eb0b0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x2ac4b4ec1d8 <col:31> 'int' 43
|   |   |   `-IntegerLiteral 0x2ac4b4ec2c0 <col:39> 'int' 4
|   |   `-ImplicitCastExpr 0x2ac4b4ec360 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4ec340 <col:44> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b4ec618 <line:150:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4ec418 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4ec400 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4ec3b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4eaf80 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4ec3d8 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b4ec5f8 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x2ac4b4ec5a0 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x2ac4b4ec580 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x2ac4b4ec568 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x2ac4b4ec528 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x2ac4b4ec508 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x2ac4b4ec4e0 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x2ac4b4ec4b8 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x2ac4b4ec498 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x2ac4b4ec480 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x2ac4b4ec438 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x2ac4b4eb0b0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x2ac4b4ec458 <col:31> 'int' 50
|   |   |   `-IntegerLiteral 0x2ac4b4ec540 <col:39> 'int' 6
|   |   `-ImplicitCastExpr 0x2ac4b4ec5e0 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4ec5c0 <col:44> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   `-BinaryOperator 0x2ac4b4ec868 <line:151:5, col:39> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2ac4b4ec6b0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b4ec698 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4ec638 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4eaf80 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2ac4b4ec670 <col:9> 'int' 8
|     `-BinaryOperator 0x2ac4b4ec848 <col:14, col:39> 'int' '&'
|       |-ImplicitCastExpr 0x2ac4b4ec818 <col:14, col:35> 'limb':'int' <LValueToRValue>
|       | `-ParenExpr 0x2ac4b4ec7d8 <col:14, col:35> 'limb':'int' lvalue
|       |   `-UnaryOperator 0x2ac4b4ec7c0 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|       |     `-ParenExpr 0x2ac4b4ec7a0 <col:16, col:34> 'limb *'
|       |       `-CStyleCastExpr 0x2ac4b4ec778 <col:17, col:33> 'limb *' <NoOp>
|       |         `-UnaryOperator 0x2ac4b4ec750 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|       |           `-ArraySubscriptExpr 0x2ac4b4ec730 <col:28, col:33> 'const u8':'const int' lvalue
|       |             |-ImplicitCastExpr 0x2ac4b4ec718 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x2ac4b4ec6d0 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x2ac4b4eb0b0 'in' 'const u8 *':'const u8 *'
|       |             `-IntegerLiteral 0x2ac4b4ec6f0 <col:31> 'int' 58
|       `-ImplicitCastExpr 0x2ac4b4ec830 <col:39> 'limb':'int' <LValueToRValue>
|         `-DeclRefExpr 0x2ac4b4ec7f8 <col:39> 'const limb':'const int' lvalue Var 0x2ac4b4ead60 'bottom57bits' 'const limb':'const int'
|-FunctionDecl 0x2ac4b4ecc18 <line:158:1, line:170:1> line:158:13 used felem_to_bin66 'void (u8 *, const limb *)' static
| |-ParmVarDecl 0x2ac4b4ec9f0 <col:28, col:37> col:31 used out 'u8 *':'u8 *'
| |-ParmVarDecl 0x2ac4b4ecb10 <col:40, col:52> col:52 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b4ee140 <line:159:1, line:170:1>
|   |-CallExpr 0x2ac4b4ecdd0 <line:160:5, col:22> 'void *'
|   | |-ImplicitCastExpr 0x2ac4b4ecdb8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b4ecce0 <col:5> 'void *(void *, int, unsigned long long)' Function 0x2ac4b488a88 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x2ac4b4ece20 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x2ac4b4ece08 <col:12> 'u8 *':'u8 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2ac4b4ecd00 <col:12> 'u8 *':'u8 *' lvalue ParmVar 0x2ac4b4ec9f0 'out' 'u8 *':'u8 *'
|   | |-IntegerLiteral 0x2ac4b4ecd20 <col:17> 'int' 0
|   | `-ImplicitCastExpr 0x2ac4b4ece38 <col:20> 'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2ac4b4ecd48 <col:20> 'int' 66
|   |-BinaryOperator 0x2ac4b4ed010 <line:161:5, col:34> 'limb':'int' '='
|   | |-ParenExpr 0x2ac4b4ecf58 <col:5, col:26> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x2ac4b4ecf40 <col:6, col:25> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x2ac4b4ecf20 <col:7, col:25> 'limb *'
|   | |     `-CStyleCastExpr 0x2ac4b4ecef8 <col:8, col:24> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x2ac4b4eced0 <col:17, col:24> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x2ac4b4eceb0 <col:19, col:24> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x2ac4b4ece98 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x2ac4b4ece50 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x2ac4b4ec9f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x2ac4b4ece70 <col:23> 'int' 0
|   | `-ImplicitCastExpr 0x2ac4b4ecff8 <col:30, col:34> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4ecfd8 <col:30, col:34> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4ecfc0 <col:30> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4ecf78 <col:30> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4ecb10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4ecf98 <col:33> 'int' 0
|   |-CompoundAssignOperator 0x2ac4b4ed238 <line:162:5, col:40> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x2ac4b4ed138 <col:5, col:26> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x2ac4b4ed120 <col:6, col:25> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x2ac4b4ed100 <col:7, col:25> 'limb *'
|   | |     `-CStyleCastExpr 0x2ac4b4ed0d8 <col:8, col:24> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x2ac4b4ed0b0 <col:17, col:24> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x2ac4b4ed090 <col:19, col:24> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x2ac4b4ed078 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x2ac4b4ed030 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x2ac4b4ec9f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x2ac4b4ed050 <col:23> 'int' 7
|   | `-BinaryOperator 0x2ac4b4ed218 <col:31, col:40> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b4ed200 <col:31, col:35> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4ed1b8 <col:31, col:35> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4ed1a0 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4ed158 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4ecb10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4ed178 <col:34> 'int' 1
|   |   `-IntegerLiteral 0x2ac4b4ed1d8 <col:40> 'int' 2
|   |-CompoundAssignOperator 0x2ac4b4ed470 <line:163:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x2ac4b4ed370 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x2ac4b4ed358 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x2ac4b4ed338 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x2ac4b4ed310 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x2ac4b4ed2e8 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x2ac4b4ed2c8 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x2ac4b4ed2b0 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x2ac4b4ed268 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x2ac4b4ec9f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x2ac4b4ed288 <col:23> 'int' 14
|   | `-BinaryOperator 0x2ac4b4ed450 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b4ed438 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4ed3f0 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4ed3d8 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4ed390 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4ecb10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4ed3b0 <col:35> 'int' 2
|   |   `-IntegerLiteral 0x2ac4b4ed410 <col:41> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b4ed6a8 <line:164:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x2ac4b4ed5a8 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x2ac4b4ed590 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x2ac4b4ed570 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x2ac4b4ed548 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x2ac4b4ed520 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x2ac4b4ed500 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x2ac4b4ed4e8 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x2ac4b4ed4a0 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x2ac4b4ec9f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x2ac4b4ed4c0 <col:23> 'int' 21
|   | `-BinaryOperator 0x2ac4b4ed688 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b4ed670 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4ed628 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4ed610 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4ed5c8 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4ecb10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4ed5e8 <col:35> 'int' 3
|   |   `-IntegerLiteral 0x2ac4b4ed648 <col:41> 'int' 6
|   |-BinaryOperator 0x2ac4b4ed898 <line:165:5, col:35> 'limb':'int' '='
|   | |-ParenExpr 0x2ac4b4ed7e0 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x2ac4b4ed7c8 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x2ac4b4ed7a8 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x2ac4b4ed780 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x2ac4b4ed758 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x2ac4b4ed738 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x2ac4b4ed720 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x2ac4b4ed6d8 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x2ac4b4ec9f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x2ac4b4ed6f8 <col:23> 'int' 29
|   | `-ImplicitCastExpr 0x2ac4b4ed880 <col:31, col:35> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4ed860 <col:31, col:35> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4ed848 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4ed800 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4ecb10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4ed820 <col:34> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b4edac0 <line:166:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x2ac4b4ed9c0 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x2ac4b4ed9a8 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x2ac4b4ed988 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x2ac4b4ed960 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x2ac4b4ed938 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x2ac4b4ed918 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x2ac4b4ed900 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x2ac4b4ed8b8 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x2ac4b4ec9f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x2ac4b4ed8d8 <col:23> 'int' 36
|   | `-BinaryOperator 0x2ac4b4edaa0 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b4eda88 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4eda40 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4eda28 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4ed9e0 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4ecb10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4eda00 <col:35> 'int' 5
|   |   `-IntegerLiteral 0x2ac4b4eda60 <col:41> 'int' 2
|   |-CompoundAssignOperator 0x2ac4b4edcf8 <line:167:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x2ac4b4edbf8 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x2ac4b4edbe0 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x2ac4b4edbc0 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x2ac4b4edb98 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x2ac4b4edb70 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x2ac4b4edb50 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x2ac4b4edb38 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x2ac4b4edaf0 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x2ac4b4ec9f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x2ac4b4edb10 <col:23> 'int' 43
|   | `-BinaryOperator 0x2ac4b4edcd8 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b4edcc0 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4edc78 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4edc60 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4edc18 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4ecb10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4edc38 <col:35> 'int' 6
|   |   `-IntegerLiteral 0x2ac4b4edc98 <col:41> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b4edf30 <line:168:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x2ac4b4ede30 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x2ac4b4ede18 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x2ac4b4eddf8 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x2ac4b4eddd0 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x2ac4b4edda8 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x2ac4b4edd88 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x2ac4b4edd70 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x2ac4b4edd28 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x2ac4b4ec9f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x2ac4b4edd48 <col:23> 'int' 50
|   | `-BinaryOperator 0x2ac4b4edf10 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b4edef8 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4edeb0 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4ede98 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4ede50 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4ecb10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4ede70 <col:35> 'int' 7
|   |   `-IntegerLiteral 0x2ac4b4eded0 <col:41> 'int' 6
|   `-BinaryOperator 0x2ac4b4ee120 <line:169:5, col:35> 'limb':'int' '='
|     |-ParenExpr 0x2ac4b4ee068 <col:5, col:27> 'limb':'int' lvalue
|     | `-UnaryOperator 0x2ac4b4ee050 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|     |   `-ParenExpr 0x2ac4b4ee030 <col:7, col:26> 'limb *'
|     |     `-CStyleCastExpr 0x2ac4b4ee008 <col:8, col:25> 'limb *' <NoOp>
|     |       `-UnaryOperator 0x2ac4b4edfe0 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|     |         `-ArraySubscriptExpr 0x2ac4b4edfc0 <col:19, col:25> 'u8':'int' lvalue
|     |           |-ImplicitCastExpr 0x2ac4b4edfa8 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|     |           | `-DeclRefExpr 0x2ac4b4edf60 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x2ac4b4ec9f0 'out' 'u8 *':'u8 *'
|     |           `-IntegerLiteral 0x2ac4b4edf80 <col:23> 'int' 58
|     `-ImplicitCastExpr 0x2ac4b4ee108 <col:31, col:35> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2ac4b4ee0e8 <col:31, col:35> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x2ac4b4ee0d0 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x2ac4b4ee088 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4ecb10 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x2ac4b4ee0a8 <col:34> 'int' 8
|-FunctionDecl 0x2ac4b4ee418 <line:173:1, line:178:1> line:173:13 used flip_endian 'void (u8 *, const u8 *, unsigned int)' static
| |-ParmVarDecl 0x2ac4b4ee1b0 <col:25, col:29> col:29 used out 'u8 *'
| |-ParmVarDecl 0x2ac4b4ee228 <col:34, col:44> col:44 used in 'const u8 *'
| |-ParmVarDecl 0x2ac4b4ee2a8 <col:48, col:57> col:57 used len 'unsigned int'
| `-CompoundStmt 0x2ac4b4ee938 <line:174:1, line:178:1>
|   |-DeclStmt 0x2ac4b4ee568 <line:175:5, col:15>
|   | `-VarDecl 0x2ac4b4ee500 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x2ac4b4ee900 <line:176:5, line:177:32>
|     |-BinaryOperator 0x2ac4b4ee5f8 <line:176:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x2ac4b4ee580 <col:10> 'unsigned int' lvalue Var 0x2ac4b4ee500 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2ac4b4ee5e0 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x2ac4b4ee5b8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x2ac4b4ee698 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x2ac4b4ee658 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4ee618 <col:17> 'unsigned int' lvalue Var 0x2ac4b4ee500 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2ac4b4ee680 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x2ac4b4ee638 <col:21> 'unsigned int' lvalue ParmVar 0x2ac4b4ee2a8 'len' 'unsigned int'
|     |-UnaryOperator 0x2ac4b4ee6d8 <col:26, col:28> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x2ac4b4ee6b8 <col:28> 'unsigned int' lvalue Var 0x2ac4b4ee500 'i' 'unsigned int'
|     `-BinaryOperator 0x2ac4b4ee8e0 <line:177:9, col:32> 'u8':'int' '='
|       |-ArraySubscriptExpr 0x2ac4b4ee760 <col:9, col:14> 'u8':'int' lvalue
|       | |-ImplicitCastExpr 0x2ac4b4ee730 <col:9> 'u8 *' <LValueToRValue>
|       | | `-DeclRefExpr 0x2ac4b4ee6f0 <col:9> 'u8 *' lvalue ParmVar 0x2ac4b4ee1b0 'out' 'u8 *'
|       | `-ImplicitCastExpr 0x2ac4b4ee748 <col:13> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x2ac4b4ee710 <col:13> 'unsigned int' lvalue Var 0x2ac4b4ee500 'i' 'unsigned int'
|       `-ImplicitCastExpr 0x2ac4b4ee8c8 <col:18, col:32> 'u8':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x2ac4b4ee8a8 <col:18, col:32> 'const u8':'const int' lvalue
|           |-ImplicitCastExpr 0x2ac4b4ee890 <col:18> 'const u8 *' <LValueToRValue>
|           | `-DeclRefExpr 0x2ac4b4ee780 <col:18> 'const u8 *' lvalue ParmVar 0x2ac4b4ee228 'in' 'const u8 *'
|           `-BinaryOperator 0x2ac4b4ee870 <col:21, col:31> 'unsigned int' '-'
|             |-BinaryOperator 0x2ac4b4ee818 <col:21, col:27> 'unsigned int' '-'
|             | |-ImplicitCastExpr 0x2ac4b4ee7e8 <col:21> 'unsigned int' <LValueToRValue>
|             | | `-DeclRefExpr 0x2ac4b4ee7a0 <col:21> 'unsigned int' lvalue ParmVar 0x2ac4b4ee2a8 'len' 'unsigned int'
|             | `-ImplicitCastExpr 0x2ac4b4ee800 <col:27> 'unsigned int' <IntegralCast>
|             |   `-IntegerLiteral 0x2ac4b4ee7c0 <col:27> 'int' 1
|             `-ImplicitCastExpr 0x2ac4b4ee858 <col:31> 'unsigned int' <LValueToRValue>
|               `-DeclRefExpr 0x2ac4b4ee838 <col:31> 'unsigned int' lvalue Var 0x2ac4b4ee500 'i' 'unsigned int'
|-FunctionDecl 0x2ac4b4eeac0 <line:181:1, line:202:1> line:181:12 invalid BN_to_felem 'int (limb *, const int *)' static
| |-ParmVarDecl 0x2ac4b4ee968 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b4ee9e8 <col:35, col:49> col:49 invalid bn 'const int *'
| `-CompoundStmt 0x2ac4b4ef8b0 <line:182:1, line:202:1>
|   |-DeclStmt 0x2ac4b4eec00 <line:183:5, col:25>
|   | `-VarDecl 0x2ac4b4eeb98 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x2ac4b4eec90 <line:184:5, col:26>
|   | `-VarDecl 0x2ac4b4eec28 <col:5, col:21> col:21 used b_out 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x2ac4b4eed28 <line:185:5, col:23>
|   | `-VarDecl 0x2ac4b4eecc0 <col:5, col:14> col:14 used num_bytes 'unsigned int'
|   |-CallExpr 0x2ac4b4eee50 <line:188:5, col:35> 'void *'
|   | |-ImplicitCastExpr 0x2ac4b4eee38 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b4eed40 <col:5> 'void *(void *, int, unsigned long long)' Function 0x2ac4b488a88 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x2ac4b4eeea0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x2ac4b4eee88 <col:12> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b4eed60 <col:12> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b4eec28 'b_out' 'felem_bytearray':'u8 [66]'
|   | |-IntegerLiteral 0x2ac4b4eed98 <col:19> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x2ac4b4eee00 <col:22, col:34> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x2ac4b4eede0 <col:28, col:34> 'felem_bytearray':'u8 [66]' lvalue
|   |     `-DeclRefExpr 0x2ac4b4eedc0 <col:29> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b4eec28 'b_out' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|   |-IfStmt 0x2ac4b4ef258 <line:190:5, line:193:5>
|   | |-BinaryOperator 0x2ac4b4ef0d8 <line:190:9, col:33> 'int' '>'
|   | | |-ImplicitCastExpr 0x2ac4b4ef0c0 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x2ac4b4ef0a8 <col:9> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2ac4b4ef028 <col:9> 'unsigned int' lvalue Var 0x2ac4b4eecc0 'num_bytes' 'unsigned int'
|   | | `-UnaryExprOrTypeTraitExpr 0x2ac4b4ef088 <col:21, col:33> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x2ac4b4ef068 <col:27, col:33> 'felem_bytearray':'u8 [66]' lvalue
|   | |     `-DeclRefExpr 0x2ac4b4ef048 <col:28> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b4eec28 'b_out' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|   | `-CompoundStmt 0x2ac4b4ef240 <col:36, line:193:5>
|   |   `-ReturnStmt 0x2ac4b4ef230 <line:192:9, col:16>
|   |     `-IntegerLiteral 0x2ac4b4ef208 <col:16> 'int' 0
|   |-IfStmt 0x2ac4b4ef408 <line:194:5, line:197:5>
|   | |-OpaqueValueExpr 0x2ac4b4ef3f0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2ac4b4ef3d8 <line:194:29, line:197:5>
|   |   `-ReturnStmt 0x2ac4b4ef3c8 <line:196:9, col:16>
|   |     `-IntegerLiteral 0x2ac4b4ef3a0 <col:16> 'int' 0
|   |-CallExpr 0x2ac4b4ef680 <line:199:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x2ac4b4ef668 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b4ef588 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x2ac4b4ee418 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | |-ImplicitCastExpr 0x2ac4b4ef6b8 <col:17> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b4ef5a8 <col:17> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b4eec28 'b_out' 'felem_bytearray':'u8 [66]'
|   | |-ImplicitCastExpr 0x2ac4b4ef6e8 <col:24> 'const u8 *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b4ef6d0 <col:24> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b4ef5c8 <col:24> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b4eeb98 'b_in' 'felem_bytearray':'u8 [66]'
|   | `-ImplicitCastExpr 0x2ac4b4ef700 <col:30> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4ef5e8 <col:30> 'unsigned int' lvalue Var 0x2ac4b4eecc0 'num_bytes' 'unsigned int'
|   |-CallExpr 0x2ac4b4ef800 <line:200:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b4ef7e8 <col:5> 'void (*)(limb *, const u8 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b4ef718 <col:5> 'void (limb *, const u8 *)' Function 0x2ac4b4eb1b8 'bin66_to_felem' 'void (limb *, const u8 *)'
|   | |-ImplicitCastExpr 0x2ac4b4ef830 <col:20> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b4ef738 <col:20> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ee968 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2ac4b4ef860 <col:25> 'const u8 *':'const u8 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b4ef848 <col:25> 'u8 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b4ef770 <col:25> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b4eec28 'b_out' 'felem_bytearray':'u8 [66]'
|   `-ReturnStmt 0x2ac4b4ef8a0 <line:201:5, col:12>
|     `-IntegerLiteral 0x2ac4b4ef878 <col:12> 'int' 1
|-FunctionDecl 0x2ac4b4efab0 <line:205:1, line:211:1> line:205:16 invalid felem_to_BN 'int *(int *, const limb *)' static
| |-ParmVarDecl 0x2ac4b4ef920 <col:28, col:36> col:36 invalid out 'int *'
| |-ParmVarDecl 0x2ac4b4ef998 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b4f00e8 <line:206:1, line:211:1>
|   |-DeclStmt 0x2ac4b4efc80 <line:207:5, col:32>
|   | |-VarDecl 0x2ac4b4efb88 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [66]'
|   | `-VarDecl 0x2ac4b4efc00 <col:5, col:27> col:27 used b_out 'felem_bytearray':'u8 [66]'
|   |-CallExpr 0x2ac4b4efd70 <line:208:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b4efd58 <col:5> 'void (*)(u8 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b4efc98 <col:5> 'void (u8 *, const limb *)' Function 0x2ac4b4ecc18 'felem_to_bin66' 'void (u8 *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b4efda0 <col:20> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b4efcb8 <col:20> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b4efb88 'b_in' 'felem_bytearray':'u8 [66]'
|   | `-ImplicitCastExpr 0x2ac4b4efdb8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4efcf0 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4ef998 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x2ac4b4efec0 <line:209:5, col:43> 'void'
|     |-ImplicitCastExpr 0x2ac4b4efea8 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b4efdd0 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x2ac4b4ee418 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|     |-ImplicitCastExpr 0x2ac4b4efef8 <col:17> 'u8 *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b4efdf0 <col:17> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b4efc00 'b_out' 'felem_bytearray':'u8 [66]'
|     |-ImplicitCastExpr 0x2ac4b4eff28 <col:24> 'const u8 *' <NoOp>
|     | `-ImplicitCastExpr 0x2ac4b4eff10 <col:24> 'u8 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x2ac4b4efe28 <col:24> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b4efb88 'b_in' 'felem_bytearray':'u8 [66]'
|     `-ImplicitCastExpr 0x2ac4b4eff40 <col:30, col:42> 'unsigned int' <IntegralCast>
|       `-UnaryExprOrTypeTraitExpr 0x2ac4b4efe88 <col:30, col:42> 'unsigned long long' sizeof
|         `-ParenExpr 0x2ac4b4efe68 <col:36, col:42> 'felem_bytearray':'u8 [66]' lvalue
|           `-DeclRefExpr 0x2ac4b4efe48 <col:37> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b4efc00 'b_out' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|-FunctionDecl 0x2ac4b4f01f8 <line:218:1, line:229:1> line:218:13 used felem_one 'void (limb *)' static
| |-ParmVarDecl 0x2ac4b4f0120 <col:23, col:29> col:29 used out 'limb *':'limb *'
| `-CompoundStmt 0x2ac4b4f09d0 <line:219:1, line:229:1>
|   |-BinaryOperator 0x2ac4b4f0360 <line:220:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f0318 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f0300 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f02b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f02d8 <col:9> 'int' 0
|   | `-IntegerLiteral 0x2ac4b4f0338 <col:14> 'int' 1
|   |-BinaryOperator 0x2ac4b4f0428 <line:221:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f03e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f03c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f0380 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f03a0 <col:9> 'int' 1
|   | `-IntegerLiteral 0x2ac4b4f0400 <col:14> 'int' 0
|   |-BinaryOperator 0x2ac4b4f04f0 <line:222:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f04a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f0490 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f0448 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f0468 <col:9> 'int' 2
|   | `-IntegerLiteral 0x2ac4b4f04c8 <col:14> 'int' 0
|   |-BinaryOperator 0x2ac4b4f05b8 <line:223:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f0570 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f0558 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f0510 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f0530 <col:9> 'int' 3
|   | `-IntegerLiteral 0x2ac4b4f0590 <col:14> 'int' 0
|   |-BinaryOperator 0x2ac4b4f0690 <line:224:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f0638 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f0620 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f05d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f05f8 <col:9> 'int' 4
|   | `-IntegerLiteral 0x2ac4b4f0658 <col:14> 'int' 0
|   |-BinaryOperator 0x2ac4b4f0758 <line:225:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f0710 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f06f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f06b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f06d0 <col:9> 'int' 5
|   | `-IntegerLiteral 0x2ac4b4f0730 <col:14> 'int' 0
|   |-BinaryOperator 0x2ac4b4f0820 <line:226:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f07d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f07c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f0778 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f0798 <col:9> 'int' 6
|   | `-IntegerLiteral 0x2ac4b4f07f8 <col:14> 'int' 0
|   |-BinaryOperator 0x2ac4b4f08e8 <line:227:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f08a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f0888 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f0840 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0120 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f0860 <col:9> 'int' 7
|   | `-IntegerLiteral 0x2ac4b4f08c0 <col:14> 'int' 0
|   `-BinaryOperator 0x2ac4b4f09b0 <line:228:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2ac4b4f0968 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b4f0950 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4f0908 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0120 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2ac4b4f0928 <col:9> 'int' 8
|     `-IntegerLiteral 0x2ac4b4f0988 <col:14> 'int' 0
|-FunctionDecl 0x2ac4b4f0bb8 <line:231:1, line:242:1> line:231:13 used felem_assign 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b4f0a38 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b4f0ab0 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b4f1778 <line:232:1, line:242:1>
|   |-BinaryOperator 0x2ac4b4f0d98 <line:233:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f0ce0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f0cc8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f0c80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f0ca0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2ac4b4f0d80 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f0d60 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f0d48 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f0d00 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f0ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f0d20 <col:17> 'int' 0
|   |-BinaryOperator 0x2ac4b4f0ed0 <line:234:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f0e18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f0e00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f0db8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f0dd8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b4f0eb8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f0e98 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f0e80 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f0e38 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f0ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f0e58 <col:17> 'int' 1
|   |-BinaryOperator 0x2ac4b4f1008 <line:235:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f0f50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f0f38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f0ef0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f0f10 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2ac4b4f0ff0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f0fd0 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f0fb8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f0f70 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f0ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f0f90 <col:17> 'int' 2
|   |-BinaryOperator 0x2ac4b4f1140 <line:236:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f1088 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f1070 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f1028 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f1048 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2ac4b4f1128 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f1108 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f10f0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f10a8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f0ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f10c8 <col:17> 'int' 3
|   |-BinaryOperator 0x2ac4b4f1278 <line:237:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f11c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f11a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f1160 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f1180 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2ac4b4f1260 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f1240 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f1228 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f11e0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f0ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f1200 <col:17> 'int' 4
|   |-BinaryOperator 0x2ac4b4f13b0 <line:238:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f12f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f12e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f1298 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f12b8 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2ac4b4f1398 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f1378 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f1360 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f1318 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f0ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f1338 <col:17> 'int' 5
|   |-BinaryOperator 0x2ac4b4f14e8 <line:239:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f1430 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f1418 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f13d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f13f0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2ac4b4f14d0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f14b0 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f1498 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f1450 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f0ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f1470 <col:17> 'int' 6
|   |-BinaryOperator 0x2ac4b4f1620 <line:240:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f1568 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f1550 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f1508 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f1528 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2ac4b4f1608 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f15e8 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f15d0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f1588 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f0ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f15a8 <col:17> 'int' 7
|   `-BinaryOperator 0x2ac4b4f1758 <line:241:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2ac4b4f16a0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b4f1688 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4f1640 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f0a38 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2ac4b4f1660 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x2ac4b4f1740 <col:14, col:18> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2ac4b4f1720 <col:14, col:18> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x2ac4b4f1708 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x2ac4b4f16c0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f0ab0 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x2ac4b4f16e0 <col:17> 'int' 8
|-FunctionDecl 0x2ac4b4f1920 <line:245:1, line:256:1> line:245:13 used felem_sum64 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b4f17e0 <col:25, col:31> col:31 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b4f1858 <col:36, col:48> col:48 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b4f2570 <line:246:1, line:256:1>
|   |-CompoundAssignOperator 0x2ac4b4f1b00 <line:247:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f1a48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f1a30 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f19e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f17e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f1a08 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2ac4b4f1ae8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f1ac8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f1ab0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f1a68 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f1858 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f1a88 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x2ac4b4f1c48 <line:248:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f1b90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f1b78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f1b30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f17e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f1b50 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b4f1c30 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f1c10 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f1bf8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f1bb0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f1858 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f1bd0 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x2ac4b4f1d90 <line:249:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f1cd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f1cc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f1c78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f17e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f1c98 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2ac4b4f1d78 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f1d58 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f1d40 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f1cf8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f1858 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f1d18 <col:18> 'int' 2
|   |-CompoundAssignOperator 0x2ac4b4f1ed8 <line:250:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f1e20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f1e08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f1dc0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f17e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f1de0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2ac4b4f1ec0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f1ea0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f1e88 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f1e40 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f1858 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f1e60 <col:18> 'int' 3
|   |-CompoundAssignOperator 0x2ac4b4f2020 <line:251:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f1f68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f1f50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f1f08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f17e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f1f28 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2ac4b4f2008 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f1fe8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f1fd0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f1f88 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f1858 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f1fa8 <col:18> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b4f2168 <line:252:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f20b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f2098 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f2050 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f17e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f2070 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2ac4b4f2150 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f2130 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f2118 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f20d0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f1858 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f20f0 <col:18> 'int' 5
|   |-CompoundAssignOperator 0x2ac4b4f22b0 <line:253:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f21f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f21e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f2198 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f17e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f21b8 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2ac4b4f2298 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f2278 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f2260 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f2218 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f1858 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f2238 <col:18> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b4f23f8 <line:254:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f2340 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f2328 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f22e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f17e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f2300 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2ac4b4f23e0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b4f23c0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b4f23a8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b4f2360 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f1858 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2ac4b4f2380 <col:18> 'int' 7
|   `-CompoundAssignOperator 0x2ac4b4f2540 <line:255:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2ac4b4f2488 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b4f2470 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4f2428 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f17e0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2ac4b4f2448 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x2ac4b4f2528 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2ac4b4f2508 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x2ac4b4f24f0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x2ac4b4f24a8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f1858 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x2ac4b4f24c8 <col:18> 'int' 8
|-FunctionDecl 0x2ac4b4f2888 <line:259:1, line:270:1> line:259:13 used felem_scalar 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x2ac4b4f25d8 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b4f26a0 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b4f2718 <col:53, col:58> col:58 used scalar 'limb':'int'
| `-CompoundStmt 0x2ac4b4f3768 <line:260:1, line:270:1>
|   |-BinaryOperator 0x2ac4b4f2ac8 <line:261:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f29b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f29a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f2958 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f25d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f2978 <col:9> 'int' 0
|   | `-BinaryOperator 0x2ac4b4f2aa8 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2ac4b4f2a78 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4f2a38 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4f2a20 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4f29d8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f26a0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4f29f8 <col:17> 'int' 0
|   |   `-ImplicitCastExpr 0x2ac4b4f2a90 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4f2a58 <col:22> 'limb':'int' lvalue ParmVar 0x2ac4b4f2718 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2ac4b4f2c58 <line:262:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f2b48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f2b30 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f2ae8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f25d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f2b08 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b4f2c38 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2ac4b4f2c08 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4f2bc8 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4f2bb0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4f2b68 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f26a0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4f2b88 <col:17> 'int' 1
|   |   `-ImplicitCastExpr 0x2ac4b4f2c20 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4f2be8 <col:22> 'limb':'int' lvalue ParmVar 0x2ac4b4f2718 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2ac4b4f2de8 <line:263:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f2cd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f2cc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f2c78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f25d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f2c98 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b4f2dc8 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2ac4b4f2d98 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4f2d58 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4f2d40 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4f2cf8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f26a0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4f2d18 <col:17> 'int' 2
|   |   `-ImplicitCastExpr 0x2ac4b4f2db0 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4f2d78 <col:22> 'limb':'int' lvalue ParmVar 0x2ac4b4f2718 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2ac4b4f2f78 <line:264:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f2e68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f2e50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f2e08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f25d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f2e28 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b4f2f58 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2ac4b4f2f28 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4f2ee8 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4f2ed0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4f2e88 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f26a0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4f2ea8 <col:17> 'int' 3
|   |   `-ImplicitCastExpr 0x2ac4b4f2f40 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4f2f08 <col:22> 'limb':'int' lvalue ParmVar 0x2ac4b4f2718 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2ac4b4f3108 <line:265:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f2ff8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f2fe0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f2f98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f25d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f2fb8 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b4f30e8 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2ac4b4f30b8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4f3078 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4f3060 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4f3018 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f26a0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4f3038 <col:17> 'int' 4
|   |   `-ImplicitCastExpr 0x2ac4b4f30d0 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4f3098 <col:22> 'limb':'int' lvalue ParmVar 0x2ac4b4f2718 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2ac4b4f3298 <line:266:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f3188 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f3170 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f3128 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f25d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f3148 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b4f3278 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2ac4b4f3248 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4f3208 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4f31f0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4f31a8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f26a0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4f31c8 <col:17> 'int' 5
|   |   `-ImplicitCastExpr 0x2ac4b4f3260 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4f3228 <col:22> 'limb':'int' lvalue ParmVar 0x2ac4b4f2718 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2ac4b4f3428 <line:267:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f3318 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f3300 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f32b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f25d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f32d8 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b4f3408 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2ac4b4f33d8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4f3398 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4f3380 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4f3338 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f26a0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4f3358 <col:17> 'int' 6
|   |   `-ImplicitCastExpr 0x2ac4b4f33f0 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4f33b8 <col:22> 'limb':'int' lvalue ParmVar 0x2ac4b4f2718 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2ac4b4f35b8 <line:268:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f34a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f3490 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f3448 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f25d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f3468 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b4f3598 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2ac4b4f3568 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b4f3528 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b4f3510 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b4f34c8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f26a0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2ac4b4f34e8 <col:17> 'int' 7
|   |   `-ImplicitCastExpr 0x2ac4b4f3580 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b4f3548 <col:22> 'limb':'int' lvalue ParmVar 0x2ac4b4f2718 'scalar' 'limb':'int'
|   `-BinaryOperator 0x2ac4b4f3748 <line:269:5, col:22> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2ac4b4f3638 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b4f3620 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4f35d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f25d8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2ac4b4f35f8 <col:9> 'int' 8
|     `-BinaryOperator 0x2ac4b4f3728 <col:14, col:22> 'int' '*'
|       |-ImplicitCastExpr 0x2ac4b4f36f8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x2ac4b4f36b8 <col:14, col:18> 'const limb':'const int' lvalue
|       |   |-ImplicitCastExpr 0x2ac4b4f36a0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2ac4b4f3658 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f26a0 'in' 'const limb *':'const limb *'
|       |   `-IntegerLiteral 0x2ac4b4f3678 <col:17> 'int' 8
|       `-ImplicitCastExpr 0x2ac4b4f3710 <col:22> 'limb':'int' <LValueToRValue>
|         `-DeclRefExpr 0x2ac4b4f36d8 <col:22> 'limb':'int' lvalue ParmVar 0x2ac4b4f2718 'scalar' 'limb':'int'
|-FunctionDecl 0x2ac4b4f3988 <line:273:1, line:284:1> line:273:13 used felem_scalar64 'void (limb *, limb)' static
| |-ParmVarDecl 0x2ac4b4f37d0 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b4f3848 <col:39, col:44> col:44 used scalar 'limb':'int'
| `-CompoundStmt 0x2ac4b4f4278 <line:274:1, line:284:1>
|   |-CompoundAssignOperator 0x2ac4b4f3b08 <line:275:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f3ab0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f3a98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f3a50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f37d0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f3a70 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2ac4b4f3af0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f3ad0 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f3848 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f3bf0 <line:276:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f3b98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f3b80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f3b38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f37d0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f3b58 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b4f3bd8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f3bb8 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f3848 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f3cd8 <line:277:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f3c80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f3c68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f3c20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f37d0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f3c40 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2ac4b4f3cc0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f3ca0 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f3848 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f3dc0 <line:278:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f3d68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f3d50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f3d08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f37d0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f3d28 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2ac4b4f3da8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f3d88 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f3848 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f3ea8 <line:279:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f3e50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f3e38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f3df0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f37d0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f3e10 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2ac4b4f3e90 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f3e70 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f3848 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f3f90 <line:280:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f3f38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f3f20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f3ed8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f37d0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f3ef8 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2ac4b4f3f78 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f3f58 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f3848 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f4078 <line:281:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f4020 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f4008 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f3fc0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f37d0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f3fe0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2ac4b4f4060 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f4040 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f3848 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f4160 <line:282:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f4108 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f40f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f40a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f37d0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f40c8 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2ac4b4f4148 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f4128 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f3848 'scalar' 'limb':'int'
|   `-CompoundAssignOperator 0x2ac4b4f4248 <line:283:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2ac4b4f41f0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b4f41d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4f4190 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f37d0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2ac4b4f41b0 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x2ac4b4f4230 <col:15> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x2ac4b4f4210 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f3848 'scalar' 'limb':'int'
|-FunctionDecl 0x2ac4b4f44a8 <line:287:1, line:298:1> line:287:13 used felem_scalar128 'void (int *, limb)' static
| |-ParmVarDecl 0x2ac4b4f4330 <col:29, col:40> col:40 used out 'int *':'int *'
| |-ParmVarDecl 0x2ac4b4f43a8 <col:45, col:50> col:50 used scalar 'limb':'int'
| `-CompoundStmt 0x2ac4b4f4da8 <line:288:1, line:298:1>
|   |-CompoundAssignOperator 0x2ac4b4f4628 <line:289:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f45d0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f45b8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f4570 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f4330 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f4590 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2ac4b4f4610 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f45f0 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f43a8 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f4720 <line:290:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f46c8 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f46b0 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f4658 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f4330 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f4678 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b4f4708 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f46e8 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f43a8 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f4808 <line:291:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f47b0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f4798 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f4750 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f4330 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f4770 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2ac4b4f47f0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f47d0 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f43a8 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f48f0 <line:292:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f4898 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f4880 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f4838 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f4330 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f4858 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2ac4b4f48d8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f48b8 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f43a8 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f49d8 <line:293:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f4980 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f4968 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f4920 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f4330 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f4940 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2ac4b4f49c0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f49a0 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f43a8 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f4ac0 <line:294:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f4a68 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f4a50 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f4a08 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f4330 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f4a28 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2ac4b4f4aa8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f4a88 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f43a8 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f4ba8 <line:295:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f4b50 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f4b38 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f4af0 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f4330 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f4b10 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2ac4b4f4b90 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f4b70 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f43a8 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b4f4c90 <line:296:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f4c38 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f4c20 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f4bd8 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f4330 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f4bf8 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2ac4b4f4c78 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b4f4c58 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f43a8 'scalar' 'limb':'int'
|   `-CompoundAssignOperator 0x2ac4b4f4d78 <line:297:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2ac4b4f4d20 <col:5, col:10> 'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b4f4d08 <col:5> 'int *':'int *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4f4cc0 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f4330 'out' 'int *':'int *'
|     | `-IntegerLiteral 0x2ac4b4f4ce0 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x2ac4b4f4d60 <col:15> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x2ac4b4f4d40 <col:15> 'limb':'int' lvalue ParmVar 0x2ac4b4f43a8 'scalar' 'limb':'int'
|-FunctionDecl 0x2ac4b4f4f50 <line:307:1, line:322:1> line:307:13 used felem_neg 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b4f4e10 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b4f4e88 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b4f63e8 <line:308:1, line:322:1>
|   |-DeclStmt 0x2ac4b4f5280 <line:310:5, col:71>
|   | `-VarDecl 0x2ac4b4f5028 <col:5, col:70> col:23 used two62m3 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2ac4b4f5260 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x2ac4b4f5158 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x2ac4b4f5138 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x2ac4b4f50f0 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x2ac4b4f50c8 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x2ac4b4f5090 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x2ac4b4f5110 <col:48> 'int' 62
|   |     `-ParenExpr 0x2ac4b4f5240 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x2ac4b4f5220 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2ac4b4f51d8 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2ac4b4f51b0 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2ac4b4f5178 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x2ac4b4f51f8 <col:69> 'int' 5
|   |-DeclStmt 0x2ac4b4f5500 <line:311:5, col:71>
|   | `-VarDecl 0x2ac4b4f52a8 <col:5, col:70> col:23 used two62m2 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2ac4b4f54e0 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x2ac4b4f53d8 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x2ac4b4f53b8 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x2ac4b4f5370 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x2ac4b4f5348 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x2ac4b4f5310 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x2ac4b4f5390 <col:48> 'int' 62
|   |     `-ParenExpr 0x2ac4b4f54c0 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x2ac4b4f54a0 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2ac4b4f5458 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2ac4b4f5430 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2ac4b4f53f8 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x2ac4b4f5478 <col:69> 'int' 4
|   |-BinaryOperator 0x2ac4b4f56a0 <line:313:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f5578 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f5560 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f5518 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f4e10 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f5538 <col:9> 'int' 0
|   | `-BinaryOperator 0x2ac4b4f5680 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f5650 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f5598 <col:14> 'const limb':'const int' lvalue Var 0x2ac4b4f5028 'two62m3' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f5668 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f5630 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f5618 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f55d0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f4e88 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f55f0 <col:27> 'int' 0
|   |-BinaryOperator 0x2ac4b4f5890 <line:314:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f5768 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f5750 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f5708 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f4e10 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f5728 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b4f5870 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f5840 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f5788 <col:14> 'const limb':'const int' lvalue Var 0x2ac4b4f52a8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f5858 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f5820 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f5808 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f57c0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f4e88 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f57e0 <col:27> 'int' 1
|   |-BinaryOperator 0x2ac4b4f5a68 <line:315:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f5958 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f5940 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f58f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f4e10 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f5918 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b4f5a48 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f5a18 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f5978 <col:14> 'const limb':'const int' lvalue Var 0x2ac4b4f52a8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f5a30 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f59f8 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f59e0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f5998 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f4e88 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f59b8 <col:27> 'int' 2
|   |-BinaryOperator 0x2ac4b4f5bf8 <line:316:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f5ae8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f5ad0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f5a88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f4e10 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f5aa8 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b4f5bd8 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f5ba8 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f5b08 <col:14> 'const limb':'const int' lvalue Var 0x2ac4b4f52a8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f5bc0 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f5b88 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f5b70 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f5b28 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f4e88 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f5b48 <col:27> 'int' 3
|   |-BinaryOperator 0x2ac4b4f5d88 <line:317:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f5c78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f5c60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f5c18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f4e10 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f5c38 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b4f5d68 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f5d38 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f5c98 <col:14> 'const limb':'const int' lvalue Var 0x2ac4b4f52a8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f5d50 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f5d18 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f5d00 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f5cb8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f4e88 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f5cd8 <col:27> 'int' 4
|   |-BinaryOperator 0x2ac4b4f5f18 <line:318:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f5e08 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f5df0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f5da8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f4e10 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f5dc8 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b4f5ef8 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f5ec8 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f5e28 <col:14> 'const limb':'const int' lvalue Var 0x2ac4b4f52a8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f5ee0 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f5ea8 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f5e90 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f5e48 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f4e88 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f5e68 <col:27> 'int' 5
|   |-BinaryOperator 0x2ac4b4f60a8 <line:319:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f5f98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f5f80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f5f38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f4e10 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f5f58 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b4f6088 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f6058 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f5fb8 <col:14> 'const limb':'const int' lvalue Var 0x2ac4b4f52a8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f6070 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f6038 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f6020 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f5fd8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f4e88 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f5ff8 <col:27> 'int' 6
|   |-BinaryOperator 0x2ac4b4f6238 <line:320:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b4f6128 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f6110 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f60c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f4e10 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f60e8 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b4f6218 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f61e8 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f6148 <col:14> 'const limb':'const int' lvalue Var 0x2ac4b4f52a8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f6200 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f61c8 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f61b0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f6168 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f4e88 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f6188 <col:27> 'int' 7
|   `-BinaryOperator 0x2ac4b4f63c8 <line:321:5, col:28> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2ac4b4f62b8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b4f62a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4f6258 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f4e10 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2ac4b4f6278 <col:9> 'int' 8
|     `-BinaryOperator 0x2ac4b4f63a8 <col:14, col:28> 'int' '-'
|       |-ImplicitCastExpr 0x2ac4b4f6378 <col:14> 'limb':'int' <LValueToRValue>
|       | `-DeclRefExpr 0x2ac4b4f62d8 <col:14> 'const limb':'const int' lvalue Var 0x2ac4b4f52a8 'two62m2' 'const limb':'const int'
|       `-ImplicitCastExpr 0x2ac4b4f6390 <col:24, col:28> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x2ac4b4f6358 <col:24, col:28> 'const limb':'const int' lvalue
|           |-ImplicitCastExpr 0x2ac4b4f6340 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|           | `-DeclRefExpr 0x2ac4b4f62f8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f4e88 'in' 'const limb *':'const limb *'
|           `-IntegerLiteral 0x2ac4b4f6318 <col:27> 'int' 8
|-FunctionDecl 0x2ac4b4f65a0 <line:331:1, line:348:1> line:331:13 used felem_diff64 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b4f6460 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b4f64d8 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b4f7b10 <line:332:1, line:348:1>
|   |-DeclStmt 0x2ac4b4f6918 <line:336:5, col:71>
|   | `-VarDecl 0x2ac4b4f66c0 <col:5, col:70> col:23 used two62m3 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2ac4b4f68f8 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x2ac4b4f67f0 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x2ac4b4f67d0 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x2ac4b4f6788 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x2ac4b4f6760 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x2ac4b4f6728 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x2ac4b4f67a8 <col:48> 'int' 62
|   |     `-ParenExpr 0x2ac4b4f68d8 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x2ac4b4f68b8 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2ac4b4f6870 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2ac4b4f6848 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2ac4b4f6810 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x2ac4b4f6890 <col:69> 'int' 5
|   |-DeclStmt 0x2ac4b4f6b98 <line:337:5, col:71>
|   | `-VarDecl 0x2ac4b4f6940 <col:5, col:70> col:23 used two62m2 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2ac4b4f6b78 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x2ac4b4f6a70 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x2ac4b4f6a50 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x2ac4b4f6a08 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x2ac4b4f69e0 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x2ac4b4f69a8 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x2ac4b4f6a28 <col:48> 'int' 62
|   |     `-ParenExpr 0x2ac4b4f6b58 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x2ac4b4f6b38 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2ac4b4f6af0 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2ac4b4f6ac8 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2ac4b4f6a90 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x2ac4b4f6b10 <col:69> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b4f6d38 <line:339:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f6c10 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f6bf8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f6bb0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f6460 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f6bd0 <col:9> 'int' 0
|   | `-BinaryOperator 0x2ac4b4f6d18 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f6ce8 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f6c30 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f66c0 'two62m3' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f6d00 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f6cc8 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f6cb0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f6c68 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f64d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f6c88 <col:28> 'int' 0
|   |-CompoundAssignOperator 0x2ac4b4f6f38 <line:340:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f6e10 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f6df8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f6db0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f6460 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f6dd0 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b4f6f18 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f6ee8 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f6e30 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f6940 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f6f00 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f6ec8 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f6eb0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f6e68 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f64d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f6e88 <col:28> 'int' 1
|   |-CompoundAssignOperator 0x2ac4b4f7120 <line:341:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f7010 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f6ff8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f6fb0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f6460 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f6fd0 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b4f7100 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f70d0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f7030 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f6940 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f70e8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f70b0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f7098 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f7050 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f64d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f7070 <col:28> 'int' 2
|   |-CompoundAssignOperator 0x2ac4b4f72c0 <line:342:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f71b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f7198 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f7150 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f6460 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f7170 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b4f72a0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f7270 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f71d0 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f6940 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f7288 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f7250 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f7238 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f71f0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f64d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f7210 <col:28> 'int' 3
|   |-CompoundAssignOperator 0x2ac4b4f7460 <line:343:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f7350 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f7338 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f72f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f6460 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f7310 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b4f7440 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f7410 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f7370 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f6940 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f7428 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f73f0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f73d8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f7390 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f64d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f73b0 <col:28> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b4f7600 <line:344:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f74f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f74d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f7490 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f6460 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f74b0 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b4f75e0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f75b0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f7510 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f6940 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f75c8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f7590 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f7578 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f7530 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f64d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f7550 <col:28> 'int' 5
|   |-CompoundAssignOperator 0x2ac4b4f77a0 <line:345:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f7690 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f7678 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f7630 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f6460 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f7650 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b4f7780 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f7750 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f76b0 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f6940 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f7768 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f7730 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f7718 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f76d0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f64d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f76f0 <col:28> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b4f7940 <line:346:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f7830 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f7818 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f77d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f6460 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b4f77f0 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b4f7920 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f78f0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f7850 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f6940 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f7908 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f78d0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f78b8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f7870 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f64d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f7890 <col:28> 'int' 7
|   `-CompoundAssignOperator 0x2ac4b4f7ae0 <line:347:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2ac4b4f79d0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b4f79b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4f7970 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4f6460 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2ac4b4f7990 <col:9> 'int' 8
|     `-BinaryOperator 0x2ac4b4f7ac0 <col:15, col:29> 'int' '-'
|       |-ImplicitCastExpr 0x2ac4b4f7a90 <col:15> 'limb':'int' <LValueToRValue>
|       | `-DeclRefExpr 0x2ac4b4f79f0 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f6940 'two62m2' 'const limb':'const int'
|       `-ImplicitCastExpr 0x2ac4b4f7aa8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x2ac4b4f7a70 <col:25, col:29> 'const limb':'const int' lvalue
|           |-ImplicitCastExpr 0x2ac4b4f7a58 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|           | `-DeclRefExpr 0x2ac4b4f7a10 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f64d8 'in' 'const limb *':'const limb *'
|           `-IntegerLiteral 0x2ac4b4f7a30 <col:28> 'int' 8
|-FunctionDecl 0x2ac4b4f7d08 <line:357:1, line:379:1> line:357:13 used felem_diff_128_64 'void (int *, const limb *)' static
| |-ParmVarDecl 0x2ac4b4f7b88 <col:31, col:42> col:42 used out 'int *':'int *'
| |-ParmVarDecl 0x2ac4b4f7c00 <col:47, col:59> col:59 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b4f9278 <line:358:1, line:379:1>
|   |-DeclStmt 0x2ac4b4f8038 <line:367:5, col:71>
|   | `-VarDecl 0x2ac4b4f7de0 <col:5, col:70> col:23 used two63m6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2ac4b4f8018 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x2ac4b4f7f10 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x2ac4b4f7ef0 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x2ac4b4f7ea8 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x2ac4b4f7e80 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x2ac4b4f7e48 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x2ac4b4f7ec8 <col:48> 'int' 63
|   |     `-ParenExpr 0x2ac4b4f7ff8 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x2ac4b4f7fd8 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2ac4b4f7f90 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2ac4b4f7f68 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2ac4b4f7f30 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x2ac4b4f7fb0 <col:69> 'int' 6
|   |-DeclStmt 0x2ac4b4f82b8 <line:368:5, col:71>
|   | `-VarDecl 0x2ac4b4f8060 <col:5, col:70> col:23 used two63m5 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2ac4b4f8298 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x2ac4b4f8190 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x2ac4b4f8170 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x2ac4b4f8128 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x2ac4b4f8100 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x2ac4b4f80c8 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x2ac4b4f8148 <col:48> 'int' 63
|   |     `-ParenExpr 0x2ac4b4f8278 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x2ac4b4f8258 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2ac4b4f8210 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2ac4b4f81e8 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2ac4b4f81b0 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x2ac4b4f8230 <col:69> 'int' 5
|   |-CompoundAssignOperator 0x2ac4b4f8458 <line:370:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f8330 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f8318 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f82d0 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f7b88 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f82f0 <col:9> 'int' 0
|   | `-BinaryOperator 0x2ac4b4f8438 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f8408 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f8350 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f7de0 'two63m6' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f8420 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f83e8 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f83d0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f8388 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f7c00 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f83a8 <col:28> 'int' 0
|   |-CompoundAssignOperator 0x2ac4b4f8658 <line:371:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f8530 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f8518 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f84d0 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f7b88 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f84f0 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b4f8638 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f8608 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f8550 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f8060 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f8620 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f85e8 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f85d0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f8588 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f7c00 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f85a8 <col:28> 'int' 1
|   |-CompoundAssignOperator 0x2ac4b4f8888 <line:372:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f8778 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f8760 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f8718 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f7b88 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f8738 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b4f8868 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f8838 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f8798 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f8060 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f8850 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f8818 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f8800 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f87b8 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f7c00 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f87d8 <col:28> 'int' 2
|   |-CompoundAssignOperator 0x2ac4b4f8a28 <line:373:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f8918 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f8900 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f88b8 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f7b88 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f88d8 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b4f8a08 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f89d8 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f8938 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f8060 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f89f0 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f89b8 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f89a0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f8958 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f7c00 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f8978 <col:28> 'int' 3
|   |-CompoundAssignOperator 0x2ac4b4f8bc8 <line:374:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f8ab8 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f8aa0 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f8a58 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f7b88 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f8a78 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b4f8ba8 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f8b78 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f8ad8 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f8060 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f8b90 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f8b58 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f8b40 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f8af8 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f7c00 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f8b18 <col:28> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b4f8d68 <line:375:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f8c58 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f8c40 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f8bf8 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f7b88 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f8c18 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b4f8d48 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f8d18 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f8c78 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f8060 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f8d30 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f8cf8 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f8ce0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f8c98 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f7c00 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f8cb8 <col:28> 'int' 5
|   |-CompoundAssignOperator 0x2ac4b4f8f08 <line:376:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f8df8 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f8de0 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f8d98 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f7b88 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f8db8 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b4f8ee8 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f8eb8 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f8e18 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f8060 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f8ed0 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f8e98 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f8e80 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f8e38 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f7c00 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f8e58 <col:28> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b4f90a8 <line:377:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b4f8f98 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b4f8f80 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b4f8f38 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f7b88 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2ac4b4f8f58 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b4f9088 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x2ac4b4f9058 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b4f8fb8 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f8060 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2ac4b4f9070 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b4f9038 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b4f9020 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b4f8fd8 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f7c00 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2ac4b4f8ff8 <col:28> 'int' 7
|   `-CompoundAssignOperator 0x2ac4b4f9248 <line:378:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2ac4b4f9138 <col:5, col:10> 'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b4f9120 <col:5> 'int *':'int *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b4f90d8 <col:5> 'int *':'int *' lvalue ParmVar 0x2ac4b4f7b88 'out' 'int *':'int *'
|     | `-IntegerLiteral 0x2ac4b4f90f8 <col:9> 'int' 8
|     `-BinaryOperator 0x2ac4b4f9228 <col:15, col:29> 'int' '-'
|       |-ImplicitCastExpr 0x2ac4b4f91f8 <col:15> 'limb':'int' <LValueToRValue>
|       | `-DeclRefExpr 0x2ac4b4f9158 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4f8060 'two63m5' 'const limb':'const int'
|       `-ImplicitCastExpr 0x2ac4b4f9210 <col:25, col:29> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x2ac4b4f91d8 <col:25, col:29> 'const limb':'const int' lvalue
|           |-ImplicitCastExpr 0x2ac4b4f91c0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|           | `-DeclRefExpr 0x2ac4b4f9178 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4f7c00 'in' 'const limb *':'const limb *'
|           `-IntegerLiteral 0x2ac4b4f9198 <col:28> 'int' 8
|-FunctionDecl 0x2ac4b4f94e8 <line:388:1, line:407:1> line:388:13 used felem_diff128 'void (int *, const int *)' static
| |-ParmVarDecl 0x2ac4b4f92f0 <col:27, col:38> col:38 used out 'int *':'int *'
| |-ParmVarDecl 0x2ac4b4f93e0 <col:43, col:60> col:60 used in 'const int *':'const int *'
| `-CompoundStmt 0x2ac4b4fa080 <line:389:1, line:407:1>
|   |-DeclStmt 0x2ac4b4f9680 <line:393:5, line:394:59>
|   | `-VarDecl 0x2ac4b4f95c8 <line:393:5, col:28> col:28 invalid two127m70 'const int' static
|   `-DeclStmt 0x2ac4b4f9768 <line:395:5, line:396:59>
|     `-VarDecl 0x2ac4b4f96b0 <line:395:5, col:28> col:28 invalid two127m69 'const int' static
|-FunctionDecl 0x2ac4b4fa1f0 <line:416:1, line:490:1> line:416:13 used felem_square 'void (int *, const limb *)' static
| |-ParmVarDecl 0x2ac4b4fa0b0 <col:26, col:37> col:37 used out 'int *':'int *'
| |-ParmVarDecl 0x2ac4b4fa128 <col:42, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b4fc598 <line:417:1, line:490:1>
|   |-DeclStmt 0x2ac4b4fa3c0 <line:418:5, col:21>
|   | |-VarDecl 0x2ac4b4fa2c8 <col:5, col:11> col:11 used inx2 'felem':'limb [9]'
|   | `-VarDecl 0x2ac4b4fa340 <col:5, col:17> col:17 used inx4 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b4fa4f0 <line:419:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2ac4b4fa4d8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b4fa3d8 <col:5> 'void (limb *, const limb *, limb)' Function 0x2ac4b4f2888 'felem_scalar' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b4fa528 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b4fa3f8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b4fa2c8 'inx2' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x2ac4b4fa540 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b4fa430 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4fa128 'in' 'const limb *':'const limb *'
|   | `-IntegerLiteral 0x2ac4b4fa450 <col:28> 'int' 2
|   `-CallExpr 0x2ac4b4fa610 <line:420:5, col:29> 'void'
|     |-ImplicitCastExpr 0x2ac4b4fa5f8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b4fa558 <col:5> 'void (limb *, const limb *, limb)' Function 0x2ac4b4f2888 'felem_scalar' 'void (limb *, const limb *, limb)'
|     |-ImplicitCastExpr 0x2ac4b4fa648 <col:18> 'limb *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b4fa578 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b4fa340 'inx4' 'felem':'limb [9]'
|     |-ImplicitCastExpr 0x2ac4b4fa660 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2ac4b4fa5b0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4fa128 'in' 'const limb *':'const limb *'
|     `-IntegerLiteral 0x2ac4b4fa5d0 <col:28> 'int' 4
|-FunctionDecl 0x2ac4b4fc858 <line:500:1, line:604:1> line:500:13 used felem_mul 'void (int *, const limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b4fc5d0 <col:23, col:34> col:34 used out 'int *':'int *'
| |-ParmVarDecl 0x2ac4b4fc648 <col:39, col:51> col:51 in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b4fc6f0 <col:56, col:68> col:68 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b4ffc00 <line:501:1, line:604:1>
|   |-DeclStmt 0x2ac4b4fc9a0 <line:502:5, col:16>
|   | `-VarDecl 0x2ac4b4fc938 <col:5, col:11> col:11 used in2x2 'felem':'limb [9]'
|   `-CallExpr 0x2ac4b4fca70 <line:503:5, col:31> 'void'
|     |-ImplicitCastExpr 0x2ac4b4fca58 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b4fc9b8 <col:5> 'void (limb *, const limb *, limb)' Function 0x2ac4b4f2888 'felem_scalar' 'void (limb *, const limb *, limb)'
|     |-ImplicitCastExpr 0x2ac4b4fcaa8 <col:18> 'limb *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b4fc9d8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b4fc938 'in2x2' 'felem':'limb [9]'
|     |-ImplicitCastExpr 0x2ac4b4fcac0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2ac4b4fca10 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b4fc6f0 'in2' 'const limb *':'const limb *'
|     `-IntegerLiteral 0x2ac4b4fca30 <col:30> 'int' 2
|-VarDecl 0x2ac4b4ffc30 <line:606:1, col:34> col:19 used bottom52bits 'const limb':'const int' static cinit
| `-ImplicitCastExpr 0x2ac4b4ffcd8 <col:34> 'limb':'int' <IntegralCast>
|   `-IntegerLiteral 0x2ac4b4ffc98 <col:34> 'long long' 4503599627370495
|-FunctionDecl 0x2ac4b4ffe78 <line:615:1, line:688:1> line:615:13 used felem_reduce 'void (limb *, const int *)' static
| |-ParmVarDecl 0x2ac4b4ffd00 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b4ffd78 <col:37, col:54> col:54 used in 'const int *':'const int *'
| `-CompoundStmt 0x2ac4b5bbf88 <line:616:1, line:688:1>
|   |-DeclStmt 0x2ac4b500068 <line:617:5, col:29>
|   | |-VarDecl 0x2ac4b4fff70 <col:5, col:9> col:9 used overflow1 'u64':'int'
|   | `-VarDecl 0x2ac4b4fffe8 <col:5, col:20> col:20 used overflow2 'u64':'int'
|   |-BinaryOperator 0x2ac4b500248 <line:619:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b5000e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5000c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b500080 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5000a0 <col:9> 'int' 0
|   | `-BinaryOperator 0x2ac4b500228 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2ac4b5001d0 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b5001a8 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b500190 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b500160 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b500148 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b500100 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b500120 <col:25> 'int' 0
|   |   `-ImplicitCastExpr 0x2ac4b500210 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5001f0 <col:31> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b500430 <line:620:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b5002c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5002b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b500268 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b500288 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b500410 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2ac4b5003b8 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b500390 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b500378 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b500348 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b500330 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b5002e8 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b500308 <col:25> 'int' 1
|   |   `-ImplicitCastExpr 0x2ac4b5003f8 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5003d8 <col:31> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b500618 <line:621:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b5004b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b500498 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b500450 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b500470 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b5005f8 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2ac4b5005a0 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b500578 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b500560 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b500530 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b500518 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b5004d0 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b5004f0 <col:25> 'int' 2
|   |   `-ImplicitCastExpr 0x2ac4b5005e0 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5005c0 <col:31> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b500810 <line:622:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b500698 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b500680 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b500638 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b500658 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b5007f0 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2ac4b500798 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b500770 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b500758 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b500728 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b500710 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b5006b8 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b5006d8 <col:25> 'int' 3
|   |   `-ImplicitCastExpr 0x2ac4b5007d8 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5007b8 <col:31> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b5009f8 <line:623:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b500890 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b500878 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b500830 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b500850 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b5009d8 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2ac4b500980 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b500958 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b500940 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b500910 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b5008f8 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b5008b0 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b5008d0 <col:25> 'int' 4
|   |   `-ImplicitCastExpr 0x2ac4b5009c0 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5009a0 <col:31> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b500be0 <line:624:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b500a78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b500a60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b500a18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b500a38 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b500bc0 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2ac4b500b68 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b500b40 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b500b28 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b500af8 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b500ae0 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b500a98 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b500ab8 <col:25> 'int' 5
|   |   `-ImplicitCastExpr 0x2ac4b500ba8 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b500b88 <col:31> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b500dc8 <line:625:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b500c60 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b500c48 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b500c00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b500c20 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b500da8 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2ac4b500d50 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b500d28 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b500d10 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b500ce0 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b500cc8 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b500c80 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b500ca0 <col:25> 'int' 6
|   |   `-ImplicitCastExpr 0x2ac4b500d90 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b500d70 <col:31> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b500fb0 <line:626:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b500e48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b500e30 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b500de8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b500e08 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b500f90 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2ac4b500f38 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b500f10 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b500ef8 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b500ec8 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b500eb0 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b500e68 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b500e88 <col:25> 'int' 7
|   |   `-ImplicitCastExpr 0x2ac4b500f78 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b500f58 <col:31> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b501198 <line:627:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2ac4b501030 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b501018 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b500fd0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b500ff0 <col:9> 'int' 8
|   | `-BinaryOperator 0x2ac4b501178 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2ac4b501120 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b5010f8 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5010e0 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b5010b0 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b501098 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b501050 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b501070 <col:25> 'int' 8
|   |   `-ImplicitCastExpr 0x2ac4b501160 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b501140 <col:31> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b501370 <line:631:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b501218 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b501200 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5011b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5011d8 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b501350 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b501308 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b5012e0 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5012c8 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b501298 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b501280 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b501238 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b501258 <col:26> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b501328 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b501658 <line:632:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b501400 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5013e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5013a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5013c0 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b501638 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2ac4b5015f0 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2ac4b5015d0 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2ac4b501578 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2ac4b501550 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2ac4b501530 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2ac4b5014e0 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2ac4b5014c8 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2ac4b501480 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2ac4b501468 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2ac4b501420 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2ac4b501440 <col:28> 'int' 0
|   |   |   |       `-IntegerLiteral 0x2ac4b5014a0 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2ac4b5015b8 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2ac4b501598 <col:41> 'const limb':'const int' lvalue Var 0x2ac4b4ffc30 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2ac4b501610 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b501910 <line:637:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b501730 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b501718 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5016d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5016f0 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b5018f0 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b5018a8 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b501880 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2ac4b501860 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2ac4b501810 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2ac4b5017f8 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2ac4b5017b0 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2ac4b501798 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2ac4b501750 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2ac4b501770 <col:27> 'int' 0
|   |   |       `-IntegerLiteral 0x2ac4b5017d0 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2ac4b5018c8 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2ac4b501af8 <line:639:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5019a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b501988 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b501940 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b501960 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b501ad8 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b501a90 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b501a68 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b501a50 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b501a20 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b501a08 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b5019c0 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b5019e0 <col:26> 'int' 1
|   |   `-IntegerLiteral 0x2ac4b501ab0 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b501de0 <line:640:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b501b88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b501b70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b501b28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b501b48 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b501dc0 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2ac4b501d78 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2ac4b501d58 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2ac4b501d00 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2ac4b501cd8 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2ac4b501cb8 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2ac4b501c68 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2ac4b501c50 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2ac4b501c08 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2ac4b501bf0 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2ac4b501ba8 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2ac4b501bc8 <col:28> 'int' 1
|   |   |   |       `-IntegerLiteral 0x2ac4b501c28 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2ac4b501d40 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2ac4b501d20 <col:41> 'const limb':'const int' lvalue Var 0x2ac4b4ffc30 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2ac4b501d98 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b502050 <line:641:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b501e70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b501e58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b501e10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b501e30 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b502030 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b501fe8 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b501fc0 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2ac4b501fa0 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2ac4b501f50 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2ac4b501f38 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2ac4b501ef0 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2ac4b501ed8 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2ac4b501e90 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2ac4b501eb0 <col:27> 'int' 1
|   |   |       `-IntegerLiteral 0x2ac4b501f10 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2ac4b502008 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2ac4b502238 <line:643:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5020e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5020c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b502080 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5020a0 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b502218 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b5021d0 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b5021a8 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b502190 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b502160 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b502148 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b502100 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b502120 <col:26> 'int' 2
|   |   `-IntegerLiteral 0x2ac4b5021f0 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b502520 <line:644:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5022c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5022b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b502268 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b502288 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b502500 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2ac4b5024b8 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2ac4b502498 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2ac4b502440 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2ac4b502418 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2ac4b5023f8 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2ac4b5023a8 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2ac4b502390 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2ac4b502348 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2ac4b502330 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2ac4b5022e8 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2ac4b502308 <col:28> 'int' 2
|   |   |   |       `-IntegerLiteral 0x2ac4b502368 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2ac4b502480 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2ac4b502460 <col:41> 'const limb':'const int' lvalue Var 0x2ac4b4ffc30 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2ac4b5024d8 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b5027b0 <line:645:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5025b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b502598 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b502550 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b502570 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b502790 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b502748 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b502720 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2ac4b5026e0 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2ac4b502690 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2ac4b502678 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2ac4b502630 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2ac4b502618 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2ac4b5025d0 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2ac4b5025f0 <col:27> 'int' 2
|   |   |       `-IntegerLiteral 0x2ac4b502650 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2ac4b502768 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2ac4b502998 <line:647:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b502840 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b502828 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5027e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b502800 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b502978 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b502930 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b502908 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5028f0 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b5028c0 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b5028a8 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b502860 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b502880 <col:26> 'int' 3
|   |   `-IntegerLiteral 0x2ac4b502950 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b502c80 <line:648:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b502a28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b502a10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5029c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5029e8 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b502c60 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2ac4b502c18 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2ac4b502bf8 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2ac4b502ba0 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2ac4b502b78 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2ac4b502b58 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2ac4b502b08 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2ac4b502af0 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2ac4b502aa8 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2ac4b502a90 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2ac4b502a48 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2ac4b502a68 <col:28> 'int' 3
|   |   |   |       `-IntegerLiteral 0x2ac4b502ac8 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2ac4b502be0 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2ac4b502bc0 <col:41> 'const limb':'const int' lvalue Var 0x2ac4b4ffc30 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2ac4b502c38 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b502ef0 <line:649:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b502d10 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b502cf8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b502cb0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b502cd0 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b502ed0 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b502e88 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b502e60 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2ac4b502e40 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2ac4b502df0 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2ac4b502dd8 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2ac4b502d90 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2ac4b502d78 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2ac4b502d30 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2ac4b502d50 <col:27> 'int' 3
|   |   |       `-IntegerLiteral 0x2ac4b502db0 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2ac4b502ea8 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2ac4b5030d8 <line:651:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b502f80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b502f68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b502f20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b502f40 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b5030b8 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b503070 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b503048 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b503030 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b503000 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b502fe8 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b502fa0 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b502fc0 <col:26> 'int' 4
|   |   `-IntegerLiteral 0x2ac4b503090 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5033c0 <line:652:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b503168 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b503150 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b503108 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b503128 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b5033a0 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2ac4b503358 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2ac4b503338 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2ac4b5032e0 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2ac4b5032b8 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2ac4b503298 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2ac4b503248 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2ac4b503230 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2ac4b5031e8 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2ac4b5031d0 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2ac4b503188 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2ac4b5031a8 <col:28> 'int' 4
|   |   |   |       `-IntegerLiteral 0x2ac4b503208 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2ac4b503320 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2ac4b503300 <col:41> 'const limb':'const int' lvalue Var 0x2ac4b4ffc30 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2ac4b503378 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b503630 <line:653:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b503450 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b503438 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5033f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b503410 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b503610 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b5035c8 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b5035a0 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2ac4b503580 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2ac4b503530 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2ac4b503518 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2ac4b5034d0 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2ac4b5034b8 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2ac4b503470 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2ac4b503490 <col:27> 'int' 4
|   |   |       `-IntegerLiteral 0x2ac4b5034f0 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2ac4b5035e8 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2ac4b503818 <line:655:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5036c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5036a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b503660 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b503680 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b5037f8 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b5037b0 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b503788 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b503770 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b503740 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b503728 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b5036e0 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b503700 <col:26> 'int' 5
|   |   `-IntegerLiteral 0x2ac4b5037d0 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b503b00 <line:656:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5038a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b503890 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b503848 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b503868 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b503ae0 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2ac4b503a98 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2ac4b503a78 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2ac4b503a20 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2ac4b5039f8 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2ac4b5039d8 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2ac4b503988 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2ac4b503970 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2ac4b503928 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2ac4b503910 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2ac4b5038c8 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2ac4b5038e8 <col:28> 'int' 5
|   |   |   |       `-IntegerLiteral 0x2ac4b503948 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2ac4b503a60 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2ac4b503a40 <col:41> 'const limb':'const int' lvalue Var 0x2ac4b4ffc30 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2ac4b503ab8 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b503d70 <line:657:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b503b90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b503b78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b503b30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b503b50 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b503d50 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b503d08 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b503ce0 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2ac4b503cc0 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2ac4b503c70 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2ac4b503c58 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2ac4b503c10 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2ac4b503bf8 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2ac4b503bb0 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2ac4b503bd0 <col:27> 'int' 5
|   |   |       `-IntegerLiteral 0x2ac4b503c30 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2ac4b503d28 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2ac4b503f58 <line:659:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b503e00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b503de8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b503da0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b503dc0 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b503f38 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b503ef0 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b503ec8 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b503eb0 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b503e80 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b503e68 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b503e20 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b503e40 <col:26> 'int' 6
|   |   `-IntegerLiteral 0x2ac4b503f10 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b504240 <line:660:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b503fe8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b503fd0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b503f88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b503fa8 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b504220 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2ac4b5041d8 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2ac4b5041b8 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2ac4b504160 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2ac4b504138 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2ac4b504118 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2ac4b5040c8 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2ac4b5040b0 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2ac4b504068 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2ac4b504050 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2ac4b504008 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2ac4b504028 <col:28> 'int' 6
|   |   |   |       `-IntegerLiteral 0x2ac4b504088 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2ac4b5041a0 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2ac4b504180 <col:41> 'const limb':'const int' lvalue Var 0x2ac4b4ffc30 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2ac4b5041f8 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b5044b0 <line:661:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5042d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5042b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b504270 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b504290 <col:9> 'int' 8
|   | `-BinaryOperator 0x2ac4b504490 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b504448 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b504420 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2ac4b504400 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2ac4b5043b0 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2ac4b504398 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2ac4b504350 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2ac4b504338 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2ac4b5042f0 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2ac4b504310 <col:27> 'int' 6
|   |   |       `-IntegerLiteral 0x2ac4b504370 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2ac4b504468 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2ac4b504698 <line:663:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b504540 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b504528 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5044e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b504500 <col:9> 'int' 8
|   | `-BinaryOperator 0x2ac4b504678 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b504630 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b504608 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5045f0 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b5045c0 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b5045a8 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b504560 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b504580 <col:26> 'int' 7
|   |   `-IntegerLiteral 0x2ac4b504650 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5bb1b0 <line:664:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5baf58 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5baf40 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5046c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5046e8 <col:9> 'int' 8
|   | `-BinaryOperator 0x2ac4b5bb190 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2ac4b5bb148 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2ac4b5bb128 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2ac4b5bb0d0 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2ac4b5bb0a8 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2ac4b5bb088 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2ac4b5bb038 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2ac4b5bb020 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2ac4b5bafd8 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2ac4b5bafc0 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2ac4b5baf78 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2ac4b5baf98 <col:28> 'int' 7
|   |   |   |       `-IntegerLiteral 0x2ac4b5baff8 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2ac4b5bb110 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2ac4b5bb0f0 <col:41> 'const limb':'const int' lvalue Var 0x2ac4b4ffc30 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2ac4b5bb168 <col:58> 'int' 6
|   |-BinaryOperator 0x2ac4b5bb3d8 <line:669:5, col:43> 'u64':'int' '='
|   | |-DeclRefExpr 0x2ac4b5bb1e0 <col:5> 'u64':'int' lvalue Var 0x2ac4b4fff70 'overflow1' 'u64':'int'
|   | `-BinaryOperator 0x2ac4b5bb3b8 <col:17, col:43> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b5bb370 <col:17, col:38> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b5bb348 <col:18, col:37> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2ac4b5bb328 <col:25, col:37> 'int'
|   |   |     `-BinaryOperator 0x2ac4b5bb2d8 <col:26, col:35> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2ac4b5bb2c0 <col:26, col:30> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2ac4b5bb278 <col:26, col:30> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2ac4b5bb260 <col:26> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2ac4b5bb218 <col:26> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2ac4b5bb238 <col:29> 'int' 7
|   |   |       `-IntegerLiteral 0x2ac4b5bb298 <col:35> 'int' 64
|   |   `-IntegerLiteral 0x2ac4b5bb390 <col:43> 'int' 52
|   |-CompoundAssignOperator 0x2ac4b5bb550 <line:671:5, col:36> 'u64':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5bb3f8 <col:5> 'u64':'int' lvalue Var 0x2ac4b4fff70 'overflow1' 'u64':'int'
|   | `-BinaryOperator 0x2ac4b5bb530 <col:18, col:36> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b5bb4e8 <col:18, col:31> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b5bb4c0 <col:19, col:30> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5bb4a8 <col:26, col:30> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2ac4b5bb478 <col:26, col:30> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b5bb460 <col:26> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2ac4b5bb418 <col:26> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2ac4b5bb438 <col:29> 'int' 8
|   |   `-IntegerLiteral 0x2ac4b5bb508 <col:36> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5bb7d8 <line:672:5, col:61> 'u64':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5bb580 <col:5> 'u64':'int' lvalue Var 0x2ac4b4fff70 'overflow1' 'u64':'int'
|   | `-BinaryOperator 0x2ac4b5bb7b8 <col:18, col:61> 'int' '<<'
|   |   |-ParenExpr 0x2ac4b5bb770 <col:18, col:56> 'int'
|   |   | `-BinaryOperator 0x2ac4b5bb750 <col:19, col:44> 'int' '&'
|   |   |   |-ParenExpr 0x2ac4b5bb6f8 <col:19, col:40> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2ac4b5bb6d0 <col:20, col:39> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2ac4b5bb6b0 <col:27, col:39> 'int'
|   |   |   |     `-BinaryOperator 0x2ac4b5bb660 <col:28, col:37> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2ac4b5bb648 <col:28, col:32> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2ac4b5bb600 <col:28, col:32> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2ac4b5bb5e8 <col:28> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2ac4b5bb5a0 <col:28> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2ac4b5bb5c0 <col:31> 'int' 8
|   |   |   |       `-IntegerLiteral 0x2ac4b5bb620 <col:37> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2ac4b5bb738 <col:44> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2ac4b5bb718 <col:44> 'const limb':'const int' lvalue Var 0x2ac4b4ffc30 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2ac4b5bb790 <col:61> 'int' 6
|   |-BinaryOperator 0x2ac4b5bba00 <line:673:5, col:43> 'u64':'int' '='
|   | |-DeclRefExpr 0x2ac4b5bb808 <col:5> 'u64':'int' lvalue Var 0x2ac4b4fffe8 'overflow2' 'u64':'int'
|   | `-BinaryOperator 0x2ac4b5bb9e0 <col:17, col:43> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2ac4b5bb998 <col:17, col:38> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2ac4b5bb970 <col:18, col:37> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2ac4b5bb950 <col:25, col:37> 'int'
|   |   |     `-BinaryOperator 0x2ac4b5bb900 <col:26, col:35> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2ac4b5bb8e8 <col:26, col:30> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2ac4b5bb8a0 <col:26, col:30> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2ac4b5bb888 <col:26> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2ac4b5bb840 <col:26> 'const int *':'const int *' lvalue ParmVar 0x2ac4b4ffd78 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2ac4b5bb860 <col:29> 'int' 8
|   |   |       `-IntegerLiteral 0x2ac4b5bb8c0 <col:35> 'int' 64
|   |   `-IntegerLiteral 0x2ac4b5bb9b8 <col:43> 'int' 52
|   |-CompoundAssignOperator 0x2ac4b5bba80 <line:675:5, col:19> 'u64':'int' '<<=' ComputeLHSTy='u64':'int' ComputeResultTy='u64':'int'
|   | |-DeclRefExpr 0x2ac4b5bba20 <col:5> 'u64':'int' lvalue Var 0x2ac4b4fff70 'overflow1' 'u64':'int'
|   | `-IntegerLiteral 0x2ac4b5bba40 <col:19> 'int' 1
|   |-CompoundAssignOperator 0x2ac4b5bbb10 <line:676:5, col:19> 'u64':'int' '<<=' ComputeLHSTy='u64':'int' ComputeResultTy='u64':'int'
|   | |-DeclRefExpr 0x2ac4b5bbab0 <col:5> 'u64':'int' lvalue Var 0x2ac4b4fffe8 'overflow2' 'u64':'int'
|   | `-IntegerLiteral 0x2ac4b5bbad0 <col:19> 'int' 1
|   |-CompoundAssignOperator 0x2ac4b5bbbf8 <line:678:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bbba0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bbb88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bbb40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bbb60 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2ac4b5bbbe0 <col:15> 'u64':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bbbc0 <col:15> 'u64':'int' lvalue Var 0x2ac4b4fff70 'overflow1' 'u64':'int'
|   |-CompoundAssignOperator 0x2ac4b5bbce0 <line:679:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bbc88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bbc70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bbc28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bbc48 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b5bbcc8 <col:15> 'u64':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bbca8 <col:15> 'u64':'int' lvalue Var 0x2ac4b4fffe8 'overflow2' 'u64':'int'
|   |-CompoundAssignOperator 0x2ac4b5bbe70 <line:681:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bbd70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bbd58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bbd10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bbd30 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b5bbe50 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5bbe38 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bbdf0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bbdd8 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5bbd90 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5bbdb0 <col:19> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b5bbe10 <col:25> 'int' 58
|   `-CompoundAssignOperator 0x2ac4b5bbf58 <line:682:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2ac4b5bbf00 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b5bbee8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b5bbea0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b4ffd00 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2ac4b5bbec0 <col:9> 'int' 0
|     `-ImplicitCastExpr 0x2ac4b5bbf40 <col:15> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x2ac4b5bbf20 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|-FunctionDecl 0x2ac4b5bc240 <line:690:1, line:695:1> line:690:13 used felem_square_reduce 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b5bc100 <col:33, col:39> col:39 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5bc178 <col:44, col:56> col:56 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b5bc5c8 <line:691:1, line:695:1>
|   |-DeclStmt 0x2ac4b5bc380 <line:692:5, col:19>
|   | `-VarDecl 0x2ac4b5bc318 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5bc450 <line:693:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5bc438 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5bc398 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5bc480 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5bc3b8 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5bc318 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5bc498 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bc3f0 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5bc178 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x2ac4b5bc550 <line:694:5, col:26> 'void'
|     |-ImplicitCastExpr 0x2ac4b5bc538 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b5bc4b0 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x2ac4b5bc580 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2ac4b5bc4d0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5bc100 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2ac4b5bc5b0 <col:23> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x2ac4b5bc598 <col:23> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2ac4b5bc4f0 <col:23> 'largefelem':'int [9]' lvalue Var 0x2ac4b5bc318 'tmp' 'largefelem':'int [9]'
|-FunctionDecl 0x2ac4b5bc818 <line:697:1, line:702:1> line:697:13 used felem_mul_reduce 'void (limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b5bc600 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5bc678 <col:41, col:53> col:53 used in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b5bc6f0 <col:58, col:70> col:70 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b5bcbf0 <line:698:1, line:702:1>
|   |-DeclStmt 0x2ac4b5bc960 <line:699:5, col:19>
|   | `-VarDecl 0x2ac4b5bc8f8 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5bca80 <line:700:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5bca68 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5bc978 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5bcab8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5bc998 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5bc8f8 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5bcad0 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5bc9d0 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5bc678 'in1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5bcae8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bc9f0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5bc6f0 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x2ac4b5bcb78 <line:701:5, col:26> 'void'
|     |-ImplicitCastExpr 0x2ac4b5bcb60 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b5bcb00 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x2ac4b5bcba8 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2ac4b5bcb20 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5bc600 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2ac4b5bcbd8 <col:23> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x2ac4b5bcbc0 <col:23> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2ac4b5bcb40 <col:23> 'largefelem':'int [9]' lvalue Var 0x2ac4b5bc8f8 'tmp' 'largefelem':'int [9]'
|-FunctionDecl 0x2ac4b5bcd68 <line:712:1, line:810:1> line:712:13 used felem_inv 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b5bcc28 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5bcca0 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b5ca320 <line:713:1, line:810:1>
|   |-DeclStmt 0x2ac4b5c70a8 <line:714:5, col:36>
|   | |-VarDecl 0x2ac4b5bce40 <col:5, col:11> col:11 used ftmp 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5bceb8 <col:5, col:17> col:17 used ftmp2 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5c6fa0 <col:5, col:24> col:24 used ftmp3 'felem':'limb [9]'
|   | `-VarDecl 0x2ac4b5c7018 <col:5, col:31> col:31 used ftmp4 'felem':'limb [9]'
|   |-DeclStmt 0x2ac4b5c7138 <line:715:5, col:19>
|   | `-VarDecl 0x2ac4b5c70d0 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-DeclStmt 0x2ac4b5c71d0 <line:716:5, col:15>
|   | `-VarDecl 0x2ac4b5c7168 <col:5, col:14> col:14 used i 'unsigned int'
|   |-CallExpr 0x2ac4b5c7278 <line:718:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7260 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c71e8 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c72a8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7208 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c72c0 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5c7240 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5bcca0 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5c7368 <line:719:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7350 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c72d8 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c7398 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c72f8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c73c8 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c73b0 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7330 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c7478 <line:720:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7460 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c73e0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c74b0 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7400 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c74c8 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5c7420 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5bcca0 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5c74f8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c74e0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7440 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c7588 <line:721:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7570 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7510 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c75b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7530 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c75e8 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c75d0 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7550 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c76c0 <line:722:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c76a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7600 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c76f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7620 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c7720 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c7708 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7658 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c77b0 <line:723:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7798 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7738 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c77e0 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7758 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c7810 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c77f8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7778 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c78a0 <line:724:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7888 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7828 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c78d0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7848 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c7900 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c78e8 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7868 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c79b0 <line:725:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7998 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7918 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c79e8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7938 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c7a00 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5c7958 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5bcca0 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5c7a30 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c7a18 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7978 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c7ac0 <line:726:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7aa8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7a48 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c7af0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7a68 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c7b20 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c7b08 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7a88 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c7bb0 <line:727:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7b98 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7b38 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c7be0 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7b58 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c7c10 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c7bf8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7b78 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c7ca0 <line:728:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7c88 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7c28 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c7cd0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7c48 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c7d00 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c7ce8 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7c68 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c7d90 <line:730:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7d78 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7d18 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c7dc0 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7d38 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c7df0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c7dd8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7d58 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c7e98 <line:731:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7e80 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7e08 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c7ec8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7e28 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c7ef8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c7ee0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7e60 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c7f88 <line:732:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c7f70 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7f10 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c7fb8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c7f30 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c7fe8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c7fd0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c7f50 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c8078 <line:733:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8060 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8000 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c80a8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8020 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c80d8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c80c0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8040 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c8188 <line:734:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8170 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c80f0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c81c0 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8110 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c81f0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c81d8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c8130 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c8220 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c8208 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8150 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c82b0 <line:735:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8298 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8238 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c82e0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8258 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c8310 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c82f8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8278 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c83a0 <line:737:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8388 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8328 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c83d0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8348 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c8400 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c83e8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8368 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c8490 <line:738:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8478 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8418 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c84c0 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8438 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c84f0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c84d8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8458 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c8580 <line:739:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8568 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8508 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c85b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8528 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c85e0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c85c8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8548 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c8670 <line:740:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8658 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c85f8 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c86a0 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8618 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c86d0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c86b8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8638 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c8760 <line:741:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8748 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c86e8 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c8790 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8708 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c87c0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c87a8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8728 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c8850 <line:742:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8838 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c87d8 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c8880 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c87f8 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c88b0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c8898 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8818 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c8940 <line:743:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8928 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c88c8 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c8970 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c88e8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c89a0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c8988 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8908 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c8a30 <line:744:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8a18 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c89b8 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c8a60 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c89d8 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c8a90 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c8a78 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c89f8 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c8b20 <line:745:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8b08 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8aa8 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c8b50 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8ac8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c8b80 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c8b68 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8ae8 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c8c28 <line:746:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8c10 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8b98 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c8c58 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8bb8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c7018 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c8c88 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c8c70 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8bf0 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c8d38 <line:747:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8d20 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8ca0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c8d70 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8cc0 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c8da0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c8d88 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c8ce0 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c8dd0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c8db8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8d00 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5bce40 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c8e60 <line:748:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8e48 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8de8 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c8e90 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8e08 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c7018 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c8ec0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c8ea8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8e28 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c8f50 <line:749:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c8f38 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8ed8 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c8f80 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c8ef8 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c2f98 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c2f80 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c8f18 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5c7018 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c3028 <line:750:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c3010 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2fb0 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c3058 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2fd0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c7018 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c3088 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c3070 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c2ff0 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c3138 <line:751:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c3120 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c30a0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c3170 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c30c0 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c31a0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c3188 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c30e0 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c31d0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c31b8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c3100 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c3260 <line:752:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c3248 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c31e8 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c3290 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c3208 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c32c0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c32a8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c3228 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c3350 <line:753:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c3338 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c32d8 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c3380 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c32f8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c33b0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c3398 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c3318 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x2ac4b5c3730 <line:755:5, line:758:5>
|   | |-BinaryOperator 0x2ac4b5c3440 <line:755:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2ac4b5c33c8 <col:10> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c3428 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c3400 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2ac4b5c34d8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2ac4b5c34a8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c3460 <col:17> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c34c0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c3480 <col:21> 'int' 8
|   | |-UnaryOperator 0x2ac4b5c3518 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2ac4b5c34f8 <col:24> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | `-CompoundStmt 0x2ac4b5c3710 <col:29, line:758:5>
|   |   |-CallExpr 0x2ac4b5c35a8 <line:756:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b5c3590 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c3530 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2ac4b5c35d8 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c3550 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x2ac4b5c3608 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5c35f0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2ac4b5c3570 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x2ac4b5c3698 <line:757:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x2ac4b5c3680 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c3620 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x2ac4b5c36c8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c3640 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x2ac4b5c36f8 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x2ac4b5c36e0 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2ac4b5c3660 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c3800 <line:759:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c37e8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c3768 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c3838 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c3788 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c3868 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c3850 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c37a8 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c3898 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c3880 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c37c8 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c3928 <line:760:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c3910 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c38b0 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c3958 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c38d0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c3988 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c3970 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c38f0 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c3a18 <line:761:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c3a00 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c39a0 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c3a48 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c39c0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c3a78 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c3a60 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c39e0 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x2ac4b5c3de0 <line:763:5, line:766:5>
|   | |-BinaryOperator 0x2ac4b5c3af0 <line:763:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2ac4b5c3a90 <col:10> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c3ad8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c3ab0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2ac4b5c3b88 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2ac4b5c3b58 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c3b10 <col:17> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c3b70 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c3b30 <col:21> 'int' 16
|   | |-UnaryOperator 0x2ac4b5c3bc8 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2ac4b5c3ba8 <col:25> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | `-CompoundStmt 0x2ac4b5c3dc0 <col:30, line:766:5>
|   |   |-CallExpr 0x2ac4b5c3c58 <line:764:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b5c3c40 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c3be0 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2ac4b5c3c88 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c3c00 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x2ac4b5c3cb8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5c3ca0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2ac4b5c3c20 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x2ac4b5c3d48 <line:765:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x2ac4b5c3d30 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c3cd0 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x2ac4b5c3d78 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c3cf0 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x2ac4b5c3da8 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x2ac4b5c3d90 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2ac4b5c3d10 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c3eb0 <line:767:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c3e98 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c3e18 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c3ee8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c3e38 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c3f18 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c3f00 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c3e58 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c3f48 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c3f30 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c3e78 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c3fd8 <line:768:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c3fc0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c3f60 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c4008 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c3f80 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c4038 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c4020 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c3fa0 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c40c8 <line:769:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c40b0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4050 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c40f8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4070 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c4128 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c4110 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c4090 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x2ac4b5c4490 <line:771:5, line:774:5>
|   | |-BinaryOperator 0x2ac4b5c41a0 <line:771:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2ac4b5c4140 <col:10> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c4188 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c4160 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2ac4b5c4238 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2ac4b5c4208 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c41c0 <col:17> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c4220 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c41e0 <col:21> 'int' 32
|   | |-UnaryOperator 0x2ac4b5c4278 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2ac4b5c4258 <col:25> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | `-CompoundStmt 0x2ac4b5c4470 <col:30, line:774:5>
|   |   |-CallExpr 0x2ac4b5c4308 <line:772:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b5c42f0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c4290 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2ac4b5c4338 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c42b0 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x2ac4b5c4368 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5c4350 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2ac4b5c42d0 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x2ac4b5c43f8 <line:773:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x2ac4b5c43e0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c4380 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x2ac4b5c4428 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c43a0 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x2ac4b5c4458 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x2ac4b5c4440 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2ac4b5c43c0 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c4560 <line:775:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c4548 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c44c8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c4598 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c44e8 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c45c8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c45b0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c4508 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c45f8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c45e0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c4528 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c4688 <line:776:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c4670 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4610 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c46b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4630 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c46e8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c46d0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c4650 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c4778 <line:777:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c4760 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4700 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c47a8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4720 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c47d8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c47c0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c4740 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x2ac4b5c4b40 <line:779:5, line:782:5>
|   | |-BinaryOperator 0x2ac4b5c4850 <line:779:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2ac4b5c47f0 <col:10> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c4838 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c4810 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2ac4b5c48e8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2ac4b5c48b8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c4870 <col:17> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c48d0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c4890 <col:21> 'int' 64
|   | |-UnaryOperator 0x2ac4b5c4928 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2ac4b5c4908 <col:25> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | `-CompoundStmt 0x2ac4b5c4b20 <col:30, line:782:5>
|   |   |-CallExpr 0x2ac4b5c49b8 <line:780:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b5c49a0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c4940 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2ac4b5c49e8 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c4960 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x2ac4b5c4a18 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5c4a00 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2ac4b5c4980 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x2ac4b5c4aa8 <line:781:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x2ac4b5c4a90 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c4a30 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x2ac4b5c4ad8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c4a50 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x2ac4b5c4b08 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x2ac4b5c4af0 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2ac4b5c4a70 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c4c10 <line:783:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c4bf8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4b78 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c4c48 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4b98 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c4c78 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c4c60 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c4bb8 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c4ca8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c4c90 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c4bd8 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c4d38 <line:784:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c4d20 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4cc0 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c4d68 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4ce0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c4d98 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c4d80 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c4d00 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c4e28 <line:785:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c4e10 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4db0 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c4e58 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c4dd0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c4e88 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c4e70 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c4df0 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x2ac4b5c9220 <line:787:5, line:790:5>
|   | |-BinaryOperator 0x2ac4b5c4f00 <line:787:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2ac4b5c4ea0 <col:10> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c4ee8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c4ec0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2ac4b5c8fc8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2ac4b5c4f68 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c4f20 <col:17> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c8fb0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c4f40 <col:21> 'int' 128
|   | |-UnaryOperator 0x2ac4b5c9008 <col:26, col:27> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2ac4b5c8fe8 <col:26> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | `-CompoundStmt 0x2ac4b5c9200 <col:31, line:790:5>
|   |   |-CallExpr 0x2ac4b5c9098 <line:788:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b5c9080 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c9020 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2ac4b5c90c8 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c9040 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x2ac4b5c90f8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5c90e0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2ac4b5c9060 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x2ac4b5c9188 <line:789:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x2ac4b5c9170 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c9110 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x2ac4b5c91b8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c9130 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x2ac4b5c91e8 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x2ac4b5c91d0 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2ac4b5c9150 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c92f0 <line:791:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c92d8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c9258 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c9328 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c9278 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c9358 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c9340 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c9298 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c9388 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c9370 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c92b8 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c9418 <line:792:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c9400 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c93a0 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c9448 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c93c0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c9478 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c9460 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c93e0 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c9508 <line:793:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c94f0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c9490 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c9538 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c94b0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c9568 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c9550 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c94d0 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x2ac4b5c98d0 <line:795:5, line:798:5>
|   | |-BinaryOperator 0x2ac4b5c95e0 <line:795:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2ac4b5c9580 <col:10> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c95c8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c95a0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2ac4b5c9678 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2ac4b5c9648 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c9600 <col:17> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c9660 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c9620 <col:21> 'int' 256
|   | |-UnaryOperator 0x2ac4b5c96b8 <col:26, col:27> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2ac4b5c9698 <col:26> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | `-CompoundStmt 0x2ac4b5c98b0 <col:31, line:798:5>
|   |   |-CallExpr 0x2ac4b5c9748 <line:796:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b5c9730 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c96d0 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2ac4b5c9778 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c96f0 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x2ac4b5c97a8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5c9790 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2ac4b5c9710 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x2ac4b5c9838 <line:797:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x2ac4b5c9820 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c97c0 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x2ac4b5c9868 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c97e0 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x2ac4b5c9898 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x2ac4b5c9880 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2ac4b5c9800 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c99a0 <line:799:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c9988 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c9908 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c99d8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c9928 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c9a08 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c99f0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c9948 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c9a38 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c9a20 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c9968 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5bceb8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c9ac8 <line:800:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c9ab0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c9a50 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c9af8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c9a70 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c9b28 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c9b10 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c9a90 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-ForStmt 0x2ac4b5c9e90 <line:802:5, line:805:5>
|   | |-BinaryOperator 0x2ac4b5c9ba0 <line:802:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2ac4b5c9b40 <col:10> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c9b88 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c9b60 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2ac4b5c9c38 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2ac4b5c9c08 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c9bc0 <col:17> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2ac4b5c9c20 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5c9be0 <col:21> 'int' 9
|   | |-UnaryOperator 0x2ac4b5c9c78 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2ac4b5c9c58 <col:24> 'unsigned int' lvalue Var 0x2ac4b5c7168 'i' 'unsigned int'
|   | `-CompoundStmt 0x2ac4b5c9e70 <col:29, line:805:5>
|   |   |-CallExpr 0x2ac4b5c9d08 <line:803:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b5c9cf0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c9c90 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2ac4b5c9d38 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5c9cb0 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x2ac4b5c9d68 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b5c9d50 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2ac4b5c9cd0 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x2ac4b5c9df8 <line:804:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x2ac4b5c9de0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c9d80 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x2ac4b5c9e28 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5c9da0 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x2ac4b5c9e58 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x2ac4b5c9e40 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2ac4b5c9dc0 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c9f60 <line:806:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c9f48 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c9ec8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c9f98 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c9ee8 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c9fc8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c9fb0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c9f08 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c9ff8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c9fe0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c9f28 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5c7018 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5ca088 <line:807:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5ca070 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5ca010 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5ca0b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5ca030 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5ca0e8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5ca0d0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5ca050 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5ca198 <line:808:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5ca180 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5ca100 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5ca1d0 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5ca120 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5ca200 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5ca1e8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5ca140 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5c6fa0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5ca218 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5ca160 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5bcca0 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x2ac4b5ca2a8 <line:809:5, col:26> 'void'
|     |-ImplicitCastExpr 0x2ac4b5ca290 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b5ca230 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x2ac4b5ca2d8 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2ac4b5ca250 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5bcc28 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2ac4b5ca308 <col:23> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x2ac4b5ca2f0 <col:23> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2ac4b5ca270 <col:23> 'largefelem':'int [9]' lvalue Var 0x2ac4b5c70d0 'tmp' 'largefelem':'int [9]'
|-VarDecl 0x2ac4b5ca548 <line:813:1, line:817:1> line:813:20 used kPrime 'const felem':'limb const[9]' static cinit
| `-InitListExpr 0x2ac4b5ca7c8 <col:29, line:817:1> 'const felem':'limb const[9]'
|   |-ImplicitCastExpr 0x2ac4b5ca850 <line:814:5> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x2ac4b5ca5b0 <col:5> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x2ac4b5ca868 <col:25> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x2ac4b5ca5d8 <col:25> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x2ac4b5ca880 <col:45> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x2ac4b5ca600 <col:45> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x2ac4b5ca898 <line:815:5> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x2ac4b5ca628 <col:5> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x2ac4b5ca8b0 <col:25> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x2ac4b5ca650 <col:25> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x2ac4b5ca8c8 <col:45> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x2ac4b5ca678 <col:45> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x2ac4b5ca8e0 <line:816:5> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x2ac4b5ca6a0 <col:5> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x2ac4b5ca8f8 <col:25> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x2ac4b5ca6c8 <col:25> 'long long' 288230376151711743
|   `-ImplicitCastExpr 0x2ac4b5ca910 <col:45> 'limb':'int' <IntegralCast>
|     `-IntegerLiteral 0x2ac4b5ca6f0 <col:45> 'long long' 144115188075855871
|-FunctionDecl 0x2ac4b5caa18 <line:825:1, line:891:1> line:825:13 used felem_is_zero 'limb (const limb *)' static
| |-ParmVarDecl 0x2ac4b5ca938 <col:27, col:39> col:39 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b5c5ec0 <line:826:1, line:891:1>
|   |-DeclStmt 0x2ac4b5cab50 <line:827:5, col:15>
|   | `-VarDecl 0x2ac4b5caae8 <col:5, col:11> col:11 used ftmp 'felem':'limb [9]'
|   |-DeclStmt 0x2ac4b5cac70 <line:828:5, col:23>
|   | |-VarDecl 0x2ac4b5cab78 <col:5, col:10> col:10 used is_zero 'limb':'int'
|   | `-VarDecl 0x2ac4b5cabf0 <col:5, col:19> col:19 used is_p 'limb':'int'
|   |-CallExpr 0x2ac4b5cad18 <line:829:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5cad00 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5cac88 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5cad48 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5caca8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5cad60 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cace0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5ca938 'in' 'const limb *':'const limb *'
|   |-CompoundAssignOperator 0x2ac4b5caed8 <line:831:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cadd8 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cadc0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cad78 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cad98 <col:10> 'int' 0
|   | `-BinaryOperator 0x2ac4b5caeb8 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5caea0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cae58 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cae40 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cadf8 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cae18 <col:21> 'int' 8
|   |   `-IntegerLiteral 0x2ac4b5cae78 <col:27> 'int' 57
|   |-CompoundAssignOperator 0x2ac4b5cafd8 <line:832:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5caf68 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5caf50 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5caf08 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5caf28 <col:10> 'int' 8
|   | `-ImplicitCastExpr 0x2ac4b5cafc0 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5caf88 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b4ead60 'bottom57bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5cb168 <line:834:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cb068 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cb050 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cb008 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cb028 <col:10> 'int' 1
|   | `-BinaryOperator 0x2ac4b5cb148 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5cb130 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cb0e8 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cb0d0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cb088 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cb0a8 <col:21> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b5cb108 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5cb250 <line:835:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cb1f8 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cb1e0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cb198 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cb1b8 <col:10> 'int' 0
|   | `-ImplicitCastExpr 0x2ac4b5cb238 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cb218 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5cb3e0 <line:836:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cb2e0 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cb2c8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cb280 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cb2a0 <col:10> 'int' 2
|   | `-BinaryOperator 0x2ac4b5cb3c0 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5cb3a8 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cb360 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cb348 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cb300 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cb320 <col:21> 'int' 1
|   |   `-IntegerLiteral 0x2ac4b5cb380 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5cb4c8 <line:837:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cb470 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cb458 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cb410 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cb430 <col:10> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b5cb4b0 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cb490 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5cb658 <line:838:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cb558 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cb540 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cb4f8 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cb518 <col:10> 'int' 3
|   | `-BinaryOperator 0x2ac4b5cb638 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5cb620 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cb5d8 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cb5c0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cb578 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cb598 <col:21> 'int' 2
|   |   `-IntegerLiteral 0x2ac4b5cb5f8 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5cb740 <line:839:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cb6e8 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cb6d0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cb688 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cb6a8 <col:10> 'int' 2
|   | `-ImplicitCastExpr 0x2ac4b5cb728 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cb708 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5cb8d0 <line:840:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cb7d0 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cb7b8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cb770 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cb790 <col:10> 'int' 4
|   | `-BinaryOperator 0x2ac4b5cb8b0 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5cb898 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cb850 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cb838 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cb7f0 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cb810 <col:21> 'int' 3
|   |   `-IntegerLiteral 0x2ac4b5cb870 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5cb9b8 <line:841:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cb960 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cb948 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cb900 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cb920 <col:10> 'int' 3
|   | `-ImplicitCastExpr 0x2ac4b5cb9a0 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cb980 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5cbb48 <line:842:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cba48 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cba30 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cb9e8 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cba08 <col:10> 'int' 5
|   | `-BinaryOperator 0x2ac4b5cbb28 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5cbb10 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cbac8 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cbab0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cba68 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cba88 <col:21> 'int' 4
|   |   `-IntegerLiteral 0x2ac4b5cbae8 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5cbc30 <line:843:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cbbd8 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cbbc0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cbb78 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cbb98 <col:10> 'int' 4
|   | `-ImplicitCastExpr 0x2ac4b5cbc18 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cbbf8 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5cbdc0 <line:844:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cbcc0 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cbca8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cbc60 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cbc80 <col:10> 'int' 6
|   | `-BinaryOperator 0x2ac4b5cbda0 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5cbd88 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cbd40 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cbd28 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cbce0 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cbd00 <col:21> 'int' 5
|   |   `-IntegerLiteral 0x2ac4b5cbd60 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5cbea8 <line:845:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cbe50 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cbe38 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cbdf0 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cbe10 <col:10> 'int' 5
|   | `-ImplicitCastExpr 0x2ac4b5cbe90 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cbe70 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5cc038 <line:846:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cbf38 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cbf20 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cbed8 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cbef8 <col:10> 'int' 7
|   | `-BinaryOperator 0x2ac4b5cc018 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5cc000 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cbfb8 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cbfa0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cbf58 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cbf78 <col:21> 'int' 6
|   |   `-IntegerLiteral 0x2ac4b5cbfd8 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5cc120 <line:847:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cc0c8 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cc0b0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cc068 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cc088 <col:10> 'int' 6
|   | `-ImplicitCastExpr 0x2ac4b5cc108 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cc0e8 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5cc2b0 <line:848:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cc1b0 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cc198 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cc150 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cc170 <col:10> 'int' 8
|   | `-BinaryOperator 0x2ac4b5cc290 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5cc278 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cc230 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cc218 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cc1d0 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cc1f0 <col:21> 'int' 7
|   |   `-IntegerLiteral 0x2ac4b5cc250 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5cc398 <line:849:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cc340 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cc328 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2ac4b5cc2e0 <col:5> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x2ac4b5cc300 <col:10> 'int' 7
|   | `-ImplicitCastExpr 0x2ac4b5cc380 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cc360 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b5cc428 <line:858:5, col:15> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5cc3c8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-IntegerLiteral 0x2ac4b5cc400 <col:15> 'int' 0
|   |-CompoundAssignOperator 0x2ac4b5cc500 <line:859:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cc448 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x2ac4b5cc4e8 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b5cc4c8 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b5cc4b0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5cc468 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x2ac4b5cc488 <col:21> 'int' 0
|   |-CompoundAssignOperator 0x2ac4b5cc5e8 <line:860:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cc530 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x2ac4b5cc5d0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b5cc5b0 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b5cc598 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5cc550 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x2ac4b5cc570 <col:21> 'int' 1
|   |-CompoundAssignOperator 0x2ac4b5cc6d0 <line:861:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cc618 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x2ac4b5cc6b8 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b5cc698 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b5cc680 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5cc638 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x2ac4b5cc658 <col:21> 'int' 2
|   |-CompoundAssignOperator 0x2ac4b5cc7b8 <line:862:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cc700 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x2ac4b5cc7a0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b5cc780 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b5cc768 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5cc720 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x2ac4b5cc740 <col:21> 'int' 3
|   |-CompoundAssignOperator 0x2ac4b5cc8a0 <line:863:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cc7e8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x2ac4b5cc888 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b5cc868 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b5cc850 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5cc808 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x2ac4b5cc828 <col:21> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b5cc988 <line:864:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cc8d0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x2ac4b5cc970 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b5cc950 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b5cc938 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5cc8f0 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x2ac4b5cc910 <col:21> 'int' 5
|   |-CompoundAssignOperator 0x2ac4b5cca70 <line:865:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cc9b8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x2ac4b5cca58 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b5cca38 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b5cca20 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5cc9d8 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x2ac4b5cc9f8 <col:21> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b5ccb58 <line:866:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5ccaa0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x2ac4b5ccb40 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b5ccb20 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b5ccb08 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5ccac0 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x2ac4b5ccae0 <col:21> 'int' 7
|   |-CompoundAssignOperator 0x2ac4b5ccc40 <line:867:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5ccb88 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x2ac4b5ccc28 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2ac4b5ccc08 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x2ac4b5ccbf0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5ccba8 <col:16> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x2ac4b5ccbc8 <col:21> 'int' 8
|   |-UnaryOperator 0x2ac4b5ccc90 <line:869:5, col:12> 'limb':'int' postfix '--'
|   | `-DeclRefExpr 0x2ac4b5ccc70 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5ccdb0 <line:874:5, col:33> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5ccca8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5ccd90 <col:15, col:33> 'int' '-'
|   |   |-IntegerLiteral 0x2ac4b5cccc8 <col:15> 'int' 0
|   |   `-ParenExpr 0x2ac4b5ccd70 <col:19, col:33> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5ccd50 <col:20, col:31> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5ccd38 <col:20> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b5cccf0 <col:20> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   |       `-IntegerLiteral 0x2ac4b5ccd10 <col:31> 'int' 63
|   |-BinaryOperator 0x2ac4b5ccf58 <line:876:5, col:30> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5ccdd0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5ccf38 <col:12, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5ccf08 <col:12, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cce68 <col:12, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cce50 <col:12> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cce08 <col:12> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cce28 <col:17> 'int' 0
|   |   `-ImplicitCastExpr 0x2ac4b5ccf20 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5ccee8 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5cced0 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5cce88 <col:22> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5ccea8 <col:29> 'int' 0
|   |-CompoundAssignOperator 0x2ac4b5c5100 <line:877:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5c4f90 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5c50e0 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5c50b0 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5c5010 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5c4ff8 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5c4fb0 <col:13> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5c4fd0 <col:18> 'int' 1
|   |   `-ImplicitCastExpr 0x2ac4b5c50c8 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5c5090 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5c5078 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5c5030 <col:23> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5c5050 <col:30> 'int' 1
|   |-CompoundAssignOperator 0x2ac4b5c52a0 <line:878:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5c5130 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5c5280 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5c5250 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5c51b0 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5c5198 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5c5150 <col:13> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5c5170 <col:18> 'int' 2
|   |   `-ImplicitCastExpr 0x2ac4b5c5268 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5c5230 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5c5218 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5c51d0 <col:23> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5c51f0 <col:30> 'int' 2
|   |-CompoundAssignOperator 0x2ac4b5c5440 <line:879:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5c52d0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5c5420 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5c53f0 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5c5350 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5c5338 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5c52f0 <col:13> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5c5310 <col:18> 'int' 3
|   |   `-ImplicitCastExpr 0x2ac4b5c5408 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5c53d0 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5c53b8 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5c5370 <col:23> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5c5390 <col:30> 'int' 3
|   |-CompoundAssignOperator 0x2ac4b5c55e0 <line:880:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5c5470 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5c55c0 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5c5590 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5c54f0 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5c54d8 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5c5490 <col:13> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5c54b0 <col:18> 'int' 4
|   |   `-ImplicitCastExpr 0x2ac4b5c55a8 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5c5570 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5c5558 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5c5510 <col:23> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5c5530 <col:30> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b5c5780 <line:881:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5c5610 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5c5760 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5c5730 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5c5690 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5c5678 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5c5630 <col:13> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5c5650 <col:18> 'int' 5
|   |   `-ImplicitCastExpr 0x2ac4b5c5748 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5c5710 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5c56f8 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5c56b0 <col:23> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5c56d0 <col:30> 'int' 5
|   |-CompoundAssignOperator 0x2ac4b5c5920 <line:882:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5c57b0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5c5900 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5c58d0 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5c5830 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5c5818 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5c57d0 <col:13> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5c57f0 <col:18> 'int' 6
|   |   `-ImplicitCastExpr 0x2ac4b5c58e8 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5c58b0 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5c5898 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5c5850 <col:23> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5c5870 <col:30> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b5c5ac0 <line:883:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5c5950 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5c5aa0 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5c5a70 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5c59d0 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5c59b8 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5c5970 <col:13> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5c5990 <col:18> 'int' 7
|   |   `-ImplicitCastExpr 0x2ac4b5c5a88 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5c5a50 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5c5a38 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5c59f0 <col:23> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5c5a10 <col:30> 'int' 7
|   |-CompoundAssignOperator 0x2ac4b5c5c60 <line:884:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5c5af0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5c5c40 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5c5c10 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5c5b70 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5c5b58 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5c5b10 <col:13> 'felem':'limb [9]' lvalue Var 0x2ac4b5caae8 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x2ac4b5c5b30 <col:18> 'int' 8
|   |   `-ImplicitCastExpr 0x2ac4b5c5c28 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5c5bf0 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5c5bd8 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5c5b90 <col:23> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5c5bb0 <col:30> 'int' 8
|   |-UnaryOperator 0x2ac4b5c5cb0 <line:886:5, col:9> 'limb':'int' postfix '--'
|   | `-DeclRefExpr 0x2ac4b5c5c90 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5c5dd0 <line:887:5, col:27> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5c5cc8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5c5db0 <col:12, col:27> 'int' '-'
|   |   |-IntegerLiteral 0x2ac4b5c5ce8 <col:12> 'int' 0
|   |   `-ParenExpr 0x2ac4b5c5d90 <col:16, col:27> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5c5d70 <col:17, col:25> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5c5d58 <col:17> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b5c5d10 <col:17> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   |       `-IntegerLiteral 0x2ac4b5c5d30 <col:25> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5c5e48 <line:889:5, col:16> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5c5df0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x2ac4b5c5e30 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5c5e10 <col:16> 'limb':'int' lvalue Var 0x2ac4b5cabf0 'is_p' 'limb':'int'
|   `-ReturnStmt 0x2ac4b5c5eb0 <line:890:5, col:12>
|     `-ImplicitCastExpr 0x2ac4b5c5e98 <col:12> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x2ac4b5c5e78 <col:12> 'limb':'int' lvalue Var 0x2ac4b5cab78 'is_zero' 'limb':'int'
|-FunctionDecl 0x2ac4b5c6108 <line:893:1, line:896:1> line:893:12 used felem_is_zero_int 'int (const void *)' static
| |-ParmVarDecl 0x2ac4b5c6058 <col:30, col:42> col:42 used in 'const void *'
| `-CompoundStmt 0x2ac4b5c63d8 <line:894:1, line:896:1>
|   `-ReturnStmt 0x2ac4b5c63c8 <line:895:5, col:48>
|     `-CStyleCastExpr 0x2ac4b5c63a0 <col:12, col:48> 'int' <NoOp>
|       `-ParenExpr 0x2ac4b5c6380 <col:17, col:48> 'int'
|         `-BinaryOperator 0x2ac4b5c6328 <col:18, col:47> 'int' '&'
|           |-CallExpr 0x2ac4b5c6250 <col:18, col:34> 'limb':'int'
|           | |-ImplicitCastExpr 0x2ac4b5c6238 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x2ac4b5c61c8 <col:18> 'limb (const limb *)' Function 0x2ac4b5caa18 'felem_is_zero' 'limb (const limb *)'
|           | `-ImplicitCastExpr 0x2ac4b5c6290 <col:32> 'const limb *':'const limb *' <BitCast>
|           |   `-ImplicitCastExpr 0x2ac4b5c6278 <col:32> 'const void *' <LValueToRValue>
|           |     `-DeclRefExpr 0x2ac4b5c61e8 <col:32> 'const void *' lvalue ParmVar 0x2ac4b5c6058 'in' 'const void *'
|           `-ParenExpr 0x2ac4b5c6308 <col:38, col:47> 'limb':'int'
|             `-CStyleCastExpr 0x2ac4b5c62e0 <col:39, col:46> 'limb':'int' <NoOp>
|               `-IntegerLiteral 0x2ac4b5c62a8 <col:46> 'int' 1
|-FunctionDecl 0x2ac4b5c6540 <line:903:1, line:1030:1> line:903:13 used felem_contract 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b5c6400 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5c6478 <col:39, col:51> col:51 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b5d00d0 <line:904:1, line:1030:1>
|   |-DeclStmt 0x2ac4b5c6790 <line:905:5, col:32>
|   | |-VarDecl 0x2ac4b5c6618 <col:5, col:10> col:10 used is_p 'limb':'int'
|   | |-VarDecl 0x2ac4b5c6690 <col:5, col:16> col:16 used is_greater 'limb':'int'
|   | `-VarDecl 0x2ac4b5c6708 <col:5, col:28> col:28 used sign 'limb':'int'
|   |-DeclStmt 0x2ac4b5c68e8 <line:906:5, col:47>
|   | `-VarDecl 0x2ac4b5c67b8 <col:5, col:45> col:23 used two58 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2ac4b5c68c8 <col:31, col:45> 'limb':'int' '<<'
|   |     |-ParenExpr 0x2ac4b5c6880 <col:31, col:40> 'limb':'int'
|   |     | `-CStyleCastExpr 0x2ac4b5c6858 <col:32, col:39> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x2ac4b5c6820 <col:39> 'int' 1
|   |     `-IntegerLiteral 0x2ac4b5c68a0 <col:45> 'int' 58
|   |-CallExpr 0x2ac4b5c6978 <line:908:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c6960 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c6900 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c69a8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5c6920 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2ac4b5c69c0 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5c6940 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5c6478 'in' 'const limb *':'const limb *'
|   |-CompoundAssignOperator 0x2ac4b5c6b38 <line:910:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c6a38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c6a20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c69d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c69f8 <col:9> 'int' 0
|   | `-BinaryOperator 0x2ac4b5c6b18 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5c6b00 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5c6ab8 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5c6aa0 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5c6a58 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5c6a78 <col:19> 'int' 8
|   |   `-IntegerLiteral 0x2ac4b5c6ad8 <col:25> 'int' 57
|   |-CompoundAssignOperator 0x2ac4b5c6c20 <line:911:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c6bc8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c6bb0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c6b68 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c6b88 <col:9> 'int' 8
|   | `-ImplicitCastExpr 0x2ac4b5c6c08 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5c6be8 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4ead60 'bottom57bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5c6db0 <line:913:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c6cb0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c6c98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c6c50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c6c70 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b5c6d90 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5c6d78 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5c6d30 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5c6d18 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5c6cd0 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5c6cf0 <col:19> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b5c6d50 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5c6e98 <line:914:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c6e40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c6e28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c6de0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c6e00 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2ac4b5c6e80 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5c6e60 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5bcfe8 <line:915:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c6f28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c6f10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c6ec8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c6ee8 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b5bcfc8 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5bcfb0 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bcf68 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bcf50 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5c6f48 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5c6f68 <col:19> 'int' 1
|   |   `-IntegerLiteral 0x2ac4b5bcf88 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5bd0d0 <line:916:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bd078 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bd060 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bd018 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bd038 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b5bd0b8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bd098 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5bd260 <line:917:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bd160 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bd148 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bd100 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bd120 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b5bd240 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5bd228 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bd1e0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bd1c8 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5bd180 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5bd1a0 <col:19> 'int' 2
|   |   `-IntegerLiteral 0x2ac4b5bd200 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5bd348 <line:918:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bd2f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bd2d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bd290 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bd2b0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2ac4b5bd330 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bd310 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5bd4d8 <line:919:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bd3d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bd3c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bd378 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bd398 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b5bd4b8 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5bd4a0 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bd458 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bd440 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5bd3f8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5bd418 <col:19> 'int' 3
|   |   `-IntegerLiteral 0x2ac4b5bd478 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5bd5c0 <line:920:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bd568 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bd550 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bd508 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bd528 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2ac4b5bd5a8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bd588 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5bd750 <line:921:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bd650 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bd638 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bd5f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bd610 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b5bd730 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5bd718 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bd6d0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bd6b8 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5bd670 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5bd690 <col:19> 'int' 4
|   |   `-IntegerLiteral 0x2ac4b5bd6f0 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5bd838 <line:922:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bd7e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bd7c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bd780 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bd7a0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2ac4b5bd820 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bd800 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5bd9c8 <line:923:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bd8c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bd8b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bd868 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bd888 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b5bd9a8 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5bd990 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bd948 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bd930 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5bd8e8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5bd908 <col:19> 'int' 5
|   |   `-IntegerLiteral 0x2ac4b5bd968 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5bdab0 <line:924:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bda58 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bda40 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bd9f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bda18 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2ac4b5bda98 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bda78 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5bdc40 <line:925:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bdb40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bdb28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bdae0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bdb00 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b5bdc20 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5bdc08 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bdbc0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bdba8 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5bdb60 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5bdb80 <col:19> 'int' 6
|   |   `-IntegerLiteral 0x2ac4b5bdbe0 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5bdd28 <line:926:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bdcd0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bdcb8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bdc70 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bdc90 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2ac4b5bdd10 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bdcf0 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2ac4b5bdeb8 <line:927:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bddb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bdda0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bdd58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bdd78 <col:9> 'int' 8
|   | `-BinaryOperator 0x2ac4b5bde98 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5bde80 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bde38 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bde20 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5bddd8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5bddf8 <col:19> 'int' 7
|   |   `-IntegerLiteral 0x2ac4b5bde58 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x2ac4b5bdfa0 <line:928:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bdf48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bdf30 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bdee8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bdf08 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2ac4b5bdf88 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5bdf68 <col:15> 'const limb':'const int' lvalue Var 0x2ac4b4eae30 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2ac4b5be158 <line:941:5, col:29> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5bdfd0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5be138 <col:12, col:29> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5be108 <col:12, col:17> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5be068 <col:12, col:17> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5be050 <col:12> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5be008 <col:12> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5be028 <col:16> 'int' 0
|   |   `-ImplicitCastExpr 0x2ac4b5be120 <col:21, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5be0e8 <col:21, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5be0d0 <col:21> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5be088 <col:21> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5be0a8 <col:28> 'int' 0
|   |-CompoundAssignOperator 0x2ac4b5be2e8 <line:942:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5be178 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5be2c8 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5be298 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5be1f8 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5be1e0 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5be198 <col:13> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5be1b8 <col:17> 'int' 1
|   |   `-ImplicitCastExpr 0x2ac4b5be2b0 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5be278 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5be260 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5be218 <col:22> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5be238 <col:29> 'int' 1
|   |-CompoundAssignOperator 0x2ac4b5be488 <line:943:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5be318 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5be468 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5be438 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5be398 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5be380 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5be338 <col:13> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5be358 <col:17> 'int' 2
|   |   `-ImplicitCastExpr 0x2ac4b5be450 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5be418 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5be400 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5be3b8 <col:22> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5be3d8 <col:29> 'int' 2
|   |-CompoundAssignOperator 0x2ac4b5be628 <line:944:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5be4b8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5be608 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5be5d8 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5be538 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5be520 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5be4d8 <col:13> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5be4f8 <col:17> 'int' 3
|   |   `-ImplicitCastExpr 0x2ac4b5be5f0 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5be5b8 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5be5a0 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5be558 <col:22> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5be578 <col:29> 'int' 3
|   |-CompoundAssignOperator 0x2ac4b5be7c8 <line:945:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5be658 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5be7a8 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5be778 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5be6d8 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5be6c0 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5be678 <col:13> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5be698 <col:17> 'int' 4
|   |   `-ImplicitCastExpr 0x2ac4b5be790 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5be758 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5be740 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5be6f8 <col:22> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5be718 <col:29> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b5be968 <line:946:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5be7f8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5be948 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5be918 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5be878 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5be860 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5be818 <col:13> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5be838 <col:17> 'int' 5
|   |   `-ImplicitCastExpr 0x2ac4b5be930 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5be8f8 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5be8e0 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5be898 <col:22> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5be8b8 <col:29> 'int' 5
|   |-CompoundAssignOperator 0x2ac4b5beb08 <line:947:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5be998 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5beae8 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5beab8 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bea18 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bea00 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5be9b8 <col:13> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5be9d8 <col:17> 'int' 6
|   |   `-ImplicitCastExpr 0x2ac4b5bead0 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5bea98 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5bea80 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5bea38 <col:22> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5bea58 <col:29> 'int' 6
|   |-CompoundAssignOperator 0x2ac4b5beca8 <line:948:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5beb38 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5bec88 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5bec58 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bebb8 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5beba0 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5beb58 <col:13> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5beb78 <col:17> 'int' 7
|   |   `-ImplicitCastExpr 0x2ac4b5bec70 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5bec38 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5bec20 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5bebd8 <col:22> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5bebf8 <col:29> 'int' 7
|   |-CompoundAssignOperator 0x2ac4b5bee48 <line:949:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5becd8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5bee28 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x2ac4b5bedf8 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bed58 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bed40 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5becf8 <col:13> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5bed18 <col:17> 'int' 8
|   |   `-ImplicitCastExpr 0x2ac4b5bee10 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2ac4b5bedd8 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b5bedc0 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b5bed78 <col:22> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x2ac4b5bed98 <col:29> 'int' 8
|   |-UnaryOperator 0x2ac4b5bee98 <line:951:5, col:9> 'limb':'int' postfix '--'
|   | `-DeclRefExpr 0x2ac4b5bee78 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5ccfd0 <line:952:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5beeb0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5bef30 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5bef18 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5beed0 <col:13> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5beef0 <col:21> 'int' 32
|   |-CompoundAssignOperator 0x2ac4b5cd0a0 <line:953:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cd000 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5cd080 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5cd068 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5cd020 <col:13> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5cd040 <col:21> 'int' 16
|   |-CompoundAssignOperator 0x2ac4b5cd170 <line:954:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cd0d0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5cd150 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5cd138 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5cd0f0 <col:13> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5cd110 <col:21> 'int' 8
|   |-CompoundAssignOperator 0x2ac4b5cd240 <line:955:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cd1a0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5cd220 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5cd208 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5cd1c0 <col:13> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5cd1e0 <col:21> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b5cd310 <line:956:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cd270 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5cd2f0 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5cd2d8 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5cd290 <col:13> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5cd2b0 <col:21> 'int' 2
|   |-CompoundAssignOperator 0x2ac4b5cd3e0 <line:957:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cd340 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5cd3c0 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5cd3a8 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5cd360 <col:13> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5cd380 <col:21> 'int' 1
|   |-BinaryOperator 0x2ac4b5cd518 <line:958:5, col:27> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5cd410 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5cd4f8 <col:12, col:27> 'int' '-'
|   |   |-IntegerLiteral 0x2ac4b5cd430 <col:12> 'int' 0
|   |   `-ParenExpr 0x2ac4b5cd4d8 <col:16, col:27> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5cd4b8 <col:17, col:25> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5cd4a0 <col:17> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b5cd458 <col:17> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |       `-IntegerLiteral 0x2ac4b5cd478 <col:25> 'int' 63
|   |-BinaryOperator 0x2ac4b5cd5a8 <line:959:5, col:13> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5cd538 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5cd590 <col:12, col:13> 'limb':'int' prefix '~' cannot overflow
|   |   `-ImplicitCastExpr 0x2ac4b5cd578 <col:13> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5cd558 <col:13> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cd680 <line:963:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cd628 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cd610 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cd5c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cd5e8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2ac4b5cd668 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cd648 <col:15> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cd768 <line:964:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cd710 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cd6f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cd6b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cd6d0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b5cd750 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cd730 <col:15> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cd850 <line:965:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cd7f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cd7e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cd798 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cd7b8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2ac4b5cd838 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cd818 <col:15> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cd938 <line:966:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cd8e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cd8c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cd880 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cd8a0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2ac4b5cd920 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cd900 <col:15> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cda20 <line:967:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cd9c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cd9b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cd968 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cd988 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2ac4b5cda08 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cd9e8 <col:15> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cdb08 <line:968:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cdab0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cda98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cda50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cda70 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2ac4b5cdaf0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cdad0 <col:15> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cdbf0 <line:969:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cdb98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cdb80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cdb38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cdb58 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2ac4b5cdbd8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cdbb8 <col:15> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cdcd8 <line:970:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cdc80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cdc68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cdc20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cdc40 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2ac4b5cdcc0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cdca0 <col:15> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cddc0 <line:971:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cdd68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cdd50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cdd08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cdd28 <col:9> 'int' 8
|   | `-ImplicitCastExpr 0x2ac4b5cdda8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5cdd88 <col:15> 'limb':'int' lvalue Var 0x2ac4b5c6618 'is_p' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5cdf08 <line:977:5, col:28> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5cddf0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5cdee8 <col:18, col:28> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x2ac4b5cded0 <col:18, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cde88 <col:18, col:23> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cde70 <col:18> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2ac4b5cde28 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x2ac4b5cde48 <col:22> 'int' 8
|   |   `-IntegerLiteral 0x2ac4b5cdea8 <col:28> 'int' 57
|   |-CompoundAssignOperator 0x2ac4b5cdfc8 <line:978:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cdf28 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5cdfa8 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5cdf90 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5cdf48 <col:19> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5cdf68 <col:33> 'int' 32
|   |-CompoundAssignOperator 0x2ac4b5ce098 <line:979:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5cdff8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5ce078 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5ce060 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5ce018 <col:19> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5ce038 <col:33> 'int' 16
|   |-CompoundAssignOperator 0x2ac4b5ce168 <line:980:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5ce0c8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5ce148 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5ce130 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5ce0e8 <col:19> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5ce108 <col:33> 'int' 8
|   |-CompoundAssignOperator 0x2ac4b5ce238 <line:981:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5ce198 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5ce218 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5ce200 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5ce1b8 <col:19> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5ce1d8 <col:33> 'int' 4
|   |-CompoundAssignOperator 0x2ac4b5ce308 <line:982:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5ce268 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5ce2e8 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5ce2d0 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5ce288 <col:19> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5ce2a8 <col:33> 'int' 2
|   |-CompoundAssignOperator 0x2ac4b5ce3d8 <line:983:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2ac4b5ce338 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5ce3b8 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x2ac4b5ce3a0 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b5ce358 <col:19> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x2ac4b5ce378 <col:33> 'int' 1
|   |-BinaryOperator 0x2ac4b5ce510 <line:984:5, col:39> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5ce408 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x2ac4b5ce4f0 <col:18, col:39> 'int' '-'
|   |   |-IntegerLiteral 0x2ac4b5ce428 <col:18> 'int' 0
|   |   `-ParenExpr 0x2ac4b5ce4d0 <col:22, col:39> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5ce4b0 <col:23, col:37> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5ce498 <col:23> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2ac4b5ce450 <col:23> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |       `-IntegerLiteral 0x2ac4b5ce470 <col:37> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5ce6a0 <line:986:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5ce590 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5ce578 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5ce530 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5ce550 <col:9> 'int' 0
|   | `-BinaryOperator 0x2ac4b5ce680 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b5ce650 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5ce610 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5ce5f8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5ce5b0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x2ac4b5ce5d0 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x2ac4b5ce668 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5ce630 <col:27> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5ce840 <line:987:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5ce730 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5ce718 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5ce6d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5ce6f0 <col:9> 'int' 1
|   | `-BinaryOperator 0x2ac4b5ce820 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b5ce7f0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5ce7b0 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5ce798 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5ce750 <col:15> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x2ac4b5ce770 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x2ac4b5ce808 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5ce7d0 <col:27> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5ce9e0 <line:988:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5ce8d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5ce8b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5ce870 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5ce890 <col:9> 'int' 2
|   | `-BinaryOperator 0x2ac4b5ce9c0 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b5ce990 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5ce950 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5ce938 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5ce8f0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x2ac4b5ce910 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x2ac4b5ce9a8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5ce970 <col:27> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5ceb80 <line:989:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cea70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cea58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cea10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cea30 <col:9> 'int' 3
|   | `-BinaryOperator 0x2ac4b5ceb60 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b5ceb30 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5ceaf0 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cead8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cea90 <col:15> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x2ac4b5ceab0 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x2ac4b5ceb48 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5ceb10 <col:27> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5ced20 <line:990:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cec10 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cebf8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cebb0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cebd0 <col:9> 'int' 4
|   | `-BinaryOperator 0x2ac4b5ced00 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b5cecd0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cec90 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cec78 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cec30 <col:15> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cec50 <col:22> 'int' 4
|   |   `-ImplicitCastExpr 0x2ac4b5cece8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5cecb0 <col:27> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5ceec0 <line:991:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cedb0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5ced98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5ced50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5ced70 <col:9> 'int' 5
|   | `-BinaryOperator 0x2ac4b5ceea0 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b5cee70 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5cee30 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cee18 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cedd0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cedf0 <col:22> 'int' 5
|   |   `-ImplicitCastExpr 0x2ac4b5cee88 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5cee50 <col:27> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5beff0 <line:992:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cef50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cef38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5ceef0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cef10 <col:9> 'int' 6
|   | `-BinaryOperator 0x2ac4b5befd0 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b5befa0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bef60 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5cefb8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5cef70 <col:15> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x2ac4b5cef90 <col:22> 'int' 6
|   |   `-ImplicitCastExpr 0x2ac4b5befb8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5bef80 <col:27> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5bf190 <line:993:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bf080 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bf068 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bf020 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bf040 <col:9> 'int' 7
|   | `-BinaryOperator 0x2ac4b5bf170 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b5bf140 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bf100 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bf0e8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5bf0a0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x2ac4b5bf0c0 <col:22> 'int' 7
|   |   `-ImplicitCastExpr 0x2ac4b5bf158 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5bf120 <col:27> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5bf330 <line:994:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bf220 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bf208 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bf1c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bf1e0 <col:9> 'int' 8
|   | `-BinaryOperator 0x2ac4b5bf310 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x2ac4b5bf2e0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2ac4b5bf2a0 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2ac4b5bf288 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b5bf240 <col:15> 'const felem':'limb const[9]' lvalue Var 0x2ac4b5ca548 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x2ac4b5bf260 <col:22> 'int' 8
|   |   `-ImplicitCastExpr 0x2ac4b5bf2f8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5bf2c0 <col:27> 'limb':'int' lvalue Var 0x2ac4b5c6690 'is_greater' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5bf4b0 <line:997:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5bf360 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5bf498 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5bf478 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5bf458 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5bf440 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5bf3f8 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5bf3e0 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5bf398 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5bf3b8 <col:18> 'int' 0
|   |       `-IntegerLiteral 0x2ac4b5bf418 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5bf618 <line:998:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bf530 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bf518 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bf4d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bf4f0 <col:9> 'int' 0
|   | `-ParenExpr 0x2ac4b5bf5f8 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5bf5d8 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5bf5a8 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5bf550 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5bf5c0 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5bf588 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5bf7b0 <line:999:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bf6f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bf6d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bf690 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bf6b0 <col:9> 'int' 1
|   | `-ParenExpr 0x2ac4b5bf790 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x2ac4b5bf770 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x2ac4b5bf710 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b5bf758 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5bf738 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5bf918 <line:1000:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5bf7e0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5bf900 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5bf8e0 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5bf8c0 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5bf8a8 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5bf860 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5bf848 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5bf800 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5bf820 <col:18> 'int' 1
|   |       `-IntegerLiteral 0x2ac4b5bf880 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5bfa68 <line:1001:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bf998 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bf980 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bf938 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bf958 <col:9> 'int' 1
|   | `-ParenExpr 0x2ac4b5bfa48 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5bfa28 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5bf9f8 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5bf9b8 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5bfa10 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5bf9d8 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5bfbb8 <line:1002:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bfaf8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bfae0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bfa98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bfab8 <col:9> 'int' 2
|   | `-ParenExpr 0x2ac4b5bfb98 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x2ac4b5bfb78 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x2ac4b5bfb18 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b5bfb60 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5bfb40 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5bfd20 <line:1003:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5bfbe8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5bfd08 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5bfce8 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5bfcc8 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5bfcb0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5bfc68 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5bfc50 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5bfc08 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5bfc28 <col:18> 'int' 2
|   |       `-IntegerLiteral 0x2ac4b5bfc88 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5bfe70 <line:1004:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bfda0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bfd88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bfd40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bfd60 <col:9> 'int' 2
|   | `-ParenExpr 0x2ac4b5bfe50 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5bfe30 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5bfe00 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5bfdc0 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5bfe18 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5bfde0 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5bffc0 <line:1005:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5bff00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5bfee8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5bfea0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5bfec0 <col:9> 'int' 3
|   | `-ParenExpr 0x2ac4b5bffa0 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x2ac4b5bff80 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x2ac4b5bff20 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b5bff68 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5bff48 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5c0128 <line:1006:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5bfff0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5c0110 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5c00f0 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5c00d0 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5c00b8 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5c0070 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5c0058 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5c0010 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5c0030 <col:18> 'int' 3
|   |       `-IntegerLiteral 0x2ac4b5c0090 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5c0278 <line:1007:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c01a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c0190 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c0148 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c0168 <col:9> 'int' 3
|   | `-ParenExpr 0x2ac4b5c0258 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5c0238 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5c0208 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5c01c8 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5c0220 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5c01e8 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5c03c8 <line:1008:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c0308 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c02f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c02a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c02c8 <col:9> 'int' 4
|   | `-ParenExpr 0x2ac4b5c03a8 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x2ac4b5c0388 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x2ac4b5c0328 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b5c0370 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5c0350 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5c0530 <line:1009:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5c03f8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5c0518 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5c04f8 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5c04d8 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5c04c0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5c0478 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5c0460 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5c0418 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5c0438 <col:18> 'int' 4
|   |       `-IntegerLiteral 0x2ac4b5c0498 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5c0680 <line:1010:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c05b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c0598 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c0550 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c0570 <col:9> 'int' 4
|   | `-ParenExpr 0x2ac4b5c0660 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5c0640 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5c0610 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5c05d0 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5c0628 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5c05f0 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5c07d0 <line:1011:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c0710 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c06f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c06b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c06d0 <col:9> 'int' 5
|   | `-ParenExpr 0x2ac4b5c07b0 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x2ac4b5c0790 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x2ac4b5c0730 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b5c0778 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5c0758 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5c0938 <line:1012:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5c0800 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5c0920 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5c0900 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5c08e0 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5c08c8 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5c0880 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5c0868 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5c0820 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5c0840 <col:18> 'int' 0
|   |       `-IntegerLiteral 0x2ac4b5c08a0 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5c0a88 <line:1013:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c09b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c09a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c0958 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c0978 <col:9> 'int' 5
|   | `-ParenExpr 0x2ac4b5c0a68 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5c0a48 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5c0a18 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5c09d8 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5c0a30 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5c09f8 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5c0bd8 <line:1014:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c0b18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c0b00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c0ab8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c0ad8 <col:9> 'int' 6
|   | `-ParenExpr 0x2ac4b5c0bb8 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x2ac4b5c0b98 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x2ac4b5c0b38 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b5c0b80 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5c0b60 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5c0d40 <line:1015:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5c0c08 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5c0d28 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5c0d08 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5c0ce8 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5c0cd0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5c0c88 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5c0c70 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5c0c28 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5c0c48 <col:18> 'int' 6
|   |       `-IntegerLiteral 0x2ac4b5c0ca8 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5c0e90 <line:1016:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c0dc0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c0da8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c0d60 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c0d80 <col:9> 'int' 6
|   | `-ParenExpr 0x2ac4b5c0e70 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5c0e50 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5c0e20 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5c0de0 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5c0e38 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5c0e00 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cf080 <line:1017:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5c0f20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5c0f08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5c0ec0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5c0ee0 <col:9> 'int' 7
|   | `-ParenExpr 0x2ac4b5cf060 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x2ac4b5cf040 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x2ac4b5cefe0 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b5cf028 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5cf008 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5cf1e8 <line:1018:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5cf0b0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5cf1d0 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5cf1b0 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5cf190 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5cf178 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5cf130 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5cf118 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5cf0d0 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5cf0f0 <col:18> 'int' 7
|   |       `-IntegerLiteral 0x2ac4b5cf150 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5cf338 <line:1019:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cf268 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cf250 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cf208 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cf228 <col:9> 'int' 7
|   | `-ParenExpr 0x2ac4b5cf318 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5cf2f8 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5cf2c8 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5cf288 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5cf2e0 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5cf2a8 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cf488 <line:1020:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cf3c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cf3b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cf368 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cf388 <col:9> 'int' 8
|   | `-ParenExpr 0x2ac4b5cf468 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x2ac4b5cf448 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x2ac4b5cf3e8 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b5cf430 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5cf410 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5cf5f0 <line:1021:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5cf4b8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5cf5d8 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5cf5b8 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5cf598 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5cf580 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5cf538 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5cf520 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5cf4d8 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5cf4f8 <col:18> 'int' 5
|   |       `-IntegerLiteral 0x2ac4b5cf558 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5cf740 <line:1022:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cf670 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cf658 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cf610 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cf630 <col:9> 'int' 5
|   | `-ParenExpr 0x2ac4b5cf720 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5cf700 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5cf6d0 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5cf690 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5cf6e8 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5cf6b0 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cf890 <line:1023:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cf7d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cf7b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cf770 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cf790 <col:9> 'int' 6
|   | `-ParenExpr 0x2ac4b5cf870 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x2ac4b5cf850 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x2ac4b5cf7f0 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b5cf838 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5cf818 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5cf9f8 <line:1024:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5cf8c0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5cf9e0 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5cf9c0 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5cf9a0 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5cf988 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5cf940 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5cf928 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5cf8e0 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5cf900 <col:18> 'int' 6
|   |       `-IntegerLiteral 0x2ac4b5cf960 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5cfb48 <line:1025:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cfa78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cfa60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cfa18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cfa38 <col:9> 'int' 6
|   | `-ParenExpr 0x2ac4b5cfb28 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5cfb08 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5cfad8 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5cfa98 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5cfaf0 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5cfab8 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x2ac4b5cfc98 <line:1026:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cfbd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cfbc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cfb78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cfb98 <col:9> 'int' 7
|   | `-ParenExpr 0x2ac4b5cfc78 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x2ac4b5cfc58 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x2ac4b5cfbf8 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b5cfc40 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5cfc20 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   |-BinaryOperator 0x2ac4b5cfe00 <line:1027:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5cfcc8 <col:5> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   | `-UnaryOperator 0x2ac4b5cfde8 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x2ac4b5cfdc8 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x2ac4b5cfda8 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2ac4b5cfd90 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2ac4b5cfd48 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b5cfd30 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b5cfce8 <col:14> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x2ac4b5cfd08 <col:18> 'int' 7
|   |       `-IntegerLiteral 0x2ac4b5cfd68 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2ac4b5cff50 <line:1028:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2ac4b5cfe80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2ac4b5cfe68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b5cfe20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2ac4b5cfe40 <col:9> 'int' 7
|   | `-ParenExpr 0x2ac4b5cff30 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x2ac4b5cff10 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x2ac4b5cfee0 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b5cfea0 <col:16> 'const limb':'const int' lvalue Var 0x2ac4b5c67b8 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x2ac4b5cfef8 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5cfec0 <col:24> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|   `-CompoundAssignOperator 0x2ac4b5d00a0 <line:1029:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2ac4b5cffe0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2ac4b5cffc8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b5cff80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c6400 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2ac4b5cffa0 <col:9> 'int' 8
|     `-ParenExpr 0x2ac4b5d0080 <col:15, col:24> 'int'
|       `-BinaryOperator 0x2ac4b5d0060 <col:16, col:20> 'int' '&'
|         |-IntegerLiteral 0x2ac4b5d0000 <col:16> 'int' 1
|         `-ImplicitCastExpr 0x2ac4b5d0048 <col:20> 'limb':'int' <LValueToRValue>
|           `-DeclRefExpr 0x2ac4b5d0028 <col:20> 'limb':'int' lvalue Var 0x2ac4b5c6708 'sign' 'limb':'int'
|-FunctionDecl 0x2ac4b5d0858 <line:1048:1, line:1144:1> line:1049:1 used point_double 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b5d0400 <col:14, col:20> col:20 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5d0478 <col:27, col:33> col:33 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5d04f0 <col:40, col:46> col:46 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5d0568 <line:1050:14, col:26> col:26 used x_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b5d05e0 <col:32, col:44> col:44 used y_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b5d0658 <col:50, col:62> col:62 used z_in 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b5c2b58 <line:1051:1, line:1144:1>
|   |-DeclStmt 0x2ac4b5d0a48 <line:1052:5, col:25>
|   | |-VarDecl 0x2ac4b5d0950 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   | `-VarDecl 0x2ac4b5d09c8 <col:5, col:21> col:21 used tmp2 'largefelem':'int [9]'
|   |-DeclStmt 0x2ac4b5d0d68 <line:1053:5, col:49>
|   | |-VarDecl 0x2ac4b5d0a70 <col:5, col:11> col:11 used delta 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d0ae8 <col:5, col:18> col:18 used gamma 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d0b60 <col:5, col:25> col:25 used beta 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d0bd8 <col:5, col:31> col:31 used alpha 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d0c50 <col:5, col:38> col:38 used ftmp 'felem':'limb [9]'
|   | `-VarDecl 0x2ac4b5d0cc8 <col:5, col:44> col:44 used ftmp2 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d0e10 <line:1055:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d0df8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d0d80 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d0e40 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d0da0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0c50 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d0e58 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d0dd8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d0568 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5d0f00 <line:1056:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d0ee8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d0e70 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d0f30 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d0e90 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0cc8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d0f48 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d0ec8 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d0568 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5c0f88 <line:1059:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c0f70 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d0f60 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c0fb8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d0f80 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c0fd0 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d0fb8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d0658 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5c1078 <line:1060:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1060 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c0fe8 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c10a8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1008 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0a70 'delta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c10d8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c10c0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1040 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c1168 <line:1063:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1150 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c10f0 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c1198 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1110 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c11b0 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5c1130 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d05e0 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5c1258 <line:1064:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1240 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c11c8 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c1288 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c11e8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0ae8 'gamma' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c12b8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c12a0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1220 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c1368 <line:1067:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1350 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c12d0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c13a0 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c12f0 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c13b8 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5c1310 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d0568 'x_in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5c13e8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c13d0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1330 <col:26> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0ae8 'gamma' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c1490 <line:1068:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1478 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1400 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c14c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1420 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0b60 'beta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c14f0 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c14d8 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1458 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c1580 <line:1071:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1568 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1508 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f65a0 'felem_diff64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c15b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1528 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0c50 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c15e0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c15c8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1548 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0a70 'delta' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c1670 <line:1073:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1658 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c15f8 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f1920 'felem_sum64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c16a0 <col:17> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1618 <col:17> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0cc8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c16d0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c16b8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1638 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0a70 'delta' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c17c0 <line:1075:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c17a8 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c16e8 <col:5> 'void (limb *, limb)' Function 0x2ac4b4f3988 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5c17f0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1708 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0cc8 'ftmp2' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x2ac4b5c1728 <col:27> 'int' 3
|   |-CallExpr 0x2ac4b5c18a0 <line:1077:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1888 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1808 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c18d8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1828 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c1908 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c18f0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c1848 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0c50 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c1938 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c1920 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1868 <col:26> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0cc8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c19e0 <line:1085:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c19c8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1950 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c1a10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1970 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0bd8 'alpha' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c1a40 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c1a28 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c19a8 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c1ad0 <line:1088:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1ab8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1a58 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c1b00 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1a78 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c1b30 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c1b18 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1a98 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0bd8 'alpha' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c1bc0 <line:1092:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1ba8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1b48 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c1bf0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1b68 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0c50 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c1c20 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c1c08 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1b88 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0b60 'beta' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c1cb8 <line:1093:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1ca0 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1c38 <col:5> 'void (limb *, limb)' Function 0x2ac4b4f3988 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5c1ce8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1c58 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0c50 'ftmp' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x2ac4b5c1c78 <col:26> 'int' 8
|   |-CallExpr 0x2ac4b5c1d78 <line:1095:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1d60 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1d00 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4f7d08 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c1da8 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1d20 <col:23> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c1dd8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c1dc0 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1d40 <col:28> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0c50 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c1e68 <line:1097:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1e50 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1df0 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c1e98 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5c1e10 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5d0400 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2ac4b5c1ec8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c1eb0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1e30 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c1f58 <line:1100:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c1f40 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1ee0 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f1920 'felem_sum64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c1f88 <col:17> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1f00 <col:17> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0a70 'delta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c1fb8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c1fa0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c1f20 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0ae8 'gamma' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c2048 <line:1102:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c2030 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1fd0 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c2078 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c1ff0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0c50 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c2090 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5c2010 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d05e0 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5c2120 <line:1103:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c2108 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c20a8 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f1920 'felem_sum64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c2150 <col:17> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c20c8 <col:17> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0c50 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c2168 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5c20e8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d0658 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5c21f8 <line:1105:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c21e0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2180 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c2228 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c21a0 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c2258 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c2240 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c21c0 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0c50 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c22e8 <line:1109:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c22d0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2270 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4f7d08 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c2318 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2290 <col:23> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c2348 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c2330 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c22b0 <col:28> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0a70 'delta' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c23d8 <line:1111:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c23c0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2360 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c2408 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5c2380 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5d04f0 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2ac4b5c2438 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c2420 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c23a0 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5c24d0 <line:1114:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c24b8 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2450 <col:5> 'void (limb *, limb)' Function 0x2ac4b4f3988 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5c2500 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2470 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0b60 'beta' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x2ac4b5c2490 <col:26> 'int' 4
|   |-CallExpr 0x2ac4b5c2590 <line:1116:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c2578 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2518 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f65a0 'felem_diff64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c25c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2538 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0b60 'beta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c25f0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c25d8 <col:24> 'limb *':'limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5c2558 <col:24> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5d0400 'x_out' 'limb *':'limb *'
|   |-CallExpr 0x2ac4b5c26a0 <line:1118:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c2688 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2608 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c26d8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2628 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5c2708 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5c26f0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5c2648 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0bd8 'alpha' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c2738 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c2720 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c2668 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0b60 'beta' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c27e0 <line:1125:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c27c8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2750 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5c2810 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2770 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d09c8 'tmp2' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c2840 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c2828 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c27a8 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5d0ae8 'gamma' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5c2900 <line:1130:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c28e8 <col:5> 'void (*)(int *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2858 <col:5> 'void (int *, limb)' Function 0x2ac4b4f44a8 'felem_scalar128' 'void (int *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5c2930 <col:21> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2878 <col:21> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d09c8 'tmp2' 'largefelem':'int [9]'
|   | `-IntegerLiteral 0x2ac4b5c2898 <col:27> 'int' 8
|   |-CallExpr 0x2ac4b5c29f0 <line:1136:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5c29d8 <col:5> 'void (*)(int *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2948 <col:5> 'void (int *, const int *)' Function 0x2ac4b4f94e8 'felem_diff128' 'void (int *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5c2a20 <col:19> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5c2968 <col:19> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5c2a50 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5c2a38 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5c2988 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d09c8 'tmp2' 'largefelem':'int [9]'
|   `-CallExpr 0x2ac4b5c2ae0 <line:1143:5, col:28> 'void'
|     |-ImplicitCastExpr 0x2ac4b5c2ac8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b5c2a68 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x2ac4b5c2b10 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2ac4b5c2a88 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5d0478 'y_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2ac4b5c2b40 <col:25> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x2ac4b5c2b28 <col:25> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2ac4b5c2aa8 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d0950 'tmp' 'largefelem':'int [9]'
|-FunctionDecl 0x2ac4b5c2e58 <line:1147:1, line:1154:1> line:1147:13 used copy_conditional 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x2ac4b5c2c80 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5c2cf8 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b5c2d70 <col:57, col:62> col:62 used mask 'limb':'int'
| `-CompoundStmt 0x2ac4b5d5620 <line:1148:1, line:1154:1>
|   |-DeclStmt 0x2ac4b5d5078 <line:1149:5, col:15>
|   | `-VarDecl 0x2ac4b5d5010 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x2ac4b5d55e8 <line:1150:5, line:1153:5>
|     |-BinaryOperator 0x2ac4b5d5108 <line:1150:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x2ac4b5d5090 <col:10> 'unsigned int' lvalue Var 0x2ac4b5d5010 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2ac4b5d50f0 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x2ac4b5d50c8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x2ac4b5d51a0 <col:17, line:128:17> 'int' '<'
|     | |-ImplicitCastExpr 0x2ac4b5d5170 <line:1150:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b5d5128 <col:17> 'unsigned int' lvalue Var 0x2ac4b5d5010 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2ac4b5d5188 <line:128:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x2ac4b5d5148 <col:17> 'int' 9
|     |-UnaryOperator 0x2ac4b5d51e0 <line:1150:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x2ac4b5d51c0 <col:31> 'unsigned int' lvalue Var 0x2ac4b5d5010 'i' 'unsigned int'
|     `-CompoundStmt 0x2ac4b5d55c8 <col:34, line:1153:5>
|       |-DeclStmt 0x2ac4b5d5458 <line:1151:9, col:49>
|       | `-VarDecl 0x2ac4b5d5208 <col:9, col:48> col:20 used tmp 'const limb':'const int' cinit
|       |   `-BinaryOperator 0x2ac4b5d5438 <col:26, col:48> 'int' '&'
|       |     |-ImplicitCastExpr 0x2ac4b5d5420 <col:26> 'limb':'int' <LValueToRValue>
|       |     | `-DeclRefExpr 0x2ac4b5d5270 <col:26> 'limb':'int' lvalue ParmVar 0x2ac4b5c2d70 'mask' 'limb':'int'
|       |     `-ParenExpr 0x2ac4b5d5400 <col:33, col:48> 'int'
|       |       `-BinaryOperator 0x2ac4b5d53e0 <col:34, col:47> 'int' '^'
|       |         |-ImplicitCastExpr 0x2ac4b5d53b0 <col:34, col:38> 'limb':'int' <LValueToRValue>
|       |         | `-ArraySubscriptExpr 0x2ac4b5d5300 <col:34, col:38> 'const limb':'const int' lvalue
|       |         |   |-ImplicitCastExpr 0x2ac4b5d52d0 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|       |         |   | `-DeclRefExpr 0x2ac4b5d5290 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5c2cf8 'in' 'const limb *':'const limb *'
|       |         |   `-ImplicitCastExpr 0x2ac4b5d52e8 <col:37> 'unsigned int' <LValueToRValue>
|       |         |     `-DeclRefExpr 0x2ac4b5d52b0 <col:37> 'unsigned int' lvalue Var 0x2ac4b5d5010 'i' 'unsigned int'
|       |         `-ImplicitCastExpr 0x2ac4b5d53c8 <col:42, col:47> 'limb':'int' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x2ac4b5d5390 <col:42, col:47> 'limb':'int' lvalue
|       |             |-ImplicitCastExpr 0x2ac4b5d5360 <col:42> 'limb *':'limb *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x2ac4b5d5320 <col:42> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c2c80 'out' 'limb *':'limb *'
|       |             `-ImplicitCastExpr 0x2ac4b5d5378 <col:46> 'unsigned int' <LValueToRValue>
|       |               `-DeclRefExpr 0x2ac4b5d5340 <col:46> 'unsigned int' lvalue Var 0x2ac4b5d5010 'i' 'unsigned int'
|       `-CompoundAssignOperator 0x2ac4b5d5550 <line:1152:9, col:19> 'limb':'int' '^=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-ArraySubscriptExpr 0x2ac4b5d54e0 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x2ac4b5d54b0 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x2ac4b5d5470 <col:9> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5c2c80 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x2ac4b5d54c8 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x2ac4b5d5490 <col:13> 'unsigned int' lvalue Var 0x2ac4b5d5010 'i' 'unsigned int'
|         `-ImplicitCastExpr 0x2ac4b5d5538 <col:19> 'limb':'int' <LValueToRValue>
|           `-DeclRefExpr 0x2ac4b5d5500 <col:19> 'const limb':'const int' lvalue Var 0x2ac4b5d5208 'tmp' 'const limb':'const int'
|-FunctionDecl 0x2ac4b5d5d58 <line:1167:1, line:1320:1> line:1167:13 used point_add 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x2ac4b5d5650 <col:23, col:29> col:29 used x3 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5d56c8 <col:33, col:39> col:39 used y3 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5d5740 <col:43, col:49> col:49 used z3 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b5d57b8 <line:1168:23, col:35> col:35 used x1 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b5d5830 <col:39, col:51> col:51 used y1 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b5d58a8 <col:55, col:67> col:67 used z1 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b5d5928 <line:1169:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x2ac4b5d59a0 <col:40, col:52> col:52 used x2 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b5d5a18 <col:56, col:68> col:68 used y2 'const limb *':'const limb *'
| |-ParmVarDecl 0x2ac4b5d5a90 <line:1170:23, col:35> col:35 used z2 'const limb *':'const limb *'
| `-CompoundStmt 0x2ac4b5d4ac0 <line:1171:1, line:1320:1>
|   |-DeclStmt 0x2ac4b5d62e8 <line:1172:5, col:71>
|   | |-VarDecl 0x2ac4b5d5e70 <col:5, col:11> col:11 used ftmp 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d5ee8 <col:5, col:17> col:17 used ftmp2 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d5f60 <col:5, col:24> col:24 used ftmp3 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d5fd8 <col:5, col:31> col:31 used ftmp4 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d6050 <col:5, col:38> col:38 used ftmp5 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d60c8 <col:5, col:45> col:45 used ftmp6 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d6140 <col:5, col:52> col:52 used x_out 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b5d61b8 <col:5, col:59> col:59 used y_out 'felem':'limb [9]'
|   | `-VarDecl 0x2ac4b5d6230 <col:5, col:66> col:66 used z_out 'felem':'limb [9]'
|   |-DeclStmt 0x2ac4b5d6408 <line:1173:5, col:25>
|   | |-VarDecl 0x2ac4b5d6310 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   | `-VarDecl 0x2ac4b5d6388 <col:5, col:21> col:21 used tmp2 'largefelem':'int [9]'
|   |-DeclStmt 0x2ac4b5d6628 <line:1174:5, col:50>
|   | |-VarDecl 0x2ac4b5d6430 <col:5, col:10> col:10 used x_equal 'limb':'int'
|   | |-VarDecl 0x2ac4b5d64a8 <col:5, col:19> col:19 used y_equal 'limb':'int'
|   | |-VarDecl 0x2ac4b5d6520 <col:5, col:28> col:28 used z1_is_zero 'limb':'int'
|   | `-VarDecl 0x2ac4b5d6598 <col:5, col:40> col:40 used z2_is_zero 'limb':'int'
|   |-BinaryOperator 0x2ac4b5d6710 <line:1176:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5d6640 <col:5> 'limb':'int' lvalue Var 0x2ac4b5d6520 'z1_is_zero' 'limb':'int'
|   | `-CallExpr 0x2ac4b5d66d0 <col:18, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x2ac4b5d66b8 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2ac4b5d6678 <col:18> 'limb (const limb *)' Function 0x2ac4b5caa18 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x2ac4b5d66f8 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5d6698 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d58a8 'z1' 'const limb *':'const limb *'
|   |-BinaryOperator 0x2ac4b5d6800 <line:1177:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5d6730 <col:5> 'limb':'int' lvalue Var 0x2ac4b5d6598 'z2_is_zero' 'limb':'int'
|   | `-CallExpr 0x2ac4b5d67c0 <col:18, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x2ac4b5d67a8 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2ac4b5d6768 <col:18> 'limb (const limb *)' Function 0x2ac4b5caa18 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x2ac4b5d67e8 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b5d6788 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5a90 'z2' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5d68b0 <line:1180:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d6898 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d6820 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d68e0 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d6840 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d68f8 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d6878 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d58a8 'z1' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5d69a0 <line:1181:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d6988 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d6910 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d69d0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d6930 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d6a00 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d69e8 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d6968 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   |-IfStmt 0x2ac4b5d7bf8 <line:1183:5, line:1226:5> has_else
|   | |-UnaryOperator 0x2ac4b5d6a50 <line:1183:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x2ac4b5d6a38 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2ac4b5d6a18 <col:10> 'const int' lvalue ParmVar 0x2ac4b5d5928 'mixed' 'const int'
|   | |-CompoundStmt 0x2ac4b5d7898 <col:17, line:1213:5>
|   | | |-CallExpr 0x2ac4b5d6ae0 <line:1185:9, col:29> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6ac8 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6a68 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6b10 <col:22> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6a88 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d6b28 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2ac4b5d6aa8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5a90 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x2ac4b5d6bd0 <line:1186:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6bb8 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6b40 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6c00 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6b60 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5ee8 'ftmp2' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d6c30 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2ac4b5d6c18 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2ac4b5d6b98 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x2ac4b5d6ce0 <line:1189:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6cc8 <col:9> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6c48 <col:9> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6d18 <col:19> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6c68 <col:19> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6d30 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x2ac4b5d6c88 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d57b8 'x1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x2ac4b5d6d60 <col:28> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2ac4b5d6d48 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2ac4b5d6ca8 <col:28> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5ee8 'ftmp2' 'felem':'limb [9]'
|   | | |-CallExpr 0x2ac4b5d6e08 <line:1190:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6df0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6d78 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6e38 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6d98 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5f60 'ftmp3' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d6e68 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2ac4b5d6e50 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2ac4b5d6dd0 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x2ac4b5d6f10 <line:1193:9, col:31> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6ef8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6e80 <col:9> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6f40 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6ea0 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d6f58 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2ac4b5d6ed8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d58a8 'z1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x2ac4b5d7020 <line:1194:9, col:30> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d6fd0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6f70 <col:9> 'void (limb *, const limb *)' Function 0x2ac4b4f1920 'felem_sum64' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d7050 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d6f90 <col:21> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d7068 <col:28> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2ac4b5d6fb0 <col:28> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5a90 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x2ac4b5d70f8 <line:1198:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d70e0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7080 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d7128 <col:22> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d70a0 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d7158 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2ac4b5d7140 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2ac4b5d70c0 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   | | |-CallExpr 0x2ac4b5d71e8 <line:1200:9, col:36> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d71d0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7170 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4f7d08 'felem_diff_128_64' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d7218 <col:27> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7190 <col:27> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d7248 <col:32> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2ac4b5d7230 <col:32> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2ac4b5d71b0 <col:32> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   | | |-CallExpr 0x2ac4b5d72d8 <line:1202:9, col:37> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d72c0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7260 <col:9> 'void (int *, const limb *)' Function 0x2ac4b4f7d08 'felem_diff_128_64' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d7308 <col:27> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7280 <col:27> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d7338 <col:32> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2ac4b5d7320 <col:32> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2ac4b5d72a0 <col:32> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5ee8 'ftmp2' 'felem':'limb [9]'
|   | | |-CallExpr 0x2ac4b5d73c8 <line:1204:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d73b0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7350 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d73f8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7370 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d7428 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2ac4b5d7410 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2ac4b5d7390 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x2ac4b5d74d8 <line:1207:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d74c0 <col:9> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7440 <col:9> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d7510 <col:19> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7460 <col:19> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | | |-ImplicitCastExpr 0x2ac4b5d7540 <col:24> 'const limb *':'const limb *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x2ac4b5d7528 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x2ac4b5d7480 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5ee8 'ftmp2' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d7558 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2ac4b5d74a0 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5a90 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x2ac4b5d75e8 <line:1208:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d75d0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7570 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d7618 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7590 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5ee8 'ftmp2' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x2ac4b5d7648 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2ac4b5d7630 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2ac4b5d75b0 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x2ac4b5d76f8 <line:1211:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b5d76e0 <col:9> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7660 <col:9> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2ac4b5d7730 <col:19> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b5d7680 <col:19> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | | | |-ImplicitCastExpr 0x2ac4b5d7748 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x2ac4b5d76a0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5830 'y1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x2ac4b5d7778 <col:28> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2ac4b5d7760 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2ac4b5d76c0 <col:28> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5ee8 'ftmp2' 'felem':'limb [9]'
|   | | `-CallExpr 0x2ac4b5d7820 <line:1212:9, col:32> 'void'
|   | |   |-ImplicitCastExpr 0x2ac4b5d7808 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x2ac4b5d7790 <col:9> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |   |-ImplicitCastExpr 0x2ac4b5d7850 <col:22> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x2ac4b5d77b0 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d60c8 'ftmp6' 'felem':'limb [9]'
|   | |   `-ImplicitCastExpr 0x2ac4b5d7880 <col:29> 'const int *':'const int *' <NoOp>
|   | |     `-ImplicitCastExpr 0x2ac4b5d7868 <col:29> 'int *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x2ac4b5d77e8 <col:29> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | `-CompoundStmt 0x2ac4b5d7bd0 <line:1213:12, line:1226:5>
|   |   |-CallExpr 0x2ac4b5d7990 <line:1219:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b5d7978 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5d7918 <col:9> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2ac4b5d79c0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5d7938 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5f60 'ftmp3' 'felem':'limb [9]'
|   |   | `-ImplicitCastExpr 0x2ac4b5d79d8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2ac4b5d7958 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d57b8 'x1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x2ac4b5d7a90 <line:1222:9, col:34> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b5d7a78 <col:9> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5d79f0 <col:9> 'void (limb *, const limb *, limb)' Function 0x2ac4b4f2888 'felem_scalar' 'void (limb *, const limb *, limb)'
|   |   | |-ImplicitCastExpr 0x2ac4b5d7ac8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5d7a10 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   |   | |-ImplicitCastExpr 0x2ac4b5d7ae0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2ac4b5d7a30 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d58a8 'z1' 'const limb *':'const limb *'
|   |   | `-IntegerLiteral 0x2ac4b5d7a50 <col:33> 'int' 2
|   |   `-CallExpr 0x2ac4b5d7b70 <line:1225:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x2ac4b5d7b58 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5d7af8 <col:9> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x2ac4b5d7ba0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b5d7b18 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d60c8 'ftmp6' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x2ac4b5d7bb8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |       `-DeclRefExpr 0x2ac4b5d7b38 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5830 'y1' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5d7cb8 <line:1229:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d7ca0 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d7c20 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d7cf0 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d7c40 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d7d08 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5d7c60 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d59a0 'x2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5d7d38 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d7d20 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d7c80 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d7dc8 <line:1233:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d7db0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d7d50 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4f7d08 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d7df8 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d7d70 <col:23> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d7e28 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d7e10 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d7d90 <col:28> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5f60 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d7ed0 <line:1235:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d7eb8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d7e40 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d7f00 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d7e60 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5fd8 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d7f30 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d7f18 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d7e98 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   |-BinaryOperator 0x2ac4b5d8030 <line:1237:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5d7f48 <col:5> 'limb':'int' lvalue Var 0x2ac4b5d6430 'x_equal' 'limb':'int'
|   | `-CallExpr 0x2ac4b5d7fd8 <col:15, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x2ac4b5d7fc0 <col:15> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2ac4b5d7f80 <col:15> 'limb (const limb *)' Function 0x2ac4b5caa18 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x2ac4b5d8018 <col:29> 'const limb *':'const limb *' <NoOp>
|   |     `-ImplicitCastExpr 0x2ac4b5d8000 <col:29> 'limb *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x2ac4b5d7fa0 <col:29> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5fd8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d80e8 <line:1240:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d80d0 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8050 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d8120 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8070 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d8150 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5d8138 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5d8090 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d8180 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d8168 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d80b0 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5fd8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d8228 <line:1241:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d8210 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8198 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d8258 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d81b8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6230 'z_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d8288 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d8270 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d81f0 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5d8338 <line:1244:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d8320 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d82a0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d8370 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d82c0 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d83a0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5d8388 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5d82e0 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d83b8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d8300 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d58a8 'z1' 'const limb *':'const limb *'
|   |-CallExpr 0x2ac4b5d8448 <line:1245:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d8430 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d83d0 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d8478 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d83f0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d84a8 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d8490 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d8410 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5d8558 <line:1248:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d8540 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d84c0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d8590 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d84e0 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d85a8 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5d8500 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5a18 'y2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5d85d8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d85c0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d8520 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d8668 <line:1252:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d8650 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d85f0 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4f7d08 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d8698 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8610 <col:23> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d86c8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d86b0 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d8630 <col:28> 'felem':'limb [9]' lvalue Var 0x2ac4b5d60c8 'ftmp6' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d8758 <line:1254:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d8740 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d86e0 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d8788 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8700 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d87b8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d87a0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d8720 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   |-BinaryOperator 0x2ac4b5d88b8 <line:1255:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x2ac4b5d87d0 <col:5> 'limb':'int' lvalue Var 0x2ac4b5d64a8 'y_equal' 'limb':'int'
|   | `-CallExpr 0x2ac4b5d8860 <col:15, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x2ac4b5d8848 <col:15> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2ac4b5d8808 <col:15> 'limb (const limb *)' Function 0x2ac4b5caa18 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x2ac4b5d88a0 <col:29> 'const limb *':'const limb *' <NoOp>
|   |     `-ImplicitCastExpr 0x2ac4b5d8888 <col:29> 'limb *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x2ac4b5d8828 <col:29> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d8958 <line:1256:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d8940 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d88d8 <col:5> 'void (limb *, limb)' Function 0x2ac4b4f3988 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5d8988 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d88f8 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x2ac4b5d8918 <col:27> 'int' 2
|   |-IfStmt 0x2ac4b5d8d70 <line:1259:5, line:1262:5>
|   | |-BinaryOperator 0x2ac4b5d8af0 <line:1259:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x2ac4b5d8a80 <col:9, col:32> 'int' '&&'
|   | | | |-BinaryOperator 0x2ac4b5d8a10 <col:9, col:20> 'int' '&&'
|   | | | | |-ImplicitCastExpr 0x2ac4b5d89e0 <col:9> 'limb':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x2ac4b5d89a0 <col:9> 'limb':'int' lvalue Var 0x2ac4b5d6430 'x_equal' 'limb':'int'
|   | | | | `-ImplicitCastExpr 0x2ac4b5d89f8 <col:20> 'limb':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x2ac4b5d89c0 <col:20> 'limb':'int' lvalue Var 0x2ac4b5d64a8 'y_equal' 'limb':'int'
|   | | | `-UnaryOperator 0x2ac4b5d8a68 <col:31, col:32> 'int' prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x2ac4b5d8a50 <col:32> 'limb':'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x2ac4b5d8a30 <col:32> 'limb':'int' lvalue Var 0x2ac4b5d6520 'z1_is_zero' 'limb':'int'
|   | | `-UnaryOperator 0x2ac4b5d8ad8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x2ac4b5d8ac0 <col:47> 'limb':'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x2ac4b5d8aa0 <col:47> 'limb':'int' lvalue Var 0x2ac4b5d6598 'z2_is_zero' 'limb':'int'
|   | `-CompoundStmt 0x2ac4b5d8d50 <col:59, line:1262:5>
|   |   |-CallExpr 0x2ac4b5d8c60 <line:1260:9, col:44> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b5d8c48 <col:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b5d8b10 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x2ac4b5d0858 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2ac4b5d8cb0 <col:22> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2ac4b5d8b30 <col:22> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5d5650 'x3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x2ac4b5d8cc8 <col:26> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2ac4b5d8b50 <col:26> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5d56c8 'y3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x2ac4b5d8ce0 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2ac4b5d8b70 <col:30> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5d5740 'z3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x2ac4b5d8cf8 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2ac4b5d8b90 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d57b8 'x1' 'const limb *':'const limb *'
|   |   | |-ImplicitCastExpr 0x2ac4b5d8d10 <col:38> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2ac4b5d8bb0 <col:38> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5830 'y1' 'const limb *':'const limb *'
|   |   | `-ImplicitCastExpr 0x2ac4b5d8d28 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2ac4b5d8bd0 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d58a8 'z1' 'const limb *':'const limb *'
|   |   `-ReturnStmt 0x2ac4b5d8d40 <line:1261:9>
|   |-CallExpr 0x2ac4b5d8e00 <line:1265:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d8de8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8d88 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d8e30 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8da8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d8e60 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d8e48 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d8dc8 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5fd8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d8ef8 <line:1266:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d8ee0 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8e78 <col:5> 'void (limb *, limb)' Function 0x2ac4b4f3988 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5d8f28 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8e98 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x2ac4b5d8eb8 <col:26> 'int' 2
|   |-CallExpr 0x2ac4b5d8fb8 <line:1268:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d8fa0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8f40 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d8fe8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d8f60 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3000 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d9000 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d8f80 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d3090 <line:1270:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d3078 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3018 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d30c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3038 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d30f0 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d30d8 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d3058 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5d31a0 <line:1273:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d3188 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3108 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d31d8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3128 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d3208 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5d31f0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5d3148 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5fd8 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3238 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3220 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d3168 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d32c8 <line:1274:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d32b0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3250 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d32f8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3270 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5ee8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3328 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3310 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d3290 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5d33d8 <line:1277:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d33c0 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3340 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d3410 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3360 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d3440 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5d3428 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5d3380 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5f60 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3470 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3458 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d33a0 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5e70 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d3500 <line:1278:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d34e8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3488 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d3530 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d34a8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5fd8 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3560 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3548 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d34c8 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5d35f0 <line:1281:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d35d8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3578 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d3620 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3598 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3650 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3638 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d35b8 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d36e0 <line:1283:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d36c8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3668 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4f7d08 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d3710 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3688 <col:23> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3740 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3728 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d36a8 <col:28> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5ee8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d37d0 <line:1285:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d37b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3758 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d3800 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3778 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5f60 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3830 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3818 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d3798 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5fd8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d38c8 <line:1286:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d38b0 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3848 <col:5> 'void (limb *, limb)' Function 0x2ac4b4f3988 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5d38f8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3868 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5fd8 'ftmp4' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x2ac4b5d3888 <col:27> 'int' 2
|   |-CallExpr 0x2ac4b5d3988 <line:1288:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d3970 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3910 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4f7d08 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d39b8 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3930 <col:23> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d39e8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d39d0 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d3950 <col:28> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5fd8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d3a90 <line:1290:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d3a78 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3a00 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d3ac0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3a20 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6140 'x_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3af0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3ad8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d3a58 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5d3b80 <line:1293:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d3b68 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3b08 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f65a0 'felem_diff64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d3bb0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3b28 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5f60 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3be0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3bc8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d3b48 <col:25> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6140 'x_out' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d3c90 <line:1297:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d3c78 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3bf8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d3cc8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3c18 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d3cf8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5d3ce0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5d3c38 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6050 'ftmp5' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3d28 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3d10 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d3c58 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5f60 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d3df0 <line:1299:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d3dd8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3d40 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d3e28 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3d60 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6388 'tmp2' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d3e58 <col:21> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b5d3e40 <col:21> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b5d3d98 <col:21> 'felem':'limb [9]' lvalue Var 0x2ac4b5d60c8 'ftmp6' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d3e88 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d3e70 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d3db8 <col:28> 'felem':'limb [9]' lvalue Var 0x2ac4b5d5ee8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d3f20 <line:1301:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d3f08 <col:5> 'void (*)(int *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3ea0 <col:5> 'void (int *, limb)' Function 0x2ac4b4f44a8 'felem_scalar128' 'void (int *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5d3f50 <col:21> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3ec0 <col:21> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6388 'tmp2' 'largefelem':'int [9]'
|   | `-IntegerLiteral 0x2ac4b5d3ee0 <col:27> 'int' 2
|   |-CallExpr 0x2ac4b5d3fe0 <line:1303:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d3fc8 <col:5> 'void (*)(int *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3f68 <col:5> 'void (int *, const int *)' Function 0x2ac4b4f94e8 'felem_diff128' 'void (int *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d4010 <col:19> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d3f88 <col:19> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d4040 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d4028 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d3fa8 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6388 'tmp2' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5d40e8 <line:1309:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d40d0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d4058 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b5d4118 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d4078 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b5d61b8 'y_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b5d4148 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d4130 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d40b0 <col:25> 'largefelem':'int [9]' lvalue Var 0x2ac4b5d6310 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b5d41f8 <line:1311:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d41e0 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d4160 <col:5> 'void (limb *, const limb *, limb)' Function 0x2ac4b5c2e58 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5d4230 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d4180 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6140 'x_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d4248 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5d41a0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d59a0 'x2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5d4260 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d41c0 <col:33> 'limb':'int' lvalue Var 0x2ac4b5d6520 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x2ac4b5d4310 <line:1312:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d42f8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d4278 <col:5> 'void (limb *, const limb *, limb)' Function 0x2ac4b5c2e58 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5d4348 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d4298 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6140 'x_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d4360 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5d42b8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d57b8 'x1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5d4378 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d42d8 <col:33> 'limb':'int' lvalue Var 0x2ac4b5d6598 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x2ac4b5d4428 <line:1313:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d4410 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d4390 <col:5> 'void (limb *, const limb *, limb)' Function 0x2ac4b5c2e58 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5d4460 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d43b0 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d61b8 'y_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d4478 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5d43d0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5a18 'y2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5d4490 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d43f0 <col:33> 'limb':'int' lvalue Var 0x2ac4b5d6520 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x2ac4b5d4540 <line:1314:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d4528 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d44a8 <col:5> 'void (limb *, const limb *, limb)' Function 0x2ac4b5c2e58 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5d4578 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d44c8 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d61b8 'y_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d4590 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5d44e8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5830 'y1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5d45a8 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d4508 <col:33> 'limb':'int' lvalue Var 0x2ac4b5d6598 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x2ac4b5d4658 <line:1315:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d4640 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d45c0 <col:5> 'void (limb *, const limb *, limb)' Function 0x2ac4b5c2e58 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5d4690 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d45e0 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6230 'z_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d46a8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5d4600 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d5a90 'z2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5d46c0 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d4620 <col:33> 'limb':'int' lvalue Var 0x2ac4b5d6520 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x2ac4b5d4770 <line:1316:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d4758 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d46d8 <col:5> 'void (limb *, const limb *, limb)' Function 0x2ac4b5c2e58 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x2ac4b5d47a8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d46f8 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6230 'z_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x2ac4b5d47c0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5d4718 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2ac4b5d58a8 'z1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2ac4b5d47d8 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b5d4738 <col:33> 'limb':'int' lvalue Var 0x2ac4b5d6598 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x2ac4b5d4868 <line:1317:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d4850 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d47f0 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d4898 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5d4810 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5d5650 'x3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2ac4b5d48c8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d48b0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d4830 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6140 'x_out' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b5d4958 <line:1318:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b5d4940 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b5d48e0 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b5d4988 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b5d4900 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5d56c8 'y3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2ac4b5d49b8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b5d49a0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b5d4920 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d61b8 'y_out' 'felem':'limb [9]'
|   `-CallExpr 0x2ac4b5d4a48 <line:1319:5, col:27> 'void'
|     |-ImplicitCastExpr 0x2ac4b5d4a30 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b5d49d0 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x2ac4b5d4a78 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2ac4b5d49f0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b5d5740 'z3' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2ac4b5d4aa8 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2ac4b5d4a90 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2ac4b5d4a10 <col:22> 'felem':'limb [9]' lvalue Var 0x2ac4b5d6230 'z_out' 'felem':'limb [9]'
|-VarDecl 0x2ac4b5d4e08 <line:1357:1, line:1466:1> line:1357:20 used gmul 'const felem [16][3]' static cinit
| `-InitListExpr 0x2ac4b6d1190 <col:34, line:1466:1> 'const felem [16][3]'
|   |-InitListExpr 0x2ac4b6d1280 <line:1358:1, line:1360:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6d12e8 <line:1358:2, col:28> 'const felem':'limb const[9]'
|   | | |-IntegerLiteral 0x2ac4b5d4e70 <col:3> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d4e98 <col:6> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d4ec0 <col:9> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d4ee8 <col:12> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d4f10 <col:15> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d4f38 <col:18> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d4f60 <col:21> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d4f88 <col:24> 'int' 0
|   | | `-IntegerLiteral 0x2ac4b5d4fb0 <col:27> 'int' 0
|   | |-InitListExpr 0x2ac4b6d1380 <line:1359:2, col:28> 'const felem':'limb const[9]'
|   | | |-IntegerLiteral 0x2ac4b5d1078 <col:3> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d10a0 <col:6> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d10c8 <col:9> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d10f0 <col:12> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d1118 <col:15> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d1140 <col:18> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d1168 <col:21> 'int' 0
|   | | |-IntegerLiteral 0x2ac4b5d1190 <col:24> 'int' 0
|   | | `-IntegerLiteral 0x2ac4b5d11b8 <col:27> 'int' 0
|   | `-InitListExpr 0x2ac4b6d1418 <line:1360:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b5d1268 <col:3> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1290 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d12b8 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d12e0 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1308 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1330 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1358 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1380 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b5d13a8 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6d14d0 <line:1361:1, line:1367:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6d1538 <line:1361:2, line:1363:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d15c0 <line:1361:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d14b0 <col:3> 'long long' 107662193291804006
|   | | |-ImplicitCastExpr 0x2ac4b6d15d8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d14d8 <col:23> 'long long' 156764387973048062
|   | | |-ImplicitCastExpr 0x2ac4b6d15f0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1500 <col:43> 'long long' 5200896066446132
|   | | |-ImplicitCastExpr 0x2ac4b6d1608 <line:1362:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1528 <col:3> 'long long' 135037196563642487
|   | | |-ImplicitCastExpr 0x2ac4b6d1620 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1550 <col:23> 'long long' 30202750027516766
|   | | |-ImplicitCastExpr 0x2ac4b6d1638 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1578 <col:43> 'long long' 94555012806093784
|   | | |-ImplicitCastExpr 0x2ac4b6d1650 <line:1363:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d15a0 <col:3> 'long long' 97746763129557904
|   | | |-ImplicitCastExpr 0x2ac4b6d1668 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d15c8 <col:23> 'long long' 263238996462508174
|   | | `-ImplicitCastExpr 0x2ac4b6d1680 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5d15f0 <col:43> 'long long' 55878890433217540
|   | |-InitListExpr 0x2ac4b6d16a8 <line:1364:2, line:1366:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d1730 <line:1364:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d16a0 <col:3> 'long long' 53643482783376976
|   | | |-ImplicitCastExpr 0x2ac4b6d1748 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d16c8 <col:23> 'long long' 224091089528721442
|   | | |-ImplicitCastExpr 0x2ac4b6d1760 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d16f0 <col:43> 'long long' 256727146720269139
|   | | |-ImplicitCastExpr 0x2ac4b6d1778 <line:1365:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1718 <col:3> 'long long' 172680296574162242
|   | | |-ImplicitCastExpr 0x2ac4b6d1790 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1740 <col:23> 'long long' 227218914761240178
|   | | |-ImplicitCastExpr 0x2ac4b6d17a8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1768 <col:43> 'long long' 137026748380081989
|   | | |-ImplicitCastExpr 0x2ac4b6d17c0 <line:1366:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1790 <col:3> 'long long' 275209519478621333
|   | | |-ImplicitCastExpr 0x2ac4b6d17d8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d17b8 <col:23> 'long long' 216191964133904561
|   | | `-ImplicitCastExpr 0x2ac4b6d17f0 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5d17e0 <col:43> 'long long' 78875843521714747
|   | `-InitListExpr 0x2ac4b6d1818 <line:1367:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b5d1890 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b5d18b8 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d18e0 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1908 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1930 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1958 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1980 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d19a8 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b5d19d0 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6d18d0 <line:1368:1, line:1374:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6d1938 <line:1368:2, line:1370:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d19c0 <line:1368:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1ad8 <col:3> 'long long' 248818024239815598
|   | | |-ImplicitCastExpr 0x2ac4b6d19d8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1b00 <col:23> 'long long' 68439110785812081
|   | | |-ImplicitCastExpr 0x2ac4b6d19f0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1b28 <col:43> 'long long' 69356082119435693
|   | | |-ImplicitCastExpr 0x2ac4b6d1a08 <line:1369:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1b50 <col:3> 'long long' 118944220382269095
|   | | |-ImplicitCastExpr 0x2ac4b6d1a20 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1b78 <col:23> 'long long' 143109813876409467
|   | | |-ImplicitCastExpr 0x2ac4b6d1a38 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1ba0 <col:43> 'long long' 269301167522018126
|   | | |-ImplicitCastExpr 0x2ac4b6d1a50 <line:1370:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1bc8 <col:3> 'long long' 89759470938176146
|   | | |-ImplicitCastExpr 0x2ac4b6d1a68 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1bf0 <col:23> 'long long' 185784475424510077
|   | | `-ImplicitCastExpr 0x2ac4b6d1a80 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5d1c18 <col:43> 'long long' 67432608270484965
|   | |-InitListExpr 0x2ac4b6d1aa8 <line:1371:2, line:1373:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d1b30 <line:1371:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1cc8 <col:3> 'long long' 76969611682492792
|   | | |-ImplicitCastExpr 0x2ac4b6d1b48 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1cf0 <col:23> 'long long' 164834918331809094
|   | | |-ImplicitCastExpr 0x2ac4b6d1b60 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1d18 <col:43> 'long long' 242045298884155992
|   | | |-ImplicitCastExpr 0x2ac4b6d1b78 <line:1372:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1d40 <col:3> 'long long' 70238746073538723
|   | | |-ImplicitCastExpr 0x2ac4b6d1b90 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1d68 <col:23> 'long long' 72587413832712611
|   | | |-ImplicitCastExpr 0x2ac4b6d1ba8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1d90 <col:43> 'long long' 117657050261535340
|   | | |-ImplicitCastExpr 0x2ac4b6d1bc0 <line:1373:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1db8 <col:3> 'long long' 213926679015513749
|   | | |-ImplicitCastExpr 0x2ac4b6d1bd8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d1de0 <col:23> 'long long' 126075467209511292
|   | | `-ImplicitCastExpr 0x2ac4b6d1bf0 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5d1e08 <col:43> 'long long' 99087220106255799
|   | `-InitListExpr 0x2ac4b6d1c18 <line:1374:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b5d1eb8 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b5d1ee0 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1f08 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1f30 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1f58 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1f80 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1fa8 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d1fd0 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b5d1ff8 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6d1cd0 <line:1375:1, line:1381:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6d1d38 <line:1375:2, line:1377:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d1dc0 <line:1375:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2100 <col:3> 'long long' 85357026627631931
|   | | |-ImplicitCastExpr 0x2ac4b6d1dd8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2128 <col:23> 'long long' 275799397262170618
|   | | |-ImplicitCastExpr 0x2ac4b6d1df0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2150 <col:43> 'long long' 193031651880102003
|   | | |-ImplicitCastExpr 0x2ac4b6d1e08 <line:1376:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2178 <col:3> 'long long' 59801716978586923
|   | | |-ImplicitCastExpr 0x2ac4b6d1e20 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d21a0 <col:23> 'long long' 83964301881446114
|   | | |-ImplicitCastExpr 0x2ac4b6d1e38 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d21c8 <col:43> 'long long' 22840256528202508
|   | | |-ImplicitCastExpr 0x2ac4b6d1e50 <line:1377:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d21f0 <col:3> 'long long' 194081837314414388
|   | | |-ImplicitCastExpr 0x2ac4b6d1e68 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2218 <col:23> 'long long' 222286351153865994
|   | | `-ImplicitCastExpr 0x2ac4b6d1e80 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5d2240 <col:43> 'long long' 46355154457181625
|   | |-InitListExpr 0x2ac4b6d1ea8 <line:1378:2, line:1380:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d1f30 <line:1378:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d22f0 <col:3> 'long long' 5957637048075716
|   | | |-ImplicitCastExpr 0x2ac4b6d1f48 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2318 <col:23> 'long long' 217369084467200750
|   | | |-ImplicitCastExpr 0x2ac4b6d1f60 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2340 <col:43> 'long long' 28572585110612818
|   | | |-ImplicitCastExpr 0x2ac4b6d1f78 <line:1379:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2368 <col:3> 'long long' 20635594340375821
|   | | |-ImplicitCastExpr 0x2ac4b6d1f90 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2390 <col:23> 'long long' 45349996332084175
|   | | |-ImplicitCastExpr 0x2ac4b6d1fa8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d23b8 <col:43> 'long long' 203498249684330542
|   | | |-ImplicitCastExpr 0x2ac4b6d1fc0 <line:1380:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d23e0 <col:3> 'long long' 162628157059821241
|   | | |-ImplicitCastExpr 0x2ac4b6d1fd8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2408 <col:23> 'long long' 254051537796193181
|   | | `-ImplicitCastExpr 0x2ac4b6d1ff0 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5d2430 <col:43> 'long long' 142008485808234430
|   | `-InitListExpr 0x2ac4b6d2018 <line:1381:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b5d24e0 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b5d2508 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d2530 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d2558 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d2580 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d25a8 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d25d0 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d25f8 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b5d2620 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6d20d0 <line:1382:1, line:1388:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6d2138 <line:1382:2, line:1384:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d21c0 <line:1382:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2728 <col:3> 'long long' 115699669707084877
|   | | |-ImplicitCastExpr 0x2ac4b6d21d8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2750 <col:23> 'long long' 27658917167077339
|   | | |-ImplicitCastExpr 0x2ac4b6d21f0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2778 <col:43> 'long long' 211173019325442770
|   | | |-ImplicitCastExpr 0x2ac4b6d2208 <line:1383:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d27a0 <col:3> 'long long' 58508949711035917
|   | | |-ImplicitCastExpr 0x2ac4b6d2220 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d27c8 <col:23> 'long long' 176133006176578449
|   | | |-ImplicitCastExpr 0x2ac4b6d2238 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d27f0 <col:43> 'long long' 286004766719919457
|   | | |-ImplicitCastExpr 0x2ac4b6d2250 <line:1384:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2818 <col:3> 'long long' 284694387565934236
|   | | |-ImplicitCastExpr 0x2ac4b6d2268 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2840 <col:23> 'long long' 270764684126736341
|   | | `-ImplicitCastExpr 0x2ac4b6d2280 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5d2868 <col:43> 'long long' 74608610647404645
|   | |-InitListExpr 0x2ac4b6d22a8 <line:1385:2, line:1387:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d2330 <line:1385:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2918 <col:3> 'long long' 185427702470952429
|   | | |-ImplicitCastExpr 0x2ac4b6d2348 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2940 <col:23> 'long long' 222643017731418220
|   | | |-ImplicitCastExpr 0x2ac4b6d2360 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2968 <col:43> 'long long' 13522846395484314
|   | | |-ImplicitCastExpr 0x2ac4b6d2378 <line:1386:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2990 <col:3> 'long long' 186326058078407921
|   | | |-ImplicitCastExpr 0x2ac4b6d2390 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d29b8 <col:23> 'long long' 198419528161705339
|   | | |-ImplicitCastExpr 0x2ac4b6d23a8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d29e0 <col:43> 'long long' 100497259887215390
|   | | |-ImplicitCastExpr 0x2ac4b6d23c0 <line:1387:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2a08 <col:3> 'long long' 197206109416089806
|   | | |-ImplicitCastExpr 0x2ac4b6d23d8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2a30 <col:23> 'long long' 25672027167771401
|   | | `-ImplicitCastExpr 0x2ac4b6d23f0 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5d2a58 <col:43> 'long long' 3406291878286628
|   | `-InitListExpr 0x2ac4b6d2418 <line:1388:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b5d2b08 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b5d2b30 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d2b58 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d2b80 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d2ba8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d2bd0 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d2bf8 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b5d2c20 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b5d2c48 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6d24d0 <line:1389:1, line:1395:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6d2538 <line:1389:2, line:1391:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d25c0 <line:1389:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2d50 <col:3> 'long long' 182021676768147954
|   | | |-ImplicitCastExpr 0x2ac4b6d25d8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2d78 <col:23> 'long long' 172930014546080759
|   | | |-ImplicitCastExpr 0x2ac4b6d25f0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2da0 <col:43> 'long long' 138895075991037654
|   | | |-ImplicitCastExpr 0x2ac4b6d2608 <line:1390:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2dc8 <col:3> 'long long' 235934697641172243
|   | | |-ImplicitCastExpr 0x2ac4b6d2620 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2df0 <col:23> 'long long' 27730320196411543
|   | | |-ImplicitCastExpr 0x2ac4b6d2638 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2e18 <col:43> 'long long' 113022493050822225
|   | | |-ImplicitCastExpr 0x2ac4b6d2650 <line:1391:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2e40 <col:3> 'long long' 207878302801438681
|   | | |-ImplicitCastExpr 0x2ac4b6d2668 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2e68 <col:23> 'long long' 266313891404818042
|   | | `-ImplicitCastExpr 0x2ac4b6d2680 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b5d2e90 <col:43> 'long long' 130891172683322366
|   | |-InitListExpr 0x2ac4b6d26a8 <line:1392:2, line:1394:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d2730 <line:1392:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2f40 <col:3> 'long long' 41168026354574463
|   | | |-ImplicitCastExpr 0x2ac4b6d2748 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2f68 <col:23> 'long long' 33680513507247361
|   | | |-ImplicitCastExpr 0x2ac4b6d2760 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2f90 <col:43> 'long long' 269413084887956749
|   | | |-ImplicitCastExpr 0x2ac4b6d2778 <line:1393:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b5d2fb8 <col:3> 'long long' 242140931057620833
|   | | |-ImplicitCastExpr 0x2ac4b6d2790 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d8ca0 <col:23> 'long long' 128929932887871315
|   | | |-ImplicitCastExpr 0x2ac4b6d27a8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d8cc8 <col:43> 'long long' 48038932284854428
|   | | |-ImplicitCastExpr 0x2ac4b6d27c0 <line:1394:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d8cf0 <col:3> 'long long' 111303443934034199
|   | | |-ImplicitCastExpr 0x2ac4b6d27d8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d8d18 <col:23> 'long long' 170023492048506113
|   | | `-ImplicitCastExpr 0x2ac4b6d27f0 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6d8d40 <col:43> 'long long' 143360740140998823
|   | `-InitListExpr 0x2ac4b6d2818 <line:1395:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b6d8df0 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b6d8e18 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d8e40 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d8e68 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d8e90 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d8eb8 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d8ee0 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d8f08 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b6d8f30 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6d28d0 <line:1396:1, line:1402:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6d2938 <line:1396:2, line:1398:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d29c0 <line:1396:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9038 <col:3> 'long long' 134425189601320381
|   | | |-ImplicitCastExpr 0x2ac4b6d29d8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9060 <col:23> 'long long' 260186432550402665
|   | | |-ImplicitCastExpr 0x2ac4b6d29f0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9088 <col:43> 'long long' 171678927283829543
|   | | |-ImplicitCastExpr 0x2ac4b6d2a08 <line:1397:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d90b0 <col:3> 'long long' 252983222112544416
|   | | |-ImplicitCastExpr 0x2ac4b6d2a20 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d90d8 <col:23> 'long long' 132305405591194105
|   | | |-ImplicitCastExpr 0x2ac4b6d2a38 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9100 <col:43> 'long long' 270602171681501759
|   | | |-ImplicitCastExpr 0x2ac4b6d2a50 <line:1398:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9128 <col:3> 'long long' 272296954479380013
|   | | |-ImplicitCastExpr 0x2ac4b6d2a68 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9150 <col:23> 'long long' 104435921201057878
|   | | `-ImplicitCastExpr 0x2ac4b6d2a80 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6d9178 <col:43> 'long long' 108657865336312406
|   | |-InitListExpr 0x2ac4b6d2aa8 <line:1399:2, line:1401:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6d2b30 <line:1399:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9228 <col:3> 'long long' 114456331693404500
|   | | |-ImplicitCastExpr 0x2ac4b6d2b48 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9250 <col:23> 'long long' 281139027592507440
|   | | |-ImplicitCastExpr 0x2ac4b6d2b60 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9278 <col:43> 'long long' 62416162571593130
|   | | |-ImplicitCastExpr 0x2ac4b6d2b78 <line:1400:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d92a0 <col:3> 'long long' 83096845865136584
|   | | |-ImplicitCastExpr 0x2ac4b6d2b90 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d92c8 <col:23> 'long long' 66402651191401000
|   | | |-ImplicitCastExpr 0x2ac4b6d2ba8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d92f0 <col:43> 'long long' 165554388465669282
|   | | |-ImplicitCastExpr 0x2ac4b6d2bc0 <line:1401:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9318 <col:3> 'long long' 242878144236104974
|   | | |-ImplicitCastExpr 0x2ac4b6d2bd8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9340 <col:23> 'long long' 11801559461345807
|   | | `-ImplicitCastExpr 0x2ac4b6d2bf0 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6d9368 <col:43> 'long long' 67258410132057789
|   | `-InitListExpr 0x2ac4b6d2c18 <line:1402:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b6d9418 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b6d9440 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d9468 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d9490 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d94b8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d94e0 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d9508 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d9530 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b6d9558 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6e0d58 <line:1403:1, line:1409:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6e0dc0 <line:1403:2, line:1405:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e0e48 <line:1403:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9660 <col:3> 'long long' 54921445886212921
|   | | |-ImplicitCastExpr 0x2ac4b6e0e60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9688 <col:23> 'long long' 264010728307327571
|   | | |-ImplicitCastExpr 0x2ac4b6e0e78 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d96b0 <col:43> 'long long' 48540398146488464
|   | | |-ImplicitCastExpr 0x2ac4b6e0e90 <line:1404:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d96d8 <col:3> 'long long' 38046474206052097
|   | | |-ImplicitCastExpr 0x2ac4b6e0ea8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9700 <col:23> 'long long' 131018639621352187
|   | | |-ImplicitCastExpr 0x2ac4b6e0ec0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9728 <col:43> 'long long' 269269057993736052
|   | | |-ImplicitCastExpr 0x2ac4b6e0ed8 <line:1405:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9750 <col:3> 'long long' 171604831092059514
|   | | |-ImplicitCastExpr 0x2ac4b6e0ef0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9778 <col:23> 'long long' 226502319611390201
|   | | `-ImplicitCastExpr 0x2ac4b6e0f08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6d97a0 <col:43> 'long long' 40955853996707363
|   | |-InitListExpr 0x2ac4b6e0f30 <line:1406:2, line:1408:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e0fb8 <line:1406:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9850 <col:3> 'long long' 228496940765560023
|   | | |-ImplicitCastExpr 0x2ac4b6e0fd0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9878 <col:23> 'long long' 60915004430338246
|   | | |-ImplicitCastExpr 0x2ac4b6e0fe8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d98a0 <col:43> 'long long' 101679219507860758
|   | | |-ImplicitCastExpr 0x2ac4b6e1000 <line:1407:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d98c8 <col:3> 'long long' 83983612521646248
|   | | |-ImplicitCastExpr 0x2ac4b6e1018 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d98f0 <col:23> 'long long' 74425713252203235
|   | | |-ImplicitCastExpr 0x2ac4b6e1030 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9918 <col:43> 'long long' 40674977338158817
|   | | |-ImplicitCastExpr 0x2ac4b6e1048 <line:1408:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9940 <col:3> 'long long' 232629268965117148
|   | | |-ImplicitCastExpr 0x2ac4b6e1060 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9968 <col:23> 'long long' 258202943948012181
|   | | `-ImplicitCastExpr 0x2ac4b6e1078 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6d9990 <col:43> 'long long' 82501075909064286
|   | `-InitListExpr 0x2ac4b6e10a0 <line:1409:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b6d9a40 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b6d9a68 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d9a90 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d9ab8 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d9ae0 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d9b08 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d9b30 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6d9b58 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b6d9b80 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6e1158 <line:1410:1, line:1416:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6e11c0 <line:1410:2, line:1412:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e1248 <line:1410:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9c88 <col:3> 'long long' 5781481702552587
|   | | |-ImplicitCastExpr 0x2ac4b6e1260 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9cb0 <col:23> 'long long' 81936078708350940
|   | | |-ImplicitCastExpr 0x2ac4b6e1278 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9cd8 <col:43> 'long long' 684428450673870
|   | | |-ImplicitCastExpr 0x2ac4b6e1290 <line:1411:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9d00 <col:3> 'long long' 133775839246670778
|   | | |-ImplicitCastExpr 0x2ac4b6e12a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9d28 <col:23> 'long long' 187393766212496108
|   | | |-ImplicitCastExpr 0x2ac4b6e12c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9d50 <col:43> 'long long' 163607746850311095
|   | | |-ImplicitCastExpr 0x2ac4b6e12d8 <line:1412:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9d78 <col:3> 'long long' 104632887796117062
|   | | |-ImplicitCastExpr 0x2ac4b6e12f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9da0 <col:23> 'long long' 196249512117870923
|   | | `-ImplicitCastExpr 0x2ac4b6e1308 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6d9dc8 <col:43> 'long long' 120194447878062517
|   | |-InitListExpr 0x2ac4b6e1330 <line:1413:2, line:1415:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e13b8 <line:1413:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9e78 <col:3> 'long long' 253107672290978120
|   | | |-ImplicitCastExpr 0x2ac4b6e13d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9ea0 <col:23> 'long long' 39877908298150671
|   | | |-ImplicitCastExpr 0x2ac4b6e13e8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9ec8 <col:43> 'long long' 243230812957569816
|   | | |-ImplicitCastExpr 0x2ac4b6e1400 <line:1414:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9ef0 <col:3> 'long long' 139146955128709334
|   | | |-ImplicitCastExpr 0x2ac4b6e1418 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9f18 <col:23> 'long long' 269377625756283059
|   | | |-ImplicitCastExpr 0x2ac4b6e1430 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9f40 <col:43> 'long long' 93147841917237891
|   | | |-ImplicitCastExpr 0x2ac4b6e1448 <line:1415:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9f68 <col:3> 'long long' 25559748171724610
|   | | |-ImplicitCastExpr 0x2ac4b6e1460 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6d9f90 <col:23> 'long long' 256984472390645826
|   | | `-ImplicitCastExpr 0x2ac4b6e1478 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6d9fb8 <col:43> 'long long' 110805271569863234
|   | `-InitListExpr 0x2ac4b6e14a0 <line:1416:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b6da068 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b6da090 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da0b8 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da0e0 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da108 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da130 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da158 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da180 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b6da1a8 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6e1558 <line:1417:1, line:1423:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6e15c0 <line:1417:2, line:1419:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e1648 <line:1417:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da2b0 <col:3> 'long long' 83907952979223667
|   | | |-ImplicitCastExpr 0x2ac4b6e1660 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da2d8 <col:23> 'long long' 54203007381021646
|   | | |-ImplicitCastExpr 0x2ac4b6e1678 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da300 <col:43> 'long long' 160604902073304494
|   | | |-ImplicitCastExpr 0x2ac4b6e1690 <line:1418:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da328 <col:3> 'long long' 23256222146912600
|   | | |-ImplicitCastExpr 0x2ac4b6e16a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da350 <col:23> 'long long' 182952255629341354
|   | | |-ImplicitCastExpr 0x2ac4b6e16c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da378 <col:43> 'long long' 115033435942373103
|   | | |-ImplicitCastExpr 0x2ac4b6e16d8 <line:1419:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da3a0 <col:3> 'long long' 20223102552038729
|   | | |-ImplicitCastExpr 0x2ac4b6e16f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da3c8 <col:23> 'long long' 57575416695682744
|   | | `-ImplicitCastExpr 0x2ac4b6e1708 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6da3f0 <col:43> 'long long' 5669819612697091
|   | |-InitListExpr 0x2ac4b6e1730 <line:1420:2, line:1422:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e17b8 <line:1420:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da4a0 <col:3> 'long long' 168448660585422906
|   | | |-ImplicitCastExpr 0x2ac4b6e17d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da4c8 <col:23> 'long long' 239179205648869171
|   | | |-ImplicitCastExpr 0x2ac4b6e17e8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da4f0 <col:43> 'long long' 285900858825794631
|   | | |-ImplicitCastExpr 0x2ac4b6e1800 <line:1421:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da518 <col:3> 'long long' 3096201469763925
|   | | |-ImplicitCastExpr 0x2ac4b6e1818 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da540 <col:23> 'long long' 168713258819827008
|   | | |-ImplicitCastExpr 0x2ac4b6e1830 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da568 <col:43> 'long long' 1427068068807299
|   | | |-ImplicitCastExpr 0x2ac4b6e1848 <line:1422:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da590 <col:3> 'long long' 219126752609233260
|   | | |-ImplicitCastExpr 0x2ac4b6e1860 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da5b8 <col:23> 'long long' 21459001911328522
|   | | `-ImplicitCastExpr 0x2ac4b6e1878 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6da5e0 <col:43> 'long long' 107764485524627839
|   | `-InitListExpr 0x2ac4b6e18a0 <line:1423:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b6da690 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b6da6b8 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da6e0 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da708 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da730 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da758 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da780 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6da7a8 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b6da7d0 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6e1958 <line:1424:1, line:1430:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6e19c0 <line:1424:2, line:1426:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e1a48 <line:1424:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da8d8 <col:3> 'long long' 80472600425850483
|   | | |-ImplicitCastExpr 0x2ac4b6e1a60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da900 <col:23> 'long long' 224473061399101374
|   | | |-ImplicitCastExpr 0x2ac4b6e1a78 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da928 <col:43> 'long long' 6388189075278565
|   | | |-ImplicitCastExpr 0x2ac4b6e1a90 <line:1425:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da950 <col:3> 'long long' 285031614597630631
|   | | |-ImplicitCastExpr 0x2ac4b6e1aa8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da978 <col:23> 'long long' 274421322182961254
|   | | |-ImplicitCastExpr 0x2ac4b6e1ac0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da9a0 <col:43> 'long long' 283887570695703148
|   | | |-ImplicitCastExpr 0x2ac4b6e1ad8 <line:1426:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da9c8 <col:3> 'long long' 181479600993480562
|   | | |-ImplicitCastExpr 0x2ac4b6e1af0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6da9f0 <col:23> 'long long' 102090085528419116
|   | | `-ImplicitCastExpr 0x2ac4b6e1b08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6daa18 <col:43> 'long long' 106185979073531434
|   | |-InitListExpr 0x2ac4b6e1b30 <line:1427:2, line:1429:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e1bb8 <line:1427:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6daac8 <col:3> 'long long' 73824376971567759
|   | | |-ImplicitCastExpr 0x2ac4b6e1bd0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6daaf0 <col:23> 'long long' 128945964170724839
|   | | |-ImplicitCastExpr 0x2ac4b6e1be8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dab18 <col:43> 'long long' 121577388434101727
|   | | |-ImplicitCastExpr 0x2ac4b6e1c00 <line:1428:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dab40 <col:3> 'long long' 139989292724168369
|   | | |-ImplicitCastExpr 0x2ac4b6e1c18 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dab68 <col:23> 'long long' 226558589893534708
|   | | |-ImplicitCastExpr 0x2ac4b6e1c30 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dab90 <col:43> 'long long' 204492623498446405
|   | | |-ImplicitCastExpr 0x2ac4b6e1c48 <line:1429:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dabb8 <col:3> 'long long' 83195714170398631
|   | | |-ImplicitCastExpr 0x2ac4b6e1c60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dabe0 <col:23> 'long long' 266701901401486980
|   | | `-ImplicitCastExpr 0x2ac4b6e1c78 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6dac08 <col:43> 'long long' 38808386010626826
|   | `-InitListExpr 0x2ac4b6e1ca0 <line:1430:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b6dacf8 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b6dad20 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dad48 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dad70 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dad98 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dadc0 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dade8 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dae10 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b6dae38 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6e1d58 <line:1431:1, line:1437:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6e1dc0 <line:1431:2, line:1433:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e1e48 <line:1431:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6daf40 <col:3> 'long long' 68456392460871366
|   | | |-ImplicitCastExpr 0x2ac4b6e1e60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6daf68 <col:23> 'long long' 187178293677952462
|   | | |-ImplicitCastExpr 0x2ac4b6e1e78 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6daf90 <col:43> 'long long' 126894947334365842
|   | | |-ImplicitCastExpr 0x2ac4b6e1e90 <line:1432:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dafb8 <col:3> 'long long' 147434772495009553
|   | | |-ImplicitCastExpr 0x2ac4b6e1ea8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dafe0 <col:23> 'long long' 201495664110630374
|   | | |-ImplicitCastExpr 0x2ac4b6e1ec0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db008 <col:43> 'long long' 5788334286214178
|   | | |-ImplicitCastExpr 0x2ac4b6e1ed8 <line:1433:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db030 <col:3> 'long long' 264555323551016548
|   | | |-ImplicitCastExpr 0x2ac4b6e1ef0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db058 <col:23> 'long long' 201523436559516008
|   | | `-ImplicitCastExpr 0x2ac4b6e1f08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6db080 <col:43> 'long long' 86612822398908315
|   | |-InitListExpr 0x2ac4b6e1f30 <line:1434:2, line:1436:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e1fb8 <line:1434:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db130 <col:3> 'long long' 237190349179942813
|   | | |-ImplicitCastExpr 0x2ac4b6e1fd0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db158 <col:23> 'long long' 57919897970055867
|   | | |-ImplicitCastExpr 0x2ac4b6e1fe8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db180 <col:43> 'long long' 259503898983505200
|   | | |-ImplicitCastExpr 0x2ac4b6e2000 <line:1435:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db1a8 <col:3> 'long long' 240994968244069959
|   | | |-ImplicitCastExpr 0x2ac4b6e2018 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db1d0 <col:23> 'long long' 197627180832108777
|   | | |-ImplicitCastExpr 0x2ac4b6e2030 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db1f8 <col:43> 'long long' 14909165662016715
|   | | |-ImplicitCastExpr 0x2ac4b6e2048 <line:1436:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db220 <col:3> 'long long' 231275607518278278
|   | | |-ImplicitCastExpr 0x2ac4b6e2060 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db248 <col:23> 'long long' 267691401609550987
|   | | `-ImplicitCastExpr 0x2ac4b6e2078 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6db270 <col:43> 'long long' 6132280927674703
|   | `-InitListExpr 0x2ac4b6e20a0 <line:1437:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b6db320 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b6db348 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6db370 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6db398 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6db3c0 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6db3e8 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6db410 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6db438 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b6db460 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6e2158 <line:1438:1, line:1444:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6e21c0 <line:1438:2, line:1440:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e2248 <line:1438:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db568 <col:3> 'long long' 163949238868714069
|   | | |-ImplicitCastExpr 0x2ac4b6e2260 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db590 <col:23> 'long long' 58905398262457208
|   | | |-ImplicitCastExpr 0x2ac4b6e2278 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db5b8 <col:43> 'long long' 23410114530391911
|   | | |-ImplicitCastExpr 0x2ac4b6e2290 <line:1439:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db5e0 <col:3> 'long long' 143013967514063650
|   | | |-ImplicitCastExpr 0x2ac4b6e22a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db608 <col:23> 'long long' 158564875852387944
|   | | |-ImplicitCastExpr 0x2ac4b6e22c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db630 <col:43> 'long long' 188561501915912131
|   | | |-ImplicitCastExpr 0x2ac4b6e22d8 <line:1440:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db658 <col:3> 'long long' 215199150119715708
|   | | |-ImplicitCastExpr 0x2ac4b6e22f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db680 <col:23> 'long long' 206622526511148848
|   | | `-ImplicitCastExpr 0x2ac4b6e2308 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6db6a8 <col:43> 'long long' 89915256697746367
|   | |-InitListExpr 0x2ac4b6e2330 <line:1441:2, line:1443:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e23b8 <line:1441:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db758 <col:3> 'long long' 235472781441274037
|   | | |-ImplicitCastExpr 0x2ac4b6e23d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db780 <col:23> 'long long' 144389939058319050
|   | | |-ImplicitCastExpr 0x2ac4b6e23e8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db7a8 <col:43> 'long long' 169063410541876690
|   | | |-ImplicitCastExpr 0x2ac4b6e2400 <line:1442:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db7d0 <col:3> 'long long' 249173223097855798
|   | | |-ImplicitCastExpr 0x2ac4b6e2418 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db7f8 <col:23> 'long long' 170576668317566447
|   | | |-ImplicitCastExpr 0x2ac4b6e2430 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db820 <col:43> 'long long' 219758551860586130
|   | | |-ImplicitCastExpr 0x2ac4b6e2448 <line:1443:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db848 <col:3> 'long long' 106180284152399658
|   | | |-ImplicitCastExpr 0x2ac4b6e2460 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6db870 <col:23> 'long long' 282632998754084398
|   | | `-ImplicitCastExpr 0x2ac4b6e2478 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6db898 <col:43> 'long long' 28517994447710861
|   | `-InitListExpr 0x2ac4b6e24a0 <line:1444:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b6db948 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b6db970 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6db998 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6db9c0 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6db9e8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dba10 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dba38 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dba60 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b6dba88 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6e2558 <line:1445:1, line:1451:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6e25c0 <line:1445:2, line:1447:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e2648 <line:1445:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbb90 <col:3> 'long long' 59660094509333031
|   | | |-ImplicitCastExpr 0x2ac4b6e2660 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbbb8 <col:23> 'long long' 40078737667398616
|   | | |-ImplicitCastExpr 0x2ac4b6e2678 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbbe0 <col:43> 'long long' 59594866337222579
|   | | |-ImplicitCastExpr 0x2ac4b6e2690 <line:1446:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbc08 <col:3> 'long long' 21701153162777097
|   | | |-ImplicitCastExpr 0x2ac4b6e26a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbc30 <col:23> 'long long' 116340500610041056
|   | | |-ImplicitCastExpr 0x2ac4b6e26c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbc58 <col:43> 'long long' 102768039285926622
|   | | |-ImplicitCastExpr 0x2ac4b6e26d8 <line:1447:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbc80 <col:3> 'long long' 162621478236739094
|   | | |-ImplicitCastExpr 0x2ac4b6e26f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbca8 <col:23> 'long long' 253440927871325083
|   | | `-ImplicitCastExpr 0x2ac4b6e2708 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6dbcd0 <col:43> 'long long' 22528988507453060
|   | |-InitListExpr 0x2ac4b6e2730 <line:1448:2, line:1450:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e27b8 <line:1448:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbd80 <col:3> 'long long' 187831405429143038
|   | | |-ImplicitCastExpr 0x2ac4b6e27d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbda8 <col:23> 'long long' 110453562439088903
|   | | |-ImplicitCastExpr 0x2ac4b6e27e8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbdd0 <col:43> 'long long' 137990260688458424
|   | | |-ImplicitCastExpr 0x2ac4b6e2800 <line:1449:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbdf8 <col:3> 'long long' 1698402127094515
|   | | |-ImplicitCastExpr 0x2ac4b6e2818 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbe20 <col:23> 'long long' 205917707824120335
|   | | |-ImplicitCastExpr 0x2ac4b6e2830 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbe48 <col:43> 'long long' 108655472150581258
|   | | |-ImplicitCastExpr 0x2ac4b6e2848 <line:1450:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbe70 <col:3> 'long long' 140144397608972274
|   | | |-ImplicitCastExpr 0x2ac4b6e2860 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dbe98 <col:23> 'long long' 151461723712079459
|   | | `-ImplicitCastExpr 0x2ac4b6e2878 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6dbec0 <col:43> 'long long' 90428809641917057
|   | `-InitListExpr 0x2ac4b6e28a0 <line:1451:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b6dbf70 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b6dbf98 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dbfc0 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dbfe8 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dc010 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dc038 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dc060 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dc088 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b6dc0b0 <col:27> 'int' 0
|   |-InitListExpr 0x2ac4b6e2958 <line:1452:1, line:1458:29> 'const felem [3]'
|   | |-InitListExpr 0x2ac4b6e29c0 <line:1452:2, line:1454:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e2a48 <line:1452:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc1b8 <col:3> 'long long' 99408195288972852
|   | | |-ImplicitCastExpr 0x2ac4b6e2a60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc1e0 <col:23> 'long long' 252546355624683750
|   | | |-ImplicitCastExpr 0x2ac4b6e2a78 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc208 <col:43> 'long long' 156284726038664712
|   | | |-ImplicitCastExpr 0x2ac4b6e2a90 <line:1453:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc230 <col:3> 'long long' 187814555657646027
|   | | |-ImplicitCastExpr 0x2ac4b6e2aa8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc258 <col:23> 'long long' 253333639507146726
|   | | |-ImplicitCastExpr 0x2ac4b6e2ac0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc280 <col:43> 'long long' 204421248249226768
|   | | |-ImplicitCastExpr 0x2ac4b6e2ad8 <line:1454:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc2a8 <col:3> 'long long' 185585298873836337
|   | | |-ImplicitCastExpr 0x2ac4b6e2af0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc2d0 <col:23> 'long long' 54122284901443166
|   | | `-ImplicitCastExpr 0x2ac4b6e2b08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6dc2f8 <col:43> 'long long' 15606490642109597
|   | |-InitListExpr 0x2ac4b6e2b30 <line:1455:2, line:1457:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x2ac4b6e2bb8 <line:1455:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc3a8 <col:3> 'long long' 202273776109261432
|   | | |-ImplicitCastExpr 0x2ac4b6e2bd0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc3d0 <col:23> 'long long' 249084945752482875
|   | | |-ImplicitCastExpr 0x2ac4b6e2be8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc3f8 <col:43> 'long long' 85968979218604038
|   | | |-ImplicitCastExpr 0x2ac4b6e2c00 <line:1456:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc420 <col:3> 'long long' 25519703624199912
|   | | |-ImplicitCastExpr 0x2ac4b6e2c18 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc448 <col:23> 'long long' 11298581697006935
|   | | |-ImplicitCastExpr 0x2ac4b6e2c30 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc470 <col:43> 'long long' 276104559392320902
|   | | |-ImplicitCastExpr 0x2ac4b6e2c48 <line:1457:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc498 <col:3> 'long long' 110836315469364654
|   | | |-ImplicitCastExpr 0x2ac4b6e2c60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x2ac4b6dc4c0 <col:23> 'long long' 232146578341713168
|   | | `-ImplicitCastExpr 0x2ac4b6e2c78 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6dc4e8 <col:43> 'long long' 19823468322155842
|   | `-InitListExpr 0x2ac4b6e2ca0 <line:1458:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x2ac4b6dc598 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x2ac4b6dc5c0 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dc5e8 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dc610 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dc638 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dc660 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dc688 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x2ac4b6dc6b0 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x2ac4b6dc6d8 <col:27> 'int' 0
|   `-InitListExpr 0x2ac4b6dcd38 <line:1459:1, line:1465:29> 'const felem [3]'
|     |-InitListExpr 0x2ac4b6dcda0 <line:1459:2, line:1461:61> 'const felem':'limb const[9]'
|     | |-ImplicitCastExpr 0x2ac4b6dce28 <line:1459:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dc7e0 <col:3> 'long long' 35744586964765654
|     | |-ImplicitCastExpr 0x2ac4b6dce40 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dc808 <col:23> 'long long' 163922703223845131
|     | |-ImplicitCastExpr 0x2ac4b6dce58 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dc830 <col:43> 'long long' 14854816205463052
|     | |-ImplicitCastExpr 0x2ac4b6dce70 <line:1460:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dc858 <col:3> 'long long' 102143583654246457
|     | |-ImplicitCastExpr 0x2ac4b6dce88 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dc880 <col:23> 'long long' 142452439656043030
|     | |-ImplicitCastExpr 0x2ac4b6dcea0 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dc8a8 <col:43> 'long long' 112217592890821305
|     | |-ImplicitCastExpr 0x2ac4b6dceb8 <line:1461:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dc8d0 <col:3> 'long long' 23787854062546502
|     | |-ImplicitCastExpr 0x2ac4b6dced0 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dc8f8 <col:23> 'long long' 249179525718089087
|     | `-ImplicitCastExpr 0x2ac4b6dcee8 <col:43> 'limb':'int' <IntegralCast>
|     |   `-IntegerLiteral 0x2ac4b6dc920 <col:43> 'long long' 26558462432025871
|     |-InitListExpr 0x2ac4b6dcf10 <line:1462:2, line:1464:61> 'const felem':'limb const[9]'
|     | |-ImplicitCastExpr 0x2ac4b6dcf98 <line:1462:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dc9d0 <col:3> 'long long' 78779712580399778
|     | |-ImplicitCastExpr 0x2ac4b6dcfb0 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dc9f8 <col:23> 'long long' 278917745207099588
|     | |-ImplicitCastExpr 0x2ac4b6dcfc8 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dca20 <col:43> 'long long' 183813831278226615
|     | |-ImplicitCastExpr 0x2ac4b6dcfe0 <line:1463:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dca48 <col:3> 'long long' 239336779130140502
|     | |-ImplicitCastExpr 0x2ac4b6dcff8 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dca70 <col:23> 'long long' 161422671968267096
|     | |-ImplicitCastExpr 0x2ac4b6dd010 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dca98 <col:43> 'long long' 106085547023527836
|     | |-ImplicitCastExpr 0x2ac4b6dd028 <line:1464:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dcac0 <col:3> 'long long' 95793207021835882
|     | |-ImplicitCastExpr 0x2ac4b6dd040 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x2ac4b6dcae8 <col:23> 'long long' 250342103785073150
|     | `-ImplicitCastExpr 0x2ac4b6dd058 <col:43> 'limb':'int' <IntegralCast>
|     |   `-IntegerLiteral 0x2ac4b6dcb10 <col:43> 'long long' 115330905904664661
|     `-InitListExpr 0x2ac4b6dd080 <line:1465:2, col:28> 'const felem':'limb const[9]'
|       |-IntegerLiteral 0x2ac4b6dcbc0 <col:3> 'int' 1
|       |-IntegerLiteral 0x2ac4b6dcbe8 <col:6> 'int' 0
|       |-IntegerLiteral 0x2ac4b6dcc10 <col:9> 'int' 0
|       |-IntegerLiteral 0x2ac4b6dcc38 <col:12> 'int' 0
|       |-IntegerLiteral 0x2ac4b6dcc60 <col:15> 'int' 0
|       |-IntegerLiteral 0x2ac4b6dcc88 <col:18> 'int' 0
|       |-IntegerLiteral 0x2ac4b6d0c60 <col:21> 'int' 0
|       |-IntegerLiteral 0x2ac4b6d0c88 <col:24> 'int' 0
|       `-IntegerLiteral 0x2ac4b6d0cb0 <col:27> 'int' 0
|-FunctionDecl 0x2ac4b6dd6a8 <line:1473:1, line:1492:1> line:1473:13 used select_point 'void (const limb, unsigned int, const felem (*)[3], felem *)' static
| |-ParmVarDecl 0x2ac4b6dd118 <col:26, col:37> col:37 used idx 'const limb':'const int'
| |-ParmVarDecl 0x2ac4b6dd198 <col:42, col:55> col:55 used size 'unsigned int'
| |-ParmVarDecl 0x2ac4b6dd360 <line:1474:26, col:50> col:38 used pre_comp 'const felem (*)[3]':'const felem (*)[3]'
| |-ParmVarDecl 0x2ac4b6dd500 <col:53, col:64> col:59 used out 'felem *':'felem *'
| `-CompoundStmt 0x2ac4b6de8c8 <line:1475:1, line:1492:1>
|   |-DeclStmt 0x2ac4b6dd898 <line:1476:5, col:18>
|   | |-VarDecl 0x2ac4b6dd798 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x2ac4b6dd818 <col:5, col:17> col:17 used j 'unsigned int'
|   |-DeclStmt 0x2ac4b6dda20 <line:1477:5, col:32>
|   | `-VarDecl 0x2ac4b6dd8c0 <col:5, col:31> col:11 used outlimbs 'limb *' cinit
|   |   `-UnaryOperator 0x2ac4b6dda08 <col:22, col:31> 'limb *' prefix '&' cannot overflow
|   |     `-ArraySubscriptExpr 0x2ac4b6dd9e8 <col:23, col:31> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b6dd9d0 <col:23, col:28> 'limb *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x2ac4b6dd988 <col:23, col:28> 'felem':'limb [9]' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b6dd970 <col:23> 'felem *':'felem *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b6dd928 <col:23> 'felem *':'felem *' lvalue ParmVar 0x2ac4b6dd500 'out' 'felem *':'felem *'
|   |       |   `-IntegerLiteral 0x2ac4b6dd948 <col:27> 'int' 0
|   |       `-IntegerLiteral 0x2ac4b6dd9a8 <col:30> 'int' 0
|   |-CallExpr 0x2ac4b6ddbc0 <line:1479:5, col:36> 'void *'
|   | |-ImplicitCastExpr 0x2ac4b6ddba8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6dda38 <col:5> 'void *(void *, int, unsigned long long)' Function 0x2ac4b488a88 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x2ac4b6ddc10 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x2ac4b6ddbf8 <col:12> 'felem *':'felem *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2ac4b6dda58 <col:12> 'felem *':'felem *' lvalue ParmVar 0x2ac4b6dd500 'out' 'felem *':'felem *'
|   | |-IntegerLiteral 0x2ac4b6dda78 <col:17> 'int' 0
|   | `-BinaryOperator 0x2ac4b6ddb70 <col:20, col:35> 'unsigned long long' '*'
|   |   |-UnaryExprOrTypeTraitExpr 0x2ac4b6ddb10 <col:20, col:31> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x2ac4b6ddaf0 <col:26, col:31> 'felem':'limb [9]' lvalue
|   |   |   `-UnaryOperator 0x2ac4b6ddad8 <col:27, col:28> 'felem':'limb [9]' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x2ac4b6ddac0 <col:28> 'felem *':'felem *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x2ac4b6ddaa0 <col:28> 'felem *':'felem *' lvalue ParmVar 0x2ac4b6dd500 'out' 'felem *':'felem *' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x2ac4b6ddb58 <col:35> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x2ac4b6ddb30 <col:35> 'int' 3
|   `-ForStmt 0x2ac4b6de890 <line:1481:5, line:1491:5>
|     |-BinaryOperator 0x2ac4b6ddca0 <line:1481:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x2ac4b6ddc28 <col:10> 'unsigned int' lvalue Var 0x2ac4b6dd798 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2ac4b6ddc88 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x2ac4b6ddc60 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x2ac4b6ddd30 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x2ac4b6ddd00 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x2ac4b6ddcc0 <col:17> 'unsigned int' lvalue Var 0x2ac4b6dd798 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2ac4b6ddd18 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x2ac4b6ddce0 <col:21> 'unsigned int' lvalue ParmVar 0x2ac4b6dd198 'size' 'unsigned int'
|     |-UnaryOperator 0x2ac4b6ddd70 <col:27, col:28> 'unsigned int' postfix '++'
|     | `-DeclRefExpr 0x2ac4b6ddd50 <col:27> 'unsigned int' lvalue Var 0x2ac4b6dd798 'i' 'unsigned int'
|     `-CompoundStmt 0x2ac4b6de840 <col:32, line:1491:5>
|       |-DeclStmt 0x2ac4b6ddfc8 <line:1482:9, col:49>
|       | `-VarDecl 0x2ac4b6ddd98 <col:9, col:48> col:21 used inlimbs 'const limb *' cinit
|       |   `-UnaryOperator 0x2ac4b6ddfb0 <col:31, col:48> 'const limb *' prefix '&' cannot overflow
|       |     `-ArraySubscriptExpr 0x2ac4b6ddf90 <col:32, col:48> 'const limb':'const int' lvalue
|       |       |-ImplicitCastExpr 0x2ac4b6ddf78 <col:32, col:45> 'const limb *' <ArrayToPointerDecay>
|       |       | `-ArraySubscriptExpr 0x2ac4b6ddf30 <col:32, col:45> 'const felem':'limb const[9]' lvalue
|       |       |   |-ImplicitCastExpr 0x2ac4b6ddf18 <col:32, col:42> 'const felem *' <ArrayToPointerDecay>
|       |       |   | `-ArraySubscriptExpr 0x2ac4b6dde70 <col:32, col:42> 'const felem [3]' lvalue
|       |       |   |   |-ImplicitCastExpr 0x2ac4b6dde40 <col:32> 'const felem (*)[3]':'const felem (*)[3]' <LValueToRValue>
|       |       |   |   | `-DeclRefExpr 0x2ac4b6dde00 <col:32> 'const felem (*)[3]':'const felem (*)[3]' lvalue ParmVar 0x2ac4b6dd360 'pre_comp' 'const felem (*)[3]':'const felem (*)[3]'
|       |       |   |   `-ImplicitCastExpr 0x2ac4b6dde58 <col:41> 'unsigned int' <LValueToRValue>
|       |       |   |     `-DeclRefExpr 0x2ac4b6dde20 <col:41> 'unsigned int' lvalue Var 0x2ac4b6dd798 'i' 'unsigned int'
|       |       |   `-IntegerLiteral 0x2ac4b6dde90 <col:44> 'int' 0
|       |       `-IntegerLiteral 0x2ac4b6ddf50 <col:47> 'int' 0
|       |-DeclStmt 0x2ac4b6de118 <line:1483:9, col:28>
|       | `-VarDecl 0x2ac4b6ddff0 <col:9, col:25> col:14 used mask 'limb':'int' cinit
|       |   `-ImplicitCastExpr 0x2ac4b6de100 <col:21, col:25> 'limb':'int' <IntegralCast>
|       |     `-BinaryOperator 0x2ac4b6de0e0 <col:21, col:25> 'unsigned int' '^'
|       |       |-ImplicitCastExpr 0x2ac4b6de098 <col:21> 'unsigned int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x2ac4b6de058 <col:21> 'unsigned int' lvalue Var 0x2ac4b6dd798 'i' 'unsigned int'
|       |       `-ImplicitCastExpr 0x2ac4b6de0c8 <col:25> 'unsigned int' <IntegralCast>
|       |         `-ImplicitCastExpr 0x2ac4b6de0b0 <col:25> 'limb':'int' <LValueToRValue>
|       |           `-DeclRefExpr 0x2ac4b6de078 <col:25> 'const limb':'const int' lvalue ParmVar 0x2ac4b6dd118 'idx' 'const limb':'const int'
|       |-CompoundAssignOperator 0x2ac4b6de1e8 <line:1484:9, col:25> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x2ac4b6de130 <col:9> 'limb':'int' lvalue Var 0x2ac4b6ddff0 'mask' 'limb':'int'
|       | `-BinaryOperator 0x2ac4b6de1c8 <col:17, col:25> 'limb':'int' '>>'
|       |   |-ImplicitCastExpr 0x2ac4b6de1b0 <col:17> 'limb':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2ac4b6de168 <col:17> 'limb':'int' lvalue Var 0x2ac4b6ddff0 'mask' 'limb':'int'
|       |   `-IntegerLiteral 0x2ac4b6de188 <col:25> 'int' 4
|       |-CompoundAssignOperator 0x2ac4b6de2b8 <line:1485:9, col:25> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x2ac4b6de218 <col:9> 'limb':'int' lvalue Var 0x2ac4b6ddff0 'mask' 'limb':'int'
|       | `-BinaryOperator 0x2ac4b6de298 <col:17, col:25> 'limb':'int' '>>'
|       |   |-ImplicitCastExpr 0x2ac4b6de280 <col:17> 'limb':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2ac4b6de238 <col:17> 'limb':'int' lvalue Var 0x2ac4b6ddff0 'mask' 'limb':'int'
|       |   `-IntegerLiteral 0x2ac4b6de258 <col:25> 'int' 2
|       |-CompoundAssignOperator 0x2ac4b6de388 <line:1486:9, col:25> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x2ac4b6de2e8 <col:9> 'limb':'int' lvalue Var 0x2ac4b6ddff0 'mask' 'limb':'int'
|       | `-BinaryOperator 0x2ac4b6de368 <col:17, col:25> 'limb':'int' '>>'
|       |   |-ImplicitCastExpr 0x2ac4b6de350 <col:17> 'limb':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2ac4b6de308 <col:17> 'limb':'int' lvalue Var 0x2ac4b6ddff0 'mask' 'limb':'int'
|       |   `-IntegerLiteral 0x2ac4b6de328 <col:25> 'int' 1
|       |-CompoundAssignOperator 0x2ac4b6de400 <line:1487:9, col:17> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x2ac4b6de3b8 <col:9> 'limb':'int' lvalue Var 0x2ac4b6ddff0 'mask' 'limb':'int'
|       | `-IntegerLiteral 0x2ac4b6de3d8 <col:17> 'int' 1
|       |-UnaryOperator 0x2ac4b6de450 <line:1488:9, col:13> 'limb':'int' postfix '--'
|       | `-DeclRefExpr 0x2ac4b6de430 <col:9> 'limb':'int' lvalue Var 0x2ac4b6ddff0 'mask' 'limb':'int'
|       `-ForStmt 0x2ac4b6de808 <line:1489:9, line:1490:41>
|         |-BinaryOperator 0x2ac4b6de4e0 <line:1489:14, col:18> 'unsigned int' '='
|         | |-DeclRefExpr 0x2ac4b6de468 <col:14> 'unsigned int' lvalue Var 0x2ac4b6dd818 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x2ac4b6de4c8 <col:18> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x2ac4b6de4a0 <col:18> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x2ac4b6de5c0 <col:21, col:34> 'int' '<'
|         | |-ImplicitCastExpr 0x2ac4b6de590 <col:21> 'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x2ac4b6de500 <col:21> 'unsigned int' lvalue Var 0x2ac4b6dd818 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x2ac4b6de5a8 <line:128:17, line:1489:34> 'unsigned int' <IntegralCast>
|         |   `-BinaryOperator 0x2ac4b6de570 <line:128:17, line:1489:34> 'int' '*'
|         |     |-IntegerLiteral 0x2ac4b6de520 <line:128:17> 'int' 9
|         |     `-IntegerLiteral 0x2ac4b6de548 <line:1489:34> 'int' 3
|         |-UnaryOperator 0x2ac4b6de600 <col:37, col:38> 'unsigned int' postfix '++'
|         | `-DeclRefExpr 0x2ac4b6de5e0 <col:37> 'unsigned int' lvalue Var 0x2ac4b6dd818 'j' 'unsigned int'
|         `-CompoundAssignOperator 0x2ac4b6de7d8 <line:1490:13, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|           |-ArraySubscriptExpr 0x2ac4b6de6a0 <col:13, col:23> 'limb':'int' lvalue
|           | |-ImplicitCastExpr 0x2ac4b6de670 <col:13> 'limb *' <LValueToRValue>
|           | | `-DeclRefExpr 0x2ac4b6de618 <col:13> 'limb *' lvalue Var 0x2ac4b6dd8c0 'outlimbs' 'limb *'
|           | `-ImplicitCastExpr 0x2ac4b6de688 <col:22> 'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x2ac4b6de650 <col:22> 'unsigned int' lvalue Var 0x2ac4b6dd818 'j' 'unsigned int'
|           `-BinaryOperator 0x2ac4b6de7b8 <col:28, col:41> 'int' '&'
|             |-ImplicitCastExpr 0x2ac4b6de788 <col:28, col:37> 'limb':'int' <LValueToRValue>
|             | `-ArraySubscriptExpr 0x2ac4b6de748 <col:28, col:37> 'const limb':'const int' lvalue
|             |   |-ImplicitCastExpr 0x2ac4b6de718 <col:28> 'const limb *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x2ac4b6de6c0 <col:28> 'const limb *' lvalue Var 0x2ac4b6ddd98 'inlimbs' 'const limb *'
|             |   `-ImplicitCastExpr 0x2ac4b6de730 <col:36> 'unsigned int' <LValueToRValue>
|             |     `-DeclRefExpr 0x2ac4b6de6f8 <col:36> 'unsigned int' lvalue Var 0x2ac4b6dd818 'j' 'unsigned int'
|             `-ImplicitCastExpr 0x2ac4b6de7a0 <col:41> 'limb':'int' <LValueToRValue>
|               `-DeclRefExpr 0x2ac4b6de768 <col:41> 'limb':'int' lvalue Var 0x2ac4b6ddff0 'mask' 'limb':'int'
|-FunctionDecl 0x2ac4b6deb08 <line:1495:1, line:1500:1> line:1495:13 used get_bit 'char (const u8 *, int)' static
| |-ParmVarDecl 0x2ac4b6de940 <col:21, col:43> col:43 used in 'const u8 *':'const u8 *'
| |-ParmVarDecl 0x2ac4b6de9c0 <col:47, col:51> col:51 used i 'int'
| `-CompoundStmt 0x2ac4b6d6ed0 <line:1496:1, line:1500:1>
|   |-IfStmt 0x2ac4b6deca0 <line:1497:5, line:1498:16>
|   | |-BinaryOperator 0x2ac4b6dec30 <line:1497:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x2ac4b6dec18 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b6debd0 <col:9> 'int' lvalue ParmVar 0x2ac4b6de9c0 'i' 'int'
|   | | `-IntegerLiteral 0x2ac4b6debf0 <col:13> 'int' 0
|   | `-ReturnStmt 0x2ac4b6dec90 <line:1498:9, col:16>
|   |   `-ImplicitCastExpr 0x2ac4b6dec78 <col:16> 'char' <IntegralCast>
|   |     `-IntegerLiteral 0x2ac4b6dec50 <col:16> 'int' 0
|   `-ReturnStmt 0x2ac4b6d6ec0 <line:1499:5, col:38>
|     `-ImplicitCastExpr 0x2ac4b6d6ea8 <col:12, col:38> 'char' <IntegralCast>
|       `-BinaryOperator 0x2ac4b6d6e88 <col:12, col:38> 'int' '&'
|         |-ParenExpr 0x2ac4b6d6e40 <col:12, col:34> 'u8':'int'
|         | `-BinaryOperator 0x2ac4b6d6e20 <col:13, col:33> 'u8':'int' '>>'
|         |   |-ImplicitCastExpr 0x2ac4b6d6e08 <col:13, col:22> 'u8':'int' <LValueToRValue>
|         |   | `-ArraySubscriptExpr 0x2ac4b6d6d48 <col:13, col:22> 'const u8':'const int' lvalue
|         |   |   |-ImplicitCastExpr 0x2ac4b6d6d30 <col:13> 'const u8 *':'const u8 *' <LValueToRValue>
|         |   |   | `-DeclRefExpr 0x2ac4b6d6c90 <col:13> 'const u8 *':'const u8 *' lvalue ParmVar 0x2ac4b6de940 'in' 'const u8 *':'const u8 *'
|         |   |   `-BinaryOperator 0x2ac4b6d6d10 <col:16, col:21> 'int' '>>'
|         |   |     |-ImplicitCastExpr 0x2ac4b6d6cf8 <col:16> 'int' <LValueToRValue>
|         |   |     | `-DeclRefExpr 0x2ac4b6d6cb0 <col:16> 'int' lvalue ParmVar 0x2ac4b6de9c0 'i' 'int'
|         |   |     `-IntegerLiteral 0x2ac4b6d6cd0 <col:21> 'int' 3
|         |   `-ParenExpr 0x2ac4b6d6de8 <col:27, col:33> 'int'
|         |     `-BinaryOperator 0x2ac4b6d6dc8 <col:28, col:32> 'int' '&'
|         |       |-ImplicitCastExpr 0x2ac4b6d6db0 <col:28> 'int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x2ac4b6d6d68 <col:28> 'int' lvalue ParmVar 0x2ac4b6de9c0 'i' 'int'
|         |       `-IntegerLiteral 0x2ac4b6d6d88 <col:32> 'int' 7
|         `-IntegerLiteral 0x2ac4b6d6e60 <col:38> 'int' 1
|-FunctionDecl 0x2ac4b6d7958 <line:1509:1, line:1590:1> line:1509:13 used batch_mul 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' static
| |-ParmVarDecl 0x2ac4b6d6f00 <col:23, col:29> col:29 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b6d6f78 <col:36, col:42> col:42 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b6d6ff0 <col:49, col:55> col:55 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x2ac4b6d7170 <line:1510:23, col:53> col:45 used scalars 'const felem_bytearray *':'const felem_bytearray *'
| |-ParmVarDecl 0x2ac4b6d71f0 <line:1511:23, col:38> col:38 used num_points 'const unsigned int'
| |-ParmVarDecl 0x2ac4b6d7268 <col:50, col:60> col:60 used g_scalar 'const u8 *'
| |-ParmVarDecl 0x2ac4b6d72e8 <line:1512:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x2ac4b6d7580 <col:40, col:68> col:52 used pre_comp 'const felem (*)[17][3]':'const felem (*)[17][3]'
| |-ParmVarDecl 0x2ac4b6d76d0 <line:1513:23, col:51> col:35 used g_pre_comp 'const felem (*)[3]':'const felem (*)[3]'
| `-CompoundStmt 0x2ac4b6e05d8 <line:1514:1, line:1590:1>
|   |-DeclStmt 0x2ac4b6d7b70 <line:1515:5, col:16>
|   | |-VarDecl 0x2ac4b6d7a70 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x2ac4b6d7af0 <col:5, col:12> col:12 used skip 'int'
|   |-DeclStmt 0x2ac4b6d7dd0 <line:1516:5, col:47>
|   | |-VarDecl 0x2ac4b6d7ba0 <col:5, col:14> col:14 used num 'unsigned int'
|   | `-VarDecl 0x2ac4b6d7c20 <col:5, col:46> col:19 used gen_mul 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x2ac4b6d7da0 <col:29, col:46> 'unsigned int' <IntegralCast>
|   |     `-ParenExpr 0x2ac4b6d7d80 <col:29, col:46> 'int'
|   |       `-BinaryOperator 0x2ac4b6d7d60 <col:30, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '!='
|   |         |-ImplicitCastExpr 0x2ac4b6d7d30 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1516:30> 'const u8 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x2ac4b6d7c88 <col:30> 'const u8 *' lvalue ParmVar 0x2ac4b6d7268 'g_scalar' 'const u8 *'
|   |         `-ImplicitCastExpr 0x2ac4b6d7d48 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <BitCast>
|   |           `-ParenExpr 0x2ac4b6d7d10 <col:17, col:27> 'void *'
|   |             `-CStyleCastExpr 0x2ac4b6d7ce8 <col:18, col:26> 'void *' <NullToPointer>
|   |               `-IntegerLiteral 0x2ac4b6d7ca8 <col:26> 'int' 0
|   |-DeclStmt 0x2ac4b6d8008 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1517:5, col:24>
|   | |-VarDecl 0x2ac4b6d7e48 <col:5, col:15> col:11 used nq 'felem [3]'
|   | `-VarDecl 0x2ac4b6d7f88 <col:5, col:23> col:18 used tmp 'felem [4]'
|   |-DeclStmt 0x2ac4b6d8098 <line:1518:5, col:14>
|   | `-VarDecl 0x2ac4b6d8030 <col:5, col:10> col:10 used bits 'limb':'int'
|   |-DeclStmt 0x2ac4b6d81b8 <line:1519:5, col:19>
|   | |-VarDecl 0x2ac4b6d80c0 <col:5, col:8> col:8 used sign 'u8':'int'
|   | `-VarDecl 0x2ac4b6d8138 <col:5, col:14> col:14 used digit 'u8':'int'
|   |-CallExpr 0x2ac4b6d82e0 <line:1522:5, col:29> 'void *'
|   | |-ImplicitCastExpr 0x2ac4b6d82c8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6d81d0 <col:5> 'void *(void *, int, unsigned long long)' Function 0x2ac4b488a88 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x2ac4b6d8330 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x2ac4b6d8318 <col:12> 'felem *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b6d81f0 <col:12> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   | |-IntegerLiteral 0x2ac4b6d8228 <col:16> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x2ac4b6d8290 <col:19, col:28> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x2ac4b6d8270 <col:25, col:28> 'felem [3]' lvalue
|   |     `-DeclRefExpr 0x2ac4b6d8250 <col:26> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]' non_odr_use_unevaluated
|   |-BinaryOperator 0x2ac4b6d83a8 <line:1529:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x2ac4b6d8348 <col:5> 'int' lvalue Var 0x2ac4b6d7af0 'skip' 'int'
|   | `-IntegerLiteral 0x2ac4b6d8380 <col:12> 'int' 1
|   |-ForStmt 0x2ac4b6e01b0 <line:1531:5, line:1586:5>
|   | |-BinaryOperator 0x2ac4b6d84d8 <line:1531:10, col:37> 'int' '='
|   | | |-DeclRefExpr 0x2ac4b6d83c8 <col:10> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   | | `-ParenExpr 0x2ac4b6d84b8 <col:14, col:37> 'int'
|   | |   `-ConditionalOperator 0x2ac4b6d8488 <col:15, col:34> 'int'
|   | |     |-ImplicitCastExpr 0x2ac4b6d8470 <col:15> 'unsigned int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x2ac4b6d8400 <col:15> 'const unsigned int' lvalue ParmVar 0x2ac4b6d71f0 'num_points' 'const unsigned int'
|   | |     |-IntegerLiteral 0x2ac4b6d8420 <col:28> 'int' 520
|   | |     `-IntegerLiteral 0x2ac4b6d8448 <col:34> 'int' 130
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2ac4b6d8558 <col:40, col:45> 'int' '>='
|   | | |-ImplicitCastExpr 0x2ac4b6d8540 <col:40> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b6d84f8 <col:40> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   | | `-IntegerLiteral 0x2ac4b6d8518 <col:45> 'int' 0
|   | |-UnaryOperator 0x2ac4b6d8598 <col:48, col:50> 'int' prefix '--'
|   | | `-DeclRefExpr 0x2ac4b6d8578 <col:50> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   | `-CompoundStmt 0x2ac4b6e0188 <col:53, line:1586:5>
|   |   |-IfStmt 0x2ac4b6d8a60 <line:1533:9, line:1534:66>
|   |   | |-UnaryOperator 0x2ac4b6d85e8 <line:1533:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x2ac4b6d85d0 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x2ac4b6d85b0 <col:14> 'int' lvalue Var 0x2ac4b6d7af0 'skip' 'int'
|   |   | `-CallExpr 0x2ac4b6d8938 <line:1534:13, col:66> 'void'
|   |   |   |-ImplicitCastExpr 0x2ac4b6d8920 <col:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2ac4b6d8600 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x2ac4b5d0858 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |   |-ImplicitCastExpr 0x2ac4b6d8988 <col:26, col:30> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x2ac4b6d8680 <col:26, col:30> 'felem':'limb [9]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x2ac4b6d8668 <col:26> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x2ac4b6d8620 <col:26> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x2ac4b6d8640 <col:29> 'int' 0
|   |   |   |-ImplicitCastExpr 0x2ac4b6d89a0 <col:33, col:37> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x2ac4b6d8700 <col:33, col:37> 'felem':'limb [9]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x2ac4b6d86e8 <col:33> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x2ac4b6d86a0 <col:33> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x2ac4b6d86c0 <col:36> 'int' 1
|   |   |   |-ImplicitCastExpr 0x2ac4b6d89b8 <col:40, col:44> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x2ac4b6d8780 <col:40, col:44> 'felem':'limb [9]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x2ac4b6d8768 <col:40> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x2ac4b6d8720 <col:40> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x2ac4b6d8740 <col:43> 'int' 2
|   |   |   |-ImplicitCastExpr 0x2ac4b6d89e8 <col:47, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x2ac4b6d89d0 <col:47, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x2ac4b6d8800 <col:47, col:51> 'felem':'limb [9]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x2ac4b6d87e8 <col:47> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x2ac4b6d87a0 <col:47> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x2ac4b6d87c0 <col:50> 'int' 0
|   |   |   |-ImplicitCastExpr 0x2ac4b6d8a18 <col:54, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x2ac4b6d8a00 <col:54, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x2ac4b6d8880 <col:54, col:58> 'felem':'limb [9]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x2ac4b6d8868 <col:54> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x2ac4b6d8820 <col:54> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x2ac4b6d8840 <col:57> 'int' 1
|   |   |   `-ImplicitCastExpr 0x2ac4b6d8a48 <col:61, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x2ac4b6d8a30 <col:61, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |       `-ArraySubscriptExpr 0x2ac4b6d8900 <col:61, col:65> 'felem':'limb [9]' lvalue
|   |   |         |-ImplicitCastExpr 0x2ac4b6d88e8 <col:61> 'felem *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x2ac4b6d88a0 <col:61> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |         `-IntegerLiteral 0x2ac4b6d88c0 <col:64> 'int' 2
|   |   |-IfStmt 0x2ac4b6d5f88 <line:1537:9, line:1554:9>
|   |   | |-BinaryOperator 0x2ac4b6d8b68 <line:1537:13, col:33> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x2ac4b6d8b50 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x2ac4b6d8a78 <col:13> 'unsigned int' lvalue Var 0x2ac4b6d7c20 'gen_mul' 'unsigned int'
|   |   | | `-ParenExpr 0x2ac4b6d8b30 <col:24, col:33> 'int'
|   |   | |   `-BinaryOperator 0x2ac4b6d8b10 <col:25, col:30> 'int' '<='
|   |   | |     |-ImplicitCastExpr 0x2ac4b6d8af8 <col:25> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x2ac4b6d8ab0 <col:25> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |   | |     `-IntegerLiteral 0x2ac4b6d8ad0 <col:30> 'int' 130
|   |   | `-CompoundStmt 0x2ac4b6d5f58 <col:36, line:1554:9>
|   |   |   |-BinaryOperator 0x2ac4b6d4d98 <line:1538:13, col:50> 'limb':'int' '='
|   |   |   | |-DeclRefExpr 0x2ac4b6d8b88 <col:13> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |   |   | `-BinaryOperator 0x2ac4b6d4d78 <col:20, col:50> 'int' '<<'
|   |   |   |   |-ImplicitCastExpr 0x2ac4b6d4d60 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |   | `-CallExpr 0x2ac4b6d4cf0 <col:20, col:45> 'char'
|   |   |   |   |   |-ImplicitCastExpr 0x2ac4b6d4cd8 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x2ac4b6d8bc0 <col:20> 'char (const u8 *, int)' Function 0x2ac4b6deb08 'get_bit' 'char (const u8 *, int)'
|   |   |   |   |   |-ImplicitCastExpr 0x2ac4b6d4d20 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |   |   | `-DeclRefExpr 0x2ac4b6d8be0 <col:28> 'const u8 *' lvalue ParmVar 0x2ac4b6d7268 'g_scalar' 'const u8 *'
|   |   |   |   |   `-BinaryOperator 0x2ac4b6d8c60 <col:38, col:42> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x2ac4b6d8c48 <col:38> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x2ac4b6d8c00 <col:38> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x2ac4b6d8c20 <col:42> 'int' 390
|   |   |   |   `-IntegerLiteral 0x2ac4b6d4d38 <col:50> 'int' 3
|   |   |   |-IfStmt 0x2ac4b6d5340 <line:1539:13, line:1543:13>
|   |   |   | |-BinaryOperator 0x2ac4b6d4e18 <line:1539:17, col:21> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x2ac4b6d4e00 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x2ac4b6d4db8 <col:17> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x2ac4b6d4dd8 <col:21> 'int' 130
|   |   |   | `-CompoundStmt 0x2ac4b6d5318 <col:26, line:1543:13>
|   |   |   |   |-CompoundAssignOperator 0x2ac4b6d4fd8 <line:1540:17, col:55> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |   | |-DeclRefExpr 0x2ac4b6d4e38 <col:17> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |   |   |   | `-BinaryOperator 0x2ac4b6d4fb8 <col:25, col:55> 'int' '<<'
|   |   |   |   |   |-ImplicitCastExpr 0x2ac4b6d4fa0 <col:25, col:50> 'int' <IntegralCast>
|   |   |   |   |   | `-CallExpr 0x2ac4b6d4f30 <col:25, col:50> 'char'
|   |   |   |   |   |   |-ImplicitCastExpr 0x2ac4b6d4f18 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |   |   |   | `-DeclRefExpr 0x2ac4b6d4e58 <col:25> 'char (const u8 *, int)' Function 0x2ac4b6deb08 'get_bit' 'char (const u8 *, int)'
|   |   |   |   |   |   |-ImplicitCastExpr 0x2ac4b6d4f60 <col:33> 'const u8 *' <LValueToRValue>
|   |   |   |   |   |   | `-DeclRefExpr 0x2ac4b6d4e78 <col:33> 'const u8 *' lvalue ParmVar 0x2ac4b6d7268 'g_scalar' 'const u8 *'
|   |   |   |   |   |   `-BinaryOperator 0x2ac4b6d4ef8 <col:43, col:47> 'int' '+'
|   |   |   |   |   |     |-ImplicitCastExpr 0x2ac4b6d4ee0 <col:43> 'int' <LValueToRValue>
|   |   |   |   |   |     | `-DeclRefExpr 0x2ac4b6d4e98 <col:43> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |   |   |   |   |     `-IntegerLiteral 0x2ac4b6d4eb8 <col:47> 'int' 260
|   |   |   |   |   `-IntegerLiteral 0x2ac4b6d4f78 <col:55> 'int' 2
|   |   |   |   |-CompoundAssignOperator 0x2ac4b6d51a8 <line:1541:17, col:55> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |   | |-DeclRefExpr 0x2ac4b6d5008 <col:17> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |   |   |   | `-BinaryOperator 0x2ac4b6d5188 <col:25, col:55> 'int' '<<'
|   |   |   |   |   |-ImplicitCastExpr 0x2ac4b6d5170 <col:25, col:50> 'int' <IntegralCast>
|   |   |   |   |   | `-CallExpr 0x2ac4b6d5100 <col:25, col:50> 'char'
|   |   |   |   |   |   |-ImplicitCastExpr 0x2ac4b6d50e8 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |   |   |   | `-DeclRefExpr 0x2ac4b6d5028 <col:25> 'char (const u8 *, int)' Function 0x2ac4b6deb08 'get_bit' 'char (const u8 *, int)'
|   |   |   |   |   |   |-ImplicitCastExpr 0x2ac4b6d5130 <col:33> 'const u8 *' <LValueToRValue>
|   |   |   |   |   |   | `-DeclRefExpr 0x2ac4b6d5048 <col:33> 'const u8 *' lvalue ParmVar 0x2ac4b6d7268 'g_scalar' 'const u8 *'
|   |   |   |   |   |   `-BinaryOperator 0x2ac4b6d50c8 <col:43, col:47> 'int' '+'
|   |   |   |   |   |     |-ImplicitCastExpr 0x2ac4b6d50b0 <col:43> 'int' <LValueToRValue>
|   |   |   |   |   |     | `-DeclRefExpr 0x2ac4b6d5068 <col:43> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |   |   |   |   |     `-IntegerLiteral 0x2ac4b6d5088 <col:47> 'int' 130
|   |   |   |   |   `-IntegerLiteral 0x2ac4b6d5148 <col:55> 'int' 1
|   |   |   |   `-CompoundAssignOperator 0x2ac4b6d52e8 <line:1542:17, col:44> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |     |-DeclRefExpr 0x2ac4b6d51d8 <col:17> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |   |   |     `-ImplicitCastExpr 0x2ac4b6d52d0 <col:25, col:44> 'int' <IntegralCast>
|   |   |   |       `-CallExpr 0x2ac4b6d5270 <col:25, col:44> 'char'
|   |   |   |         |-ImplicitCastExpr 0x2ac4b6d5258 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |         | `-DeclRefExpr 0x2ac4b6d51f8 <col:25> 'char (const u8 *, int)' Function 0x2ac4b6deb08 'get_bit' 'char (const u8 *, int)'
|   |   |   |         |-ImplicitCastExpr 0x2ac4b6d52a0 <col:33> 'const u8 *' <LValueToRValue>
|   |   |   |         | `-DeclRefExpr 0x2ac4b6d5218 <col:33> 'const u8 *' lvalue ParmVar 0x2ac4b6d7268 'g_scalar' 'const u8 *'
|   |   |   |         `-ImplicitCastExpr 0x2ac4b6d52b8 <col:43> 'int' <LValueToRValue>
|   |   |   |           `-DeclRefExpr 0x2ac4b6d5238 <col:43> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |   |   |-CallExpr 0x2ac4b6d5490 <line:1545:13, col:51> 'void'
|   |   |   | |-ImplicitCastExpr 0x2ac4b6d5478 <col:13> 'void (*)(const limb, unsigned int, const felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x2ac4b6d5358 <col:13> 'void (const limb, unsigned int, const felem (*)[3], felem *)' Function 0x2ac4b6dd6a8 'select_point' 'void (const limb, unsigned int, const felem (*)[3], felem *)'
|   |   |   | |-ImplicitCastExpr 0x2ac4b6d54d0 <col:26> 'limb':'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x2ac4b6d5378 <col:26> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |   |   | |-ImplicitCastExpr 0x2ac4b6d54e8 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x2ac4b6d5398 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x2ac4b6d5500 <col:36> 'const felem (*)[3]':'const felem (*)[3]' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x2ac4b6d53c0 <col:36> 'const felem (*)[3]':'const felem (*)[3]' lvalue ParmVar 0x2ac4b6d76d0 'g_pre_comp' 'const felem (*)[3]':'const felem (*)[3]'
|   |   |   | `-ImplicitCastExpr 0x2ac4b6d5518 <col:48> 'felem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x2ac4b6d53e0 <col:48> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |   |   `-IfStmt 0x2ac4b6d5f30 <line:1546:13, line:1553:13> has_else
|   |   |     |-UnaryOperator 0x2ac4b6d5568 <line:1546:17, col:18> 'int' prefix '!' cannot overflow
|   |   |     | `-ImplicitCastExpr 0x2ac4b6d5550 <col:18> 'int' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x2ac4b6d5530 <col:18> 'int' lvalue Var 0x2ac4b6d7af0 'skip' 'int'
|   |   |     |-CompoundStmt 0x2ac4b6d5c98 <col:24, line:1550:13>
|   |   |     | `-CallExpr 0x2ac4b6d5ac0 <line:1548:17, line:1549:73> 'void'
|   |   |     |   |-ImplicitCastExpr 0x2ac4b6d5aa8 <line:1548:17> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x2ac4b6d5580 <col:17> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x2ac4b5d5d58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   |     |   |-ImplicitCastExpr 0x2ac4b6d5b30 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x2ac4b6d5600 <col:27, col:31> 'felem':'limb [9]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x2ac4b6d55e8 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |   | `-DeclRefExpr 0x2ac4b6d55a0 <col:27> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |     |   |   `-IntegerLiteral 0x2ac4b6d55c0 <col:30> 'int' 0
|   |   |     |   |-ImplicitCastExpr 0x2ac4b6d5b48 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x2ac4b6d5680 <col:34, col:38> 'felem':'limb [9]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x2ac4b6d5668 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |   | `-DeclRefExpr 0x2ac4b6d5620 <col:34> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |     |   |   `-IntegerLiteral 0x2ac4b6d5640 <col:37> 'int' 1
|   |   |     |   |-ImplicitCastExpr 0x2ac4b6d5b60 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x2ac4b6d5700 <col:41, col:45> 'felem':'limb [9]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x2ac4b6d56e8 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |   | `-DeclRefExpr 0x2ac4b6d56a0 <col:41> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |     |   |   `-IntegerLiteral 0x2ac4b6d56c0 <col:44> 'int' 2
|   |   |     |   |-ImplicitCastExpr 0x2ac4b6d5b90 <line:1549:27, col:31> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x2ac4b6d5b78 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x2ac4b6d5780 <col:27, col:31> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x2ac4b6d5768 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x2ac4b6d5720 <col:27> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |     |   |     `-IntegerLiteral 0x2ac4b6d5740 <col:30> 'int' 0
|   |   |     |   |-ImplicitCastExpr 0x2ac4b6d5bc0 <col:34, col:38> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x2ac4b6d5ba8 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x2ac4b6d5800 <col:34, col:38> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x2ac4b6d57e8 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x2ac4b6d57a0 <col:34> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |     |   |     `-IntegerLiteral 0x2ac4b6d57c0 <col:37> 'int' 1
|   |   |     |   |-ImplicitCastExpr 0x2ac4b6d5bf0 <col:41, col:45> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x2ac4b6d5bd8 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x2ac4b6d5880 <col:41, col:45> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x2ac4b6d5868 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x2ac4b6d5820 <col:41> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |     |   |     `-IntegerLiteral 0x2ac4b6d5840 <col:44> 'int' 2
|   |   |     |   |-IntegerLiteral 0x2ac4b6d58a0 <col:48> 'int' 1
|   |   |     |   |-ImplicitCastExpr 0x2ac4b6d5c20 <col:51, col:56> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x2ac4b6d5c08 <col:51, col:56> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x2ac4b6d5928 <col:51, col:56> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x2ac4b6d5910 <col:51> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x2ac4b6d58c8 <col:51> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |   |     |   |     `-IntegerLiteral 0x2ac4b6d58e8 <col:55> 'int' 0
|   |   |     |   |-ImplicitCastExpr 0x2ac4b6d5c50 <col:59, col:64> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x2ac4b6d5c38 <col:59, col:64> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x2ac4b6d59a8 <col:59, col:64> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x2ac4b6d5990 <col:59> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x2ac4b6d5948 <col:59> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |   |     |   |     `-IntegerLiteral 0x2ac4b6d5968 <col:63> 'int' 1
|   |   |     |   `-ImplicitCastExpr 0x2ac4b6d5c80 <col:67, col:72> 'const limb *':'const limb *' <NoOp>
|   |   |     |     `-ImplicitCastExpr 0x2ac4b6d5c68 <col:67, col:72> 'limb *' <ArrayToPointerDecay>
|   |   |     |       `-ArraySubscriptExpr 0x2ac4b6d5a28 <col:67, col:72> 'felem':'limb [9]' lvalue
|   |   |     |         |-ImplicitCastExpr 0x2ac4b6d5a10 <col:67> 'felem *' <ArrayToPointerDecay>
|   |   |     |         | `-DeclRefExpr 0x2ac4b6d59c8 <col:67> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |   |     |         `-IntegerLiteral 0x2ac4b6d59e8 <col:71> 'int' 2
|   |   |     `-CompoundStmt 0x2ac4b6d5f10 <line:1550:20, line:1553:13>
|   |   |       |-CallExpr 0x2ac4b6d5e10 <line:1551:17, col:50> 'void *'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6d5df8 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x2ac4b6d5cb0 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x2ac4b480f48 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6d5e60 <col:24> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x2ac4b6d5e48 <col:24> 'felem *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x2ac4b6d5cd0 <col:24> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6d5e90 <col:28> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x2ac4b6d5e78 <col:28> 'felem *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x2ac4b6d5cf0 <col:28> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |   |       | `-BinaryOperator 0x2ac4b6d5d80 <col:33, col:49> 'unsigned long long' '*'
|   |   |       |   |-ImplicitCastExpr 0x2ac4b6d5d68 <col:33> 'unsigned long long' <IntegralCast>
|   |   |       |   | `-IntegerLiteral 0x2ac4b6d5d10 <col:33> 'int' 3
|   |   |       |   `-UnaryExprOrTypeTraitExpr 0x2ac4b6d5d48 <col:37, col:49> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       `-BinaryOperator 0x2ac4b6d5ef0 <line:1552:17, col:24> 'int' '='
|   |   |         |-DeclRefExpr 0x2ac4b6d5ea8 <col:17> 'int' lvalue Var 0x2ac4b6d7af0 'skip' 'int'
|   |   |         `-IntegerLiteral 0x2ac4b6d5ec8 <col:24> 'int' 0
|   |   `-IfStmt 0x2ac4b6e0170 <line:1557:9, line:1585:9>
|   |     |-BinaryOperator 0x2ac4b6d60c0 <line:1557:13, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x2ac4b6d60a8 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x2ac4b6d5fa0 <col:13> 'const unsigned int' lvalue ParmVar 0x2ac4b6d71f0 'num_points' 'const unsigned int'
|   |     | `-ParenExpr 0x2ac4b6d6088 <col:27, col:38> 'int'
|   |     |   `-BinaryOperator 0x2ac4b6d6068 <col:28, col:37> 'int' '=='
|   |     |     |-BinaryOperator 0x2ac4b6d6020 <col:28, col:32> 'int' '%'
|   |     |     | |-ImplicitCastExpr 0x2ac4b6d6008 <col:28> 'int' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x2ac4b6d5fc0 <col:28> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |     |     | `-IntegerLiteral 0x2ac4b6d5fe0 <col:32> 'int' 5
|   |     |     `-IntegerLiteral 0x2ac4b6d6040 <col:37> 'int' 0
|   |     `-CompoundStmt 0x2ac4b6e0158 <col:41, line:1585:9>
|   |       `-ForStmt 0x2ac4b6e0120 <line:1559:13, line:1584:13>
|   |         |-BinaryOperator 0x2ac4b6d6158 <line:1559:18, col:24> 'unsigned int' '='
|   |         | |-DeclRefExpr 0x2ac4b6d60e0 <col:18> 'unsigned int' lvalue Var 0x2ac4b6d7ba0 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x2ac4b6d6140 <col:24> 'unsigned int' <IntegralCast>
|   |         |   `-IntegerLiteral 0x2ac4b6d6118 <col:24> 'int' 0
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x2ac4b6d61e8 <col:27, col:33> 'int' '<'
|   |         | |-ImplicitCastExpr 0x2ac4b6d61b8 <col:27> 'unsigned int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x2ac4b6d6178 <col:27> 'unsigned int' lvalue Var 0x2ac4b6d7ba0 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x2ac4b6d61d0 <col:33> 'unsigned int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x2ac4b6d6198 <col:33> 'const unsigned int' lvalue ParmVar 0x2ac4b6d71f0 'num_points' 'const unsigned int'
|   |         |-UnaryOperator 0x2ac4b6d6228 <col:45, col:47> 'unsigned int' prefix '++'
|   |         | `-DeclRefExpr 0x2ac4b6d6208 <col:47> 'unsigned int' lvalue Var 0x2ac4b6d7ba0 'num' 'unsigned int'
|   |         `-CompoundStmt 0x2ac4b6e00b8 <col:52, line:1584:13>
|   |           |-BinaryOperator 0x2ac4b6d6450 <line:1560:17, col:56> 'limb':'int' '='
|   |           | |-DeclRefExpr 0x2ac4b6d6240 <col:17> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x2ac4b6d6430 <col:24, col:56> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x2ac4b6d6418 <col:24, col:51> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x2ac4b6d63a8 <col:24, col:51> 'char'
|   |           |   |   |-ImplicitCastExpr 0x2ac4b6d6390 <col:24> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x2ac4b6d6260 <col:24> 'char (const u8 *, int)' Function 0x2ac4b6deb08 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x2ac4b6d63d8 <col:32, col:43> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x2ac4b6d62f0 <col:32, col:43> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x2ac4b6d62c0 <col:32> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x2ac4b6d6280 <col:32> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2ac4b6d7170 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x2ac4b6d62d8 <col:40> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x2ac4b6d62a0 <col:40> 'unsigned int' lvalue Var 0x2ac4b6d7ba0 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x2ac4b6d6370 <col:46, col:50> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x2ac4b6d6358 <col:46> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x2ac4b6d6310 <col:46> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x2ac4b6d6330 <col:50> 'int' 4
|   |           |   `-IntegerLiteral 0x2ac4b6d63f0 <col:56> 'int' 5
|   |           |-CompoundAssignOperator 0x2ac4b6d6680 <line:1561:17, col:57> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x2ac4b6d6470 <col:17> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x2ac4b6d6660 <col:25, col:57> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x2ac4b6d6648 <col:25, col:52> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x2ac4b6d65d8 <col:25, col:52> 'char'
|   |           |   |   |-ImplicitCastExpr 0x2ac4b6d65c0 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x2ac4b6d6490 <col:25> 'char (const u8 *, int)' Function 0x2ac4b6deb08 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x2ac4b6d6608 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x2ac4b6d6520 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x2ac4b6d64f0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x2ac4b6d64b0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2ac4b6d7170 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x2ac4b6d6508 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x2ac4b6d64d0 <col:41> 'unsigned int' lvalue Var 0x2ac4b6d7ba0 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x2ac4b6d65a0 <col:47, col:51> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x2ac4b6d6588 <col:47> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x2ac4b6d6540 <col:47> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x2ac4b6d6560 <col:51> 'int' 3
|   |           |   `-IntegerLiteral 0x2ac4b6d6620 <col:57> 'int' 4
|   |           |-CompoundAssignOperator 0x2ac4b6d68c0 <line:1562:17, col:57> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x2ac4b6d66b0 <col:17> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x2ac4b6d68a0 <col:25, col:57> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x2ac4b6d6888 <col:25, col:52> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x2ac4b6d6818 <col:25, col:52> 'char'
|   |           |   |   |-ImplicitCastExpr 0x2ac4b6d6800 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x2ac4b6d66d0 <col:25> 'char (const u8 *, int)' Function 0x2ac4b6deb08 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x2ac4b6d6848 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x2ac4b6d6760 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x2ac4b6d6730 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x2ac4b6d66f0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2ac4b6d7170 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x2ac4b6d6748 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x2ac4b6d6710 <col:41> 'unsigned int' lvalue Var 0x2ac4b6d7ba0 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x2ac4b6d67e0 <col:47, col:51> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x2ac4b6d67c8 <col:47> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x2ac4b6d6780 <col:47> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x2ac4b6d67a0 <col:51> 'int' 2
|   |           |   `-IntegerLiteral 0x2ac4b6d6860 <col:57> 'int' 3
|   |           |-CompoundAssignOperator 0x2ac4b6d6b00 <line:1563:17, col:57> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x2ac4b6d68f0 <col:17> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x2ac4b6d6ae0 <col:25, col:57> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x2ac4b6d6ac8 <col:25, col:52> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x2ac4b6d6a58 <col:25, col:52> 'char'
|   |           |   |   |-ImplicitCastExpr 0x2ac4b6d6a40 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x2ac4b6d6910 <col:25> 'char (const u8 *, int)' Function 0x2ac4b6deb08 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x2ac4b6d6a88 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x2ac4b6d69a0 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x2ac4b6d6970 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x2ac4b6d6930 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2ac4b6d7170 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x2ac4b6d6988 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x2ac4b6d6950 <col:41> 'unsigned int' lvalue Var 0x2ac4b6d7ba0 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x2ac4b6d6a20 <col:47, col:51> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x2ac4b6d6a08 <col:47> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x2ac4b6d69c0 <col:47> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x2ac4b6d69e0 <col:51> 'int' 1
|   |           |   `-IntegerLiteral 0x2ac4b6d6aa0 <col:57> 'int' 2
|   |           |-CompoundAssignOperator 0x2ac4b6ded48 <line:1564:17, col:53> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x2ac4b6d6b30 <col:17> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x2ac4b6ded28 <col:25, col:53> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x2ac4b6ded10 <col:25, col:48> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x2ac4b6d6c38 <col:25, col:48> 'char'
|   |           |   |   |-ImplicitCastExpr 0x2ac4b6d6c20 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x2ac4b6d6b50 <col:25> 'char (const u8 *, int)' Function 0x2ac4b6deb08 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x2ac4b6d6c68 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x2ac4b6d6be0 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x2ac4b6d6bb0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x2ac4b6d6b70 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2ac4b6d7170 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x2ac4b6d6bc8 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x2ac4b6d6b90 <col:41> 'unsigned int' lvalue Var 0x2ac4b6d7ba0 'num' 'unsigned int'
|   |           |   |   `-ImplicitCastExpr 0x2ac4b6decd0 <col:47> 'int' <LValueToRValue>
|   |           |   |     `-DeclRefExpr 0x2ac4b6d6c00 <col:47> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |           |   `-IntegerLiteral 0x2ac4b6dece8 <col:53> 'int' 1
|   |           |-CompoundAssignOperator 0x2ac4b6def40 <line:1565:17, col:52> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x2ac4b6ded78 <col:17> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |           | `-ImplicitCastExpr 0x2ac4b6def28 <col:25, col:52> 'int' <IntegralCast>
|   |           |   `-CallExpr 0x2ac4b6deee0 <col:25, col:52> 'char'
|   |           |     |-ImplicitCastExpr 0x2ac4b6deec8 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     | `-DeclRefExpr 0x2ac4b6ded98 <col:25> 'char (const u8 *, int)' Function 0x2ac4b6deb08 'get_bit' 'char (const u8 *, int)'
|   |           |     |-ImplicitCastExpr 0x2ac4b6def10 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     | `-ArraySubscriptExpr 0x2ac4b6dee28 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |     |   |-ImplicitCastExpr 0x2ac4b6dedf8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   | `-DeclRefExpr 0x2ac4b6dedb8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2ac4b6d7170 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   `-ImplicitCastExpr 0x2ac4b6dee10 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x2ac4b6dedd8 <col:41> 'unsigned int' lvalue Var 0x2ac4b6d7ba0 'num' 'unsigned int'
|   |           |     `-BinaryOperator 0x2ac4b6deea8 <col:47, col:51> 'int' '-'
|   |           |       |-ImplicitCastExpr 0x2ac4b6dee90 <col:47> 'int' <LValueToRValue>
|   |           |       | `-DeclRefExpr 0x2ac4b6dee48 <col:47> 'int' lvalue Var 0x2ac4b6d7a70 'i' 'int'
|   |           |       `-IntegerLiteral 0x2ac4b6dee68 <col:51> 'int' 1
|   |           |-CallExpr 0x2ac4b6df090 <line:1566:17, col:68> 'void'
|   |           | |-ImplicitCastExpr 0x2ac4b6df078 <col:17> 'void (*)(unsigned char *, unsigned char *, unsigned char)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x2ac4b6def70 <col:17> 'void (unsigned char *, unsigned char *, unsigned char)' Function 0x2ac4b4c72a8 'ec_GFp_nistp_recode_scalar_bits' 'void (unsigned char *, unsigned char *, unsigned char)'
|   |           | |-ImplicitCastExpr 0x2ac4b6df0c8 <col:49, col:50> 'unsigned char *' <BitCast>
|   |           | | `-UnaryOperator 0x2ac4b6defc8 <col:49, col:50> 'u8 *' prefix '&' cannot overflow
|   |           | |   `-DeclRefExpr 0x2ac4b6def90 <col:50> 'u8':'int' lvalue Var 0x2ac4b6d80c0 'sign' 'u8':'int'
|   |           | |-ImplicitCastExpr 0x2ac4b6df0e0 <col:56, col:57> 'unsigned char *' <BitCast>
|   |           | | `-UnaryOperator 0x2ac4b6df018 <col:56, col:57> 'u8 *' prefix '&' cannot overflow
|   |           | |   `-DeclRefExpr 0x2ac4b6defe0 <col:57> 'u8':'int' lvalue Var 0x2ac4b6d8138 'digit' 'u8':'int'
|   |           | `-ImplicitCastExpr 0x2ac4b6df110 <col:64> 'unsigned char' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x2ac4b6df0f8 <col:64> 'limb':'int' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x2ac4b6df030 <col:64> 'limb':'int' lvalue Var 0x2ac4b6d8030 'bits' 'limb':'int'
|   |           |-CallExpr 0x2ac4b6df258 <line:1571:17, col:59> 'void'
|   |           | |-ImplicitCastExpr 0x2ac4b6df240 <col:17> 'void (*)(const limb, unsigned int, const felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x2ac4b6df128 <col:17> 'void (const limb, unsigned int, const felem (*)[3], felem *)' Function 0x2ac4b6dd6a8 'select_point' 'void (const limb, unsigned int, const felem (*)[3], felem *)'
|   |           | |-ImplicitCastExpr 0x2ac4b6df298 <col:30> 'u8':'int' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x2ac4b6df148 <col:30> 'u8':'int' lvalue Var 0x2ac4b6d8138 'digit' 'u8':'int'
|   |           | |-ImplicitCastExpr 0x2ac4b6df2b0 <col:37> 'unsigned int' <IntegralCast>
|   |           | | `-IntegerLiteral 0x2ac4b6df168 <col:37> 'int' 17
|   |           | |-ImplicitCastExpr 0x2ac4b6df2c8 <col:41, col:53> 'const felem (*)[3]' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x2ac4b6df200 <col:41, col:53> 'const felem [17][3]' lvalue
|   |           | |   |-ImplicitCastExpr 0x2ac4b6df1d0 <col:41> 'const felem (*)[17][3]':'const felem (*)[17][3]' <LValueToRValue>
|   |           | |   | `-DeclRefExpr 0x2ac4b6df190 <col:41> 'const felem (*)[17][3]':'const felem (*)[17][3]' lvalue ParmVar 0x2ac4b6d7580 'pre_comp' 'const felem (*)[17][3]':'const felem (*)[17][3]'
|   |           | |   `-ImplicitCastExpr 0x2ac4b6df1e8 <col:50> 'unsigned int' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x2ac4b6df1b0 <col:50> 'unsigned int' lvalue Var 0x2ac4b6d7ba0 'num' 'unsigned int'
|   |           | `-ImplicitCastExpr 0x2ac4b6df2e0 <col:56> 'felem *' <ArrayToPointerDecay>
|   |           |   `-DeclRefExpr 0x2ac4b6df220 <col:56> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |           |-CallExpr 0x2ac4b6df430 <line:1572:17, col:41> 'void'
|   |           | |-ImplicitCastExpr 0x2ac4b6df418 <col:17> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x2ac4b6df2f8 <col:17> 'void (limb *, const limb *)' Function 0x2ac4b4f4f50 'felem_neg' 'void (limb *, const limb *)'
|   |           | |-ImplicitCastExpr 0x2ac4b6df460 <col:27, col:32> 'limb *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x2ac4b6df378 <col:27, col:32> 'felem':'limb [9]' lvalue
|   |           | |   |-ImplicitCastExpr 0x2ac4b6df360 <col:27> 'felem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x2ac4b6df318 <col:27> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |           | |   `-IntegerLiteral 0x2ac4b6df338 <col:31> 'int' 3
|   |           | `-ImplicitCastExpr 0x2ac4b6df490 <col:35, col:40> 'const limb *':'const limb *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x2ac4b6df478 <col:35, col:40> 'limb *' <ArrayToPointerDecay>
|   |           |     `-ArraySubscriptExpr 0x2ac4b6df3f8 <col:35, col:40> 'felem':'limb [9]' lvalue
|   |           |       |-ImplicitCastExpr 0x2ac4b6df3e0 <col:35> 'felem *' <ArrayToPointerDecay>
|   |           |       | `-DeclRefExpr 0x2ac4b6df398 <col:35> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |           |       `-IntegerLiteral 0x2ac4b6df3b8 <col:39> 'int' 1
|   |           |-CallExpr 0x2ac4b6df688 <line:1574:17, col:64> 'void'
|   |           | |-ImplicitCastExpr 0x2ac4b6df670 <col:17> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x2ac4b6df4a8 <col:17> 'void (limb *, const limb *, limb)' Function 0x2ac4b5c2e58 'copy_conditional' 'void (limb *, const limb *, limb)'
|   |           | |-ImplicitCastExpr 0x2ac4b6df6c0 <col:34, col:39> 'limb *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x2ac4b6df528 <col:34, col:39> 'felem':'limb [9]' lvalue
|   |           | |   |-ImplicitCastExpr 0x2ac4b6df510 <col:34> 'felem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x2ac4b6df4c8 <col:34> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |           | |   `-IntegerLiteral 0x2ac4b6df4e8 <col:38> 'int' 1
|   |           | |-ImplicitCastExpr 0x2ac4b6df6f0 <col:42, col:47> 'const limb *':'const limb *' <NoOp>
|   |           | | `-ImplicitCastExpr 0x2ac4b6df6d8 <col:42, col:47> 'limb *' <ArrayToPointerDecay>
|   |           | |   `-ArraySubscriptExpr 0x2ac4b6df5a8 <col:42, col:47> 'felem':'limb [9]' lvalue
|   |           | |     |-ImplicitCastExpr 0x2ac4b6df590 <col:42> 'felem *' <ArrayToPointerDecay>
|   |           | |     | `-DeclRefExpr 0x2ac4b6df548 <col:42> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |           | |     `-IntegerLiteral 0x2ac4b6df568 <col:46> 'int' 3
|   |           | `-ParenExpr 0x2ac4b6df650 <col:50, col:63> 'limb':'int'
|   |           |   `-UnaryOperator 0x2ac4b6df638 <col:51, col:59> 'limb':'int' prefix '-'
|   |           |     `-CStyleCastExpr 0x2ac4b6df610 <col:52, col:59> 'limb':'int' <NoOp>
|   |           |       `-ImplicitCastExpr 0x2ac4b6df5f8 <col:59> 'u8':'int' <LValueToRValue> part_of_explicit_cast
|   |           |         `-DeclRefExpr 0x2ac4b6df5c8 <col:59> 'u8':'int' lvalue Var 0x2ac4b6d80c0 'sign' 'u8':'int'
|   |           `-IfStmt 0x2ac4b6e0090 <line:1576:17, line:1583:17> has_else
|   |             |-UnaryOperator 0x2ac4b6df740 <line:1576:21, col:22> 'int' prefix '!' cannot overflow
|   |             | `-ImplicitCastExpr 0x2ac4b6df728 <col:22> 'int' <LValueToRValue>
|   |             |   `-DeclRefExpr 0x2ac4b6df708 <col:22> 'int' lvalue Var 0x2ac4b6d7af0 'skip' 'int'
|   |             |-CompoundStmt 0x2ac4b6dfe20 <col:28, line:1580:17>
|   |             | `-CallExpr 0x2ac4b6dfc30 <line:1577:21, line:1579:60> 'void'
|   |             |   |-ImplicitCastExpr 0x2ac4b6dfc18 <line:1577:21> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x2ac4b6df758 <col:21> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x2ac4b5d5d58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |             |   |-ImplicitCastExpr 0x2ac4b6dfca0 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x2ac4b6df7d8 <col:31, col:35> 'felem':'limb [9]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x2ac4b6df7c0 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x2ac4b6df778 <col:31> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x2ac4b6df798 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x2ac4b6dfcb8 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x2ac4b6df858 <col:38, col:42> 'felem':'limb [9]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x2ac4b6df840 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x2ac4b6df7f8 <col:38> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x2ac4b6df818 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x2ac4b6dfcd0 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x2ac4b6df8d8 <col:45, col:49> 'felem':'limb [9]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x2ac4b6df8c0 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x2ac4b6df878 <col:45> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x2ac4b6df898 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x2ac4b6dfd00 <line:1578:31, col:35> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x2ac4b6dfce8 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x2ac4b6df958 <col:31, col:35> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x2ac4b6df940 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x2ac4b6df8f8 <col:31> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x2ac4b6df918 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x2ac4b6dfd30 <col:38, col:42> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x2ac4b6dfd18 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x2ac4b6df9d8 <col:38, col:42> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x2ac4b6df9c0 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x2ac4b6df978 <col:38> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x2ac4b6df998 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x2ac4b6dfd60 <col:45, col:49> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x2ac4b6dfd48 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x2ac4b6dfa58 <col:45, col:49> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x2ac4b6dfa40 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x2ac4b6df9f8 <col:45> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x2ac4b6dfa18 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x2ac4b6dfd78 <line:1579:31> 'int' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x2ac4b6dfa78 <col:31> 'const int' lvalue ParmVar 0x2ac4b6d72e8 'mixed' 'const int'
|   |             |   |-ImplicitCastExpr 0x2ac4b6dfda8 <col:38, col:43> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x2ac4b6dfd90 <col:38, col:43> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x2ac4b6dfaf8 <col:38, col:43> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x2ac4b6dfae0 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x2ac4b6dfa98 <col:38> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |             |   |     `-IntegerLiteral 0x2ac4b6dfab8 <col:42> 'int' 0
|   |             |   |-ImplicitCastExpr 0x2ac4b6dfdd8 <col:46, col:51> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x2ac4b6dfdc0 <col:46, col:51> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x2ac4b6dfb78 <col:46, col:51> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x2ac4b6dfb60 <col:46> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x2ac4b6dfb18 <col:46> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |             |   |     `-IntegerLiteral 0x2ac4b6dfb38 <col:50> 'int' 1
|   |             |   `-ImplicitCastExpr 0x2ac4b6dfe08 <col:54, col:59> 'const limb *':'const limb *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x2ac4b6dfdf0 <col:54, col:59> 'limb *' <ArrayToPointerDecay>
|   |             |       `-ArraySubscriptExpr 0x2ac4b6dfbf8 <col:54, col:59> 'felem':'limb [9]' lvalue
|   |             |         |-ImplicitCastExpr 0x2ac4b6dfbe0 <col:54> 'felem *' <ArrayToPointerDecay>
|   |             |         | `-DeclRefExpr 0x2ac4b6dfb98 <col:54> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |             |         `-IntegerLiteral 0x2ac4b6dfbb8 <col:58> 'int' 2
|   |             `-CompoundStmt 0x2ac4b6e0070 <line:1580:24, line:1583:17>
|   |               |-CallExpr 0x2ac4b6dff70 <line:1581:21, col:54> 'void *'
|   |               | |-ImplicitCastExpr 0x2ac4b6dff58 <col:21> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x2ac4b6dfe38 <col:21> 'void *(void *, const void *, unsigned long long)' Function 0x2ac4b480f48 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |               | |-ImplicitCastExpr 0x2ac4b6dffc0 <col:28> 'void *' <BitCast>
|   |               | | `-ImplicitCastExpr 0x2ac4b6dffa8 <col:28> 'felem *' <ArrayToPointerDecay>
|   |               | |   `-DeclRefExpr 0x2ac4b6dfe58 <col:28> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |               | |-ImplicitCastExpr 0x2ac4b6dfff0 <col:32> 'const void *' <BitCast>
|   |               | | `-ImplicitCastExpr 0x2ac4b6dffd8 <col:32> 'felem *' <ArrayToPointerDecay>
|   |               | |   `-DeclRefExpr 0x2ac4b6dfe78 <col:32> 'felem [4]' lvalue Var 0x2ac4b6d7f88 'tmp' 'felem [4]'
|   |               | `-BinaryOperator 0x2ac4b6dff08 <col:37, col:53> 'unsigned long long' '*'
|   |               |   |-ImplicitCastExpr 0x2ac4b6dfef0 <col:37> 'unsigned long long' <IntegralCast>
|   |               |   | `-IntegerLiteral 0x2ac4b6dfe98 <col:37> 'int' 3
|   |               |   `-UnaryExprOrTypeTraitExpr 0x2ac4b6dfed0 <col:41, col:53> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |               `-BinaryOperator 0x2ac4b6e0050 <line:1582:21, col:28> 'int' '='
|   |                 |-DeclRefExpr 0x2ac4b6e0008 <col:21> 'int' lvalue Var 0x2ac4b6d7af0 'skip' 'int'
|   |                 `-IntegerLiteral 0x2ac4b6e0028 <col:28> 'int' 0
|   |-CallExpr 0x2ac4b6e02c0 <line:1587:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6e02a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6e01e8 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6e02f0 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b6e0208 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b6d6f00 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2ac4b6e0320 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6e0308 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x2ac4b6e0288 <col:25, col:29> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b6e0270 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b6e0228 <col:25> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x2ac4b6e0248 <col:28> 'int' 0
|   |-CallExpr 0x2ac4b6e0410 <line:1588:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6e03f8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6e0338 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6e0440 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2ac4b6e0358 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b6d6f78 'y_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2ac4b6e0470 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6e0458 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x2ac4b6e03d8 <col:25, col:29> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b6e03c0 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b6e0378 <col:25> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x2ac4b6e0398 <col:28> 'int' 1
|   `-CallExpr 0x2ac4b6e0560 <line:1589:5, col:30> 'void'
|     |-ImplicitCastExpr 0x2ac4b6e0548 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b6e0488 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x2ac4b6e0590 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2ac4b6e04a8 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2ac4b6d6ff0 'z_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2ac4b6e05c0 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2ac4b6e05a8 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|         `-ArraySubscriptExpr 0x2ac4b6e0528 <col:25, col:29> 'felem':'limb [9]' lvalue
|           |-ImplicitCastExpr 0x2ac4b6e0510 <col:25> 'felem *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x2ac4b6e04c8 <col:25> 'felem [3]' lvalue Var 0x2ac4b6d7e48 'nq' 'felem [3]'
|           `-IntegerLiteral 0x2ac4b6e04e8 <col:28> 'int' 2
|-RecordDecl 0x2ac4b6e0640 prev 0x2ac4b555a78 <line:1593:1, line:1597:1> line:1593:8 invalid struct nistp521_pre_comp_st definition
| |-FieldDecl 0x2ac4b6e07a8 <line:1594:5, col:27> col:11 referenced g_pre_comp 'felem [16][3]'
| |-FieldDecl 0x2ac4b6e0818 <line:1595:5, col:9> col:9 referenced references 'int'
| `-FieldDecl 0x2ac4b6e0888 <line:1596:5, col:20> col:20 invalid lock 'int *'
|-FunctionDecl 0x2ac4b6e09b0 <line:1599:1, line:1656:1> line:1599:18 invalid EC_GFp_nistp521_method 'const int *(void)'
| `-CompoundStmt 0x2ac4b6d2cb8 <line:1600:1, line:1656:1>
|   `-DeclStmt 0x2ac4b6d2c70 <line:1601:5, line:1653:6>
|     `-VarDecl 0x2ac4b6e0a80 <line:1601:5, col:28> col:28 invalid ret 'const int' static
|-FunctionDecl 0x2ac4b6d2d48 <line:1663:1, line:1681:1> line:1663:27 used nistp521_pre_comp_new 'NISTP521_PRE_COMP *()' static
| |-CompoundStmt 0x2ac4b6d3840 <line:1664:1, line:1681:1>
| | |-DeclStmt 0x2ac4b6d30a0 <line:1665:5, col:58>
| | | `-VarDecl 0x2ac4b6d2e10 <col:5, col:57> col:24 used ret 'NISTP521_PRE_COMP *' cinit
| | |   `-ImplicitCastExpr 0x2ac4b6d3088 <col:30, col:57> 'NISTP521_PRE_COMP *' <IntegralToPointer>
| | |     `-CallExpr 0x2ac4b6d3060 <col:30, col:57> 'int'
| | |       |-ImplicitCastExpr 0x2ac4b6d3048 <col:30> 'int (*)()' <FunctionToPointerDecay>
| | |       | `-DeclRefExpr 0x2ac4b6d2f68 <col:30> 'int ()' Function 0x2ac4b6d2ea0 'OPENSSL_zalloc' 'int ()'
| | |       `-UnaryExprOrTypeTraitExpr 0x2ac4b6d2ff8 <col:45, col:56> 'unsigned long long' sizeof
| | |         `-ParenExpr 0x2ac4b6d2fd8 <col:51, col:56> 'NISTP521_PRE_COMP':'struct nistp521_pre_comp_st' lvalue
| | |           `-UnaryOperator 0x2ac4b6d2fc0 <col:52, col:53> 'NISTP521_PRE_COMP':'struct nistp521_pre_comp_st' lvalue prefix '*' cannot overflow
| | |             `-ImplicitCastExpr 0x2ac4b6d2fa8 <col:53> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | |               `-DeclRefExpr 0x2ac4b6d2f88 <col:53> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6d2e10 'ret' 'NISTP521_PRE_COMP *' non_odr_use_unevaluated
| | |-IfStmt 0x2ac4b6d3248 <line:1667:5, line:1670:5>
| | | |-BinaryOperator 0x2ac4b6d31a8 <line:1667:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
| | | | |-ImplicitCastExpr 0x2ac4b6d3178 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1667:9> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x2ac4b6d30b8 <col:9> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6d2e10 'ret' 'NISTP521_PRE_COMP *'
| | | | `-ImplicitCastExpr 0x2ac4b6d3190 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <BitCast>
| | | |   `-ParenExpr 0x2ac4b6d3158 <col:17, col:27> 'void *'
| | | |     `-CStyleCastExpr 0x2ac4b6d3130 <col:18, col:26> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x2ac4b6d30f0 <col:26> 'int' 0
| | | `-CompoundStmt 0x2ac4b6d3230 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1667:22, line:1670:5>
| | |   `-ReturnStmt 0x2ac4b6d3220 <line:1669:9, col:16>
| | |     `-ImplicitCastExpr 0x2ac4b6d3208 <col:16> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | |       `-DeclRefExpr 0x2ac4b6d31e8 <col:16> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6d2e10 'ret' 'NISTP521_PRE_COMP *'
| | |-BinaryOperator 0x2ac4b6d32f0 <line:1672:5, col:23> 'int' '='
| | | |-MemberExpr 0x2ac4b6d3298 <col:5, col:10> 'int' lvalue ->references 0x2ac4b6e0818
| | | | `-ImplicitCastExpr 0x2ac4b6d3280 <col:5> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2ac4b6d3260 <col:5> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6d2e10 'ret' 'NISTP521_PRE_COMP *'
| | | `-IntegerLiteral 0x2ac4b6d32c8 <col:23> 'int' 1
| | |-IfStmt 0x2ac4b6d37e0 <line:1675:5, line:1679:5>
| | | |-OpaqueValueExpr 0x2ac4b6d37c8 <<invalid sloc>> '_Bool'
| | | `-CompoundStmt 0x2ac4b6d37a8 <line:1675:28, line:1679:5>
| | |   |-CallExpr 0x2ac4b6d36b8 <line:1677:9, col:25> 'int'
| | |   | |-ImplicitCastExpr 0x2ac4b6d36a0 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x2ac4b6d3660 <col:9> 'int ()' Function 0x2ac4b6d3598 'OPENSSL_free' 'int ()'
| | |   | `-ImplicitCastExpr 0x2ac4b6d36e0 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x2ac4b6d3680 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6d2e10 'ret' 'NISTP521_PRE_COMP *'
| | |   `-ReturnStmt 0x2ac4b6d3798 <line:1678:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27>
| | |     `-ImplicitCastExpr 0x2ac4b6d3780 <col:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
| | |       `-ParenExpr 0x2ac4b6d3760 <col:17, col:27> 'void *'
| | |         `-CStyleCastExpr 0x2ac4b6d3738 <col:18, col:26> 'void *' <NullToPointer>
| | |           `-IntegerLiteral 0x2ac4b6d36f8 <col:26> 'int' 0
| | `-ReturnStmt 0x2ac4b6d3830 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1680:5, col:12>
| |   `-ImplicitCastExpr 0x2ac4b6d3818 <col:12> 'NISTP521_PRE_COMP *' <LValueToRValue>
| |     `-DeclRefExpr 0x2ac4b6d37f8 <col:12> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6d2e10 'ret' 'NISTP521_PRE_COMP *'
| `-FullComment 0x2ac4b6fd5f8 <line:1658:4, col:78>
|   `-ParagraphComment 0x2ac4b6fd5d0 <col:4, col:78>
|     `-TextComment 0x2ac4b6fd5a8 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x2ac4b6d3930 prev 0x2ac4b552608 <line:1683:1, line:1689:1> line:1683:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| |-ParmVarDecl 0x2ac4b6d3888 <col:45, col:64> col:64 used p 'NISTP521_PRE_COMP *'
| `-CompoundStmt 0x2ac4b6d3df0 <line:1684:1, line:1689:1>
|   |-DeclStmt 0x2ac4b6d3a58 <line:1685:5, col:10>
|   | `-VarDecl 0x2ac4b6d39f0 <col:5, col:9> col:9 used i 'int'
|   `-ReturnStmt 0x2ac4b6d3de0 <line:1688:5, col:12>
|     `-ImplicitCastExpr 0x2ac4b6d3dc8 <col:12> 'NISTP521_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x2ac4b6d3da8 <col:12> 'NISTP521_PRE_COMP *' lvalue ParmVar 0x2ac4b6d3888 'p' 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x2ac4b6d3ec8 prev 0x2ac4b5571c8 <line:1691:1, line:1706:1> line:1691:6 used EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| |-ParmVarDecl 0x2ac4b6d3e20 <col:32, col:51> col:51 used p 'NISTP521_PRE_COMP *'
| `-CompoundStmt 0x2ac4b6d4888 <line:1692:1, line:1706:1>
|   |-DeclStmt 0x2ac4b6d3ff0 <line:1693:5, col:10>
|   | `-VarDecl 0x2ac4b6d3f88 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x2ac4b6d4110 <line:1695:5, line:1696:9>
|   | |-BinaryOperator 0x2ac4b6d40e0 <line:1695:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x2ac4b6d40b0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1695:9> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b6d4008 <col:9> 'NISTP521_PRE_COMP *' lvalue ParmVar 0x2ac4b6d3e20 'p' 'NISTP521_PRE_COMP *'
|   | | `-ImplicitCastExpr 0x2ac4b6d40c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x2ac4b6d4090 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x2ac4b6d4068 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x2ac4b6d4028 <col:26> 'int' 0
|   | `-ReturnStmt 0x2ac4b6d4100 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1696:9>
|   |-IfStmt 0x2ac4b6d4490 <line:1700:5, line:1701:9>
|   | |-BinaryOperator 0x2ac4b6d4460 <line:1700:9, col:13> 'int' '>'
|   | | |-ImplicitCastExpr 0x2ac4b6d4448 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b6d4400 <col:9> 'int' lvalue Var 0x2ac4b6d3f88 'i' 'int'
|   | | `-IntegerLiteral 0x2ac4b6d4420 <col:13> 'int' 0
|   | `-ReturnStmt 0x2ac4b6d4480 <line:1701:9>
|   |-CallExpr 0x2ac4b6d4650 <line:1702:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x2ac4b6d4638 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6d4598 <col:5> 'int ()' Function 0x2ac4b6d44d0 'REF_ASSERT_ISNT' 'int ()'
|   | `-BinaryOperator 0x2ac4b6d4618 <col:21, col:25> 'int' '<'
|   |   |-ImplicitCastExpr 0x2ac4b6d4600 <col:21> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b6d45b8 <col:21> 'int' lvalue Var 0x2ac4b6d3f88 'i' 'int'
|   |   `-IntegerLiteral 0x2ac4b6d45d8 <col:25> 'int' 0
|   `-CallExpr 0x2ac4b6d4818 <line:1705:5, col:19> 'int'
|     |-ImplicitCastExpr 0x2ac4b6d4800 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b6d47c0 <col:5> 'int ()' Function 0x2ac4b6d3598 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x2ac4b6d4840 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x2ac4b6d47e0 <col:18> 'NISTP521_PRE_COMP *' lvalue ParmVar 0x2ac4b6d3e20 'p' 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x2ac4b6d4970 <line:1713:1, line:1719:1> line:1713:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| |-ParmVarDecl 0x2ac4b6d48d8 <col:32, col:42> col:42 invalid group 'int *'
| |-CompoundStmt 0x2ac4b6d4b70 <line:1714:1, line:1719:1>
| | |-DeclStmt 0x2ac4b6d4ab0 <line:1715:5, col:12>
| | | `-VarDecl 0x2ac4b6d4a48 <col:5, col:9> col:9 used ret 'int'
| | `-ReturnStmt 0x2ac4b6d4b60 <line:1718:5, col:12>
| |   `-ImplicitCastExpr 0x2ac4b6d4b48 <col:12> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x2ac4b6d4b28 <col:12> 'int' lvalue Var 0x2ac4b6d4a48 'ret' 'int'
| `-FullComment 0x2ac4b6fd6c0 <line:1708:4, col:78>
|   `-ParagraphComment 0x2ac4b6fd698 <col:4, col:78>
|     `-TextComment 0x2ac4b6fd670 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x2ac4b6e2f28 <line:1721:1, line:1751:1> line:1721:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2ac4b6d4ba8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x2ac4b6e2cf0 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x2ac4b6e2d70 <line:1722:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x2ac4b6e2df0 <col:54, col:68> col:68 invalid b 'const int *'
| |-ParmVarDecl 0x2ac4b6e2e70 <line:1723:37, col:45> col:45 invalid ctx 'int *'
| `-CompoundStmt 0x2ac4b6e3fd0 <line:1724:1, line:1751:1>
|   |-DeclStmt 0x2ac4b6e30b0 <line:1725:5, col:16>
|   | `-VarDecl 0x2ac4b6e3020 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x2ac4b6e3088 <col:15> 'int' 0
|   |-IfStmt 0x2ac4b6e3428 <line:1729:5, line:1731:20>
|   | |-OpaqueValueExpr 0x2ac4b6e3410 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x2ac4b6e33f8 <line:1730:9, line:1731:20>
|   |   |-OpaqueValueExpr 0x2ac4b6e33e0 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x2ac4b6e33d0 <col:13, col:20>
|   |     `-IntegerLiteral 0x2ac4b6e33a8 <col:20> 'int' 0
|   |-IfStmt 0x2ac4b6e38b8 <line:1733:5, line:1736:14>
|   | |-OpaqueValueExpr 0x2ac4b6e38a0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2ac4b6e3888 <col:9, col:14> 'err' 0x2ac4b6e3838
|   |-IfStmt 0x2ac4b6e3cf8 <line:1740:5, line:1744:5>
|   | |-OpaqueValueExpr 0x2ac4b6e3ce0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2ac4b6e3cc8 <line:1740:79, line:1744:5>
|   |   `-GotoStmt 0x2ac4b6e3cb0 <line:1743:9, col:14> 'err' 0x2ac4b6e3838
|   |-LabelStmt 0x2ac4b6e3e60 <line:1747:2, col:5> 'err'
|   | `-NullStmt 0x2ac4b6e3e58 <col:5>
|   `-ReturnStmt 0x2ac4b6e3fc0 <line:1750:5, col:12>
|     `-ImplicitCastExpr 0x2ac4b6e3fa8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x2ac4b6e3f88 <col:12> 'int' lvalue Var 0x2ac4b6e3020 'ret' 'int'
|-FunctionDecl 0x2ac4b6e42e0 <line:1757:1, line:1799:1> line:1757:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2ac4b6e4028 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b6e40a8 <line:1758:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x2ac4b6e4128 <line:1759:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x2ac4b6e41a8 <col:61, col:69> col:69 invalid y 'int *'
| |-ParmVarDecl 0x2ac4b6e4228 <line:1760:50, col:58> col:58 invalid ctx 'int *'
| `-CompoundStmt 0x2ac4b6eb988 <line:1761:1, line:1799:1>
|   |-DeclStmt 0x2ac4b6e46c8 <line:1762:5, col:43>
|   | |-VarDecl 0x2ac4b6e43d0 <col:5, col:11> col:11 used z1 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b6e4448 <col:5, col:15> col:15 used z2 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b6e44c0 <col:5, col:19> col:19 used x_in 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b6e4538 <col:5, col:25> col:25 used y_in 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b6e45b0 <col:5, col:31> col:31 used x_out 'felem':'limb [9]'
|   | `-VarDecl 0x2ac4b6e4628 <col:5, col:38> col:38 used y_out 'felem':'limb [9]'
|   |-DeclStmt 0x2ac4b6e4758 <line:1763:5, col:19>
|   | `-VarDecl 0x2ac4b6e46f0 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-IfStmt 0x2ac4b6e4908 <line:1765:5, line:1769:5>
|   | |-OpaqueValueExpr 0x2ac4b6e48f0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2ac4b6e48d8 <line:1765:48, line:1769:5>
|   |   `-ReturnStmt 0x2ac4b6e48c8 <line:1768:9, col:16>
|   |     `-IntegerLiteral 0x2ac4b6e48a0 <col:16> 'int' 0
|   |-IfStmt 0x2ac4b6e4a18 <line:1770:5, line:1772:16>
|   | |-OpaqueValueExpr 0x2ac4b6e4a00 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2ac4b6e49f0 <col:9, col:16>
|   |   `-IntegerLiteral 0x2ac4b6e49c8 <col:16> 'int' 0
|   |-CallExpr 0x2ac4b6e4ac0 <line:1773:5, col:21> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6e4aa8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6e4a30 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b5bcd68 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6e4af0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6e4a50 <col:15> 'felem':'limb [9]' lvalue Var 0x2ac4b6e4448 'z2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6e4b20 <col:19> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6e4b08 <col:19> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6e4a88 <col:19> 'felem':'limb [9]' lvalue Var 0x2ac4b6e43d0 'z1' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b6e4bc8 <line:1774:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6e4bb0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6e4b38 <col:5> 'void (int *, const limb *)' Function 0x2ac4b4fa1f0 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6e4bf8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6e4b58 <col:18> 'largefelem':'int [9]' lvalue Var 0x2ac4b6e46f0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x2ac4b6e4c28 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6e4c10 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6e4b90 <col:23> 'felem':'limb [9]' lvalue Var 0x2ac4b6e4448 'z2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b6e4cb8 <line:1775:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6e4ca0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6e4c40 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b6ead30 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6e4c60 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b6e43d0 'z1' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6ead60 <col:22> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6ead48 <col:22> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6e4c80 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b6e46f0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b6eae10 <line:1776:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6eadf8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6ead78 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6eae48 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6ead98 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b6e46f0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b6eae78 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6eae60 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b6eadb8 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b6e44c0 'x_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6eaea8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6eae90 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6eadd8 <col:26> 'felem':'limb [9]' lvalue Var 0x2ac4b6e43d0 'z1' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b6eaf38 <line:1777:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6eaf20 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eaec0 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b6eaf68 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eaee0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b6e44c0 'x_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6eaf98 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6eaf80 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6eaf00 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b6e46f0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b6eb040 <line:1778:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6eb028 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eafb0 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b5c6540 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6eb070 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eafd0 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b6e45b0 'x_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6eb0a0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6eb088 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6eb008 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b6e44c0 'x_in' 'felem':'limb [9]'
|   |-IfStmt 0x2ac4b6eb230 <line:1779:5, line:1785:5>
|   | |-OpaqueValueExpr 0x2ac4b6eb218 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2ac4b6eb200 <line:1779:20, line:1785:5>
|   |   `-IfStmt 0x2ac4b6eb1e8 <line:1780:9, line:1784:9>
|   |     |-OpaqueValueExpr 0x2ac4b6eb1d0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x2ac4b6eb1b8 <line:1780:37, line:1784:9>
|   |       `-ReturnStmt 0x2ac4b6eb1a8 <line:1783:13, col:20>
|   |         `-IntegerLiteral 0x2ac4b6eb180 <col:20> 'int' 0
|   |-CallExpr 0x2ac4b6eb2e0 <line:1786:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6eb2c8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eb248 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6eb318 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eb268 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b6e46f0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b6eb348 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6eb330 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b6eb288 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b6e43d0 'z1' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6eb378 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6eb360 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6eb2a8 <col:24> 'felem':'limb [9]' lvalue Var 0x2ac4b6e4448 'z2' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b6eb408 <line:1787:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6eb3f0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eb390 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b6eb438 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eb3b0 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b6e43d0 'z1' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6eb468 <col:22> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6eb450 <col:22> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6eb3d0 <col:22> 'largefelem':'int [9]' lvalue Var 0x2ac4b6e46f0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b6eb518 <line:1788:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6eb500 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eb480 <col:5> 'void (int *, const limb *, const limb *)' Function 0x2ac4b4fc858 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6eb550 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eb4a0 <col:15> 'largefelem':'int [9]' lvalue Var 0x2ac4b6e46f0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x2ac4b6eb580 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6eb568 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2ac4b6eb4c0 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b6e4538 'y_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6eb5b0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6eb598 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6eb4e0 <col:26> 'felem':'limb [9]' lvalue Var 0x2ac4b6e43d0 'z1' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b6eb640 <line:1789:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6eb628 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eb5c8 <col:5> 'void (limb *, const int *)' Function 0x2ac4b4ffe78 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x2ac4b6eb670 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eb5e8 <col:18> 'felem':'limb [9]' lvalue Var 0x2ac4b6e4538 'y_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6eb6a0 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6eb688 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6eb608 <col:24> 'largefelem':'int [9]' lvalue Var 0x2ac4b6e46f0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x2ac4b6eb748 <line:1790:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6eb730 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eb6b8 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b5c6540 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6eb778 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6eb6d8 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b6e4628 'y_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6eb7a8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6eb790 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6eb710 <col:27> 'felem':'limb [9]' lvalue Var 0x2ac4b6e4538 'y_in' 'felem':'limb [9]'
|   |-IfStmt 0x2ac4b6eb938 <line:1791:5, line:1797:5>
|   | |-OpaqueValueExpr 0x2ac4b6eb920 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2ac4b6eb908 <line:1791:20, line:1797:5>
|   |   `-IfStmt 0x2ac4b6eb8f0 <line:1792:9, line:1796:9>
|   |     |-OpaqueValueExpr 0x2ac4b6eb8d8 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x2ac4b6eb8c0 <line:1792:37, line:1796:9>
|   |       `-ReturnStmt 0x2ac4b6eb8b0 <line:1795:13, col:20>
|   |         `-IntegerLiteral 0x2ac4b6eb888 <col:20> 'int' 0
|   `-ReturnStmt 0x2ac4b6eb978 <line:1798:5, col:12>
|     `-IntegerLiteral 0x2ac4b6eb950 <col:12> 'int' 1
|-FunctionDecl 0x2ac4b6ebe58 <line:1802:1, line:1829:1> line:1802:13 used make_points_affine 'void (size_t, felem (*)[3], felem *)' static
| |-ParmVarDecl 0x2ac4b6eba38 <col:32, col:39> col:39 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b6ebbd0 <col:44, col:60> col:50 used points 'felem (*)[3]':'felem (*)[3]'
| |-ParmVarDecl 0x2ac4b6ebcf0 <line:1803:32, col:49> col:38 used tmp_felems 'felem *':'felem *'
| `-CompoundStmt 0x2ac4b6ecb88 <line:1804:1, line:1829:1>
|   `-CallExpr 0x2ac4b6eca80 <line:1809:5, line:1828:60> 'void'
|     |-ImplicitCastExpr 0x2ac4b6eca68 <line:1809:5> 'void (*)(size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b6ebf28 <col:5> 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' Function 0x2ac4b4c6f58 'ec_GFp_nistp_points_make_affine_internal' 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
|     |-ImplicitCastExpr 0x2ac4b6ecaf8 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|     | `-DeclRefExpr 0x2ac4b6ebf48 <col:46> 'size_t':'unsigned long long' lvalue ParmVar 0x2ac4b6eba38 'num' 'size_t':'unsigned long long'
|     |-ImplicitCastExpr 0x2ac4b6ecb28 <line:1810:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x2ac4b6ecb10 <col:46> 'felem (*)[3]':'felem (*)[3]' <LValueToRValue>
|     |   `-DeclRefExpr 0x2ac4b6ebf68 <col:46> 'felem (*)[3]':'felem (*)[3]' lvalue ParmVar 0x2ac4b6ebbd0 'points' 'felem (*)[3]':'felem (*)[3]'
|     |-UnaryExprOrTypeTraitExpr 0x2ac4b6ebf98 <line:1811:46, col:58> 'unsigned long long' sizeof 'felem':'limb [9]'
|     |-ImplicitCastExpr 0x2ac4b6ecb58 <line:1812:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x2ac4b6ecb40 <col:46> 'felem *':'felem *' <LValueToRValue>
|     |   `-DeclRefExpr 0x2ac4b6ebfb8 <col:46> 'felem *':'felem *' lvalue ParmVar 0x2ac4b6ebcf0 'tmp_felems' 'felem *':'felem *'
|     |-CStyleCastExpr 0x2ac4b6ec0f0 <line:1813:46, col:64> 'void (*)(void *)' <BitCast>
|     | `-ImplicitCastExpr 0x2ac4b6ec0d8 <col:64> 'void (*)(limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2ac4b6ec058 <col:64> 'void (limb *)' Function 0x2ac4b4f01f8 'felem_one' 'void (limb *)'
|     |-ImplicitCastExpr 0x2ac4b6ecb70 <line:1814:46> 'int (*)(const void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2ac4b6ec118 <col:46> 'int (const void *)' Function 0x2ac4b5c6108 'felem_is_zero_int' 'int (const void *)'
|     |-CStyleCastExpr 0x2ac4b6ec2b0 <line:1815:46, line:1816:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x2ac4b6ec298 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2ac4b6ec238 <col:46> 'void (limb *, const limb *)' Function 0x2ac4b4f0bb8 'felem_assign' 'void (limb *, const limb *)'
|     |-CStyleCastExpr 0x2ac4b6ec450 <line:1817:46, line:1818:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x2ac4b6ec438 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2ac4b6ec3d8 <col:46> 'void (limb *, const limb *)' Function 0x2ac4b5bc240 'felem_square_reduce' 'void (limb *, const limb *)'
|     |-CStyleCastExpr 0x2ac4b6ec6a0 <col:67, line:1824:46> 'void (*)(void *, const void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x2ac4b6ec688 <col:46> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2ac4b6ec5f8 <col:46> 'void (limb *, const limb *, const limb *)' Function 0x2ac4b5bc818 'felem_mul_reduce' 'void (limb *, const limb *, const limb *)'
|     |-CStyleCastExpr 0x2ac4b6ec840 <line:1825:46, line:1826:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x2ac4b6ec828 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2ac4b6ec7c8 <col:46> 'void (limb *, const limb *)' Function 0x2ac4b5bcd68 'felem_inv' 'void (limb *, const limb *)'
|     `-CStyleCastExpr 0x2ac4b6ec9e0 <line:1827:46, line:1828:46> 'void (*)(void *, const void *)' <BitCast>
|       `-ImplicitCastExpr 0x2ac4b6ec9c8 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|         `-DeclRefExpr 0x2ac4b6ec968 <col:46> 'void (limb *, const limb *)' Function 0x2ac4b5c6540 'felem_contract' 'void (limb *, const limb *)'
|-FunctionDecl 0x2ac4b6f2fd8 <line:1835:1, line:2033:1> line:1835:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2ac4b6ecbb8 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x2ac4b6ecc38 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x2ac4b6eccb8 <line:1836:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x2ac4b6f2d70 <col:54, col:61> col:61 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2ac4b6f2e00 <line:1837:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2ac4b6f2e90 <line:1838:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| |-ParmVarDecl 0x2ac4b6f2f10 <col:57, col:65> col:65 invalid ctx 'int *'
| `-CompoundStmt 0x2ac4b6f7208 <line:1839:1, line:2033:1>
|   |-DeclStmt 0x2ac4b6f3170 <line:1840:5, col:16>
|   | `-VarDecl 0x2ac4b6f30e0 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x2ac4b6f3148 <col:15> 'int' 0
|   |-DeclStmt 0x2ac4b6f3208 <line:1841:5, col:10>
|   | `-VarDecl 0x2ac4b6f31a0 <col:5, col:9> col:9 used j 'int'
|   |-DeclStmt 0x2ac4b6f32c8 <line:1842:5, col:18>
|   | `-VarDecl 0x2ac4b6f3238 <col:5, col:17> col:9 used mixed 'int' cinit
|   |   `-IntegerLiteral 0x2ac4b6f32a0 <col:17> 'int' 0
|   |-DeclStmt 0x2ac4b6f33e0 <line:1845:5, col:29>
|   | `-VarDecl 0x2ac4b6f3378 <col:5, col:21> col:21 used g_secret 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x2ac4b6f3570 <line:1846:5, col:36>
|   | `-VarDecl 0x2ac4b6f3468 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1846:22 used secrets 'felem_bytearray *' cinit
|   |   `-ImplicitCastExpr 0x2ac4b6f3558 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <NullToPointer>
|   |     `-ParenExpr 0x2ac4b6f3538 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2ac4b6f3510 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2ac4b6f34d0 <col:26> 'int' 0
|   |-DeclStmt 0x2ac4b6f3820 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1847:5, col:36>
|   | `-VarDecl 0x2ac4b6f3718 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1847:13 used pre_comp 'felem (*)[17][3]' cinit
|   |   `-ImplicitCastExpr 0x2ac4b6f3808 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[17][3]' <NullToPointer>
|   |     `-ParenExpr 0x2ac4b6f37e8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2ac4b6f37c0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2ac4b6f3780 <col:26> 'int' 0
|   |-DeclStmt 0x2ac4b6f3950 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1848:5, col:29>
|   | `-VarDecl 0x2ac4b6f3848 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1848:12 used tmp_felems 'felem *' cinit
|   |   `-ImplicitCastExpr 0x2ac4b6f3938 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem *' <NullToPointer>
|   |     `-ParenExpr 0x2ac4b6f3918 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2ac4b6f38f0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2ac4b6f38b0 <col:26> 'int' 0
|   |-DeclStmt 0x2ac4b6f39e0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1849:5, col:24>
|   | `-VarDecl 0x2ac4b6f3978 <col:5, col:21> col:21 used tmp 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x2ac4b6f3b10 <line:1850:5, col:26>
|   | |-VarDecl 0x2ac4b6f3a10 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x2ac4b6f3a90 <col:5, col:17> col:17 used num_bytes 'unsigned int'
|   |-DeclStmt 0x2ac4b6f3bd0 <line:1851:5, col:26>
|   | `-VarDecl 0x2ac4b6f3b40 <col:5, col:25> col:9 used have_pre_comp 'int' cinit
|   |   `-IntegerLiteral 0x2ac4b6f3ba8 <col:25> 'int' 0
|   |-DeclStmt 0x2ac4b6f3cb0 <line:1852:5, col:28>
|   | `-VarDecl 0x2ac4b6f3bf8 <col:5, col:25> col:12 used num_points 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x2ac4b6f3c98 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2ac4b6f3c60 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x2ac4b6f2d70 'num' 'size_t':'unsigned long long'
|   |-DeclStmt 0x2ac4b6f3fd0 <line:1853:5, col:48>
|   | |-VarDecl 0x2ac4b6f3cd8 <col:5, col:11> col:11 used x_in 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b6f3d50 <col:5, col:17> col:17 used y_in 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b6f3dc8 <col:5, col:23> col:23 used z_in 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b6f3e40 <col:5, col:29> col:29 used x_out 'felem':'limb [9]'
|   | |-VarDecl 0x2ac4b6f3eb8 <col:5, col:36> col:36 used y_out 'felem':'limb [9]'
|   | `-VarDecl 0x2ac4b6f3f30 <col:5, col:43> col:43 used z_out 'felem':'limb [9]'
|   |-DeclStmt 0x2ac4b6f4100 <line:1854:5, col:34>
|   | `-VarDecl 0x2ac4b6f3ff8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1854:24 used pre 'NISTP521_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x2ac4b6f40e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x2ac4b6f40c8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2ac4b6f40a0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2ac4b6f4060 <col:26> 'int' 0
|   |-DeclStmt 0x2ac4b6f42f0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1855:5, col:33>
|   | `-VarDecl 0x2ac4b6f41e8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1855:12 used g_pre_comp 'felem (*)[3]' cinit
|   |   `-ImplicitCastExpr 0x2ac4b6f42d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[3]' <NullToPointer>
|   |     `-ParenExpr 0x2ac4b6f42b8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2ac4b6f4290 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2ac4b6f4250 <col:26> 'int' 0
|   |-DeclStmt 0x2ac4b6f4498 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1857:5, col:29>
|   | `-VarDecl 0x2ac4b6f43a8 <col:5, col:21> col:21 invalid p 'const int *'
|   |-DeclStmt 0x2ac4b6f45b8 <line:1858:5, col:34>
|   | `-VarDecl 0x2ac4b6f44c8 <col:5, col:19> col:19 invalid p_scalar 'const int *'
|   |-IfStmt 0x2ac4b6f47b8 <line:1860:5, line:1862:20>
|   | |-OpaqueValueExpr 0x2ac4b6f47a0 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x2ac4b6f4788 <line:1861:9, line:1862:20>
|   |   |-OpaqueValueExpr 0x2ac4b6f4770 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x2ac4b6f4760 <col:13, col:20>
|   |     `-IntegerLiteral 0x2ac4b6f4738 <col:20> 'int' 0
|   |-IfStmt 0x2ac4b6f4b10 <line:1864:5, line:1868:14>
|   | |-OpaqueValueExpr 0x2ac4b6f4af8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2ac4b6f4ae0 <col:9, col:14> 'err' 0x2ac4b6f4a90
|   |-IfStmt 0x2ac4b6e7778 <line:1870:5, line:1901:5>
|   | |-OpaqueValueExpr 0x2ac4b6e7760 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2ac4b6e7728 <line:1870:25, line:1901:5>
|   |   |-IfStmt 0x2ac4b6e6e60 <line:1872:9, line:1877:40> has_else
|   |   | |-ImplicitCastExpr 0x2ac4b6f4c08 <line:1872:13> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2ac4b6f4be8 <col:13> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f3ff8 'pre' 'NISTP521_PRE_COMP *'
|   |   | |-BinaryOperator 0x2ac4b6f4d38 <line:1874:13, col:44> 'felem (*)[3]' '='
|   |   | | |-DeclRefExpr 0x2ac4b6f4c20 <col:13> 'felem (*)[3]' lvalue Var 0x2ac4b6f41e8 'g_pre_comp' 'felem (*)[3]'
|   |   | | `-UnaryOperator 0x2ac4b6f4d20 <col:26, col:44> 'felem (*)[3]' prefix '&' cannot overflow
|   |   | |   `-ArraySubscriptExpr 0x2ac4b6f4d00 <col:27, col:44> 'felem [3]' lvalue
|   |   | |     |-ImplicitCastExpr 0x2ac4b6f4ce8 <col:27, col:32> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     | `-MemberExpr 0x2ac4b6f4c90 <col:27, col:32> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |   | |     |   `-ImplicitCastExpr 0x2ac4b6f4c78 <col:27> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x2ac4b6f4c58 <col:27> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f3ff8 'pre' 'NISTP521_PRE_COMP *'
|   |   | |     `-IntegerLiteral 0x2ac4b6f4cc0 <col:43> 'int' 0
|   |   | `-BinaryOperator 0x2ac4b6e6e40 <line:1877:13, col:40> 'felem (*)[3]' '='
|   |   |   |-DeclRefExpr 0x2ac4b6e6d10 <col:13> 'felem (*)[3]' lvalue Var 0x2ac4b6f41e8 'g_pre_comp' 'felem (*)[3]'
|   |   |   `-CStyleCastExpr 0x2ac4b6e6e18 <col:26, col:40> 'felem (*)[3]' <NoOp>
|   |   |     `-ImplicitCastExpr 0x2ac4b6e6dc0 <col:40> 'const felem (*)[3]' <ArrayToPointerDecay> part_of_explicit_cast
|   |   |       `-DeclRefExpr 0x2ac4b6e6d58 <col:40> 'const felem [16][3]' lvalue Var 0x2ac4b5d4e08 'gmul' 'const felem [16][3]'
|   |   |-IfStmt 0x2ac4b6e7050 <line:1879:9, line:1880:18>
|   |   | |-OpaqueValueExpr 0x2ac4b6e7038 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x2ac4b6e7020 <col:13, col:18> 'err' 0x2ac4b6f4a90
|   |   |-IfStmt 0x2ac4b6e7370 <line:1882:9, line:1887:9>
|   |   | |-OpaqueValueExpr 0x2ac4b6e7358 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x2ac4b6e7340 <line:1884:48, line:1887:9>
|   |   |   `-GotoStmt 0x2ac4b6e7328 <line:1886:13, col:18> 'err' 0x2ac4b6f4a90
|   |   |-IfStmt 0x2ac4b6e74c8 <line:1888:9, line:1891:18>
|   |   | |-OpaqueValueExpr 0x2ac4b6e74b0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x2ac4b6e7498 <col:13, col:18> 'err' 0x2ac4b6f4a90
|   |   `-IfStmt 0x2ac4b6e7700 <line:1892:9, line:1900:23> has_else
|   |     |-OpaqueValueExpr 0x2ac4b6e76e8 <<invalid sloc>> '_Bool'
|   |     |-BinaryOperator 0x2ac4b6e7678 <line:1894:13, col:29> 'int' '='
|   |     | |-DeclRefExpr 0x2ac4b6e7618 <col:13> 'int' lvalue Var 0x2ac4b6f3b40 'have_pre_comp' 'int'
|   |     | `-IntegerLiteral 0x2ac4b6e7650 <col:29> 'int' 1
|   |     `-UnaryOperator 0x2ac4b6e76d0 <line:1900:13, col:23> 'size_t':'unsigned long long' postfix '++'
|   |       `-DeclRefExpr 0x2ac4b6e7698 <col:13> 'size_t':'unsigned long long' lvalue Var 0x2ac4b6f3bf8 'num_points' 'size_t':'unsigned long long'
|   |-IfStmt 0x2ac4b6f58d8 <line:1903:5, line:1984:5>
|   | |-BinaryOperator 0x2ac4b6e7808 <line:1903:9, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x2ac4b6e77d8 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b6e7790 <col:9> 'size_t':'unsigned long long' lvalue Var 0x2ac4b6f3bf8 'num_points' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x2ac4b6e77f0 <col:22> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x2ac4b6e77b0 <col:22> 'int' 0
|   | `-CompoundStmt 0x2ac4b6f5890 <col:25, line:1984:5>
|   |   |-IfStmt 0x2ac4b6e7958 <line:1904:9, line:1910:9>
|   |   | |-BinaryOperator 0x2ac4b6e78a0 <line:1904:13, col:27> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x2ac4b6e7870 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x2ac4b6e7828 <col:13> 'size_t':'unsigned long long' lvalue Var 0x2ac4b6f3bf8 'num_points' 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x2ac4b6e7888 <col:27> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x2ac4b6e7848 <col:27> 'int' 2
|   |   | `-CompoundStmt 0x2ac4b6e7940 <col:30, line:1910:9>
|   |   |   `-BinaryOperator 0x2ac4b6e7920 <line:1909:13, col:21> 'int' '='
|   |   |     |-DeclRefExpr 0x2ac4b6e78c0 <col:13> 'int' lvalue Var 0x2ac4b6f3238 'mixed' 'int'
|   |   |     `-IntegerLiteral 0x2ac4b6e78f8 <col:21> 'int' 1
|   |   |-BinaryOperator 0x2ac4b6e7b08 <line:1911:9, col:63> 'felem_bytearray *' '='
|   |   | |-DeclRefExpr 0x2ac4b6e7970 <col:9> 'felem_bytearray *' lvalue Var 0x2ac4b6f3468 'secrets' 'felem_bytearray *'
|   |   | `-ImplicitCastExpr 0x2ac4b6e7af0 <col:19, col:63> 'felem_bytearray *' <IntegralToPointer>
|   |   |   `-CallExpr 0x2ac4b6e7ac8 <col:19, col:63> 'int'
|   |   |     |-ImplicitCastExpr 0x2ac4b6e7ab0 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x2ac4b6e79a8 <col:19> 'int ()' Function 0x2ac4b6d2ea0 'OPENSSL_zalloc' 'int ()'
|   |   |     `-BinaryOperator 0x2ac4b6e7a90 <col:34, col:53> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x2ac4b6e7a38 <col:34, col:49> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x2ac4b6e7a18 <col:40, col:49> 'felem_bytearray':'u8 [66]' lvalue
|   |   |       |   `-UnaryOperator 0x2ac4b6e7a00 <col:41, col:42> 'felem_bytearray':'u8 [66]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x2ac4b6e79e8 <col:42> 'felem_bytearray *' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x2ac4b6e79c8 <col:42> 'felem_bytearray *' lvalue Var 0x2ac4b6f3468 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x2ac4b6e7a78 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x2ac4b6e7a58 <col:53> 'size_t':'unsigned long long' lvalue Var 0x2ac4b6f3bf8 'num_points' 'size_t':'unsigned long long'
|   |   |-BinaryOperator 0x2ac4b6e7cc0 <line:1912:9, col:65> 'felem (*)[17][3]' '='
|   |   | |-DeclRefExpr 0x2ac4b6e7b28 <col:9> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   | `-ImplicitCastExpr 0x2ac4b6e7ca8 <col:20, col:65> 'felem (*)[17][3]' <IntegralToPointer>
|   |   |   `-CallExpr 0x2ac4b6e7c80 <col:20, col:65> 'int'
|   |   |     |-ImplicitCastExpr 0x2ac4b6e7c68 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x2ac4b6e7b60 <col:20> 'int ()' Function 0x2ac4b6d2ea0 'OPENSSL_zalloc' 'int ()'
|   |   |     `-BinaryOperator 0x2ac4b6e7c48 <col:35, col:55> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x2ac4b6e7bf0 <col:35, col:51> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x2ac4b6e7bd0 <col:41, col:51> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       |   `-UnaryOperator 0x2ac4b6e7bb8 <col:42, col:43> 'felem [17][3]':'felem [17][3]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x2ac4b6e7ba0 <col:43> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x2ac4b6e7b80 <col:43> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x2ac4b6e7c30 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x2ac4b6e7c10 <col:55> 'size_t':'unsigned long long' lvalue Var 0x2ac4b6f3bf8 'num_points' 'size_t':'unsigned long long'
|   |   |-IfStmt 0x2ac4b6e80a0 <line:1913:9, line:1915:75>
|   |   | |-ImplicitCastExpr 0x2ac4b6e7d00 <line:1913:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2ac4b6e7ce0 <col:13> 'int' lvalue Var 0x2ac4b6f3238 'mixed' 'int'
|   |   | `-BinaryOperator 0x2ac4b6e8080 <line:1914:13, line:1915:75> 'felem *' '='
|   |   |   |-DeclRefExpr 0x2ac4b6e7d18 <line:1914:13> 'felem *' lvalue Var 0x2ac4b6f3848 'tmp_felems' 'felem *'
|   |   |   `-ImplicitCastExpr 0x2ac4b6e8068 <line:1915:17, col:75> 'felem *' <IntegralToPointer>
|   |   |     `-CallExpr 0x2ac4b6e8040 <col:17, col:75> 'int'
|   |   |       |-ImplicitCastExpr 0x2ac4b6e8028 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x2ac4b6e7e40 <col:17> 'int ()' Function 0x2ac4b6e7d78 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x2ac4b6e8008 <col:32, col:74> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x2ac4b6e7ed0 <col:32, col:50> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x2ac4b6e7eb0 <col:38, col:50> 'felem':'limb [9]' lvalue
|   |   |         |   `-UnaryOperator 0x2ac4b6e7e98 <col:39, col:40> 'felem':'limb [9]' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x2ac4b6e7e80 <col:40> 'felem *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x2ac4b6e7e60 <col:40> 'felem *' lvalue Var 0x2ac4b6f3848 'tmp_felems' 'felem *' non_odr_use_unevaluated
|   |   |         `-ParenExpr 0x2ac4b6e7fe8 <col:54, col:74> 'unsigned long long'
|   |   |           `-BinaryOperator 0x2ac4b6e7fc8 <col:55, col:73> 'unsigned long long' '+'
|   |   |             |-BinaryOperator 0x2ac4b6e7f68 <col:55, col:68> 'unsigned long long' '*'
|   |   |             | |-ImplicitCastExpr 0x2ac4b6e7f38 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x2ac4b6e7ef0 <col:55> 'size_t':'unsigned long long' lvalue Var 0x2ac4b6f3bf8 'num_points' 'size_t':'unsigned long long'
|   |   |             | `-ImplicitCastExpr 0x2ac4b6e7f50 <col:68> 'unsigned long long' <IntegralCast>
|   |   |             |   `-IntegerLiteral 0x2ac4b6e7f10 <col:68> 'int' 17
|   |   |             `-ImplicitCastExpr 0x2ac4b6e7fb0 <col:73> 'unsigned long long' <IntegralCast>
|   |   |               `-IntegerLiteral 0x2ac4b6e7f88 <col:73> 'int' 1
|   |   |-IfStmt 0x2ac4b6e8508 <line:1916:9, line:1920:9>
|   |   | |-BinaryOperator 0x2ac4b6e8498 <line:1916:13, line:1917:46> 'int' '||'
|   |   | | |-BinaryOperator 0x2ac4b6e82e8 <line:1916:13, col:51> 'int' '||'
|   |   | | | |-ParenExpr 0x2ac4b6e81b0 <col:13, col:29> 'int'
|   |   | | | | `-BinaryOperator 0x2ac4b6e8190 <col:14, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | | |   |-ImplicitCastExpr 0x2ac4b6e8160 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1916:14> 'felem_bytearray *' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x2ac4b6e80b8 <col:14> 'felem_bytearray *' lvalue Var 0x2ac4b6f3468 'secrets' 'felem_bytearray *'
|   |   | | | |   `-ImplicitCastExpr 0x2ac4b6e8178 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <BitCast>
|   |   | | | |     `-ParenExpr 0x2ac4b6e8140 <col:17, col:27> 'void *'
|   |   | | | |       `-CStyleCastExpr 0x2ac4b6e8118 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | | |         `-IntegerLiteral 0x2ac4b6e80d8 <col:26> 'int' 0
|   |   | | | `-ParenExpr 0x2ac4b6e82c8 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1916:34, col:51> 'int'
|   |   | | |   `-BinaryOperator 0x2ac4b6e82a8 <col:35, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | |     |-ImplicitCastExpr 0x2ac4b6e8278 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1916:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x2ac4b6e81d0 <col:35> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   | | |     `-ImplicitCastExpr 0x2ac4b6e8290 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[17][3]' <BitCast>
|   |   | | |       `-ParenExpr 0x2ac4b6e8258 <col:17, col:27> 'void *'
|   |   | | |         `-CStyleCastExpr 0x2ac4b6e8230 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | |           `-IntegerLiteral 0x2ac4b6e81f0 <col:26> 'int' 0
|   |   | | `-ParenExpr 0x2ac4b6e8478 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1917:16, col:46> 'int'
|   |   | |   `-BinaryOperator 0x2ac4b6e8458 <col:17, col:45> 'int' '&&'
|   |   | |     |-ImplicitCastExpr 0x2ac4b6e8440 <col:17> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x2ac4b6e8308 <col:17> 'int' lvalue Var 0x2ac4b6f3238 'mixed' 'int'
|   |   | |     `-ParenExpr 0x2ac4b6e8420 <col:26, col:45> 'int'
|   |   | |       `-BinaryOperator 0x2ac4b6e8400 <col:27, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | |         |-ImplicitCastExpr 0x2ac4b6e83d0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1917:27> 'felem *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x2ac4b6e8328 <col:27> 'felem *' lvalue Var 0x2ac4b6f3848 'tmp_felems' 'felem *'
|   |   | |         `-ImplicitCastExpr 0x2ac4b6e83e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem *' <BitCast>
|   |   | |           `-ParenExpr 0x2ac4b6e83b0 <col:17, col:27> 'void *'
|   |   | |             `-CStyleCastExpr 0x2ac4b6e8388 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |               `-IntegerLiteral 0x2ac4b6e8348 <col:26> 'int' 0
|   |   | `-CompoundStmt 0x2ac4b6e84f0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:1917:49, line:1920:9>
|   |   |   `-GotoStmt 0x2ac4b6e84d8 <line:1919:13, col:18> 'err' 0x2ac4b6f4a90
|   |   |-ForStmt 0x2ac4b6f55d0 <line:1926:9, line:1981:9>
|   |   | |-BinaryOperator 0x2ac4b6e8598 <line:1926:14, col:18> 'unsigned int' '='
|   |   | | |-DeclRefExpr 0x2ac4b6e8520 <col:14> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x2ac4b6e8580 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x2ac4b6e8558 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x2ac4b6e8640 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x2ac4b6e8628 <col:21> 'unsigned long long' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x2ac4b6e85f8 <col:21> 'unsigned int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x2ac4b6e85b8 <col:21> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x2ac4b6e8610 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x2ac4b6e85d8 <col:25> 'size_t':'unsigned long long' lvalue Var 0x2ac4b6f3bf8 'num_points' 'size_t':'unsigned long long'
|   |   | |-UnaryOperator 0x2ac4b6e8680 <col:37, col:39> 'unsigned int' prefix '++'
|   |   | | `-DeclRefExpr 0x2ac4b6e8660 <col:39> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   | `-CompoundStmt 0x2ac4b6f55b0 <col:42, line:1981:9>
|   |   |   |-IfStmt 0x2ac4b6e88b0 <line:1927:13, line:1940:13> has_else
|   |   |   | |-BinaryOperator 0x2ac4b6e8720 <line:1927:17, col:22> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x2ac4b6e8708 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x2ac4b6e86d8 <col:17> 'unsigned int' <LValueToRValue>
|   |   |   | | |   `-DeclRefExpr 0x2ac4b6e8698 <col:17> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |   | | `-ImplicitCastExpr 0x2ac4b6e86f0 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x2ac4b6e86b8 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x2ac4b6f2d70 'num' 'size_t':'unsigned long long'
|   |   |   | |-CompoundStmt 0x2ac4b6e8850 <line:1932:13, line:1935:13>
|   |   |   | `-CompoundStmt 0x2ac4b6e88a0 <line:1937:13, line:1940:13>
|   |   |   `-IfStmt 0x2ac4b6f5598 <line:1941:13, line:1980:13>
|   |   |     |-OpaqueValueExpr 0x2ac4b6f5580 <<invalid sloc>> '_Bool'
|   |   |     `-CompoundStmt 0x2ac4b6f5538 <line:1941:52, line:1980:13>
|   |   |       |-IfStmt 0x2ac4b6e4df0 <line:1943:17, line:1955:21> has_else
|   |   |       | |-OpaqueValueExpr 0x2ac4b6e4dd8 <<invalid sloc>> '_Bool'
|   |   |       | |-CompoundStmt 0x2ac4b6e4d58 <line:1944:52, line:1954:17>
|   |   |       | | `-IfStmt 0x2ac4b6e8cb8 <line:1949:21, line:1952:21>
|   |   |       | |   |-OpaqueValueExpr 0x2ac4b6e8ca0 <<invalid sloc>> '_Bool'
|   |   |       | |   `-CompoundStmt 0x2ac4b6e8c88 <line:1949:77, line:1952:21>
|   |   |       | |     `-GotoStmt 0x2ac4b6e8c70 <line:1951:25, col:30> 'err' 0x2ac4b6f4a90
|   |   |       | `-NullStmt 0x2ac4b6e4dd0 <line:1955:21>
|   |   |       |-CallExpr 0x2ac4b6e4f20 <line:1956:17, col:55> 'void'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e4f08 <col:17> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x2ac4b6e4e18 <col:17> 'void (u8 *, const u8 *, unsigned int)' Function 0x2ac4b4ee418 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e4f58 <col:29, col:38> 'u8 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x2ac4b6e4ea8 <col:29, col:38> 'felem_bytearray':'u8 [66]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x2ac4b6e4e78 <col:29> 'felem_bytearray *' <LValueToRValue>
|   |   |       | |   | `-DeclRefExpr 0x2ac4b6e4e38 <col:29> 'felem_bytearray *' lvalue Var 0x2ac4b6f3468 'secrets' 'felem_bytearray *'
|   |   |       | |   `-ImplicitCastExpr 0x2ac4b6e4e90 <col:37> 'unsigned int' <LValueToRValue>
|   |   |       | |     `-DeclRefExpr 0x2ac4b6e4e58 <col:37> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e4f88 <col:41> 'const u8 *' <NoOp>
|   |   |       | | `-ImplicitCastExpr 0x2ac4b6e4f70 <col:41> 'u8 *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x2ac4b6e4ec8 <col:41> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b6f3978 'tmp' 'felem_bytearray':'u8 [66]'
|   |   |       | `-ImplicitCastExpr 0x2ac4b6e4fa0 <col:46> 'unsigned int' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x2ac4b6e4ee8 <col:46> 'unsigned int' lvalue Var 0x2ac4b6f3a90 'num_bytes' 'unsigned int'
|   |   |       |-IfStmt 0x2ac4b6e5090 <line:1958:17, line:1961:26>
|   |   |       | |-OpaqueValueExpr 0x2ac4b6e5078 <<invalid sloc>> '_Bool'
|   |   |       | `-GotoStmt 0x2ac4b6e5060 <col:21, col:26> 'err' 0x2ac4b6f4a90
|   |   |       |-CallExpr 0x2ac4b6e52b0 <line:1962:17, col:63> 'void *'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e5298 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x2ac4b6e50a8 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x2ac4b480f48 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e5300 <col:24, col:40> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x2ac4b6e52e8 <col:24, col:40> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-ArraySubscriptExpr 0x2ac4b6e51f8 <col:24, col:40> 'felem':'limb [9]' lvalue
|   |   |       | |     |-ImplicitCastExpr 0x2ac4b6e51e0 <col:24, col:37> 'felem *' <ArrayToPointerDecay>
|   |   |       | |     | `-ArraySubscriptExpr 0x2ac4b6e5198 <col:24, col:37> 'felem [3]' lvalue
|   |   |       | |     |   |-ImplicitCastExpr 0x2ac4b6e5180 <col:24, col:34> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |     |   | `-ArraySubscriptExpr 0x2ac4b6e5138 <col:24, col:34> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |     |   |   |-ImplicitCastExpr 0x2ac4b6e5108 <col:24> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |     |   |   | `-DeclRefExpr 0x2ac4b6e50c8 <col:24> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |     |   |   `-ImplicitCastExpr 0x2ac4b6e5120 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | |     |   |     `-DeclRefExpr 0x2ac4b6e50e8 <col:33> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |       | |     |   `-IntegerLiteral 0x2ac4b6e5158 <col:36> 'int' 1
|   |   |       | |     `-IntegerLiteral 0x2ac4b6e51b8 <col:39> 'int' 0
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e5330 <col:43> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x2ac4b6e5318 <col:43> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x2ac4b6e5218 <col:43> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3e40 'x_out' 'felem':'limb [9]'
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x2ac4b6e5248 <col:50, col:62> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       |-CallExpr 0x2ac4b6e5550 <line:1963:17, col:63> 'void *'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e5538 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x2ac4b6e5348 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x2ac4b480f48 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e55a0 <col:24, col:40> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x2ac4b6e5588 <col:24, col:40> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-ArraySubscriptExpr 0x2ac4b6e5498 <col:24, col:40> 'felem':'limb [9]' lvalue
|   |   |       | |     |-ImplicitCastExpr 0x2ac4b6e5480 <col:24, col:37> 'felem *' <ArrayToPointerDecay>
|   |   |       | |     | `-ArraySubscriptExpr 0x2ac4b6e5438 <col:24, col:37> 'felem [3]' lvalue
|   |   |       | |     |   |-ImplicitCastExpr 0x2ac4b6e5420 <col:24, col:34> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |     |   | `-ArraySubscriptExpr 0x2ac4b6e53d8 <col:24, col:34> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |     |   |   |-ImplicitCastExpr 0x2ac4b6e53a8 <col:24> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |     |   |   | `-DeclRefExpr 0x2ac4b6e5368 <col:24> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |     |   |   `-ImplicitCastExpr 0x2ac4b6e53c0 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | |     |   |     `-DeclRefExpr 0x2ac4b6e5388 <col:33> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |       | |     |   `-IntegerLiteral 0x2ac4b6e53f8 <col:36> 'int' 1
|   |   |       | |     `-IntegerLiteral 0x2ac4b6e5458 <col:39> 'int' 1
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e55d0 <col:43> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x2ac4b6e55b8 <col:43> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x2ac4b6e54b8 <col:43> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3eb8 'y_out' 'felem':'limb [9]'
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x2ac4b6e54e8 <col:50, col:62> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       |-CallExpr 0x2ac4b6e57f0 <line:1964:17, col:63> 'void *'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e57d8 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x2ac4b6e55e8 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x2ac4b480f48 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e5840 <col:24, col:40> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x2ac4b6e5828 <col:24, col:40> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-ArraySubscriptExpr 0x2ac4b6e5738 <col:24, col:40> 'felem':'limb [9]' lvalue
|   |   |       | |     |-ImplicitCastExpr 0x2ac4b6e5720 <col:24, col:37> 'felem *' <ArrayToPointerDecay>
|   |   |       | |     | `-ArraySubscriptExpr 0x2ac4b6e56d8 <col:24, col:37> 'felem [3]' lvalue
|   |   |       | |     |   |-ImplicitCastExpr 0x2ac4b6e56c0 <col:24, col:34> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |     |   | `-ArraySubscriptExpr 0x2ac4b6e5678 <col:24, col:34> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |     |   |   |-ImplicitCastExpr 0x2ac4b6e5648 <col:24> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |     |   |   | `-DeclRefExpr 0x2ac4b6e5608 <col:24> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |     |   |   `-ImplicitCastExpr 0x2ac4b6e5660 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | |     |   |     `-DeclRefExpr 0x2ac4b6e5628 <col:33> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |       | |     |   `-IntegerLiteral 0x2ac4b6e5698 <col:36> 'int' 1
|   |   |       | |     `-IntegerLiteral 0x2ac4b6e56f8 <col:39> 'int' 2
|   |   |       | |-ImplicitCastExpr 0x2ac4b6e5870 <col:43> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x2ac4b6e5858 <col:43> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x2ac4b6e5758 <col:43> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3f30 'z_out' 'felem':'limb [9]'
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x2ac4b6e5788 <col:50, col:62> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       `-ForStmt 0x2ac4b6f5500 <line:1965:17, line:1979:17>
|   |   |         |-BinaryOperator 0x2ac4b6e58e8 <line:1965:22, col:26> 'int' '='
|   |   |         | |-DeclRefExpr 0x2ac4b6e5888 <col:22> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |         | `-IntegerLiteral 0x2ac4b6e58c0 <col:26> 'int' 2
|   |   |         |-<<<NULL>>>
|   |   |         |-BinaryOperator 0x2ac4b6e5968 <col:29, col:34> 'int' '<='
|   |   |         | |-ImplicitCastExpr 0x2ac4b6e5950 <col:29> 'int' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x2ac4b6e5908 <col:29> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |         | `-IntegerLiteral 0x2ac4b6e5928 <col:34> 'int' 16
|   |   |         |-UnaryOperator 0x2ac4b6e59a8 <col:38, col:40> 'int' prefix '++'
|   |   |         | `-DeclRefExpr 0x2ac4b6e5988 <col:40> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |         `-CompoundStmt 0x2ac4b6f54e8 <col:43, line:1979:17>
|   |   |           `-IfStmt 0x2ac4b6f54c0 <line:1966:21, line:1978:21> has_else
|   |   |             |-BinaryOperator 0x2ac4b6e5a20 <line:1966:25, col:29> 'int' '&'
|   |   |             | |-ImplicitCastExpr 0x2ac4b6e5a08 <col:25> 'int' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x2ac4b6e59c0 <col:25> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |             | `-IntegerLiteral 0x2ac4b6e59e0 <col:29> 'int' 1
|   |   |             |-CompoundStmt 0x2ac4b6e6980 <col:32, line:1973:21>
|   |   |             | `-CallExpr 0x2ac4b6e67a8 <line:1967:25, line:1972:56> 'void'
|   |   |             |   |-ImplicitCastExpr 0x2ac4b6e6790 <line:1967:25> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |             |   | `-DeclRefExpr 0x2ac4b6e5a40 <col:25> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x2ac4b5d5d58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   |             |   |-ImplicitCastExpr 0x2ac4b6e6818 <col:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2ac4b6e5ba0 <col:35, col:51> 'felem':'limb [9]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2ac4b6e5b88 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2ac4b6e5b40 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2ac4b6e5b10 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2ac4b6e5ad0 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2ac4b6e5aa0 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2ac4b6e5a60 <col:35> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2ac4b6e5ab8 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2ac4b6e5a80 <col:44> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x2ac4b6e5b28 <col:47> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x2ac4b6e5af0 <col:47> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x2ac4b6e5b60 <col:50> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x2ac4b6e6830 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2ac4b6e5d00 <col:54, col:70> 'felem':'limb [9]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2ac4b6e5ce8 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2ac4b6e5ca0 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2ac4b6e5c70 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2ac4b6e5c30 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2ac4b6e5c00 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2ac4b6e5bc0 <col:54> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2ac4b6e5c18 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2ac4b6e5be0 <col:63> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x2ac4b6e5c88 <col:66> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x2ac4b6e5c50 <col:66> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x2ac4b6e5cc0 <col:69> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x2ac4b6e6848 <line:1968:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2ac4b6e5e60 <col:35, col:51> 'felem':'limb [9]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2ac4b6e5e48 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2ac4b6e5e00 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2ac4b6e5dd0 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2ac4b6e5d90 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2ac4b6e5d60 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2ac4b6e5d20 <col:35> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2ac4b6e5d78 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2ac4b6e5d40 <col:44> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x2ac4b6e5de8 <col:47> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x2ac4b6e5db0 <col:47> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x2ac4b6e5e20 <col:50> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x2ac4b6e6878 <col:54, col:70> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x2ac4b6e6860 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x2ac4b6e5fb0 <col:54, col:70> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x2ac4b6e5f98 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x2ac4b6e5f50 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x2ac4b6e5f38 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x2ac4b6e5ef0 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x2ac4b6e5ec0 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x2ac4b6e5e80 <col:54> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x2ac4b6e5ed8 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x2ac4b6e5ea0 <col:63> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x2ac4b6e5f10 <col:66> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x2ac4b6e5f70 <col:69> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x2ac4b6e68a8 <line:1969:35, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x2ac4b6e6890 <col:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x2ac4b6e6100 <col:35, col:51> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x2ac4b6e60e8 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x2ac4b6e60a0 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x2ac4b6e6088 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x2ac4b6e6040 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x2ac4b6e6010 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x2ac4b6e5fd0 <col:35> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x2ac4b6e6028 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x2ac4b6e5ff0 <col:44> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x2ac4b6e6060 <col:47> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x2ac4b6e60c0 <col:50> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x2ac4b6e68d8 <col:54, col:70> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x2ac4b6e68c0 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x2ac4b6e6250 <col:54, col:70> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x2ac4b6e6238 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x2ac4b6e61f0 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x2ac4b6e61d8 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x2ac4b6e6190 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x2ac4b6e6160 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x2ac4b6e6120 <col:54> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x2ac4b6e6178 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x2ac4b6e6140 <col:63> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x2ac4b6e61b0 <col:66> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x2ac4b6e6210 <col:69> 'int' 2
|   |   |             |   |-IntegerLiteral 0x2ac4b6e6270 <col:73> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x2ac4b6e6908 <line:1970:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x2ac4b6e68f0 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x2ac4b6e6420 <col:35, col:55> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x2ac4b6e6408 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x2ac4b6e63c0 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x2ac4b6e63a8 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x2ac4b6e6308 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x2ac4b6e62d8 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x2ac4b6e6298 <col:35> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x2ac4b6e62f0 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x2ac4b6e62b8 <col:44> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |             |   |     |   `-BinaryOperator 0x2ac4b6e6388 <col:47, col:51> 'int' '-'
|   |   |             |   |     |     |-ImplicitCastExpr 0x2ac4b6e6370 <col:47> 'int' <LValueToRValue>
|   |   |             |   |     |     | `-DeclRefExpr 0x2ac4b6e6328 <col:47> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |             |   |     |     `-IntegerLiteral 0x2ac4b6e6348 <col:51> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x2ac4b6e63e0 <col:54> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x2ac4b6e6938 <line:1971:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x2ac4b6e6920 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x2ac4b6e65c8 <col:35, col:55> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x2ac4b6e65b0 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x2ac4b6e6568 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x2ac4b6e6550 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x2ac4b6e64b0 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x2ac4b6e6480 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x2ac4b6e6440 <col:35> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x2ac4b6e6498 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x2ac4b6e6460 <col:44> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |             |   |     |   `-BinaryOperator 0x2ac4b6e6530 <col:47, col:51> 'int' '-'
|   |   |             |   |     |     |-ImplicitCastExpr 0x2ac4b6e6518 <col:47> 'int' <LValueToRValue>
|   |   |             |   |     |     | `-DeclRefExpr 0x2ac4b6e64d0 <col:47> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |             |   |     |     `-IntegerLiteral 0x2ac4b6e64f0 <col:51> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x2ac4b6e6588 <col:54> 'int' 1
|   |   |             |   `-ImplicitCastExpr 0x2ac4b6e6968 <line:1972:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |     `-ImplicitCastExpr 0x2ac4b6e6950 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |       `-ArraySubscriptExpr 0x2ac4b6e6770 <col:35, col:55> 'felem':'limb [9]' lvalue
|   |   |             |         |-ImplicitCastExpr 0x2ac4b6e6758 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |         | `-ArraySubscriptExpr 0x2ac4b6e6710 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |         |   |-ImplicitCastExpr 0x2ac4b6e66f8 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |         |   | `-ArraySubscriptExpr 0x2ac4b6e6658 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |         |   |   |-ImplicitCastExpr 0x2ac4b6e6628 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |         |   |   | `-DeclRefExpr 0x2ac4b6e65e8 <col:35> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |             |         |   |   `-ImplicitCastExpr 0x2ac4b6e6640 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |         |   |     `-DeclRefExpr 0x2ac4b6e6608 <col:44> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |             |         |   `-BinaryOperator 0x2ac4b6e66d8 <col:47, col:51> 'int' '-'
|   |   |             |         |     |-ImplicitCastExpr 0x2ac4b6e66c0 <col:47> 'int' <LValueToRValue>
|   |   |             |         |     | `-DeclRefExpr 0x2ac4b6e6678 <col:47> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |             |         |     `-IntegerLiteral 0x2ac4b6e6698 <col:51> 'int' 1
|   |   |             |         `-IntegerLiteral 0x2ac4b6e6730 <col:54> 'int' 2
|   |   |             `-CompoundStmt 0x2ac4b6f54a8 <line:1973:28, line:1978:21>
|   |   |               `-CallExpr 0x2ac4b6f5380 <line:1974:25, line:1977:59> 'void'
|   |   |                 |-ImplicitCastExpr 0x2ac4b6f5368 <line:1974:25> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2ac4b6e6998 <col:25> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x2ac4b5d0858 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |                 |-ImplicitCastExpr 0x2ac4b6f53d0 <col:38, col:54> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x2ac4b6e6af8 <col:38, col:54> 'felem':'limb [9]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x2ac4b6e6ae0 <col:38, col:51> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x2ac4b6e6a98 <col:38, col:51> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x2ac4b6e6a68 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x2ac4b6e6a28 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x2ac4b6e69f8 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x2ac4b6e69b8 <col:38> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x2ac4b6e6a10 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x2ac4b6e69d8 <col:47> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x2ac4b6e6a80 <col:50> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x2ac4b6e6a48 <col:50> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x2ac4b6e6ab8 <col:53> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x2ac4b6f53e8 <col:57, col:73> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x2ac4b6e6c58 <col:57, col:73> 'felem':'limb [9]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x2ac4b6e6c40 <col:57, col:70> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x2ac4b6e6bf8 <col:57, col:70> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x2ac4b6e6bc8 <col:57, col:67> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x2ac4b6e6b88 <col:57, col:67> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x2ac4b6e6b58 <col:57> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x2ac4b6e6b18 <col:57> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x2ac4b6e6b70 <col:66> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x2ac4b6e6b38 <col:66> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x2ac4b6e6be0 <col:69> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x2ac4b6e6ba8 <col:69> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x2ac4b6e6c18 <col:72> 'int' 1
|   |   |                 |-ImplicitCastExpr 0x2ac4b6f5400 <line:1975:38, col:54> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x2ac4b6f4e50 <col:38, col:54> 'felem':'limb [9]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x2ac4b6f4e38 <col:38, col:51> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x2ac4b6f4df0 <col:38, col:51> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x2ac4b6f4dc0 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x2ac4b6f4d80 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x2ac4b6e6cb8 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x2ac4b6e6c78 <col:38> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x2ac4b6e6cd0 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x2ac4b6e6c98 <col:47> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x2ac4b6f4dd8 <col:50> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x2ac4b6f4da0 <col:50> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x2ac4b6f4e10 <col:53> 'int' 2
|   |   |                 |-ImplicitCastExpr 0x2ac4b6f5430 <col:57, col:77> 'const limb *':'const limb *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x2ac4b6f5418 <col:57, col:77> 'limb *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x2ac4b6f4ff8 <col:57, col:77> 'felem':'limb [9]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x2ac4b6f4fe0 <col:57, col:74> 'felem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x2ac4b6f4f98 <col:57, col:74> 'felem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x2ac4b6f4f80 <col:57, col:67> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x2ac4b6f4ee0 <col:57, col:67> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x2ac4b6f4eb0 <col:57> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x2ac4b6f4e70 <col:57> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x2ac4b6f4ec8 <col:66> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x2ac4b6f4e90 <col:66> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x2ac4b6f4f60 <col:69, col:73> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x2ac4b6f4f48 <col:69> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x2ac4b6f4f00 <col:69> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x2ac4b6f4f20 <col:73> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x2ac4b6f4fb8 <col:76> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x2ac4b6f5460 <line:1976:38, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x2ac4b6f5448 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x2ac4b6f51a0 <col:38, col:58> 'felem':'limb [9]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x2ac4b6f5188 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x2ac4b6f5140 <col:38, col:55> 'felem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x2ac4b6f5128 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x2ac4b6f5088 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x2ac4b6f5058 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x2ac4b6f5018 <col:38> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x2ac4b6f5070 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x2ac4b6f5038 <col:47> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x2ac4b6f5108 <col:50, col:54> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x2ac4b6f50f0 <col:50> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x2ac4b6f50a8 <col:50> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x2ac4b6f50c8 <col:54> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x2ac4b6f5160 <col:57> 'int' 1
|   |   |                 `-ImplicitCastExpr 0x2ac4b6f5490 <line:1977:38, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |                   `-ImplicitCastExpr 0x2ac4b6f5478 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |                     `-ArraySubscriptExpr 0x2ac4b6f5348 <col:38, col:58> 'felem':'limb [9]' lvalue
|   |   |                       |-ImplicitCastExpr 0x2ac4b6f5330 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   |   |                       | `-ArraySubscriptExpr 0x2ac4b6f52e8 <col:38, col:55> 'felem [3]' lvalue
|   |   |                       |   |-ImplicitCastExpr 0x2ac4b6f52d0 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                       |   | `-ArraySubscriptExpr 0x2ac4b6f5230 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                       |   |   |-ImplicitCastExpr 0x2ac4b6f5200 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                       |   |   | `-DeclRefExpr 0x2ac4b6f51c0 <col:38> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   |                       |   |   `-ImplicitCastExpr 0x2ac4b6f5218 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                       |   |     `-DeclRefExpr 0x2ac4b6f51e0 <col:47> 'unsigned int' lvalue Var 0x2ac4b6f3a10 'i' 'unsigned int'
|   |   |                       |   `-BinaryOperator 0x2ac4b6f52b0 <col:50, col:54> 'int' '/'
|   |   |                       |     |-ImplicitCastExpr 0x2ac4b6f5298 <col:50> 'int' <LValueToRValue>
|   |   |                       |     | `-DeclRefExpr 0x2ac4b6f5250 <col:50> 'int' lvalue Var 0x2ac4b6f31a0 'j' 'int'
|   |   |                       |     `-IntegerLiteral 0x2ac4b6f5270 <col:54> 'int' 2
|   |   |                       `-IntegerLiteral 0x2ac4b6f5308 <col:57> 'int' 2
|   |   `-IfStmt 0x2ac4b6f5878 <line:1982:9, line:1983:72>
|   |     |-ImplicitCastExpr 0x2ac4b6f5628 <line:1982:13> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2ac4b6f5608 <col:13> 'int' lvalue Var 0x2ac4b6f3238 'mixed' 'int'
|   |     `-CallExpr 0x2ac4b6f5810 <line:1983:13, col:72> 'void'
|   |       |-ImplicitCastExpr 0x2ac4b6f57f8 <col:13> 'void (*)(size_t, felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x2ac4b6f5640 <col:13> 'void (size_t, felem (*)[3], felem *)' Function 0x2ac4b6ebe58 'make_points_affine' 'void (size_t, felem (*)[3], felem *)'
|   |       |-BinaryOperator 0x2ac4b6f56d8 <col:32, col:45> 'unsigned long long' '*'
|   |       | |-ImplicitCastExpr 0x2ac4b6f56a8 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x2ac4b6f5660 <col:32> 'size_t':'unsigned long long' lvalue Var 0x2ac4b6f3bf8 'num_points' 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x2ac4b6f56c0 <col:45> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x2ac4b6f5680 <col:45> 'int' 17
|   |       |-ImplicitCastExpr 0x2ac4b6f5848 <col:49, col:59> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x2ac4b6f5758 <col:49, col:59> 'felem [17][3]':'felem [17][3]' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b6f5740 <col:49> 'felem (*)[17][3]' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2ac4b6f56f8 <col:49> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |       |   `-IntegerLiteral 0x2ac4b6f5718 <col:58> 'int' 0
|   |       `-ImplicitCastExpr 0x2ac4b6f5860 <col:62> 'felem *' <LValueToRValue>
|   |         `-DeclRefExpr 0x2ac4b6f5778 <col:62> 'felem *' lvalue Var 0x2ac4b6f3848 'tmp_felems' 'felem *'
|   |-IfStmt 0x2ac4b6f69e8 <line:1987:5, line:2013:69> has_else
|   | |-OpaqueValueExpr 0x2ac4b6f69d0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x2ac4b6f64f8 <line:1987:46, line:2009:5>
|   | | |-CallExpr 0x2ac4b6f5ac8 <line:1988:9, col:45> 'void *'
|   | | | |-ImplicitCastExpr 0x2ac4b6f5ab0 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b6f59b8 <col:9> 'void *(void *, int, unsigned long long)' Function 0x2ac4b488a88 'memset' 'void *(void *, int, unsigned long long)'
|   | | | |-ImplicitCastExpr 0x2ac4b6f5b18 <col:16> 'void *' <BitCast>
|   | | | | `-ImplicitCastExpr 0x2ac4b6f5b00 <col:16> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x2ac4b6f59d8 <col:16> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b6f3378 'g_secret' 'felem_bytearray':'u8 [66]'
|   | | | |-IntegerLiteral 0x2ac4b6f5a10 <col:26> 'int' 0
|   | | | `-UnaryExprOrTypeTraitExpr 0x2ac4b6f5a78 <col:29, col:44> 'unsigned long long' sizeof
|   | | |   `-ParenExpr 0x2ac4b6f5a58 <col:35, col:44> 'felem_bytearray':'u8 [66]' lvalue
|   | | |     `-DeclRefExpr 0x2ac4b6f5a38 <col:36> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b6f3378 'g_secret' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|   | | |-IfStmt 0x2ac4b6f5d30 <line:1990:9, line:2001:13> has_else
|   | | | |-OpaqueValueExpr 0x2ac4b6f5d18 <<invalid sloc>> '_Bool'
|   | | | |-CompoundStmt 0x2ac4b6f5c98 <line:1990:70, line:2000:9>
|   | | | | `-IfStmt 0x2ac4b6f5c20 <line:1995:13, line:1998:13>
|   | | | |   |-OpaqueValueExpr 0x2ac4b6f5c08 <<invalid sloc>> '_Bool'
|   | | | |   `-CompoundStmt 0x2ac4b6f5bf0 <line:1995:67, line:1998:13>
|   | | | |     `-GotoStmt 0x2ac4b6f5bd8 <line:1997:17, col:22> 'err' 0x2ac4b6f4a90
|   | | | `-NullStmt 0x2ac4b6f5d10 <line:2001:13>
|   | | |-CallExpr 0x2ac4b6f5df0 <line:2002:9, col:45> 'void'
|   | | | |-ImplicitCastExpr 0x2ac4b6f5dd8 <col:9> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b6f5d58 <col:9> 'void (u8 *, const u8 *, unsigned int)' Function 0x2ac4b4ee418 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | | | |-ImplicitCastExpr 0x2ac4b6f5e28 <col:21> 'u8 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2ac4b6f5d78 <col:21> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b6f3378 'g_secret' 'felem_bytearray':'u8 [66]'
|   | | | |-ImplicitCastExpr 0x2ac4b6f5e58 <col:31> 'const u8 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x2ac4b6f5e40 <col:31> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x2ac4b6f5d98 <col:31> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b6f3978 'tmp' 'felem_bytearray':'u8 [66]'
|   | | | `-ImplicitCastExpr 0x2ac4b6f5e70 <col:36> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2ac4b6f5db8 <col:36> 'unsigned int' lvalue Var 0x2ac4b6f3a90 'num_bytes' 'unsigned int'
|   | | `-CallExpr 0x2ac4b6f63d0 <line:2004:9, line:2008:48> 'void'
|   | |   |-ImplicitCastExpr 0x2ac4b6f63b8 <line:2004:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x2ac4b6f5e88 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' Function 0x2ac4b6d7958 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])'
|   | |   |-ImplicitCastExpr 0x2ac4b6f6438 <col:19> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x2ac4b6f5ea8 <col:19> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3e40 'x_out' 'felem':'limb [9]'
|   | |   |-ImplicitCastExpr 0x2ac4b6f6450 <col:26> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x2ac4b6f5ec8 <col:26> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3eb8 'y_out' 'felem':'limb [9]'
|   | |   |-ImplicitCastExpr 0x2ac4b6f6468 <col:33> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x2ac4b6f5ee8 <col:33> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3f30 'z_out' 'felem':'limb [9]'
|   | |   |-CStyleCastExpr 0x2ac4b6f5ff8 <line:2005:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   | |   | `-ImplicitCastExpr 0x2ac4b6f5fa0 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x2ac4b6f5f08 <col:45> 'felem_bytearray *' lvalue Var 0x2ac4b6f3468 'secrets' 'felem_bytearray *'
|   | |   |-ImplicitCastExpr 0x2ac4b6f6498 <col:54> 'unsigned int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x2ac4b6f6480 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x2ac4b6f6020 <col:54> 'size_t':'unsigned long long' lvalue Var 0x2ac4b6f3bf8 'num_points' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x2ac4b6f64c8 <line:2006:19> 'const u8 *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x2ac4b6f64b0 <col:19> 'u8 *' <ArrayToPointerDecay>
|   | |   |   `-DeclRefExpr 0x2ac4b6f6040 <col:19> 'felem_bytearray':'u8 [66]' lvalue Var 0x2ac4b6f3378 'g_secret' 'felem_bytearray':'u8 [66]'
|   | |   |-ImplicitCastExpr 0x2ac4b6f64e0 <line:2007:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2ac4b6f6060 <col:19> 'int' lvalue Var 0x2ac4b6f3238 'mixed' 'int'
|   | |   |-CStyleCastExpr 0x2ac4b6f6208 <col:26, col:49> 'const felem (*)[17][3]' <NoOp>
|   | |   | `-ImplicitCastExpr 0x2ac4b6f61b8 <col:49> 'felem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x2ac4b6f60d0 <col:49> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   | |   `-CStyleCastExpr 0x2ac4b6f6330 <line:2008:19, col:38> 'const felem (*)[3]' <NoOp>
|   | |     `-ImplicitCastExpr 0x2ac4b6f6318 <col:38> 'felem (*)[3]' <LValueToRValue> part_of_explicit_cast
|   | |       `-DeclRefExpr 0x2ac4b6f6258 <col:38> 'felem (*)[3]' lvalue Var 0x2ac4b6f41e8 'g_pre_comp' 'felem (*)[3]'
|   | `-CallExpr 0x2ac4b6f68a8 <line:2011:9, line:2013:69> 'void'
|   |   |-ImplicitCastExpr 0x2ac4b6f6890 <line:2011:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2ac4b6f6528 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' Function 0x2ac4b6d7958 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])'
|   |   |-ImplicitCastExpr 0x2ac4b6f6910 <col:19> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2ac4b6f6548 <col:19> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3e40 'x_out' 'felem':'limb [9]'
|   |   |-ImplicitCastExpr 0x2ac4b6f6928 <col:26> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2ac4b6f6568 <col:26> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3eb8 'y_out' 'felem':'limb [9]'
|   |   |-ImplicitCastExpr 0x2ac4b6f6940 <col:33> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2ac4b6f6588 <col:33> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3f30 'z_out' 'felem':'limb [9]'
|   |   |-CStyleCastExpr 0x2ac4b6f65f8 <line:2012:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   |   | `-ImplicitCastExpr 0x2ac4b6f65e0 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x2ac4b6f65a8 <col:45> 'felem_bytearray *' lvalue Var 0x2ac4b6f3468 'secrets' 'felem_bytearray *'
|   |   |-ImplicitCastExpr 0x2ac4b6f6970 <col:54> 'unsigned int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x2ac4b6f6958 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2ac4b6f6620 <col:54> 'size_t':'unsigned long long' lvalue Var 0x2ac4b6f3bf8 'num_points' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x2ac4b6f6988 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <NullToPointer>
|   |   | `-ParenExpr 0x2ac4b6f66a8 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x2ac4b6f6680 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x2ac4b6f6640 <col:26> 'int' 0
|   |   |-ImplicitCastExpr 0x2ac4b6f69a0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:2013:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2ac4b6f66c8 <col:25> 'int' lvalue Var 0x2ac4b6f3238 'mixed' 'int'
|   |   |-CStyleCastExpr 0x2ac4b6f67e0 <col:32, col:55> 'const felem (*)[17][3]' <NoOp>
|   |   | `-ImplicitCastExpr 0x2ac4b6f67c8 <col:55> 'felem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x2ac4b6f6738 <col:55> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |   `-ImplicitCastExpr 0x2ac4b6f69b8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const felem (*)[3]':'const felem (*)[3]' <NullToPointer>
|   |     `-ParenExpr 0x2ac4b6f6870 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2ac4b6f6848 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2ac4b6f6808 <col:26> 'int' 0
|   |-CallExpr 0x2ac4b6f6aa0 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:2015:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6f6a88 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f6a10 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b5c6540 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6f6ad0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f6a30 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3cd8 'x_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6f6b00 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6f6ae8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6f6a68 <col:26> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3e40 'x_out' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b6f6ba8 <line:2016:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6f6b90 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f6b18 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b5c6540 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6f6bd8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f6b38 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3d50 'y_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6f6c08 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6f6bf0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6f6b70 <col:26> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3eb8 'y_out' 'felem':'limb [9]'
|   |-CallExpr 0x2ac4b6f6cb0 <line:2017:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6f6c98 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f6c20 <col:5> 'void (limb *, const limb *)' Function 0x2ac4b5c6540 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6f6ce0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f6c40 <col:20> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3dc8 'z_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x2ac4b6f6d10 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6f6cf8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2ac4b6f6c78 <col:26> 'felem':'limb [9]' lvalue Var 0x2ac4b6f3f30 'z_out' 'felem':'limb [9]'
|   |-IfStmt 0x2ac4b6f6e18 <line:2018:5, line:2022:5>
|   | |-OpaqueValueExpr 0x2ac4b6f6e00 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2ac4b6f6de8 <line:2019:34, line:2022:5>
|   |   `-GotoStmt 0x2ac4b6f6dd0 <line:2021:9, col:14> 'err' 0x2ac4b6f4a90
|   |-LabelStmt 0x2ac4b6f6eb0 <line:2025:2, col:5> 'err'
|   | `-NullStmt 0x2ac4b6f6ea8 <col:5>
|   |-CallExpr 0x2ac4b6f7050 <line:2029:5, col:25> 'int'
|   | |-ImplicitCastExpr 0x2ac4b6f7038 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f6ff8 <col:5> 'int ()' Function 0x2ac4b6d3598 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x2ac4b6f7078 <col:18> 'felem_bytearray *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b6f7018 <col:18> 'felem_bytearray *' lvalue Var 0x2ac4b6f3468 'secrets' 'felem_bytearray *'
|   |-CallExpr 0x2ac4b6f70e8 <line:2030:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x2ac4b6f70d0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f7090 <col:5> 'int ()' Function 0x2ac4b6d3598 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x2ac4b6f7110 <col:18> 'felem (*)[17][3]' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b6f70b0 <col:18> 'felem (*)[17][3]' lvalue Var 0x2ac4b6f3718 'pre_comp' 'felem (*)[17][3]'
|   |-CallExpr 0x2ac4b6f7180 <line:2031:5, col:28> 'int'
|   | |-ImplicitCastExpr 0x2ac4b6f7168 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f7128 <col:5> 'int ()' Function 0x2ac4b6d3598 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x2ac4b6f71a8 <col:18> 'felem *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b6f7148 <col:18> 'felem *' lvalue Var 0x2ac4b6f3848 'tmp_felems' 'felem *'
|   `-ReturnStmt 0x2ac4b6f71f8 <line:2032:5, col:12>
|     `-ImplicitCastExpr 0x2ac4b6f71e0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x2ac4b6f71c0 <col:12> 'int' lvalue Var 0x2ac4b6f30e0 'ret' 'int'
|-FunctionDecl 0x2ac4b6f7440 <line:2035:1, line:2138:1> line:2035:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2ac4b6f7320 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x2ac4b6f73a0 <col:54, col:62> col:62 invalid ctx 'int *'
| `-CompoundStmt 0x2ac4b6f8f98 <line:2036:1, line:2138:1>
|   |-DeclStmt 0x2ac4b6f75b0 <line:2037:5, col:16>
|   | `-VarDecl 0x2ac4b6f7520 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x2ac4b6f7588 <col:15> 'int' 0
|   |-DeclStmt 0x2ac4b6f76e0 <line:2038:5, col:34>
|   | `-VarDecl 0x2ac4b6f75d8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:2038:24 used pre 'NISTP521_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x2ac4b6f76c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x2ac4b6f76a8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2ac4b6f7680 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2ac4b6f7640 <col:26> 'int' 0
|   |-DeclStmt 0x2ac4b6f7810 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:2039:5, col:13>
|   | |-VarDecl 0x2ac4b6f7710 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x2ac4b6f7790 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x2ac4b6f7a80 <line:2043:5, col:25>
|   | `-VarDecl 0x2ac4b6f7a18 <col:5, col:24> col:11 used tmp_felems 'felem [16]'
|   |-IfStmt 0x2ac4b6f7c80 <line:2047:5, line:2049:20>
|   | |-OpaqueValueExpr 0x2ac4b6f7c68 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x2ac4b6f7c50 <line:2048:9, line:2049:20>
|   |   |-OpaqueValueExpr 0x2ac4b6f7c38 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x2ac4b6f7c28 <col:13, col:20>
|   |     `-IntegerLiteral 0x2ac4b6f7c00 <col:20> 'int' 0
|   |-IfStmt 0x2ac4b6f7e88 <line:2051:5, line:2052:14>
|   | |-OpaqueValueExpr 0x2ac4b6f7e70 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2ac4b6f7e58 <col:9, col:14> 'err' 0x2ac4b6f7e08
|   |-IfStmt 0x2ac4b6f7f58 <line:2054:5, line:2055:14>
|   | |-OpaqueValueExpr 0x2ac4b6f7f40 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2ac4b6f7f28 <col:9, col:14> 'err' 0x2ac4b6f7e08
|   |-IfStmt 0x2ac4b6f8048 <line:2057:5, line:2058:14>
|   | |-OpaqueValueExpr 0x2ac4b6f8030 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2ac4b6f8018 <col:9, col:14> 'err' 0x2ac4b6f7e08
|   |-IfStmt 0x2ac4b6f8340 <line:2061:5, line:2062:14>
|   | |-OpaqueValueExpr 0x2ac4b6f8328 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2ac4b6f8310 <col:9, col:14> 'err' 0x2ac4b6f7e08
|   |-IfStmt 0x2ac4b6f8558 <line:2063:5, line:2064:14>
|   | |-BinaryOperator 0x2ac4b6f8520 <line:2063:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ParenExpr 0x2ac4b6f8460 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:2063:9, col:39> 'NISTP521_PRE_COMP *'
|   | | | `-BinaryOperator 0x2ac4b6f8440 <col:10, col:38> 'NISTP521_PRE_COMP *' '='
|   | | |   |-DeclRefExpr 0x2ac4b6f8358 <col:10> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | | |   `-CallExpr 0x2ac4b6f8420 <col:16, col:38> 'NISTP521_PRE_COMP *'
|   | | |     `-ImplicitCastExpr 0x2ac4b6f8408 <col:16> 'NISTP521_PRE_COMP *(*)()' <FunctionToPointerDecay>
|   | | |       `-DeclRefExpr 0x2ac4b6f8390 <col:16> 'NISTP521_PRE_COMP *()' Function 0x2ac4b6d2d48 'nistp521_pre_comp_new' 'NISTP521_PRE_COMP *()'
|   | | `-ImplicitCastExpr 0x2ac4b6f8508 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x2ac4b6f84e8 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x2ac4b6f84c0 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x2ac4b6f8480 <col:26> 'int' 0
|   | `-GotoStmt 0x2ac4b6f8540 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:2064:9, col:14> 'err' 0x2ac4b6f7e08
|   |-IfStmt 0x2ac4b6f8888 <line:2068:5, line:2071:5>
|   | |-OpaqueValueExpr 0x2ac4b6f8870 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2ac4b6f8850 <line:2068:69, line:2071:5>
|   |   |-CallExpr 0x2ac4b6f8750 <line:2069:9, col:62> 'void *'
|   |   | |-ImplicitCastExpr 0x2ac4b6f8738 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b6f85b8 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x2ac4b480f48 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x2ac4b6f87a0 <col:16, col:21> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x2ac4b6f8788 <col:16, col:21> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   `-MemberExpr 0x2ac4b6f8610 <col:16, col:21> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |   | |     `-ImplicitCastExpr 0x2ac4b6f85f8 <col:16> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x2ac4b6f85d8 <col:16> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |   | |-ImplicitCastExpr 0x2ac4b6f87d0 <col:33> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x2ac4b6f87b8 <col:33> 'const felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   `-DeclRefExpr 0x2ac4b6f8640 <col:33> 'const felem [16][3]' lvalue Var 0x2ac4b5d4e08 'gmul' 'const felem [16][3]'
|   |   | `-UnaryExprOrTypeTraitExpr 0x2ac4b6f86e8 <col:39, col:61> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x2ac4b6f86c8 <col:45, col:61> 'felem [16][3]' lvalue
|   |   |     `-MemberExpr 0x2ac4b6f8698 <col:46, col:51> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8 non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x2ac4b6f8680 <col:46> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x2ac4b6f8660 <col:46> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *' non_odr_use_unevaluated
|   |   `-GotoStmt 0x2ac4b6f8838 <line:2070:9, col:14> 'done' 0x2ac4b6f87e8
|   |-IfStmt 0x2ac4b6f8c48 <line:2072:5, line:2075:14>
|   | |-OpaqueValueExpr 0x2ac4b6f8c30 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2ac4b6f8c18 <col:9, col:14> 'err' 0x2ac4b6f7e08
|   |-ForStmt 0x2ac4b6ee340 <line:2077:5, line:2089:5>
|   | |-BinaryOperator 0x2ac4b6f8cc0 <line:2077:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x2ac4b6f8c60 <col:10> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   | | `-IntegerLiteral 0x2ac4b6f8c98 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2ac4b6f8d40 <col:17, col:22> 'int' '<='
|   | | |-ImplicitCastExpr 0x2ac4b6f8d28 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b6f8ce0 <col:17> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   | | `-IntegerLiteral 0x2ac4b6f8d00 <col:22> 'int' 4
|   | |-CompoundAssignOperator 0x2ac4b6ecd80 <col:25, col:31> 'int' '<<=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x2ac4b6f8d60 <col:25> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   | | `-IntegerLiteral 0x2ac4b6ecd40 <col:31> 'int' 1
|   | `-CompoundStmt 0x2ac4b6ee320 <col:34, line:2089:5>
|   |   |-CallExpr 0x2ac4b6ed610 <line:2078:9, line:2080:66> 'void'
|   |   | |-ImplicitCastExpr 0x2ac4b6ed5f8 <line:2078:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2ac4b6ecdb0 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x2ac4b5d0858 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2ac4b6ed660 <col:22, col:46> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2ac4b6ecf30 <col:22, col:46> 'felem':'limb [9]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2ac4b6ecf18 <col:22, col:43> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2ac4b6eced0 <col:22, col:43> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2ac4b6eceb8 <col:22, col:27> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-MemberExpr 0x2ac4b6ece08 <col:22, col:27> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |   | |   |   |   `-ImplicitCastExpr 0x2ac4b6ecdf0 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2ac4b6ecdd0 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |   | |   |   `-BinaryOperator 0x2ac4b6ece98 <col:38, col:42> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x2ac4b6ece38 <col:38> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x2ac4b6ece80 <col:42> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x2ac4b6ece60 <col:42> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |   | |   `-IntegerLiteral 0x2ac4b6ecef0 <col:45> 'int' 0
|   |   | |-ImplicitCastExpr 0x2ac4b6ed678 <col:49, col:73> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2ac4b6ed0b0 <col:49, col:73> 'felem':'limb [9]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2ac4b6ed098 <col:49, col:70> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2ac4b6ed050 <col:49, col:70> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2ac4b6ed038 <col:49, col:54> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-MemberExpr 0x2ac4b6ecf88 <col:49, col:54> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |   | |   |   |   `-ImplicitCastExpr 0x2ac4b6ecf70 <col:49> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2ac4b6ecf50 <col:49> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |   | |   |   `-BinaryOperator 0x2ac4b6ed018 <col:65, col:69> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x2ac4b6ecfb8 <col:65> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x2ac4b6ed000 <col:69> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x2ac4b6ecfe0 <col:69> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |   | |   `-IntegerLiteral 0x2ac4b6ed070 <col:72> 'int' 1
|   |   | |-ImplicitCastExpr 0x2ac4b6ed690 <line:2079:22, col:46> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2ac4b6ed230 <col:22, col:46> 'felem':'limb [9]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2ac4b6ed218 <col:22, col:43> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2ac4b6ed1d0 <col:22, col:43> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2ac4b6ed1b8 <col:22, col:27> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-MemberExpr 0x2ac4b6ed108 <col:22, col:27> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |   | |   |   |   `-ImplicitCastExpr 0x2ac4b6ed0f0 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2ac4b6ed0d0 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |   | |   |   `-BinaryOperator 0x2ac4b6ed198 <col:38, col:42> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x2ac4b6ed138 <col:38> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x2ac4b6ed180 <col:42> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x2ac4b6ed160 <col:42> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |   | |   `-IntegerLiteral 0x2ac4b6ed1f0 <col:45> 'int' 2
|   |   | |-ImplicitCastExpr 0x2ac4b6ed6c0 <col:49, col:69> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x2ac4b6ed6a8 <col:49, col:69> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x2ac4b6ed368 <col:49, col:69> 'felem':'limb [9]' lvalue
|   |   | |     |-ImplicitCastExpr 0x2ac4b6ed350 <col:49, col:66> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x2ac4b6ed308 <col:49, col:66> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x2ac4b6ed2d8 <col:49, col:54> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x2ac4b6ed288 <col:49, col:54> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |   | |     |   |   `-ImplicitCastExpr 0x2ac4b6ed270 <col:49> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x2ac4b6ed250 <col:49> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x2ac4b6ed2f0 <col:65> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x2ac4b6ed2b8 <col:65> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |   | |     `-IntegerLiteral 0x2ac4b6ed328 <col:68> 'int' 0
|   |   | |-ImplicitCastExpr 0x2ac4b6ed6f0 <line:2080:22, col:42> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x2ac4b6ed6d8 <col:22, col:42> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x2ac4b6ed4a0 <col:22, col:42> 'felem':'limb [9]' lvalue
|   |   | |     |-ImplicitCastExpr 0x2ac4b6ed488 <col:22, col:39> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x2ac4b6ed440 <col:22, col:39> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x2ac4b6ed410 <col:22, col:27> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x2ac4b6ed3c0 <col:22, col:27> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |   | |     |   |   `-ImplicitCastExpr 0x2ac4b6ed3a8 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x2ac4b6ed388 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x2ac4b6ed428 <col:38> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x2ac4b6ed3f0 <col:38> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |   | |     `-IntegerLiteral 0x2ac4b6ed460 <col:41> 'int' 1
|   |   | `-ImplicitCastExpr 0x2ac4b6ed720 <col:45, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2ac4b6ed708 <col:45, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x2ac4b6ed5d8 <col:45, col:65> 'felem':'limb [9]' lvalue
|   |   |       |-ImplicitCastExpr 0x2ac4b6ed5c0 <col:45, col:62> 'felem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x2ac4b6ed578 <col:45, col:62> 'felem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2ac4b6ed548 <col:45, col:50> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-MemberExpr 0x2ac4b6ed4f8 <col:45, col:50> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |   |       |   |   `-ImplicitCastExpr 0x2ac4b6ed4e0 <col:45> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x2ac4b6ed4c0 <col:45> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |   |       |   `-ImplicitCastExpr 0x2ac4b6ed560 <col:61> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x2ac4b6ed528 <col:61> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |   |       `-IntegerLiteral 0x2ac4b6ed598 <col:64> 'int' 2
|   |   `-ForStmt 0x2ac4b6ee2e8 <line:2081:9, line:2088:9>
|   |     |-BinaryOperator 0x2ac4b6ed798 <line:2081:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x2ac4b6ed738 <col:14> 'int' lvalue Var 0x2ac4b6f7790 'j' 'int'
|   |     | `-IntegerLiteral 0x2ac4b6ed770 <col:18> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x2ac4b6ed818 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x2ac4b6ed800 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x2ac4b6ed7b8 <col:21> 'int' lvalue Var 0x2ac4b6f7790 'j' 'int'
|   |     | `-IntegerLiteral 0x2ac4b6ed7d8 <col:25> 'int' 129
|   |     |-UnaryOperator 0x2ac4b6ed858 <col:30, col:32> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x2ac4b6ed838 <col:32> 'int' lvalue Var 0x2ac4b6f7790 'j' 'int'
|   |     `-CompoundStmt 0x2ac4b6ee2d0 <col:35, line:2088:9>
|   |       `-CallExpr 0x2ac4b6ee1a8 <line:2082:13, line:2087:51> 'void'
|   |         |-ImplicitCastExpr 0x2ac4b6ee190 <line:2082:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x2ac4b6ed870 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x2ac4b5d0858 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |         |-ImplicitCastExpr 0x2ac4b6ee1f8 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2ac4b6ed9f0 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |   |-ImplicitCastExpr 0x2ac4b6ed9d8 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2ac4b6ed990 <col:26, col:47> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2ac4b6ed978 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-MemberExpr 0x2ac4b6ed8c8 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |         |   |   |   `-ImplicitCastExpr 0x2ac4b6ed8b0 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2ac4b6ed890 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |         |   |   `-BinaryOperator 0x2ac4b6ed958 <col:42, col:46> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x2ac4b6ed8f8 <col:42> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x2ac4b6ed940 <col:46> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x2ac4b6ed920 <col:46> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |         |   `-IntegerLiteral 0x2ac4b6ed9b0 <col:49> 'int' 0
|   |         |-ImplicitCastExpr 0x2ac4b6ee210 <line:2083:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2ac4b6edb70 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |   |-ImplicitCastExpr 0x2ac4b6edb58 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2ac4b6edb10 <col:26, col:47> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2ac4b6edaf8 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-MemberExpr 0x2ac4b6eda48 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |         |   |   |   `-ImplicitCastExpr 0x2ac4b6eda30 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2ac4b6eda10 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |         |   |   `-BinaryOperator 0x2ac4b6edad8 <col:42, col:46> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x2ac4b6eda78 <col:42> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x2ac4b6edac0 <col:46> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x2ac4b6edaa0 <col:46> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |         |   `-IntegerLiteral 0x2ac4b6edb30 <col:49> 'int' 1
|   |         |-ImplicitCastExpr 0x2ac4b6ee228 <line:2084:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2ac4b6edcf0 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |   |-ImplicitCastExpr 0x2ac4b6edcd8 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2ac4b6edc90 <col:26, col:47> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2ac4b6edc78 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-MemberExpr 0x2ac4b6edbc8 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |         |   |   |   `-ImplicitCastExpr 0x2ac4b6edbb0 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2ac4b6edb90 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |         |   |   `-BinaryOperator 0x2ac4b6edc58 <col:42, col:46> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x2ac4b6edbf8 <col:42> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x2ac4b6edc40 <col:46> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x2ac4b6edc20 <col:46> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |         |   `-IntegerLiteral 0x2ac4b6edcb0 <col:49> 'int' 2
|   |         |-ImplicitCastExpr 0x2ac4b6ee258 <line:2085:26, col:50> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x2ac4b6ee240 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x2ac4b6ede70 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |     |-ImplicitCastExpr 0x2ac4b6ede58 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x2ac4b6ede10 <col:26, col:47> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x2ac4b6eddf8 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-MemberExpr 0x2ac4b6edd48 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |         |     |   |   `-ImplicitCastExpr 0x2ac4b6edd30 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x2ac4b6edd10 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |         |     |   `-BinaryOperator 0x2ac4b6eddd8 <col:42, col:46> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x2ac4b6edd78 <col:42> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x2ac4b6eddc0 <col:46> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x2ac4b6edda0 <col:46> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |         |     `-IntegerLiteral 0x2ac4b6ede30 <col:49> 'int' 0
|   |         |-ImplicitCastExpr 0x2ac4b6ee288 <line:2086:26, col:50> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x2ac4b6ee270 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x2ac4b6edff0 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |     |-ImplicitCastExpr 0x2ac4b6edfd8 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x2ac4b6edf90 <col:26, col:47> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x2ac4b6edf78 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-MemberExpr 0x2ac4b6edec8 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |         |     |   |   `-ImplicitCastExpr 0x2ac4b6edeb0 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x2ac4b6ede90 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |         |     |   `-BinaryOperator 0x2ac4b6edf58 <col:42, col:46> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x2ac4b6edef8 <col:42> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x2ac4b6edf40 <col:46> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x2ac4b6edf20 <col:46> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |         |     `-IntegerLiteral 0x2ac4b6edfb0 <col:49> 'int' 1
|   |         `-ImplicitCastExpr 0x2ac4b6ee2b8 <line:2087:26, col:50> 'const limb *':'const limb *' <NoOp>
|   |           `-ImplicitCastExpr 0x2ac4b6ee2a0 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |             `-ArraySubscriptExpr 0x2ac4b6ee170 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |               |-ImplicitCastExpr 0x2ac4b6ee158 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |               | `-ArraySubscriptExpr 0x2ac4b6ee110 <col:26, col:47> 'felem [3]' lvalue
|   |               |   |-ImplicitCastExpr 0x2ac4b6ee0f8 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |               |   | `-MemberExpr 0x2ac4b6ee048 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |               |   |   `-ImplicitCastExpr 0x2ac4b6ee030 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |               |   |     `-DeclRefExpr 0x2ac4b6ee010 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |               |   `-BinaryOperator 0x2ac4b6ee0d8 <col:42, col:46> 'int' '*'
|   |               |     |-IntegerLiteral 0x2ac4b6ee078 <col:42> 'int' 2
|   |               |     `-ImplicitCastExpr 0x2ac4b6ee0c0 <col:46> 'int' <LValueToRValue>
|   |               |       `-DeclRefExpr 0x2ac4b6ee0a0 <col:46> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |               `-IntegerLiteral 0x2ac4b6ee130 <col:49> 'int' 2
|   |-CallExpr 0x2ac4b6ee5c0 <line:2091:5, col:61> 'void *'
|   | |-ImplicitCastExpr 0x2ac4b6ee5a8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6ee378 <col:5> 'void *(void *, int, unsigned long long)' Function 0x2ac4b488a88 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x2ac4b6ee610 <col:12, col:29> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x2ac4b6ee5f8 <col:12, col:29> 'felem *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6ee440 <col:12, col:29> 'felem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6ee428 <col:12, col:17> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-MemberExpr 0x2ac4b6ee3d0 <col:12, col:17> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   `-ImplicitCastExpr 0x2ac4b6ee3b8 <col:12> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |     `-DeclRefExpr 0x2ac4b6ee398 <col:12> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     `-IntegerLiteral 0x2ac4b6ee400 <col:28> 'int' 0
|   | |-IntegerLiteral 0x2ac4b6ee460 <col:32> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x2ac4b6ee570 <col:35, col:60> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x2ac4b6ee550 <col:41, col:60> 'felem [3]' lvalue
|   |     `-ArraySubscriptExpr 0x2ac4b6ee530 <col:42, col:59> 'felem [3]' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b6ee518 <col:42, col:47> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x2ac4b6ee4c0 <col:42, col:47> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8 non_odr_use_unevaluated
|   |       |   `-ImplicitCastExpr 0x2ac4b6ee4a8 <col:42> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x2ac4b6ee488 <col:42> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *' non_odr_use_unevaluated
|   |       `-IntegerLiteral 0x2ac4b6ee4f0 <col:58> 'int' 0
|   |-CallExpr 0x2ac4b6f1118 <line:2094:5, line:2098:36> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6f1100 <line:2094:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6ee628 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x2ac4b5d5d58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6f1188 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6ee750 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6ee738 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6ee6f0 <col:15, col:32> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6ee6d8 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6ee680 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6ee668 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6ee648 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6ee6b0 <col:31> 'int' 6
|   | |   `-IntegerLiteral 0x2ac4b6ee710 <col:34> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f11a0 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6ee878 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6ee860 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6ee818 <col:38, col:55> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6ee800 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6ee7a8 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6ee790 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6ee770 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6ee7d8 <col:54> 'int' 6
|   | |   `-IntegerLiteral 0x2ac4b6ee838 <col:57> 'int' 1
|   | |-ImplicitCastExpr 0x2ac4b6f11b8 <line:2095:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6ee9a0 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6ee988 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6ee940 <col:15, col:32> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6ee928 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6ee8d0 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6ee8b8 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6ee898 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6ee900 <col:31> 'int' 6
|   | |   `-IntegerLiteral 0x2ac4b6ee960 <col:34> 'int' 2
|   | |-ImplicitCastExpr 0x2ac4b6f11e8 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f11d0 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6eeac8 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6eeab0 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6eea68 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6eea50 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6ee9f8 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6ee9e0 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6ee9c0 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6eea28 <col:54> 'int' 4
|   | |     `-IntegerLiteral 0x2ac4b6eea88 <col:57> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f1218 <line:2096:15, col:35> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f1200 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6eebf0 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6eebd8 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6eeb90 <col:15, col:32> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6eeb78 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6eeb20 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6eeb08 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6eeae8 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6eeb50 <col:31> 'int' 4
|   | |     `-IntegerLiteral 0x2ac4b6eebb0 <col:34> 'int' 1
|   | |-ImplicitCastExpr 0x2ac4b6f1248 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f1230 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6eed18 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6eed00 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6eecb8 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6eeca0 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6eec48 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6eec30 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6eec10 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6eec78 <col:54> 'int' 4
|   | |     `-IntegerLiteral 0x2ac4b6eecd8 <col:57> 'int' 2
|   | |-IntegerLiteral 0x2ac4b6f0d60 <line:2097:15> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f1278 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f1260 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f0e90 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f0e78 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f0e30 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f0e18 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f0dc0 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f0da8 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f0d88 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f0df0 <col:34> 'int' 2
|   | |     `-IntegerLiteral 0x2ac4b6f0e50 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f12a8 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f1290 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f0fb8 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f0fa0 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f0f58 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f0f40 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f0ee8 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f0ed0 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f0eb0 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f0f18 <col:57> 'int' 2
|   | |     `-IntegerLiteral 0x2ac4b6f0f78 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b6f12d8 <line:2098:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6f12c0 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x2ac4b6f10e0 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b6f10c8 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x2ac4b6f1080 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b6f1068 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x2ac4b6f1010 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |       |   |   `-ImplicitCastExpr 0x2ac4b6f0ff8 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x2ac4b6f0fd8 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x2ac4b6f1040 <col:31> 'int' 2
|   |       `-IntegerLiteral 0x2ac4b6f10a0 <col:34> 'int' 2
|   |-CallExpr 0x2ac4b6f1db8 <line:2100:5, line:2104:36> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6f1da0 <line:2100:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f12f0 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x2ac4b5d5d58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6f1e28 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6f1418 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6f1400 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6f13b8 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6f13a0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6f1348 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6f1330 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6f1310 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6f1378 <col:31> 'int' 10
|   | |   `-IntegerLiteral 0x2ac4b6f13d8 <col:35> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f1e40 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6f1540 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6f1528 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6f14e0 <col:39, col:57> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6f14c8 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6f1470 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6f1458 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6f1438 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6f14a0 <col:55> 'int' 10
|   | |   `-IntegerLiteral 0x2ac4b6f1500 <col:59> 'int' 1
|   | |-ImplicitCastExpr 0x2ac4b6f1e58 <line:2101:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6f1668 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6f1650 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6f1608 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6f15f0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6f1598 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6f1580 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6f1560 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6f15c8 <col:31> 'int' 10
|   | |   `-IntegerLiteral 0x2ac4b6f1628 <col:35> 'int' 2
|   | |-ImplicitCastExpr 0x2ac4b6f1e88 <col:39, col:59> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f1e70 <col:39, col:59> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f1790 <col:39, col:59> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f1778 <col:39, col:56> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f1730 <col:39, col:56> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f1718 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f16c0 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f16a8 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f1688 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f16f0 <col:55> 'int' 8
|   | |     `-IntegerLiteral 0x2ac4b6f1750 <col:58> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f1eb8 <line:2102:15, col:35> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f1ea0 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f18b8 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f18a0 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f1858 <col:15, col:32> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f1840 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f17e8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f17d0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f17b0 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f1818 <col:31> 'int' 8
|   | |     `-IntegerLiteral 0x2ac4b6f1878 <col:34> 'int' 1
|   | |-ImplicitCastExpr 0x2ac4b6f1ee8 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f1ed0 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f19e0 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f19c8 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f1980 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f1968 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f1910 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f18f8 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f18d8 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f1940 <col:54> 'int' 8
|   | |     `-IntegerLiteral 0x2ac4b6f19a0 <col:57> 'int' 2
|   | |-IntegerLiteral 0x2ac4b6f1a00 <line:2103:15> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f1f18 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f1f00 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f1b30 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f1b18 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f1ad0 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f1ab8 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f1a60 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f1a48 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f1a28 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f1a90 <col:34> 'int' 2
|   | |     `-IntegerLiteral 0x2ac4b6f1af0 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f1f48 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f1f30 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f1c58 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f1c40 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f1bf8 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f1be0 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f1b88 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f1b70 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f1b50 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f1bb8 <col:57> 'int' 2
|   | |     `-IntegerLiteral 0x2ac4b6f1c18 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b6f1f78 <line:2104:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6f1f60 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x2ac4b6f1d80 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b6f1d68 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x2ac4b6f1d20 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b6f1d08 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x2ac4b6f1cb0 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |       |   |   `-ImplicitCastExpr 0x2ac4b6f1c98 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x2ac4b6f1c78 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x2ac4b6f1ce0 <col:31> 'int' 2
|   |       `-IntegerLiteral 0x2ac4b6f1d40 <col:34> 'int' 2
|   |-CallExpr 0x2ac4b6f2a58 <line:2106:5, line:2110:36> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6f2a40 <line:2106:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f1f90 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x2ac4b5d5d58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6f2ac8 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6f20b8 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6f20a0 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6f2058 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6f2040 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6f1fe8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6f1fd0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6f1fb0 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6f2018 <col:31> 'int' 12
|   | |   `-IntegerLiteral 0x2ac4b6f2078 <col:35> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f2ae0 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6f21e0 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6f21c8 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6f2180 <col:39, col:57> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6f2168 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6f2110 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6f20f8 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6f20d8 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6f2140 <col:55> 'int' 12
|   | |   `-IntegerLiteral 0x2ac4b6f21a0 <col:59> 'int' 1
|   | |-ImplicitCastExpr 0x2ac4b6f2af8 <line:2107:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6f2308 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6f22f0 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6f22a8 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6f2290 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6f2238 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6f2220 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6f2200 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6f2268 <col:31> 'int' 12
|   | |   `-IntegerLiteral 0x2ac4b6f22c8 <col:35> 'int' 2
|   | |-ImplicitCastExpr 0x2ac4b6f2b28 <col:39, col:59> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f2b10 <col:39, col:59> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f2430 <col:39, col:59> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f2418 <col:39, col:56> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f23d0 <col:39, col:56> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f23b8 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f2360 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f2348 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f2328 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f2390 <col:55> 'int' 8
|   | |     `-IntegerLiteral 0x2ac4b6f23f0 <col:58> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f2b58 <line:2108:15, col:35> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f2b40 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f2558 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f2540 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f24f8 <col:15, col:32> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f24e0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f2488 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f2470 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f2450 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f24b8 <col:31> 'int' 8
|   | |     `-IntegerLiteral 0x2ac4b6f2518 <col:34> 'int' 1
|   | |-ImplicitCastExpr 0x2ac4b6f2b88 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f2b70 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f2680 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f2668 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f2620 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f2608 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f25b0 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f2598 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f2578 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f25e0 <col:54> 'int' 8
|   | |     `-IntegerLiteral 0x2ac4b6f2640 <col:57> 'int' 2
|   | |-IntegerLiteral 0x2ac4b6f26a0 <line:2109:15> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f2bb8 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f2ba0 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f27d0 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f27b8 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f2770 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f2758 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f2700 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f26e8 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f26c8 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f2730 <col:34> 'int' 4
|   | |     `-IntegerLiteral 0x2ac4b6f2790 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6f2be8 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6f2bd0 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6f28f8 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6f28e0 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6f2898 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6f2880 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6f2828 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6f2810 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6f27f0 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6f2858 <col:57> 'int' 4
|   | |     `-IntegerLiteral 0x2ac4b6f28b8 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b6f2c18 <line:2110:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6f2c00 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x2ac4b6f2a20 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b6f2a08 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x2ac4b6f29c0 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b6f29a8 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x2ac4b6f2950 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |       |   |   `-ImplicitCastExpr 0x2ac4b6f2938 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x2ac4b6f2918 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x2ac4b6f2980 <col:31> 'int' 4
|   |       `-IntegerLiteral 0x2ac4b6f29e0 <col:34> 'int' 2
|   |-CallExpr 0x2ac4b6e96c0 <line:2112:5, line:2116:36> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6e96a8 <line:2112:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f2c30 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x2ac4b5d5d58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2ac4b6e9730 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6e8d20 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6f2d40 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6f2cf8 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6f2ce0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6f2c88 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6f2c70 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6f2c50 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6f2cb8 <col:31> 'int' 14
|   | |   `-IntegerLiteral 0x2ac4b6f2d18 <col:35> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6e9748 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6e8e48 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6e8e30 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6e8de8 <col:39, col:57> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6e8dd0 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6e8d78 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6e8d60 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6e8d40 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6e8da8 <col:55> 'int' 14
|   | |   `-IntegerLiteral 0x2ac4b6e8e08 <col:59> 'int' 1
|   | |-ImplicitCastExpr 0x2ac4b6e9760 <line:2113:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2ac4b6e8f70 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x2ac4b6e8f58 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2ac4b6e8f10 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2ac4b6e8ef8 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x2ac4b6e8ea0 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |   |   |   `-ImplicitCastExpr 0x2ac4b6e8e88 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x2ac4b6e8e68 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x2ac4b6e8ed0 <col:31> 'int' 14
|   | |   `-IntegerLiteral 0x2ac4b6e8f30 <col:35> 'int' 2
|   | |-ImplicitCastExpr 0x2ac4b6e9790 <col:39, col:60> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6e9778 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6e9098 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6e9080 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6e9038 <col:39, col:57> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6e9020 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6e8fc8 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6e8fb0 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6e8f90 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6e8ff8 <col:55> 'int' 12
|   | |     `-IntegerLiteral 0x2ac4b6e9058 <col:59> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6e97c0 <line:2114:15, col:36> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6e97a8 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6e91c0 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6e91a8 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6e9160 <col:15, col:33> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6e9148 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6e90f0 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6e90d8 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6e90b8 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6e9120 <col:31> 'int' 12
|   | |     `-IntegerLiteral 0x2ac4b6e9180 <col:35> 'int' 1
|   | |-ImplicitCastExpr 0x2ac4b6e97f0 <col:39, col:60> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6e97d8 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6e92e8 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6e92d0 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6e9288 <col:39, col:57> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6e9270 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6e9218 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6e9200 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6e91e0 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6e9248 <col:55> 'int' 12
|   | |     `-IntegerLiteral 0x2ac4b6e92a8 <col:59> 'int' 2
|   | |-IntegerLiteral 0x2ac4b6e9308 <line:2115:15> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6e9820 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6e9808 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6e9438 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6e9420 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6e93d8 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6e93c0 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6e9368 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6e9350 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6e9330 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6e9398 <col:34> 'int' 2
|   | |     `-IntegerLiteral 0x2ac4b6e93f8 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x2ac4b6e9850 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2ac4b6e9838 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x2ac4b6e9560 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6e9548 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2ac4b6e9500 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2ac4b6e94e8 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2ac4b6e9490 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   |   `-ImplicitCastExpr 0x2ac4b6e9478 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2ac4b6e9458 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2ac4b6e94c0 <col:57> 'int' 2
|   | |     `-IntegerLiteral 0x2ac4b6e9520 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b6e9880 <line:2116:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2ac4b6e9868 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x2ac4b6e9688 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x2ac4b6e9670 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x2ac4b6e9628 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x2ac4b6e9610 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x2ac4b6e95b8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |       |   |   `-ImplicitCastExpr 0x2ac4b6e95a0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x2ac4b6e9580 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x2ac4b6e95e8 <col:31> 'int' 2
|   |       `-IntegerLiteral 0x2ac4b6e9648 <col:34> 'int' 2
|   |-ForStmt 0x2ac4b6ea958 <line:2117:5, line:2125:5>
|   | |-BinaryOperator 0x2ac4b6e98e0 <line:2117:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x2ac4b6e9898 <col:10> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   | | `-IntegerLiteral 0x2ac4b6e98b8 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2ac4b6e9960 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2ac4b6e9948 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2ac4b6e9900 <col:17> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   | | `-IntegerLiteral 0x2ac4b6e9920 <col:21> 'int' 8
|   | |-UnaryOperator 0x2ac4b6e99a0 <col:24, col:26> 'int' prefix '++'
|   | | `-DeclRefExpr 0x2ac4b6e9980 <col:26> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   | `-CompoundStmt 0x2ac4b6ea940 <col:29, line:2125:5>
|   |   `-CallExpr 0x2ac4b6ea768 <line:2119:9, line:2124:40> 'void'
|   |     |-ImplicitCastExpr 0x2ac4b6ea750 <line:2119:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2ac4b6e99b8 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x2ac4b5d5d58 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x2ac4b6ea7d8 <col:19, col:47> 'limb *' <ArrayToPointerDecay>
|   |     | `-ArraySubscriptExpr 0x2ac4b6e9b80 <col:19, col:47> 'felem':'limb [9]' lvalue
|   |     |   |-ImplicitCastExpr 0x2ac4b6e9b68 <col:19, col:44> 'felem *' <ArrayToPointerDecay>
|   |     |   | `-ArraySubscriptExpr 0x2ac4b6e9b20 <col:19, col:44> 'felem [3]' lvalue
|   |     |   |   |-ImplicitCastExpr 0x2ac4b6e9b08 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |   |   | `-MemberExpr 0x2ac4b6e9a10 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |     |   |   |   `-ImplicitCastExpr 0x2ac4b6e99f8 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |   |   |     `-DeclRefExpr 0x2ac4b6e99d8 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |     |   |   `-BinaryOperator 0x2ac4b6e9ae8 <col:35, col:43> 'int' '+'
|   |     |   |     |-BinaryOperator 0x2ac4b6e9aa0 <col:35, col:39> 'int' '*'
|   |     |   |     | |-IntegerLiteral 0x2ac4b6e9a40 <col:35> 'int' 2
|   |     |   |     | `-ImplicitCastExpr 0x2ac4b6e9a88 <col:39> 'int' <LValueToRValue>
|   |     |   |     |   `-DeclRefExpr 0x2ac4b6e9a68 <col:39> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |     |   |     `-IntegerLiteral 0x2ac4b6e9ac0 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x2ac4b6e9b40 <col:46> 'int' 0
|   |     |-ImplicitCastExpr 0x2ac4b6ea7f0 <line:2120:19, col:47> 'limb *' <ArrayToPointerDecay>
|   |     | `-ArraySubscriptExpr 0x2ac4b6e9d48 <col:19, col:47> 'felem':'limb [9]' lvalue
|   |     |   |-ImplicitCastExpr 0x2ac4b6e9d30 <col:19, col:44> 'felem *' <ArrayToPointerDecay>
|   |     |   | `-ArraySubscriptExpr 0x2ac4b6e9ce8 <col:19, col:44> 'felem [3]' lvalue
|   |     |   |   |-ImplicitCastExpr 0x2ac4b6e9cd0 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |   |   | `-MemberExpr 0x2ac4b6e9bd8 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |     |   |   |   `-ImplicitCastExpr 0x2ac4b6e9bc0 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |   |   |     `-DeclRefExpr 0x2ac4b6e9ba0 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |     |   |   `-BinaryOperator 0x2ac4b6e9cb0 <col:35, col:43> 'int' '+'
|   |     |   |     |-BinaryOperator 0x2ac4b6e9c68 <col:35, col:39> 'int' '*'
|   |     |   |     | |-IntegerLiteral 0x2ac4b6e9c08 <col:35> 'int' 2
|   |     |   |     | `-ImplicitCastExpr 0x2ac4b6e9c50 <col:39> 'int' <LValueToRValue>
|   |     |   |     |   `-DeclRefExpr 0x2ac4b6e9c30 <col:39> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |     |   |     `-IntegerLiteral 0x2ac4b6e9c88 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x2ac4b6e9d08 <col:46> 'int' 1
|   |     |-ImplicitCastExpr 0x2ac4b6ea808 <line:2121:19, col:47> 'limb *' <ArrayToPointerDecay>
|   |     | `-ArraySubscriptExpr 0x2ac4b6e9f10 <col:19, col:47> 'felem':'limb [9]' lvalue
|   |     |   |-ImplicitCastExpr 0x2ac4b6e9ef8 <col:19, col:44> 'felem *' <ArrayToPointerDecay>
|   |     |   | `-ArraySubscriptExpr 0x2ac4b6e9eb0 <col:19, col:44> 'felem [3]' lvalue
|   |     |   |   |-ImplicitCastExpr 0x2ac4b6e9e98 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |   |   | `-MemberExpr 0x2ac4b6e9da0 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |     |   |   |   `-ImplicitCastExpr 0x2ac4b6e9d88 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |   |   |     `-DeclRefExpr 0x2ac4b6e9d68 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |     |   |   `-BinaryOperator 0x2ac4b6e9e78 <col:35, col:43> 'int' '+'
|   |     |   |     |-BinaryOperator 0x2ac4b6e9e30 <col:35, col:39> 'int' '*'
|   |     |   |     | |-IntegerLiteral 0x2ac4b6e9dd0 <col:35> 'int' 2
|   |     |   |     | `-ImplicitCastExpr 0x2ac4b6e9e18 <col:39> 'int' <LValueToRValue>
|   |     |   |     |   `-DeclRefExpr 0x2ac4b6e9df8 <col:39> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |     |   |     `-IntegerLiteral 0x2ac4b6e9e50 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x2ac4b6e9ed0 <col:46> 'int' 2
|   |     |-ImplicitCastExpr 0x2ac4b6ea838 <col:50, col:74> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x2ac4b6ea820 <col:50, col:74> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x2ac4b6ea090 <col:50, col:74> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x2ac4b6ea078 <col:50, col:71> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x2ac4b6ea030 <col:50, col:71> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x2ac4b6ea018 <col:50, col:55> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x2ac4b6e9f68 <col:50, col:55> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |     |     |   |   `-ImplicitCastExpr 0x2ac4b6e9f50 <col:50> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x2ac4b6e9f30 <col:50> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-BinaryOperator 0x2ac4b6e9ff8 <col:66, col:70> 'int' '*'
|   |     |     |     |-IntegerLiteral 0x2ac4b6e9f98 <col:66> 'int' 2
|   |     |     |     `-ImplicitCastExpr 0x2ac4b6e9fe0 <col:70> 'int' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x2ac4b6e9fc0 <col:70> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |     |     `-IntegerLiteral 0x2ac4b6ea050 <col:73> 'int' 0
|   |     |-ImplicitCastExpr 0x2ac4b6ea868 <line:2122:19, col:43> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x2ac4b6ea850 <col:19, col:43> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x2ac4b6ea210 <col:19, col:43> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x2ac4b6ea1f8 <col:19, col:40> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x2ac4b6ea1b0 <col:19, col:40> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x2ac4b6ea198 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x2ac4b6ea0e8 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |     |     |   |   `-ImplicitCastExpr 0x2ac4b6ea0d0 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x2ac4b6ea0b0 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-BinaryOperator 0x2ac4b6ea178 <col:35, col:39> 'int' '*'
|   |     |     |     |-IntegerLiteral 0x2ac4b6ea118 <col:35> 'int' 2
|   |     |     |     `-ImplicitCastExpr 0x2ac4b6ea160 <col:39> 'int' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x2ac4b6ea140 <col:39> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |     |     `-IntegerLiteral 0x2ac4b6ea1d0 <col:42> 'int' 1
|   |     |-ImplicitCastExpr 0x2ac4b6ea898 <col:46, col:70> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x2ac4b6ea880 <col:46, col:70> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x2ac4b6ea390 <col:46, col:70> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x2ac4b6ea378 <col:46, col:67> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x2ac4b6ea330 <col:46, col:67> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x2ac4b6ea318 <col:46, col:51> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x2ac4b6ea268 <col:46, col:51> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |     |     |   |   `-ImplicitCastExpr 0x2ac4b6ea250 <col:46> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x2ac4b6ea230 <col:46> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-BinaryOperator 0x2ac4b6ea2f8 <col:62, col:66> 'int' '*'
|   |     |     |     |-IntegerLiteral 0x2ac4b6ea298 <col:62> 'int' 2
|   |     |     |     `-ImplicitCastExpr 0x2ac4b6ea2e0 <col:66> 'int' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x2ac4b6ea2c0 <col:66> 'int' lvalue Var 0x2ac4b6f7710 'i' 'int'
|   |     |     `-IntegerLiteral 0x2ac4b6ea350 <col:69> 'int' 2
|   |     |-IntegerLiteral 0x2ac4b6ea3b0 <col:73> 'int' 0
|   |     |-ImplicitCastExpr 0x2ac4b6ea8c8 <line:2123:19, col:39> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x2ac4b6ea8b0 <col:19, col:39> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x2ac4b6ea4e0 <col:19, col:39> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x2ac4b6ea4c8 <col:19, col:36> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x2ac4b6ea480 <col:19, col:36> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x2ac4b6ea468 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x2ac4b6ea410 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |     |     |   |   `-ImplicitCastExpr 0x2ac4b6ea3f8 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x2ac4b6ea3d8 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-IntegerLiteral 0x2ac4b6ea440 <col:35> 'int' 1
|   |     |     `-IntegerLiteral 0x2ac4b6ea4a0 <col:38> 'int' 0
|   |     |-ImplicitCastExpr 0x2ac4b6ea8f8 <col:42, col:62> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x2ac4b6ea8e0 <col:42, col:62> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x2ac4b6ea608 <col:42, col:62> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x2ac4b6ea5f0 <col:42, col:59> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x2ac4b6ea5a8 <col:42, col:59> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x2ac4b6ea590 <col:42, col:47> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x2ac4b6ea538 <col:42, col:47> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |     |     |   |   `-ImplicitCastExpr 0x2ac4b6ea520 <col:42> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x2ac4b6ea500 <col:42> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-IntegerLiteral 0x2ac4b6ea568 <col:58> 'int' 1
|   |     |     `-IntegerLiteral 0x2ac4b6ea5c8 <col:61> 'int' 1
|   |     `-ImplicitCastExpr 0x2ac4b6ea928 <line:2124:19, col:39> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x2ac4b6ea910 <col:19, col:39> 'limb *' <ArrayToPointerDecay>
|   |         `-ArraySubscriptExpr 0x2ac4b6ea730 <col:19, col:39> 'felem':'limb [9]' lvalue
|   |           |-ImplicitCastExpr 0x2ac4b6ea718 <col:19, col:36> 'felem *' <ArrayToPointerDecay>
|   |           | `-ArraySubscriptExpr 0x2ac4b6ea6d0 <col:19, col:36> 'felem [3]' lvalue
|   |           |   |-ImplicitCastExpr 0x2ac4b6ea6b8 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |           |   | `-MemberExpr 0x2ac4b6ea660 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   |           |   |   `-ImplicitCastExpr 0x2ac4b6ea648 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |           |   |     `-DeclRefExpr 0x2ac4b6ea628 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   |           |   `-IntegerLiteral 0x2ac4b6ea690 <col:35> 'int' 1
|   |           `-IntegerLiteral 0x2ac4b6ea6f0 <col:38> 'int' 2
|   |-CallExpr 0x2ac4b6eab28 <line:2126:5, col:61> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6eab10 <col:5> 'void (*)(size_t, felem (*)[3], felem *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6ea990 <col:5> 'void (size_t, felem (*)[3], felem *)' Function 0x2ac4b6ebe58 'make_points_affine' 'void (size_t, felem (*)[3], felem *)'
|   | |-ImplicitCastExpr 0x2ac4b6eab60 <col:24> 'size_t':'unsigned long long' <IntegralCast>
|   | | `-IntegerLiteral 0x2ac4b6ea9b0 <col:24> 'int' 15
|   | |-UnaryOperator 0x2ac4b6eaac0 <col:28, col:48> 'felem (*)[3]' prefix '&' cannot overflow
|   | | `-ParenExpr 0x2ac4b6eaaa0 <col:29, col:48> 'felem [3]' lvalue
|   | |   `-ArraySubscriptExpr 0x2ac4b6eaa80 <col:30, col:47> 'felem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x2ac4b6eaa68 <col:30, col:35> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-MemberExpr 0x2ac4b6eaa10 <col:30, col:35> 'felem [16][3]' lvalue ->g_pre_comp 0x2ac4b6e07a8
|   | |     |   `-ImplicitCastExpr 0x2ac4b6ea9f8 <col:30> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |     `-DeclRefExpr 0x2ac4b6ea9d8 <col:30> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | |     `-IntegerLiteral 0x2ac4b6eaa40 <col:46> 'int' 1
|   | `-ImplicitCastExpr 0x2ac4b6eab78 <col:51> 'felem *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x2ac4b6eaad8 <col:51> 'felem [16]' lvalue Var 0x2ac4b6f7a18 'tmp_felems' 'felem [16]'
|   |-LabelStmt 0x2ac4b6eabd8 <line:2128:2, col:6> 'done'
|   | `-NullStmt 0x2ac4b6eabd0 <col:6>
|   |-BinaryOperator 0x2ac4b6eac50 <line:2130:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x2ac4b6eabf0 <col:5> 'int' lvalue Var 0x2ac4b6f7520 'ret' 'int'
|   | `-IntegerLiteral 0x2ac4b6eac28 <col:11> 'int' 1
|   |-BinaryOperator 0x2ac4b6f8db8 <line:2131:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'NISTP521_PRE_COMP *' '='
|   | |-DeclRefExpr 0x2ac4b6eac70 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:2131:5> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   | `-ImplicitCastExpr 0x2ac4b6f8da0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
|   |   `-ParenExpr 0x2ac4b6eacf8 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x2ac4b6eacd0 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x2ac4b6eac90 <col:26> 'int' 0
|   |-LabelStmt 0x2ac4b6f8e00 <.//openssl//file_jk/after\crypto\ec\ecp_nistp521.c:2132:2, col:5> 'err'
|   | `-NullStmt 0x2ac4b6f8df8 <col:5>
|   |-CallExpr 0x2ac4b6f8f10 <line:2136:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x2ac4b6f8ef8 <col:5> 'void (*)(NISTP521_PRE_COMP *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2ac4b6f8e58 <col:5> 'void (NISTP521_PRE_COMP *)' Function 0x2ac4b6d3ec8 'EC_nistp521_pre_comp_free' 'void (NISTP521_PRE_COMP *)'
|   | `-ImplicitCastExpr 0x2ac4b6f8f38 <col:31> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2ac4b6f8e78 <col:31> 'NISTP521_PRE_COMP *' lvalue Var 0x2ac4b6f75d8 'pre' 'NISTP521_PRE_COMP *'
|   `-ReturnStmt 0x2ac4b6f8f88 <line:2137:5, col:12>
|     `-ImplicitCastExpr 0x2ac4b6f8f70 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x2ac4b6f8f50 <col:12> 'int' lvalue Var 0x2ac4b6f7520 'ret' 'int'
`-FunctionDecl 0x2ac4b6f9128 <line:2140:1, line:2143:1> line:2140:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
  |-ParmVarDecl 0x2ac4b6f9090 <col:42, col:58> col:58 invalid group 'const int *'
  `-CompoundStmt 0x2ac4b6f9290 <line:2141:1, line:2143:1>
