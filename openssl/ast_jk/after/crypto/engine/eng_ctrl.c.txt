TranslationUnitDecl 0x26e321593a8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x26e32159c40 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x26e32159940 '__int128'
|-TypedefDecl 0x26e32159cb0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x26e32159960 'unsigned __int128'
|-TypedefDecl 0x26e32159fe8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x26e32159da0 'struct __NSConstantString_tag'
|   `-Record 0x26e32159d08 '__NSConstantString_tag'
|-TypedefDecl 0x26e3215a058 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x26e32159580 'unsigned long long'
|-TypedefDecl 0x26e3215a0f0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x26e3215a0b0 'char *'
|   `-BuiltinType 0x26e32159440 'char'
|-TypedefDecl 0x26e3215a160 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x26e3215a0b0 'char *'
|   `-BuiltinType 0x26e32159440 'char'
|-VarDecl 0x26e3215a200 <.//openssl//file_jk/after\crypto\engine/eng_int.h:27:1, col:23> col:23 invalid global_engine_lock 'int *' extern
|-TypedefDecl 0x26e33ba4bb0 <line:58:1, col:39> col:15 referenced ENGINE_CLEANUP_CB 'void (void)':'void (void)'
| `-ParenType 0x26e3215a310 'void (void)' sugar
|   `-FunctionProtoType 0x26e3215a2e0 'void (void)' cdecl
|     `-BuiltinType 0x26e32159400 'void'
|-RecordDecl 0x26e33ba4c08 <line:59:9, line:61:1> line:59:16 struct st_engine_cleanup_item definition
| `-FieldDecl 0x26e33ba4d48 <line:60:5, col:24> col:24 cb 'ENGINE_CLEANUP_CB *'
|-TypedefDecl 0x26e33ba4df8 <line:59:1, line:61:3> col:3 referenced ENGINE_CLEANUP_ITEM 'struct st_engine_cleanup_item':'struct st_engine_cleanup_item'
| `-ElaboratedType 0x26e33ba4da0 'struct st_engine_cleanup_item' sugar
|   `-RecordType 0x26e33ba4ca0 'struct st_engine_cleanup_item'
|     `-Record 0x26e33ba4c08 'st_engine_cleanup_item'
|-FunctionDecl 0x26e33ba4fa0 <line:62:1, col:36> col:1 DEFINE_STACK_OF 'int (ENGINE_CLEANUP_ITEM)'
| `-ParmVarDecl 0x26e33ba4ea0 <col:17> col:36 'ENGINE_CLEANUP_ITEM':'struct st_engine_cleanup_item'
|-FunctionDecl 0x26e33ba51c8 <line:63:1, col:52> col:6 engine_cleanup_add_first 'void (ENGINE_CLEANUP_CB *)'
| `-ParmVarDecl 0x26e33ba50b8 <col:31, col:50> col:50 cb 'ENGINE_CLEANUP_CB *'
|-FunctionDecl 0x26e33ba5340 <line:64:1, col:51> col:6 engine_cleanup_add_last 'void (ENGINE_CLEANUP_CB *)'
| `-ParmVarDecl 0x26e33ba5298 <col:30, col:49> col:49 cb 'ENGINE_CLEANUP_CB *'
|-RecordDecl 0x26e33ba5400 <line:81:9, col:16> col:16 struct st_engine_table
|-EmptyDecl 0x26e33ba1f58 <line:88:59> col:59
|-TypedefDecl 0x26e33ba2200 <line:94:1, line:95:61> line:94:15 referenced engine_table_doall_cb 'void (int, int (*)())':'void (int, int (*)())'
| `-ParenType 0x26e33ba21a0 'void (int, int (*)())' sugar
|   `-FunctionProtoType 0x26e33ba2160 'void (int, int (*)())' cdecl
|     |-BuiltinType 0x26e32159400 'void'
|     |-BuiltinType 0x26e321594a0 'int'
|     `-DecayedType 0x26e33ba2080 'int (*)()' sugar
|       |-FunctionNoProtoType 0x26e33ba2000 'int ()' cdecl
|       | `-BuiltinType 0x26e321594a0 'int'
|       `-PointerType 0x26e33ba2050 'int (*)()'
|         `-FunctionNoProtoType 0x26e33ba2000 'int ()' cdecl
|           `-BuiltinType 0x26e321594a0 'int'
|-FunctionDecl 0x26e33ba2508 <line:96:1, line:97:34> line:96:6 invalid engine_table_doall 'void (int *, engine_table_doall_cb *, void *)'
| |-ParmVarDecl 0x26e33ba2270 <col:25, col:39> col:39 invalid table 'int *'
| |-ParmVarDecl 0x26e33ba2368 <col:46, col:69> col:69 cb 'engine_table_doall_cb *'
| `-ParmVarDecl 0x26e33ba23e8 <line:97:25, col:31> col:31 arg 'void *'
|-FunctionDecl 0x26e33ba26a0 <line:104:1, col:35> col:5 invalid engine_unlocked_init 'int (int *)'
| `-ParmVarDecl 0x26e33ba25d8 <col:26, col:34> col:34 invalid e 'int *'
|-FunctionDecl 0x26e33ba28c0 <line:105:1, col:62> col:5 invalid engine_unlocked_finish 'int (int *, int)'
| |-ParmVarDecl 0x26e33ba2760 <col:28, col:36> col:36 invalid e 'int *'
| `-ParmVarDecl 0x26e33ba27e0 <col:39, col:43> col:43 unlock_for_handlers 'int'
|-FunctionDecl 0x26e33ba2aa8 <line:106:1, col:43> col:5 invalid engine_free_util 'int (int *, int)'
| |-ParmVarDecl 0x26e33ba2988 <col:22, col:30> col:30 invalid e 'int *'
| `-ParmVarDecl 0x26e33ba2a08 <col:33, col:37> col:37 locked 'int'
|-FunctionDecl 0x26e33ba7ca8 <line:113:1, col:35> col:6 invalid engine_set_all_null 'void (int *)'
| `-ParmVarDecl 0x26e33ba7be0 <col:26, col:34> col:34 invalid e 'int *'
|-FunctionDecl 0x26e33ba7df8 <line:122:1, col:38> col:6 invalid engine_pkey_meths_free 'void (int *)'
| `-ParmVarDecl 0x26e33ba7d68 <col:29, col:37> col:37 invalid e 'int *'
|-FunctionDecl 0x26e33ba7f48 <line:123:1, col:43> col:6 invalid engine_pkey_asn1_meths_free 'void (int *)'
| `-ParmVarDecl 0x26e33ba7eb8 <col:34, col:42> col:42 invalid e 'int *'
|-VarDecl 0x26e33ba8008 <line:126:1, col:20> col:20 invalid engine_lock_init 'int' extern
|-RecordDecl 0x26e33ba8070 <line:133:1, line:173:1> line:133:8 invalid struct engine_st definition
| |-FieldDecl 0x26e33ba8148 <line:134:5, col:17> col:17 id 'const char *'
| |-FieldDecl 0x26e33ba81b8 <line:135:5, col:17> col:17 name 'const char *'
| |-FieldDecl 0x26e33ba8228 <line:136:5, col:23> col:23 invalid rsa_meth 'const int *'
| |-FieldDecl 0x26e33ba8298 <line:137:5, col:23> col:23 invalid dsa_meth 'const int *'
| |-FieldDecl 0x26e33ba8308 <line:138:5, col:22> col:22 invalid dh_meth 'const int *'
| |-FieldDecl 0x26e33ba8378 <line:139:5, col:26> col:26 invalid ec_meth 'const int *'
| |-FieldDecl 0x26e33ba83e8 <line:140:5, col:24> col:24 invalid rand_meth 'const int *'
| |-FieldDecl 0x26e33ba8458 <line:142:5, col:24> col:24 invalid ciphers 'int'
| |-FieldDecl 0x26e33ba84c8 <line:144:5, col:24> col:24 invalid digests 'int'
| |-FieldDecl 0x26e33ba8538 <line:146:5, col:27> col:27 invalid pkey_meths 'int'
| |-FieldDecl 0x26e33ba85a8 <line:148:5, col:32> col:32 invalid pkey_asn1_meths 'int'
| |-FieldDecl 0x26e33ba8618 <line:149:5, col:29> col:29 invalid destroy 'int'
| |-FieldDecl 0x26e33ba8688 <line:150:5, col:29> col:29 invalid init 'int'
| |-FieldDecl 0x26e33ba86f8 <line:151:5, col:29> col:29 invalid finish 'int'
| |-FieldDecl 0x26e33ba8768 <line:152:5, col:26> col:26 invalid ctrl 'int'
| |-FieldDecl 0x26e33ba87d8 <line:153:5, col:25> col:25 invalid load_privkey 'int'
| |-FieldDecl 0x26e33ba8848 <line:154:5, col:25> col:25 invalid load_pubkey 'int'
| |-FieldDecl 0x26e33ba88b8 <line:155:5, col:32> col:32 invalid load_ssl_client_cert 'int'
| |-FieldDecl 0x26e33ba8928 <line:156:5, col:28> col:28 invalid cmd_defns 'const int *'
| |-FieldDecl 0x26e33ba8998 <line:157:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x26e33ba8a08 <line:159:5, col:9> col:9 struct_ref 'int'
| |-FieldDecl 0x26e33ba8a78 <line:167:5, col:9> col:9 funct_ref 'int'
| |-FieldDecl 0x26e33ba8ae8 <line:169:5, col:20> col:20 invalid ex_data 'int'
| |-FieldDecl 0x26e33ba3bc8 <line:171:5, col:23> col:23 prev 'struct engine_st *'
| `-FieldDecl 0x26e33ba3c48 <line:172:5, col:23> col:23 next 'struct engine_st *'
|-RecordDecl 0x26e33ba3ca0 <line:175:9, col:16> col:16 struct st_engine_pile
|-EmptyDecl 0x26e33ba3ea0 <line:177:29> col:29
|-VarDecl 0x26e33ba3ee0 <.//openssl//file_jk/after\crypto\engine\eng_ctrl.c:16:1, col:41> col:20 used int_no_description 'const char *' static cinit
| `-ImplicitCastExpr 0x26e33ba3fd0 <col:41> 'const char *' <NoOp>
|   `-ImplicitCastExpr 0x26e33ba3fb8 <col:41> 'char *' <ArrayToPointerDecay>
|     `-StringLiteral 0x26e33ba3f88 <col:41> 'char [1]' lvalue ""
|-FunctionDecl 0x26e33ba40d0 <line:24:1, line:29:1> line:24:12 invalid int_ctrl_cmd_is_null 'int (const int *)' static
| |-ParmVarDecl 0x26e33ba4000 <col:33, col:56> col:56 invalid defn 'const int *'
| `-CompoundStmt 0x26e33ba4258 <line:25:1, line:29:1>
|   |-IfStmt 0x26e33ba4208 <line:26:5, line:27:16>
|   | |-OpaqueValueExpr 0x26e33ba41f0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x26e33ba41e0 <col:9, col:16>
|   |   `-IntegerLiteral 0x26e33ba41b8 <col:16> 'int' 1
|   `-ReturnStmt 0x26e33ba4248 <line:28:5, col:12>
|     `-IntegerLiteral 0x26e33ba4220 <col:12> 'int' 0
|-FunctionDecl 0x26e33ba43f0 <line:31:1, line:42:1> line:31:12 invalid int_ctrl_cmd_by_name 'int (const int *, const char *)' static
| |-ParmVarDecl 0x26e33ba4290 <col:33, col:56> col:56 invalid defn 'const int *'
| |-ParmVarDecl 0x26e33ba4310 <col:62, col:74> col:74 used s 'const char *'
| `-CompoundStmt 0x26e33ba4900 <line:32:1, line:42:1>
|   |-DeclStmt 0x26e33ba4560 <line:33:5, col:16>
|   | `-VarDecl 0x26e33ba44d0 <col:5, col:15> col:9 used idx 'int' cinit
|   |   `-IntegerLiteral 0x26e33ba4538 <col:15> 'int' 0
|   |-IfStmt 0x26e33ba48a0 <line:38:5, line:40:17>
|   | |-OpaqueValueExpr 0x26e33ba4888 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x26e33ba4878 <col:9, col:17>
|   |   `-UnaryOperator 0x26e33ba4860 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x26e33ba4838 <col:17> 'int' 1
|   `-ReturnStmt 0x26e33ba48f0 <line:41:5, col:12>
|     `-ImplicitCastExpr 0x26e33ba48d8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x26e33ba48b8 <col:12> 'int' lvalue Var 0x26e33ba44d0 'idx' 'int'
|-FunctionDecl 0x26e33ba45b8 <line:34:44> col:44 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x26e33ba4658 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26e33ba46c0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26e33ba4aa0 <line:44:1, line:59:1> line:44:12 invalid int_ctrl_cmd_by_num 'int (const int *, unsigned int)' static
| |-ParmVarDecl 0x26e33ba4940 <col:32, col:55> col:55 invalid defn 'const int *'
| |-ParmVarDecl 0x26e33ba49c0 <col:61, col:74> col:74 used num 'unsigned int'
| `-CompoundStmt 0x26e33ba5df0 <line:45:1, line:59:1>
|   |-DeclStmt 0x26e33ba5c50 <line:46:5, col:16>
|   | `-VarDecl 0x26e33ba5bc0 <col:5, col:15> col:9 used idx 'int' cinit
|   |   `-IntegerLiteral 0x26e33ba5c28 <col:15> 'int' 0
|   |-IfStmt 0x26e33ba5d88 <line:55:5, line:56:16>
|   | |-OpaqueValueExpr 0x26e33ba5d70 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x26e33ba5d60 <col:9, col:16>
|   |   `-ImplicitCastExpr 0x26e33ba5d48 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26e33ba5d28 <col:16> 'int' lvalue Var 0x26e33ba5bc0 'idx' 'int'
|   `-ReturnStmt 0x26e33ba5de0 <line:58:5, col:13>
|     `-UnaryOperator 0x26e33ba5dc8 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x26e33ba5da0 <col:13> 'int' 1
|-FunctionDecl 0x26e33ba6240 <line:61:1, line:131:1> line:61:12 invalid int_ctrl_helper 'int (int *, int, long, void *, void (*)(void))' static
| |-ParmVarDecl 0x26e33ba5e30 <col:28, col:36> col:36 invalid e 'int *'
| |-ParmVarDecl 0x26e33ba5eb0 <col:39, col:43> col:43 used cmd 'int'
| |-ParmVarDecl 0x26e33ba5f30 <col:48, col:53> col:53 used i 'long'
| |-ParmVarDecl 0x26e33ba5fb0 <col:56, col:62> col:62 used p 'void *'
| |-ParmVarDecl 0x26e33ba60e8 <line:62:28, col:43> col:35 f 'void (*)(void)'
| `-CompoundStmt 0x26e33bb02e0 <line:63:1, line:131:1>
|   |-DeclStmt 0x26e33ba63a0 <line:64:5, col:12>
|   | `-VarDecl 0x26e33ba6338 <col:5, col:9> col:9 used idx 'int'
|   |-DeclStmt 0x26e33ba64c8 <line:65:5, col:24>
|   | `-VarDecl 0x26e33ba63d0 <col:5, col:23> col:11 used s 'char *' cinit
|   |   `-CStyleCastExpr 0x26e33ba64a0 <col:15, col:23> 'char *' <BitCast>
|   |     `-ImplicitCastExpr 0x26e33ba6488 <col:23> 'void *' <LValueToRValue> part_of_explicit_cast
|   |       `-DeclRefExpr 0x26e33ba6438 <col:23> 'void *' lvalue ParmVar 0x26e33ba5fb0 'p' 'void *'
|   |-IfStmt 0x26e33ba65b0 <line:67:5, line:71:5>
|   | |-OpaqueValueExpr 0x26e33ba6598 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33ba6580 <line:67:48, line:71:5>
|   |   `-IfStmt 0x26e33ba6568 <line:68:9, line:69:20>
|   |     |-OpaqueValueExpr 0x26e33ba6550 <<invalid sloc>> '_Bool'
|   |     `-ReturnStmt 0x26e33ba6540 <col:13, col:20>
|   |       `-IntegerLiteral 0x26e33ba6518 <col:20> 'int' 0
|   |-IfStmt 0x26e33ba6838 <line:73:5, line:80:5>
|   | |-OpaqueValueExpr 0x26e33ba6820 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33ba6808 <line:75:49, line:80:5>
|   |   `-IfStmt 0x26e33ba67f0 <line:76:9, line:79:9>
|   |     |-OpaqueValueExpr 0x26e33ba67d8 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x26e33ba67c0 <line:76:24, line:79:9>
|   |       `-ReturnStmt 0x26e33ba67b0 <line:78:13, col:21>
|   |         `-UnaryOperator 0x26e33ba6798 <col:20, col:21> 'int' prefix '-'
|   |           `-IntegerLiteral 0x26e33ba6770 <col:21> 'int' 1
|   |-IfStmt 0x26e33ba69f8 <line:82:5, line:89:5>
|   | |-OpaqueValueExpr 0x26e33ba69e0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33ba69c8 <line:82:47, line:89:5>
|   |   `-IfStmt 0x26e33ba6990 <line:83:9, line:87:9>
|   |     |-OpaqueValueExpr 0x26e33ba6978 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x26e33ba6960 <line:84:69, line:87:9>
|   |       `-ReturnStmt 0x26e33ba6950 <line:86:13, col:21>
|   |         `-UnaryOperator 0x26e33ba6938 <col:20, col:21> 'int' prefix '-'
|   |           `-IntegerLiteral 0x26e33ba6910 <col:21> 'int' 1
|   |-IfStmt 0x26e33ba6b88 <line:94:5, line:99:5>
|   | |-OpaqueValueExpr 0x26e33ba6b70 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33ba6b58 <line:96:73, line:99:5>
|   |   `-ReturnStmt 0x26e33ba6b48 <line:98:9, col:17>
|   |     `-UnaryOperator 0x26e33ba6b30 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x26e33ba6b08 <col:17> 'int' 1
|   |-SwitchStmt 0x26e33baf8b8 <line:101:5, line:127:5>
|   | |-ImplicitCastExpr 0x26e33baf8a0 <line:101:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x26e33ba6ba0 <col:13> 'int' lvalue ParmVar 0x26e33ba5eb0 'cmd' 'int'
|   | `-CompoundStmt 0x26e33bb0240 <col:18, line:127:5>
|   |   |-UnaryOperator 0x26e33baf8f8 <line:103:9, col:12> 'int' postfix '++'
|   |   | `-DeclRefExpr 0x26e33baf8d8 <col:9> 'int' lvalue Var 0x26e33ba6338 'idx' 'int'
|   |   |-IfStmt 0x26e33baf9a8 <line:104:9, line:108:13> has_else
|   |   | |-OpaqueValueExpr 0x26e33baf990 <<invalid sloc>> '_Bool'
|   |   | |-ReturnStmt 0x26e33baf958 <line:106:13, col:20>
|   |   | | `-IntegerLiteral 0x26e33baf930 <col:20> 'int' 0
|   |   | `-NullStmt 0x26e33baf988 <line:108:13>
|   |   |-ReturnStmt 0x26e33bafec8 <line:117:9, col:41>
|   |   | `-ImplicitCastExpr 0x26e33bafeb0 <col:16, col:41> 'int' <IntegralCast>
|   |   |   `-CallExpr 0x26e33bafe70 <col:16, col:41> 'unsigned long long'
|   |   |     |-ImplicitCastExpr 0x26e33bafe58 <col:16> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x26e33bafdd8 <col:16> 'unsigned long long (const char *)' Function 0x26e33bafa00 'strlen' 'unsigned long long (const char *)'
|   |   |     `-ImplicitCastExpr 0x26e33bafe98 <col:23> 'const char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x26e33bafdf8 <col:23> 'const char *' lvalue Var 0x26e33ba3ee0 'int_no_description' 'const char *'
|   |   `-ReturnStmt 0x26e33bb0210 <line:123:9, line:124:47>
|   |     `-CallExpr 0x26e33bb0188 <line:123:16, line:124:47> 'int'
|   |       |-ImplicitCastExpr 0x26e33bb0170 <line:123:16> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x26e33baffe0 <col:16> 'int ()' Function 0x26e33bafb90 'BIO_snprintf' 'int ()'
|   |       |-ImplicitCastExpr 0x26e33bb01c8 <col:29> 'char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26e33bb0000 <col:29> 'char *' lvalue Var 0x26e33ba63d0 's' 'char *'
|   |       |-BinaryOperator 0x26e33bb0110 <col:32, col:61> 'unsigned long long' '+'
|   |       | |-CallExpr 0x26e33bb0090 <col:32, col:57> 'unsigned long long'
|   |       | | |-ImplicitCastExpr 0x26e33bb0078 <col:32> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x26e33bb0020 <col:32> 'unsigned long long (const char *)' Function 0x26e33bafa00 'strlen' 'unsigned long long (const char *)'
|   |       | | `-ImplicitCastExpr 0x26e33bb00b8 <col:39> 'const char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x26e33bb0040 <col:39> 'const char *' lvalue Var 0x26e33ba3ee0 'int_no_description' 'const char *'
|   |       | `-ImplicitCastExpr 0x26e33bb00f8 <col:61> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x26e33bb00d0 <col:61> 'int' 1
|   |       |-ImplicitCastExpr 0x26e33bb01e0 <col:64> 'char *' <ArrayToPointerDecay>
|   |       | `-StringLiteral 0x26e33bb0130 <col:64> 'char [3]' lvalue "%s"
|   |       `-ImplicitCastExpr 0x26e33bb01f8 <line:124:29> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x26e33bb0150 <col:29> 'const char *' lvalue Var 0x26e33ba3ee0 'int_no_description' 'const char *'
|   `-ReturnStmt 0x26e33bb02d0 <line:130:5, col:13>
|     `-UnaryOperator 0x26e33bb02b8 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x26e33bb0290 <col:13> 'int' 1
|-FunctionDecl 0x26e33bafa00 <line:110:16> col:16 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x26e33bafaa0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26e33bb0690 <line:133:1, line:183:1> line:133:5 invalid ENGINE_ctrl 'int (int *, int, long, void *, void (*)(void))'
| |-ParmVarDecl 0x26e33bb0348 <col:17, col:25> col:25 invalid e 'int *'
| |-ParmVarDecl 0x26e33bb03c8 <col:28, col:32> col:32 used cmd 'int'
| |-ParmVarDecl 0x26e33bb0448 <col:37, col:42> col:42 used i 'long'
| |-ParmVarDecl 0x26e33bb04c8 <col:45, col:51> col:51 used p 'void *'
| |-ParmVarDecl 0x26e33bb05d8 <col:54, col:69> col:61 used f 'void (*)(void)'
| `-CompoundStmt 0x26e33baf198 <line:134:1, line:183:1>
|   |-DeclStmt 0x26e33bb0888 <line:135:5, col:32>
|   | |-VarDecl 0x26e33bb0788 <col:5, col:9> col:9 used ctrl_exists 'int'
|   | `-VarDecl 0x26e33bb0808 <col:5, col:22> col:22 used ref_exists 'int'
|   |-IfStmt 0x26e33bae918 <line:136:5, line:139:5>
|   | |-OpaqueValueExpr 0x26e33bae900 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33bae8e8 <line:136:20, line:139:5>
|   |   `-ReturnStmt 0x26e33bae8d8 <line:138:9, col:16>
|   |     `-IntegerLiteral 0x26e33bae8b0 <col:16> 'int' 0
|   |-IfStmt 0x26e33baed48 <line:144:5, line:147:5>
|   | |-UnaryOperator 0x26e33baecc0 <line:144:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x26e33baeca8 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x26e33baec88 <col:10> 'int' lvalue Var 0x26e33bb0808 'ref_exists' 'int'
|   | `-CompoundStmt 0x26e33baed30 <col:22, line:147:5>
|   |   `-ReturnStmt 0x26e33baed20 <line:146:9, col:16>
|   |     `-IntegerLiteral 0x26e33baecf8 <col:16> 'int' 0
|   |-SwitchStmt 0x26e33baedb0 <line:152:5, line:176:5>
|   | |-ImplicitCastExpr 0x26e33baed98 <line:152:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x26e33baed60 <col:13> 'int' lvalue ParmVar 0x26e33bb03c8 'cmd' 'int'
|   | `-CompoundStmt 0x26e33baf018 <col:18, line:176:5>
|   |   |-ReturnStmt 0x26e33baee08 <line:154:9, col:16>
|   |   | `-ImplicitCastExpr 0x26e33baedf0 <col:16> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x26e33baedd0 <col:16> 'int' lvalue Var 0x26e33bb0788 'ctrl_exists' 'int'
|   |   |-IfStmt 0x26e33baefd8 <line:165:9, line:173:9>
|   |   | |-UnaryOperator 0x26e33baef38 <line:165:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x26e33baef20 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x26e33baef00 <col:14> 'int' lvalue Var 0x26e33bb0788 'ctrl_exists' 'int'
|   |   | `-CompoundStmt 0x26e33baefc0 <col:27, line:173:9>
|   |   |   `-ReturnStmt 0x26e33baefb0 <line:172:13, col:21>
|   |   |     `-UnaryOperator 0x26e33baef98 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x26e33baef70 <col:21> 'int' 1
|   |   `-DefaultStmt 0x26e33baeff8 <line:174:5, line:175:9>
|   |     `-BreakStmt 0x26e33baeff0 <col:9>
|   `-IfStmt 0x26e33baf100 <line:178:5, line:181:5>
|     |-UnaryOperator 0x26e33baf078 <line:178:9, col:10> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x26e33baf060 <col:10> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x26e33baf040 <col:10> 'int' lvalue Var 0x26e33bb0788 'ctrl_exists' 'int'
|     `-CompoundStmt 0x26e33baf0e8 <col:23, line:181:5>
|       `-ReturnStmt 0x26e33baf0d8 <line:180:9, col:16>
|         `-IntegerLiteral 0x26e33baf0b0 <col:16> 'int' 0
|-FunctionDecl 0x26e33baf308 <line:185:1, line:199:1> line:185:5 invalid ENGINE_cmd_is_executable 'int (int *, int)'
| |-ParmVarDecl 0x26e33baf1e8 <col:30, col:38> col:38 invalid e 'int *'
| |-ParmVarDecl 0x26e33baf268 <col:41, col:45> col:45 used cmd 'int'
| `-CompoundStmt 0x26e33baf6a0 <line:186:1, line:199:1>
|   |-DeclStmt 0x26e33baf450 <line:187:5, col:14>
|   | `-VarDecl 0x26e33baf3e8 <col:5, col:9> col:9 used flags 'int'
|   |-IfStmt 0x26e33baf588 <line:188:5, line:193:5>
|   | |-OpaqueValueExpr 0x26e33baf570 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33baf558 <line:189:75, line:193:5>
|   |   `-ReturnStmt 0x26e33baf548 <line:192:9, col:16>
|   |     `-IntegerLiteral 0x26e33baf520 <col:16> 'int' 0
|   |-IfStmt 0x26e33baf650 <line:194:5, line:197:16>
|   | |-OpaqueValueExpr 0x26e33baf638 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x26e33baf628 <col:9, col:16>
|   |   `-IntegerLiteral 0x26e33baf600 <col:16> 'int' 0
|   `-ReturnStmt 0x26e33baf690 <line:198:5, col:12>
|     `-IntegerLiteral 0x26e33baf668 <col:12> 'int' 1
|-FunctionDecl 0x26e33bb0bc0 <line:201:1, line:235:1> line:201:5 invalid ENGINE_ctrl_cmd 'int (int *, const char *, long, void *, void (*)(void), int)'
| |-ParmVarDecl 0x26e33baf6e8 <col:21, col:29> col:29 invalid e 'int *'
| |-ParmVarDecl 0x26e33baf768 <col:32, col:44> col:44 used cmd_name 'const char *'
| |-ParmVarDecl 0x26e33baf7e8 <line:202:21, col:26> col:26 used i 'long'
| |-ParmVarDecl 0x26e33bb08b0 <col:29, col:35> col:35 used p 'void *'
| |-ParmVarDecl 0x26e33bb09c0 <col:38, col:53> col:45 used f 'void (*)(void)'
| |-ParmVarDecl 0x26e33bb0a40 <col:56, col:60> col:60 used cmd_optional 'int'
| `-CompoundStmt 0x26e33bb1358 <line:203:1, line:235:1>
|   |-DeclStmt 0x26e33bb0d28 <line:204:5, col:12>
|   | `-VarDecl 0x26e33bb0cc0 <col:5, col:9> col:9 used num 'int'
|   |-IfStmt 0x26e33bb0e00 <line:206:5, line:209:5>
|   | |-OpaqueValueExpr 0x26e33bb0de8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33bb0dd0 <line:206:40, line:209:5>
|   |   `-ReturnStmt 0x26e33bb0dc0 <line:208:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb0d98 <col:16> 'int' 0
|   |-IfStmt 0x26e33bb11b0 <line:210:5, line:227:5>
|   | |-OpaqueValueExpr 0x26e33bb1198 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33bb1178 <line:212:65, line:227:5>
|   |   |-IfStmt 0x26e33bb1108 <line:221:9, line:224:9>
|   |   | |-ImplicitCastExpr 0x26e33bb0f50 <line:221:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x26e33bb0f18 <col:13> 'int' lvalue ParmVar 0x26e33bb0a40 'cmd_optional' 'int'
|   |   | `-CompoundStmt 0x26e33bb10e8 <col:27, line:224:9>
|   |   |   |-CallExpr 0x26e33bb1090 <line:222:13, col:29> 'int'
|   |   |   | `-ImplicitCastExpr 0x26e33bb1078 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x26e33bb1058 <col:13> 'int ()' Function 0x26e33bb0f90 'ERR_clear_error' 'int ()'
|   |   |   `-ReturnStmt 0x26e33bb10d8 <line:223:13, col:20>
|   |   |     `-IntegerLiteral 0x26e33bb10b0 <col:20> 'int' 1
|   |   `-ReturnStmt 0x26e33bb1168 <line:226:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb1140 <col:16> 'int' 0
|   |-IfStmt 0x26e33bb1308 <line:232:5, line:233:16>
|   | |-OpaqueValueExpr 0x26e33bb12f0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x26e33bb12e0 <col:9, col:16>
|   |   `-IntegerLiteral 0x26e33bb12b8 <col:16> 'int' 1
|   `-ReturnStmt 0x26e33bb1348 <line:234:5, col:12>
|     `-IntegerLiteral 0x26e33bb1320 <col:12> 'int' 0
|-FunctionDecl 0x26e33bb1620 <line:237:1, line:338:1> line:237:5 invalid ENGINE_ctrl_cmd_string 'int (int *, const char *, const char *, int)'
| |-ParmVarDecl 0x26e33bb13a8 <col:28, col:36> col:36 invalid e 'int *'
| |-ParmVarDecl 0x26e33bb1428 <col:39, col:51> col:51 used cmd_name 'const char *'
| |-ParmVarDecl 0x26e33bb14a8 <col:61, col:73> col:73 used arg 'const char *'
| |-ParmVarDecl 0x26e33bb1528 <line:238:28, col:32> col:32 used cmd_optional 'int'
| `-CompoundStmt 0x26e33bb7d90 <line:239:1, line:338:1>
|   |-DeclStmt 0x26e33bb1810 <line:240:5, col:19>
|   | |-VarDecl 0x26e33bb1710 <col:5, col:9> col:9 used num 'int'
|   | `-VarDecl 0x26e33bb1790 <col:5, col:14> col:14 used flags 'int'
|   |-DeclStmt 0x26e33bb38e0 <line:241:5, col:11>
|   | `-VarDecl 0x26e33bb1840 <col:5, col:10> col:10 used l 'long'
|   |-DeclStmt 0x26e33bb3978 <line:242:5, col:14>
|   | `-VarDecl 0x26e33bb3910 <col:5, col:11> col:11 used ptr 'char *'
|   |-IfStmt 0x26e33bb3a50 <line:244:5, line:247:5>
|   | |-OpaqueValueExpr 0x26e33bb3a38 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33bb3a20 <line:244:40, line:247:5>
|   |   `-ReturnStmt 0x26e33bb3a10 <line:246:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb39e8 <col:16> 'int' 0
|   |-IfStmt 0x26e33bb3d10 <line:248:5, line:265:5>
|   | |-OpaqueValueExpr 0x26e33bb3cf8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33bb3cd8 <line:250:65, line:265:5>
|   |   |-IfStmt 0x26e33bb3c68 <line:259:9, line:262:9>
|   |   | |-ImplicitCastExpr 0x26e33bb3ba0 <line:259:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x26e33bb3b68 <col:13> 'int' lvalue ParmVar 0x26e33bb1528 'cmd_optional' 'int'
|   |   | `-CompoundStmt 0x26e33bb3c48 <col:27, line:262:9>
|   |   |   |-CallExpr 0x26e33bb3bf0 <line:260:13, col:29> 'int'
|   |   |   | `-ImplicitCastExpr 0x26e33bb3bd8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x26e33bb3bb8 <col:13> 'int ()' Function 0x26e33bb0f90 'ERR_clear_error' 'int ()'
|   |   |   `-ReturnStmt 0x26e33bb3c38 <line:261:13, col:20>
|   |   |     `-IntegerLiteral 0x26e33bb3c10 <col:20> 'int' 1
|   |   `-ReturnStmt 0x26e33bb3cc8 <line:264:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb3ca0 <col:16> 'int' 0
|   |-IfStmt 0x26e33bb3dd0 <line:266:5, line:270:5>
|   | |-OpaqueValueExpr 0x26e33bb3db8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33bb3da0 <line:266:44, line:270:5>
|   |   `-ReturnStmt 0x26e33bb3d90 <line:269:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb3d68 <col:16> 'int' 0
|   |-IfStmt 0x26e33bb3f30 <line:273:5, line:281:5>
|   | |-BinaryOperator 0x26e33bb3ea0 <line:273:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x26e33bb3e88 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26e33bb3e40 <col:9> 'int' lvalue Var 0x26e33bb1790 'flags' 'int'
|   | | `-IntegerLiteral 0x26e33bb3e60 <col:17> 'int' 0
|   | `-CompoundStmt 0x26e33bb3f18 <col:20, line:281:5>
|   |   `-ReturnStmt 0x26e33bb3f08 <line:280:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb3ee0 <col:16> 'int' 0
|   |-IfStmt 0x26e33bb4208 <line:285:5, line:300:5>
|   | |-OpaqueValueExpr 0x26e33bb41f0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33bb41c8 <line:285:43, line:300:5>
|   |   |-IfStmt 0x26e33bb4028 <line:286:9, line:290:9>
|   |   | |-OpaqueValueExpr 0x26e33bb4010 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x26e33bb3ff8 <line:286:26, line:290:9>
|   |   |   `-ReturnStmt 0x26e33bb3fe8 <line:289:13, col:20>
|   |   |     `-IntegerLiteral 0x26e33bb3fc0 <col:20> 'int' 0
|   |   |-IfStmt 0x26e33bb4178 <line:297:9, line:298:20>
|   |   | |-OpaqueValueExpr 0x26e33bb4160 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x26e33bb4150 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x26e33bb4128 <col:20> 'int' 1
|   |   `-ReturnStmt 0x26e33bb41b8 <line:299:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb4190 <col:16> 'int' 0
|   |-IfStmt 0x26e33bb42c8 <line:302:5, line:306:5>
|   | |-OpaqueValueExpr 0x26e33bb42b0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33bb4298 <line:302:22, line:306:5>
|   |   `-ReturnStmt 0x26e33bb4288 <line:305:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb4260 <col:16> 'int' 0
|   |-IfStmt 0x26e33bb44c0 <line:308:5, line:313:5>
|   | |-OpaqueValueExpr 0x26e33bb44a8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33bb4488 <line:308:41, line:313:5>
|   |   |-IfStmt 0x26e33bb4438 <line:310:9, line:311:20>
|   |   | |-OpaqueValueExpr 0x26e33bb4420 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x26e33bb4410 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x26e33bb43e8 <col:20> 'int' 1
|   |   `-ReturnStmt 0x26e33bb4478 <line:312:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb4450 <col:16> 'int' 0
|   |-IfStmt 0x26e33bb4580 <line:320:5, line:324:5>
|   | |-OpaqueValueExpr 0x26e33bb4568 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26e33bb4550 <line:320:45, line:324:5>
|   |   `-ReturnStmt 0x26e33bb4540 <line:323:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb4518 <col:16> 'int' 0
|   |-BinaryOperator 0x26e33bb79f0 <line:325:5, col:29> 'long' '='
|   | |-DeclRefExpr 0x26e33bb4598 <col:5> 'long' lvalue Var 0x26e33bb1840 'l' 'long'
|   | `-CallExpr 0x26e33bb79a0 <col:9, col:29> 'long'
|   |   |-ImplicitCastExpr 0x26e33bb7988 <col:9> 'long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x26e33bb4830 <col:9> 'long (const char *, char **, int)' Function 0x26e33bb4640 'strtol' 'long (const char *, char **, int)'
|   |   |-ImplicitCastExpr 0x26e33bb79d8 <col:16> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26e33bb4868 <col:16> 'const char *' lvalue ParmVar 0x26e33bb14a8 'arg' 'const char *'
|   |   |-UnaryOperator 0x26e33bb48c0 <col:21, col:22> 'char **' prefix '&' cannot overflow
|   |   | `-DeclRefExpr 0x26e33bb4888 <col:22> 'char *' lvalue Var 0x26e33bb3910 'ptr' 'char *'
|   |   `-IntegerLiteral 0x26e33bb7920 <col:27> 'int' 10
|   |-IfStmt 0x26e33bb7c70 <line:326:5, line:330:5>
|   | |-BinaryOperator 0x26e33bb7be0 <line:326:9, col:38> 'int' '||'
|   | | |-ParenExpr 0x26e33bb7ab8 <col:9, col:20> 'int'
|   | | | `-BinaryOperator 0x26e33bb7a98 <col:10, col:17> 'int' '=='
|   | | |   |-ImplicitCastExpr 0x26e33bb7a50 <col:10> 'const char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x26e33bb7a10 <col:10> 'const char *' lvalue ParmVar 0x26e33bb14a8 'arg' 'const char *'
|   | | |   `-ImplicitCastExpr 0x26e33bb7a80 <col:17> 'const char *' <BitCast>
|   | | |     `-ImplicitCastExpr 0x26e33bb7a68 <col:17> 'char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x26e33bb7a30 <col:17> 'char *' lvalue Var 0x26e33bb3910 'ptr' 'char *'
|   | | `-ParenExpr 0x26e33bb7bc0 <col:25, col:38> 'int'
|   | |   `-BinaryOperator 0x26e33bb7ba0 <col:26, col:34> 'int' '!='
|   | |     |-ImplicitCastExpr 0x26e33bb7b88 <col:26, col:27> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x26e33bb7b70 <col:26, col:27> 'char' <LValueToRValue>
|   | |     |   `-UnaryOperator 0x26e33bb7b40 <col:26, col:27> 'char' lvalue prefix '*' cannot overflow
|   | |     |     `-ImplicitCastExpr 0x26e33bb7b28 <col:27> 'char *' <LValueToRValue>
|   | |     |       `-DeclRefExpr 0x26e33bb7b08 <col:27> 'char *' lvalue Var 0x26e33bb3910 'ptr' 'char *'
|   | |     `-CharacterLiteral 0x26e33bb7b58 <col:34> 'int' 0
|   | `-CompoundStmt 0x26e33bb7c58 <col:41, line:330:5>
|   |   `-ReturnStmt 0x26e33bb7c48 <line:329:9, col:16>
|   |     `-IntegerLiteral 0x26e33bb7c20 <col:16> 'int' 0
|   |-IfStmt 0x26e33bb7d40 <line:335:5, line:336:16>
|   | |-OpaqueValueExpr 0x26e33bb7d28 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x26e33bb7d18 <col:9, col:16>
|   |   `-IntegerLiteral 0x26e33bb7cf0 <col:16> 'int' 1
|   `-ReturnStmt 0x26e33bb7d80 <line:337:5, col:12>
|     `-IntegerLiteral 0x26e33bb7d58 <col:12> 'int' 0
`-FunctionDecl 0x26e33bb4640 <line:325:9> col:9 implicit used strtol 'long (const char *, char **, int)' extern
  |-ParmVarDecl 0x26e33bb46e0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x26e33bb4748 <<invalid sloc>> <invalid sloc> 'char **'
  `-ParmVarDecl 0x26e33bb47b0 <<invalid sloc>> <invalid sloc> 'int'
