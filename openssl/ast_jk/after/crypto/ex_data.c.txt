TranslationUnitDecl 0x1bc591ce9d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1bc591cf270 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1bc591cef70 '__int128'
|-TypedefDecl 0x1bc591cf2e0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1bc591cef90 'unsigned __int128'
|-TypedefDecl 0x1bc591cf618 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1bc591cf3d0 'struct __NSConstantString_tag'
|   `-Record 0x1bc591cf338 '__NSConstantString_tag'
|-TypedefDecl 0x1bc591cf688 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1bc591cebb0 'unsigned long long'
|-TypedefDecl 0x1bc591cf720 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1bc591cf6e0 'char *'
|   `-BuiltinType 0x1bc591cea70 'char'
|-TypedefDecl 0x1bc591cf790 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1bc591cf6e0 'char *'
|   `-BuiltinType 0x1bc591cea70 'char'
|-RecordDecl 0x1bc591cf7e8 <.//openssl//file_jk/after\crypto\ex_data.c:18:1, line:24:1> line:18:8 invalid struct ex_callback_st definition
| |-FieldDecl 0x1bc591cf8b8 <line:19:5, col:10> col:10 argl 'long'
| |-FieldDecl 0x1bc591cf928 <line:20:5, col:11> col:11 argp 'void *'
| |-FieldDecl 0x1bc5a9dc1a0 <line:21:5, col:20> col:20 invalid new_func 'int *'
| |-FieldDecl 0x1bc5a9dc210 <line:22:5, col:21> col:21 invalid free_func 'int *'
| `-FieldDecl 0x1bc5a9dc280 <line:23:5, col:20> col:20 invalid dup_func 'int *'
|-RecordDecl 0x1bc5a9dc2d8 <line:30:9, line:32:1> line:30:16 invalid struct ex_callbacks_st definition
| `-FieldDecl 0x1bc5a9dc3e0 <line:31:5, <invalid sloc>> col:5 invalid STACK_OF 'int ()'
|-TypedefDecl 0x1bc5a9dc498 <line:30:1, line:32:3> col:3 referenced EX_CALLBACKS 'struct ex_callbacks_st':'struct ex_callbacks_st'
| `-ElaboratedType 0x1bc5a9dc440 'struct ex_callbacks_st' sugar
|   `-RecordType 0x1bc5a9dc370 'struct ex_callbacks_st'
|     `-Record 0x1bc5a9dc2d8 'ex_callbacks_st'
|-VarDecl 0x1bc5a9dc540 <line:34:1, col:21> col:21 invalid ex_data 'EX_CALLBACKS':'struct ex_callbacks_st' static
|-VarDecl 0x1bc5a9dc5c0 <line:36:1, col:23> col:23 invalid ex_data_lock 'int *' static
|-VarDecl 0x1bc5a9dc640 <line:37:1, col:20> col:20 invalid ex_data_init 'int' static
|-FunctionDecl 0x1bc5a9dc7a0 <line:39:1, line:45:1> line:39:1 DEFINE_RUN_ONCE_STATIC 'int (int)'
| |-ParmVarDecl 0x1bc5a9dc6c0 <col:24> col:24 do_ex_data_init 'int'
| `-CompoundStmt 0x1bc5a9dcbc0 <line:40:1, line:45:1>
|   `-IfStmt 0x1bc5a9dca30 <line:41:5, line:42:16>
|     |-OpaqueValueExpr 0x1bc5a9dca18 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x1bc5a9dca08 <col:9, col:16>
|       `-IntegerLiteral 0x1bc5a9dc9e0 <col:16> 'int' 0
|-FunctionDecl 0x1bc5a9dcd58 <line:51:1, line:81:1> line:51:22 used get_and_lock 'EX_CALLBACKS *(int)' static
| |-ParmVarDecl 0x1bc5a9dcbf0 <col:35, col:39> col:39 used class_index 'int'
| `-CompoundStmt 0x1bc5a9d73c0 <line:52:1, line:81:1>
|   |-DeclStmt 0x1bc5a9dce90 <line:53:5, col:21>
|   | `-VarDecl 0x1bc5a9dce28 <col:5, col:19> col:19 used ip 'EX_CALLBACKS *'
|   |-IfStmt 0x1bc5a9dd080 <line:55:5, line:58:5>
|   | |-OpaqueValueExpr 0x1bc5a9dd068 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1bc5a9dd058 <line:55:67, line:58:5>
|   |-IfStmt 0x1bc5a9d71b8 <line:60:5, line:63:5>
|   | |-OpaqueValueExpr 0x1bc5a9d71a0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1bc5a9d7190 <line:60:52, line:63:5>
|   |-IfStmt 0x1bc5a9d71f8 <line:65:5, line:76:5>
|   | |-OpaqueValueExpr 0x1bc5a9d71e0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1bc5a9d71d0 <line:65:31, line:76:5>
|   `-ReturnStmt 0x1bc5a9d73b0 <line:80:5, col:12>
|     `-ImplicitCastExpr 0x1bc5a9d7398 <col:12> 'EX_CALLBACKS *' <LValueToRValue>
|       `-DeclRefExpr 0x1bc5a9d7378 <col:12> 'EX_CALLBACKS *' lvalue Var 0x1bc5a9dce28 'ip' 'EX_CALLBACKS *'
|-FunctionDecl 0x1bc5a9d74d8 <line:83:1, line:86:1> line:83:13 invalid cleanup_cb 'void (int *)' static
| |-ParmVarDecl 0x1bc5a9d7410 <col:24, col:37> col:37 invalid funcs 'int *'
| `-CompoundStmt 0x1bc5a9d76a8 <line:84:1, line:86:1>
|-FunctionDecl 0x1bc5a9d7778 <line:94:1, line:107:1> line:94:6 crypto_cleanup_all_ex_data_int 'void (void)'
| `-CompoundStmt 0x1bc5a9d7d10 <line:95:1, line:107:1>
|   `-DeclStmt 0x1bc5a9d78b0 <line:96:5, col:10>
|     `-VarDecl 0x1bc5a9d7848 <col:5, col:9> col:9 used i 'int'
|-FunctionDecl 0x1bc5a9d8160 <line:114:1, line:117:1> line:114:13 invalid dummy_new 'void (void *, void *, int *, int, long, void *)' static
| |-ParmVarDecl 0x1bc5a9d7d40 <col:23, col:29> col:29 parent 'void *'
| |-ParmVarDecl 0x1bc5a9d7dc0 <col:37, col:43> col:43 ptr 'void *'
| |-ParmVarDecl 0x1bc5a9d7e40 <col:48, col:64> col:64 invalid ad 'int *'
| |-ParmVarDecl 0x1bc5a9d7ec0 <col:68, col:72> col:72 idx 'int'
| |-ParmVarDecl 0x1bc5a9d7f40 <line:115:22, col:27> col:27 argl 'long'
| |-ParmVarDecl 0x1bc5a9d7fc0 <col:33, col:39> col:39 argp 'void *'
| `-CompoundStmt 0x1bc5a9d8248 <line:116:1, line:117:1>
|-FunctionDecl 0x1bc5a9d8620 <line:119:1, line:122:1> line:119:13 invalid dummy_free 'void (void *, void *, int *, int, long, void *)' static
| |-ParmVarDecl 0x1bc5a9d82e8 <col:24, col:30> col:30 parent 'void *'
| |-ParmVarDecl 0x1bc5a9d8368 <col:38, col:44> col:44 ptr 'void *'
| |-ParmVarDecl 0x1bc5a9d83e8 <col:49, col:65> col:65 invalid ad 'int *'
| |-ParmVarDecl 0x1bc5a9d8468 <col:69, col:73> col:73 idx 'int'
| |-ParmVarDecl 0x1bc5a9d84e8 <line:120:24, col:29> col:29 argl 'long'
| |-ParmVarDecl 0x1bc5a9d8568 <col:35, col:41> col:41 argp 'void *'
| `-CompoundStmt 0x1bc5a9d8708 <line:121:1, line:122:1>
|-FunctionDecl 0x1bc5a9d8b40 <line:124:1, line:129:1> line:124:12 invalid dummy_dup 'int (int *, const int *, void *, int, long, void *)' static
| |-ParmVarDecl 0x1bc5a9d87a8 <col:22, col:38> col:38 invalid to 'int *'
| |-ParmVarDecl 0x1bc5a9d8828 <col:42, col:64> col:64 invalid from 'const int *'
| |-ParmVarDecl 0x1bc5a9d88a8 <line:125:22, col:28> col:28 from_d 'void *'
| |-ParmVarDecl 0x1bc5a9d8928 <col:36, col:40> col:40 idx 'int'
| |-ParmVarDecl 0x1bc5a9d89a8 <line:126:22, col:27> col:27 argl 'long'
| |-ParmVarDecl 0x1bc5a9d8a28 <col:33, col:39> col:39 argp 'void *'
| `-CompoundStmt 0x1bc5a9d8c60 <line:127:1, line:129:1>
|   `-ReturnStmt 0x1bc5a9d8c50 <line:128:5, col:12>
|     `-IntegerLiteral 0x1bc5a9d8c28 <col:12> 'int' 1
|-FunctionDecl 0x1bc5a9d8e80 <line:131:1, line:151:1> line:131:5 CRYPTO_free_ex_index 'int (int, int)'
| |-ParmVarDecl 0x1bc5a9d8cf0 <col:26, col:30> col:30 used class_index 'int'
| |-ParmVarDecl 0x1bc5a9d8d70 <col:43, col:47> col:47 used idx 'int'
| `-CompoundStmt 0x1bc5a9d9878 <line:132:1, line:151:1>
|   |-DeclStmt 0x1bc5a9d90b0 <line:133:5, col:49>
|   | `-VarDecl 0x1bc5a9d8f58 <col:5, col:48> col:19 used ip 'EX_CALLBACKS *' cinit
|   |   `-CallExpr 0x1bc5a9d9070 <col:24, col:48> 'EX_CALLBACKS *'
|   |     |-ImplicitCastExpr 0x1bc5a9d9058 <col:24> 'EX_CALLBACKS *(*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1bc5a9d8fc0 <col:24> 'EX_CALLBACKS *(int)' Function 0x1bc5a9dcd58 'get_and_lock' 'EX_CALLBACKS *(int)'
|   |     `-ImplicitCastExpr 0x1bc5a9d9098 <col:37> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1bc5a9d8fe0 <col:37> 'int' lvalue ParmVar 0x1bc5a9d8cf0 'class_index' 'int'
|   |-DeclStmt 0x1bc5a9d9198 <line:135:5, col:18>
|   | `-VarDecl 0x1bc5a9d90e0 <col:5, col:17> col:9 used toret 'int' cinit
|   |   `-IntegerLiteral 0x1bc5a9d9170 <col:17> 'int' 0
|   |-IfStmt 0x1bc5a9d9238 <line:137:5, line:138:16>
|   | |-OpaqueValueExpr 0x1bc5a9d9220 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1bc5a9d9210 <col:9, col:16>
|   |   `-IntegerLiteral 0x1bc5a9d91e8 <col:16> 'int' 0
|   |-IfStmt 0x1bc5a9d94b8 <line:139:5, line:140:14>
|   | |-OpaqueValueExpr 0x1bc5a9d94a0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1bc5a9d9488 <col:9, col:14> 'err' 0x1bc5a9d9438
|   |-IfStmt 0x1bc5a9d9668 <line:142:5, line:143:14>
|   | |-OpaqueValueExpr 0x1bc5a9d9650 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1bc5a9d9638 <col:9, col:14> 'err' 0x1bc5a9d9438
|   |-BinaryOperator 0x1bc5a9d96e0 <line:147:5, col:13> 'int' '='
|   | |-DeclRefExpr 0x1bc5a9d9680 <col:5> 'int' lvalue Var 0x1bc5a9d90e0 'toret' 'int'
|   | `-IntegerLiteral 0x1bc5a9d96b8 <col:13> 'int' 1
|   |-LabelStmt 0x1bc5a9d9818 <line:148:1, col:4> 'err'
|   | `-NullStmt 0x1bc5a9d9810 <col:4>
|   `-ReturnStmt 0x1bc5a9d9868 <line:150:5, col:12>
|     `-ImplicitCastExpr 0x1bc5a9d9850 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1bc5a9d9830 <col:12> 'int' lvalue Var 0x1bc5a9d90e0 'toret' 'int'
|-FunctionDecl 0x1bc5a9d9c80 <line:156:1, line:200:1> line:156:5 invalid CRYPTO_get_ex_new_index 'int (int, long, void *, int *, int *, int *)'
| |-ParmVarDecl 0x1bc5a9d98e0 <col:29, col:33> col:33 used class_index 'int'
| |-ParmVarDecl 0x1bc5a9d9960 <col:46, col:51> col:51 used argl 'long'
| |-ParmVarDecl 0x1bc5a9d99e0 <col:57, col:63> col:63 used argp 'void *'
| |-ParmVarDecl 0x1bc5a9d9a60 <line:157:29, col:44> col:44 invalid new_func 'int *'
| |-ParmVarDecl 0x1bc5a9d9ae0 <col:54, col:69> col:69 invalid dup_func 'int *'
| |-ParmVarDecl 0x1bc5a9d9b60 <line:158:29, col:45> col:45 invalid free_func 'int *'
| `-CompoundStmt 0x1bc5a9db938 <line:159:1, line:200:1>
|   |-DeclStmt 0x1bc5a9d9e28 <line:160:5, col:19>
|   | `-VarDecl 0x1bc5a9d9d80 <col:5, col:18> col:9 used toret 'int' cinit
|   |   `-UnaryOperator 0x1bc5a9d9e10 <col:17, col:18> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1bc5a9d9de8 <col:18> 'int' 1
|   |-DeclStmt 0x1bc5a9d9f68 <line:162:5, col:49>
|   | `-VarDecl 0x1bc5a9d9e50 <col:5, col:48> col:19 used ip 'EX_CALLBACKS *' cinit
|   |   `-CallExpr 0x1bc5a9d9f28 <col:24, col:48> 'EX_CALLBACKS *'
|   |     |-ImplicitCastExpr 0x1bc5a9d9f10 <col:24> 'EX_CALLBACKS *(*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1bc5a9d9eb8 <col:24> 'EX_CALLBACKS *(int)' Function 0x1bc5a9dcd58 'get_and_lock' 'EX_CALLBACKS *(int)'
|   |     `-ImplicitCastExpr 0x1bc5a9d9f50 <col:37> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1bc5a9d9ed8 <col:37> 'int' lvalue ParmVar 0x1bc5a9d98e0 'class_index' 'int'
|   |-IfStmt 0x1bc5a9da020 <line:164:5, line:165:17>
|   | |-OpaqueValueExpr 0x1bc5a9da008 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1bc5a9d9ff8 <col:9, col:17>
|   |   `-UnaryOperator 0x1bc5a9d9fe0 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1bc5a9d9fb8 <col:17> 'int' 1
|   |-IfStmt 0x1bc5a9db490 <line:167:5, line:176:5>
|   | |-OpaqueValueExpr 0x1bc5a9db478 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1bc5a9db460 <line:167:27, line:176:5>
|   |   `-IfStmt 0x1bc5a9db448 <line:171:9, line:175:9>
|   |     |-OpaqueValueExpr 0x1bc5a9db430 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1bc5a9db418 <line:172:54, line:175:9>
|   |       `-GotoStmt 0x1bc5a9db400 <line:174:13, col:18> 'err' 0x1bc5a9db3b0
|   |-IfStmt 0x1bc5a9db510 <line:179:5, line:182:5>
|   | |-OpaqueValueExpr 0x1bc5a9db4f8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1bc5a9db4e0 <line:179:20, line:182:5>
|   |   `-GotoStmt 0x1bc5a9db4c8 <line:181:9, col:14> 'err' 0x1bc5a9db3b0
|   |-IfStmt 0x1bc5a9db678 <line:189:5, line:193:5>
|   | |-OpaqueValueExpr 0x1bc5a9db660 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1bc5a9db648 <line:189:47, line:193:5>
|   |   `-GotoStmt 0x1bc5a9db630 <line:192:9, col:14> 'err' 0x1bc5a9db3b0
|   |-LabelStmt 0x1bc5a9db8d8 <line:197:2, col:5> 'err'
|   | `-NullStmt 0x1bc5a9db8d0 <col:5>
|   `-ReturnStmt 0x1bc5a9db928 <line:199:5, col:12>
|     `-ImplicitCastExpr 0x1bc5a9db910 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1bc5a9db8f0 <col:12> 'int' lvalue Var 0x1bc5a9d9d80 'toret' 'int'
|-FunctionDecl 0x1bc5a9dbb90 <line:209:1, line:248:1> line:209:5 invalid CRYPTO_new_ex_data 'int (int, void *, int *)'
| |-ParmVarDecl 0x1bc5a9db9a0 <col:24, col:28> col:28 used class_index 'int'
| |-ParmVarDecl 0x1bc5a9dba20 <col:41, col:47> col:47 used obj 'void *'
| |-ParmVarDecl 0x1bc5a9dbaa0 <col:52, col:68> col:68 invalid ad 'int *'
| `-CompoundStmt 0x1bc5a9ddba8 <line:210:1, line:248:1>
|   |-DeclStmt 0x1bc5a9dbd78 <line:211:5, col:14>
|   | |-VarDecl 0x1bc5a9dbc78 <col:5, col:9> col:9 used mx 'int'
|   | `-VarDecl 0x1bc5a9dbcf8 <col:5, col:13> col:13 used i 'int'
|   |-DeclStmt 0x1bc5a9dbe10 <line:212:5, col:14>
|   | `-VarDecl 0x1bc5a9dbda8 <col:5, col:11> col:11 used ptr 'void *'
|   |-DeclStmt 0x1bc5a9dbf78 <line:215:5, col:49>
|   | `-VarDecl 0x1bc5a9dbe60 <col:5, col:48> col:19 used ip 'EX_CALLBACKS *' cinit
|   |   `-CallExpr 0x1bc5a9dbf38 <col:24, col:48> 'EX_CALLBACKS *'
|   |     |-ImplicitCastExpr 0x1bc5a9dbf20 <col:24> 'EX_CALLBACKS *(*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1bc5a9dbec8 <col:24> 'EX_CALLBACKS *(int)' Function 0x1bc5a9dcd58 'get_and_lock' 'EX_CALLBACKS *(int)'
|   |     `-ImplicitCastExpr 0x1bc5a9dbf60 <col:37> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1bc5a9dbee8 <col:37> 'int' lvalue ParmVar 0x1bc5a9db9a0 'class_index' 'int'
|   |-IfStmt 0x1bc5a9dc018 <line:217:5, line:218:16>
|   | |-OpaqueValueExpr 0x1bc5a9dc000 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1bc5a9dbff0 <col:9, col:16>
|   |   `-IntegerLiteral 0x1bc5a9dbfc8 <col:16> 'int' 0
|   |-IfStmt 0x1bc5a9dd5b8 <line:223:5, line:231:5>
|   | |-BinaryOperator 0x1bc5a9dc120 <line:223:9, col:14> 'int' '>'
|   | | |-ImplicitCastExpr 0x1bc5a9dc108 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bc5a9dc0c0 <col:9> 'int' lvalue Var 0x1bc5a9dbc78 'mx' 'int'
|   | | `-IntegerLiteral 0x1bc5a9dc0e0 <col:14> 'int' 0
|   | `-CompoundStmt 0x1bc5a9dd5a8 <col:17, line:231:5>
|   |-IfStmt 0x1bc5a9dd6f8 <line:234:5, line:237:5>
|   | |-OpaqueValueExpr 0x1bc5a9dd6e0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1bc5a9dd6c8 <line:234:36, line:237:5>
|   |   `-ReturnStmt 0x1bc5a9dd6b8 <line:236:9, col:16>
|   |     `-IntegerLiteral 0x1bc5a9dd690 <col:16> 'int' 0
|   |-ForStmt 0x1bc5a9ddb18 <line:238:5, line:244:5>
|   | |-BinaryOperator 0x1bc5a9dd758 <line:238:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1bc5a9dd710 <col:10> 'int' lvalue Var 0x1bc5a9dbcf8 'i' 'int'
|   | | `-IntegerLiteral 0x1bc5a9dd730 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1bc5a9dd7e8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1bc5a9dd7b8 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bc5a9dd778 <col:17> 'int' lvalue Var 0x1bc5a9dbcf8 'i' 'int'
|   | | `-ImplicitCastExpr 0x1bc5a9dd7d0 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1bc5a9dd798 <col:21> 'int' lvalue Var 0x1bc5a9dbc78 'mx' 'int'
|   | |-UnaryOperator 0x1bc5a9dd828 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x1bc5a9dd808 <col:25> 'int' lvalue Var 0x1bc5a9dbcf8 'i' 'int'
|   | `-CompoundStmt 0x1bc5a9ddb00 <col:30, line:244:5>
|   |   `-IfStmt 0x1bc5a9ddae8 <line:239:9, line:243:9>
|   |     |-OpaqueValueExpr 0x1bc5a9ddad0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1bc5a9ddac0 <line:239:49, line:243:9>
|   `-ReturnStmt 0x1bc5a9ddb98 <line:247:5, col:12>
|     `-IntegerLiteral 0x1bc5a9ddb70 <col:12> 'int' 1
|-FunctionDecl 0x1bc5a9dde00 <line:254:1, line:314:1> line:254:5 invalid CRYPTO_dup_ex_data 'int (int, int *, const int *)'
| |-ParmVarDecl 0x1bc5a9ddc10 <col:24, col:28> col:28 used class_index 'int'
| |-ParmVarDecl 0x1bc5a9ddc90 <col:41, col:57> col:57 invalid to 'int *'
| |-ParmVarDecl 0x1bc5a9ddd10 <line:255:24, col:46> col:46 invalid from 'const int *'
| `-CompoundStmt 0x1bc5a9e3080 <line:256:1, line:314:1>
|   |-DeclStmt 0x1bc5a9de070 <line:257:5, col:17>
|   | |-VarDecl 0x1bc5a9ddee8 <col:5, col:9> col:9 used mx 'int'
|   | |-VarDecl 0x1bc5a9ddf68 <col:5, col:13> col:13 used j 'int'
|   | `-VarDecl 0x1bc5a9ddfe8 <col:5, col:16> col:16 used i 'int'
|   |-DeclStmt 0x1bc5a9de108 <line:258:5, col:14>
|   | `-VarDecl 0x1bc5a9de0a0 <col:5, col:11> col:11 used ptr 'void *'
|   |-DeclStmt 0x1bc5a9e9ec8 <line:261:5, col:21>
|   | `-VarDecl 0x1bc5a9e9e60 <col:5, col:19> col:19 used ip 'EX_CALLBACKS *'
|   |-DeclStmt 0x1bc5a9e9f88 <line:262:5, col:18>
|   | `-VarDecl 0x1bc5a9e9ef8 <col:5, col:17> col:9 used toret 'int' cinit
|   |   `-IntegerLiteral 0x1bc5a9e9f60 <col:17> 'int' 0
|   |-IfStmt 0x1bc5a9e9ff0 <line:264:5, line:266:16>
|   | |-OpaqueValueExpr 0x1bc5a9e9fd8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1bc5a9e9fc8 <col:9, col:16>
|   |   `-IntegerLiteral 0x1bc5a9e9fa0 <col:16> 'int' 1
|   |-IfStmt 0x1bc5a9ea180 <line:267:5, line:268:16>
|   | |-OpaqueValueExpr 0x1bc5a9ea168 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1bc5a9ea158 <col:9, col:16>
|   |   `-IntegerLiteral 0x1bc5a9ea130 <col:16> 'int' 0
|   |-IfStmt 0x1bc5a9ea478 <line:272:5, line:273:14>
|   | |-BinaryOperator 0x1bc5a9ea3e0 <line:272:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x1bc5a9ea3b0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bc5a9ea370 <col:9> 'int' lvalue Var 0x1bc5a9ddf68 'j' 'int'
|   | | `-ImplicitCastExpr 0x1bc5a9ea3c8 <col:13> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1bc5a9ea390 <col:13> 'int' lvalue Var 0x1bc5a9ddee8 'mx' 'int'
|   | `-BinaryOperator 0x1bc5a9ea458 <line:273:9, col:14> 'int' '='
|   |   |-DeclRefExpr 0x1bc5a9ea400 <col:9> 'int' lvalue Var 0x1bc5a9ddee8 'mx' 'int'
|   |   `-ImplicitCastExpr 0x1bc5a9ea440 <col:14> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1bc5a9ea420 <col:14> 'int' lvalue Var 0x1bc5a9ddf68 'j' 'int'
|   |-IfStmt 0x1bc5a9ea780 <line:274:5, line:282:5>
|   | |-BinaryOperator 0x1bc5a9ea4f0 <line:274:9, col:14> 'int' '>'
|   | | |-ImplicitCastExpr 0x1bc5a9ea4d8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bc5a9ea490 <col:9> 'int' lvalue Var 0x1bc5a9ddee8 'mx' 'int'
|   | | `-IntegerLiteral 0x1bc5a9ea4b0 <col:14> 'int' 0
|   | `-CompoundStmt 0x1bc5a9ea770 <col:17, line:282:5>
|   |-IfStmt 0x1bc5a9ea870 <line:285:5, line:286:16>
|   | |-BinaryOperator 0x1bc5a9ea818 <line:285:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x1bc5a9ea800 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bc5a9ea7b8 <col:9> 'int' lvalue Var 0x1bc5a9ddee8 'mx' 'int'
|   | | `-IntegerLiteral 0x1bc5a9ea7d8 <col:15> 'int' 0
|   | `-ReturnStmt 0x1bc5a9ea860 <line:286:9, col:16>
|   |   `-IntegerLiteral 0x1bc5a9ea838 <col:16> 'int' 1
|   |-IfStmt 0x1bc5a9ea910 <line:287:5, line:290:5>
|   | |-OpaqueValueExpr 0x1bc5a9ea8f8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1bc5a9ea8e0 <line:287:26, line:290:5>
|   |   `-ReturnStmt 0x1bc5a9ea8d0 <line:289:9, col:16>
|   |     `-IntegerLiteral 0x1bc5a9ea8a8 <col:16> 'int' 0
|   |-IfStmt 0x1bc5a9eabd8 <line:298:5, line:299:14>
|   | |-OpaqueValueExpr 0x1bc5a9eabc0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1bc5a9eaba8 <col:9, col:14> 'err' 0x1bc5a9eab58
|   |-ForStmt 0x1bc5a9e2f40 <line:301:5, line:308:5>
|   | |-BinaryOperator 0x1bc5a9eac38 <line:301:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1bc5a9eabf0 <col:10> 'int' lvalue Var 0x1bc5a9ddfe8 'i' 'int'
|   | | `-IntegerLiteral 0x1bc5a9eac10 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1bc5a9eacc8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1bc5a9eac98 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bc5a9eac58 <col:17> 'int' lvalue Var 0x1bc5a9ddfe8 'i' 'int'
|   | | `-ImplicitCastExpr 0x1bc5a9eacb0 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1bc5a9eac78 <col:21> 'int' lvalue Var 0x1bc5a9ddee8 'mx' 'int'
|   | |-UnaryOperator 0x1bc5a9ead08 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x1bc5a9eace8 <col:25> 'int' lvalue Var 0x1bc5a9ddfe8 'i' 'int'
|   | `-CompoundStmt 0x1bc5a9e2f28 <col:30, line:308:5>
|   |   `-IfStmt 0x1bc5a9e2eb0 <line:303:9, line:306:22>
|   |     |-OpaqueValueExpr 0x1bc5a9e2e98 <<invalid sloc>> '_Bool'
|   |     `-IfStmt 0x1bc5a9e2e80 <line:304:13, line:306:22>
|   |       |-OpaqueValueExpr 0x1bc5a9e2e68 <<invalid sloc>> '_Bool'
|   |       `-GotoStmt 0x1bc5a9e2e50 <col:17, col:22> 'err' 0x1bc5a9eab58
|   |-BinaryOperator 0x1bc5a9e2fd8 <line:309:5, col:13> 'int' '='
|   | |-DeclRefExpr 0x1bc5a9e2f78 <col:5> 'int' lvalue Var 0x1bc5a9e9ef8 'toret' 'int'
|   | `-IntegerLiteral 0x1bc5a9e2fb0 <col:13> 'int' 1
|   |-LabelStmt 0x1bc5a9e3020 <line:310:2, col:5> 'err'
|   | `-NullStmt 0x1bc5a9e3018 <col:5>
|   `-ReturnStmt 0x1bc5a9e3070 <line:313:5, col:12>
|     `-ImplicitCastExpr 0x1bc5a9e3058 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1bc5a9e3038 <col:12> 'int' lvalue Var 0x1bc5a9e9ef8 'toret' 'int'
|-FunctionDecl 0x1bc5a9e3308 <line:321:1, line:364:1> line:321:6 invalid CRYPTO_free_ex_data 'void (int, void *, int *)'
| |-ParmVarDecl 0x1bc5a9e3120 <col:26, col:30> col:30 used class_index 'int'
| |-ParmVarDecl 0x1bc5a9e31a0 <col:43, col:49> col:49 used obj 'void *'
| |-ParmVarDecl 0x1bc5a9e3220 <col:54, col:70> col:70 invalid ad 'int *'
| `-CompoundStmt 0x1bc5a9e5128 <line:322:1, line:364:1>
|   |-DeclStmt 0x1bc5a9e34f0 <line:323:5, col:14>
|   | |-VarDecl 0x1bc5a9e33f0 <col:5, col:9> col:9 used mx 'int'
|   | `-VarDecl 0x1bc5a9e3470 <col:5, col:13> col:13 used i 'int'
|   |-DeclStmt 0x1bc5a9e3580 <line:324:5, col:21>
|   | `-VarDecl 0x1bc5a9e3518 <col:5, col:19> col:19 used ip 'EX_CALLBACKS *'
|   |-DeclStmt 0x1bc5a9e3618 <line:325:5, col:14>
|   | `-VarDecl 0x1bc5a9e35b0 <col:5, col:11> col:11 used ptr 'void *'
|   |-IfStmt 0x1bc5a9e3800 <line:330:5, line:331:14>
|   | |-OpaqueValueExpr 0x1bc5a9e37e8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1bc5a9e37d0 <col:9, col:14> 'err' 0x1bc5a9e3780
|   |-IfStmt 0x1bc5a9e3b98 <line:334:5, line:342:5>
|   | |-BinaryOperator 0x1bc5a9e3908 <line:334:9, col:14> 'int' '>'
|   | | |-ImplicitCastExpr 0x1bc5a9e38f0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bc5a9e38a8 <col:9> 'int' lvalue Var 0x1bc5a9e33f0 'mx' 'int'
|   | | `-IntegerLiteral 0x1bc5a9e38c8 <col:14> 'int' 0
|   | `-CompoundStmt 0x1bc5a9e3b88 <col:17, line:342:5>
|   |-ForStmt 0x1bc5a9e4fa0 <line:345:5, line:357:5>
|   | |-BinaryOperator 0x1bc5a9e3c18 <line:345:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1bc5a9e3bd0 <col:10> 'int' lvalue Var 0x1bc5a9e3470 'i' 'int'
|   | | `-IntegerLiteral 0x1bc5a9e3bf0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1bc5a9e3ca8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1bc5a9e3c78 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bc5a9e3c38 <col:17> 'int' lvalue Var 0x1bc5a9e3470 'i' 'int'
|   | | `-ImplicitCastExpr 0x1bc5a9e3c90 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1bc5a9e3c58 <col:21> 'int' lvalue Var 0x1bc5a9e33f0 'mx' 'int'
|   | |-UnaryOperator 0x1bc5a9e3ce8 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x1bc5a9e3cc8 <col:25> 'int' lvalue Var 0x1bc5a9e3470 'i' 'int'
|   | `-CompoundStmt 0x1bc5a9e4f80 <col:30, line:357:5>
|   |   |-IfStmt 0x1bc5a9e4e28 <line:346:9, line:352:9> has_else
|   |   | |-OpaqueValueExpr 0x1bc5a9e4e10 <<invalid sloc>> '_Bool'
|   |   | |-NullStmt 0x1bc5a9e3de8 <line:347:13>
|   |   | `-CompoundStmt 0x1bc5a9e3dd8 <line:348:14, line:352:9>
|   |   `-IfStmt 0x1bc5a9e4f68 <line:353:9, line:356:9>
|   |     |-OpaqueValueExpr 0x1bc5a9e4f50 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1bc5a9e4f40 <line:353:48, line:356:9>
|   `-LabelStmt 0x1bc5a9e5110 <line:361:2, col:5> 'err'
|     `-NullStmt 0x1bc5a9e5108 <col:5>
|-FunctionDecl 0x1bc5a9e5370 <line:370:1, line:389:1> line:370:5 invalid CRYPTO_set_ex_data 'int (int *, int, void *)'
| |-ParmVarDecl 0x1bc5a9e5188 <col:24, col:40> col:40 invalid ad 'int *'
| |-ParmVarDecl 0x1bc5a9e5208 <col:44, col:48> col:48 used idx 'int'
| |-ParmVarDecl 0x1bc5a9e5288 <col:53, col:59> col:59 used val 'void *'
| `-CompoundStmt 0x1bc5a9e5be0 <line:371:1, line:389:1>
|   |-DeclStmt 0x1bc5a9e54c0 <line:372:5, col:10>
|   | `-VarDecl 0x1bc5a9e5458 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x1bc5a9e56f0 <line:374:5, line:379:5>
|   | |-OpaqueValueExpr 0x1bc5a9e56d8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1bc5a9e56c0 <line:374:25, line:379:5>
|   |   `-IfStmt 0x1bc5a9e56a8 <line:375:9, line:378:9>
|   |     |-OpaqueValueExpr 0x1bc5a9e5690 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1bc5a9e5678 <line:375:52, line:378:9>
|   |       `-ReturnStmt 0x1bc5a9e5668 <line:377:13, col:20>
|   |         `-IntegerLiteral 0x1bc5a9e5640 <col:20> 'int' 0
|   |-ForStmt 0x1bc5a9e5a08 <line:381:5, line:386:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1bc5a9e57e8 <line:381:35, col:40> 'int' '<='
|   | | |-ImplicitCastExpr 0x1bc5a9e57b8 <col:35> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1bc5a9e5760 <col:35> 'int' lvalue Var 0x1bc5a9e5458 'i' 'int'
|   | | `-ImplicitCastExpr 0x1bc5a9e57d0 <col:40> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1bc5a9e5780 <col:40> 'int' lvalue ParmVar 0x1bc5a9e5208 'idx' 'int'
|   | |-UnaryOperator 0x1bc5a9e5828 <col:45, col:47> 'int' prefix '++'
|   | | `-DeclRefExpr 0x1bc5a9e5808 <col:47> 'int' lvalue Var 0x1bc5a9e5458 'i' 'int'
|   | `-CompoundStmt 0x1bc5a9e59f0 <col:50, line:386:5>
|   |   `-IfStmt 0x1bc5a9e59d8 <line:382:9, line:385:9>
|   |     |-OpaqueValueExpr 0x1bc5a9e59c0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1bc5a9e59a8 <line:382:42, line:385:9>
|   |       `-ReturnStmt 0x1bc5a9e5998 <line:384:13, col:20>
|   |         `-IntegerLiteral 0x1bc5a9e5970 <col:20> 'int' 0
|   `-ReturnStmt 0x1bc5a9e5bd0 <line:388:5, col:12>
|     `-IntegerLiteral 0x1bc5a9e5ba8 <col:12> 'int' 1
`-FunctionDecl 0x1bc5a9e8e50 <line:395:1, line:400:1> line:395:7 invalid CRYPTO_get_ex_data 'void *(const int *, int)'
  |-ParmVarDecl 0x1bc5a9e5c28 <col:26, col:48> col:48 invalid ad 'const int *'
  |-ParmVarDecl 0x1bc5a9e5ca8 <col:52, col:56> col:56 used idx 'int'
  `-CompoundStmt 0x1bc5a9e90a0 <line:396:1, line:400:1>
