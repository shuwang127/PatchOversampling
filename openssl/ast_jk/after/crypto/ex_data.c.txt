TranslationUnitDecl 0x210adc43ad8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x210adc44370 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x210adc44070 '__int128'
|-TypedefDecl 0x210adc443e0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x210adc44090 'unsigned __int128'
|-TypedefDecl 0x210adc44718 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x210adc444d0 'struct __NSConstantString_tag'
|   `-Record 0x210adc44438 '__NSConstantString_tag'
|-TypedefDecl 0x210adc44788 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x210adc43cb0 'unsigned long long'
|-TypedefDecl 0x210adc44820 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x210adc447e0 'char *'
|   `-BuiltinType 0x210adc43b70 'char'
|-TypedefDecl 0x210adc44890 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x210adc447e0 'char *'
|   `-BuiltinType 0x210adc43b70 'char'
|-RecordDecl 0x210adc448e8 <.//openssl//file_jk/after\crypto\ex_data.c:18:1, line:24:1> line:18:8 invalid struct ex_callback_st definition
| |-FieldDecl 0x210adc449b8 <line:19:5, col:10> col:10 argl 'long'
| |-FieldDecl 0x210adc44a28 <line:20:5, col:11> col:11 argp 'void *'
| |-FieldDecl 0x210af679d70 <line:21:5, col:20> col:20 invalid new_func 'int *'
| |-FieldDecl 0x210af679de0 <line:22:5, col:21> col:21 invalid free_func 'int *'
| `-FieldDecl 0x210af679e50 <line:23:5, col:20> col:20 invalid dup_func 'int *'
|-RecordDecl 0x210af679ea8 <line:30:9, line:32:1> line:30:16 invalid struct ex_callbacks_st definition
| `-FieldDecl 0x210af679fb0 <line:31:5, <invalid sloc>> col:5 invalid STACK_OF 'int ()'
|-TypedefDecl 0x210af67a068 <line:30:1, line:32:3> col:3 referenced EX_CALLBACKS 'struct ex_callbacks_st':'struct ex_callbacks_st'
| `-ElaboratedType 0x210af67a010 'struct ex_callbacks_st' sugar
|   `-RecordType 0x210af679f40 'struct ex_callbacks_st'
|     `-Record 0x210af679ea8 'ex_callbacks_st'
|-VarDecl 0x210af67a110 <line:34:1, col:21> col:21 invalid ex_data 'EX_CALLBACKS':'struct ex_callbacks_st' static
|-VarDecl 0x210af67a190 <line:36:1, col:23> col:23 invalid ex_data_lock 'int *' static
|-VarDecl 0x210af67a210 <line:37:1, col:20> col:20 invalid ex_data_init 'int' static
|-FunctionDecl 0x210af67a370 <line:39:1, line:45:1> line:39:1 DEFINE_RUN_ONCE_STATIC 'int (int)'
| |-ParmVarDecl 0x210af67a290 <col:24> col:24 do_ex_data_init 'int'
| `-CompoundStmt 0x210af67a790 <line:40:1, line:45:1>
|   `-IfStmt 0x210af67a600 <line:41:5, line:42:16>
|     |-OpaqueValueExpr 0x210af67a5e8 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x210af67a5d8 <col:9, col:16>
|       `-IntegerLiteral 0x210af67a5b0 <col:16> 'int' 0
|-FunctionDecl 0x210af67a928 <line:51:1, line:81:1> line:51:22 used get_and_lock 'EX_CALLBACKS *(int)' static
| |-ParmVarDecl 0x210af67a7c0 <col:35, col:39> col:39 used class_index 'int'
| `-CompoundStmt 0x210af67aff0 <line:52:1, line:81:1>
|   |-DeclStmt 0x210af67aa60 <line:53:5, col:21>
|   | `-VarDecl 0x210af67a9f8 <col:5, col:19> col:19 used ip 'EX_CALLBACKS *'
|   |-IfStmt 0x210af67ac50 <line:55:5, line:58:5>
|   | |-OpaqueValueExpr 0x210af67ac38 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x210af67ac28 <line:55:67, line:58:5>
|   |-IfStmt 0x210af67ade8 <line:60:5, line:63:5>
|   | |-OpaqueValueExpr 0x210af67add0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x210af67adc0 <line:60:52, line:63:5>
|   |-IfStmt 0x210af67ae28 <line:65:5, line:76:5>
|   | |-OpaqueValueExpr 0x210af67ae10 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x210af67ae00 <line:65:31, line:76:5>
|   `-ReturnStmt 0x210af67afe0 <line:80:5, col:12>
|     `-ImplicitCastExpr 0x210af67afc8 <col:12> 'EX_CALLBACKS *' <LValueToRValue>
|       `-DeclRefExpr 0x210af67afa8 <col:12> 'EX_CALLBACKS *' lvalue Var 0x210af67a9f8 'ip' 'EX_CALLBACKS *'
|-FunctionDecl 0x210af67b108 <line:83:1, line:86:1> line:83:13 invalid cleanup_cb 'void (int *)' static
| |-ParmVarDecl 0x210af67b040 <col:24, col:37> col:37 invalid funcs 'int *'
| `-CompoundStmt 0x210af67b2d8 <line:84:1, line:86:1>
|-FunctionDecl 0x210af67b3a8 <line:94:1, line:107:1> line:94:6 crypto_cleanup_all_ex_data_int 'void (void)'
| `-CompoundStmt 0x210af67b940 <line:95:1, line:107:1>
|   `-DeclStmt 0x210af67b4e0 <line:96:5, col:10>
|     `-VarDecl 0x210af67b478 <col:5, col:9> col:9 used i 'int'
|-FunctionDecl 0x210af682e00 <line:114:1, line:117:1> line:114:13 invalid dummy_new 'void (void *, void *, int *, int, long, void *)' static
| |-ParmVarDecl 0x210af67b970 <col:23, col:29> col:29 parent 'void *'
| |-ParmVarDecl 0x210af67b9f0 <col:37, col:43> col:43 ptr 'void *'
| |-ParmVarDecl 0x210af67ba70 <col:48, col:64> col:64 invalid ad 'int *'
| |-ParmVarDecl 0x210af67baf0 <col:68, col:72> col:72 idx 'int'
| |-ParmVarDecl 0x210af67bb70 <line:115:22, col:27> col:27 argl 'long'
| |-ParmVarDecl 0x210af67bbf0 <col:33, col:39> col:39 argp 'void *'
| `-CompoundStmt 0x210af682ee8 <line:116:1, line:117:1>
|-FunctionDecl 0x210af6832c0 <line:119:1, line:122:1> line:119:13 invalid dummy_free 'void (void *, void *, int *, int, long, void *)' static
| |-ParmVarDecl 0x210af682f88 <col:24, col:30> col:30 parent 'void *'
| |-ParmVarDecl 0x210af683008 <col:38, col:44> col:44 ptr 'void *'
| |-ParmVarDecl 0x210af683088 <col:49, col:65> col:65 invalid ad 'int *'
| |-ParmVarDecl 0x210af683108 <col:69, col:73> col:73 idx 'int'
| |-ParmVarDecl 0x210af683188 <line:120:24, col:29> col:29 argl 'long'
| |-ParmVarDecl 0x210af683208 <col:35, col:41> col:41 argp 'void *'
| `-CompoundStmt 0x210af6833a8 <line:121:1, line:122:1>
|-FunctionDecl 0x210af6837e0 <line:124:1, line:129:1> line:124:12 invalid dummy_dup 'int (int *, const int *, void *, int, long, void *)' static
| |-ParmVarDecl 0x210af683448 <col:22, col:38> col:38 invalid to 'int *'
| |-ParmVarDecl 0x210af6834c8 <col:42, col:64> col:64 invalid from 'const int *'
| |-ParmVarDecl 0x210af683548 <line:125:22, col:28> col:28 from_d 'void *'
| |-ParmVarDecl 0x210af6835c8 <col:36, col:40> col:40 idx 'int'
| |-ParmVarDecl 0x210af683648 <line:126:22, col:27> col:27 argl 'long'
| |-ParmVarDecl 0x210af6836c8 <col:33, col:39> col:39 argp 'void *'
| `-CompoundStmt 0x210af683900 <line:127:1, line:129:1>
|   `-ReturnStmt 0x210af6838f0 <line:128:5, col:12>
|     `-IntegerLiteral 0x210af6838c8 <col:12> 'int' 1
|-FunctionDecl 0x210af683b20 <line:131:1, line:151:1> line:131:5 CRYPTO_free_ex_index 'int (int, int)'
| |-ParmVarDecl 0x210af683990 <col:26, col:30> col:30 used class_index 'int'
| |-ParmVarDecl 0x210af683a10 <col:43, col:47> col:47 used idx 'int'
| `-CompoundStmt 0x210af6804d8 <line:132:1, line:151:1>
|   |-DeclStmt 0x210af683d50 <line:133:5, col:49>
|   | `-VarDecl 0x210af683bf8 <col:5, col:48> col:19 used ip 'EX_CALLBACKS *' cinit
|   |   `-CallExpr 0x210af683d10 <col:24, col:48> 'EX_CALLBACKS *'
|   |     |-ImplicitCastExpr 0x210af683cf8 <col:24> 'EX_CALLBACKS *(*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x210af683c60 <col:24> 'EX_CALLBACKS *(int)' Function 0x210af67a928 'get_and_lock' 'EX_CALLBACKS *(int)'
|   |     `-ImplicitCastExpr 0x210af683d38 <col:37> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x210af683c80 <col:37> 'int' lvalue ParmVar 0x210af683990 'class_index' 'int'
|   |-DeclStmt 0x210af67fdf8 <line:135:5, col:18>
|   | `-VarDecl 0x210af683d80 <col:5, col:17> col:9 used toret 'int' cinit
|   |   `-IntegerLiteral 0x210af67fdd0 <col:17> 'int' 0
|   |-IfStmt 0x210af67fe98 <line:137:5, line:138:16>
|   | |-OpaqueValueExpr 0x210af67fe80 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x210af67fe70 <col:9, col:16>
|   |   `-IntegerLiteral 0x210af67fe48 <col:16> 'int' 0
|   |-IfStmt 0x210af680118 <line:139:5, line:140:14>
|   | |-OpaqueValueExpr 0x210af680100 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x210af6800e8 <col:9, col:14> 'err' 0x210af680098
|   |-IfStmt 0x210af6802c8 <line:142:5, line:143:14>
|   | |-OpaqueValueExpr 0x210af6802b0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x210af680298 <col:9, col:14> 'err' 0x210af680098
|   |-BinaryOperator 0x210af680340 <line:147:5, col:13> 'int' '='
|   | |-DeclRefExpr 0x210af6802e0 <col:5> 'int' lvalue Var 0x210af683d80 'toret' 'int'
|   | `-IntegerLiteral 0x210af680318 <col:13> 'int' 1
|   |-LabelStmt 0x210af680478 <line:148:1, col:4> 'err'
|   | `-NullStmt 0x210af680470 <col:4>
|   `-ReturnStmt 0x210af6804c8 <line:150:5, col:12>
|     `-ImplicitCastExpr 0x210af6804b0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x210af680490 <col:12> 'int' lvalue Var 0x210af683d80 'toret' 'int'
|-FunctionDecl 0x210af6808e0 <line:156:1, line:200:1> line:156:5 invalid CRYPTO_get_ex_new_index 'int (int, long, void *, int *, int *, int *)'
| |-ParmVarDecl 0x210af680540 <col:29, col:33> col:33 used class_index 'int'
| |-ParmVarDecl 0x210af6805c0 <col:46, col:51> col:51 used argl 'long'
| |-ParmVarDecl 0x210af680640 <col:57, col:63> col:63 used argp 'void *'
| |-ParmVarDecl 0x210af6806c0 <line:157:29, col:44> col:44 invalid new_func 'int *'
| |-ParmVarDecl 0x210af680740 <col:54, col:69> col:69 invalid dup_func 'int *'
| |-ParmVarDecl 0x210af6807c0 <line:158:29, col:45> col:45 invalid free_func 'int *'
| `-CompoundStmt 0x210af67d548 <line:159:1, line:200:1>
|   |-DeclStmt 0x210af680a88 <line:160:5, col:19>
|   | `-VarDecl 0x210af6809e0 <col:5, col:18> col:9 used toret 'int' cinit
|   |   `-UnaryOperator 0x210af680a70 <col:17, col:18> 'int' prefix '-'
|   |     `-IntegerLiteral 0x210af680a48 <col:18> 'int' 1
|   |-DeclStmt 0x210af680bc8 <line:162:5, col:49>
|   | `-VarDecl 0x210af680ab0 <col:5, col:48> col:19 used ip 'EX_CALLBACKS *' cinit
|   |   `-CallExpr 0x210af680b88 <col:24, col:48> 'EX_CALLBACKS *'
|   |     |-ImplicitCastExpr 0x210af680b70 <col:24> 'EX_CALLBACKS *(*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x210af680b18 <col:24> 'EX_CALLBACKS *(int)' Function 0x210af67a928 'get_and_lock' 'EX_CALLBACKS *(int)'
|   |     `-ImplicitCastExpr 0x210af680bb0 <col:37> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x210af680b38 <col:37> 'int' lvalue ParmVar 0x210af680540 'class_index' 'int'
|   |-IfStmt 0x210af680c80 <line:164:5, line:165:17>
|   | |-OpaqueValueExpr 0x210af680c68 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x210af680c58 <col:9, col:17>
|   |   `-UnaryOperator 0x210af680c40 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x210af680c18 <col:17> 'int' 1
|   |-IfStmt 0x210af67d0a0 <line:167:5, line:176:5>
|   | |-OpaqueValueExpr 0x210af67d088 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x210af67d070 <line:167:27, line:176:5>
|   |   `-IfStmt 0x210af67d058 <line:171:9, line:175:9>
|   |     |-OpaqueValueExpr 0x210af67d040 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x210af67d028 <line:172:54, line:175:9>
|   |       `-GotoStmt 0x210af67d010 <line:174:13, col:18> 'err' 0x210af67cfc0
|   |-IfStmt 0x210af67d120 <line:179:5, line:182:5>
|   | |-OpaqueValueExpr 0x210af67d108 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x210af67d0f0 <line:179:20, line:182:5>
|   |   `-GotoStmt 0x210af67d0d8 <line:181:9, col:14> 'err' 0x210af67cfc0
|   |-IfStmt 0x210af67d288 <line:189:5, line:193:5>
|   | |-OpaqueValueExpr 0x210af67d270 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x210af67d258 <line:189:47, line:193:5>
|   |   `-GotoStmt 0x210af67d240 <line:192:9, col:14> 'err' 0x210af67cfc0
|   |-LabelStmt 0x210af67d4e8 <line:197:2, col:5> 'err'
|   | `-NullStmt 0x210af67d4e0 <col:5>
|   `-ReturnStmt 0x210af67d538 <line:199:5, col:12>
|     `-ImplicitCastExpr 0x210af67d520 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x210af67d500 <col:12> 'int' lvalue Var 0x210af6809e0 'toret' 'int'
|-FunctionDecl 0x210af67d7a0 <line:209:1, line:248:1> line:209:5 invalid CRYPTO_new_ex_data 'int (int, void *, int *)'
| |-ParmVarDecl 0x210af67d5b0 <col:24, col:28> col:28 used class_index 'int'
| |-ParmVarDecl 0x210af67d630 <col:41, col:47> col:47 used obj 'void *'
| |-ParmVarDecl 0x210af67d6b0 <col:52, col:68> col:68 invalid ad 'int *'
| `-CompoundStmt 0x210af6827e8 <line:210:1, line:248:1>
|   |-DeclStmt 0x210af67d988 <line:211:5, col:14>
|   | |-VarDecl 0x210af67d888 <col:5, col:9> col:9 used mx 'int'
|   | `-VarDecl 0x210af67d908 <col:5, col:13> col:13 used i 'int'
|   |-DeclStmt 0x210af67da20 <line:212:5, col:14>
|   | `-VarDecl 0x210af67d9b8 <col:5, col:11> col:11 used ptr 'void *'
|   |-DeclStmt 0x210af67db88 <line:215:5, col:49>
|   | `-VarDecl 0x210af67da70 <col:5, col:48> col:19 used ip 'EX_CALLBACKS *' cinit
|   |   `-CallExpr 0x210af67db48 <col:24, col:48> 'EX_CALLBACKS *'
|   |     |-ImplicitCastExpr 0x210af67db30 <col:24> 'EX_CALLBACKS *(*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x210af67dad8 <col:24> 'EX_CALLBACKS *(int)' Function 0x210af67a928 'get_and_lock' 'EX_CALLBACKS *(int)'
|   |     `-ImplicitCastExpr 0x210af67db70 <col:37> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x210af67daf8 <col:37> 'int' lvalue ParmVar 0x210af67d5b0 'class_index' 'int'
|   |-IfStmt 0x210af67dc28 <line:217:5, line:218:16>
|   | |-OpaqueValueExpr 0x210af67dc10 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x210af67dc00 <col:9, col:16>
|   |   `-IntegerLiteral 0x210af67dbd8 <col:16> 'int' 0
|   |-IfStmt 0x210af6821f8 <line:223:5, line:231:5>
|   | |-BinaryOperator 0x210af67dd30 <line:223:9, col:14> 'int' '>'
|   | | |-ImplicitCastExpr 0x210af67dd18 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x210af67dcd0 <col:9> 'int' lvalue Var 0x210af67d888 'mx' 'int'
|   | | `-IntegerLiteral 0x210af67dcf0 <col:14> 'int' 0
|   | `-CompoundStmt 0x210af6821e8 <col:17, line:231:5>
|   |-IfStmt 0x210af682338 <line:234:5, line:237:5>
|   | |-OpaqueValueExpr 0x210af682320 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x210af682308 <line:234:36, line:237:5>
|   |   `-ReturnStmt 0x210af6822f8 <line:236:9, col:16>
|   |     `-IntegerLiteral 0x210af6822d0 <col:16> 'int' 0
|   |-ForStmt 0x210af682758 <line:238:5, line:244:5>
|   | |-BinaryOperator 0x210af682398 <line:238:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x210af682350 <col:10> 'int' lvalue Var 0x210af67d908 'i' 'int'
|   | | `-IntegerLiteral 0x210af682370 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x210af682428 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x210af6823f8 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x210af6823b8 <col:17> 'int' lvalue Var 0x210af67d908 'i' 'int'
|   | | `-ImplicitCastExpr 0x210af682410 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x210af6823d8 <col:21> 'int' lvalue Var 0x210af67d888 'mx' 'int'
|   | |-UnaryOperator 0x210af682468 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x210af682448 <col:25> 'int' lvalue Var 0x210af67d908 'i' 'int'
|   | `-CompoundStmt 0x210af682740 <col:30, line:244:5>
|   |   `-IfStmt 0x210af682728 <line:239:9, line:243:9>
|   |     |-OpaqueValueExpr 0x210af682710 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x210af682700 <line:239:49, line:243:9>
|   `-ReturnStmt 0x210af6827d8 <line:247:5, col:12>
|     `-IntegerLiteral 0x210af6827b0 <col:12> 'int' 1
|-FunctionDecl 0x210af682a40 <line:254:1, line:314:1> line:254:5 invalid CRYPTO_dup_ex_data 'int (int, int *, const int *)'
| |-ParmVarDecl 0x210af682850 <col:24, col:28> col:28 used class_index 'int'
| |-ParmVarDecl 0x210af6828d0 <col:41, col:57> col:57 invalid to 'int *'
| |-ParmVarDecl 0x210af682950 <line:255:24, col:46> col:46 invalid from 'const int *'
| `-CompoundStmt 0x210af68b050 <line:256:1, line:314:1>
|   |-DeclStmt 0x210af682cb0 <line:257:5, col:17>
|   | |-VarDecl 0x210af682b28 <col:5, col:9> col:9 used mx 'int'
|   | |-VarDecl 0x210af682ba8 <col:5, col:13> col:13 used j 'int'
|   | `-VarDecl 0x210af682c28 <col:5, col:16> col:16 used i 'int'
|   |-DeclStmt 0x210af682d48 <line:258:5, col:14>
|   | `-VarDecl 0x210af682ce0 <col:5, col:11> col:11 used ptr 'void *'
|   |-DeclStmt 0x210af68ce48 <line:261:5, col:21>
|   | `-VarDecl 0x210af68cde0 <col:5, col:19> col:19 used ip 'EX_CALLBACKS *'
|   |-DeclStmt 0x210af68cf08 <line:262:5, col:18>
|   | `-VarDecl 0x210af68ce78 <col:5, col:17> col:9 used toret 'int' cinit
|   |   `-IntegerLiteral 0x210af68cee0 <col:17> 'int' 0
|   |-IfStmt 0x210af68cf70 <line:264:5, line:266:16>
|   | |-OpaqueValueExpr 0x210af68cf58 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x210af68cf48 <col:9, col:16>
|   |   `-IntegerLiteral 0x210af68cf20 <col:16> 'int' 1
|   |-IfStmt 0x210af68d100 <line:267:5, line:268:16>
|   | |-OpaqueValueExpr 0x210af68d0e8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x210af68d0d8 <col:9, col:16>
|   |   `-IntegerLiteral 0x210af68d0b0 <col:16> 'int' 0
|   |-IfStmt 0x210af68d3f8 <line:272:5, line:273:14>
|   | |-BinaryOperator 0x210af68d360 <line:272:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x210af68d330 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x210af68d2f0 <col:9> 'int' lvalue Var 0x210af682ba8 'j' 'int'
|   | | `-ImplicitCastExpr 0x210af68d348 <col:13> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x210af68d310 <col:13> 'int' lvalue Var 0x210af682b28 'mx' 'int'
|   | `-BinaryOperator 0x210af68d3d8 <line:273:9, col:14> 'int' '='
|   |   |-DeclRefExpr 0x210af68d380 <col:9> 'int' lvalue Var 0x210af682b28 'mx' 'int'
|   |   `-ImplicitCastExpr 0x210af68d3c0 <col:14> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x210af68d3a0 <col:14> 'int' lvalue Var 0x210af682ba8 'j' 'int'
|   |-IfStmt 0x210af68d700 <line:274:5, line:282:5>
|   | |-BinaryOperator 0x210af68d470 <line:274:9, col:14> 'int' '>'
|   | | |-ImplicitCastExpr 0x210af68d458 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x210af68d410 <col:9> 'int' lvalue Var 0x210af682b28 'mx' 'int'
|   | | `-IntegerLiteral 0x210af68d430 <col:14> 'int' 0
|   | `-CompoundStmt 0x210af68d6f0 <col:17, line:282:5>
|   |-IfStmt 0x210af68d7f0 <line:285:5, line:286:16>
|   | |-BinaryOperator 0x210af68d798 <line:285:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x210af68d780 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x210af68d738 <col:9> 'int' lvalue Var 0x210af682b28 'mx' 'int'
|   | | `-IntegerLiteral 0x210af68d758 <col:15> 'int' 0
|   | `-ReturnStmt 0x210af68d7e0 <line:286:9, col:16>
|   |   `-IntegerLiteral 0x210af68d7b8 <col:16> 'int' 1
|   |-IfStmt 0x210af68d890 <line:287:5, line:290:5>
|   | |-OpaqueValueExpr 0x210af68d878 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x210af68d860 <line:287:26, line:290:5>
|   |   `-ReturnStmt 0x210af68d850 <line:289:9, col:16>
|   |     `-IntegerLiteral 0x210af68d828 <col:16> 'int' 0
|   |-IfStmt 0x210af68db58 <line:298:5, line:299:14>
|   | |-OpaqueValueExpr 0x210af68db40 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x210af68db28 <col:9, col:14> 'err' 0x210af68dad8
|   |-ForStmt 0x210af68af10 <line:301:5, line:308:5>
|   | |-BinaryOperator 0x210af68dbb8 <line:301:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x210af68db70 <col:10> 'int' lvalue Var 0x210af682c28 'i' 'int'
|   | | `-IntegerLiteral 0x210af68db90 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x210af68dc48 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x210af68dc18 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x210af68dbd8 <col:17> 'int' lvalue Var 0x210af682c28 'i' 'int'
|   | | `-ImplicitCastExpr 0x210af68dc30 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x210af68dbf8 <col:21> 'int' lvalue Var 0x210af682b28 'mx' 'int'
|   | |-UnaryOperator 0x210af68dc88 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x210af68dc68 <col:25> 'int' lvalue Var 0x210af682c28 'i' 'int'
|   | `-CompoundStmt 0x210af68aef8 <col:30, line:308:5>
|   |   `-IfStmt 0x210af68ae80 <line:303:9, line:306:22>
|   |     |-OpaqueValueExpr 0x210af68ae68 <<invalid sloc>> '_Bool'
|   |     `-IfStmt 0x210af68ae50 <line:304:13, line:306:22>
|   |       |-OpaqueValueExpr 0x210af68ae38 <<invalid sloc>> '_Bool'
|   |       `-GotoStmt 0x210af68ae20 <col:17, col:22> 'err' 0x210af68dad8
|   |-BinaryOperator 0x210af68afa8 <line:309:5, col:13> 'int' '='
|   | |-DeclRefExpr 0x210af68af48 <col:5> 'int' lvalue Var 0x210af68ce78 'toret' 'int'
|   | `-IntegerLiteral 0x210af68af80 <col:13> 'int' 1
|   |-LabelStmt 0x210af68aff0 <line:310:2, col:5> 'err'
|   | `-NullStmt 0x210af68afe8 <col:5>
|   `-ReturnStmt 0x210af68b040 <line:313:5, col:12>
|     `-ImplicitCastExpr 0x210af68b028 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x210af68b008 <col:12> 'int' lvalue Var 0x210af68ce78 'toret' 'int'
|-FunctionDecl 0x210af68b2d8 <line:321:1, line:364:1> line:321:6 invalid CRYPTO_free_ex_data 'void (int, void *, int *)'
| |-ParmVarDecl 0x210af68b0f0 <col:26, col:30> col:30 used class_index 'int'
| |-ParmVarDecl 0x210af68b170 <col:43, col:49> col:49 used obj 'void *'
| |-ParmVarDecl 0x210af68b1f0 <col:54, col:70> col:70 invalid ad 'int *'
| `-CompoundStmt 0x210af68e108 <line:322:1, line:364:1>
|   |-DeclStmt 0x210af68b4c0 <line:323:5, col:14>
|   | |-VarDecl 0x210af68b3c0 <col:5, col:9> col:9 used mx 'int'
|   | `-VarDecl 0x210af68b440 <col:5, col:13> col:13 used i 'int'
|   |-DeclStmt 0x210af68b550 <line:324:5, col:21>
|   | `-VarDecl 0x210af68b4e8 <col:5, col:19> col:19 used ip 'EX_CALLBACKS *'
|   |-DeclStmt 0x210af68b5e8 <line:325:5, col:14>
|   | `-VarDecl 0x210af68b580 <col:5, col:11> col:11 used ptr 'void *'
|   |-IfStmt 0x210af68b7d0 <line:330:5, line:331:14>
|   | |-OpaqueValueExpr 0x210af68b7b8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x210af68b7a0 <col:9, col:14> 'err' 0x210af68b750
|   |-IfStmt 0x210af68bb68 <line:334:5, line:342:5>
|   | |-BinaryOperator 0x210af68b8d8 <line:334:9, col:14> 'int' '>'
|   | | |-ImplicitCastExpr 0x210af68b8c0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x210af68b878 <col:9> 'int' lvalue Var 0x210af68b3c0 'mx' 'int'
|   | | `-IntegerLiteral 0x210af68b898 <col:14> 'int' 0
|   | `-CompoundStmt 0x210af68bb58 <col:17, line:342:5>
|   |-ForStmt 0x210af68df80 <line:345:5, line:357:5>
|   | |-BinaryOperator 0x210af68bbe8 <line:345:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x210af68bba0 <col:10> 'int' lvalue Var 0x210af68b440 'i' 'int'
|   | | `-IntegerLiteral 0x210af68bbc0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x210af68bc78 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x210af68bc48 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x210af68bc08 <col:17> 'int' lvalue Var 0x210af68b440 'i' 'int'
|   | | `-ImplicitCastExpr 0x210af68bc60 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x210af68bc28 <col:21> 'int' lvalue Var 0x210af68b3c0 'mx' 'int'
|   | |-UnaryOperator 0x210af68bcb8 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x210af68bc98 <col:25> 'int' lvalue Var 0x210af68b440 'i' 'int'
|   | `-CompoundStmt 0x210af68df60 <col:30, line:357:5>
|   |   |-IfStmt 0x210af68de08 <line:346:9, line:352:9> has_else
|   |   | |-OpaqueValueExpr 0x210af68ddf0 <<invalid sloc>> '_Bool'
|   |   | |-NullStmt 0x210af68bdb8 <line:347:13>
|   |   | `-CompoundStmt 0x210af68bda8 <line:348:14, line:352:9>
|   |   `-IfStmt 0x210af68df48 <line:353:9, line:356:9>
|   |     |-OpaqueValueExpr 0x210af68df30 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x210af68df20 <line:353:48, line:356:9>
|   `-LabelStmt 0x210af68e0f0 <line:361:2, col:5> 'err'
|     `-NullStmt 0x210af68e0e8 <col:5>
|-FunctionDecl 0x210af68e350 <line:370:1, line:389:1> line:370:5 invalid CRYPTO_set_ex_data 'int (int *, int, void *)'
| |-ParmVarDecl 0x210af68e168 <col:24, col:40> col:40 invalid ad 'int *'
| |-ParmVarDecl 0x210af68e1e8 <col:44, col:48> col:48 used idx 'int'
| |-ParmVarDecl 0x210af68e268 <col:53, col:59> col:59 used val 'void *'
| `-CompoundStmt 0x210af68ebc0 <line:371:1, line:389:1>
|   |-DeclStmt 0x210af68e4a0 <line:372:5, col:10>
|   | `-VarDecl 0x210af68e438 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x210af68e6d0 <line:374:5, line:379:5>
|   | |-OpaqueValueExpr 0x210af68e6b8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x210af68e6a0 <line:374:25, line:379:5>
|   |   `-IfStmt 0x210af68e688 <line:375:9, line:378:9>
|   |     |-OpaqueValueExpr 0x210af68e670 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x210af68e658 <line:375:52, line:378:9>
|   |       `-ReturnStmt 0x210af68e648 <line:377:13, col:20>
|   |         `-IntegerLiteral 0x210af68e620 <col:20> 'int' 0
|   |-ForStmt 0x210af68e9e8 <line:381:5, line:386:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x210af68e7c8 <line:381:35, col:40> 'int' '<='
|   | | |-ImplicitCastExpr 0x210af68e798 <col:35> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x210af68e740 <col:35> 'int' lvalue Var 0x210af68e438 'i' 'int'
|   | | `-ImplicitCastExpr 0x210af68e7b0 <col:40> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x210af68e760 <col:40> 'int' lvalue ParmVar 0x210af68e1e8 'idx' 'int'
|   | |-UnaryOperator 0x210af68e808 <col:45, col:47> 'int' prefix '++'
|   | | `-DeclRefExpr 0x210af68e7e8 <col:47> 'int' lvalue Var 0x210af68e438 'i' 'int'
|   | `-CompoundStmt 0x210af68e9d0 <col:50, line:386:5>
|   |   `-IfStmt 0x210af68e9b8 <line:382:9, line:385:9>
|   |     |-OpaqueValueExpr 0x210af68e9a0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x210af68e988 <line:382:42, line:385:9>
|   |       `-ReturnStmt 0x210af68e978 <line:384:13, col:20>
|   |         `-IntegerLiteral 0x210af68e950 <col:20> 'int' 0
|   `-ReturnStmt 0x210af68ebb0 <line:388:5, col:12>
|     `-IntegerLiteral 0x210af68eb88 <col:12> 'int' 1
`-FunctionDecl 0x210af68ee00 <line:395:1, line:400:1> line:395:7 invalid CRYPTO_get_ex_data 'void *(const int *, int)'
  |-ParmVarDecl 0x210af68ec08 <col:26, col:48> col:48 invalid ad 'const int *'
  |-ParmVarDecl 0x210af68ec88 <col:52, col:56> col:56 used idx 'int'
  `-CompoundStmt 0x210af68f050 <line:396:1, line:400:1>
