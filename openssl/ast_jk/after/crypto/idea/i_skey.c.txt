TranslationUnitDecl 0x2431ff73c98 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2431ff74530 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2431ff74230 '__int128'
|-TypedefDecl 0x2431ff745a0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2431ff74250 'unsigned __int128'
|-TypedefDecl 0x2431ff748d8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x2431ff74690 'struct __NSConstantString_tag'
|   `-Record 0x2431ff745f8 '__NSConstantString_tag'
|-TypedefDecl 0x2431ff74948 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x2431ff73e70 'unsigned long long'
|-TypedefDecl 0x2431ff749e0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2431ff749a0 'char *'
|   `-BuiltinType 0x2431ff73d30 'char'
|-TypedefDecl 0x2431ff74a50 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x2431ff749a0 'char *'
|   `-BuiltinType 0x2431ff73d30 'char'
|-FunctionDecl 0x2431ff74bc0 <.//openssl//file_jk/after\crypto\idea\i_skey.c:13:1, col:41> col:17 invalid inverse 'int (unsigned int)' static
| `-ParmVarDecl 0x2431ff74ad8 <col:25, col:38> col:38 xin 'unsigned int'
|-FunctionDecl 0x24321a0d678 <line:14:1, line:52:1> line:14:6 invalid IDEA_set_encrypt_key 'void (const unsigned char *, int *)'
| |-ParmVarDecl 0x24321a0d4f0 <col:27, col:48> col:48 used key 'const unsigned char *'
| |-ParmVarDecl 0x24321a0d5a0 <col:53, col:72> col:72 invalid ks 'int *'
| `-CompoundStmt 0x24321a0ed30 <line:15:1, line:52:1>
|   |-DeclStmt 0x24321a0d7c0 <line:16:5, col:10>
|   | `-VarDecl 0x24321a0d758 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x24321a0d858 <line:17:5, col:43>
|   | `-VarDecl 0x24321a0d7f0 <col:5, col:24> col:24 invalid kt 'int *' register
|   `-ForStmt 0x24321a0ecf8 <line:31:5, line:51:5>
|     |-BinaryOperator 0x24321a0e640 <line:31:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x24321a0e5e0 <col:10> 'int' lvalue Var 0x24321a0d758 'i' 'int'
|     | `-IntegerLiteral 0x24321a0e618 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x24321a0e6c0 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x24321a0e6a8 <col:17> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x24321a0e660 <col:17> 'int' lvalue Var 0x24321a0d758 'i' 'int'
|     | `-IntegerLiteral 0x24321a0e680 <col:21> 'int' 6
|     |-UnaryOperator 0x24321a0e700 <col:24, col:25> 'int' postfix '++'
|     | `-DeclRefExpr 0x24321a0e6e0 <col:24> 'int' lvalue Var 0x24321a0d758 'i' 'int'
|     `-CompoundStmt 0x24321a0ece0 <col:29, line:51:5>
|       `-IfStmt 0x24321a0ebb0 <line:46:9, line:47:13>
|         |-BinaryOperator 0x24321a0eb88 <line:46:13, col:18> 'int' '>='
|         | |-ImplicitCastExpr 0x24321a0eb70 <col:13> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x24321a0eb28 <col:13> 'int' lvalue Var 0x24321a0d758 'i' 'int'
|         | `-IntegerLiteral 0x24321a0eb48 <col:18> 'int' 5
|         `-BreakStmt 0x24321a0eba8 <line:47:13>
|-FunctionDecl 0x24321a0eec8 <line:54:1, line:81:1> line:54:6 invalid IDEA_set_decrypt_key 'void (int *, int *)'
| |-ParmVarDecl 0x24321a0ed70 <col:27, col:46> col:46 invalid ek 'int *'
| |-ParmVarDecl 0x24321a0edf0 <col:50, col:69> col:69 invalid dk 'int *'
| `-CompoundStmt 0x24321a11720 <line:55:1, line:81:1>
|   |-DeclStmt 0x24321a0f010 <line:56:5, col:10>
|   | `-VarDecl 0x24321a0efa8 <col:5, col:9> col:9 used r 'int'
|   |-DeclStmt 0x24321a0f0a8 <line:57:5, col:34>
|   | `-VarDecl 0x24321a0f040 <col:5, col:24> col:24 invalid fp 'int *' register
|   `-ForStmt 0x24321a11558 <line:61:5, line:71:5>
|     |-BinaryOperator 0x24321a0f1c0 <line:61:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x24321a0f160 <col:10> 'int' lvalue Var 0x24321a0efa8 'r' 'int'
|     | `-IntegerLiteral 0x24321a0f198 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x24321a0f240 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x24321a0f228 <col:17> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x24321a0f1e0 <col:17> 'int' lvalue Var 0x24321a0efa8 'r' 'int'
|     | `-IntegerLiteral 0x24321a0f200 <col:21> 'int' 9
|     |-UnaryOperator 0x24321a0f280 <col:24, col:25> 'int' postfix '++'
|     | `-DeclRefExpr 0x24321a0f260 <col:24> 'int' lvalue Var 0x24321a0efa8 'r' 'int'
|     `-CompoundStmt 0x24321a11540 <col:29, line:71:5>
|       `-IfStmt 0x24321a0f460 <line:66:9, line:67:13>
|         |-BinaryOperator 0x24321a0f438 <line:66:13, col:18> 'int' '=='
|         | |-ImplicitCastExpr 0x24321a0f420 <col:13> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x24321a0f3d8 <col:13> 'int' lvalue Var 0x24321a0efa8 'r' 'int'
|         | `-IntegerLiteral 0x24321a0f3f8 <col:18> 'int' 8
|         `-BreakStmt 0x24321a0f458 <line:67:13>
`-FunctionDecl 0x24321a11810 <line:84:1, line:112:1> line:84:17 invalid inverse 'int (unsigned int)' static
  |-ParmVarDecl 0x24321a11760 <col:25, col:38> col:38 used xin 'unsigned int'
  `-CompoundStmt 0x24321a129a0 <line:85:1, line:112:1>
    |-DeclStmt 0x24321a11c90 <line:86:5, col:33>
    | |-VarDecl 0x24321a118e8 <col:5, col:10> col:10 used n1 'long'
    | |-VarDecl 0x24321a11968 <col:5, col:14> col:14 used n2 'long'
    | |-VarDecl 0x24321a119e8 <col:5, col:18> col:18 used q 'long'
    | |-VarDecl 0x24321a11a68 <col:5, col:21> col:21 used r 'long'
    | |-VarDecl 0x24321a11ae8 <col:5, col:24> col:24 used b1 'long'
    | |-VarDecl 0x24321a11b68 <col:5, col:28> col:28 used b2 'long'
    | `-VarDecl 0x24321a11be8 <col:5, col:32> col:32 used t 'long'
    `-IfStmt 0x24321a12978 <line:88:5, line:110:5> has_else
      |-BinaryOperator 0x24321a11d20 <line:88:9, col:16> 'int' '=='
      | |-ImplicitCastExpr 0x24321a11cf0 <col:9> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x24321a11ca8 <col:9> 'unsigned int' lvalue ParmVar 0x24321a11760 'xin' 'unsigned int'
      | `-ImplicitCastExpr 0x24321a11d08 <col:16> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x24321a11cc8 <col:16> 'int' 0
      |-BinaryOperator 0x24321a11db8 <line:89:9, col:14> 'long' '='
      | |-DeclRefExpr 0x24321a11d40 <col:9> 'long' lvalue Var 0x24321a11b68 'b2' 'long'
      | `-ImplicitCastExpr 0x24321a11da0 <col:14> 'long' <IntegralCast>
      |   `-IntegerLiteral 0x24321a11d78 <col:14> 'int' 0
      `-CompoundStmt 0x24321a12940 <line:90:10, line:110:5>
        |-BinaryOperator 0x24321a11e50 <line:91:9, col:14> 'long' '='
        | |-DeclRefExpr 0x24321a11dd8 <col:9> 'long' lvalue Var 0x24321a118e8 'n1' 'long'
        | `-ImplicitCastExpr 0x24321a11e38 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x24321a11e10 <col:14> 'int' 65537
        |-BinaryOperator 0x24321a11ef8 <line:92:9, col:14> 'long' '='
        | |-DeclRefExpr 0x24321a11e70 <col:9> 'long' lvalue Var 0x24321a11968 'n2' 'long'
        | `-ImplicitCastExpr 0x24321a11ee0 <col:14> 'long' <IntegralCast>
        |   `-ImplicitCastExpr 0x24321a11ec8 <col:14> 'unsigned int' <LValueToRValue>
        |     `-DeclRefExpr 0x24321a11ea8 <col:14> 'unsigned int' lvalue ParmVar 0x24321a11760 'xin' 'unsigned int'
        |-BinaryOperator 0x24321a11f78 <line:93:9, col:14> 'long' '='
        | |-DeclRefExpr 0x24321a11f18 <col:9> 'long' lvalue Var 0x24321a11b68 'b2' 'long'
        | `-ImplicitCastExpr 0x24321a11f60 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x24321a11f38 <col:14> 'int' 1
        |-BinaryOperator 0x24321a12010 <line:94:9, col:14> 'long' '='
        | |-DeclRefExpr 0x24321a11f98 <col:9> 'long' lvalue Var 0x24321a11ae8 'b1' 'long'
        | `-ImplicitCastExpr 0x24321a11ff8 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x24321a11fd0 <col:14> 'int' 0
        `-DoStmt 0x24321a12920 <line:96:9, line:109:24>
          |-CompoundStmt 0x24321a12860 <line:96:12, line:109:9>
          | |-BinaryOperator 0x24321a12118 <line:97:13, col:25> 'long' '='
          | | |-DeclRefExpr 0x24321a12030 <col:13> 'long' lvalue Var 0x24321a11a68 'r' 'long'
          | | `-ParenExpr 0x24321a120f8 <col:17, col:25> 'long'
          | |   `-BinaryOperator 0x24321a120d8 <col:18, col:23> 'long' '%'
          | |     |-ImplicitCastExpr 0x24321a120a8 <col:18> 'long' <LValueToRValue>
          | |     | `-DeclRefExpr 0x24321a12068 <col:18> 'long' lvalue Var 0x24321a118e8 'n1' 'long'
          | |     `-ImplicitCastExpr 0x24321a120c0 <col:23> 'long' <LValueToRValue>
          | |       `-DeclRefExpr 0x24321a12088 <col:23> 'long' lvalue Var 0x24321a11968 'n2' 'long'
          | |-BinaryOperator 0x24321a12278 <line:98:13, col:28> 'long' '='
          | | |-DeclRefExpr 0x24321a12138 <col:13> 'long' lvalue Var 0x24321a119e8 'q' 'long'
          | | `-BinaryOperator 0x24321a12258 <col:17, col:28> 'long' '/'
          | |   |-ParenExpr 0x24321a12200 <col:17, col:24> 'long'
          | |   | `-BinaryOperator 0x24321a121e0 <col:18, col:23> 'long' '-'
          | |   |   |-ImplicitCastExpr 0x24321a121b0 <col:18> 'long' <LValueToRValue>
          | |   |   | `-DeclRefExpr 0x24321a12170 <col:18> 'long' lvalue Var 0x24321a118e8 'n1' 'long'
          | |   |   `-ImplicitCastExpr 0x24321a121c8 <col:23> 'long' <LValueToRValue>
          | |   |     `-DeclRefExpr 0x24321a12190 <col:23> 'long' lvalue Var 0x24321a11a68 'r' 'long'
          | |   `-ImplicitCastExpr 0x24321a12240 <col:28> 'long' <LValueToRValue>
          | |     `-DeclRefExpr 0x24321a12220 <col:28> 'long' lvalue Var 0x24321a11968 'n2' 'long'
          | `-IfStmt 0x24321a12838 <line:99:13, line:108:13> has_else
          |   |-BinaryOperator 0x24321a12310 <line:99:17, col:22> 'int' '=='
          |   | |-ImplicitCastExpr 0x24321a122e0 <col:17> 'long' <LValueToRValue>
          |   | | `-DeclRefExpr 0x24321a12298 <col:17> 'long' lvalue Var 0x24321a11a68 'r' 'long'
          |   | `-ImplicitCastExpr 0x24321a122f8 <col:22> 'long' <IntegralCast>
          |   |   `-IntegerLiteral 0x24321a122b8 <col:22> 'int' 0
          |   |-CompoundStmt 0x24321a124b8 <col:25, line:102:13>
          |   | `-IfStmt 0x24321a124a0 <line:100:17, line:101:36>
          |   |   |-BinaryOperator 0x24321a123a8 <line:100:21, col:26> 'int' '<'
          |   |   | |-ImplicitCastExpr 0x24321a12378 <col:21> 'long' <LValueToRValue>
          |   |   | | `-DeclRefExpr 0x24321a12330 <col:21> 'long' lvalue Var 0x24321a11b68 'b2' 'long'
          |   |   | `-ImplicitCastExpr 0x24321a12390 <col:26> 'long' <IntegralCast>
          |   |   |   `-IntegerLiteral 0x24321a12350 <col:26> 'int' 0
          |   |   `-BinaryOperator 0x24321a12480 <line:101:21, col:36> 'long' '='
          |   |     |-DeclRefExpr 0x24321a123c8 <col:21> 'long' lvalue Var 0x24321a11b68 'b2' 'long'
          |   |     `-BinaryOperator 0x24321a12460 <col:26, col:36> 'long' '+'
          |   |       |-ImplicitCastExpr 0x24321a12448 <col:26> 'long' <IntegralCast>
          |   |       | `-IntegerLiteral 0x24321a123e8 <col:26> 'int' 65537
          |   |       `-ImplicitCastExpr 0x24321a12430 <col:36> 'long' <LValueToRValue>
          |   |         `-DeclRefExpr 0x24321a12410 <col:36> 'long' lvalue Var 0x24321a11b68 'b2' 'long'
          |   `-CompoundStmt 0x24321a12800 <line:102:20, line:108:13>
          |     |-BinaryOperator 0x24321a12538 <line:103:17, col:22> 'long' '='
          |     | |-DeclRefExpr 0x24321a124d0 <col:17> 'long' lvalue Var 0x24321a118e8 'n1' 'long'
          |     | `-ImplicitCastExpr 0x24321a12520 <col:22> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x24321a12500 <col:22> 'long' lvalue Var 0x24321a11968 'n2' 'long'
          |     |-BinaryOperator 0x24321a125b0 <line:104:17, col:22> 'long' '='
          |     | |-DeclRefExpr 0x24321a12558 <col:17> 'long' lvalue Var 0x24321a11968 'n2' 'long'
          |     | `-ImplicitCastExpr 0x24321a12598 <col:22> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x24321a12578 <col:22> 'long' lvalue Var 0x24321a11a68 'r' 'long'
          |     |-BinaryOperator 0x24321a12640 <line:105:17, col:21> 'long' '='
          |     | |-DeclRefExpr 0x24321a125d0 <col:17> 'long' lvalue Var 0x24321a11be8 't' 'long'
          |     | `-ImplicitCastExpr 0x24321a12628 <col:21> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x24321a12608 <col:21> 'long' lvalue Var 0x24321a11b68 'b2' 'long'
          |     |-BinaryOperator 0x24321a12768 <line:106:17, col:31> 'long' '='
          |     | |-DeclRefExpr 0x24321a12660 <col:17> 'long' lvalue Var 0x24321a11b68 'b2' 'long'
          |     | `-BinaryOperator 0x24321a12748 <col:22, col:31> 'long' '-'
          |     |   |-ImplicitCastExpr 0x24321a12730 <col:22> 'long' <LValueToRValue>
          |     |   | `-DeclRefExpr 0x24321a12680 <col:22> 'long' lvalue Var 0x24321a11ae8 'b1' 'long'
          |     |   `-BinaryOperator 0x24321a12710 <col:27, col:31> 'long' '*'
          |     |     |-ImplicitCastExpr 0x24321a126e0 <col:27> 'long' <LValueToRValue>
          |     |     | `-DeclRefExpr 0x24321a126a0 <col:27> 'long' lvalue Var 0x24321a119e8 'q' 'long'
          |     |     `-ImplicitCastExpr 0x24321a126f8 <col:31> 'long' <LValueToRValue>
          |     |       `-DeclRefExpr 0x24321a126c0 <col:31> 'long' lvalue Var 0x24321a11b68 'b2' 'long'
          |     `-BinaryOperator 0x24321a127e0 <line:107:17, col:22> 'long' '='
          |       |-DeclRefExpr 0x24321a12788 <col:17> 'long' lvalue Var 0x24321a11ae8 'b1' 'long'
          |       `-ImplicitCastExpr 0x24321a127c8 <col:22> 'long' <LValueToRValue>
          |         `-DeclRefExpr 0x24321a127a8 <col:22> 'long' lvalue Var 0x24321a11be8 't' 'long'
          `-BinaryOperator 0x24321a12900 <line:109:18, col:23> 'int' '!='
            |-ImplicitCastExpr 0x24321a128d0 <col:18> 'long' <LValueToRValue>
            | `-DeclRefExpr 0x24321a12888 <col:18> 'long' lvalue Var 0x24321a11a68 'r' 'long'
            `-ImplicitCastExpr 0x24321a128e8 <col:23> 'long' <IntegralCast>
              `-IntegerLiteral 0x24321a128a8 <col:23> 'int' 0
