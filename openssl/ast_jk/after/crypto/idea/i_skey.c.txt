TranslationUnitDecl 0x24bdb26e688 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x24bdb26ef20 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x24bdb26ec20 '__int128'
|-TypedefDecl 0x24bdb26ef90 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x24bdb26ec40 'unsigned __int128'
|-TypedefDecl 0x24bdb26f2c8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x24bdb26f080 'struct __NSConstantString_tag'
|   `-Record 0x24bdb26efe8 '__NSConstantString_tag'
|-TypedefDecl 0x24bdb26f338 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x24bdb26e860 'unsigned long long'
|-TypedefDecl 0x24bdb26f3d0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x24bdb26f390 'char *'
|   `-BuiltinType 0x24bdb26e720 'char'
|-TypedefDecl 0x24bdb26f440 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x24bdb26f390 'char *'
|   `-BuiltinType 0x24bdb26e720 'char'
|-FunctionDecl 0x24bdb26f5b0 <.//openssl//file_jk/after\crypto\idea\i_skey.c:13:1, col:41> col:17 invalid inverse 'int (unsigned int)' static
| `-ParmVarDecl 0x24bdb26f4c8 <col:25, col:38> col:38 xin 'unsigned int'
|-FunctionDecl 0x24bdcc94d28 <line:14:1, line:52:1> line:14:6 invalid IDEA_set_encrypt_key 'void (const unsigned char *, int *)'
| |-ParmVarDecl 0x24bdcc94ba0 <col:27, col:48> col:48 used key 'const unsigned char *'
| |-ParmVarDecl 0x24bdcc94c50 <col:53, col:72> col:72 invalid ks 'int *'
| `-CompoundStmt 0x24bdcc963e0 <line:15:1, line:52:1>
|   |-DeclStmt 0x24bdcc94e70 <line:16:5, col:10>
|   | `-VarDecl 0x24bdcc94e08 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x24bdcc94f08 <line:17:5, col:43>
|   | `-VarDecl 0x24bdcc94ea0 <col:5, col:24> col:24 invalid kt 'int *' register
|   `-ForStmt 0x24bdcc963a8 <line:31:5, line:51:5>
|     |-BinaryOperator 0x24bdcc95cf0 <line:31:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x24bdcc95c90 <col:10> 'int' lvalue Var 0x24bdcc94e08 'i' 'int'
|     | `-IntegerLiteral 0x24bdcc95cc8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x24bdcc95d70 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x24bdcc95d58 <col:17> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x24bdcc95d10 <col:17> 'int' lvalue Var 0x24bdcc94e08 'i' 'int'
|     | `-IntegerLiteral 0x24bdcc95d30 <col:21> 'int' 6
|     |-UnaryOperator 0x24bdcc95db0 <col:24, col:25> 'int' postfix '++'
|     | `-DeclRefExpr 0x24bdcc95d90 <col:24> 'int' lvalue Var 0x24bdcc94e08 'i' 'int'
|     `-CompoundStmt 0x24bdcc96390 <col:29, line:51:5>
|       `-IfStmt 0x24bdcc96260 <line:46:9, line:47:13>
|         |-BinaryOperator 0x24bdcc96238 <line:46:13, col:18> 'int' '>='
|         | |-ImplicitCastExpr 0x24bdcc96220 <col:13> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x24bdcc961d8 <col:13> 'int' lvalue Var 0x24bdcc94e08 'i' 'int'
|         | `-IntegerLiteral 0x24bdcc961f8 <col:18> 'int' 5
|         `-BreakStmt 0x24bdcc96258 <line:47:13>
|-FunctionDecl 0x24bdcc96578 <line:54:1, line:81:1> line:54:6 invalid IDEA_set_decrypt_key 'void (int *, int *)'
| |-ParmVarDecl 0x24bdcc96420 <col:27, col:46> col:46 invalid ek 'int *'
| |-ParmVarDecl 0x24bdcc964a0 <col:50, col:69> col:69 invalid dk 'int *'
| `-CompoundStmt 0x24bdcc99de0 <line:55:1, line:81:1>
|   |-DeclStmt 0x24bdcc966c0 <line:56:5, col:10>
|   | `-VarDecl 0x24bdcc96658 <col:5, col:9> col:9 used r 'int'
|   |-DeclStmt 0x24bdcc96758 <line:57:5, col:34>
|   | `-VarDecl 0x24bdcc966f0 <col:5, col:24> col:24 invalid fp 'int *' register
|   `-ForStmt 0x24bdcc99c18 <line:61:5, line:71:5>
|     |-BinaryOperator 0x24bdcc96870 <line:61:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x24bdcc96810 <col:10> 'int' lvalue Var 0x24bdcc96658 'r' 'int'
|     | `-IntegerLiteral 0x24bdcc96848 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x24bdcc968f0 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x24bdcc968d8 <col:17> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x24bdcc96890 <col:17> 'int' lvalue Var 0x24bdcc96658 'r' 'int'
|     | `-IntegerLiteral 0x24bdcc968b0 <col:21> 'int' 9
|     |-UnaryOperator 0x24bdcc96930 <col:24, col:25> 'int' postfix '++'
|     | `-DeclRefExpr 0x24bdcc96910 <col:24> 'int' lvalue Var 0x24bdcc96658 'r' 'int'
|     `-CompoundStmt 0x24bdcc99c00 <col:29, line:71:5>
|       `-IfStmt 0x24bdcc96b10 <line:66:9, line:67:13>
|         |-BinaryOperator 0x24bdcc96ae8 <line:66:13, col:18> 'int' '=='
|         | |-ImplicitCastExpr 0x24bdcc96ad0 <col:13> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x24bdcc96a88 <col:13> 'int' lvalue Var 0x24bdcc96658 'r' 'int'
|         | `-IntegerLiteral 0x24bdcc96aa8 <col:18> 'int' 8
|         `-BreakStmt 0x24bdcc96b08 <line:67:13>
`-FunctionDecl 0x24bdcc99ed0 <line:84:1, line:112:1> line:84:17 invalid inverse 'int (unsigned int)' static
  |-ParmVarDecl 0x24bdcc99e20 <col:25, col:38> col:38 used xin 'unsigned int'
  `-CompoundStmt 0x24bdcc98030 <line:85:1, line:112:1>
    |-DeclStmt 0x24bdcc9a350 <line:86:5, col:33>
    | |-VarDecl 0x24bdcc99fa8 <col:5, col:10> col:10 used n1 'long'
    | |-VarDecl 0x24bdcc9a028 <col:5, col:14> col:14 used n2 'long'
    | |-VarDecl 0x24bdcc9a0a8 <col:5, col:18> col:18 used q 'long'
    | |-VarDecl 0x24bdcc9a128 <col:5, col:21> col:21 used r 'long'
    | |-VarDecl 0x24bdcc9a1a8 <col:5, col:24> col:24 used b1 'long'
    | |-VarDecl 0x24bdcc9a228 <col:5, col:28> col:28 used b2 'long'
    | `-VarDecl 0x24bdcc9a2a8 <col:5, col:32> col:32 used t 'long'
    `-IfStmt 0x24bdcc98008 <line:88:5, line:110:5> has_else
      |-BinaryOperator 0x24bdcc9a3e0 <line:88:9, col:16> 'int' '=='
      | |-ImplicitCastExpr 0x24bdcc9a3b0 <col:9> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x24bdcc9a368 <col:9> 'unsigned int' lvalue ParmVar 0x24bdcc99e20 'xin' 'unsigned int'
      | `-ImplicitCastExpr 0x24bdcc9a3c8 <col:16> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x24bdcc9a388 <col:16> 'int' 0
      |-BinaryOperator 0x24bdcc9a478 <line:89:9, col:14> 'long' '='
      | |-DeclRefExpr 0x24bdcc9a400 <col:9> 'long' lvalue Var 0x24bdcc9a228 'b2' 'long'
      | `-ImplicitCastExpr 0x24bdcc9a460 <col:14> 'long' <IntegralCast>
      |   `-IntegerLiteral 0x24bdcc9a438 <col:14> 'int' 0
      `-CompoundStmt 0x24bdcc97fd0 <line:90:10, line:110:5>
        |-BinaryOperator 0x24bdcc9a510 <line:91:9, col:14> 'long' '='
        | |-DeclRefExpr 0x24bdcc9a498 <col:9> 'long' lvalue Var 0x24bdcc99fa8 'n1' 'long'
        | `-ImplicitCastExpr 0x24bdcc9a4f8 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x24bdcc9a4d0 <col:14> 'int' 65537
        |-BinaryOperator 0x24bdcc9a5b8 <line:92:9, col:14> 'long' '='
        | |-DeclRefExpr 0x24bdcc9a530 <col:9> 'long' lvalue Var 0x24bdcc9a028 'n2' 'long'
        | `-ImplicitCastExpr 0x24bdcc9a5a0 <col:14> 'long' <IntegralCast>
        |   `-ImplicitCastExpr 0x24bdcc9a588 <col:14> 'unsigned int' <LValueToRValue>
        |     `-DeclRefExpr 0x24bdcc9a568 <col:14> 'unsigned int' lvalue ParmVar 0x24bdcc99e20 'xin' 'unsigned int'
        |-BinaryOperator 0x24bdcc9a638 <line:93:9, col:14> 'long' '='
        | |-DeclRefExpr 0x24bdcc9a5d8 <col:9> 'long' lvalue Var 0x24bdcc9a228 'b2' 'long'
        | `-ImplicitCastExpr 0x24bdcc9a620 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x24bdcc9a5f8 <col:14> 'int' 1
        |-BinaryOperator 0x24bdcc9a6d0 <line:94:9, col:14> 'long' '='
        | |-DeclRefExpr 0x24bdcc9a658 <col:9> 'long' lvalue Var 0x24bdcc9a1a8 'b1' 'long'
        | `-ImplicitCastExpr 0x24bdcc9a6b8 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x24bdcc9a690 <col:14> 'int' 0
        `-DoStmt 0x24bdcc97fb0 <line:96:9, line:109:24>
          |-CompoundStmt 0x24bdcc97ef0 <line:96:12, line:109:9>
          | |-BinaryOperator 0x24bdcc9a7d8 <line:97:13, col:25> 'long' '='
          | | |-DeclRefExpr 0x24bdcc9a6f0 <col:13> 'long' lvalue Var 0x24bdcc9a128 'r' 'long'
          | | `-ParenExpr 0x24bdcc9a7b8 <col:17, col:25> 'long'
          | |   `-BinaryOperator 0x24bdcc9a798 <col:18, col:23> 'long' '%'
          | |     |-ImplicitCastExpr 0x24bdcc9a768 <col:18> 'long' <LValueToRValue>
          | |     | `-DeclRefExpr 0x24bdcc9a728 <col:18> 'long' lvalue Var 0x24bdcc99fa8 'n1' 'long'
          | |     `-ImplicitCastExpr 0x24bdcc9a780 <col:23> 'long' <LValueToRValue>
          | |       `-DeclRefExpr 0x24bdcc9a748 <col:23> 'long' lvalue Var 0x24bdcc9a028 'n2' 'long'
          | |-BinaryOperator 0x24bdcc9a938 <line:98:13, col:28> 'long' '='
          | | |-DeclRefExpr 0x24bdcc9a7f8 <col:13> 'long' lvalue Var 0x24bdcc9a0a8 'q' 'long'
          | | `-BinaryOperator 0x24bdcc9a918 <col:17, col:28> 'long' '/'
          | |   |-ParenExpr 0x24bdcc9a8c0 <col:17, col:24> 'long'
          | |   | `-BinaryOperator 0x24bdcc9a8a0 <col:18, col:23> 'long' '-'
          | |   |   |-ImplicitCastExpr 0x24bdcc9a870 <col:18> 'long' <LValueToRValue>
          | |   |   | `-DeclRefExpr 0x24bdcc9a830 <col:18> 'long' lvalue Var 0x24bdcc99fa8 'n1' 'long'
          | |   |   `-ImplicitCastExpr 0x24bdcc9a888 <col:23> 'long' <LValueToRValue>
          | |   |     `-DeclRefExpr 0x24bdcc9a850 <col:23> 'long' lvalue Var 0x24bdcc9a128 'r' 'long'
          | |   `-ImplicitCastExpr 0x24bdcc9a900 <col:28> 'long' <LValueToRValue>
          | |     `-DeclRefExpr 0x24bdcc9a8e0 <col:28> 'long' lvalue Var 0x24bdcc9a028 'n2' 'long'
          | `-IfStmt 0x24bdcc97ec8 <line:99:13, line:108:13> has_else
          |   |-BinaryOperator 0x24bdcc9a9d0 <line:99:17, col:22> 'int' '=='
          |   | |-ImplicitCastExpr 0x24bdcc9a9a0 <col:17> 'long' <LValueToRValue>
          |   | | `-DeclRefExpr 0x24bdcc9a958 <col:17> 'long' lvalue Var 0x24bdcc9a128 'r' 'long'
          |   | `-ImplicitCastExpr 0x24bdcc9a9b8 <col:22> 'long' <IntegralCast>
          |   |   `-IntegerLiteral 0x24bdcc9a978 <col:22> 'int' 0
          |   |-CompoundStmt 0x24bdcc9ab78 <col:25, line:102:13>
          |   | `-IfStmt 0x24bdcc9ab60 <line:100:17, line:101:36>
          |   |   |-BinaryOperator 0x24bdcc9aa68 <line:100:21, col:26> 'int' '<'
          |   |   | |-ImplicitCastExpr 0x24bdcc9aa38 <col:21> 'long' <LValueToRValue>
          |   |   | | `-DeclRefExpr 0x24bdcc9a9f0 <col:21> 'long' lvalue Var 0x24bdcc9a228 'b2' 'long'
          |   |   | `-ImplicitCastExpr 0x24bdcc9aa50 <col:26> 'long' <IntegralCast>
          |   |   |   `-IntegerLiteral 0x24bdcc9aa10 <col:26> 'int' 0
          |   |   `-BinaryOperator 0x24bdcc9ab40 <line:101:21, col:36> 'long' '='
          |   |     |-DeclRefExpr 0x24bdcc9aa88 <col:21> 'long' lvalue Var 0x24bdcc9a228 'b2' 'long'
          |   |     `-BinaryOperator 0x24bdcc9ab20 <col:26, col:36> 'long' '+'
          |   |       |-ImplicitCastExpr 0x24bdcc9ab08 <col:26> 'long' <IntegralCast>
          |   |       | `-IntegerLiteral 0x24bdcc9aaa8 <col:26> 'int' 65537
          |   |       `-ImplicitCastExpr 0x24bdcc9aaf0 <col:36> 'long' <LValueToRValue>
          |   |         `-DeclRefExpr 0x24bdcc9aad0 <col:36> 'long' lvalue Var 0x24bdcc9a228 'b2' 'long'
          |   `-CompoundStmt 0x24bdcc97e90 <line:102:20, line:108:13>
          |     |-BinaryOperator 0x24bdcc97bc8 <line:103:17, col:22> 'long' '='
          |     | |-DeclRefExpr 0x24bdcc9ab90 <col:17> 'long' lvalue Var 0x24bdcc99fa8 'n1' 'long'
          |     | `-ImplicitCastExpr 0x24bdcc97bb0 <col:22> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x24bdcc97b90 <col:22> 'long' lvalue Var 0x24bdcc9a028 'n2' 'long'
          |     |-BinaryOperator 0x24bdcc97c40 <line:104:17, col:22> 'long' '='
          |     | |-DeclRefExpr 0x24bdcc97be8 <col:17> 'long' lvalue Var 0x24bdcc9a028 'n2' 'long'
          |     | `-ImplicitCastExpr 0x24bdcc97c28 <col:22> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x24bdcc97c08 <col:22> 'long' lvalue Var 0x24bdcc9a128 'r' 'long'
          |     |-BinaryOperator 0x24bdcc97cd0 <line:105:17, col:21> 'long' '='
          |     | |-DeclRefExpr 0x24bdcc97c60 <col:17> 'long' lvalue Var 0x24bdcc9a2a8 't' 'long'
          |     | `-ImplicitCastExpr 0x24bdcc97cb8 <col:21> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x24bdcc97c98 <col:21> 'long' lvalue Var 0x24bdcc9a228 'b2' 'long'
          |     |-BinaryOperator 0x24bdcc97df8 <line:106:17, col:31> 'long' '='
          |     | |-DeclRefExpr 0x24bdcc97cf0 <col:17> 'long' lvalue Var 0x24bdcc9a228 'b2' 'long'
          |     | `-BinaryOperator 0x24bdcc97dd8 <col:22, col:31> 'long' '-'
          |     |   |-ImplicitCastExpr 0x24bdcc97dc0 <col:22> 'long' <LValueToRValue>
          |     |   | `-DeclRefExpr 0x24bdcc97d10 <col:22> 'long' lvalue Var 0x24bdcc9a1a8 'b1' 'long'
          |     |   `-BinaryOperator 0x24bdcc97da0 <col:27, col:31> 'long' '*'
          |     |     |-ImplicitCastExpr 0x24bdcc97d70 <col:27> 'long' <LValueToRValue>
          |     |     | `-DeclRefExpr 0x24bdcc97d30 <col:27> 'long' lvalue Var 0x24bdcc9a0a8 'q' 'long'
          |     |     `-ImplicitCastExpr 0x24bdcc97d88 <col:31> 'long' <LValueToRValue>
          |     |       `-DeclRefExpr 0x24bdcc97d50 <col:31> 'long' lvalue Var 0x24bdcc9a228 'b2' 'long'
          |     `-BinaryOperator 0x24bdcc97e70 <line:107:17, col:22> 'long' '='
          |       |-DeclRefExpr 0x24bdcc97e18 <col:17> 'long' lvalue Var 0x24bdcc9a1a8 'b1' 'long'
          |       `-ImplicitCastExpr 0x24bdcc97e58 <col:22> 'long' <LValueToRValue>
          |         `-DeclRefExpr 0x24bdcc97e38 <col:22> 'long' lvalue Var 0x24bdcc9a2a8 't' 'long'
          `-BinaryOperator 0x24bdcc97f90 <line:109:18, col:23> 'int' '!='
            |-ImplicitCastExpr 0x24bdcc97f60 <col:18> 'long' <LValueToRValue>
            | `-DeclRefExpr 0x24bdcc97f18 <col:18> 'long' lvalue Var 0x24bdcc9a128 'r' 'long'
            `-ImplicitCastExpr 0x24bdcc97f78 <col:23> 'long' <IntegralCast>
              `-IntegerLiteral 0x24bdcc97f38 <col:23> 'int' 0
