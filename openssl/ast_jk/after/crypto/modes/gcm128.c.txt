TranslationUnitDecl 0x196f04f52f8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x196f04f5b90 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x196f04f5890 '__int128'
|-TypedefDecl 0x196f04f5c00 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x196f04f58b0 'unsigned __int128'
|-TypedefDecl 0x196f04f5f38 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x196f04f5cf0 'struct __NSConstantString_tag'
|   `-Record 0x196f04f5c58 '__NSConstantString_tag'
|-TypedefDecl 0x196f04f5fa8 <<invalid sloc>> <invalid sloc> implicit referenced size_t 'unsigned long long'
| `-BuiltinType 0x196f04f54d0 'unsigned long long'
|-TypedefDecl 0x196f04f6040 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x196f04f6000 'char *'
|   `-BuiltinType 0x196f04f5390 'char'
|-TypedefDecl 0x196f04f60b0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x196f04f6000 'char *'
|   `-BuiltinType 0x196f04f5390 'char'
|-TypedefDecl 0x196f04f6120 <.//openssl//file_jk/after\crypto\modes/modes_lcl.h:13:1, col:17> col:17 i64 'long long'
| `-BuiltinType 0x196f04f5430 'long long'
|-TypedefDecl 0x196f04f6190 <line:14:1, col:26> col:26 referenced u64 'unsigned long long'
| `-BuiltinType 0x196f04f54d0 'unsigned long long'
|-TypedefDecl 0x196f04f6200 <line:26:1, col:22> col:22 referenced u32 'unsigned int'
| `-BuiltinType 0x196f04f5490 'unsigned int'
|-TypedefDecl 0x196f04f6270 <line:27:1, col:23> col:23 referenced u8 'unsigned char'
| `-BuiltinType 0x196f04f5450 'unsigned char'
|-RecordDecl 0x196f1ec0460 <line:94:32, line:96:1> line:94:32 struct definition
| |-FieldDecl 0x196f1ec0550 <line:95:5, col:9> col:9 referenced hi 'u64':'unsigned long long'
| `-FieldDecl 0x196f1ec05b8 <col:5, col:13> col:13 referenced lo 'u64':'unsigned long long'
|-TypedefDecl 0x196f1ec0668 <line:94:24, line:96:3> col:3 referenced u128 'struct u128':'u128'
| `-ElaboratedType 0x196f1ec0610 'struct u128' sugar
|   `-RecordType 0x196f1ec0500 'u128'
|     `-Record 0x196f1ec0460 ''
|-RecordDecl 0x196f1ec06d8 <line:107:1, line:130:1> line:107:8 invalid struct gcm128_context definition
| |-RecordDecl 0x196f1ec0790 <line:109:5, line:114:5> line:109:5 union definition
| | |-FieldDecl 0x196f1ec0928 <line:110:9, col:16> col:13 u 'u64 [2]'
| | |-FieldDecl 0x196f1ec0a78 <line:111:9, col:16> col:13 d 'u32 [4]'
| | |-FieldDecl 0x196f1ec0bc8 <line:112:9, col:16> col:12 c 'u8 [16]'
| | `-FieldDecl 0x196f1ec0d48 <line:113:9, col:37> col:16 t 'size_t [2]'
| |-FieldDecl 0x196f1ec0df8 <line:109:5, line:114:7> col:7 Yi 'union (anonymous union at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x196f1ec0e70 <line:109:5, line:114:11> col:11 EKi 'union (anonymous union at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x196f1ec0ee8 <line:109:5, line:114:16> col:16 EK0 'union (anonymous union at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x196f1ec0f60 <line:109:5, line:114:21> col:21 len 'union (anonymous union at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x196f1ec0fd8 <line:109:5, line:114:26> col:26 Xi 'union (anonymous union at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x196f1ec1050 <line:109:5, line:114:30> col:30 H 'union (anonymous union at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x196f1ec1208 <line:122:5, col:19> col:10 Htable 'u128 [16]'
| |-FieldDecl 0x196f1ebd6a8 <line:123:5, col:52> col:12 gmult 'void (*)(u64 *, const u128 *)'
| |-FieldDecl 0x196f1ebdbb8 <line:124:5, line:125:30> line:124:12 ghash 'void (*)(u64 *, const u128 *, const u8 *, size_t)'
| |-FieldDecl 0x196f1ebdc28 <line:127:5, col:18> col:18 mres 'unsigned int'
| |-FieldDecl 0x196f1ebdc98 <col:5, col:24> col:24 ares 'unsigned int'
| |-FieldDecl 0x196f1ebdd08 <line:128:5, col:16> col:16 invalid block 'int'
| `-FieldDecl 0x196f1ebdd78 <line:129:5, col:11> col:11 key 'void *'
|-RecordDecl 0x196f1ebde38 <line:132:1, line:135:1> line:132:8 invalid struct xts128_context definition
| |-FieldDecl 0x196f1ebdf08 <line:133:5, col:11> col:11 key1 'void *'
| |-FieldDecl 0x196f1ebdf78 <col:5, col:18> col:18 key2 'void *'
| |-FieldDecl 0x196f1ebdfe8 <line:134:5, col:16> col:16 invalid block1 'int'
| `-FieldDecl 0x196f1ebe058 <col:5, col:24> col:24 invalid block2 'int'
|-RecordDecl 0x196f1ebe0b0 <line:137:1, line:145:1> line:137:8 invalid struct ccm128_context definition
| |-RecordDecl 0x196f1ebe170 <line:138:5, line:141:5> line:138:5 union definition
| | |-FieldDecl 0x196f1ebe290 <line:139:9, col:16> col:13 u 'u64 [2]'
| | `-FieldDecl 0x196f1ebe348 <line:140:9, col:16> col:12 c 'u8 [16]'
| |-FieldDecl 0x196f1ebf450 <line:138:5, line:141:7> col:7 nonce 'union (anonymous union at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:138:5)':'union ccm128_context::(anonymous at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:138:5)'
| |-FieldDecl 0x196f1ebf4c8 <line:138:5, line:141:14> col:14 cmac 'union (anonymous union at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:138:5)':'union ccm128_context::(anonymous at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:138:5)'
| |-FieldDecl 0x196f1ebf530 <line:142:5, col:9> col:9 blocks 'u64':'unsigned long long'
| |-FieldDecl 0x196f1ebf5a0 <line:143:5, col:16> col:16 invalid block 'int'
| `-FieldDecl 0x196f1ebf610 <line:144:5, col:11> col:11 key 'void *'
|-RecordDecl 0x196f1ebf6c0 <line:149:9, line:152:1> line:149:9 union definition
| |-FieldDecl 0x196f1ebf7e0 <line:150:5, col:12> col:9 a 'u64 [2]'
| `-FieldDecl 0x196f1ebf8a0 <line:151:5, col:23> col:19 c 'unsigned char [16]'
|-TypedefDecl 0x196f1ebf958 <line:149:1, line:152:3> col:3 referenced OCB_BLOCK 'union OCB_BLOCK':'OCB_BLOCK'
| `-ElaboratedType 0x196f1ebf900 'union OCB_BLOCK' sugar
|   `-RecordType 0x196f1ebf760 'OCB_BLOCK'
|     `-Record 0x196f1ebf6c0 ''
|-RecordDecl 0x196f1ebf9c8 <line:163:1, line:185:1> line:163:8 invalid struct ocb128_context definition
| |-FieldDecl 0x196f1ebfa98 <line:165:5, col:16> col:16 invalid encrypt 'int'
| |-FieldDecl 0x196f1ebfb08 <line:166:5, col:16> col:16 invalid decrypt 'int'
| |-FieldDecl 0x196f1ebfb78 <line:167:5, col:11> col:11 keyenc 'void *'
| |-FieldDecl 0x196f1ebfbe8 <line:168:5, col:11> col:11 keydec 'void *'
| |-FieldDecl 0x196f1ebfc58 <line:169:5, col:14> col:14 invalid stream 'int'
| |-FieldDecl 0x196f1ebfcc0 <line:171:5, col:12> col:12 l_index 'size_t':'unsigned long long'
| |-FieldDecl 0x196f1ebfd28 <line:172:5, col:12> col:12 max_l_index 'size_t':'unsigned long long'
| |-FieldDecl 0x196f1ebfdb0 <line:173:5, col:15> col:15 l_star 'OCB_BLOCK':'OCB_BLOCK'
| |-FieldDecl 0x196f1ebfe18 <line:174:5, col:15> col:15 l_dollar 'OCB_BLOCK':'OCB_BLOCK'
| |-FieldDecl 0x196f1ebfed8 <line:175:5, col:16> col:16 l 'OCB_BLOCK *'
| |-RecordDecl 0x196f1ebff30 <line:177:5, line:184:5> line:177:5 struct definition
| | |-FieldDecl 0x196f1ec0000 <line:178:9, col:13> col:13 blocks_hashed 'u64':'unsigned long long'
| | |-FieldDecl 0x196f1ec0068 <line:179:9, col:13> col:13 blocks_processed 'u64':'unsigned long long'
| | |-FieldDecl 0x196f1ec00d0 <line:180:9, col:19> col:19 offset_aad 'OCB_BLOCK':'OCB_BLOCK'
| | |-FieldDecl 0x196f1ec0138 <line:181:9, col:19> col:19 sum 'OCB_BLOCK':'OCB_BLOCK'
| | |-FieldDecl 0x196f1ec01a0 <line:182:9, col:19> col:19 offset 'OCB_BLOCK':'OCB_BLOCK'
| | `-FieldDecl 0x196f1ec0208 <line:183:9, col:19> col:19 checksum 'OCB_BLOCK':'OCB_BLOCK'
| `-FieldDecl 0x196f1ec02b8 <line:177:5, line:184:7> col:7 sess 'struct (anonymous struct at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:177:5)':'struct ocb128_context::(anonymous at .//openssl//file_jk/after\crypto\modes/modes_lcl.h:177:5)'
|-TypedefDecl 0x196f1ec0378 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x196f04f54d0 'unsigned long long'
|-TypedefDecl 0x196f1ec03e8 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x196f04f6000 'char *'
|   `-BuiltinType 0x196f04f5390 'char'
|-FunctionDecl 0x196f2003a70 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x196f2003b10 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x196f2003b80 <col:21> Implicit
|-FunctionDecl 0x196f2003bd8 prev 0x196f2003a70 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x196f2003908 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x196f2003cc8 <col:21> Inherited Implicit
|-TypedefDecl 0x196f2003d08 prev 0x196f04f5fa8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x196f04f54d0 'unsigned long long'
|-TypedefDecl 0x196f2003db0 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x196f2003d80 'size_t' sugar
|   |-Typedef 0x196f2003d08 'size_t'
|   `-BuiltinType 0x196f04f54d0 'unsigned long long'
|-TypedefDecl 0x196f2003e20 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x196f04f5430 'long long'
|-TypedefDecl 0x196f2003e90 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x196f04f5430 'long long'
|-TypedefDecl 0x196f2003f00 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x196f04f5470 'unsigned short'
|-TypedefDecl 0x196f2003f70 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x196f04f5470 'unsigned short'
|-TypedefDecl 0x196f2003fe0 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x196f04f5470 'unsigned short'
|-TypedefDecl 0x196f2004050 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x196f04f53f0 'int'
|-TypedefDecl 0x196f20040c0 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x196f04f5410 'long'
|-TypedefDecl 0x196f2004130 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x196f04f5430 'long long'
|-TypedefDecl 0x196f20041c0 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x196f2004190 '__time64_t' sugar
|   |-Typedef 0x196f2004130 '__time64_t'
|   `-BuiltinType 0x196f04f5430 'long long'
|-FunctionDecl 0x196f2004338 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x196f2004558 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x196f200ab80 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x196f2004698 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x196f2004710 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x196f2004788 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x196f2004808 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x196f200a920 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x196f200ac60 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x196f200ad20 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x196f200ae90 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x196f200ae40 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x196f200ade0 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x196f200ad00 'struct threadlocaleinfostruct'
|       `-Record 0x196f20189d0 'threadlocaleinfostruct'
|-TypedefDecl 0x196f200afa0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x196f200af50 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x196f200aef0 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x196f200adc0 'struct threadmbcinfostruct'
|       `-Record 0x196f200ad20 'threadmbcinfostruct'
|-RecordDecl 0x196f200aff8 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x196f200b0b0 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x196f200b170 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x196f200b200 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x196f200b290 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x196f200b348 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x196f200b2f0 'struct localeinfo_struct' sugar
|   `-RecordType 0x196f200b150 'struct localeinfo_struct'
|     `-Record 0x196f200b0b0 'localeinfo_struct'
|-TypedefDecl 0x196f200b420 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x196f200b3d0 'struct localeinfo_struct *'
|   `-ElaboratedType 0x196f200b2f0 'struct localeinfo_struct' sugar
|     `-RecordType 0x196f200b150 'struct localeinfo_struct'
|       `-Record 0x196f200b0b0 'localeinfo_struct'
|-RecordDecl 0x196f200b498 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x196f200b550 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x196f200b5c8 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x196f200b688 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x196f200b720 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x196f200b790 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x196f200b848 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x196f200b7f0 'struct localerefcount' sugar
|   `-RecordType 0x196f200b530 'struct localerefcount'
|     `-Record 0x196f200b498 'localerefcount'
|-RecordDecl 0x196f20189d0 prev 0x196f200ac60 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x196f2018a50 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x196f2018ac8 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x196f2018b38 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x196f2018ba8 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x196f2018c18 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x196f2018dd8 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x196f2018e48 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x196f2018eb8 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x196f2018f28 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x196f2018f98 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x196f2019008 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x196f2019060 parent 0x196f04f52f8 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x196f20191f0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x196f2019260 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x196f20192d0 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x196f2019340 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x196f20193b0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x196f2019420 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x196f2019530 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x196f2019668 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x196f2019718 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x196f20196c0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x196f200ad00 'struct threadlocaleinfostruct'
|     `-Record 0x196f20189d0 'threadlocaleinfostruct'
|-FunctionDecl 0x196f2015b30 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x196f20197a0 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x196f2019850 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x196f20198d0 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x196f2019948 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2015ef8 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x196f2015f98 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x196f2016000 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x196f2016068 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f20160e8 prev 0x196f2015ef8 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x196f2015c20 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x196f2015ca0 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x196f2015d18 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f20164a8 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x196f20161d0 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x196f2016250 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x196f20162c8 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x196f20179c0 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f2016590 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x196f2016610 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x196f2016688 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2016720 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2017cc8 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x196f2017d68 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x196f2017dd0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x196f2017e38 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f2017eb8 prev 0x196f2017cc8 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x196f2017ab0 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x196f2017b30 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x196f2017ba8 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2018278 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x196f2018318 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x196f2018380 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x196f20183e8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f2018468 prev 0x196f2018278 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x196f2017fa0 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x196f2018020 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x196f2018098 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2018908 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x196f2018578 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x196f2018610 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x196f2018690 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x196f2018708 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x196f2014cb8 <line:94:25> col:25 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x196f2014d58 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x196f2014dc0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x196f2014e28 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f2014ea8 prev 0x196f2014cb8 <col:9, col:107> col:25 used memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x196f20149e0 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x196f2014a60 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x196f2014ad8 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2015328 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x196f20153c8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x196f2015430 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x196f2015498 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x196f2015500 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f2015588 prev 0x196f2015328 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x196f2015070 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x196f20150f0 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x196f2015170 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x196f20151e8 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f2015648 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x196f2013a20 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x196f2015810 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x196f2015890 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x196f2015908 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f2013ad8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x196f2013ed0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x196f2013c00 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x196f2013c78 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2013cf8 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x196f20142a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x196f20140b0 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x196f2014130 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x196f2014350 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2014760 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x196f2014498 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x196f2014510 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x196f2014590 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x196f201abe0 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x196f201ac80 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x196f201ace8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x196f201ad60 prev 0x196f201abe0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x196f201a9f0 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x196f201aa70 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x196f201ae10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f201b168 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x196f201af58 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x196f201afd0 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x196f201b050 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x196f201b490 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x196f201b530 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x196f201b598 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x196f201b610 prev 0x196f201b490 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x196f201b310 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x196f201b390 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x196f201b6c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f201ba00 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x196f201baa0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f201bb08 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x196f201bb80 prev 0x196f201ba00 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x196f201b808 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x196f201b888 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x196f201bdd0 <line:121:32> col:32 implicit strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x196f201be70 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x196f201bee0 prev 0x196f201bdd0 <col:16, col:63> col:32 strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x196f201bc60 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x196f201c1d8 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x196f201bfb8 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x196f201c030 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f201c428 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x196f201c2b8 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x196f201c330 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x196f201c758 <line:131:1, line:133:1>
|   `-ReturnStmt 0x196f201c748 <line:132:5, col:51>
|     `-ConditionalOperator 0x196f201c718 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x196f201c588 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x196f201c568 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x196f201c538 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x196f201c4f0 <col:13> 'const char *' lvalue ParmVar 0x196f201c2b8 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x196f201c550 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x196f201c510 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x196f201c700 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x196f201c5a8 <col:24> 'int' 0
|       `-CallExpr 0x196f201c6a0 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x196f201c688 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x196f201c5d0 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x196f201c1d8 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x196f201c6d0 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x196f201c5f0 <col:36> 'const char *' lvalue ParmVar 0x196f201c2b8 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x196f201c6e8 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x196f201c610 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x196f201c330 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x196f201ca58 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x196f201c788 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x196f201c800 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x196f201c880 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x196f201c8f8 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x196f201cd60 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x196f201ce00 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x196f201ce68 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x196f201ced0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f201cf50 prev 0x196f201cd60 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x196f201cb48 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x196f201cbc8 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x196f201cc40 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x196f201d188 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x196f201d038 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x196f201d450 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x196f201d4f0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f201d558 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x196f201d5d0 prev 0x196f201d450 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x196f201d260 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x196f201d2e0 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x196f201d830 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x196f201d6b0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x196f201d730 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x196f201daa0 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x196f201d910 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x196f201d990 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x196f201de58 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x196f201db80 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x196f201dc00 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x196f201dc78 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f201e0c0 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x196f201df40 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x196f201dfc0 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x196f201e3b8 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x196f201e1a0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x196f201e220 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x196f201e298 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f201e620 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x196f201e4a0 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x196f201e520 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x196f201e918 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x196f201e700 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x196f201e780 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x196f201e7f8 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f1fda5c8 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x196f1fda2f0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x196f1fda370 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x196f1fda3e8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f1fdaa30 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f1fda6b0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x196f1fda730 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x196f1fda7a8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f1fda820 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f1fdad38 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x196f1fdab20 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x196f1fdaba0 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x196f1fdac18 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f1fdb0d0 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f1fdae20 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x196f1fdaea0 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x196f1fdaf18 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f1fdaf90 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2074048 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x196f20740e8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f2074150 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x196f20741c8 prev 0x196f2074048 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x196f1fdb1c0 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x196f1fdb240 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x196f2074480 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x196f20743a0 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x196f2074528 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2074900 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x196f2074670 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x196f20746e8 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2074768 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x196f2074c18 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x196f2074cb8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x196f2074d28 prev 0x196f2074c18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x196f2074ae0 <col:90> col:93 'int'
| `-DeprecatedAttr 0x196f2074dd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2072130 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x196f2071f20 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x196f2071f98 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2072018 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x196f2072438 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x196f2072218 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x196f2072290 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2072728 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x196f20725d8 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x196f20727d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2072be0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f2072918 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x196f2072990 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2072a08 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2074ff0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x196f2072d88 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x196f2072e00 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x196f20750a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2075558 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x196f20751e8 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x196f2075260 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x196f20752e0 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x196f2075358 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x196f20759d8 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x196f2075a78 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x196f2075ae0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f2075b48 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f2075bc8 prev 0x196f20759d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x196f2075708 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x196f2075788 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x196f2075800 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f2075c80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2078020 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x196f20780c0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x196f2078128 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f2078190 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f2078210 prev 0x196f2078020 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x196f2075dc8 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x196f2075e48 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x196f2075ec0 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2078510 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x196f20782f8 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x196f2078378 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x196f20783f0 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f20788a8 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f20785f8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x196f2078678 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x196f20786f0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2078768 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2078c40 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x196f2078998 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x196f2078a10 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x196f2078a90 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x196f2078b08 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x196f2072fb8 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x196f2073058 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x196f20730c0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f2073128 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f20731a8 prev 0x196f2072fb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x196f2078df0 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x196f2078e70 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x196f2078ee8 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f2073260 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2073718 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x196f20733a8 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x196f2073420 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x196f20734a0 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x196f2073518 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2073b98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x196f20738c8 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x196f2073948 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x196f20739c0 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f2073c50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2075fd0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x196f2076070 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f20760d8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x196f2076150 prev 0x196f2075fd0 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x196f2073d98 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x196f2073e18 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x196f20763b0 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x196f2076450 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f20764b8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x196f2076530 prev 0x196f20763b0 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x196f2076230 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x196f20762b0 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x196f20766f0 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x196f2076610 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x196f2076940 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x196f20769e0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f2076a48 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x196f2076ac0 prev 0x196f2076940 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x196f20767c8 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x196f2076848 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x196f2076d20 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x196f2076dc0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f2076e28 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x196f2076ea0 prev 0x196f2076d20 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x196f2076ba0 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x196f2076c20 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x196f20771e0 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x196f2077280 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x196f20772e8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x196f2077360 prev 0x196f20771e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x196f2077060 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x196f20770e0 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x196f2077410 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f20777f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x196f2077558 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x196f20775d8 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x196f2077658 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x196f2077a50 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x196f20778e0 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x196f2077958 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2077cd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x196f2077bf0 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x196f2077d78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f20710a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f2077ec0 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x196f2070f10 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2070f88 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f20713c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x196f2071248 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x196f20712c0 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x196f2071470 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2071880 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x196f2071920 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x196f2071988 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x196f20719f0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f2071a70 prev 0x196f2071880 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x196f20715b8 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x196f2071638 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x196f20716b0 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f207dfe0 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f2071b58 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x196f2071bd8 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x196f2071c50 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2071cc8 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f207e290 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x196f207e330 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x196f207e3a0 prev 0x196f207e290 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x196f207e1b0 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x196f207e448 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x196f207e790 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x196f207e610 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x196f207e690 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x196f207e840 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x196f207eb88 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x196f207ea08 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x196f207ea88 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x196f207ec38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x196f207eee0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x196f207ee00 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x196f207ef88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x196f207b388 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x196f207b170 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x196f207b1f0 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x196f207b268 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f207b440 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x196f207b820 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x196f207b608 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x196f207b688 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x196f207b700 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f207b8d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x196f207bb80 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x196f207baa0 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x196f207bc28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x196f207eff0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x196f207bdf0 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x196f207be70 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x196f207f0a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x196f207f348 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x196f207f268 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x196f207f3f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x196f207f680 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x196f207f510 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x196f207fa10 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x196f207f750 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x196f207f7c8 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x196f207f840 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x196f207fdc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f207fbb0 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x196f207fc28 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x196f207fe78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f20791a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x196f2079248 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x196f20792b0 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x196f2079328 prev 0x196f20791a8 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x196f2078f90 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x196f2079008 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x196f2079620 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x196f20796c0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x196f2079728 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x196f20797a0 prev 0x196f2079620 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x196f2079400 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x196f2079478 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x196f2079a80 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x196f2079878 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x196f20798f0 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x196f2079968 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x196f2079d90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f2079c20 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x196f2079c98 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x196f2079e40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2080218 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f2080000 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x196f2080078 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x196f2080460 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x196f2080500 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x196f2080570 prev 0x196f2080460 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x196f20802f0 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x196f2080858 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x196f2080640 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x196f20806b8 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2080aa0 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x196f2080930 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x196f20809a8 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x196f2080e38 <line:306:1, line:308:1>
|   `-ReturnStmt 0x196f2080e28 <line:307:5, col:56>
|     `-ConditionalOperator 0x196f2080df8 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x196f2080c60 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x196f2080c40 <col:13, line:36:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x196f2080c10 <line:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x196f2080b68 <col:13> 'const wchar_t *' lvalue ParmVar 0x196f2080930 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x196f2080c28 <line:36:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x196f2080bf0 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x196f2080bc8 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x196f2080b88 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x196f2080de0 <line:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x196f2080c80 <col:29> 'int' 0
|       `-CallExpr 0x196f2080d80 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x196f2080d68 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x196f2080ca8 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x196f2080858 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x196f2080db0 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x196f2080cc8 <col:41> 'const wchar_t *' lvalue ParmVar 0x196f2080930 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x196f2080dc8 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x196f2080ce8 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20809a8 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x196f207c1c8 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x196f2080e60 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x196f2080ed8 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x196f2080f50 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x196f207bfc0 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x196f207c630 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x196f207c370 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x196f207c3e8 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x196f207c460 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f207c6e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f207caf8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x196f207cb98 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x196f207cc00 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x196f207cc68 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x196f207cce8 prev 0x196f207caf8 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x196f207c828 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f207c8a0 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x196f207c918 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f207d088 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x196f207cdc8 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x196f207ce40 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x196f207ceb8 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x196f207cf30 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x196f207d438 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x196f207d230 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x196f207d2a8 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x196f207d320 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f207d4f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f207d848 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f207d630 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x196f207d6a8 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x196f207da90 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x196f207d920 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x196f207d998 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x196f207dcd8 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f207db68 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x196f207dbe0 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x196f207df20 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f207ddb0 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x196f207de28 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x196f207a1f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f207a088 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x196f207a100 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x196f207a2a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f207a710 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x196f207a3e8 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x196f207a460 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x196f207a540 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x196f207aa30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x196f207a8b8 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x196f207aad8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f207aee0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x196f207ac18 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x196f207ac90 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f207ad10 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x196f2086260 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x196f2086188 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x196f2086308 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f20866d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x196f2086448 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x196f20864c0 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2086538 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x196f2086928 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f20867b0 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x196f2086828 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x196f2086cc8 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x196f2086a00 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f2086a78 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x196f2086af0 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2086fb8 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x196f2086da8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f2086e20 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x196f2086e98 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2087420 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f20870b0 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f2087128 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x196f20871a0 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2087218 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2087878 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x196f2087508 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x196f2087580 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x196f20875f8 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x196f2087670 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2087ce0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x196f2087a20 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x196f2087a98 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x196f2087b10 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f2087d98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2084040 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x196f2087ed8 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x196f20843d0 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x196f2084110 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x196f2084188 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2084200 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x196f2084788 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x196f2084570 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x196f20845e8 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x196f2084838 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2084b98 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x196f2084978 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x196f20849f0 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2084e08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x196f2084d30 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x196f2084eb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2089350 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f2089090 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x196f2089108 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2089180 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2089708 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x196f20894f0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x196f2089568 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x196f20897b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2089a68 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x196f20898f8 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x196f2089970 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2089cd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x196f2089c00 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x196f2089d80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2082060 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f2089ec0 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x196f2089f38 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2089fb0 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2082370 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x196f2082200 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x196f2082278 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x196f2082420 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x196f2082820 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x196f2082560 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x196f20825d8 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x196f2082650 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2082c68 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f2082900 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x196f2082978 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x196f20829f0 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2082a68 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2082ec8 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f2082d50 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x196f2082dc8 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x196f2088218 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x196f2082fa0 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f2088080 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x196f20880f8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2088470 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f20882f8 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x196f2088370 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x196f2088758 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x196f2088548 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f20885c0 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x196f2088638 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2088a48 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x196f2088838 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f20888b0 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x196f2088928 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2088dd0 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f2088b28 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f2088ba0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x196f2088c18 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f2088c90 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2085098 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x196f2088eb8 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f2088f30 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x196f2088fa8 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x196f2085420 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x196f2085178 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f20851f0 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x196f2085268 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x196f20852e0 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x196f2085680 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x196f20855a8 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x196f2085728 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x196f2085a60 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f20858e8 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f2085960 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x196f2085b10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x196f2085ee0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x196f2085cd0 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f2085d48 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x196f2085dc0 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f2085f98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x196f20833b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x196f20831a8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x196f2083220 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x196f2083298 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x196f2083468 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x196f2083700 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x196f2083628 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x196f20837a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x196f2083ad8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x196f2083968 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x196f20839e0 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x196f2083b88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x196f2083e20 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x196f2083d48 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x196f2083ec8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x196f208d258 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x196f208d180 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x196f208d300 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x196f208d638 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x196f208d4c0 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x196f208d538 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x196f208d6e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-FunctionDecl 0x196f208daf8 <.//openssl//file_jk/after\crypto\modes\gcm128.c:216:1, line:288:1> line:216:13 used gcm_init_4bit 'void (u128 *, u64 *)' static
| |-ParmVarDecl 0x196f208d8f0 <col:27, col:41> col:32 used Htable 'u128 *':'u128 *'
| |-ParmVarDecl 0x196f208d9b8 <col:44, col:51> col:48 used H 'u64 *':'u64 *'
| `-CompoundStmt 0x196f2093090 <line:217:1, line:288:1>
|   |-DeclStmt 0x196f208dc38 <line:218:5, col:11>
|   | `-VarDecl 0x196f208dbd0 <col:5, col:10> col:10 used V 'u128':'u128'
|   |-BinaryOperator 0x196f208dd40 <line:223:5, col:20> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x196f208dcd0 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | `-ArraySubscriptExpr 0x196f208dcb0 <col:5, col:13> 'u128':'u128' lvalue
|   | |   |-ImplicitCastExpr 0x196f208dc98 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x196f208dc50 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |   `-IntegerLiteral 0x196f208dc70 <col:12> 'int' 0
|   | `-ImplicitCastExpr 0x196f208dd28 <col:20> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x196f208dd00 <col:20> 'int' 0
|   |-BinaryOperator 0x196f208de50 <line:224:5, col:20> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x196f208dde0 <col:5, col:15> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | | `-ArraySubscriptExpr 0x196f208ddc0 <col:5, col:13> 'u128':'u128' lvalue
|   | |   |-ImplicitCastExpr 0x196f208dda8 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x196f208dd60 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |   `-IntegerLiteral 0x196f208dd80 <col:12> 'int' 0
|   | `-ImplicitCastExpr 0x196f208de38 <col:20> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x196f208de10 <col:20> 'int' 0
|   |-BinaryOperator 0x196f208df70 <line:225:5, col:15> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x196f208dea8 <col:5, col:7> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | `-DeclRefExpr 0x196f208de70 <col:5> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | `-ImplicitCastExpr 0x196f208df58 <col:12, col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x196f208df38 <col:12, col:15> 'u64':'unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x196f208df20 <col:12> 'u64 *':'u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x196f208ded8 <col:12> 'u64 *':'u64 *' lvalue ParmVar 0x196f208d9b8 'H' 'u64 *':'u64 *'
|   |     `-IntegerLiteral 0x196f208def8 <col:14> 'int' 0
|   |-BinaryOperator 0x196f208e078 <line:226:5, col:15> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x196f208dfb0 <col:5, col:7> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | | `-DeclRefExpr 0x196f208df90 <col:5> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | `-ImplicitCastExpr 0x196f208e060 <col:12, col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x196f208e040 <col:12, col:15> 'u64':'unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x196f208e028 <col:12> 'u64 *':'u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x196f208dfe0 <col:12> 'u64 *':'u64 *' lvalue ParmVar 0x196f208d9b8 'H' 'u64 *':'u64 *'
|   |     `-IntegerLiteral 0x196f208e000 <col:14> 'int' 1
|   |-BinaryOperator 0x196f208b148 <line:243:5, col:17> 'u128':'u128' '='
|   | |-ArraySubscriptExpr 0x196f208b0f0 <col:5, col:13> 'u128':'u128' lvalue
|   | | |-ImplicitCastExpr 0x196f208b0d8 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x196f208e098 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | `-IntegerLiteral 0x196f208b0b0 <col:12> 'int' 8
|   | `-ImplicitCastExpr 0x196f208b130 <col:17> 'u128':'u128' <LValueToRValue>
|   |   `-DeclRefExpr 0x196f208b110 <col:17> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |-DoStmt 0x196f208bfe8 <line:23:25, line:34:10>
|   | |-CompoundStmt 0x196f208bfa8 <line:23:28, line:33:11>
|   | | `-IfStmt 0x196f208bf80 <line:24:9, line:33:9> has_else
|   | |   |-BinaryOperator 0x196f208b1d8 <line:24:13, col:29> 'int' '=='
|   | |   | |-UnaryExprOrTypeTraitExpr 0x196f208b178 <col:13, col:26> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   | |   | `-ImplicitCastExpr 0x196f208b1c0 <col:29> 'unsigned long long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x196f208b198 <col:29> 'int' 8
|   | |   |-CompoundStmt 0x196f208b818 <col:32, line:28:9>
|   | |   | |-DeclStmt 0x196f208b420 <line:25:17, col:63>
|   | |   | | `-VarDecl 0x196f208b208 <col:17, col:62> col:21 used T 'u64':'unsigned long long' cinit
|   | |   | |   `-BinaryOperator 0x196f208b400 <<scratch space>:294:1, .//openssl//file_jk/after\crypto\modes\gcm128.c:25:62> 'unsigned long long' '&'
|   | |   | |     |-IntegerLiteral 0x196f208b270 <<scratch space>:294:1> 'unsigned long long' 16212958658533785600
|   | |   | |     `-ParenExpr 0x196f208b3e0 <.//openssl//file_jk/after\crypto\modes\gcm128.c:25:51, col:62> 'unsigned long long'
|   | |   | |       `-BinaryOperator 0x196f208b3c0 <col:52, col:61> 'unsigned long long' '-'
|   | |   | |         |-ImplicitCastExpr 0x196f208b3a8 <col:52> 'unsigned long long' <IntegralCast>
|   | |   | |         | `-IntegerLiteral 0x196f208b298 <col:52> 'int' 0
|   | |   | |         `-ParenExpr 0x196f208b388 <col:54, col:61> 'unsigned long long'
|   | |   | |           `-BinaryOperator 0x196f208b368 <line:244:16, line:25:60> 'unsigned long long' '&'
|   | |   | |             |-ImplicitCastExpr 0x196f208b338 <line:244:16, line:25:57> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |             | `-MemberExpr 0x196f208b2e0 <line:244:16, line:25:57> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |   | |             |   `-DeclRefExpr 0x196f208b2c0 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | |             `-ImplicitCastExpr 0x196f208b350 <line:25:60> 'unsigned long long' <IntegralCast>
|   | |   | |               `-IntegerLiteral 0x196f208b310 <col:60> 'int' 1
|   | |   | |-BinaryOperator 0x196f208b648 <line:244:16, line:26:44> 'u64':'unsigned long long' '='
|   | |   | | |-MemberExpr 0x196f208b458 <line:244:16, line:26:19> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |   | | | `-DeclRefExpr 0x196f208b438 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | | `-BinaryOperator 0x196f208b628 <line:26:25, col:44> 'unsigned long long' '|'
|   | |   | |   |-ParenExpr 0x196f208b538 <col:25, col:34> 'u64':'unsigned long long'
|   | |   | |   | `-BinaryOperator 0x196f208b518 <line:244:16, line:26:32> 'u64':'unsigned long long' '<<'
|   | |   | |   |   |-ImplicitCastExpr 0x196f208b500 <line:244:16, line:26:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |   |   | `-MemberExpr 0x196f208b4a8 <line:244:16, line:26:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   | |   |   |   `-DeclRefExpr 0x196f208b488 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | |   |   `-IntegerLiteral 0x196f208b4d8 <line:26:32> 'int' 63
|   | |   | |   `-ParenExpr 0x196f208b608 <col:36, col:44> 'u64':'unsigned long long'
|   | |   | |     `-BinaryOperator 0x196f208b5e8 <line:244:16, line:26:43> 'u64':'unsigned long long' '>>'
|   | |   | |       |-ImplicitCastExpr 0x196f208b5d0 <line:244:16, line:26:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |       | `-MemberExpr 0x196f208b578 <line:244:16, line:26:39> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |   | |       |   `-DeclRefExpr 0x196f208b558 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | |       `-IntegerLiteral 0x196f208b5a8 <line:26:43> 'int' 1
|   | |   | `-BinaryOperator 0x196f208b7f8 <line:244:16, line:27:36> 'u64':'unsigned long long' '='
|   | |   |   |-MemberExpr 0x196f208b688 <line:244:16, line:27:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   | `-DeclRefExpr 0x196f208b668 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   |   `-BinaryOperator 0x196f208b7d8 <line:27:25, col:36> 'unsigned long long' '^'
|   | |   |     |-ParenExpr 0x196f208b768 <col:25, col:34> 'u64':'unsigned long long'
|   | |   |     | `-BinaryOperator 0x196f208b748 <line:244:16, line:27:32> 'u64':'unsigned long long' '>>'
|   | |   |     |   |-ImplicitCastExpr 0x196f208b730 <line:244:16, line:27:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |     |   | `-MemberExpr 0x196f208b6d8 <line:244:16, line:27:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |     |   |   `-DeclRefExpr 0x196f208b6b8 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   |     |   `-IntegerLiteral 0x196f208b708 <line:27:32> 'int' 1
|   | |   |     `-ImplicitCastExpr 0x196f208b7c0 <col:36> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x196f208b788 <col:36> 'u64':'unsigned long long' lvalue Var 0x196f208b208 'T' 'u64':'unsigned long long'
|   | |   `-CompoundStmt 0x196f208bf58 <line:29:14, line:33:9>
|   | |     |-DeclStmt 0x196f208bac0 <line:30:17, col:56>
|   | |     | `-VarDecl 0x196f208b850 <col:17, col:55> col:21 used T 'u32':'unsigned int' cinit
|   | |     |   `-BinaryOperator 0x196f208baa0 <col:25, col:55> 'unsigned int' '&'
|   | |     |     |-IntegerLiteral 0x196f208b8b8 <col:25> 'unsigned int' 3774873600
|   | |     |     `-ParenExpr 0x196f208ba80 <col:39, col:55> 'unsigned int'
|   | |     |       `-BinaryOperator 0x196f208ba60 <col:40, col:54> 'unsigned int' '-'
|   | |     |         |-ImplicitCastExpr 0x196f208ba48 <col:40> 'unsigned int' <IntegralCast>
|   | |     |         | `-IntegerLiteral 0x196f208b8e0 <col:40> 'int' 0
|   | |     |         `-CStyleCastExpr 0x196f208ba20 <col:42, col:54> 'u32':'unsigned int' <IntegralCast>
|   | |     |           `-ParenExpr 0x196f208ba00 <col:47, col:54> 'unsigned long long'
|   | |     |             `-BinaryOperator 0x196f208b9b0 <line:244:16, line:30:53> 'unsigned long long' '&'
|   | |     |               |-ImplicitCastExpr 0x196f208b980 <line:244:16, line:30:50> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |               | `-MemberExpr 0x196f208b928 <line:244:16, line:30:50> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |     |               |   `-DeclRefExpr 0x196f208b908 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     |               `-ImplicitCastExpr 0x196f208b998 <line:30:53> 'unsigned long long' <IntegralCast>
|   | |     |                 `-IntegerLiteral 0x196f208b958 <col:53> 'int' 1
|   | |     |-BinaryOperator 0x196f208bce8 <line:244:16, line:31:44> 'u64':'unsigned long long' '='
|   | |     | |-MemberExpr 0x196f208baf8 <line:244:16, line:31:19> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |     | | `-DeclRefExpr 0x196f208bad8 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     | `-BinaryOperator 0x196f208bcc8 <line:31:25, col:44> 'unsigned long long' '|'
|   | |     |   |-ParenExpr 0x196f208bbd8 <col:25, col:34> 'u64':'unsigned long long'
|   | |     |   | `-BinaryOperator 0x196f208bbb8 <line:244:16, line:31:32> 'u64':'unsigned long long' '<<'
|   | |     |   |   |-ImplicitCastExpr 0x196f208bba0 <line:244:16, line:31:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |   |   | `-MemberExpr 0x196f208bb48 <line:244:16, line:31:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |     |   |   |   `-DeclRefExpr 0x196f208bb28 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     |   |   `-IntegerLiteral 0x196f208bb78 <line:31:32> 'int' 63
|   | |     |   `-ParenExpr 0x196f208bca8 <col:36, col:44> 'u64':'unsigned long long'
|   | |     |     `-BinaryOperator 0x196f208bc88 <line:244:16, line:31:43> 'u64':'unsigned long long' '>>'
|   | |     |       |-ImplicitCastExpr 0x196f208bc70 <line:244:16, line:31:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |       | `-MemberExpr 0x196f208bc18 <line:244:16, line:31:39> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |     |       |   `-DeclRefExpr 0x196f208bbf8 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     |       `-IntegerLiteral 0x196f208bc48 <line:31:43> 'int' 1
|   | |     `-BinaryOperator 0x196f208bf38 <line:244:16, line:32:47> 'u64':'unsigned long long' '='
|   | |       |-MemberExpr 0x196f208bd28 <line:244:16, line:32:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       | `-DeclRefExpr 0x196f208bd08 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |       `-BinaryOperator 0x196f208bf18 <line:32:25, col:47> 'unsigned long long' '^'
|   | |         |-ParenExpr 0x196f208be08 <col:25, col:34> 'u64':'unsigned long long'
|   | |         | `-BinaryOperator 0x196f208bde8 <line:244:16, line:32:32> 'u64':'unsigned long long' '>>'
|   | |         |   |-ImplicitCastExpr 0x196f208bdd0 <line:244:16, line:32:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |         |   | `-MemberExpr 0x196f208bd78 <line:244:16, line:32:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |         |   |   `-DeclRefExpr 0x196f208bd58 <line:244:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |         |   `-IntegerLiteral 0x196f208bda8 <line:32:32> 'int' 1
|   | |         `-ParenExpr 0x196f208bef8 <col:36, col:47> 'u64':'unsigned long long'
|   | |           `-BinaryOperator 0x196f208bed8 <col:37, col:45> 'u64':'unsigned long long' '<<'
|   | |             |-CStyleCastExpr 0x196f208be88 <col:37, col:42> 'u64':'unsigned long long' <IntegralCast>
|   | |             | `-ImplicitCastExpr 0x196f208be70 <col:42> 'u32':'unsigned int' <LValueToRValue> part_of_explicit_cast
|   | |             |   `-DeclRefExpr 0x196f208be28 <col:42> 'u32':'unsigned int' lvalue Var 0x196f208b850 'T' 'u32':'unsigned int'
|   | |             `-IntegerLiteral 0x196f208beb0 <col:45> 'int' 32
|   | `-IntegerLiteral 0x196f208bfc0 <line:34:9> 'int' 0
|   |-BinaryOperator 0x196f208c0d8 <line:245:5, col:17> 'u128':'u128' '='
|   | |-ArraySubscriptExpr 0x196f208c068 <col:5, col:13> 'u128':'u128' lvalue
|   | | |-ImplicitCastExpr 0x196f208c050 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x196f208c008 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | `-IntegerLiteral 0x196f208c028 <col:12> 'int' 4
|   | `-ImplicitCastExpr 0x196f208c0c0 <col:17> 'u128':'u128' <LValueToRValue>
|   |   `-DeclRefExpr 0x196f208c088 <col:17> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |-DoStmt 0x196f208cf78 <line:23:25, line:34:10>
|   | |-CompoundStmt 0x196f208cf38 <line:23:28, line:33:11>
|   | | `-IfStmt 0x196f208cf10 <line:24:9, line:33:9> has_else
|   | |   |-BinaryOperator 0x196f208c168 <line:24:13, col:29> 'int' '=='
|   | |   | |-UnaryExprOrTypeTraitExpr 0x196f208c108 <col:13, col:26> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   | |   | `-ImplicitCastExpr 0x196f208c150 <col:29> 'unsigned long long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x196f208c128 <col:29> 'int' 8
|   | |   |-CompoundStmt 0x196f208c7a8 <col:32, line:28:9>
|   | |   | |-DeclStmt 0x196f208c3b0 <line:25:17, col:63>
|   | |   | | `-VarDecl 0x196f208c198 <col:17, col:62> col:21 used T 'u64':'unsigned long long' cinit
|   | |   | |   `-BinaryOperator 0x196f208c390 <<scratch space>:295:1, .//openssl//file_jk/after\crypto\modes\gcm128.c:25:62> 'unsigned long long' '&'
|   | |   | |     |-IntegerLiteral 0x196f208c200 <<scratch space>:295:1> 'unsigned long long' 16212958658533785600
|   | |   | |     `-ParenExpr 0x196f208c370 <.//openssl//file_jk/after\crypto\modes\gcm128.c:25:51, col:62> 'unsigned long long'
|   | |   | |       `-BinaryOperator 0x196f208c350 <col:52, col:61> 'unsigned long long' '-'
|   | |   | |         |-ImplicitCastExpr 0x196f208c338 <col:52> 'unsigned long long' <IntegralCast>
|   | |   | |         | `-IntegerLiteral 0x196f208c228 <col:52> 'int' 0
|   | |   | |         `-ParenExpr 0x196f208c318 <col:54, col:61> 'unsigned long long'
|   | |   | |           `-BinaryOperator 0x196f208c2f8 <line:246:16, line:25:60> 'unsigned long long' '&'
|   | |   | |             |-ImplicitCastExpr 0x196f208c2c8 <line:246:16, line:25:57> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |             | `-MemberExpr 0x196f208c270 <line:246:16, line:25:57> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |   | |             |   `-DeclRefExpr 0x196f208c250 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | |             `-ImplicitCastExpr 0x196f208c2e0 <line:25:60> 'unsigned long long' <IntegralCast>
|   | |   | |               `-IntegerLiteral 0x196f208c2a0 <col:60> 'int' 1
|   | |   | |-BinaryOperator 0x196f208c5d8 <line:246:16, line:26:44> 'u64':'unsigned long long' '='
|   | |   | | |-MemberExpr 0x196f208c3e8 <line:246:16, line:26:19> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |   | | | `-DeclRefExpr 0x196f208c3c8 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | | `-BinaryOperator 0x196f208c5b8 <line:26:25, col:44> 'unsigned long long' '|'
|   | |   | |   |-ParenExpr 0x196f208c4c8 <col:25, col:34> 'u64':'unsigned long long'
|   | |   | |   | `-BinaryOperator 0x196f208c4a8 <line:246:16, line:26:32> 'u64':'unsigned long long' '<<'
|   | |   | |   |   |-ImplicitCastExpr 0x196f208c490 <line:246:16, line:26:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |   |   | `-MemberExpr 0x196f208c438 <line:246:16, line:26:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   | |   |   |   `-DeclRefExpr 0x196f208c418 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | |   |   `-IntegerLiteral 0x196f208c468 <line:26:32> 'int' 63
|   | |   | |   `-ParenExpr 0x196f208c598 <col:36, col:44> 'u64':'unsigned long long'
|   | |   | |     `-BinaryOperator 0x196f208c578 <line:246:16, line:26:43> 'u64':'unsigned long long' '>>'
|   | |   | |       |-ImplicitCastExpr 0x196f208c560 <line:246:16, line:26:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |       | `-MemberExpr 0x196f208c508 <line:246:16, line:26:39> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |   | |       |   `-DeclRefExpr 0x196f208c4e8 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | |       `-IntegerLiteral 0x196f208c538 <line:26:43> 'int' 1
|   | |   | `-BinaryOperator 0x196f208c788 <line:246:16, line:27:36> 'u64':'unsigned long long' '='
|   | |   |   |-MemberExpr 0x196f208c618 <line:246:16, line:27:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   | `-DeclRefExpr 0x196f208c5f8 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   |   `-BinaryOperator 0x196f208c768 <line:27:25, col:36> 'unsigned long long' '^'
|   | |   |     |-ParenExpr 0x196f208c6f8 <col:25, col:34> 'u64':'unsigned long long'
|   | |   |     | `-BinaryOperator 0x196f208c6d8 <line:246:16, line:27:32> 'u64':'unsigned long long' '>>'
|   | |   |     |   |-ImplicitCastExpr 0x196f208c6c0 <line:246:16, line:27:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |     |   | `-MemberExpr 0x196f208c668 <line:246:16, line:27:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |     |   |   `-DeclRefExpr 0x196f208c648 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   |     |   `-IntegerLiteral 0x196f208c698 <line:27:32> 'int' 1
|   | |   |     `-ImplicitCastExpr 0x196f208c750 <col:36> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x196f208c718 <col:36> 'u64':'unsigned long long' lvalue Var 0x196f208c198 'T' 'u64':'unsigned long long'
|   | |   `-CompoundStmt 0x196f208cee8 <line:29:14, line:33:9>
|   | |     |-DeclStmt 0x196f208ca50 <line:30:17, col:56>
|   | |     | `-VarDecl 0x196f208c7e0 <col:17, col:55> col:21 used T 'u32':'unsigned int' cinit
|   | |     |   `-BinaryOperator 0x196f208ca30 <col:25, col:55> 'unsigned int' '&'
|   | |     |     |-IntegerLiteral 0x196f208c848 <col:25> 'unsigned int' 3774873600
|   | |     |     `-ParenExpr 0x196f208ca10 <col:39, col:55> 'unsigned int'
|   | |     |       `-BinaryOperator 0x196f208c9f0 <col:40, col:54> 'unsigned int' '-'
|   | |     |         |-ImplicitCastExpr 0x196f208c9d8 <col:40> 'unsigned int' <IntegralCast>
|   | |     |         | `-IntegerLiteral 0x196f208c870 <col:40> 'int' 0
|   | |     |         `-CStyleCastExpr 0x196f208c9b0 <col:42, col:54> 'u32':'unsigned int' <IntegralCast>
|   | |     |           `-ParenExpr 0x196f208c990 <col:47, col:54> 'unsigned long long'
|   | |     |             `-BinaryOperator 0x196f208c940 <line:246:16, line:30:53> 'unsigned long long' '&'
|   | |     |               |-ImplicitCastExpr 0x196f208c910 <line:246:16, line:30:50> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |               | `-MemberExpr 0x196f208c8b8 <line:246:16, line:30:50> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |     |               |   `-DeclRefExpr 0x196f208c898 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     |               `-ImplicitCastExpr 0x196f208c928 <line:30:53> 'unsigned long long' <IntegralCast>
|   | |     |                 `-IntegerLiteral 0x196f208c8e8 <col:53> 'int' 1
|   | |     |-BinaryOperator 0x196f208cc78 <line:246:16, line:31:44> 'u64':'unsigned long long' '='
|   | |     | |-MemberExpr 0x196f208ca88 <line:246:16, line:31:19> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |     | | `-DeclRefExpr 0x196f208ca68 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     | `-BinaryOperator 0x196f208cc58 <line:31:25, col:44> 'unsigned long long' '|'
|   | |     |   |-ParenExpr 0x196f208cb68 <col:25, col:34> 'u64':'unsigned long long'
|   | |     |   | `-BinaryOperator 0x196f208cb48 <line:246:16, line:31:32> 'u64':'unsigned long long' '<<'
|   | |     |   |   |-ImplicitCastExpr 0x196f208cb30 <line:246:16, line:31:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |   |   | `-MemberExpr 0x196f208cad8 <line:246:16, line:31:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |     |   |   |   `-DeclRefExpr 0x196f208cab8 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     |   |   `-IntegerLiteral 0x196f208cb08 <line:31:32> 'int' 63
|   | |     |   `-ParenExpr 0x196f208cc38 <col:36, col:44> 'u64':'unsigned long long'
|   | |     |     `-BinaryOperator 0x196f208cc18 <line:246:16, line:31:43> 'u64':'unsigned long long' '>>'
|   | |     |       |-ImplicitCastExpr 0x196f208cc00 <line:246:16, line:31:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |       | `-MemberExpr 0x196f208cba8 <line:246:16, line:31:39> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |     |       |   `-DeclRefExpr 0x196f208cb88 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     |       `-IntegerLiteral 0x196f208cbd8 <line:31:43> 'int' 1
|   | |     `-BinaryOperator 0x196f208cec8 <line:246:16, line:32:47> 'u64':'unsigned long long' '='
|   | |       |-MemberExpr 0x196f208ccb8 <line:246:16, line:32:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       | `-DeclRefExpr 0x196f208cc98 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |       `-BinaryOperator 0x196f208cea8 <line:32:25, col:47> 'unsigned long long' '^'
|   | |         |-ParenExpr 0x196f208cd98 <col:25, col:34> 'u64':'unsigned long long'
|   | |         | `-BinaryOperator 0x196f208cd78 <line:246:16, line:32:32> 'u64':'unsigned long long' '>>'
|   | |         |   |-ImplicitCastExpr 0x196f208cd60 <line:246:16, line:32:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |         |   | `-MemberExpr 0x196f208cd08 <line:246:16, line:32:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |         |   |   `-DeclRefExpr 0x196f208cce8 <line:246:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |         |   `-IntegerLiteral 0x196f208cd38 <line:32:32> 'int' 1
|   | |         `-ParenExpr 0x196f208ce88 <col:36, col:47> 'u64':'unsigned long long'
|   | |           `-BinaryOperator 0x196f208ce68 <col:37, col:45> 'u64':'unsigned long long' '<<'
|   | |             |-CStyleCastExpr 0x196f208ce18 <col:37, col:42> 'u64':'unsigned long long' <IntegralCast>
|   | |             | `-ImplicitCastExpr 0x196f208ce00 <col:42> 'u32':'unsigned int' <LValueToRValue> part_of_explicit_cast
|   | |             |   `-DeclRefExpr 0x196f208cdb8 <col:42> 'u32':'unsigned int' lvalue Var 0x196f208c7e0 'T' 'u32':'unsigned int'
|   | |             `-IntegerLiteral 0x196f208ce40 <col:45> 'int' 32
|   | `-IntegerLiteral 0x196f208cf50 <line:34:9> 'int' 0
|   |-BinaryOperator 0x196f208d050 <line:247:5, col:17> 'u128':'u128' '='
|   | |-ArraySubscriptExpr 0x196f208cff8 <col:5, col:13> 'u128':'u128' lvalue
|   | | |-ImplicitCastExpr 0x196f208cfe0 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x196f208cf98 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | `-IntegerLiteral 0x196f208cfb8 <col:12> 'int' 2
|   | `-ImplicitCastExpr 0x196f208d038 <col:17> 'u128':'u128' <LValueToRValue>
|   |   `-DeclRefExpr 0x196f208d018 <col:17> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |-DoStmt 0x196f208ef30 <line:23:25, line:34:10>
|   | |-CompoundStmt 0x196f208eef0 <line:23:28, line:33:11>
|   | | `-IfStmt 0x196f208eec8 <line:24:9, line:33:9> has_else
|   | |   |-BinaryOperator 0x196f208e120 <line:24:13, col:29> 'int' '=='
|   | |   | |-UnaryExprOrTypeTraitExpr 0x196f208d080 <col:13, col:26> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   | |   | `-ImplicitCastExpr 0x196f208e108 <col:29> 'unsigned long long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x196f208e0e0 <col:29> 'int' 8
|   | |   |-CompoundStmt 0x196f208e760 <col:32, line:28:9>
|   | |   | |-DeclStmt 0x196f208e368 <line:25:17, col:63>
|   | |   | | `-VarDecl 0x196f208e150 <col:17, col:62> col:21 used T 'u64':'unsigned long long' cinit
|   | |   | |   `-BinaryOperator 0x196f208e348 <<scratch space>:296:1, .//openssl//file_jk/after\crypto\modes\gcm128.c:25:62> 'unsigned long long' '&'
|   | |   | |     |-IntegerLiteral 0x196f208e1b8 <<scratch space>:296:1> 'unsigned long long' 16212958658533785600
|   | |   | |     `-ParenExpr 0x196f208e328 <.//openssl//file_jk/after\crypto\modes\gcm128.c:25:51, col:62> 'unsigned long long'
|   | |   | |       `-BinaryOperator 0x196f208e308 <col:52, col:61> 'unsigned long long' '-'
|   | |   | |         |-ImplicitCastExpr 0x196f208e2f0 <col:52> 'unsigned long long' <IntegralCast>
|   | |   | |         | `-IntegerLiteral 0x196f208e1e0 <col:52> 'int' 0
|   | |   | |         `-ParenExpr 0x196f208e2d0 <col:54, col:61> 'unsigned long long'
|   | |   | |           `-BinaryOperator 0x196f208e2b0 <line:248:16, line:25:60> 'unsigned long long' '&'
|   | |   | |             |-ImplicitCastExpr 0x196f208e280 <line:248:16, line:25:57> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |             | `-MemberExpr 0x196f208e228 <line:248:16, line:25:57> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |   | |             |   `-DeclRefExpr 0x196f208e208 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | |             `-ImplicitCastExpr 0x196f208e298 <line:25:60> 'unsigned long long' <IntegralCast>
|   | |   | |               `-IntegerLiteral 0x196f208e258 <col:60> 'int' 1
|   | |   | |-BinaryOperator 0x196f208e590 <line:248:16, line:26:44> 'u64':'unsigned long long' '='
|   | |   | | |-MemberExpr 0x196f208e3a0 <line:248:16, line:26:19> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |   | | | `-DeclRefExpr 0x196f208e380 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | | `-BinaryOperator 0x196f208e570 <line:26:25, col:44> 'unsigned long long' '|'
|   | |   | |   |-ParenExpr 0x196f208e480 <col:25, col:34> 'u64':'unsigned long long'
|   | |   | |   | `-BinaryOperator 0x196f208e460 <line:248:16, line:26:32> 'u64':'unsigned long long' '<<'
|   | |   | |   |   |-ImplicitCastExpr 0x196f208e448 <line:248:16, line:26:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |   |   | `-MemberExpr 0x196f208e3f0 <line:248:16, line:26:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   | |   |   |   `-DeclRefExpr 0x196f208e3d0 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | |   |   `-IntegerLiteral 0x196f208e420 <line:26:32> 'int' 63
|   | |   | |   `-ParenExpr 0x196f208e550 <col:36, col:44> 'u64':'unsigned long long'
|   | |   | |     `-BinaryOperator 0x196f208e530 <line:248:16, line:26:43> 'u64':'unsigned long long' '>>'
|   | |   | |       |-ImplicitCastExpr 0x196f208e518 <line:248:16, line:26:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |       | `-MemberExpr 0x196f208e4c0 <line:248:16, line:26:39> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |   | |       |   `-DeclRefExpr 0x196f208e4a0 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   | |       `-IntegerLiteral 0x196f208e4f0 <line:26:43> 'int' 1
|   | |   | `-BinaryOperator 0x196f208e740 <line:248:16, line:27:36> 'u64':'unsigned long long' '='
|   | |   |   |-MemberExpr 0x196f208e5d0 <line:248:16, line:27:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   | `-DeclRefExpr 0x196f208e5b0 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   |   `-BinaryOperator 0x196f208e720 <line:27:25, col:36> 'unsigned long long' '^'
|   | |   |     |-ParenExpr 0x196f208e6b0 <col:25, col:34> 'u64':'unsigned long long'
|   | |   |     | `-BinaryOperator 0x196f208e690 <line:248:16, line:27:32> 'u64':'unsigned long long' '>>'
|   | |   |     |   |-ImplicitCastExpr 0x196f208e678 <line:248:16, line:27:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |     |   | `-MemberExpr 0x196f208e620 <line:248:16, line:27:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |     |   |   `-DeclRefExpr 0x196f208e600 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   |     |   `-IntegerLiteral 0x196f208e650 <line:27:32> 'int' 1
|   | |   |     `-ImplicitCastExpr 0x196f208e708 <col:36> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x196f208e6d0 <col:36> 'u64':'unsigned long long' lvalue Var 0x196f208e150 'T' 'u64':'unsigned long long'
|   | |   `-CompoundStmt 0x196f208eea0 <line:29:14, line:33:9>
|   | |     |-DeclStmt 0x196f208ea08 <line:30:17, col:56>
|   | |     | `-VarDecl 0x196f208e798 <col:17, col:55> col:21 used T 'u32':'unsigned int' cinit
|   | |     |   `-BinaryOperator 0x196f208e9e8 <col:25, col:55> 'unsigned int' '&'
|   | |     |     |-IntegerLiteral 0x196f208e800 <col:25> 'unsigned int' 3774873600
|   | |     |     `-ParenExpr 0x196f208e9c8 <col:39, col:55> 'unsigned int'
|   | |     |       `-BinaryOperator 0x196f208e9a8 <col:40, col:54> 'unsigned int' '-'
|   | |     |         |-ImplicitCastExpr 0x196f208e990 <col:40> 'unsigned int' <IntegralCast>
|   | |     |         | `-IntegerLiteral 0x196f208e828 <col:40> 'int' 0
|   | |     |         `-CStyleCastExpr 0x196f208e968 <col:42, col:54> 'u32':'unsigned int' <IntegralCast>
|   | |     |           `-ParenExpr 0x196f208e948 <col:47, col:54> 'unsigned long long'
|   | |     |             `-BinaryOperator 0x196f208e8f8 <line:248:16, line:30:53> 'unsigned long long' '&'
|   | |     |               |-ImplicitCastExpr 0x196f208e8c8 <line:248:16, line:30:50> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |               | `-MemberExpr 0x196f208e870 <line:248:16, line:30:50> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |     |               |   `-DeclRefExpr 0x196f208e850 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     |               `-ImplicitCastExpr 0x196f208e8e0 <line:30:53> 'unsigned long long' <IntegralCast>
|   | |     |                 `-IntegerLiteral 0x196f208e8a0 <col:53> 'int' 1
|   | |     |-BinaryOperator 0x196f208ec30 <line:248:16, line:31:44> 'u64':'unsigned long long' '='
|   | |     | |-MemberExpr 0x196f208ea40 <line:248:16, line:31:19> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |     | | `-DeclRefExpr 0x196f208ea20 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     | `-BinaryOperator 0x196f208ec10 <line:31:25, col:44> 'unsigned long long' '|'
|   | |     |   |-ParenExpr 0x196f208eb20 <col:25, col:34> 'u64':'unsigned long long'
|   | |     |   | `-BinaryOperator 0x196f208eb00 <line:248:16, line:31:32> 'u64':'unsigned long long' '<<'
|   | |     |   |   |-ImplicitCastExpr 0x196f208eae8 <line:248:16, line:31:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |   |   | `-MemberExpr 0x196f208ea90 <line:248:16, line:31:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |     |   |   |   `-DeclRefExpr 0x196f208ea70 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     |   |   `-IntegerLiteral 0x196f208eac0 <line:31:32> 'int' 63
|   | |     |   `-ParenExpr 0x196f208ebf0 <col:36, col:44> 'u64':'unsigned long long'
|   | |     |     `-BinaryOperator 0x196f208ebd0 <line:248:16, line:31:43> 'u64':'unsigned long long' '>>'
|   | |     |       |-ImplicitCastExpr 0x196f208ebb8 <line:248:16, line:31:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |       | `-MemberExpr 0x196f208eb60 <line:248:16, line:31:39> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | |     |       |   `-DeclRefExpr 0x196f208eb40 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |     |       `-IntegerLiteral 0x196f208eb90 <line:31:43> 'int' 1
|   | |     `-BinaryOperator 0x196f208ee80 <line:248:16, line:32:47> 'u64':'unsigned long long' '='
|   | |       |-MemberExpr 0x196f208ec70 <line:248:16, line:32:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       | `-DeclRefExpr 0x196f208ec50 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |       `-BinaryOperator 0x196f208ee60 <line:32:25, col:47> 'unsigned long long' '^'
|   | |         |-ParenExpr 0x196f208ed50 <col:25, col:34> 'u64':'unsigned long long'
|   | |         | `-BinaryOperator 0x196f208ed30 <line:248:16, line:32:32> 'u64':'unsigned long long' '>>'
|   | |         |   |-ImplicitCastExpr 0x196f208ed18 <line:248:16, line:32:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |         |   | `-MemberExpr 0x196f208ecc0 <line:248:16, line:32:28> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |         |   |   `-DeclRefExpr 0x196f208eca0 <line:248:16> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |         |   `-IntegerLiteral 0x196f208ecf0 <line:32:32> 'int' 1
|   | |         `-ParenExpr 0x196f208ee40 <col:36, col:47> 'u64':'unsigned long long'
|   | |           `-BinaryOperator 0x196f208ee20 <col:37, col:45> 'u64':'unsigned long long' '<<'
|   | |             |-CStyleCastExpr 0x196f208edd0 <col:37, col:42> 'u64':'unsigned long long' <IntegralCast>
|   | |             | `-ImplicitCastExpr 0x196f208edb8 <col:42> 'u32':'unsigned int' <LValueToRValue> part_of_explicit_cast
|   | |             |   `-DeclRefExpr 0x196f208ed70 <col:42> 'u32':'unsigned int' lvalue Var 0x196f208e798 'T' 'u32':'unsigned int'
|   | |             `-IntegerLiteral 0x196f208edf8 <col:45> 'int' 32
|   | `-IntegerLiteral 0x196f208ef08 <line:34:9> 'int' 0
|   |-BinaryOperator 0x196f208f008 <line:249:5, col:17> 'u128':'u128' '='
|   | |-ArraySubscriptExpr 0x196f208efb0 <col:5, col:13> 'u128':'u128' lvalue
|   | | |-ImplicitCastExpr 0x196f208ef98 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x196f208ef50 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | `-IntegerLiteral 0x196f208ef70 <col:12> 'int' 1
|   | `-ImplicitCastExpr 0x196f208eff0 <col:17> 'u128':'u128' <LValueToRValue>
|   |   `-DeclRefExpr 0x196f208efd0 <col:17> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |-BinaryOperator 0x196f208f480 <line:250:5, col:73> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x196f208f240 <col:5, col:37> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x196f208f0a8 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | | `-ArraySubscriptExpr 0x196f208f088 <col:5, col:13> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x196f208f070 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x196f208f028 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x196f208f048 <col:12> 'int' 3
|   | | `-BinaryOperator 0x196f208f220 <col:20, col:37> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x196f208f1f0 <col:20, col:22> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x196f208f110 <col:20, col:22> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   `-DeclRefExpr 0x196f208f0f0 <col:20> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x196f208f208 <col:27, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x196f208f1c0 <col:27, col:37> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       `-ArraySubscriptExpr 0x196f208f1a0 <col:27, col:35> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x196f208f188 <col:27> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x196f208f140 <col:27> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x196f208f160 <col:34> 'int' 2
|   | `-BinaryOperator 0x196f208f460 <col:41, col:73> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x196f208f2e0 <col:41, col:51> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | `-ArraySubscriptExpr 0x196f208f2c0 <col:41, col:49> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x196f208f2a8 <col:41> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f208f260 <col:41> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x196f208f280 <col:48> 'int' 3
|   |   `-BinaryOperator 0x196f208f440 <col:56, col:73> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x196f208f410 <col:56, col:58> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x196f208f330 <col:56, col:58> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     |   `-DeclRefExpr 0x196f208f310 <col:56> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f208f428 <col:63, col:73> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f208f3e0 <col:63, col:73> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f208f3c0 <col:63, col:71> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x196f208f3a8 <col:63> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f208f360 <col:63> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x196f208f380 <col:70> 'int' 2
|   |-BinaryOperator 0x196f208f558 <line:251:5, col:17> 'u128':'u128' '='
|   | |-DeclRefExpr 0x196f208f4a0 <col:5> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | `-ImplicitCastExpr 0x196f208f540 <col:9, col:17> 'u128':'u128' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x196f208f520 <col:9, col:17> 'u128':'u128' lvalue
|   |     |-ImplicitCastExpr 0x196f208f508 <col:9> 'u128 *':'u128 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x196f208f4c0 <col:9> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |     `-IntegerLiteral 0x196f208f4e0 <col:16> 'int' 4
|   |-BinaryOperator 0x196f208f9b8 <line:252:5, col:73> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x196f208f778 <col:5, col:37> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x196f208f5f8 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | | `-ArraySubscriptExpr 0x196f208f5d8 <col:5, col:13> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x196f208f5c0 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x196f208f578 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x196f208f598 <col:12> 'int' 5
|   | | `-BinaryOperator 0x196f208f758 <col:20, col:37> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x196f208f728 <col:20, col:22> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x196f208f648 <col:20, col:22> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   `-DeclRefExpr 0x196f208f628 <col:20> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x196f208f740 <col:27, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x196f208f6f8 <col:27, col:37> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       `-ArraySubscriptExpr 0x196f208f6d8 <col:27, col:35> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x196f208f6c0 <col:27> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x196f208f678 <col:27> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x196f208f698 <col:34> 'int' 1
|   | `-BinaryOperator 0x196f208f998 <col:41, col:73> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x196f208f818 <col:41, col:51> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | `-ArraySubscriptExpr 0x196f208f7f8 <col:41, col:49> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x196f208f7e0 <col:41> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f208f798 <col:41> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x196f208f7b8 <col:48> 'int' 5
|   |   `-BinaryOperator 0x196f208f978 <col:56, col:73> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x196f208f948 <col:56, col:58> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x196f208f868 <col:56, col:58> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     |   `-DeclRefExpr 0x196f208f848 <col:56> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f208f960 <col:63, col:73> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f208f918 <col:63, col:73> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f208f8f8 <col:63, col:71> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x196f208f8e0 <col:63> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f208f898 <col:63> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x196f208f8b8 <col:70> 'int' 1
|   |-BinaryOperator 0x196f208fe18 <line:253:5, col:73> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x196f208fbd8 <col:5, col:37> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x196f208fa58 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | | `-ArraySubscriptExpr 0x196f208fa38 <col:5, col:13> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x196f208fa20 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x196f208f9d8 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x196f208f9f8 <col:12> 'int' 6
|   | | `-BinaryOperator 0x196f208fbb8 <col:20, col:37> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x196f208fb88 <col:20, col:22> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x196f208faa8 <col:20, col:22> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   `-DeclRefExpr 0x196f208fa88 <col:20> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x196f208fba0 <col:27, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x196f208fb58 <col:27, col:37> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       `-ArraySubscriptExpr 0x196f208fb38 <col:27, col:35> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x196f208fb20 <col:27> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x196f208fad8 <col:27> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x196f208faf8 <col:34> 'int' 2
|   | `-BinaryOperator 0x196f208fdf8 <col:41, col:73> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x196f208fc78 <col:41, col:51> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | `-ArraySubscriptExpr 0x196f208fc58 <col:41, col:49> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x196f208fc40 <col:41> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f208fbf8 <col:41> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x196f208fc18 <col:48> 'int' 6
|   |   `-BinaryOperator 0x196f208fdd8 <col:56, col:73> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x196f208fda8 <col:56, col:58> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x196f208fcc8 <col:56, col:58> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     |   `-DeclRefExpr 0x196f208fca8 <col:56> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f208fdc0 <col:63, col:73> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f208fd78 <col:63, col:73> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f208fd58 <col:63, col:71> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x196f208fd40 <col:63> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f208fcf8 <col:63> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x196f208fd18 <col:70> 'int' 2
|   |-BinaryOperator 0x196f2098140 <line:254:5, col:73> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x196f2090038 <col:5, col:37> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x196f208feb8 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | | `-ArraySubscriptExpr 0x196f208fe98 <col:5, col:13> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x196f208fe80 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x196f208fe38 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x196f208fe58 <col:12> 'int' 7
|   | | `-BinaryOperator 0x196f2090018 <col:20, col:37> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x196f208ffe8 <col:20, col:22> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x196f208ff08 <col:20, col:22> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   `-DeclRefExpr 0x196f208fee8 <col:20> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x196f2090000 <col:27, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x196f208ffb8 <col:27, col:37> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       `-ArraySubscriptExpr 0x196f208ff98 <col:27, col:35> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x196f208ff80 <col:27> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x196f208ff38 <col:27> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x196f208ff58 <col:34> 'int' 3
|   | `-BinaryOperator 0x196f2098120 <col:41, col:73> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x196f2097fa0 <col:41, col:51> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | `-ArraySubscriptExpr 0x196f20900b8 <col:41, col:49> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x196f20900a0 <col:41> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f2090058 <col:41> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x196f2090078 <col:48> 'int' 7
|   |   `-BinaryOperator 0x196f2098100 <col:56, col:73> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x196f20980d0 <col:56, col:58> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x196f2097ff0 <col:56, col:58> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     |   `-DeclRefExpr 0x196f2097fd0 <col:56> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f20980e8 <col:63, col:73> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f20980a0 <col:63, col:73> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f2098080 <col:63, col:71> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x196f2098068 <col:63> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f2098020 <col:63> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x196f2098040 <col:70> 'int' 3
|   |-BinaryOperator 0x196f2098218 <line:255:5, col:17> 'u128':'u128' '='
|   | |-DeclRefExpr 0x196f2098160 <col:5> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | `-ImplicitCastExpr 0x196f2098200 <col:9, col:17> 'u128':'u128' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x196f20981e0 <col:9, col:17> 'u128':'u128' lvalue
|   |     |-ImplicitCastExpr 0x196f20981c8 <col:9> 'u128 *':'u128 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x196f2098180 <col:9> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |     `-IntegerLiteral 0x196f20981a0 <col:16> 'int' 8
|   |-BinaryOperator 0x196f2098678 <line:256:5, col:73> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x196f2098438 <col:5, col:37> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x196f20982b8 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | | `-ArraySubscriptExpr 0x196f2098298 <col:5, col:13> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x196f2098280 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x196f2098238 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x196f2098258 <col:12> 'int' 9
|   | | `-BinaryOperator 0x196f2098418 <col:20, col:37> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x196f20983e8 <col:20, col:22> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x196f2098308 <col:20, col:22> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   `-DeclRefExpr 0x196f20982e8 <col:20> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x196f2098400 <col:27, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x196f20983b8 <col:27, col:37> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       `-ArraySubscriptExpr 0x196f2098398 <col:27, col:35> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x196f2098380 <col:27> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x196f2098338 <col:27> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x196f2098358 <col:34> 'int' 1
|   | `-BinaryOperator 0x196f2098658 <col:41, col:73> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x196f20984d8 <col:41, col:51> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | `-ArraySubscriptExpr 0x196f20984b8 <col:41, col:49> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x196f20984a0 <col:41> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f2098458 <col:41> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x196f2098478 <col:48> 'int' 9
|   |   `-BinaryOperator 0x196f2098638 <col:56, col:73> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x196f2098608 <col:56, col:58> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x196f2098528 <col:56, col:58> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     |   `-DeclRefExpr 0x196f2098508 <col:56> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f2098620 <col:63, col:73> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f20985d8 <col:63, col:73> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f20985b8 <col:63, col:71> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x196f20985a0 <col:63> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f2098558 <col:63> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x196f2098578 <col:70> 'int' 1
|   |-BinaryOperator 0x196f2098ad8 <line:257:5, col:75> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x196f2098898 <col:5, col:38> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x196f2098718 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | | `-ArraySubscriptExpr 0x196f20986f8 <col:5, col:14> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x196f20986e0 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x196f2098698 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x196f20986b8 <col:12> 'int' 10
|   | | `-BinaryOperator 0x196f2098878 <col:21, col:38> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x196f2098848 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x196f2098768 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   `-DeclRefExpr 0x196f2098748 <col:21> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x196f2098860 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x196f2098818 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       `-ArraySubscriptExpr 0x196f20987f8 <col:28, col:36> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x196f20987e0 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x196f2098798 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x196f20987b8 <col:35> 'int' 2
|   | `-BinaryOperator 0x196f2098ab8 <col:42, col:75> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x196f2098938 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | `-ArraySubscriptExpr 0x196f2098918 <col:42, col:51> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x196f2098900 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f20988b8 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x196f20988d8 <col:49> 'int' 10
|   |   `-BinaryOperator 0x196f2098a98 <col:58, col:75> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x196f2098a68 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x196f2098988 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     |   `-DeclRefExpr 0x196f2098968 <col:58> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f2098a80 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f2098a38 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f2098a18 <col:65, col:73> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x196f2098a00 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f20989b8 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x196f20989d8 <col:72> 'int' 2
|   |-BinaryOperator 0x196f2098f38 <line:258:5, col:75> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x196f2098cf8 <col:5, col:38> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x196f2098b78 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | | `-ArraySubscriptExpr 0x196f2098b58 <col:5, col:14> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x196f2098b40 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x196f2098af8 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x196f2098b18 <col:12> 'int' 11
|   | | `-BinaryOperator 0x196f2098cd8 <col:21, col:38> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x196f2098ca8 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x196f2098bc8 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   `-DeclRefExpr 0x196f2098ba8 <col:21> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x196f2098cc0 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x196f2098c78 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       `-ArraySubscriptExpr 0x196f2098c58 <col:28, col:36> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x196f2098c40 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x196f2098bf8 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x196f2098c18 <col:35> 'int' 3
|   | `-BinaryOperator 0x196f2098f18 <col:42, col:75> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x196f2098d98 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | `-ArraySubscriptExpr 0x196f2098d78 <col:42, col:51> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x196f2098d60 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f2098d18 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x196f2098d38 <col:49> 'int' 11
|   |   `-BinaryOperator 0x196f2098ef8 <col:58, col:75> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x196f2098ec8 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x196f2098de8 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     |   `-DeclRefExpr 0x196f2098dc8 <col:58> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f2098ee0 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f2098e98 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f2098e78 <col:65, col:73> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x196f2098e60 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f2098e18 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x196f2098e38 <col:72> 'int' 3
|   |-BinaryOperator 0x196f2092338 <line:259:5, col:75> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x196f20920f8 <col:5, col:38> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x196f2091f78 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | | `-ArraySubscriptExpr 0x196f2091f58 <col:5, col:14> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x196f2091f40 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x196f2098f58 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x196f2098f78 <col:12> 'int' 12
|   | | `-BinaryOperator 0x196f20920d8 <col:21, col:38> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x196f20920a8 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x196f2091fc8 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   `-DeclRefExpr 0x196f2091fa8 <col:21> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x196f20920c0 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x196f2092078 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       `-ArraySubscriptExpr 0x196f2092058 <col:28, col:36> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x196f2092040 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x196f2091ff8 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x196f2092018 <col:35> 'int' 4
|   | `-BinaryOperator 0x196f2092318 <col:42, col:75> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x196f2092198 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | `-ArraySubscriptExpr 0x196f2092178 <col:42, col:51> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x196f2092160 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f2092118 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x196f2092138 <col:49> 'int' 12
|   |   `-BinaryOperator 0x196f20922f8 <col:58, col:75> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x196f20922c8 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x196f20921e8 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     |   `-DeclRefExpr 0x196f20921c8 <col:58> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f20922e0 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f2092298 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f2092278 <col:65, col:73> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x196f2092260 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f2092218 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x196f2092238 <col:72> 'int' 4
|   |-BinaryOperator 0x196f2092798 <line:260:5, col:75> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x196f2092558 <col:5, col:38> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x196f20923d8 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | | `-ArraySubscriptExpr 0x196f20923b8 <col:5, col:14> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x196f20923a0 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x196f2092358 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x196f2092378 <col:12> 'int' 13
|   | | `-BinaryOperator 0x196f2092538 <col:21, col:38> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x196f2092508 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x196f2092428 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   `-DeclRefExpr 0x196f2092408 <col:21> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x196f2092520 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x196f20924d8 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       `-ArraySubscriptExpr 0x196f20924b8 <col:28, col:36> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x196f20924a0 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x196f2092458 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x196f2092478 <col:35> 'int' 5
|   | `-BinaryOperator 0x196f2092778 <col:42, col:75> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x196f20925f8 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | `-ArraySubscriptExpr 0x196f20925d8 <col:42, col:51> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x196f20925c0 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f2092578 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x196f2092598 <col:49> 'int' 13
|   |   `-BinaryOperator 0x196f2092758 <col:58, col:75> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x196f2092728 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x196f2092648 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     |   `-DeclRefExpr 0x196f2092628 <col:58> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f2092740 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f20926f8 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f20926d8 <col:65, col:73> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x196f20926c0 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f2092678 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x196f2092698 <col:72> 'int' 5
|   |-BinaryOperator 0x196f2092bf8 <line:261:5, col:75> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x196f20929b8 <col:5, col:38> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x196f2092838 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | | `-ArraySubscriptExpr 0x196f2092818 <col:5, col:14> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x196f2092800 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x196f20927b8 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x196f20927d8 <col:12> 'int' 14
|   | | `-BinaryOperator 0x196f2092998 <col:21, col:38> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x196f2092968 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x196f2092888 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |   |   `-DeclRefExpr 0x196f2092868 <col:21> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x196f2092980 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x196f2092938 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | |       `-ArraySubscriptExpr 0x196f2092918 <col:28, col:36> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x196f2092900 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x196f20928b8 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x196f20928d8 <col:35> 'int' 6
|   | `-BinaryOperator 0x196f2092bd8 <col:42, col:75> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x196f2092a58 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | `-ArraySubscriptExpr 0x196f2092a38 <col:42, col:51> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x196f2092a20 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f20929d8 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x196f20929f8 <col:49> 'int' 14
|   |   `-BinaryOperator 0x196f2092bb8 <col:58, col:75> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x196f2092b88 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x196f2092aa8 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     |   `-DeclRefExpr 0x196f2092a88 <col:58> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f2092ba0 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f2092b58 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f2092b38 <col:65, col:73> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x196f2092b20 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f2092ad8 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x196f2092af8 <col:72> 'int' 6
|   `-BinaryOperator 0x196f2093070 <line:262:5, col:75> 'u64':'unsigned long long' ','
|     |-BinaryOperator 0x196f2092e18 <col:5, col:38> 'u64':'unsigned long long' '='
|     | |-MemberExpr 0x196f2092c98 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | | `-ArraySubscriptExpr 0x196f2092c78 <col:5, col:14> 'u128':'u128' lvalue
|     | |   |-ImplicitCastExpr 0x196f2092c60 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|     | |   | `-DeclRefExpr 0x196f2092c18 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|     | |   `-IntegerLiteral 0x196f2092c38 <col:12> 'int' 15
|     | `-BinaryOperator 0x196f2092df8 <col:21, col:38> 'unsigned long long' '^'
|     |   |-ImplicitCastExpr 0x196f2092dc8 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     |   | `-MemberExpr 0x196f2092ce8 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     |   |   `-DeclRefExpr 0x196f2092cc8 <col:21> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|     |   `-ImplicitCastExpr 0x196f2092de0 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|     |     `-MemberExpr 0x196f2092d98 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     |       `-ArraySubscriptExpr 0x196f2092d78 <col:28, col:36> 'u128':'u128' lvalue
|     |         |-ImplicitCastExpr 0x196f2092d60 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|     |         | `-DeclRefExpr 0x196f2092d18 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|     |         `-IntegerLiteral 0x196f2092d38 <col:35> 'int' 7
|     `-BinaryOperator 0x196f2093050 <col:42, col:75> 'u64':'unsigned long long' '='
|       |-MemberExpr 0x196f2092eb8 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|       | `-ArraySubscriptExpr 0x196f2092e98 <col:42, col:51> 'u128':'u128' lvalue
|       |   |-ImplicitCastExpr 0x196f2092e80 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x196f2092e38 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|       |   `-IntegerLiteral 0x196f2092e58 <col:49> 'int' 15
|       `-BinaryOperator 0x196f2093030 <col:58, col:75> 'unsigned long long' '^'
|         |-ImplicitCastExpr 0x196f2093000 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|         | `-MemberExpr 0x196f2092f08 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|         |   `-DeclRefExpr 0x196f2092ee8 <col:58> 'u128':'u128' lvalue Var 0x196f208dbd0 'V' 'u128':'u128'
|         `-ImplicitCastExpr 0x196f2093018 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|           `-MemberExpr 0x196f2092fd0 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|             `-ArraySubscriptExpr 0x196f2092fb0 <col:65, col:73> 'u128':'u128' lvalue
|               |-ImplicitCastExpr 0x196f2092f98 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|               | `-DeclRefExpr 0x196f2092f50 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x196f208d8f0 'Htable' 'u128 *':'u128 *'
|               `-IntegerLiteral 0x196f2092f70 <col:72> 'int' 7
|-VarDecl 0x196f2093248 <line:291:1, line:296:1> line:291:21 used rem_4bit 'const size_t [16]' static cinit
| `-InitListExpr 0x196f20962d8 <col:36, line:296:1> 'const size_t [16]'
|   |-ParenExpr 0x196f2093480 <line:22:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f2093460 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f2093328 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f2093308 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f20932b0 <line:292:10> 'int' 0
|   |   `-ParenExpr 0x196f2093440 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f2093420 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f20933c0 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f2093360 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f20933a8 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f2093380 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f2093408 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f20933e0 <col:57> 'int' 16
|   |-ParenExpr 0x196f2093670 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f2093650 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f2093518 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f20934f8 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f20934a0 <line:292:24> 'int' 7200
|   |   `-ParenExpr 0x196f2093630 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f2093610 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f20935b0 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f2093550 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f2093598 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f2093570 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f20935f8 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f20935d0 <col:57> 'int' 16
|   |-ParenExpr 0x196f2093860 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f2093840 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f2093708 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f20936e8 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f2093690 <line:292:38> 'int' 14400
|   |   `-ParenExpr 0x196f2093820 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f2093800 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f20937a0 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f2093740 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f2093788 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f2093760 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f20937e8 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f20937c0 <col:57> 'int' 16
|   |-ParenExpr 0x196f2093a50 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f2093a30 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f20938f8 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f20938d8 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f2093880 <line:292:52> 'int' 9312
|   |   `-ParenExpr 0x196f2093a10 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f20939f0 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f2093990 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f2093930 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f2093978 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f2093950 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f20939d8 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f20939b0 <col:57> 'int' 16
|   |-ParenExpr 0x196f2093c40 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f2093c20 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f2093ae8 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f2093ac8 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f2093a70 <line:293:10> 'int' 28800
|   |   `-ParenExpr 0x196f2093c00 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f2093be0 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f2093b80 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f2093b20 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f2093b68 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f2093b40 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f2093bc8 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f2093ba0 <col:57> 'int' 16
|   |-ParenExpr 0x196f2093e30 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f2093e10 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f2093cd8 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f2093cb8 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f2093c60 <line:293:24> 'int' 27808
|   |   `-ParenExpr 0x196f2093df0 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f2093dd0 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f2093d70 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f2093d10 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f2093d58 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f2093d30 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f2093db8 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f2093d90 <col:57> 'int' 16
|   |-ParenExpr 0x196f209a098 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f209a078 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f2093ec8 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f2093ea8 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f2093e50 <line:293:38> 'int' 18624
|   |   `-ParenExpr 0x196f209a058 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f209a038 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f2099fd8 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f2093f00 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f2099fc0 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f2093f20 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f209a020 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f2099ff8 <col:57> 'int' 16
|   |-ParenExpr 0x196f209a288 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f209a268 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f209a130 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f209a110 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f209a0b8 <line:293:52> 'int' 21728
|   |   `-ParenExpr 0x196f209a248 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f209a228 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f209a1c8 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f209a168 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f209a1b0 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f209a188 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f209a210 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f209a1e8 <col:57> 'int' 16
|   |-ParenExpr 0x196f209a478 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f209a458 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f209a320 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f209a300 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f209a2a8 <line:294:10> 'int' 57600
|   |   `-ParenExpr 0x196f209a438 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f209a418 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f209a3b8 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f209a358 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f209a3a0 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f209a378 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f209a400 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f209a3d8 <col:57> 'int' 16
|   |-ParenExpr 0x196f209a668 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f209a648 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f209a510 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f209a4f0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f209a498 <line:294:24> 'int' 64800
|   |   `-ParenExpr 0x196f209a628 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f209a608 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f209a5a8 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f209a548 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f209a590 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f209a568 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f209a5f0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f209a5c8 <col:57> 'int' 16
|   |-ParenExpr 0x196f209a858 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f209a838 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f209a700 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f209a6e0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f209a688 <line:294:38> 'int' 55616
|   |   `-ParenExpr 0x196f209a818 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f209a7f8 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f209a798 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f209a738 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f209a780 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f209a758 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f209a7e0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f209a7b8 <col:57> 'int' 16
|   |-ParenExpr 0x196f209aa48 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f209aa28 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f209a8f0 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f209a8d0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f209a878 <line:294:52> 'int' 50528
|   |   `-ParenExpr 0x196f209aa08 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f209a9e8 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f209a988 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f209a928 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f209a970 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f209a948 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f209a9d0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f209a9a8 <col:57> 'int' 16
|   |-ParenExpr 0x196f209ac38 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f209ac18 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f209aae0 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f209aac0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f209aa68 <line:295:10> 'int' 37248
|   |   `-ParenExpr 0x196f209abf8 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f209abd8 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f209ab78 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f209ab18 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f209ab60 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f209ab38 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f209abc0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f209ab98 <col:57> 'int' 16
|   |-ParenExpr 0x196f209ae28 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f209ae08 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f209acd0 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f209acb0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f209ac58 <line:295:24> 'int' 36256
|   |   `-ParenExpr 0x196f209ade8 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f209adc8 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f209ad68 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f209ad08 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f209ad50 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f209ad28 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f209adb0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f209ad88 <col:57> 'int' 16
|   |-ParenExpr 0x196f2095fe0 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f2095fc0 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x196f209aec0 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x196f209aea0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x196f209ae48 <line:295:38> 'int' 43456
|   |   `-ParenExpr 0x196f2095fa0 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x196f2095f80 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x196f209af58 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x196f209aef8 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x196f209af40 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x196f209af18 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x196f209afa0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x196f209af78 <col:57> 'int' 16
|   `-ParenExpr 0x196f20961d0 <col:25, col:60> 'size_t':'unsigned long long'
|     `-BinaryOperator 0x196f20961b0 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|       |-CStyleCastExpr 0x196f2096078 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|       | `-ParenExpr 0x196f2096058 <col:34, col:36> 'int'
|       |   `-IntegerLiteral 0x196f2096000 <line:295:52> 'int' 46560
|       `-ParenExpr 0x196f2096190 <line:22:39, col:59> 'unsigned long long'
|         `-BinaryOperator 0x196f2096170 <col:40, col:57> 'unsigned long long' '-'
|           |-BinaryOperator 0x196f2096110 <col:40, col:55> 'unsigned long long' '*'
|           | |-UnaryExprOrTypeTraitExpr 0x196f20960b0 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|           | `-ImplicitCastExpr 0x196f20960f8 <col:55> 'unsigned long long' <IntegralCast>
|           |   `-IntegerLiteral 0x196f20960d0 <col:55> 'int' 8
|           `-ImplicitCastExpr 0x196f2096158 <col:57> 'unsigned long long' <IntegralCast>
|             `-IntegerLiteral 0x196f2096130 <col:57> 'int' 16
|-FunctionDecl 0x196f2096588 <line:298:1, line:366:1> line:298:13 used gcm_gmult_4bit 'void (u64 *, const u128 *)' static
| |-ParmVarDecl 0x196f20963f8 <col:28, col:36> col:32 used Xi 'u64 *':'u64 *'
| |-ParmVarDecl 0x196f20964c0 <col:39, col:59> col:50 used Htable 'const u128 *':'const u128 *'
| `-CompoundStmt 0x196f209b5d0 <line:299:1, line:366:1>
|   |-DeclStmt 0x196f20966c8 <line:300:5, col:11>
|   | `-VarDecl 0x196f2096660 <col:5, col:10> col:10 used Z 'u128':'u128'
|   |-DeclStmt 0x196f2096788 <line:301:5, col:17>
|   | `-VarDecl 0x196f20966f8 <col:5, col:15> col:9 used cnt 'int' cinit
|   |   `-IntegerLiteral 0x196f2096760 <col:15> 'int' 15
|   |-DeclStmt 0x196f2096928 <line:302:5, col:25>
|   | |-VarDecl 0x196f20967b0 <col:5, col:12> col:12 used rem 'size_t':'unsigned long long'
|   | |-VarDecl 0x196f2096828 <col:5, col:17> col:17 used nlo 'size_t':'unsigned long long'
|   | `-VarDecl 0x196f20968a0 <col:5, col:22> col:22 used nhi 'size_t':'unsigned long long'
|   |-DeclStmt 0x196f2096c98 <line:303:5, line:306:24>
|   | |-RecordDecl 0x196f2096940 <line:303:11, line:306:5> line:303:11 union definition
|   | | |-FieldDecl 0x196f2096a18 <line:304:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x196f2096a80 <line:305:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x196f2096b38 <line:303:5, line:306:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:303:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:303:11)' cinit
|   |   `-InitListExpr 0x196f2096c20 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:303:11)':'union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:303:11)' field Field 0x196f2096a18 'one' 'long'
|   |     `-ImplicitCastExpr 0x196f2096c68 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x196f2096ba0 <col:21> 'int' 1
|   |-BinaryOperator 0x196f2096df0 <line:308:5, col:30> 'size_t':'unsigned long long' '='
|   | |-DeclRefExpr 0x196f2096cb0 <col:5> 'size_t':'unsigned long long' lvalue Var 0x196f2096828 'nlo' 'size_t':'unsigned long long'
|   | `-ImplicitCastExpr 0x196f2096dd8 <col:11, col:30> 'size_t':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x196f2096dc0 <col:11, col:30> 'u8':'unsigned char' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x196f2096da0 <col:11, col:30> 'const u8':'const unsigned char' lvalue
|   |       |-ParenExpr 0x196f2096d58 <col:11, col:26> 'const u8 *'
|   |       | `-CStyleCastExpr 0x196f2096d30 <col:12, col:24> 'const u8 *' <BitCast>
|   |       |   `-ImplicitCastExpr 0x196f2096d18 <col:24> 'u64 *':'u64 *' <LValueToRValue> part_of_explicit_cast
|   |       |     `-DeclRefExpr 0x196f2096ce8 <col:24> 'u64 *':'u64 *' lvalue ParmVar 0x196f20963f8 'Xi' 'u64 *':'u64 *'
|   |       `-IntegerLiteral 0x196f2096d78 <col:28> 'int' 15
|   |-BinaryOperator 0x196f2096ec8 <line:309:5, col:18> 'size_t':'unsigned long long' '='
|   | |-DeclRefExpr 0x196f2096e10 <col:5> 'size_t':'unsigned long long' lvalue Var 0x196f20968a0 'nhi' 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x196f2096ea8 <col:11, col:18> 'size_t':'unsigned long long' '>>'
|   |   |-ImplicitCastExpr 0x196f2096e90 <col:11> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x196f2096e48 <col:11> 'size_t':'unsigned long long' lvalue Var 0x196f2096828 'nlo' 'size_t':'unsigned long long'
|   |   `-IntegerLiteral 0x196f2096e68 <col:18> 'int' 4
|   |-CompoundAssignOperator 0x196f2096f48 <line:310:5, col:12> 'size_t':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x196f2096ee8 <col:5> 'size_t':'unsigned long long' lvalue Var 0x196f2096828 'nlo' 'size_t':'unsigned long long'
|   | `-ImplicitCastExpr 0x196f2096f30 <col:12> 'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x196f2096f08 <col:12> 'int' 15
|   |-BinaryOperator 0x196f20940a0 <line:312:5, col:24> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x196f2093f98 <col:5, col:7> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   | | `-DeclRefExpr 0x196f2093f60 <col:5> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   | `-ImplicitCastExpr 0x196f2094088 <col:12, col:24> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x196f2094058 <col:12, col:24> 'const u64':'const unsigned long long' lvalue .hi 0x196f1ec0550
|   |     `-ArraySubscriptExpr 0x196f2094038 <col:12, col:22> 'const u128':'const u128' lvalue
|   |       |-ImplicitCastExpr 0x196f2094008 <col:12> 'const u128 *':'const u128 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x196f2093fc8 <col:12> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f20964c0 'Htable' 'const u128 *':'const u128 *'
|   |       `-ImplicitCastExpr 0x196f2094020 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
|   |         `-DeclRefExpr 0x196f2093fe8 <col:19> 'size_t':'unsigned long long' lvalue Var 0x196f2096828 'nlo' 'size_t':'unsigned long long'
|   |-BinaryOperator 0x196f20941e8 <line:313:5, col:24> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x196f20940e0 <col:5, col:7> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   | | `-DeclRefExpr 0x196f20940c0 <col:5> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   | `-ImplicitCastExpr 0x196f20941d0 <col:12, col:24> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x196f20941a0 <col:12, col:24> 'const u64':'const unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     `-ArraySubscriptExpr 0x196f2094180 <col:12, col:22> 'const u128':'const u128' lvalue
|   |       |-ImplicitCastExpr 0x196f2094150 <col:12> 'const u128 *':'const u128 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x196f2094110 <col:12> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f20964c0 'Htable' 'const u128 *':'const u128 *'
|   |       `-ImplicitCastExpr 0x196f2094168 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
|   |         `-DeclRefExpr 0x196f2094130 <col:19> 'size_t':'unsigned long long' lvalue Var 0x196f2096828 'nlo' 'size_t':'unsigned long long'
|   |-WhileStmt 0x196f2099cc8 <line:315:5, line:344:5>
|   | |-IntegerLiteral 0x196f2094208 <line:315:12> 'int' 1
|   | `-CompoundStmt 0x196f2099c38 <col:15, line:344:5>
|   |   |-BinaryOperator 0x196f2094368 <line:316:9, col:30> 'size_t':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x196f2094230 <col:9> 'size_t':'unsigned long long' lvalue Var 0x196f20967b0 'rem' 'size_t':'unsigned long long'
|   |   | `-BinaryOperator 0x196f2094348 <col:15, col:30> 'unsigned long long' '&'
|   |   |   |-CStyleCastExpr 0x196f20942e0 <col:15, col:25> 'size_t':'unsigned long long' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x196f20942c8 <col:23, col:25> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |   |   `-MemberExpr 0x196f2094288 <col:23, col:25> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   |   |     `-DeclRefExpr 0x196f2094268 <col:23> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   |   `-ImplicitCastExpr 0x196f2094330 <col:30> 'unsigned long long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x196f2094308 <col:30> 'int' 15
|   |   |-BinaryOperator 0x196f2094598 <line:317:9, col:41> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x196f20943a8 <col:9, col:11> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | | `-DeclRefExpr 0x196f2094388 <col:9> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   | `-BinaryOperator 0x196f2094578 <col:16, col:41> 'unsigned long long' '|'
|   |   |   |-ParenExpr 0x196f2094488 <col:16, col:27> 'u64':'unsigned long long'
|   |   |   | `-BinaryOperator 0x196f2094468 <col:17, col:25> 'u64':'unsigned long long' '<<'
|   |   |   |   |-ImplicitCastExpr 0x196f2094450 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   |   | `-MemberExpr 0x196f20943f8 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   |   |   |   `-DeclRefExpr 0x196f20943d8 <col:17> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   |   |   `-IntegerLiteral 0x196f2094428 <col:25> 'int' 60
|   |   |   `-ParenExpr 0x196f2094558 <col:31, col:41> 'u64':'unsigned long long'
|   |   |     `-BinaryOperator 0x196f2094538 <col:32, col:40> 'u64':'unsigned long long' '>>'
|   |   |       |-ImplicitCastExpr 0x196f2094520 <col:32, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       | `-MemberExpr 0x196f20944c8 <col:32, col:34> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   |       |   `-DeclRefExpr 0x196f20944a8 <col:32> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   |       `-IntegerLiteral 0x196f20944f8 <col:40> 'int' 4
|   |   |-BinaryOperator 0x196f20946d8 <line:318:9, col:26> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x196f20945d8 <col:9, col:11> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   | | `-DeclRefExpr 0x196f20945b8 <col:9> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   | `-ParenExpr 0x196f20946b8 <col:16, col:26> 'u64':'unsigned long long'
|   |   |   `-BinaryOperator 0x196f2094698 <col:17, col:25> 'u64':'unsigned long long' '>>'
|   |   |     |-ImplicitCastExpr 0x196f2094680 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     | `-MemberExpr 0x196f2094628 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   |     |   `-DeclRefExpr 0x196f2094608 <col:17> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   |     `-IntegerLiteral 0x196f2094658 <col:25> 'int' 4
|   |   |-IfStmt 0x196f2094ab8 <line:319:9, line:322:43> has_else
|   |   | |-BinaryOperator 0x196f2094768 <line:319:13, col:31> 'int' '=='
|   |   | | |-UnaryExprOrTypeTraitExpr 0x196f2094708 <col:13, col:26> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x196f2094750 <col:31> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x196f2094728 <col:31> 'int' 8
|   |   | |-CompoundAssignOperator 0x196f20948e0 <line:320:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | | |-MemberExpr 0x196f20947a8 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   | | | `-DeclRefExpr 0x196f2094788 <col:13> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   | | `-ImplicitCastExpr 0x196f20948c8 <col:21, col:33> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-ArraySubscriptExpr 0x196f20948a8 <col:21, col:33> 'const size_t':'const unsigned long long' lvalue
|   |   | |     |-ImplicitCastExpr 0x196f2094878 <col:21> 'const size_t *' <ArrayToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x196f20947d8 <col:21> 'const size_t [16]' lvalue Var 0x196f2093248 'rem_4bit' 'const size_t [16]'
|   |   | |     `-ImplicitCastExpr 0x196f2094890 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x196f20947f8 <col:30> 'size_t':'unsigned long long' lvalue Var 0x196f20967b0 'rem' 'size_t':'unsigned long long'
|   |   | `-CompoundAssignOperator 0x196f2094a88 <line:322:13, col:43> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   |-MemberExpr 0x196f2094930 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   |   | `-DeclRefExpr 0x196f2094910 <col:13> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   |   `-BinaryOperator 0x196f2094a68 <col:21, col:43> 'u64':'unsigned long long' '<<'
|   |   |     |-CStyleCastExpr 0x196f2094a18 <col:21, col:38> 'u64':'unsigned long long' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x196f2094a00 <col:26, col:38> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     |   `-ArraySubscriptExpr 0x196f20949d0 <col:26, col:38> 'const size_t':'const unsigned long long' lvalue
|   |   |     |     |-ImplicitCastExpr 0x196f20949a0 <col:26> 'const size_t *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x196f2094960 <col:26> 'const size_t [16]' lvalue Var 0x196f2093248 'rem_4bit' 'const size_t [16]'
|   |   |     |     `-ImplicitCastExpr 0x196f20949b8 <col:35> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x196f2094980 <col:35> 'size_t':'unsigned long long' lvalue Var 0x196f20967b0 'rem' 'size_t':'unsigned long long'
|   |   |     `-IntegerLiteral 0x196f2094a40 <col:43> 'int' 32
|   |   |-CompoundAssignOperator 0x196f2094c08 <line:324:9, col:29> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-MemberExpr 0x196f2094b00 <col:9, col:11> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   | | `-DeclRefExpr 0x196f2094ae0 <col:9> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   | `-ImplicitCastExpr 0x196f2094bf0 <col:17, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   `-MemberExpr 0x196f2094bc0 <col:17, col:29> 'const u64':'const unsigned long long' lvalue .hi 0x196f1ec0550
|   |   |     `-ArraySubscriptExpr 0x196f2094ba0 <col:17, col:27> 'const u128':'const u128' lvalue
|   |   |       |-ImplicitCastExpr 0x196f2094b70 <col:17> 'const u128 *':'const u128 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x196f2094b30 <col:17> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f20964c0 'Htable' 'const u128 *':'const u128 *'
|   |   |       `-ImplicitCastExpr 0x196f2094b88 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x196f2094b50 <col:24> 'size_t':'unsigned long long' lvalue Var 0x196f20968a0 'nhi' 'size_t':'unsigned long long'
|   |   |-CompoundAssignOperator 0x196f2094d60 <line:325:9, col:29> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-MemberExpr 0x196f2094c58 <col:9, col:11> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | | `-DeclRefExpr 0x196f2094c38 <col:9> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   | `-ImplicitCastExpr 0x196f2094d48 <col:17, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   `-MemberExpr 0x196f2094d18 <col:17, col:29> 'const u64':'const unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   |     `-ArraySubscriptExpr 0x196f2094cf8 <col:17, col:27> 'const u128':'const u128' lvalue
|   |   |       |-ImplicitCastExpr 0x196f2094cc8 <col:17> 'const u128 *':'const u128 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x196f2094c88 <col:17> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f20964c0 'Htable' 'const u128 *':'const u128 *'
|   |   |       `-ImplicitCastExpr 0x196f2094ce0 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x196f2094ca8 <col:24> 'size_t':'unsigned long long' lvalue Var 0x196f20968a0 'nhi' 'size_t':'unsigned long long'
|   |   |-IfStmt 0x196f2094e30 <line:327:9, line:328:13>
|   |   | |-BinaryOperator 0x196f2094e08 <line:327:13, col:21> 'int' '<'
|   |   | | |-UnaryOperator 0x196f2094dc8 <col:13, col:15> 'int' prefix '--'
|   |   | | | `-DeclRefExpr 0x196f2094d90 <col:15> 'int' lvalue Var 0x196f20966f8 'cnt' 'int'
|   |   | | `-IntegerLiteral 0x196f2094de0 <col:21> 'int' 0
|   |   | `-BreakStmt 0x196f2094e28 <line:328:13>
|   |   |-BinaryOperator 0x196f2098fe0 <line:330:9, col:35> 'size_t':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x196f2094e48 <col:9> 'size_t':'unsigned long long' lvalue Var 0x196f2096828 'nlo' 'size_t':'unsigned long long'
|   |   | `-ImplicitCastExpr 0x196f2098fc8 <col:15, col:35> 'size_t':'unsigned long long' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x196f2098fb0 <col:15, col:35> 'u8':'unsigned char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x196f2094f30 <col:15, col:35> 'const u8':'const unsigned char' lvalue
|   |   |       |-ParenExpr 0x196f2094ed8 <col:15, col:30> 'const u8 *'
|   |   |       | `-CStyleCastExpr 0x196f2094eb0 <col:16, col:28> 'const u8 *' <BitCast>
|   |   |       |   `-ImplicitCastExpr 0x196f2094e98 <col:28> 'u64 *':'u64 *' <LValueToRValue> part_of_explicit_cast
|   |   |       |     `-DeclRefExpr 0x196f2094e68 <col:28> 'u64 *':'u64 *' lvalue ParmVar 0x196f20963f8 'Xi' 'u64 *':'u64 *'
|   |   |       `-ImplicitCastExpr 0x196f2094f18 <col:32> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x196f2094ef8 <col:32> 'int' lvalue Var 0x196f20966f8 'cnt' 'int'
|   |   |-BinaryOperator 0x196f20990a0 <line:331:9, col:22> 'size_t':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x196f2099000 <col:9> 'size_t':'unsigned long long' lvalue Var 0x196f20968a0 'nhi' 'size_t':'unsigned long long'
|   |   | `-BinaryOperator 0x196f2099080 <col:15, col:22> 'size_t':'unsigned long long' '>>'
|   |   |   |-ImplicitCastExpr 0x196f2099068 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x196f2099020 <col:15> 'size_t':'unsigned long long' lvalue Var 0x196f2096828 'nlo' 'size_t':'unsigned long long'
|   |   |   `-IntegerLiteral 0x196f2099040 <col:22> 'int' 4
|   |   |-CompoundAssignOperator 0x196f2099120 <line:332:9, col:16> 'size_t':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x196f20990c0 <col:9> 'size_t':'unsigned long long' lvalue Var 0x196f2096828 'nlo' 'size_t':'unsigned long long'
|   |   | `-ImplicitCastExpr 0x196f2099108 <col:16> 'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x196f20990e0 <col:16> 'int' 15
|   |   |-BinaryOperator 0x196f2099270 <line:334:9, col:30> 'size_t':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x196f2099150 <col:9> 'size_t':'unsigned long long' lvalue Var 0x196f20967b0 'rem' 'size_t':'unsigned long long'
|   |   | `-BinaryOperator 0x196f2099250 <col:15, col:30> 'unsigned long long' '&'
|   |   |   |-CStyleCastExpr 0x196f20991e8 <col:15, col:25> 'size_t':'unsigned long long' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x196f20991d0 <col:23, col:25> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |   |   `-MemberExpr 0x196f2099190 <col:23, col:25> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   |   |     `-DeclRefExpr 0x196f2099170 <col:23> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   |   `-ImplicitCastExpr 0x196f2099238 <col:30> 'unsigned long long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x196f2099210 <col:30> 'int' 15
|   |   |-BinaryOperator 0x196f20994a0 <line:335:9, col:41> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x196f20992b0 <col:9, col:11> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   | | `-DeclRefExpr 0x196f2099290 <col:9> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   | `-BinaryOperator 0x196f2099480 <col:16, col:41> 'unsigned long long' '|'
|   |   |   |-ParenExpr 0x196f2099390 <col:16, col:27> 'u64':'unsigned long long'
|   |   |   | `-BinaryOperator 0x196f2099370 <col:17, col:25> 'u64':'unsigned long long' '<<'
|   |   |   |   |-ImplicitCastExpr 0x196f2099358 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   |   | `-MemberExpr 0x196f2099300 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   |   |   |   `-DeclRefExpr 0x196f20992e0 <col:17> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   |   |   `-IntegerLiteral 0x196f2099330 <col:25> 'int' 60
|   |   |   `-ParenExpr 0x196f2099460 <col:31, col:41> 'u64':'unsigned long long'
|   |   |     `-BinaryOperator 0x196f2099440 <col:32, col:40> 'u64':'unsigned long long' '>>'
|   |   |       |-ImplicitCastExpr 0x196f2099428 <col:32, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       | `-MemberExpr 0x196f20993d0 <col:32, col:34> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |   |       |   `-DeclRefExpr 0x196f20993b0 <col:32> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   |       `-IntegerLiteral 0x196f2099400 <col:40> 'int' 4
|   |   |-BinaryOperator 0x196f20995e0 <line:336:9, col:26> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x196f20994e0 <col:9, col:11> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   | | `-DeclRefExpr 0x196f20994c0 <col:9> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   | `-ParenExpr 0x196f20995c0 <col:16, col:26> 'u64':'unsigned long long'
|   |   |   `-BinaryOperator 0x196f20995a0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|   |   |     |-ImplicitCastExpr 0x196f2099588 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     | `-MemberExpr 0x196f2099530 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   |     |   `-DeclRefExpr 0x196f2099510 <col:17> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   |     `-IntegerLiteral 0x196f2099560 <col:25> 'int' 4
|   |   |-IfStmt 0x196f2099960 <line:337:9, line:340:43> has_else
|   |   | |-BinaryOperator 0x196f2099670 <line:337:13, col:31> 'int' '=='
|   |   | | |-UnaryExprOrTypeTraitExpr 0x196f2099610 <col:13, col:26> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x196f2099658 <col:31> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x196f2099630 <col:31> 'int' 8
|   |   | |-CompoundAssignOperator 0x196f2099788 <line:338:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | | |-MemberExpr 0x196f20996b0 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   | | | `-DeclRefExpr 0x196f2099690 <col:13> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   | | `-ImplicitCastExpr 0x196f2099770 <col:21, col:33> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-ArraySubscriptExpr 0x196f2099750 <col:21, col:33> 'const size_t':'const unsigned long long' lvalue
|   |   | |     |-ImplicitCastExpr 0x196f2099720 <col:21> 'const size_t *' <ArrayToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x196f20996e0 <col:21> 'const size_t [16]' lvalue Var 0x196f2093248 'rem_4bit' 'const size_t [16]'
|   |   | |     `-ImplicitCastExpr 0x196f2099738 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x196f2099700 <col:30> 'size_t':'unsigned long long' lvalue Var 0x196f20967b0 'rem' 'size_t':'unsigned long long'
|   |   | `-CompoundAssignOperator 0x196f2099930 <line:340:13, col:43> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   |-MemberExpr 0x196f20997d8 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   |   | `-DeclRefExpr 0x196f20997b8 <col:13> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   |   `-BinaryOperator 0x196f2099910 <col:21, col:43> 'u64':'unsigned long long' '<<'
|   |   |     |-CStyleCastExpr 0x196f20998c0 <col:21, col:38> 'u64':'unsigned long long' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x196f20998a8 <col:26, col:38> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     |   `-ArraySubscriptExpr 0x196f2099878 <col:26, col:38> 'const size_t':'const unsigned long long' lvalue
|   |   |     |     |-ImplicitCastExpr 0x196f2099848 <col:26> 'const size_t *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x196f2099808 <col:26> 'const size_t [16]' lvalue Var 0x196f2093248 'rem_4bit' 'const size_t [16]'
|   |   |     |     `-ImplicitCastExpr 0x196f2099860 <col:35> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x196f2099828 <col:35> 'size_t':'unsigned long long' lvalue Var 0x196f20967b0 'rem' 'size_t':'unsigned long long'
|   |   |     `-IntegerLiteral 0x196f20998e8 <col:43> 'int' 32
|   |   |-CompoundAssignOperator 0x196f2099ab0 <line:342:9, col:29> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-MemberExpr 0x196f20999a8 <col:9, col:11> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|   |   | | `-DeclRefExpr 0x196f2099988 <col:9> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |   | `-ImplicitCastExpr 0x196f2099a98 <col:17, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   `-MemberExpr 0x196f2099a68 <col:17, col:29> 'const u64':'const unsigned long long' lvalue .hi 0x196f1ec0550
|   |   |     `-ArraySubscriptExpr 0x196f2099a48 <col:17, col:27> 'const u128':'const u128' lvalue
|   |   |       |-ImplicitCastExpr 0x196f2099a18 <col:17> 'const u128 *':'const u128 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x196f20999d8 <col:17> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f20964c0 'Htable' 'const u128 *':'const u128 *'
|   |   |       `-ImplicitCastExpr 0x196f2099a30 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x196f20999f8 <col:24> 'size_t':'unsigned long long' lvalue Var 0x196f2096828 'nlo' 'size_t':'unsigned long long'
|   |   `-CompoundAssignOperator 0x196f2099c08 <line:343:9, col:29> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-MemberExpr 0x196f2099b00 <col:9, col:11> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|   |     | `-DeclRefExpr 0x196f2099ae0 <col:9> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x196f2099bf0 <col:17, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x196f2099bc0 <col:17, col:29> 'const u64':'const unsigned long long' lvalue .lo 0x196f1ec05b8
|   |         `-ArraySubscriptExpr 0x196f2099ba0 <col:17, col:27> 'const u128':'const u128' lvalue
|   |           |-ImplicitCastExpr 0x196f2099b70 <col:17> 'const u128 *':'const u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x196f2099b30 <col:17> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f20964c0 'Htable' 'const u128 *':'const u128 *'
|   |           `-ImplicitCastExpr 0x196f2099b88 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |             `-DeclRefExpr 0x196f2099b50 <col:24> 'size_t':'unsigned long long' lvalue Var 0x196f2096828 'nlo' 'size_t':'unsigned long long'
|   `-IfStmt 0x196f209b5a8 <line:346:5, line:365:5> has_else
|     |-ImplicitCastExpr 0x196f2099d48 <line:346:9, col:19> 'char' <LValueToRValue>
|     | `-MemberExpr 0x196f2099d18 <col:9, col:19> 'const char' lvalue .little 0x196f2096a80
|     |   `-DeclRefExpr 0x196f2099ce0 <col:9> 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:303:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:303:11)' lvalue Var 0x196f2096b38 'is_endian' 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:303:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:303:11)'
|     |-CompoundStmt 0x196f209b358 <col:27, line:362:5>
|     | |-BinaryOperator 0x196f209b158 <line:348:9, .//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|     | | |-ArraySubscriptExpr 0x196f2099dc0 <.//openssl//file_jk/after\crypto\modes\gcm128.c:348:9, col:13> 'u64':'unsigned long long' lvalue
|     | | | |-ImplicitCastExpr 0x196f2099da8 <col:9> 'u64 *':'u64 *' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x196f2099d60 <col:9> 'u64 *':'u64 *' lvalue ParmVar 0x196f20963f8 'Xi' 'u64 *':'u64 *'
|     | | | `-IntegerLiteral 0x196f2099d80 <col:12> 'int' 0
|     | | `-CallExpr 0x196f209b130 <.//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|     | |   |-ImplicitCastExpr 0x196f209b118 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x196f209afd0 <col:25> 'unsigned long long (unsigned long long)' Function 0x196f2099e10 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|     | |   `-CStyleCastExpr 0x196f209b0c0 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|     | |     `-ImplicitCastExpr 0x196f209b0a8 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     | |       `-ParenExpr 0x196f209b088 <col:47, col:49> 'u64':'unsigned long long' lvalue
|     | |         `-MemberExpr 0x196f209b028 <.//openssl//file_jk/after\crypto\modes\gcm128.c:348:24, col:26> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |           `-DeclRefExpr 0x196f209b008 <col:24> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|     | `-BinaryOperator 0x196f209b338 <line:349:9, .//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|     |   |-ArraySubscriptExpr 0x196f209b1d8 <.//openssl//file_jk/after\crypto\modes\gcm128.c:349:9, col:13> 'u64':'unsigned long long' lvalue
|     |   | |-ImplicitCastExpr 0x196f209b1c0 <col:9> 'u64 *':'u64 *' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x196f209b178 <col:9> 'u64 *':'u64 *' lvalue ParmVar 0x196f20963f8 'Xi' 'u64 *':'u64 *'
|     |   | `-IntegerLiteral 0x196f209b198 <col:12> 'int' 1
|     |   `-CallExpr 0x196f209b310 <.//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|     |     |-ImplicitCastExpr 0x196f209b2f8 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x196f209b1f8 <col:25> 'unsigned long long (unsigned long long)' Function 0x196f2099e10 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|     |     `-CStyleCastExpr 0x196f209b2d0 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|     |       `-ImplicitCastExpr 0x196f209b2b8 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     |         `-ParenExpr 0x196f209b298 <col:47, col:49> 'u64':'unsigned long long' lvalue
|     |           `-MemberExpr 0x196f209b238 <.//openssl//file_jk/after\crypto\modes\gcm128.c:349:24, col:26> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     |             `-DeclRefExpr 0x196f209b218 <col:24> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|     `-CompoundStmt 0x196f209b588 <line:362:12, line:365:5>
|       |-BinaryOperator 0x196f209b460 <line:363:9, col:19> 'u64':'unsigned long long' '='
|       | |-ArraySubscriptExpr 0x196f209b3d8 <col:9, col:13> 'u64':'unsigned long long' lvalue
|       | | |-ImplicitCastExpr 0x196f209b3c0 <col:9> 'u64 *':'u64 *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x196f209b378 <col:9> 'u64 *':'u64 *' lvalue ParmVar 0x196f20963f8 'Xi' 'u64 *':'u64 *'
|       | | `-IntegerLiteral 0x196f209b398 <col:12> 'int' 0
|       | `-ImplicitCastExpr 0x196f209b448 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x196f209b418 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|       |     `-DeclRefExpr 0x196f209b3f8 <col:17> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|       `-BinaryOperator 0x196f209b568 <line:364:9, col:19> 'u64':'unsigned long long' '='
|         |-ArraySubscriptExpr 0x196f209b4e0 <col:9, col:13> 'u64':'unsigned long long' lvalue
|         | |-ImplicitCastExpr 0x196f209b4c8 <col:9> 'u64 *':'u64 *' <LValueToRValue>
|         | | `-DeclRefExpr 0x196f209b480 <col:9> 'u64 *':'u64 *' lvalue ParmVar 0x196f20963f8 'Xi' 'u64 *':'u64 *'
|         | `-IntegerLiteral 0x196f209b4a0 <col:12> 'int' 1
|         `-ImplicitCastExpr 0x196f209b550 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|           `-MemberExpr 0x196f209b520 <col:17, col:19> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|             `-DeclRefExpr 0x196f209b500 <col:17> 'u128':'u128' lvalue Var 0x196f2096660 'Z' 'u128':'u128'
|-FunctionDecl 0x196f2099e10 <.//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:25> col:25 implicit used _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x196f2099eb0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x196f2099f20 <col:25> Implicit
| `-ConstAttr 0x196f2099f78 <col:25> Implicit
|-FunctionDecl 0x196f209b9a8 <.//openssl//file_jk/after\crypto\modes\gcm128.c:376:1, line:545:1> line:376:13 used gcm_ghash_4bit 'void (u64 *, const u128 *, const u8 *, size_t)' static
| |-ParmVarDecl 0x196f209b698 <col:28, col:36> col:32 used Xi 'u64 *':'u64 *'
| |-ParmVarDecl 0x196f209b760 <col:39, col:59> col:50 used Htable 'const u128 *':'const u128 *'
| |-ParmVarDecl 0x196f209b7d8 <line:377:28, col:38> col:38 used inp 'const u8 *'
| |-ParmVarDecl 0x196f209b850 <col:43, col:50> col:50 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x196f209db58 <line:378:1, line:545:1>
|   |-DeclStmt 0x196f209baf8 <line:379:5, col:11>
|   | `-VarDecl 0x196f209ba90 <col:5, col:10> col:10 used Z 'u128':'u128'
|   |-DeclStmt 0x196f209bb90 <line:380:5, col:12>
|   | `-VarDecl 0x196f209bb28 <col:5, col:9> col:9 used cnt 'int'
|   |-DeclStmt 0x196f209bd30 <line:381:5, col:25>
|   | |-VarDecl 0x196f209bbb8 <col:5, col:12> col:12 used rem 'size_t':'unsigned long long'
|   | |-VarDecl 0x196f209bc30 <col:5, col:17> col:17 used nlo 'size_t':'unsigned long long'
|   | `-VarDecl 0x196f209bca8 <col:5, col:22> col:22 used nhi 'size_t':'unsigned long long'
|   |-DeclStmt 0x196f209c0b0 <line:382:5, line:385:24>
|   | |-RecordDecl 0x196f209bd48 <line:382:11, line:385:5> line:382:11 union definition
|   | | |-FieldDecl 0x196f209be18 <line:383:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x196f209be80 <line:384:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x196f209bf38 <line:382:5, line:385:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:382:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:382:11)' cinit
|   |   `-InitListExpr 0x196f209c038 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:382:11)':'union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:382:11)' field Field 0x196f209be18 'one' 'long'
|   |     `-ImplicitCastExpr 0x196f209c080 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x196f209bfa0 <col:21> 'int' 1
|   `-DoStmt 0x196f209db38 <line:388:5, line:544:34>
|     |-CompoundStmt 0x196f209d9b8 <line:388:8, line:544:5>
|     | |-BinaryOperator 0x196f209c128 <line:389:9, col:15> 'int' '='
|     | | |-DeclRefExpr 0x196f209c0c8 <col:9> 'int' lvalue Var 0x196f209bb28 'cnt' 'int'
|     | | `-IntegerLiteral 0x196f209c100 <col:15> 'int' 15
|     | |-BinaryOperator 0x196f209c288 <line:390:9, col:34> 'size_t':'unsigned long long' '='
|     | | |-DeclRefExpr 0x196f209c148 <col:9> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x196f209c270 <col:15, col:34> 'size_t':'unsigned long long' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x196f209c258 <col:15, col:34> 'u8':'unsigned char' <LValueToRValue>
|     | |     `-ArraySubscriptExpr 0x196f209c238 <col:15, col:34> 'const u8':'const unsigned char' lvalue
|     | |       |-ParenExpr 0x196f209c1f0 <col:15, col:30> 'const u8 *'
|     | |       | `-CStyleCastExpr 0x196f209c1c8 <col:16, col:28> 'const u8 *' <BitCast>
|     | |       |   `-ImplicitCastExpr 0x196f209c1b0 <col:28> 'u64 *':'u64 *' <LValueToRValue> part_of_explicit_cast
|     | |       |     `-DeclRefExpr 0x196f209c180 <col:28> 'u64 *':'u64 *' lvalue ParmVar 0x196f209b698 'Xi' 'u64 *':'u64 *'
|     | |       `-IntegerLiteral 0x196f209c210 <col:32> 'int' 15
|     | |-CompoundAssignOperator 0x196f209c378 <line:391:9, col:22> 'size_t':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | | |-DeclRefExpr 0x196f209c2a8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x196f209c360 <col:16, col:22> 'unsigned long long' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x196f209c348 <col:16, col:22> 'u8':'unsigned char' <LValueToRValue>
|     | |     `-ArraySubscriptExpr 0x196f209c328 <col:16, col:22> 'const u8':'const unsigned char' lvalue
|     | |       |-ImplicitCastExpr 0x196f209c310 <col:16> 'const u8 *' <LValueToRValue>
|     | |       | `-DeclRefExpr 0x196f209c2c8 <col:16> 'const u8 *' lvalue ParmVar 0x196f209b7d8 'inp' 'const u8 *'
|     | |       `-IntegerLiteral 0x196f209c2e8 <col:20> 'int' 15
|     | |-BinaryOperator 0x196f209c460 <line:392:9, col:22> 'size_t':'unsigned long long' '='
|     | | |-DeclRefExpr 0x196f209c3a8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x196f209bca8 'nhi' 'size_t':'unsigned long long'
|     | | `-BinaryOperator 0x196f209c440 <col:15, col:22> 'size_t':'unsigned long long' '>>'
|     | |   |-ImplicitCastExpr 0x196f209c428 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   | `-DeclRefExpr 0x196f209c3e0 <col:15> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | |   `-IntegerLiteral 0x196f209c400 <col:22> 'int' 4
|     | |-CompoundAssignOperator 0x196f209c4e0 <line:393:9, col:16> 'size_t':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | | |-DeclRefExpr 0x196f209c480 <col:9> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x196f209c4c8 <col:16> 'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x196f209c4a0 <col:16> 'int' 15
|     | |-BinaryOperator 0x196f209c650 <line:395:9, col:28> 'u64':'unsigned long long' '='
|     | | |-MemberExpr 0x196f209c548 <col:9, col:11> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | | | `-DeclRefExpr 0x196f209c510 <col:9> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | | `-ImplicitCastExpr 0x196f209c638 <col:16, col:28> 'u64':'unsigned long long' <LValueToRValue>
|     | |   `-MemberExpr 0x196f209c608 <col:16, col:28> 'const u64':'const unsigned long long' lvalue .hi 0x196f1ec0550
|     | |     `-ArraySubscriptExpr 0x196f209c5e8 <col:16, col:26> 'const u128':'const u128' lvalue
|     | |       |-ImplicitCastExpr 0x196f209c5b8 <col:16> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |       | `-DeclRefExpr 0x196f209c578 <col:16> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f209b760 'Htable' 'const u128 *':'const u128 *'
|     | |       `-ImplicitCastExpr 0x196f209c5d0 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|     | |         `-DeclRefExpr 0x196f209c598 <col:23> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | |-BinaryOperator 0x196f209c798 <line:396:9, col:28> 'u64':'unsigned long long' '='
|     | | |-MemberExpr 0x196f209c690 <col:9, col:11> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     | | | `-DeclRefExpr 0x196f209c670 <col:9> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | | `-ImplicitCastExpr 0x196f209c780 <col:16, col:28> 'u64':'unsigned long long' <LValueToRValue>
|     | |   `-MemberExpr 0x196f209c750 <col:16, col:28> 'const u64':'const unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |     `-ArraySubscriptExpr 0x196f209c730 <col:16, col:26> 'const u128':'const u128' lvalue
|     | |       |-ImplicitCastExpr 0x196f209c700 <col:16> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |       | `-DeclRefExpr 0x196f209c6c0 <col:16> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f209b760 'Htable' 'const u128 *':'const u128 *'
|     | |       `-ImplicitCastExpr 0x196f209c718 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|     | |         `-DeclRefExpr 0x196f209c6e0 <col:23> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | |-WhileStmt 0x196f209d2e8 <line:398:9, line:428:9>
|     | | |-IntegerLiteral 0x196f209c7b8 <line:398:16> 'int' 1
|     | | `-CompoundStmt 0x196f209d250 <col:19, line:428:9>
|     | |   |-BinaryOperator 0x196f209c918 <line:399:13, col:34> 'size_t':'unsigned long long' '='
|     | |   | |-DeclRefExpr 0x196f209c7e0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x196f209bbb8 'rem' 'size_t':'unsigned long long'
|     | |   | `-BinaryOperator 0x196f209c8f8 <col:19, col:34> 'unsigned long long' '&'
|     | |   |   |-CStyleCastExpr 0x196f209c890 <col:19, col:29> 'size_t':'unsigned long long' <NoOp>
|     | |   |   | `-ImplicitCastExpr 0x196f209c878 <col:27, col:29> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   `-MemberExpr 0x196f209c838 <col:27, col:29> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |   |   |     `-DeclRefExpr 0x196f209c818 <col:27> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   |   `-ImplicitCastExpr 0x196f209c8e0 <col:34> 'unsigned long long' <IntegralCast>
|     | |   |     `-IntegerLiteral 0x196f209c8b8 <col:34> 'int' 15
|     | |   |-BinaryOperator 0x196f209cb48 <line:400:13, col:45> 'u64':'unsigned long long' '='
|     | |   | |-MemberExpr 0x196f209c958 <col:13, col:15> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |   | | `-DeclRefExpr 0x196f209c938 <col:13> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   | `-BinaryOperator 0x196f209cb28 <col:20, col:45> 'unsigned long long' '|'
|     | |   |   |-ParenExpr 0x196f209ca38 <col:20, col:31> 'u64':'unsigned long long'
|     | |   |   | `-BinaryOperator 0x196f209ca18 <col:21, col:29> 'u64':'unsigned long long' '<<'
|     | |   |   |   |-ImplicitCastExpr 0x196f209ca00 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |   |   | `-MemberExpr 0x196f209c9a8 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   |   |   |   `-DeclRefExpr 0x196f209c988 <col:21> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   |   |   `-IntegerLiteral 0x196f209c9d8 <col:29> 'int' 60
|     | |   |   `-ParenExpr 0x196f209cb08 <col:35, col:45> 'u64':'unsigned long long'
|     | |   |     `-BinaryOperator 0x196f209cae8 <col:36, col:44> 'u64':'unsigned long long' '>>'
|     | |   |       |-ImplicitCastExpr 0x196f209cad0 <col:36, col:38> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |       | `-MemberExpr 0x196f209ca78 <col:36, col:38> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |   |       |   `-DeclRefExpr 0x196f209ca58 <col:36> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   |       `-IntegerLiteral 0x196f209caa8 <col:44> 'int' 4
|     | |   |-BinaryOperator 0x196f209cc88 <line:401:13, col:30> 'u64':'unsigned long long' '='
|     | |   | |-MemberExpr 0x196f209cb88 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   | | `-DeclRefExpr 0x196f209cb68 <col:13> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   | `-ParenExpr 0x196f209cc68 <col:20, col:30> 'u64':'unsigned long long'
|     | |   |   `-BinaryOperator 0x196f209cc48 <col:21, col:29> 'u64':'unsigned long long' '>>'
|     | |   |     |-ImplicitCastExpr 0x196f209cc30 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |     | `-MemberExpr 0x196f209cbd8 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   |     |   `-DeclRefExpr 0x196f209cbb8 <col:21> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   |     `-IntegerLiteral 0x196f209cc08 <col:29> 'int' 4
|     | |   |-IfStmt 0x196f2094fa0 <line:402:13, line:405:47> has_else
|     | |   | |-BinaryOperator 0x196f209cd18 <line:402:17, col:35> 'int' '=='
|     | |   | | |-UnaryExprOrTypeTraitExpr 0x196f209ccb8 <col:17, col:30> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|     | |   | | `-ImplicitCastExpr 0x196f209cd00 <col:35> 'unsigned long long' <IntegralCast>
|     | |   | |   `-IntegerLiteral 0x196f209ccd8 <col:35> 'int' 8
|     | |   | |-CompoundAssignOperator 0x196f209ce30 <line:403:17, col:37> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | | |-MemberExpr 0x196f209cd58 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   | | | `-DeclRefExpr 0x196f209cd38 <col:17> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   | | `-ImplicitCastExpr 0x196f209ce18 <col:25, col:37> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   | |   `-ArraySubscriptExpr 0x196f209cdf8 <col:25, col:37> 'const size_t':'const unsigned long long' lvalue
|     | |   | |     |-ImplicitCastExpr 0x196f209cdc8 <col:25> 'const size_t *' <ArrayToPointerDecay>
|     | |   | |     | `-DeclRefExpr 0x196f209cd88 <col:25> 'const size_t [16]' lvalue Var 0x196f2093248 'rem_4bit' 'const size_t [16]'
|     | |   | |     `-ImplicitCastExpr 0x196f209cde0 <col:34> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   | |       `-DeclRefExpr 0x196f209cda8 <col:34> 'size_t':'unsigned long long' lvalue Var 0x196f209bbb8 'rem' 'size_t':'unsigned long long'
|     | |   | `-CompoundAssignOperator 0x196f2094f70 <line:405:17, col:47> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   |   |-MemberExpr 0x196f209ce80 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   |   | `-DeclRefExpr 0x196f209ce60 <col:17> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   |   `-BinaryOperator 0x196f209cfb8 <col:25, col:47> 'u64':'unsigned long long' '<<'
|     | |   |     |-CStyleCastExpr 0x196f209cf68 <col:25, col:42> 'u64':'unsigned long long' <NoOp>
|     | |   |     | `-ImplicitCastExpr 0x196f209cf50 <col:30, col:42> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     | |   |     |   `-ArraySubscriptExpr 0x196f209cf20 <col:30, col:42> 'const size_t':'const unsigned long long' lvalue
|     | |   |     |     |-ImplicitCastExpr 0x196f209cef0 <col:30> 'const size_t *' <ArrayToPointerDecay>
|     | |   |     |     | `-DeclRefExpr 0x196f209ceb0 <col:30> 'const size_t [16]' lvalue Var 0x196f2093248 'rem_4bit' 'const size_t [16]'
|     | |   |     |     `-ImplicitCastExpr 0x196f209cf08 <col:39> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |     |       `-DeclRefExpr 0x196f209ced0 <col:39> 'size_t':'unsigned long long' lvalue Var 0x196f209bbb8 'rem' 'size_t':'unsigned long long'
|     | |   |     `-IntegerLiteral 0x196f209cf90 <col:47> 'int' 32
|     | |   |-CompoundAssignOperator 0x196f20950f0 <line:407:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | |-MemberExpr 0x196f2094fe8 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   | | `-DeclRefExpr 0x196f2094fc8 <col:13> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   | `-ImplicitCastExpr 0x196f20950d8 <col:21, col:33> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |   `-MemberExpr 0x196f20950a8 <col:21, col:33> 'const u64':'const unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   |     `-ArraySubscriptExpr 0x196f2095088 <col:21, col:31> 'const u128':'const u128' lvalue
|     | |   |       |-ImplicitCastExpr 0x196f2095058 <col:21> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |   |       | `-DeclRefExpr 0x196f2095018 <col:21> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f209b760 'Htable' 'const u128 *':'const u128 *'
|     | |   |       `-ImplicitCastExpr 0x196f2095070 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |         `-DeclRefExpr 0x196f2095038 <col:28> 'size_t':'unsigned long long' lvalue Var 0x196f209bca8 'nhi' 'size_t':'unsigned long long'
|     | |   |-CompoundAssignOperator 0x196f2095248 <line:408:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | |-MemberExpr 0x196f2095140 <col:13, col:15> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |   | | `-DeclRefExpr 0x196f2095120 <col:13> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   | `-ImplicitCastExpr 0x196f2095230 <col:21, col:33> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |   `-MemberExpr 0x196f2095200 <col:21, col:33> 'const u64':'const unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |   |     `-ArraySubscriptExpr 0x196f20951e0 <col:21, col:31> 'const u128':'const u128' lvalue
|     | |   |       |-ImplicitCastExpr 0x196f20951b0 <col:21> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |   |       | `-DeclRefExpr 0x196f2095170 <col:21> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f209b760 'Htable' 'const u128 *':'const u128 *'
|     | |   |       `-ImplicitCastExpr 0x196f20951c8 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |         `-DeclRefExpr 0x196f2095190 <col:28> 'size_t':'unsigned long long' lvalue Var 0x196f209bca8 'nhi' 'size_t':'unsigned long long'
|     | |   |-IfStmt 0x196f2095300 <line:410:13, line:411:17>
|     | |   | |-BinaryOperator 0x196f20952d8 <line:410:17, col:25> 'int' '<'
|     | |   | | |-UnaryOperator 0x196f2095298 <col:17, col:19> 'int' prefix '--'
|     | |   | | | `-DeclRefExpr 0x196f2095278 <col:19> 'int' lvalue Var 0x196f209bb28 'cnt' 'int'
|     | |   | | `-IntegerLiteral 0x196f20952b0 <col:25> 'int' 0
|     | |   | `-BreakStmt 0x196f20952f8 <line:411:17>
|     | |   |-BinaryOperator 0x196f2095450 <line:413:13, col:39> 'size_t':'unsigned long long' '='
|     | |   | |-DeclRefExpr 0x196f2095318 <col:13> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | |   | `-ImplicitCastExpr 0x196f2095438 <col:19, col:39> 'size_t':'unsigned long long' <IntegralCast>
|     | |   |   `-ImplicitCastExpr 0x196f2095420 <col:19, col:39> 'u8':'unsigned char' <LValueToRValue>
|     | |   |     `-ArraySubscriptExpr 0x196f2095400 <col:19, col:39> 'const u8':'const unsigned char' lvalue
|     | |   |       |-ParenExpr 0x196f20953a8 <col:19, col:34> 'const u8 *'
|     | |   |       | `-CStyleCastExpr 0x196f2095380 <col:20, col:32> 'const u8 *' <BitCast>
|     | |   |       |   `-ImplicitCastExpr 0x196f2095368 <col:32> 'u64 *':'u64 *' <LValueToRValue> part_of_explicit_cast
|     | |   |       |     `-DeclRefExpr 0x196f2095338 <col:32> 'u64 *':'u64 *' lvalue ParmVar 0x196f209b698 'Xi' 'u64 *':'u64 *'
|     | |   |       `-ImplicitCastExpr 0x196f20953e8 <col:36> 'int' <LValueToRValue>
|     | |   |         `-DeclRefExpr 0x196f20953c8 <col:36> 'int' lvalue Var 0x196f209bb28 'cnt' 'int'
|     | |   |-CompoundAssignOperator 0x196f2095550 <line:414:13, col:27> 'size_t':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | |-DeclRefExpr 0x196f2095470 <col:13> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | |   | `-ImplicitCastExpr 0x196f2095538 <col:20, col:27> 'unsigned long long' <IntegralCast>
|     | |   |   `-ImplicitCastExpr 0x196f2095520 <col:20, col:27> 'u8':'unsigned char' <LValueToRValue>
|     | |   |     `-ArraySubscriptExpr 0x196f2095500 <col:20, col:27> 'const u8':'const unsigned char' lvalue
|     | |   |       |-ImplicitCastExpr 0x196f20954d0 <col:20> 'const u8 *' <LValueToRValue>
|     | |   |       | `-DeclRefExpr 0x196f2095490 <col:20> 'const u8 *' lvalue ParmVar 0x196f209b7d8 'inp' 'const u8 *'
|     | |   |       `-ImplicitCastExpr 0x196f20954e8 <col:24> 'int' <LValueToRValue>
|     | |   |         `-DeclRefExpr 0x196f20954b0 <col:24> 'int' lvalue Var 0x196f209bb28 'cnt' 'int'
|     | |   |-BinaryOperator 0x196f2095620 <line:415:13, col:26> 'size_t':'unsigned long long' '='
|     | |   | |-DeclRefExpr 0x196f2095580 <col:13> 'size_t':'unsigned long long' lvalue Var 0x196f209bca8 'nhi' 'size_t':'unsigned long long'
|     | |   | `-BinaryOperator 0x196f2095600 <col:19, col:26> 'size_t':'unsigned long long' '>>'
|     | |   |   |-ImplicitCastExpr 0x196f20955e8 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |   | `-DeclRefExpr 0x196f20955a0 <col:19> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | |   |   `-IntegerLiteral 0x196f20955c0 <col:26> 'int' 4
|     | |   |-CompoundAssignOperator 0x196f20956a0 <line:416:13, col:20> 'size_t':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | |-DeclRefExpr 0x196f2095640 <col:13> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | |   | `-ImplicitCastExpr 0x196f2095688 <col:20> 'unsigned long long' <IntegralCast>
|     | |   |   `-IntegerLiteral 0x196f2095660 <col:20> 'int' 15
|     | |   |-BinaryOperator 0x196f20957f0 <line:418:13, col:34> 'size_t':'unsigned long long' '='
|     | |   | |-DeclRefExpr 0x196f20956d0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x196f209bbb8 'rem' 'size_t':'unsigned long long'
|     | |   | `-BinaryOperator 0x196f20957d0 <col:19, col:34> 'unsigned long long' '&'
|     | |   |   |-CStyleCastExpr 0x196f2095768 <col:19, col:29> 'size_t':'unsigned long long' <NoOp>
|     | |   |   | `-ImplicitCastExpr 0x196f2095750 <col:27, col:29> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   `-MemberExpr 0x196f2095710 <col:27, col:29> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |   |   |     `-DeclRefExpr 0x196f20956f0 <col:27> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   |   `-ImplicitCastExpr 0x196f20957b8 <col:34> 'unsigned long long' <IntegralCast>
|     | |   |     `-IntegerLiteral 0x196f2095790 <col:34> 'int' 15
|     | |   |-BinaryOperator 0x196f2095a20 <line:419:13, col:45> 'u64':'unsigned long long' '='
|     | |   | |-MemberExpr 0x196f2095830 <col:13, col:15> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |   | | `-DeclRefExpr 0x196f2095810 <col:13> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   | `-BinaryOperator 0x196f2095a00 <col:20, col:45> 'unsigned long long' '|'
|     | |   |   |-ParenExpr 0x196f2095910 <col:20, col:31> 'u64':'unsigned long long'
|     | |   |   | `-BinaryOperator 0x196f20958f0 <col:21, col:29> 'u64':'unsigned long long' '<<'
|     | |   |   |   |-ImplicitCastExpr 0x196f20958d8 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |   |   | `-MemberExpr 0x196f2095880 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   |   |   |   `-DeclRefExpr 0x196f2095860 <col:21> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   |   |   `-IntegerLiteral 0x196f20958b0 <col:29> 'int' 60
|     | |   |   `-ParenExpr 0x196f20959e0 <col:35, col:45> 'u64':'unsigned long long'
|     | |   |     `-BinaryOperator 0x196f20959c0 <col:36, col:44> 'u64':'unsigned long long' '>>'
|     | |   |       |-ImplicitCastExpr 0x196f20959a8 <col:36, col:38> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |       | `-MemberExpr 0x196f2095950 <col:36, col:38> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |   |       |   `-DeclRefExpr 0x196f2095930 <col:36> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   |       `-IntegerLiteral 0x196f2095980 <col:44> 'int' 4
|     | |   |-BinaryOperator 0x196f2095b60 <line:420:13, col:30> 'u64':'unsigned long long' '='
|     | |   | |-MemberExpr 0x196f2095a60 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   | | `-DeclRefExpr 0x196f2095a40 <col:13> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   | `-ParenExpr 0x196f2095b40 <col:20, col:30> 'u64':'unsigned long long'
|     | |   |   `-BinaryOperator 0x196f2095b20 <col:21, col:29> 'u64':'unsigned long long' '>>'
|     | |   |     |-ImplicitCastExpr 0x196f2095b08 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |     | `-MemberExpr 0x196f2095ab0 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   |     |   `-DeclRefExpr 0x196f2095a90 <col:21> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   |     `-IntegerLiteral 0x196f2095ae0 <col:29> 'int' 4
|     | |   |-IfStmt 0x196f2095ee0 <line:421:13, line:424:47> has_else
|     | |   | |-BinaryOperator 0x196f2095bf0 <line:421:17, col:35> 'int' '=='
|     | |   | | |-UnaryExprOrTypeTraitExpr 0x196f2095b90 <col:17, col:30> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|     | |   | | `-ImplicitCastExpr 0x196f2095bd8 <col:35> 'unsigned long long' <IntegralCast>
|     | |   | |   `-IntegerLiteral 0x196f2095bb0 <col:35> 'int' 8
|     | |   | |-CompoundAssignOperator 0x196f2095d08 <line:422:17, col:37> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | | |-MemberExpr 0x196f2095c30 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   | | | `-DeclRefExpr 0x196f2095c10 <col:17> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   | | `-ImplicitCastExpr 0x196f2095cf0 <col:25, col:37> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   | |   `-ArraySubscriptExpr 0x196f2095cd0 <col:25, col:37> 'const size_t':'const unsigned long long' lvalue
|     | |   | |     |-ImplicitCastExpr 0x196f2095ca0 <col:25> 'const size_t *' <ArrayToPointerDecay>
|     | |   | |     | `-DeclRefExpr 0x196f2095c60 <col:25> 'const size_t [16]' lvalue Var 0x196f2093248 'rem_4bit' 'const size_t [16]'
|     | |   | |     `-ImplicitCastExpr 0x196f2095cb8 <col:34> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   | |       `-DeclRefExpr 0x196f2095c80 <col:34> 'size_t':'unsigned long long' lvalue Var 0x196f209bbb8 'rem' 'size_t':'unsigned long long'
|     | |   | `-CompoundAssignOperator 0x196f2095eb0 <line:424:17, col:47> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   |   |-MemberExpr 0x196f2095d58 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   |   | `-DeclRefExpr 0x196f2095d38 <col:17> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   |   `-BinaryOperator 0x196f2095e90 <col:25, col:47> 'u64':'unsigned long long' '<<'
|     | |   |     |-CStyleCastExpr 0x196f2095e40 <col:25, col:42> 'u64':'unsigned long long' <NoOp>
|     | |   |     | `-ImplicitCastExpr 0x196f2095e28 <col:30, col:42> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     | |   |     |   `-ArraySubscriptExpr 0x196f2095df8 <col:30, col:42> 'const size_t':'const unsigned long long' lvalue
|     | |   |     |     |-ImplicitCastExpr 0x196f2095dc8 <col:30> 'const size_t *' <ArrayToPointerDecay>
|     | |   |     |     | `-DeclRefExpr 0x196f2095d88 <col:30> 'const size_t [16]' lvalue Var 0x196f2093248 'rem_4bit' 'const size_t [16]'
|     | |   |     |     `-ImplicitCastExpr 0x196f2095de0 <col:39> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |     |       `-DeclRefExpr 0x196f2095da8 <col:39> 'size_t':'unsigned long long' lvalue Var 0x196f209bbb8 'rem' 'size_t':'unsigned long long'
|     | |   |     `-IntegerLiteral 0x196f2095e68 <col:47> 'int' 32
|     | |   |-CompoundAssignOperator 0x196f209d0c8 <line:426:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | |-MemberExpr 0x196f2095f28 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   | | `-DeclRefExpr 0x196f2095f08 <col:13> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |   | `-ImplicitCastExpr 0x196f209d0b0 <col:21, col:33> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |   `-MemberExpr 0x196f209d080 <col:21, col:33> 'const u64':'const unsigned long long' lvalue .hi 0x196f1ec0550
|     | |   |     `-ArraySubscriptExpr 0x196f209d060 <col:21, col:31> 'const u128':'const u128' lvalue
|     | |   |       |-ImplicitCastExpr 0x196f209d030 <col:21> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |   |       | `-DeclRefExpr 0x196f209cff0 <col:21> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f209b760 'Htable' 'const u128 *':'const u128 *'
|     | |   |       `-ImplicitCastExpr 0x196f209d048 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |         `-DeclRefExpr 0x196f209d010 <col:28> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | |   `-CompoundAssignOperator 0x196f209d220 <line:427:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |     |-MemberExpr 0x196f209d118 <col:13, col:15> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |     | `-DeclRefExpr 0x196f209d0f8 <col:13> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     | |     `-ImplicitCastExpr 0x196f209d208 <col:21, col:33> 'u64':'unsigned long long' <LValueToRValue>
|     | |       `-MemberExpr 0x196f209d1d8 <col:21, col:33> 'const u64':'const unsigned long long' lvalue .lo 0x196f1ec05b8
|     | |         `-ArraySubscriptExpr 0x196f209d1b8 <col:21, col:31> 'const u128':'const u128' lvalue
|     | |           |-ImplicitCastExpr 0x196f209d188 <col:21> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |           | `-DeclRefExpr 0x196f209d148 <col:21> 'const u128 *':'const u128 *' lvalue ParmVar 0x196f209b760 'Htable' 'const u128 *':'const u128 *'
|     | |           `-ImplicitCastExpr 0x196f209d1a0 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|     | |             `-DeclRefExpr 0x196f209d168 <col:28> 'size_t':'unsigned long long' lvalue Var 0x196f209bc30 'nlo' 'size_t':'unsigned long long'
|     | `-IfStmt 0x196f209d990 <line:524:9, line:543:9> has_else
|     |   |-ImplicitCastExpr 0x196f209d368 <line:524:13, col:23> 'char' <LValueToRValue>
|     |   | `-MemberExpr 0x196f209d338 <col:13, col:23> 'const char' lvalue .little 0x196f209be80
|     |   |   `-DeclRefExpr 0x196f209d300 <col:13> 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:382:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:382:11)' lvalue Var 0x196f209bf38 'is_endian' 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:382:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:382:11)'
|     |   |-CompoundStmt 0x196f209d740 <col:31, line:540:9>
|     |   | |-BinaryOperator 0x196f209d540 <line:526:13, .//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|     |   | | |-ArraySubscriptExpr 0x196f209d3e0 <.//openssl//file_jk/after\crypto\modes\gcm128.c:526:13, col:17> 'u64':'unsigned long long' lvalue
|     |   | | | |-ImplicitCastExpr 0x196f209d3c8 <col:13> 'u64 *':'u64 *' <LValueToRValue>
|     |   | | | | `-DeclRefExpr 0x196f209d380 <col:13> 'u64 *':'u64 *' lvalue ParmVar 0x196f209b698 'Xi' 'u64 *':'u64 *'
|     |   | | | `-IntegerLiteral 0x196f209d3a0 <col:16> 'int' 0
|     |   | | `-CallExpr 0x196f209d518 <.//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|     |   | |   |-ImplicitCastExpr 0x196f209d500 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|     |   | |   | `-DeclRefExpr 0x196f209d400 <col:25> 'unsigned long long (unsigned long long)' Function 0x196f2099e10 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|     |   | |   `-CStyleCastExpr 0x196f209d4d8 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|     |   | |     `-ImplicitCastExpr 0x196f209d4c0 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     |   | |       `-ParenExpr 0x196f209d4a0 <col:47, col:49> 'u64':'unsigned long long' lvalue
|     |   | |         `-MemberExpr 0x196f209d440 <.//openssl//file_jk/after\crypto\modes\gcm128.c:526:28, col:30> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     |   | |           `-DeclRefExpr 0x196f209d420 <col:28> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     |   | `-BinaryOperator 0x196f209d720 <line:527:13, .//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|     |   |   |-ArraySubscriptExpr 0x196f209d5c0 <.//openssl//file_jk/after\crypto\modes\gcm128.c:527:13, col:17> 'u64':'unsigned long long' lvalue
|     |   |   | |-ImplicitCastExpr 0x196f209d5a8 <col:13> 'u64 *':'u64 *' <LValueToRValue>
|     |   |   | | `-DeclRefExpr 0x196f209d560 <col:13> 'u64 *':'u64 *' lvalue ParmVar 0x196f209b698 'Xi' 'u64 *':'u64 *'
|     |   |   | `-IntegerLiteral 0x196f209d580 <col:16> 'int' 1
|     |   |   `-CallExpr 0x196f209d6f8 <.//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|     |   |     |-ImplicitCastExpr 0x196f209d6e0 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|     |   |     | `-DeclRefExpr 0x196f209d5e0 <col:25> 'unsigned long long (unsigned long long)' Function 0x196f2099e10 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|     |   |     `-CStyleCastExpr 0x196f209d6b8 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|     |   |       `-ImplicitCastExpr 0x196f209d6a0 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     |   |         `-ParenExpr 0x196f209d680 <col:47, col:49> 'u64':'unsigned long long' lvalue
|     |   |           `-MemberExpr 0x196f209d620 <.//openssl//file_jk/after\crypto\modes\gcm128.c:527:28, col:30> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     |   |             `-DeclRefExpr 0x196f209d600 <col:28> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     |   `-CompoundStmt 0x196f209d970 <line:540:16, line:543:9>
|     |     |-BinaryOperator 0x196f209d848 <line:541:13, col:23> 'u64':'unsigned long long' '='
|     |     | |-ArraySubscriptExpr 0x196f209d7c0 <col:13, col:17> 'u64':'unsigned long long' lvalue
|     |     | | |-ImplicitCastExpr 0x196f209d7a8 <col:13> 'u64 *':'u64 *' <LValueToRValue>
|     |     | | | `-DeclRefExpr 0x196f209d760 <col:13> 'u64 *':'u64 *' lvalue ParmVar 0x196f209b698 'Xi' 'u64 *':'u64 *'
|     |     | | `-IntegerLiteral 0x196f209d780 <col:16> 'int' 0
|     |     | `-ImplicitCastExpr 0x196f209d830 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     |     |   `-MemberExpr 0x196f209d800 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x196f1ec0550
|     |     |     `-DeclRefExpr 0x196f209d7e0 <col:21> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     |     `-BinaryOperator 0x196f209d950 <line:542:13, col:23> 'u64':'unsigned long long' '='
|     |       |-ArraySubscriptExpr 0x196f209d8c8 <col:13, col:17> 'u64':'unsigned long long' lvalue
|     |       | |-ImplicitCastExpr 0x196f209d8b0 <col:13> 'u64 *':'u64 *' <LValueToRValue>
|     |       | | `-DeclRefExpr 0x196f209d868 <col:13> 'u64 *':'u64 *' lvalue ParmVar 0x196f209b698 'Xi' 'u64 *':'u64 *'
|     |       | `-IntegerLiteral 0x196f209d888 <col:16> 'int' 1
|     |       `-ImplicitCastExpr 0x196f209d938 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     |         `-MemberExpr 0x196f209d908 <col:21, col:23> 'u64':'unsigned long long' lvalue .lo 0x196f1ec05b8
|     |           `-DeclRefExpr 0x196f209d8e8 <col:21> 'u128':'u128' lvalue Var 0x196f209ba90 'Z' 'u128':'u128'
|     `-BinaryOperator 0x196f209db18 <line:544:14, col:32> 'size_t':'unsigned long long' ','
|       |-CompoundAssignOperator 0x196f209da58 <col:14, col:21> 'const u8 *' '+=' ComputeLHSTy='const u8 *' ComputeResultTy='const u8 *'
|       | |-DeclRefExpr 0x196f209da10 <col:14> 'const u8 *' lvalue ParmVar 0x196f209b7d8 'inp' 'const u8 *'
|       | `-IntegerLiteral 0x196f209da30 <col:21> 'int' 16
|       `-CompoundAssignOperator 0x196f209dae8 <col:25, col:32> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|         |-DeclRefExpr 0x196f209da88 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x196f209b850 'len' 'size_t':'unsigned long long'
|         `-ImplicitCastExpr 0x196f209dad0 <col:32> 'unsigned long long' <IntegralCast>
|           `-IntegerLiteral 0x196f209daa8 <col:32> 'int' 16
|-FunctionDecl 0x196f209dd88 <line:713:1, line:825:1> line:713:6 invalid CRYPTO_gcm128_init 'void (int *, void *, int)'
| |-ParmVarDecl 0x196f209dba8 <col:25, col:41> col:41 invalid ctx 'int *'
| |-ParmVarDecl 0x196f209dc28 <col:46, col:52> col:52 used key 'void *'
| |-ParmVarDecl 0x196f209dca8 <col:57, col:68> col:68 invalid block 'int'
| `-CompoundStmt 0x196f209e418 <line:714:1, line:825:1>
|   |-DeclStmt 0x196f209e1b8 <line:715:5, line:718:24>
|   | |-RecordDecl 0x196f209de58 <line:715:11, line:718:5> line:715:11 union definition
|   | | |-FieldDecl 0x196f209df28 <line:716:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x196f209df90 <line:717:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x196f209e058 <line:715:5, line:718:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:715:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:715:11)' cinit
|   |   `-InitListExpr 0x196f209e140 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:715:11)':'union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:715:11)' field Field 0x196f209df28 'one' 'long'
|   |     `-ImplicitCastExpr 0x196f209e188 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x196f209e0c0 <col:21> 'int' 1
|   `-IfStmt 0x196f209e3e0 <line:726:5, line:739:5>
|     |-ImplicitCastExpr 0x196f209e2d8 <line:726:9, col:19> 'char' <LValueToRValue>
|     | `-MemberExpr 0x196f209e2a8 <col:9, col:19> 'const char' lvalue .little 0x196f209df90
|     |   `-DeclRefExpr 0x196f209e270 <col:9> 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:715:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:715:11)' lvalue Var 0x196f209e058 'is_endian' 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:715:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:715:11)'
|     `-CompoundStmt 0x196f209e3d0 <col:27, line:739:5>
|-FunctionDecl 0x196f209e668 <line:827:1, line:907:1> line:827:6 invalid CRYPTO_gcm128_setiv 'void (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x196f209e450 <col:26, col:42> col:42 invalid ctx 'int *'
| |-ParmVarDecl 0x196f209e4d0 <col:47, col:68> col:68 used iv 'const unsigned char *'
| |-ParmVarDecl 0x196f209e548 <line:828:26, col:33> col:33 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x196f20a30f0 <line:829:1, line:907:1>
|   |-DeclStmt 0x196f209ea88 <line:830:5, line:833:24>
|   | |-RecordDecl 0x196f209e738 <line:830:11, line:833:5> line:830:11 union definition
|   | | |-FieldDecl 0x196f209e808 <line:831:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x196f209e870 <line:832:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x196f209e928 <line:830:5, line:833:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:830:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:830:11)' cinit
|   |   `-InitListExpr 0x196f209ea10 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:830:11)':'union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:830:11)' field Field 0x196f209e808 'one' 'long'
|   |     `-ImplicitCastExpr 0x196f209ea58 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x196f209e990 <col:21> 'int' 1
|   |-DeclStmt 0x196f209eb20 <line:834:5, col:21>
|   | `-VarDecl 0x196f209eab8 <col:5, col:18> col:18 used ctr 'unsigned int'
|   |-IfStmt 0x196f20a0e28 <line:848:5, line:895:5> has_else
|   | |-BinaryOperator 0x196f209edf8 <line:848:9, col:16> 'int' '=='
|   | | |-ImplicitCastExpr 0x196f209edc8 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x196f209ed68 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x196f209e548 'len' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x196f209ede0 <col:16> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x196f209eda0 <col:16> 'int' 12
|   | |-CompoundStmt 0x196f209ef80 <col:20, line:852:5>
|   | | `-BinaryOperator 0x196f209ef60 <line:851:9, col:15> 'unsigned int' '='
|   | |   |-DeclRefExpr 0x196f209eee8 <col:9> 'unsigned int' lvalue Var 0x196f209eab8 'ctr' 'unsigned int'
|   | |   `-ImplicitCastExpr 0x196f209ef48 <col:15> 'unsigned int' <IntegralCast>
|   | |     `-IntegerLiteral 0x196f209ef20 <col:15> 'int' 1
|   | `-CompoundStmt 0x196f20a0de8 <line:852:12, line:895:5>
|   |   |-DeclStmt 0x196f20a0088 <line:853:9, col:17>
|   |   | `-VarDecl 0x196f20a0020 <col:9, col:16> col:16 used i 'size_t':'unsigned long long'
|   |   |-DeclStmt 0x196f20a0150 <line:854:9, col:23>
|   |   | `-VarDecl 0x196f20a00b0 <col:9, col:20> col:13 used len0 'u64':'unsigned long long' cinit
|   |   |   `-ImplicitCastExpr 0x196f20a0138 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x196f20a0118 <col:20> 'size_t':'unsigned long long' lvalue ParmVar 0x196f209e548 'len' 'size_t':'unsigned long long'
|   |   |-WhileStmt 0x196f20a0560 <line:856:9, line:862:9>
|   |   | |-BinaryOperator 0x196f20a01e0 <line:856:16, col:23> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x196f20a01b0 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x196f20a0168 <col:16> 'size_t':'unsigned long long' lvalue ParmVar 0x196f209e548 'len' 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x196f20a01c8 <col:23> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x196f20a0188 <col:23> 'int' 16
|   |   | `-CompoundStmt 0x196f20a0540 <col:27, line:862:9>
|   |   |   |-CompoundAssignOperator 0x196f20a0480 <line:860:13, col:19> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   |   | |-DeclRefExpr 0x196f20a0438 <col:13> 'const unsigned char *' lvalue ParmVar 0x196f209e4d0 'iv' 'const unsigned char *'
|   |   |   | `-IntegerLiteral 0x196f20a0458 <col:19> 'int' 16
|   |   |   `-CompoundAssignOperator 0x196f20a0510 <line:861:13, col:20> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |     |-DeclRefExpr 0x196f20a04b0 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x196f209e548 'len' 'size_t':'unsigned long long'
|   |   |     `-ImplicitCastExpr 0x196f20a04f8 <col:20> 'unsigned long long' <IntegralCast>
|   |   |       `-IntegerLiteral 0x196f20a04d0 <col:20> 'int' 16
|   |   |-IfStmt 0x196f20a07d8 <line:863:9, line:867:9>
|   |   | |-ImplicitCastExpr 0x196f20a0598 <line:863:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x196f20a0578 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x196f209e548 'len' 'size_t':'unsigned long long'
|   |   | `-CompoundStmt 0x196f20a07c8 <col:18, line:867:9>
|   |   |-CompoundAssignOperator 0x196f20a0868 <line:868:9, col:18> 'u64':'unsigned long long' '<<=' ComputeLHSTy='u64':'unsigned long long' ComputeResultTy='u64':'unsigned long long'
|   |   | |-DeclRefExpr 0x196f20a07f0 <col:9> 'u64':'unsigned long long' lvalue Var 0x196f20a00b0 'len0' 'u64':'unsigned long long'
|   |   | `-IntegerLiteral 0x196f20a0828 <col:18> 'int' 3
|   |   `-IfStmt 0x196f20a0ab0 <line:869:9, line:883:13> has_else
|   |     |-ImplicitCastExpr 0x196f20a0900 <line:869:13, col:23> 'char' <LValueToRValue>
|   |     | `-MemberExpr 0x196f20a08d0 <col:13, col:23> 'const char' lvalue .little 0x196f209e870
|   |     |   `-DeclRefExpr 0x196f20a0898 <col:13> 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:830:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:830:11)' lvalue Var 0x196f209e928 'is_endian' 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:830:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:830:11)'
|   |     |-CompoundStmt 0x196f20a0a50 <col:31, line:882:9>
|   |     `-NullStmt 0x196f20a0aa8 <line:883:13>
|   `-UnaryOperator 0x196f20a0e70 <line:898:5, col:7> 'unsigned int' prefix '++'
|     `-DeclRefExpr 0x196f20a0e50 <col:7> 'unsigned int' lvalue Var 0x196f209eab8 'ctr' 'unsigned int'
|-FunctionDecl 0x196f20a0bb0 <.//openssl//file_jk/after\crypto\modes/modes_lcl.h:78:25> col:25 implicit used _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x196f20a0c50 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x196f20a0cc0 <col:25> Implicit
| `-ConstAttr 0x196f20a0d18 <col:25> Implicit
|-FunctionDecl 0x196f20a3360 <.//openssl//file_jk/after\crypto\modes\gcm128.c:909:1, line:968:1> line:909:5 invalid CRYPTO_gcm128_aad 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x196f20a3138 <col:23, col:39> col:39 invalid ctx 'int *'
| |-ParmVarDecl 0x196f20a31b8 <col:44, col:65> col:65 used aad 'const unsigned char *'
| |-ParmVarDecl 0x196f20a3230 <line:910:23, col:30> col:30 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x196f20a2628 <line:911:1, line:968:1>
|   |-DeclStmt 0x196f20a34a8 <line:912:5, col:13>
|   | `-VarDecl 0x196f20a3440 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x196f20a3540 <line:913:5, col:19>
|   | `-VarDecl 0x196f20a34d8 <col:5, col:18> col:18 used n 'unsigned int'
|   |-DeclStmt 0x196f20a35f8 <line:914:5, col:29>
|   | `-VarDecl 0x196f20a3568 <col:5, col:9> col:9 used alen 'u64':'unsigned long long'
|   |-IfStmt 0x196f20a36a0 <line:923:5, line:924:17>
|   | |-OpaqueValueExpr 0x196f20a3688 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x196f20a3678 <col:9, col:17>
|   |   `-UnaryOperator 0x196f20a3660 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x196f20a3638 <col:17> 'int' 2
|   |-CompoundAssignOperator 0x196f20a3740 <line:926:5, col:13> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x196f20a36b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x196f20a3568 'alen' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x196f20a3728 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x196f20a36f0 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a3230 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x196f20a3a58 <line:927:5, line:928:17>
|   | |-BinaryOperator 0x196f20a39e8 <line:927:9, col:65> 'int' '||'
|   | | |-BinaryOperator 0x196f20a3838 <col:9, col:29> 'int' '>'
|   | | | |-ImplicitCastExpr 0x196f20a3820 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x196f20a3770 <col:9> 'u64':'unsigned long long' lvalue Var 0x196f20a3568 'alen' 'u64':'unsigned long long'
|   | | | `-ParenExpr 0x196f20a3800 <col:16, col:29> 'unsigned long long'
|   | | |   `-BinaryOperator 0x196f20a37e0 <<scratch space>:297:1, .//openssl//file_jk/after\crypto\modes\gcm128.c:927:27> 'unsigned long long' '<<'
|   | | |     |-IntegerLiteral 0x196f20a3790 <<scratch space>:297:1> 'unsigned long long' 1
|   | | |     `-IntegerLiteral 0x196f20a37b8 <.//openssl//file_jk/after\crypto\modes\gcm128.c:927:27> 'int' 61
|   | | `-ParenExpr 0x196f20a39c8 <col:34, col:65> 'int'
|   | |   `-BinaryOperator 0x196f20a39a8 <col:35, col:62> 'int' '&&'
|   | |     |-BinaryOperator 0x196f20a38f8 <col:35, col:50> 'int' '=='
|   | |     | |-UnaryExprOrTypeTraitExpr 0x196f20a3898 <col:35, col:45> 'unsigned long long' sizeof
|   | |     | | `-ParenExpr 0x196f20a3878 <col:41, col:45> 'size_t':'unsigned long long' lvalue
|   | |     | |   `-DeclRefExpr 0x196f20a3858 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a3230 'len' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   | |     | `-ImplicitCastExpr 0x196f20a38e0 <col:50> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x196f20a38b8 <col:50> 'int' 8
|   | |     `-BinaryOperator 0x196f20a3988 <col:55, col:62> 'int' '<'
|   | |       |-ImplicitCastExpr 0x196f20a3958 <col:55> 'u64':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x196f20a3918 <col:55> 'u64':'unsigned long long' lvalue Var 0x196f20a3568 'alen' 'u64':'unsigned long long'
|   | |       `-ImplicitCastExpr 0x196f20a3970 <col:62> 'size_t':'unsigned long long' <LValueToRValue>
|   | |         `-DeclRefExpr 0x196f20a3938 <col:62> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a3230 'len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x196f20a3a48 <line:928:9, col:17>
|   |   `-UnaryOperator 0x196f20a3a30 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x196f20a3a08 <col:17> 'int' 1
|   |-IfStmt 0x196f20a3fa0 <line:932:5, line:944:5>
|   | |-ImplicitCastExpr 0x196f20a3b10 <line:932:9> 'unsigned int' <LValueToRValue>
|   | | `-DeclRefExpr 0x196f20a3af0 <col:9> 'unsigned int' lvalue Var 0x196f20a34d8 'n' 'unsigned int'
|   | `-CompoundStmt 0x196f20a3f80 <col:12, line:944:5>
|   |   |-WhileStmt 0x196f20a3e10 <line:933:9, line:937:9>
|   |   | |-BinaryOperator 0x196f20a3b98 <line:933:16, col:21> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x196f20a3b68 <col:16> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x196f20a3b28 <col:16> 'unsigned int' lvalue Var 0x196f20a34d8 'n' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x196f20a3b80 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x196f20a3b48 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a3230 'len' 'size_t':'unsigned long long'
|   |   | `-CompoundStmt 0x196f20a3df0 <col:26, line:937:9>
|   |   |   |-UnaryOperator 0x196f20a3c80 <line:935:13, col:15> 'size_t':'unsigned long long' prefix '--'
|   |   |   | `-DeclRefExpr 0x196f20a3c60 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a3230 'len' 'size_t':'unsigned long long'
|   |   |   `-BinaryOperator 0x196f20a3dd0 <line:936:13, col:27> 'unsigned int' '='
|   |   |     |-DeclRefExpr 0x196f20a3c98 <col:13> 'unsigned int' lvalue Var 0x196f20a34d8 'n' 'unsigned int'
|   |   |     `-BinaryOperator 0x196f20a3db0 <col:17, col:27> 'unsigned int' '%'
|   |   |       |-ParenExpr 0x196f20a3d50 <col:17, col:23> 'unsigned int'
|   |   |       | `-BinaryOperator 0x196f20a3d30 <col:18, col:22> 'unsigned int' '+'
|   |   |       |   |-ImplicitCastExpr 0x196f20a3d00 <col:18> 'unsigned int' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x196f20a3cb8 <col:18> 'unsigned int' lvalue Var 0x196f20a34d8 'n' 'unsigned int'
|   |   |       |   `-ImplicitCastExpr 0x196f20a3d18 <col:22> 'unsigned int' <IntegralCast>
|   |   |       |     `-IntegerLiteral 0x196f20a3cd8 <col:22> 'int' 1
|   |   |       `-ImplicitCastExpr 0x196f20a3d98 <col:27> 'unsigned int' <IntegralCast>
|   |   |         `-IntegerLiteral 0x196f20a3d70 <col:27> 'int' 16
|   |   `-IfStmt 0x196f20a3f58 <line:938:9, line:943:9> has_else
|   |     |-BinaryOperator 0x196f20a3ea0 <line:938:13, col:18> 'int' '=='
|   |     | |-ImplicitCastExpr 0x196f20a3e70 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x196f20a3e28 <col:13> 'unsigned int' lvalue Var 0x196f20a34d8 'n' 'unsigned int'
|   |     | `-ImplicitCastExpr 0x196f20a3e88 <col:18> 'unsigned int' <IntegralCast>
|   |     |   `-IntegerLiteral 0x196f20a3e48 <col:18> 'int' 0
|   |     |-NullStmt 0x196f20a3f50 <line:553:28>
|   |     `-CompoundStmt 0x196f20a3f38 <line:940:14, line:943:9>
|   |       `-ReturnStmt 0x196f20a3f28 <line:942:13, col:20>
|   |         `-IntegerLiteral 0x196f20a3f00 <col:20> 'int' 0
|   |-IfStmt 0x196f20a22a0 <line:946:5, line:950:5>
|   | |-ParenExpr 0x196f20a20f0 <line:946:9, col:33> 'size_t':'unsigned long long'
|   | | `-BinaryOperator 0x196f20a20d0 <col:10, col:32> 'size_t':'unsigned long long' '='
|   | |   |-DeclRefExpr 0x196f20a3fb8 <col:10> 'size_t':'unsigned long long' lvalue Var 0x196f20a3440 'i' 'size_t':'unsigned long long'
|   | |   `-ParenExpr 0x196f20a20b0 <col:14, col:32> 'unsigned long long'
|   | |     `-BinaryOperator 0x196f20a2090 <col:15, col:30> 'unsigned long long' '&'
|   | |       |-ImplicitCastExpr 0x196f20a2078 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x196f20a3ff0 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a3230 'len' 'size_t':'unsigned long long'
|   | |       `-CStyleCastExpr 0x196f20a2050 <col:21, col:30> 'size_t':'unsigned long long' <IntegralCast>
|   | |         `-UnaryOperator 0x196f20a4038 <col:29, col:30> 'int' prefix '-'
|   | |           `-IntegerLiteral 0x196f20a4010 <col:30> 'int' 16
|   | `-CompoundStmt 0x196f20a2280 <col:36, line:950:5>
|   |   |-CompoundAssignOperator 0x196f20a21c8 <line:948:9, col:16> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x196f20a2170 <col:9> 'const unsigned char *' lvalue ParmVar 0x196f20a31b8 'aad' 'const unsigned char *'
|   |   | `-ImplicitCastExpr 0x196f20a21b0 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x196f20a2190 <col:16> 'size_t':'unsigned long long' lvalue Var 0x196f20a3440 'i' 'size_t':'unsigned long long'
|   |   `-CompoundAssignOperator 0x196f20a2250 <line:949:9, col:16> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x196f20a21f8 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a3230 'len' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x196f20a2238 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x196f20a2218 <col:16> 'size_t':'unsigned long long' lvalue Var 0x196f20a3440 'i' 'size_t':'unsigned long long'
|   |-IfStmt 0x196f20a25b8 <line:960:5, line:964:5>
|   | |-ImplicitCastExpr 0x196f20a22d8 <line:960:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | `-DeclRefExpr 0x196f20a22b8 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a3230 'len' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x196f20a25a0 <col:14, line:964:5>
|   |   `-BinaryOperator 0x196f20a2388 <line:961:9, col:27> 'unsigned int' '='
|   |     |-DeclRefExpr 0x196f20a22f0 <col:9> 'unsigned int' lvalue Var 0x196f20a34d8 'n' 'unsigned int'
|   |     `-CStyleCastExpr 0x196f20a2360 <col:13, col:27> 'unsigned int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x196f20a2348 <col:27> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |         `-DeclRefExpr 0x196f20a2310 <col:27> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a3230 'len' 'size_t':'unsigned long long'
|   `-ReturnStmt 0x196f20a2618 <line:967:5, col:12>
|     `-IntegerLiteral 0x196f20a25f0 <col:12> 'int' 0
|-FunctionDecl 0x196f20a2990 <line:970:1, line:1152:1> line:970:5 invalid CRYPTO_gcm128_encrypt 'int (int *, const unsigned char *, unsigned char *, size_t)'
| |-ParmVarDecl 0x196f20a26a0 <col:27, col:43> col:43 invalid ctx 'int *'
| |-ParmVarDecl 0x196f20a2720 <line:971:27, col:48> col:48 used in 'const unsigned char *'
| |-ParmVarDecl 0x196f20a27d0 <col:52, col:67> col:67 used out 'unsigned char *'
| |-ParmVarDecl 0x196f20a2848 <line:972:27, col:34> col:34 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x196f20a5898 <line:973:1, line:1152:1>
|   |-DeclStmt 0x196f20a2db8 <line:974:5, line:977:24>
|   | |-RecordDecl 0x196f20a2a68 <line:974:11, line:977:5> line:974:11 union definition
|   | | |-FieldDecl 0x196f20a2b38 <line:975:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x196f20a2ba0 <line:976:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x196f20a2c58 <line:974:5, line:977:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:974:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:974:11)' cinit
|   |   `-InitListExpr 0x196f20a2d40 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:974:11)':'union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:974:11)' field Field 0x196f20a2b38 'one' 'long'
|   |     `-ImplicitCastExpr 0x196f20a2d88 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x196f20a2cc0 <col:21> 'int' 1
|   |-DeclStmt 0x196f20a2ee8 <line:978:5, col:24>
|   | |-VarDecl 0x196f20a2de8 <col:5, col:18> col:18 used n 'unsigned int'
|   | `-VarDecl 0x196f20a2e68 <col:5, col:21> col:21 used ctr 'unsigned int'
|   |-DeclStmt 0x196f20a2f78 <line:979:5, col:13>
|   | `-VarDecl 0x196f20a2f10 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x196f20a1030 <line:980:5, col:29>
|   | `-VarDecl 0x196f20a2fa0 <col:5, col:9> col:9 used mlen 'u64':'unsigned long long'
|   |-DeclStmt 0x196f20a10c8 <line:982:5, col:25>
|   | `-VarDecl 0x196f20a1060 <col:5, col:11> col:11 used key 'void *'
|   |-CompoundAssignOperator 0x196f20a1168 <line:991:5, col:13> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x196f20a10e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x196f20a2fa0 'mlen' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x196f20a1150 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x196f20a1118 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x196f20a1500 <line:992:5, line:993:17>
|   | |-BinaryOperator 0x196f20a1490 <line:992:9, col:72> 'int' '||'
|   | | |-BinaryOperator 0x196f20a12e0 <col:9, col:36> 'int' '>'
|   | | | |-ImplicitCastExpr 0x196f20a12c8 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x196f20a1198 <col:9> 'u64':'unsigned long long' lvalue Var 0x196f20a2fa0 'mlen' 'u64':'unsigned long long'
|   | | | `-ParenExpr 0x196f20a12a8 <col:16, col:36> 'unsigned long long'
|   | | |   `-BinaryOperator 0x196f20a1288 <col:17, col:34> 'unsigned long long' '-'
|   | | |     |-ParenExpr 0x196f20a1228 <col:17, col:30> 'unsigned long long'
|   | | |     | `-BinaryOperator 0x196f20a1208 <<scratch space>:298:1, .//openssl//file_jk/after\crypto\modes\gcm128.c:992:28> 'unsigned long long' '<<'
|   | | |     |   |-IntegerLiteral 0x196f20a11b8 <<scratch space>:298:1> 'unsigned long long' 1
|   | | |     |   `-IntegerLiteral 0x196f20a11e0 <.//openssl//file_jk/after\crypto\modes\gcm128.c:992:28> 'int' 36
|   | | |     `-ImplicitCastExpr 0x196f20a1270 <col:34> 'unsigned long long' <IntegralCast>
|   | | |       `-IntegerLiteral 0x196f20a1248 <col:34> 'int' 32
|   | | `-ParenExpr 0x196f20a1470 <col:41, col:72> 'int'
|   | |   `-BinaryOperator 0x196f20a1450 <col:42, col:69> 'int' '&&'
|   | |     |-BinaryOperator 0x196f20a13a0 <col:42, col:57> 'int' '=='
|   | |     | |-UnaryExprOrTypeTraitExpr 0x196f20a1340 <col:42, col:52> 'unsigned long long' sizeof
|   | |     | | `-ParenExpr 0x196f20a1320 <col:48, col:52> 'size_t':'unsigned long long' lvalue
|   | |     | |   `-DeclRefExpr 0x196f20a1300 <col:49> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   | |     | `-ImplicitCastExpr 0x196f20a1388 <col:57> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x196f20a1360 <col:57> 'int' 8
|   | |     `-BinaryOperator 0x196f20a1430 <col:62, col:69> 'int' '<'
|   | |       |-ImplicitCastExpr 0x196f20a1400 <col:62> 'u64':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x196f20a13c0 <col:62> 'u64':'unsigned long long' lvalue Var 0x196f20a2fa0 'mlen' 'u64':'unsigned long long'
|   | |       `-ImplicitCastExpr 0x196f20a1418 <col:69> 'size_t':'unsigned long long' <LValueToRValue>
|   | |         `-DeclRefExpr 0x196f20a13e0 <col:69> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x196f20a14f0 <line:993:9, col:17>
|   |   `-UnaryOperator 0x196f20a14d8 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x196f20a14b0 <col:17> 'int' 1
|   |-IfStmt 0x196f20a15d0 <line:996:5, line:1000:5>
|   | |-OpaqueValueExpr 0x196f20a15b8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x196f20a15a8 <line:996:20, line:1000:5>
|   |-IfStmt 0x196f20a4fd0 <line:1013:5, line:1129:5>
|   | |-BinaryOperator 0x196f20a1838 <line:1013:9, col:32> 'int' '=='
|   | | |-BinaryOperator 0x196f20a17d8 <col:9, col:27> 'unsigned long long' '%'
|   | | | |-ImplicitCastExpr 0x196f20a17c0 <col:9> 'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x196f20a1768 <col:9> 'int' 16
|   | | | `-UnaryExprOrTypeTraitExpr 0x196f20a17a0 <col:14, col:27> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x196f20a1820 <col:32> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x196f20a17f8 <col:32> 'int' 0
|   | `-CompoundStmt 0x196f20a4fb8 <col:35, line:1129:5>
|   |   `-DoStmt 0x196f20a4f98 <line:1014:9, line:1128:19>
|   |     |-CompoundStmt 0x196f20a4f38 <line:1014:12, line:1128:9>
|   |     | |-IfStmt 0x196f20a1db0 <line:1015:13, line:1027:13>
|   |     | | |-ImplicitCastExpr 0x196f20a1878 <line:1015:17> 'unsigned int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x196f20a1858 <col:17> 'unsigned int' lvalue Var 0x196f20a2de8 'n' 'unsigned int'
|   |     | | `-CompoundStmt 0x196f20a1d90 <col:20, line:1027:13>
|   |     | |   |-WhileStmt 0x196f20a1c20 <line:1016:17, line:1020:17>
|   |     | |   | |-BinaryOperator 0x196f20a1900 <line:1016:24, col:29> 'int' '&&'
|   |     | |   | | |-ImplicitCastExpr 0x196f20a18d0 <col:24> 'unsigned int' <LValueToRValue>
|   |     | |   | | | `-DeclRefExpr 0x196f20a1890 <col:24> 'unsigned int' lvalue Var 0x196f20a2de8 'n' 'unsigned int'
|   |     | |   | | `-ImplicitCastExpr 0x196f20a18e8 <col:29> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |   | |   `-DeclRefExpr 0x196f20a18b0 <col:29> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   |     | |   | `-CompoundStmt 0x196f20a1c00 <col:34, line:1020:17>
|   |     | |   |   |-UnaryOperator 0x196f20a1a90 <line:1018:21, col:23> 'size_t':'unsigned long long' prefix '--'
|   |     | |   |   | `-DeclRefExpr 0x196f20a1a70 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   |     | |   |   `-BinaryOperator 0x196f20a1be0 <line:1019:21, col:35> 'unsigned int' '='
|   |     | |   |     |-DeclRefExpr 0x196f20a1aa8 <col:21> 'unsigned int' lvalue Var 0x196f20a2de8 'n' 'unsigned int'
|   |     | |   |     `-BinaryOperator 0x196f20a1bc0 <col:25, col:35> 'unsigned int' '%'
|   |     | |   |       |-ParenExpr 0x196f20a1b60 <col:25, col:31> 'unsigned int'
|   |     | |   |       | `-BinaryOperator 0x196f20a1b40 <col:26, col:30> 'unsigned int' '+'
|   |     | |   |       |   |-ImplicitCastExpr 0x196f20a1b10 <col:26> 'unsigned int' <LValueToRValue>
|   |     | |   |       |   | `-DeclRefExpr 0x196f20a1ac8 <col:26> 'unsigned int' lvalue Var 0x196f20a2de8 'n' 'unsigned int'
|   |     | |   |       |   `-ImplicitCastExpr 0x196f20a1b28 <col:30> 'unsigned int' <IntegralCast>
|   |     | |   |       |     `-IntegerLiteral 0x196f20a1ae8 <col:30> 'int' 1
|   |     | |   |       `-ImplicitCastExpr 0x196f20a1ba8 <col:35> 'unsigned int' <IntegralCast>
|   |     | |   |         `-IntegerLiteral 0x196f20a1b80 <col:35> 'int' 16
|   |     | |   `-IfStmt 0x196f20a1d68 <line:1021:17, line:1026:17> has_else
|   |     | |     |-BinaryOperator 0x196f20a1cb0 <line:1021:21, col:26> 'int' '=='
|   |     | |     | |-ImplicitCastExpr 0x196f20a1c80 <col:21> 'unsigned int' <LValueToRValue>
|   |     | |     | | `-DeclRefExpr 0x196f20a1c38 <col:21> 'unsigned int' lvalue Var 0x196f20a2de8 'n' 'unsigned int'
|   |     | |     | `-ImplicitCastExpr 0x196f20a1c98 <col:26> 'unsigned int' <IntegralCast>
|   |     | |     |   `-IntegerLiteral 0x196f20a1c58 <col:26> 'int' 0
|   |     | |     |-NullStmt 0x196f20a1d60 <line:553:28>
|   |     | |     `-CompoundStmt 0x196f20a1d48 <line:1023:22, line:1026:17>
|   |     | |       `-ReturnStmt 0x196f20a1d38 <line:1025:21, col:28>
|   |     | |         `-IntegerLiteral 0x196f20a1d10 <col:28> 'int' 0
|   |     | |-WhileStmt 0x196f20a6d00 <line:1034:13, line:1059:13>
|   |     | | |-BinaryOperator 0x196f20a1ea8 <line:1034:20, line:561:36> 'int' '>='
|   |     | | | |-ImplicitCastExpr 0x196f20a1e78 <line:1034:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | | `-DeclRefExpr 0x196f20a1dc8 <col:20> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   |     | | | `-ImplicitCastExpr 0x196f20a1e90 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |     | | |   `-ParenExpr 0x196f20a1e58 <col:29, col:36> 'int'
|   |     | | |     `-BinaryOperator 0x196f20a1e38 <col:30, col:32> 'int' '*'
|   |     | | |       |-IntegerLiteral 0x196f20a1de8 <col:30> 'int' 3
|   |     | | |       `-IntegerLiteral 0x196f20a1e10 <col:32> 'int' 1024
|   |     | | `-CompoundStmt 0x196f20a6cd8 <line:1034:40, line:1059:13>
|   |     | |   |-DeclStmt 0x196f20a1fe8 <line:1035:17, col:39>
|   |     | |   | `-VarDecl 0x196f20a1ed8 <col:17, line:561:36> line:1035:24 used j 'size_t':'unsigned long long' cinit
|   |     | |   |   `-ImplicitCastExpr 0x196f20a1fd0 <line:561:29, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |     | |   |     `-ParenExpr 0x196f20a1fb0 <col:29, col:36> 'int'
|   |     | |   |       `-BinaryOperator 0x196f20a1f90 <col:30, col:32> 'int' '*'
|   |     | |   |         |-IntegerLiteral 0x196f20a1f40 <col:30> 'int' 3
|   |     | |   |         `-IntegerLiteral 0x196f20a1f68 <col:32> 'int' 1024
|   |     | |   |-WhileStmt 0x196f20a6a30 <line:1037:17, line:1056:17>
|   |     | |   | |-ImplicitCastExpr 0x196f20a6098 <line:1037:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |   | | `-DeclRefExpr 0x196f20a2000 <col:24> 'size_t':'unsigned long long' lvalue Var 0x196f20a1ed8 'j' 'size_t':'unsigned long long'
|   |     | |   | `-CompoundStmt 0x196f20a69f0 <col:27, line:1056:17>
|   |     | |   |   |-DeclStmt 0x196f20a61c0 <line:1038:21, col:50>
|   |     | |   |   | `-VarDecl 0x196f20a60e8 <col:21, col:47> col:29 used out_t 'size_t *' cinit
|   |     | |   |   |   `-CStyleCastExpr 0x196f20a6198 <col:37, col:47> 'size_t *' <BitCast>
|   |     | |   |   |     `-ImplicitCastExpr 0x196f20a6180 <col:47> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |   |   |       `-DeclRefExpr 0x196f20a6150 <col:47> 'unsigned char *' lvalue ParmVar 0x196f20a27d0 'out' 'unsigned char *'
|   |     | |   |   |-DeclStmt 0x196f20a62c0 <line:1039:21, col:60>
|   |     | |   |   | `-VarDecl 0x196f20a61e8 <col:21, col:58> col:35 used in_t 'const size_t *' cinit
|   |     | |   |   |   `-CStyleCastExpr 0x196f20a6298 <col:42, col:58> 'const size_t *' <BitCast>
|   |     | |   |   |     `-ImplicitCastExpr 0x196f20a6280 <col:58> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |   |   |       `-DeclRefExpr 0x196f20a6250 <col:58> 'const unsigned char *' lvalue ParmVar 0x196f20a2720 'in' 'const unsigned char *'
|   |     | |   |   |-UnaryOperator 0x196f20a6330 <line:1042:21, col:23> 'unsigned int' prefix '++'
|   |     | |   |   | `-DeclRefExpr 0x196f20a6310 <col:23> 'unsigned int' lvalue Var 0x196f20a2e68 'ctr' 'unsigned int'
|   |     | |   |   |-CompoundAssignOperator 0x196f20a68b8 <line:1053:21, col:28> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     | |   |   | |-DeclRefExpr 0x196f20a6870 <col:21> 'unsigned char *' lvalue ParmVar 0x196f20a27d0 'out' 'unsigned char *'
|   |     | |   |   | `-IntegerLiteral 0x196f20a6890 <col:28> 'int' 16
|   |     | |   |   |-CompoundAssignOperator 0x196f20a6930 <line:1054:21, col:27> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |     | |   |   | |-DeclRefExpr 0x196f20a68e8 <col:21> 'const unsigned char *' lvalue ParmVar 0x196f20a2720 'in' 'const unsigned char *'
|   |     | |   |   | `-IntegerLiteral 0x196f20a6908 <col:27> 'int' 16
|   |     | |   |   `-CompoundAssignOperator 0x196f20a69c0 <line:1055:21, col:26> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |   |     |-DeclRefExpr 0x196f20a6960 <col:21> 'size_t':'unsigned long long' lvalue Var 0x196f20a1ed8 'j' 'size_t':'unsigned long long'
|   |     | |   |     `-ImplicitCastExpr 0x196f20a69a8 <col:26> 'unsigned long long' <IntegralCast>
|   |     | |   |       `-IntegerLiteral 0x196f20a6980 <col:26> 'int' 16
|   |     | |   `-CompoundAssignOperator 0x196f20a6ca8 <line:1058:17, line:561:36> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |     |-DeclRefExpr 0x196f20a6be0 <line:1058:17> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   |     | |     `-ImplicitCastExpr 0x196f20a6c90 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |     | |       `-ParenExpr 0x196f20a6c70 <col:29, col:36> 'int'
|   |     | |         `-BinaryOperator 0x196f20a6c50 <col:30, col:32> 'int' '*'
|   |     | |           |-IntegerLiteral 0x196f20a6c00 <col:30> 'int' 3
|   |     | |           `-IntegerLiteral 0x196f20a6c28 <col:32> 'int' 1024
|   |     | |-IfStmt 0x196f20a4a00 <line:1061:13, line:1085:13>
|   |     | | |-ParenExpr 0x196f20a6e48 <line:1061:17, col:41> 'size_t':'unsigned long long'
|   |     | | | `-BinaryOperator 0x196f20a6e28 <col:18, col:40> 'size_t':'unsigned long long' '='
|   |     | | |   |-DeclRefExpr 0x196f20a6d18 <col:18> 'size_t':'unsigned long long' lvalue Var 0x196f20a2f10 'i' 'size_t':'unsigned long long'
|   |     | | |   `-ParenExpr 0x196f20a6e08 <col:22, col:40> 'unsigned long long'
|   |     | | |     `-BinaryOperator 0x196f20a6de8 <col:23, col:38> 'unsigned long long' '&'
|   |     | | |       |-ImplicitCastExpr 0x196f20a6dd0 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | |       | `-DeclRefExpr 0x196f20a6d38 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   |     | | |       `-CStyleCastExpr 0x196f20a6da8 <col:29, col:38> 'size_t':'unsigned long long' <IntegralCast>
|   |     | | |         `-UnaryOperator 0x196f20a6d80 <col:37, col:38> 'int' prefix '-'
|   |     | | |           `-IntegerLiteral 0x196f20a6d58 <col:38> 'int' 16
|   |     | | `-CompoundStmt 0x196f20a49e0 <col:44, line:1085:13>
|   |     | |   |-DeclStmt 0x196f20a6f18 <line:1062:17, col:29>
|   |     | |   | `-VarDecl 0x196f20a6e78 <col:17, col:28> col:24 used j 'size_t':'unsigned long long' cinit
|   |     | |   |   `-ImplicitCastExpr 0x196f20a6f00 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |   |     `-DeclRefExpr 0x196f20a6ee0 <col:28> 'size_t':'unsigned long long' lvalue Var 0x196f20a2f10 'i' 'size_t':'unsigned long long'
|   |     | |   `-WhileStmt 0x196f20a48e0 <line:1064:17, line:1083:17>
|   |     | |     |-BinaryOperator 0x196f20a6fa8 <line:1064:24, col:31> 'int' '>='
|   |     | |     | |-ImplicitCastExpr 0x196f20a6f78 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |     | | `-DeclRefExpr 0x196f20a6f30 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   |     | |     | `-ImplicitCastExpr 0x196f20a6f90 <col:31> 'unsigned long long' <IntegralCast>
|   |     | |     |   `-IntegerLiteral 0x196f20a6f50 <col:31> 'int' 16
|   |     | |     `-CompoundStmt 0x196f20a48a0 <col:35, line:1083:17>
|   |     | |       |-DeclStmt 0x196f20a40a0 <line:1065:21, col:50>
|   |     | |       | `-VarDecl 0x196f20a6fd8 <col:21, col:47> col:29 used out_t 'size_t *' cinit
|   |     | |       |   `-CStyleCastExpr 0x196f20a4078 <col:37, col:47> 'size_t *' <BitCast>
|   |     | |       |     `-ImplicitCastExpr 0x196f20a4060 <col:47> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |       |       `-DeclRefExpr 0x196f20a7040 <col:47> 'unsigned char *' lvalue ParmVar 0x196f20a27d0 'out' 'unsigned char *'
|   |     | |       |-DeclStmt 0x196f20a41a0 <line:1066:21, col:60>
|   |     | |       | `-VarDecl 0x196f20a40c8 <col:21, col:58> col:35 used in_t 'const size_t *' cinit
|   |     | |       |   `-CStyleCastExpr 0x196f20a4178 <col:42, col:58> 'const size_t *' <BitCast>
|   |     | |       |     `-ImplicitCastExpr 0x196f20a4160 <col:58> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |       |       `-DeclRefExpr 0x196f20a4130 <col:58> 'const unsigned char *' lvalue ParmVar 0x196f20a2720 'in' 'const unsigned char *'
|   |     | |       |-UnaryOperator 0x196f20a41f8 <line:1069:21, col:23> 'unsigned int' prefix '++'
|   |     | |       | `-DeclRefExpr 0x196f20a41d8 <col:23> 'unsigned int' lvalue Var 0x196f20a2e68 'ctr' 'unsigned int'
|   |     | |       |-CompoundAssignOperator 0x196f20a4768 <line:1080:21, col:28> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     | |       | |-DeclRefExpr 0x196f20a4720 <col:21> 'unsigned char *' lvalue ParmVar 0x196f20a27d0 'out' 'unsigned char *'
|   |     | |       | `-IntegerLiteral 0x196f20a4740 <col:28> 'int' 16
|   |     | |       |-CompoundAssignOperator 0x196f20a47e0 <line:1081:21, col:27> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |     | |       | |-DeclRefExpr 0x196f20a4798 <col:21> 'const unsigned char *' lvalue ParmVar 0x196f20a2720 'in' 'const unsigned char *'
|   |     | |       | `-IntegerLiteral 0x196f20a47b8 <col:27> 'int' 16
|   |     | |       `-CompoundAssignOperator 0x196f20a4870 <line:1082:21, col:28> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |         |-DeclRefExpr 0x196f20a4810 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   |     | |         `-ImplicitCastExpr 0x196f20a4858 <col:28> 'unsigned long long' <IntegralCast>
|   |     | |           `-IntegerLiteral 0x196f20a4830 <col:28> 'int' 16
|   |     | |-IfStmt 0x196f20a4ec8 <line:1109:13, line:1124:13>
|   |     | | |-ImplicitCastExpr 0x196f20a4a38 <line:1109:17> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x196f20a4a18 <col:17> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   |     | | `-CompoundStmt 0x196f20a4ea8 <col:22, line:1124:13>
|   |     | |   |-UnaryOperator 0x196f20a4a90 <line:1111:17, col:19> 'unsigned int' prefix '++'
|   |     | |   | `-DeclRefExpr 0x196f20a4a70 <col:19> 'unsigned int' lvalue Var 0x196f20a2e68 'ctr' 'unsigned int'
|   |     | |   `-WhileStmt 0x196f20a4e90 <line:1120:17, line:1123:17>
|   |     | |     |-UnaryOperator 0x196f20a4cc8 <line:1120:24, col:27> 'size_t':'unsigned long long' postfix '--'
|   |     | |     | `-DeclRefExpr 0x196f20a4ca8 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   |     | |     `-CompoundStmt 0x196f20a4e78 <col:31, line:1123:17>
|   |     | |       `-UnaryOperator 0x196f20a4e60 <line:1122:21, col:23> 'unsigned int' prefix '++'
|   |     | |         `-DeclRefExpr 0x196f20a4e40 <col:23> 'unsigned int' lvalue Var 0x196f20a2de8 'n' 'unsigned int'
|   |     | `-ReturnStmt 0x196f20a4f28 <line:1127:13, col:20>
|   |     |   `-IntegerLiteral 0x196f20a4f00 <col:20> 'int' 0
|   |     `-IntegerLiteral 0x196f20a4f70 <line:1128:18> 'int' 0
|   |-ForStmt 0x196f20a5808 <line:1131:5, line:1148:5>
|   | |-BinaryOperator 0x196f20a5070 <line:1131:10, col:14> 'size_t':'unsigned long long' '='
|   | | |-DeclRefExpr 0x196f20a4fe8 <col:10> 'size_t':'unsigned long long' lvalue Var 0x196f20a2f10 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x196f20a5030 <col:14> 'size_t':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x196f20a5008 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x196f20a5100 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x196f20a50d0 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x196f20a5090 <col:17> 'size_t':'unsigned long long' lvalue Var 0x196f20a2f10 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x196f20a50e8 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x196f20a50b0 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a2848 'len' 'size_t':'unsigned long long'
|   | |-UnaryOperator 0x196f20a5140 <col:26, col:28> 'size_t':'unsigned long long' prefix '++'
|   | | `-DeclRefExpr 0x196f20a5120 <col:28> 'size_t':'unsigned long long' lvalue Var 0x196f20a2f10 'i' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x196f20a57e8 <col:31, line:1148:5>
|   |   |-IfStmt 0x196f20a5460 <line:1132:9, line:1143:9>
|   |   | |-BinaryOperator 0x196f20a51d0 <line:1132:13, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x196f20a51a0 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x196f20a5158 <col:13> 'unsigned int' lvalue Var 0x196f20a2de8 'n' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x196f20a51b8 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x196f20a5178 <col:18> 'int' 0
|   |   | `-CompoundStmt 0x196f20a5448 <col:21, line:1143:9>
|   |   |   `-UnaryOperator 0x196f20a5230 <line:1134:13, col:15> 'unsigned int' prefix '++'
|   |   |     `-DeclRefExpr 0x196f20a5210 <col:15> 'unsigned int' lvalue Var 0x196f20a2e68 'ctr' 'unsigned int'
|   |   `-BinaryOperator 0x196f20a5710 <line:1145:9, col:23> 'unsigned int' '='
|   |     |-DeclRefExpr 0x196f20a55d8 <col:9> 'unsigned int' lvalue Var 0x196f20a2de8 'n' 'unsigned int'
|   |     `-BinaryOperator 0x196f20a56f0 <col:13, col:23> 'unsigned int' '%'
|   |       |-ParenExpr 0x196f20a5690 <col:13, col:19> 'unsigned int'
|   |       | `-BinaryOperator 0x196f20a5670 <col:14, col:18> 'unsigned int' '+'
|   |       |   |-ImplicitCastExpr 0x196f20a5640 <col:14> 'unsigned int' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x196f20a55f8 <col:14> 'unsigned int' lvalue Var 0x196f20a2de8 'n' 'unsigned int'
|   |       |   `-ImplicitCastExpr 0x196f20a5658 <col:18> 'unsigned int' <IntegralCast>
|   |       |     `-IntegerLiteral 0x196f20a5618 <col:18> 'int' 1
|   |       `-ImplicitCastExpr 0x196f20a56d8 <col:23> 'unsigned int' <IntegralCast>
|   |         `-IntegerLiteral 0x196f20a56b0 <col:23> 'int' 16
|   `-ReturnStmt 0x196f20a5888 <line:1151:5, col:12>
|     `-IntegerLiteral 0x196f20a5860 <col:12> 'int' 0
|-FunctionDecl 0x196f20a5b40 <line:1154:1, line:1344:1> line:1154:5 invalid CRYPTO_gcm128_decrypt 'int (int *, const unsigned char *, unsigned char *, size_t)'
| |-ParmVarDecl 0x196f20a5918 <col:27, col:43> col:43 invalid ctx 'int *'
| |-ParmVarDecl 0x196f20a5998 <line:1155:27, col:48> col:48 used in 'const unsigned char *'
| |-ParmVarDecl 0x196f20a5a18 <col:52, col:67> col:67 used out 'unsigned char *'
| |-ParmVarDecl 0x196f20a5a90 <line:1156:27, col:34> col:34 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x196f20aebf8 <line:1157:1, line:1344:1>
|   |-DeclStmt 0x196f20a5f68 <line:1158:5, line:1161:24>
|   | |-RecordDecl 0x196f20a5c18 <line:1158:11, line:1161:5> line:1158:11 union definition
|   | | |-FieldDecl 0x196f20a5ce8 <line:1159:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x196f20a5d50 <line:1160:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x196f20a5e08 <line:1158:5, line:1161:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:1158:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:1158:11)' cinit
|   |   `-InitListExpr 0x196f20a5ef0 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:1158:11)':'union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:1158:11)' field Field 0x196f20a5ce8 'one' 'long'
|   |     `-ImplicitCastExpr 0x196f20a5f38 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x196f20a5e70 <col:21> 'int' 1
|   |-DeclStmt 0x196f209f090 <line:1162:5, col:24>
|   | |-VarDecl 0x196f20a5f98 <col:5, col:18> col:18 used n 'unsigned int'
|   | `-VarDecl 0x196f209f010 <col:5, col:21> col:21 used ctr 'unsigned int'
|   |-DeclStmt 0x196f209f120 <line:1163:5, col:13>
|   | `-VarDecl 0x196f209f0b8 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x196f209f1d8 <line:1164:5, col:29>
|   | `-VarDecl 0x196f209f148 <col:5, col:9> col:9 used mlen 'u64':'unsigned long long'
|   |-DeclStmt 0x196f209f270 <line:1166:5, col:25>
|   | `-VarDecl 0x196f209f208 <col:5, col:11> col:11 used key 'void *'
|   |-CompoundAssignOperator 0x196f209f310 <line:1175:5, col:13> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x196f209f288 <col:5> 'u64':'unsigned long long' lvalue Var 0x196f209f148 'mlen' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x196f209f2f8 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x196f209f2c0 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x196f209f6a8 <line:1176:5, line:1177:17>
|   | |-BinaryOperator 0x196f209f638 <line:1176:9, col:72> 'int' '||'
|   | | |-BinaryOperator 0x196f209f488 <col:9, col:36> 'int' '>'
|   | | | |-ImplicitCastExpr 0x196f209f470 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x196f209f340 <col:9> 'u64':'unsigned long long' lvalue Var 0x196f209f148 'mlen' 'u64':'unsigned long long'
|   | | | `-ParenExpr 0x196f209f450 <col:16, col:36> 'unsigned long long'
|   | | |   `-BinaryOperator 0x196f209f430 <col:17, col:34> 'unsigned long long' '-'
|   | | |     |-ParenExpr 0x196f209f3d0 <col:17, col:30> 'unsigned long long'
|   | | |     | `-BinaryOperator 0x196f209f3b0 <<scratch space>:299:1, .//openssl//file_jk/after\crypto\modes\gcm128.c:1176:28> 'unsigned long long' '<<'
|   | | |     |   |-IntegerLiteral 0x196f209f360 <<scratch space>:299:1> 'unsigned long long' 1
|   | | |     |   `-IntegerLiteral 0x196f209f388 <.//openssl//file_jk/after\crypto\modes\gcm128.c:1176:28> 'int' 36
|   | | |     `-ImplicitCastExpr 0x196f209f418 <col:34> 'unsigned long long' <IntegralCast>
|   | | |       `-IntegerLiteral 0x196f209f3f0 <col:34> 'int' 32
|   | | `-ParenExpr 0x196f209f618 <col:41, col:72> 'int'
|   | |   `-BinaryOperator 0x196f209f5f8 <col:42, col:69> 'int' '&&'
|   | |     |-BinaryOperator 0x196f209f548 <col:42, col:57> 'int' '=='
|   | |     | |-UnaryExprOrTypeTraitExpr 0x196f209f4e8 <col:42, col:52> 'unsigned long long' sizeof
|   | |     | | `-ParenExpr 0x196f209f4c8 <col:48, col:52> 'size_t':'unsigned long long' lvalue
|   | |     | |   `-DeclRefExpr 0x196f209f4a8 <col:49> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   | |     | `-ImplicitCastExpr 0x196f209f530 <col:57> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x196f209f508 <col:57> 'int' 8
|   | |     `-BinaryOperator 0x196f209f5d8 <col:62, col:69> 'int' '<'
|   | |       |-ImplicitCastExpr 0x196f209f5a8 <col:62> 'u64':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x196f209f568 <col:62> 'u64':'unsigned long long' lvalue Var 0x196f209f148 'mlen' 'u64':'unsigned long long'
|   | |       `-ImplicitCastExpr 0x196f209f5c0 <col:69> 'size_t':'unsigned long long' <LValueToRValue>
|   | |         `-DeclRefExpr 0x196f209f588 <col:69> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x196f209f698 <line:1177:9, col:17>
|   |   `-UnaryOperator 0x196f209f680 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x196f209f658 <col:17> 'int' 1
|   |-IfStmt 0x196f209f778 <line:1180:5, line:1184:5>
|   | |-OpaqueValueExpr 0x196f209f760 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x196f209f750 <line:1180:20, line:1184:5>
|   |-IfStmt 0x196f20ae208 <line:1197:5, line:1318:5>
|   | |-BinaryOperator 0x196f209f9e0 <line:1197:9, col:32> 'int' '=='
|   | | |-BinaryOperator 0x196f209f980 <col:9, col:27> 'unsigned long long' '%'
|   | | | |-ImplicitCastExpr 0x196f209f968 <col:9> 'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x196f209f910 <col:9> 'int' 16
|   | | | `-UnaryExprOrTypeTraitExpr 0x196f209f948 <col:14, col:27> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x196f209f9c8 <col:32> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x196f209f9a0 <col:32> 'int' 0
|   | `-CompoundStmt 0x196f20ae1f0 <col:35, line:1318:5>
|   |   `-DoStmt 0x196f20ae1d0 <line:1198:9, line:1317:19>
|   |     |-CompoundStmt 0x196f20ae170 <line:1198:12, line:1317:9>
|   |     | |-IfStmt 0x196f20a8118 <line:1199:13, line:1213:13>
|   |     | | |-ImplicitCastExpr 0x196f209fa20 <line:1199:17> 'unsigned int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x196f209fa00 <col:17> 'unsigned int' lvalue Var 0x196f20a5f98 'n' 'unsigned int'
|   |     | | `-CompoundStmt 0x196f20a80f8 <col:20, line:1213:13>
|   |     | |   |-WhileStmt 0x196f209fef8 <line:1200:17, line:1206:17>
|   |     | |   | |-BinaryOperator 0x196f209faa8 <line:1200:24, col:29> 'int' '&&'
|   |     | |   | | |-ImplicitCastExpr 0x196f209fa78 <col:24> 'unsigned int' <LValueToRValue>
|   |     | |   | | | `-DeclRefExpr 0x196f209fa38 <col:24> 'unsigned int' lvalue Var 0x196f20a5f98 'n' 'unsigned int'
|   |     | |   | | `-ImplicitCastExpr 0x196f209fa90 <col:29> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |   | |   `-DeclRefExpr 0x196f209fa58 <col:29> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   |     | |   | `-CompoundStmt 0x196f209fed0 <col:34, line:1206:17>
|   |     | |   |   |-DeclStmt 0x196f209fc08 <line:1201:21, col:35>
|   |     | |   |   | `-VarDecl 0x196f209fad8 <col:21, col:34> col:24 used c 'u8':'unsigned char' cinit
|   |     | |   |   |   `-ImplicitCastExpr 0x196f209fbf0 <col:28, col:34> 'unsigned char' <LValueToRValue>
|   |     | |   |   |     `-UnaryOperator 0x196f209fbd8 <col:28, col:34> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |     | |   |   |       `-ParenExpr 0x196f209fbb8 <col:29, col:34> 'const unsigned char *'
|   |     | |   |   |         `-UnaryOperator 0x196f209fba0 <col:30, col:32> 'const unsigned char *' postfix '++'
|   |     | |   |   |           `-DeclRefExpr 0x196f209fb68 <col:30> 'const unsigned char *' lvalue ParmVar 0x196f20a5998 'in' 'const unsigned char *'
|   |     | |   |   |-UnaryOperator 0x196f209fd60 <line:1204:21, col:23> 'size_t':'unsigned long long' prefix '--'
|   |     | |   |   | `-DeclRefExpr 0x196f209fd40 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   |     | |   |   `-BinaryOperator 0x196f209feb0 <line:1205:21, col:35> 'unsigned int' '='
|   |     | |   |     |-DeclRefExpr 0x196f209fd78 <col:21> 'unsigned int' lvalue Var 0x196f20a5f98 'n' 'unsigned int'
|   |     | |   |     `-BinaryOperator 0x196f209fe90 <col:25, col:35> 'unsigned int' '%'
|   |     | |   |       |-ParenExpr 0x196f209fe30 <col:25, col:31> 'unsigned int'
|   |     | |   |       | `-BinaryOperator 0x196f209fe10 <col:26, col:30> 'unsigned int' '+'
|   |     | |   |       |   |-ImplicitCastExpr 0x196f209fde0 <col:26> 'unsigned int' <LValueToRValue>
|   |     | |   |       |   | `-DeclRefExpr 0x196f209fd98 <col:26> 'unsigned int' lvalue Var 0x196f20a5f98 'n' 'unsigned int'
|   |     | |   |       |   `-ImplicitCastExpr 0x196f209fdf8 <col:30> 'unsigned int' <IntegralCast>
|   |     | |   |       |     `-IntegerLiteral 0x196f209fdb8 <col:30> 'int' 1
|   |     | |   |       `-ImplicitCastExpr 0x196f209fe78 <col:35> 'unsigned int' <IntegralCast>
|   |     | |   |         `-IntegerLiteral 0x196f209fe50 <col:35> 'int' 16
|   |     | |   `-IfStmt 0x196f20a80d0 <line:1207:17, line:1212:17> has_else
|   |     | |     |-BinaryOperator 0x196f209ff88 <line:1207:21, col:26> 'int' '=='
|   |     | |     | |-ImplicitCastExpr 0x196f209ff58 <col:21> 'unsigned int' <LValueToRValue>
|   |     | |     | | `-DeclRefExpr 0x196f209ff10 <col:21> 'unsigned int' lvalue Var 0x196f20a5f98 'n' 'unsigned int'
|   |     | |     | `-ImplicitCastExpr 0x196f209ff70 <col:26> 'unsigned int' <IntegralCast>
|   |     | |     |   `-IntegerLiteral 0x196f209ff30 <col:26> 'int' 0
|   |     | |     |-NullStmt 0x196f20a80c8 <line:553:28>
|   |     | |     `-CompoundStmt 0x196f20a80b0 <line:1209:22, line:1212:17>
|   |     | |       `-ReturnStmt 0x196f20a80a0 <line:1211:21, col:28>
|   |     | |         `-IntegerLiteral 0x196f209ffe8 <col:28> 'int' 0
|   |     | |-WhileStmt 0x196f20a8f18 <line:1220:13, line:1245:13>
|   |     | | |-BinaryOperator 0x196f20a8210 <line:1220:20, line:561:36> 'int' '>='
|   |     | | | |-ImplicitCastExpr 0x196f20a81e0 <line:1220:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | | `-DeclRefExpr 0x196f20a8130 <col:20> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   |     | | | `-ImplicitCastExpr 0x196f20a81f8 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |     | | |   `-ParenExpr 0x196f20a81c0 <col:29, col:36> 'int'
|   |     | | |     `-BinaryOperator 0x196f20a81a0 <col:30, col:32> 'int' '*'
|   |     | | |       |-IntegerLiteral 0x196f20a8150 <col:30> 'int' 3
|   |     | | |       `-IntegerLiteral 0x196f20a8178 <col:32> 'int' 1024
|   |     | | `-CompoundStmt 0x196f20a8ef0 <line:1220:40, line:1245:13>
|   |     | |   |-DeclStmt 0x196f20a8350 <line:1221:17, col:39>
|   |     | |   | `-VarDecl 0x196f20a8240 <col:17, line:561:36> line:1221:24 used j 'size_t':'unsigned long long' cinit
|   |     | |   |   `-ImplicitCastExpr 0x196f20a8338 <line:561:29, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |     | |   |     `-ParenExpr 0x196f20a8318 <col:29, col:36> 'int'
|   |     | |   |       `-BinaryOperator 0x196f20a82f8 <col:30, col:32> 'int' '*'
|   |     | |   |         |-IntegerLiteral 0x196f20a82a8 <col:30> 'int' 3
|   |     | |   |         `-IntegerLiteral 0x196f20a82d0 <col:32> 'int' 1024
|   |     | |   |-WhileStmt 0x196f20a8de0 <line:1224:17, line:1243:17>
|   |     | |   | |-ImplicitCastExpr 0x196f20a8470 <line:1224:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |   | | `-DeclRefExpr 0x196f20a8438 <col:24> 'size_t':'unsigned long long' lvalue Var 0x196f20a8240 'j' 'size_t':'unsigned long long'
|   |     | |   | `-CompoundStmt 0x196f20a8da0 <col:27, line:1243:17>
|   |     | |   |   |-DeclStmt 0x196f20a8570 <line:1225:21, col:50>
|   |     | |   |   | `-VarDecl 0x196f20a8498 <col:21, col:47> col:29 used out_t 'size_t *' cinit
|   |     | |   |   |   `-CStyleCastExpr 0x196f20a8548 <col:37, col:47> 'size_t *' <BitCast>
|   |     | |   |   |     `-ImplicitCastExpr 0x196f20a8530 <col:47> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |   |   |       `-DeclRefExpr 0x196f20a8500 <col:47> 'unsigned char *' lvalue ParmVar 0x196f20a5a18 'out' 'unsigned char *'
|   |     | |   |   |-DeclStmt 0x196f20a8670 <line:1226:21, col:60>
|   |     | |   |   | `-VarDecl 0x196f20a8598 <col:21, col:58> col:35 used in_t 'const size_t *' cinit
|   |     | |   |   |   `-CStyleCastExpr 0x196f20a8648 <col:42, col:58> 'const size_t *' <BitCast>
|   |     | |   |   |     `-ImplicitCastExpr 0x196f20a8630 <col:58> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |   |   |       `-DeclRefExpr 0x196f20a8600 <col:58> 'const unsigned char *' lvalue ParmVar 0x196f20a5998 'in' 'const unsigned char *'
|   |     | |   |   |-UnaryOperator 0x196f20a86e0 <line:1229:21, col:23> 'unsigned int' prefix '++'
|   |     | |   |   | `-DeclRefExpr 0x196f20a86c0 <col:23> 'unsigned int' lvalue Var 0x196f209f010 'ctr' 'unsigned int'
|   |     | |   |   |-CompoundAssignOperator 0x196f20a8c68 <line:1240:21, col:28> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     | |   |   | |-DeclRefExpr 0x196f20a8c20 <col:21> 'unsigned char *' lvalue ParmVar 0x196f20a5a18 'out' 'unsigned char *'
|   |     | |   |   | `-IntegerLiteral 0x196f20a8c40 <col:28> 'int' 16
|   |     | |   |   |-CompoundAssignOperator 0x196f20a8ce0 <line:1241:21, col:27> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |     | |   |   | |-DeclRefExpr 0x196f20a8c98 <col:21> 'const unsigned char *' lvalue ParmVar 0x196f20a5998 'in' 'const unsigned char *'
|   |     | |   |   | `-IntegerLiteral 0x196f20a8cb8 <col:27> 'int' 16
|   |     | |   |   `-CompoundAssignOperator 0x196f20a8d70 <line:1242:21, col:26> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |   |     |-DeclRefExpr 0x196f20a8d10 <col:21> 'size_t':'unsigned long long' lvalue Var 0x196f20a8240 'j' 'size_t':'unsigned long long'
|   |     | |   |     `-ImplicitCastExpr 0x196f20a8d58 <col:26> 'unsigned long long' <IntegralCast>
|   |     | |   |       `-IntegerLiteral 0x196f20a8d30 <col:26> 'int' 16
|   |     | |   `-CompoundAssignOperator 0x196f20a8ec0 <line:1244:17, line:561:36> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |     |-DeclRefExpr 0x196f20a8df8 <line:1244:17> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   |     | |     `-ImplicitCastExpr 0x196f20a8ea8 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |     | |       `-ParenExpr 0x196f20a8e88 <col:29, col:36> 'int'
|   |     | |         `-BinaryOperator 0x196f20a8e68 <col:30, col:32> 'int' '*'
|   |     | |           |-IntegerLiteral 0x196f20a8e18 <col:30> 'int' 3
|   |     | |           `-IntegerLiteral 0x196f20a8e40 <col:32> 'int' 1024
|   |     | |-IfStmt 0x196f20a7ac0 <line:1247:13, line:1269:13>
|   |     | | |-ParenExpr 0x196f20a9060 <line:1247:17, col:41> 'size_t':'unsigned long long'
|   |     | | | `-BinaryOperator 0x196f20a9040 <col:18, col:40> 'size_t':'unsigned long long' '='
|   |     | | |   |-DeclRefExpr 0x196f20a8f30 <col:18> 'size_t':'unsigned long long' lvalue Var 0x196f209f0b8 'i' 'size_t':'unsigned long long'
|   |     | | |   `-ParenExpr 0x196f20a9020 <col:22, col:40> 'unsigned long long'
|   |     | | |     `-BinaryOperator 0x196f20a9000 <col:23, col:38> 'unsigned long long' '&'
|   |     | | |       |-ImplicitCastExpr 0x196f20a8fe8 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | |       | `-DeclRefExpr 0x196f20a8f50 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   |     | | |       `-CStyleCastExpr 0x196f20a8fc0 <col:29, col:38> 'size_t':'unsigned long long' <IntegralCast>
|   |     | | |         `-UnaryOperator 0x196f20a8f98 <col:37, col:38> 'int' prefix '-'
|   |     | | |           `-IntegerLiteral 0x196f20a8f70 <col:38> 'int' 16
|   |     | | `-CompoundStmt 0x196f20a7aa8 <col:44, line:1269:13>
|   |     | |   `-WhileStmt 0x196f20a7a90 <line:1249:17, line:1268:17>
|   |     | |     |-BinaryOperator 0x196f20a7148 <line:1249:24, col:31> 'int' '>='
|   |     | |     | |-ImplicitCastExpr 0x196f20a7118 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |     | | `-DeclRefExpr 0x196f20a70d0 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   |     | |     | `-ImplicitCastExpr 0x196f20a7130 <col:31> 'unsigned long long' <IntegralCast>
|   |     | |     |   `-IntegerLiteral 0x196f20a70f0 <col:31> 'int' 16
|   |     | |     `-CompoundStmt 0x196f20a7a50 <col:35, line:1268:17>
|   |     | |       |-DeclStmt 0x196f20a7250 <line:1250:21, col:50>
|   |     | |       | `-VarDecl 0x196f20a7178 <col:21, col:47> col:29 used out_t 'size_t *' cinit
|   |     | |       |   `-CStyleCastExpr 0x196f20a7228 <col:37, col:47> 'size_t *' <BitCast>
|   |     | |       |     `-ImplicitCastExpr 0x196f20a7210 <col:47> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |       |       `-DeclRefExpr 0x196f20a71e0 <col:47> 'unsigned char *' lvalue ParmVar 0x196f20a5a18 'out' 'unsigned char *'
|   |     | |       |-DeclStmt 0x196f20a7350 <line:1251:21, col:60>
|   |     | |       | `-VarDecl 0x196f20a7278 <col:21, col:58> col:35 used in_t 'const size_t *' cinit
|   |     | |       |   `-CStyleCastExpr 0x196f20a7328 <col:42, col:58> 'const size_t *' <BitCast>
|   |     | |       |     `-ImplicitCastExpr 0x196f20a7310 <col:58> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |       |       `-DeclRefExpr 0x196f20a72e0 <col:58> 'const unsigned char *' lvalue ParmVar 0x196f20a5998 'in' 'const unsigned char *'
|   |     | |       |-UnaryOperator 0x196f20a73a8 <line:1254:21, col:23> 'unsigned int' prefix '++'
|   |     | |       | `-DeclRefExpr 0x196f20a7388 <col:23> 'unsigned int' lvalue Var 0x196f209f010 'ctr' 'unsigned int'
|   |     | |       |-CompoundAssignOperator 0x196f20a7918 <line:1265:21, col:28> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     | |       | |-DeclRefExpr 0x196f20a78d0 <col:21> 'unsigned char *' lvalue ParmVar 0x196f20a5a18 'out' 'unsigned char *'
|   |     | |       | `-IntegerLiteral 0x196f20a78f0 <col:28> 'int' 16
|   |     | |       |-CompoundAssignOperator 0x196f20a7990 <line:1266:21, col:27> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |     | |       | |-DeclRefExpr 0x196f20a7948 <col:21> 'const unsigned char *' lvalue ParmVar 0x196f20a5998 'in' 'const unsigned char *'
|   |     | |       | `-IntegerLiteral 0x196f20a7968 <col:27> 'int' 16
|   |     | |       `-CompoundAssignOperator 0x196f20a7a20 <line:1267:21, col:28> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |         |-DeclRefExpr 0x196f20a79c0 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   |     | |         `-ImplicitCastExpr 0x196f20a7a08 <col:28> 'unsigned long long' <IntegralCast>
|   |     | |           `-IntegerLiteral 0x196f20a79e0 <col:28> 'int' 16
|   |     | |-IfStmt 0x196f20ae100 <line:1296:13, line:1313:13>
|   |     | | |-ImplicitCastExpr 0x196f20a7af8 <line:1296:17> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x196f20a7ad8 <col:17> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   |     | | `-CompoundStmt 0x196f20a8070 <col:22, line:1313:13>
|   |     | |   |-UnaryOperator 0x196f20a7b50 <line:1298:17, col:19> 'unsigned int' prefix '++'
|   |     | |   | `-DeclRefExpr 0x196f20a7b30 <col:19> 'unsigned int' lvalue Var 0x196f209f010 'ctr' 'unsigned int'
|   |     | |   `-WhileStmt 0x196f20a8058 <line:1307:17, line:1312:17>
|   |     | |     |-UnaryOperator 0x196f20a7d88 <line:1307:24, col:27> 'size_t':'unsigned long long' postfix '--'
|   |     | |     | `-DeclRefExpr 0x196f20a7d68 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   |     | |     `-CompoundStmt 0x196f20a8038 <col:31, line:1312:17>
|   |     | |       |-DeclStmt 0x196f20a7ec0 <line:1308:21, col:33>
|   |     | |       | `-VarDecl 0x196f20a7db0 <col:21, col:32> col:24 used c 'u8':'unsigned char' cinit
|   |     | |       |   `-ImplicitCastExpr 0x196f20a7ea8 <col:28, col:32> 'unsigned char' <LValueToRValue>
|   |     | |       |     `-ArraySubscriptExpr 0x196f20a7e88 <col:28, col:32> 'const unsigned char' lvalue
|   |     | |       |       |-ImplicitCastExpr 0x196f20a7e58 <col:28> 'const unsigned char *' <LValueToRValue>
|   |     | |       |       | `-DeclRefExpr 0x196f20a7e18 <col:28> 'const unsigned char *' lvalue ParmVar 0x196f20a5998 'in' 'const unsigned char *'
|   |     | |       |       `-ImplicitCastExpr 0x196f20a7e70 <col:31> 'unsigned int' <LValueToRValue>
|   |     | |       |         `-DeclRefExpr 0x196f20a7e38 <col:31> 'unsigned int' lvalue Var 0x196f20a5f98 'n' 'unsigned int'
|   |     | |       `-UnaryOperator 0x196f20a8020 <line:1311:21, col:23> 'unsigned int' prefix '++'
|   |     | |         `-DeclRefExpr 0x196f20a8000 <col:23> 'unsigned int' lvalue Var 0x196f20a5f98 'n' 'unsigned int'
|   |     | `-ReturnStmt 0x196f20ae160 <line:1316:13, col:20>
|   |     |   `-IntegerLiteral 0x196f20ae138 <col:20> 'int' 0
|   |     `-IntegerLiteral 0x196f20ae1a8 <line:1317:18> 'int' 0
|   |-ForStmt 0x196f20aeb68 <line:1320:5, line:1340:5>
|   | |-BinaryOperator 0x196f20ae280 <line:1320:10, col:14> 'size_t':'unsigned long long' '='
|   | | |-DeclRefExpr 0x196f20ae220 <col:10> 'size_t':'unsigned long long' lvalue Var 0x196f209f0b8 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x196f20ae268 <col:14> 'size_t':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x196f20ae240 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x196f20ae310 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x196f20ae2e0 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x196f20ae2a0 <col:17> 'size_t':'unsigned long long' lvalue Var 0x196f209f0b8 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x196f20ae2f8 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x196f20ae2c0 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20a5a90 'len' 'size_t':'unsigned long long'
|   | |-UnaryOperator 0x196f20ae350 <col:26, col:28> 'size_t':'unsigned long long' prefix '++'
|   | | `-DeclRefExpr 0x196f20ae330 <col:28> 'size_t':'unsigned long long' lvalue Var 0x196f209f0b8 'i' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x196f20aeb38 <col:31, line:1340:5>
|   |   |-DeclStmt 0x196f20ae3e0 <line:1321:9, col:13>
|   |   | `-VarDecl 0x196f20ae378 <col:9, col:12> col:12 used c 'u8':'unsigned char'
|   |   |-IfStmt 0x196f20ae700 <line:1322:9, line:1333:9>
|   |   | |-BinaryOperator 0x196f20ae470 <line:1322:13, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x196f20ae440 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x196f20ae3f8 <col:13> 'unsigned int' lvalue Var 0x196f20a5f98 'n' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x196f20ae458 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x196f20ae418 <col:18> 'int' 0
|   |   | `-CompoundStmt 0x196f20ae6e8 <col:21, line:1333:9>
|   |   |   `-UnaryOperator 0x196f20ae4d0 <line:1324:13, col:15> 'unsigned int' prefix '++'
|   |   |     `-DeclRefExpr 0x196f20ae4b0 <col:15> 'unsigned int' lvalue Var 0x196f209f010 'ctr' 'unsigned int'
|   |   |-BinaryOperator 0x196f20ae7f8 <line:1334:9, col:17> 'u8':'unsigned char' '='
|   |   | |-DeclRefExpr 0x196f20ae718 <col:9> 'u8':'unsigned char' lvalue Var 0x196f20ae378 'c' 'u8':'unsigned char'
|   |   | `-ImplicitCastExpr 0x196f20ae7e0 <col:13, col:17> 'unsigned char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x196f20ae7c0 <col:13, col:17> 'const unsigned char' lvalue
|   |   |     |-ImplicitCastExpr 0x196f20ae790 <col:13> 'const unsigned char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x196f20ae750 <col:13> 'const unsigned char *' lvalue ParmVar 0x196f20a5998 'in' 'const unsigned char *'
|   |   |     `-ImplicitCastExpr 0x196f20ae7a8 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x196f20ae770 <col:16> 'size_t':'unsigned long long' lvalue Var 0x196f209f0b8 'i' 'size_t':'unsigned long long'
|   |   `-BinaryOperator 0x196f20aea60 <line:1337:9, col:23> 'unsigned int' '='
|   |     |-DeclRefExpr 0x196f20ae928 <col:9> 'unsigned int' lvalue Var 0x196f20a5f98 'n' 'unsigned int'
|   |     `-BinaryOperator 0x196f20aea40 <col:13, col:23> 'unsigned int' '%'
|   |       |-ParenExpr 0x196f20ae9e0 <col:13, col:19> 'unsigned int'
|   |       | `-BinaryOperator 0x196f20ae9c0 <col:14, col:18> 'unsigned int' '+'
|   |       |   |-ImplicitCastExpr 0x196f20ae990 <col:14> 'unsigned int' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x196f20ae948 <col:14> 'unsigned int' lvalue Var 0x196f20a5f98 'n' 'unsigned int'
|   |       |   `-ImplicitCastExpr 0x196f20ae9a8 <col:18> 'unsigned int' <IntegralCast>
|   |       |     `-IntegerLiteral 0x196f20ae968 <col:18> 'int' 1
|   |       `-ImplicitCastExpr 0x196f20aea28 <col:23> 'unsigned int' <IntegralCast>
|   |         `-IntegerLiteral 0x196f20aea00 <col:23> 'int' 16
|   `-ReturnStmt 0x196f20aebe8 <line:1343:5, col:12>
|     `-IntegerLiteral 0x196f20aebc0 <col:12> 'int' 0
|-FunctionDecl 0x196f20aefd0 <line:1346:1, line:1468:1> line:1346:5 invalid CRYPTO_gcm128_encrypt_ctr32 'int (int *, const unsigned char *, unsigned char *, size_t, int)'
| |-ParmVarDecl 0x196f20aec78 <col:33, col:49> col:49 invalid ctx 'int *'
| |-ParmVarDecl 0x196f20aecf8 <line:1347:33, col:54> col:54 used in 'const unsigned char *'
| |-ParmVarDecl 0x196f20aed78 <col:58, col:73> col:73 used out 'unsigned char *'
| |-ParmVarDecl 0x196f20aedf0 <line:1348:33, col:40> col:40 used len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x196f20aee70 <col:45, col:54> col:54 invalid stream 'int'
| `-CompoundStmt 0x196f20b0a68 <line:1349:1, line:1468:1>
|   |-DeclStmt 0x196f20ab428 <line:1353:5, line:1356:24>
|   | |-RecordDecl 0x196f20ab0d0 <line:1353:11, line:1356:5> line:1353:11 union definition
|   | | |-FieldDecl 0x196f20ab1a8 <line:1354:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x196f20ab210 <line:1355:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x196f20ab2c8 <line:1353:5, line:1356:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:1353:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:1353:11)' cinit
|   |   `-InitListExpr 0x196f20ab3b0 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:1353:11)':'union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:1353:11)' field Field 0x196f20ab1a8 'one' 'long'
|   |     `-ImplicitCastExpr 0x196f20ab3f8 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x196f20ab330 <col:21> 'int' 1
|   |-DeclStmt 0x196f20ab558 <line:1357:5, col:24>
|   | |-VarDecl 0x196f20ab458 <col:5, col:18> col:18 used n 'unsigned int'
|   | `-VarDecl 0x196f20ab4d8 <col:5, col:21> col:21 used ctr 'unsigned int'
|   |-DeclStmt 0x196f20ab5e8 <line:1358:5, col:13>
|   | `-VarDecl 0x196f20ab580 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x196f20ab6a0 <line:1359:5, col:29>
|   | `-VarDecl 0x196f20ab610 <col:5, col:9> col:9 used mlen 'u64':'unsigned long long'
|   |-DeclStmt 0x196f20ab738 <line:1360:5, col:25>
|   | `-VarDecl 0x196f20ab6d0 <col:5, col:11> col:11 used key 'void *'
|   |-CompoundAssignOperator 0x196f20ab7d8 <line:1369:5, col:13> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x196f20ab750 <col:5> 'u64':'unsigned long long' lvalue Var 0x196f20ab610 'mlen' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x196f20ab7c0 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x196f20ab788 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x196f20abb70 <line:1370:5, line:1371:17>
|   | |-BinaryOperator 0x196f20abb00 <line:1370:9, col:72> 'int' '||'
|   | | |-BinaryOperator 0x196f20ab950 <col:9, col:36> 'int' '>'
|   | | | |-ImplicitCastExpr 0x196f20ab938 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x196f20ab808 <col:9> 'u64':'unsigned long long' lvalue Var 0x196f20ab610 'mlen' 'u64':'unsigned long long'
|   | | | `-ParenExpr 0x196f20ab918 <col:16, col:36> 'unsigned long long'
|   | | |   `-BinaryOperator 0x196f20ab8f8 <col:17, col:34> 'unsigned long long' '-'
|   | | |     |-ParenExpr 0x196f20ab898 <col:17, col:30> 'unsigned long long'
|   | | |     | `-BinaryOperator 0x196f20ab878 <<scratch space>:300:1, .//openssl//file_jk/after\crypto\modes\gcm128.c:1370:28> 'unsigned long long' '<<'
|   | | |     |   |-IntegerLiteral 0x196f20ab828 <<scratch space>:300:1> 'unsigned long long' 1
|   | | |     |   `-IntegerLiteral 0x196f20ab850 <.//openssl//file_jk/after\crypto\modes\gcm128.c:1370:28> 'int' 36
|   | | |     `-ImplicitCastExpr 0x196f20ab8e0 <col:34> 'unsigned long long' <IntegralCast>
|   | | |       `-IntegerLiteral 0x196f20ab8b8 <col:34> 'int' 32
|   | | `-ParenExpr 0x196f20abae0 <col:41, col:72> 'int'
|   | |   `-BinaryOperator 0x196f20abac0 <col:42, col:69> 'int' '&&'
|   | |     |-BinaryOperator 0x196f20aba10 <col:42, col:57> 'int' '=='
|   | |     | |-UnaryExprOrTypeTraitExpr 0x196f20ab9b0 <col:42, col:52> 'unsigned long long' sizeof
|   | |     | | `-ParenExpr 0x196f20ab990 <col:48, col:52> 'size_t':'unsigned long long' lvalue
|   | |     | |   `-DeclRefExpr 0x196f20ab970 <col:49> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   | |     | `-ImplicitCastExpr 0x196f20ab9f8 <col:57> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x196f20ab9d0 <col:57> 'int' 8
|   | |     `-BinaryOperator 0x196f20abaa0 <col:62, col:69> 'int' '<'
|   | |       |-ImplicitCastExpr 0x196f20aba70 <col:62> 'u64':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x196f20aba30 <col:62> 'u64':'unsigned long long' lvalue Var 0x196f20ab610 'mlen' 'u64':'unsigned long long'
|   | |       `-ImplicitCastExpr 0x196f20aba88 <col:69> 'size_t':'unsigned long long' <LValueToRValue>
|   | |         `-DeclRefExpr 0x196f20aba50 <col:69> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x196f20abb60 <line:1371:9, col:17>
|   |   `-UnaryOperator 0x196f20abb48 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x196f20abb20 <col:17> 'int' 1
|   |-IfStmt 0x196f20abc40 <line:1374:5, line:1378:5>
|   | |-OpaqueValueExpr 0x196f20abc28 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x196f20abc18 <line:1374:20, line:1378:5>
|   |-IfStmt 0x196f20ac350 <line:1390:5, line:1402:5>
|   | |-ImplicitCastExpr 0x196f20abdf8 <line:1390:9> 'unsigned int' <LValueToRValue>
|   | | `-DeclRefExpr 0x196f20abdd8 <col:9> 'unsigned int' lvalue Var 0x196f20ab458 'n' 'unsigned int'
|   | `-CompoundStmt 0x196f20ac330 <col:12, line:1402:5>
|   |   |-WhileStmt 0x196f20ac1c0 <line:1391:9, line:1395:9>
|   |   | |-BinaryOperator 0x196f20abe80 <line:1391:16, col:21> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x196f20abe50 <col:16> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x196f20abe10 <col:16> 'unsigned int' lvalue Var 0x196f20ab458 'n' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x196f20abe68 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x196f20abe30 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long'
|   |   | `-CompoundStmt 0x196f20ac1a0 <col:26, line:1395:9>
|   |   |   |-UnaryOperator 0x196f20ac010 <line:1393:13, col:15> 'size_t':'unsigned long long' prefix '--'
|   |   |   | `-DeclRefExpr 0x196f20abff0 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long'
|   |   |   `-BinaryOperator 0x196f20ac180 <line:1394:13, col:27> 'unsigned int' '='
|   |   |     |-DeclRefExpr 0x196f20ac028 <col:13> 'unsigned int' lvalue Var 0x196f20ab458 'n' 'unsigned int'
|   |   |     `-BinaryOperator 0x196f20ac160 <col:17, col:27> 'unsigned int' '%'
|   |   |       |-ParenExpr 0x196f20ac100 <col:17, col:23> 'unsigned int'
|   |   |       | `-BinaryOperator 0x196f20ac0e0 <col:18, col:22> 'unsigned int' '+'
|   |   |       |   |-ImplicitCastExpr 0x196f20ac090 <col:18> 'unsigned int' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x196f20ac048 <col:18> 'unsigned int' lvalue Var 0x196f20ab458 'n' 'unsigned int'
|   |   |       |   `-ImplicitCastExpr 0x196f20ac0a8 <col:22> 'unsigned int' <IntegralCast>
|   |   |       |     `-IntegerLiteral 0x196f20ac068 <col:22> 'int' 1
|   |   |       `-ImplicitCastExpr 0x196f20ac148 <col:27> 'unsigned int' <IntegralCast>
|   |   |         `-IntegerLiteral 0x196f20ac120 <col:27> 'int' 16
|   |   `-IfStmt 0x196f20ac308 <line:1396:9, line:1401:9> has_else
|   |     |-BinaryOperator 0x196f20ac250 <line:1396:13, col:18> 'int' '=='
|   |     | |-ImplicitCastExpr 0x196f20ac220 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x196f20ac1d8 <col:13> 'unsigned int' lvalue Var 0x196f20ab458 'n' 'unsigned int'
|   |     | `-ImplicitCastExpr 0x196f20ac238 <col:18> 'unsigned int' <IntegralCast>
|   |     |   `-IntegerLiteral 0x196f20ac1f8 <col:18> 'int' 0
|   |     |-NullStmt 0x196f20ac300 <line:553:28>
|   |     `-CompoundStmt 0x196f20ac2e8 <line:1398:14, line:1401:9>
|   |       `-ReturnStmt 0x196f20ac2d8 <line:1400:13, col:20>
|   |         `-IntegerLiteral 0x196f20ac2b0 <col:20> 'int' 0
|   |-WhileStmt 0x196f20accb0 <line:1404:5, line:1419:5>
|   | |-BinaryOperator 0x196f20ac448 <line:1404:12, line:561:36> 'int' '>='
|   | | |-ImplicitCastExpr 0x196f20ac418 <line:1404:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x196f20ac368 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x196f20ac430 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   | |   `-ParenExpr 0x196f20ac3f8 <col:29, col:36> 'int'
|   | |     `-BinaryOperator 0x196f20ac3d8 <col:30, col:32> 'int' '*'
|   | |       |-IntegerLiteral 0x196f20ac388 <col:30> 'int' 3
|   | |       `-IntegerLiteral 0x196f20ac3b0 <col:32> 'int' 1024
|   | `-CompoundStmt 0x196f20acc80 <line:1404:32, line:1419:5>
|   |   |-CompoundAssignOperator 0x196f20ac6c8 <line:1406:9, col:30> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x196f20ac5b8 <col:9> 'unsigned int' lvalue Var 0x196f20ab4d8 'ctr' 'unsigned int'
|   |   | `-ImplicitCastExpr 0x196f20ac6b0 <line:561:29, line:1406:30> 'unsigned int' <IntegralCast>
|   |   |   `-BinaryOperator 0x196f20ac690 <line:561:29, line:1406:30> 'int' '/'
|   |   |     |-ParenExpr 0x196f20ac648 <line:561:29, col:36> 'int'
|   |   |     | `-BinaryOperator 0x196f20ac628 <col:30, col:32> 'int' '*'
|   |   |     |   |-IntegerLiteral 0x196f20ac5d8 <col:30> 'int' 3
|   |   |     |   `-IntegerLiteral 0x196f20ac600 <col:32> 'int' 1024
|   |   |     `-IntegerLiteral 0x196f20ac668 <line:1406:30> 'int' 16
|   |   |-CompoundAssignOperator 0x196f20aca78 <line:1416:9, line:561:36> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |   | |-DeclRefExpr 0x196f20ac9c8 <line:1416:9> 'unsigned char *' lvalue ParmVar 0x196f20aed78 'out' 'unsigned char *'
|   |   | `-ParenExpr 0x196f20aca58 <line:561:29, col:36> 'int'
|   |   |   `-BinaryOperator 0x196f20aca38 <col:30, col:32> 'int' '*'
|   |   |     |-IntegerLiteral 0x196f20ac9e8 <col:30> 'int' 3
|   |   |     `-IntegerLiteral 0x196f20aca10 <col:32> 'int' 1024
|   |   |-CompoundAssignOperator 0x196f20acb58 <line:1417:9, line:561:36> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x196f20acaa8 <line:1417:9> 'const unsigned char *' lvalue ParmVar 0x196f20aecf8 'in' 'const unsigned char *'
|   |   | `-ParenExpr 0x196f20acb38 <line:561:29, col:36> 'int'
|   |   |   `-BinaryOperator 0x196f20acb18 <col:30, col:32> 'int' '*'
|   |   |     |-IntegerLiteral 0x196f20acac8 <col:30> 'int' 3
|   |   |     `-IntegerLiteral 0x196f20acaf0 <col:32> 'int' 1024
|   |   `-CompoundAssignOperator 0x196f20acc50 <line:1418:9, line:561:36> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x196f20acb88 <line:1418:9> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x196f20acc38 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |       `-ParenExpr 0x196f20acc18 <col:29, col:36> 'int'
|   |         `-BinaryOperator 0x196f20acbf8 <col:30, col:32> 'int' '*'
|   |           |-IntegerLiteral 0x196f20acba8 <col:30> 'int' 3
|   |           `-IntegerLiteral 0x196f20acbd0 <col:32> 'int' 1024
|   |-IfStmt 0x196f20b0530 <line:1421:5, line:1447:5>
|   | |-ParenExpr 0x196f20ace10 <line:1421:9, col:33> 'size_t':'unsigned long long'
|   | | `-BinaryOperator 0x196f20acdf0 <col:10, col:32> 'size_t':'unsigned long long' '='
|   | |   |-DeclRefExpr 0x196f20accc8 <col:10> 'size_t':'unsigned long long' lvalue Var 0x196f20ab580 'i' 'size_t':'unsigned long long'
|   | |   `-ParenExpr 0x196f20acdd0 <col:14, col:32> 'unsigned long long'
|   | |     `-BinaryOperator 0x196f20acdb0 <col:15, col:30> 'unsigned long long' '&'
|   | |       |-ImplicitCastExpr 0x196f20acd98 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x196f20acd00 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long'
|   | |       `-CStyleCastExpr 0x196f20acd70 <col:21, col:30> 'size_t':'unsigned long long' <IntegralCast>
|   | |         `-UnaryOperator 0x196f20acd48 <col:29, col:30> 'int' prefix '-'
|   | |           `-IntegerLiteral 0x196f20acd20 <col:30> 'int' 16
|   | `-CompoundStmt 0x196f20b04f8 <col:36, line:1447:5>
|   |   |-DeclStmt 0x196f20acf40 <line:1422:9, col:26>
|   |   | `-VarDecl 0x196f20ace40 <col:9, col:24> col:16 used j 'size_t':'unsigned long long' cinit
|   |   |   `-BinaryOperator 0x196f20acf20 <col:20, col:24> 'unsigned long long' '/'
|   |   |     |-ImplicitCastExpr 0x196f20acef0 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x196f20acea8 <col:20> 'size_t':'unsigned long long' lvalue Var 0x196f20ab580 'i' 'size_t':'unsigned long long'
|   |   |     `-ImplicitCastExpr 0x196f20acf08 <col:24> 'unsigned long long' <IntegralCast>
|   |   |       `-IntegerLiteral 0x196f20acec8 <col:24> 'int' 16
|   |   |-CompoundAssignOperator 0x196f20ad088 <line:1425:9, col:30> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x196f20acff0 <col:9> 'unsigned int' lvalue Var 0x196f20ab4d8 'ctr' 'unsigned int'
|   |   | `-CStyleCastExpr 0x196f20ad060 <col:16, col:30> 'unsigned int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x196f20ad048 <col:30> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x196f20ad010 <col:30> 'size_t':'unsigned long long' lvalue Var 0x196f20ace40 'j' 'size_t':'unsigned long long'
|   |   |-CompoundAssignOperator 0x196f20b0358 <line:1434:9, col:15> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x196f20b0300 <col:9> 'const unsigned char *' lvalue ParmVar 0x196f20aecf8 'in' 'const unsigned char *'
|   |   | `-ImplicitCastExpr 0x196f20b0340 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x196f20b0320 <col:15> 'size_t':'unsigned long long' lvalue Var 0x196f20ab580 'i' 'size_t':'unsigned long long'
|   |   |-CompoundAssignOperator 0x196f20b03e0 <line:1435:9, col:16> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x196f20b0388 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long'
|   |   | `-ImplicitCastExpr 0x196f20b03c8 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x196f20b03a8 <col:16> 'size_t':'unsigned long long' lvalue Var 0x196f20ab580 'i' 'size_t':'unsigned long long'
|   |   `-CompoundAssignOperator 0x196f20b04c8 <line:1438:9, col:16> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     |-DeclRefExpr 0x196f20b0470 <col:9> 'unsigned char *' lvalue ParmVar 0x196f20aed78 'out' 'unsigned char *'
|   |     `-ImplicitCastExpr 0x196f20b04b0 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x196f20b0490 <col:16> 'size_t':'unsigned long long' lvalue Var 0x196f20ab580 'i' 'size_t':'unsigned long long'
|   |-IfStmt 0x196f20b09f8 <line:1448:5, line:1463:5>
|   | |-ImplicitCastExpr 0x196f20b0568 <line:1448:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | `-DeclRefExpr 0x196f20b0548 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x196f20b09d8 <col:14, line:1463:5>
|   |   |-UnaryOperator 0x196f20b05c0 <line:1450:9, col:11> 'unsigned int' prefix '++'
|   |   | `-DeclRefExpr 0x196f20b05a0 <col:11> 'unsigned int' lvalue Var 0x196f20ab4d8 'ctr' 'unsigned int'
|   |   `-WhileStmt 0x196f20b09c0 <line:1459:9, line:1462:9>
|   |     |-UnaryOperator 0x196f20b07f8 <line:1459:16, col:19> 'size_t':'unsigned long long' postfix '--'
|   |     | `-DeclRefExpr 0x196f20b07d8 <col:16> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20aedf0 'len' 'size_t':'unsigned long long'
|   |     `-CompoundStmt 0x196f20b09a8 <col:23, line:1462:9>
|   |       `-UnaryOperator 0x196f20b0990 <line:1461:13, col:15> 'unsigned int' prefix '++'
|   |         `-DeclRefExpr 0x196f20b0970 <col:15> 'unsigned int' lvalue Var 0x196f20ab458 'n' 'unsigned int'
|   `-ReturnStmt 0x196f20b0a58 <line:1466:5, col:12>
|     `-IntegerLiteral 0x196f20b0a30 <col:12> 'int' 0
|-FunctionDecl 0x196f20b0da8 <line:1470:1, line:1599:1> line:1470:5 invalid CRYPTO_gcm128_decrypt_ctr32 'int (int *, const unsigned char *, unsigned char *, size_t, int)'
| |-ParmVarDecl 0x196f20b0af8 <col:33, col:49> col:49 invalid ctx 'int *'
| |-ParmVarDecl 0x196f20b0b78 <line:1471:33, col:54> col:54 used in 'const unsigned char *'
| |-ParmVarDecl 0x196f20b0bf8 <col:58, col:73> col:73 used out 'unsigned char *'
| |-ParmVarDecl 0x196f20b0c70 <line:1472:33, col:40> col:40 used len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x196f20b0cf0 <col:45, col:54> col:54 invalid stream 'int'
| `-CompoundStmt 0x196f20a9988 <line:1473:1, line:1599:1>
|   |-DeclStmt 0x196f20aa190 <line:1477:5, line:1480:24>
|   | |-RecordDecl 0x196f20b0e88 <line:1477:11, line:1480:5> line:1477:11 union definition
|   | | |-FieldDecl 0x196f20b0f58 <line:1478:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x196f20b0fc0 <line:1479:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x196f20b1078 <line:1477:5, line:1480:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:1477:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:1477:11)' cinit
|   |   `-InitListExpr 0x196f20aa118 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:1477:11)':'union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:1477:11)' field Field 0x196f20b0f58 'one' 'long'
|   |     `-ImplicitCastExpr 0x196f20aa160 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x196f20b10e0 <col:21> 'int' 1
|   |-DeclStmt 0x196f20aa2c0 <line:1481:5, col:24>
|   | |-VarDecl 0x196f20aa1c0 <col:5, col:18> col:18 used n 'unsigned int'
|   | `-VarDecl 0x196f20aa240 <col:5, col:21> col:21 used ctr 'unsigned int'
|   |-DeclStmt 0x196f20aa350 <line:1482:5, col:13>
|   | `-VarDecl 0x196f20aa2e8 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x196f20aa408 <line:1483:5, col:29>
|   | `-VarDecl 0x196f20aa378 <col:5, col:9> col:9 used mlen 'u64':'unsigned long long'
|   |-DeclStmt 0x196f20aa4a0 <line:1484:5, col:25>
|   | `-VarDecl 0x196f20aa438 <col:5, col:11> col:11 used key 'void *'
|   |-CompoundAssignOperator 0x196f20aa540 <line:1493:5, col:13> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x196f20aa4b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x196f20aa378 'mlen' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x196f20aa528 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x196f20aa4f0 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x196f20aa8d8 <line:1494:5, line:1495:17>
|   | |-BinaryOperator 0x196f20aa868 <line:1494:9, col:72> 'int' '||'
|   | | |-BinaryOperator 0x196f20aa6b8 <col:9, col:36> 'int' '>'
|   | | | |-ImplicitCastExpr 0x196f20aa6a0 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x196f20aa570 <col:9> 'u64':'unsigned long long' lvalue Var 0x196f20aa378 'mlen' 'u64':'unsigned long long'
|   | | | `-ParenExpr 0x196f20aa680 <col:16, col:36> 'unsigned long long'
|   | | |   `-BinaryOperator 0x196f20aa660 <col:17, col:34> 'unsigned long long' '-'
|   | | |     |-ParenExpr 0x196f20aa600 <col:17, col:30> 'unsigned long long'
|   | | |     | `-BinaryOperator 0x196f20aa5e0 <<scratch space>:301:1, .//openssl//file_jk/after\crypto\modes\gcm128.c:1494:28> 'unsigned long long' '<<'
|   | | |     |   |-IntegerLiteral 0x196f20aa590 <<scratch space>:301:1> 'unsigned long long' 1
|   | | |     |   `-IntegerLiteral 0x196f20aa5b8 <.//openssl//file_jk/after\crypto\modes\gcm128.c:1494:28> 'int' 36
|   | | |     `-ImplicitCastExpr 0x196f20aa648 <col:34> 'unsigned long long' <IntegralCast>
|   | | |       `-IntegerLiteral 0x196f20aa620 <col:34> 'int' 32
|   | | `-ParenExpr 0x196f20aa848 <col:41, col:72> 'int'
|   | |   `-BinaryOperator 0x196f20aa828 <col:42, col:69> 'int' '&&'
|   | |     |-BinaryOperator 0x196f20aa778 <col:42, col:57> 'int' '=='
|   | |     | |-UnaryExprOrTypeTraitExpr 0x196f20aa718 <col:42, col:52> 'unsigned long long' sizeof
|   | |     | | `-ParenExpr 0x196f20aa6f8 <col:48, col:52> 'size_t':'unsigned long long' lvalue
|   | |     | |   `-DeclRefExpr 0x196f20aa6d8 <col:49> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   | |     | `-ImplicitCastExpr 0x196f20aa760 <col:57> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x196f20aa738 <col:57> 'int' 8
|   | |     `-BinaryOperator 0x196f20aa808 <col:62, col:69> 'int' '<'
|   | |       |-ImplicitCastExpr 0x196f20aa7d8 <col:62> 'u64':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x196f20aa798 <col:62> 'u64':'unsigned long long' lvalue Var 0x196f20aa378 'mlen' 'u64':'unsigned long long'
|   | |       `-ImplicitCastExpr 0x196f20aa7f0 <col:69> 'size_t':'unsigned long long' <LValueToRValue>
|   | |         `-DeclRefExpr 0x196f20aa7b8 <col:69> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x196f20aa8c8 <line:1495:9, col:17>
|   |   `-UnaryOperator 0x196f20aa8b0 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x196f20aa888 <col:17> 'int' 1
|   |-IfStmt 0x196f20aa9a8 <line:1498:5, line:1502:5>
|   | |-OpaqueValueExpr 0x196f20aa990 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x196f20aa980 <line:1498:20, line:1502:5>
|   |-IfStmt 0x196f20ad1d0 <line:1514:5, line:1528:5>
|   | |-ImplicitCastExpr 0x196f20aab60 <line:1514:9> 'unsigned int' <LValueToRValue>
|   | | `-DeclRefExpr 0x196f20aab40 <col:9> 'unsigned int' lvalue Var 0x196f20aa1c0 'n' 'unsigned int'
|   | `-CompoundStmt 0x196f20ad1b0 <col:12, line:1528:5>
|   |   |-WhileStmt 0x196f20ab010 <line:1515:9, line:1521:9>
|   |   | |-BinaryOperator 0x196f20aabe8 <line:1515:16, col:21> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x196f20aabb8 <col:16> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x196f20aab78 <col:16> 'unsigned int' lvalue Var 0x196f20aa1c0 'n' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x196f20aabd0 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x196f20aab98 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long'
|   |   | `-CompoundStmt 0x196f20aafe8 <col:26, line:1521:9>
|   |   |   |-DeclStmt 0x196f20aad20 <line:1516:13, col:27>
|   |   |   | `-VarDecl 0x196f20aac18 <col:13, col:26> col:16 used c 'u8':'unsigned char' cinit
|   |   |   |   `-ImplicitCastExpr 0x196f20aad08 <col:20, col:26> 'unsigned char' <LValueToRValue>
|   |   |   |     `-UnaryOperator 0x196f20aacf0 <col:20, col:26> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |   |       `-ParenExpr 0x196f20aacd0 <col:21, col:26> 'const unsigned char *'
|   |   |   |         `-UnaryOperator 0x196f20aacb8 <col:22, col:24> 'const unsigned char *' postfix '++'
|   |   |   |           `-DeclRefExpr 0x196f20aac80 <col:22> 'const unsigned char *' lvalue ParmVar 0x196f20b0b78 'in' 'const unsigned char *'
|   |   |   |-UnaryOperator 0x196f20aae78 <line:1519:13, col:15> 'size_t':'unsigned long long' prefix '--'
|   |   |   | `-DeclRefExpr 0x196f20aae58 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long'
|   |   |   `-BinaryOperator 0x196f20aafc8 <line:1520:13, col:27> 'unsigned int' '='
|   |   |     |-DeclRefExpr 0x196f20aae90 <col:13> 'unsigned int' lvalue Var 0x196f20aa1c0 'n' 'unsigned int'
|   |   |     `-BinaryOperator 0x196f20aafa8 <col:17, col:27> 'unsigned int' '%'
|   |   |       |-ParenExpr 0x196f20aaf48 <col:17, col:23> 'unsigned int'
|   |   |       | `-BinaryOperator 0x196f20aaf28 <col:18, col:22> 'unsigned int' '+'
|   |   |       |   |-ImplicitCastExpr 0x196f20aaef8 <col:18> 'unsigned int' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x196f20aaeb0 <col:18> 'unsigned int' lvalue Var 0x196f20aa1c0 'n' 'unsigned int'
|   |   |       |   `-ImplicitCastExpr 0x196f20aaf10 <col:22> 'unsigned int' <IntegralCast>
|   |   |       |     `-IntegerLiteral 0x196f20aaed0 <col:22> 'int' 1
|   |   |       `-ImplicitCastExpr 0x196f20aaf90 <col:27> 'unsigned int' <IntegralCast>
|   |   |         `-IntegerLiteral 0x196f20aaf68 <col:27> 'int' 16
|   |   `-IfStmt 0x196f20ad188 <line:1522:9, line:1527:9> has_else
|   |     |-BinaryOperator 0x196f20ab0a0 <line:1522:13, col:18> 'int' '=='
|   |     | |-ImplicitCastExpr 0x196f20ab070 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x196f20ab028 <col:13> 'unsigned int' lvalue Var 0x196f20aa1c0 'n' 'unsigned int'
|   |     | `-ImplicitCastExpr 0x196f20ab088 <col:18> 'unsigned int' <IntegralCast>
|   |     |   `-IntegerLiteral 0x196f20ab048 <col:18> 'int' 0
|   |     |-NullStmt 0x196f20ad180 <line:553:28>
|   |     `-CompoundStmt 0x196f20ad168 <line:1524:14, line:1527:9>
|   |       `-ReturnStmt 0x196f20ad158 <line:1526:13, col:20>
|   |         `-IntegerLiteral 0x196f20ad130 <col:20> 'int' 0
|   |-WhileStmt 0x196f20adb30 <line:1530:5, line:1545:5>
|   | |-BinaryOperator 0x196f20ad2c8 <line:1530:12, line:561:36> 'int' '>='
|   | | |-ImplicitCastExpr 0x196f20ad298 <line:1530:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x196f20ad1e8 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x196f20ad2b0 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   | |   `-ParenExpr 0x196f20ad278 <col:29, col:36> 'int'
|   | |     `-BinaryOperator 0x196f20ad258 <col:30, col:32> 'int' '*'
|   | |       |-IntegerLiteral 0x196f20ad208 <col:30> 'int' 3
|   | |       `-IntegerLiteral 0x196f20ad230 <col:32> 'int' 1024
|   | `-CompoundStmt 0x196f20adb00 <line:1530:32, line:1545:5>
|   |   |-CompoundAssignOperator 0x196f20ad618 <line:1533:9, col:30> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x196f20ad508 <col:9> 'unsigned int' lvalue Var 0x196f20aa240 'ctr' 'unsigned int'
|   |   | `-ImplicitCastExpr 0x196f20ad600 <line:561:29, line:1533:30> 'unsigned int' <IntegralCast>
|   |   |   `-BinaryOperator 0x196f20ad5e0 <line:561:29, line:1533:30> 'int' '/'
|   |   |     |-ParenExpr 0x196f20ad598 <line:561:29, col:36> 'int'
|   |   |     | `-BinaryOperator 0x196f20ad578 <col:30, col:32> 'int' '*'
|   |   |     |   |-IntegerLiteral 0x196f20ad528 <col:30> 'int' 3
|   |   |     |   `-IntegerLiteral 0x196f20ad550 <col:32> 'int' 1024
|   |   |     `-IntegerLiteral 0x196f20ad5b8 <line:1533:30> 'int' 16
|   |   |-CompoundAssignOperator 0x196f20ad8f8 <line:1542:9, line:561:36> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |   | |-DeclRefExpr 0x196f20ad848 <line:1542:9> 'unsigned char *' lvalue ParmVar 0x196f20b0bf8 'out' 'unsigned char *'
|   |   | `-ParenExpr 0x196f20ad8d8 <line:561:29, col:36> 'int'
|   |   |   `-BinaryOperator 0x196f20ad8b8 <col:30, col:32> 'int' '*'
|   |   |     |-IntegerLiteral 0x196f20ad868 <col:30> 'int' 3
|   |   |     `-IntegerLiteral 0x196f20ad890 <col:32> 'int' 1024
|   |   |-CompoundAssignOperator 0x196f20ad9d8 <line:1543:9, line:561:36> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x196f20ad928 <line:1543:9> 'const unsigned char *' lvalue ParmVar 0x196f20b0b78 'in' 'const unsigned char *'
|   |   | `-ParenExpr 0x196f20ad9b8 <line:561:29, col:36> 'int'
|   |   |   `-BinaryOperator 0x196f20ad998 <col:30, col:32> 'int' '*'
|   |   |     |-IntegerLiteral 0x196f20ad948 <col:30> 'int' 3
|   |   |     `-IntegerLiteral 0x196f20ad970 <col:32> 'int' 1024
|   |   `-CompoundAssignOperator 0x196f20adad0 <line:1544:9, line:561:36> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x196f20ada08 <line:1544:9> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x196f20adab8 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |       `-ParenExpr 0x196f20ada98 <col:29, col:36> 'int'
|   |         `-BinaryOperator 0x196f20ada78 <col:30, col:32> 'int' '*'
|   |           |-IntegerLiteral 0x196f20ada28 <col:30> 'int' 3
|   |           `-IntegerLiteral 0x196f20ada50 <col:32> 'int' 1024
|   |-IfStmt 0x196f20a9348 <line:1547:5, line:1576:5>
|   | |-ParenExpr 0x196f20adc90 <line:1547:9, col:33> 'size_t':'unsigned long long'
|   | | `-BinaryOperator 0x196f20adc70 <col:10, col:32> 'size_t':'unsigned long long' '='
|   | |   |-DeclRefExpr 0x196f20adb48 <col:10> 'size_t':'unsigned long long' lvalue Var 0x196f20aa2e8 'i' 'size_t':'unsigned long long'
|   | |   `-ParenExpr 0x196f20adc50 <col:14, col:32> 'unsigned long long'
|   | |     `-BinaryOperator 0x196f20adc30 <col:15, col:30> 'unsigned long long' '&'
|   | |       |-ImplicitCastExpr 0x196f20adc18 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x196f20adb80 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long'
|   | |       `-CStyleCastExpr 0x196f20adbf0 <col:21, col:30> 'size_t':'unsigned long long' <IntegralCast>
|   | |         `-UnaryOperator 0x196f20adbc8 <col:29, col:30> 'int' prefix '-'
|   | |           `-IntegerLiteral 0x196f20adba0 <col:30> 'int' 16
|   | `-CompoundStmt 0x196f20a9310 <col:36, line:1576:5>
|   |   |-DeclStmt 0x196f20addc0 <line:1548:9, col:26>
|   |   | `-VarDecl 0x196f20adcc0 <col:9, col:24> col:16 used j 'size_t':'unsigned long long' cinit
|   |   |   `-BinaryOperator 0x196f20adda0 <col:20, col:24> 'unsigned long long' '/'
|   |   |     |-ImplicitCastExpr 0x196f20add70 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x196f20add28 <col:20> 'size_t':'unsigned long long' lvalue Var 0x196f20aa2e8 'i' 'size_t':'unsigned long long'
|   |   |     `-ImplicitCastExpr 0x196f20add88 <col:24> 'unsigned long long' <IntegralCast>
|   |   |       `-IntegerLiteral 0x196f20add48 <col:24> 'int' 16
|   |   |-CompoundAssignOperator 0x196f20adf68 <line:1564:9, col:30> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x196f20aded0 <col:9> 'unsigned int' lvalue Var 0x196f20aa240 'ctr' 'unsigned int'
|   |   | `-CStyleCastExpr 0x196f20adf40 <col:16, col:30> 'unsigned int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x196f20adf28 <col:30> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x196f20adef0 <col:30> 'size_t':'unsigned long long' lvalue Var 0x196f20adcc0 'j' 'size_t':'unsigned long long'
|   |   |-CompoundAssignOperator 0x196f20a91d0 <line:1573:9, col:16> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |   | |-DeclRefExpr 0x196f20a9178 <col:9> 'unsigned char *' lvalue ParmVar 0x196f20b0bf8 'out' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x196f20a91b8 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x196f20a9198 <col:16> 'size_t':'unsigned long long' lvalue Var 0x196f20aa2e8 'i' 'size_t':'unsigned long long'
|   |   |-CompoundAssignOperator 0x196f20a9258 <line:1574:9, col:15> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x196f20a9200 <col:9> 'const unsigned char *' lvalue ParmVar 0x196f20b0b78 'in' 'const unsigned char *'
|   |   | `-ImplicitCastExpr 0x196f20a9240 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x196f20a9220 <col:15> 'size_t':'unsigned long long' lvalue Var 0x196f20aa2e8 'i' 'size_t':'unsigned long long'
|   |   `-CompoundAssignOperator 0x196f20a92e0 <line:1575:9, col:16> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x196f20a9288 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x196f20a92c8 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x196f20a92a8 <col:16> 'size_t':'unsigned long long' lvalue Var 0x196f20aa2e8 'i' 'size_t':'unsigned long long'
|   |-IfStmt 0x196f20a9918 <line:1577:5, line:1594:5>
|   | |-ImplicitCastExpr 0x196f20a9380 <line:1577:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | `-DeclRefExpr 0x196f20a9360 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x196f20a98f8 <col:14, line:1594:5>
|   |   |-UnaryOperator 0x196f20a93d8 <line:1579:9, col:11> 'unsigned int' prefix '++'
|   |   | `-DeclRefExpr 0x196f20a93b8 <col:11> 'unsigned int' lvalue Var 0x196f20aa240 'ctr' 'unsigned int'
|   |   `-WhileStmt 0x196f20a98e0 <line:1588:9, line:1593:9>
|   |     |-UnaryOperator 0x196f20a9610 <line:1588:16, col:19> 'size_t':'unsigned long long' postfix '--'
|   |     | `-DeclRefExpr 0x196f20a95f0 <col:16> 'size_t':'unsigned long long' lvalue ParmVar 0x196f20b0c70 'len' 'size_t':'unsigned long long'
|   |     `-CompoundStmt 0x196f20a98c0 <col:23, line:1593:9>
|   |       |-DeclStmt 0x196f20a9748 <line:1589:13, col:25>
|   |       | `-VarDecl 0x196f20a9638 <col:13, col:24> col:16 used c 'u8':'unsigned char' cinit
|   |       |   `-ImplicitCastExpr 0x196f20a9730 <col:20, col:24> 'unsigned char' <LValueToRValue>
|   |       |     `-ArraySubscriptExpr 0x196f20a9710 <col:20, col:24> 'const unsigned char' lvalue
|   |       |       |-ImplicitCastExpr 0x196f20a96e0 <col:20> 'const unsigned char *' <LValueToRValue>
|   |       |       | `-DeclRefExpr 0x196f20a96a0 <col:20> 'const unsigned char *' lvalue ParmVar 0x196f20b0b78 'in' 'const unsigned char *'
|   |       |       `-ImplicitCastExpr 0x196f20a96f8 <col:23> 'unsigned int' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x196f20a96c0 <col:23> 'unsigned int' lvalue Var 0x196f20aa1c0 'n' 'unsigned int'
|   |       `-UnaryOperator 0x196f20a98a8 <line:1592:13, col:15> 'unsigned int' prefix '++'
|   |         `-DeclRefExpr 0x196f20a9888 <col:15> 'unsigned int' lvalue Var 0x196f20aa1c0 'n' 'unsigned int'
|   `-ReturnStmt 0x196f20a9978 <line:1597:5, col:12>
|     `-IntegerLiteral 0x196f20a9950 <col:12> 'int' 0
|-FunctionDecl 0x196f20a9bb8 <line:1601:1, line:1643:1> line:1601:5 invalid CRYPTO_gcm128_finish 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x196f20a9a18 <col:26, col:42> col:42 invalid ctx 'int *'
| |-ParmVarDecl 0x196f20a9a98 <col:47, col:68> col:68 used tag 'const unsigned char *'
| |-ParmVarDecl 0x196f20a9b10 <line:1602:26, col:33> col:33 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x196f2111810 <line:1603:1, line:1643:1>
|   |-DeclStmt 0x196f20a9fd8 <line:1604:5, line:1607:24>
|   | |-RecordDecl 0x196f20a9c88 <line:1604:11, line:1607:5> line:1604:11 union definition
|   | | |-FieldDecl 0x196f20a9d58 <line:1605:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x196f20a9dc0 <line:1606:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x196f20a9e78 <line:1604:5, line:1607:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:1604:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:1604:11)' cinit
|   |   `-InitListExpr 0x196f20a9f60 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:1604:11)':'union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:1604:11)' field Field 0x196f20a9d58 'one' 'long'
|   |     `-ImplicitCastExpr 0x196f20a9fa8 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x196f20a9ee0 <col:21> 'int' 1
|   |-DeclStmt 0x196f2110f98 <line:1608:5, col:34>
|   | `-VarDecl 0x196f20aa000 <col:5, col:9> col:9 used alen 'u64':'unsigned long long'
|   |-DeclStmt 0x196f2111078 <line:1609:5, col:34>
|   | `-VarDecl 0x196f2110fc0 <col:5, col:9> col:9 used clen 'u64':'unsigned long long'
|   |-IfStmt 0x196f2111420 <line:1617:5, line:1630:5>
|   | |-ImplicitCastExpr 0x196f2111118 <line:1617:9, col:19> 'char' <LValueToRValue>
|   | | `-MemberExpr 0x196f21110e8 <col:9, col:19> 'const char' lvalue .little 0x196f20a9dc0
|   | |   `-DeclRefExpr 0x196f21110b0 <col:9> 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:1604:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:1604:11)' lvalue Var 0x196f20a9e78 'is_endian' 'const union (anonymous union at .//openssl//file_jk/after\crypto\modes\gcm128.c:1604:11)':'const union (anonymous at .//openssl//file_jk/after\crypto\modes\gcm128.c:1604:11)'
|   | `-CompoundStmt 0x196f2111400 <col:27, line:1630:5>
|   |   |-BinaryOperator 0x196f2111278 <line:1619:9, .//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x196f2111130 <.//openssl//file_jk/after\crypto\modes\gcm128.c:1619:9> 'u64':'unsigned long long' lvalue Var 0x196f20aa000 'alen' 'u64':'unsigned long long'
|   |   | `-CallExpr 0x196f2111250 <.//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|   |   |   |-ImplicitCastExpr 0x196f2111238 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x196f2111168 <col:25> 'unsigned long long (unsigned long long)' Function 0x196f2099e10 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|   |   |   `-CStyleCastExpr 0x196f2111210 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|   |   |     `-ImplicitCastExpr 0x196f21111f8 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |       `-ParenExpr 0x196f21111d8 <col:47, col:49> 'u64':'unsigned long long' lvalue
|   |   |         `-DeclRefExpr 0x196f2111188 <.//openssl//file_jk/after\crypto\modes\gcm128.c:1619:23> 'u64':'unsigned long long' lvalue Var 0x196f20aa000 'alen' 'u64':'unsigned long long'
|   |   `-BinaryOperator 0x196f21113e0 <line:1620:9, .//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|   |     |-DeclRefExpr 0x196f2111298 <.//openssl//file_jk/after\crypto\modes\gcm128.c:1620:9> 'u64':'unsigned long long' lvalue Var 0x196f2110fc0 'clen' 'u64':'unsigned long long'
|   |     `-CallExpr 0x196f21113b8 <.//openssl//file_jk/after\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|   |       |-ImplicitCastExpr 0x196f21113a0 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x196f21112d0 <col:25> 'unsigned long long (unsigned long long)' Function 0x196f2099e10 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|   |       `-CStyleCastExpr 0x196f2111378 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|   |         `-ImplicitCastExpr 0x196f2111360 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |           `-ParenExpr 0x196f2111340 <col:47, col:49> 'u64':'unsigned long long' lvalue
|   |             `-DeclRefExpr 0x196f21112f0 <.//openssl//file_jk/after\crypto\modes\gcm128.c:1620:23> 'u64':'unsigned long long' lvalue Var 0x196f2110fc0 'clen' 'u64':'unsigned long long'
|   `-IfStmt 0x196f21117e8 <line:1639:5, line:1642:17> has_else
|     |-OpaqueValueExpr 0x196f21117d0 <<invalid sloc>> '_Bool'
|     |-NullStmt 0x196f21117c8 <line:1640:9>
|     `-ReturnStmt 0x196f21117b8 <line:1642:9, col:17>
|       `-UnaryOperator 0x196f21117a0 <col:16, col:17> 'int' prefix '-'
|         `-IntegerLiteral 0x196f2111778 <col:17> 'int' 1
|-FunctionDecl 0x196f2111a78 <line:1645:1, line:1650:1> line:1645:6 invalid CRYPTO_gcm128_tag 'void (int *, unsigned char *, size_t)'
| |-ParmVarDecl 0x196f2111860 <col:24, col:40> col:40 invalid ctx 'int *'
| |-ParmVarDecl 0x196f21118e0 <col:45, col:60> col:60 used tag 'unsigned char *'
| |-ParmVarDecl 0x196f2111958 <col:65, col:72> col:72 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x196f2111ca8 <line:1646:1, line:1650:1>
|-FunctionDecl 0x196f2111e30 <line:1652:1, line:1660:1> line:1652:17 invalid CRYPTO_gcm128_new 'int *(void *, int)'
| |-ParmVarDecl 0x196f2111cd0 <col:35, col:41> col:41 used key 'void *'
| |-ParmVarDecl 0x196f2111d50 <col:46, col:57> col:57 invalid block 'int'
| `-CompoundStmt 0x196f210a0a8 <line:1653:1, line:1660:1>
`-FunctionDecl 0x196f210a198 <line:1662:1, line:1665:1> line:1662:6 invalid CRYPTO_gcm128_release 'void (int *)'
  |-ParmVarDecl 0x196f210a0d0 <col:28, col:44> col:44 invalid ctx 'int *'
  `-CompoundStmt 0x196f210a368 <line:1663:1, line:1665:1>
