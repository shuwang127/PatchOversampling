TranslationUnitDecl 0x28eff66de48 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x28eff66e6e0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x28eff66e3e0 '__int128'
|-TypedefDecl 0x28eff66e750 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x28eff66e400 'unsigned __int128'
|-TypedefDecl 0x28eff66ea88 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x28eff66e840 'struct __NSConstantString_tag'
|   `-Record 0x28eff66e7a8 '__NSConstantString_tag'
|-TypedefDecl 0x28eff66eaf8 <<invalid sloc>> <invalid sloc> implicit referenced size_t 'unsigned long long'
| `-BuiltinType 0x28eff66e020 'unsigned long long'
|-TypedefDecl 0x28eff66eb90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x28eff66eb50 'char *'
|   `-BuiltinType 0x28eff66dee0 'char'
|-TypedefDecl 0x28eff66ec00 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x28eff66eb50 'char *'
|   `-BuiltinType 0x28eff66dee0 'char'
|-VarDecl 0x28eff66ed40 <.//openssl//file_jk/after\crypto\modes\wrap128.c:20:1, line:22:1> line:20:28 used default_iv 'const unsigned char [8]' static cinit
| |-InitListExpr 0x28effa6cdf8 <col:43, line:22:1> 'const unsigned char [8]'
| | |-ImplicitCastExpr 0x28effa6ce38 <line:21:5> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28eff66edf0 <col:5> 'int' 166
| | |-ImplicitCastExpr 0x28effa6ce58 <col:11> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28eff66ee18 <col:11> 'int' 166
| | |-ImplicitCastExpr 0x28effa6ce80 <col:17> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28effa6cc60 <col:17> 'int' 166
| | |-ImplicitCastExpr 0x28effa6ceb8 <col:23> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28effa6cc88 <col:23> 'int' 166
| | |-ImplicitCastExpr 0x28effa6ced0 <col:29> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28effa6ccb0 <col:29> 'int' 166
| | |-ImplicitCastExpr 0x28effa6cf28 <col:35> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28effa6ccd8 <col:35> 'int' 166
| | |-ImplicitCastExpr 0x28effa6cf40 <col:41> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28effa6cd00 <col:41> 'int' 166
| | `-ImplicitCastExpr 0x28effa6cf58 <col:47> 'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x28effa6cd28 <col:47> 'int' 166
| `-FullComment 0x28effa7f6c8 <line:19:4, col:51>
|   `-ParagraphComment 0x28effa7f6a0 <col:4, col:51>
|     `-TextComment 0x28effa7f678 <col:4, col:51> Text=" RFC 3394 section 2.2.3.1 Default Initial Value "
|-VarDecl 0x28effa6d040 <line:25:1, line:27:1> line:25:28 used default_aiv 'const unsigned char [4]' static cinit
| |-InitListExpr 0x28effa6d1d0 <col:44, line:27:1> 'const unsigned char [4]'
| | |-ImplicitCastExpr 0x28effa6d210 <line:26:5> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28effa6d0a8 <col:5> 'int' 166
| | |-ImplicitCastExpr 0x28effa6d230 <col:11> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28effa6d0d0 <col:11> 'int' 89
| | |-ImplicitCastExpr 0x28effa6d258 <col:17> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28effa6d0f8 <col:17> 'int' 89
| | `-ImplicitCastExpr 0x28effa6d290 <col:23> 'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x28effa6d120 <col:23> 'int' 166
| `-FullComment 0x28effa7f778 <line:24:4, col:65>
|   `-ParagraphComment 0x28effa7f750 <col:4, col:65>
|     `-TextComment 0x28effa7f728 <col:4, col:65> Text=" RFC 5649 section 3 Alternative Initial Value 32-bit constant "
|-FunctionDecl 0x28effa6d808 <line:48:1, line:81:1> line:48:8 invalid CRYPTO_128_wrap 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
| |-ParmVarDecl 0x28effa6d3c8 <col:24, col:30> col:30 used key 'void *'
| |-ParmVarDecl 0x28effa6d470 <col:35, col:56> col:56 used iv 'const unsigned char *'
| |-ParmVarDecl 0x28effa6d520 <line:49:24, col:39> col:39 used out 'unsigned char *'
| |-ParmVarDecl 0x28effa6d5a0 <line:50:24, col:45> col:45 used in 'const unsigned char *'
| |-ParmVarDecl 0x28effa6d618 <col:49, col:56> col:56 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28effa6d698 <line:51:24, col:35> col:35 invalid block 'int'
| |-CompoundStmt 0x28effa71068 <line:52:1, line:81:1>
| | |-DeclStmt 0x28effa6db18 <line:53:5, col:32>
| | | |-VarDecl 0x28effa6d908 <col:5, col:20> col:20 used A 'unsigned char *'
| | | |-VarDecl 0x28effa6da10 <col:5, col:27> col:23 used B 'unsigned char [16]'
| | | `-VarDecl 0x28effa6da90 <col:5, col:31> col:31 used R 'unsigned char *'
| | |-DeclStmt 0x28effa6dcf8 <line:54:5, col:19>
| | | |-VarDecl 0x28effa6db40 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
| | | |-VarDecl 0x28effa6dbb8 <col:5, col:15> col:15 used j 'size_t':'unsigned long long'
| | | `-VarDecl 0x28effa6dc70 <col:5, col:18> col:18 used t 'size_t':'unsigned long long'
| | |-IfStmt 0x28effa6e048 <line:55:5, line:56:16>
| | | |-BinaryOperator 0x28effa6dfd8 <line:55:9, col:69> 'int' '||'
| | | | |-BinaryOperator 0x28effa6de98 <col:9, col:37> 'int' '||'
| | | | | |-ParenExpr 0x28effa6ddc0 <col:9, col:21> 'unsigned long long'
| | | | | | `-BinaryOperator 0x28effa6dda0 <col:10, col:18> 'unsigned long long' '&'
| | | | | |   |-ImplicitCastExpr 0x28effa6dd70 <col:10> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | |   | `-DeclRefExpr 0x28effa6dd10 <col:10> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa6d618 'inlen' 'size_t':'unsigned long long'
| | | | | |   `-ImplicitCastExpr 0x28effa6dd88 <col:18> 'unsigned long long' <IntegralCast>
| | | | | |     `-IntegerLiteral 0x28effa6dd48 <col:18> 'int' 7
| | | | | `-ParenExpr 0x28effa6de78 <col:26, col:37> 'int'
| | | | |   `-BinaryOperator 0x28effa6de58 <col:27, col:35> 'int' '<'
| | | | |     |-ImplicitCastExpr 0x28effa6de28 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0x28effa6dde0 <col:27> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa6d618 'inlen' 'size_t':'unsigned long long'
| | | | |     `-ImplicitCastExpr 0x28effa6de40 <col:35> 'unsigned long long' <IntegralCast>
| | | | |       `-IntegerLiteral 0x28effa6de00 <col:35> 'int' 16
| | | | `-ParenExpr 0x28effa6dfb8 <col:42, col:69> 'int'
| | | |   `-BinaryOperator 0x28effa6df98 <col:43, line:32:38> 'int' '>'
| | | |     |-ImplicitCastExpr 0x28effa6df68 <line:55:43> 'size_t':'unsigned long long' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x28effa6deb8 <col:43> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa6d618 'inlen' 'size_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x28effa6df80 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
| | | |       `-ParenExpr 0x28effa6df48 <col:28, col:38> 'unsigned long'
| | | |         `-BinaryOperator 0x28effa6df28 <col:29, col:36> 'unsigned long' '<<'
| | | |           |-IntegerLiteral 0x28effa6ded8 <col:29> 'unsigned long' 1
| | | |           `-IntegerLiteral 0x28effa6df00 <col:36> 'int' 31
| | | `-ReturnStmt 0x28effa6e038 <line:56:9, col:16>
| | |   `-ImplicitCastExpr 0x28effa6e020 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x28effa6dff8 <col:16> 'int' 0
| | |-BinaryOperator 0x28effa6e0e8 <line:57:5, col:9> 'unsigned char *' '='
| | | |-DeclRefExpr 0x28effa6e060 <col:5> 'unsigned char *' lvalue Var 0x28effa6d908 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x28effa6e0d0 <col:9> 'unsigned char *' <ArrayToPointerDecay>
| | |   `-DeclRefExpr 0x28effa6e098 <col:9> 'unsigned char [16]' lvalue Var 0x28effa6da10 'B' 'unsigned char [16]'
| | |-BinaryOperator 0x28effa6e180 <line:58:5, col:9> 'size_t':'unsigned long long' '='
| | | |-DeclRefExpr 0x28effa6e108 <col:5> 'size_t':'unsigned long long' lvalue Var 0x28effa6dc70 't' 'size_t':'unsigned long long'
| | | `-ImplicitCastExpr 0x28effa6e168 <col:9> 'size_t':'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28effa6e140 <col:9> 'int' 1
| | |-CallExpr 0x28effa6e5a0 <line:59:5, col:31> 'void *'
| | | |-ImplicitCastExpr 0x28effa6e588 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28effa6e400 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e210 'memmove' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28effa6e5d8 <col:13, col:19> 'void *' <BitCast>
| | | | `-BinaryOperator 0x28effa6e4b0 <col:13, col:19> 'unsigned char *' '+'
| | | |   |-ImplicitCastExpr 0x28effa6e498 <col:13> 'unsigned char *' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x28effa6e438 <col:13> 'unsigned char *' lvalue ParmVar 0x28effa6d520 'out' 'unsigned char *'
| | | |   `-IntegerLiteral 0x28effa6e470 <col:19> 'int' 8
| | | |-ImplicitCastExpr 0x28effa6e608 <col:22> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28effa6e5f0 <col:22> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa6e4d0 <col:22> 'const unsigned char *' lvalue ParmVar 0x28effa6d5a0 'in' 'const unsigned char *'
| | | `-ImplicitCastExpr 0x28effa6e620 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x28effa6e508 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa6d618 'inlen' 'size_t':'unsigned long long'
| | |-IfStmt 0x28effa6e718 <line:60:5, line:61:14>
| | | |-UnaryOperator 0x28effa6e688 <line:60:9, col:10> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x28effa6e670 <col:10> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa6e638 <col:10> 'const unsigned char *' lvalue ParmVar 0x28effa6d470 'iv' 'const unsigned char *'
| | | `-BinaryOperator 0x28effa6e6f8 <line:61:9, col:14> 'const unsigned char *' '='
| | |   |-DeclRefExpr 0x28effa6e6a0 <col:9> 'const unsigned char *' lvalue ParmVar 0x28effa6d470 'iv' 'const unsigned char *'
| | |   `-ImplicitCastExpr 0x28effa6e6e0 <col:14> 'const unsigned char *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x28effa6e6c0 <col:14> 'const unsigned char [8]' lvalue Var 0x28eff66ed40 'default_iv' 'const unsigned char [8]'
| | |-CallExpr 0x28effa6ea08 <line:63:5, col:20> 'void *'
| | | |-ImplicitCastExpr 0x28effa6e9f0 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28effa6e920 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28effa6ea58 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28effa6ea40 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa6e958 <col:12> 'unsigned char *' lvalue Var 0x28effa6d908 'A' 'unsigned char *'
| | | |-ImplicitCastExpr 0x28effa6ea88 <col:15> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28effa6ea70 <col:15> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa6e978 <col:15> 'const unsigned char *' lvalue ParmVar 0x28effa6d470 'iv' 'const unsigned char *'
| | | `-ImplicitCastExpr 0x28effa6eaa0 <col:19> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28effa6e998 <col:19> 'int' 8
| | |-ForStmt 0x28effa70dd8 <line:65:5, line:78:5>
| | | |-BinaryOperator 0x28effa6eb30 <line:65:10, col:14> 'size_t':'unsigned long long' '='
| | | | |-DeclRefExpr 0x28effa6eab8 <col:10> 'size_t':'unsigned long long' lvalue Var 0x28effa6dbb8 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x28effa6eb18 <col:14> 'size_t':'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28effa6eaf0 <col:14> 'int' 0
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x28effa6ebc8 <col:17, col:21> 'int' '<'
| | | | |-ImplicitCastExpr 0x28effa6eb98 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28effa6eb50 <col:17> 'size_t':'unsigned long long' lvalue Var 0x28effa6dbb8 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x28effa6ebb0 <col:21> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28effa6eb70 <col:21> 'int' 6
| | | |-UnaryOperator 0x28effa6ec08 <col:24, col:25> 'size_t':'unsigned long long' postfix '++'
| | | | `-DeclRefExpr 0x28effa6ebe8 <col:24> 'size_t':'unsigned long long' lvalue Var 0x28effa6dbb8 'j' 'size_t':'unsigned long long'
| | | `-CompoundStmt 0x28effa70db8 <col:29, line:78:5>
| | |   |-BinaryOperator 0x28effa67c90 <line:66:9, col:19> 'unsigned char *' '='
| | |   | |-DeclRefExpr 0x28effa6ec20 <col:9> 'unsigned char *' lvalue Var 0x28effa6da90 'R' 'unsigned char *'
| | |   | `-BinaryOperator 0x28effa67c70 <col:13, col:19> 'unsigned char *' '+'
| | |   |   |-ImplicitCastExpr 0x28effa67c58 <col:13> 'unsigned char *' <LValueToRValue>
| | |   |   | `-DeclRefExpr 0x28effa67c10 <col:13> 'unsigned char *' lvalue ParmVar 0x28effa6d520 'out' 'unsigned char *'
| | |   |   `-IntegerLiteral 0x28effa67c30 <col:19> 'int' 8
| | |   `-ForStmt 0x28effa70d80 <line:67:9, line:77:9>
| | |     |-BinaryOperator 0x28effa67d28 <line:67:14, col:18> 'size_t':'unsigned long long' '='
| | |     | |-DeclRefExpr 0x28effa67cb0 <col:14> 'size_t':'unsigned long long' lvalue Var 0x28effa6db40 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x28effa67d10 <col:18> 'size_t':'unsigned long long' <IntegralCast>
| | |     |   `-IntegerLiteral 0x28effa67ce8 <col:18> 'int' 0
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x28effa67db8 <col:21, col:25> 'int' '<'
| | |     | |-ImplicitCastExpr 0x28effa67d88 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x28effa67d48 <col:21> 'size_t':'unsigned long long' lvalue Var 0x28effa6db40 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x28effa67da0 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   `-DeclRefExpr 0x28effa67d68 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa6d618 'inlen' 'size_t':'unsigned long long'
| | |     |-BinaryOperator 0x28effa67f38 <col:32, col:50> 'unsigned char *' ','
| | |     | |-BinaryOperator 0x28effa67ea0 <col:32, col:41> 'size_t':'unsigned long long' ','
| | |     | | |-CompoundAssignOperator 0x28effa67e38 <col:32, col:37> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| | |     | | | |-DeclRefExpr 0x28effa67dd8 <col:32> 'size_t':'unsigned long long' lvalue Var 0x28effa6db40 'i' 'size_t':'unsigned long long'
| | |     | | | `-ImplicitCastExpr 0x28effa67e20 <col:37> 'unsigned long long' <IntegralCast>
| | |     | | |   `-IntegerLiteral 0x28effa67df8 <col:37> 'int' 8
| | |     | | `-UnaryOperator 0x28effa67e88 <col:40, col:41> 'size_t':'unsigned long long' postfix '++'
| | |     | |   `-DeclRefExpr 0x28effa67e68 <col:40> 'size_t':'unsigned long long' lvalue Var 0x28effa6dc70 't' 'size_t':'unsigned long long'
| | |     | `-CompoundAssignOperator 0x28effa67f08 <col:45, col:50> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
| | |     |   |-DeclRefExpr 0x28effa67ec0 <col:45> 'unsigned char *' lvalue Var 0x28effa6da90 'R' 'unsigned char *'
| | |     |   `-IntegerLiteral 0x28effa67ee0 <col:50> 'int' 8
| | |     `-CompoundStmt 0x28effa70d50 <col:53, line:77:9>
| | |       |-CallExpr 0x28effa68070 <line:68:13, col:31> 'void *'
| | |       | |-ImplicitCastExpr 0x28effa68058 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |       | | `-DeclRefExpr 0x28effa67f58 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |       | |-ImplicitCastExpr 0x28effa680a8 <col:20, col:24> 'void *' <BitCast>
| | |       | | `-BinaryOperator 0x28effa67fd8 <col:20, col:24> 'unsigned char *' '+'
| | |       | |   |-ImplicitCastExpr 0x28effa67fc0 <col:20> 'unsigned char *' <ArrayToPointerDecay>
| | |       | |   | `-DeclRefExpr 0x28effa67f78 <col:20> 'unsigned char [16]' lvalue Var 0x28effa6da10 'B' 'unsigned char [16]'
| | |       | |   `-IntegerLiteral 0x28effa67f98 <col:24> 'int' 8
| | |       | |-ImplicitCastExpr 0x28effa680d8 <col:27> 'const void *' <BitCast>
| | |       | | `-ImplicitCastExpr 0x28effa680c0 <col:27> 'unsigned char *' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x28effa67ff8 <col:27> 'unsigned char *' lvalue Var 0x28effa6da90 'R' 'unsigned char *'
| | |       | `-ImplicitCastExpr 0x28effa680f0 <col:30> 'unsigned long long' <IntegralCast>
| | |       |   `-IntegerLiteral 0x28effa68018 <col:30> 'int' 8
| | |       |-CompoundAssignOperator 0x28effa68330 <line:70:13, col:45> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       | |-ArraySubscriptExpr 0x28effa681e0 <col:13, col:16> 'unsigned char' lvalue
| | |       | | |-ImplicitCastExpr 0x28effa681c8 <col:13> 'unsigned char *' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x28effa68180 <col:13> 'unsigned char *' lvalue Var 0x28effa6d908 'A' 'unsigned char *'
| | |       | | `-IntegerLiteral 0x28effa681a0 <col:15> 'int' 7
| | |       | `-ImplicitCastExpr 0x28effa68318 <col:21, col:45> 'int' <IntegralCast>
| | |       |   `-CStyleCastExpr 0x28effa682f0 <col:21, col:45> 'unsigned char' <IntegralCast>
| | |       |     `-ParenExpr 0x28effa682d0 <col:36, col:45> 'unsigned long long'
| | |       |       `-BinaryOperator 0x28effa68278 <col:37, col:41> 'unsigned long long' '&'
| | |       |         |-ImplicitCastExpr 0x28effa68248 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |         | `-DeclRefExpr 0x28effa68200 <col:37> 'size_t':'unsigned long long' lvalue Var 0x28effa6dc70 't' 'size_t':'unsigned long long'
| | |       |         `-ImplicitCastExpr 0x28effa68260 <col:41> 'unsigned long long' <IntegralCast>
| | |       |           `-IntegerLiteral 0x28effa68220 <col:41> 'int' 255
| | |       |-IfStmt 0x28effa68af8 <line:71:13, line:75:13>
| | |       | |-BinaryOperator 0x28effa683d8 <line:71:17, col:21> 'int' '>'
| | |       | | |-ImplicitCastExpr 0x28effa683a8 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x28effa68360 <col:17> 'size_t':'unsigned long long' lvalue Var 0x28effa6dc70 't' 'size_t':'unsigned long long'
| | |       | | `-ImplicitCastExpr 0x28effa683c0 <col:21> 'unsigned long long' <IntegralCast>
| | |       | |   `-IntegerLiteral 0x28effa68380 <col:21> 'int' 255
| | |       | `-CompoundStmt 0x28effa68ad0 <col:27, line:75:13>
| | |       |   |-CompoundAssignOperator 0x28effa68610 <line:72:17, col:56> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x28effa68458 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x28effa68440 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x28effa683f8 <col:17> 'unsigned char *' lvalue Var 0x28effa6d908 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x28effa68418 <col:19> 'int' 6
| | |       |   | `-ImplicitCastExpr 0x28effa685f8 <col:25, col:56> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x28effa685d0 <col:25, col:56> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x28effa685b0 <col:40, col:56> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x28effa68558 <col:41, col:52> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x28effa684f8 <col:41, col:48> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x28effa684d8 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x28effa684c0 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x28effa68478 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28effa6dc70 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x28effa68498 <col:47> 'int' 8
| | |       |   |         `-ImplicitCastExpr 0x28effa68540 <col:52> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x28effa68518 <col:52> 'int' 255
| | |       |   |-CompoundAssignOperator 0x28effa68858 <line:73:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x28effa686a0 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x28effa68688 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x28effa68640 <col:17> 'unsigned char *' lvalue Var 0x28effa6d908 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x28effa68660 <col:19> 'int' 5
| | |       |   | `-ImplicitCastExpr 0x28effa68840 <col:25, col:57> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x28effa68818 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x28effa687f8 <col:40, col:57> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x28effa687a0 <col:41, col:53> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x28effa68740 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x28effa68720 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x28effa68708 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x28effa686c0 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28effa6dc70 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x28effa686e0 <col:47> 'int' 16
| | |       |   |         `-ImplicitCastExpr 0x28effa68788 <col:53> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x28effa68760 <col:53> 'int' 255
| | |       |   `-CompoundAssignOperator 0x28effa68aa0 <line:74:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |     |-ArraySubscriptExpr 0x28effa688e8 <col:17, col:20> 'unsigned char' lvalue
| | |       |     | |-ImplicitCastExpr 0x28effa688d0 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |     | | `-DeclRefExpr 0x28effa68888 <col:17> 'unsigned char *' lvalue Var 0x28effa6d908 'A' 'unsigned char *'
| | |       |     | `-IntegerLiteral 0x28effa688a8 <col:19> 'int' 4
| | |       |     `-ImplicitCastExpr 0x28effa68a88 <col:25, col:57> 'int' <IntegralCast>
| | |       |       `-CStyleCastExpr 0x28effa68a60 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |         `-ParenExpr 0x28effa68a40 <col:40, col:57> 'unsigned long long'
| | |       |           `-BinaryOperator 0x28effa689e8 <col:41, col:53> 'unsigned long long' '&'
| | |       |             |-ParenExpr 0x28effa68988 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |             | `-BinaryOperator 0x28effa68968 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |             |   |-ImplicitCastExpr 0x28effa68950 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |             |   | `-DeclRefExpr 0x28effa68908 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28effa6dc70 't' 'size_t':'unsigned long long'
| | |       |             |   `-IntegerLiteral 0x28effa68928 <col:47> 'int' 24
| | |       |             `-ImplicitCastExpr 0x28effa689d0 <col:53> 'unsigned long long' <IntegralCast>
| | |       |               `-IntegerLiteral 0x28effa689a8 <col:53> 'int' 255
| | |       `-CallExpr 0x28effa70cb8 <line:76:13, col:31> 'void *'
| | |         |-ImplicitCastExpr 0x28effa70ca0 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0x28effa68b10 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |         |-ImplicitCastExpr 0x28effa70d08 <col:20> 'void *' <BitCast>
| | |         | `-ImplicitCastExpr 0x28effa70cf0 <col:20> 'unsigned char *' <LValueToRValue>
| | |         |   `-DeclRefExpr 0x28effa68b30 <col:20> 'unsigned char *' lvalue Var 0x28effa6da90 'R' 'unsigned char *'
| | |         |-ImplicitCastExpr 0x28effa70d20 <col:23, col:27> 'const void *' <BitCast>
| | |         | `-BinaryOperator 0x28effa68bb0 <col:23, col:27> 'unsigned char *' '+'
| | |         |   |-ImplicitCastExpr 0x28effa68b98 <col:23> 'unsigned char *' <ArrayToPointerDecay>
| | |         |   | `-DeclRefExpr 0x28effa68b50 <col:23> 'unsigned char [16]' lvalue Var 0x28effa6da10 'B' 'unsigned char [16]'
| | |         |   `-IntegerLiteral 0x28effa68b70 <col:27> 'int' 8
| | |         `-ImplicitCastExpr 0x28effa70d38 <col:30> 'unsigned long long' <IntegralCast>
| | |           `-IntegerLiteral 0x28effa68bd0 <col:30> 'int' 8
| | |-CallExpr 0x28effa70ee0 <line:79:5, col:21> 'void *'
| | | |-ImplicitCastExpr 0x28effa70ec8 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28effa70e10 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28effa70f30 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28effa70f18 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa70e30 <col:12> 'unsigned char *' lvalue ParmVar 0x28effa6d520 'out' 'unsigned char *'
| | | |-ImplicitCastExpr 0x28effa70f60 <col:17> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28effa70f48 <col:17> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa70e50 <col:17> 'unsigned char *' lvalue Var 0x28effa6d908 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x28effa70f78 <col:20> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28effa70e70 <col:20> 'int' 8
| | `-ReturnStmt 0x28effa71028 <line:80:5, col:20>
| |   `-BinaryOperator 0x28effa71008 <col:12, col:20> 'unsigned long long' '+'
| |     |-ImplicitCastExpr 0x28effa70fd8 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x28effa70f90 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa6d618 'inlen' 'size_t':'unsigned long long'
| |     `-ImplicitCastExpr 0x28effa70ff0 <col:20> 'unsigned long long' <IntegralCast>
| |       `-IntegerLiteral 0x28effa70fb0 <col:20> 'int' 8
| `-FullComment 0x28effa7ae50 <line:34:4, line:46:59>
|   |-ParagraphComment 0x28effa7f818 <line:34:4, col:49>
|   | `-TextComment 0x28effa7f7f0 <col:4, col:49> Text=" Wrapping according to RFC 3394 section 2.2.1."
|   |-ParagraphComment 0x28effa7f860 <line:36:3, col:4>
|   | `-TextComment 0x28effa7f838 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7f880 <col:5, line:37:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x28effa7f928 <line:36:20, line:37:4>
|   |   |-TextComment 0x28effa7f8d8 <line:36:20, col:33> Text="    Key value."
|   |   `-TextComment 0x28effa7f8f8 <line:37:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7f948 <col:5, line:38:4> [in] explicitly Param="iv" ParamIndex=1
|   | `-ParagraphComment 0x28effa7a9c0 <line:37:19, line:38:4>
|   |   |-TextComment 0x28effa7a970 <line:37:19, col:73> Text="     IV value. Length = 8 bytes. NULL = use default_iv."
|   |   `-TextComment 0x28effa7a990 <line:38:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7a9e0 <col:5, line:39:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x28effa7aa80 <line:38:19, line:39:4>
|   |   |-TextComment 0x28effa7aa30 <line:38:19, col:60> Text="     Plaintext as n 64-bit blocks, n >= 2."
|   |   `-TextComment 0x28effa7aa50 <line:39:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7aaa0 <col:5, line:40:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x28effa7ab48 <line:39:22, line:40:4>
|   |   |-TextComment 0x28effa7aaf8 <line:39:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x28effa7ab18 <line:40:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7ab68 <col:5, line:43:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x28effa7ac60 <line:40:20, line:43:4>
|   |   |-TextComment 0x28effa7abc0 <line:40:20, col:77> Text="    Ciphertext. Minimal buffer length = (inlen + 8) bytes."
|   |   |-TextComment 0x28effa7abe0 <line:41:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x28effa7ac00 <line:42:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x28effa7ac20 <line:43:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7ac80 <col:5, line:44:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x28effa7ad28 <line:43:22, line:44:4>
|   |   |-TextComment 0x28effa7acd8 <line:43:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x28effa7acf8 <line:44:3, col:4> Text="  "
|   `-BlockCommandComment 0x28effa7ad48 <col:5, line:46:59> Name="return"
|     `-ParagraphComment 0x28effa7ade8 <line:44:12, line:46:59>
|       |-TextComment 0x28effa7ad70 <line:44:12, col:78> Text="            0 if inlen does not consist of n 64-bit blocks, n >= 2."
|       |-TextComment 0x28effa7ad90 <line:45:3, col:56> Text="                     or if inlen > CRYPTO128_WRAP_MAX."
|       `-TextComment 0x28effa7adb0 <line:46:3, col:59> Text="                     Output length if wrapping succeeded."
|-FunctionDecl 0x28effa6e210 <line:59:5> col:5 implicit used memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x28effa6e2b0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x28effa6e318 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x28effa6e380 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28effa6e730 <line:63:5> col:5 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x28effa6e7d0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x28effa6e838 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x28effa6e8a0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28effa714d8 <line:99:1, line:129:1> line:99:15 invalid crypto_128_unwrap_raw 'size_t (void *, unsigned char *, unsigned char *, const unsigned char *, size_t, int)' static
| |-ParmVarDecl 0x28effa710e8 <col:37, col:43> col:43 used key 'void *'
| |-ParmVarDecl 0x28effa71168 <col:48, col:63> col:63 used iv 'unsigned char *'
| |-ParmVarDecl 0x28effa711e8 <line:100:37, col:52> col:52 used out 'unsigned char *'
| |-ParmVarDecl 0x28effa71268 <line:101:37, col:58> col:58 used in 'const unsigned char *'
| |-ParmVarDecl 0x28effa712e0 <col:62, col:69> col:69 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28effa71360 <line:102:37, col:48> col:48 invalid block 'int'
| |-CompoundStmt 0x28effa73868 <line:103:1, line:129:1>
| | |-DeclStmt 0x28effa717b0 <line:104:5, col:32>
| | | |-VarDecl 0x28effa715d8 <col:5, col:20> col:20 used A 'unsigned char *'
| | | |-VarDecl 0x28effa716a8 <col:5, col:27> col:23 used B 'unsigned char [16]'
| | | `-VarDecl 0x28effa71728 <col:5, col:31> col:31 used R 'unsigned char *'
| | |-DeclStmt 0x28effa71950 <line:105:5, col:19>
| | | |-VarDecl 0x28effa717d8 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
| | | |-VarDecl 0x28effa71850 <col:5, col:15> col:15 used j 'size_t':'unsigned long long'
| | | `-VarDecl 0x28effa718c8 <col:5, col:18> col:18 used t 'size_t':'unsigned long long'
| | |-CompoundAssignOperator 0x28effa719e0 <line:106:5, col:14> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| | | |-DeclRefExpr 0x28effa71968 <col:5> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa712e0 'inlen' 'size_t':'unsigned long long'
| | | `-ImplicitCastExpr 0x28effa719c8 <col:14> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28effa719a0 <col:14> 'int' 8
| | |-IfStmt 0x28effa71d40 <line:107:5, line:108:16>
| | | |-BinaryOperator 0x28effa71cd0 <line:107:9, col:69> 'int' '||'
| | | | |-BinaryOperator 0x28effa71b80 <col:9, col:37> 'int' '||'
| | | | | |-ParenExpr 0x28effa71aa8 <col:9, col:21> 'unsigned long long'
| | | | | | `-BinaryOperator 0x28effa71a88 <col:10, col:18> 'unsigned long long' '&'
| | | | | |   |-ImplicitCastExpr 0x28effa71a58 <col:10> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | |   | `-DeclRefExpr 0x28effa71a10 <col:10> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa712e0 'inlen' 'size_t':'unsigned long long'
| | | | | |   `-ImplicitCastExpr 0x28effa71a70 <col:18> 'unsigned long long' <IntegralCast>
| | | | | |     `-IntegerLiteral 0x28effa71a30 <col:18> 'int' 7
| | | | | `-ParenExpr 0x28effa71b60 <col:26, col:37> 'int'
| | | | |   `-BinaryOperator 0x28effa71b40 <col:27, col:35> 'int' '<'
| | | | |     |-ImplicitCastExpr 0x28effa71b10 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0x28effa71ac8 <col:27> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa712e0 'inlen' 'size_t':'unsigned long long'
| | | | |     `-ImplicitCastExpr 0x28effa71b28 <col:35> 'unsigned long long' <IntegralCast>
| | | | |       `-IntegerLiteral 0x28effa71ae8 <col:35> 'int' 16
| | | | `-ParenExpr 0x28effa71cb0 <col:42, col:69> 'int'
| | | |   `-BinaryOperator 0x28effa71c80 <col:43, line:32:38> 'int' '>'
| | | |     |-ImplicitCastExpr 0x28effa71c50 <line:107:43> 'size_t':'unsigned long long' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x28effa71ba0 <col:43> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa712e0 'inlen' 'size_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x28effa71c68 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
| | | |       `-ParenExpr 0x28effa71c30 <col:28, col:38> 'unsigned long'
| | | |         `-BinaryOperator 0x28effa71c10 <col:29, col:36> 'unsigned long' '<<'
| | | |           |-IntegerLiteral 0x28effa71bc0 <col:29> 'unsigned long' 1
| | | |           `-IntegerLiteral 0x28effa71be8 <col:36> 'int' 31
| | | `-ReturnStmt 0x28effa71d30 <line:108:9, col:16>
| | |   `-ImplicitCastExpr 0x28effa71d18 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x28effa71cf0 <col:16> 'int' 0
| | |-BinaryOperator 0x28effa71de0 <line:109:5, col:9> 'unsigned char *' '='
| | | |-DeclRefExpr 0x28effa71d58 <col:5> 'unsigned char *' lvalue Var 0x28effa715d8 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x28effa71dc8 <col:9> 'unsigned char *' <ArrayToPointerDecay>
| | |   `-DeclRefExpr 0x28effa71d90 <col:9> 'unsigned char [16]' lvalue Var 0x28effa716a8 'B' 'unsigned char [16]'
| | |-BinaryOperator 0x28effa71f38 <line:110:5, col:24> 'size_t':'unsigned long long' '='
| | | |-DeclRefExpr 0x28effa71e00 <col:5> 'size_t':'unsigned long long' lvalue Var 0x28effa718c8 't' 'size_t':'unsigned long long'
| | | `-BinaryOperator 0x28effa71f18 <col:9, col:24> 'unsigned long long' '*'
| | |   |-ImplicitCastExpr 0x28effa71f00 <col:9> 'unsigned long long' <IntegralCast>
| | |   | `-IntegerLiteral 0x28effa71e38 <col:9> 'int' 6
| | |   `-ParenExpr 0x28effa71ee0 <col:13, col:24> 'size_t':'unsigned long long'
| | |     `-BinaryOperator 0x28effa71ec0 <col:14, col:23> 'size_t':'unsigned long long' '>>'
| | |       |-ImplicitCastExpr 0x28effa71ea8 <col:14> 'size_t':'unsigned long long' <LValueToRValue>
| | |       | `-DeclRefExpr 0x28effa71e60 <col:14> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa712e0 'inlen' 'size_t':'unsigned long long'
| | |       `-IntegerLiteral 0x28effa71e80 <col:23> 'int' 3
| | |-CallExpr 0x28effa72040 <line:111:5, col:20> 'void *'
| | | |-ImplicitCastExpr 0x28effa72028 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28effa71f58 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28effa72090 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28effa72078 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa71f78 <col:12> 'unsigned char *' lvalue Var 0x28effa715d8 'A' 'unsigned char *'
| | | |-ImplicitCastExpr 0x28effa720c0 <col:15> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28effa720a8 <col:15> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa71f98 <col:15> 'const unsigned char *' lvalue ParmVar 0x28effa71268 'in' 'const unsigned char *'
| | | `-ImplicitCastExpr 0x28effa720d8 <col:19> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28effa71fd0 <col:19> 'int' 8
| | |-CallExpr 0x28effa72230 <line:112:5, col:31> 'void *'
| | | |-ImplicitCastExpr 0x28effa72218 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28effa720f0 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e210 'memmove' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28effa72280 <col:13> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28effa72268 <col:13> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa72110 <col:13> 'unsigned char *' lvalue ParmVar 0x28effa711e8 'out' 'unsigned char *'
| | | |-ImplicitCastExpr 0x28effa72298 <col:18, col:23> 'const void *' <BitCast>
| | | | `-BinaryOperator 0x28effa721a8 <col:18, col:23> 'const unsigned char *' '+'
| | | |   |-ImplicitCastExpr 0x28effa72190 <col:18> 'const unsigned char *' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x28effa72148 <col:18> 'const unsigned char *' lvalue ParmVar 0x28effa71268 'in' 'const unsigned char *'
| | | |   `-IntegerLiteral 0x28effa72168 <col:23> 'int' 8
| | | `-ImplicitCastExpr 0x28effa722b0 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x28effa721c8 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa712e0 'inlen' 'size_t':'unsigned long long'
| | |-ForStmt 0x28effa73620 <line:113:5, line:126:5>
| | | |-BinaryOperator 0x28effa72340 <line:113:10, col:14> 'size_t':'unsigned long long' '='
| | | | |-DeclRefExpr 0x28effa722c8 <col:10> 'size_t':'unsigned long long' lvalue Var 0x28effa71850 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x28effa72328 <col:14> 'size_t':'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28effa72300 <col:14> 'int' 0
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x28effa723d8 <col:17, col:21> 'int' '<'
| | | | |-ImplicitCastExpr 0x28effa723a8 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28effa72360 <col:17> 'size_t':'unsigned long long' lvalue Var 0x28effa71850 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x28effa723c0 <col:21> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28effa72380 <col:21> 'int' 6
| | | |-UnaryOperator 0x28effa72418 <col:24, col:25> 'size_t':'unsigned long long' postfix '++'
| | | | `-DeclRefExpr 0x28effa723f8 <col:24> 'size_t':'unsigned long long' lvalue Var 0x28effa71850 'j' 'size_t':'unsigned long long'
| | | `-CompoundStmt 0x28effa73600 <col:29, line:126:5>
| | |   |-BinaryOperator 0x28effa72540 <line:114:9, col:27> 'unsigned char *' '='
| | |   | |-DeclRefExpr 0x28effa72430 <col:9> 'unsigned char *' lvalue Var 0x28effa71728 'R' 'unsigned char *'
| | |   | `-BinaryOperator 0x28effa72520 <col:13, col:27> 'unsigned char *' '-'
| | |   |   |-BinaryOperator 0x28effa724d8 <col:13, col:19> 'unsigned char *' '+'
| | |   |   | |-ImplicitCastExpr 0x28effa724a8 <col:13> 'unsigned char *' <LValueToRValue>
| | |   |   | | `-DeclRefExpr 0x28effa72468 <col:13> 'unsigned char *' lvalue ParmVar 0x28effa711e8 'out' 'unsigned char *'
| | |   |   | `-ImplicitCastExpr 0x28effa724c0 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
| | |   |   |   `-DeclRefExpr 0x28effa72488 <col:19> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa712e0 'inlen' 'size_t':'unsigned long long'
| | |   |   `-IntegerLiteral 0x28effa724f8 <col:27> 'int' 8
| | |   `-ForStmt 0x28effa735c8 <line:115:9, line:125:9>
| | |     |-BinaryOperator 0x28effa725d8 <line:115:14, col:18> 'size_t':'unsigned long long' '='
| | |     | |-DeclRefExpr 0x28effa72560 <col:14> 'size_t':'unsigned long long' lvalue Var 0x28effa717d8 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x28effa725c0 <col:18> 'size_t':'unsigned long long' <IntegralCast>
| | |     |   `-IntegerLiteral 0x28effa72598 <col:18> 'int' 0
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x28effa72668 <col:21, col:25> 'int' '<'
| | |     | |-ImplicitCastExpr 0x28effa72638 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x28effa725f8 <col:21> 'size_t':'unsigned long long' lvalue Var 0x28effa717d8 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x28effa72650 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   `-DeclRefExpr 0x28effa72618 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa712e0 'inlen' 'size_t':'unsigned long long'
| | |     |-BinaryOperator 0x28effa727e8 <col:32, col:50> 'unsigned char *' ','
| | |     | |-BinaryOperator 0x28effa72750 <col:32, col:41> 'size_t':'unsigned long long' ','
| | |     | | |-CompoundAssignOperator 0x28effa726e8 <col:32, col:37> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| | |     | | | |-DeclRefExpr 0x28effa72688 <col:32> 'size_t':'unsigned long long' lvalue Var 0x28effa717d8 'i' 'size_t':'unsigned long long'
| | |     | | | `-ImplicitCastExpr 0x28effa726d0 <col:37> 'unsigned long long' <IntegralCast>
| | |     | | |   `-IntegerLiteral 0x28effa726a8 <col:37> 'int' 8
| | |     | | `-UnaryOperator 0x28effa72738 <col:40, col:41> 'size_t':'unsigned long long' postfix '--'
| | |     | |   `-DeclRefExpr 0x28effa72718 <col:40> 'size_t':'unsigned long long' lvalue Var 0x28effa718c8 't' 'size_t':'unsigned long long'
| | |     | `-CompoundAssignOperator 0x28effa727b8 <col:45, col:50> 'unsigned char *' '-=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
| | |     |   |-DeclRefExpr 0x28effa72770 <col:45> 'unsigned char *' lvalue Var 0x28effa71728 'R' 'unsigned char *'
| | |     |   `-IntegerLiteral 0x28effa72790 <col:50> 'int' 8
| | |     `-CompoundStmt 0x28effa73598 <col:53, line:125:9>
| | |       |-CompoundAssignOperator 0x28effa729b8 <line:116:13, col:45> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       | |-ArraySubscriptExpr 0x28effa72868 <col:13, col:16> 'unsigned char' lvalue
| | |       | | |-ImplicitCastExpr 0x28effa72850 <col:13> 'unsigned char *' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x28effa72808 <col:13> 'unsigned char *' lvalue Var 0x28effa715d8 'A' 'unsigned char *'
| | |       | | `-IntegerLiteral 0x28effa72828 <col:15> 'int' 7
| | |       | `-ImplicitCastExpr 0x28effa729a0 <col:21, col:45> 'int' <IntegralCast>
| | |       |   `-CStyleCastExpr 0x28effa72978 <col:21, col:45> 'unsigned char' <IntegralCast>
| | |       |     `-ParenExpr 0x28effa72958 <col:36, col:45> 'unsigned long long'
| | |       |       `-BinaryOperator 0x28effa72900 <col:37, col:41> 'unsigned long long' '&'
| | |       |         |-ImplicitCastExpr 0x28effa728d0 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |         | `-DeclRefExpr 0x28effa72888 <col:37> 'size_t':'unsigned long long' lvalue Var 0x28effa718c8 't' 'size_t':'unsigned long long'
| | |       |         `-ImplicitCastExpr 0x28effa728e8 <col:41> 'unsigned long long' <IntegralCast>
| | |       |           `-IntegerLiteral 0x28effa728a8 <col:41> 'int' 255
| | |       |-IfStmt 0x28effa731a8 <line:117:13, line:121:13>
| | |       | |-BinaryOperator 0x28effa72a60 <line:117:17, col:21> 'int' '>'
| | |       | | |-ImplicitCastExpr 0x28effa72a30 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x28effa729e8 <col:17> 'size_t':'unsigned long long' lvalue Var 0x28effa718c8 't' 'size_t':'unsigned long long'
| | |       | | `-ImplicitCastExpr 0x28effa72a48 <col:21> 'unsigned long long' <IntegralCast>
| | |       | |   `-IntegerLiteral 0x28effa72a08 <col:21> 'int' 255
| | |       | `-CompoundStmt 0x28effa73180 <col:27, line:121:13>
| | |       |   |-CompoundAssignOperator 0x28effa72cc0 <line:118:17, col:56> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x28effa72ae0 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x28effa72ac8 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x28effa72a80 <col:17> 'unsigned char *' lvalue Var 0x28effa715d8 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x28effa72aa0 <col:19> 'int' 6
| | |       |   | `-ImplicitCastExpr 0x28effa72c80 <col:25, col:56> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x28effa72c58 <col:25, col:56> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x28effa72c38 <col:40, col:56> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x28effa72be0 <col:41, col:52> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x28effa72b80 <col:41, col:48> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x28effa72b60 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x28effa72b48 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x28effa72b00 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28effa718c8 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x28effa72b20 <col:47> 'int' 8
| | |       |   |         `-ImplicitCastExpr 0x28effa72bc8 <col:52> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x28effa72ba0 <col:52> 'int' 255
| | |       |   |-CompoundAssignOperator 0x28effa72f08 <line:119:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x28effa72d50 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x28effa72d38 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x28effa72cf0 <col:17> 'unsigned char *' lvalue Var 0x28effa715d8 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x28effa72d10 <col:19> 'int' 5
| | |       |   | `-ImplicitCastExpr 0x28effa72ef0 <col:25, col:57> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x28effa72ec8 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x28effa72ea8 <col:40, col:57> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x28effa72e50 <col:41, col:53> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x28effa72df0 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x28effa72dd0 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x28effa72db8 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x28effa72d70 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28effa718c8 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x28effa72d90 <col:47> 'int' 16
| | |       |   |         `-ImplicitCastExpr 0x28effa72e38 <col:53> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x28effa72e10 <col:53> 'int' 255
| | |       |   `-CompoundAssignOperator 0x28effa73150 <line:120:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |     |-ArraySubscriptExpr 0x28effa72f98 <col:17, col:20> 'unsigned char' lvalue
| | |       |     | |-ImplicitCastExpr 0x28effa72f80 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |     | | `-DeclRefExpr 0x28effa72f38 <col:17> 'unsigned char *' lvalue Var 0x28effa715d8 'A' 'unsigned char *'
| | |       |     | `-IntegerLiteral 0x28effa72f58 <col:19> 'int' 4
| | |       |     `-ImplicitCastExpr 0x28effa73138 <col:25, col:57> 'int' <IntegralCast>
| | |       |       `-CStyleCastExpr 0x28effa73110 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |         `-ParenExpr 0x28effa730f0 <col:40, col:57> 'unsigned long long'
| | |       |           `-BinaryOperator 0x28effa73098 <col:41, col:53> 'unsigned long long' '&'
| | |       |             |-ParenExpr 0x28effa73038 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |             | `-BinaryOperator 0x28effa73018 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |             |   |-ImplicitCastExpr 0x28effa73000 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |             |   | `-DeclRefExpr 0x28effa72fb8 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28effa718c8 't' 'size_t':'unsigned long long'
| | |       |             |   `-IntegerLiteral 0x28effa72fd8 <col:47> 'int' 24
| | |       |             `-ImplicitCastExpr 0x28effa73080 <col:53> 'unsigned long long' <IntegralCast>
| | |       |               `-IntegerLiteral 0x28effa73058 <col:53> 'int' 255
| | |       |-CallExpr 0x28effa732d8 <line:122:13, col:31> 'void *'
| | |       | |-ImplicitCastExpr 0x28effa732c0 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |       | | `-DeclRefExpr 0x28effa731c0 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |       | |-ImplicitCastExpr 0x28effa73310 <col:20, col:24> 'void *' <BitCast>
| | |       | | `-BinaryOperator 0x28effa73240 <col:20, col:24> 'unsigned char *' '+'
| | |       | |   |-ImplicitCastExpr 0x28effa73228 <col:20> 'unsigned char *' <ArrayToPointerDecay>
| | |       | |   | `-DeclRefExpr 0x28effa731e0 <col:20> 'unsigned char [16]' lvalue Var 0x28effa716a8 'B' 'unsigned char [16]'
| | |       | |   `-IntegerLiteral 0x28effa73200 <col:24> 'int' 8
| | |       | |-ImplicitCastExpr 0x28effa73340 <col:27> 'const void *' <BitCast>
| | |       | | `-ImplicitCastExpr 0x28effa73328 <col:27> 'unsigned char *' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x28effa73260 <col:27> 'unsigned char *' lvalue Var 0x28effa71728 'R' 'unsigned char *'
| | |       | `-ImplicitCastExpr 0x28effa73358 <col:30> 'unsigned long long' <IntegralCast>
| | |       |   `-IntegerLiteral 0x28effa73280 <col:30> 'int' 8
| | |       `-CallExpr 0x28effa73500 <line:124:13, col:31> 'void *'
| | |         |-ImplicitCastExpr 0x28effa734e8 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0x28effa733e8 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |         |-ImplicitCastExpr 0x28effa73550 <col:20> 'void *' <BitCast>
| | |         | `-ImplicitCastExpr 0x28effa73538 <col:20> 'unsigned char *' <LValueToRValue>
| | |         |   `-DeclRefExpr 0x28effa73408 <col:20> 'unsigned char *' lvalue Var 0x28effa71728 'R' 'unsigned char *'
| | |         |-ImplicitCastExpr 0x28effa73568 <col:23, col:27> 'const void *' <BitCast>
| | |         | `-BinaryOperator 0x28effa73488 <col:23, col:27> 'unsigned char *' '+'
| | |         |   |-ImplicitCastExpr 0x28effa73470 <col:23> 'unsigned char *' <ArrayToPointerDecay>
| | |         |   | `-DeclRefExpr 0x28effa73428 <col:23> 'unsigned char [16]' lvalue Var 0x28effa716a8 'B' 'unsigned char [16]'
| | |         |   `-IntegerLiteral 0x28effa73448 <col:27> 'int' 8
| | |         `-ImplicitCastExpr 0x28effa73580 <col:30> 'unsigned long long' <IntegralCast>
| | |           `-IntegerLiteral 0x28effa734a8 <col:30> 'int' 8
| | |-CallExpr 0x28effa73740 <line:127:5, col:20> 'void *'
| | | |-ImplicitCastExpr 0x28effa73728 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28effa73658 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28effa73790 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28effa73778 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa73678 <col:12> 'unsigned char *' lvalue ParmVar 0x28effa71168 'iv' 'unsigned char *'
| | | |-ImplicitCastExpr 0x28effa737c0 <col:16> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28effa737a8 <col:16> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa736b0 <col:16> 'unsigned char *' lvalue Var 0x28effa715d8 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x28effa737d8 <col:19> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28effa736d0 <col:19> 'int' 8
| | `-ReturnStmt 0x28effa73828 <line:128:5, col:12>
| |   `-ImplicitCastExpr 0x28effa73810 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
| |     `-DeclRefExpr 0x28effa737f0 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa712e0 'inlen' 'size_t':'unsigned long long'
| `-FullComment 0x28effa7b638 <line:83:4, line:97:47>
|   |-ParagraphComment 0x28effa7afa8 <line:83:4, line:84:58>
|   | |-TextComment 0x28effa7af58 <line:83:4, col:61> Text=" Unwrapping according to RFC 3394 section 2.2.2 steps 1-2."
|   | `-TextComment 0x28effa7af78 <line:84:3, col:58> Text="  The IV check (step 3) is responsibility of the caller."
|   |-ParagraphComment 0x28effa7aff0 <line:86:3, col:4>
|   | `-TextComment 0x28effa7afc8 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7b010 <col:5, line:87:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x28effa7b0b8 <line:86:20, line:87:4>
|   |   |-TextComment 0x28effa7b068 <line:86:20, col:33> Text="    Key value."
|   |   `-TextComment 0x28effa7b088 <line:87:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7b0d8 <col:5, line:88:4> [out] explicitly Param="iv" ParamIndex=1
|   | `-ParagraphComment 0x28effa7b180 <line:87:19, line:88:4>
|   |   |-TextComment 0x28effa7b130 <line:87:19, col:75> Text="     Unchecked IV value. Minimal buffer length = 8 bytes."
|   |   `-TextComment 0x28effa7b150 <line:88:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7b1a0 <col:5, line:92:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x28effa7b2c0 <line:88:20, line:92:4>
|   |   |-TextComment 0x28effa7b1f8 <line:88:20, col:44> Text="    Plaintext without IV."
|   |   |-TextComment 0x28effa7b218 <line:89:3, col:65> Text="                     Minimal buffer length = (inlen - 8) bytes."
|   |   |-TextComment 0x28effa7b238 <line:90:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x28effa7b258 <line:91:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x28effa7b278 <line:92:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7b2e0 <col:5, line:93:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x28effa7b380 <line:92:19, line:93:4>
|   |   |-TextComment 0x28effa7b330 <line:92:19, col:53> Text="     Ciphertext as n 64-bit blocks."
|   |   `-TextComment 0x28effa7b350 <line:93:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7b3a0 <col:5, line:94:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x28effa7b448 <line:93:22, line:94:4>
|   |   |-TextComment 0x28effa7b3f8 <line:93:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x28effa7b418 <line:94:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7b468 <col:5, line:95:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x28effa7b510 <line:94:22, line:95:4>
|   |   |-TextComment 0x28effa7b4c0 <line:94:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x28effa7b4e0 <line:95:3, col:4> Text="  "
|   `-BlockCommandComment 0x28effa7b530 <col:5, line:97:47> Name="return"
|     `-ParagraphComment 0x28effa7b5d0 <line:95:12, line:97:47>
|       |-TextComment 0x28effa7b558 <line:95:12, col:74> Text="            0 if inlen is out of range [24, CRYPTO128_WRAP_MAX]"
|       |-TextComment 0x28effa7b578 <line:96:3, col:58> Text="                     or if inlen is not a multiple of 8."
|       `-TextComment 0x28effa7b598 <line:97:3, col:47> Text="                     Output length otherwise."
|-FunctionDecl 0x28effa73c18 <line:150:1, line:168:1> line:150:8 invalid CRYPTO_128_unwrap 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
| |-ParmVarDecl 0x28effa738e8 <col:26, col:32> col:32 used key 'void *'
| |-ParmVarDecl 0x28effa73968 <col:37, col:58> col:58 used iv 'const unsigned char *'
| |-ParmVarDecl 0x28effa739e8 <line:151:26, col:41> col:41 used out 'unsigned char *'
| |-ParmVarDecl 0x28effa73a68 <col:46, col:67> col:67 used in 'const unsigned char *'
| |-ParmVarDecl 0x28effa73ae0 <line:152:26, col:33> col:33 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28effa73b60 <col:40, col:51> col:51 invalid block 'int'
| |-CompoundStmt 0x28effa79370 <line:153:1, line:168:1>
| | |-DeclStmt 0x28effa78a10 <line:154:5, col:15>
| | | `-VarDecl 0x28effa789a8 <col:5, col:12> col:12 used ret 'size_t':'unsigned long long'
| | |-DeclStmt 0x28effa78af8 <line:155:5, col:28>
| | | `-VarDecl 0x28effa78a90 <col:5, col:27> col:19 used got_iv 'unsigned char [8]'
| | |-IfStmt 0x28effa78d48 <line:158:5, line:159:16>
| | | |-BinaryOperator 0x28effa78cd8 <line:158:9, col:16> 'int' '=='
| | | | |-ImplicitCastExpr 0x28effa78ca8 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28effa78c60 <col:9> 'size_t':'unsigned long long' lvalue Var 0x28effa789a8 'ret' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x28effa78cc0 <col:16> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28effa78c80 <col:16> 'int' 0
| | | `-ReturnStmt 0x28effa78d38 <line:159:9, col:16>
| | |   `-ImplicitCastExpr 0x28effa78d20 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x28effa78cf8 <col:16> 'int' 0
| | |-IfStmt 0x28effa78e40 <line:161:5, line:162:14>
| | | |-UnaryOperator 0x28effa78db0 <line:161:9, col:10> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x28effa78d98 <col:10> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa78d60 <col:10> 'const unsigned char *' lvalue ParmVar 0x28effa73968 'iv' 'const unsigned char *'
| | | `-BinaryOperator 0x28effa78e20 <line:162:9, col:14> 'const unsigned char *' '='
| | |   |-DeclRefExpr 0x28effa78dc8 <col:9> 'const unsigned char *' lvalue ParmVar 0x28effa73968 'iv' 'const unsigned char *'
| | |   `-ImplicitCastExpr 0x28effa78e08 <col:14> 'const unsigned char *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x28effa78de8 <col:14> 'const unsigned char [8]' lvalue Var 0x28eff66ed40 'default_iv' 'const unsigned char [8]'
| | |-IfStmt 0x28effa792e0 <line:163:5, line:166:5>
| | | |-CallExpr 0x28effa79040 <line:163:9, col:36> 'int'
| | | | |-ImplicitCastExpr 0x28effa79028 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | | | | `-DeclRefExpr 0x28effa78f78 <col:9> 'int ()' Function 0x28effa78eb0 'CRYPTO_memcmp' 'int ()'
| | | | |-ImplicitCastExpr 0x28effa79078 <col:23> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x28effa78f98 <col:23> 'unsigned char [8]' lvalue Var 0x28effa78a90 'got_iv' 'unsigned char [8]'
| | | | |-ImplicitCastExpr 0x28effa79090 <col:31> 'const unsigned char *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28effa78fb8 <col:31> 'const unsigned char *' lvalue ParmVar 0x28effa73968 'iv' 'const unsigned char *'
| | | | `-IntegerLiteral 0x28effa78fd8 <col:35> 'int' 8
| | | `-CompoundStmt 0x28effa792c0 <col:39, line:166:5>
| | |   |-CallExpr 0x28effa79210 <line:164:9, col:33> 'int'
| | |   | |-ImplicitCastExpr 0x28effa791f8 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x28effa79198 <col:9> 'int ()' Function 0x28effa790d0 'OPENSSL_cleanse' 'int ()'
| | |   | |-ImplicitCastExpr 0x28effa79240 <col:25> 'unsigned char *' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x28effa791b8 <col:25> 'unsigned char *' lvalue ParmVar 0x28effa739e8 'out' 'unsigned char *'
| | |   | `-ImplicitCastExpr 0x28effa79258 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x28effa791d8 <col:30> 'size_t':'unsigned long long' lvalue Var 0x28effa789a8 'ret' 'size_t':'unsigned long long'
| | |   `-ReturnStmt 0x28effa792b0 <line:165:9, col:16>
| | |     `-ImplicitCastExpr 0x28effa79298 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28effa79270 <col:16> 'int' 0
| | `-ReturnStmt 0x28effa79330 <line:167:5, col:12>
| |   `-ImplicitCastExpr 0x28effa79318 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
| |     `-DeclRefExpr 0x28effa792f8 <col:12> 'size_t':'unsigned long long' lvalue Var 0x28effa789a8 'ret' 'size_t':'unsigned long long'
| `-FullComment 0x28effa77e00 <line:131:4, line:148:47>
|   |-ParagraphComment 0x28effa7b728 <line:131:4, line:133:22>
|   | |-TextComment 0x28effa7b6b0 <line:131:4, col:75> Text=" Unwrapping according to RFC 3394 section 2.2.2, including the IV check."
|   | |-TextComment 0x28effa7b6d0 <line:132:3, col:75> Text="  The first block of plaintext has to match the supplied IV, otherwise an"
|   | `-TextComment 0x28effa7b6f0 <line:133:3, col:22> Text="  error is returned."
|   |-ParagraphComment 0x28effa7b770 <line:135:3, col:4>
|   | `-TextComment 0x28effa7b748 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7b790 <col:5, line:136:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x28effa7b838 <line:135:20, line:136:4>
|   |   |-TextComment 0x28effa7b7e8 <line:135:20, col:33> Text="    Key value."
|   |   `-TextComment 0x28effa7b808 <line:136:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa7b858 <col:5, line:138:4> [out] explicitly Param="iv" ParamIndex=1
|   | `-ParagraphComment 0x28effa7b928 <line:136:19, line:138:4>
|   |   |-TextComment 0x28effa7b8b0 <line:136:19, col:67> Text="     IV value to match against. Length = 8 bytes."
|   |   |-TextComment 0x28effa7b8d0 <line:137:3, col:45> Text="                     NULL = use default_iv."
|   |   `-TextComment 0x28effa7b8f0 <line:138:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa77940 <col:5, line:142:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x28effa77a60 <line:138:20, line:142:4>
|   |   |-TextComment 0x28effa77998 <line:138:20, col:44> Text="    Plaintext without IV."
|   |   |-TextComment 0x28effa779b8 <line:139:3, col:65> Text="                     Minimal buffer length = (inlen - 8) bytes."
|   |   |-TextComment 0x28effa779d8 <line:140:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x28effa779f8 <line:141:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x28effa77a18 <line:142:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa77a80 <col:5, line:143:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x28effa77b20 <line:142:19, line:143:4>
|   |   |-TextComment 0x28effa77ad0 <line:142:19, col:53> Text="     Ciphertext as n 64-bit blocks."
|   |   `-TextComment 0x28effa77af0 <line:143:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa77b40 <col:5, line:144:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x28effa77be8 <line:143:22, line:144:4>
|   |   |-TextComment 0x28effa77b98 <line:143:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x28effa77bb8 <line:144:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa77c08 <col:5, line:145:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x28effa77cb0 <line:144:22, line:145:4>
|   |   |-TextComment 0x28effa77c60 <line:144:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x28effa77c80 <line:145:3, col:4> Text="  "
|   `-BlockCommandComment 0x28effa77cd0 <col:5, line:148:47> Name="return"
|     `-ParagraphComment 0x28effa77d98 <line:145:12, line:148:47>
|       |-TextComment 0x28effa77cf8 <line:145:12, col:74> Text="            0 if inlen is out of range [24, CRYPTO128_WRAP_MAX]"
|       |-TextComment 0x28effa77d18 <line:146:3, col:57> Text="                     or if inlen is not a multiple of 8"
|       |-TextComment 0x28effa77d38 <line:147:3, col:61> Text="                     or if IV doesn't match expected value."
|       `-TextComment 0x28effa77d58 <line:148:3, col:47> Text="                     Output length otherwise."
|-FunctionDecl 0x28effa796f8 <line:183:1, line:234:1> line:183:8 invalid CRYPTO_128_wrap_pad 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
| |-ParmVarDecl 0x28effa793c8 <col:28, col:34> col:34 used key 'void *'
| |-ParmVarDecl 0x28effa79448 <col:39, col:60> col:60 used icv 'const unsigned char *'
| |-ParmVarDecl 0x28effa794c8 <line:184:28, col:43> col:43 used out 'unsigned char *'
| |-ParmVarDecl 0x28effa79548 <line:185:28, col:49> col:49 used in 'const unsigned char *'
| |-ParmVarDecl 0x28effa795c0 <col:53, col:60> col:60 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28effa79640 <line:186:28, col:39> col:39 invalid block 'int'
| |-CompoundStmt 0x28effa7d918 <line:187:1, line:234:1>
| | |-DeclStmt 0x28effa7b9b8 <line:194:5, col:49>
| | | `-VarDecl 0x28effa797f0 <col:5, col:48> col:18 used blocks_padded 'const size_t':'const unsigned long long' cinit
| | |   `-BinaryOperator 0x28effa7b998 <col:34, col:48> 'unsigned long long' '/'
| | |     |-ParenExpr 0x28effa79908 <col:34, col:44> 'unsigned long long'
| | |     | `-BinaryOperator 0x28effa798e8 <col:35, col:43> 'unsigned long long' '+'
| | |     |   |-ImplicitCastExpr 0x28effa798b8 <col:35> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x28effa79858 <col:35> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | |     |   `-ImplicitCastExpr 0x28effa798d0 <col:43> 'unsigned long long' <IntegralCast>
| | |     |     `-IntegerLiteral 0x28effa79890 <col:43> 'int' 7
| | |     `-ImplicitCastExpr 0x28effa7b980 <col:48> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28effa79928 <col:48> 'int' 8
| | |-DeclStmt 0x28effa7bb40 <line:195:5, col:48>
| | | `-VarDecl 0x28effa7b9e0 <col:5, col:47> col:18 used padded_len 'const size_t':'const unsigned long long' cinit
| | |   `-BinaryOperator 0x28effa7bad8 <col:31, col:47> 'unsigned long long' '*'
| | |     |-ImplicitCastExpr 0x28effa7baa8 <col:31> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | `-DeclRefExpr 0x28effa7ba48 <col:31> 'const size_t':'const unsigned long long' lvalue Var 0x28effa797f0 'blocks_padded' 'const size_t':'const unsigned long long'
| | |     `-ImplicitCastExpr 0x28effa7bac0 <col:47> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28effa7ba80 <col:47> 'int' 8
| | |-DeclStmt 0x28effa7bcc0 <line:196:5, col:50>
| | | `-VarDecl 0x28effa7bb68 <col:5, col:45> col:18 used padding_len 'const size_t':'const unsigned long long' cinit
| | |   `-BinaryOperator 0x28effa7bc58 <col:32, col:45> 'unsigned long long' '-'
| | |     |-ImplicitCastExpr 0x28effa7bc28 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | `-DeclRefExpr 0x28effa7bbd0 <col:32> 'const size_t':'const unsigned long long' lvalue Var 0x28effa7b9e0 'padded_len' 'const size_t':'const unsigned long long'
| | |     `-ImplicitCastExpr 0x28effa7bc40 <col:45> 'size_t':'unsigned long long' <LValueToRValue>
| | |       `-DeclRefExpr 0x28effa7bc08 <col:45> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | |-DeclStmt 0x28effa7bda8 <line:198:5, col:25>
| | | `-VarDecl 0x28effa7bd40 <col:5, col:24> col:19 used aiv 'unsigned char [8]'
| | |-DeclStmt 0x28effa7be40 <line:199:5, col:12>
| | | `-VarDecl 0x28effa7bdd8 <col:5, col:9> col:9 used ret 'int'
| | |-IfStmt 0x28effa7c060 <line:202:5, line:203:16>
| | | |-BinaryOperator 0x28effa7bff0 <line:202:9, line:32:38> 'int' '||'
| | | | |-BinaryOperator 0x28effa7bed0 <line:202:9, col:18> 'int' '=='
| | | | | |-ImplicitCastExpr 0x28effa7bea0 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | | `-DeclRefExpr 0x28effa7be58 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | | | | `-ImplicitCastExpr 0x28effa7beb8 <col:18> 'unsigned long long' <IntegralCast>
| | | | |   `-IntegerLiteral 0x28effa7be78 <col:18> 'int' 0
| | | | `-BinaryOperator 0x28effa7bfd0 <col:23, line:32:38> 'int' '>='
| | | |   |-ImplicitCastExpr 0x28effa7bfa0 <line:202:23> 'size_t':'unsigned long long' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x28effa7bef0 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | | |   `-ImplicitCastExpr 0x28effa7bfb8 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
| | | |     `-ParenExpr 0x28effa7bf80 <col:28, col:38> 'unsigned long'
| | | |       `-BinaryOperator 0x28effa7bf60 <col:29, col:36> 'unsigned long' '<<'
| | | |         |-IntegerLiteral 0x28effa7bf10 <col:29> 'unsigned long' 1
| | | |         `-IntegerLiteral 0x28effa7bf38 <col:36> 'int' 31
| | | `-ReturnStmt 0x28effa7c050 <line:203:9, col:16>
| | |   `-ImplicitCastExpr 0x28effa7c038 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x28effa7c010 <col:16> 'int' 0
| | |-IfStmt 0x28effa7c3f8 <line:206:5, line:209:27> has_else
| | | |-UnaryOperator 0x28effa7c0c8 <line:206:9, col:10> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x28effa7c0b0 <col:10> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28effa7c078 <col:10> 'const unsigned char *' lvalue ParmVar 0x28effa79448 'icv' 'const unsigned char *'
| | | |-CallExpr 0x28effa7c1c8 <line:207:9, col:35> 'void *'
| | | | |-ImplicitCastExpr 0x28effa7c1b0 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | | `-DeclRefExpr 0x28effa7c0e0 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | | |-ImplicitCastExpr 0x28effa7c218 <col:16> 'void *' <BitCast>
| | | | | `-ImplicitCastExpr 0x28effa7c200 <col:16> 'unsigned char *' <ArrayToPointerDecay>
| | | | |   `-DeclRefExpr 0x28effa7c100 <col:16> 'unsigned char [8]' lvalue Var 0x28effa7bd40 'aiv' 'unsigned char [8]'
| | | | |-ImplicitCastExpr 0x28effa7c248 <col:21> 'const void *' <BitCast>
| | | | | `-ImplicitCastExpr 0x28effa7c230 <col:21> 'const unsigned char *' <ArrayToPointerDecay>
| | | | |   `-DeclRefExpr 0x28effa7c138 <col:21> 'const unsigned char [4]' lvalue Var 0x28effa6d040 'default_aiv' 'const unsigned char [4]'
| | | | `-ImplicitCastExpr 0x28effa7c260 <col:34> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28effa7c158 <col:34> 'int' 4
| | | `-CallExpr 0x28effa7c348 <line:209:9, col:27> 'void *'
| | |   |-ImplicitCastExpr 0x28effa7c330 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x28effa7c278 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |   |-ImplicitCastExpr 0x28effa7c398 <col:16> 'void *' <BitCast>
| | |   | `-ImplicitCastExpr 0x28effa7c380 <col:16> 'unsigned char *' <ArrayToPointerDecay>
| | |   |   `-DeclRefExpr 0x28effa7c298 <col:16> 'unsigned char [8]' lvalue Var 0x28effa7bd40 'aiv' 'unsigned char [8]'
| | |   |-ImplicitCastExpr 0x28effa7c3c8 <col:21> 'const void *' <BitCast>
| | |   | `-ImplicitCastExpr 0x28effa7c3b0 <col:21> 'const unsigned char *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x28effa7c2b8 <col:21> 'const unsigned char *' lvalue ParmVar 0x28effa79448 'icv' 'const unsigned char *'
| | |   `-ImplicitCastExpr 0x28effa7c3e0 <col:26> 'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x28effa7c2d8 <col:26> 'int' 4
| | |-BinaryOperator 0x28effa7c5b8 <line:211:5, col:30> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x28effa7c480 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x28effa7c468 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x28effa7c420 <col:5> 'unsigned char [8]' lvalue Var 0x28effa7bd40 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x28effa7c440 <col:9> 'int' 4
| | | `-ImplicitCastExpr 0x28effa7c5a0 <col:14, col:30> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x28effa7c580 <col:14, col:30> 'unsigned long long' '&'
| | |     |-ParenExpr 0x28effa7c520 <col:14, col:26> 'size_t':'unsigned long long'
| | |     | `-BinaryOperator 0x28effa7c500 <col:15, col:24> 'size_t':'unsigned long long' '>>'
| | |     |   |-ImplicitCastExpr 0x28effa7c4e8 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x28effa7c4a0 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | |     |   `-IntegerLiteral 0x28effa7c4c0 <col:24> 'int' 24
| | |     `-ImplicitCastExpr 0x28effa7c568 <col:30> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28effa7c540 <col:30> 'int' 255
| | |-BinaryOperator 0x28effa7c770 <line:212:5, col:30> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x28effa7c638 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x28effa7c620 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x28effa7c5d8 <col:5> 'unsigned char [8]' lvalue Var 0x28effa7bd40 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x28effa7c5f8 <col:9> 'int' 5
| | | `-ImplicitCastExpr 0x28effa7c758 <col:14, col:30> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x28effa7c738 <col:14, col:30> 'unsigned long long' '&'
| | |     |-ParenExpr 0x28effa7c6d8 <col:14, col:26> 'size_t':'unsigned long long'
| | |     | `-BinaryOperator 0x28effa7c6b8 <col:15, col:24> 'size_t':'unsigned long long' '>>'
| | |     |   |-ImplicitCastExpr 0x28effa7c6a0 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x28effa7c658 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | |     |   `-IntegerLiteral 0x28effa7c678 <col:24> 'int' 16
| | |     `-ImplicitCastExpr 0x28effa7c720 <col:30> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28effa7c6f8 <col:30> 'int' 255
| | |-BinaryOperator 0x28effa7c928 <line:213:5, col:29> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x28effa7c7f0 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x28effa7c7d8 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x28effa7c790 <col:5> 'unsigned char [8]' lvalue Var 0x28effa7bd40 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x28effa7c7b0 <col:9> 'int' 6
| | | `-ImplicitCastExpr 0x28effa7c910 <col:14, col:29> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x28effa7c8f0 <col:14, col:29> 'unsigned long long' '&'
| | |     |-ParenExpr 0x28effa7c890 <col:14, col:25> 'size_t':'unsigned long long'
| | |     | `-BinaryOperator 0x28effa7c870 <col:15, col:24> 'size_t':'unsigned long long' '>>'
| | |     |   |-ImplicitCastExpr 0x28effa7c858 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x28effa7c810 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | |     |   `-IntegerLiteral 0x28effa7c830 <col:24> 'int' 8
| | |     `-ImplicitCastExpr 0x28effa7c8d8 <col:29> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28effa7c8b0 <col:29> 'int' 255
| | |-BinaryOperator 0x28effa7caa0 <line:214:5, col:22> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x28effa7c9d0 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x28effa7c9b8 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x28effa7c948 <col:5> 'unsigned char [8]' lvalue Var 0x28effa7bd40 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x28effa7c990 <col:9> 'int' 7
| | | `-ImplicitCastExpr 0x28effa7ca88 <col:14, col:22> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x28effa7ca68 <col:14, col:22> 'unsigned long long' '&'
| | |     |-ImplicitCastExpr 0x28effa7ca38 <col:14> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | `-DeclRefExpr 0x28effa7c9f0 <col:14> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | |     `-ImplicitCastExpr 0x28effa7ca50 <col:22> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28effa7ca10 <col:22> 'int' 255
| | |-IfStmt 0x28effa7d860 <line:216:5, line:231:5> has_else
| | | |-BinaryOperator 0x28effa7cb38 <line:216:9, col:23> 'int' '=='
| | | | |-ImplicitCastExpr 0x28effa7cb08 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28effa7cac0 <col:9> 'const size_t':'const unsigned long long' lvalue Var 0x28effa7b9e0 'padded_len' 'const size_t':'const unsigned long long'
| | | | `-ImplicitCastExpr 0x28effa7cb20 <col:23> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28effa7cae0 <col:23> 'int' 8
| | | |-CompoundStmt 0x28effa7d430 <col:26, line:227:5>
| | | | |-CallExpr 0x28effa7ccb0 <line:222:9, col:35> 'void *'
| | | | | |-ImplicitCastExpr 0x28effa7cc98 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | | | `-DeclRefExpr 0x28effa7cb58 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e210 'memmove' 'void *(void *, const void *, unsigned long long)'
| | | | | |-ImplicitCastExpr 0x28effa7cce8 <col:17, col:23> 'void *' <BitCast>
| | | | | | `-BinaryOperator 0x28effa7cbf0 <col:17, col:23> 'unsigned char *' '+'
| | | | | |   |-ImplicitCastExpr 0x28effa7cbd8 <col:17> 'unsigned char *' <LValueToRValue>
| | | | | |   | `-DeclRefExpr 0x28effa7cb78 <col:17> 'unsigned char *' lvalue ParmVar 0x28effa794c8 'out' 'unsigned char *'
| | | | | |   `-IntegerLiteral 0x28effa7cbb0 <col:23> 'int' 8
| | | | | |-ImplicitCastExpr 0x28effa7cd18 <col:26> 'const void *' <BitCast>
| | | | | | `-ImplicitCastExpr 0x28effa7cd00 <col:26> 'const unsigned char *' <LValueToRValue>
| | | | | |   `-DeclRefExpr 0x28effa7cc10 <col:26> 'const unsigned char *' lvalue ParmVar 0x28effa79548 'in' 'const unsigned char *'
| | | | | `-ImplicitCastExpr 0x28effa7cd30 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x28effa7cc48 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | | | |-CallExpr 0x28effa7ce18 <line:223:9, col:27> 'void *'
| | | | | |-ImplicitCastExpr 0x28effa7ce00 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | | | `-DeclRefExpr 0x28effa7cd48 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | | | |-ImplicitCastExpr 0x28effa7ce68 <col:16> 'void *' <BitCast>
| | | | | | `-ImplicitCastExpr 0x28effa7ce50 <col:16> 'unsigned char *' <LValueToRValue>
| | | | | |   `-DeclRefExpr 0x28effa7cd68 <col:16> 'unsigned char *' lvalue ParmVar 0x28effa794c8 'out' 'unsigned char *'
| | | | | |-ImplicitCastExpr 0x28effa7ce98 <col:21> 'const void *' <BitCast>
| | | | | | `-ImplicitCastExpr 0x28effa7ce80 <col:21> 'unsigned char *' <ArrayToPointerDecay>
| | | | | |   `-DeclRefExpr 0x28effa7cd88 <col:21> 'unsigned char [8]' lvalue Var 0x28effa7bd40 'aiv' 'unsigned char [8]'
| | | | | `-ImplicitCastExpr 0x28effa7ceb0 <col:26> 'unsigned long long' <IntegralCast>
| | | | |   `-IntegerLiteral 0x28effa7cda8 <col:26> 'int' 8
| | | | |-CallExpr 0x28effa7d2d0 <line:224:9, col:47> 'void *'
| | | | | |-ImplicitCastExpr 0x28effa7d2b8 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
| | | | | | `-DeclRefExpr 0x28effa7d100 <col:9> 'void *(void *, int, unsigned long long)' Function 0x28effa7cf10 'memset' 'void *(void *, int, unsigned long long)'
| | | | | |-ImplicitCastExpr 0x28effa7d308 <col:16, col:26> 'void *' <BitCast>
| | | | | | `-BinaryOperator 0x28effa7d1f0 <col:16, col:26> 'unsigned char *' '+'
| | | | | |   |-BinaryOperator 0x28effa7d198 <col:16, col:22> 'unsigned char *' '+'
| | | | | |   | |-ImplicitCastExpr 0x28effa7d180 <col:16> 'unsigned char *' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0x28effa7d138 <col:16> 'unsigned char *' lvalue ParmVar 0x28effa794c8 'out' 'unsigned char *'
| | | | | |   | `-IntegerLiteral 0x28effa7d158 <col:22> 'int' 8
| | | | | |   `-ImplicitCastExpr 0x28effa7d1d8 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | |     `-DeclRefExpr 0x28effa7d1b8 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | | | | |-IntegerLiteral 0x28effa7d210 <col:33> 'int' 0
| | | | | `-ImplicitCastExpr 0x28effa7d320 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x28effa7d238 <col:36> 'const size_t':'const unsigned long long' lvalue Var 0x28effa7bb68 'padding_len' 'const size_t':'const unsigned long long'
| | | | `-BinaryOperator 0x28effa7d410 <line:226:9, col:15> 'int' '='
| | | |   |-DeclRefExpr 0x28effa7d3b0 <col:9> 'int' lvalue Var 0x28effa7bdd8 'ret' 'int'
| | | |   `-IntegerLiteral 0x28effa7d3e8 <col:15> 'int' 16
| | | `-CompoundStmt 0x28effa7d840 <line:227:12, line:231:5>
| | |   |-CallExpr 0x28effa7d540 <line:228:9, col:31> 'void *'
| | |   | |-ImplicitCastExpr 0x28effa7d528 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x28effa7d460 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e210 'memmove' 'void *(void *, const void *, unsigned long long)'
| | |   | |-ImplicitCastExpr 0x28effa7d590 <col:17> 'void *' <BitCast>
| | |   | | `-ImplicitCastExpr 0x28effa7d578 <col:17> 'unsigned char *' <LValueToRValue>
| | |   | |   `-DeclRefExpr 0x28effa7d480 <col:17> 'unsigned char *' lvalue ParmVar 0x28effa794c8 'out' 'unsigned char *'
| | |   | |-ImplicitCastExpr 0x28effa7d5c0 <col:22> 'const void *' <BitCast>
| | |   | | `-ImplicitCastExpr 0x28effa7d5a8 <col:22> 'const unsigned char *' <LValueToRValue>
| | |   | |   `-DeclRefExpr 0x28effa7d4a0 <col:22> 'const unsigned char *' lvalue ParmVar 0x28effa79548 'in' 'const unsigned char *'
| | |   | `-ImplicitCastExpr 0x28effa7d5d8 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x28effa7d4c0 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | |   `-CallExpr 0x28effa7d718 <line:229:9, col:43> 'void *'
| | |     |-ImplicitCastExpr 0x28effa7d700 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x28effa7d5f0 <col:9> 'void *(void *, int, unsigned long long)' Function 0x28effa7cf10 'memset' 'void *(void *, int, unsigned long long)'
| | |     |-ImplicitCastExpr 0x28effa7d750 <col:16, col:22> 'void *' <BitCast>
| | |     | `-BinaryOperator 0x28effa7d680 <col:16, col:22> 'unsigned char *' '+'
| | |     |   |-ImplicitCastExpr 0x28effa7d650 <col:16> 'unsigned char *' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x28effa7d610 <col:16> 'unsigned char *' lvalue ParmVar 0x28effa794c8 'out' 'unsigned char *'
| | |     |   `-ImplicitCastExpr 0x28effa7d668 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x28effa7d630 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa795c0 'inlen' 'size_t':'unsigned long long'
| | |     |-IntegerLiteral 0x28effa7d6a0 <col:29> 'int' 0
| | |     `-ImplicitCastExpr 0x28effa7d768 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
| | |       `-DeclRefExpr 0x28effa7d6c8 <col:32> 'const size_t':'const unsigned long long' lvalue Var 0x28effa7bb68 'padding_len' 'const size_t':'const unsigned long long'
| | `-ReturnStmt 0x28effa7d8d8 <line:233:5, col:12>
| |   `-ImplicitCastExpr 0x28effa7d8c0 <col:12> 'size_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x28effa7d8a8 <col:12> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x28effa7d888 <col:12> 'int' lvalue Var 0x28effa7bdd8 'ret' 'int'
| `-FullComment 0x28effa784e0 <line:170:4, line:181:59>
|   |-ParagraphComment 0x28effa77ea0 <line:170:4, col:47>
|   | `-TextComment 0x28effa77e78 <col:4, col:47> Text=" Wrapping according to RFC 5649 section 4.1."
|   |-ParagraphComment 0x28effa77ee8 <line:172:3, col:4>
|   | `-TextComment 0x28effa77ec0 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa77f08 <col:5, line:173:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x28effa77fb0 <line:172:20, line:173:4>
|   |   |-TextComment 0x28effa77f60 <line:172:20, col:33> Text="    Key value."
|   |   `-TextComment 0x28effa77f80 <line:173:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa77fd0 <col:5, line:174:4> [in] explicitly Param="icv" ParamIndex=1
|   | `-ParagraphComment 0x28effa78078 <line:173:20, line:174:4>
|   |   |-TextComment 0x28effa78028 <line:173:20, col:74> Text="    (Non-standard) IV, 4 bytes. NULL = use default_aiv."
|   |   `-TextComment 0x28effa78048 <line:174:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa78098 <col:5, line:177:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x28effa78190 <line:174:20, line:177:4>
|   |   |-TextComment 0x28effa780f0 <line:174:20, col:78> Text="    Ciphertext. Minimal buffer length = (inlen + 15) bytes."
|   |   |-TextComment 0x28effa78110 <line:175:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x28effa78130 <line:176:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x28effa78150 <line:177:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa781b0 <col:5, line:178:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x28effa78250 <line:177:19, line:178:4>
|   |   |-TextComment 0x28effa78200 <line:177:19, col:60> Text="     Plaintext as n 64-bit blocks, n >= 2."
|   |   `-TextComment 0x28effa78220 <line:178:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa78270 <col:5, line:179:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x28effa78318 <line:178:22, line:179:4>
|   |   |-TextComment 0x28effa782c8 <line:178:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x28effa782e8 <line:179:3, col:4> Text="  "
|   |-ParamCommandComment 0x28effa78338 <col:5, line:180:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x28effa783e0 <line:179:22, line:180:4>
|   |   |-TextComment 0x28effa78390 <line:179:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x28effa783b0 <line:180:3, col:4> Text="  "
|   `-BlockCommandComment 0x28effa78400 <col:5, line:181:59> Name="return"
|     `-ParagraphComment 0x28effa78478 <line:180:12, line:181:59>
|       |-TextComment 0x28effa78428 <line:180:12, col:74> Text="            0 if inlen is out of range [1, CRYPTO128_WRAP_MAX]."
|       `-TextComment 0x28effa78448 <line:181:3, col:59> Text="                     Output length if wrapping succeeded."
|-FunctionDecl 0x28effa7cf10 <line:224:9> col:9 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x28effa7cfb0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x28effa7d018 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x28effa7d080 <<invalid sloc>> <invalid sloc> 'unsigned long long'
`-FunctionDecl 0x28effa79ca8 <line:251:1, line:329:1> line:251:8 invalid CRYPTO_128_unwrap_pad 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
  |-ParmVarDecl 0x28effa79978 <col:30, col:36> col:36 used key 'void *'
  |-ParmVarDecl 0x28effa799f8 <col:41, col:62> col:62 used icv 'const unsigned char *'
  |-ParmVarDecl 0x28effa79a78 <line:252:30, col:45> col:45 used out 'unsigned char *'
  |-ParmVarDecl 0x28effa79af8 <line:253:30, col:51> col:51 used in 'const unsigned char *'
  |-ParmVarDecl 0x28effa79b70 <col:55, col:62> col:62 used inlen 'size_t':'unsigned long long'
  |-ParmVarDecl 0x28effa79bf0 <line:254:30, col:41> col:41 invalid block 'int'
  |-CompoundStmt 0x28effa7f520 <line:255:1, line:329:1>
  | |-DeclStmt 0x28effa79f18 <line:257:5, col:29>
  | | `-VarDecl 0x28effa79da0 <col:5, col:28> col:12 used n 'size_t':'unsigned long long' cinit
  | |   `-BinaryOperator 0x28effa79ef8 <col:16, col:28> 'unsigned long long' '-'
  | |     |-BinaryOperator 0x28effa79e98 <col:16, col:24> 'unsigned long long' '/'
  | |     | |-ImplicitCastExpr 0x28effa79e68 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
  | |     | | `-DeclRefExpr 0x28effa79e08 <col:16> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | |     | `-ImplicitCastExpr 0x28effa79e80 <col:24> 'unsigned long long' <IntegralCast>
  | |     |   `-IntegerLiteral 0x28effa79e40 <col:24> 'int' 8
  | |     `-ImplicitCastExpr 0x28effa79ee0 <col:28> 'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x28effa79eb8 <col:28> 'int' 1
  | |-DeclStmt 0x28effa79fa8 <line:258:5, col:22>
  | | `-VarDecl 0x28effa79f40 <col:5, col:12> col:12 used padded_len 'size_t':'unsigned long long'
  | |-DeclStmt 0x28effa7a038 <line:259:5, col:23>
  | | `-VarDecl 0x28effa79fd0 <col:5, col:12> col:12 used padding_len 'size_t':'unsigned long long'
  | |-DeclStmt 0x28effa7a0c8 <line:260:5, col:21>
  | | `-VarDecl 0x28effa7a060 <col:5, col:12> col:12 used ptext_len 'size_t':'unsigned long long'
  | |-DeclStmt 0x28effa7a1b0 <line:262:5, col:25>
  | | `-VarDecl 0x28effa7a148 <col:5, col:24> col:19 used aiv 'unsigned char [8]'
  | |-DeclStmt 0x28effa7a388 <line:263:5, col:44>
  | | `-VarDecl 0x28effa7a230 <col:5, col:43> col:26 used zeros 'unsigned char [8]' static cinit
  | |   `-InitListExpr 0x28effa7a318 <col:37, col:43> 'unsigned char [8]'
  | |     |-array_filler: ImplicitValueInitExpr 0x28effa7a378 <<invalid sloc>> 'unsigned char'
  | |     `-ImplicitCastExpr 0x28effa7a358 <col:39> 'unsigned char' <IntegralCast>
  | |       `-IntegerLiteral 0x28effa7a298 <col:39> 'int' 0
  | |-DeclStmt 0x28effa7a418 <line:264:5, col:15>
  | | `-VarDecl 0x28effa7a3b0 <col:5, col:12> col:12 used ret 'size_t':'unsigned long long'
  | |-IfStmt 0x28effa7a770 <line:267:5, line:268:16>
  | | |-BinaryOperator 0x28effa7a700 <line:267:9, line:32:38> 'int' '||'
  | | | |-BinaryOperator 0x28effa7a5e0 <line:267:9, col:39> 'int' '||'
  | | | | |-BinaryOperator 0x28effa7a528 <col:9, col:26> 'int' '!='
  | | | | | |-ParenExpr 0x28effa7a4c8 <col:9, col:21> 'unsigned long long'
  | | | | | | `-BinaryOperator 0x28effa7a4a8 <col:10, col:18> 'unsigned long long' '&'
  | | | | | |   |-ImplicitCastExpr 0x28effa7a478 <col:10> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | | |   | `-DeclRefExpr 0x28effa7a430 <col:10> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | | | | | |   `-ImplicitCastExpr 0x28effa7a490 <col:18> 'unsigned long long' <IntegralCast>
  | | | | | |     `-IntegerLiteral 0x28effa7a450 <col:18> 'int' 7
  | | | | | `-ImplicitCastExpr 0x28effa7a510 <col:26> 'unsigned long long' <IntegralCast>
  | | | | |   `-IntegerLiteral 0x28effa7a4e8 <col:26> 'int' 0
  | | | | `-BinaryOperator 0x28effa7a5c0 <col:31, col:39> 'int' '<'
  | | | |   |-ImplicitCastExpr 0x28effa7a590 <col:31> 'size_t':'unsigned long long' <LValueToRValue>
  | | | |   | `-DeclRefExpr 0x28effa7a548 <col:31> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | | | |   `-ImplicitCastExpr 0x28effa7a5a8 <col:39> 'unsigned long long' <IntegralCast>
  | | | |     `-IntegerLiteral 0x28effa7a568 <col:39> 'int' 16
  | | | `-BinaryOperator 0x28effa7a6e0 <col:45, line:32:38> 'int' '>='
  | | |   |-ImplicitCastExpr 0x28effa7a6b0 <line:267:45> 'size_t':'unsigned long long' <LValueToRValue>
  | | |   | `-DeclRefExpr 0x28effa7a600 <col:45> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | | |   `-ImplicitCastExpr 0x28effa7a6c8 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
  | | |     `-ParenExpr 0x28effa7a690 <col:28, col:38> 'unsigned long'
  | | |       `-BinaryOperator 0x28effa7a670 <col:29, col:36> 'unsigned long' '<<'
  | | |         |-IntegerLiteral 0x28effa7a620 <col:29> 'unsigned long' 1
  | | |         `-IntegerLiteral 0x28effa7a648 <col:36> 'int' 31
  | | `-ReturnStmt 0x28effa7a760 <line:268:9, col:16>
  | |   `-ImplicitCastExpr 0x28effa7a748 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |     `-IntegerLiteral 0x28effa7a720 <col:16> 'int' 0
  | |-CallExpr 0x28effa7a898 <line:270:5, col:27> 'void *'
  | | |-ImplicitCastExpr 0x28effa7a880 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
  | | | `-DeclRefExpr 0x28effa7a788 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e210 'memmove' 'void *(void *, const void *, unsigned long long)'
  | | |-ImplicitCastExpr 0x28effa7a8e8 <col:13> 'void *' <BitCast>
  | | | `-ImplicitCastExpr 0x28effa7a8d0 <col:13> 'unsigned char *' <LValueToRValue>
  | | |   `-DeclRefExpr 0x28effa7a7a8 <col:13> 'unsigned char *' lvalue ParmVar 0x28effa79a78 'out' 'unsigned char *'
  | | |-ImplicitCastExpr 0x28effa7a918 <col:18> 'const void *' <BitCast>
  | | | `-ImplicitCastExpr 0x28effa7a900 <col:18> 'const unsigned char *' <LValueToRValue>
  | | |   `-DeclRefExpr 0x28effa7a7e0 <col:18> 'const unsigned char *' lvalue ParmVar 0x28effa79af8 'in' 'const unsigned char *'
  | | `-ImplicitCastExpr 0x28effa7a930 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
  | |   `-DeclRefExpr 0x28effa7a818 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | |-IfStmt 0x28effa7e278 <line:271:5, line:290:5> has_else
  | | |-BinaryOperator 0x28effa7da18 <line:271:9, col:18> 'int' '=='
  | | | |-ImplicitCastExpr 0x28effa7d9e8 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | `-DeclRefExpr 0x28effa7d9a0 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | | | `-ImplicitCastExpr 0x28effa7da00 <col:18> 'unsigned long long' <IntegralCast>
  | | |   `-IntegerLiteral 0x28effa7d9c0 <col:18> 'int' 16
  | | |-CompoundStmt 0x28effa7de90 <col:22, line:283:5>
  | | | |-CallExpr 0x28effa7db98 <line:279:9, col:27> 'void *'
  | | | | |-ImplicitCastExpr 0x28effa7db80 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
  | | | | | `-DeclRefExpr 0x28effa7dab0 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e730 'memcpy' 'void *(void *, const void *, unsigned long long)'
  | | | | |-ImplicitCastExpr 0x28effa7dbe8 <col:16> 'void *' <BitCast>
  | | | | | `-ImplicitCastExpr 0x28effa7dbd0 <col:16> 'unsigned char *' <ArrayToPointerDecay>
  | | | | |   `-DeclRefExpr 0x28effa7dad0 <col:16> 'unsigned char [8]' lvalue Var 0x28effa7a148 'aiv' 'unsigned char [8]'
  | | | | |-ImplicitCastExpr 0x28effa7dc18 <col:21> 'const void *' <BitCast>
  | | | | | `-ImplicitCastExpr 0x28effa7dc00 <col:21> 'unsigned char *' <LValueToRValue>
  | | | | |   `-DeclRefExpr 0x28effa7db08 <col:21> 'unsigned char *' lvalue ParmVar 0x28effa79a78 'out' 'unsigned char *'
  | | | | `-ImplicitCastExpr 0x28effa7dc30 <col:26> 'unsigned long long' <IntegralCast>
  | | | |   `-IntegerLiteral 0x28effa7db28 <col:26> 'int' 8
  | | | |-CallExpr 0x28effa7dd60 <line:281:9, col:32> 'void *'
  | | | | |-ImplicitCastExpr 0x28effa7dd48 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
  | | | | | `-DeclRefExpr 0x28effa7dc48 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28effa6e210 'memmove' 'void *(void *, const void *, unsigned long long)'
  | | | | |-ImplicitCastExpr 0x28effa7ddb0 <col:17> 'void *' <BitCast>
  | | | | | `-ImplicitCastExpr 0x28effa7dd98 <col:17> 'unsigned char *' <LValueToRValue>
  | | | | |   `-DeclRefExpr 0x28effa7dc68 <col:17> 'unsigned char *' lvalue ParmVar 0x28effa79a78 'out' 'unsigned char *'
  | | | | |-ImplicitCastExpr 0x28effa7ddc8 <col:22, col:28> 'const void *' <BitCast>
  | | | | | `-BinaryOperator 0x28effa7dce8 <col:22, col:28> 'unsigned char *' '+'
  | | | | |   |-ImplicitCastExpr 0x28effa7dcd0 <col:22> 'unsigned char *' <LValueToRValue>
  | | | | |   | `-DeclRefExpr 0x28effa7dc88 <col:22> 'unsigned char *' lvalue ParmVar 0x28effa79a78 'out' 'unsigned char *'
  | | | | |   `-IntegerLiteral 0x28effa7dca8 <col:28> 'int' 8
  | | | | `-ImplicitCastExpr 0x28effa7dde0 <col:31> 'unsigned long long' <IntegralCast>
  | | | |   `-IntegerLiteral 0x28effa7dd08 <col:31> 'int' 8
  | | | `-BinaryOperator 0x28effa7de70 <line:282:9, col:22> 'size_t':'unsigned long long' '='
  | | |   |-DeclRefExpr 0x28effa7ddf8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x28effa79f40 'padded_len' 'size_t':'unsigned long long'
  | | |   `-ImplicitCastExpr 0x28effa7de58 <col:22> 'size_t':'unsigned long long' <IntegralCast>
  | | |     `-IntegerLiteral 0x28effa7de30 <col:22> 'int' 8
  | | `-CompoundStmt 0x28effa7e258 <line:283:12, line:290:5>
  | |   |-BinaryOperator 0x28effa7df70 <line:284:9, col:30> 'size_t':'unsigned long long' '='
  | |   | |-DeclRefExpr 0x28effa7deb8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x28effa79f40 'padded_len' 'size_t':'unsigned long long'
  | |   | `-BinaryOperator 0x28effa7df50 <col:22, col:30> 'unsigned long long' '-'
  | |   |   |-ImplicitCastExpr 0x28effa7df20 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   | `-DeclRefExpr 0x28effa7ded8 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | |   |   `-ImplicitCastExpr 0x28effa7df38 <col:30> 'unsigned long long' <IntegralCast>
  | |   |     `-IntegerLiteral 0x28effa7def8 <col:30> 'int' 8
  | |   `-IfStmt 0x28effa7e240 <line:286:9, line:289:9>
  | |     |-BinaryOperator 0x28effa7e0d8 <line:286:13, col:27> 'int' '!='
  | |     | |-ImplicitCastExpr 0x28effa7e0a8 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
  | |     | | `-DeclRefExpr 0x28effa7e068 <col:13> 'size_t':'unsigned long long' lvalue Var 0x28effa79f40 'padded_len' 'size_t':'unsigned long long'
  | |     | `-ImplicitCastExpr 0x28effa7e0c0 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
  | |     |   `-DeclRefExpr 0x28effa7e088 <col:27> 'size_t':'unsigned long long' lvalue Var 0x28effa7a3b0 'ret' 'size_t':'unsigned long long'
  | |     `-CompoundStmt 0x28effa7e220 <col:32, line:289:9>
  | |       |-CallExpr 0x28effa7e170 <line:287:13, col:39> 'int'
  | |       | |-ImplicitCastExpr 0x28effa7e158 <col:13> 'int (*)()' <FunctionToPointerDecay>
  | |       | | `-DeclRefExpr 0x28effa7e0f8 <col:13> 'int ()' Function 0x28effa790d0 'OPENSSL_cleanse' 'int ()'
  | |       | |-ImplicitCastExpr 0x28effa7e1a0 <col:29> 'unsigned char *' <LValueToRValue>
  | |       | | `-DeclRefExpr 0x28effa7e118 <col:29> 'unsigned char *' lvalue ParmVar 0x28effa79a78 'out' 'unsigned char *'
  | |       | `-ImplicitCastExpr 0x28effa7e1b8 <col:34> 'size_t':'unsigned long long' <LValueToRValue>
  | |       |   `-DeclRefExpr 0x28effa7e138 <col:34> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | |       `-ReturnStmt 0x28effa7e210 <line:288:13, col:20>
  | |         `-ImplicitCastExpr 0x28effa7e1f8 <col:20> 'size_t':'unsigned long long' <IntegralCast>
  | |           `-IntegerLiteral 0x28effa7e1d0 <col:20> 'int' 0
  | |-IfStmt 0x28effa7e738 <line:297:5, line:301:5>
  | | |-BinaryOperator 0x28effa7e5d0 <line:297:9, line:298:46> 'int' '||'
  | | | |-ParenExpr 0x28effa7e430 <line:297:9, col:52> 'int'
  | | | | `-BinaryOperator 0x28effa7e410 <col:10, col:51> 'int' '&&'
  | | | |   |-UnaryOperator 0x28effa7e2f0 <col:10, col:11> 'int' prefix '!' cannot overflow
  | | | |   | `-ImplicitCastExpr 0x28effa7e2d8 <col:11> 'const unsigned char *' <LValueToRValue>
  | | | |   |   `-DeclRefExpr 0x28effa7e2a0 <col:11> 'const unsigned char *' lvalue ParmVar 0x28effa799f8 'icv' 'const unsigned char *'
  | | | |   `-CallExpr 0x28effa7e3a8 <col:18, col:51> 'int'
  | | | |     |-ImplicitCastExpr 0x28effa7e390 <col:18> 'int (*)()' <FunctionToPointerDecay>
  | | | |     | `-DeclRefExpr 0x28effa7e308 <col:18> 'int ()' Function 0x28effa78eb0 'CRYPTO_memcmp' 'int ()'
  | | | |     |-ImplicitCastExpr 0x28effa7e3e0 <col:32> 'unsigned char *' <ArrayToPointerDecay>
  | | | |     | `-DeclRefExpr 0x28effa7e328 <col:32> 'unsigned char [8]' lvalue Var 0x28effa7a148 'aiv' 'unsigned char [8]'
  | | | |     |-ImplicitCastExpr 0x28effa7e3f8 <col:37> 'const unsigned char *' <ArrayToPointerDecay>
  | | | |     | `-DeclRefExpr 0x28effa7e348 <col:37> 'const unsigned char [4]' lvalue Var 0x28effa6d040 'default_aiv' 'const unsigned char [4]'
  | | | |     `-IntegerLiteral 0x28effa7e368 <col:50> 'int' 4
  | | | `-ParenExpr 0x28effa7e5b0 <line:298:12, col:46> 'int'
  | | |   `-BinaryOperator 0x28effa7e590 <col:13, col:45> 'int' '&&'
  | | |     |-ImplicitCastExpr 0x28effa7e578 <col:13> 'const unsigned char *' <LValueToRValue>
  | | |     | `-DeclRefExpr 0x28effa7e450 <col:13> 'const unsigned char *' lvalue ParmVar 0x28effa799f8 'icv' 'const unsigned char *'
  | | |     `-CallExpr 0x28effa7e510 <col:20, col:45> 'int'
  | | |       |-ImplicitCastExpr 0x28effa7e4f8 <col:20> 'int (*)()' <FunctionToPointerDecay>
  | | |       | `-DeclRefExpr 0x28effa7e470 <col:20> 'int ()' Function 0x28effa78eb0 'CRYPTO_memcmp' 'int ()'
  | | |       |-ImplicitCastExpr 0x28effa7e548 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | | |       | `-DeclRefExpr 0x28effa7e490 <col:34> 'unsigned char [8]' lvalue Var 0x28effa7a148 'aiv' 'unsigned char [8]'
  | | |       |-ImplicitCastExpr 0x28effa7e560 <col:39> 'const unsigned char *' <LValueToRValue>
  | | |       | `-DeclRefExpr 0x28effa7e4b0 <col:39> 'const unsigned char *' lvalue ParmVar 0x28effa799f8 'icv' 'const unsigned char *'
  | | |       `-IntegerLiteral 0x28effa7e4d0 <col:44> 'int' 4
  | | `-CompoundStmt 0x28effa7e718 <col:49, line:301:5>
  | |   |-CallExpr 0x28effa7e668 <line:299:9, col:35> 'int'
  | |   | |-ImplicitCastExpr 0x28effa7e650 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | |   | | `-DeclRefExpr 0x28effa7e5f0 <col:9> 'int ()' Function 0x28effa790d0 'OPENSSL_cleanse' 'int ()'
  | |   | |-ImplicitCastExpr 0x28effa7e698 <col:25> 'unsigned char *' <LValueToRValue>
  | |   | | `-DeclRefExpr 0x28effa7e610 <col:25> 'unsigned char *' lvalue ParmVar 0x28effa79a78 'out' 'unsigned char *'
  | |   | `-ImplicitCastExpr 0x28effa7e6b0 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   `-DeclRefExpr 0x28effa7e630 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | |   `-ReturnStmt 0x28effa7e708 <line:300:9, col:16>
  | |     `-ImplicitCastExpr 0x28effa7e6f0 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x28effa7e6c8 <col:16> 'int' 0
  | |-BinaryOperator 0x28effa7eca8 <line:308:5, line:311:39> 'size_t':'unsigned long long' '='
  | | |-DeclRefExpr 0x28effa7e750 <line:308:5> 'size_t':'unsigned long long' lvalue Var 0x28effa7a060 'ptext_len' 'size_t':'unsigned long long'
  | | `-ImplicitCastExpr 0x28effa7ec90 <col:19, line:311:39> 'size_t':'unsigned long long' <IntegralCast>
  | |   `-BinaryOperator 0x28effa7ec70 <line:308:19, line:311:39> 'unsigned int' '|'
  | |     |-BinaryOperator 0x28effa7eb78 <line:308:19, line:310:46> 'unsigned int' '|'
  | |     | |-BinaryOperator 0x28effa7ea18 <line:308:19, line:309:46> 'unsigned int' '|'
  | |     | | |-ParenExpr 0x28effa7e8a8 <line:308:19, col:46> 'unsigned int'
  | |     | | | `-BinaryOperator 0x28effa7e888 <col:20, col:44> 'unsigned int' '<<'
  | |     | | |   |-CStyleCastExpr 0x28effa7e838 <col:20, col:39> 'unsigned int' <IntegralCast>
  | |     | | |   | `-ImplicitCastExpr 0x28effa7e820 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |     | | |   |   `-ArraySubscriptExpr 0x28effa7e7e8 <col:34, col:39> 'unsigned char' lvalue
  | |     | | |   |     |-ImplicitCastExpr 0x28effa7e7d0 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |     | | |   |     | `-DeclRefExpr 0x28effa7e788 <col:34> 'unsigned char [8]' lvalue Var 0x28effa7a148 'aiv' 'unsigned char [8]'
  | |     | | |   |     `-IntegerLiteral 0x28effa7e7a8 <col:38> 'int' 4
  | |     | | |   `-IntegerLiteral 0x28effa7e860 <col:44> 'int' 24
  | |     | | `-ParenExpr 0x28effa7e9f8 <line:309:19, col:46> 'unsigned int'
  | |     | |   `-BinaryOperator 0x28effa7e9d8 <col:20, col:44> 'unsigned int' '<<'
  | |     | |     |-CStyleCastExpr 0x28effa7e978 <col:20, col:39> 'unsigned int' <IntegralCast>
  | |     | |     | `-ImplicitCastExpr 0x28effa7e960 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |     | |     |   `-ArraySubscriptExpr 0x28effa7e928 <col:34, col:39> 'unsigned char' lvalue
  | |     | |     |     |-ImplicitCastExpr 0x28effa7e910 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |     | |     |     | `-DeclRefExpr 0x28effa7e8c8 <col:34> 'unsigned char [8]' lvalue Var 0x28effa7a148 'aiv' 'unsigned char [8]'
  | |     | |     |     `-IntegerLiteral 0x28effa7e8e8 <col:38> 'int' 5
  | |     | |     `-IntegerLiteral 0x28effa7e9b0 <col:44> 'int' 16
  | |     | `-ParenExpr 0x28effa7eb58 <line:310:19, col:46> 'unsigned int'
  | |     |   `-BinaryOperator 0x28effa7eb38 <col:20, col:45> 'unsigned int' '<<'
  | |     |     |-CStyleCastExpr 0x28effa7eae8 <col:20, col:39> 'unsigned int' <IntegralCast>
  | |     |     | `-ImplicitCastExpr 0x28effa7ead0 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |     |     |   `-ArraySubscriptExpr 0x28effa7ea98 <col:34, col:39> 'unsigned char' lvalue
  | |     |     |     |-ImplicitCastExpr 0x28effa7ea80 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |     |     |     | `-DeclRefExpr 0x28effa7ea38 <col:34> 'unsigned char [8]' lvalue Var 0x28effa7a148 'aiv' 'unsigned char [8]'
  | |     |     |     `-IntegerLiteral 0x28effa7ea58 <col:38> 'int' 6
  | |     |     `-IntegerLiteral 0x28effa7eb10 <col:45> 'int' 8
  | |     `-CStyleCastExpr 0x28effa7ec48 <line:311:20, col:39> 'unsigned int' <IntegralCast>
  | |       `-ImplicitCastExpr 0x28effa7ec30 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |         `-ArraySubscriptExpr 0x28effa7ebf8 <col:34, col:39> 'unsigned char' lvalue
  | |           |-ImplicitCastExpr 0x28effa7ebe0 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |           | `-DeclRefExpr 0x28effa7eb98 <col:34> 'unsigned char [8]' lvalue Var 0x28effa7a148 'aiv' 'unsigned char [8]'
  | |           `-IntegerLiteral 0x28effa7ebb8 <col:38> 'int' 7
  | |-IfStmt 0x28effa7f0a8 <line:312:5, line:315:5>
  | | |-BinaryOperator 0x28effa7ef40 <line:312:9, col:53> 'int' '||'
  | | | |-BinaryOperator 0x28effa7ee30 <col:9, col:24> 'int' '>='
  | | | | |-BinaryOperator 0x28effa7edd8 <col:9, col:19> 'unsigned long long' '*'
  | | | | | |-ImplicitCastExpr 0x28effa7edc0 <col:9> 'unsigned long long' <IntegralCast>
  | | | | | | `-IntegerLiteral 0x28effa7ecc8 <col:9> 'int' 8
  | | | | | `-ParenExpr 0x28effa7eda0 <col:13, col:19> 'unsigned long long'
  | | | | |   `-BinaryOperator 0x28effa7ed80 <col:14, col:18> 'unsigned long long' '-'
  | | | | |     |-ImplicitCastExpr 0x28effa7ed50 <col:14> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | |     | `-DeclRefExpr 0x28effa7ecf0 <col:14> 'size_t':'unsigned long long' lvalue Var 0x28effa79da0 'n' 'size_t':'unsigned long long'
  | | | | |     `-ImplicitCastExpr 0x28effa7ed68 <col:18> 'unsigned long long' <IntegralCast>
  | | | | |       `-IntegerLiteral 0x28effa7ed28 <col:18> 'int' 1
  | | | | `-ImplicitCastExpr 0x28effa7ee18 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
  | | | |   `-DeclRefExpr 0x28effa7edf8 <col:24> 'size_t':'unsigned long long' lvalue Var 0x28effa7a060 'ptext_len' 'size_t':'unsigned long long'
  | | | `-BinaryOperator 0x28effa7ef20 <col:37, col:53> 'int' '>'
  | | |   |-ImplicitCastExpr 0x28effa7ef08 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
  | | |   | `-DeclRefExpr 0x28effa7ee50 <col:37> 'size_t':'unsigned long long' lvalue Var 0x28effa7a060 'ptext_len' 'size_t':'unsigned long long'
  | | |   `-BinaryOperator 0x28effa7eee8 <col:49, col:53> 'unsigned long long' '*'
  | | |     |-ImplicitCastExpr 0x28effa7eed0 <col:49> 'unsigned long long' <IntegralCast>
  | | |     | `-IntegerLiteral 0x28effa7ee70 <col:49> 'int' 8
  | | |     `-ImplicitCastExpr 0x28effa7eeb8 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
  | | |       `-DeclRefExpr 0x28effa7ee98 <col:53> 'size_t':'unsigned long long' lvalue Var 0x28effa79da0 'n' 'size_t':'unsigned long long'
  | | `-CompoundStmt 0x28effa7f088 <col:56, line:315:5>
  | |   |-CallExpr 0x28effa7efd8 <line:313:9, col:35> 'int'
  | |   | |-ImplicitCastExpr 0x28effa7efc0 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | |   | | `-DeclRefExpr 0x28effa7ef60 <col:9> 'int ()' Function 0x28effa790d0 'OPENSSL_cleanse' 'int ()'
  | |   | |-ImplicitCastExpr 0x28effa7f008 <col:25> 'unsigned char *' <LValueToRValue>
  | |   | | `-DeclRefExpr 0x28effa7ef80 <col:25> 'unsigned char *' lvalue ParmVar 0x28effa79a78 'out' 'unsigned char *'
  | |   | `-ImplicitCastExpr 0x28effa7f020 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   `-DeclRefExpr 0x28effa7efa0 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | |   `-ReturnStmt 0x28effa7f078 <line:314:9, col:16>
  | |     `-ImplicitCastExpr 0x28effa7f060 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x28effa7f038 <col:16> 'int' 0
  | |-BinaryOperator 0x28effa7f188 <line:321:5, col:32> 'size_t':'unsigned long long' '='
  | | |-DeclRefExpr 0x28effa7f0c0 <col:5> 'size_t':'unsigned long long' lvalue Var 0x28effa79fd0 'padding_len' 'size_t':'unsigned long long'
  | | `-BinaryOperator 0x28effa7f168 <col:19, col:32> 'unsigned long long' '-'
  | |   |-ImplicitCastExpr 0x28effa7f138 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
  | |   | `-DeclRefExpr 0x28effa7f0f8 <col:19> 'size_t':'unsigned long long' lvalue Var 0x28effa79f40 'padded_len' 'size_t':'unsigned long long'
  | |   `-ImplicitCastExpr 0x28effa7f150 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
  | |     `-DeclRefExpr 0x28effa7f118 <col:32> 'size_t':'unsigned long long' lvalue Var 0x28effa7a060 'ptext_len' 'size_t':'unsigned long long'
  | |-IfStmt 0x28effa7f4c0 <line:322:5, line:325:5>
  | | |-BinaryOperator 0x28effa7f358 <line:322:9, col:63> 'int' '!='
  | | | |-CallExpr 0x28effa7f2c8 <col:9, col:58> 'int'
  | | | | |-ImplicitCastExpr 0x28effa7f2b0 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | | | | | `-DeclRefExpr 0x28effa7f1a8 <col:9> 'int ()' Function 0x28effa78eb0 'CRYPTO_memcmp' 'int ()'
  | | | | |-BinaryOperator 0x28effa7f238 <col:23, col:29> 'unsigned char *' '+'
  | | | | | |-ImplicitCastExpr 0x28effa7f208 <col:23> 'unsigned char *' <LValueToRValue>
  | | | | | | `-DeclRefExpr 0x28effa7f1c8 <col:23> 'unsigned char *' lvalue ParmVar 0x28effa79a78 'out' 'unsigned char *'
  | | | | | `-ImplicitCastExpr 0x28effa7f220 <col:29> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | |   `-DeclRefExpr 0x28effa7f1e8 <col:29> 'size_t':'unsigned long long' lvalue Var 0x28effa7a060 'ptext_len' 'size_t':'unsigned long long'
  | | | | |-ImplicitCastExpr 0x28effa7f300 <col:40> 'unsigned char *' <ArrayToPointerDecay>
  | | | | | `-DeclRefExpr 0x28effa7f258 <col:40> 'unsigned char [8]' lvalue Var 0x28effa7a230 'zeros' 'unsigned char [8]'
  | | | | `-ImplicitCastExpr 0x28effa7f318 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
  | | | |   `-DeclRefExpr 0x28effa7f290 <col:47> 'size_t':'unsigned long long' lvalue Var 0x28effa79fd0 'padding_len' 'size_t':'unsigned long long'
  | | | `-IntegerLiteral 0x28effa7f330 <col:63> 'int' 0
  | | `-CompoundStmt 0x28effa7f4a0 <col:66, line:325:5>
  | |   |-CallExpr 0x28effa7f3f0 <line:323:9, col:35> 'int'
  | |   | |-ImplicitCastExpr 0x28effa7f3d8 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | |   | | `-DeclRefExpr 0x28effa7f378 <col:9> 'int ()' Function 0x28effa790d0 'OPENSSL_cleanse' 'int ()'
  | |   | |-ImplicitCastExpr 0x28effa7f420 <col:25> 'unsigned char *' <LValueToRValue>
  | |   | | `-DeclRefExpr 0x28effa7f398 <col:25> 'unsigned char *' lvalue ParmVar 0x28effa79a78 'out' 'unsigned char *'
  | |   | `-ImplicitCastExpr 0x28effa7f438 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   `-DeclRefExpr 0x28effa7f3b8 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x28effa79b70 'inlen' 'size_t':'unsigned long long'
  | |   `-ReturnStmt 0x28effa7f490 <line:324:9, col:16>
  | |     `-ImplicitCastExpr 0x28effa7f478 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x28effa7f450 <col:16> 'int' 0
  | `-ReturnStmt 0x28effa7f510 <line:328:5, col:12>
  |   `-ImplicitCastExpr 0x28effa7f4f8 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
  |     `-DeclRefExpr 0x28effa7f4d8 <col:12> 'size_t':'unsigned long long' lvalue Var 0x28effa7a060 'ptext_len' 'size_t':'unsigned long long'
  `-FullComment 0x28effa80d00 <line:236:4, line:249:76>
    |-ParagraphComment 0x28effa785c8 <line:236:4, col:49>
    | `-TextComment 0x28effa785a0 <col:4, col:49> Text=" Unwrapping according to RFC 5649 section 4.2."
    |-ParagraphComment 0x28effa78610 <line:238:3, col:4>
    | `-TextComment 0x28effa785e8 <col:3, col:4> Text="  "
    |-ParamCommandComment 0x28effa78630 <col:5, line:239:4> [in] explicitly Param="key" ParamIndex=0
    | `-ParagraphComment 0x28effa786d8 <line:238:20, line:239:4>
    |   |-TextComment 0x28effa78688 <line:238:20, col:33> Text="    Key value."
    |   `-TextComment 0x28effa786a8 <line:239:3, col:4> Text="  "
    |-ParamCommandComment 0x28effa786f8 <col:5, line:240:4> [in] explicitly Param="icv" ParamIndex=1
    | `-ParagraphComment 0x28effa787a0 <line:239:20, line:240:4>
    |   |-TextComment 0x28effa78750 <line:239:20, col:74> Text="    (Non-standard) IV, 4 bytes. NULL = use default_aiv."
    |   `-TextComment 0x28effa78770 <line:240:3, col:4> Text="  "
    |-ParamCommandComment 0x28effa787c0 <col:5, line:243:4> [out] explicitly Param="out" ParamIndex=2
    | `-ParagraphComment 0x28effa788b8 <line:240:20, line:243:4>
    |   |-TextComment 0x28effa78818 <line:240:20, col:70> Text="    Plaintext. Minimal buffer length = inlen bytes."
    |   |-TextComment 0x28effa78838 <line:241:3, col:77> Text="                     Input and output buffers can overlap if block function"
    |   |-TextComment 0x28effa78858 <line:242:3, col:37> Text="                     supports that."
    |   `-TextComment 0x28effa78878 <line:243:3, col:4> Text="  "
    |-ParamCommandComment 0x28effa788d8 <col:5, line:244:4> [in] explicitly Param="in" ParamIndex=3
    | `-ParagraphComment 0x28effa80a20 <line:243:19, line:244:4>
    |   |-TextComment 0x28effa809d0 <line:243:19, col:53> Text="     Ciphertext as n 64-bit blocks."
    |   `-TextComment 0x28effa809f0 <line:244:3, col:4> Text="  "
    |-ParamCommandComment 0x28effa80a40 <col:5, line:245:4> [in] explicitly Param="inlen" ParamIndex=4
    | `-ParagraphComment 0x28effa80ae8 <line:244:22, line:245:4>
    |   |-TextComment 0x28effa80a98 <line:244:22, col:36> Text="  Length of in."
    |   `-TextComment 0x28effa80ab8 <line:245:3, col:4> Text="  "
    |-ParamCommandComment 0x28effa80b08 <col:5, line:246:4> [in] explicitly Param="block" ParamIndex=5
    | `-ParagraphComment 0x28effa80bb0 <line:245:22, line:246:4>
    |   |-TextComment 0x28effa80b60 <line:245:22, col:49> Text="  Block processing function."
    |   `-TextComment 0x28effa80b80 <line:246:3, col:4> Text="  "
    `-BlockCommandComment 0x28effa80bd0 <col:5, line:249:76> Name="return"
      `-ParagraphComment 0x28effa80c98 <line:246:12, line:249:76>
        |-TextComment 0x28effa80bf8 <line:246:12, col:75> Text="            0 if inlen is out of range [16, CRYPTO128_WRAP_MAX],"
        |-TextComment 0x28effa80c18 <line:247:3, col:57> Text="                     or if inlen is not a multiple of 8"
        |-TextComment 0x28effa80c38 <line:248:3, col:75> Text="                     or if IV and message length indicator doesn't match."
        `-TextComment 0x28effa80c58 <line:249:3, col:76> Text="                     Output length if unwrapping succeeded and IV matches."
