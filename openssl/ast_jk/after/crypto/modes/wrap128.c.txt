TranslationUnitDecl 0x28475306958 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x284753071f0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x28475306ef0 '__int128'
|-TypedefDecl 0x28475307260 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x28475306f10 'unsigned __int128'
|-TypedefDecl 0x28475307598 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x28475307350 'struct __NSConstantString_tag'
|   `-Record 0x284753072b8 '__NSConstantString_tag'
|-TypedefDecl 0x28475307608 <<invalid sloc>> <invalid sloc> implicit referenced size_t 'unsigned long long'
| `-BuiltinType 0x28475306b30 'unsigned long long'
|-TypedefDecl 0x284753076a0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x28475307660 'char *'
|   `-BuiltinType 0x284753069f0 'char'
|-TypedefDecl 0x28475307710 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x28475307660 'char *'
|   `-BuiltinType 0x284753069f0 'char'
|-VarDecl 0x28475307850 <.//openssl//file_jk/after\crypto\modes\wrap128.c:20:1, line:22:1> line:20:28 used default_iv 'const unsigned char [8]' static cinit
| |-InitListExpr 0x28476cfef78 <col:43, line:22:1> 'const unsigned char [8]'
| | |-ImplicitCastExpr 0x28476cfefb8 <line:21:5> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28475307900 <col:5> 'int' 166
| | |-ImplicitCastExpr 0x28476cfefd8 <col:11> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28475307928 <col:11> 'int' 166
| | |-ImplicitCastExpr 0x28476cff000 <col:17> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28476cfede0 <col:17> 'int' 166
| | |-ImplicitCastExpr 0x28476cff038 <col:23> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28476cfee08 <col:23> 'int' 166
| | |-ImplicitCastExpr 0x28476cff050 <col:29> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28476cfee30 <col:29> 'int' 166
| | |-ImplicitCastExpr 0x28476cff0a8 <col:35> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28476cfee58 <col:35> 'int' 166
| | |-ImplicitCastExpr 0x28476cff0c0 <col:41> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28476cfee80 <col:41> 'int' 166
| | `-ImplicitCastExpr 0x28476cff0d8 <col:47> 'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x28476cfeea8 <col:47> 'int' 166
| `-FullComment 0x28476d0bcf8 <line:19:4, col:51>
|   `-ParagraphComment 0x28476d0bcd0 <col:4, col:51>
|     `-TextComment 0x28476d0bca8 <col:4, col:51> Text=" RFC 3394 section 2.2.3.1 Default Initial Value "
|-VarDecl 0x28476cff1c0 <line:25:1, line:27:1> line:25:28 used default_aiv 'const unsigned char [4]' static cinit
| |-InitListExpr 0x28476cff350 <col:44, line:27:1> 'const unsigned char [4]'
| | |-ImplicitCastExpr 0x28476cff390 <line:26:5> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28476cff228 <col:5> 'int' 166
| | |-ImplicitCastExpr 0x28476cff3b0 <col:11> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28476cff250 <col:11> 'int' 89
| | |-ImplicitCastExpr 0x28476cff3d8 <col:17> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x28476cff278 <col:17> 'int' 89
| | `-ImplicitCastExpr 0x28476cff410 <col:23> 'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x28476cff2a0 <col:23> 'int' 166
| `-FullComment 0x28476d0bda8 <line:24:4, col:65>
|   `-ParagraphComment 0x28476d0bd80 <col:4, col:65>
|     `-TextComment 0x28476d0bd58 <col:4, col:65> Text=" RFC 5649 section 3 Alternative Initial Value 32-bit constant "
|-FunctionDecl 0x28476cff988 <line:48:1, line:81:1> line:48:8 invalid CRYPTO_128_wrap 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
| |-ParmVarDecl 0x28476cff548 <col:24, col:30> col:30 used key 'void *'
| |-ParmVarDecl 0x28476cff5f0 <col:35, col:56> col:56 used iv 'const unsigned char *'
| |-ParmVarDecl 0x28476cff6a0 <line:49:24, col:39> col:39 used out 'unsigned char *'
| |-ParmVarDecl 0x28476cff720 <line:50:24, col:45> col:45 used in 'const unsigned char *'
| |-ParmVarDecl 0x28476cff798 <col:49, col:56> col:56 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28476cff818 <line:51:24, col:35> col:35 invalid block 'int'
| |-CompoundStmt 0x28476d001b8 <line:52:1, line:81:1>
| | |-DeclStmt 0x28476cffc98 <line:53:5, col:32>
| | | |-VarDecl 0x28476cffa88 <col:5, col:20> col:20 used A 'unsigned char *'
| | | |-VarDecl 0x28476cffb90 <col:5, col:27> col:23 used B 'unsigned char [16]'
| | | `-VarDecl 0x28476cffc10 <col:5, col:31> col:31 used R 'unsigned char *'
| | |-DeclStmt 0x28476d00e88 <line:54:5, col:19>
| | | |-VarDecl 0x28476cffcc0 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
| | | |-VarDecl 0x28476cffd38 <col:5, col:15> col:15 used j 'size_t':'unsigned long long'
| | | `-VarDecl 0x28476d00e00 <col:5, col:18> col:18 used t 'size_t':'unsigned long long'
| | |-IfStmt 0x28476d011d8 <line:55:5, line:56:16>
| | | |-BinaryOperator 0x28476d01168 <line:55:9, col:69> 'int' '||'
| | | | |-BinaryOperator 0x28476d01028 <col:9, col:37> 'int' '||'
| | | | | |-ParenExpr 0x28476d00f50 <col:9, col:21> 'unsigned long long'
| | | | | | `-BinaryOperator 0x28476d00f30 <col:10, col:18> 'unsigned long long' '&'
| | | | | |   |-ImplicitCastExpr 0x28476d00f00 <col:10> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | |   | `-DeclRefExpr 0x28476d00ea0 <col:10> 'size_t':'unsigned long long' lvalue ParmVar 0x28476cff798 'inlen' 'size_t':'unsigned long long'
| | | | | |   `-ImplicitCastExpr 0x28476d00f18 <col:18> 'unsigned long long' <IntegralCast>
| | | | | |     `-IntegerLiteral 0x28476d00ed8 <col:18> 'int' 7
| | | | | `-ParenExpr 0x28476d01008 <col:26, col:37> 'int'
| | | | |   `-BinaryOperator 0x28476d00fe8 <col:27, col:35> 'int' '<'
| | | | |     |-ImplicitCastExpr 0x28476d00fb8 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0x28476d00f70 <col:27> 'size_t':'unsigned long long' lvalue ParmVar 0x28476cff798 'inlen' 'size_t':'unsigned long long'
| | | | |     `-ImplicitCastExpr 0x28476d00fd0 <col:35> 'unsigned long long' <IntegralCast>
| | | | |       `-IntegerLiteral 0x28476d00f90 <col:35> 'int' 16
| | | | `-ParenExpr 0x28476d01148 <col:42, col:69> 'int'
| | | |   `-BinaryOperator 0x28476d01128 <col:43, line:32:38> 'int' '>'
| | | |     |-ImplicitCastExpr 0x28476d010f8 <line:55:43> 'size_t':'unsigned long long' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x28476d01048 <col:43> 'size_t':'unsigned long long' lvalue ParmVar 0x28476cff798 'inlen' 'size_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x28476d01110 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
| | | |       `-ParenExpr 0x28476d010d8 <col:28, col:38> 'unsigned long'
| | | |         `-BinaryOperator 0x28476d010b8 <col:29, col:36> 'unsigned long' '<<'
| | | |           |-IntegerLiteral 0x28476d01068 <col:29> 'unsigned long' 1
| | | |           `-IntegerLiteral 0x28476d01090 <col:36> 'int' 31
| | | `-ReturnStmt 0x28476d011c8 <line:56:9, col:16>
| | |   `-ImplicitCastExpr 0x28476d011b0 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x28476d01188 <col:16> 'int' 0
| | |-BinaryOperator 0x28476d01278 <line:57:5, col:9> 'unsigned char *' '='
| | | |-DeclRefExpr 0x28476d011f0 <col:5> 'unsigned char *' lvalue Var 0x28476cffa88 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x28476d01260 <col:9> 'unsigned char *' <ArrayToPointerDecay>
| | |   `-DeclRefExpr 0x28476d01228 <col:9> 'unsigned char [16]' lvalue Var 0x28476cffb90 'B' 'unsigned char [16]'
| | |-BinaryOperator 0x28476d01310 <line:58:5, col:9> 'size_t':'unsigned long long' '='
| | | |-DeclRefExpr 0x28476d01298 <col:5> 'size_t':'unsigned long long' lvalue Var 0x28476d00e00 't' 'size_t':'unsigned long long'
| | | `-ImplicitCastExpr 0x28476d012f8 <col:9> 'size_t':'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28476d012d0 <col:9> 'int' 1
| | |-CallExpr 0x28476d01730 <line:59:5, col:31> 'void *'
| | | |-ImplicitCastExpr 0x28476d01718 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28476d01590 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28476d013a0 'memmove' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28476d01768 <col:13, col:19> 'void *' <BitCast>
| | | | `-BinaryOperator 0x28476d01640 <col:13, col:19> 'unsigned char *' '+'
| | | |   |-ImplicitCastExpr 0x28476d01628 <col:13> 'unsigned char *' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x28476d015c8 <col:13> 'unsigned char *' lvalue ParmVar 0x28476cff6a0 'out' 'unsigned char *'
| | | |   `-IntegerLiteral 0x28476d01600 <col:19> 'int' 8
| | | |-ImplicitCastExpr 0x28476d01798 <col:22> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28476d01780 <col:22> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476d01660 <col:22> 'const unsigned char *' lvalue ParmVar 0x28476cff720 'in' 'const unsigned char *'
| | | `-ImplicitCastExpr 0x28476d017b0 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x28476d01698 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x28476cff798 'inlen' 'size_t':'unsigned long long'
| | |-IfStmt 0x28476d018a8 <line:60:5, line:61:14>
| | | |-UnaryOperator 0x28476d01818 <line:60:9, col:10> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x28476d01800 <col:10> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476d017c8 <col:10> 'const unsigned char *' lvalue ParmVar 0x28476cff5f0 'iv' 'const unsigned char *'
| | | `-BinaryOperator 0x28476d01888 <line:61:9, col:14> 'const unsigned char *' '='
| | |   |-DeclRefExpr 0x28476d01830 <col:9> 'const unsigned char *' lvalue ParmVar 0x28476cff5f0 'iv' 'const unsigned char *'
| | |   `-ImplicitCastExpr 0x28476d01870 <col:14> 'const unsigned char *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x28476d01850 <col:14> 'const unsigned char [8]' lvalue Var 0x28475307850 'default_iv' 'const unsigned char [8]'
| | |-CallExpr 0x28476d01b98 <line:63:5, col:20> 'void *'
| | | |-ImplicitCastExpr 0x28476d01b80 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28476d01ab0 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28476d01be8 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28476d01bd0 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476d01ae8 <col:12> 'unsigned char *' lvalue Var 0x28476cffa88 'A' 'unsigned char *'
| | | |-ImplicitCastExpr 0x28476d01c18 <col:15> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28476d01c00 <col:15> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476d01b08 <col:15> 'const unsigned char *' lvalue ParmVar 0x28476cff5f0 'iv' 'const unsigned char *'
| | | `-ImplicitCastExpr 0x28476d01c30 <col:19> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28476d01b28 <col:19> 'int' 8
| | |-ForStmt 0x28476cfff28 <line:65:5, line:78:5>
| | | |-BinaryOperator 0x28476d01cc0 <line:65:10, col:14> 'size_t':'unsigned long long' '='
| | | | |-DeclRefExpr 0x28476d01c48 <col:10> 'size_t':'unsigned long long' lvalue Var 0x28476cffd38 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x28476d01ca8 <col:14> 'size_t':'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28476d01c80 <col:14> 'int' 0
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x28476d01d58 <col:17, col:21> 'int' '<'
| | | | |-ImplicitCastExpr 0x28476d01d28 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28476d01ce0 <col:17> 'size_t':'unsigned long long' lvalue Var 0x28476cffd38 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x28476d01d40 <col:21> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28476d01d00 <col:21> 'int' 6
| | | |-UnaryOperator 0x28476d01d98 <col:24, col:25> 'size_t':'unsigned long long' postfix '++'
| | | | `-DeclRefExpr 0x28476d01d78 <col:24> 'size_t':'unsigned long long' lvalue Var 0x28476cffd38 'j' 'size_t':'unsigned long long'
| | | `-CompoundStmt 0x28476cfff08 <col:29, line:78:5>
| | |   |-BinaryOperator 0x28476d03eb0 <line:66:9, col:19> 'unsigned char *' '='
| | |   | |-DeclRefExpr 0x28476d01db0 <col:9> 'unsigned char *' lvalue Var 0x28476cffc10 'R' 'unsigned char *'
| | |   | `-BinaryOperator 0x28476d03e90 <col:13, col:19> 'unsigned char *' '+'
| | |   |   |-ImplicitCastExpr 0x28476d03e78 <col:13> 'unsigned char *' <LValueToRValue>
| | |   |   | `-DeclRefExpr 0x28476d03e30 <col:13> 'unsigned char *' lvalue ParmVar 0x28476cff6a0 'out' 'unsigned char *'
| | |   |   `-IntegerLiteral 0x28476d03e50 <col:19> 'int' 8
| | |   `-ForStmt 0x28476cffed0 <line:67:9, line:77:9>
| | |     |-BinaryOperator 0x28476d03f48 <line:67:14, col:18> 'size_t':'unsigned long long' '='
| | |     | |-DeclRefExpr 0x28476d03ed0 <col:14> 'size_t':'unsigned long long' lvalue Var 0x28476cffcc0 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x28476d03f30 <col:18> 'size_t':'unsigned long long' <IntegralCast>
| | |     |   `-IntegerLiteral 0x28476d03f08 <col:18> 'int' 0
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x28476d03fd8 <col:21, col:25> 'int' '<'
| | |     | |-ImplicitCastExpr 0x28476d03fa8 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x28476d03f68 <col:21> 'size_t':'unsigned long long' lvalue Var 0x28476cffcc0 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x28476d03fc0 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   `-DeclRefExpr 0x28476d03f88 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x28476cff798 'inlen' 'size_t':'unsigned long long'
| | |     |-BinaryOperator 0x28476d04158 <col:32, col:50> 'unsigned char *' ','
| | |     | |-BinaryOperator 0x28476d040c0 <col:32, col:41> 'size_t':'unsigned long long' ','
| | |     | | |-CompoundAssignOperator 0x28476d04058 <col:32, col:37> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| | |     | | | |-DeclRefExpr 0x28476d03ff8 <col:32> 'size_t':'unsigned long long' lvalue Var 0x28476cffcc0 'i' 'size_t':'unsigned long long'
| | |     | | | `-ImplicitCastExpr 0x28476d04040 <col:37> 'unsigned long long' <IntegralCast>
| | |     | | |   `-IntegerLiteral 0x28476d04018 <col:37> 'int' 8
| | |     | | `-UnaryOperator 0x28476d040a8 <col:40, col:41> 'size_t':'unsigned long long' postfix '++'
| | |     | |   `-DeclRefExpr 0x28476d04088 <col:40> 'size_t':'unsigned long long' lvalue Var 0x28476d00e00 't' 'size_t':'unsigned long long'
| | |     | `-CompoundAssignOperator 0x28476d04128 <col:45, col:50> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
| | |     |   |-DeclRefExpr 0x28476d040e0 <col:45> 'unsigned char *' lvalue Var 0x28476cffc10 'R' 'unsigned char *'
| | |     |   `-IntegerLiteral 0x28476d04100 <col:50> 'int' 8
| | |     `-CompoundStmt 0x28476cffea0 <col:53, line:77:9>
| | |       |-CallExpr 0x28476d04290 <line:68:13, col:31> 'void *'
| | |       | |-ImplicitCastExpr 0x28476d04278 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |       | | `-DeclRefExpr 0x28476d04178 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |       | |-ImplicitCastExpr 0x28476d042c8 <col:20, col:24> 'void *' <BitCast>
| | |       | | `-BinaryOperator 0x28476d041f8 <col:20, col:24> 'unsigned char *' '+'
| | |       | |   |-ImplicitCastExpr 0x28476d041e0 <col:20> 'unsigned char *' <ArrayToPointerDecay>
| | |       | |   | `-DeclRefExpr 0x28476d04198 <col:20> 'unsigned char [16]' lvalue Var 0x28476cffb90 'B' 'unsigned char [16]'
| | |       | |   `-IntegerLiteral 0x28476d041b8 <col:24> 'int' 8
| | |       | |-ImplicitCastExpr 0x28476d042f8 <col:27> 'const void *' <BitCast>
| | |       | | `-ImplicitCastExpr 0x28476d042e0 <col:27> 'unsigned char *' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x28476d04218 <col:27> 'unsigned char *' lvalue Var 0x28476cffc10 'R' 'unsigned char *'
| | |       | `-ImplicitCastExpr 0x28476d04310 <col:30> 'unsigned long long' <IntegralCast>
| | |       |   `-IntegerLiteral 0x28476d04238 <col:30> 'int' 8
| | |       |-CompoundAssignOperator 0x28476d04550 <line:70:13, col:45> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       | |-ArraySubscriptExpr 0x28476d04400 <col:13, col:16> 'unsigned char' lvalue
| | |       | | |-ImplicitCastExpr 0x28476d043e8 <col:13> 'unsigned char *' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x28476d043a0 <col:13> 'unsigned char *' lvalue Var 0x28476cffa88 'A' 'unsigned char *'
| | |       | | `-IntegerLiteral 0x28476d043c0 <col:15> 'int' 7
| | |       | `-ImplicitCastExpr 0x28476d04538 <col:21, col:45> 'int' <IntegralCast>
| | |       |   `-CStyleCastExpr 0x28476d04510 <col:21, col:45> 'unsigned char' <IntegralCast>
| | |       |     `-ParenExpr 0x28476d044f0 <col:36, col:45> 'unsigned long long'
| | |       |       `-BinaryOperator 0x28476d04498 <col:37, col:41> 'unsigned long long' '&'
| | |       |         |-ImplicitCastExpr 0x28476d04468 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |         | `-DeclRefExpr 0x28476d04420 <col:37> 'size_t':'unsigned long long' lvalue Var 0x28476d00e00 't' 'size_t':'unsigned long long'
| | |       |         `-ImplicitCastExpr 0x28476d04480 <col:41> 'unsigned long long' <IntegralCast>
| | |       |           `-IntegerLiteral 0x28476d04440 <col:41> 'int' 255
| | |       |-IfStmt 0x28476d04d18 <line:71:13, line:75:13>
| | |       | |-BinaryOperator 0x28476d045f8 <line:71:17, col:21> 'int' '>'
| | |       | | |-ImplicitCastExpr 0x28476d045c8 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x28476d04580 <col:17> 'size_t':'unsigned long long' lvalue Var 0x28476d00e00 't' 'size_t':'unsigned long long'
| | |       | | `-ImplicitCastExpr 0x28476d045e0 <col:21> 'unsigned long long' <IntegralCast>
| | |       | |   `-IntegerLiteral 0x28476d045a0 <col:21> 'int' 255
| | |       | `-CompoundStmt 0x28476d04cf0 <col:27, line:75:13>
| | |       |   |-CompoundAssignOperator 0x28476d04830 <line:72:17, col:56> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x28476d04678 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x28476d04660 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x28476d04618 <col:17> 'unsigned char *' lvalue Var 0x28476cffa88 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x28476d04638 <col:19> 'int' 6
| | |       |   | `-ImplicitCastExpr 0x28476d04818 <col:25, col:56> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x28476d047f0 <col:25, col:56> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x28476d047d0 <col:40, col:56> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x28476d04778 <col:41, col:52> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x28476d04718 <col:41, col:48> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x28476d046f8 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x28476d046e0 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x28476d04698 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28476d00e00 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x28476d046b8 <col:47> 'int' 8
| | |       |   |         `-ImplicitCastExpr 0x28476d04760 <col:52> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x28476d04738 <col:52> 'int' 255
| | |       |   |-CompoundAssignOperator 0x28476d04a78 <line:73:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x28476d048c0 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x28476d048a8 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x28476d04860 <col:17> 'unsigned char *' lvalue Var 0x28476cffa88 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x28476d04880 <col:19> 'int' 5
| | |       |   | `-ImplicitCastExpr 0x28476d04a60 <col:25, col:57> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x28476d04a38 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x28476d04a18 <col:40, col:57> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x28476d049c0 <col:41, col:53> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x28476d04960 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x28476d04940 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x28476d04928 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x28476d048e0 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28476d00e00 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x28476d04900 <col:47> 'int' 16
| | |       |   |         `-ImplicitCastExpr 0x28476d049a8 <col:53> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x28476d04980 <col:53> 'int' 255
| | |       |   `-CompoundAssignOperator 0x28476d04cc0 <line:74:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |     |-ArraySubscriptExpr 0x28476d04b08 <col:17, col:20> 'unsigned char' lvalue
| | |       |     | |-ImplicitCastExpr 0x28476d04af0 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |     | | `-DeclRefExpr 0x28476d04aa8 <col:17> 'unsigned char *' lvalue Var 0x28476cffa88 'A' 'unsigned char *'
| | |       |     | `-IntegerLiteral 0x28476d04ac8 <col:19> 'int' 4
| | |       |     `-ImplicitCastExpr 0x28476d04ca8 <col:25, col:57> 'int' <IntegralCast>
| | |       |       `-CStyleCastExpr 0x28476d04c80 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |         `-ParenExpr 0x28476d04c60 <col:40, col:57> 'unsigned long long'
| | |       |           `-BinaryOperator 0x28476d04c08 <col:41, col:53> 'unsigned long long' '&'
| | |       |             |-ParenExpr 0x28476d04ba8 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |             | `-BinaryOperator 0x28476d04b88 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |             |   |-ImplicitCastExpr 0x28476d04b70 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |             |   | `-DeclRefExpr 0x28476d04b28 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28476d00e00 't' 'size_t':'unsigned long long'
| | |       |             |   `-IntegerLiteral 0x28476d04b48 <col:47> 'int' 24
| | |       |             `-ImplicitCastExpr 0x28476d04bf0 <col:53> 'unsigned long long' <IntegralCast>
| | |       |               `-IntegerLiteral 0x28476d04bc8 <col:53> 'int' 255
| | |       `-CallExpr 0x28476cffe08 <line:76:13, col:31> 'void *'
| | |         |-ImplicitCastExpr 0x28476cffdf0 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0x28476d04d30 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |         |-ImplicitCastExpr 0x28476cffe58 <col:20> 'void *' <BitCast>
| | |         | `-ImplicitCastExpr 0x28476cffe40 <col:20> 'unsigned char *' <LValueToRValue>
| | |         |   `-DeclRefExpr 0x28476d04d50 <col:20> 'unsigned char *' lvalue Var 0x28476cffc10 'R' 'unsigned char *'
| | |         |-ImplicitCastExpr 0x28476cffe70 <col:23, col:27> 'const void *' <BitCast>
| | |         | `-BinaryOperator 0x28476d04dd0 <col:23, col:27> 'unsigned char *' '+'
| | |         |   |-ImplicitCastExpr 0x28476d04db8 <col:23> 'unsigned char *' <ArrayToPointerDecay>
| | |         |   | `-DeclRefExpr 0x28476d04d70 <col:23> 'unsigned char [16]' lvalue Var 0x28476cffb90 'B' 'unsigned char [16]'
| | |         |   `-IntegerLiteral 0x28476d04d90 <col:27> 'int' 8
| | |         `-ImplicitCastExpr 0x28476cffe88 <col:30> 'unsigned long long' <IntegralCast>
| | |           `-IntegerLiteral 0x28476d04df0 <col:30> 'int' 8
| | |-CallExpr 0x28476d00030 <line:79:5, col:21> 'void *'
| | | |-ImplicitCastExpr 0x28476d00018 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28476cfff60 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28476d00080 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28476d00068 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476cfff80 <col:12> 'unsigned char *' lvalue ParmVar 0x28476cff6a0 'out' 'unsigned char *'
| | | |-ImplicitCastExpr 0x28476d000b0 <col:17> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28476d00098 <col:17> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476cfffa0 <col:17> 'unsigned char *' lvalue Var 0x28476cffa88 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x28476d000c8 <col:20> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28476cfffc0 <col:20> 'int' 8
| | `-ReturnStmt 0x28476d00178 <line:80:5, col:20>
| |   `-BinaryOperator 0x28476d00158 <col:12, col:20> 'unsigned long long' '+'
| |     |-ImplicitCastExpr 0x28476d00128 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x28476d000e0 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x28476cff798 'inlen' 'size_t':'unsigned long long'
| |     `-ImplicitCastExpr 0x28476d00140 <col:20> 'unsigned long long' <IntegralCast>
| |       `-IntegerLiteral 0x28476d00100 <col:20> 'int' 8
| `-FullComment 0x28476d10510 <line:34:4, line:46:59>
|   |-ParagraphComment 0x28476d0be48 <line:34:4, col:49>
|   | `-TextComment 0x28476d0be20 <col:4, col:49> Text=" Wrapping according to RFC 3394 section 2.2.1."
|   |-ParagraphComment 0x28476d0be90 <line:36:3, col:4>
|   | `-TextComment 0x28476d0be68 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d0beb0 <col:5, line:37:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x28476d0bf58 <line:36:20, line:37:4>
|   |   |-TextComment 0x28476d0bf08 <line:36:20, col:33> Text="    Key value."
|   |   `-TextComment 0x28476d0bf28 <line:37:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d0bf78 <col:5, line:38:4> [in] explicitly Param="iv" ParamIndex=1
|   | `-ParagraphComment 0x28476d10080 <line:37:19, line:38:4>
|   |   |-TextComment 0x28476d10030 <line:37:19, col:73> Text="     IV value. Length = 8 bytes. NULL = use default_iv."
|   |   `-TextComment 0x28476d10050 <line:38:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d100a0 <col:5, line:39:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x28476d10140 <line:38:19, line:39:4>
|   |   |-TextComment 0x28476d100f0 <line:38:19, col:60> Text="     Plaintext as n 64-bit blocks, n >= 2."
|   |   `-TextComment 0x28476d10110 <line:39:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d10160 <col:5, line:40:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x28476d10208 <line:39:22, line:40:4>
|   |   |-TextComment 0x28476d101b8 <line:39:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x28476d101d8 <line:40:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d10228 <col:5, line:43:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x28476d10320 <line:40:20, line:43:4>
|   |   |-TextComment 0x28476d10280 <line:40:20, col:77> Text="    Ciphertext. Minimal buffer length = (inlen + 8) bytes."
|   |   |-TextComment 0x28476d102a0 <line:41:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x28476d102c0 <line:42:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x28476d102e0 <line:43:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d10340 <col:5, line:44:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x28476d103e8 <line:43:22, line:44:4>
|   |   |-TextComment 0x28476d10398 <line:43:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x28476d103b8 <line:44:3, col:4> Text="  "
|   `-BlockCommandComment 0x28476d10408 <col:5, line:46:59> Name="return"
|     `-ParagraphComment 0x28476d104a8 <line:44:12, line:46:59>
|       |-TextComment 0x28476d10430 <line:44:12, col:78> Text="            0 if inlen does not consist of n 64-bit blocks, n >= 2."
|       |-TextComment 0x28476d10450 <line:45:3, col:56> Text="                     or if inlen > CRYPTO128_WRAP_MAX."
|       `-TextComment 0x28476d10470 <line:46:3, col:59> Text="                     Output length if wrapping succeeded."
|-FunctionDecl 0x28476d013a0 <line:59:5> col:5 implicit used memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x28476d01440 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x28476d014a8 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x28476d01510 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28476d018c0 <line:63:5> col:5 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x28476d01960 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x28476d019c8 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x28476d01a30 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28476d00628 <line:99:1, line:129:1> line:99:15 invalid crypto_128_unwrap_raw 'size_t (void *, unsigned char *, unsigned char *, const unsigned char *, size_t, int)' static
| |-ParmVarDecl 0x28476d00238 <col:37, col:43> col:43 used key 'void *'
| |-ParmVarDecl 0x28476d002b8 <col:48, col:63> col:63 used iv 'unsigned char *'
| |-ParmVarDecl 0x28476d00338 <line:100:37, col:52> col:52 used out 'unsigned char *'
| |-ParmVarDecl 0x28476d003b8 <line:101:37, col:58> col:58 used in 'const unsigned char *'
| |-ParmVarDecl 0x28476d00430 <col:62, col:69> col:69 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28476d004b0 <line:102:37, col:48> col:48 invalid block 'int'
| |-CompoundStmt 0x28476d069f8 <line:103:1, line:129:1>
| | |-DeclStmt 0x28476d00900 <line:104:5, col:32>
| | | |-VarDecl 0x28476d00728 <col:5, col:20> col:20 used A 'unsigned char *'
| | | |-VarDecl 0x28476d007f8 <col:5, col:27> col:23 used B 'unsigned char [16]'
| | | `-VarDecl 0x28476d00878 <col:5, col:31> col:31 used R 'unsigned char *'
| | |-DeclStmt 0x28476d00aa0 <line:105:5, col:19>
| | | |-VarDecl 0x28476d00928 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
| | | |-VarDecl 0x28476d009a0 <col:5, col:15> col:15 used j 'size_t':'unsigned long long'
| | | `-VarDecl 0x28476d00a18 <col:5, col:18> col:18 used t 'size_t':'unsigned long long'
| | |-CompoundAssignOperator 0x28476d00b30 <line:106:5, col:14> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| | | |-DeclRefExpr 0x28476d00ab8 <col:5> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d00430 'inlen' 'size_t':'unsigned long long'
| | | `-ImplicitCastExpr 0x28476d00b18 <col:14> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28476d00af0 <col:14> 'int' 8
| | |-IfStmt 0x28476cfde60 <line:107:5, line:108:16>
| | | |-BinaryOperator 0x28476cfddf0 <line:107:9, col:69> 'int' '||'
| | | | |-BinaryOperator 0x28476d00cd0 <col:9, col:37> 'int' '||'
| | | | | |-ParenExpr 0x28476d00bf8 <col:9, col:21> 'unsigned long long'
| | | | | | `-BinaryOperator 0x28476d00bd8 <col:10, col:18> 'unsigned long long' '&'
| | | | | |   |-ImplicitCastExpr 0x28476d00ba8 <col:10> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | |   | `-DeclRefExpr 0x28476d00b60 <col:10> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d00430 'inlen' 'size_t':'unsigned long long'
| | | | | |   `-ImplicitCastExpr 0x28476d00bc0 <col:18> 'unsigned long long' <IntegralCast>
| | | | | |     `-IntegerLiteral 0x28476d00b80 <col:18> 'int' 7
| | | | | `-ParenExpr 0x28476d00cb0 <col:26, col:37> 'int'
| | | | |   `-BinaryOperator 0x28476d00c90 <col:27, col:35> 'int' '<'
| | | | |     |-ImplicitCastExpr 0x28476d00c60 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0x28476d00c18 <col:27> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d00430 'inlen' 'size_t':'unsigned long long'
| | | | |     `-ImplicitCastExpr 0x28476d00c78 <col:35> 'unsigned long long' <IntegralCast>
| | | | |       `-IntegerLiteral 0x28476d00c38 <col:35> 'int' 16
| | | | `-ParenExpr 0x28476cfddd0 <col:42, col:69> 'int'
| | | |   `-BinaryOperator 0x28476d00dd0 <col:43, line:32:38> 'int' '>'
| | | |     |-ImplicitCastExpr 0x28476d00da0 <line:107:43> 'size_t':'unsigned long long' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x28476d00cf0 <col:43> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d00430 'inlen' 'size_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x28476d00db8 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
| | | |       `-ParenExpr 0x28476d00d80 <col:28, col:38> 'unsigned long'
| | | |         `-BinaryOperator 0x28476d00d60 <col:29, col:36> 'unsigned long' '<<'
| | | |           |-IntegerLiteral 0x28476d00d10 <col:29> 'unsigned long' 1
| | | |           `-IntegerLiteral 0x28476d00d38 <col:36> 'int' 31
| | | `-ReturnStmt 0x28476cfde50 <line:108:9, col:16>
| | |   `-ImplicitCastExpr 0x28476cfde38 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x28476cfde10 <col:16> 'int' 0
| | |-BinaryOperator 0x28476cfdf00 <line:109:5, col:9> 'unsigned char *' '='
| | | |-DeclRefExpr 0x28476cfde78 <col:5> 'unsigned char *' lvalue Var 0x28476d00728 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x28476cfdee8 <col:9> 'unsigned char *' <ArrayToPointerDecay>
| | |   `-DeclRefExpr 0x28476cfdeb0 <col:9> 'unsigned char [16]' lvalue Var 0x28476d007f8 'B' 'unsigned char [16]'
| | |-BinaryOperator 0x28476cfe058 <line:110:5, col:24> 'size_t':'unsigned long long' '='
| | | |-DeclRefExpr 0x28476cfdf20 <col:5> 'size_t':'unsigned long long' lvalue Var 0x28476d00a18 't' 'size_t':'unsigned long long'
| | | `-BinaryOperator 0x28476cfe038 <col:9, col:24> 'unsigned long long' '*'
| | |   |-ImplicitCastExpr 0x28476cfe020 <col:9> 'unsigned long long' <IntegralCast>
| | |   | `-IntegerLiteral 0x28476cfdf58 <col:9> 'int' 6
| | |   `-ParenExpr 0x28476cfe000 <col:13, col:24> 'size_t':'unsigned long long'
| | |     `-BinaryOperator 0x28476cfdfe0 <col:14, col:23> 'size_t':'unsigned long long' '>>'
| | |       |-ImplicitCastExpr 0x28476cfdfc8 <col:14> 'size_t':'unsigned long long' <LValueToRValue>
| | |       | `-DeclRefExpr 0x28476cfdf80 <col:14> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d00430 'inlen' 'size_t':'unsigned long long'
| | |       `-IntegerLiteral 0x28476cfdfa0 <col:23> 'int' 3
| | |-CallExpr 0x28476cfe160 <line:111:5, col:20> 'void *'
| | | |-ImplicitCastExpr 0x28476cfe148 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28476cfe078 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28476cfe1b0 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28476cfe198 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476cfe098 <col:12> 'unsigned char *' lvalue Var 0x28476d00728 'A' 'unsigned char *'
| | | |-ImplicitCastExpr 0x28476cfe1e0 <col:15> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28476cfe1c8 <col:15> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476cfe0b8 <col:15> 'const unsigned char *' lvalue ParmVar 0x28476d003b8 'in' 'const unsigned char *'
| | | `-ImplicitCastExpr 0x28476cfe1f8 <col:19> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28476cfe0f0 <col:19> 'int' 8
| | |-CallExpr 0x28476cfe350 <line:112:5, col:31> 'void *'
| | | |-ImplicitCastExpr 0x28476cfe338 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28476cfe210 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28476d013a0 'memmove' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28476cfe3a0 <col:13> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28476cfe388 <col:13> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476cfe230 <col:13> 'unsigned char *' lvalue ParmVar 0x28476d00338 'out' 'unsigned char *'
| | | |-ImplicitCastExpr 0x28476cfe3b8 <col:18, col:23> 'const void *' <BitCast>
| | | | `-BinaryOperator 0x28476cfe2c8 <col:18, col:23> 'const unsigned char *' '+'
| | | |   |-ImplicitCastExpr 0x28476cfe2b0 <col:18> 'const unsigned char *' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x28476cfe268 <col:18> 'const unsigned char *' lvalue ParmVar 0x28476d003b8 'in' 'const unsigned char *'
| | | |   `-IntegerLiteral 0x28476cfe288 <col:23> 'int' 8
| | | `-ImplicitCastExpr 0x28476cfe3d0 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x28476cfe2e8 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d00430 'inlen' 'size_t':'unsigned long long'
| | |-ForStmt 0x28476d067b0 <line:113:5, line:126:5>
| | | |-BinaryOperator 0x28476cfe460 <line:113:10, col:14> 'size_t':'unsigned long long' '='
| | | | |-DeclRefExpr 0x28476cfe3e8 <col:10> 'size_t':'unsigned long long' lvalue Var 0x28476d009a0 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x28476cfe448 <col:14> 'size_t':'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28476cfe420 <col:14> 'int' 0
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x28476cfe4f8 <col:17, col:21> 'int' '<'
| | | | |-ImplicitCastExpr 0x28476cfe4c8 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28476cfe480 <col:17> 'size_t':'unsigned long long' lvalue Var 0x28476d009a0 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x28476cfe4e0 <col:21> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28476cfe4a0 <col:21> 'int' 6
| | | |-UnaryOperator 0x28476cfe538 <col:24, col:25> 'size_t':'unsigned long long' postfix '++'
| | | | `-DeclRefExpr 0x28476cfe518 <col:24> 'size_t':'unsigned long long' lvalue Var 0x28476d009a0 'j' 'size_t':'unsigned long long'
| | | `-CompoundStmt 0x28476d06790 <col:29, line:126:5>
| | |   |-BinaryOperator 0x28476cfe660 <line:114:9, col:27> 'unsigned char *' '='
| | |   | |-DeclRefExpr 0x28476cfe550 <col:9> 'unsigned char *' lvalue Var 0x28476d00878 'R' 'unsigned char *'
| | |   | `-BinaryOperator 0x28476cfe640 <col:13, col:27> 'unsigned char *' '-'
| | |   |   |-BinaryOperator 0x28476cfe5f8 <col:13, col:19> 'unsigned char *' '+'
| | |   |   | |-ImplicitCastExpr 0x28476cfe5c8 <col:13> 'unsigned char *' <LValueToRValue>
| | |   |   | | `-DeclRefExpr 0x28476cfe588 <col:13> 'unsigned char *' lvalue ParmVar 0x28476d00338 'out' 'unsigned char *'
| | |   |   | `-ImplicitCastExpr 0x28476cfe5e0 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
| | |   |   |   `-DeclRefExpr 0x28476cfe5a8 <col:19> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d00430 'inlen' 'size_t':'unsigned long long'
| | |   |   `-IntegerLiteral 0x28476cfe618 <col:27> 'int' 8
| | |   `-ForStmt 0x28476d06758 <line:115:9, line:125:9>
| | |     |-BinaryOperator 0x28476cfe6f8 <line:115:14, col:18> 'size_t':'unsigned long long' '='
| | |     | |-DeclRefExpr 0x28476cfe680 <col:14> 'size_t':'unsigned long long' lvalue Var 0x28476d00928 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x28476cfe6e0 <col:18> 'size_t':'unsigned long long' <IntegralCast>
| | |     |   `-IntegerLiteral 0x28476cfe6b8 <col:18> 'int' 0
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x28476cfe788 <col:21, col:25> 'int' '<'
| | |     | |-ImplicitCastExpr 0x28476cfe758 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x28476cfe718 <col:21> 'size_t':'unsigned long long' lvalue Var 0x28476d00928 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x28476cfe770 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   `-DeclRefExpr 0x28476cfe738 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d00430 'inlen' 'size_t':'unsigned long long'
| | |     |-BinaryOperator 0x28476cfe908 <col:32, col:50> 'unsigned char *' ','
| | |     | |-BinaryOperator 0x28476cfe870 <col:32, col:41> 'size_t':'unsigned long long' ','
| | |     | | |-CompoundAssignOperator 0x28476cfe808 <col:32, col:37> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| | |     | | | |-DeclRefExpr 0x28476cfe7a8 <col:32> 'size_t':'unsigned long long' lvalue Var 0x28476d00928 'i' 'size_t':'unsigned long long'
| | |     | | | `-ImplicitCastExpr 0x28476cfe7f0 <col:37> 'unsigned long long' <IntegralCast>
| | |     | | |   `-IntegerLiteral 0x28476cfe7c8 <col:37> 'int' 8
| | |     | | `-UnaryOperator 0x28476cfe858 <col:40, col:41> 'size_t':'unsigned long long' postfix '--'
| | |     | |   `-DeclRefExpr 0x28476cfe838 <col:40> 'size_t':'unsigned long long' lvalue Var 0x28476d00a18 't' 'size_t':'unsigned long long'
| | |     | `-CompoundAssignOperator 0x28476cfe8d8 <col:45, col:50> 'unsigned char *' '-=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
| | |     |   |-DeclRefExpr 0x28476cfe890 <col:45> 'unsigned char *' lvalue Var 0x28476d00878 'R' 'unsigned char *'
| | |     |   `-IntegerLiteral 0x28476cfe8b0 <col:50> 'int' 8
| | |     `-CompoundStmt 0x28476d06728 <col:53, line:125:9>
| | |       |-CompoundAssignOperator 0x28476cfead8 <line:116:13, col:45> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       | |-ArraySubscriptExpr 0x28476cfe988 <col:13, col:16> 'unsigned char' lvalue
| | |       | | |-ImplicitCastExpr 0x28476cfe970 <col:13> 'unsigned char *' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x28476cfe928 <col:13> 'unsigned char *' lvalue Var 0x28476d00728 'A' 'unsigned char *'
| | |       | | `-IntegerLiteral 0x28476cfe948 <col:15> 'int' 7
| | |       | `-ImplicitCastExpr 0x28476cfeac0 <col:21, col:45> 'int' <IntegralCast>
| | |       |   `-CStyleCastExpr 0x28476cfea98 <col:21, col:45> 'unsigned char' <IntegralCast>
| | |       |     `-ParenExpr 0x28476cfea78 <col:36, col:45> 'unsigned long long'
| | |       |       `-BinaryOperator 0x28476cfea20 <col:37, col:41> 'unsigned long long' '&'
| | |       |         |-ImplicitCastExpr 0x28476cfe9f0 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |         | `-DeclRefExpr 0x28476cfe9a8 <col:37> 'size_t':'unsigned long long' lvalue Var 0x28476d00a18 't' 'size_t':'unsigned long long'
| | |       |         `-ImplicitCastExpr 0x28476cfea08 <col:41> 'unsigned long long' <IntegralCast>
| | |       |           `-IntegerLiteral 0x28476cfe9c8 <col:41> 'int' 255
| | |       |-IfStmt 0x28476d06338 <line:117:13, line:121:13>
| | |       | |-BinaryOperator 0x28476cfeb80 <line:117:17, col:21> 'int' '>'
| | |       | | |-ImplicitCastExpr 0x28476cfeb50 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x28476cfeb08 <col:17> 'size_t':'unsigned long long' lvalue Var 0x28476d00a18 't' 'size_t':'unsigned long long'
| | |       | | `-ImplicitCastExpr 0x28476cfeb68 <col:21> 'unsigned long long' <IntegralCast>
| | |       | |   `-IntegerLiteral 0x28476cfeb28 <col:21> 'int' 255
| | |       | `-CompoundStmt 0x28476d06310 <col:27, line:121:13>
| | |       |   |-CompoundAssignOperator 0x28476d05e50 <line:118:17, col:56> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x28476cfec00 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x28476cfebe8 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x28476cfeba0 <col:17> 'unsigned char *' lvalue Var 0x28476d00728 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x28476cfebc0 <col:19> 'int' 6
| | |       |   | `-ImplicitCastExpr 0x28476cfeda0 <col:25, col:56> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x28476cfed78 <col:25, col:56> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x28476cfed58 <col:40, col:56> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x28476cfed00 <col:41, col:52> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x28476cfeca0 <col:41, col:48> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x28476cfec80 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x28476cfec68 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x28476cfec20 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28476d00a18 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x28476cfec40 <col:47> 'int' 8
| | |       |   |         `-ImplicitCastExpr 0x28476cfece8 <col:52> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x28476cfecc0 <col:52> 'int' 255
| | |       |   |-CompoundAssignOperator 0x28476d06098 <line:119:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x28476d05ee0 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x28476d05ec8 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x28476d05e80 <col:17> 'unsigned char *' lvalue Var 0x28476d00728 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x28476d05ea0 <col:19> 'int' 5
| | |       |   | `-ImplicitCastExpr 0x28476d06080 <col:25, col:57> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x28476d06058 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x28476d06038 <col:40, col:57> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x28476d05fe0 <col:41, col:53> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x28476d05f80 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x28476d05f60 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x28476d05f48 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x28476d05f00 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28476d00a18 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x28476d05f20 <col:47> 'int' 16
| | |       |   |         `-ImplicitCastExpr 0x28476d05fc8 <col:53> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x28476d05fa0 <col:53> 'int' 255
| | |       |   `-CompoundAssignOperator 0x28476d062e0 <line:120:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |     |-ArraySubscriptExpr 0x28476d06128 <col:17, col:20> 'unsigned char' lvalue
| | |       |     | |-ImplicitCastExpr 0x28476d06110 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |     | | `-DeclRefExpr 0x28476d060c8 <col:17> 'unsigned char *' lvalue Var 0x28476d00728 'A' 'unsigned char *'
| | |       |     | `-IntegerLiteral 0x28476d060e8 <col:19> 'int' 4
| | |       |     `-ImplicitCastExpr 0x28476d062c8 <col:25, col:57> 'int' <IntegralCast>
| | |       |       `-CStyleCastExpr 0x28476d062a0 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |         `-ParenExpr 0x28476d06280 <col:40, col:57> 'unsigned long long'
| | |       |           `-BinaryOperator 0x28476d06228 <col:41, col:53> 'unsigned long long' '&'
| | |       |             |-ParenExpr 0x28476d061c8 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |             | `-BinaryOperator 0x28476d061a8 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |             |   |-ImplicitCastExpr 0x28476d06190 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |             |   | `-DeclRefExpr 0x28476d06148 <col:42> 'size_t':'unsigned long long' lvalue Var 0x28476d00a18 't' 'size_t':'unsigned long long'
| | |       |             |   `-IntegerLiteral 0x28476d06168 <col:47> 'int' 24
| | |       |             `-ImplicitCastExpr 0x28476d06210 <col:53> 'unsigned long long' <IntegralCast>
| | |       |               `-IntegerLiteral 0x28476d061e8 <col:53> 'int' 255
| | |       |-CallExpr 0x28476d06468 <line:122:13, col:31> 'void *'
| | |       | |-ImplicitCastExpr 0x28476d06450 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |       | | `-DeclRefExpr 0x28476d06350 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |       | |-ImplicitCastExpr 0x28476d064a0 <col:20, col:24> 'void *' <BitCast>
| | |       | | `-BinaryOperator 0x28476d063d0 <col:20, col:24> 'unsigned char *' '+'
| | |       | |   |-ImplicitCastExpr 0x28476d063b8 <col:20> 'unsigned char *' <ArrayToPointerDecay>
| | |       | |   | `-DeclRefExpr 0x28476d06370 <col:20> 'unsigned char [16]' lvalue Var 0x28476d007f8 'B' 'unsigned char [16]'
| | |       | |   `-IntegerLiteral 0x28476d06390 <col:24> 'int' 8
| | |       | |-ImplicitCastExpr 0x28476d064d0 <col:27> 'const void *' <BitCast>
| | |       | | `-ImplicitCastExpr 0x28476d064b8 <col:27> 'unsigned char *' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x28476d063f0 <col:27> 'unsigned char *' lvalue Var 0x28476d00878 'R' 'unsigned char *'
| | |       | `-ImplicitCastExpr 0x28476d064e8 <col:30> 'unsigned long long' <IntegralCast>
| | |       |   `-IntegerLiteral 0x28476d06410 <col:30> 'int' 8
| | |       `-CallExpr 0x28476d06690 <line:124:13, col:31> 'void *'
| | |         |-ImplicitCastExpr 0x28476d06678 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0x28476d06578 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |         |-ImplicitCastExpr 0x28476d066e0 <col:20> 'void *' <BitCast>
| | |         | `-ImplicitCastExpr 0x28476d066c8 <col:20> 'unsigned char *' <LValueToRValue>
| | |         |   `-DeclRefExpr 0x28476d06598 <col:20> 'unsigned char *' lvalue Var 0x28476d00878 'R' 'unsigned char *'
| | |         |-ImplicitCastExpr 0x28476d066f8 <col:23, col:27> 'const void *' <BitCast>
| | |         | `-BinaryOperator 0x28476d06618 <col:23, col:27> 'unsigned char *' '+'
| | |         |   |-ImplicitCastExpr 0x28476d06600 <col:23> 'unsigned char *' <ArrayToPointerDecay>
| | |         |   | `-DeclRefExpr 0x28476d065b8 <col:23> 'unsigned char [16]' lvalue Var 0x28476d007f8 'B' 'unsigned char [16]'
| | |         |   `-IntegerLiteral 0x28476d065d8 <col:27> 'int' 8
| | |         `-ImplicitCastExpr 0x28476d06710 <col:30> 'unsigned long long' <IntegralCast>
| | |           `-IntegerLiteral 0x28476d06638 <col:30> 'int' 8
| | |-CallExpr 0x28476d068d0 <line:127:5, col:20> 'void *'
| | | |-ImplicitCastExpr 0x28476d068b8 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x28476d067e8 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x28476d06920 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28476d06908 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476d06808 <col:12> 'unsigned char *' lvalue ParmVar 0x28476d002b8 'iv' 'unsigned char *'
| | | |-ImplicitCastExpr 0x28476d06950 <col:16> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x28476d06938 <col:16> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476d06840 <col:16> 'unsigned char *' lvalue Var 0x28476d00728 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x28476d06968 <col:19> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x28476d06860 <col:19> 'int' 8
| | `-ReturnStmt 0x28476d069b8 <line:128:5, col:12>
| |   `-ImplicitCastExpr 0x28476d069a0 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
| |     `-DeclRefExpr 0x28476d06980 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d00430 'inlen' 'size_t':'unsigned long long'
| `-FullComment 0x28476d10cf8 <line:83:4, line:97:47>
|   |-ParagraphComment 0x28476d10668 <line:83:4, line:84:58>
|   | |-TextComment 0x28476d10618 <line:83:4, col:61> Text=" Unwrapping according to RFC 3394 section 2.2.2 steps 1-2."
|   | `-TextComment 0x28476d10638 <line:84:3, col:58> Text="  The IV check (step 3) is responsibility of the caller."
|   |-ParagraphComment 0x28476d106b0 <line:86:3, col:4>
|   | `-TextComment 0x28476d10688 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d106d0 <col:5, line:87:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x28476d10778 <line:86:20, line:87:4>
|   |   |-TextComment 0x28476d10728 <line:86:20, col:33> Text="    Key value."
|   |   `-TextComment 0x28476d10748 <line:87:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d10798 <col:5, line:88:4> [out] explicitly Param="iv" ParamIndex=1
|   | `-ParagraphComment 0x28476d10840 <line:87:19, line:88:4>
|   |   |-TextComment 0x28476d107f0 <line:87:19, col:75> Text="     Unchecked IV value. Minimal buffer length = 8 bytes."
|   |   `-TextComment 0x28476d10810 <line:88:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d10860 <col:5, line:92:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x28476d10980 <line:88:20, line:92:4>
|   |   |-TextComment 0x28476d108b8 <line:88:20, col:44> Text="    Plaintext without IV."
|   |   |-TextComment 0x28476d108d8 <line:89:3, col:65> Text="                     Minimal buffer length = (inlen - 8) bytes."
|   |   |-TextComment 0x28476d108f8 <line:90:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x28476d10918 <line:91:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x28476d10938 <line:92:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d109a0 <col:5, line:93:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x28476d10a40 <line:92:19, line:93:4>
|   |   |-TextComment 0x28476d109f0 <line:92:19, col:53> Text="     Ciphertext as n 64-bit blocks."
|   |   `-TextComment 0x28476d10a10 <line:93:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d10a60 <col:5, line:94:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x28476d10b08 <line:93:22, line:94:4>
|   |   |-TextComment 0x28476d10ab8 <line:93:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x28476d10ad8 <line:94:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d10b28 <col:5, line:95:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x28476d10bd0 <line:94:22, line:95:4>
|   |   |-TextComment 0x28476d10b80 <line:94:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x28476d10ba0 <line:95:3, col:4> Text="  "
|   `-BlockCommandComment 0x28476d10bf0 <col:5, line:97:47> Name="return"
|     `-ParagraphComment 0x28476d10c90 <line:95:12, line:97:47>
|       |-TextComment 0x28476d10c18 <line:95:12, col:74> Text="            0 if inlen is out of range [24, CRYPTO128_WRAP_MAX]"
|       |-TextComment 0x28476d10c38 <line:96:3, col:58> Text="                     or if inlen is not a multiple of 8."
|       `-TextComment 0x28476d10c58 <line:97:3, col:47> Text="                     Output length otherwise."
|-FunctionDecl 0x28476d06da8 <line:150:1, line:168:1> line:150:8 invalid CRYPTO_128_unwrap 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
| |-ParmVarDecl 0x28476d06a78 <col:26, col:32> col:32 used key 'void *'
| |-ParmVarDecl 0x28476d06af8 <col:37, col:58> col:58 used iv 'const unsigned char *'
| |-ParmVarDecl 0x28476d06b78 <line:151:26, col:41> col:41 used out 'unsigned char *'
| |-ParmVarDecl 0x28476d06bf8 <col:46, col:67> col:67 used in 'const unsigned char *'
| |-ParmVarDecl 0x28476d06c70 <line:152:26, col:33> col:33 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28476d06cf0 <col:40, col:51> col:51 invalid block 'int'
| |-CompoundStmt 0x28476d11a60 <line:153:1, line:168:1>
| | |-DeclStmt 0x28476d11100 <line:154:5, col:15>
| | | `-VarDecl 0x28476d11098 <col:5, col:12> col:12 used ret 'size_t':'unsigned long long'
| | |-DeclStmt 0x28476d111e8 <line:155:5, col:28>
| | | `-VarDecl 0x28476d11180 <col:5, col:27> col:19 used got_iv 'unsigned char [8]'
| | |-IfStmt 0x28476d11438 <line:158:5, line:159:16>
| | | |-BinaryOperator 0x28476d113c8 <line:158:9, col:16> 'int' '=='
| | | | |-ImplicitCastExpr 0x28476d11398 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28476d11350 <col:9> 'size_t':'unsigned long long' lvalue Var 0x28476d11098 'ret' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x28476d113b0 <col:16> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28476d11370 <col:16> 'int' 0
| | | `-ReturnStmt 0x28476d11428 <line:159:9, col:16>
| | |   `-ImplicitCastExpr 0x28476d11410 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x28476d113e8 <col:16> 'int' 0
| | |-IfStmt 0x28476d11530 <line:161:5, line:162:14>
| | | |-UnaryOperator 0x28476d114a0 <line:161:9, col:10> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x28476d11488 <col:10> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476d11450 <col:10> 'const unsigned char *' lvalue ParmVar 0x28476d06af8 'iv' 'const unsigned char *'
| | | `-BinaryOperator 0x28476d11510 <line:162:9, col:14> 'const unsigned char *' '='
| | |   |-DeclRefExpr 0x28476d114b8 <col:9> 'const unsigned char *' lvalue ParmVar 0x28476d06af8 'iv' 'const unsigned char *'
| | |   `-ImplicitCastExpr 0x28476d114f8 <col:14> 'const unsigned char *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x28476d114d8 <col:14> 'const unsigned char [8]' lvalue Var 0x28475307850 'default_iv' 'const unsigned char [8]'
| | |-IfStmt 0x28476d119d0 <line:163:5, line:166:5>
| | | |-CallExpr 0x28476d11730 <line:163:9, col:36> 'int'
| | | | |-ImplicitCastExpr 0x28476d11718 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | | | | `-DeclRefExpr 0x28476d11668 <col:9> 'int ()' Function 0x28476d115a0 'CRYPTO_memcmp' 'int ()'
| | | | |-ImplicitCastExpr 0x28476d11768 <col:23> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x28476d11688 <col:23> 'unsigned char [8]' lvalue Var 0x28476d11180 'got_iv' 'unsigned char [8]'
| | | | |-ImplicitCastExpr 0x28476d11780 <col:31> 'const unsigned char *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28476d116a8 <col:31> 'const unsigned char *' lvalue ParmVar 0x28476d06af8 'iv' 'const unsigned char *'
| | | | `-IntegerLiteral 0x28476d116c8 <col:35> 'int' 8
| | | `-CompoundStmt 0x28476d119b0 <col:39, line:166:5>
| | |   |-CallExpr 0x28476d11900 <line:164:9, col:33> 'int'
| | |   | |-ImplicitCastExpr 0x28476d118e8 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x28476d11888 <col:9> 'int ()' Function 0x28476d117c0 'OPENSSL_cleanse' 'int ()'
| | |   | |-ImplicitCastExpr 0x28476d11930 <col:25> 'unsigned char *' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x28476d118a8 <col:25> 'unsigned char *' lvalue ParmVar 0x28476d06b78 'out' 'unsigned char *'
| | |   | `-ImplicitCastExpr 0x28476d11948 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x28476d118c8 <col:30> 'size_t':'unsigned long long' lvalue Var 0x28476d11098 'ret' 'size_t':'unsigned long long'
| | |   `-ReturnStmt 0x28476d119a0 <line:165:9, col:16>
| | |     `-ImplicitCastExpr 0x28476d11988 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28476d11960 <col:16> 'int' 0
| | `-ReturnStmt 0x28476d11a20 <line:167:5, col:12>
| |   `-ImplicitCastExpr 0x28476d11a08 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
| |     `-DeclRefExpr 0x28476d119e8 <col:12> 'size_t':'unsigned long long' lvalue Var 0x28476d11098 'ret' 'size_t':'unsigned long long'
| `-FullComment 0x28476d13520 <line:131:4, line:148:47>
|   |-ParagraphComment 0x28476d10de8 <line:131:4, line:133:22>
|   | |-TextComment 0x28476d10d70 <line:131:4, col:75> Text=" Unwrapping according to RFC 3394 section 2.2.2, including the IV check."
|   | |-TextComment 0x28476d10d90 <line:132:3, col:75> Text="  The first block of plaintext has to match the supplied IV, otherwise an"
|   | `-TextComment 0x28476d10db0 <line:133:3, col:22> Text="  error is returned."
|   |-ParagraphComment 0x28476d10e30 <line:135:3, col:4>
|   | `-TextComment 0x28476d10e08 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d10e50 <col:5, line:136:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x28476d10ef8 <line:135:20, line:136:4>
|   |   |-TextComment 0x28476d10ea8 <line:135:20, col:33> Text="    Key value."
|   |   `-TextComment 0x28476d10ec8 <line:136:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d10f18 <col:5, line:138:4> [out] explicitly Param="iv" ParamIndex=1
|   | `-ParagraphComment 0x28476d10fe8 <line:136:19, line:138:4>
|   |   |-TextComment 0x28476d10f70 <line:136:19, col:67> Text="     IV value to match against. Length = 8 bytes."
|   |   |-TextComment 0x28476d10f90 <line:137:3, col:45> Text="                     NULL = use default_iv."
|   |   `-TextComment 0x28476d10fb0 <line:138:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d13060 <col:5, line:142:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x28476d13180 <line:138:20, line:142:4>
|   |   |-TextComment 0x28476d130b8 <line:138:20, col:44> Text="    Plaintext without IV."
|   |   |-TextComment 0x28476d130d8 <line:139:3, col:65> Text="                     Minimal buffer length = (inlen - 8) bytes."
|   |   |-TextComment 0x28476d130f8 <line:140:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x28476d13118 <line:141:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x28476d13138 <line:142:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d131a0 <col:5, line:143:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x28476d13240 <line:142:19, line:143:4>
|   |   |-TextComment 0x28476d131f0 <line:142:19, col:53> Text="     Ciphertext as n 64-bit blocks."
|   |   `-TextComment 0x28476d13210 <line:143:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d13260 <col:5, line:144:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x28476d13308 <line:143:22, line:144:4>
|   |   |-TextComment 0x28476d132b8 <line:143:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x28476d132d8 <line:144:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d13328 <col:5, line:145:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x28476d133d0 <line:144:22, line:145:4>
|   |   |-TextComment 0x28476d13380 <line:144:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x28476d133a0 <line:145:3, col:4> Text="  "
|   `-BlockCommandComment 0x28476d133f0 <col:5, line:148:47> Name="return"
|     `-ParagraphComment 0x28476d134b8 <line:145:12, line:148:47>
|       |-TextComment 0x28476d13418 <line:145:12, col:74> Text="            0 if inlen is out of range [24, CRYPTO128_WRAP_MAX]"
|       |-TextComment 0x28476d13438 <line:146:3, col:57> Text="                     or if inlen is not a multiple of 8"
|       |-TextComment 0x28476d13458 <line:147:3, col:61> Text="                     or if IV doesn't match expected value."
|       `-TextComment 0x28476d13478 <line:148:3, col:47> Text="                     Output length otherwise."
|-FunctionDecl 0x28476d11de8 <line:183:1, line:234:1> line:183:8 invalid CRYPTO_128_wrap_pad 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
| |-ParmVarDecl 0x28476d11ab8 <col:28, col:34> col:34 used key 'void *'
| |-ParmVarDecl 0x28476d11b38 <col:39, col:60> col:60 used icv 'const unsigned char *'
| |-ParmVarDecl 0x28476d11bb8 <line:184:28, col:43> col:43 used out 'unsigned char *'
| |-ParmVarDecl 0x28476d11c38 <line:185:28, col:49> col:49 used in 'const unsigned char *'
| |-ParmVarDecl 0x28476d11cb0 <col:53, col:60> col:60 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28476d11d30 <line:186:28, col:39> col:39 invalid block 'int'
| |-CompoundStmt 0x28476d0df88 <line:187:1, line:234:1>
| | |-DeclStmt 0x28476d12088 <line:194:5, col:49>
| | | `-VarDecl 0x28476d11ee0 <col:5, col:48> col:18 used blocks_padded 'const size_t':'const unsigned long long' cinit
| | |   `-BinaryOperator 0x28476d12068 <col:34, col:48> 'unsigned long long' '/'
| | |     |-ParenExpr 0x28476d11ff8 <col:34, col:44> 'unsigned long long'
| | |     | `-BinaryOperator 0x28476d11fd8 <col:35, col:43> 'unsigned long long' '+'
| | |     |   |-ImplicitCastExpr 0x28476d11fa8 <col:35> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x28476d11f48 <col:35> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | |     |   `-ImplicitCastExpr 0x28476d11fc0 <col:43> 'unsigned long long' <IntegralCast>
| | |     |     `-IntegerLiteral 0x28476d11f80 <col:43> 'int' 7
| | |     `-ImplicitCastExpr 0x28476d12050 <col:48> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28476d12018 <col:48> 'int' 8
| | |-DeclStmt 0x28476d12210 <line:195:5, col:48>
| | | `-VarDecl 0x28476d120b0 <col:5, col:47> col:18 used padded_len 'const size_t':'const unsigned long long' cinit
| | |   `-BinaryOperator 0x28476d121a8 <col:31, col:47> 'unsigned long long' '*'
| | |     |-ImplicitCastExpr 0x28476d12178 <col:31> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | `-DeclRefExpr 0x28476d12118 <col:31> 'const size_t':'const unsigned long long' lvalue Var 0x28476d11ee0 'blocks_padded' 'const size_t':'const unsigned long long'
| | |     `-ImplicitCastExpr 0x28476d12190 <col:47> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28476d12150 <col:47> 'int' 8
| | |-DeclStmt 0x28476d12390 <line:196:5, col:50>
| | | `-VarDecl 0x28476d12238 <col:5, col:45> col:18 used padding_len 'const size_t':'const unsigned long long' cinit
| | |   `-BinaryOperator 0x28476d12328 <col:32, col:45> 'unsigned long long' '-'
| | |     |-ImplicitCastExpr 0x28476d122f8 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | `-DeclRefExpr 0x28476d122a0 <col:32> 'const size_t':'const unsigned long long' lvalue Var 0x28476d120b0 'padded_len' 'const size_t':'const unsigned long long'
| | |     `-ImplicitCastExpr 0x28476d12310 <col:45> 'size_t':'unsigned long long' <LValueToRValue>
| | |       `-DeclRefExpr 0x28476d122d8 <col:45> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | |-DeclStmt 0x28476d12478 <line:198:5, col:25>
| | | `-VarDecl 0x28476d12410 <col:5, col:24> col:19 used aiv 'unsigned char [8]'
| | |-DeclStmt 0x28476d12510 <line:199:5, col:12>
| | | `-VarDecl 0x28476d124a8 <col:5, col:9> col:9 used ret 'int'
| | |-IfStmt 0x28476d12730 <line:202:5, line:203:16>
| | | |-BinaryOperator 0x28476d126c0 <line:202:9, line:32:38> 'int' '||'
| | | | |-BinaryOperator 0x28476d125a0 <line:202:9, col:18> 'int' '=='
| | | | | |-ImplicitCastExpr 0x28476d12570 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | | `-DeclRefExpr 0x28476d12528 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | | | | `-ImplicitCastExpr 0x28476d12588 <col:18> 'unsigned long long' <IntegralCast>
| | | | |   `-IntegerLiteral 0x28476d12548 <col:18> 'int' 0
| | | | `-BinaryOperator 0x28476d126a0 <col:23, line:32:38> 'int' '>='
| | | |   |-ImplicitCastExpr 0x28476d12670 <line:202:23> 'size_t':'unsigned long long' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x28476d125c0 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | | |   `-ImplicitCastExpr 0x28476d12688 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
| | | |     `-ParenExpr 0x28476d12650 <col:28, col:38> 'unsigned long'
| | | |       `-BinaryOperator 0x28476d12630 <col:29, col:36> 'unsigned long' '<<'
| | | |         |-IntegerLiteral 0x28476d125e0 <col:29> 'unsigned long' 1
| | | |         `-IntegerLiteral 0x28476d12608 <col:36> 'int' 31
| | | `-ReturnStmt 0x28476d12720 <line:203:9, col:16>
| | |   `-ImplicitCastExpr 0x28476d12708 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x28476d126e0 <col:16> 'int' 0
| | |-IfStmt 0x28476d12ac8 <line:206:5, line:209:27> has_else
| | | |-UnaryOperator 0x28476d12798 <line:206:9, col:10> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x28476d12780 <col:10> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28476d12748 <col:10> 'const unsigned char *' lvalue ParmVar 0x28476d11b38 'icv' 'const unsigned char *'
| | | |-CallExpr 0x28476d12898 <line:207:9, col:35> 'void *'
| | | | |-ImplicitCastExpr 0x28476d12880 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | | `-DeclRefExpr 0x28476d127b0 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | | |-ImplicitCastExpr 0x28476d128e8 <col:16> 'void *' <BitCast>
| | | | | `-ImplicitCastExpr 0x28476d128d0 <col:16> 'unsigned char *' <ArrayToPointerDecay>
| | | | |   `-DeclRefExpr 0x28476d127d0 <col:16> 'unsigned char [8]' lvalue Var 0x28476d12410 'aiv' 'unsigned char [8]'
| | | | |-ImplicitCastExpr 0x28476d12918 <col:21> 'const void *' <BitCast>
| | | | | `-ImplicitCastExpr 0x28476d12900 <col:21> 'const unsigned char *' <ArrayToPointerDecay>
| | | | |   `-DeclRefExpr 0x28476d12808 <col:21> 'const unsigned char [4]' lvalue Var 0x28476cff1c0 'default_aiv' 'const unsigned char [4]'
| | | | `-ImplicitCastExpr 0x28476d12930 <col:34> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28476d12828 <col:34> 'int' 4
| | | `-CallExpr 0x28476d12a18 <line:209:9, col:27> 'void *'
| | |   |-ImplicitCastExpr 0x28476d12a00 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x28476d12948 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |   |-ImplicitCastExpr 0x28476d12a68 <col:16> 'void *' <BitCast>
| | |   | `-ImplicitCastExpr 0x28476d12a50 <col:16> 'unsigned char *' <ArrayToPointerDecay>
| | |   |   `-DeclRefExpr 0x28476d12968 <col:16> 'unsigned char [8]' lvalue Var 0x28476d12410 'aiv' 'unsigned char [8]'
| | |   |-ImplicitCastExpr 0x28476d12a98 <col:21> 'const void *' <BitCast>
| | |   | `-ImplicitCastExpr 0x28476d12a80 <col:21> 'const unsigned char *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x28476d12988 <col:21> 'const unsigned char *' lvalue ParmVar 0x28476d11b38 'icv' 'const unsigned char *'
| | |   `-ImplicitCastExpr 0x28476d12ab0 <col:26> 'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x28476d129a8 <col:26> 'int' 4
| | |-BinaryOperator 0x28476d12c88 <line:211:5, col:30> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x28476d12b50 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x28476d12b38 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x28476d12af0 <col:5> 'unsigned char [8]' lvalue Var 0x28476d12410 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x28476d12b10 <col:9> 'int' 4
| | | `-ImplicitCastExpr 0x28476d12c70 <col:14, col:30> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x28476d12c50 <col:14, col:30> 'unsigned long long' '&'
| | |     |-ParenExpr 0x28476d12bf0 <col:14, col:26> 'size_t':'unsigned long long'
| | |     | `-BinaryOperator 0x28476d12bd0 <col:15, col:24> 'size_t':'unsigned long long' '>>'
| | |     |   |-ImplicitCastExpr 0x28476d12bb8 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x28476d12b70 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | |     |   `-IntegerLiteral 0x28476d12b90 <col:24> 'int' 24
| | |     `-ImplicitCastExpr 0x28476d12c38 <col:30> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28476d12c10 <col:30> 'int' 255
| | |-BinaryOperator 0x28476d12e40 <line:212:5, col:30> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x28476d12d08 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x28476d12cf0 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x28476d12ca8 <col:5> 'unsigned char [8]' lvalue Var 0x28476d12410 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x28476d12cc8 <col:9> 'int' 5
| | | `-ImplicitCastExpr 0x28476d12e28 <col:14, col:30> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x28476d12e08 <col:14, col:30> 'unsigned long long' '&'
| | |     |-ParenExpr 0x28476d12da8 <col:14, col:26> 'size_t':'unsigned long long'
| | |     | `-BinaryOperator 0x28476d12d88 <col:15, col:24> 'size_t':'unsigned long long' '>>'
| | |     |   |-ImplicitCastExpr 0x28476d12d70 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x28476d12d28 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | |     |   `-IntegerLiteral 0x28476d12d48 <col:24> 'int' 16
| | |     `-ImplicitCastExpr 0x28476d12df0 <col:30> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28476d12dc8 <col:30> 'int' 255
| | |-BinaryOperator 0x28476d12ff8 <line:213:5, col:29> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x28476d12ec0 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x28476d12ea8 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x28476d12e60 <col:5> 'unsigned char [8]' lvalue Var 0x28476d12410 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x28476d12e80 <col:9> 'int' 6
| | | `-ImplicitCastExpr 0x28476d12fe0 <col:14, col:29> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x28476d12fc0 <col:14, col:29> 'unsigned long long' '&'
| | |     |-ParenExpr 0x28476d12f60 <col:14, col:25> 'size_t':'unsigned long long'
| | |     | `-BinaryOperator 0x28476d12f40 <col:15, col:24> 'size_t':'unsigned long long' '>>'
| | |     |   |-ImplicitCastExpr 0x28476d12f28 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x28476d12ee0 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | |     |   `-IntegerLiteral 0x28476d12f00 <col:24> 'int' 8
| | |     `-ImplicitCastExpr 0x28476d12fa8 <col:29> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28476d12f80 <col:29> 'int' 255
| | |-BinaryOperator 0x28476d0d110 <line:214:5, col:22> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x28476d0d040 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x28476d0d028 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x28476d13018 <col:5> 'unsigned char [8]' lvalue Var 0x28476d12410 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x28476d0d000 <col:9> 'int' 7
| | | `-ImplicitCastExpr 0x28476d0d0f8 <col:14, col:22> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x28476d0d0d8 <col:14, col:22> 'unsigned long long' '&'
| | |     |-ImplicitCastExpr 0x28476d0d0a8 <col:14> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | `-DeclRefExpr 0x28476d0d060 <col:14> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | |     `-ImplicitCastExpr 0x28476d0d0c0 <col:22> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x28476d0d080 <col:22> 'int' 255
| | |-IfStmt 0x28476d0ded0 <line:216:5, line:231:5> has_else
| | | |-BinaryOperator 0x28476d0d1a8 <line:216:9, col:23> 'int' '=='
| | | | |-ImplicitCastExpr 0x28476d0d178 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28476d0d130 <col:9> 'const size_t':'const unsigned long long' lvalue Var 0x28476d120b0 'padded_len' 'const size_t':'const unsigned long long'
| | | | `-ImplicitCastExpr 0x28476d0d190 <col:23> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x28476d0d150 <col:23> 'int' 8
| | | |-CompoundStmt 0x28476d0daa0 <col:26, line:227:5>
| | | | |-CallExpr 0x28476d0d320 <line:222:9, col:35> 'void *'
| | | | | |-ImplicitCastExpr 0x28476d0d308 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | | | `-DeclRefExpr 0x28476d0d1c8 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28476d013a0 'memmove' 'void *(void *, const void *, unsigned long long)'
| | | | | |-ImplicitCastExpr 0x28476d0d358 <col:17, col:23> 'void *' <BitCast>
| | | | | | `-BinaryOperator 0x28476d0d260 <col:17, col:23> 'unsigned char *' '+'
| | | | | |   |-ImplicitCastExpr 0x28476d0d248 <col:17> 'unsigned char *' <LValueToRValue>
| | | | | |   | `-DeclRefExpr 0x28476d0d1e8 <col:17> 'unsigned char *' lvalue ParmVar 0x28476d11bb8 'out' 'unsigned char *'
| | | | | |   `-IntegerLiteral 0x28476d0d220 <col:23> 'int' 8
| | | | | |-ImplicitCastExpr 0x28476d0d388 <col:26> 'const void *' <BitCast>
| | | | | | `-ImplicitCastExpr 0x28476d0d370 <col:26> 'const unsigned char *' <LValueToRValue>
| | | | | |   `-DeclRefExpr 0x28476d0d280 <col:26> 'const unsigned char *' lvalue ParmVar 0x28476d11c38 'in' 'const unsigned char *'
| | | | | `-ImplicitCastExpr 0x28476d0d3a0 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x28476d0d2b8 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | | | |-CallExpr 0x28476d0d488 <line:223:9, col:27> 'void *'
| | | | | |-ImplicitCastExpr 0x28476d0d470 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | | | `-DeclRefExpr 0x28476d0d3b8 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | | | |-ImplicitCastExpr 0x28476d0d4d8 <col:16> 'void *' <BitCast>
| | | | | | `-ImplicitCastExpr 0x28476d0d4c0 <col:16> 'unsigned char *' <LValueToRValue>
| | | | | |   `-DeclRefExpr 0x28476d0d3d8 <col:16> 'unsigned char *' lvalue ParmVar 0x28476d11bb8 'out' 'unsigned char *'
| | | | | |-ImplicitCastExpr 0x28476d0d508 <col:21> 'const void *' <BitCast>
| | | | | | `-ImplicitCastExpr 0x28476d0d4f0 <col:21> 'unsigned char *' <ArrayToPointerDecay>
| | | | | |   `-DeclRefExpr 0x28476d0d3f8 <col:21> 'unsigned char [8]' lvalue Var 0x28476d12410 'aiv' 'unsigned char [8]'
| | | | | `-ImplicitCastExpr 0x28476d0d520 <col:26> 'unsigned long long' <IntegralCast>
| | | | |   `-IntegerLiteral 0x28476d0d418 <col:26> 'int' 8
| | | | |-CallExpr 0x28476d0d940 <line:224:9, col:47> 'void *'
| | | | | |-ImplicitCastExpr 0x28476d0d928 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
| | | | | | `-DeclRefExpr 0x28476d0d770 <col:9> 'void *(void *, int, unsigned long long)' Function 0x28476d0d580 'memset' 'void *(void *, int, unsigned long long)'
| | | | | |-ImplicitCastExpr 0x28476d0d978 <col:16, col:26> 'void *' <BitCast>
| | | | | | `-BinaryOperator 0x28476d0d860 <col:16, col:26> 'unsigned char *' '+'
| | | | | |   |-BinaryOperator 0x28476d0d808 <col:16, col:22> 'unsigned char *' '+'
| | | | | |   | |-ImplicitCastExpr 0x28476d0d7f0 <col:16> 'unsigned char *' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0x28476d0d7a8 <col:16> 'unsigned char *' lvalue ParmVar 0x28476d11bb8 'out' 'unsigned char *'
| | | | | |   | `-IntegerLiteral 0x28476d0d7c8 <col:22> 'int' 8
| | | | | |   `-ImplicitCastExpr 0x28476d0d848 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | |     `-DeclRefExpr 0x28476d0d828 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | | | | |-IntegerLiteral 0x28476d0d880 <col:33> 'int' 0
| | | | | `-ImplicitCastExpr 0x28476d0d990 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x28476d0d8a8 <col:36> 'const size_t':'const unsigned long long' lvalue Var 0x28476d12238 'padding_len' 'const size_t':'const unsigned long long'
| | | | `-BinaryOperator 0x28476d0da80 <line:226:9, col:15> 'int' '='
| | | |   |-DeclRefExpr 0x28476d0da20 <col:9> 'int' lvalue Var 0x28476d124a8 'ret' 'int'
| | | |   `-IntegerLiteral 0x28476d0da58 <col:15> 'int' 16
| | | `-CompoundStmt 0x28476d0deb0 <line:227:12, line:231:5>
| | |   |-CallExpr 0x28476d0dbb0 <line:228:9, col:31> 'void *'
| | |   | |-ImplicitCastExpr 0x28476d0db98 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x28476d0dad0 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28476d013a0 'memmove' 'void *(void *, const void *, unsigned long long)'
| | |   | |-ImplicitCastExpr 0x28476d0dc00 <col:17> 'void *' <BitCast>
| | |   | | `-ImplicitCastExpr 0x28476d0dbe8 <col:17> 'unsigned char *' <LValueToRValue>
| | |   | |   `-DeclRefExpr 0x28476d0daf0 <col:17> 'unsigned char *' lvalue ParmVar 0x28476d11bb8 'out' 'unsigned char *'
| | |   | |-ImplicitCastExpr 0x28476d0dc30 <col:22> 'const void *' <BitCast>
| | |   | | `-ImplicitCastExpr 0x28476d0dc18 <col:22> 'const unsigned char *' <LValueToRValue>
| | |   | |   `-DeclRefExpr 0x28476d0db10 <col:22> 'const unsigned char *' lvalue ParmVar 0x28476d11c38 'in' 'const unsigned char *'
| | |   | `-ImplicitCastExpr 0x28476d0dc48 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x28476d0db30 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | |   `-CallExpr 0x28476d0dd88 <line:229:9, col:43> 'void *'
| | |     |-ImplicitCastExpr 0x28476d0dd70 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x28476d0dc60 <col:9> 'void *(void *, int, unsigned long long)' Function 0x28476d0d580 'memset' 'void *(void *, int, unsigned long long)'
| | |     |-ImplicitCastExpr 0x28476d0ddc0 <col:16, col:22> 'void *' <BitCast>
| | |     | `-BinaryOperator 0x28476d0dcf0 <col:16, col:22> 'unsigned char *' '+'
| | |     |   |-ImplicitCastExpr 0x28476d0dcc0 <col:16> 'unsigned char *' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x28476d0dc80 <col:16> 'unsigned char *' lvalue ParmVar 0x28476d11bb8 'out' 'unsigned char *'
| | |     |   `-ImplicitCastExpr 0x28476d0dcd8 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x28476d0dca0 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d11cb0 'inlen' 'size_t':'unsigned long long'
| | |     |-IntegerLiteral 0x28476d0dd10 <col:29> 'int' 0
| | |     `-ImplicitCastExpr 0x28476d0ddd8 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
| | |       `-DeclRefExpr 0x28476d0dd38 <col:32> 'const size_t':'const unsigned long long' lvalue Var 0x28476d12238 'padding_len' 'const size_t':'const unsigned long long'
| | `-ReturnStmt 0x28476d0df48 <line:233:5, col:12>
| |   `-ImplicitCastExpr 0x28476d0df30 <col:12> 'size_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x28476d0df18 <col:12> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x28476d0def8 <col:12> 'int' lvalue Var 0x28476d124a8 'ret' 'int'
| `-FullComment 0x28476d13c00 <line:170:4, line:181:59>
|   |-ParagraphComment 0x28476d135c0 <line:170:4, col:47>
|   | `-TextComment 0x28476d13598 <col:4, col:47> Text=" Wrapping according to RFC 5649 section 4.1."
|   |-ParagraphComment 0x28476d13608 <line:172:3, col:4>
|   | `-TextComment 0x28476d135e0 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d13628 <col:5, line:173:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x28476d136d0 <line:172:20, line:173:4>
|   |   |-TextComment 0x28476d13680 <line:172:20, col:33> Text="    Key value."
|   |   `-TextComment 0x28476d136a0 <line:173:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d136f0 <col:5, line:174:4> [in] explicitly Param="icv" ParamIndex=1
|   | `-ParagraphComment 0x28476d13798 <line:173:20, line:174:4>
|   |   |-TextComment 0x28476d13748 <line:173:20, col:74> Text="    (Non-standard) IV, 4 bytes. NULL = use default_aiv."
|   |   `-TextComment 0x28476d13768 <line:174:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d137b8 <col:5, line:177:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x28476d138b0 <line:174:20, line:177:4>
|   |   |-TextComment 0x28476d13810 <line:174:20, col:78> Text="    Ciphertext. Minimal buffer length = (inlen + 15) bytes."
|   |   |-TextComment 0x28476d13830 <line:175:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x28476d13850 <line:176:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x28476d13870 <line:177:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d138d0 <col:5, line:178:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x28476d13970 <line:177:19, line:178:4>
|   |   |-TextComment 0x28476d13920 <line:177:19, col:60> Text="     Plaintext as n 64-bit blocks, n >= 2."
|   |   `-TextComment 0x28476d13940 <line:178:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d13990 <col:5, line:179:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x28476d13a38 <line:178:22, line:179:4>
|   |   |-TextComment 0x28476d139e8 <line:178:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x28476d13a08 <line:179:3, col:4> Text="  "
|   |-ParamCommandComment 0x28476d13a58 <col:5, line:180:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x28476d13b00 <line:179:22, line:180:4>
|   |   |-TextComment 0x28476d13ab0 <line:179:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x28476d13ad0 <line:180:3, col:4> Text="  "
|   `-BlockCommandComment 0x28476d13b20 <col:5, line:181:59> Name="return"
|     `-ParagraphComment 0x28476d13b98 <line:180:12, line:181:59>
|       |-TextComment 0x28476d13b48 <line:180:12, col:74> Text="            0 if inlen is out of range [1, CRYPTO128_WRAP_MAX]."
|       `-TextComment 0x28476d13b68 <line:181:3, col:59> Text="                     Output length if wrapping succeeded."
|-FunctionDecl 0x28476d0d580 <line:224:9> col:9 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x28476d0d620 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x28476d0d688 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x28476d0d6f0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
`-FunctionDecl 0x28476d0f368 <line:251:1, line:329:1> line:251:8 invalid CRYPTO_128_unwrap_pad 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
  |-ParmVarDecl 0x28476d0f038 <col:30, col:36> col:36 used key 'void *'
  |-ParmVarDecl 0x28476d0f0b8 <col:41, col:62> col:62 used icv 'const unsigned char *'
  |-ParmVarDecl 0x28476d0f138 <line:252:30, col:45> col:45 used out 'unsigned char *'
  |-ParmVarDecl 0x28476d0f1b8 <line:253:30, col:51> col:51 used in 'const unsigned char *'
  |-ParmVarDecl 0x28476d0f230 <col:55, col:62> col:62 used inlen 'size_t':'unsigned long long'
  |-ParmVarDecl 0x28476d0f2b0 <line:254:30, col:41> col:41 invalid block 'int'
  |-CompoundStmt 0x28476d0bb50 <line:255:1, line:329:1>
  | |-DeclStmt 0x28476d0f5d8 <line:257:5, col:29>
  | | `-VarDecl 0x28476d0f460 <col:5, col:28> col:12 used n 'size_t':'unsigned long long' cinit
  | |   `-BinaryOperator 0x28476d0f5b8 <col:16, col:28> 'unsigned long long' '-'
  | |     |-BinaryOperator 0x28476d0f558 <col:16, col:24> 'unsigned long long' '/'
  | |     | |-ImplicitCastExpr 0x28476d0f528 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
  | |     | | `-DeclRefExpr 0x28476d0f4c8 <col:16> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | |     | `-ImplicitCastExpr 0x28476d0f540 <col:24> 'unsigned long long' <IntegralCast>
  | |     |   `-IntegerLiteral 0x28476d0f500 <col:24> 'int' 8
  | |     `-ImplicitCastExpr 0x28476d0f5a0 <col:28> 'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x28476d0f578 <col:28> 'int' 1
  | |-DeclStmt 0x28476d0f668 <line:258:5, col:22>
  | | `-VarDecl 0x28476d0f600 <col:5, col:12> col:12 used padded_len 'size_t':'unsigned long long'
  | |-DeclStmt 0x28476d0f6f8 <line:259:5, col:23>
  | | `-VarDecl 0x28476d0f690 <col:5, col:12> col:12 used padding_len 'size_t':'unsigned long long'
  | |-DeclStmt 0x28476d0f788 <line:260:5, col:21>
  | | `-VarDecl 0x28476d0f720 <col:5, col:12> col:12 used ptext_len 'size_t':'unsigned long long'
  | |-DeclStmt 0x28476d0f870 <line:262:5, col:25>
  | | `-VarDecl 0x28476d0f808 <col:5, col:24> col:19 used aiv 'unsigned char [8]'
  | |-DeclStmt 0x28476d0fa48 <line:263:5, col:44>
  | | `-VarDecl 0x28476d0f8f0 <col:5, col:43> col:26 used zeros 'unsigned char [8]' static cinit
  | |   `-InitListExpr 0x28476d0f9d8 <col:37, col:43> 'unsigned char [8]'
  | |     |-array_filler: ImplicitValueInitExpr 0x28476d0fa38 <<invalid sloc>> 'unsigned char'
  | |     `-ImplicitCastExpr 0x28476d0fa18 <col:39> 'unsigned char' <IntegralCast>
  | |       `-IntegerLiteral 0x28476d0f958 <col:39> 'int' 0
  | |-DeclStmt 0x28476d0fad8 <line:264:5, col:15>
  | | `-VarDecl 0x28476d0fa70 <col:5, col:12> col:12 used ret 'size_t':'unsigned long long'
  | |-IfStmt 0x28476d0fe30 <line:267:5, line:268:16>
  | | |-BinaryOperator 0x28476d0fdc0 <line:267:9, line:32:38> 'int' '||'
  | | | |-BinaryOperator 0x28476d0fca0 <line:267:9, col:39> 'int' '||'
  | | | | |-BinaryOperator 0x28476d0fbe8 <col:9, col:26> 'int' '!='
  | | | | | |-ParenExpr 0x28476d0fb88 <col:9, col:21> 'unsigned long long'
  | | | | | | `-BinaryOperator 0x28476d0fb68 <col:10, col:18> 'unsigned long long' '&'
  | | | | | |   |-ImplicitCastExpr 0x28476d0fb38 <col:10> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | | |   | `-DeclRefExpr 0x28476d0faf0 <col:10> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | | | | | |   `-ImplicitCastExpr 0x28476d0fb50 <col:18> 'unsigned long long' <IntegralCast>
  | | | | | |     `-IntegerLiteral 0x28476d0fb10 <col:18> 'int' 7
  | | | | | `-ImplicitCastExpr 0x28476d0fbd0 <col:26> 'unsigned long long' <IntegralCast>
  | | | | |   `-IntegerLiteral 0x28476d0fba8 <col:26> 'int' 0
  | | | | `-BinaryOperator 0x28476d0fc80 <col:31, col:39> 'int' '<'
  | | | |   |-ImplicitCastExpr 0x28476d0fc50 <col:31> 'size_t':'unsigned long long' <LValueToRValue>
  | | | |   | `-DeclRefExpr 0x28476d0fc08 <col:31> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | | | |   `-ImplicitCastExpr 0x28476d0fc68 <col:39> 'unsigned long long' <IntegralCast>
  | | | |     `-IntegerLiteral 0x28476d0fc28 <col:39> 'int' 16
  | | | `-BinaryOperator 0x28476d0fda0 <col:45, line:32:38> 'int' '>='
  | | |   |-ImplicitCastExpr 0x28476d0fd70 <line:267:45> 'size_t':'unsigned long long' <LValueToRValue>
  | | |   | `-DeclRefExpr 0x28476d0fcc0 <col:45> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | | |   `-ImplicitCastExpr 0x28476d0fd88 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
  | | |     `-ParenExpr 0x28476d0fd50 <col:28, col:38> 'unsigned long'
  | | |       `-BinaryOperator 0x28476d0fd30 <col:29, col:36> 'unsigned long' '<<'
  | | |         |-IntegerLiteral 0x28476d0fce0 <col:29> 'unsigned long' 1
  | | |         `-IntegerLiteral 0x28476d0fd08 <col:36> 'int' 31
  | | `-ReturnStmt 0x28476d0fe20 <line:268:9, col:16>
  | |   `-ImplicitCastExpr 0x28476d0fe08 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |     `-IntegerLiteral 0x28476d0fde0 <col:16> 'int' 0
  | |-CallExpr 0x28476d0ff58 <line:270:5, col:27> 'void *'
  | | |-ImplicitCastExpr 0x28476d0ff40 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
  | | | `-DeclRefExpr 0x28476d0fe48 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x28476d013a0 'memmove' 'void *(void *, const void *, unsigned long long)'
  | | |-ImplicitCastExpr 0x28476d0ffa8 <col:13> 'void *' <BitCast>
  | | | `-ImplicitCastExpr 0x28476d0ff90 <col:13> 'unsigned char *' <LValueToRValue>
  | | |   `-DeclRefExpr 0x28476d0fe68 <col:13> 'unsigned char *' lvalue ParmVar 0x28476d0f138 'out' 'unsigned char *'
  | | |-ImplicitCastExpr 0x28476d0ffd8 <col:18> 'const void *' <BitCast>
  | | | `-ImplicitCastExpr 0x28476d0ffc0 <col:18> 'const unsigned char *' <LValueToRValue>
  | | |   `-DeclRefExpr 0x28476d0fea0 <col:18> 'const unsigned char *' lvalue ParmVar 0x28476d0f1b8 'in' 'const unsigned char *'
  | | `-ImplicitCastExpr 0x28476d0fff0 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
  | |   `-DeclRefExpr 0x28476d0fed8 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | |-IfStmt 0x28476d0e8e8 <line:271:5, line:290:5> has_else
  | | |-BinaryOperator 0x28476d0e088 <line:271:9, col:18> 'int' '=='
  | | | |-ImplicitCastExpr 0x28476d0e058 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | `-DeclRefExpr 0x28476d0e010 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | | | `-ImplicitCastExpr 0x28476d0e070 <col:18> 'unsigned long long' <IntegralCast>
  | | |   `-IntegerLiteral 0x28476d0e030 <col:18> 'int' 16
  | | |-CompoundStmt 0x28476d0e500 <col:22, line:283:5>
  | | | |-CallExpr 0x28476d0e208 <line:279:9, col:27> 'void *'
  | | | | |-ImplicitCastExpr 0x28476d0e1f0 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
  | | | | | `-DeclRefExpr 0x28476d0e120 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28476d018c0 'memcpy' 'void *(void *, const void *, unsigned long long)'
  | | | | |-ImplicitCastExpr 0x28476d0e258 <col:16> 'void *' <BitCast>
  | | | | | `-ImplicitCastExpr 0x28476d0e240 <col:16> 'unsigned char *' <ArrayToPointerDecay>
  | | | | |   `-DeclRefExpr 0x28476d0e140 <col:16> 'unsigned char [8]' lvalue Var 0x28476d0f808 'aiv' 'unsigned char [8]'
  | | | | |-ImplicitCastExpr 0x28476d0e288 <col:21> 'const void *' <BitCast>
  | | | | | `-ImplicitCastExpr 0x28476d0e270 <col:21> 'unsigned char *' <LValueToRValue>
  | | | | |   `-DeclRefExpr 0x28476d0e178 <col:21> 'unsigned char *' lvalue ParmVar 0x28476d0f138 'out' 'unsigned char *'
  | | | | `-ImplicitCastExpr 0x28476d0e2a0 <col:26> 'unsigned long long' <IntegralCast>
  | | | |   `-IntegerLiteral 0x28476d0e198 <col:26> 'int' 8
  | | | |-CallExpr 0x28476d0e3d0 <line:281:9, col:32> 'void *'
  | | | | |-ImplicitCastExpr 0x28476d0e3b8 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
  | | | | | `-DeclRefExpr 0x28476d0e2b8 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28476d013a0 'memmove' 'void *(void *, const void *, unsigned long long)'
  | | | | |-ImplicitCastExpr 0x28476d0e420 <col:17> 'void *' <BitCast>
  | | | | | `-ImplicitCastExpr 0x28476d0e408 <col:17> 'unsigned char *' <LValueToRValue>
  | | | | |   `-DeclRefExpr 0x28476d0e2d8 <col:17> 'unsigned char *' lvalue ParmVar 0x28476d0f138 'out' 'unsigned char *'
  | | | | |-ImplicitCastExpr 0x28476d0e438 <col:22, col:28> 'const void *' <BitCast>
  | | | | | `-BinaryOperator 0x28476d0e358 <col:22, col:28> 'unsigned char *' '+'
  | | | | |   |-ImplicitCastExpr 0x28476d0e340 <col:22> 'unsigned char *' <LValueToRValue>
  | | | | |   | `-DeclRefExpr 0x28476d0e2f8 <col:22> 'unsigned char *' lvalue ParmVar 0x28476d0f138 'out' 'unsigned char *'
  | | | | |   `-IntegerLiteral 0x28476d0e318 <col:28> 'int' 8
  | | | | `-ImplicitCastExpr 0x28476d0e450 <col:31> 'unsigned long long' <IntegralCast>
  | | | |   `-IntegerLiteral 0x28476d0e378 <col:31> 'int' 8
  | | | `-BinaryOperator 0x28476d0e4e0 <line:282:9, col:22> 'size_t':'unsigned long long' '='
  | | |   |-DeclRefExpr 0x28476d0e468 <col:9> 'size_t':'unsigned long long' lvalue Var 0x28476d0f600 'padded_len' 'size_t':'unsigned long long'
  | | |   `-ImplicitCastExpr 0x28476d0e4c8 <col:22> 'size_t':'unsigned long long' <IntegralCast>
  | | |     `-IntegerLiteral 0x28476d0e4a0 <col:22> 'int' 8
  | | `-CompoundStmt 0x28476d0e8c8 <line:283:12, line:290:5>
  | |   |-BinaryOperator 0x28476d0e5e0 <line:284:9, col:30> 'size_t':'unsigned long long' '='
  | |   | |-DeclRefExpr 0x28476d0e528 <col:9> 'size_t':'unsigned long long' lvalue Var 0x28476d0f600 'padded_len' 'size_t':'unsigned long long'
  | |   | `-BinaryOperator 0x28476d0e5c0 <col:22, col:30> 'unsigned long long' '-'
  | |   |   |-ImplicitCastExpr 0x28476d0e590 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   | `-DeclRefExpr 0x28476d0e548 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | |   |   `-ImplicitCastExpr 0x28476d0e5a8 <col:30> 'unsigned long long' <IntegralCast>
  | |   |     `-IntegerLiteral 0x28476d0e568 <col:30> 'int' 8
  | |   `-IfStmt 0x28476d0e8b0 <line:286:9, line:289:9>
  | |     |-BinaryOperator 0x28476d0e748 <line:286:13, col:27> 'int' '!='
  | |     | |-ImplicitCastExpr 0x28476d0e718 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
  | |     | | `-DeclRefExpr 0x28476d0e6d8 <col:13> 'size_t':'unsigned long long' lvalue Var 0x28476d0f600 'padded_len' 'size_t':'unsigned long long'
  | |     | `-ImplicitCastExpr 0x28476d0e730 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
  | |     |   `-DeclRefExpr 0x28476d0e6f8 <col:27> 'size_t':'unsigned long long' lvalue Var 0x28476d0fa70 'ret' 'size_t':'unsigned long long'
  | |     `-CompoundStmt 0x28476d0e890 <col:32, line:289:9>
  | |       |-CallExpr 0x28476d0e7e0 <line:287:13, col:39> 'int'
  | |       | |-ImplicitCastExpr 0x28476d0e7c8 <col:13> 'int (*)()' <FunctionToPointerDecay>
  | |       | | `-DeclRefExpr 0x28476d0e768 <col:13> 'int ()' Function 0x28476d117c0 'OPENSSL_cleanse' 'int ()'
  | |       | |-ImplicitCastExpr 0x28476d0e810 <col:29> 'unsigned char *' <LValueToRValue>
  | |       | | `-DeclRefExpr 0x28476d0e788 <col:29> 'unsigned char *' lvalue ParmVar 0x28476d0f138 'out' 'unsigned char *'
  | |       | `-ImplicitCastExpr 0x28476d0e828 <col:34> 'size_t':'unsigned long long' <LValueToRValue>
  | |       |   `-DeclRefExpr 0x28476d0e7a8 <col:34> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | |       `-ReturnStmt 0x28476d0e880 <line:288:13, col:20>
  | |         `-ImplicitCastExpr 0x28476d0e868 <col:20> 'size_t':'unsigned long long' <IntegralCast>
  | |           `-IntegerLiteral 0x28476d0e840 <col:20> 'int' 0
  | |-IfStmt 0x28476d0eda8 <line:297:5, line:301:5>
  | | |-BinaryOperator 0x28476d0ec40 <line:297:9, line:298:46> 'int' '||'
  | | | |-ParenExpr 0x28476d0eaa0 <line:297:9, col:52> 'int'
  | | | | `-BinaryOperator 0x28476d0ea80 <col:10, col:51> 'int' '&&'
  | | | |   |-UnaryOperator 0x28476d0e960 <col:10, col:11> 'int' prefix '!' cannot overflow
  | | | |   | `-ImplicitCastExpr 0x28476d0e948 <col:11> 'const unsigned char *' <LValueToRValue>
  | | | |   |   `-DeclRefExpr 0x28476d0e910 <col:11> 'const unsigned char *' lvalue ParmVar 0x28476d0f0b8 'icv' 'const unsigned char *'
  | | | |   `-CallExpr 0x28476d0ea18 <col:18, col:51> 'int'
  | | | |     |-ImplicitCastExpr 0x28476d0ea00 <col:18> 'int (*)()' <FunctionToPointerDecay>
  | | | |     | `-DeclRefExpr 0x28476d0e978 <col:18> 'int ()' Function 0x28476d115a0 'CRYPTO_memcmp' 'int ()'
  | | | |     |-ImplicitCastExpr 0x28476d0ea50 <col:32> 'unsigned char *' <ArrayToPointerDecay>
  | | | |     | `-DeclRefExpr 0x28476d0e998 <col:32> 'unsigned char [8]' lvalue Var 0x28476d0f808 'aiv' 'unsigned char [8]'
  | | | |     |-ImplicitCastExpr 0x28476d0ea68 <col:37> 'const unsigned char *' <ArrayToPointerDecay>
  | | | |     | `-DeclRefExpr 0x28476d0e9b8 <col:37> 'const unsigned char [4]' lvalue Var 0x28476cff1c0 'default_aiv' 'const unsigned char [4]'
  | | | |     `-IntegerLiteral 0x28476d0e9d8 <col:50> 'int' 4
  | | | `-ParenExpr 0x28476d0ec20 <line:298:12, col:46> 'int'
  | | |   `-BinaryOperator 0x28476d0ec00 <col:13, col:45> 'int' '&&'
  | | |     |-ImplicitCastExpr 0x28476d0ebe8 <col:13> 'const unsigned char *' <LValueToRValue>
  | | |     | `-DeclRefExpr 0x28476d0eac0 <col:13> 'const unsigned char *' lvalue ParmVar 0x28476d0f0b8 'icv' 'const unsigned char *'
  | | |     `-CallExpr 0x28476d0eb80 <col:20, col:45> 'int'
  | | |       |-ImplicitCastExpr 0x28476d0eb68 <col:20> 'int (*)()' <FunctionToPointerDecay>
  | | |       | `-DeclRefExpr 0x28476d0eae0 <col:20> 'int ()' Function 0x28476d115a0 'CRYPTO_memcmp' 'int ()'
  | | |       |-ImplicitCastExpr 0x28476d0ebb8 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | | |       | `-DeclRefExpr 0x28476d0eb00 <col:34> 'unsigned char [8]' lvalue Var 0x28476d0f808 'aiv' 'unsigned char [8]'
  | | |       |-ImplicitCastExpr 0x28476d0ebd0 <col:39> 'const unsigned char *' <LValueToRValue>
  | | |       | `-DeclRefExpr 0x28476d0eb20 <col:39> 'const unsigned char *' lvalue ParmVar 0x28476d0f0b8 'icv' 'const unsigned char *'
  | | |       `-IntegerLiteral 0x28476d0eb40 <col:44> 'int' 4
  | | `-CompoundStmt 0x28476d0ed88 <col:49, line:301:5>
  | |   |-CallExpr 0x28476d0ecd8 <line:299:9, col:35> 'int'
  | |   | |-ImplicitCastExpr 0x28476d0ecc0 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | |   | | `-DeclRefExpr 0x28476d0ec60 <col:9> 'int ()' Function 0x28476d117c0 'OPENSSL_cleanse' 'int ()'
  | |   | |-ImplicitCastExpr 0x28476d0ed08 <col:25> 'unsigned char *' <LValueToRValue>
  | |   | | `-DeclRefExpr 0x28476d0ec80 <col:25> 'unsigned char *' lvalue ParmVar 0x28476d0f138 'out' 'unsigned char *'
  | |   | `-ImplicitCastExpr 0x28476d0ed20 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   `-DeclRefExpr 0x28476d0eca0 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | |   `-ReturnStmt 0x28476d0ed78 <line:300:9, col:16>
  | |     `-ImplicitCastExpr 0x28476d0ed60 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x28476d0ed38 <col:16> 'int' 0
  | |-BinaryOperator 0x28476d0b2d8 <line:308:5, line:311:39> 'size_t':'unsigned long long' '='
  | | |-DeclRefExpr 0x28476d0edc0 <line:308:5> 'size_t':'unsigned long long' lvalue Var 0x28476d0f720 'ptext_len' 'size_t':'unsigned long long'
  | | `-ImplicitCastExpr 0x28476d0b2c0 <col:19, line:311:39> 'size_t':'unsigned long long' <IntegralCast>
  | |   `-BinaryOperator 0x28476d0b2a0 <line:308:19, line:311:39> 'unsigned int' '|'
  | |     |-BinaryOperator 0x28476d0b1a8 <line:308:19, line:310:46> 'unsigned int' '|'
  | |     | |-BinaryOperator 0x28476d0b048 <line:308:19, line:309:46> 'unsigned int' '|'
  | |     | | |-ParenExpr 0x28476d0ef18 <line:308:19, col:46> 'unsigned int'
  | |     | | | `-BinaryOperator 0x28476d0eef8 <col:20, col:44> 'unsigned int' '<<'
  | |     | | |   |-CStyleCastExpr 0x28476d0eea8 <col:20, col:39> 'unsigned int' <IntegralCast>
  | |     | | |   | `-ImplicitCastExpr 0x28476d0ee90 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |     | | |   |   `-ArraySubscriptExpr 0x28476d0ee58 <col:34, col:39> 'unsigned char' lvalue
  | |     | | |   |     |-ImplicitCastExpr 0x28476d0ee40 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |     | | |   |     | `-DeclRefExpr 0x28476d0edf8 <col:34> 'unsigned char [8]' lvalue Var 0x28476d0f808 'aiv' 'unsigned char [8]'
  | |     | | |   |     `-IntegerLiteral 0x28476d0ee18 <col:38> 'int' 4
  | |     | | |   `-IntegerLiteral 0x28476d0eed0 <col:44> 'int' 24
  | |     | | `-ParenExpr 0x28476d0b028 <line:309:19, col:46> 'unsigned int'
  | |     | |   `-BinaryOperator 0x28476d0b008 <col:20, col:44> 'unsigned int' '<<'
  | |     | |     |-CStyleCastExpr 0x28476d0efe8 <col:20, col:39> 'unsigned int' <IntegralCast>
  | |     | |     | `-ImplicitCastExpr 0x28476d0efd0 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |     | |     |   `-ArraySubscriptExpr 0x28476d0ef98 <col:34, col:39> 'unsigned char' lvalue
  | |     | |     |     |-ImplicitCastExpr 0x28476d0ef80 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |     | |     |     | `-DeclRefExpr 0x28476d0ef38 <col:34> 'unsigned char [8]' lvalue Var 0x28476d0f808 'aiv' 'unsigned char [8]'
  | |     | |     |     `-IntegerLiteral 0x28476d0ef58 <col:38> 'int' 5
  | |     | |     `-IntegerLiteral 0x28476d0afe0 <col:44> 'int' 16
  | |     | `-ParenExpr 0x28476d0b188 <line:310:19, col:46> 'unsigned int'
  | |     |   `-BinaryOperator 0x28476d0b168 <col:20, col:45> 'unsigned int' '<<'
  | |     |     |-CStyleCastExpr 0x28476d0b118 <col:20, col:39> 'unsigned int' <IntegralCast>
  | |     |     | `-ImplicitCastExpr 0x28476d0b100 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |     |     |   `-ArraySubscriptExpr 0x28476d0b0c8 <col:34, col:39> 'unsigned char' lvalue
  | |     |     |     |-ImplicitCastExpr 0x28476d0b0b0 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |     |     |     | `-DeclRefExpr 0x28476d0b068 <col:34> 'unsigned char [8]' lvalue Var 0x28476d0f808 'aiv' 'unsigned char [8]'
  | |     |     |     `-IntegerLiteral 0x28476d0b088 <col:38> 'int' 6
  | |     |     `-IntegerLiteral 0x28476d0b140 <col:45> 'int' 8
  | |     `-CStyleCastExpr 0x28476d0b278 <line:311:20, col:39> 'unsigned int' <IntegralCast>
  | |       `-ImplicitCastExpr 0x28476d0b260 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |         `-ArraySubscriptExpr 0x28476d0b228 <col:34, col:39> 'unsigned char' lvalue
  | |           |-ImplicitCastExpr 0x28476d0b210 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |           | `-DeclRefExpr 0x28476d0b1c8 <col:34> 'unsigned char [8]' lvalue Var 0x28476d0f808 'aiv' 'unsigned char [8]'
  | |           `-IntegerLiteral 0x28476d0b1e8 <col:38> 'int' 7
  | |-IfStmt 0x28476d0b6d8 <line:312:5, line:315:5>
  | | |-BinaryOperator 0x28476d0b570 <line:312:9, col:53> 'int' '||'
  | | | |-BinaryOperator 0x28476d0b460 <col:9, col:24> 'int' '>='
  | | | | |-BinaryOperator 0x28476d0b408 <col:9, col:19> 'unsigned long long' '*'
  | | | | | |-ImplicitCastExpr 0x28476d0b3f0 <col:9> 'unsigned long long' <IntegralCast>
  | | | | | | `-IntegerLiteral 0x28476d0b2f8 <col:9> 'int' 8
  | | | | | `-ParenExpr 0x28476d0b3d0 <col:13, col:19> 'unsigned long long'
  | | | | |   `-BinaryOperator 0x28476d0b3b0 <col:14, col:18> 'unsigned long long' '-'
  | | | | |     |-ImplicitCastExpr 0x28476d0b380 <col:14> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | |     | `-DeclRefExpr 0x28476d0b320 <col:14> 'size_t':'unsigned long long' lvalue Var 0x28476d0f460 'n' 'size_t':'unsigned long long'
  | | | | |     `-ImplicitCastExpr 0x28476d0b398 <col:18> 'unsigned long long' <IntegralCast>
  | | | | |       `-IntegerLiteral 0x28476d0b358 <col:18> 'int' 1
  | | | | `-ImplicitCastExpr 0x28476d0b448 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
  | | | |   `-DeclRefExpr 0x28476d0b428 <col:24> 'size_t':'unsigned long long' lvalue Var 0x28476d0f720 'ptext_len' 'size_t':'unsigned long long'
  | | | `-BinaryOperator 0x28476d0b550 <col:37, col:53> 'int' '>'
  | | |   |-ImplicitCastExpr 0x28476d0b538 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
  | | |   | `-DeclRefExpr 0x28476d0b480 <col:37> 'size_t':'unsigned long long' lvalue Var 0x28476d0f720 'ptext_len' 'size_t':'unsigned long long'
  | | |   `-BinaryOperator 0x28476d0b518 <col:49, col:53> 'unsigned long long' '*'
  | | |     |-ImplicitCastExpr 0x28476d0b500 <col:49> 'unsigned long long' <IntegralCast>
  | | |     | `-IntegerLiteral 0x28476d0b4a0 <col:49> 'int' 8
  | | |     `-ImplicitCastExpr 0x28476d0b4e8 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
  | | |       `-DeclRefExpr 0x28476d0b4c8 <col:53> 'size_t':'unsigned long long' lvalue Var 0x28476d0f460 'n' 'size_t':'unsigned long long'
  | | `-CompoundStmt 0x28476d0b6b8 <col:56, line:315:5>
  | |   |-CallExpr 0x28476d0b608 <line:313:9, col:35> 'int'
  | |   | |-ImplicitCastExpr 0x28476d0b5f0 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | |   | | `-DeclRefExpr 0x28476d0b590 <col:9> 'int ()' Function 0x28476d117c0 'OPENSSL_cleanse' 'int ()'
  | |   | |-ImplicitCastExpr 0x28476d0b638 <col:25> 'unsigned char *' <LValueToRValue>
  | |   | | `-DeclRefExpr 0x28476d0b5b0 <col:25> 'unsigned char *' lvalue ParmVar 0x28476d0f138 'out' 'unsigned char *'
  | |   | `-ImplicitCastExpr 0x28476d0b650 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   `-DeclRefExpr 0x28476d0b5d0 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | |   `-ReturnStmt 0x28476d0b6a8 <line:314:9, col:16>
  | |     `-ImplicitCastExpr 0x28476d0b690 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x28476d0b668 <col:16> 'int' 0
  | |-BinaryOperator 0x28476d0b7b8 <line:321:5, col:32> 'size_t':'unsigned long long' '='
  | | |-DeclRefExpr 0x28476d0b6f0 <col:5> 'size_t':'unsigned long long' lvalue Var 0x28476d0f690 'padding_len' 'size_t':'unsigned long long'
  | | `-BinaryOperator 0x28476d0b798 <col:19, col:32> 'unsigned long long' '-'
  | |   |-ImplicitCastExpr 0x28476d0b768 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
  | |   | `-DeclRefExpr 0x28476d0b728 <col:19> 'size_t':'unsigned long long' lvalue Var 0x28476d0f600 'padded_len' 'size_t':'unsigned long long'
  | |   `-ImplicitCastExpr 0x28476d0b780 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
  | |     `-DeclRefExpr 0x28476d0b748 <col:32> 'size_t':'unsigned long long' lvalue Var 0x28476d0f720 'ptext_len' 'size_t':'unsigned long long'
  | |-IfStmt 0x28476d0baf0 <line:322:5, line:325:5>
  | | |-BinaryOperator 0x28476d0b988 <line:322:9, col:63> 'int' '!='
  | | | |-CallExpr 0x28476d0b8f8 <col:9, col:58> 'int'
  | | | | |-ImplicitCastExpr 0x28476d0b8e0 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | | | | | `-DeclRefExpr 0x28476d0b7d8 <col:9> 'int ()' Function 0x28476d115a0 'CRYPTO_memcmp' 'int ()'
  | | | | |-BinaryOperator 0x28476d0b868 <col:23, col:29> 'unsigned char *' '+'
  | | | | | |-ImplicitCastExpr 0x28476d0b838 <col:23> 'unsigned char *' <LValueToRValue>
  | | | | | | `-DeclRefExpr 0x28476d0b7f8 <col:23> 'unsigned char *' lvalue ParmVar 0x28476d0f138 'out' 'unsigned char *'
  | | | | | `-ImplicitCastExpr 0x28476d0b850 <col:29> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | |   `-DeclRefExpr 0x28476d0b818 <col:29> 'size_t':'unsigned long long' lvalue Var 0x28476d0f720 'ptext_len' 'size_t':'unsigned long long'
  | | | | |-ImplicitCastExpr 0x28476d0b930 <col:40> 'unsigned char *' <ArrayToPointerDecay>
  | | | | | `-DeclRefExpr 0x28476d0b888 <col:40> 'unsigned char [8]' lvalue Var 0x28476d0f8f0 'zeros' 'unsigned char [8]'
  | | | | `-ImplicitCastExpr 0x28476d0b948 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
  | | | |   `-DeclRefExpr 0x28476d0b8c0 <col:47> 'size_t':'unsigned long long' lvalue Var 0x28476d0f690 'padding_len' 'size_t':'unsigned long long'
  | | | `-IntegerLiteral 0x28476d0b960 <col:63> 'int' 0
  | | `-CompoundStmt 0x28476d0bad0 <col:66, line:325:5>
  | |   |-CallExpr 0x28476d0ba20 <line:323:9, col:35> 'int'
  | |   | |-ImplicitCastExpr 0x28476d0ba08 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | |   | | `-DeclRefExpr 0x28476d0b9a8 <col:9> 'int ()' Function 0x28476d117c0 'OPENSSL_cleanse' 'int ()'
  | |   | |-ImplicitCastExpr 0x28476d0ba50 <col:25> 'unsigned char *' <LValueToRValue>
  | |   | | `-DeclRefExpr 0x28476d0b9c8 <col:25> 'unsigned char *' lvalue ParmVar 0x28476d0f138 'out' 'unsigned char *'
  | |   | `-ImplicitCastExpr 0x28476d0ba68 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   `-DeclRefExpr 0x28476d0b9e8 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x28476d0f230 'inlen' 'size_t':'unsigned long long'
  | |   `-ReturnStmt 0x28476d0bac0 <line:324:9, col:16>
  | |     `-ImplicitCastExpr 0x28476d0baa8 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x28476d0ba80 <col:16> 'int' 0
  | `-ReturnStmt 0x28476d0bb40 <line:328:5, col:12>
  |   `-ImplicitCastExpr 0x28476d0bb28 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
  |     `-DeclRefExpr 0x28476d0bb08 <col:12> 'size_t':'unsigned long long' lvalue Var 0x28476d0f720 'ptext_len' 'size_t':'unsigned long long'
  `-FullComment 0x28476d0c320 <line:236:4, line:249:76>
    |-ParagraphComment 0x28476d13ce8 <line:236:4, col:49>
    | `-TextComment 0x28476d13cc0 <col:4, col:49> Text=" Unwrapping according to RFC 5649 section 4.2."
    |-ParagraphComment 0x28476d13d30 <line:238:3, col:4>
    | `-TextComment 0x28476d13d08 <col:3, col:4> Text="  "
    |-ParamCommandComment 0x28476d13d50 <col:5, line:239:4> [in] explicitly Param="key" ParamIndex=0
    | `-ParagraphComment 0x28476d13df8 <line:238:20, line:239:4>
    |   |-TextComment 0x28476d13da8 <line:238:20, col:33> Text="    Key value."
    |   `-TextComment 0x28476d13dc8 <line:239:3, col:4> Text="  "
    |-ParamCommandComment 0x28476d13e18 <col:5, line:240:4> [in] explicitly Param="icv" ParamIndex=1
    | `-ParagraphComment 0x28476d13ec0 <line:239:20, line:240:4>
    |   |-TextComment 0x28476d13e70 <line:239:20, col:74> Text="    (Non-standard) IV, 4 bytes. NULL = use default_aiv."
    |   `-TextComment 0x28476d13e90 <line:240:3, col:4> Text="  "
    |-ParamCommandComment 0x28476d13ee0 <col:5, line:243:4> [out] explicitly Param="out" ParamIndex=2
    | `-ParagraphComment 0x28476d13fd8 <line:240:20, line:243:4>
    |   |-TextComment 0x28476d13f38 <line:240:20, col:70> Text="    Plaintext. Minimal buffer length = inlen bytes."
    |   |-TextComment 0x28476d13f58 <line:241:3, col:77> Text="                     Input and output buffers can overlap if block function"
    |   |-TextComment 0x28476d13f78 <line:242:3, col:37> Text="                     supports that."
    |   `-TextComment 0x28476d13f98 <line:243:3, col:4> Text="  "
    |-ParamCommandComment 0x28476d13ff8 <col:5, line:244:4> [in] explicitly Param="in" ParamIndex=3
    | `-ParagraphComment 0x28476d0c040 <line:243:19, line:244:4>
    |   |-TextComment 0x28476d0bff0 <line:243:19, col:53> Text="     Ciphertext as n 64-bit blocks."
    |   `-TextComment 0x28476d0c010 <line:244:3, col:4> Text="  "
    |-ParamCommandComment 0x28476d0c060 <col:5, line:245:4> [in] explicitly Param="inlen" ParamIndex=4
    | `-ParagraphComment 0x28476d0c108 <line:244:22, line:245:4>
    |   |-TextComment 0x28476d0c0b8 <line:244:22, col:36> Text="  Length of in."
    |   `-TextComment 0x28476d0c0d8 <line:245:3, col:4> Text="  "
    |-ParamCommandComment 0x28476d0c128 <col:5, line:246:4> [in] explicitly Param="block" ParamIndex=5
    | `-ParagraphComment 0x28476d0c1d0 <line:245:22, line:246:4>
    |   |-TextComment 0x28476d0c180 <line:245:22, col:49> Text="  Block processing function."
    |   `-TextComment 0x28476d0c1a0 <line:246:3, col:4> Text="  "
    `-BlockCommandComment 0x28476d0c1f0 <col:5, line:249:76> Name="return"
      `-ParagraphComment 0x28476d0c2b8 <line:246:12, line:249:76>
        |-TextComment 0x28476d0c218 <line:246:12, col:75> Text="            0 if inlen is out of range [16, CRYPTO128_WRAP_MAX],"
        |-TextComment 0x28476d0c238 <line:247:3, col:57> Text="                     or if inlen is not a multiple of 8"
        |-TextComment 0x28476d0c258 <line:248:3, col:75> Text="                     or if IV and message length indicator doesn't match."
        `-TextComment 0x28476d0c278 <line:249:3, col:76> Text="                     Output length if unwrapping succeeded and IV matches."
