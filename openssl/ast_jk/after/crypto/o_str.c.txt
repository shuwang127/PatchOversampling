TranslationUnitDecl 0x1e058302d78 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1e058303610 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1e058303310 '__int128'
|-TypedefDecl 0x1e058303680 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1e058303330 'unsigned __int128'
|-TypedefDecl 0x1e0583039b8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1e058303770 'struct __NSConstantString_tag'
|   `-Record 0x1e0583036d8 '__NSConstantString_tag'
|-TypedefDecl 0x1e058303a28 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1e058302f50 'unsigned long long'
|-TypedefDecl 0x1e058303ac0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1e058303a80 'char *'
|   `-BuiltinType 0x1e058302e10 'char'
|-TypedefDecl 0x1e058303b30 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1e058303a80 'char *'
|   `-BuiltinType 0x1e058302e10 'char'
|-TypedefDecl 0x1e058303bf0 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1e058302f50 'unsigned long long'
|-TypedefDecl 0x1e058303c60 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1e058303a80 'char *'
|   `-BuiltinType 0x1e058302e10 'char'
|-FunctionDecl 0x1e059d793c0 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1e059d79460 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1e059d794d0 <col:21> Implicit
|-FunctionDecl 0x1e059d79528 prev 0x1e059d793c0 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1e059d79250 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1e059d79618 <col:21> Inherited Implicit
|-TypedefDecl 0x1e059d79658 prev 0x1e058303a28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1e058302f50 'unsigned long long'
|-TypedefDecl 0x1e059d79700 <line:503:1, col:16> col:16 rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1e059d796d0 'size_t' sugar
|   |-Typedef 0x1e059d79658 'size_t'
|   `-BuiltinType 0x1e058302f50 'unsigned long long'
|-TypedefDecl 0x1e059d79770 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1e058302eb0 'long long'
|-TypedefDecl 0x1e059d797e0 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1e058302eb0 'long long'
|-TypedefDecl 0x1e059d79850 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1e058302ef0 'unsigned short'
|-TypedefDecl 0x1e059d798c0 <line:541:1, col:24> col:24 referenced wint_t 'unsigned short'
| `-BuiltinType 0x1e058302ef0 'unsigned short'
|-TypedefDecl 0x1e059d79930 <line:542:1, col:24> col:24 referenced wctype_t 'unsigned short'
| `-BuiltinType 0x1e058302ef0 'unsigned short'
|-TypedefDecl 0x1e059d799a0 <line:563:1, col:13> col:13 errno_t 'int'
| `-BuiltinType 0x1e058302e70 'int'
|-TypedefDecl 0x1e059d79a10 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1e058302e90 'long'
|-TypedefDecl 0x1e059d79a80 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1e058302eb0 'long long'
|-TypedefDecl 0x1e059d79b10 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1e059d79ae0 '__time64_t' sugar
|   |-Typedef 0x1e059d79a80 '__time64_t'
|   `-BuiltinType 0x1e058302eb0 'long long'
|-FunctionDecl 0x1e059d79c88 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1e059d79ea8 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1e059dbc0a0 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1e059d79fe8 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1e059d7a060 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1e059d7a0d8 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1e059d7a158 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1e059dbbe40 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1e059dbc180 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1e059dbc240 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1e059dbc3b0 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1e059dbc360 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1e059dbc300 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1e059dbc220 'struct threadlocaleinfostruct'
|       `-Record 0x1e059dc2eb0 'threadlocaleinfostruct'
|-TypedefDecl 0x1e059dbc4c0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1e059dbc470 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1e059dbc410 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1e059dbc2e0 'struct threadmbcinfostruct'
|       `-Record 0x1e059dbc240 'threadmbcinfostruct'
|-RecordDecl 0x1e059dbc518 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1e059dbc5d0 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1e059dbc690 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1e059dbc720 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1e059dbc7b0 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1e059dbc868 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1e059dbc810 'struct localeinfo_struct' sugar
|   `-RecordType 0x1e059dbc670 'struct localeinfo_struct'
|     `-Record 0x1e059dbc5d0 'localeinfo_struct'
|-TypedefDecl 0x1e059dbc940 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1e059dbc8f0 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1e059dbc810 'struct localeinfo_struct' sugar
|     `-RecordType 0x1e059dbc670 'struct localeinfo_struct'
|       `-Record 0x1e059dbc5d0 'localeinfo_struct'
|-RecordDecl 0x1e059dbc9b8 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1e059dbca70 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1e059dbcae8 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1e059dbcba8 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1e059dbcc40 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1e059dbccb0 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1e059dbcd68 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1e059dbcd10 'struct localerefcount' sugar
|   `-RecordType 0x1e059dbca50 'struct localerefcount'
|     `-Record 0x1e059dbc9b8 'localerefcount'
|-RecordDecl 0x1e059dc2eb0 prev 0x1e059dbc180 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1e059dc2f30 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1e059dc2fa8 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1e059dc3018 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1e059dc3088 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1e059dc30f8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1e059dc32b8 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1e059dc3328 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1e059dc3398 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1e059dc3408 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1e059dc3478 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1e059dc34e8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1e059dc3540 parent 0x1e058302d78 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1e059dc36d0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1e059dc3740 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1e059dc37b0 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1e059dc3820 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1e059dc38c0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1e059dc3930 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1e059dc3a40 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1e059dc3b78 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1e059dc3c28 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1e059dc3bd0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1e059dbc220 'struct threadlocaleinfostruct'
|     `-Record 0x1e059dc2eb0 'threadlocaleinfostruct'
|-FunctionDecl 0x1e059dc3dc0 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:49:9, col:58> col:40 __pctype_func 'const unsigned short *(void) __attribute__((cdecl))':'const unsigned short *(void)'
|-VarDecl 0x1e059dbde60 <line:51:9, col:38> col:38 _pctype 'const unsigned short *' extern
|-VarDecl 0x1e059dbdf60 <line:62:9, col:45> col:37 _wctype 'const unsigned short []' extern
|-FunctionDecl 0x1e059dbe158 <line:73:9, col:53> col:34 __pwctype_func 'const wctype_t *(void) __attribute__((cdecl))':'const wctype_t *(void)'
|-VarDecl 0x1e059dbe220 <line:75:9, col:32> col:32 _pwctype 'const wctype_t *' extern
|-FunctionDecl 0x1e059dbe4a0 <line:119:24, col:72> col:36 _isctype 'int (int, int) __attribute__((cdecl))':'int (int, int)'
| |-ParmVarDecl 0x1e059dbe2b8 <col:50, col:54> col:54 _C 'int'
| `-ParmVarDecl 0x1e059dbe338 <col:63, col:67> col:67 _Type 'int'
|-FunctionDecl 0x1e059dbe878 <line:120:24, col:102> col:36 _isctype_l 'int (int, int, _locale_t) __attribute__((cdecl))':'int (int, int, _locale_t)'
| |-ParmVarDecl 0x1e059dbe580 <col:52, col:56> col:56 _C 'int'
| |-ParmVarDecl 0x1e059dbe600 <col:65, col:69> col:69 _Type 'int'
| `-ParmVarDecl 0x1e059dbe6a0 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dbeaa8 <line:121:55> col:55 implicit isalpha 'int (int)' extern
| |-ParmVarDecl 0x1e059dbeb48 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dbebb8 <col:55> Implicit
| `-PureAttr 0x1e059dbec10 <col:55> Implicit
|-FunctionDecl 0x1e059dbec38 prev 0x1e059dbeaa8 <col:43, col:74> col:55 isalpha 'int (int)'
| |-ParmVarDecl 0x1e059dbe960 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1e059dbed28 <col:55> Inherited Implicit
| `-PureAttr 0x1e059dbed50 <col:55> Inherited Implicit
|-FunctionDecl 0x1e059dca0d0 <line:122:24, col:86> col:36 _isalpha_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dbed90 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dc9f20 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dca290 <line:123:55> col:55 implicit isupper 'int (int)' extern
| |-ParmVarDecl 0x1e059dca330 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dca3a0 <col:55> Implicit
| `-PureAttr 0x1e059dca3f8 <col:55> Implicit
|-FunctionDecl 0x1e059dca420 prev 0x1e059dca290 <col:43, col:74> col:55 isupper 'int (int)'
| |-ParmVarDecl 0x1e059dca1b0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1e059dca510 <col:55> Inherited Implicit
| `-PureAttr 0x1e059dca538 <col:55> Inherited Implicit
|-FunctionDecl 0x1e059dca6f0 <line:124:24, col:86> col:36 _isupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dca578 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dca5f0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dca8b0 <line:125:55> col:55 implicit islower 'int (int)' extern
| |-ParmVarDecl 0x1e059dca950 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dca9c0 <col:55> Implicit
| `-PureAttr 0x1e059dcaa18 <col:55> Implicit
|-FunctionDecl 0x1e059dcaa40 prev 0x1e059dca8b0 <col:43, col:74> col:55 islower 'int (int)'
| |-ParmVarDecl 0x1e059dca7d0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1e059dcab30 <col:55> Inherited Implicit
| `-PureAttr 0x1e059dcab58 <col:55> Inherited Implicit
|-FunctionDecl 0x1e059dcad10 <line:126:24, col:86> col:36 _islower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dcab98 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dcac10 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcaf30 <line:127:55> col:55 implicit isdigit 'int (int)' extern
| |-ParmVarDecl 0x1e059dcafd0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dcb040 <col:55> Implicit
| `-PureAttr 0x1e059dcb098 <col:55> Implicit
|-FunctionDecl 0x1e059dcb0c0 prev 0x1e059dcaf30 <col:43, col:74> col:55 isdigit 'int (int)'
| |-ParmVarDecl 0x1e059dcadf0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1e059dcb1b0 <col:55> Inherited Implicit
| `-PureAttr 0x1e059dcb1d8 <col:55> Inherited Implicit
|-FunctionDecl 0x1e059dcb390 <line:128:24, col:86> col:36 _isdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dcb218 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dcb290 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcb550 <line:129:36> col:36 implicit isxdigit 'int (int)' extern
| |-ParmVarDecl 0x1e059dcb5f0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dcb660 <col:36> Implicit
| `-PureAttr 0x1e059dcb6b8 <col:36> Implicit
|-FunctionDecl 0x1e059dcb6e0 prev 0x1e059dcb550 <col:24, col:56> col:36 isxdigit 'int (int)'
| |-ParmVarDecl 0x1e059dcb470 <col:50, col:54> col:54 _C 'int'
| |-NoThrowAttr 0x1e059dcb7d0 <col:36> Inherited Implicit
| `-PureAttr 0x1e059dcb7f8 <col:36> Inherited Implicit
|-FunctionDecl 0x1e059dcb9b0 <line:130:24, col:87> col:36 _isxdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dcb838 <col:53, col:57> col:57 _C 'int'
| `-ParmVarDecl 0x1e059dcb8b0 <col:70, col:80> col:80 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcbb70 <line:131:55> col:55 implicit isspace 'int (int)' extern
| |-ParmVarDecl 0x1e059dcbc10 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dcbc80 <col:55> Implicit
| `-PureAttr 0x1e059dcbcd8 <col:55> Implicit
|-FunctionDecl 0x1e059dcbd00 prev 0x1e059dcbb70 <col:43, col:74> col:55 isspace 'int (int)'
| |-ParmVarDecl 0x1e059dcba90 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1e059dcbdf0 <col:55> Inherited Implicit
| `-PureAttr 0x1e059dcbe18 <col:55> Inherited Implicit
|-FunctionDecl 0x1e059dc4fd0 <line:132:24, col:86> col:36 _isspace_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dcbe58 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dc4ed0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc5190 <line:133:36> col:36 implicit ispunct 'int (int)' extern
| |-ParmVarDecl 0x1e059dc5230 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dc52a0 <col:36> Implicit
| `-PureAttr 0x1e059dc52f8 <col:36> Implicit
|-FunctionDecl 0x1e059dc5320 prev 0x1e059dc5190 <col:24, col:55> col:36 ispunct 'int (int)'
| |-ParmVarDecl 0x1e059dc50b0 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1e059dc5410 <col:36> Inherited Implicit
| `-PureAttr 0x1e059dc5438 <col:36> Inherited Implicit
|-FunctionDecl 0x1e059dc55f0 <line:134:24, col:86> col:36 _ispunct_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dc5478 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dc54f0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc57b0 <line:135:36> col:36 implicit isblank 'int (int)' extern
| |-ParmVarDecl 0x1e059dc5850 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dc58c0 <col:36> Implicit
| `-PureAttr 0x1e059dc5918 <col:36> Implicit
|-FunctionDecl 0x1e059dc5940 prev 0x1e059dc57b0 <col:24, col:55> col:36 isblank 'int (int)'
| |-ParmVarDecl 0x1e059dc56d0 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1e059dc5a30 <col:36> Inherited Implicit
| `-PureAttr 0x1e059dc5a58 <col:36> Inherited Implicit
|-FunctionDecl 0x1e059dc5c10 <line:136:24, col:86> col:36 _isblank_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dc5a98 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dc5b10 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc5dd0 <line:137:55> col:55 implicit isalnum 'int (int)' extern
| |-ParmVarDecl 0x1e059dc3ec0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dc3f30 <col:55> Implicit
| `-PureAttr 0x1e059dc3f88 <col:55> Implicit
|-FunctionDecl 0x1e059dc3fb0 prev 0x1e059dc5dd0 <col:43, col:74> col:55 isalnum 'int (int)'
| |-ParmVarDecl 0x1e059dc5cf0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1e059dc40a0 <col:55> Inherited Implicit
| `-PureAttr 0x1e059dc40c8 <col:55> Inherited Implicit
|-FunctionDecl 0x1e059dc4280 <line:138:24, col:86> col:36 _isalnum_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dc4108 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dc4180 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc4440 <line:139:36> col:36 implicit isprint 'int (int)' extern
| |-ParmVarDecl 0x1e059dc44e0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dc4550 <col:36> Implicit
| `-PureAttr 0x1e059dc45a8 <col:36> Implicit
|-FunctionDecl 0x1e059dc45d0 prev 0x1e059dc4440 <col:24, col:55> col:36 isprint 'int (int)'
| |-ParmVarDecl 0x1e059dc4360 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1e059dc46c0 <col:36> Inherited Implicit
| `-PureAttr 0x1e059dc46e8 <col:36> Inherited Implicit
|-FunctionDecl 0x1e059dc48a0 <line:140:24, col:86> col:36 _isprint_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dc4728 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dc47a0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc4a60 <line:141:36> col:36 implicit isgraph 'int (int)' extern
| |-ParmVarDecl 0x1e059dc4b00 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dc4b70 <col:36> Implicit
| `-PureAttr 0x1e059dc4bc8 <col:36> Implicit
|-FunctionDecl 0x1e059dc4bf0 prev 0x1e059dc4a60 <col:24, col:55> col:36 isgraph 'int (int)'
| |-ParmVarDecl 0x1e059dc4980 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1e059dc4ce0 <col:36> Inherited Implicit
| `-PureAttr 0x1e059dc4d08 <col:36> Inherited Implicit
|-FunctionDecl 0x1e059dcbf40 <line:142:24, col:86> col:36 _isgraph_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dc4d48 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dc4dc0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcc100 <line:143:36> col:36 implicit iscntrl 'int (int)' extern
| |-ParmVarDecl 0x1e059dcc1a0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dcc210 <col:36> Implicit
| `-PureAttr 0x1e059dcc268 <col:36> Implicit
|-FunctionDecl 0x1e059dcc290 prev 0x1e059dcc100 <col:24, col:55> col:36 iscntrl 'int (int)'
| |-ParmVarDecl 0x1e059dcc020 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1e059dcc380 <col:36> Inherited Implicit
| `-PureAttr 0x1e059dcc3a8 <col:36> Inherited Implicit
|-FunctionDecl 0x1e059dcc560 <line:144:24, col:86> col:36 _iscntrl_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dcc3e8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dcc460 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcc720 <line:145:55> col:55 implicit toupper 'int (int)' extern
| |-ParmVarDecl 0x1e059dcc7c0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dcc830 <col:55> Implicit
| `-PureAttr 0x1e059dcc888 <col:55> Implicit
|-FunctionDecl 0x1e059dcc8b0 prev 0x1e059dcc720 <col:43, col:74> col:55 toupper 'int (int)'
| |-ParmVarDecl 0x1e059dcc640 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1e059dcc9a0 <col:55> Inherited Implicit
| `-PureAttr 0x1e059dcc9c8 <col:55> Inherited Implicit
|-FunctionDecl 0x1e059dccae8 <line:146:55> col:55 implicit tolower 'int (int)' extern
| |-ParmVarDecl 0x1e059dccb88 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1e059dccbf8 <col:55> Implicit
| `-PureAttr 0x1e059dccc50 <col:55> Implicit
|-FunctionDecl 0x1e059dccc78 prev 0x1e059dccae8 <col:43, col:74> col:55 tolower 'int (int)'
| |-ParmVarDecl 0x1e059dcca08 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1e059dccd68 <col:55> Inherited Implicit
| `-PureAttr 0x1e059dccd90 <col:55> Inherited Implicit
|-FunctionDecl 0x1e059dccf50 <line:147:43, col:75> col:55 _tolower 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1e059dccdd0 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1e059dcd1a0 <line:148:24, col:86> col:36 _tolower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dcd028 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dcd0a0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcd360 <line:149:43, col:75> col:55 _toupper 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1e059dcd280 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1e059dcd5b0 <line:150:24, col:86> col:36 _toupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dcd438 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1e059dcd4b0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcd770 <line:151:24, col:57> col:36 __isascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1e059dcd690 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1e059dcd928 <line:152:24, col:57> col:36 __toascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1e059dcd848 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1e059dcdae0 <line:153:24, col:57> col:36 __iscsymf 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1e059dcda00 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1e059dcdc98 <line:154:24, col:56> col:36 __iscsym 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1e059dcdbb8 <col:50, col:54> col:54 _C 'int'
|-FunctionDecl 0x1e059dc6ef0 <line:164:24, col:59> col:36 iswalpha 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dcdd90 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dc71e0 <line:165:24, col:90> col:36 _iswalpha_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dc6fc0 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dc7038 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc7398 <line:166:24, col:59> col:36 iswupper 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dc72b8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dc75e0 <line:167:24, col:90> col:36 _iswupper_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dc7468 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dc74e0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc7798 <line:168:24, col:59> col:36 iswlower 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dc76b8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dc79e0 <line:169:24, col:90> col:36 _iswlower_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dc7868 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dc78e0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc7b98 <line:170:24, col:59> col:36 iswdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dc7ab8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dc7de0 <line:171:24, col:90> col:36 _iswdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dc7c68 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dc7ce0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc8ff0 <line:172:24, col:60> col:36 iswxdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dc8f10 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dc9238 <line:173:24, col:91> col:36 _iswxdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dc90c0 <col:54, col:61> col:61 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dc9138 <col:74, col:84> col:84 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc93f0 <line:174:24, col:59> col:36 iswspace 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dc9310 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dc9638 <line:175:24, col:90> col:36 _iswspace_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dc94c0 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dc9538 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc97f0 <line:176:24, col:59> col:36 iswpunct 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dc9710 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dc9a38 <line:177:24, col:90> col:36 _iswpunct_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dc98c0 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dc9938 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dc9bf0 <line:178:24, col:59> col:36 iswblank 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dc9b10 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dc9e38 <line:179:24, col:90> col:36 _iswblank_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dc9cc0 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dc9d38 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dd0060 <line:180:24, col:59> col:36 iswalnum 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dcff80 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dd02a8 <line:181:24, col:90> col:36 _iswalnum_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dd0130 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dd01a8 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dd0460 <line:182:24, col:59> col:36 iswprint 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dd0380 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dd06a8 <line:183:24, col:90> col:36 _iswprint_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dd0530 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dd05a8 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dd0860 <line:184:24, col:59> col:36 iswgraph 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dd0780 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dd0aa8 <line:185:24, col:90> col:36 _iswgraph_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dd0930 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dd09a8 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dd0c60 <line:186:24, col:59> col:36 iswcntrl 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dd0b80 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dd0ea8 <line:187:24, col:90> col:36 _iswcntrl_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dd0d30 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dd0da8 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dce040 <line:188:24, col:59> col:36 iswascii 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dcdf60 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dce280 <line:190:24, col:62> col:39 towupper 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1e059dce110 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dce568 <line:191:24, col:93> col:39 _towupper_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dce350 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dce3c8 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dce718 <line:192:24, col:62> col:39 towlower 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1e059dce640 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dce958 <line:193:24, col:93> col:39 _towlower_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dce7e8 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dce860 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcec50 <line:194:24, col:80> col:36 iswctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1e059dcea30 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dceaa8 <col:66, col:75> col:75 _Type 'wctype_t':'unsigned short'
|-FunctionDecl 0x1e059dcf018 <line:195:24, col:111> col:36 _iswctype_l 'int (wint_t, wctype_t, _locale_t) __attribute__((cdecl))':'int (wint_t, wctype_t, _locale_t)'
| |-ParmVarDecl 0x1e059dced28 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1e059dceda0 <col:69, col:78> col:78 _Type 'wctype_t':'unsigned short'
| `-ParmVarDecl 0x1e059dcee18 <col:94, col:104> col:104 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcf1d8 <line:197:24, col:61> col:36 __iswcsymf 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dcf0f8 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dcf420 <line:198:24, col:90> col:36 _iswcsymf_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dcf2a8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dcf320 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcf5d8 <line:199:24, col:60> col:36 __iswcsym 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1e059dcf4f8 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1e059dcf820 <line:200:24, col:89> col:36 _iswcsym_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1e059dcf6a8 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1e059dcf720 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dcf9e0 <line:203:24, col:58> col:36 isleadbyte 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1e059dcf900 <col:52, col:56> col:56 _C 'int'
|-FunctionDecl 0x1e059dcfc30 <line:204:24, col:89> col:36 _isleadbyte_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1e059dcfab8 <col:55, col:59> col:59 _C 'int'
| `-ParmVarDecl 0x1e059dcfb30 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dd0fd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:205:90> col:45 is_wctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1e059dcfe08 <col:60, col:67> col:67 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1e059dcfe80 <col:76, col:85> col:85 _Type 'wctype_t':'unsigned short'
| `-DeprecatedAttr 0x1e059dd1080 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instead. See online help for details." ""
|-VarDecl 0x1e059dd11c8 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:235:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x1e059dd1370 <line:239:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1e059dd1598 <line:240:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x1e059dd1438 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1e059dd1910 <.//openssl//file_jk/after\crypto\o_str.c:17:1, line:26:1> line:17:5 OPENSSL_memcmp 'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1e059dd16a0 <col:20, col:32> col:32 used v1 'const void *'
| |-ParmVarDecl 0x1e059dd1720 <col:36, col:48> col:48 used v2 'const void *'
| |-ParmVarDecl 0x1e059dd1798 <col:52, col:59> col:59 used n 'size_t':'unsigned long long'
| `-CompoundStmt 0x1e059e2ac88 <line:18:1, line:26:1>
|   |-DeclStmt 0x1e059dd1b98 <line:19:5, col:43>
|   | |-VarDecl 0x1e059dd19f8 <col:5, col:31> col:26 used c1 'const unsigned char *' cinit
|   | | `-ImplicitCastExpr 0x1e059dd1a98 <col:31> 'const unsigned char *' <BitCast>
|   | |   `-ImplicitCastExpr 0x1e059dd1a80 <col:31> 'const void *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1e059dd1a60 <col:31> 'const void *' lvalue ParmVar 0x1e059dd16a0 'v1' 'const void *'
|   | `-VarDecl 0x1e059dd1ac8 <col:5, col:41> col:36 used c2 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1e059dd1b68 <col:41> 'const unsigned char *' <BitCast>
|   |     `-ImplicitCastExpr 0x1e059dd1b50 <col:41> 'const void *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1e059dd1b30 <col:41> 'const void *' lvalue ParmVar 0x1e059dd1720 'v2' 'const void *'
|   |-DeclStmt 0x1e059dd1c58 <line:20:5, col:16>
|   | `-VarDecl 0x1e059dd1bc8 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1e059dd1c30 <col:15> 'int' 0
|   |-WhileStmt 0x1e059e2ac28 <line:22:5, line:23:22>
|   | |-BinaryOperator 0x1e059dd1eb8 <line:22:12, col:38> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1e059dd1ea0 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1e059dd1c70 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059dd1798 'n' 'size_t':'unsigned long long'
|   | | `-BinaryOperator 0x1e059dd1e80 <col:17, col:38> 'int' '=='
|   | |   |-ParenExpr 0x1e059dd1e38 <col:17, col:33> 'int'
|   | |   | `-BinaryOperator 0x1e059dd1e18 <col:18, col:31> 'int' '='
|   | |   |   |-DeclRefExpr 0x1e059dd1c90 <col:18> 'int' lvalue Var 0x1e059dd1bc8 'ret' 'int'
|   | |   |   `-BinaryOperator 0x1e059dd1df8 <col:24, col:31> 'int' '-'
|   | |   |     |-ImplicitCastExpr 0x1e059dd1db0 <col:24, col:25> 'int' <IntegralCast>
|   | |   |     | `-ImplicitCastExpr 0x1e059dd1d98 <col:24, col:25> 'unsigned char' <LValueToRValue>
|   | |   |     |   `-UnaryOperator 0x1e059dd1d18 <col:24, col:25> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | |   |     |     `-ImplicitCastExpr 0x1e059dd1d00 <col:25> 'const unsigned char *' <LValueToRValue>
|   | |   |     |       `-DeclRefExpr 0x1e059dd1cc8 <col:25> 'const unsigned char *' lvalue Var 0x1e059dd19f8 'c1' 'const unsigned char *'
|   | |   |     `-ImplicitCastExpr 0x1e059dd1de0 <col:30, col:31> 'int' <IntegralCast>
|   | |   |       `-ImplicitCastExpr 0x1e059dd1dc8 <col:30, col:31> 'unsigned char' <LValueToRValue>
|   | |   |         `-UnaryOperator 0x1e059dd1d80 <col:30, col:31> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | |   |           `-ImplicitCastExpr 0x1e059dd1d68 <col:31> 'const unsigned char *' <LValueToRValue>
|   | |   |             `-DeclRefExpr 0x1e059dd1d30 <col:31> 'const unsigned char *' lvalue Var 0x1e059dd1ac8 'c2' 'const unsigned char *'
|   | |   `-IntegerLiteral 0x1e059dd1e58 <col:38> 'int' 0
|   | `-BinaryOperator 0x1e059e2ac08 <line:23:9, col:22> 'const unsigned char *' ','
|   |   |-BinaryOperator 0x1e059dd1f48 <col:9, col:16> 'const unsigned char *' ','
|   |   | |-UnaryOperator 0x1e059dd1ef8 <col:9, col:10> 'size_t':'unsigned long long' postfix '--'
|   |   | | `-DeclRefExpr 0x1e059dd1ed8 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059dd1798 'n' 'size_t':'unsigned long long'
|   |   | `-UnaryOperator 0x1e059dd1f30 <col:14, col:16> 'const unsigned char *' postfix '++'
|   |   |   `-DeclRefExpr 0x1e059dd1f10 <col:14> 'const unsigned char *' lvalue Var 0x1e059dd19f8 'c1' 'const unsigned char *'
|   |   `-UnaryOperator 0x1e059e2abf0 <col:20, col:22> 'const unsigned char *' postfix '++'
|   |     `-DeclRefExpr 0x1e059dd1f68 <col:20> 'const unsigned char *' lvalue Var 0x1e059dd1ac8 'c2' 'const unsigned char *'
|   `-ReturnStmt 0x1e059e2ac78 <line:25:5, col:12>
|     `-ImplicitCastExpr 0x1e059e2ac60 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1e059e2ac40 <col:12> 'int' lvalue Var 0x1e059dd1bc8 'ret' 'int'
|-FunctionDecl 0x1e059e2af00 <line:28:1, line:40:1> line:28:7 CRYPTO_strdup 'char *(const char *, const char *, int)'
| |-ParmVarDecl 0x1e059e2acd0 <col:21, col:33> col:33 used str 'const char *'
| |-ParmVarDecl 0x1e059e2ad50 <col:38, col:50> col:50 used file 'const char *'
| |-ParmVarDecl 0x1e059e2add0 <col:56, col:60> col:60 used line 'int'
| `-CompoundStmt 0x1e059e2bb78 <line:29:1, line:40:1>
|   |-DeclStmt 0x1e059e2b050 <line:30:5, col:14>
|   | `-VarDecl 0x1e059e2afe8 <col:5, col:11> col:11 used ret 'char *'
|   |-DeclStmt 0x1e059e2b0e0 <line:31:5, col:16>
|   | `-VarDecl 0x1e059e2b078 <col:5, col:12> col:12 used size 'size_t':'unsigned long long'
|   |-BinaryOperator 0x1e059e2b3e0 <line:35:5, col:26> 'size_t':'unsigned long long' '='
|   | |-DeclRefExpr 0x1e059e2b118 <col:5> 'size_t':'unsigned long long' lvalue Var 0x1e059e2b078 'size' 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x1e059e2b3c0 <col:12, col:26> 'unsigned long long' '+'
|   |   |-CallExpr 0x1e059e2b340 <col:12, col:22> 'unsigned long long'
|   |   | |-ImplicitCastExpr 0x1e059e2b328 <col:12> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1e059e2b290 <col:12> 'unsigned long long (const char *)' Function 0x1e059e2b180 'strlen' 'unsigned long long (const char *)'
|   |   | `-ImplicitCastExpr 0x1e059e2b368 <col:19> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1e059e2b2c8 <col:19> 'const char *' lvalue ParmVar 0x1e059e2acd0 'str' 'const char *'
|   |   `-ImplicitCastExpr 0x1e059e2b3a8 <col:26> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1e059e2b380 <col:26> 'int' 1
|   |-BinaryOperator 0x1e059e2b6b8 <line:36:5, col:41> 'char *' '='
|   | |-DeclRefExpr 0x1e059e2b400 <col:5> 'char *' lvalue Var 0x1e059e2afe8 'ret' 'char *'
|   | `-ImplicitCastExpr 0x1e059e2b6a0 <col:11, col:41> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x1e059e2b620 <col:11, col:41> 'int'
|   |     |-ImplicitCastExpr 0x1e059e2b608 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1e059e2b558 <col:11> 'int ()' Function 0x1e059e2b490 'CRYPTO_malloc' 'int ()'
|   |     |-ImplicitCastExpr 0x1e059e2b658 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1e059e2b578 <col:25> 'size_t':'unsigned long long' lvalue Var 0x1e059e2b078 'size' 'size_t':'unsigned long long'
|   |     |-ImplicitCastExpr 0x1e059e2b670 <col:31> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1e059e2b598 <col:31> 'const char *' lvalue ParmVar 0x1e059e2ad50 'file' 'const char *'
|   |     `-ImplicitCastExpr 0x1e059e2b688 <col:37> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1e059e2b5b8 <col:37> 'int' lvalue ParmVar 0x1e059e2add0 'line' 'int'
|   |-IfStmt 0x1e059e2bb18 <line:37:5, line:38:30>
|   | |-OpaqueValueExpr 0x1e059e2bb00 <<invalid sloc>> '_Bool'
|   | `-CallExpr 0x1e059e2ba50 <col:9, col:30> 'void *'
|   |   |-ImplicitCastExpr 0x1e059e2ba38 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1e059e2b930 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x1e059e2b740 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |-ImplicitCastExpr 0x1e059e2baa0 <col:16> 'void *' <BitCast>
|   |   | `-ImplicitCastExpr 0x1e059e2ba88 <col:16> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1e059e2b968 <col:16> 'char *' lvalue Var 0x1e059e2afe8 'ret' 'char *'
|   |   |-ImplicitCastExpr 0x1e059e2bad0 <col:21> 'const void *' <BitCast>
|   |   | `-ImplicitCastExpr 0x1e059e2bab8 <col:21> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1e059e2b988 <col:21> 'const char *' lvalue ParmVar 0x1e059e2acd0 'str' 'const char *'
|   |   `-ImplicitCastExpr 0x1e059e2bae8 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1e059e2b9a8 <col:26> 'size_t':'unsigned long long' lvalue Var 0x1e059e2b078 'size' 'size_t':'unsigned long long'
|   `-ReturnStmt 0x1e059e2bb68 <line:39:5, col:12>
|     `-ImplicitCastExpr 0x1e059e2bb50 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x1e059e2bb30 <col:12> 'char *' lvalue Var 0x1e059e2afe8 'ret' 'char *'
|-FunctionDecl 0x1e059e2b180 <line:35:12> col:12 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x1e059e2b220 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1e059e2b740 <line:38:9> col:9 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1e059e2b7e0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1e059e2b848 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1e059e2b8b0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1e059e24eb0 <line:42:1, line:58:1> line:42:7 CRYPTO_strndup 'char *(const char *, size_t, const char *, int)'
| |-ParmVarDecl 0x1e059e24b90 <col:22, col:34> col:34 used str 'const char *'
| |-ParmVarDecl 0x1e059e24c08 <col:39, col:46> col:46 used s 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1e059e24c88 <col:49, col:61> col:61 used file 'const char *'
| |-ParmVarDecl 0x1e059e24d08 <col:67, col:71> col:71 used line 'int'
| `-CompoundStmt 0x1e059e25818 <line:43:1, line:58:1>
|   |-DeclStmt 0x1e059e25000 <line:44:5, col:18>
|   | `-VarDecl 0x1e059e24f98 <col:5, col:12> col:12 used maxlen 'size_t':'unsigned long long'
|   |-DeclStmt 0x1e059e25098 <line:45:5, col:14>
|   | `-VarDecl 0x1e059e25030 <col:5, col:11> col:11 used ret 'char *'
|   |-BinaryOperator 0x1e059e252e8 <line:50:5, col:36> 'size_t':'unsigned long long' '='
|   | |-DeclRefExpr 0x1e059e250d0 <col:5> 'size_t':'unsigned long long' lvalue Var 0x1e059e24f98 'maxlen' 'size_t':'unsigned long long'
|   | `-ImplicitCastExpr 0x1e059e252d0 <col:14, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   `-CallExpr 0x1e059e25270 <col:14, col:36> 'int'
|   |     |-ImplicitCastExpr 0x1e059e25258 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1e059e251f8 <col:14> 'int ()' Function 0x1e059e25130 'OPENSSL_strnlen' 'int ()'
|   |     |-ImplicitCastExpr 0x1e059e252a0 <col:30> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1e059e25218 <col:30> 'const char *' lvalue ParmVar 0x1e059e24b90 'str' 'const char *'
|   |     `-ImplicitCastExpr 0x1e059e252b8 <col:35> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1e059e25238 <col:35> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e24c08 's' 'size_t':'unsigned long long'
|   |-BinaryOperator 0x1e059e254d0 <line:52:5, col:47> 'char *' '='
|   | |-DeclRefExpr 0x1e059e25308 <col:5> 'char *' lvalue Var 0x1e059e25030 'ret' 'char *'
|   | `-ImplicitCastExpr 0x1e059e254b8 <col:11, col:47> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x1e059e25450 <col:11, col:47> 'int'
|   |     |-ImplicitCastExpr 0x1e059e25438 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1e059e25340 <col:11> 'int ()' Function 0x1e059e2b490 'CRYPTO_malloc' 'int ()'
|   |     |-BinaryOperator 0x1e059e253d8 <col:25, col:34> 'unsigned long long' '+'
|   |     | |-ImplicitCastExpr 0x1e059e253a8 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1e059e25360 <col:25> 'size_t':'unsigned long long' lvalue Var 0x1e059e24f98 'maxlen' 'size_t':'unsigned long long'
|   |     | `-ImplicitCastExpr 0x1e059e253c0 <col:34> 'unsigned long long' <IntegralCast>
|   |     |   `-IntegerLiteral 0x1e059e25380 <col:34> 'int' 1
|   |     |-ImplicitCastExpr 0x1e059e25488 <col:37> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1e059e253f8 <col:37> 'const char *' lvalue ParmVar 0x1e059e24c88 'file' 'const char *'
|   |     `-ImplicitCastExpr 0x1e059e254a0 <col:43> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1e059e25418 <col:43> 'int' lvalue ParmVar 0x1e059e24d08 'line' 'int'
|   |-IfStmt 0x1e059e257b8 <line:53:5, line:56:5>
|   | |-ImplicitCastExpr 0x1e059e25510 <line:53:9> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1e059e254f0 <col:9> 'char *' lvalue Var 0x1e059e25030 'ret' 'char *'
|   | `-CompoundStmt 0x1e059e25798 <col:14, line:56:5>
|   |   |-CallExpr 0x1e059e25608 <line:54:9, col:32> 'void *'
|   |   | |-ImplicitCastExpr 0x1e059e255f0 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1e059e25528 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x1e059e2b740 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1e059e25658 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1e059e25640 <col:16> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1e059e25548 <col:16> 'char *' lvalue Var 0x1e059e25030 'ret' 'char *'
|   |   | |-ImplicitCastExpr 0x1e059e25688 <col:21> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1e059e25670 <col:21> 'const char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1e059e25568 <col:21> 'const char *' lvalue ParmVar 0x1e059e24b90 'str' 'const char *'
|   |   | `-ImplicitCastExpr 0x1e059e256a0 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1e059e25588 <col:26> 'size_t':'unsigned long long' lvalue Var 0x1e059e24f98 'maxlen' 'size_t':'unsigned long long'
|   |   `-BinaryOperator 0x1e059e25778 <line:55:9, col:23> 'char' '='
|   |     |-ArraySubscriptExpr 0x1e059e25728 <col:9, col:19> 'char' lvalue
|   |     | |-ImplicitCastExpr 0x1e059e256f8 <col:9> 'char *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1e059e256b8 <col:9> 'char *' lvalue Var 0x1e059e25030 'ret' 'char *'
|   |     | `-ImplicitCastExpr 0x1e059e25710 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1e059e256d8 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1e059e24f98 'maxlen' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x1e059e25760 <col:23> 'char' <IntegralCast>
|   |       `-CharacterLiteral 0x1e059e25748 <col:23> 'int' 0
|   `-ReturnStmt 0x1e059e25808 <line:57:5, col:12>
|     `-ImplicitCastExpr 0x1e059e257f0 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x1e059e257d0 <col:12> 'char *' lvalue Var 0x1e059e25030 'ret' 'char *'
|-FunctionDecl 0x1e059e2cc10 <line:60:1, line:73:1> line:60:7 CRYPTO_memdup 'void *(const void *, size_t, const char *, int)'
| |-ParmVarDecl 0x1e059e25870 <col:21, col:33> col:33 used data 'const void *'
| |-ParmVarDecl 0x1e059e258e8 <col:39, col:46> col:46 used siz 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1e059e25968 <col:51, col:63> col:63 used file 'const char *'
| |-ParmVarDecl 0x1e059e259e8 <col:69, col:73> col:73 used line 'int'
| `-CompoundStmt 0x1e059e2d2a0 <line:61:1, line:73:1>
|   |-DeclStmt 0x1e059e2cd68 <line:62:5, col:14>
|   | `-VarDecl 0x1e059e2cd00 <col:5, col:11> col:11 used ret 'void *'
|   |-BinaryOperator 0x1e059e2cfa0 <line:67:5, col:40> 'void *' '='
|   | |-DeclRefExpr 0x1e059e2ce38 <col:5> 'void *' lvalue Var 0x1e059e2cd00 'ret' 'void *'
|   | `-ImplicitCastExpr 0x1e059e2cf88 <col:11, col:40> 'void *' <IntegralToPointer>
|   |   `-CallExpr 0x1e059e2cf08 <col:11, col:40> 'int'
|   |     |-ImplicitCastExpr 0x1e059e2cef0 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1e059e2ce70 <col:11> 'int ()' Function 0x1e059e2b490 'CRYPTO_malloc' 'int ()'
|   |     |-ImplicitCastExpr 0x1e059e2cf40 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1e059e2ce90 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e258e8 'siz' 'size_t':'unsigned long long'
|   |     |-ImplicitCastExpr 0x1e059e2cf58 <col:30> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1e059e2ceb0 <col:30> 'const char *' lvalue ParmVar 0x1e059e25968 'file' 'const char *'
|   |     `-ImplicitCastExpr 0x1e059e2cf70 <col:36> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1e059e2ced0 <col:36> 'int' lvalue ParmVar 0x1e059e259e8 'line' 'int'
|   |-IfStmt 0x1e059e2d118 <line:68:5, line:71:5>
|   | |-OpaqueValueExpr 0x1e059e2d100 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1e059e2d0f0 <line:68:22, line:71:5>
|   `-ReturnStmt 0x1e059e2d290 <line:72:5, col:33>
|     `-CallExpr 0x1e059e2d210 <col:12, col:33> 'void *'
|       |-ImplicitCastExpr 0x1e059e2d1f8 <col:12> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1e059e2d130 <col:12> 'void *(void *, const void *, unsigned long long)' Function 0x1e059e2b740 'memcpy' 'void *(void *, const void *, unsigned long long)'
|       |-ImplicitCastExpr 0x1e059e2d248 <col:19> 'void *' <LValueToRValue>
|       | `-DeclRefExpr 0x1e059e2d150 <col:19> 'void *' lvalue Var 0x1e059e2cd00 'ret' 'void *'
|       |-ImplicitCastExpr 0x1e059e2d260 <col:24> 'const void *' <LValueToRValue>
|       | `-DeclRefExpr 0x1e059e2d170 <col:24> 'const void *' lvalue ParmVar 0x1e059e25870 'data' 'const void *'
|       `-ImplicitCastExpr 0x1e059e2d278 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x1e059e2d190 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e258e8 'siz' 'size_t':'unsigned long long'
|-FunctionDecl 0x1e059e2d4a8 <line:75:1, line:82:1> line:75:8 invalid OPENSSL_strnlen 'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1e059e2d2e8 <col:24, col:36> col:36 used str 'const char *'
| |-ParmVarDecl 0x1e059e2d360 <col:41, col:48> col:48 used maxlen 'size_t':'unsigned long long'
| `-CompoundStmt 0x1e059e2d960 <line:76:1, line:82:1>
|   |-DeclStmt 0x1e059e2d5f0 <line:77:5, col:18>
|   | `-VarDecl 0x1e059e2d588 <col:5, col:17> col:17 used p 'const char *'
|   |-ForStmt 0x1e059e2d870 <line:79:5, col:53>
|   | |-BinaryOperator 0x1e059e2d678 <col:10, col:14> 'const char *' '='
|   | | |-DeclRefExpr 0x1e059e2d608 <col:10> 'const char *' lvalue Var 0x1e059e2d588 'p' 'const char *'
|   | | `-ImplicitCastExpr 0x1e059e2d660 <col:14> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1e059e2d640 <col:14> 'const char *' lvalue ParmVar 0x1e059e2d2e8 'str' 'const char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1e059e2d810 <col:19, col:42> 'int' '&&'
|   | | |-BinaryOperator 0x1e059e2d710 <col:19, col:31> 'int' '!='
|   | | | |-UnaryOperator 0x1e059e2d6b8 <col:19, col:25> 'size_t':'unsigned long long' postfix '--'
|   | | | | `-DeclRefExpr 0x1e059e2d698 <col:19> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e2d360 'maxlen' 'size_t':'unsigned long long'
|   | | | `-ImplicitCastExpr 0x1e059e2d6f8 <col:31> 'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1e059e2d6d0 <col:31> 'int' 0
|   | | `-BinaryOperator 0x1e059e2d7f0 <col:36, col:42> 'int' '!='
|   | |   |-ImplicitCastExpr 0x1e059e2d7d8 <col:36, col:37> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x1e059e2d7c0 <col:36, col:37> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x1e059e2d790 <col:36, col:37> 'const char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x1e059e2d778 <col:37> 'const char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x1e059e2d758 <col:37> 'const char *' lvalue Var 0x1e059e2d588 'p' 'const char *'
|   | |   `-CharacterLiteral 0x1e059e2d7a8 <col:42> 'int' 0
|   | |-UnaryOperator 0x1e059e2d850 <col:48, col:50> 'const char *' prefix '++'
|   | | `-DeclRefExpr 0x1e059e2d830 <col:50> 'const char *' lvalue Var 0x1e059e2d588 'p' 'const char *'
|   | `-NullStmt 0x1e059e2d868 <col:53>
|   `-ReturnStmt 0x1e059e2d950 <line:81:5, col:16>
|     `-ImplicitCastExpr 0x1e059e2d938 <col:12, col:16> 'size_t':'unsigned long long' <IntegralCast>
|       `-BinaryOperator 0x1e059e2d918 <col:12, col:16> 'long long' '-'
|         |-ImplicitCastExpr 0x1e059e2d8e8 <col:12> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1e059e2d8a8 <col:12> 'const char *' lvalue Var 0x1e059e2d588 'p' 'const char *'
|         `-ImplicitCastExpr 0x1e059e2d900 <col:16> 'const char *' <LValueToRValue>
|           `-DeclRefExpr 0x1e059e2d8c8 <col:16> 'const char *' lvalue ParmVar 0x1e059e2d2e8 'str' 'const char *'
|-FunctionDecl 0x1e059e28bd0 <line:84:1, line:94:1> line:84:8 used OPENSSL_strlcpy 'size_t (char *, const char *, size_t)'
| |-ParmVarDecl 0x1e059e2d9a0 <col:24, col:30> col:30 used dst 'char *'
| |-ParmVarDecl 0x1e059e2da20 <col:35, col:47> col:47 used src 'const char *'
| |-ParmVarDecl 0x1e059e2da98 <col:52, col:59> col:59 used size 'size_t':'unsigned long long'
| `-CompoundStmt 0x1e059e29268 <line:85:1, line:94:1>
|   |-DeclStmt 0x1e059e28d58 <line:86:5, col:17>
|   | `-VarDecl 0x1e059e28cb0 <col:5, col:16> col:12 used l 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x1e059e28d40 <col:16> 'size_t':'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1e059e28d18 <col:16> 'int' 0
|   |-ForStmt 0x1e059e29028 <line:87:5, line:90:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1e059e28e88 <line:87:12, col:25> 'int' '&&'
|   | | |-BinaryOperator 0x1e059e28de8 <col:12, col:19> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1e059e28db8 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1e059e28d70 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e2da98 'size' 'size_t':'unsigned long long'
|   | | | `-ImplicitCastExpr 0x1e059e28dd0 <col:19> 'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1e059e28d90 <col:19> 'int' 1
|   | | `-ImplicitCastExpr 0x1e059e28e70 <col:24, col:25> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x1e059e28e58 <col:24, col:25> 'char' <LValueToRValue>
|   | |     `-UnaryOperator 0x1e059e28e40 <col:24, col:25> 'const char' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1e059e28e28 <col:25> 'const char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1e059e28e08 <col:25> 'const char *' lvalue ParmVar 0x1e059e2da20 'src' 'const char *'
|   | |-UnaryOperator 0x1e059e28ec8 <col:30, col:34> 'size_t':'unsigned long long' postfix '--'
|   | | `-DeclRefExpr 0x1e059e28ea8 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e2da98 'size' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x1e059e29008 <col:38, line:90:5>
|   |   |-BinaryOperator 0x1e059e28f98 <line:88:9, col:22> 'char' '='
|   |   | |-UnaryOperator 0x1e059e28f18 <col:9, col:13> 'char' lvalue prefix '*' cannot overflow
|   |   | | `-UnaryOperator 0x1e059e28f00 <col:10, col:13> 'char *' postfix '++'
|   |   | |   `-DeclRefExpr 0x1e059e28ee0 <col:10> 'char *' lvalue ParmVar 0x1e059e2d9a0 'dst' 'char *'
|   |   | `-ImplicitCastExpr 0x1e059e28f80 <col:18, col:22> 'char' <LValueToRValue>
|   |   |   `-UnaryOperator 0x1e059e28f68 <col:18, col:22> 'const char' lvalue prefix '*' cannot overflow
|   |   |     `-UnaryOperator 0x1e059e28f50 <col:19, col:22> 'const char *' postfix '++'
|   |   |       `-DeclRefExpr 0x1e059e28f30 <col:19> 'const char *' lvalue ParmVar 0x1e059e2da20 'src' 'const char *'
|   |   `-UnaryOperator 0x1e059e28ff0 <line:89:9, col:10> 'size_t':'unsigned long long' postfix '++'
|   |     `-DeclRefExpr 0x1e059e28fb8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1e059e28cb0 'l' 'size_t':'unsigned long long'
|   |-IfStmt 0x1e059e29138 <line:91:5, line:92:16>
|   | |-ImplicitCastExpr 0x1e059e29080 <line:91:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | `-DeclRefExpr 0x1e059e29060 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e2da98 'size' 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x1e059e29118 <line:92:9, col:16> 'char' '='
|   |   |-UnaryOperator 0x1e059e290d0 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x1e059e290b8 <col:10> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1e059e29098 <col:10> 'char *' lvalue ParmVar 0x1e059e2d9a0 'dst' 'char *'
|   |   `-ImplicitCastExpr 0x1e059e29100 <col:16> 'char' <IntegralCast>
|   |     `-CharacterLiteral 0x1e059e290e8 <col:16> 'int' 0
|   `-ReturnStmt 0x1e059e29258 <line:93:5, col:26>
|     `-BinaryOperator 0x1e059e29238 <col:12, col:26> 'unsigned long long' '+'
|       |-ImplicitCastExpr 0x1e059e29220 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1e059e29150 <col:12> 'size_t':'unsigned long long' lvalue Var 0x1e059e28cb0 'l' 'size_t':'unsigned long long'
|       `-CallExpr 0x1e059e291e0 <col:16, col:26> 'unsigned long long'
|         |-ImplicitCastExpr 0x1e059e291c8 <col:16> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1e059e29170 <col:16> 'unsigned long long (const char *)' Function 0x1e059e2b180 'strlen' 'unsigned long long (const char *)'
|         `-ImplicitCastExpr 0x1e059e29208 <col:23> 'const char *' <LValueToRValue>
|           `-DeclRefExpr 0x1e059e29190 <col:23> 'const char *' lvalue ParmVar 0x1e059e2da20 'src' 'const char *'
|-FunctionDecl 0x1e059e29490 <line:96:1, line:102:1> line:96:8 OPENSSL_strlcat 'size_t (char *, const char *, size_t)'
| |-ParmVarDecl 0x1e059e292b0 <col:24, col:30> col:30 used dst 'char *'
| |-ParmVarDecl 0x1e059e29330 <col:35, col:47> col:47 used src 'const char *'
| |-ParmVarDecl 0x1e059e293a8 <col:52, col:59> col:59 used size 'size_t':'unsigned long long'
| `-CompoundStmt 0x1e059e29a58 <line:97:1, line:102:1>
|   |-DeclStmt 0x1e059e29618 <line:98:5, col:17>
|   | `-VarDecl 0x1e059e29570 <col:5, col:16> col:12 used l 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x1e059e29600 <col:16> 'size_t':'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1e059e295d8 <col:16> 'int' 0
|   |-ForStmt 0x1e059e29848 <line:99:5, line:100:10>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1e059e29748 <line:99:12, col:25> 'int' '&&'
|   | | |-BinaryOperator 0x1e059e296a8 <col:12, col:19> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1e059e29678 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1e059e29630 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e293a8 'size' 'size_t':'unsigned long long'
|   | | | `-ImplicitCastExpr 0x1e059e29690 <col:19> 'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1e059e29650 <col:19> 'int' 0
|   | | `-ImplicitCastExpr 0x1e059e29730 <col:24, col:25> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x1e059e29718 <col:24, col:25> 'char' <LValueToRValue>
|   | |     `-UnaryOperator 0x1e059e29700 <col:24, col:25> 'char' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1e059e296e8 <col:25> 'char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1e059e296c8 <col:25> 'char *' lvalue ParmVar 0x1e059e292b0 'dst' 'char *'
|   | |-BinaryOperator 0x1e059e297d8 <col:30, col:41> 'char *' ','
|   | | |-UnaryOperator 0x1e059e29788 <col:30, col:34> 'size_t':'unsigned long long' postfix '--'
|   | | | `-DeclRefExpr 0x1e059e29768 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e293a8 'size' 'size_t':'unsigned long long'
|   | | `-UnaryOperator 0x1e059e297c0 <col:38, col:41> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x1e059e297a0 <col:38> 'char *' lvalue ParmVar 0x1e059e292b0 'dst' 'char *'
|   | `-UnaryOperator 0x1e059e29830 <line:100:9, col:10> 'size_t':'unsigned long long' postfix '++'
|   |   `-DeclRefExpr 0x1e059e297f8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1e059e29570 'l' 'size_t':'unsigned long long'
|   `-ReturnStmt 0x1e059e29a48 <line:101:5, col:46>
|     `-BinaryOperator 0x1e059e29a28 <col:12, col:46> 'unsigned long long' '+'
|       |-ImplicitCastExpr 0x1e059e29a10 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1e059e29880 <col:12> 'size_t':'unsigned long long' lvalue Var 0x1e059e29570 'l' 'size_t':'unsigned long long'
|       `-CallExpr 0x1e059e29990 <col:16, col:46> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1e059e29978 <col:16> 'size_t (*)(char *, const char *, size_t)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1e059e298a0 <col:16> 'size_t (char *, const char *, size_t)' Function 0x1e059e28bd0 'OPENSSL_strlcpy' 'size_t (char *, const char *, size_t)'
|         |-ImplicitCastExpr 0x1e059e299c8 <col:32> 'char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1e059e298c0 <col:32> 'char *' lvalue ParmVar 0x1e059e292b0 'dst' 'char *'
|         |-ImplicitCastExpr 0x1e059e299e0 <col:37> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1e059e298e0 <col:37> 'const char *' lvalue ParmVar 0x1e059e29330 'src' 'const char *'
|         `-ImplicitCastExpr 0x1e059e299f8 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1e059e29900 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e293a8 'size' 'size_t':'unsigned long long'
|-FunctionDecl 0x1e059e25ba0 <line:104:1, line:145:1> line:104:5 used OPENSSL_hexchar2int 'int (unsigned char)'
| |-ParmVarDecl 0x1e059e29a98 <col:25, col:39> col:39 used c 'unsigned char'
| `-CompoundStmt 0x1e059e268c0 <line:105:1, line:145:1>
|   |-SwitchStmt 0x1e059e25cb0 <line:110:5, line:143:5>
|   | |-ImplicitCastExpr 0x1e059e25c98 <line:110:13> 'int' <IntegralCast>
|   | | `-ImplicitCastExpr 0x1e059e25c80 <col:13> 'unsigned char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1e059e25c60 <col:13> 'unsigned char' lvalue ParmVar 0x1e059e29a98 'c' 'unsigned char'
|   | `-CompoundStmt 0x1e059e267e0 <col:16, line:143:5>
|   |   |-CaseStmt 0x1e059e25d00 <line:111:5, line:112:16>
|   |   | |-ConstantExpr 0x1e059e25ce8 <line:111:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e25cd0 <col:10> 'int' 48
|   |   | `-ReturnStmt 0x1e059e25d50 <line:112:9, col:16>
|   |   |   `-IntegerLiteral 0x1e059e25d28 <col:16> 'int' 0
|   |   |-CaseStmt 0x1e059e25d90 <line:113:5, line:114:16>
|   |   | |-ConstantExpr 0x1e059e25d78 <line:113:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e25d60 <col:10> 'int' 49
|   |   | `-ReturnStmt 0x1e059e25de0 <line:114:9, col:16>
|   |   |   `-IntegerLiteral 0x1e059e25db8 <col:16> 'int' 1
|   |   |-CaseStmt 0x1e059e25e20 <line:115:5, line:116:16>
|   |   | |-ConstantExpr 0x1e059e25e08 <line:115:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e25df0 <col:10> 'int' 50
|   |   | `-ReturnStmt 0x1e059e25e70 <line:116:9, col:16>
|   |   |   `-IntegerLiteral 0x1e059e25e48 <col:16> 'int' 2
|   |   |-CaseStmt 0x1e059e25eb0 <line:117:5, line:118:16>
|   |   | |-ConstantExpr 0x1e059e25e98 <line:117:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e25e80 <col:10> 'int' 51
|   |   | `-ReturnStmt 0x1e059e25f00 <line:118:9, col:16>
|   |   |   `-IntegerLiteral 0x1e059e25ed8 <col:16> 'int' 3
|   |   |-CaseStmt 0x1e059e25f40 <line:119:5, line:120:18>
|   |   | |-ConstantExpr 0x1e059e25f28 <line:119:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e25f10 <col:10> 'int' 52
|   |   | `-ReturnStmt 0x1e059e25f90 <line:120:11, col:18>
|   |   |   `-IntegerLiteral 0x1e059e25f68 <col:18> 'int' 4
|   |   |-CaseStmt 0x1e059e25fd0 <line:121:5, line:122:18>
|   |   | |-ConstantExpr 0x1e059e25fb8 <line:121:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e25fa0 <col:10> 'int' 53
|   |   | `-ReturnStmt 0x1e059e26020 <line:122:11, col:18>
|   |   |   `-IntegerLiteral 0x1e059e25ff8 <col:18> 'int' 5
|   |   |-CaseStmt 0x1e059e26060 <line:123:5, line:124:18>
|   |   | |-ConstantExpr 0x1e059e26048 <line:123:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e26030 <col:10> 'int' 54
|   |   | `-ReturnStmt 0x1e059e260b0 <line:124:11, col:18>
|   |   |   `-IntegerLiteral 0x1e059e26088 <col:18> 'int' 6
|   |   |-CaseStmt 0x1e059e260f0 <line:125:5, line:126:18>
|   |   | |-ConstantExpr 0x1e059e260d8 <line:125:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e260c0 <col:10> 'int' 55
|   |   | `-ReturnStmt 0x1e059e26140 <line:126:11, col:18>
|   |   |   `-IntegerLiteral 0x1e059e26118 <col:18> 'int' 7
|   |   |-CaseStmt 0x1e059e26180 <line:127:5, line:128:18>
|   |   | |-ConstantExpr 0x1e059e26168 <line:127:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e26150 <col:10> 'int' 56
|   |   | `-ReturnStmt 0x1e059e261d0 <line:128:11, col:18>
|   |   |   `-IntegerLiteral 0x1e059e261a8 <col:18> 'int' 8
|   |   |-CaseStmt 0x1e059e26210 <line:129:5, line:130:18>
|   |   | |-ConstantExpr 0x1e059e261f8 <line:129:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e261e0 <col:10> 'int' 57
|   |   | `-ReturnStmt 0x1e059e26260 <line:130:11, col:18>
|   |   |   `-IntegerLiteral 0x1e059e26238 <col:18> 'int' 9
|   |   |-CaseStmt 0x1e059e262a0 <line:131:5, line:132:18>
|   |   | |-ConstantExpr 0x1e059e26288 <line:131:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e26270 <col:10> 'int' 97
|   |   | `-CaseStmt 0x1e059e262f8 <col:15, line:132:18>
|   |   |   |-ConstantExpr 0x1e059e262e0 <line:131:20> 'int'
|   |   |   | `-CharacterLiteral 0x1e059e262c8 <col:20> 'int' 65
|   |   |   `-ReturnStmt 0x1e059e26348 <line:132:11, col:18>
|   |   |     `-IntegerLiteral 0x1e059e26320 <col:18> 'int' 10
|   |   |-CaseStmt 0x1e059e26388 <line:133:5, line:134:18>
|   |   | |-ConstantExpr 0x1e059e26370 <line:133:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e26358 <col:10> 'int' 98
|   |   | `-CaseStmt 0x1e059e263e0 <col:15, line:134:18>
|   |   |   |-ConstantExpr 0x1e059e263c8 <line:133:20> 'int'
|   |   |   | `-CharacterLiteral 0x1e059e263b0 <col:20> 'int' 66
|   |   |   `-ReturnStmt 0x1e059e26430 <line:134:11, col:18>
|   |   |     `-IntegerLiteral 0x1e059e26408 <col:18> 'int' 11
|   |   |-CaseStmt 0x1e059e26470 <line:135:5, line:136:18>
|   |   | |-ConstantExpr 0x1e059e26458 <line:135:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e26440 <col:10> 'int' 99
|   |   | `-CaseStmt 0x1e059e264c8 <col:15, line:136:18>
|   |   |   |-ConstantExpr 0x1e059e264b0 <line:135:20> 'int'
|   |   |   | `-CharacterLiteral 0x1e059e26498 <col:20> 'int' 67
|   |   |   `-ReturnStmt 0x1e059e26518 <line:136:11, col:18>
|   |   |     `-IntegerLiteral 0x1e059e264f0 <col:18> 'int' 12
|   |   |-CaseStmt 0x1e059e26558 <line:137:5, line:138:18>
|   |   | |-ConstantExpr 0x1e059e26540 <line:137:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e26528 <col:10> 'int' 100
|   |   | `-CaseStmt 0x1e059e265b0 <col:15, line:138:18>
|   |   |   |-ConstantExpr 0x1e059e26598 <line:137:20> 'int'
|   |   |   | `-CharacterLiteral 0x1e059e26580 <col:20> 'int' 68
|   |   |   `-ReturnStmt 0x1e059e26600 <line:138:11, col:18>
|   |   |     `-IntegerLiteral 0x1e059e265d8 <col:18> 'int' 13
|   |   |-CaseStmt 0x1e059e26640 <line:139:5, line:140:18>
|   |   | |-ConstantExpr 0x1e059e26628 <line:139:10> 'int'
|   |   | | `-CharacterLiteral 0x1e059e26610 <col:10> 'int' 101
|   |   | `-CaseStmt 0x1e059e26698 <col:15, line:140:18>
|   |   |   |-ConstantExpr 0x1e059e26680 <line:139:20> 'int'
|   |   |   | `-CharacterLiteral 0x1e059e26668 <col:20> 'int' 69
|   |   |   `-ReturnStmt 0x1e059e266e8 <line:140:11, col:18>
|   |   |     `-IntegerLiteral 0x1e059e266c0 <col:18> 'int' 14
|   |   `-CaseStmt 0x1e059e26728 <line:141:5, line:142:18>
|   |     |-ConstantExpr 0x1e059e26710 <line:141:10> 'int'
|   |     | `-CharacterLiteral 0x1e059e266f8 <col:10> 'int' 102
|   |     `-CaseStmt 0x1e059e26780 <col:15, line:142:18>
|   |       |-ConstantExpr 0x1e059e26768 <line:141:20> 'int'
|   |       | `-CharacterLiteral 0x1e059e26750 <col:20> 'int' 70
|   |       `-ReturnStmt 0x1e059e267d0 <line:142:11, col:18>
|   |         `-IntegerLiteral 0x1e059e267a8 <col:18> 'int' 15
|   `-ReturnStmt 0x1e059e268b0 <line:144:5, col:13>
|     `-UnaryOperator 0x1e059e26898 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x1e059e26870 <col:13> 'int' 1
|-FunctionDecl 0x1e059e26ae0 <line:150:1, line:187:1> line:150:16 OPENSSL_hexstr2buf 'unsigned char *(const char *, long *)'
| |-ParmVarDecl 0x1e059e268f8 <col:35, col:47> col:47 used str 'const char *'
| |-ParmVarDecl 0x1e059e269a0 <col:52, col:58> col:58 used len 'long *'
| `-CompoundStmt 0x1e059e272c8 <line:151:1, line:187:1>
|   |-DeclStmt 0x1e059e2dd50 <line:152:5, col:30>
|   | |-VarDecl 0x1e059e2dc50 <col:5, col:20> col:20 used hexbuf 'unsigned char *'
|   | `-VarDecl 0x1e059e2dcd0 <col:5, col:29> col:29 used q 'unsigned char *'
|   |-DeclStmt 0x1e059e2de80 <line:153:5, col:25>
|   | |-VarDecl 0x1e059e2dd80 <col:5, col:19> col:19 used ch 'unsigned char'
|   | `-VarDecl 0x1e059e2de00 <col:5, col:23> col:23 used cl 'unsigned char'
|   |-DeclStmt 0x1e059e2dfb0 <line:154:5, col:17>
|   | |-VarDecl 0x1e059e2deb0 <col:5, col:9> col:9 used chi 'int'
|   | `-VarDecl 0x1e059e2df30 <col:5, col:14> col:14 used cli 'int'
|   |-DeclStmt 0x1e059e2e048 <line:155:5, col:27>
|   | `-VarDecl 0x1e059e2dfe0 <col:5, col:26> col:26 used p 'const unsigned char *'
|   |-DeclStmt 0x1e059e2e0d8 <line:156:5, col:13>
|   | `-VarDecl 0x1e059e2e070 <col:5, col:12> col:12 used s 'size_t':'unsigned long long'
|   |-BinaryOperator 0x1e059e2e1d8 <line:158:5, col:19> 'size_t':'unsigned long long' '='
|   | |-DeclRefExpr 0x1e059e2e0f0 <col:5> 'size_t':'unsigned long long' lvalue Var 0x1e059e2e070 's' 'size_t':'unsigned long long'
|   | `-CallExpr 0x1e059e2e198 <col:9, col:19> 'unsigned long long'
|   |   |-ImplicitCastExpr 0x1e059e2e180 <col:9> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1e059e2e128 <col:9> 'unsigned long long (const char *)' Function 0x1e059e2b180 'strlen' 'unsigned long long (const char *)'
|   |   `-ImplicitCastExpr 0x1e059e2e1c0 <col:16> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1e059e2e148 <col:16> 'const char *' lvalue ParmVar 0x1e059e268f8 'str' 'const char *'
|   |-IfStmt 0x1e059e2e4a0 <line:159:5, line:162:5>
|   | |-OpaqueValueExpr 0x1e059e2e488 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1e059e2e478 <line:159:52, line:162:5>
|   |-ForStmt 0x1e059e270e0 <line:163:5, line:182:5>
|   | |-BinaryOperator 0x1e059e2e618 <line:163:10, col:46> 'unsigned char *' ','
|   | | |-BinaryOperator 0x1e059e2e568 <col:10, col:37> 'const unsigned char *' '='
|   | | | |-DeclRefExpr 0x1e059e2e4b8 <col:10> 'const unsigned char *' lvalue Var 0x1e059e2dfe0 'p' 'const unsigned char *'
|   | | | `-CStyleCastExpr 0x1e059e2e540 <col:14, col:37> 'const unsigned char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x1e059e2e528 <col:37> 'const char *' <LValueToRValue> part_of_explicit_cast
|   | | |     `-DeclRefExpr 0x1e059e2e4f0 <col:37> 'const char *' lvalue ParmVar 0x1e059e268f8 'str' 'const char *'
|   | | `-BinaryOperator 0x1e059e2e5f8 <col:42, col:46> 'unsigned char *' '='
|   | |   |-DeclRefExpr 0x1e059e2e588 <col:42> 'unsigned char *' lvalue Var 0x1e059e2dcd0 'q' 'unsigned char *'
|   | |   `-ImplicitCastExpr 0x1e059e2e5e0 <col:46> 'unsigned char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1e059e2e5c0 <col:46> 'unsigned char *' lvalue Var 0x1e059e2dc50 'hexbuf' 'unsigned char *'
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x1e059e2e688 <col:54, col:55> 'unsigned char' <LValueToRValue>
|   | | `-UnaryOperator 0x1e059e2e670 <col:54, col:55> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x1e059e2e658 <col:55> 'const unsigned char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1e059e2e638 <col:55> 'const unsigned char *' lvalue Var 0x1e059e2dfe0 'p' 'const unsigned char *'
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x1e059e27090 <col:60, line:182:5>
|   |   |-BinaryOperator 0x1e059e2e740 <line:164:9, col:16> 'unsigned char' '='
|   |   | |-DeclRefExpr 0x1e059e2e6a0 <col:9> 'unsigned char' lvalue Var 0x1e059e2dd80 'ch' 'unsigned char'
|   |   | `-ImplicitCastExpr 0x1e059e2e728 <col:14, col:16> 'unsigned char' <LValueToRValue>
|   |   |   `-UnaryOperator 0x1e059e2e710 <col:14, col:16> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |     `-UnaryOperator 0x1e059e2e6f8 <col:15, col:16> 'const unsigned char *' postfix '++'
|   |   |       `-DeclRefExpr 0x1e059e2e6d8 <col:15> 'const unsigned char *' lvalue Var 0x1e059e2dfe0 'p' 'const unsigned char *'
|   |   |-IfStmt 0x1e059e2e7f0 <line:165:9, line:166:13>
|   |   | |-BinaryOperator 0x1e059e2e7c8 <line:165:13, col:19> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1e059e2e7b0 <col:13> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x1e059e2e798 <col:13> 'unsigned char' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1e059e2e760 <col:13> 'unsigned char' lvalue Var 0x1e059e2dd80 'ch' 'unsigned char'
|   |   | | `-CharacterLiteral 0x1e059e2e780 <col:19> 'int' 58
|   |   | `-ContinueStmt 0x1e059e2e7e8 <line:166:13>
|   |   |-BinaryOperator 0x1e059e2e8a8 <line:167:9, col:16> 'unsigned char' '='
|   |   | |-DeclRefExpr 0x1e059e2e808 <col:9> 'unsigned char' lvalue Var 0x1e059e2de00 'cl' 'unsigned char'
|   |   | `-ImplicitCastExpr 0x1e059e2e890 <col:14, col:16> 'unsigned char' <LValueToRValue>
|   |   |   `-UnaryOperator 0x1e059e2e878 <col:14, col:16> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |     `-UnaryOperator 0x1e059e2e860 <col:15, col:16> 'const unsigned char *' postfix '++'
|   |   |       `-DeclRefExpr 0x1e059e2e840 <col:15> 'const unsigned char *' lvalue Var 0x1e059e2dfe0 'p' 'const unsigned char *'
|   |   |-IfStmt 0x1e059e2ead8 <line:168:9, line:173:9>
|   |   | |-UnaryOperator 0x1e059e2e900 <line:168:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1e059e2e8e8 <col:14> 'unsigned char' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1e059e2e8c8 <col:14> 'unsigned char' lvalue Var 0x1e059e2de00 'cl' 'unsigned char'
|   |   | `-CompoundStmt 0x1e059e2eac0 <col:18, line:173:9>
|   |   |   `-CallExpr 0x1e059e2ea80 <line:171:13, col:32> 'int'
|   |   |     |-ImplicitCastExpr 0x1e059e2ea68 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1e059e2ea28 <col:13> 'int ()' Function 0x1e059e2e960 'OPENSSL_free' 'int ()'
|   |   |     `-ImplicitCastExpr 0x1e059e2eaa8 <col:26> 'unsigned char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1e059e2ea48 <col:26> 'unsigned char *' lvalue Var 0x1e059e2dc50 'hexbuf' 'unsigned char *'
|   |   |-BinaryOperator 0x1e059e2ebf0 <line:174:9, col:37> 'int' '='
|   |   | |-DeclRefExpr 0x1e059e2eaf0 <col:9> 'int' lvalue Var 0x1e059e2df30 'cli' 'int'
|   |   | `-CallExpr 0x1e059e2ebb0 <col:15, col:37> 'int'
|   |   |   |-ImplicitCastExpr 0x1e059e2eb98 <col:15> 'int (*)(unsigned char)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1e059e2eb28 <col:15> 'int (unsigned char)' Function 0x1e059e25ba0 'OPENSSL_hexchar2int' 'int (unsigned char)'
|   |   |   `-ImplicitCastExpr 0x1e059e2ebd8 <col:35> 'unsigned char' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1e059e2eb48 <col:35> 'unsigned char' lvalue Var 0x1e059e2de00 'cl' 'unsigned char'
|   |   |-BinaryOperator 0x1e059e26c80 <line:175:9, col:37> 'int' '='
|   |   | |-DeclRefExpr 0x1e059e26bb0 <col:9> 'int' lvalue Var 0x1e059e2deb0 'chi' 'int'
|   |   | `-CallExpr 0x1e059e26c40 <col:15, col:37> 'int'
|   |   |   |-ImplicitCastExpr 0x1e059e26c28 <col:15> 'int (*)(unsigned char)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1e059e26be8 <col:15> 'int (unsigned char)' Function 0x1e059e25ba0 'OPENSSL_hexchar2int' 'int (unsigned char)'
|   |   |   `-ImplicitCastExpr 0x1e059e26c68 <col:35> 'unsigned char' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1e059e26c08 <col:35> 'unsigned char' lvalue Var 0x1e059e2dd80 'ch' 'unsigned char'
|   |   |-IfStmt 0x1e059e26e90 <line:176:9, line:180:9>
|   |   | |-BinaryOperator 0x1e059e26da0 <line:176:13, col:30> 'int' '||'
|   |   | | |-BinaryOperator 0x1e059e26d00 <col:13, col:19> 'int' '<'
|   |   | | | |-ImplicitCastExpr 0x1e059e26ce8 <col:13> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1e059e26ca0 <col:13> 'int' lvalue Var 0x1e059e2df30 'cli' 'int'
|   |   | | | `-IntegerLiteral 0x1e059e26cc0 <col:19> 'int' 0
|   |   | | `-BinaryOperator 0x1e059e26d80 <col:24, col:30> 'int' '<'
|   |   | |   |-ImplicitCastExpr 0x1e059e26d68 <col:24> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1e059e26d20 <col:24> 'int' lvalue Var 0x1e059e2deb0 'chi' 'int'
|   |   | |   `-IntegerLiteral 0x1e059e26d40 <col:30> 'int' 0
|   |   | `-CompoundStmt 0x1e059e26e78 <col:33, line:180:9>
|   |   |   `-CallExpr 0x1e059e26e18 <line:177:13, col:32> 'int'
|   |   |     |-ImplicitCastExpr 0x1e059e26e00 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1e059e26dc0 <col:13> 'int ()' Function 0x1e059e2e960 'OPENSSL_free' 'int ()'
|   |   |     `-ImplicitCastExpr 0x1e059e26e40 <col:26> 'unsigned char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1e059e26de0 <col:26> 'unsigned char *' lvalue Var 0x1e059e2dc50 'hexbuf' 'unsigned char *'
|   |   `-BinaryOperator 0x1e059e27070 <line:181:9, col:48> 'unsigned char' '='
|   |     |-UnaryOperator 0x1e059e26ee0 <col:9, col:11> 'unsigned char' lvalue prefix '*' cannot overflow
|   |     | `-UnaryOperator 0x1e059e26ec8 <col:10, col:11> 'unsigned char *' postfix '++'
|   |     |   `-DeclRefExpr 0x1e059e26ea8 <col:10> 'unsigned char *' lvalue Var 0x1e059e2dcd0 'q' 'unsigned char *'
|   |     `-CStyleCastExpr 0x1e059e27048 <col:16, col:48> 'unsigned char' <IntegralCast>
|   |       `-ParenExpr 0x1e059e27028 <col:31, col:48> 'int'
|   |         `-BinaryOperator 0x1e059e26fd0 <col:32, col:45> 'int' '|'
|   |           |-ParenExpr 0x1e059e26f78 <col:32, col:41> 'int'
|   |           | `-BinaryOperator 0x1e059e26f58 <col:33, col:40> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x1e059e26f40 <col:33> 'int' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x1e059e26ef8 <col:33> 'int' lvalue Var 0x1e059e2deb0 'chi' 'int'
|   |           |   `-IntegerLiteral 0x1e059e26f18 <col:40> 'int' 4
|   |           `-ImplicitCastExpr 0x1e059e26fb8 <col:45> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x1e059e26f98 <col:45> 'int' lvalue Var 0x1e059e2df30 'cli' 'int'
|   |-IfStmt 0x1e059e27268 <line:184:5, line:185:20>
|   | |-ImplicitCastExpr 0x1e059e27138 <line:184:9> 'long *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1e059e27118 <col:9> 'long *' lvalue ParmVar 0x1e059e269a0 'len' 'long *'
|   | `-BinaryOperator 0x1e059e27248 <line:185:9, col:20> 'long' '='
|   |   |-UnaryOperator 0x1e059e27188 <col:9, col:10> 'long' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x1e059e27170 <col:10> 'long *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1e059e27150 <col:10> 'long *' lvalue ParmVar 0x1e059e269a0 'len' 'long *'
|   |   `-ImplicitCastExpr 0x1e059e27230 <col:16, col:20> 'long' <IntegralCast>
|   |     `-BinaryOperator 0x1e059e27210 <col:16, col:20> 'long long' '-'
|   |       |-ImplicitCastExpr 0x1e059e271e0 <col:16> 'unsigned char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1e059e271a0 <col:16> 'unsigned char *' lvalue Var 0x1e059e2dcd0 'q' 'unsigned char *'
|   |       `-ImplicitCastExpr 0x1e059e271f8 <col:20> 'unsigned char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1e059e271c0 <col:20> 'unsigned char *' lvalue Var 0x1e059e2dc50 'hexbuf' 'unsigned char *'
|   `-ReturnStmt 0x1e059e272b8 <line:186:5, col:12>
|     `-ImplicitCastExpr 0x1e059e272a0 <col:12> 'unsigned char *' <LValueToRValue>
|       `-DeclRefExpr 0x1e059e27280 <col:12> 'unsigned char *' lvalue Var 0x1e059e2dc50 'hexbuf' 'unsigned char *'
|-FunctionDecl 0x1e059e274d0 <line:194:1, line:222:1> line:194:7 OPENSSL_buf2hexstr 'char *(const unsigned char *, long)'
| |-ParmVarDecl 0x1e059e27340 <col:26, col:47> col:47 used buffer 'const unsigned char *'
| |-ParmVarDecl 0x1e059e273c0 <col:55, col:60> col:60 used len 'long'
| `-CompoundStmt 0x1e059e2f778 <line:195:1, line:222:1>
|   |-DeclStmt 0x1e059e27718 <line:196:5, col:52>
|   | `-VarDecl 0x1e059e27618 <col:5, col:34> col:23 used hexdig 'const char [17]' static cinit
|   |   `-StringLiteral 0x1e059e276b8 <col:34> 'const char [17]' "0123456789ABCDEF"
|   |-DeclStmt 0x1e059e27848 <line:197:5, col:18>
|   | |-VarDecl 0x1e059e27748 <col:5, col:11> col:11 used tmp 'char *'
|   | `-VarDecl 0x1e059e277c8 <col:5, col:17> col:17 used q 'char *'
|   |-DeclStmt 0x1e059e278e0 <line:198:5, col:27>
|   | `-VarDecl 0x1e059e27878 <col:5, col:26> col:26 used p 'const unsigned char *'
|   |-DeclStmt 0x1e059e27978 <line:199:5, col:10>
|   | `-VarDecl 0x1e059e27910 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x1e059e2ec70 <line:201:5, line:204:5>
|   | |-BinaryOperator 0x1e059e27a08 <line:201:9, col:16> 'int' '=='
|   | | |-ImplicitCastExpr 0x1e059e279d8 <col:9> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1e059e27990 <col:9> 'long' lvalue ParmVar 0x1e059e273c0 'len' 'long'
|   | | `-ImplicitCastExpr 0x1e059e279f0 <col:16> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1e059e279b0 <col:16> 'int' 0
|   | `-CompoundStmt 0x1e059e2ec58 <line:202:5, line:204:5>
|   |   `-ReturnStmt 0x1e059e2ec48 <line:203:9, col:32>
|   |     `-ImplicitCastExpr 0x1e059e2ec30 <col:16, col:32> 'char *' <IntegralToPointer>
|   |       `-CallExpr 0x1e059e27b78 <col:16, col:32> 'int'
|   |         |-ImplicitCastExpr 0x1e059e27b60 <col:16> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x1e059e27b18 <col:16> 'int ()' Function 0x1e059e27a50 'OPENSSL_zalloc' 'int ()'
|   |         `-IntegerLiteral 0x1e059e27b38 <col:31> 'int' 1
|   |-IfStmt 0x1e059e2ee58 <line:206:5, line:209:5>
|   | |-OpaqueValueExpr 0x1e059e2ee40 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1e059e2ee30 <line:206:50, line:209:5>
|   |-BinaryOperator 0x1e059e2eee0 <line:210:5, col:9> 'char *' '='
|   | |-DeclRefExpr 0x1e059e2ee70 <col:5> 'char *' lvalue Var 0x1e059e277c8 'q' 'char *'
|   | `-ImplicitCastExpr 0x1e059e2eec8 <col:9> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1e059e2eea8 <col:9> 'char *' lvalue Var 0x1e059e27748 'tmp' 'char *'
|   |-ForStmt 0x1e059e2f600 <line:211:5, line:215:5>
|   | |-BinaryOperator 0x1e059e2f010 <line:211:10, col:21> 'const unsigned char *' ','
|   | | |-BinaryOperator 0x1e059e2ef60 <col:10, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x1e059e2ef00 <col:10> 'int' lvalue Var 0x1e059e27910 'i' 'int'
|   | | | `-IntegerLiteral 0x1e059e2ef38 <col:14> 'int' 0
|   | | `-BinaryOperator 0x1e059e2eff0 <col:17, col:21> 'const unsigned char *' '='
|   | |   |-DeclRefExpr 0x1e059e2ef80 <col:17> 'const unsigned char *' lvalue Var 0x1e059e27878 'p' 'const unsigned char *'
|   | |   `-ImplicitCastExpr 0x1e059e2efd8 <col:21> 'const unsigned char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1e059e2efb8 <col:21> 'const unsigned char *' lvalue ParmVar 0x1e059e27340 'buffer' 'const unsigned char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1e059e2f0b8 <col:29, col:33> 'int' '<'
|   | | |-ImplicitCastExpr 0x1e059e2f0a0 <col:29> 'long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1e059e2f070 <col:29> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1e059e2f030 <col:29> 'int' lvalue Var 0x1e059e27910 'i' 'int'
|   | | `-ImplicitCastExpr 0x1e059e2f088 <col:33> 'long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1e059e2f050 <col:33> 'long' lvalue ParmVar 0x1e059e273c0 'len' 'long'
|   | |-BinaryOperator 0x1e059e2f148 <col:38, col:44> 'const unsigned char *' ','
|   | | |-UnaryOperator 0x1e059e2f0f8 <col:38, col:39> 'int' postfix '++'
|   | | | `-DeclRefExpr 0x1e059e2f0d8 <col:38> 'int' lvalue Var 0x1e059e27910 'i' 'int'
|   | | `-UnaryOperator 0x1e059e2f130 <col:43, col:44> 'const unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1e059e2f110 <col:43> 'const unsigned char *' lvalue Var 0x1e059e27878 'p' 'const unsigned char *'
|   | `-CompoundStmt 0x1e059e2f5d8 <col:48, line:215:5>
|   |   |-BinaryOperator 0x1e059e2f370 <line:212:9, col:38> 'char' '='
|   |   | |-UnaryOperator 0x1e059e2f1a0 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
|   |   | | `-UnaryOperator 0x1e059e2f188 <col:10, col:11> 'char *' postfix '++'
|   |   | |   `-DeclRefExpr 0x1e059e2f168 <col:10> 'char *' lvalue Var 0x1e059e277c8 'q' 'char *'
|   |   | `-ImplicitCastExpr 0x1e059e2f358 <col:16, col:38> 'char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1e059e2f338 <col:16, col:38> 'const char' lvalue
|   |   |     |-ImplicitCastExpr 0x1e059e2f320 <col:16> 'const char *' <ArrayToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1e059e2f1b8 <col:16> 'const char [17]' lvalue Var 0x1e059e27618 'hexdig' 'const char [17]'
|   |   |     `-BinaryOperator 0x1e059e2f300 <col:23, col:35> 'int' '&'
|   |   |       |-ParenExpr 0x1e059e2f2b8 <col:23, col:31> 'int'
|   |   |       | `-BinaryOperator 0x1e059e2f298 <col:24, col:30> 'int' '>>'
|   |   |       |   |-ImplicitCastExpr 0x1e059e2f280 <col:24, col:25> 'int' <IntegralCast>
|   |   |       |   | `-ImplicitCastExpr 0x1e059e2f268 <col:24, col:25> 'unsigned char' <LValueToRValue>
|   |   |       |   |   `-UnaryOperator 0x1e059e2f228 <col:24, col:25> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |       |   |     `-ImplicitCastExpr 0x1e059e2f210 <col:25> 'const unsigned char *' <LValueToRValue>
|   |   |       |   |       `-DeclRefExpr 0x1e059e2f1f0 <col:25> 'const unsigned char *' lvalue Var 0x1e059e27878 'p' 'const unsigned char *'
|   |   |       |   `-IntegerLiteral 0x1e059e2f240 <col:30> 'int' 4
|   |   |       `-IntegerLiteral 0x1e059e2f2d8 <col:35> 'int' 15
|   |   |-BinaryOperator 0x1e059e2f518 <line:213:9, col:31> 'char' '='
|   |   | |-UnaryOperator 0x1e059e2f3c8 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
|   |   | | `-UnaryOperator 0x1e059e2f3b0 <col:10, col:11> 'char *' postfix '++'
|   |   | |   `-DeclRefExpr 0x1e059e2f390 <col:10> 'char *' lvalue Var 0x1e059e277c8 'q' 'char *'
|   |   | `-ImplicitCastExpr 0x1e059e2f500 <col:16, col:31> 'char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1e059e2f4e0 <col:16, col:31> 'const char' lvalue
|   |   |     |-ImplicitCastExpr 0x1e059e2f4c8 <col:16> 'const char *' <ArrayToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1e059e2f3e0 <col:16> 'const char [17]' lvalue Var 0x1e059e27618 'hexdig' 'const char [17]'
|   |   |     `-BinaryOperator 0x1e059e2f4a8 <col:23, col:28> 'int' '&'
|   |   |       |-ImplicitCastExpr 0x1e059e2f490 <col:23, col:24> 'int' <IntegralCast>
|   |   |       | `-ImplicitCastExpr 0x1e059e2f478 <col:23, col:24> 'unsigned char' <LValueToRValue>
|   |   |       |   `-UnaryOperator 0x1e059e2f438 <col:23, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x1e059e2f420 <col:24> 'const unsigned char *' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x1e059e2f400 <col:24> 'const unsigned char *' lvalue Var 0x1e059e27878 'p' 'const unsigned char *'
|   |   |       `-IntegerLiteral 0x1e059e2f450 <col:28> 'int' 15
|   |   `-BinaryOperator 0x1e059e2f5b8 <line:214:9, col:16> 'char' '='
|   |     |-UnaryOperator 0x1e059e2f570 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
|   |     | `-UnaryOperator 0x1e059e2f558 <col:10, col:11> 'char *' postfix '++'
|   |     |   `-DeclRefExpr 0x1e059e2f538 <col:10> 'char *' lvalue Var 0x1e059e277c8 'q' 'char *'
|   |     `-ImplicitCastExpr 0x1e059e2f5a0 <col:16> 'char' <IntegralCast>
|   |       `-CharacterLiteral 0x1e059e2f588 <col:16> 'int' 58
|   |-BinaryOperator 0x1e059e2f710 <line:216:5, col:13> 'char' '='
|   | |-ArraySubscriptExpr 0x1e059e2f6b0 <col:5, col:9> 'char' lvalue
|   | | |-ImplicitCastExpr 0x1e059e2f698 <col:5> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1e059e2f638 <col:5> 'char *' lvalue Var 0x1e059e277c8 'q' 'char *'
|   | | `-UnaryOperator 0x1e059e2f680 <col:7, col:8> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x1e059e2f658 <col:8> 'int' 1
|   | `-ImplicitCastExpr 0x1e059e2f6f8 <col:13> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x1e059e2f6d0 <col:13> 'int' 0
|   `-ReturnStmt 0x1e059e2f768 <line:221:5, col:12>
|     `-ImplicitCastExpr 0x1e059e2f750 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x1e059e2f730 <col:12> 'char *' lvalue Var 0x1e059e27748 'tmp' 'char *'
`-FunctionDecl 0x1e059e2fa60 <line:224:1, line:251:1> line:224:5 openssl_strerror_r 'int (int, char *, size_t)'
  |-ParmVarDecl 0x1e059e2f7f0 <col:24, col:28> col:28 used errnum 'int'
  |-ParmVarDecl 0x1e059e2f870 <col:36, col:42> col:42 used buf 'char *'
  |-ParmVarDecl 0x1e059e2f8e8 <col:47, col:54> col:54 used buflen 'size_t':'unsigned long long'
  `-CompoundStmt 0x1e059e36df0 <line:225:1, line:251:1>
    `-ReturnStmt 0x1e059e36de0 <line:227:5, col:43>
      `-UnaryOperator 0x1e059e36dc8 <col:12, col:43> 'int' prefix '!' cannot overflow
        `-CallExpr 0x1e059e36d48 <col:13, col:43> 'int'
          |-ImplicitCastExpr 0x1e059e36d30 <col:13> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x1e059e36cb0 <col:13> 'int ()' Function 0x1e059e2fb58 'strerror_s' 'int ()'
          |-ImplicitCastExpr 0x1e059e36d80 <col:24> 'char *' <LValueToRValue>
          | `-DeclRefExpr 0x1e059e36cd0 <col:24> 'char *' lvalue ParmVar 0x1e059e2f870 'buf' 'char *'
          |-ImplicitCastExpr 0x1e059e36d98 <col:29> 'size_t':'unsigned long long' <LValueToRValue>
          | `-DeclRefExpr 0x1e059e36cf0 <col:29> 'size_t':'unsigned long long' lvalue ParmVar 0x1e059e2f8e8 'buflen' 'size_t':'unsigned long long'
          `-ImplicitCastExpr 0x1e059e36db0 <col:37> 'int' <LValueToRValue>
            `-DeclRefExpr 0x1e059e36d10 <col:37> 'int' lvalue ParmVar 0x1e059e2f7f0 'errnum' 'int'
