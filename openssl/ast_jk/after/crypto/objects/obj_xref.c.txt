TranslationUnitDecl 0x256b4d11d68 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x256b4d12600 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x256b4d12300 '__int128'
|-TypedefDecl 0x256b4d12670 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x256b4d12320 'unsigned __int128'
|-TypedefDecl 0x256b4d129a8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x256b4d12760 'struct __NSConstantString_tag'
|   `-Record 0x256b4d126c8 '__NSConstantString_tag'
|-TypedefDecl 0x256b4d12a18 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x256b4d11f40 'unsigned long long'
|-TypedefDecl 0x256b4d12ab0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x256b4d12a70 'char *'
|   `-BuiltinType 0x256b4d11e00 'char'
|-TypedefDecl 0x256b4d12b20 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x256b4d12a70 'char *'
|   `-BuiltinType 0x256b4d11e00 'char'
|-RecordDecl 0x256b4d12b78 <.//openssl//file_jk/after\crypto\objects/obj_xref.h:14:9, line:18:1> line:14:9 struct definition
| |-FieldDecl 0x256b4d12c48 <line:15:5, col:9> col:9 referenced sign_id 'int'
| |-FieldDecl 0x256b4d12cb8 <line:16:5, col:9> col:9 referenced hash_id 'int'
| `-FieldDecl 0x256b651a0a0 <line:17:5, col:9> col:9 referenced pkey_id 'int'
|-TypedefDecl 0x256b651a158 <line:14:1, line:18:3> col:3 referenced nid_triple 'struct nid_triple':'nid_triple'
| `-ElaboratedType 0x256b651a100 'struct nid_triple' sugar
|   `-RecordType 0x256b4d12c10 'nid_triple'
|     `-Record 0x256b4d12b78 ''
|-FunctionDecl 0x256b651a300 <line:20:1, col:27> col:1 DEFINE_STACK_OF 'int (nid_triple)'
| `-ParmVarDecl 0x256b651a200 <col:17> col:27 'nid_triple':'nid_triple'
|-VarDecl 0x256b651a488 <line:22:1, col:36> col:25 used sigoid_srt 'const nid_triple []' static
|-VarDecl 0x256b651a5e8 <line:78:1, line:118:1> line:78:32 used sigoid_srt_xref 'const nid_triple *const [39]' static cinit
| `-InitListExpr 0x256b651cf50 <col:52, line:118:1> 'const nid_triple *const [39]'
|   |-UnaryOperator 0x256b651a6d0 <line:79:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651a6b0 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651a698 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651a650 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651a670 <col:17> 'int' 0
|   |-UnaryOperator 0x256b651a768 <line:80:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651a748 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651a730 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651a6e8 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651a708 <col:17> 'int' 1
|   |-UnaryOperator 0x256b651a800 <line:81:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651a7e0 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651a7c8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651a780 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651a7a0 <col:17> 'int' 7
|   |-UnaryOperator 0x256b651a898 <line:82:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651a878 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651a860 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651a818 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651a838 <col:17> 'int' 2
|   |-UnaryOperator 0x256b651a930 <line:83:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651a910 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651a8f8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651a8b0 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651a8d0 <col:17> 'int' 4
|   |-UnaryOperator 0x256b651a9c8 <line:84:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651a9a8 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651a990 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651a948 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651a968 <col:17> 'int' 3
|   |-UnaryOperator 0x256b651aa60 <line:85:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651aa40 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651aa28 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651a9e0 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651aa00 <col:17> 'int' 9
|   |-UnaryOperator 0x256b651aaf8 <line:86:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651aad8 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651aac0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651aa78 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651aa98 <col:17> 'int' 5
|   |-UnaryOperator 0x256b651ab90 <line:87:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651ab70 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651ab58 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651ab10 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651ab30 <col:17> 'int' 8
|   |-UnaryOperator 0x256b651ac28 <line:88:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651ac08 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651abf0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651aba8 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651abc8 <col:17> 'int' 12
|   |-UnaryOperator 0x256b651acc0 <line:89:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651aca0 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651ac88 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651ac40 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651ac60 <col:17> 'int' 30
|   |-UnaryOperator 0x256b651ad58 <line:90:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651ad38 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651ad20 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651acd8 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651acf8 <col:17> 'int' 35
|   |-UnaryOperator 0x256b651adf0 <line:91:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651add0 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651adb8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651ad70 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651ad90 <col:17> 'int' 6
|   |-UnaryOperator 0x256b651ae88 <line:92:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651ae68 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651ae50 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651ae08 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651ae28 <col:17> 'int' 10
|   |-UnaryOperator 0x256b651af20 <line:93:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651af00 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651aee8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651aea0 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651aec0 <col:17> 'int' 11
|   |-UnaryOperator 0x256b651afb8 <line:94:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651af98 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651af80 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651af38 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651af58 <col:17> 'int' 13
|   |-UnaryOperator 0x256b651b050 <line:95:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651b030 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651b018 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651afd0 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651aff0 <col:17> 'int' 24
|   |-UnaryOperator 0x256b651c120 <line:96:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c100 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c0e8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651b068 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c0c0 <col:17> 'int' 20
|   |-UnaryOperator 0x256b651c1b8 <line:97:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c198 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c180 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c138 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c158 <col:17> 'int' 32
|   |-UnaryOperator 0x256b651c250 <line:98:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c230 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c218 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c1d0 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c1f0 <col:17> 'int' 37
|   |-UnaryOperator 0x256b651c2e8 <line:99:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c2c8 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c2b0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c268 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c288 <col:17> 'int' 14
|   |-UnaryOperator 0x256b651c380 <line:100:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c360 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c348 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c300 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c320 <col:17> 'int' 21
|   |-UnaryOperator 0x256b651c418 <line:101:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c3f8 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c3e0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c398 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c3b8 <col:17> 'int' 33
|   |-UnaryOperator 0x256b651c4b0 <line:102:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c490 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c478 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c430 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c450 <col:17> 'int' 38
|   |-UnaryOperator 0x256b651c548 <line:103:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c528 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c510 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c4c8 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c4e8 <col:17> 'int' 15
|   |-UnaryOperator 0x256b651c5e0 <line:104:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c5c0 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c5a8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c560 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c580 <col:17> 'int' 22
|   |-UnaryOperator 0x256b651c678 <line:105:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c658 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c640 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c5f8 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c618 <col:17> 'int' 34
|   |-UnaryOperator 0x256b651c710 <line:106:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c6f0 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c6d8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c690 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c6b0 <col:17> 'int' 39
|   |-UnaryOperator 0x256b651c7a8 <line:107:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c788 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c770 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c728 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c748 <col:17> 'int' 16
|   |-UnaryOperator 0x256b651c840 <line:108:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c820 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c808 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c7c0 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c7e0 <col:17> 'int' 23
|   |-UnaryOperator 0x256b651c8d8 <line:109:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c8b8 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c8a0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c858 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c878 <col:17> 'int' 19
|   |-UnaryOperator 0x256b651c970 <line:110:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c950 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c938 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c8f0 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c910 <col:17> 'int' 31
|   |-UnaryOperator 0x256b651ca08 <line:111:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651c9e8 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651c9d0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651c988 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651c9a8 <col:17> 'int' 36
|   |-UnaryOperator 0x256b651caa0 <line:112:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651ca80 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651ca68 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651ca20 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651ca40 <col:17> 'int' 25
|   |-UnaryOperator 0x256b651cb38 <line:113:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651cb18 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651cb00 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651cab8 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651cad8 <col:17> 'int' 26
|   |-UnaryOperator 0x256b651cbd0 <line:114:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651cbb0 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651cb98 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651cb50 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651cb70 <col:17> 'int' 27
|   |-UnaryOperator 0x256b651cc68 <line:115:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651cc48 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651cc30 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651cbe8 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651cc08 <col:17> 'int' 28
|   |-UnaryOperator 0x256b651cd00 <line:116:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x256b651cce0 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x256b651ccc8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x256b651cc80 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x256b651cca0 <col:17> 'int' 40
|   `-UnaryOperator 0x256b651cd98 <line:117:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|     `-ArraySubscriptExpr 0x256b651cd78 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|       |-ImplicitCastExpr 0x256b651cd60 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|       | `-DeclRefExpr 0x256b651cd18 <col:6> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|       `-IntegerLiteral 0x256b651cd38 <col:17> 'int' 41
|-FunctionDecl 0x256b651b6d0 <.//openssl//file_jk/after\crypto\objects\obj_xref.c:16:1, line:19:1> line:16:12 sig_cmp 'int (const nid_triple *, const nid_triple *)' static
| |-ParmVarDecl 0x256b651b510 <col:20, col:38> col:38 used a 'const nid_triple *'
| |-ParmVarDecl 0x256b651b588 <col:41, col:59> col:59 used b 'const nid_triple *'
| `-CompoundStmt 0x256b651b8c8 <line:17:1, line:19:1>
|   `-ReturnStmt 0x256b651b8b8 <line:18:5, col:28>
|     `-BinaryOperator 0x256b651b898 <col:12, col:28> 'int' '-'
|       |-ImplicitCastExpr 0x256b651b868 <col:12, col:15> 'int' <LValueToRValue>
|       | `-MemberExpr 0x256b651b7d0 <col:12, col:15> 'const int' lvalue ->sign_id 0x256b4d12c48
|       |   `-ImplicitCastExpr 0x256b651b7b8 <col:12> 'const nid_triple *' <LValueToRValue>
|       |     `-DeclRefExpr 0x256b651b798 <col:12> 'const nid_triple *' lvalue ParmVar 0x256b651b510 'a' 'const nid_triple *'
|       `-ImplicitCastExpr 0x256b651b880 <col:25, col:28> 'int' <LValueToRValue>
|         `-MemberExpr 0x256b651b838 <col:25, col:28> 'const int' lvalue ->sign_id 0x256b4d12c48
|           `-ImplicitCastExpr 0x256b651b820 <col:25> 'const nid_triple *' <LValueToRValue>
|             `-DeclRefExpr 0x256b651b800 <col:25> 'const nid_triple *' lvalue ParmVar 0x256b651b588 'b' 'const nid_triple *'
|-FunctionDecl 0x256b651bb30 <line:21:1, col:55> col:1 DECLARE_OBJ_BSEARCH_CMP_FN 'int (nid_triple, nid_triple, int)'
| |-ParmVarDecl 0x256b651b8f0 <col:28> col:38 'nid_triple':'nid_triple'
| |-ParmVarDecl 0x256b651b968 <col:40> col:50 'nid_triple':'nid_triple'
| `-ParmVarDecl 0x256b651b9e8 <col:52> col:52 sig 'int'
|-FunctionDecl 0x256b651bdc8 <line:22:1, col:57> col:1 IMPLEMENT_OBJ_BSEARCH_CMP_FN 'int (nid_triple, nid_triple, int)'
| |-ParmVarDecl 0x256b651bc10 <col:30> col:40 'nid_triple':'nid_triple'
| |-ParmVarDecl 0x256b651bc88 <col:42> col:52 'nid_triple':'nid_triple'
| `-ParmVarDecl 0x256b651bd08 <col:54> col:54 sig 'int'
|-FunctionDecl 0x256b651f128 <line:24:1, line:27:1> line:24:12 used sig_sk_cmp 'int (const nid_triple *const *, const nid_triple *const *)' static
| |-ParmVarDecl 0x256b651bf10 <col:23, col:48> col:48 used a 'const nid_triple *const *'
| |-ParmVarDecl 0x256b651bf90 <col:51, col:76> col:76 used b 'const nid_triple *const *'
| `-CompoundStmt 0x256b651f3e8 <line:25:1, line:27:1>
|   `-ReturnStmt 0x256b651f3d8 <line:26:5, col:34>
|     `-BinaryOperator 0x256b651f3b8 <col:12, col:34> 'int' '-'
|       |-ImplicitCastExpr 0x256b651f388 <col:12, col:18> 'int' <LValueToRValue>
|       | `-MemberExpr 0x256b651f2a0 <col:12, col:18> 'const int' lvalue ->sign_id 0x256b4d12c48
|       |   `-ImplicitCastExpr 0x256b651f288 <col:12, col:15> 'const nid_triple *' <LValueToRValue>
|       |     `-ParenExpr 0x256b651f268 <col:12, col:15> 'const nid_triple *const' lvalue
|       |       `-UnaryOperator 0x256b651f250 <col:13, col:14> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|       |         `-ImplicitCastExpr 0x256b651f238 <col:14> 'const nid_triple *const *' <LValueToRValue>
|       |           `-DeclRefExpr 0x256b651f218 <col:14> 'const nid_triple *const *' lvalue ParmVar 0x256b651bf10 'a' 'const nid_triple *const *'
|       `-ImplicitCastExpr 0x256b651f3a0 <col:28, col:34> 'int' <LValueToRValue>
|         `-MemberExpr 0x256b651f358 <col:28, col:34> 'const int' lvalue ->sign_id 0x256b4d12c48
|           `-ImplicitCastExpr 0x256b651f340 <col:28, col:31> 'const nid_triple *' <LValueToRValue>
|             `-ParenExpr 0x256b651f320 <col:28, col:31> 'const nid_triple *const' lvalue
|               `-UnaryOperator 0x256b651f308 <col:29, col:30> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|                 `-ImplicitCastExpr 0x256b651f2f0 <col:30> 'const nid_triple *const *' <LValueToRValue>
|                   `-DeclRefExpr 0x256b651f2d0 <col:30> 'const nid_triple *const *' lvalue ParmVar 0x256b651bf90 'b' 'const nid_triple *const *'
|-FunctionDecl 0x256b651f650 <line:29:1, col:72> col:1 invalid DECLARE_OBJ_BSEARCH_CMP_FN 'int (const nid_triple *, const nid_triple *, int)'
| |-ParmVarDecl 0x256b651f410 <col:28, col:45> col:46 'const nid_triple *'
| |-ParmVarDecl 0x256b651f488 <col:48, col:65> col:66 'const nid_triple *'
| `-ParmVarDecl 0x256b651f508 <col:68> col:68 sigx 'int'
|-FunctionDecl 0x256b651f870 <line:31:1, line:38:1> line:31:12 used sigx_cmp 'int (const nid_triple *const *, const nid_triple *const *)' static
| |-ParmVarDecl 0x256b651f720 <col:21, col:46> col:46 used a 'const nid_triple *const *'
| |-ParmVarDecl 0x256b651f7a0 <col:49, col:74> col:74 used b 'const nid_triple *const *'
| `-CompoundStmt 0x256b651fe50 <line:32:1, line:38:1>
|   |-DeclStmt 0x256b651f9b8 <line:33:5, col:12>
|   | `-VarDecl 0x256b651f950 <col:5, col:9> col:9 used ret 'int'
|   |-BinaryOperator 0x256b651fbc8 <line:34:5, col:33> 'int' '='
|   | |-DeclRefExpr 0x256b651f9d0 <col:5> 'int' lvalue Var 0x256b651f950 'ret' 'int'
|   | `-BinaryOperator 0x256b651fba8 <col:11, col:33> 'int' '-'
|   |   |-ImplicitCastExpr 0x256b651fb78 <col:11, col:17> 'int' <LValueToRValue>
|   |   | `-MemberExpr 0x256b651fa90 <col:11, col:17> 'const int' lvalue ->hash_id 0x256b4d12cb8
|   |   |   `-ImplicitCastExpr 0x256b651fa78 <col:11, col:14> 'const nid_triple *' <LValueToRValue>
|   |   |     `-ParenExpr 0x256b651fa58 <col:11, col:14> 'const nid_triple *const' lvalue
|   |   |       `-UnaryOperator 0x256b651fa40 <col:12, col:13> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|   |   |         `-ImplicitCastExpr 0x256b651fa28 <col:13> 'const nid_triple *const *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x256b651fa08 <col:13> 'const nid_triple *const *' lvalue ParmVar 0x256b651f720 'a' 'const nid_triple *const *'
|   |   `-ImplicitCastExpr 0x256b651fb90 <col:27, col:33> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x256b651fb48 <col:27, col:33> 'const int' lvalue ->hash_id 0x256b4d12cb8
|   |       `-ImplicitCastExpr 0x256b651fb30 <col:27, col:30> 'const nid_triple *' <LValueToRValue>
|   |         `-ParenExpr 0x256b651fb10 <col:27, col:30> 'const nid_triple *const' lvalue
|   |           `-UnaryOperator 0x256b651faf8 <col:28, col:29> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|   |             `-ImplicitCastExpr 0x256b651fae0 <col:29> 'const nid_triple *const *' <LValueToRValue>
|   |               `-DeclRefExpr 0x256b651fac0 <col:29> 'const nid_triple *const *' lvalue ParmVar 0x256b651f7a0 'b' 'const nid_triple *const *'
|   |-IfStmt 0x256b651fc68 <line:35:5, line:36:16>
|   | |-ImplicitCastExpr 0x256b651fc08 <line:35:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x256b651fbe8 <col:9> 'int' lvalue Var 0x256b651f950 'ret' 'int'
|   | `-ReturnStmt 0x256b651fc58 <line:36:9, col:16>
|   |   `-ImplicitCastExpr 0x256b651fc40 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x256b651fc20 <col:16> 'int' lvalue Var 0x256b651f950 'ret' 'int'
|   `-ReturnStmt 0x256b651fe40 <line:37:5, col:34>
|     `-BinaryOperator 0x256b651fe20 <col:12, col:34> 'int' '-'
|       |-ImplicitCastExpr 0x256b651fdf0 <col:12, col:18> 'int' <LValueToRValue>
|       | `-MemberExpr 0x256b651fd08 <col:12, col:18> 'const int' lvalue ->pkey_id 0x256b651a0a0
|       |   `-ImplicitCastExpr 0x256b651fcf0 <col:12, col:15> 'const nid_triple *' <LValueToRValue>
|       |     `-ParenExpr 0x256b651fcd0 <col:12, col:15> 'const nid_triple *const' lvalue
|       |       `-UnaryOperator 0x256b651fcb8 <col:13, col:14> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|       |         `-ImplicitCastExpr 0x256b651fca0 <col:14> 'const nid_triple *const *' <LValueToRValue>
|       |           `-DeclRefExpr 0x256b651fc80 <col:14> 'const nid_triple *const *' lvalue ParmVar 0x256b651f720 'a' 'const nid_triple *const *'
|       `-ImplicitCastExpr 0x256b651fe08 <col:28, col:34> 'int' <LValueToRValue>
|         `-MemberExpr 0x256b651fdc0 <col:28, col:34> 'const int' lvalue ->pkey_id 0x256b651a0a0
|           `-ImplicitCastExpr 0x256b651fda8 <col:28, col:31> 'const nid_triple *' <LValueToRValue>
|             `-ParenExpr 0x256b651fd88 <col:28, col:31> 'const nid_triple *const' lvalue
|               `-UnaryOperator 0x256b651fd70 <col:29, col:30> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|                 `-ImplicitCastExpr 0x256b651fd58 <col:30> 'const nid_triple *const *' <LValueToRValue>
|                   `-DeclRefExpr 0x256b651fd38 <col:30> 'const nid_triple *const *' lvalue ParmVar 0x256b651f7a0 'b' 'const nid_triple *const *'
|-FunctionDecl 0x256b6520048 <line:40:1, col:74> col:1 invalid IMPLEMENT_OBJ_BSEARCH_CMP_FN 'int (const nid_triple *, const nid_triple *, int)'
| |-ParmVarDecl 0x256b651fe90 <col:30, col:47> col:48 'const nid_triple *'
| |-ParmVarDecl 0x256b651ff08 <col:50, col:67> col:68 'const nid_triple *'
| `-ParmVarDecl 0x256b651ff88 <col:70> col:70 sigx 'int'
|-FunctionDecl 0x256b65182e0 <line:42:1, line:65:1> line:42:5 OBJ_find_sigid_algs 'int (int, int *, int *)'
| |-ParmVarDecl 0x256b65180b0 <col:25, col:29> col:29 used signid 'int'
| |-ParmVarDecl 0x256b6518130 <col:37, col:42> col:42 used pdig_nid 'int *'
| |-ParmVarDecl 0x256b65181b0 <col:52, col:57> col:57 used ppkey_nid 'int *'
| `-CompoundStmt 0x256b65191e8 <line:43:1, line:65:1>
|   |-DeclStmt 0x256b6518428 <line:44:5, col:19>
|   | `-VarDecl 0x256b65183c0 <col:5, col:16> col:16 used tmp 'nid_triple':'nid_triple'
|   |-DeclStmt 0x256b65184b8 <line:45:5, col:32>
|   | `-VarDecl 0x256b6518450 <col:5, col:23> col:23 used rv 'const nid_triple *'
|   |-BinaryOperator 0x256b6518570 <line:46:5, col:19> 'int' '='
|   | |-MemberExpr 0x256b6518508 <col:5, col:9> 'int' lvalue .sign_id 0x256b4d12c48
|   | | `-DeclRefExpr 0x256b65184d0 <col:5> 'nid_triple':'nid_triple' lvalue Var 0x256b65183c0 'tmp' 'nid_triple':'nid_triple'
|   | `-ImplicitCastExpr 0x256b6518558 <col:19> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x256b6518538 <col:19> 'int' lvalue ParmVar 0x256b65180b0 'signid' 'int'
|   |-IfStmt 0x256b6518a28 <line:48:5, line:52:5>
|   | |-OpaqueValueExpr 0x256b6518a10 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x256b65189f8 <line:48:18, line:52:5>
|   |   `-DeclStmt 0x256b65187e0 <line:49:9, col:52>
|   |     `-VarDecl 0x256b65185a8 <col:9, col:13> col:13 used idx 'int'
|   |-IfStmt 0x256b6518e70 <line:54:5, line:56:5>
|   | |-OpaqueValueExpr 0x256b6518e58 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x256b6518e40 <line:54:21, line:56:5>
|   |   `-BinaryOperator 0x256b6518e20 <line:55:9, col:70> 'const nid_triple *' '='
|   |     |-DeclRefExpr 0x256b6518a60 <col:9> 'const nid_triple *' lvalue Var 0x256b6518450 'rv' 'const nid_triple *'
|   |     `-ImplicitCastExpr 0x256b6518e08 <col:14, col:70> 'const nid_triple *' <IntegralToPointer>
|   |       `-CallExpr 0x256b6518db8 <col:14, col:70> 'int'
|   |         |-ImplicitCastExpr 0x256b6518da0 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x256b6518b70 <col:14> 'int ()' Function 0x256b6518aa8 'OBJ_bsearch_sig' 'int ()'
|   |         |-UnaryOperator 0x256b6518bb0 <col:30, col:31> 'nid_triple *' prefix '&' cannot overflow
|   |         | `-DeclRefExpr 0x256b6518b90 <col:31> 'nid_triple':'nid_triple' lvalue Var 0x256b65183c0 'tmp' 'nid_triple':'nid_triple'
|   |         |-ImplicitCastExpr 0x256b6518df0 <col:36> 'const nid_triple *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x256b6518bc8 <col:36> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |         `-CallExpr 0x256b6518d60 <col:48, col:69> 'int'
|   |           |-ImplicitCastExpr 0x256b6518d48 <col:48> 'int (*)()' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x256b6518cd8 <col:48> 'int ()' Function 0x256b6518c10 'OSSL_NELEM' 'int ()'
|   |           `-ImplicitCastExpr 0x256b6518d88 <col:59> 'const nid_triple *' <ArrayToPointerDecay>
|   |             `-DeclRefExpr 0x256b6518cf8 <col:59> 'const nid_triple []' lvalue Var 0x256b651a488 'sigoid_srt' 'const nid_triple []'
|   |-IfStmt 0x256b6518ef8 <line:58:5, line:59:16>
|   | |-OpaqueValueExpr 0x256b6518ee0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x256b6518ed0 <col:9, col:16>
|   |   `-IntegerLiteral 0x256b6518ea8 <col:16> 'int' 0
|   |-IfStmt 0x256b6519038 <line:60:5, line:61:25>
|   | |-ImplicitCastExpr 0x256b6518f30 <line:60:9> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x256b6518f10 <col:9> 'int *' lvalue ParmVar 0x256b6518130 'pdig_nid' 'int *'
|   | `-BinaryOperator 0x256b6519018 <line:61:9, col:25> 'int' '='
|   |   |-UnaryOperator 0x256b6518f80 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x256b6518f68 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x256b6518f48 <col:10> 'int *' lvalue ParmVar 0x256b6518130 'pdig_nid' 'int *'
|   |   `-ImplicitCastExpr 0x256b6519000 <col:21, col:25> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x256b6518fd0 <col:21, col:25> 'const int' lvalue ->hash_id 0x256b4d12cb8
|   |       `-ImplicitCastExpr 0x256b6518fb8 <col:21> 'const nid_triple *' <LValueToRValue>
|   |         `-DeclRefExpr 0x256b6518f98 <col:21> 'const nid_triple *' lvalue Var 0x256b6518450 'rv' 'const nid_triple *'
|   |-IfStmt 0x256b6519198 <line:62:5, line:63:26>
|   | |-ImplicitCastExpr 0x256b6519090 <line:62:9> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x256b6519050 <col:9> 'int *' lvalue ParmVar 0x256b65181b0 'ppkey_nid' 'int *'
|   | `-BinaryOperator 0x256b6519178 <line:63:9, col:26> 'int' '='
|   |   |-UnaryOperator 0x256b65190e0 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x256b65190c8 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x256b65190a8 <col:10> 'int *' lvalue ParmVar 0x256b65181b0 'ppkey_nid' 'int *'
|   |   `-ImplicitCastExpr 0x256b6519160 <col:22, col:26> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x256b6519130 <col:22, col:26> 'const int' lvalue ->pkey_id 0x256b651a0a0
|   |       `-ImplicitCastExpr 0x256b6519118 <col:22> 'const nid_triple *' <LValueToRValue>
|   |         `-DeclRefExpr 0x256b65190f8 <col:22> 'const nid_triple *' lvalue Var 0x256b6518450 'rv' 'const nid_triple *'
|   `-ReturnStmt 0x256b65191d8 <line:64:5, col:12>
|     `-IntegerLiteral 0x256b65191b0 <col:12> 'int' 1
|-FunctionDecl 0x256b6519490 <line:67:1, line:93:1> line:67:5 OBJ_find_sigid_by_algs 'int (int *, int, int)'
| |-ParmVarDecl 0x256b6519258 <col:28, col:33> col:33 used psignid 'int *'
| |-ParmVarDecl 0x256b65192d8 <col:42, col:46> col:46 used dig_nid 'int'
| |-ParmVarDecl 0x256b6519358 <col:55, col:59> col:59 used pkey_nid 'int'
| `-CompoundStmt 0x256b652ff50 <line:68:1, line:93:1>
|   |-DeclStmt 0x256b65195d8 <line:69:5, col:19>
|   | `-VarDecl 0x256b6519570 <col:5, col:16> col:16 used tmp 'nid_triple':'nid_triple'
|   |-DeclStmt 0x256b65196d0 <line:70:5, col:31>
|   | `-VarDecl 0x256b6519600 <col:5, col:28> col:23 used t 'const nid_triple *' cinit
|   |   `-ImplicitCastExpr 0x256b65196b8 <col:27, col:28> 'const nid_triple *' <NoOp>
|   |     `-UnaryOperator 0x256b65196a0 <col:27, col:28> 'nid_triple *' prefix '&' cannot overflow
|   |       `-DeclRefExpr 0x256b6519668 <col:28> 'nid_triple':'nid_triple' lvalue Var 0x256b6519570 'tmp' 'nid_triple':'nid_triple'
|   |-DeclStmt 0x256b65197c8 <line:71:5, col:33>
|   | `-VarDecl 0x256b6519760 <col:5, col:24> col:24 used rv 'const nid_triple **'
|   |-BinaryOperator 0x256b6519868 <line:73:5, col:19> 'int' '='
|   | |-MemberExpr 0x256b6519800 <col:5, col:9> 'int' lvalue .hash_id 0x256b4d12cb8
|   | | `-DeclRefExpr 0x256b65197e0 <col:5> 'nid_triple':'nid_triple' lvalue Var 0x256b6519570 'tmp' 'nid_triple':'nid_triple'
|   | `-ImplicitCastExpr 0x256b6519850 <col:19> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x256b6519830 <col:19> 'int' lvalue ParmVar 0x256b65192d8 'dig_nid' 'int'
|   |-BinaryOperator 0x256b6519910 <line:74:5, col:19> 'int' '='
|   | |-MemberExpr 0x256b65198a8 <col:5, col:9> 'int' lvalue .pkey_id 0x256b651a0a0
|   | | `-DeclRefExpr 0x256b6519888 <col:5> 'nid_triple':'nid_triple' lvalue Var 0x256b6519570 'tmp' 'nid_triple':'nid_triple'
|   | `-ImplicitCastExpr 0x256b65198f8 <col:19> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x256b65198d8 <col:19> 'int' lvalue ParmVar 0x256b6519358 'pkey_nid' 'int'
|   |-IfStmt 0x256b6519c28 <line:76:5, line:82:5>
|   | |-OpaqueValueExpr 0x256b6519c10 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x256b6519bf0 <line:76:19, line:82:5>
|   |   |-DeclStmt 0x256b6519a08 <line:77:9, col:53>
|   |   | `-VarDecl 0x256b6519948 <col:9, col:13> col:13 used idx 'int'
|   |   `-IfStmt 0x256b6519bd8 <line:78:9, line:81:9>
|   |     |-BinaryOperator 0x256b6519a98 <line:78:13, col:20> 'int' '>='
|   |     | |-ImplicitCastExpr 0x256b6519a80 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x256b6519a20 <col:13> 'int' lvalue Var 0x256b6519948 'idx' 'int'
|   |     | `-IntegerLiteral 0x256b6519a58 <col:20> 'int' 0
|   |     `-CompoundStmt 0x256b6519bc0 <col:23, line:81:9>
|   |       `-BinaryOperator 0x256b6519ba0 <line:80:13, col:19> 'const nid_triple **' '='
|   |         |-DeclRefExpr 0x256b6519b30 <col:13> 'const nid_triple **' lvalue Var 0x256b6519760 'rv' 'const nid_triple **'
|   |         `-UnaryOperator 0x256b6519b88 <col:18, col:19> 'const nid_triple **' prefix '&' cannot overflow
|   |           `-DeclRefExpr 0x256b6519b68 <col:19> 'const nid_triple *' lvalue Var 0x256b6519600 't' 'const nid_triple *'
|   |-IfStmt 0x256b6519f50 <line:84:5, line:86:5>
|   | |-OpaqueValueExpr 0x256b6519f38 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x256b6519f20 <line:84:21, line:86:5>
|   |   `-BinaryOperator 0x256b6519f00 <line:85:9, col:79> 'const nid_triple **' '='
|   |     |-DeclRefExpr 0x256b6519c60 <col:9> 'const nid_triple **' lvalue Var 0x256b6519760 'rv' 'const nid_triple **'
|   |     `-ImplicitCastExpr 0x256b6519ee8 <col:14, col:79> 'const nid_triple **' <IntegralToPointer>
|   |       `-CallExpr 0x256b6519e98 <col:14, col:79> 'int'
|   |         |-ImplicitCastExpr 0x256b6519e80 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x256b6519d70 <col:14> 'int ()' Function 0x256b6519ca8 'OBJ_bsearch_sigx' 'int ()'
|   |         |-UnaryOperator 0x256b6519db0 <col:31, col:32> 'const nid_triple **' prefix '&' cannot overflow
|   |         | `-DeclRefExpr 0x256b6519d90 <col:32> 'const nid_triple *' lvalue Var 0x256b6519600 't' 'const nid_triple *'
|   |         |-ImplicitCastExpr 0x256b6519ed0 <col:35> 'const nid_triple *const *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x256b6519dc8 <col:35> 'const nid_triple *const [39]' lvalue Var 0x256b651a5e8 'sigoid_srt_xref' 'const nid_triple *const [39]'
|   |         `-CallExpr 0x256b6519e40 <col:52, col:78> 'int'
|   |           |-ImplicitCastExpr 0x256b6519e28 <col:52> 'int (*)()' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x256b6519de8 <col:52> 'int ()' Function 0x256b6518c10 'OSSL_NELEM' 'int ()'
|   |           `-ImplicitCastExpr 0x256b6519e68 <col:63> 'const nid_triple *const *' <ArrayToPointerDecay>
|   |             `-DeclRefExpr 0x256b6519e08 <col:63> 'const nid_triple *const [39]' lvalue Var 0x256b651a5e8 'sigoid_srt_xref' 'const nid_triple *const [39]'
|   |-IfStmt 0x256b6519fd8 <line:88:5, line:89:16>
|   | |-OpaqueValueExpr 0x256b6519fc0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x256b6519fb0 <col:9, col:16>
|   |   `-IntegerLiteral 0x256b6519f88 <col:16> 'int' 0
|   |-IfStmt 0x256b652ff00 <line:90:5, line:91:27>
|   | |-ImplicitCastExpr 0x256b651a010 <line:90:9> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x256b6519ff0 <col:9> 'int *' lvalue ParmVar 0x256b6519258 'psignid' 'int *'
|   | `-BinaryOperator 0x256b652fee0 <line:91:9, col:27> 'int' '='
|   |   |-UnaryOperator 0x256b651a060 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x256b651a048 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x256b651a028 <col:10> 'int *' lvalue ParmVar 0x256b6519258 'psignid' 'int *'
|   |   `-ImplicitCastExpr 0x256b652fec8 <col:20, col:27> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x256b652fe98 <col:20, col:27> 'const int' lvalue ->sign_id 0x256b4d12c48
|   |       `-ImplicitCastExpr 0x256b652fe80 <col:20, col:24> 'const nid_triple *' <LValueToRValue>
|   |         `-ParenExpr 0x256b652fe60 <col:20, col:24> 'const nid_triple *' lvalue
|   |           `-UnaryOperator 0x256b652fe48 <col:21, col:22> 'const nid_triple *' lvalue prefix '*' cannot overflow
|   |             `-ImplicitCastExpr 0x256b652fe30 <col:22> 'const nid_triple **' <LValueToRValue>
|   |               `-DeclRefExpr 0x256b652fe10 <col:22> 'const nid_triple **' lvalue Var 0x256b6519760 'rv' 'const nid_triple **'
|   `-ReturnStmt 0x256b652ff40 <line:92:5, col:12>
|     `-IntegerLiteral 0x256b652ff18 <col:12> 'int' 1
|-FunctionDecl 0x256b6530200 <line:95:1, line:125:1> line:95:5 OBJ_add_sigid 'int (int, int, int)'
| |-ParmVarDecl 0x256b652ffc8 <col:19, col:23> col:23 used signid 'int'
| |-ParmVarDecl 0x256b6530048 <col:31, col:35> col:35 used dig_id 'int'
| |-ParmVarDecl 0x256b65300c8 <col:43, col:47> col:47 used pkey_id 'int'
| `-CompoundStmt 0x256b652e100 <line:96:1, line:125:1>
|   |-DeclStmt 0x256b6530348 <line:97:5, col:20>
|   | `-VarDecl 0x256b65302e0 <col:5, col:17> col:17 used ntr 'nid_triple *'
|   |-IfStmt 0x256b6530590 <line:100:5, line:101:16>
|   | |-OpaqueValueExpr 0x256b6530578 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x256b6530568 <col:9, col:16>
|   |   `-IntegerLiteral 0x256b6530540 <col:16> 'int' 0
|   |-IfStmt 0x256b6530690 <line:104:5, line:105:16>
|   | |-OpaqueValueExpr 0x256b6530678 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x256b6530668 <col:9, col:16>
|   |   `-IntegerLiteral 0x256b6530640 <col:16> 'int' 0
|   |-BinaryOperator 0x256b65308d8 <line:106:5, col:38> 'nid_triple *' '='
|   | |-DeclRefExpr 0x256b65306a8 <col:5> 'nid_triple *' lvalue Var 0x256b65302e0 'ntr' 'nid_triple *'
|   | `-ImplicitCastExpr 0x256b65308c0 <col:11, col:38> 'nid_triple *' <IntegralToPointer>
|   |   `-CallExpr 0x256b6530898 <col:11, col:38> 'int'
|   |     |-ImplicitCastExpr 0x256b6530880 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x256b65307d0 <col:11> 'int ()' Function 0x256b6530708 'OPENSSL_malloc' 'int ()'
|   |     `-UnaryExprOrTypeTraitExpr 0x256b6530860 <col:26, col:37> 'unsigned long long' sizeof
|   |       `-ParenExpr 0x256b6530840 <col:32, col:37> 'nid_triple':'nid_triple' lvalue
|   |         `-UnaryOperator 0x256b6530828 <col:33, col:34> 'nid_triple':'nid_triple' lvalue prefix '*' cannot overflow
|   |           `-ImplicitCastExpr 0x256b6530810 <col:34> 'nid_triple *' <LValueToRValue>
|   |             `-DeclRefExpr 0x256b65307f0 <col:34> 'nid_triple *' lvalue Var 0x256b65302e0 'ntr' 'nid_triple *' non_odr_use_unevaluated
|   |-IfStmt 0x256b6530968 <line:107:5, line:108:16>
|   | |-OpaqueValueExpr 0x256b6530950 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x256b6530940 <col:9, col:16>
|   |   `-IntegerLiteral 0x256b6530918 <col:16> 'int' 0
|   |-BinaryOperator 0x256b6530a20 <line:109:5, col:20> 'int' '='
|   | |-MemberExpr 0x256b65309b8 <col:5, col:10> 'int' lvalue ->sign_id 0x256b4d12c48
|   | | `-ImplicitCastExpr 0x256b65309a0 <col:5> 'nid_triple *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x256b6530980 <col:5> 'nid_triple *' lvalue Var 0x256b65302e0 'ntr' 'nid_triple *'
|   | `-ImplicitCastExpr 0x256b6530a08 <col:20> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x256b65309e8 <col:20> 'int' lvalue ParmVar 0x256b652ffc8 'signid' 'int'
|   |-BinaryOperator 0x256b6530ae0 <line:110:5, col:20> 'int' '='
|   | |-MemberExpr 0x256b6530a78 <col:5, col:10> 'int' lvalue ->hash_id 0x256b4d12cb8
|   | | `-ImplicitCastExpr 0x256b6530a60 <col:5> 'nid_triple *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x256b6530a40 <col:5> 'nid_triple *' lvalue Var 0x256b65302e0 'ntr' 'nid_triple *'
|   | `-ImplicitCastExpr 0x256b6530ac8 <col:20> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x256b6530aa8 <col:20> 'int' lvalue ParmVar 0x256b6530048 'dig_id' 'int'
|   |-BinaryOperator 0x256b6530ba0 <line:111:5, col:20> 'int' '='
|   | |-MemberExpr 0x256b6530b38 <col:5, col:10> 'int' lvalue ->pkey_id 0x256b651a0a0
|   | | `-ImplicitCastExpr 0x256b6530b20 <col:5> 'nid_triple *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x256b6530b00 <col:5> 'nid_triple *' lvalue Var 0x256b65302e0 'ntr' 'nid_triple *'
|   | `-ImplicitCastExpr 0x256b6530b88 <col:20> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x256b6530b68 <col:20> 'int' lvalue ParmVar 0x256b65300c8 'pkey_id' 'int'
|   |-IfStmt 0x256b652ded8 <line:113:5, line:116:5>
|   | |-OpaqueValueExpr 0x256b652dec0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x256b652dea0 <line:113:44, line:116:5>
|   |   |-CallExpr 0x256b652de28 <line:114:9, col:25> 'int'
|   |   | |-ImplicitCastExpr 0x256b652de10 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x256b6530de0 <col:9> 'int ()' Function 0x256b6530d18 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x256b652de50 <col:22> 'nid_triple *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x256b652ddf0 <col:22> 'nid_triple *' lvalue Var 0x256b65302e0 'ntr' 'nid_triple *'
|   |   `-ReturnStmt 0x256b652de90 <line:115:9, col:16>
|   |     `-IntegerLiteral 0x256b652de68 <col:16> 'int' 0
|   |-IfStmt 0x256b652df80 <line:118:5, line:119:16>
|   | |-OpaqueValueExpr 0x256b652df68 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x256b652df58 <col:9, col:16>
|   |   `-IntegerLiteral 0x256b652df30 <col:16> 'int' 0
|   `-ReturnStmt 0x256b652e0f0 <line:124:5, col:12>
|     `-IntegerLiteral 0x256b652e0c8 <col:12> 'int' 1
|-FunctionDecl 0x256b652e288 <line:127:1, line:130:1> line:127:13 used sid_free 'void (nid_triple *)' static
| |-ParmVarDecl 0x256b652e178 <col:22, col:34> col:34 used tt 'nid_triple *'
| `-CompoundStmt 0x256b652e3e0 <line:128:1, line:130:1>
|   `-CallExpr 0x256b652e3a0 <line:129:5, col:20> 'int'
|     |-ImplicitCastExpr 0x256b652e388 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x256b652e348 <col:5> 'int ()' Function 0x256b6530d18 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x256b652e3c8 <col:18> 'nid_triple *' <LValueToRValue>
|       `-DeclRefExpr 0x256b652e368 <col:18> 'nid_triple *' lvalue ParmVar 0x256b652e178 'tt' 'nid_triple *'
`-FunctionDecl 0x256b652e4b8 <line:132:1, line:138:1> line:132:6 OBJ_sigid_free 'void (void)'
  `-CompoundStmt 0x256b652e7b0 <line:133:1, line:138:1>
