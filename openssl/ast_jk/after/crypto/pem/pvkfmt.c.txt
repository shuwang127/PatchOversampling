TranslationUnitDecl 0x1a561b13a68 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1a561b14300 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1a561b14000 '__int128'
|-TypedefDecl 0x1a561b14370 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1a561b14020 'unsigned __int128'
|-TypedefDecl 0x1a561b146a8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1a561b14460 'struct __NSConstantString_tag'
|   `-Record 0x1a561b143c8 '__NSConstantString_tag'
|-TypedefDecl 0x1a561b14718 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1a561b13c40 'unsigned long long'
|-TypedefDecl 0x1a561b147b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1a561b14770 'char *'
|   `-BuiltinType 0x1a561b13b00 'char'
|-TypedefDecl 0x1a561b14820 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1a561b14770 'char *'
|   `-BuiltinType 0x1a561b13b00 'char'
|-FunctionDecl 0x1a5633bd060 <.//openssl//file_jk/after\crypto\pem\pvkfmt.c:28:1, line:38:1> line:28:21 used read_ledword 'unsigned int (const unsigned char **)' static
| |-ParmVarDecl 0x1a561b148f8 <col:34, col:56> col:56 used in 'const unsigned char **'
| `-CompoundStmt 0x1a5633bd900 <line:29:1, line:38:1>
|   |-DeclStmt 0x1a5633bd250 <line:30:5, col:33>
|   | `-VarDecl 0x1a5633bd180 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1a5633bd238 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1a5633bd220 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1a5633bd208 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1a5633bd1e8 <col:31> 'const unsigned char **' lvalue ParmVar 0x1a561b148f8 'in' 'const unsigned char **'
|   |-DeclStmt 0x1a5633bd2e8 <line:31:5, col:21>
|   | `-VarDecl 0x1a5633bd280 <col:5, col:18> col:18 used ret 'unsigned int'
|   |-BinaryOperator 0x1a5633bd400 <line:32:5, col:13> 'unsigned int' '='
|   | |-DeclRefExpr 0x1a5633bd300 <col:5> 'unsigned int' lvalue Var 0x1a5633bd280 'ret' 'unsigned int'
|   | `-ImplicitCastExpr 0x1a5633bd3e8 <col:11, col:13> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1a5633bd3d0 <col:11, col:13> 'unsigned char' <LValueToRValue>
|   |     `-UnaryOperator 0x1a5633bd3b8 <col:11, col:13> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |       `-UnaryOperator 0x1a5633bd3a0 <col:12, col:13> 'const unsigned char *' postfix '++'
|   |         `-DeclRefExpr 0x1a5633bd368 <col:12> 'const unsigned char *' lvalue Var 0x1a5633bd180 'p' 'const unsigned char *'
|   |-CompoundAssignOperator 0x1a5633bd540 <line:33:5, col:22> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x1a5633bd420 <col:5> 'unsigned int' lvalue Var 0x1a5633bd280 'ret' 'unsigned int'
|   | `-ImplicitCastExpr 0x1a5633bd528 <col:12, col:22> 'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x1a5633bd508 <col:12, col:22> 'int'
|   |     `-BinaryOperator 0x1a5633bd4e8 <col:13, col:21> 'int' '<<'
|   |       |-ImplicitCastExpr 0x1a5633bd4d0 <col:13, col:15> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x1a5633bd4b8 <col:13, col:15> 'unsigned char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1a5633bd478 <col:13, col:15> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1a5633bd460 <col:14, col:15> 'const unsigned char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1a5633bd440 <col:14> 'const unsigned char *' lvalue Var 0x1a5633bd180 'p' 'const unsigned char *'
|   |       `-IntegerLiteral 0x1a5633bd490 <col:21> 'int' 8
|   |-CompoundAssignOperator 0x1a5633bd690 <line:34:5, col:23> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x1a5633bd570 <col:5> 'unsigned int' lvalue Var 0x1a5633bd280 'ret' 'unsigned int'
|   | `-ImplicitCastExpr 0x1a5633bd678 <col:12, col:23> 'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x1a5633bd658 <col:12, col:23> 'int'
|   |     `-BinaryOperator 0x1a5633bd638 <col:13, col:21> 'int' '<<'
|   |       |-ImplicitCastExpr 0x1a5633bd620 <col:13, col:15> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x1a5633bd608 <col:13, col:15> 'unsigned char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1a5633bd5c8 <col:13, col:15> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1a5633bd5b0 <col:14, col:15> 'const unsigned char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1a5633bd590 <col:14> 'const unsigned char *' lvalue Var 0x1a5633bd180 'p' 'const unsigned char *'
|   |       `-IntegerLiteral 0x1a5633bd5e0 <col:21> 'int' 16
|   |-CompoundAssignOperator 0x1a5633bd7e0 <line:35:5, col:23> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x1a5633bd6c0 <col:5> 'unsigned int' lvalue Var 0x1a5633bd280 'ret' 'unsigned int'
|   | `-ImplicitCastExpr 0x1a5633bd7c8 <col:12, col:23> 'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x1a5633bd7a8 <col:12, col:23> 'int'
|   |     `-BinaryOperator 0x1a5633bd788 <col:13, col:21> 'int' '<<'
|   |       |-ImplicitCastExpr 0x1a5633bd770 <col:13, col:15> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x1a5633bd758 <col:13, col:15> 'unsigned char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1a5633bd718 <col:13, col:15> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1a5633bd700 <col:14, col:15> 'const unsigned char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1a5633bd6e0 <col:14> 'const unsigned char *' lvalue Var 0x1a5633bd180 'p' 'const unsigned char *'
|   |       `-IntegerLiteral 0x1a5633bd730 <col:21> 'int' 24
|   |-BinaryOperator 0x1a5633bd898 <line:36:5, col:11> 'const unsigned char *' '='
|   | |-UnaryOperator 0x1a5633bd848 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633bd830 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633bd810 <col:6> 'const unsigned char **' lvalue ParmVar 0x1a561b148f8 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1a5633bd880 <col:11> 'const unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633bd860 <col:11> 'const unsigned char *' lvalue Var 0x1a5633bd180 'p' 'const unsigned char *'
|   `-ReturnStmt 0x1a5633bd8f0 <line:37:5, col:12>
|     `-ImplicitCastExpr 0x1a5633bd8d8 <col:12> 'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x1a5633bd8b8 <col:12> 'unsigned int' lvalue Var 0x1a5633bd280 'ret' 'unsigned int'
|-FunctionDecl 0x1a5633bdbc0 <line:45:1, line:52:1> line:45:12 invalid read_lebn 'int (const unsigned char **, unsigned int, int **)' static
| |-ParmVarDecl 0x1a5633bd970 <col:22, col:44> col:44 used in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633bd9f0 <col:48, col:61> col:61 used nbyte 'unsigned int'
| |-ParmVarDecl 0x1a5633bdad8 <col:68, col:77> col:77 invalid r 'int **'
| `-CompoundStmt 0x1a5633bdfc0 <line:46:1, line:52:1>
|   |-IfStmt 0x1a5633bdeb8 <line:48:5, line:49:16>
|   | |-OpaqueValueExpr 0x1a5633bdea0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1a5633bde90 <col:9, col:16>
|   |   `-IntegerLiteral 0x1a5633bde68 <col:16> 'int' 0
|   |-CompoundAssignOperator 0x1a5633bdf58 <line:50:5, col:12> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   | |-UnaryOperator 0x1a5633bdf08 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633bdef0 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633bded0 <col:6> 'const unsigned char **' lvalue ParmVar 0x1a5633bd970 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1a5633bdf40 <col:12> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633bdf20 <col:12> 'unsigned int' lvalue ParmVar 0x1a5633bd9f0 'nbyte' 'unsigned int'
|   `-ReturnStmt 0x1a5633bdfb0 <line:51:5, col:12>
|     `-IntegerLiteral 0x1a5633bdf88 <col:12> 'int' 1
|-FunctionDecl 0x1a5633be2a0 <line:81:1, line:82:56> line:81:18 invalid b2i_rsa 'int *(const unsigned char **, unsigned int, int)' static
| |-ParmVarDecl 0x1a5633be070 <col:26, col:48> col:48 in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633be0f0 <line:82:26, col:39> col:39 bitlen 'unsigned int'
| `-ParmVarDecl 0x1a5633be170 <col:47, col:51> col:51 ispub 'int'
|-FunctionDecl 0x1a5633be568 <line:83:1, line:84:56> line:83:18 invalid b2i_dss 'int *(const unsigned char **, unsigned int, int)' static
| |-ParmVarDecl 0x1a5633be378 <col:26, col:48> col:48 in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633be3f8 <line:84:26, col:39> col:39 bitlen 'unsigned int'
| `-ParmVarDecl 0x1a5633be478 <col:47, col:51> col:51 ispub 'int'
|-FunctionDecl 0x1a5633bea70 <line:86:1, line:147:1> line:86:12 used do_blob_header 'int (const unsigned char **, unsigned int, unsigned int *, unsigned int *, int *, int *)' static
| |-ParmVarDecl 0x1a5633be640 <col:27, col:49> col:49 used in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633be6c0 <col:53, col:66> col:66 used length 'unsigned int'
| |-ParmVarDecl 0x1a5633be740 <line:87:27, col:41> col:41 used pmagic 'unsigned int *'
| |-ParmVarDecl 0x1a5633be7c0 <col:49, col:63> col:63 used pbitlen 'unsigned int *'
| |-ParmVarDecl 0x1a5633be840 <line:88:27, col:32> col:32 used pisdss 'int *'
| |-ParmVarDecl 0x1a5633be8c0 <col:40, col:45> col:45 used pispub 'int *'
| `-CompoundStmt 0x1a5633bf128 <line:89:1, line:147:1>
|   |-DeclStmt 0x1a5633bec40 <line:90:5, col:33>
|   | `-VarDecl 0x1a5633beb70 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1a5633bec28 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1a5633bec10 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1a5633bebf8 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1a5633bebd8 <col:31> 'const unsigned char **' lvalue ParmVar 0x1a5633be640 'in' 'const unsigned char **'
|   |-IfStmt 0x1a5633bed28 <line:91:5, line:92:16>
|   | |-BinaryOperator 0x1a5633becd0 <line:91:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1a5633beca0 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a5633bec58 <col:9> 'unsigned int' lvalue ParmVar 0x1a5633be6c0 'length' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1a5633becb8 <col:18> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1a5633bec78 <col:18> 'int' 16
|   | `-ReturnStmt 0x1a5633bed18 <line:92:9, col:16>
|   |   `-IntegerLiteral 0x1a5633becf0 <col:16> 'int' 0
|   |-IfStmt 0x1a5633c0440 <line:94:5, line:107:16> has_else
|   | |-BinaryOperator 0x1a5633bee00 <line:94:9, line:56:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x1a5633bede8 <line:94:9, col:10> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1a5633bedd0 <col:9, col:10> 'unsigned char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x1a5633bed90 <col:9, col:10> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x1a5633bed78 <col:10> 'const unsigned char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1a5633bed40 <col:10> 'const unsigned char *' lvalue Var 0x1a5633beb70 'p' 'const unsigned char *'
|   | | `-IntegerLiteral 0x1a5633beda8 <line:56:34> 'int' 6
|   | |-CompoundStmt 0x1a5633c0108 <line:94:33, line:100:5>
|   | | |-IfStmt 0x1a5633bf030 <line:95:9, line:98:9>
|   | | | |-BinaryOperator 0x1a5633beeb0 <line:95:13, col:24> 'int' '=='
|   | | | | |-ImplicitCastExpr 0x1a5633bee98 <col:13, col:14> 'int' <LValueToRValue>
|   | | | | | `-UnaryOperator 0x1a5633bee58 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   | | | | |   `-ImplicitCastExpr 0x1a5633bee40 <col:14> 'int *' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x1a5633bee20 <col:14> 'int *' lvalue ParmVar 0x1a5633be8c0 'pispub' 'int *'
|   | | | | `-IntegerLiteral 0x1a5633bee70 <col:24> 'int' 0
|   | | | `-CompoundStmt 0x1a5633bf018 <col:27, line:98:9>
|   | | |   `-ReturnStmt 0x1a5633bf008 <line:97:13, col:20>
|   | | |     `-IntegerLiteral 0x1a5633befe0 <col:20> 'int' 0
|   | | `-BinaryOperator 0x1a5633c00e8 <line:99:9, col:19> 'int' '='
|   | |   |-UnaryOperator 0x1a5633c00a8 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   | |   | `-ImplicitCastExpr 0x1a5633c0090 <col:10> 'int *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x1a5633bf048 <col:10> 'int *' lvalue ParmVar 0x1a5633be8c0 'pispub' 'int *'
|   | |   `-IntegerLiteral 0x1a5633c00c0 <col:19> 'int' 1
|   | `-IfStmt 0x1a5633c0418 <line:100:12, line:107:16> has_else
|   |   |-BinaryOperator 0x1a5633c01d0 <line:100:16, line:57:34> 'int' '=='
|   |   | |-ImplicitCastExpr 0x1a5633c01b8 <line:100:16, col:17> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x1a5633c01a0 <col:16, col:17> 'unsigned char' <LValueToRValue>
|   |   | |   `-UnaryOperator 0x1a5633c0160 <col:16, col:17> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x1a5633c0148 <col:17> 'const unsigned char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1a5633c0128 <col:17> 'const unsigned char *' lvalue Var 0x1a5633beb70 'p' 'const unsigned char *'
|   |   | `-IntegerLiteral 0x1a5633c0178 <line:57:34> 'int' 7
|   |   |-CompoundStmt 0x1a5633c03c0 <line:100:41, line:106:5>
|   |   | |-IfStmt 0x1a5633c0310 <line:101:9, line:104:9>
|   |   | | |-BinaryOperator 0x1a5633c0280 <line:101:13, col:24> 'int' '=='
|   |   | | | |-ImplicitCastExpr 0x1a5633c0268 <col:13, col:14> 'int' <LValueToRValue>
|   |   | | | | `-UnaryOperator 0x1a5633c0228 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   | | | |   `-ImplicitCastExpr 0x1a5633c0210 <col:14> 'int *' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x1a5633c01f0 <col:14> 'int *' lvalue ParmVar 0x1a5633be8c0 'pispub' 'int *'
|   |   | | | `-IntegerLiteral 0x1a5633c0240 <col:24> 'int' 1
|   |   | | `-CompoundStmt 0x1a5633c02f8 <col:27, line:104:9>
|   |   | |   `-ReturnStmt 0x1a5633c02e8 <line:103:13, col:20>
|   |   | |     `-IntegerLiteral 0x1a5633c02c0 <col:20> 'int' 0
|   |   | `-BinaryOperator 0x1a5633c03a0 <line:105:9, col:19> 'int' '='
|   |   |   |-UnaryOperator 0x1a5633c0360 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x1a5633c0348 <col:10> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1a5633c0328 <col:10> 'int *' lvalue ParmVar 0x1a5633be8c0 'pispub' 'int *'
|   |   |   `-IntegerLiteral 0x1a5633c0378 <col:19> 'int' 0
|   |   `-ReturnStmt 0x1a5633c0408 <line:107:9, col:16>
|   |     `-IntegerLiteral 0x1a5633c03e0 <col:16> 'int' 0
|   |-UnaryOperator 0x1a5633c0488 <line:108:5, col:6> 'const unsigned char *' postfix '++'
|   | `-DeclRefExpr 0x1a5633c0468 <col:5> 'const unsigned char *' lvalue Var 0x1a5633beb70 'p' 'const unsigned char *'
|   |-IfStmt 0x1a5633c05d8 <line:110:5, line:113:5>
|   | |-BinaryOperator 0x1a5633c0548 <line:110:9, col:17> 'int' '!='
|   | | |-ImplicitCastExpr 0x1a5633c0530 <col:9, col:11> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1a5633c0518 <col:9, col:11> 'unsigned char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x1a5633c04d8 <col:9, col:11> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | | |     `-UnaryOperator 0x1a5633c04c0 <col:10, col:11> 'const unsigned char *' postfix '++'
|   | | |       `-DeclRefExpr 0x1a5633c04a0 <col:10> 'const unsigned char *' lvalue Var 0x1a5633beb70 'p' 'const unsigned char *'
|   | | `-IntegerLiteral 0x1a5633c04f0 <col:17> 'int' 2
|   | `-CompoundStmt 0x1a5633c05c0 <col:22, line:113:5>
|   |   `-ReturnStmt 0x1a5633c05b0 <line:112:9, col:16>
|   |     `-IntegerLiteral 0x1a5633c0588 <col:16> 'int' 0
|   |-CompoundAssignOperator 0x1a5633c0638 <line:115:5, col:10> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   | |-DeclRefExpr 0x1a5633c05f0 <col:5> 'const unsigned char *' lvalue Var 0x1a5633beb70 'p' 'const unsigned char *'
|   | `-IntegerLiteral 0x1a5633c0610 <col:10> 'int' 6
|   |-BinaryOperator 0x1a5633c0778 <line:116:5, col:30> 'unsigned int' '='
|   | |-UnaryOperator 0x1a5633c06a0 <col:5, col:6> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633c0688 <col:6> 'unsigned int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633c0668 <col:6> 'unsigned int *' lvalue ParmVar 0x1a5633be740 'pmagic' 'unsigned int *'
|   | `-CallExpr 0x1a5633c0750 <col:15, col:30> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1a5633c0738 <col:15> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1a5633c06b8 <col:15> 'unsigned int (const unsigned char **)' Function 0x1a5633bd060 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   `-UnaryOperator 0x1a5633c06f8 <col:28, col:29> 'const unsigned char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1a5633c06d8 <col:29> 'const unsigned char *' lvalue Var 0x1a5633beb70 'p' 'const unsigned char *'
|   |-BinaryOperator 0x1a5633c0880 <line:117:5, col:31> 'unsigned int' '='
|   | |-UnaryOperator 0x1a5633c07d0 <col:5, col:6> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633c07b8 <col:6> 'unsigned int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633c0798 <col:6> 'unsigned int *' lvalue ParmVar 0x1a5633be7c0 'pbitlen' 'unsigned int *'
|   | `-CallExpr 0x1a5633c0858 <col:16, col:31> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1a5633c0840 <col:16> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1a5633c07e8 <col:16> 'unsigned int (const unsigned char **)' Function 0x1a5633bd060 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   `-UnaryOperator 0x1a5633c0828 <col:29, col:30> 'const unsigned char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1a5633c0808 <col:30> 'const unsigned char *' lvalue Var 0x1a5633beb70 'p' 'const unsigned char *'
|   |-BinaryOperator 0x1a5633c0918 <line:118:5, col:15> 'int' '='
|   | |-UnaryOperator 0x1a5633c08d8 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633c08c0 <col:6> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633c08a0 <col:6> 'int *' lvalue ParmVar 0x1a5633be840 'pisdss' 'int *'
|   | `-IntegerLiteral 0x1a5633c08f0 <col:15> 'int' 0
|   |-SwitchStmt 0x1a5633c09a0 <line:119:5, line:144:5>
|   | |-ImplicitCastExpr 0x1a5633c0988 <line:119:13, col:14> 'unsigned int' <LValueToRValue>
|   | | `-UnaryOperator 0x1a5633c0970 <col:13, col:14> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x1a5633c0958 <col:14> 'unsigned int *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1a5633c0938 <col:14> 'unsigned int *' lvalue ParmVar 0x1a5633be740 'pmagic' 'unsigned int *'
|   | `-CompoundStmt 0x1a5633c1008 <col:22, line:144:5>
|   |   |-CaseStmt 0x1a5633c0a18 <line:121:5, line:122:19>
|   |   | |-ImplicitCastExpr 0x1a5633c0a00 <line:60:34> 'unsigned int' <IntegralCast>
|   |   | | `-ConstantExpr 0x1a5633c09e8 <col:34> 'long'
|   |   | |   `-IntegerLiteral 0x1a5633c09c0 <col:34> 'long' 827544388
|   |   | `-BinaryOperator 0x1a5633c0ab8 <line:122:9, col:19> 'int' '='
|   |   |   |-UnaryOperator 0x1a5633c0a78 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x1a5633c0a60 <col:10> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1a5633c0a40 <col:10> 'int *' lvalue ParmVar 0x1a5633be840 'pisdss' 'int *'
|   |   |   `-IntegerLiteral 0x1a5633c0a90 <col:19> 'int' 1
|   |   |-CaseStmt 0x1a5633c0b30 <line:124:5, line:128:9>
|   |   | |-ImplicitCastExpr 0x1a5633c0b18 <line:58:34> 'unsigned int' <IntegralCast>
|   |   | | `-ConstantExpr 0x1a5633c0b00 <col:34> 'long'
|   |   | |   `-IntegerLiteral 0x1a5633c0ad8 <col:34> 'long' 826364754
|   |   | `-IfStmt 0x1a5633c0c78 <line:125:9, line:128:9>
|   |   |   |-BinaryOperator 0x1a5633c0be8 <line:125:13, col:24> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x1a5633c0bd0 <col:13, col:14> 'int' <LValueToRValue>
|   |   |   | | `-UnaryOperator 0x1a5633c0b90 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   |   | |   `-ImplicitCastExpr 0x1a5633c0b78 <col:14> 'int *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x1a5633c0b58 <col:14> 'int *' lvalue ParmVar 0x1a5633be8c0 'pispub' 'int *'
|   |   |   | `-IntegerLiteral 0x1a5633c0ba8 <col:24> 'int' 0
|   |   |   `-CompoundStmt 0x1a5633c0c60 <col:27, line:128:9>
|   |   |     `-ReturnStmt 0x1a5633c0c50 <line:127:13, col:20>
|   |   |       `-IntegerLiteral 0x1a5633c0c28 <col:20> 'int' 0
|   |   |-BreakStmt 0x1a5633c0c90 <line:129:9>
|   |   |-CaseStmt 0x1a5633c0cf0 <line:131:5, line:132:19>
|   |   | |-ImplicitCastExpr 0x1a5633c0cd8 <line:61:34> 'unsigned int' <IntegralCast>
|   |   | | `-ConstantExpr 0x1a5633c0cc0 <col:34> 'long'
|   |   | |   `-IntegerLiteral 0x1a5633c0c98 <col:34> 'long' 844321604
|   |   | `-BinaryOperator 0x1a5633c0d90 <line:132:9, col:19> 'int' '='
|   |   |   |-UnaryOperator 0x1a5633c0d50 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x1a5633c0d38 <col:10> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1a5633c0d18 <col:10> 'int *' lvalue ParmVar 0x1a5633be840 'pisdss' 'int *'
|   |   |   `-IntegerLiteral 0x1a5633c0d68 <col:19> 'int' 1
|   |   |-CaseStmt 0x1a5633c0e08 <line:134:5, line:138:9>
|   |   | |-ImplicitCastExpr 0x1a5633c0df0 <line:59:34> 'unsigned int' <IntegralCast>
|   |   | | `-ConstantExpr 0x1a5633c0dd8 <col:34> 'long'
|   |   | |   `-IntegerLiteral 0x1a5633c0db0 <col:34> 'long' 843141970
|   |   | `-IfStmt 0x1a5633c0f50 <line:135:9, line:138:9>
|   |   |   |-BinaryOperator 0x1a5633c0ec0 <line:135:13, col:24> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x1a5633c0ea8 <col:13, col:14> 'int' <LValueToRValue>
|   |   |   | | `-UnaryOperator 0x1a5633c0e68 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   |   | |   `-ImplicitCastExpr 0x1a5633c0e50 <col:14> 'int *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x1a5633c0e30 <col:14> 'int *' lvalue ParmVar 0x1a5633be8c0 'pispub' 'int *'
|   |   |   | `-IntegerLiteral 0x1a5633c0e80 <col:24> 'int' 1
|   |   |   `-CompoundStmt 0x1a5633c0f38 <col:27, line:138:9>
|   |   |     `-ReturnStmt 0x1a5633c0f28 <line:137:13, col:20>
|   |   |       `-IntegerLiteral 0x1a5633c0f00 <col:20> 'int' 0
|   |   |-BreakStmt 0x1a5633c0f68 <line:139:9>
|   |   |-DefaultStmt 0x1a5633c0f98 <line:141:5, col:12>
|   |   | `-NullStmt 0x1a5633c0f90 <col:12>
|   |   `-ReturnStmt 0x1a5633c0ff8 <line:143:9, col:17>
|   |     `-UnaryOperator 0x1a5633c0fe0 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1a5633c0fb8 <col:17> 'int' 1
|   |-BinaryOperator 0x1a5633bf0d0 <line:145:5, col:11> 'const unsigned char *' '='
|   | |-UnaryOperator 0x1a5633bf080 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633c1078 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633c1058 <col:6> 'const unsigned char **' lvalue ParmVar 0x1a5633be640 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1a5633bf0b8 <col:11> 'const unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633bf098 <col:11> 'const unsigned char *' lvalue Var 0x1a5633beb70 'p' 'const unsigned char *'
|   `-ReturnStmt 0x1a5633bf118 <line:146:5, col:12>
|     `-IntegerLiteral 0x1a5633bf0f0 <col:12> 'int' 1
|-FunctionDecl 0x1a5633bf3e0 <line:149:1, line:180:1> line:149:21 used blob_length 'unsigned int (unsigned int, int, int)' static
| |-ParmVarDecl 0x1a5633bf1b0 <col:33, col:42> col:42 used bitlen 'unsigned int'
| |-ParmVarDecl 0x1a5633bf230 <col:50, col:54> col:54 used isdss 'int'
| |-ParmVarDecl 0x1a5633bf2b0 <col:61, col:65> col:65 used ispub 'int'
| `-CompoundStmt 0x1a5633bfe58 <line:150:1, line:180:1>
|   |-DeclStmt 0x1a5633bf5c8 <line:151:5, col:31>
|   | |-VarDecl 0x1a5633bf4c8 <col:5, col:18> col:18 used nbyte 'unsigned int'
|   | `-VarDecl 0x1a5633bf548 <col:5, col:25> col:25 used hnbyte 'unsigned int'
|   |-BinaryOperator 0x1a5633bf718 <line:152:5, col:29> 'unsigned int' '='
|   | |-DeclRefExpr 0x1a5633bf5e0 <col:5> 'unsigned int' lvalue Var 0x1a5633bf4c8 'nbyte' 'unsigned int'
|   | `-BinaryOperator 0x1a5633bf6f8 <col:13, col:29> 'unsigned int' '>>'
|   |   |-ParenExpr 0x1a5633bf6b0 <col:13, col:24> 'unsigned int'
|   |   | `-BinaryOperator 0x1a5633bf690 <col:14, col:23> 'unsigned int' '+'
|   |   |   |-ImplicitCastExpr 0x1a5633bf660 <col:14> 'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1a5633bf618 <col:14> 'unsigned int' lvalue ParmVar 0x1a5633bf1b0 'bitlen' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1a5633bf678 <col:23> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1a5633bf638 <col:23> 'int' 7
|   |   `-IntegerLiteral 0x1a5633bf6d0 <col:29> 'int' 3
|   |-BinaryOperator 0x1a5633bf870 <line:153:5, col:31> 'unsigned int' '='
|   | |-DeclRefExpr 0x1a5633bf738 <col:5> 'unsigned int' lvalue Var 0x1a5633bf548 'hnbyte' 'unsigned int'
|   | `-BinaryOperator 0x1a5633bf850 <col:14, col:31> 'unsigned int' '>>'
|   |   |-ParenExpr 0x1a5633bf808 <col:14, col:26> 'unsigned int'
|   |   | `-BinaryOperator 0x1a5633bf7e8 <col:15, col:24> 'unsigned int' '+'
|   |   |   |-ImplicitCastExpr 0x1a5633bf7b8 <col:15> 'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1a5633bf770 <col:15> 'unsigned int' lvalue ParmVar 0x1a5633bf1b0 'bitlen' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1a5633bf7d0 <col:24> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1a5633bf790 <col:24> 'int' 15
|   |   `-IntegerLiteral 0x1a5633bf828 <col:31> 'int' 4
|   `-IfStmt 0x1a5633bfe30 <line:154:5, line:178:5> has_else
|     |-ImplicitCastExpr 0x1a5633bf8b0 <line:154:9> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x1a5633bf890 <col:9> 'int' lvalue ParmVar 0x1a5633bf230 'isdss' 'int'
|     |-CompoundStmt 0x1a5633bfb38 <col:16, line:168:5>
|     | `-IfStmt 0x1a5633bfb10 <line:160:9, line:167:29> has_else
|     |   |-ImplicitCastExpr 0x1a5633bf8e8 <line:160:13> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x1a5633bf8c8 <col:13> 'int' lvalue ParmVar 0x1a5633bf2b0 'ispub' 'int'
|     |   |-ReturnStmt 0x1a5633bf9f8 <line:161:13, col:29>
|     |   | `-BinaryOperator 0x1a5633bf9d8 <col:20, col:29> 'unsigned int' '+'
|     |   |   |-ImplicitCastExpr 0x1a5633bf9c0 <col:20> 'unsigned int' <IntegralCast>
|     |   |   | `-IntegerLiteral 0x1a5633bf900 <col:20> 'int' 44
|     |   |   `-BinaryOperator 0x1a5633bf9a0 <col:25, col:29> 'unsigned int' '*'
|     |   |     |-ImplicitCastExpr 0x1a5633bf988 <col:25> 'unsigned int' <IntegralCast>
|     |   |     | `-IntegerLiteral 0x1a5633bf928 <col:25> 'int' 3
|     |   |     `-ImplicitCastExpr 0x1a5633bf970 <col:29> 'unsigned int' <LValueToRValue>
|     |   |       `-DeclRefExpr 0x1a5633bf950 <col:29> 'unsigned int' lvalue Var 0x1a5633bf4c8 'nbyte' 'unsigned int'
|     |   `-ReturnStmt 0x1a5633bfb00 <line:167:13, col:29>
|     |     `-BinaryOperator 0x1a5633bfae0 <col:20, col:29> 'unsigned int' '+'
|     |       |-ImplicitCastExpr 0x1a5633bfac8 <col:20> 'unsigned int' <IntegralCast>
|     |       | `-IntegerLiteral 0x1a5633bfa08 <col:20> 'int' 64
|     |       `-BinaryOperator 0x1a5633bfaa8 <col:25, col:29> 'unsigned int' '*'
|     |         |-ImplicitCastExpr 0x1a5633bfa90 <col:25> 'unsigned int' <IntegralCast>
|     |         | `-IntegerLiteral 0x1a5633bfa30 <col:25> 'int' 2
|     |         `-ImplicitCastExpr 0x1a5633bfa78 <col:29> 'unsigned int' <LValueToRValue>
|     |           `-DeclRefExpr 0x1a5633bfa58 <col:29> 'unsigned int' lvalue Var 0x1a5633bf4c8 'nbyte' 'unsigned int'
|     `-CompoundStmt 0x1a5633bfe18 <line:168:12, line:178:5>
|       `-IfStmt 0x1a5633bfdf0 <line:170:9, line:177:40> has_else
|         |-ImplicitCastExpr 0x1a5633bfb70 <line:170:13> 'int' <LValueToRValue>
|         | `-DeclRefExpr 0x1a5633bfb50 <col:13> 'int' lvalue ParmVar 0x1a5633bf2b0 'ispub' 'int'
|         |-ReturnStmt 0x1a5633bfc20 <line:171:13, col:24>
|         | `-BinaryOperator 0x1a5633bfc00 <col:20, col:24> 'unsigned int' '+'
|         |   |-ImplicitCastExpr 0x1a5633bfbe8 <col:20> 'unsigned int' <IntegralCast>
|         |   | `-IntegerLiteral 0x1a5633bfb88 <col:20> 'int' 4
|         |   `-ImplicitCastExpr 0x1a5633bfbd0 <col:24> 'unsigned int' <LValueToRValue>
|         |     `-DeclRefExpr 0x1a5633bfbb0 <col:24> 'unsigned int' lvalue Var 0x1a5633bf4c8 'nbyte' 'unsigned int'
|         `-ReturnStmt 0x1a5633bfde0 <line:177:13, col:40>
|           `-BinaryOperator 0x1a5633bfdc0 <col:20, col:40> 'unsigned int' '+'
|             |-BinaryOperator 0x1a5633bfd08 <col:20, col:28> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x1a5633bfcf0 <col:20> 'unsigned int' <IntegralCast>
|             | | `-IntegerLiteral 0x1a5633bfc30 <col:20> 'int' 4
|             | `-BinaryOperator 0x1a5633bfcd0 <col:24, col:28> 'unsigned int' '*'
|             |   |-ImplicitCastExpr 0x1a5633bfcb8 <col:24> 'unsigned int' <IntegralCast>
|             |   | `-IntegerLiteral 0x1a5633bfc58 <col:24> 'int' 2
|             |   `-ImplicitCastExpr 0x1a5633bfca0 <col:28> 'unsigned int' <LValueToRValue>
|             |     `-DeclRefExpr 0x1a5633bfc80 <col:28> 'unsigned int' lvalue Var 0x1a5633bf4c8 'nbyte' 'unsigned int'
|             `-BinaryOperator 0x1a5633bfda0 <col:36, col:40> 'unsigned int' '*'
|               |-ImplicitCastExpr 0x1a5633bfd88 <col:36> 'unsigned int' <IntegralCast>
|               | `-IntegerLiteral 0x1a5633bfd28 <col:36> 'int' 5
|               `-ImplicitCastExpr 0x1a5633bfd70 <col:40> 'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x1a5633bfd50 <col:40> 'unsigned int' lvalue Var 0x1a5633bf548 'hnbyte' 'unsigned int'
|-FunctionDecl 0x1a5633c5af0 <line:182:1, line:201:1> line:182:18 invalid do_b2i 'int *(const unsigned char **, unsigned int, int)' static
| |-ParmVarDecl 0x1a5633bfea8 <col:25, col:47> col:47 used in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633bff28 <col:51, col:64> col:64 used length 'unsigned int'
| |-ParmVarDecl 0x1a5633bffa8 <line:183:25, col:29> col:29 used ispub 'int'
| `-CompoundStmt 0x1a5633c6518 <line:184:1, line:201:1>
|   |-DeclStmt 0x1a5633c5ca8 <line:185:5, col:33>
|   | `-VarDecl 0x1a5633c5bd8 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1a5633c5c90 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1a5633c5c78 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1a5633c5c60 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1a5633c5c40 <col:31> 'const unsigned char **' lvalue ParmVar 0x1a5633bfea8 'in' 'const unsigned char **'
|   |-DeclStmt 0x1a5633c5dd8 <line:186:5, col:31>
|   | |-VarDecl 0x1a5633c5cd8 <col:5, col:18> col:18 used bitlen 'unsigned int'
|   | `-VarDecl 0x1a5633c5d58 <col:5, col:26> col:26 used magic 'unsigned int'
|   |-DeclStmt 0x1a5633c5e70 <line:187:5, col:14>
|   | `-VarDecl 0x1a5633c5e08 <col:5, col:9> col:9 used isdss 'int'
|   |-IfStmt 0x1a5633c6160 <line:188:5, line:191:5>
|   | |-BinaryOperator 0x1a5633c6110 <line:188:9, col:72> 'int' '<='
|   | | |-CallExpr 0x1a5633c6080 <col:9, col:67> 'int'
|   | | | |-ImplicitCastExpr 0x1a5633c6068 <col:9> 'int (*)(const unsigned char **, unsigned int, unsigned int *, unsigned int *, int *, int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1a5633c5e88 <col:9> 'int (const unsigned char **, unsigned int, unsigned int *, unsigned int *, int *, int *)' Function 0x1a5633bea70 'do_blob_header' 'int (const unsigned char **, unsigned int, unsigned int *, unsigned int *, int *, int *)'
|   | | | |-UnaryOperator 0x1a5633c5ee0 <col:24, col:25> 'const unsigned char **' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1a5633c5ea8 <col:25> 'const unsigned char *' lvalue Var 0x1a5633c5bd8 'p' 'const unsigned char *'
|   | | | |-ImplicitCastExpr 0x1a5633c60d0 <col:28> 'unsigned int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1a5633c5ef8 <col:28> 'unsigned int' lvalue ParmVar 0x1a5633bff28 'length' 'unsigned int'
|   | | | |-UnaryOperator 0x1a5633c5f50 <col:36, col:37> 'unsigned int *' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1a5633c5f18 <col:37> 'unsigned int' lvalue Var 0x1a5633c5d58 'magic' 'unsigned int'
|   | | | |-UnaryOperator 0x1a5633c5fa0 <col:44, col:45> 'unsigned int *' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1a5633c5f68 <col:45> 'unsigned int' lvalue Var 0x1a5633c5cd8 'bitlen' 'unsigned int'
|   | | | |-UnaryOperator 0x1a5633c5ff0 <col:53, col:54> 'int *' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1a5633c5fb8 <col:54> 'int' lvalue Var 0x1a5633c5e08 'isdss' 'int'
|   | | | `-UnaryOperator 0x1a5633c6028 <col:61, col:62> 'int *' prefix '&' cannot overflow
|   | | |   `-DeclRefExpr 0x1a5633c6008 <col:62> 'int' lvalue ParmVar 0x1a5633bffa8 'ispub' 'int'
|   | | `-IntegerLiteral 0x1a5633c60e8 <col:72> 'int' 0
|   | `-CompoundStmt 0x1a5633c6150 <col:75, line:191:5>
|   |-CompoundAssignOperator 0x1a5633c61d8 <line:192:5, col:15> 'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x1a5633c6178 <col:5> 'unsigned int' lvalue ParmVar 0x1a5633bff28 'length' 'unsigned int'
|   | `-ImplicitCastExpr 0x1a5633c61c0 <col:15> 'unsigned int' <IntegralCast>
|   |   `-IntegerLiteral 0x1a5633c6198 <col:15> 'int' 16
|   `-IfStmt 0x1a5633c63d8 <line:193:5, line:196:5>
|     |-BinaryOperator 0x1a5633c6388 <line:193:9, col:50> 'int' '<'
|     | |-ImplicitCastExpr 0x1a5633c6370 <col:9> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1a5633c6208 <col:9> 'unsigned int' lvalue ParmVar 0x1a5633bff28 'length' 'unsigned int'
|     | `-CallExpr 0x1a5633c62f0 <col:18, col:50> 'unsigned int'
|     |   |-ImplicitCastExpr 0x1a5633c62d8 <col:18> 'unsigned int (*)(unsigned int, int, int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x1a5633c6228 <col:18> 'unsigned int (unsigned int, int, int)' Function 0x1a5633bf3e0 'blob_length' 'unsigned int (unsigned int, int, int)'
|     |   |-ImplicitCastExpr 0x1a5633c6328 <col:30> 'unsigned int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x1a5633c6248 <col:30> 'unsigned int' lvalue Var 0x1a5633c5cd8 'bitlen' 'unsigned int'
|     |   |-ImplicitCastExpr 0x1a5633c6340 <col:38> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x1a5633c6268 <col:38> 'int' lvalue Var 0x1a5633c5e08 'isdss' 'int'
|     |   `-ImplicitCastExpr 0x1a5633c6358 <col:45> 'int' <LValueToRValue>
|     |     `-DeclRefExpr 0x1a5633c6288 <col:45> 'int' lvalue ParmVar 0x1a5633bffa8 'ispub' 'int'
|     `-CompoundStmt 0x1a5633c63c8 <col:53, line:196:5>
|-FunctionDecl 0x1a5633c66d0 <line:203:1, line:242:1> line:203:18 invalid do_b2i_bio 'int *(int *, int)' static
| |-ParmVarDecl 0x1a5633c6570 <col:29, col:34> col:34 invalid in 'int *'
| |-ParmVarDecl 0x1a5633c65f0 <col:38, col:42> col:42 used ispub 'int'
| `-CompoundStmt 0x1a5633c4c18 <line:204:1, line:242:1>
|   |-DeclStmt 0x1a5633c6818 <line:205:5, col:27>
|   | `-VarDecl 0x1a5633c67b0 <col:5, col:26> col:26 used p 'const unsigned char *'
|   |-DeclStmt 0x1a5633c6a00 <line:206:5, col:43>
|   | |-VarDecl 0x1a5633c68d0 <col:5, col:29> col:19 used hdr_buf 'unsigned char [16]'
|   | `-VarDecl 0x1a5633c6980 <col:5, col:33> col:33 used buf 'unsigned char *'
|   |-DeclStmt 0x1a5633c9bf8 <line:207:5, col:39>
|   | |-VarDecl 0x1a5633c6a30 <col:5, col:18> col:18 used bitlen 'unsigned int'
|   | |-VarDecl 0x1a5633c9af0 <col:5, col:26> col:26 used magic 'unsigned int'
|   | `-VarDecl 0x1a5633c9b70 <col:5, col:33> col:33 used length 'unsigned int'
|   |-DeclStmt 0x1a5633c9c90 <line:208:5, col:14>
|   | `-VarDecl 0x1a5633c9c28 <col:5, col:9> col:9 used isdss 'int'
|   |-IfStmt 0x1a5633c9e88 <line:210:5, line:213:5>
|   | |-OpaqueValueExpr 0x1a5633c9e70 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a5633c9e60 <line:210:42, line:213:5>
|   |-BinaryOperator 0x1a5633c9f28 <line:214:5, col:9> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x1a5633c9ea0 <col:5> 'const unsigned char *' lvalue Var 0x1a5633c67b0 'p' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c9f10 <col:9> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x1a5633c9ef8 <col:9> 'unsigned char *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1a5633c9ed8 <col:9> 'unsigned char [16]' lvalue Var 0x1a5633c68d0 'hdr_buf' 'unsigned char [16]'
|   |-BinaryOperator 0x1a5633ca320 <line:218:5, col:46> 'unsigned int' '='
|   | |-DeclRefExpr 0x1a5633ca1d0 <col:5> 'unsigned int' lvalue Var 0x1a5633c9b70 'length' 'unsigned int'
|   | `-CallExpr 0x1a5633ca2a0 <col:14, col:46> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1a5633ca288 <col:14> 'unsigned int (*)(unsigned int, int, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1a5633ca208 <col:14> 'unsigned int (unsigned int, int, int)' Function 0x1a5633bf3e0 'blob_length' 'unsigned int (unsigned int, int, int)'
|   |   |-ImplicitCastExpr 0x1a5633ca2d8 <col:26> 'unsigned int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1a5633ca228 <col:26> 'unsigned int' lvalue Var 0x1a5633c6a30 'bitlen' 'unsigned int'
|   |   |-ImplicitCastExpr 0x1a5633ca2f0 <col:34> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1a5633ca248 <col:34> 'int' lvalue Var 0x1a5633c9c28 'isdss' 'int'
|   |   `-ImplicitCastExpr 0x1a5633ca308 <col:41> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1a5633ca268 <col:41> 'int' lvalue ParmVar 0x1a5633c65f0 'ispub' 'int'
|   |-IfStmt 0x1a5633ca408 <line:219:5, line:222:5>
|   | |-BinaryOperator 0x1a5633ca3b8 <line:219:9, line:70:35> 'int' '>'
|   | | |-ImplicitCastExpr 0x1a5633ca388 <line:219:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a5633ca340 <col:9> 'unsigned int' lvalue Var 0x1a5633c9b70 'length' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1a5633ca3a0 <line:70:35> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1a5633ca360 <col:35> 'int' 102400
|   | `-CompoundStmt 0x1a5633ca3f8 <line:219:35, line:222:5>
|   |-BinaryOperator 0x1a5633ca628 <line:223:5, col:32> 'unsigned char *' '='
|   | |-DeclRefExpr 0x1a5633ca420 <col:5> 'unsigned char *' lvalue Var 0x1a5633c6980 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633ca610 <col:11, col:32> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x1a5633ca5d0 <col:11, col:32> 'int'
|   |     |-ImplicitCastExpr 0x1a5633ca5b8 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1a5633ca548 <col:11> 'int ()' Function 0x1a5633ca480 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x1a5633ca5f8 <col:26> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1a5633ca568 <col:26> 'unsigned int' lvalue Var 0x1a5633c9b70 'length' 'unsigned int'
|   |-IfStmt 0x1a5633ca720 <line:224:5, line:227:5>
|   | |-OpaqueValueExpr 0x1a5633ca708 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a5633ca6f0 <line:224:22, line:227:5>
|   |   `-GotoStmt 0x1a5633ca6d8 <line:226:9, col:14> 'err' 0x1a5633ca688
|   |-BinaryOperator 0x1a5633ca7a8 <line:228:5, col:9> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x1a5633ca738 <col:5> 'const unsigned char *' lvalue Var 0x1a5633c67b0 'p' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633ca790 <col:9> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x1a5633ca778 <col:9> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1a5633ca758 <col:9> 'unsigned char *' lvalue Var 0x1a5633c6980 'buf' 'unsigned char *'
|   |-IfStmt 0x1a5633ca908 <line:229:5, line:232:5>
|   | |-OpaqueValueExpr 0x1a5633ca8f0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a5633ca8d8 <line:229:51, line:232:5>
|   |   `-GotoStmt 0x1a5633ca8c0 <line:231:9, col:14> 'err' 0x1a5633ca688
|   `-LabelStmt 0x1a5633c4c00 <line:239:2, line:240:21> 'err'
|     `-CallExpr 0x1a5633c4bc0 <col:5, col:21> 'int'
|       |-ImplicitCastExpr 0x1a5633c4ba8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1a5633c4b68 <col:5> 'int ()' Function 0x1a5633c4aa0 'OPENSSL_free' 'int ()'
|       `-ImplicitCastExpr 0x1a5633c4be8 <col:18> 'unsigned char *' <LValueToRValue>
|         `-DeclRefExpr 0x1a5633c4b88 <col:18> 'unsigned char *' lvalue Var 0x1a5633c6980 'buf' 'unsigned char *'
|-FunctionDecl 0x1a5633c4ea0 <line:244:1, line:314:1> line:244:18 invalid b2i_dss 'int *(const unsigned char **, unsigned int, int)' static
| |-ParmVarDecl 0x1a5633c4cb0 <col:26, col:48> col:48 used in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633c4d30 <line:245:26, col:39> col:39 used bitlen 'unsigned int'
| |-ParmVarDecl 0x1a5633c4db0 <col:47, col:51> col:51 used ispub 'int'
| `-CompoundStmt 0x1a5633cc858 <line:246:1, line:314:1>
|   |-DeclStmt 0x1a5633c5058 <line:247:5, col:33>
|   | `-VarDecl 0x1a5633c4f88 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1a5633c5040 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1a5633c5028 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1a5633c5010 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1a5633c4ff0 <col:31> 'const unsigned char **' lvalue ParmVar 0x1a5633c4cb0 'in' 'const unsigned char **'
|   |-DeclStmt 0x1a5633c50f0 <line:251:5, col:23>
|   | `-VarDecl 0x1a5633c5088 <col:5, col:18> col:18 used nbyte 'unsigned int'
|   |-BinaryOperator 0x1a5633c5240 <line:255:5, col:29> 'unsigned int' '='
|   | |-DeclRefExpr 0x1a5633c5108 <col:5> 'unsigned int' lvalue Var 0x1a5633c5088 'nbyte' 'unsigned int'
|   | `-BinaryOperator 0x1a5633c5220 <col:13, col:29> 'unsigned int' '>>'
|   |   |-ParenExpr 0x1a5633c51d8 <col:13, col:24> 'unsigned int'
|   |   | `-BinaryOperator 0x1a5633c51b8 <col:14, col:23> 'unsigned int' '+'
|   |   |   |-ImplicitCastExpr 0x1a5633c5188 <col:14> 'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1a5633c5140 <col:14> 'unsigned int' lvalue ParmVar 0x1a5633c4d30 'bitlen' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1a5633c51a0 <col:23> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1a5633c5160 <col:23> 'int' 7
|   |   `-IntegerLiteral 0x1a5633c51f8 <col:29> 'int' 3
|   |-IfStmt 0x1a5633c5570 <line:259:5, line:260:14>
|   | |-OpaqueValueExpr 0x1a5633c5558 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633c5540 <col:9, col:14> 'memerr' 0x1a5633c54f0
|   |-IfStmt 0x1a5633c5628 <line:261:5, line:262:14>
|   | |-OpaqueValueExpr 0x1a5633c5610 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633c55f8 <col:9, col:14> 'memerr' 0x1a5633c54f0
|   |-IfStmt 0x1a5633c56d0 <line:264:5, line:265:14>
|   | |-OpaqueValueExpr 0x1a5633c56b8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633c56a0 <col:9, col:14> 'memerr' 0x1a5633c54f0
|   |-IfStmt 0x1a5633c5770 <line:267:5, line:268:14>
|   | |-OpaqueValueExpr 0x1a5633c5758 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633c5740 <col:9, col:14> 'memerr' 0x1a5633c54f0
|   |-IfStmt 0x1a5633cbf50 <line:270:5, line:289:5> has_else
|   | |-ImplicitCastExpr 0x1a5633c57a8 <line:270:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1a5633c5788 <col:9> 'int' lvalue ParmVar 0x1a5633c4db0 'ispub' 'int'
|   | |-CompoundStmt 0x1a5633c5860 <col:16, line:273:5>
|   | | `-IfStmt 0x1a5633c5848 <line:271:9, line:272:18>
|   | |   |-OpaqueValueExpr 0x1a5633c5830 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x1a5633c5818 <col:13, col:18> 'memerr' 0x1a5633c54f0
|   | `-CompoundStmt 0x1a5633cbf20 <line:273:12, line:289:5>
|   |   |-IfStmt 0x1a5633c5908 <line:274:9, line:275:18>
|   |   | |-OpaqueValueExpr 0x1a5633c58f0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633c58d8 <col:13, col:18> 'memerr' 0x1a5633c54f0
|   |   |-IfStmt 0x1a5633cbb10 <line:279:9, line:280:18>
|   |   | |-OpaqueValueExpr 0x1a5633c5a80 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633c5a68 <col:13, col:18> 'memerr' 0x1a5633c54f0
|   |   |-IfStmt 0x1a5633cbca0 <line:281:9, line:282:18>
|   |   | |-OpaqueValueExpr 0x1a5633cbc88 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633cbc70 <col:13, col:18> 'memerr' 0x1a5633c54f0
|   |   `-IfStmt 0x1a5633cbdf8 <line:284:9, line:285:18>
|   |     |-OpaqueValueExpr 0x1a5633cbde0 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1a5633cbdc8 <col:13, col:18> 'memerr' 0x1a5633c54f0
|   |-IfStmt 0x1a5633cc0b8 <line:290:5, line:291:14>
|   | |-OpaqueValueExpr 0x1a5633cc0a0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633cc088 <col:9, col:14> 'memerr' 0x1a5633c54f0
|   |-IfStmt 0x1a5633cc210 <line:293:5, line:294:14>
|   | |-OpaqueValueExpr 0x1a5633cc1f8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633cc1e0 <col:9, col:14> 'memerr' 0x1a5633c54f0
|   |-IfStmt 0x1a5633cc368 <line:297:5, line:298:14>
|   | |-OpaqueValueExpr 0x1a5633cc350 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633cc338 <col:9, col:14> 'memerr' 0x1a5633c54f0
|   |-BinaryOperator 0x1a5633cc518 <line:300:5, col:11> 'const unsigned char *' '='
|   | |-UnaryOperator 0x1a5633cc4c8 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633cc4b0 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633cc490 <col:6> 'const unsigned char **' lvalue ParmVar 0x1a5633c4cb0 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1a5633cc500 <col:11> 'const unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633cc4e0 <col:11> 'const unsigned char *' lvalue Var 0x1a5633c4f88 'p' 'const unsigned char *'
|   `-LabelStmt 0x1a5633cc560 <line:303:2, col:8> 'memerr'
|     `-NullStmt 0x1a5633cc558 <col:8>
|-FunctionDecl 0x1a5633cdb30 <line:316:1, line:380:1> line:316:18 invalid b2i_rsa 'int *(const unsigned char **, unsigned int, int)' static
| |-ParmVarDecl 0x1a5633cc8f0 <col:26, col:48> col:48 used in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633cc970 <line:317:26, col:39> col:39 used bitlen 'unsigned int'
| |-ParmVarDecl 0x1a5633cc9f0 <col:47, col:51> col:51 used ispub 'int'
| `-CompoundStmt 0x1a5633cd3f8 <line:318:1, line:380:1>
|   |-DeclStmt 0x1a5633cdce8 <line:319:5, col:35>
|   | `-VarDecl 0x1a5633cdc18 <col:5, col:33> col:26 used pin 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1a5633cdcd0 <col:32, col:33> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1a5633cdcb8 <col:32, col:33> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1a5633cdca0 <col:33> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1a5633cdc80 <col:33> 'const unsigned char **' lvalue ParmVar 0x1a5633cc8f0 'in' 'const unsigned char **'
|   |-DeclStmt 0x1a5633cde18 <line:324:5, col:31>
|   | |-VarDecl 0x1a5633cdd18 <col:5, col:18> col:18 used nbyte 'unsigned int'
|   | `-VarDecl 0x1a5633cdd98 <col:5, col:25> col:25 used hnbyte 'unsigned int'
|   |-BinaryOperator 0x1a5633cdf68 <line:325:5, col:29> 'unsigned int' '='
|   | |-DeclRefExpr 0x1a5633cde30 <col:5> 'unsigned int' lvalue Var 0x1a5633cdd18 'nbyte' 'unsigned int'
|   | `-BinaryOperator 0x1a5633cdf48 <col:13, col:29> 'unsigned int' '>>'
|   |   |-ParenExpr 0x1a5633cdf00 <col:13, col:24> 'unsigned int'
|   |   | `-BinaryOperator 0x1a5633cdee0 <col:14, col:23> 'unsigned int' '+'
|   |   |   |-ImplicitCastExpr 0x1a5633cdeb0 <col:14> 'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1a5633cde68 <col:14> 'unsigned int' lvalue ParmVar 0x1a5633cc970 'bitlen' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1a5633cdec8 <col:23> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1a5633cde88 <col:23> 'int' 7
|   |   `-IntegerLiteral 0x1a5633cdf20 <col:29> 'int' 3
|   |-BinaryOperator 0x1a5633ce0c0 <line:326:5, col:31> 'unsigned int' '='
|   | |-DeclRefExpr 0x1a5633cdf88 <col:5> 'unsigned int' lvalue Var 0x1a5633cdd98 'hnbyte' 'unsigned int'
|   | `-BinaryOperator 0x1a5633ce0a0 <col:14, col:31> 'unsigned int' '>>'
|   |   |-ParenExpr 0x1a5633ce058 <col:14, col:26> 'unsigned int'
|   |   | `-BinaryOperator 0x1a5633ce038 <col:15, col:24> 'unsigned int' '+'
|   |   |   |-ImplicitCastExpr 0x1a5633ce008 <col:15> 'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1a5633cdfc0 <col:15> 'unsigned int' lvalue ParmVar 0x1a5633cc970 'bitlen' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1a5633ce020 <col:24> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1a5633cdfe0 <col:24> 'int' 15
|   |   `-IntegerLiteral 0x1a5633ce078 <col:31> 'int' 4
|   |-IfStmt 0x1a5633ce300 <line:329:5, line:330:14>
|   | |-OpaqueValueExpr 0x1a5633ce2e8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633ce2d0 <col:9, col:14> 'memerr' 0x1a5633ce280
|   |-IfStmt 0x1a5633ce3a0 <line:332:5, line:333:14>
|   | |-OpaqueValueExpr 0x1a5633ce388 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633ce370 <col:9, col:14> 'memerr' 0x1a5633ce280
|   |-IfStmt 0x1a5633ce5a8 <line:334:5, line:335:14>
|   | |-OpaqueValueExpr 0x1a5633ce590 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633ce578 <col:9, col:14> 'memerr' 0x1a5633ce280
|   |-IfStmt 0x1a5633ce648 <line:336:5, line:337:14>
|   | |-OpaqueValueExpr 0x1a5633ce630 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633ce618 <col:9, col:14> 'memerr' 0x1a5633ce280
|   |-IfStmt 0x1a5633ccdf8 <line:338:5, line:357:5>
|   | |-UnaryOperator 0x1a5633ce698 <line:338:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633ce680 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633ce660 <col:10> 'int' lvalue ParmVar 0x1a5633cc9f0 'ispub' 'int'
|   | `-CompoundStmt 0x1a5633ccda8 <col:17, line:357:5>
|   |   |-IfStmt 0x1a5633ce738 <line:339:9, line:340:18>
|   |   | |-OpaqueValueExpr 0x1a5633ce720 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633ce708 <col:13, col:18> 'memerr' 0x1a5633ce280
|   |   |-IfStmt 0x1a5633ce7d8 <line:341:9, line:342:18>
|   |   | |-OpaqueValueExpr 0x1a5633ce7c0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633ce7a8 <col:13, col:18> 'memerr' 0x1a5633ce280
|   |   |-IfStmt 0x1a5633ce878 <line:343:9, line:344:18>
|   |   | |-OpaqueValueExpr 0x1a5633ce860 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633ce848 <col:13, col:18> 'memerr' 0x1a5633ce280
|   |   |-IfStmt 0x1a5633ce918 <line:345:9, line:346:18>
|   |   | |-OpaqueValueExpr 0x1a5633ce900 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633ce8e8 <col:13, col:18> 'memerr' 0x1a5633ce280
|   |   |-IfStmt 0x1a5633ce9b8 <line:347:9, line:348:18>
|   |   | |-OpaqueValueExpr 0x1a5633ce9a0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633ce988 <col:13, col:18> 'memerr' 0x1a5633ce280
|   |   |-IfStmt 0x1a5633cea58 <line:349:9, line:350:18>
|   |   | |-OpaqueValueExpr 0x1a5633cea40 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633cea28 <col:13, col:18> 'memerr' 0x1a5633ce280
|   |   |-IfStmt 0x1a5633ccc38 <line:351:9, line:352:18>
|   |   | |-OpaqueValueExpr 0x1a5633ccc20 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633ccc08 <col:13, col:18> 'memerr' 0x1a5633ce280
|   |   `-IfStmt 0x1a5633ccd90 <line:354:9, line:355:18>
|   |     |-OpaqueValueExpr 0x1a5633ccd78 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1a5633ccd60 <col:13, col:18> 'memerr' 0x1a5633ce280
|   |-IfStmt 0x1a5633ccf50 <line:358:5, line:359:14>
|   | |-OpaqueValueExpr 0x1a5633ccf38 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633ccf20 <col:9, col:14> 'memerr' 0x1a5633ce280
|   |-IfStmt 0x1a5633cd0a8 <line:362:5, line:363:14>
|   | |-OpaqueValueExpr 0x1a5633cd090 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633cd078 <col:9, col:14> 'memerr' 0x1a5633ce280
|   |-BinaryOperator 0x1a5633cd258 <line:365:5, col:11> 'const unsigned char *' '='
|   | |-UnaryOperator 0x1a5633cd208 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633cd1f0 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633cd1d0 <col:6> 'const unsigned char **' lvalue ParmVar 0x1a5633cc8f0 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1a5633cd240 <col:11> 'const unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633cd220 <col:11> 'const unsigned char *' lvalue Var 0x1a5633cdc18 'pin' 'const unsigned char *'
|   `-LabelStmt 0x1a5633cd2a0 <line:367:2, col:8> 'memerr'
|     `-NullStmt 0x1a5633cd298 <col:8>
|-FunctionDecl 0x1a5633cd620 <line:382:1, line:385:1> line:382:11 invalid b2i_PrivateKey 'int *(const unsigned char **, long)'
| |-ParmVarDecl 0x1a5633cd490 <col:26, col:48> col:48 used in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633cd510 <col:52, col:57> col:57 used length 'long'
| `-CompoundStmt 0x1a5633cd750 <line:383:1, line:385:1>
|-FunctionDecl 0x1a5633cd8d0 <line:387:1, line:390:1> line:387:11 invalid b2i_PublicKey 'int *(const unsigned char **, long)'
| |-ParmVarDecl 0x1a5633cd780 <col:25, col:47> col:47 used in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633cd800 <col:51, col:56> col:56 used length 'long'
| `-CompoundStmt 0x1a5633cda00 <line:388:1, line:390:1>
|-FunctionDecl 0x1a5633c6ac0 <line:392:1, line:395:1> line:392:11 invalid b2i_PrivateKey_bio 'int *(int *)'
| |-ParmVarDecl 0x1a5633cda28 <col:30, col:35> col:35 invalid in 'int *'
| `-CompoundStmt 0x1a5633c6ba8 <line:393:1, line:395:1>
|-FunctionDecl 0x1a5633c6c68 <line:397:1, line:400:1> line:397:11 invalid b2i_PublicKey_bio 'int *(int *)'
| |-ParmVarDecl 0x1a5633c6bd0 <col:29, col:34> col:34 invalid in 'int *'
| `-CompoundStmt 0x1a5633c6d50 <line:398:1, line:400:1>
|-FunctionDecl 0x1a5633c6f28 <line:402:1, line:410:1> line:402:13 used write_ledword 'void (unsigned char **, unsigned int)' static
| |-ParmVarDecl 0x1a5633c6da8 <col:27, col:43> col:43 used out 'unsigned char **'
| |-ParmVarDecl 0x1a5633c6e28 <col:48, col:61> col:61 used dw 'unsigned int'
| `-CompoundStmt 0x1a5633c7768 <line:403:1, line:410:1>
|   |-DeclStmt 0x1a5633c70d8 <line:404:5, col:28>
|   | `-VarDecl 0x1a5633c7008 <col:5, col:25> col:20 used p 'unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1a5633c70c0 <col:24, col:25> 'unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1a5633c70a8 <col:24, col:25> 'unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1a5633c7090 <col:25> 'unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1a5633c7070 <col:25> 'unsigned char **' lvalue ParmVar 0x1a5633c6da8 'out' 'unsigned char **'
|   |-BinaryOperator 0x1a5633c7208 <line:405:5, col:17> 'unsigned char' '='
|   | |-UnaryOperator 0x1a5633c7140 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1a5633c7128 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1a5633c70f0 <col:6> 'unsigned char *' lvalue Var 0x1a5633c7008 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c71f0 <col:12, col:17> 'unsigned char' <IntegralCast>
|   |   `-BinaryOperator 0x1a5633c71d0 <col:12, col:17> 'unsigned int' '&'
|   |     |-ImplicitCastExpr 0x1a5633c71a0 <col:12> 'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1a5633c7158 <col:12> 'unsigned int' lvalue ParmVar 0x1a5633c6e28 'dw' 'unsigned int'
|   |     `-ImplicitCastExpr 0x1a5633c71b8 <col:17> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1a5633c7178 <col:17> 'int' 255
|   |-BinaryOperator 0x1a5633c7390 <line:406:5, col:24> 'unsigned char' '='
|   | |-UnaryOperator 0x1a5633c7260 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1a5633c7248 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1a5633c7228 <col:6> 'unsigned char *' lvalue Var 0x1a5633c7008 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c7378 <col:12, col:24> 'unsigned char' <IntegralCast>
|   |   `-BinaryOperator 0x1a5633c7358 <col:12, col:24> 'unsigned int' '&'
|   |     |-ParenExpr 0x1a5633c72f8 <col:12, col:20> 'unsigned int'
|   |     | `-BinaryOperator 0x1a5633c72d8 <col:13, col:19> 'unsigned int' '>>'
|   |     |   |-ImplicitCastExpr 0x1a5633c72c0 <col:13> 'unsigned int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1a5633c7278 <col:13> 'unsigned int' lvalue ParmVar 0x1a5633c6e28 'dw' 'unsigned int'
|   |     |   `-IntegerLiteral 0x1a5633c7298 <col:19> 'int' 8
|   |     `-ImplicitCastExpr 0x1a5633c7340 <col:24> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1a5633c7318 <col:24> 'int' 255
|   |-BinaryOperator 0x1a5633c7518 <line:407:5, col:25> 'unsigned char' '='
|   | |-UnaryOperator 0x1a5633c73e8 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1a5633c73d0 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1a5633c73b0 <col:6> 'unsigned char *' lvalue Var 0x1a5633c7008 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c7500 <col:12, col:25> 'unsigned char' <IntegralCast>
|   |   `-BinaryOperator 0x1a5633c74e0 <col:12, col:25> 'unsigned int' '&'
|   |     |-ParenExpr 0x1a5633c7480 <col:12, col:21> 'unsigned int'
|   |     | `-BinaryOperator 0x1a5633c7460 <col:13, col:19> 'unsigned int' '>>'
|   |     |   |-ImplicitCastExpr 0x1a5633c7448 <col:13> 'unsigned int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1a5633c7400 <col:13> 'unsigned int' lvalue ParmVar 0x1a5633c6e28 'dw' 'unsigned int'
|   |     |   `-IntegerLiteral 0x1a5633c7420 <col:19> 'int' 16
|   |     `-ImplicitCastExpr 0x1a5633c74c8 <col:25> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1a5633c74a0 <col:25> 'int' 255
|   |-BinaryOperator 0x1a5633c76a0 <line:408:5, col:25> 'unsigned char' '='
|   | |-UnaryOperator 0x1a5633c7570 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1a5633c7558 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1a5633c7538 <col:6> 'unsigned char *' lvalue Var 0x1a5633c7008 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c7688 <col:12, col:25> 'unsigned char' <IntegralCast>
|   |   `-BinaryOperator 0x1a5633c7668 <col:12, col:25> 'unsigned int' '&'
|   |     |-ParenExpr 0x1a5633c7608 <col:12, col:21> 'unsigned int'
|   |     | `-BinaryOperator 0x1a5633c75e8 <col:13, col:19> 'unsigned int' '>>'
|   |     |   |-ImplicitCastExpr 0x1a5633c75d0 <col:13> 'unsigned int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1a5633c7588 <col:13> 'unsigned int' lvalue ParmVar 0x1a5633c6e28 'dw' 'unsigned int'
|   |     |   `-IntegerLiteral 0x1a5633c75a8 <col:19> 'int' 24
|   |     `-ImplicitCastExpr 0x1a5633c7650 <col:25> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1a5633c7628 <col:25> 'int' 255
|   `-BinaryOperator 0x1a5633c7748 <line:409:5, col:12> 'unsigned char *' '='
|     |-UnaryOperator 0x1a5633c76f8 <col:5, col:6> 'unsigned char *' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x1a5633c76e0 <col:6> 'unsigned char **' <LValueToRValue>
|     |   `-DeclRefExpr 0x1a5633c76c0 <col:6> 'unsigned char **' lvalue ParmVar 0x1a5633c6da8 'out' 'unsigned char **'
|     `-ImplicitCastExpr 0x1a5633c7730 <col:12> 'unsigned char *' <LValueToRValue>
|       `-DeclRefExpr 0x1a5633c7710 <col:12> 'unsigned char *' lvalue Var 0x1a5633c7008 'p' 'unsigned char *'
|-FunctionDecl 0x1a5633c79a8 <line:412:1, line:416:1> line:412:13 invalid write_lebn 'void (unsigned char **, const int *, int)' static
| |-ParmVarDecl 0x1a5633c77c8 <col:24, col:40> col:40 used out 'unsigned char **'
| |-ParmVarDecl 0x1a5633c7848 <col:45, col:59> col:59 invalid bn 'const int *'
| |-ParmVarDecl 0x1a5633c78c8 <col:63, col:67> col:67 used len 'int'
| `-CompoundStmt 0x1a5633ced80 <line:413:1, line:416:1>
|   `-CompoundAssignOperator 0x1a5633ced50 <line:415:5, col:13> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|     |-UnaryOperator 0x1a5633ced00 <col:5, col:6> 'unsigned char *' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x1a5633cece8 <col:6> 'unsigned char **' <LValueToRValue>
|     |   `-DeclRefExpr 0x1a5633cecc8 <col:6> 'unsigned char **' lvalue ParmVar 0x1a5633c77c8 'out' 'unsigned char **'
|     `-ImplicitCastExpr 0x1a5633ced38 <col:13> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1a5633ced18 <col:13> 'int' lvalue ParmVar 0x1a5633c78c8 'len' 'int'
|-FunctionDecl 0x1a5633cefa0 <line:418:1, col:69> col:12 invalid check_bitlen_rsa 'int (int *, int, unsigned int *)' static
| |-ParmVarDecl 0x1a5633cedb0 <col:29, col:34> col:34 invalid rsa 'int *'
| |-ParmVarDecl 0x1a5633cee30 <col:39, col:43> col:43 ispub 'int'
| `-ParmVarDecl 0x1a5633ceeb0 <col:50, col:64> col:64 magic 'unsigned int *'
|-FunctionDecl 0x1a5633cf218 <line:419:1, col:69> col:12 invalid check_bitlen_dsa 'int (int *, int, unsigned int *)' static
| |-ParmVarDecl 0x1a5633cf070 <col:29, col:34> col:34 invalid dsa 'int *'
| |-ParmVarDecl 0x1a5633cf0f0 <col:39, col:43> col:43 ispub 'int'
| `-ParmVarDecl 0x1a5633cf170 <col:50, col:64> col:64 magic 'unsigned int *'
|-FunctionDecl 0x1a5633cf4d8 <line:421:1, col:63> col:13 invalid write_rsa 'void (unsigned char **, int *, int)' static
| |-ParmVarDecl 0x1a5633cf2f0 <col:23, col:39> col:39 out 'unsigned char **'
| |-ParmVarDecl 0x1a5633cf370 <col:44, col:49> col:49 invalid rsa 'int *'
| `-ParmVarDecl 0x1a5633cf3f0 <col:54, col:58> col:58 ispub 'int'
|-FunctionDecl 0x1a5633cf750 <line:422:1, col:63> col:13 invalid write_dsa 'void (unsigned char **, int *, int)' static
| |-ParmVarDecl 0x1a5633cf5b0 <col:23, col:39> col:39 out 'unsigned char **'
| |-ParmVarDecl 0x1a5633cf630 <col:44, col:49> col:49 invalid dsa 'int *'
| `-ParmVarDecl 0x1a5633cf6b0 <col:54, col:58> col:58 ispub 'int'
|-FunctionDecl 0x1a5633cfa10 <line:424:1, line:470:1> line:424:12 invalid do_i2b 'int (unsigned char **, int *, int)' static
| |-ParmVarDecl 0x1a5633cf828 <col:19, col:35> col:35 used out 'unsigned char **'
| |-ParmVarDecl 0x1a5633cf8a8 <col:40, col:50> col:50 invalid pk 'int *'
| |-ParmVarDecl 0x1a5633cf928 <col:54, col:58> col:58 used ispub 'int'
| `-CompoundStmt 0x1a5633c9858 <line:425:1, line:470:1>
|   |-DeclStmt 0x1a5633cfbb8 <line:426:5, col:21>
|   | `-VarDecl 0x1a5633cfb50 <col:5, col:20> col:20 used p 'unsigned char *'
|   |-DeclStmt 0x1a5633cfdb0 <line:427:5, col:43>
|   | |-VarDecl 0x1a5633cfbe8 <col:5, col:18> col:18 used bitlen 'unsigned int'
|   | |-VarDecl 0x1a5633cfc68 <col:5, col:34> col:26 used magic 'unsigned int' cinit
|   | | `-ImplicitCastExpr 0x1a5633cfcf8 <col:34> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1a5633cfcd0 <col:34> 'int' 0
|   | `-VarDecl 0x1a5633cfd28 <col:5, col:37> col:37 used keyalg 'unsigned int'
|   |-DeclStmt 0x1a5633cff08 <line:428:5, col:26>
|   | |-VarDecl 0x1a5633cfde0 <col:5, col:9> col:9 used outlen 'int'
|   | `-VarDecl 0x1a5633cfe60 <col:5, col:25> col:17 used noinc 'int' cinit
|   |   `-IntegerLiteral 0x1a5633cfec8 <col:25> 'int' 0
|   |-DeclStmt 0x1a5633d00b0 <line:429:5, col:33>
|   | `-VarDecl 0x1a5633cff38 <col:5, col:9> col:9 used pktype 'int'
|   |-IfStmt 0x1a5633d0668 <line:430:5, line:437:17> has_else
|   | |-OpaqueValueExpr 0x1a5633d0650 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1a5633d0368 <line:430:33, line:433:5>
|   | | `-BinaryOperator 0x1a5633d0348 <line:432:9, line:64:34> 'unsigned int' '='
|   | |   |-DeclRefExpr 0x1a5633d02d0 <line:432:9> 'unsigned int' lvalue Var 0x1a5633cfd28 'keyalg' 'unsigned int'
|   | |   `-ImplicitCastExpr 0x1a5633d0330 <line:64:34> 'unsigned int' <IntegralCast>
|   | |     `-IntegerLiteral 0x1a5633d0308 <col:34> 'int' 8704
|   | `-IfStmt 0x1a5633d0628 <line:433:12, line:437:17> has_else
|   |   |-OpaqueValueExpr 0x1a5633d0610 <<invalid sloc>> '_Bool'
|   |   |-CompoundStmt 0x1a5633d05a8 <line:433:40, line:436:5>
|   |   | `-BinaryOperator 0x1a5633d0588 <line:435:9, line:63:34> 'unsigned int' '='
|   |   |   |-DeclRefExpr 0x1a5633d0528 <line:435:9> 'unsigned int' lvalue Var 0x1a5633cfd28 'keyalg' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1a5633d0570 <line:63:34> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1a5633d0548 <col:34> 'int' 41984
|   |   `-ReturnStmt 0x1a5633d0600 <line:437:9, col:17>
|   |     `-UnaryOperator 0x1a5633d05e8 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1a5633d05c0 <col:17> 'int' 1
|   |-IfStmt 0x1a5633d0778 <line:438:5, line:439:17>
|   | |-BinaryOperator 0x1a5633d0708 <line:438:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x1a5633d06d8 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a5633d0690 <col:9> 'unsigned int' lvalue Var 0x1a5633cfbe8 'bitlen' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1a5633d06f0 <col:19> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1a5633d06b0 <col:19> 'int' 0
|   | `-ReturnStmt 0x1a5633d0768 <line:439:9, col:17>
|   |   `-UnaryOperator 0x1a5633d0750 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1a5633d0728 <col:17> 'int' 1
|   |-BinaryOperator 0x1a5633d0a38 <line:440:5, line:441:74> 'int' '='
|   | |-DeclRefExpr 0x1a5633d0790 <line:440:5> 'int' lvalue Var 0x1a5633cfde0 'outlen' 'int'
|   | `-ImplicitCastExpr 0x1a5633d0a20 <col:14, line:441:74> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1a5633d0a00 <line:440:14, line:441:74> 'unsigned int' '+'
|   |     |-ImplicitCastExpr 0x1a5633d09e8 <line:440:14> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x1a5633d07c8 <col:14> 'int' 16
|   |     `-CallExpr 0x1a5633d0980 <col:19, line:441:74> 'unsigned int'
|   |       |-ImplicitCastExpr 0x1a5633d0968 <line:440:19> 'unsigned int (*)(unsigned int, int, int)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1a5633d07f0 <col:19> 'unsigned int (unsigned int, int, int)' Function 0x1a5633bf3e0 'blob_length' 'unsigned int (unsigned int, int, int)'
|   |       |-ImplicitCastExpr 0x1a5633d09b8 <col:31> 'unsigned int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1a5633d0810 <col:31> 'unsigned int' lvalue Var 0x1a5633cfbe8 'bitlen' 'unsigned int'
|   |       |-ConditionalOperator 0x1a5633d0918 <line:441:31, col:66> 'int'
|   |       | |-BinaryOperator 0x1a5633d08a8 <col:31, line:64:34> 'int' '=='
|   |       | | |-ImplicitCastExpr 0x1a5633d0878 <line:441:31> 'unsigned int' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x1a5633d0830 <col:31> 'unsigned int' lvalue Var 0x1a5633cfd28 'keyalg' 'unsigned int'
|   |       | | `-ImplicitCastExpr 0x1a5633d0890 <line:64:34> 'unsigned int' <IntegralCast>
|   |       | |   `-IntegerLiteral 0x1a5633d0850 <col:34> 'int' 8704
|   |       | |-IntegerLiteral 0x1a5633d08c8 <line:441:62> 'int' 1
|   |       | `-IntegerLiteral 0x1a5633d08f0 <col:66> 'int' 0
|   |       `-ImplicitCastExpr 0x1a5633d09d0 <col:69> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1a5633d0948 <col:69> 'int' lvalue ParmVar 0x1a5633cf928 'ispub' 'int'
|   |-IfStmt 0x1a5633d0af0 <line:442:5, line:443:16>
|   | |-OpaqueValueExpr 0x1a5633d0ad8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1a5633d0ac8 <col:9, col:16>
|   |   `-ImplicitCastExpr 0x1a5633d0ab0 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1a5633d0a90 <col:16> 'int' lvalue Var 0x1a5633cfde0 'outlen' 'int'
|   |-IfStmt 0x1a5633c8eb8 <line:444:5, line:452:5> has_else
|   | |-ImplicitCastExpr 0x1a5633c8af8 <line:444:9, col:10> 'unsigned char *' <LValueToRValue>
|   | | `-UnaryOperator 0x1a5633c8ae0 <col:9, col:10> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x1a5633d0b28 <col:10> 'unsigned char **' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1a5633d0b08 <col:10> 'unsigned char **' lvalue ParmVar 0x1a5633cf828 'out' 'unsigned char **'
|   | |-BinaryOperator 0x1a5633c8bb0 <line:445:9, col:14> 'unsigned char *' '='
|   | | |-DeclRefExpr 0x1a5633c8b10 <col:9> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   | | `-ImplicitCastExpr 0x1a5633c8b98 <col:13, col:14> 'unsigned char *' <LValueToRValue>
|   | |   `-UnaryOperator 0x1a5633c8b80 <col:13, col:14> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x1a5633c8b68 <col:14> 'unsigned char **' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1a5633c8b48 <col:14> 'unsigned char **' lvalue ParmVar 0x1a5633cf828 'out' 'unsigned char **'
|   | `-CompoundStmt 0x1a5633c8e88 <line:446:10, line:452:5>
|   |   |-BinaryOperator 0x1a5633c8ca0 <line:447:9, col:34> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1a5633c8bd0 <col:9> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x1a5633c8c88 <col:13, col:34> 'unsigned char *' <IntegralToPointer>
|   |   |   `-CallExpr 0x1a5633c8c48 <col:13, col:34> 'int'
|   |   |     |-ImplicitCastExpr 0x1a5633c8c30 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1a5633c8bf0 <col:13> 'int ()' Function 0x1a5633ca480 'OPENSSL_malloc' 'int ()'
|   |   |     `-ImplicitCastExpr 0x1a5633c8c70 <col:28> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1a5633c8c10 <col:28> 'int' lvalue Var 0x1a5633cfde0 'outlen' 'int'
|   |   |-IfStmt 0x1a5633c8d48 <line:448:9, line:449:21>
|   |   | |-OpaqueValueExpr 0x1a5633c8d30 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x1a5633c8d20 <col:13, col:21>
|   |   |   `-UnaryOperator 0x1a5633c8d08 <col:20, col:21> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x1a5633c8ce0 <col:21> 'int' 1
|   |   |-BinaryOperator 0x1a5633c8de8 <line:450:9, col:16> 'unsigned char *' '='
|   |   | |-UnaryOperator 0x1a5633c8d98 <col:9, col:10> 'unsigned char *' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1a5633c8d80 <col:10> 'unsigned char **' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1a5633c8d60 <col:10> 'unsigned char **' lvalue ParmVar 0x1a5633cf828 'out' 'unsigned char **'
|   |   | `-ImplicitCastExpr 0x1a5633c8dd0 <col:16> 'unsigned char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1a5633c8db0 <col:16> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   |   `-BinaryOperator 0x1a5633c8e68 <line:451:9, col:17> 'int' '='
|   |     |-DeclRefExpr 0x1a5633c8e08 <col:9> 'int' lvalue Var 0x1a5633cfe60 'noinc' 'int'
|   |     `-IntegerLiteral 0x1a5633c8e40 <col:17> 'int' 1
|   |-IfStmt 0x1a5633c9078 <line:453:5, line:57:34> has_else
|   | |-ImplicitCastExpr 0x1a5633c8f00 <line:453:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1a5633c8ee0 <col:9> 'int' lvalue ParmVar 0x1a5633cf928 'ispub' 'int'
|   | |-BinaryOperator 0x1a5633c8fa8 <line:454:9, line:56:34> 'unsigned char' '='
|   | | |-UnaryOperator 0x1a5633c8f50 <line:454:9, col:11> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | | `-UnaryOperator 0x1a5633c8f38 <col:10, col:11> 'unsigned char *' postfix '++'
|   | | |   `-DeclRefExpr 0x1a5633c8f18 <col:10> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   | | `-ImplicitCastExpr 0x1a5633c8f90 <line:56:34> 'unsigned char' <IntegralCast>
|   | |   `-IntegerLiteral 0x1a5633c8f68 <col:34> 'int' 6
|   | `-BinaryOperator 0x1a5633c9058 <line:456:9, line:57:34> 'unsigned char' '='
|   |   |-UnaryOperator 0x1a5633c9000 <line:456:9, col:11> 'unsigned char' lvalue prefix '*' cannot overflow
|   |   | `-UnaryOperator 0x1a5633c8fe8 <col:10, col:11> 'unsigned char *' postfix '++'
|   |   |   `-DeclRefExpr 0x1a5633c8fc8 <col:10> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   |   `-ImplicitCastExpr 0x1a5633c9040 <line:57:34> 'unsigned char' <IntegralCast>
|   |     `-IntegerLiteral 0x1a5633c9018 <col:34> 'int' 7
|   |-BinaryOperator 0x1a5633c9130 <line:457:5, col:12> 'unsigned char' '='
|   | |-UnaryOperator 0x1a5633c90d8 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1a5633c90c0 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1a5633c90a0 <col:6> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c9118 <col:12> 'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1a5633c90f0 <col:12> 'int' 2
|   |-BinaryOperator 0x1a5633c91e0 <line:458:5, col:12> 'unsigned char' '='
|   | |-UnaryOperator 0x1a5633c9188 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1a5633c9170 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1a5633c9150 <col:6> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c91c8 <col:12> 'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1a5633c91a0 <col:12> 'int' 0
|   |-BinaryOperator 0x1a5633c9290 <line:459:5, col:12> 'unsigned char' '='
|   | |-UnaryOperator 0x1a5633c9238 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1a5633c9220 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1a5633c9200 <col:6> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c9278 <col:12> 'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1a5633c9250 <col:12> 'int' 0
|   |-CallExpr 0x1a5633c9370 <line:460:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1a5633c9358 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633c92b0 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1a5633c6f28 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1a5633c92f0 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1a5633c92d0 <col:20> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c93a0 <col:23> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633c9308 <col:23> 'unsigned int' lvalue Var 0x1a5633cfd28 'keyalg' 'unsigned int'
|   |-CallExpr 0x1a5633c9448 <line:461:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1a5633c9430 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633c93b8 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1a5633c6f28 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1a5633c93f8 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1a5633c93d8 <col:20> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c9478 <col:23> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633c9410 <col:23> 'unsigned int' lvalue Var 0x1a5633cfc68 'magic' 'unsigned int'
|   |-CallExpr 0x1a5633c9520 <line:462:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1a5633c9508 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633c9490 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1a5633c6f28 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1a5633c94d0 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1a5633c94b0 <col:20> 'unsigned char *' lvalue Var 0x1a5633cfb50 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633c9550 <col:23> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633c94e8 <col:23> 'unsigned int' lvalue Var 0x1a5633cfbe8 'bitlen' 'unsigned int'
|   |-IfStmt 0x1a5633c97f8 <line:467:5, line:468:17>
|   | |-UnaryOperator 0x1a5633c9728 <line:467:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633c9710 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633c96f0 <col:10> 'int' lvalue Var 0x1a5633cfe60 'noinc' 'int'
|   | `-CompoundAssignOperator 0x1a5633c97c8 <line:468:9, col:17> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |   |-UnaryOperator 0x1a5633c9778 <col:9, col:10> 'unsigned char *' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x1a5633c9760 <col:10> 'unsigned char **' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1a5633c9740 <col:10> 'unsigned char **' lvalue ParmVar 0x1a5633cf828 'out' 'unsigned char **'
|   |   `-ImplicitCastExpr 0x1a5633c97b0 <col:17> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1a5633c9790 <col:17> 'int' lvalue Var 0x1a5633cfde0 'outlen' 'int'
|   `-ReturnStmt 0x1a5633c9848 <line:469:5, col:12>
|     `-ImplicitCastExpr 0x1a5633c9830 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1a5633c9810 <col:12> 'int' lvalue Var 0x1a5633cfde0 'outlen' 'int'
|-FunctionDecl 0x1a5633d5bf0 <line:472:1, line:484:1> line:472:12 invalid do_i2b_bio 'int (int *, int *, int)' static
| |-ParmVarDecl 0x1a5633c9910 <col:23, col:28> col:28 invalid out 'int *'
| |-ParmVarDecl 0x1a5633c9990 <col:33, col:43> col:43 invalid pk 'int *'
| |-ParmVarDecl 0x1a5633c9a10 <col:47, col:51> col:51 used ispub 'int'
| `-CompoundStmt 0x1a5633d6390 <line:473:1, line:484:1>
|   |-DeclStmt 0x1a5633d5d40 <line:474:5, col:30>
|   | `-VarDecl 0x1a5633d5cd8 <col:5, col:20> col:20 used tmp 'unsigned char *'
|   |-DeclStmt 0x1a5633d5e70 <line:475:5, col:22>
|   | |-VarDecl 0x1a5633d5d70 <col:5, col:9> col:9 used outlen 'int'
|   | `-VarDecl 0x1a5633d5df0 <col:5, col:17> col:17 used wrlen 'int'
|   |-IfStmt 0x1a5633d6018 <line:477:5, line:478:17>
|   | |-BinaryOperator 0x1a5633d5fa8 <line:477:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1a5633d5f90 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a5633d5f48 <col:9> 'int' lvalue Var 0x1a5633d5d70 'outlen' 'int'
|   | | `-IntegerLiteral 0x1a5633d5f68 <col:18> 'int' 0
|   | `-ReturnStmt 0x1a5633d6008 <line:478:9, col:17>
|   |   `-UnaryOperator 0x1a5633d5ff0 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1a5633d5fc8 <col:17> 'int' 1
|   |-CallExpr 0x1a5633d6210 <line:480:5, col:21> 'int'
|   | |-ImplicitCastExpr 0x1a5633d61f8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633d61b8 <col:5> 'int ()' Function 0x1a5633c4aa0 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1a5633d6238 <col:18> 'unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633d61d8 <col:18> 'unsigned char *' lvalue Var 0x1a5633d5cd8 'tmp' 'unsigned char *'
|   |-IfStmt 0x1a5633d6328 <line:481:5, line:482:16>
|   | |-BinaryOperator 0x1a5633d62c0 <line:481:9, col:18> 'int' '=='
|   | | |-ImplicitCastExpr 0x1a5633d6290 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a5633d6250 <col:9> 'int' lvalue Var 0x1a5633d5df0 'wrlen' 'int'
|   | | `-ImplicitCastExpr 0x1a5633d62a8 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633d6270 <col:18> 'int' lvalue Var 0x1a5633d5d70 'outlen' 'int'
|   | `-ReturnStmt 0x1a5633d6318 <line:482:9, col:16>
|   |   `-ImplicitCastExpr 0x1a5633d6300 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1a5633d62e0 <col:16> 'int' lvalue Var 0x1a5633d5d70 'outlen' 'int'
|   `-ReturnStmt 0x1a5633d6380 <line:483:5, col:13>
|     `-UnaryOperator 0x1a5633d6368 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x1a5633d6340 <col:13> 'int' 1
|-FunctionDecl 0x1a5633d6590 <line:486:1, line:512:1> line:486:12 invalid check_bitlen_dsa 'int (int *, int, unsigned int *)' static
| |-ParmVarDecl 0x1a5633d63e8 <col:29, col:34> col:34 invalid dsa 'int *'
| |-ParmVarDecl 0x1a5633d6468 <col:39, col:43> col:43 used ispub 'int'
| |-ParmVarDecl 0x1a5633d64e8 <col:50, col:64> col:64 used pmagic 'unsigned int *'
| `-CompoundStmt 0x1a5633d4138 <line:487:1, line:512:1>
|   |-DeclStmt 0x1a5633d66e0 <line:488:5, col:15>
|   | `-VarDecl 0x1a5633d6678 <col:5, col:9> col:9 used bitlen 'int'
|   |-DeclStmt 0x1a5633d6778 <line:489:5, col:32>
|   | `-VarDecl 0x1a5633d6710 <col:5, col:19> col:19 invalid p 'const int *'
|   |-DeclStmt 0x1a5633d6810 <line:490:5, col:45>
|   | `-VarDecl 0x1a5633d67a8 <col:5, col:19> col:19 invalid pub_key 'const int *'
|   |-IfStmt 0x1a5633d3d18 <line:495:5, line:497:14>
|   | |-OpaqueValueExpr 0x1a5633d3d00 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633d3ce8 <col:9, col:14> 'badkey' 0x1a5633d3c98
|   |-IfStmt 0x1a5633d4050 <line:498:5, line:506:5> has_else
|   | |-ImplicitCastExpr 0x1a5633d3d68 <line:498:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1a5633d3d30 <col:9> 'int' lvalue ParmVar 0x1a5633d6468 'ispub' 'int'
|   | |-CompoundStmt 0x1a5633d3ed0 <col:16, line:502:5>
|   | | |-IfStmt 0x1a5633d3df0 <line:499:9, line:500:18>
|   | | | |-OpaqueValueExpr 0x1a5633d3dd8 <<invalid sloc>> '_Bool'
|   | | | `-GotoStmt 0x1a5633d3dc0 <col:13, col:18> 'badkey' 0x1a5633d3c98
|   | | `-BinaryOperator 0x1a5633d3eb0 <line:501:9, line:60:34> 'unsigned int' '='
|   | |   |-UnaryOperator 0x1a5633d3e58 <line:501:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |   | `-ImplicitCastExpr 0x1a5633d3e40 <col:10> 'unsigned int *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x1a5633d3e08 <col:10> 'unsigned int *' lvalue ParmVar 0x1a5633d64e8 'pmagic' 'unsigned int *'
|   | |   `-ImplicitCastExpr 0x1a5633d3e98 <line:60:34> 'unsigned int' <IntegralCast>
|   | |     `-IntegerLiteral 0x1a5633d3e70 <col:34> 'long' 827544388
|   | `-CompoundStmt 0x1a5633d4030 <line:502:12, line:506:5>
|   |   |-IfStmt 0x1a5633d3f68 <line:503:9, line:504:18>
|   |   | |-OpaqueValueExpr 0x1a5633d3f50 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633d3f38 <col:13, col:18> 'badkey' 0x1a5633d3c98
|   |   `-BinaryOperator 0x1a5633d4010 <line:505:9, line:61:34> 'unsigned int' '='
|   |     |-UnaryOperator 0x1a5633d3fb8 <line:505:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x1a5633d3fa0 <col:10> 'unsigned int *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1a5633d3f80 <col:10> 'unsigned int *' lvalue ParmVar 0x1a5633d64e8 'pmagic' 'unsigned int *'
|   |     `-ImplicitCastExpr 0x1a5633d3ff8 <line:61:34> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1a5633d3fd0 <col:34> 'long' 844321604
|   |-ReturnStmt 0x1a5633d40b0 <line:508:5, col:12>
|   | `-ImplicitCastExpr 0x1a5633d4098 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633d4078 <col:12> 'int' lvalue Var 0x1a5633d6678 'bitlen' 'int'
|   |-LabelStmt 0x1a5633d40e8 <line:509:2, col:8> 'badkey'
|   | `-NullStmt 0x1a5633d40e0 <col:8>
|   `-ReturnStmt 0x1a5633d4128 <line:511:5, col:12>
|     `-IntegerLiteral 0x1a5633d4100 <col:12> 'int' 0
|-FunctionDecl 0x1a5633d4348 <line:514:1, line:552:1> line:514:12 invalid check_bitlen_rsa 'int (int *, int, unsigned int *)' static
| |-ParmVarDecl 0x1a5633d41a0 <col:29, col:34> col:34 invalid rsa 'int *'
| |-ParmVarDecl 0x1a5633d4220 <col:39, col:43> col:43 used ispub 'int'
| |-ParmVarDecl 0x1a5633d42a0 <col:50, col:64> col:64 used pmagic 'unsigned int *'
| `-CompoundStmt 0x1a5633d2538 <line:515:1, line:552:1>
|   |-DeclStmt 0x1a5633d45b8 <line:516:5, col:30>
|   | |-VarDecl 0x1a5633d4430 <col:5, col:9> col:9 used nbyte 'int'
|   | |-VarDecl 0x1a5633d44b0 <col:5, col:16> col:16 used hnbyte 'int'
|   | `-VarDecl 0x1a5633d4530 <col:5, col:24> col:24 used bitlen 'int'
|   |-DeclStmt 0x1a5633d4650 <line:517:5, col:20>
|   | `-VarDecl 0x1a5633d45e8 <col:5, col:19> col:19 invalid e 'const int *'
|   |-IfStmt 0x1a5633d4840 <line:520:5, line:521:14>
|   | |-OpaqueValueExpr 0x1a5633d4828 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633d4810 <col:9, col:14> 'badkey' 0x1a5633d47c0
|   |-BinaryOperator 0x1a5633d1bf8 <line:524:5, col:31> 'int' '='
|   | |-DeclRefExpr 0x1a5633d4ae8 <col:5> 'int' lvalue Var 0x1a5633d44b0 'hnbyte' 'int'
|   | `-BinaryOperator 0x1a5633d1bd8 <col:14, col:31> 'int' '>>'
|   |   |-ParenExpr 0x1a5633d1b90 <col:14, col:26> 'int'
|   |   | `-BinaryOperator 0x1a5633d1b70 <col:15, col:24> 'int' '+'
|   |   |   |-ImplicitCastExpr 0x1a5633d4b68 <col:15> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1a5633d4b20 <col:15> 'int' lvalue Var 0x1a5633d4530 'bitlen' 'int'
|   |   |   `-IntegerLiteral 0x1a5633d4b40 <col:24> 'int' 15
|   |   `-IntegerLiteral 0x1a5633d1bb0 <col:31> 'int' 4
|   |-IfStmt 0x1a5633d2450 <line:525:5, line:547:5> has_else
|   | |-ImplicitCastExpr 0x1a5633d1c50 <line:525:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1a5633d1c18 <col:9> 'int' lvalue ParmVar 0x1a5633d4220 'ispub' 'int'
|   | |-CompoundStmt 0x1a5633d1d78 <col:16, line:528:5>
|   | | |-BinaryOperator 0x1a5633d1d10 <line:526:9, line:58:34> 'unsigned int' '='
|   | | | |-UnaryOperator 0x1a5633d1cb8 <line:526:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | | | `-ImplicitCastExpr 0x1a5633d1ca0 <col:10> 'unsigned int *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1a5633d1c68 <col:10> 'unsigned int *' lvalue ParmVar 0x1a5633d42a0 'pmagic' 'unsigned int *'
|   | | | `-ImplicitCastExpr 0x1a5633d1cf8 <line:58:34> 'unsigned int' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1a5633d1cd0 <col:34> 'long' 826364754
|   | | `-ReturnStmt 0x1a5633d1d68 <line:527:9, col:16>
|   | |   `-ImplicitCastExpr 0x1a5633d1d50 <col:16> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1a5633d1d30 <col:16> 'int' lvalue Var 0x1a5633d4530 'bitlen' 'int'
|   | `-CompoundStmt 0x1a5633d2420 <line:528:12, line:547:5>
|   |   |-DeclStmt 0x1a5633d1e18 <line:529:9, col:53>
|   |   | `-VarDecl 0x1a5633d1db0 <col:9, col:23> col:23 invalid d 'const int *'
|   |   |-BinaryOperator 0x1a5633d1ec0 <line:531:9, line:59:34> 'unsigned int' '='
|   |   | |-UnaryOperator 0x1a5633d1e68 <line:531:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1a5633d1e50 <col:10> 'unsigned int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1a5633d1e30 <col:10> 'unsigned int *' lvalue ParmVar 0x1a5633d42a0 'pmagic' 'unsigned int *'
|   |   | `-ImplicitCastExpr 0x1a5633d1ea8 <line:59:34> 'unsigned int' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1a5633d1e80 <col:34> 'long' 843141970
|   |   |-IfStmt 0x1a5633d2060 <line:537:9, line:538:18>
|   |   | |-OpaqueValueExpr 0x1a5633d2048 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633d2030 <col:13, col:18> 'badkey' 0x1a5633d47c0
|   |   `-IfStmt 0x1a5633d2408 <line:541:9, line:546:18>
|   |     |-OpaqueValueExpr 0x1a5633d23f0 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1a5633d23d8 <col:13, col:18> 'badkey' 0x1a5633d47c0
|   |-ReturnStmt 0x1a5633d24b0 <line:548:5, col:12>
|   | `-ImplicitCastExpr 0x1a5633d2498 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633d2478 <col:12> 'int' lvalue Var 0x1a5633d4530 'bitlen' 'int'
|   |-LabelStmt 0x1a5633d24e8 <line:549:2, col:8> 'badkey'
|   | `-NullStmt 0x1a5633d24e0 <col:8>
|   `-ReturnStmt 0x1a5633d2528 <line:551:5, col:12>
|     `-IntegerLiteral 0x1a5633d2500 <col:12> 'int' 0
|-FunctionDecl 0x1a5633d2748 <line:554:1, line:574:1> line:554:13 invalid write_rsa 'void (unsigned char **, int *, int)' static
| |-ParmVarDecl 0x1a5633d25a8 <col:23, col:39> col:39 used out 'unsigned char **'
| |-ParmVarDecl 0x1a5633d2628 <col:44, col:49> col:49 invalid rsa 'int *'
| |-ParmVarDecl 0x1a5633d26a8 <col:54, col:58> col:58 used ispub 'int'
| `-CompoundStmt 0x1a5633d4e18 <line:555:1, line:574:1>
|   |-DeclStmt 0x1a5633d2930 <line:556:5, col:22>
|   | |-VarDecl 0x1a5633d2830 <col:5, col:9> col:9 used nbyte 'int'
|   | `-VarDecl 0x1a5633d28b0 <col:5, col:16> col:16 used hnbyte 'int'
|   |-DeclStmt 0x1a5633d29c8 <line:557:5, col:57>
|   | `-VarDecl 0x1a5633d2960 <col:5, col:19> col:19 invalid n 'const int *'
|   `-IfStmt 0x1a5633d4c40 <line:564:5, line:565:9>
|     |-ImplicitCastExpr 0x1a5633d4c18 <line:564:9> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x1a5633d4be0 <col:9> 'int' lvalue ParmVar 0x1a5633d26a8 'ispub' 'int'
|     `-ReturnStmt 0x1a5633d4c30 <line:565:9>
|-FunctionDecl 0x1a5633d5000 <line:576:1, line:596:1> line:576:13 invalid write_dsa 'void (unsigned char **, int *, int)' static
| |-ParmVarDecl 0x1a5633d4e60 <col:23, col:39> col:39 used out 'unsigned char **'
| |-ParmVarDecl 0x1a5633d4ee0 <col:44, col:49> col:49 invalid dsa 'int *'
| |-ParmVarDecl 0x1a5633d4f60 <col:54, col:58> col:58 used ispub 'int'
| `-CompoundStmt 0x1a5633d5988 <line:577:1, line:596:1>
|   |-DeclStmt 0x1a5633d5150 <line:578:5, col:14>
|   | `-VarDecl 0x1a5633d50e8 <col:5, col:9> col:9 used nbyte 'int'
|   |-DeclStmt 0x1a5633d51e8 <line:579:5, col:32>
|   | `-VarDecl 0x1a5633d5180 <col:5, col:19> col:19 invalid p 'const int *'
|   |-DeclStmt 0x1a5633d5280 <line:580:5, col:45>
|   | `-VarDecl 0x1a5633d5218 <col:5, col:19> col:19 invalid pub_key 'const int *'
|   |-CallExpr 0x1a5633d5850 <line:593:5, col:26> 'void *'
|   | |-ImplicitCastExpr 0x1a5633d5838 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633d5720 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1a5633d5530 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1a5633d58a0 <col:12, col:13> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1a5633d5888 <col:12, col:13> 'unsigned char *' <LValueToRValue>
|   | |   `-UnaryOperator 0x1a5633d5790 <col:12, col:13> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x1a5633d5778 <col:13> 'unsigned char **' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1a5633d5758 <col:13> 'unsigned char **' lvalue ParmVar 0x1a5633d4e60 'out' 'unsigned char **'
|   | |-IntegerLiteral 0x1a5633d57a8 <col:18> 'int' 255
|   | `-ImplicitCastExpr 0x1a5633d58b8 <col:24> 'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1a5633d57d0 <col:24> 'int' 24
|   |-CompoundAssignOperator 0x1a5633d5948 <line:594:5, col:13> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |-UnaryOperator 0x1a5633d5908 <col:5, col:6> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633d58f0 <col:6> 'unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633d58d0 <col:6> 'unsigned char **' lvalue ParmVar 0x1a5633d4e60 'out' 'unsigned char **'
|   | `-IntegerLiteral 0x1a5633d5920 <col:13> 'int' 24
|   `-ReturnStmt 0x1a5633d5978 <line:595:5>
|-FunctionDecl 0x1a5633d5530 <line:593:5> col:5 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1a5633d55d0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1a5633d5638 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1a5633d56a0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1a5633d6bc0 <line:598:1, line:601:1> line:598:5 invalid i2b_PrivateKey_bio 'int (int *, int *)'
| |-ParmVarDecl 0x1a5633d59e0 <col:24, col:29> col:29 invalid out 'int *'
| |-ParmVarDecl 0x1a5633d5a60 <col:34, col:44> col:44 invalid pk 'int *'
| `-CompoundStmt 0x1a5633d6cb0 <line:599:1, line:601:1>
|-FunctionDecl 0x1a5633d6df8 <line:603:1, line:606:1> line:603:5 invalid i2b_PublicKey_bio 'int (int *, int *)'
| |-ParmVarDecl 0x1a5633d6cd8 <col:23, col:28> col:28 invalid out 'int *'
| |-ParmVarDecl 0x1a5633d6d58 <col:33, col:43> col:43 invalid pk 'int *'
| `-CompoundStmt 0x1a5633d6ee8 <line:604:1, line:606:1>
|-FunctionDecl 0x1a5633d72a0 <line:610:1, line:651:1> line:610:12 used do_PVK_header 'int (const unsigned char **, unsigned int, int, unsigned int *, unsigned int *)' static
| |-ParmVarDecl 0x1a5633d6f18 <col:26, col:48> col:48 used in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633d6f98 <col:52, col:65> col:65 used length 'unsigned int'
| |-ParmVarDecl 0x1a5633d7018 <line:611:26, col:30> col:30 used skip_magic 'int'
| |-ParmVarDecl 0x1a5633d7098 <line:612:26, col:40> col:40 used psaltlen 'unsigned int *'
| |-ParmVarDecl 0x1a5633d7118 <col:50, col:64> col:64 used pkeylen 'unsigned int *'
| `-CompoundStmt 0x1a5633d12f0 <line:613:1, line:651:1>
|   |-DeclStmt 0x1a5633d7468 <line:614:5, col:33>
|   | `-VarDecl 0x1a5633d7398 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1a5633d7450 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1a5633d7438 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1a5633d7420 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1a5633d7400 <col:31> 'const unsigned char **' lvalue ParmVar 0x1a5633d6f18 'in' 'const unsigned char **'
|   |-DeclStmt 0x1a5633d7598 <line:615:5, col:41>
|   | |-VarDecl 0x1a5633d7498 <col:5, col:18> col:18 used pvk_magic 'unsigned int'
|   | `-VarDecl 0x1a5633d7518 <col:5, col:29> col:29 used is_encrypted 'unsigned int'
|   |-IfStmt 0x1a5633d7a90 <line:616:5, line:631:5> has_else
|   | |-ImplicitCastExpr 0x1a5633d75d0 <line:616:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1a5633d75b0 <col:9> 'int' lvalue ParmVar 0x1a5633d7018 'skip_magic' 'int'
|   | |-CompoundStmt 0x1a5633d7708 <col:21, line:621:5>
|   | | `-IfStmt 0x1a5633d76f0 <line:617:9, line:620:9>
|   | |   |-BinaryOperator 0x1a5633d7660 <line:617:13, col:22> 'int' '<'
|   | |   | |-ImplicitCastExpr 0x1a5633d7630 <col:13> 'unsigned int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x1a5633d75e8 <col:13> 'unsigned int' lvalue ParmVar 0x1a5633d6f98 'length' 'unsigned int'
|   | |   | `-ImplicitCastExpr 0x1a5633d7648 <col:22> 'unsigned int' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x1a5633d7608 <col:22> 'int' 20
|   | |   `-CompoundStmt 0x1a5633d76d8 <col:26, line:620:9>
|   | |     `-ReturnStmt 0x1a5633d76c8 <line:619:13, col:20>
|   | |       `-IntegerLiteral 0x1a5633d76a0 <col:20> 'int' 0
|   | `-CompoundStmt 0x1a5633d7a68 <line:621:12, line:631:5>
|   |   |-IfStmt 0x1a5633d7828 <line:622:9, line:625:9>
|   |   | |-BinaryOperator 0x1a5633d7798 <line:622:13, col:22> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1a5633d7768 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1a5633d7720 <col:13> 'unsigned int' lvalue ParmVar 0x1a5633d6f98 'length' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x1a5633d7780 <col:22> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1a5633d7740 <col:22> 'int' 24
|   |   | `-CompoundStmt 0x1a5633d7810 <col:26, line:625:9>
|   |   |   `-ReturnStmt 0x1a5633d7800 <line:624:13, col:20>
|   |   |     `-IntegerLiteral 0x1a5633d77d8 <col:20> 'int' 0
|   |   |-BinaryOperator 0x1a5633d7928 <line:626:9, col:36> 'unsigned int' '='
|   |   | |-DeclRefExpr 0x1a5633d7840 <col:9> 'unsigned int' lvalue Var 0x1a5633d7498 'pvk_magic' 'unsigned int'
|   |   | `-CallExpr 0x1a5633d7900 <col:21, col:36> 'unsigned int'
|   |   |   |-ImplicitCastExpr 0x1a5633d78e8 <col:21> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1a5633d7878 <col:21> 'unsigned int (const unsigned char **)' Function 0x1a5633bd060 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   |   `-UnaryOperator 0x1a5633d78d0 <col:34, col:35> 'const unsigned char **' prefix '&' cannot overflow
|   |   |     `-DeclRefExpr 0x1a5633d7898 <col:35> 'const unsigned char *' lvalue Var 0x1a5633d7398 'p' 'const unsigned char *'
|   |   `-IfStmt 0x1a5633d7a50 <line:627:9, line:630:9>
|   |     |-BinaryOperator 0x1a5633d79c0 <line:627:13, line:73:34> 'int' '!='
|   |     | |-ImplicitCastExpr 0x1a5633d79a8 <line:627:13> 'unsigned long' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x1a5633d7990 <col:13> 'unsigned int' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x1a5633d7948 <col:13> 'unsigned int' lvalue Var 0x1a5633d7498 'pvk_magic' 'unsigned int'
|   |     | `-IntegerLiteral 0x1a5633d7968 <line:73:34> 'unsigned long' 2964713758
|   |     `-CompoundStmt 0x1a5633d7a38 <line:627:39, line:630:9>
|   |       `-ReturnStmt 0x1a5633d7a28 <line:629:13, col:20>
|   |         `-IntegerLiteral 0x1a5633d7a00 <col:20> 'int' 0
|   |-CompoundAssignOperator 0x1a5633d7b00 <line:633:5, col:10> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   | |-DeclRefExpr 0x1a5633d7ab8 <col:5> 'const unsigned char *' lvalue Var 0x1a5633d7398 'p' 'const unsigned char *'
|   | `-IntegerLiteral 0x1a5633d7ad8 <col:10> 'int' 4
|   |-CallExpr 0x1a5633d0b60 <line:636:9, col:24> 'unsigned int'
|   | |-ImplicitCastExpr 0x1a5633d7b88 <col:9> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633d7b30 <col:9> 'unsigned int (const unsigned char **)' Function 0x1a5633bd060 'read_ledword' 'unsigned int (const unsigned char **)'
|   | `-UnaryOperator 0x1a5633d7b70 <col:22, col:23> 'const unsigned char **' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x1a5633d7b50 <col:23> 'const unsigned char *' lvalue Var 0x1a5633d7398 'p' 'const unsigned char *'
|   |-BinaryOperator 0x1a5633d0c58 <line:637:5, col:35> 'unsigned int' '='
|   | |-DeclRefExpr 0x1a5633d0b88 <col:5> 'unsigned int' lvalue Var 0x1a5633d7518 'is_encrypted' 'unsigned int'
|   | `-CallExpr 0x1a5633d0c30 <col:20, col:35> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1a5633d0c18 <col:20> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1a5633d0bc0 <col:20> 'unsigned int (const unsigned char **)' Function 0x1a5633bd060 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   `-UnaryOperator 0x1a5633d0c00 <col:33, col:34> 'const unsigned char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1a5633d0be0 <col:34> 'const unsigned char *' lvalue Var 0x1a5633d7398 'p' 'const unsigned char *'
|   |-BinaryOperator 0x1a5633d0d60 <line:638:5, col:32> 'unsigned int' '='
|   | |-UnaryOperator 0x1a5633d0cb0 <col:5, col:6> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633d0c98 <col:6> 'unsigned int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633d0c78 <col:6> 'unsigned int *' lvalue ParmVar 0x1a5633d7098 'psaltlen' 'unsigned int *'
|   | `-CallExpr 0x1a5633d0d38 <col:17, col:32> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1a5633d0d20 <col:17> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1a5633d0cc8 <col:17> 'unsigned int (const unsigned char **)' Function 0x1a5633bd060 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   `-UnaryOperator 0x1a5633d0d08 <col:30, col:31> 'const unsigned char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1a5633d0ce8 <col:31> 'const unsigned char *' lvalue Var 0x1a5633d7398 'p' 'const unsigned char *'
|   |-BinaryOperator 0x1a5633d0e68 <line:639:5, col:31> 'unsigned int' '='
|   | |-UnaryOperator 0x1a5633d0db8 <col:5, col:6> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633d0da0 <col:6> 'unsigned int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633d0d80 <col:6> 'unsigned int *' lvalue ParmVar 0x1a5633d7118 'pkeylen' 'unsigned int *'
|   | `-CallExpr 0x1a5633d0e40 <col:16, col:31> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1a5633d0e28 <col:16> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1a5633d0dd0 <col:16> 'unsigned int (const unsigned char **)' Function 0x1a5633bd060 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   `-UnaryOperator 0x1a5633d0e10 <col:29, col:30> 'const unsigned char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1a5633d0df0 <col:30> 'const unsigned char *' lvalue Var 0x1a5633d7398 'p' 'const unsigned char *'
|   |-IfStmt 0x1a5633d1098 <line:641:5, line:642:16>
|   | |-BinaryOperator 0x1a5633d1040 <line:641:9, line:79:34> 'int' '||'
|   | | |-BinaryOperator 0x1a5633d0f30 <line:641:9, line:77:34> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1a5633d0f00 <line:641:9, col:10> 'unsigned int' <LValueToRValue>
|   | | | | `-UnaryOperator 0x1a5633d0ec0 <col:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | | |   `-ImplicitCastExpr 0x1a5633d0ea8 <col:10> 'unsigned int *' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x1a5633d0e88 <col:10> 'unsigned int *' lvalue ParmVar 0x1a5633d7118 'pkeylen' 'unsigned int *'
|   | | | `-ImplicitCastExpr 0x1a5633d0f18 <line:77:34> 'unsigned int' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1a5633d0ed8 <col:34> 'int' 102400
|   | | `-BinaryOperator 0x1a5633d1020 <line:641:38, line:79:34> 'int' '>'
|   | |   |-ImplicitCastExpr 0x1a5633d0ff0 <line:641:38, col:39> 'unsigned int' <LValueToRValue>
|   | |   | `-UnaryOperator 0x1a5633d0fb0 <col:38, col:39> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |   |   `-ImplicitCastExpr 0x1a5633d0f98 <col:39> 'unsigned int *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1a5633d0f78 <col:39> 'unsigned int *' lvalue ParmVar 0x1a5633d7098 'psaltlen' 'unsigned int *'
|   | |   `-ImplicitCastExpr 0x1a5633d1008 <line:79:34> 'unsigned int' <IntegralCast>
|   | |     `-IntegerLiteral 0x1a5633d0fc8 <col:34> 'int' 10240
|   | `-ReturnStmt 0x1a5633d1088 <line:642:9, col:16>
|   |   `-IntegerLiteral 0x1a5633d1060 <col:16> 'int' 0
|   |-IfStmt 0x1a5633d11f8 <line:644:5, line:647:5>
|   | |-BinaryOperator 0x1a5633d1168 <line:644:9, col:27> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1a5633d1150 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a5633d10b0 <col:9> 'unsigned int' lvalue Var 0x1a5633d7518 'is_encrypted' 'unsigned int'
|   | | `-UnaryOperator 0x1a5633d1138 <col:25, col:27> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x1a5633d1120 <col:26, col:27> 'unsigned int' <LValueToRValue>
|   | |     `-UnaryOperator 0x1a5633d1108 <col:26, col:27> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1a5633d10f0 <col:27> 'unsigned int *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1a5633d10d0 <col:27> 'unsigned int *' lvalue ParmVar 0x1a5633d7098 'psaltlen' 'unsigned int *'
|   | `-CompoundStmt 0x1a5633d11e0 <col:37, line:647:5>
|   |   `-ReturnStmt 0x1a5633d11d0 <line:646:9, col:16>
|   |     `-IntegerLiteral 0x1a5633d11a8 <col:16> 'int' 0
|   |-BinaryOperator 0x1a5633d1298 <line:649:5, col:11> 'const unsigned char *' '='
|   | |-UnaryOperator 0x1a5633d1248 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1a5633d1230 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a5633d1210 <col:6> 'const unsigned char **' lvalue ParmVar 0x1a5633d6f18 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1a5633d1280 <col:11> 'const unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633d1260 <col:11> 'const unsigned char *' lvalue Var 0x1a5633d7398 'p' 'const unsigned char *'
|   `-ReturnStmt 0x1a5633d12e0 <line:650:5, col:12>
|     `-IntegerLiteral 0x1a5633d12b8 <col:12> 'int' 1
|-FunctionDecl 0x1a5633d1700 <line:653:1, line:668:1> line:653:12 used derive_pvk_key 'int (unsigned char *, const unsigned char *, unsigned int, const unsigned char *, int)' static
| |-ParmVarDecl 0x1a5633d1378 <col:27, col:42> col:42 used key 'unsigned char *'
| |-ParmVarDecl 0x1a5633d13f8 <line:654:27, col:48> col:48 used salt 'const unsigned char *'
| |-ParmVarDecl 0x1a5633d1478 <col:54, col:67> col:67 used saltlen 'unsigned int'
| |-ParmVarDecl 0x1a5633d14f8 <line:655:27, col:48> col:48 used pass 'const unsigned char *'
| |-ParmVarDecl 0x1a5633d1578 <col:54, col:58> col:58 used passlen 'int'
| `-CompoundStmt 0x1a5633d91e8 <line:656:1, line:668:1>
|   |-DeclStmt 0x1a5633d19d0 <line:658:5, col:15>
|   | `-VarDecl 0x1a5633d1940 <col:5, col:14> col:9 used rv 'int' cinit
|   |   `-IntegerLiteral 0x1a5633d19a8 <col:14> 'int' 1
|   |-IfStmt 0x1a5633d9078 <line:659:5, line:664:14>
|   | |-OpaqueValueExpr 0x1a5633d9060 <<invalid sloc>> '_Bool'
|   | `-BinaryOperator 0x1a5633d9040 <col:9, col:14> 'int' '='
|   |   |-DeclRefExpr 0x1a5633d8fe0 <col:9> 'int' lvalue Var 0x1a5633d1940 'rv' 'int'
|   |   `-IntegerLiteral 0x1a5633d9018 <col:14> 'int' 0
|   `-ReturnStmt 0x1a5633d91d8 <line:667:5, col:12>
|     `-ImplicitCastExpr 0x1a5633d91c0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1a5633d91a0 <col:12> 'int' lvalue Var 0x1a5633d1940 'rv' 'int'
|-FunctionDecl 0x1a5633d9540 <line:670:1, line:743:1> line:670:18 invalid do_PVK_body 'int *(const unsigned char **, unsigned int, unsigned int, int *, void *)' static
| |-ParmVarDecl 0x1a5633d9230 <col:30, col:52> col:52 used in 'const unsigned char **'
| |-ParmVarDecl 0x1a5633d92b0 <line:671:30, col:43> col:43 used saltlen 'unsigned int'
| |-ParmVarDecl 0x1a5633d9330 <col:52, col:65> col:65 used keylen 'unsigned int'
| |-ParmVarDecl 0x1a5633d93b0 <line:672:30, col:47> col:47 invalid cb 'int *'
| |-ParmVarDecl 0x1a5633d9430 <col:51, col:57> col:57 used u 'void *'
| `-CompoundStmt 0x1a5633e0480 <line:673:1, line:743:1>
|   |-DeclStmt 0x1a5633d9720 <line:675:5, col:33>
|   | `-VarDecl 0x1a5633d9638 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1a5633d9708 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1a5633d96f0 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1a5633d96d8 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1a5633d96a0 <col:31> 'const unsigned char **' lvalue ParmVar 0x1a5633d9230 'in' 'const unsigned char **'
|   |-DeclStmt 0x1a5633d97b8 <line:676:5, col:23>
|   | `-VarDecl 0x1a5633d9750 <col:5, col:18> col:18 used magic 'unsigned int'
|   |-DeclStmt 0x1a5633d98e8 <line:677:5, col:37>
|   | |-VarDecl 0x1a5633d97e8 <col:5, col:20> col:20 used enctmp 'unsigned char *'
|   | `-VarDecl 0x1a5633d9868 <col:5, col:36> col:36 used q 'unsigned char *'
|   |-DeclStmt 0x1a5633d9a08 <line:678:5, col:29>
|   | `-VarDecl 0x1a5633d99a0 <col:5, col:28> col:19 used keybuf 'unsigned char [20]'
|   |-IfStmt 0x1a5633dffe8 <line:681:5, line:733:5>
|   | |-ImplicitCastExpr 0x1a5633d9ba0 <line:681:9> 'unsigned int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1a5633d9b68 <col:9> 'unsigned int' lvalue ParmVar 0x1a5633d92b0 'saltlen' 'unsigned int'
|   | `-CompoundStmt 0x1a5633dff48 <col:18, line:733:5>
|   |   |-DeclStmt 0x1a5633d9c58 <line:682:9, col:32>
|   |   | `-VarDecl 0x1a5633d9bf0 <col:9, col:14> col:14 invalid psbuf 'char'
|   |   |-DeclStmt 0x1a5633d9d88 <line:683:9, col:29>
|   |   | |-VarDecl 0x1a5633d9c88 <col:9, col:13> col:13 used enctmplen 'int'
|   |   | `-VarDecl 0x1a5633d9d08 <col:9, col:24> col:24 used inlen 'int'
|   |   |-IfStmt 0x1a5633da0d0 <line:688:9, line:691:9>
|   |   | |-BinaryOperator 0x1a5633da010 <line:688:13, col:21> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1a5633d9ff8 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1a5633d9fb0 <col:13> 'int' lvalue Var 0x1a5633d9d08 'inlen' 'int'
|   |   | | `-IntegerLiteral 0x1a5633d9fd0 <col:21> 'int' 0
|   |   | `-CompoundStmt 0x1a5633da0b8 <col:24, line:691:9>
|   |   |   `-GotoStmt 0x1a5633da0a0 <line:690:13, col:18> 'err' 0x1a5633da050
|   |   |-BinaryOperator 0x1a5633da248 <line:692:9, col:43> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1a5633da0e8 <col:9> 'unsigned char *' lvalue Var 0x1a5633d97e8 'enctmp' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x1a5633da230 <col:18, col:43> 'unsigned char *' <IntegralToPointer>
|   |   |   `-CallExpr 0x1a5633da208 <col:18, col:43> 'int'
|   |   |     |-ImplicitCastExpr 0x1a5633da1f0 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1a5633da120 <col:18> 'int ()' Function 0x1a5633ca480 'OPENSSL_malloc' 'int ()'
|   |   |     `-BinaryOperator 0x1a5633da1d0 <col:33, col:42> 'unsigned int' '+'
|   |   |       |-ImplicitCastExpr 0x1a5633da1a0 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x1a5633da140 <col:33> 'unsigned int' lvalue ParmVar 0x1a5633d9330 'keylen' 'unsigned int'
|   |   |       `-ImplicitCastExpr 0x1a5633da1b8 <col:42> 'unsigned int' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1a5633da178 <col:42> 'int' 8
|   |   |-IfStmt 0x1a5633da2f0 <line:693:9, line:696:9>
|   |   | |-OpaqueValueExpr 0x1a5633da2d8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x1a5633da2c0 <line:693:29, line:696:9>
|   |   |   `-GotoStmt 0x1a5633da2a8 <line:695:13, col:18> 'err' 0x1a5633da050
|   |   |-IfStmt 0x1a5633da408 <line:697:9, line:699:18>
|   |   | |-OpaqueValueExpr 0x1a5633da3f0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633da3d8 <col:13, col:18> 'err' 0x1a5633da050
|   |   |-CompoundAssignOperator 0x1a5633da478 <line:700:9, col:14> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x1a5633da420 <col:9> 'const unsigned char *' lvalue Var 0x1a5633d9638 'p' 'const unsigned char *'
|   |   | `-ImplicitCastExpr 0x1a5633da460 <col:14> 'unsigned int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1a5633da440 <col:14> 'unsigned int' lvalue ParmVar 0x1a5633d92b0 'saltlen' 'unsigned int'
|   |   |-CallExpr 0x1a5633da820 <line:702:9, col:28> 'void *'
|   |   | |-ImplicitCastExpr 0x1a5633da808 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1a5633da710 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x1a5633da520 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1a5633da870 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1a5633da858 <col:16> 'unsigned char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1a5633da748 <col:16> 'unsigned char *' lvalue Var 0x1a5633d97e8 'enctmp' 'unsigned char *'
|   |   | |-ImplicitCastExpr 0x1a5633da8a0 <col:24> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1a5633da888 <col:24> 'const unsigned char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1a5633da768 <col:24> 'const unsigned char *' lvalue Var 0x1a5633d9638 'p' 'const unsigned char *'
|   |   | `-ImplicitCastExpr 0x1a5633da8b8 <col:27> 'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1a5633da788 <col:27> 'int' 8
|   |   |-CompoundAssignOperator 0x1a5633da918 <line:703:9, col:14> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x1a5633da8d0 <col:9> 'const unsigned char *' lvalue Var 0x1a5633d9638 'p' 'const unsigned char *'
|   |   | `-IntegerLiteral 0x1a5633da8f0 <col:14> 'int' 8
|   |   |-IfStmt 0x1a5633daa30 <line:704:9, line:707:9>
|   |   | |-BinaryOperator 0x1a5633da9c0 <line:704:13, col:22> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1a5633da990 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1a5633da948 <col:13> 'unsigned int' lvalue ParmVar 0x1a5633d9330 'keylen' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x1a5633da9a8 <col:22> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1a5633da968 <col:22> 'int' 8
|   |   | `-CompoundStmt 0x1a5633daa18 <col:25, line:707:9>
|   |   |   `-GotoStmt 0x1a5633daa00 <line:706:13, col:18> 'err' 0x1a5633da050
|   |   |-BinaryOperator 0x1a5633dab18 <line:708:9, col:26> 'int' '='
|   |   | |-DeclRefExpr 0x1a5633daa48 <col:9> 'int' lvalue Var 0x1a5633d9d08 'inlen' 'int'
|   |   | `-ImplicitCastExpr 0x1a5633dab00 <col:17, col:26> 'int' <IntegralCast>
|   |   |   `-BinaryOperator 0x1a5633daae0 <col:17, col:26> 'unsigned int' '-'
|   |   |     |-ImplicitCastExpr 0x1a5633daab0 <col:17> 'unsigned int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1a5633daa68 <col:17> 'unsigned int' lvalue ParmVar 0x1a5633d9330 'keylen' 'unsigned int'
|   |   |     `-ImplicitCastExpr 0x1a5633daac8 <col:26> 'unsigned int' <IntegralCast>
|   |   |       `-IntegerLiteral 0x1a5633daa88 <col:26> 'int' 8
|   |   |-BinaryOperator 0x1a5633d2b80 <line:709:9, col:22> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1a5633dab38 <col:9> 'unsigned char *' lvalue Var 0x1a5633d9868 'q' 'unsigned char *'
|   |   | `-BinaryOperator 0x1a5633dabd0 <col:13, col:22> 'unsigned char *' '+'
|   |   |   |-ImplicitCastExpr 0x1a5633dabb8 <col:13> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1a5633dab70 <col:13> 'unsigned char *' lvalue Var 0x1a5633d97e8 'enctmp' 'unsigned char *'
|   |   |   `-IntegerLiteral 0x1a5633dab90 <col:22> 'int' 8
|   |   |-IfStmt 0x1a5633d2e48 <line:710:9, line:711:18>
|   |   | |-OpaqueValueExpr 0x1a5633d2e30 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633d2e18 <col:13, col:18> 'err' 0x1a5633da050
|   |   |-IfStmt 0x1a5633d3050 <line:712:9, line:713:18>
|   |   | |-OpaqueValueExpr 0x1a5633d3038 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633d3020 <col:13, col:18> 'err' 0x1a5633da050
|   |   |-IfStmt 0x1a5633d3270 <line:714:9, line:715:18>
|   |   | |-OpaqueValueExpr 0x1a5633d3258 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633d3240 <col:13, col:18> 'err' 0x1a5633da050
|   |   |-BinaryOperator 0x1a5633d33a0 <line:716:9, col:56> 'unsigned int' '='
|   |   | |-DeclRefExpr 0x1a5633d3288 <col:9> 'unsigned int' lvalue Var 0x1a5633d9750 'magic' 'unsigned int'
|   |   | `-CallExpr 0x1a5633d3378 <col:17, col:56> 'unsigned int'
|   |   |   |-ImplicitCastExpr 0x1a5633d3360 <col:17> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1a5633d32c0 <col:17> 'unsigned int (const unsigned char **)' Function 0x1a5633bd060 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   |   `-CStyleCastExpr 0x1a5633d3338 <col:30, col:55> 'const unsigned char **' <NoOp>
|   |   |     `-UnaryOperator 0x1a5633d3300 <col:54, col:55> 'unsigned char **' prefix '&' cannot overflow
|   |   |       `-DeclRefExpr 0x1a5633d32e0 <col:55> 'unsigned char *' lvalue Var 0x1a5633d9868 'q' 'unsigned char *'
|   |   |-IfStmt 0x1a5633dfea0 <line:717:9, line:731:9>
|   |   | |-BinaryOperator 0x1a5633d3520 <line:717:13, line:61:34> 'int' '&&'
|   |   | | |-BinaryOperator 0x1a5633d3450 <line:717:13, line:59:34> 'int' '!='
|   |   | | | |-ImplicitCastExpr 0x1a5633d3438 <line:717:13> 'unsigned long' <IntegralCast>
|   |   | | | | `-ImplicitCastExpr 0x1a5633d3408 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x1a5633d33c0 <col:13> 'unsigned int' lvalue Var 0x1a5633d9750 'magic' 'unsigned int'
|   |   | | | `-ImplicitCastExpr 0x1a5633d3420 <line:59:34> 'unsigned long' <IntegralCast>
|   |   | | |   `-IntegerLiteral 0x1a5633d33e0 <col:34> 'long' 843141970
|   |   | | `-BinaryOperator 0x1a5633d3500 <line:717:38, line:61:34> 'int' '!='
|   |   | |   |-ImplicitCastExpr 0x1a5633d34e8 <line:717:38> 'unsigned long' <IntegralCast>
|   |   | |   | `-ImplicitCastExpr 0x1a5633d34b8 <col:38> 'unsigned int' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x1a5633d3470 <col:38> 'unsigned int' lvalue Var 0x1a5633d9750 'magic' 'unsigned int'
|   |   | |   `-ImplicitCastExpr 0x1a5633d34d0 <line:61:34> 'unsigned long' <IntegralCast>
|   |   | |     `-IntegerLiteral 0x1a5633d3490 <col:34> 'long' 844321604
|   |   | `-CompoundStmt 0x1a5633dfe58 <line:717:61, line:731:9>
|   |   |   |-BinaryOperator 0x1a5633d35e0 <line:718:13, col:26> 'unsigned char *' '='
|   |   |   | |-DeclRefExpr 0x1a5633d3540 <col:13> 'unsigned char *' lvalue Var 0x1a5633d9868 'q' 'unsigned char *'
|   |   |   | `-BinaryOperator 0x1a5633d35c0 <col:17, col:26> 'unsigned char *' '+'
|   |   |   |   |-ImplicitCastExpr 0x1a5633d35a8 <col:17> 'unsigned char *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x1a5633d3560 <col:17> 'unsigned char *' lvalue Var 0x1a5633d97e8 'enctmp' 'unsigned char *'
|   |   |   |   `-IntegerLiteral 0x1a5633d3580 <col:26> 'int' 8
|   |   |   |-CallExpr 0x1a5633d3708 <line:719:13, col:37> 'void *'
|   |   |   | |-ImplicitCastExpr 0x1a5633d36f0 <col:13> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x1a5633d3600 <col:13> 'void *(void *, int, unsigned long long)' Function 0x1a5633d5530 'memset' 'void *(void *, int, unsigned long long)'
|   |   |   | |-ImplicitCastExpr 0x1a5633d3740 <col:20, col:29> 'void *' <BitCast>
|   |   |   | | `-BinaryOperator 0x1a5633d3680 <col:20, col:29> 'unsigned char *' '+'
|   |   |   | |   |-ImplicitCastExpr 0x1a5633d3668 <col:20> 'unsigned char *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x1a5633d3620 <col:20> 'unsigned char [20]' lvalue Var 0x1a5633d99a0 'keybuf' 'unsigned char [20]'
|   |   |   | |   `-IntegerLiteral 0x1a5633d3640 <col:29> 'int' 5
|   |   |   | |-IntegerLiteral 0x1a5633d36a0 <col:32> 'int' 0
|   |   |   | `-ImplicitCastExpr 0x1a5633d3758 <col:35> 'unsigned long long' <IntegralCast>
|   |   |   |   `-IntegerLiteral 0x1a5633d36c8 <col:35> 'int' 11
|   |   |   |-IfStmt 0x1a5633d3838 <line:720:13, line:721:22>
|   |   |   | |-OpaqueValueExpr 0x1a5633d3820 <<invalid sloc>> '_Bool'
|   |   |   | `-GotoStmt 0x1a5633d3808 <col:17, col:22> 'err' 0x1a5633da050
|   |   |   |-IfStmt 0x1a5633d3938 <line:722:13, line:723:22>
|   |   |   | |-OpaqueValueExpr 0x1a5633d3920 <<invalid sloc>> '_Bool'
|   |   |   | `-GotoStmt 0x1a5633d3908 <col:17, col:22> 'err' 0x1a5633da050
|   |   |   |-IfStmt 0x1a5633d3a68 <line:724:13, line:725:22>
|   |   |   | |-OpaqueValueExpr 0x1a5633d3a50 <<invalid sloc>> '_Bool'
|   |   |   | `-GotoStmt 0x1a5633d3a38 <col:17, col:22> 'err' 0x1a5633da050
|   |   |   |-BinaryOperator 0x1a5633dfc50 <line:726:13, col:60> 'unsigned int' '='
|   |   |   | |-DeclRefExpr 0x1a5633d3a80 <col:13> 'unsigned int' lvalue Var 0x1a5633d9750 'magic' 'unsigned int'
|   |   |   | `-CallExpr 0x1a5633d3b58 <col:21, col:60> 'unsigned int'
|   |   |   |   |-ImplicitCastExpr 0x1a5633d3b40 <col:21> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1a5633d3aa0 <col:21> 'unsigned int (const unsigned char **)' Function 0x1a5633bd060 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   |   |   `-CStyleCastExpr 0x1a5633d3b18 <col:34, col:59> 'const unsigned char **' <NoOp>
|   |   |   |     `-UnaryOperator 0x1a5633d3ae0 <col:58, col:59> 'unsigned char **' prefix '&' cannot overflow
|   |   |   |       `-DeclRefExpr 0x1a5633d3ac0 <col:59> 'unsigned char *' lvalue Var 0x1a5633d9868 'q' 'unsigned char *'
|   |   |   `-IfStmt 0x1a5633dfe40 <line:727:13, line:730:13>
|   |   |     |-BinaryOperator 0x1a5633dfdd0 <line:727:17, line:61:34> 'int' '&&'
|   |   |     | |-BinaryOperator 0x1a5633dfd00 <line:727:17, line:59:34> 'int' '!='
|   |   |     | | |-ImplicitCastExpr 0x1a5633dfce8 <line:727:17> 'unsigned long' <IntegralCast>
|   |   |     | | | `-ImplicitCastExpr 0x1a5633dfcb8 <col:17> 'unsigned int' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x1a5633dfc70 <col:17> 'unsigned int' lvalue Var 0x1a5633d9750 'magic' 'unsigned int'
|   |   |     | | `-ImplicitCastExpr 0x1a5633dfcd0 <line:59:34> 'unsigned long' <IntegralCast>
|   |   |     | |   `-IntegerLiteral 0x1a5633dfc90 <col:34> 'long' 843141970
|   |   |     | `-BinaryOperator 0x1a5633dfdb0 <line:727:42, line:61:34> 'int' '!='
|   |   |     |   |-ImplicitCastExpr 0x1a5633dfd98 <line:727:42> 'unsigned long' <IntegralCast>
|   |   |     |   | `-ImplicitCastExpr 0x1a5633dfd68 <col:42> 'unsigned int' <LValueToRValue>
|   |   |     |   |   `-DeclRefExpr 0x1a5633dfd20 <col:42> 'unsigned int' lvalue Var 0x1a5633d9750 'magic' 'unsigned int'
|   |   |     |   `-ImplicitCastExpr 0x1a5633dfd80 <line:61:34> 'unsigned long' <IntegralCast>
|   |   |     |     `-IntegerLiteral 0x1a5633dfd40 <col:34> 'long' 844321604
|   |   |     `-CompoundStmt 0x1a5633dfe28 <line:727:65, line:730:13>
|   |   |       `-GotoStmt 0x1a5633dfe10 <line:729:17, col:22> 'err' 0x1a5633da050
|   |   `-BinaryOperator 0x1a5633dff28 <line:732:9, col:13> 'const unsigned char *' '='
|   |     |-DeclRefExpr 0x1a5633dfeb8 <col:9> 'const unsigned char *' lvalue Var 0x1a5633d9638 'p' 'const unsigned char *'
|   |     `-ImplicitCastExpr 0x1a5633dff10 <col:13> 'const unsigned char *' <NoOp>
|   |       `-ImplicitCastExpr 0x1a5633dfef8 <col:13> 'unsigned char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1a5633dfed8 <col:13> 'unsigned char *' lvalue Var 0x1a5633d97e8 'enctmp' 'unsigned char *'
|   |-LabelStmt 0x1a5633e0170 <line:736:2, col:5> 'err'
|   | `-NullStmt 0x1a5633e0168 <col:5>
|   `-IfStmt 0x1a5633e0468 <line:738:5, line:741:5>
|     |-OpaqueValueExpr 0x1a5633e0450 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x1a5633e0430 <line:738:25, line:741:5>
|       |-CallExpr 0x1a5633e0350 <line:739:9, col:47> 'int'
|       | |-ImplicitCastExpr 0x1a5633e0338 <col:9> 'int (*)()' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x1a5633e0298 <col:9> 'int ()' Function 0x1a5633e01d0 'OPENSSL_cleanse' 'int ()'
|       | |-ImplicitCastExpr 0x1a5633e0380 <col:25> 'unsigned char *' <ArrayToPointerDecay>
|       | | `-DeclRefExpr 0x1a5633e02b8 <col:25> 'unsigned char [20]' lvalue Var 0x1a5633d99a0 'keybuf' 'unsigned char [20]'
|       | `-UnaryExprOrTypeTraitExpr 0x1a5633e0318 <col:33, col:46> 'unsigned long long' sizeof
|       |   `-ParenExpr 0x1a5633e02f8 <col:39, col:46> 'unsigned char [20]' lvalue
|       |     `-DeclRefExpr 0x1a5633e02d8 <col:40> 'unsigned char [20]' lvalue Var 0x1a5633d99a0 'keybuf' 'unsigned char [20]' non_odr_use_unevaluated
|       `-CallExpr 0x1a5633e03f0 <line:740:9, col:28> 'int'
|         |-ImplicitCastExpr 0x1a5633e03d8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1a5633e0398 <col:9> 'int ()' Function 0x1a5633c4aa0 'OPENSSL_free' 'int ()'
|         `-ImplicitCastExpr 0x1a5633e0418 <col:22> 'unsigned char *' <LValueToRValue>
|           `-DeclRefExpr 0x1a5633e03b8 <col:22> 'unsigned char *' lvalue Var 0x1a5633d97e8 'enctmp' 'unsigned char *'
|-FunctionDecl 0x1a5633da520 <line:702:9> col:9 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1a5633da5c0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1a5633da628 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1a5633da690 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1a5633e06d0 <line:745:1, line:776:1> line:745:11 invalid b2i_PVK_bio 'int *(int *, int *, void *)'
| |-ParmVarDecl 0x1a5633e04e0 <col:23, col:28> col:28 invalid in 'int *'
| |-ParmVarDecl 0x1a5633e0560 <col:32, col:49> col:49 invalid cb 'int *'
| |-ParmVarDecl 0x1a5633e05e0 <col:53, col:59> col:59 used u 'void *'
| `-CompoundStmt 0x1a5633db748 <line:746:1, line:776:1>
|   |-DeclStmt 0x1a5633e0940 <line:747:5, col:43>
|   | |-VarDecl 0x1a5633e0840 <col:5, col:29> col:19 used pvk_hdr 'unsigned char [24]'
|   | `-VarDecl 0x1a5633e08c0 <col:5, col:33> col:33 used buf 'unsigned char *'
|   |-DeclStmt 0x1a5633e09d8 <line:748:5, col:27>
|   | `-VarDecl 0x1a5633e0970 <col:5, col:26> col:26 used p 'const unsigned char *'
|   |-DeclStmt 0x1a5633e0a70 <line:749:5, col:15>
|   | `-VarDecl 0x1a5633e0a08 <col:5, col:9> col:9 used buflen 'int'
|   |-DeclStmt 0x1a5633e0ba0 <line:751:5, col:33>
|   | |-VarDecl 0x1a5633e0aa0 <col:5, col:18> col:18 used saltlen 'unsigned int'
|   | `-VarDecl 0x1a5633e0b20 <col:5, col:27> col:27 used keylen 'unsigned int'
|   |-IfStmt 0x1a5633dac70 <line:752:5, line:755:5>
|   | |-OpaqueValueExpr 0x1a5633dac58 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a5633dac48 <line:752:42, line:755:5>
|   |-BinaryOperator 0x1a5633dad10 <line:756:5, col:9> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x1a5633dac88 <col:5> 'const unsigned char *' lvalue Var 0x1a5633e0970 'p' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633dacf8 <col:9> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x1a5633dace0 <col:9> 'unsigned char *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1a5633dacc0 <col:9> 'unsigned char [24]' lvalue Var 0x1a5633e0840 'pvk_hdr' 'unsigned char [24]'
|   |-IfStmt 0x1a5633daf88 <line:758:5, line:759:16>
|   | |-UnaryOperator 0x1a5633daf20 <line:758:9, col:52> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1a5633daec0 <col:10, col:52> 'int'
|   | |   |-ImplicitCastExpr 0x1a5633daea8 <col:10> 'int (*)(const unsigned char **, unsigned int, int, unsigned int *, unsigned int *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1a5633dad30 <col:10> 'int (const unsigned char **, unsigned int, int, unsigned int *, unsigned int *)' Function 0x1a5633d72a0 'do_PVK_header' 'int (const unsigned char **, unsigned int, int, unsigned int *, unsigned int *)'
|   | |   |-UnaryOperator 0x1a5633dad70 <col:24, col:25> 'const unsigned char **' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1a5633dad50 <col:25> 'const unsigned char *' lvalue Var 0x1a5633e0970 'p' 'const unsigned char *'
|   | |   |-ImplicitCastExpr 0x1a5633daf08 <col:28> 'unsigned int' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1a5633dad88 <col:28> 'int' 24
|   | |   |-IntegerLiteral 0x1a5633dadb0 <col:32> 'int' 0
|   | |   |-UnaryOperator 0x1a5633dae10 <col:35, col:36> 'unsigned int *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1a5633dadd8 <col:36> 'unsigned int' lvalue Var 0x1a5633e0aa0 'saltlen' 'unsigned int'
|   | |   `-UnaryOperator 0x1a5633dae60 <col:45, col:46> 'unsigned int *' prefix '&' cannot overflow
|   | |     `-DeclRefExpr 0x1a5633dae28 <col:46> 'unsigned int' lvalue Var 0x1a5633e0b20 'keylen' 'unsigned int'
|   | `-ReturnStmt 0x1a5633daf78 <line:759:9, col:16>
|   |   `-ImplicitCastExpr 0x1a5633daf60 <col:16> 'int *' <NullToPointer>
|   |     `-IntegerLiteral 0x1a5633daf38 <col:16> 'int' 0
|   |-BinaryOperator 0x1a5633db0d8 <line:760:5, col:28> 'int' '='
|   | |-DeclRefExpr 0x1a5633dafa0 <col:5> 'int' lvalue Var 0x1a5633e0a08 'buflen' 'int'
|   | `-ImplicitCastExpr 0x1a5633db0c0 <col:14, col:28> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1a5633db0a0 <col:14, col:28> 'unsigned int' '+'
|   |     |-ImplicitCastExpr 0x1a5633db088 <col:14, col:19> 'unsigned int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x1a5633db028 <col:14, col:19> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x1a5633db010 <col:19> 'unsigned int' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x1a5633dafd8 <col:19> 'unsigned int' lvalue Var 0x1a5633e0b20 'keylen' 'unsigned int'
|   |     `-ImplicitCastExpr 0x1a5633db070 <col:28> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1a5633db050 <col:28> 'unsigned int' lvalue Var 0x1a5633e0aa0 'saltlen' 'unsigned int'
|   |-BinaryOperator 0x1a5633db1e0 <line:761:5, col:32> 'unsigned char *' '='
|   | |-DeclRefExpr 0x1a5633db0f8 <col:5> 'unsigned char *' lvalue Var 0x1a5633e08c0 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633db1c8 <col:11, col:32> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x1a5633db188 <col:11, col:32> 'int'
|   |     |-ImplicitCastExpr 0x1a5633db170 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1a5633db130 <col:11> 'int ()' Function 0x1a5633ca480 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x1a5633db1b0 <col:26> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1a5633db150 <col:26> 'int' lvalue Var 0x1a5633e0a08 'buflen' 'int'
|   |-IfStmt 0x1a5633db2c0 <line:762:5, line:765:5>
|   | |-OpaqueValueExpr 0x1a5633db2a8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a5633db290 <line:762:22, line:765:5>
|   |   `-ReturnStmt 0x1a5633db280 <line:764:9, col:16>
|   |     `-ImplicitCastExpr 0x1a5633db268 <col:16> 'int *' <NullToPointer>
|   |       `-IntegerLiteral 0x1a5633db240 <col:16> 'int' 0
|   |-BinaryOperator 0x1a5633db348 <line:766:5, col:9> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x1a5633db2d8 <col:5> 'const unsigned char *' lvalue Var 0x1a5633e0970 'p' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633db330 <col:9> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x1a5633db318 <col:9> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1a5633db2f8 <col:9> 'unsigned char *' lvalue Var 0x1a5633e08c0 'buf' 'unsigned char *'
|   |-IfStmt 0x1a5633db4a0 <line:767:5, line:770:5>
|   | |-OpaqueValueExpr 0x1a5633db488 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a5633db470 <line:767:46, line:770:5>
|   |   `-GotoStmt 0x1a5633db458 <line:769:9, col:14> 'err' 0x1a5633db408
|   `-LabelStmt 0x1a5633db730 <line:773:2, line:774:35> 'err'
|     `-CallExpr 0x1a5633db6d0 <col:5, col:35> 'int'
|       |-ImplicitCastExpr 0x1a5633db6b8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1a5633db658 <col:5> 'int ()' Function 0x1a5633db590 'OPENSSL_clear_free' 'int ()'
|       |-ImplicitCastExpr 0x1a5633db700 <col:24> 'unsigned char *' <LValueToRValue>
|       | `-DeclRefExpr 0x1a5633db678 <col:24> 'unsigned char *' lvalue Var 0x1a5633e08c0 'buf' 'unsigned char *'
|       `-ImplicitCastExpr 0x1a5633db718 <col:29> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x1a5633db698 <col:29> 'int' lvalue Var 0x1a5633e0a08 'buflen' 'int'
|-FunctionDecl 0x1a5633dbaf0 <line:778:1, line:861:1> line:778:12 invalid i2b_PVK 'int (unsigned char **, int *, int, int *, void *)' static
| |-ParmVarDecl 0x1a5633db7e0 <col:20, col:36> col:36 used out 'unsigned char **'
| |-ParmVarDecl 0x1a5633db860 <col:41, col:51> col:51 invalid pk 'int *'
| |-ParmVarDecl 0x1a5633db8e0 <col:55, col:59> col:59 used enclevel 'int'
| |-ParmVarDecl 0x1a5633db960 <line:779:20, col:37> col:37 invalid cb 'int *'
| |-ParmVarDecl 0x1a5633db9e0 <col:41, col:47> col:47 used u 'void *'
| `-CompoundStmt 0x1a5633dd538 <line:780:1, line:861:1>
|   |-DeclStmt 0x1a5633dbd38 <line:781:5, col:27>
|   | |-VarDecl 0x1a5633dbc10 <col:5, col:18> col:9 used outlen 'int' cinit
|   | | `-IntegerLiteral 0x1a5633dbc78 <col:18> 'int' 24
|   | `-VarDecl 0x1a5633dbcb8 <col:5, col:22> col:22 used pklen 'int'
|   |-DeclStmt 0x1a5633dbef0 <line:782:5, col:57>
|   | |-VarDecl 0x1a5633dbd68 <col:5, col:20> col:20 used p 'unsigned char *'
|   | |-VarDecl 0x1a5633dbde8 <col:5, col:31> col:31 used start 'unsigned char *'
|   | `-VarDecl 0x1a5633dbe68 <col:5, col:46> col:46 used salt 'unsigned char *'
|   |-IfStmt 0x1a5633dbfe8 <line:784:5, line:75:34>
|   | |-ImplicitCastExpr 0x1a5633dbf40 <line:784:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1a5633dbf08 <col:9> 'int' lvalue ParmVar 0x1a5633db8e0 'enclevel' 'int'
|   | `-CompoundAssignOperator 0x1a5633dbfb8 <line:785:9, line:75:34> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x1a5633dbf58 <line:785:9> 'int' lvalue Var 0x1a5633dbc10 'outlen' 'int'
|   |   `-IntegerLiteral 0x1a5633dbf90 <line:75:34> 'int' 16
|   |-IfStmt 0x1a5633dc130 <line:787:5, line:788:17>
|   | |-BinaryOperator 0x1a5633dc0c0 <line:787:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x1a5633dc0a8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a5633dc060 <col:9> 'int' lvalue Var 0x1a5633dbcb8 'pklen' 'int'
|   | | `-IntegerLiteral 0x1a5633dc080 <col:17> 'int' 0
|   | `-ReturnStmt 0x1a5633dc120 <line:788:9, col:17>
|   |   `-UnaryOperator 0x1a5633dc108 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1a5633dc0e0 <col:17> 'int' 1
|   |-CompoundAssignOperator 0x1a5633dc1a0 <line:789:5, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x1a5633dc148 <col:5> 'int' lvalue Var 0x1a5633dbc10 'outlen' 'int'
|   | `-ImplicitCastExpr 0x1a5633dc188 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633dc168 <col:15> 'int' lvalue Var 0x1a5633dbcb8 'pklen' 'int'
|   |-IfStmt 0x1a5633dc268 <line:790:5, line:791:16>
|   | |-OpaqueValueExpr 0x1a5633dc250 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1a5633dc240 <col:9, col:16>
|   |   `-ImplicitCastExpr 0x1a5633dc228 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1a5633dc208 <col:16> 'int' lvalue Var 0x1a5633dbc10 'outlen' 'int'
|   |-IfStmt 0x1a5633dc600 <line:792:5, line:800:5> has_else
|   | |-OpaqueValueExpr 0x1a5633dc5e8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1a5633dc390 <line:792:23, line:794:5>
|   | | `-BinaryOperator 0x1a5633dc370 <line:793:9, col:14> 'unsigned char *' '='
|   | |   |-DeclRefExpr 0x1a5633dc2d0 <col:9> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   | |   `-ImplicitCastExpr 0x1a5633dc358 <col:13, col:14> 'unsigned char *' <LValueToRValue>
|   | |     `-UnaryOperator 0x1a5633dc340 <col:13, col:14> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1a5633dc328 <col:14> 'unsigned char **' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1a5633dc308 <col:14> 'unsigned char **' lvalue ParmVar 0x1a5633db7e0 'out' 'unsigned char **'
|   | `-CompoundStmt 0x1a5633dc5c8 <line:794:12, line:800:5>
|   |   |-BinaryOperator 0x1a5633dc4d0 <line:795:9, col:42> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1a5633dc3a8 <col:9> 'unsigned char *' lvalue Var 0x1a5633dbde8 'start' 'unsigned char *'
|   |   | `-BinaryOperator 0x1a5633dc4b0 <col:17, col:42> 'unsigned char *' '='
|   |   |   |-DeclRefExpr 0x1a5633dc3e0 <col:17> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   |   |   `-ImplicitCastExpr 0x1a5633dc498 <col:21, col:42> 'unsigned char *' <IntegralToPointer>
|   |   |     `-CallExpr 0x1a5633dc458 <col:21, col:42> 'int'
|   |   |       |-ImplicitCastExpr 0x1a5633dc440 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x1a5633dc400 <col:21> 'int ()' Function 0x1a5633ca480 'OPENSSL_malloc' 'int ()'
|   |   |       `-ImplicitCastExpr 0x1a5633dc480 <col:36> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1a5633dc420 <col:36> 'int' lvalue Var 0x1a5633dbc10 'outlen' 'int'
|   |   `-IfStmt 0x1a5633dc5b0 <line:796:9, line:799:9>
|   |     |-OpaqueValueExpr 0x1a5633dc598 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1a5633dc580 <line:796:24, line:799:9>
|   |       `-ReturnStmt 0x1a5633dc570 <line:798:13, col:21>
|   |         `-UnaryOperator 0x1a5633dc558 <col:20, col:21> 'int' prefix '-'
|   |           `-IntegerLiteral 0x1a5633dc530 <col:21> 'int' 1
|   |-IfStmt 0x1a5633dc700 <line:803:5, line:804:14>
|   | |-OpaqueValueExpr 0x1a5633dc6e8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a5633dc6d0 <col:9, col:14> 'error' 0x1a5633dc680
|   |-CallExpr 0x1a5633dc7b0 <line:806:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1a5633dc798 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633dc718 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1a5633c6f28 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1a5633dc758 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1a5633dc738 <col:20> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633dc7e0 <line:73:34> 'unsigned int' <IntegralCast>
|   |   `-IntegerLiteral 0x1a5633dc770 <col:34> 'unsigned long' 2964713758
|   |-CallExpr 0x1a5633dc890 <line:807:5, col:24> 'void'
|   | |-ImplicitCastExpr 0x1a5633dc878 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633dc7f8 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1a5633c6f28 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1a5633dc838 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1a5633dc818 <col:20> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633dc8c0 <col:23> 'unsigned int' <IntegralCast>
|   |   `-IntegerLiteral 0x1a5633dc850 <col:23> 'int' 0
|   |-IfStmt 0x1a5633dcad0 <line:808:5, line:811:42> has_else
|   | |-OpaqueValueExpr 0x1a5633dcab8 <<invalid sloc>> '_Bool'
|   | |-CallExpr 0x1a5633dc990 <line:809:9, col:42> 'void'
|   | | |-ImplicitCastExpr 0x1a5633dc978 <col:9> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x1a5633dc8f8 <col:9> 'void (unsigned char **, unsigned int)' Function 0x1a5633c6f28 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | | |-UnaryOperator 0x1a5633dc938 <col:23, col:24> 'unsigned char **' prefix '&' cannot overflow
|   | | | `-DeclRefExpr 0x1a5633dc918 <col:24> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   | | `-ImplicitCastExpr 0x1a5633dc9c0 <line:67:34> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1a5633dc950 <col:34> 'int' 2
|   | `-CallExpr 0x1a5633dca70 <line:811:9, col:42> 'void'
|   |   |-ImplicitCastExpr 0x1a5633dca58 <col:9> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1a5633dc9d8 <col:9> 'void (unsigned char **, unsigned int)' Function 0x1a5633c6f28 'write_ledword' 'void (unsigned char **, unsigned int)'
|   |   |-UnaryOperator 0x1a5633dca18 <col:23, col:24> 'unsigned char **' prefix '&' cannot overflow
|   |   | `-DeclRefExpr 0x1a5633dc9f8 <col:24> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   |   `-ImplicitCastExpr 0x1a5633dcaa0 <line:66:34> 'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x1a5633dca30 <col:34> 'int' 1
|   |-CallExpr 0x1a5633e2c98 <line:812:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1a5633e2c80 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633dcaf8 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1a5633c6f28 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1a5633dcb38 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1a5633dcb18 <col:20> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633e2cc8 <col:23, col:38> 'unsigned int' <IntegralCast>
|   |   `-ConditionalOperator 0x1a5633dcbd8 <col:23, col:38> 'int'
|   |     |-ImplicitCastExpr 0x1a5633dcbc0 <col:23> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1a5633dcb50 <col:23> 'int' lvalue ParmVar 0x1a5633db8e0 'enclevel' 'int'
|   |     |-IntegerLiteral 0x1a5633dcb70 <col:34> 'int' 1
|   |     `-IntegerLiteral 0x1a5633dcb98 <col:38> 'int' 0
|   |-CallExpr 0x1a5633e2e08 <line:813:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1a5633e2df0 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633e2ce0 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1a5633c6f28 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1a5633e2d20 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1a5633e2d00 <col:20> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633e2e38 <col:23, col:48> 'unsigned int' <IntegralCast>
|   |   `-ConditionalOperator 0x1a5633e2dc0 <col:23, col:48> 'int'
|   |     |-ImplicitCastExpr 0x1a5633e2da8 <col:23> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1a5633e2d38 <col:23> 'int' lvalue ParmVar 0x1a5633db8e0 'enclevel' 'int'
|   |     |-IntegerLiteral 0x1a5633e2d58 <line:75:34> 'int' 16
|   |     `-IntegerLiteral 0x1a5633e2d80 <line:813:48> 'int' 0
|   |-CallExpr 0x1a5633e2ee0 <line:814:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1a5633e2ec8 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1a5633e2e50 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1a5633c6f28 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1a5633e2e90 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1a5633e2e70 <col:20> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1a5633e2f28 <col:23> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1a5633e2f10 <col:23> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1a5633e2ea8 <col:23> 'int' lvalue Var 0x1a5633dbcb8 'pklen' 'int'
|   |-IfStmt 0x1a5633e32d8 <line:815:5, line:820:5>
|   | |-ImplicitCastExpr 0x1a5633e2f60 <line:815:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1a5633e2f40 <col:9> 'int' lvalue ParmVar 0x1a5633db8e0 'enclevel' 'int'
|   | `-CompoundStmt 0x1a5633e32b0 <col:19, line:820:5>
|   |   |-IfStmt 0x1a5633e3190 <line:816:9, line:817:18>
|   |   | |-BinaryOperator 0x1a5633e3158 <line:816:13, col:43> 'int' '<='
|   |   | | |-CallExpr 0x1a5633e30e8 <col:13, col:38> 'int'
|   |   | | | |-ImplicitCastExpr 0x1a5633e30d0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x1a5633e3068 <col:13> 'int ()' Function 0x1a5633e2fa0 'RAND_bytes' 'int ()'
|   |   | | | |-ImplicitCastExpr 0x1a5633e3118 <col:24> 'unsigned char *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1a5633e3088 <col:24> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   |   | | | `-IntegerLiteral 0x1a5633e30a8 <line:75:34> 'int' 16
|   |   | | `-IntegerLiteral 0x1a5633e3130 <line:816:43> 'int' 0
|   |   | `-GotoStmt 0x1a5633e3178 <line:817:13, col:18> 'error' 0x1a5633dc680
|   |   |-BinaryOperator 0x1a5633e3218 <line:818:9, col:16> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1a5633e31a8 <col:9> 'unsigned char *' lvalue Var 0x1a5633dbe68 'salt' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x1a5633e3200 <col:16> 'unsigned char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1a5633e31e0 <col:16> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   |   `-CompoundAssignOperator 0x1a5633e3280 <line:819:9, line:75:34> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     |-DeclRefExpr 0x1a5633e3238 <line:819:9> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   |     `-IntegerLiteral 0x1a5633e3258 <line:75:34> 'int' 16
|   |-IfStmt 0x1a5633dd1e8 <line:822:5, line:847:5>
|   | |-BinaryOperator 0x1a5633e33b0 <line:822:9, col:21> 'int' '!='
|   | | |-ImplicitCastExpr 0x1a5633e3398 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a5633e3350 <col:9> 'int' lvalue ParmVar 0x1a5633db8e0 'enclevel' 'int'
|   | | `-IntegerLiteral 0x1a5633e3370 <col:21> 'int' 0
|   | `-CompoundStmt 0x1a5633dd180 <col:24, line:847:5>
|   |   |-DeclStmt 0x1a5633e3448 <line:823:9, col:32>
|   |   | `-VarDecl 0x1a5633e33e0 <col:9, col:14> col:14 invalid psbuf 'char'
|   |   |-DeclStmt 0x1a5633e3530 <line:824:9, col:33>
|   |   | `-VarDecl 0x1a5633e34c8 <col:9, col:32> col:23 used keybuf 'unsigned char [20]'
|   |   |-DeclStmt 0x1a5633e3660 <line:825:9, col:29>
|   |   | |-VarDecl 0x1a5633e3560 <col:9, col:13> col:13 used enctmplen 'int'
|   |   | `-VarDecl 0x1a5633e35e0 <col:9, col:24> col:24 used inlen 'int'
|   |   |-IfStmt 0x1a5633e3868 <line:830:9, line:833:9>
|   |   | |-BinaryOperator 0x1a5633e37f8 <line:830:13, col:22> 'int' '<='
|   |   | | |-ImplicitCastExpr 0x1a5633e37e0 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1a5633e3798 <col:13> 'int' lvalue Var 0x1a5633e35e0 'inlen' 'int'
|   |   | | `-IntegerLiteral 0x1a5633e37b8 <col:22> 'int' 0
|   |   | `-CompoundStmt 0x1a5633e3850 <col:25, line:833:9>
|   |   |   `-GotoStmt 0x1a5633e3838 <line:832:13, col:18> 'error' 0x1a5633dc680
|   |   |-IfStmt 0x1a5633e3970 <line:834:9, line:836:18>
|   |   | |-OpaqueValueExpr 0x1a5633e3958 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633e3940 <col:13, col:18> 'error' 0x1a5633dc680
|   |   |-IfStmt 0x1a5633e3b78 <line:837:9, line:838:37>
|   |   | |-BinaryOperator 0x1a5633e39e8 <line:837:13, col:25> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1a5633e39d0 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1a5633e3988 <col:13> 'int' lvalue ParmVar 0x1a5633db8e0 'enclevel' 'int'
|   |   | | `-IntegerLiteral 0x1a5633e39a8 <col:25> 'int' 1
|   |   | `-CallExpr 0x1a5633e3b10 <line:838:13, col:37> 'void *'
|   |   |   |-ImplicitCastExpr 0x1a5633e3af8 <col:13> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1a5633e3a08 <col:13> 'void *(void *, int, unsigned long long)' Function 0x1a5633d5530 'memset' 'void *(void *, int, unsigned long long)'
|   |   |   |-ImplicitCastExpr 0x1a5633e3b48 <col:20, col:29> 'void *' <BitCast>
|   |   |   | `-BinaryOperator 0x1a5633e3a88 <col:20, col:29> 'unsigned char *' '+'
|   |   |   |   |-ImplicitCastExpr 0x1a5633e3a70 <col:20> 'unsigned char *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1a5633e3a28 <col:20> 'unsigned char [20]' lvalue Var 0x1a5633e34c8 'keybuf' 'unsigned char [20]'
|   |   |   |   `-IntegerLiteral 0x1a5633e3a48 <col:29> 'int' 5
|   |   |   |-IntegerLiteral 0x1a5633e3aa8 <col:32> 'int' 0
|   |   |   `-ImplicitCastExpr 0x1a5633e3b60 <col:35> 'unsigned long long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1a5633e3ad0 <col:35> 'int' 11
|   |   |-BinaryOperator 0x1a5633dcc20 <line:839:9, col:34> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1a5633e3b90 <col:9> 'unsigned char *' lvalue Var 0x1a5633dbd68 'p' 'unsigned char *'
|   |   | `-BinaryOperator 0x1a5633e3c58 <col:13, col:34> 'unsigned char *' '+'
|   |   |   |-BinaryOperator 0x1a5633e3c10 <col:13, line:75:34> 'unsigned char *' '+'
|   |   |   | |-ImplicitCastExpr 0x1a5633e3bf8 <line:839:13> 'unsigned char *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1a5633e3bb0 <col:13> 'unsigned char *' lvalue Var 0x1a5633dbe68 'salt' 'unsigned char *'
|   |   |   | `-IntegerLiteral 0x1a5633e3bd0 <line:75:34> 'int' 16
|   |   |   `-IntegerLiteral 0x1a5633e3c30 <line:839:34> 'int' 8
|   |   |-IfStmt 0x1a5633dcdf8 <line:840:9, line:841:18>
|   |   | |-OpaqueValueExpr 0x1a5633dcde0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633dcdc8 <col:13, col:18> 'error' 0x1a5633dc680
|   |   |-CallExpr 0x1a5633dce90 <line:842:9, col:35> 'int'
|   |   | |-ImplicitCastExpr 0x1a5633dce78 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1a5633dce10 <col:9> 'int ()' Function 0x1a5633e01d0 'OPENSSL_cleanse' 'int ()'
|   |   | |-ImplicitCastExpr 0x1a5633dcec0 <col:25> 'unsigned char *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1a5633dce30 <col:25> 'unsigned char [20]' lvalue Var 0x1a5633e34c8 'keybuf' 'unsigned char [20]'
|   |   | `-IntegerLiteral 0x1a5633dce50 <col:33> 'int' 20
|   |   |-IfStmt 0x1a5633dd038 <line:843:9, line:844:18>
|   |   | |-OpaqueValueExpr 0x1a5633dd020 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1a5633dd008 <col:13, col:18> 'error' 0x1a5633dc680
|   |   `-IfStmt 0x1a5633dd168 <line:845:9, line:846:18>
|   |     |-OpaqueValueExpr 0x1a5633dd150 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1a5633dd138 <col:13, col:18> 'error' 0x1a5633dc680
|   |-IfStmt 0x1a5633dd330 <line:851:5, line:852:16>
|   | |-OpaqueValueExpr 0x1a5633dd318 <<invalid sloc>> '_Bool'
|   | `-BinaryOperator 0x1a5633dd2f8 <col:9, col:16> 'unsigned char *' '='
|   |   |-UnaryOperator 0x1a5633dd2a8 <col:9, col:10> 'unsigned char *' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x1a5633dd290 <col:10> 'unsigned char **' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1a5633dd270 <col:10> 'unsigned char **' lvalue ParmVar 0x1a5633db7e0 'out' 'unsigned char **'
|   |   `-ImplicitCastExpr 0x1a5633dd2e0 <col:16> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1a5633dd2c0 <col:16> 'unsigned char *' lvalue Var 0x1a5633dbde8 'start' 'unsigned char *'
|   |-ReturnStmt 0x1a5633dd380 <line:854:5, col:12>
|   | `-ImplicitCastExpr 0x1a5633dd368 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1a5633dd348 <col:12> 'int' lvalue Var 0x1a5633dbc10 'outlen' 'int'
|   |-LabelStmt 0x1a5633dd3b8 <line:856:2, col:7> 'error'
|   | `-NullStmt 0x1a5633dd3b0 <col:7>
|   |-IfStmt 0x1a5633dd4d0 <line:858:5, line:859:27>
|   | |-OpaqueValueExpr 0x1a5633dd4b8 <<invalid sloc>> '_Bool'
|   | `-CallExpr 0x1a5633dd478 <col:9, col:27> 'int'
|   |   |-ImplicitCastExpr 0x1a5633dd460 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1a5633dd420 <col:9> 'int ()' Function 0x1a5633c4aa0 'OPENSSL_free' 'int ()'
|   |   `-ImplicitCastExpr 0x1a5633dd4a0 <col:22> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1a5633dd440 <col:22> 'unsigned char *' lvalue Var 0x1a5633dbde8 'start' 'unsigned char *'
|   `-ReturnStmt 0x1a5633dd528 <line:860:5, col:13>
|     `-UnaryOperator 0x1a5633dd510 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x1a5633dd4e8 <col:13> 'int' 1
`-FunctionDecl 0x1a5633dd910 <line:863:1, line:878:1> line:863:5 invalid i2b_PVK_bio 'int (int *, int *, int, int *, void *)'
  |-ParmVarDecl 0x1a5633dd608 <col:17, col:22> col:22 invalid out 'int *'
  |-ParmVarDecl 0x1a5633dd688 <col:27, col:37> col:37 invalid pk 'int *'
  |-ParmVarDecl 0x1a5633dd708 <col:41, col:45> col:45 used enclevel 'int'
  |-ParmVarDecl 0x1a5633dd788 <line:864:17, col:34> col:34 invalid cb 'int *'
  |-ParmVarDecl 0x1a5633dd808 <col:38, col:44> col:44 used u 'void *'
  `-CompoundStmt 0x1a5633de060 <line:865:1, line:878:1>
    |-DeclStmt 0x1a5633dda70 <line:866:5, col:30>
    | `-VarDecl 0x1a5633dda08 <col:5, col:20> col:20 used tmp 'unsigned char *'
    |-DeclStmt 0x1a5633ddba0 <line:867:5, col:22>
    | |-VarDecl 0x1a5633ddaa0 <col:5, col:9> col:9 used outlen 'int'
    | `-VarDecl 0x1a5633ddb20 <col:5, col:17> col:17 used wrlen 'int'
    |-IfStmt 0x1a5633ddda0 <line:869:5, line:870:17>
    | |-BinaryOperator 0x1a5633ddd30 <line:869:9, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x1a5633ddd18 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1a5633ddcd0 <col:9> 'int' lvalue Var 0x1a5633ddaa0 'outlen' 'int'
    | | `-IntegerLiteral 0x1a5633ddcf0 <col:18> 'int' 0
    | `-ReturnStmt 0x1a5633ddd90 <line:870:9, col:17>
    |   `-UnaryOperator 0x1a5633ddd78 <col:16, col:17> 'int' prefix '-'
    |     `-IntegerLiteral 0x1a5633ddd50 <col:17> 'int' 1
    |-CallExpr 0x1a5633ddea8 <line:872:5, col:21> 'int'
    | |-ImplicitCastExpr 0x1a5633dde90 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1a5633dde50 <col:5> 'int ()' Function 0x1a5633c4aa0 'OPENSSL_free' 'int ()'
    | `-ImplicitCastExpr 0x1a5633dded0 <col:18> 'unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x1a5633dde70 <col:18> 'unsigned char *' lvalue Var 0x1a5633dda08 'tmp' 'unsigned char *'
    |-IfStmt 0x1a5633ddff8 <line:873:5, line:876:5>
    | |-BinaryOperator 0x1a5633ddf58 <line:873:9, col:18> 'int' '=='
    | | |-ImplicitCastExpr 0x1a5633ddf28 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1a5633ddee8 <col:9> 'int' lvalue Var 0x1a5633ddb20 'wrlen' 'int'
    | | `-ImplicitCastExpr 0x1a5633ddf40 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1a5633ddf08 <col:18> 'int' lvalue Var 0x1a5633ddaa0 'outlen' 'int'
    | `-CompoundStmt 0x1a5633ddfe0 <col:26, line:876:5>
    |   `-ReturnStmt 0x1a5633ddfd0 <line:875:9, col:16>
    |     `-ImplicitCastExpr 0x1a5633ddfb8 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1a5633ddf98 <col:16> 'int' lvalue Var 0x1a5633ddaa0 'outlen' 'int'
    `-ReturnStmt 0x1a5633de050 <line:877:5, col:13>
      `-UnaryOperator 0x1a5633de038 <col:12, col:13> 'int' prefix '-'
        `-IntegerLiteral 0x1a5633de010 <col:13> 'int' 1
