TranslationUnitDecl 0x20812c36c18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x20812c374b0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x20812c371b0 '__int128'
|-TypedefDecl 0x20812c37520 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x20812c371d0 'unsigned __int128'
|-TypedefDecl 0x20812c37858 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x20812c37610 'struct __NSConstantString_tag'
|   `-Record 0x20812c37578 '__NSConstantString_tag'
|-TypedefDecl 0x20812c378c8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x20812c36df0 'unsigned long long'
|-TypedefDecl 0x20812c37960 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x20812c37920 'char *'
|   `-BuiltinType 0x20812c36cb0 'char'
|-TypedefDecl 0x20812c379d0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x20812c37920 'char *'
|   `-BuiltinType 0x20812c36cb0 'char'
|-FunctionDecl 0x20812c37af0 <.//openssl//file_jk/after\crypto\rc4\rc4_skey.c:14:1, line:20:1> line:14:13 RC4_options 'const char *(void)'
| `-CompoundStmt 0x208145b6128 <line:15:1, line:20:1>
|   `-IfStmt 0x208145b6100 <line:16:5, line:19:27> has_else
|     |-OpaqueValueExpr 0x208145b60e8 <<invalid sloc>> '_Bool'
|     |-ReturnStmt 0x208145b6020 <line:17:9, col:28>
|     | `-ImplicitCastExpr 0x208145b6008 <col:16, col:28> 'const char *' <NoOp>
|     |   `-ImplicitCastExpr 0x208145b5ff0 <col:16, col:28> 'char *' <ArrayToPointerDecay>
|     |     `-ParenExpr 0x208145b5fd0 <col:16, col:28> 'char [10]' lvalue
|     |       `-StringLiteral 0x208145b5fa8 <col:17> 'char [10]' lvalue "rc4(char)"
|     `-ReturnStmt 0x208145b60d8 <line:19:9, col:27>
|       `-ImplicitCastExpr 0x208145b60c0 <col:16, col:27> 'const char *' <NoOp>
|         `-ImplicitCastExpr 0x208145b60a8 <col:16, col:27> 'char *' <ArrayToPointerDecay>
|           `-ParenExpr 0x208145b6088 <col:16, col:27> 'char [9]' lvalue
|             `-StringLiteral 0x208145b6068 <col:17> 'char [9]' lvalue "rc4(int)"
`-FunctionDecl 0x208145b6398 <line:31:1, line:58:1> line:31:6 invalid RC4_set_key 'void (int *, int, const unsigned char *)'
  |-ParmVarDecl 0x208145b6180 <col:18, col:27> col:27 invalid key 'int *'
  |-ParmVarDecl 0x208145b6200 <col:32, col:36> col:36 used len 'int'
  |-ParmVarDecl 0x208145b62b0 <col:41, col:62> col:62 used data 'const unsigned char *'
  `-CompoundStmt 0x208145beca0 <line:32:1, line:58:1>
    |-DeclStmt 0x208145b64e8 <line:33:5, col:25>
    | `-VarDecl 0x208145b6480 <col:5, col:22> col:22 invalid tmp 'int' register
    |-DeclStmt 0x208145b6618 <line:34:5, col:26>
    | |-VarDecl 0x208145b6518 <col:5, col:18> col:18 used id1 'int' register
    | `-VarDecl 0x208145b6598 <col:5, col:23> col:23 used id2 'int' register
    |-DeclStmt 0x208145b66b0 <line:35:5, col:24>
    | `-VarDecl 0x208145b6648 <col:5, col:23> col:23 invalid d 'int *' register
    |-DeclStmt 0x208145b6748 <line:36:5, col:19>
    | `-VarDecl 0x208145b66e0 <col:5, col:18> col:18 used i 'unsigned int'
    |-BinaryOperator 0x208145b6890 <line:41:5, col:17> 'int' '='
    | |-DeclRefExpr 0x208145b67d8 <col:5> 'int' lvalue Var 0x208145b6518 'id1' 'int'
    | `-BinaryOperator 0x208145b6870 <col:11, col:17> 'int' '='
    |   |-DeclRefExpr 0x208145b6810 <col:11> 'int' lvalue Var 0x208145b6598 'id2' 'int'
    |   `-IntegerLiteral 0x208145b6848 <col:17> 'int' 0
    `-ForStmt 0x208145bec68 <line:52:5, line:57:5>
      |-BinaryOperator 0x208145b6ab8 <line:52:10, col:14> 'unsigned int' '='
      | |-DeclRefExpr 0x208145b6a58 <col:10> 'unsigned int' lvalue Var 0x208145b66e0 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x208145b6aa0 <col:14> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x208145b6a78 <col:14> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x208145b6b50 <col:17, col:21> 'int' '<'
      | |-ImplicitCastExpr 0x208145b6b20 <col:17> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x208145b6ad8 <col:17> 'unsigned int' lvalue Var 0x208145b66e0 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x208145b6b38 <col:21> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x208145b6af8 <col:21> 'int' 256
      |-CompoundAssignOperator 0x208145b6bd0 <col:26, col:31> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
      | |-DeclRefExpr 0x208145b6b70 <col:26> 'unsigned int' lvalue Var 0x208145b66e0 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x208145b6bb8 <col:31> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x208145b6b90 <col:31> 'int' 4
      `-CompoundStmt 0x208145bec18 <col:34, line:57:5>
        |-CompoundStmt 0x208145be070 <line:43:22, line:48:29>
        | `-IfStmt 0x208145b6ed8 <line:46:17, col:39>
        |   |-BinaryOperator 0x208145b6e50 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x208145b6de8 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x208145b6dc8 <col:23> 'int' lvalue Var 0x208145b6518 'id1' 'int'
        |   | `-ImplicitCastExpr 0x208145b6e38 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x208145b6e00 <col:30> 'int' lvalue ParmVar 0x208145b6200 'len' 'int'
        |   `-BinaryOperator 0x208145b6eb8 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x208145b6e70 <col:35> 'int' lvalue Var 0x208145b6518 'id1' 'int'
        |     `-IntegerLiteral 0x208145b6e90 <col:39> 'int' 0
        |-NullStmt 0x208145be088 <line:53:26>
        |-CompoundStmt 0x208145be448 <line:43:22, line:48:29>
        | `-IfStmt 0x208145be338 <line:46:17, col:39>
        |   |-BinaryOperator 0x208145be2b0 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x208145be260 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x208145be240 <col:23> 'int' lvalue Var 0x208145b6518 'id1' 'int'
        |   | `-ImplicitCastExpr 0x208145be298 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x208145be278 <col:30> 'int' lvalue ParmVar 0x208145b6200 'len' 'int'
        |   `-BinaryOperator 0x208145be318 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x208145be2d0 <col:35> 'int' lvalue Var 0x208145b6518 'id1' 'int'
        |     `-IntegerLiteral 0x208145be2f0 <col:39> 'int' 0
        |-NullStmt 0x208145be460 <line:54:26>
        |-CompoundStmt 0x208145be820 <line:43:22, line:48:29>
        | `-IfStmt 0x208145be710 <line:46:17, col:39>
        |   |-BinaryOperator 0x208145be688 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x208145be638 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x208145be618 <col:23> 'int' lvalue Var 0x208145b6518 'id1' 'int'
        |   | `-ImplicitCastExpr 0x208145be670 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x208145be650 <col:30> 'int' lvalue ParmVar 0x208145b6200 'len' 'int'
        |   `-BinaryOperator 0x208145be6f0 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x208145be6a8 <col:35> 'int' lvalue Var 0x208145b6518 'id1' 'int'
        |     `-IntegerLiteral 0x208145be6c8 <col:39> 'int' 0
        |-NullStmt 0x208145be838 <line:55:26>
        |-CompoundStmt 0x208145bebf8 <line:43:22, line:48:29>
        | `-IfStmt 0x208145beae8 <line:46:17, col:39>
        |   |-BinaryOperator 0x208145bea60 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x208145bea10 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x208145be9f0 <col:23> 'int' lvalue Var 0x208145b6518 'id1' 'int'
        |   | `-ImplicitCastExpr 0x208145bea48 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x208145bea28 <col:30> 'int' lvalue ParmVar 0x208145b6200 'len' 'int'
        |   `-BinaryOperator 0x208145beac8 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x208145bea80 <col:35> 'int' lvalue Var 0x208145b6518 'id1' 'int'
        |     `-IntegerLiteral 0x208145beaa0 <col:39> 'int' 0
        `-NullStmt 0x208145bec10 <line:56:26>
