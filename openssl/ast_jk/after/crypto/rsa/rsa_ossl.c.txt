TranslationUnitDecl 0x223aeb75268 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x223aeb75b00 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x223aeb75800 '__int128'
|-TypedefDecl 0x223aeb75b70 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x223aeb75820 'unsigned __int128'
|-TypedefDecl 0x223aeb75ea8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x223aeb75c60 'struct __NSConstantString_tag'
|   `-Record 0x223aeb75bc8 '__NSConstantString_tag'
|-TypedefDecl 0x223aeb75f18 <<invalid sloc>> <invalid sloc> implicit referenced size_t 'unsigned long long'
| `-BuiltinType 0x223aeb75440 'unsigned long long'
|-TypedefDecl 0x223aeb75fb0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x223aeb75f70 'char *'
|   `-BuiltinType 0x223aeb75300 'char'
|-TypedefDecl 0x223aeb76020 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x223aeb75f70 'char *'
|   `-BuiltinType 0x223aeb75300 'char'
|-RecordDecl 0x223aeb76078 <.//openssl//file_jk/after\crypto\rsa/rsa_locl.h:12:1, line:46:1> line:12:8 invalid struct rsa_st definition
| |-FieldDecl 0x223aeb76148 <line:17:5, col:9> col:9 pad 'int'
| |-FieldDecl 0x223aeb761b8 <line:18:5, col:10> col:10 version 'long'
| |-FieldDecl 0x223b03cff60 <line:19:5, col:23> col:23 invalid meth 'const int *'
| |-FieldDecl 0x223b03d0000 <line:21:5, col:13> col:13 invalid engine 'int *'
| |-FieldDecl 0x223b03d0070 <line:22:5, col:13> col:13 invalid n 'int *'
| |-FieldDecl 0x223b03d00e0 <line:23:5, col:13> col:13 invalid e 'int *'
| |-FieldDecl 0x223b03d0150 <line:24:5, col:13> col:13 invalid d 'int *'
| |-FieldDecl 0x223b03d01c0 <line:25:5, col:13> col:13 invalid p 'int *'
| |-FieldDecl 0x223b03d0230 <line:26:5, col:13> col:13 invalid q 'int *'
| |-FieldDecl 0x223b03d02a0 <line:27:5, col:13> col:13 invalid dmp1 'int *'
| |-FieldDecl 0x223b03d0310 <line:28:5, col:13> col:13 invalid dmq1 'int *'
| |-FieldDecl 0x223b03d0380 <line:29:5, col:13> col:13 invalid iqmp 'int *'
| |-FieldDecl 0x223b03d03f0 <line:31:5, col:20> col:20 invalid ex_data 'int'
| |-FieldDecl 0x223b03d0460 <line:32:5, col:9> col:9 references 'int'
| |-FieldDecl 0x223b03d04d0 <line:33:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x223b03d0540 <line:35:5, col:18> col:18 invalid _method_mod_n 'int *'
| |-FieldDecl 0x223b03d05b0 <line:36:5, col:18> col:18 invalid _method_mod_p 'int *'
| |-FieldDecl 0x223b03d0620 <line:37:5, col:18> col:18 invalid _method_mod_q 'int *'
| |-FieldDecl 0x223b03d0690 <line:42:5, col:11> col:11 bignum_data 'char *'
| |-FieldDecl 0x223b03d0700 <line:43:5, col:18> col:18 invalid blinding 'int *'
| |-FieldDecl 0x223b03d0770 <line:44:5, col:18> col:18 invalid mt_blinding 'int *'
| `-FieldDecl 0x223b03d07e0 <line:45:5, col:20> col:20 invalid lock 'int *'
|-RecordDecl 0x223b03d0838 <line:48:1, line:91:1> line:48:8 struct rsa_meth_st definition
| |-FieldDecl 0x223b03d0908 <line:49:5, col:11> col:11 name 'char *'
| |-FieldDecl 0x223b03d0d78 <line:50:5, line:51:65> line:50:11 rsa_pub_enc 'int (*)(int, const unsigned char *, unsigned char *, int *, int)'
| |-FieldDecl 0x223b03ce0a0 <line:52:5, line:53:65> line:52:11 rsa_pub_dec 'int (*)(int, const unsigned char *, unsigned char *, int *, int)'
| |-FieldDecl 0x223b03ce3d8 <line:54:5, line:55:66> line:54:11 rsa_priv_enc 'int (*)(int, const unsigned char *, unsigned char *, int *, int)'
| |-FieldDecl 0x223b03ce710 <line:56:5, line:57:66> line:56:11 rsa_priv_dec 'int (*)(int, const unsigned char *, unsigned char *, int *, int)'
| |-FieldDecl 0x223b03ceaa0 <line:59:5, col:75> col:11 rsa_mod_exp 'int (*)(int *, const int *, int *, int *)'
| |-FieldDecl 0x223b03c9f68 <line:61:5, line:62:72> line:61:11 bn_mod_exp 'int (*)(int *, const int *, const int *, const int *, int *, int *)'
| |-FieldDecl 0x223b03ca138 <line:64:5, col:26> col:11 init 'int (*)(int *)'
| |-FieldDecl 0x223b03ca250 <line:66:5, col:28> col:11 finish 'int (*)(int *)'
| |-FieldDecl 0x223b03ca2c0 <line:68:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x223b03ca330 <line:70:5, col:11> col:11 app_data 'char *'
| |-FieldDecl 0x223b03ca810 <line:77:5, line:80:36> line:77:11 rsa_sign 'int (*)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const int *)'
| |-FieldDecl 0x223b03cacc0 <line:81:5, line:83:59> line:81:11 rsa_verify 'int (*)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const int *)'
| `-FieldDecl 0x223b03d1110 <line:90:5, col:67> col:11 rsa_keygen 'int (*)(int *, int, int *, int *)'
|-FunctionDecl 0x223b03d1720 <line:93:1, line:96:50> line:93:12 invalid int_rsa_verify 'int (int, const unsigned char *, unsigned int, unsigned char *, size_t *, const unsigned char *, size_t, int *)' extern
| |-ParmVarDecl 0x223b03d1180 <col:27, col:31> col:31 dtype 'int'
| |-ParmVarDecl 0x223b03d1200 <col:38, col:59> col:59 m 'const unsigned char *'
| |-ParmVarDecl 0x223b03d1280 <line:94:27, col:40> col:40 m_len 'unsigned int'
| |-ParmVarDecl 0x223b03d1300 <col:47, col:62> col:62 rm 'unsigned char *'
| |-ParmVarDecl 0x223b03d13f8 <line:95:27, col:35> col:35 prm_len 'size_t *'
| |-ParmVarDecl 0x223b03d1478 <col:44, col:65> col:65 sigbuf 'const unsigned char *'
| |-ParmVarDecl 0x223b03d14f0 <line:96:27, col:34> col:34 siglen 'size_t':'unsigned long long'
| `-ParmVarDecl 0x223b03d1570 <col:42, col:47> col:47 invalid rsa 'int *'
|-FunctionDecl 0x223b03d1ad0 <.//openssl//file_jk/after\crypto\rsa\rsa_ossl.c:15:1, line:16:75> line:15:12 invalid rsa_ossl_public_encrypt 'int (int, const unsigned char *, unsigned char *, int *, int)' static
| |-ParmVarDecl 0x223b03d1818 <col:36, col:40> col:40 flen 'int'
| |-ParmVarDecl 0x223b03d1898 <col:46, col:67> col:67 from 'const unsigned char *'
| |-ParmVarDecl 0x223b03d1918 <line:16:35, col:50> col:50 to 'unsigned char *'
| |-ParmVarDecl 0x223b03d1998 <col:54, col:59> col:59 invalid rsa 'int *'
| `-ParmVarDecl 0x223b03d1a18 <col:64, col:68> col:68 padding 'int'
|-FunctionDecl 0x223b03d1e68 <line:17:1, line:18:76> line:17:12 invalid rsa_ossl_private_encrypt 'int (int, const unsigned char *, unsigned char *, int *, int)' static
| |-ParmVarDecl 0x223b03d1bb0 <col:37, col:41> col:41 flen 'int'
| |-ParmVarDecl 0x223b03d1c30 <col:47, col:68> col:68 from 'const unsigned char *'
| |-ParmVarDecl 0x223b03d1cb0 <line:18:36, col:51> col:51 to 'unsigned char *'
| |-ParmVarDecl 0x223b03d1d30 <col:55, col:60> col:60 invalid rsa 'int *'
| `-ParmVarDecl 0x223b03d1db0 <col:65, col:69> col:69 padding 'int'
|-FunctionDecl 0x223b03cb1c8 <line:19:1, line:20:75> line:19:12 invalid rsa_ossl_public_decrypt 'int (int, const unsigned char *, unsigned char *, int *, int)' static
| |-ParmVarDecl 0x223b03caf10 <col:36, col:40> col:40 flen 'int'
| |-ParmVarDecl 0x223b03caf90 <col:46, col:67> col:67 from 'const unsigned char *'
| |-ParmVarDecl 0x223b03cb010 <line:20:35, col:50> col:50 to 'unsigned char *'
| |-ParmVarDecl 0x223b03cb090 <col:54, col:59> col:59 invalid rsa 'int *'
| `-ParmVarDecl 0x223b03cb110 <col:64, col:68> col:68 padding 'int'
|-FunctionDecl 0x223b03cb560 <line:21:1, line:22:76> line:21:12 invalid rsa_ossl_private_decrypt 'int (int, const unsigned char *, unsigned char *, int *, int)' static
| |-ParmVarDecl 0x223b03cb2a8 <col:37, col:41> col:41 flen 'int'
| |-ParmVarDecl 0x223b03cb328 <col:47, col:68> col:68 from 'const unsigned char *'
| |-ParmVarDecl 0x223b03cb3a8 <line:22:36, col:51> col:51 to 'unsigned char *'
| |-ParmVarDecl 0x223b03cb428 <col:55, col:60> col:60 invalid rsa 'int *'
| `-ParmVarDecl 0x223b03cb4a8 <col:65, col:69> col:69 padding 'int'
|-FunctionDecl 0x223b03cb870 <line:23:1, line:24:39> line:23:12 invalid rsa_ossl_mod_exp 'int (int *, const int *, int *, int *)' static
| |-ParmVarDecl 0x223b03cb640 <col:29, col:37> col:37 invalid r0 'int *'
| |-ParmVarDecl 0x223b03cb6c0 <col:41, col:55> col:55 invalid i 'const int *'
| |-ParmVarDecl 0x223b03cb740 <col:58, col:63> col:63 invalid rsa 'int *'
| `-ParmVarDecl 0x223b03cb7c0 <line:24:28, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x223b03cb9e0 <line:25:1, col:34> col:12 invalid rsa_ossl_init 'int (int *)' static
| `-ParmVarDecl 0x223b03cb948 <col:26, col:31> col:31 invalid rsa 'int *'
|-FunctionDecl 0x223b03cbb38 <line:26:1, col:36> col:12 invalid rsa_ossl_finish 'int (int *)' static
| `-ParmVarDecl 0x223b03cbaa0 <col:28, col:33> col:33 invalid rsa 'int *'
|-VarDecl 0x223b03cbbf8 <line:27:1, col:19> col:19 invalid rsa_pkcs1_ossl_meth 'int' static
|-VarDecl 0x223b03cbd30 <line:45:1, col:26> col:26 invalid default_RSA_meth 'const int *' static
|-FunctionDecl 0x223b03dce30 <line:47:1, line:50:1> line:47:6 invalid RSA_set_default_method 'void (const int *)'
| |-ParmVarDecl 0x223b03cbdb0 <col:29, col:47> col:47 invalid meth 'const int *'
| `-CompoundStmt 0x223b03dcef0 <line:48:1, line:50:1>
|-FunctionDecl 0x223b03dcfd0 <line:52:1, line:55:1> line:52:19 invalid RSA_get_default_method 'const int *(void)'
| `-CompoundStmt 0x223b03dd088 <line:53:1, line:55:1>
|-FunctionDecl 0x223b03dd138 <line:57:1, line:60:1> line:57:19 invalid RSA_PKCS1_OpenSSL 'const int *(void)'
| `-CompoundStmt 0x223b03dd1f0 <line:58:1, line:60:1>
|-FunctionDecl 0x223b03dd4d0 <line:62:1, line:150:1> line:62:12 invalid rsa_ossl_public_encrypt 'int (int, const unsigned char *, unsigned char *, int *, int)' static
| |-ParmVarDecl 0x223b03dd218 <col:36, col:40> col:40 used flen 'int'
| |-ParmVarDecl 0x223b03dd298 <col:46, col:67> col:67 used from 'const unsigned char *'
| |-ParmVarDecl 0x223b03dd318 <line:63:35, col:50> col:50 used to 'unsigned char *'
| |-ParmVarDecl 0x223b03dd398 <col:54, col:59> col:59 invalid rsa 'int *'
| |-ParmVarDecl 0x223b03dd418 <col:64, col:68> col:68 used padding 'int'
| `-CompoundStmt 0x223b03dbcb8 <line:64:1, line:150:1>
|   |-DeclStmt 0x223b03dd7b8 <line:66:5, col:27>
|   | |-VarDecl 0x223b03dd5c8 <col:5, col:9> col:9 used i 'int'
|   | |-VarDecl 0x223b03dd648 <col:5, col:18> col:12 used num 'int' cinit
|   | | `-IntegerLiteral 0x223b03dd6b0 <col:18> 'int' 0
|   | `-VarDecl 0x223b03dd6f0 <col:5, col:26> col:21 used r 'int' cinit
|   |   `-UnaryOperator 0x223b03dd780 <col:25, col:26> 'int' prefix '-'
|   |     `-IntegerLiteral 0x223b03dd758 <col:26> 'int' 1
|   |-DeclStmt 0x223b03dd850 <line:67:5, col:30>
|   | `-VarDecl 0x223b03dd7e8 <col:5, col:20> col:20 used buf 'unsigned char *'
|   |-IfStmt 0x223b03ddb78 <line:70:5, line:73:5>
|   | |-OpaqueValueExpr 0x223b03ddb60 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03ddb48 <line:70:61, line:73:5>
|   |   `-ReturnStmt 0x223b03ddb38 <line:72:9, col:17>
|   |     `-UnaryOperator 0x223b03ddb20 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x223b03ddaf8 <col:17> 'int' 1
|   |-IfStmt 0x223b03ddd68 <line:75:5, line:78:5>
|   | |-OpaqueValueExpr 0x223b03ddd50 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03ddd38 <line:75:39, line:78:5>
|   |   `-ReturnStmt 0x223b03ddd28 <line:77:9, col:17>
|   |     `-UnaryOperator 0x223b03ddd10 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x223b03ddce8 <col:17> 'int' 1
|   |-IfStmt 0x223b03dbe98 <line:81:5, line:86:5>
|   | |-OpaqueValueExpr 0x223b03dbe80 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03dbe68 <line:81:63, line:86:5>
|   |   `-IfStmt 0x223b03dbe50 <line:82:9, line:85:9>
|   |     |-OpaqueValueExpr 0x223b03dbe38 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x223b03dbe20 <line:82:64, line:85:9>
|   |       `-ReturnStmt 0x223b03dde20 <line:84:13, col:21>
|   |         `-UnaryOperator 0x223b03dde08 <col:20, col:21> 'int' prefix '-'
|   |           `-IntegerLiteral 0x223b03ddde0 <col:21> 'int' 1
|   |-IfStmt 0x223b03dc0a0 <line:88:5, line:89:14>
|   | |-OpaqueValueExpr 0x223b03dc088 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03dc070 <col:9, col:14> 'err' 0x223b03dc020
|   |-BinaryOperator 0x223b03dc618 <line:94:5, col:29> 'unsigned char *' '='
|   | |-DeclRefExpr 0x223b03dc440 <col:5> 'unsigned char *' lvalue Var 0x223b03dd7e8 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x223b03dc600 <col:11, col:29> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x223b03dc5c0 <col:11, col:29> 'int'
|   |     |-ImplicitCastExpr 0x223b03dc5a8 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x223b03dc568 <col:11> 'int ()' Function 0x223b03dc4a0 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x223b03dc5e8 <col:26> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x223b03dc588 <col:26> 'int' lvalue Var 0x223b03dd648 'num' 'int'
|   |-IfStmt 0x223b03dc6c0 <line:95:5, line:98:5>
|   | |-OpaqueValueExpr 0x223b03dc6a8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03dc690 <line:95:50, line:98:5>
|   |   `-GotoStmt 0x223b03dc678 <line:97:9, col:14> 'err' 0x223b03dc020
|   |-SwitchStmt 0x223b03dc728 <line:100:5, line:116:5>
|   | |-ImplicitCastExpr 0x223b03dc710 <line:100:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x223b03dc6d8 <col:13> 'int' lvalue ParmVar 0x223b03dd418 'padding' 'int'
|   | `-CompoundStmt 0x223b03db170 <col:22, line:116:5>
|   |   |-BinaryOperator 0x223b03dc9f8 <line:102:9, col:62> 'int' '='
|   |   | |-DeclRefExpr 0x223b03dc748 <col:9> 'int' lvalue Var 0x223b03dd5c8 'i' 'int'
|   |   | `-CallExpr 0x223b03dc958 <col:13, col:62> 'int'
|   |   |   |-ImplicitCastExpr 0x223b03dc940 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x223b03dc870 <col:13> 'int ()' Function 0x223b03dc7a8 'RSA_padding_add_PKCS1_type_2' 'int ()'
|   |   |   |-ImplicitCastExpr 0x223b03dc998 <col:42> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03dc890 <col:42> 'unsigned char *' lvalue Var 0x223b03dd7e8 'buf' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03dc9b0 <col:47> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03dc8b0 <col:47> 'int' lvalue Var 0x223b03dd648 'num' 'int'
|   |   |   |-ImplicitCastExpr 0x223b03dc9c8 <col:52> 'const unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03dc8d0 <col:52> 'const unsigned char *' lvalue ParmVar 0x223b03dd298 'from' 'const unsigned char *'
|   |   |   `-ImplicitCastExpr 0x223b03dc9e0 <col:58> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x223b03dc908 <col:58> 'int' lvalue ParmVar 0x223b03dd218 'flen' 'int'
|   |   |-BreakStmt 0x223b03dca18 <line:103:9>
|   |   |-BreakStmt 0x223b03dcbf8 <line:106:9>
|   |   |-BinaryOperator 0x223b03dae58 <line:108:9, col:56> 'int' '='
|   |   | |-DeclRefExpr 0x223b03dcc00 <col:9> 'int' lvalue Var 0x223b03dd5c8 'i' 'int'
|   |   | `-CallExpr 0x223b03dcdc8 <col:13, col:56> 'int'
|   |   |   |-ImplicitCastExpr 0x223b03dcdb0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x223b03dcd10 <col:13> 'int ()' Function 0x223b03dcc48 'RSA_padding_add_SSLv23' 'int ()'
|   |   |   |-ImplicitCastExpr 0x223b03dce08 <col:36> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03dcd30 <col:36> 'unsigned char *' lvalue Var 0x223b03dd7e8 'buf' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03dae10 <col:41> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03dcd50 <col:41> 'int' lvalue Var 0x223b03dd648 'num' 'int'
|   |   |   |-ImplicitCastExpr 0x223b03dae28 <col:46> 'const unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03dcd70 <col:46> 'const unsigned char *' lvalue ParmVar 0x223b03dd298 'from' 'const unsigned char *'
|   |   |   `-ImplicitCastExpr 0x223b03dae40 <col:52> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x223b03dcd90 <col:52> 'int' lvalue ParmVar 0x223b03dd218 'flen' 'int'
|   |   |-BreakStmt 0x223b03dae78 <line:109:9>
|   |   |-BinaryOperator 0x223b03db0e8 <line:111:9, col:54> 'int' '='
|   |   | |-DeclRefExpr 0x223b03dae80 <col:9> 'int' lvalue Var 0x223b03dd5c8 'i' 'int'
|   |   | `-CallExpr 0x223b03db048 <col:13, col:54> 'int'
|   |   |   |-ImplicitCastExpr 0x223b03db030 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x223b03daf90 <col:13> 'int ()' Function 0x223b03daec8 'RSA_padding_add_none' 'int ()'
|   |   |   |-ImplicitCastExpr 0x223b03db088 <col:34> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03dafb0 <col:34> 'unsigned char *' lvalue Var 0x223b03dd7e8 'buf' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03db0a0 <col:39> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03dafd0 <col:39> 'int' lvalue Var 0x223b03dd648 'num' 'int'
|   |   |   |-ImplicitCastExpr 0x223b03db0b8 <col:44> 'const unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03daff0 <col:44> 'const unsigned char *' lvalue ParmVar 0x223b03dd298 'from' 'const unsigned char *'
|   |   |   `-ImplicitCastExpr 0x223b03db0d0 <col:50> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x223b03db010 <col:50> 'int' lvalue ParmVar 0x223b03dd218 'flen' 'int'
|   |   |-BreakStmt 0x223b03db108 <line:112:9>
|   |   |-DefaultStmt 0x223b03db138 <line:113:5, col:12>
|   |   | `-NullStmt 0x223b03db130 <col:12>
|   |   `-GotoStmt 0x223b03db158 <line:115:9, col:14> 'err' 0x223b03dc020
|   |-IfStmt 0x223b03db260 <line:117:5, line:118:14>
|   | |-BinaryOperator 0x223b03db228 <line:117:9, col:14> 'int' '<='
|   | | |-ImplicitCastExpr 0x223b03db210 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x223b03db1c8 <col:9> 'int' lvalue Var 0x223b03dd5c8 'i' 'int'
|   | | `-IntegerLiteral 0x223b03db1e8 <col:14> 'int' 0
|   | `-GotoStmt 0x223b03db248 <line:118:9, col:14> 'err' 0x223b03dc020
|   |-IfStmt 0x223b03db3f8 <line:120:5, line:121:14>
|   | |-OpaqueValueExpr 0x223b03db3e0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03db3c8 <col:9, col:14> 'err' 0x223b03dc020
|   |-IfStmt 0x223b03db4c0 <line:123:5, line:128:5>
|   | |-OpaqueValueExpr 0x223b03db4a8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03db490 <line:123:34, line:128:5>
|   |   `-GotoStmt 0x223b03db478 <line:127:9, col:14> 'err' 0x223b03dc020
|   |-IfStmt 0x223b03db648 <line:130:5, line:133:18>
|   | |-OpaqueValueExpr 0x223b03db630 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x223b03db618 <line:131:9, line:133:18>
|   |   |-OpaqueValueExpr 0x223b03db600 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x223b03db5e8 <col:13, col:18> 'err' 0x223b03dc020
|   |-IfStmt 0x223b03db690 <line:135:5, line:137:14>
|   | |-OpaqueValueExpr 0x223b03db678 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03db660 <col:9, col:14> 'err' 0x223b03dc020
|   |-LabelStmt 0x223b03db960 <line:144:2, col:5> 'err'
|   | `-NullStmt 0x223b03db958 <col:5>
|   |-CallExpr 0x223b03dbbf0 <line:148:5, col:32> 'int'
|   | |-ImplicitCastExpr 0x223b03dbbd8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x223b03dbb78 <col:5> 'int ()' Function 0x223b03dbab0 'OPENSSL_clear_free' 'int ()'
|   | |-ImplicitCastExpr 0x223b03dbc20 <col:24> 'unsigned char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x223b03dbb98 <col:24> 'unsigned char *' lvalue Var 0x223b03dd7e8 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x223b03dbc38 <col:29> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x223b03dbbb8 <col:29> 'int' lvalue Var 0x223b03dd648 'num' 'int'
|   `-ReturnStmt 0x223b03dbca8 <line:149:5, col:14>
|     `-ImplicitCastExpr 0x223b03dbc90 <col:12, col:14> 'int' <LValueToRValue>
|       `-ParenExpr 0x223b03dbc70 <col:12, col:14> 'int' lvalue
|         `-DeclRefExpr 0x223b03dbc50 <col:13> 'int' lvalue Var 0x223b03dd6f0 'r' 'int'
|-FunctionDecl 0x223b03ddfb0 <line:152:1, line:189:1> line:152:21 invalid rsa_get_blinding 'int *(int *, int *, int *)' static
| |-ParmVarDecl 0x223b03dbd68 <col:38, col:43> col:43 invalid rsa 'int *'
| |-ParmVarDecl 0x223b03dde40 <col:48, col:53> col:53 used local 'int *'
| |-ParmVarDecl 0x223b03ddec0 <col:60, col:68> col:68 invalid ctx 'int *'
| `-CompoundStmt 0x223b03de7d8 <line:153:1, line:189:1>
|   |-IfStmt 0x223b03de2c8 <line:158:5, line:160:5>
|   | |-OpaqueValueExpr 0x223b03de2b0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03de2a0 <line:158:32, line:160:5>
|   |-IfStmt 0x223b03de360 <line:163:5, line:164:14>
|   | |-OpaqueValueExpr 0x223b03de348 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03de330 <col:9, col:14> 'err' 0x223b03de2e0
|   |-IfStmt 0x223b03de680 <line:166:5, line:184:5> has_else
|   | |-OpaqueValueExpr 0x223b03de668 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x223b03de538 <line:166:45, line:170:5>
|   | | `-BinaryOperator 0x223b03de518 <line:169:9, col:18> 'int' '='
|   | |   |-UnaryOperator 0x223b03de4d8 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   | |   | `-ImplicitCastExpr 0x223b03de4c0 <col:10> 'int *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x223b03de488 <col:10> 'int *' lvalue ParmVar 0x223b03dde40 'local' 'int *'
|   | |   `-IntegerLiteral 0x223b03de4f0 <col:18> 'int' 1
|   | `-CompoundStmt 0x223b03de648 <line:170:12, line:184:5>
|   |   |-BinaryOperator 0x223b03de5c8 <line:178:9, col:18> 'int' '='
|   |   | |-UnaryOperator 0x223b03de588 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x223b03de570 <col:10> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x223b03de550 <col:10> 'int *' lvalue ParmVar 0x223b03dde40 'local' 'int *'
|   |   | `-IntegerLiteral 0x223b03de5a0 <col:18> 'int' 0
|   |   `-IfStmt 0x223b03de630 <line:180:9, line:182:9>
|   |     |-OpaqueValueExpr 0x223b03de618 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x223b03de608 <line:180:39, line:182:9>
|   `-LabelStmt 0x223b03de7c0 <line:186:2, col:5> 'err'
|     `-NullStmt 0x223b03de7b8 <col:5>
|-FunctionDecl 0x223b03deaa0 <line:191:1, line:211:1> line:191:12 invalid rsa_blinding_convert 'int (int *, int *, int *, int *)' static
| |-ParmVarDecl 0x223b03de820 <col:33, col:46> col:46 invalid b 'int *'
| |-ParmVarDecl 0x223b03de8a0 <col:49, col:57> col:57 invalid f 'int *'
| |-ParmVarDecl 0x223b03de920 <col:60, col:68> col:68 invalid unblind 'int *'
| |-ParmVarDecl 0x223b03de9a0 <line:192:33, col:41> col:41 invalid ctx 'int *'
| `-CompoundStmt 0x223b03d6fe8 <line:193:1, line:211:1>
|   `-IfStmt 0x223b03d6fc0 <line:194:5, line:210:5> has_else
|     |-OpaqueValueExpr 0x223b03d6fa8 <<invalid sloc>> '_Bool'
|     |-NullStmt 0x223b03d6fa0 <line:198:9>
|     `-CompoundStmt 0x223b03d6f80 <line:199:10, line:210:5>
|       |-DeclStmt 0x223b03ded08 <line:203:9, col:16>
|       | `-VarDecl 0x223b03deca0 <col:9, col:13> col:13 used ret 'int'
|       `-ReturnStmt 0x223b03d6f70 <line:209:9, col:16>
|         `-ImplicitCastExpr 0x223b03d6f58 <col:16> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x223b03d6f38 <col:16> 'int' lvalue Var 0x223b03deca0 'ret' 'int'
|-FunctionDecl 0x223b03d7248 <line:213:1, line:225:1> line:213:12 invalid rsa_blinding_invert 'int (int *, int *, int *, int *)' static
| |-ParmVarDecl 0x223b03d7018 <col:32, col:45> col:45 invalid b 'int *'
| |-ParmVarDecl 0x223b03d7098 <col:48, col:56> col:56 invalid f 'int *'
| |-ParmVarDecl 0x223b03d7118 <col:59, col:67> col:67 invalid unblind 'int *'
| |-ParmVarDecl 0x223b03d7198 <line:214:32, col:40> col:40 invalid ctx 'int *'
| `-CompoundStmt 0x223b03d7430 <line:215:1, line:225:1>
|-FunctionDecl 0x223b03d7710 <line:228:1, line:354:1> line:228:12 invalid rsa_ossl_private_encrypt 'int (int, const unsigned char *, unsigned char *, int *, int)' static
| |-ParmVarDecl 0x223b03d7458 <col:37, col:41> col:41 used flen 'int'
| |-ParmVarDecl 0x223b03d74d8 <col:47, col:68> col:68 used from 'const unsigned char *'
| |-ParmVarDecl 0x223b03d7558 <line:229:36, col:51> col:51 used to 'unsigned char *'
| |-ParmVarDecl 0x223b03d75d8 <col:55, col:60> col:60 invalid rsa 'int *'
| |-ParmVarDecl 0x223b03d7658 <col:65, col:69> col:69 used padding 'int'
| `-CompoundStmt 0x223b03d8758 <line:230:1, line:354:1>
|   |-DeclStmt 0x223b03d79f8 <line:232:5, col:27>
|   | |-VarDecl 0x223b03d7808 <col:5, col:9> col:9 used i 'int'
|   | |-VarDecl 0x223b03d7888 <col:5, col:18> col:12 used num 'int' cinit
|   | | `-IntegerLiteral 0x223b03d78f0 <col:18> 'int' 0
|   | `-VarDecl 0x223b03d7930 <col:5, col:26> col:21 used r 'int' cinit
|   |   `-UnaryOperator 0x223b03d79c0 <col:25, col:26> 'int' prefix '-'
|   |     `-IntegerLiteral 0x223b03d7998 <col:26> 'int' 1
|   |-DeclStmt 0x223b03d7a90 <line:233:5, col:30>
|   | `-VarDecl 0x223b03d7a28 <col:5, col:20> col:20 used buf 'unsigned char *'
|   |-DeclStmt 0x223b03d7b50 <line:235:5, col:27>
|   | `-VarDecl 0x223b03d7ac0 <col:5, col:26> col:9 used local_blinding 'int' cinit
|   |   `-IntegerLiteral 0x223b03d7b28 <col:26> 'int' 0
|   |-IfStmt 0x223b03d7c40 <line:244:5, line:245:14>
|   | |-OpaqueValueExpr 0x223b03d7c28 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03d7c10 <col:9, col:14> 'err' 0x223b03d7bc0
|   |-BinaryOperator 0x223b03dee80 <line:250:5, col:29> 'unsigned char *' '='
|   | |-DeclRefExpr 0x223b03d7d10 <col:5> 'unsigned char *' lvalue Var 0x223b03d7a28 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x223b03dee68 <col:11, col:29> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x223b03d7da0 <col:11, col:29> 'int'
|   |     |-ImplicitCastExpr 0x223b03d7d88 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x223b03d7d48 <col:11> 'int ()' Function 0x223b03dc4a0 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x223b03dee50 <col:26> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x223b03d7d68 <col:26> 'int' lvalue Var 0x223b03d7888 'num' 'int'
|   |-IfStmt 0x223b03def28 <line:251:5, line:254:5>
|   | |-OpaqueValueExpr 0x223b03def10 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03deef8 <line:251:50, line:254:5>
|   |   `-GotoStmt 0x223b03deee0 <line:253:9, col:14> 'err' 0x223b03d7bc0
|   |-SwitchStmt 0x223b03def90 <line:256:5, line:270:5>
|   | |-ImplicitCastExpr 0x223b03def78 <line:256:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x223b03def40 <col:13> 'int' lvalue ParmVar 0x223b03d7658 'padding' 'int'
|   | `-CompoundStmt 0x223b03df718 <col:22, line:270:5>
|   |   |-BinaryOperator 0x223b03df260 <line:258:9, col:62> 'int' '='
|   |   | |-DeclRefExpr 0x223b03defb0 <col:9> 'int' lvalue Var 0x223b03d7808 'i' 'int'
|   |   | `-CallExpr 0x223b03df1c0 <col:13, col:62> 'int'
|   |   |   |-ImplicitCastExpr 0x223b03df1a8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x223b03df0d8 <col:13> 'int ()' Function 0x223b03df010 'RSA_padding_add_PKCS1_type_1' 'int ()'
|   |   |   |-ImplicitCastExpr 0x223b03df200 <col:42> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03df0f8 <col:42> 'unsigned char *' lvalue Var 0x223b03d7a28 'buf' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03df218 <col:47> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03df118 <col:47> 'int' lvalue Var 0x223b03d7888 'num' 'int'
|   |   |   |-ImplicitCastExpr 0x223b03df230 <col:52> 'const unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03df138 <col:52> 'const unsigned char *' lvalue ParmVar 0x223b03d74d8 'from' 'const unsigned char *'
|   |   |   `-ImplicitCastExpr 0x223b03df248 <col:58> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x223b03df170 <col:58> 'int' lvalue ParmVar 0x223b03d7458 'flen' 'int'
|   |   |-BreakStmt 0x223b03df280 <line:259:9>
|   |   |-BinaryOperator 0x223b03df4f0 <line:261:9, col:54> 'int' '='
|   |   | |-DeclRefExpr 0x223b03df288 <col:9> 'int' lvalue Var 0x223b03d7808 'i' 'int'
|   |   | `-CallExpr 0x223b03df450 <col:13, col:54> 'int'
|   |   |   |-ImplicitCastExpr 0x223b03df438 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x223b03df398 <col:13> 'int ()' Function 0x223b03df2d0 'RSA_padding_add_X931' 'int ()'
|   |   |   |-ImplicitCastExpr 0x223b03df490 <col:34> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03df3b8 <col:34> 'unsigned char *' lvalue Var 0x223b03d7a28 'buf' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03df4a8 <col:39> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03df3d8 <col:39> 'int' lvalue Var 0x223b03d7888 'num' 'int'
|   |   |   |-ImplicitCastExpr 0x223b03df4c0 <col:44> 'const unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03df3f8 <col:44> 'const unsigned char *' lvalue ParmVar 0x223b03d74d8 'from' 'const unsigned char *'
|   |   |   `-ImplicitCastExpr 0x223b03df4d8 <col:50> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x223b03df418 <col:50> 'int' lvalue ParmVar 0x223b03d7458 'flen' 'int'
|   |   |-BreakStmt 0x223b03df510 <line:262:9>
|   |   |-BinaryOperator 0x223b03df690 <line:264:9, col:54> 'int' '='
|   |   | |-DeclRefExpr 0x223b03df518 <col:9> 'int' lvalue Var 0x223b03d7808 'i' 'int'
|   |   | `-CallExpr 0x223b03df5f0 <col:13, col:54> 'int'
|   |   |   |-ImplicitCastExpr 0x223b03df5d8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x223b03df538 <col:13> 'int ()' Function 0x223b03daec8 'RSA_padding_add_none' 'int ()'
|   |   |   |-ImplicitCastExpr 0x223b03df630 <col:34> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03df558 <col:34> 'unsigned char *' lvalue Var 0x223b03d7a28 'buf' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03df648 <col:39> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03df578 <col:39> 'int' lvalue Var 0x223b03d7888 'num' 'int'
|   |   |   |-ImplicitCastExpr 0x223b03df660 <col:44> 'const unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03df598 <col:44> 'const unsigned char *' lvalue ParmVar 0x223b03d74d8 'from' 'const unsigned char *'
|   |   |   `-ImplicitCastExpr 0x223b03df678 <col:50> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x223b03df5b8 <col:50> 'int' lvalue ParmVar 0x223b03d7458 'flen' 'int'
|   |   |-BreakStmt 0x223b03df6b0 <line:265:9>
|   |   |-DefaultStmt 0x223b03df6e0 <line:267:5, col:12>
|   |   | `-NullStmt 0x223b03df6d8 <col:12>
|   |   `-GotoStmt 0x223b03df700 <line:269:9, col:14> 'err' 0x223b03d7bc0
|   |-IfStmt 0x223b03df800 <line:271:5, line:272:14>
|   | |-BinaryOperator 0x223b03df7c8 <line:271:9, col:14> 'int' '<='
|   | | |-ImplicitCastExpr 0x223b03df7b0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x223b03df768 <col:9> 'int' lvalue Var 0x223b03d7808 'i' 'int'
|   | | `-IntegerLiteral 0x223b03df788 <col:14> 'int' 0
|   | `-GotoStmt 0x223b03df7e8 <line:272:9, col:14> 'err' 0x223b03d7bc0
|   |-IfStmt 0x223b03df8a8 <line:274:5, line:275:14>
|   | |-OpaqueValueExpr 0x223b03df890 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03df878 <col:9, col:14> 'err' 0x223b03d7bc0
|   |-IfStmt 0x223b03df970 <line:277:5, line:282:5>
|   | |-OpaqueValueExpr 0x223b03df958 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03df940 <line:277:34, line:282:5>
|   |   `-GotoStmt 0x223b03df928 <line:281:9, col:14> 'err' 0x223b03d7bc0
|   |-IfStmt 0x223b03dfa08 <line:284:5, line:287:18>
|   | |-OpaqueValueExpr 0x223b03df9f0 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x223b03df9d8 <line:285:9, line:287:18>
|   |   |-OpaqueValueExpr 0x223b03df9c0 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x223b03df9a8 <col:13, col:18> 'err' 0x223b03d7bc0
|   |-IfStmt 0x223b03dfb20 <line:289:5, line:295:5>
|   | |-OpaqueValueExpr 0x223b03dfb08 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03dfaf0 <line:289:47, line:295:5>
|   |   `-IfStmt 0x223b03dfad8 <line:291:9, line:294:9>
|   |     |-OpaqueValueExpr 0x223b03dfac0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x223b03dfaa8 <line:291:31, line:294:9>
|   |       `-GotoStmt 0x223b03dfa90 <line:293:13, col:18> 'err' 0x223b03d7bc0
|   |-IfStmt 0x223b03dfca8 <line:297:5, line:304:5>
|   | |-OpaqueValueExpr 0x223b03dfc90 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03dfc70 <line:297:27, line:304:5>
|   |   |-IfStmt 0x223b03dfc10 <line:298:9, line:301:9>
|   |   | |-OpaqueValueExpr 0x223b03dfbf8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x223b03dfbe0 <line:298:71, line:301:9>
|   |   |   `-GotoStmt 0x223b03dfbc8 <line:300:13, col:18> 'err' 0x223b03d7bc0
|   |   `-IfStmt 0x223b03dfc58 <line:302:9, line:303:18>
|   |     |-OpaqueValueExpr 0x223b03dfc40 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x223b03dfc28 <col:13, col:18> 'err' 0x223b03d7bc0
|   |-IfStmt 0x223b03d8158 <line:306:5, line:327:5> has_else
|   | |-OpaqueValueExpr 0x223b03d8140 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x223b03dfd08 <line:309:78, line:312:5>
|   | | `-IfStmt 0x223b03dfcf0 <line:310:9, line:311:18>
|   | |   |-OpaqueValueExpr 0x223b03dfcd8 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x223b03dfcc0 <col:13, col:18> 'err' 0x223b03d7bc0
|   | `-CompoundStmt 0x223b03d8120 <line:312:12, line:327:5>
|   |   |-IfStmt 0x223b03d7e68 <line:314:9, line:317:9>
|   |   | |-OpaqueValueExpr 0x223b03d7e50 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x223b03d7e38 <line:314:24, line:317:9>
|   |   |   `-GotoStmt 0x223b03d7e20 <line:316:13, col:18> 'err' 0x223b03d7bc0
|   |   `-IfStmt 0x223b03d80e8 <line:320:9, line:324:9>
|   |     |-OpaqueValueExpr 0x223b03d80d0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x223b03d80b8 <line:321:57, line:324:9>
|   |       `-GotoStmt 0x223b03d80a0 <line:323:13, col:18> 'err' 0x223b03d7bc0
|   |-IfStmt 0x223b03d81e0 <line:329:5, line:331:18>
|   | |-OpaqueValueExpr 0x223b03d81c8 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x223b03d81b0 <line:330:9, line:331:18>
|   |   |-OpaqueValueExpr 0x223b03d8198 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x223b03d8180 <col:13, col:18> 'err' 0x223b03d7bc0
|   |-IfStmt 0x223b03d84e0 <line:333:5, line:341:9> has_else
|   | |-OpaqueValueExpr 0x223b03d84c8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x223b03d84a8 <line:333:38, line:340:5>
|   | | `-IfStmt 0x223b03d8358 <line:334:9, line:335:18>
|   | |   |-OpaqueValueExpr 0x223b03d8340 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x223b03d8328 <col:13, col:18> 'err' 0x223b03d7bc0
|   | `-NullStmt 0x223b03d84c0 <line:341:9>
|   |-LabelStmt 0x223b03d85e0 <line:348:2, col:5> 'err'
|   | `-NullStmt 0x223b03d85d8 <col:5>
|   |-CallExpr 0x223b03d8690 <line:352:5, col:32> 'int'
|   | |-ImplicitCastExpr 0x223b03d8678 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x223b03d8618 <col:5> 'int ()' Function 0x223b03dbab0 'OPENSSL_clear_free' 'int ()'
|   | |-ImplicitCastExpr 0x223b03d86c0 <col:24> 'unsigned char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x223b03d8638 <col:24> 'unsigned char *' lvalue Var 0x223b03d7a28 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x223b03d86d8 <col:29> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x223b03d8658 <col:29> 'int' lvalue Var 0x223b03d7888 'num' 'int'
|   `-ReturnStmt 0x223b03d8748 <line:353:5, col:14>
|     `-ImplicitCastExpr 0x223b03d8730 <col:12, col:14> 'int' <LValueToRValue>
|       `-ParenExpr 0x223b03d8710 <col:12, col:14> 'int' lvalue
|         `-DeclRefExpr 0x223b03d86f0 <col:13> 'int' lvalue Var 0x223b03d7930 'r' 'int'
|-FunctionDecl 0x223b03d8ad0 <line:356:1, line:483:1> line:356:12 invalid rsa_ossl_private_decrypt 'int (int, const unsigned char *, unsigned char *, int *, int)' static
| |-ParmVarDecl 0x223b03d8818 <col:37, col:41> col:41 used flen 'int'
| |-ParmVarDecl 0x223b03d8898 <col:47, col:68> col:68 used from 'const unsigned char *'
| |-ParmVarDecl 0x223b03d8918 <line:357:36, col:51> col:51 used to 'unsigned char *'
| |-ParmVarDecl 0x223b03d8998 <col:55, col:60> col:60 invalid rsa 'int *'
| |-ParmVarDecl 0x223b03d8a18 <col:65, col:69> col:69 used padding 'int'
| `-CompoundStmt 0x223b03e1fa0 <line:358:1, line:483:1>
|   |-DeclStmt 0x223b03d8db8 <line:360:5, col:27>
|   | |-VarDecl 0x223b03d8bc8 <col:5, col:9> col:9 used j 'int'
|   | |-VarDecl 0x223b03d8c48 <col:5, col:18> col:12 used num 'int' cinit
|   | | `-IntegerLiteral 0x223b03d8cb0 <col:18> 'int' 0
|   | `-VarDecl 0x223b03d8cf0 <col:5, col:26> col:21 used r 'int' cinit
|   |   `-UnaryOperator 0x223b03d8d80 <col:25, col:26> 'int' prefix '-'
|   |     `-IntegerLiteral 0x223b03d8d58 <col:26> 'int' 1
|   |-DeclStmt 0x223b03dfee0 <line:361:5, col:30>
|   | `-VarDecl 0x223b03dfe78 <col:5, col:20> col:20 used buf 'unsigned char *'
|   |-DeclStmt 0x223b03dffa0 <line:363:5, col:27>
|   | `-VarDecl 0x223b03dff10 <col:5, col:26> col:9 used local_blinding 'int' cinit
|   |   `-IntegerLiteral 0x223b03dff78 <col:26> 'int' 0
|   |-IfStmt 0x223b03e0090 <line:372:5, line:373:14>
|   | |-OpaqueValueExpr 0x223b03e0078 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03e0060 <col:9, col:14> 'err' 0x223b03e0010
|   |-BinaryOperator 0x223b03e0248 <line:378:5, col:29> 'unsigned char *' '='
|   | |-DeclRefExpr 0x223b03e0160 <col:5> 'unsigned char *' lvalue Var 0x223b03dfe78 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x223b03e0230 <col:11, col:29> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x223b03e01f0 <col:11, col:29> 'int'
|   |     |-ImplicitCastExpr 0x223b03e01d8 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x223b03e0198 <col:11> 'int ()' Function 0x223b03dc4a0 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x223b03e0218 <col:26> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x223b03e01b8 <col:26> 'int' lvalue Var 0x223b03d8c48 'num' 'int'
|   |-IfStmt 0x223b03e02f0 <line:379:5, line:382:5>
|   | |-OpaqueValueExpr 0x223b03e02d8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03e02c0 <line:379:50, line:382:5>
|   |   `-GotoStmt 0x223b03e02a8 <line:381:9, col:14> 'err' 0x223b03e0010
|   |-IfStmt 0x223b03e0400 <line:388:5, line:392:5>
|   | |-BinaryOperator 0x223b03e0390 <line:388:9, col:16> 'int' '>'
|   | | |-ImplicitCastExpr 0x223b03e0360 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x223b03e0308 <col:9> 'int' lvalue ParmVar 0x223b03d8818 'flen' 'int'
|   | | `-ImplicitCastExpr 0x223b03e0378 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x223b03e0340 <col:16> 'int' lvalue Var 0x223b03d8c48 'num' 'int'
|   | `-CompoundStmt 0x223b03e03e8 <col:21, line:392:5>
|   |   `-GotoStmt 0x223b03e03d0 <line:391:9, col:14> 'err' 0x223b03e0010
|   |-IfStmt 0x223b03e0518 <line:395:5, line:396:14>
|   | |-OpaqueValueExpr 0x223b03e0500 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03e04e8 <col:9, col:14> 'err' 0x223b03e0010
|   |-IfStmt 0x223b03e05e0 <line:398:5, line:402:5>
|   | |-OpaqueValueExpr 0x223b03e05c8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03e05b0 <line:398:34, line:402:5>
|   |   `-GotoStmt 0x223b03e0598 <line:401:9, col:14> 'err' 0x223b03e0010
|   |-IfStmt 0x223b03e06f8 <line:404:5, line:410:5>
|   | |-OpaqueValueExpr 0x223b03e06e0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03e06c8 <line:404:47, line:410:5>
|   |   `-IfStmt 0x223b03e06b0 <line:406:9, line:409:9>
|   |     |-OpaqueValueExpr 0x223b03e0698 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x223b03e0680 <line:406:31, line:409:9>
|   |       `-GotoStmt 0x223b03e0668 <line:408:13, col:18> 'err' 0x223b03e0010
|   |-IfStmt 0x223b03e0880 <line:412:5, line:419:5>
|   | |-OpaqueValueExpr 0x223b03e0868 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03e0848 <line:412:27, line:419:5>
|   |   |-IfStmt 0x223b03e07e8 <line:413:9, line:416:9>
|   |   | |-OpaqueValueExpr 0x223b03e07d0 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x223b03e07b8 <line:413:71, line:416:9>
|   |   |   `-GotoStmt 0x223b03e07a0 <line:415:13, col:18> 'err' 0x223b03e0010
|   |   `-IfStmt 0x223b03e0830 <line:417:9, line:418:18>
|   |     |-OpaqueValueExpr 0x223b03e0818 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x223b03e0800 <col:13, col:18> 'err' 0x223b03e0010
|   |-IfStmt 0x223b03e0ba0 <line:422:5, line:449:5> has_else
|   | |-OpaqueValueExpr 0x223b03e0b88 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x223b03e08e0 <line:425:78, line:428:5>
|   | | `-IfStmt 0x223b03e08c8 <line:426:9, line:427:18>
|   | |   |-OpaqueValueExpr 0x223b03e08b0 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x223b03e0898 <col:13, col:18> 'err' 0x223b03e0010
|   | `-CompoundStmt 0x223b03e0b60 <line:428:12, line:449:5>
|   |   |-IfStmt 0x223b03e09b8 <line:430:9, line:433:9>
|   |   | |-OpaqueValueExpr 0x223b03e09a0 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x223b03e0988 <line:430:24, line:433:9>
|   |   |   `-GotoStmt 0x223b03e0970 <line:432:13, col:18> 'err' 0x223b03e0010
|   |   |-IfStmt 0x223b03e0aa8 <line:436:9, line:441:13>
|   |   | |-OpaqueValueExpr 0x223b03e0a90 <<invalid sloc>> '_Bool'
|   |   | `-IfStmt 0x223b03e0a78 <line:437:13, line:441:13>
|   |   |   |-OpaqueValueExpr 0x223b03e0a60 <<invalid sloc>> '_Bool'
|   |   |   `-CompoundStmt 0x223b03e0a48 <line:438:55, line:441:13>
|   |   |     `-GotoStmt 0x223b03e0a30 <line:440:17, col:22> 'err' 0x223b03e0010
|   |   `-IfStmt 0x223b03e0b28 <line:442:9, line:446:9>
|   |     |-OpaqueValueExpr 0x223b03e0b10 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x223b03e0af8 <line:443:57, line:446:9>
|   |       `-GotoStmt 0x223b03e0ae0 <line:445:13, col:18> 'err' 0x223b03e0010
|   |-IfStmt 0x223b03e0c28 <line:451:5, line:453:18>
|   | |-OpaqueValueExpr 0x223b03e0c10 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x223b03e0bf8 <line:452:9, line:453:18>
|   |   |-OpaqueValueExpr 0x223b03e0be0 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x223b03e0bc8 <col:13, col:18> 'err' 0x223b03e0010
|   |-SwitchStmt 0x223b03e0d28 <line:457:5, line:473:5>
|   | |-ImplicitCastExpr 0x223b03e0d10 <line:457:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x223b03e0cd8 <col:13> 'int' lvalue ParmVar 0x223b03d8a18 'padding' 'int'
|   | `-CompoundStmt 0x223b03da9b8 <col:22, line:473:5>
|   |   |-BinaryOperator 0x223b03d9fc8 <line:459:9, col:64> 'int' '='
|   |   | |-DeclRefExpr 0x223b03e0d48 <col:9> 'int' lvalue Var 0x223b03d8cf0 'r' 'int'
|   |   | `-CallExpr 0x223b03d9f08 <col:13, col:64> 'int'
|   |   |   |-ImplicitCastExpr 0x223b03d9ef0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x223b03d9e18 <col:13> 'int ()' Function 0x223b03e0da8 'RSA_padding_check_PKCS1_type_2' 'int ()'
|   |   |   |-ImplicitCastExpr 0x223b03d9f50 <col:44> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03d9e38 <col:44> 'unsigned char *' lvalue ParmVar 0x223b03d8918 'to' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03d9f68 <col:48> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03d9e70 <col:48> 'int' lvalue Var 0x223b03d8c48 'num' 'int'
|   |   |   |-ImplicitCastExpr 0x223b03d9f80 <col:53> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03d9e90 <col:53> 'unsigned char *' lvalue Var 0x223b03dfe78 'buf' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03d9f98 <col:58> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03d9eb0 <col:58> 'int' lvalue Var 0x223b03d8bc8 'j' 'int'
|   |   |   `-ImplicitCastExpr 0x223b03d9fb0 <col:61> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x223b03d9ed0 <col:61> 'int' lvalue Var 0x223b03d8c48 'num' 'int'
|   |   |-BreakStmt 0x223b03d9fe8 <line:460:9>
|   |   |-BreakStmt 0x223b03da1e8 <line:463:9>
|   |   |-BinaryOperator 0x223b03da498 <line:465:9, col:58> 'int' '='
|   |   | |-DeclRefExpr 0x223b03da1f0 <col:9> 'int' lvalue Var 0x223b03d8cf0 'r' 'int'
|   |   | `-CallExpr 0x223b03da3d8 <col:13, col:58> 'int'
|   |   |   |-ImplicitCastExpr 0x223b03da3c0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x223b03da300 <col:13> 'int ()' Function 0x223b03da238 'RSA_padding_check_SSLv23' 'int ()'
|   |   |   |-ImplicitCastExpr 0x223b03da420 <col:38> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03da320 <col:38> 'unsigned char *' lvalue ParmVar 0x223b03d8918 'to' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03da438 <col:42> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03da340 <col:42> 'int' lvalue Var 0x223b03d8c48 'num' 'int'
|   |   |   |-ImplicitCastExpr 0x223b03da450 <col:47> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03da360 <col:47> 'unsigned char *' lvalue Var 0x223b03dfe78 'buf' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03da468 <col:52> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03da380 <col:52> 'int' lvalue Var 0x223b03d8bc8 'j' 'int'
|   |   |   `-ImplicitCastExpr 0x223b03da480 <col:55> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x223b03da3a0 <col:55> 'int' lvalue Var 0x223b03d8c48 'num' 'int'
|   |   |-BreakStmt 0x223b03da4b8 <line:466:9>
|   |   |-CallExpr 0x223b03da8a0 <line:468:9, col:32> 'void *'
|   |   | |-ImplicitCastExpr 0x223b03da888 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x223b03da720 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x223b03da530 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x223b03da8f0 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x223b03da8d8 <col:16> 'unsigned char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x223b03da758 <col:16> 'unsigned char *' lvalue ParmVar 0x223b03d8918 'to' 'unsigned char *'
|   |   | |-ImplicitCastExpr 0x223b03da920 <col:20> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x223b03da908 <col:20> 'unsigned char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x223b03da778 <col:20> 'unsigned char *' lvalue Var 0x223b03dfe78 'buf' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x223b03da938 <col:25, col:31> 'unsigned long long' <IntegralCast>
|   |   |   `-ParenExpr 0x223b03da810 <col:25, col:31> 'int'
|   |   |     `-BinaryOperator 0x223b03da7f0 <col:26, col:30> 'int' '='
|   |   |       |-DeclRefExpr 0x223b03da798 <col:26> 'int' lvalue Var 0x223b03d8cf0 'r' 'int'
|   |   |       `-ImplicitCastExpr 0x223b03da7d8 <col:30> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x223b03da7b8 <col:30> 'int' lvalue Var 0x223b03d8bc8 'j' 'int'
|   |   |-BreakStmt 0x223b03da950 <line:469:9>
|   |   |-DefaultStmt 0x223b03da980 <line:470:5, col:12>
|   |   | `-NullStmt 0x223b03da978 <col:12>
|   |   `-GotoStmt 0x223b03da9a0 <line:472:9, col:14> 'err' 0x223b03e0010
|   |-CallExpr 0x223b03dad40 <line:475:5, col:59> 'int'
|   | |-ImplicitCastExpr 0x223b03dad28 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x223b03dab20 <col:5> 'int ()' Function 0x223b03daa58 'err_clear_last_constant_time' 'int ()'
|   | `-BinaryOperator 0x223b03dad08 <col:34, col:58> 'int' '&'
|   |   |-IntegerLiteral 0x223b03dab40 <col:34> 'int' 1
|   |   `-UnaryOperator 0x223b03dacf0 <col:38, col:58> 'int' prefix '~' cannot overflow
|   |     `-CallExpr 0x223b03dacb0 <col:39, col:58> 'int'
|   |       |-ImplicitCastExpr 0x223b03dac98 <col:39> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x223b03dac58 <col:39> 'int ()' Function 0x223b03dab90 'constant_time_msb' 'int ()'
|   |       `-ImplicitCastExpr 0x223b03dacd8 <col:57> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x223b03dac78 <col:57> 'int' lvalue Var 0x223b03d8cf0 'r' 'int'
|   |-LabelStmt 0x223b03dad90 <line:477:2, col:5> 'err'
|   | `-NullStmt 0x223b03dad88 <col:5>
|   |-CallExpr 0x223b03e1ed8 <line:481:5, col:32> 'int'
|   | |-ImplicitCastExpr 0x223b03e1ec0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x223b03dadc8 <col:5> 'int ()' Function 0x223b03dbab0 'OPENSSL_clear_free' 'int ()'
|   | |-ImplicitCastExpr 0x223b03e1f08 <col:24> 'unsigned char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x223b03e1e80 <col:24> 'unsigned char *' lvalue Var 0x223b03dfe78 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x223b03e1f20 <col:29> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x223b03e1ea0 <col:29> 'int' lvalue Var 0x223b03d8c48 'num' 'int'
|   `-ReturnStmt 0x223b03e1f90 <line:482:5, col:14>
|     `-ImplicitCastExpr 0x223b03e1f78 <col:12, col:14> 'int' <LValueToRValue>
|       `-ParenExpr 0x223b03e1f58 <col:12, col:14> 'int' lvalue
|         `-DeclRefExpr 0x223b03e1f38 <col:13> 'int' lvalue Var 0x223b03d8cf0 'r' 'int'
|-FunctionDecl 0x223b03da530 <line:468:9> col:9 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x223b03da5d0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x223b03da638 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x223b03da6a0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x223b03e2310 <line:486:1, line:580:1> line:486:12 invalid rsa_ossl_public_decrypt 'int (int, const unsigned char *, unsigned char *, int *, int)' static
| |-ParmVarDecl 0x223b03e2058 <col:36, col:40> col:40 used flen 'int'
| |-ParmVarDecl 0x223b03e20d8 <col:46, col:67> col:67 used from 'const unsigned char *'
| |-ParmVarDecl 0x223b03e2158 <line:487:35, col:50> col:50 used to 'unsigned char *'
| |-ParmVarDecl 0x223b03e21d8 <col:54, col:59> col:59 invalid rsa 'int *'
| |-ParmVarDecl 0x223b03e2258 <col:64, col:68> col:68 used padding 'int'
| `-CompoundStmt 0x223b03e6ee0 <line:488:1, line:580:1>
|   |-DeclStmt 0x223b03e25f8 <line:490:5, col:27>
|   | |-VarDecl 0x223b03e2408 <col:5, col:9> col:9 used i 'int'
|   | |-VarDecl 0x223b03e2488 <col:5, col:18> col:12 used num 'int' cinit
|   | | `-IntegerLiteral 0x223b03e24f0 <col:18> 'int' 0
|   | `-VarDecl 0x223b03e2530 <col:5, col:26> col:21 used r 'int' cinit
|   |   `-UnaryOperator 0x223b03e25c0 <col:25, col:26> 'int' prefix '-'
|   |     `-IntegerLiteral 0x223b03e2598 <col:26> 'int' 1
|   |-DeclStmt 0x223b03e2690 <line:491:5, col:30>
|   | `-VarDecl 0x223b03e2628 <col:5, col:20> col:20 used buf 'unsigned char *'
|   |-IfStmt 0x223b03e2768 <line:494:5, line:497:5>
|   | |-OpaqueValueExpr 0x223b03e2750 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03e2738 <line:494:61, line:497:5>
|   |   `-ReturnStmt 0x223b03e2728 <line:496:9, col:17>
|   |     `-UnaryOperator 0x223b03e2710 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x223b03e26e8 <col:17> 'int' 1
|   |-IfStmt 0x223b03e2868 <line:499:5, line:502:5>
|   | |-OpaqueValueExpr 0x223b03e2850 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03e2838 <line:499:39, line:502:5>
|   |   `-ReturnStmt 0x223b03e2828 <line:501:9, col:17>
|   |     `-UnaryOperator 0x223b03e2810 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x223b03e27e8 <col:17> 'int' 1
|   |-IfStmt 0x223b03e29a8 <line:505:5, line:510:5>
|   | |-OpaqueValueExpr 0x223b03e2990 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03e2978 <line:505:63, line:510:5>
|   |   `-IfStmt 0x223b03e2960 <line:506:9, line:509:9>
|   |     |-OpaqueValueExpr 0x223b03e2948 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x223b03e2930 <line:506:64, line:509:9>
|   |       `-ReturnStmt 0x223b03e2920 <line:508:13, col:21>
|   |         `-UnaryOperator 0x223b03e2908 <col:20, col:21> 'int' prefix '-'
|   |           `-IntegerLiteral 0x223b03e28e0 <col:21> 'int' 1
|   |-IfStmt 0x223b03e2a98 <line:512:5, line:513:14>
|   | |-OpaqueValueExpr 0x223b03e2a80 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03e2a68 <col:9, col:14> 'err' 0x223b03e2a18
|   |-BinaryOperator 0x223b03e2c50 <line:518:5, col:29> 'unsigned char *' '='
|   | |-DeclRefExpr 0x223b03e2b68 <col:5> 'unsigned char *' lvalue Var 0x223b03e2628 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x223b03e2c38 <col:11, col:29> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x223b03e2bf8 <col:11, col:29> 'int'
|   |     |-ImplicitCastExpr 0x223b03e2be0 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x223b03e2ba0 <col:11> 'int ()' Function 0x223b03dc4a0 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x223b03e2c20 <col:26> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x223b03e2bc0 <col:26> 'int' lvalue Var 0x223b03e2488 'num' 'int'
|   |-IfStmt 0x223b03e2cf8 <line:519:5, line:522:5>
|   | |-OpaqueValueExpr 0x223b03e2ce0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03e2cc8 <line:519:50, line:522:5>
|   |   `-GotoStmt 0x223b03e2cb0 <line:521:9, col:14> 'err' 0x223b03e2a18
|   |-IfStmt 0x223b03e2e08 <line:528:5, line:531:5>
|   | |-BinaryOperator 0x223b03e2d98 <line:528:9, col:16> 'int' '>'
|   | | |-ImplicitCastExpr 0x223b03e2d68 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x223b03e2d10 <col:9> 'int' lvalue ParmVar 0x223b03e2058 'flen' 'int'
|   | | `-ImplicitCastExpr 0x223b03e2d80 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x223b03e2d48 <col:16> 'int' lvalue Var 0x223b03e2488 'num' 'int'
|   | `-CompoundStmt 0x223b03e2df0 <col:21, line:531:5>
|   |   `-GotoStmt 0x223b03e2dd8 <line:530:9, col:14> 'err' 0x223b03e2a18
|   |-IfStmt 0x223b03e2ee0 <line:533:5, line:534:14>
|   | |-OpaqueValueExpr 0x223b03e2ec8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03e2eb0 <col:9, col:14> 'err' 0x223b03e2a18
|   |-IfStmt 0x223b03e2fa8 <line:536:5, line:540:5>
|   | |-OpaqueValueExpr 0x223b03e2f90 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03e2f78 <line:536:34, line:540:5>
|   |   `-GotoStmt 0x223b03e2f60 <line:539:9, col:14> 'err' 0x223b03e2a18
|   |-IfStmt 0x223b03e3040 <line:542:5, line:545:18>
|   | |-OpaqueValueExpr 0x223b03e3028 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x223b03e3010 <line:543:9, line:545:18>
|   |   |-OpaqueValueExpr 0x223b03e2ff8 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x223b03e2fe0 <col:13, col:18> 'err' 0x223b03e2a18
|   |-IfStmt 0x223b03e3088 <line:547:5, line:549:14>
|   | |-OpaqueValueExpr 0x223b03e3070 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03e3058 <col:9, col:14> 'err' 0x223b03e2a18
|   |-IfStmt 0x223b03e32e0 <line:551:5, line:553:18>
|   | |-OpaqueValueExpr 0x223b03e32c8 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x223b03e32b0 <line:552:9, line:553:18>
|   |   |-OpaqueValueExpr 0x223b03e3298 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x223b03e3280 <col:13, col:18> 'err' 0x223b03e2a18
|   |-SwitchStmt 0x223b03e33c8 <line:557:5, line:570:5>
|   | |-ImplicitCastExpr 0x223b03e33b0 <line:557:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x223b03e3390 <col:13> 'int' lvalue ParmVar 0x223b03e2258 'padding' 'int'
|   | `-CompoundStmt 0x223b03e3c10 <col:22, line:570:5>
|   |   |-BinaryOperator 0x223b03e36c0 <line:559:9, col:64> 'int' '='
|   |   | |-DeclRefExpr 0x223b03e33e8 <col:9> 'int' lvalue Var 0x223b03e2530 'r' 'int'
|   |   | `-CallExpr 0x223b03e3600 <col:13, col:64> 'int'
|   |   |   |-ImplicitCastExpr 0x223b03e35e8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x223b03e3510 <col:13> 'int ()' Function 0x223b03e3448 'RSA_padding_check_PKCS1_type_1' 'int ()'
|   |   |   |-ImplicitCastExpr 0x223b03e3648 <col:44> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03e3530 <col:44> 'unsigned char *' lvalue ParmVar 0x223b03e2158 'to' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03e3660 <col:48> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03e3568 <col:48> 'int' lvalue Var 0x223b03e2488 'num' 'int'
|   |   |   |-ImplicitCastExpr 0x223b03e3678 <col:53> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03e3588 <col:53> 'unsigned char *' lvalue Var 0x223b03e2628 'buf' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03e3690 <col:58> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03e35a8 <col:58> 'int' lvalue Var 0x223b03e2408 'i' 'int'
|   |   |   `-ImplicitCastExpr 0x223b03e36a8 <col:61> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x223b03e35c8 <col:61> 'int' lvalue Var 0x223b03e2488 'num' 'int'
|   |   |-BreakStmt 0x223b03e36e0 <line:560:9>
|   |   |-BinaryOperator 0x223b03e3990 <line:562:9, col:56> 'int' '='
|   |   | |-DeclRefExpr 0x223b03e36e8 <col:9> 'int' lvalue Var 0x223b03e2530 'r' 'int'
|   |   | `-CallExpr 0x223b03e38d0 <col:13, col:56> 'int'
|   |   |   |-ImplicitCastExpr 0x223b03e38b8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x223b03e37f8 <col:13> 'int ()' Function 0x223b03e3730 'RSA_padding_check_X931' 'int ()'
|   |   |   |-ImplicitCastExpr 0x223b03e3918 <col:36> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03e3818 <col:36> 'unsigned char *' lvalue ParmVar 0x223b03e2158 'to' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03e3930 <col:40> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03e3838 <col:40> 'int' lvalue Var 0x223b03e2488 'num' 'int'
|   |   |   |-ImplicitCastExpr 0x223b03e3948 <col:45> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03e3858 <col:45> 'unsigned char *' lvalue Var 0x223b03e2628 'buf' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x223b03e3960 <col:50> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x223b03e3878 <col:50> 'int' lvalue Var 0x223b03e2408 'i' 'int'
|   |   |   `-ImplicitCastExpr 0x223b03e3978 <col:53> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x223b03e3898 <col:53> 'int' lvalue Var 0x223b03e2488 'num' 'int'
|   |   |-BreakStmt 0x223b03e39b0 <line:563:9>
|   |   |-CallExpr 0x223b03e3af8 <line:565:9, col:32> 'void *'
|   |   | |-ImplicitCastExpr 0x223b03e3ae0 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x223b03e39b8 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x223b03da530 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x223b03e3b48 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x223b03e3b30 <col:16> 'unsigned char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x223b03e39d8 <col:16> 'unsigned char *' lvalue ParmVar 0x223b03e2158 'to' 'unsigned char *'
|   |   | |-ImplicitCastExpr 0x223b03e3b78 <col:20> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x223b03e3b60 <col:20> 'unsigned char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x223b03e39f8 <col:20> 'unsigned char *' lvalue Var 0x223b03e2628 'buf' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x223b03e3b90 <col:25, col:31> 'unsigned long long' <IntegralCast>
|   |   |   `-ParenExpr 0x223b03e3a90 <col:25, col:31> 'int'
|   |   |     `-BinaryOperator 0x223b03e3a70 <col:26, col:30> 'int' '='
|   |   |       |-DeclRefExpr 0x223b03e3a18 <col:26> 'int' lvalue Var 0x223b03e2530 'r' 'int'
|   |   |       `-ImplicitCastExpr 0x223b03e3a58 <col:30> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x223b03e3a38 <col:30> 'int' lvalue Var 0x223b03e2408 'i' 'int'
|   |   |-BreakStmt 0x223b03e3ba8 <line:566:9>
|   |   |-DefaultStmt 0x223b03e3bd8 <line:567:5, col:12>
|   |   | `-NullStmt 0x223b03e3bd0 <col:12>
|   |   `-GotoStmt 0x223b03e3bf8 <line:569:9, col:14> 'err' 0x223b03e2a18
|   |-LabelStmt 0x223b03e3d28 <line:574:2, col:5> 'err'
|   | `-NullStmt 0x223b03e3d20 <col:5>
|   |-CallExpr 0x223b03e3dd8 <line:578:5, col:32> 'int'
|   | |-ImplicitCastExpr 0x223b03e3dc0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x223b03e3d60 <col:5> 'int ()' Function 0x223b03dbab0 'OPENSSL_clear_free' 'int ()'
|   | |-ImplicitCastExpr 0x223b03e3e08 <col:24> 'unsigned char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x223b03e3d80 <col:24> 'unsigned char *' lvalue Var 0x223b03e2628 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x223b03e3e20 <col:29> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x223b03e3da0 <col:29> 'int' lvalue Var 0x223b03e2488 'num' 'int'
|   `-ReturnStmt 0x223b03e6ed0 <line:579:5, col:14>
|     `-ImplicitCastExpr 0x223b03e3e78 <col:12, col:14> 'int' <LValueToRValue>
|       `-ParenExpr 0x223b03e3e58 <col:12, col:14> 'int' lvalue
|         `-DeclRefExpr 0x223b03e3e38 <col:13> 'int' lvalue Var 0x223b03e2530 'r' 'int'
|-FunctionDecl 0x223b03e71c8 <line:582:1, line:831:1> line:582:12 invalid rsa_ossl_mod_exp 'int (int *, const int *, int *, int *)' static
| |-ParmVarDecl 0x223b03e6f98 <col:29, col:37> col:37 invalid r0 'int *'
| |-ParmVarDecl 0x223b03e7018 <col:41, col:55> col:55 invalid I 'const int *'
| |-ParmVarDecl 0x223b03e7098 <col:58, col:63> col:63 invalid rsa 'int *'
| |-ParmVarDecl 0x223b03e7118 <col:68, col:76> col:76 invalid ctx 'int *'
| `-CompoundStmt 0x223b03eca68 <line:583:1, line:831:1>
|   |-DeclStmt 0x223b03e7408 <line:585:5, col:28>
|   | |-VarDecl 0x223b03e72b8 <col:5, col:15> col:9 used ret 'int' cinit
|   | | `-IntegerLiteral 0x223b03e7320 <col:15> 'int' 0
|   | `-VarDecl 0x223b03e7360 <col:5, col:27> col:18 used smooth 'int' cinit
|   |   `-IntegerLiteral 0x223b03e73c8 <col:27> 'int' 0
|   |-IfStmt 0x223b03e7520 <line:592:5, line:593:14>
|   | |-OpaqueValueExpr 0x223b03e7508 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03e74f0 <col:9, col:14> 'err' 0x223b03e74a0
|   |-IfStmt 0x223b03e77a8 <line:595:5, line:621:5>
|   | |-OpaqueValueExpr 0x223b03e7790 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x223b03e7770 <line:595:46, line:621:5>
|   |   |-IfStmt 0x223b03e75c0 <line:598:9, line:599:18>
|   |   | |-OpaqueValueExpr 0x223b03e75a8 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x223b03e7590 <col:13, col:18> 'err' 0x223b03e74a0
|   |   `-IfStmt 0x223b03e76c0 <line:605:9, line:613:9>
|   |     |-OpaqueValueExpr 0x223b03e76a8 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x223b03e7690 <line:610:56, line:613:9>
|   |       `-GotoStmt 0x223b03e7678 <line:612:13, col:18> 'err' 0x223b03e74a0
|   |-IfStmt 0x223b03e7840 <line:623:5, line:626:18>
|   | |-OpaqueValueExpr 0x223b03e7828 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x223b03e7810 <line:624:9, line:626:18>
|   |   |-OpaqueValueExpr 0x223b03e77f8 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x223b03e77e0 <col:13, col:18> 'err' 0x223b03e74a0
|   |-IfStmt 0x223b03e4168 <line:628:5, line:667:5>
|   | |-ImplicitCastExpr 0x223b03e7878 <line:628:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x223b03e7858 <col:9> 'int' lvalue Var 0x223b03e7360 'smooth' 'int'
|   | `-CompoundStmt 0x223b03e4148 <col:17, line:667:5>
|   |   |-IfStmt 0x223b03e40c8 <line:636:9, line:664:18>
|   |   | |-OpaqueValueExpr 0x223b03e40b0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x223b03e4098 <col:13, col:18> 'err' 0x223b03e74a0
|   |   `-GotoStmt 0x223b03e4130 <line:666:9, col:14> 'tail' 0x223b03e40e0
|   |-CompoundStmt 0x223b03e4668 <line:670:5, line:707:5>
|   | |-IfStmt 0x223b03e4208 <line:672:9, line:673:18>
|   | | |-OpaqueValueExpr 0x223b03e41f0 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x223b03e41d8 <col:13, col:18> 'err' 0x223b03e74a0
|   | |-IfStmt 0x223b03e43b8 <line:676:9, line:679:9>
|   | | |-OpaqueValueExpr 0x223b03e43a0 <<invalid sloc>> '_Bool'
|   | | `-CompoundStmt 0x223b03e4388 <line:676:42, line:679:9>
|   | |   `-GotoStmt 0x223b03e4370 <line:678:13, col:18> 'err' 0x223b03e74a0
|   | |-CompoundStmt 0x223b03e4588 <line:681:9, line:698:9>
|   | | |-IfStmt 0x223b03e4490 <line:683:13, line:686:13>
|   | | | |-OpaqueValueExpr 0x223b03e4478 <<invalid sloc>> '_Bool'
|   | | | `-CompoundStmt 0x223b03e4460 <line:683:31, line:686:13>
|   | | |   `-GotoStmt 0x223b03e4448 <line:685:17, col:22> 'err' 0x223b03e74a0
|   | | `-IfStmt 0x223b03e4550 <line:690:13, line:695:13>
|   | |   |-OpaqueValueExpr 0x223b03e4538 <<invalid sloc>> '_Bool'
|   | |   `-CompoundStmt 0x223b03e4520 <line:691:61, line:695:13>
|   | |     `-GotoStmt 0x223b03e4508 <line:694:17, col:22> 'err' 0x223b03e74a0
|   | `-IfStmt 0x223b03e4630 <line:701:9, line:704:9>
|   |   |-OpaqueValueExpr 0x223b03e4618 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x223b03e4600 <line:701:42, line:704:9>
|   |     `-GotoStmt 0x223b03e45e8 <line:703:13, col:18> 'err' 0x223b03e74a0
|   |-CompoundStmt 0x223b03e47f8 <line:709:5, line:723:5>
|   | |-IfStmt 0x223b03e4720 <line:711:9, line:712:18>
|   | | |-OpaqueValueExpr 0x223b03e4708 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x223b03e46f0 <col:13, col:18> 'err' 0x223b03e74a0
|   | `-IfStmt 0x223b03e47c0 <line:716:9, line:720:9>
|   |   |-OpaqueValueExpr 0x223b03e47a8 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x223b03e4790 <line:717:57, line:720:9>
|   |     `-GotoStmt 0x223b03e4778 <line:719:13, col:18> 'err' 0x223b03e74a0
|   |-IfStmt 0x223b03e4868 <line:725:5, line:726:14>
|   | |-OpaqueValueExpr 0x223b03e4850 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03e4838 <col:9, col:14> 'err' 0x223b03e74a0
|   |-IfStmt 0x223b03e4b00 <line:731:5, line:733:18>
|   | |-OpaqueValueExpr 0x223b03e4ae8 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x223b03e4ad0 <line:732:9, line:733:18>
|   |   |-OpaqueValueExpr 0x223b03e4ab8 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x223b03e4aa0 <col:13, col:18> 'err' 0x223b03e74a0
|   |-IfStmt 0x223b03e4c58 <line:735:5, line:736:14>
|   | |-OpaqueValueExpr 0x223b03e4c40 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03e4c28 <col:9, col:14> 'err' 0x223b03e74a0
|   |-CompoundStmt 0x223b03e4df0 <line:738:5, line:750:5>
|   | |-IfStmt 0x223b03e4cf8 <line:740:9, line:741:18>
|   | | |-OpaqueValueExpr 0x223b03e4ce0 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x223b03e4cc8 <col:13, col:18> 'err' 0x223b03e74a0
|   | `-IfStmt 0x223b03e4db8 <line:744:9, line:747:9>
|   |   |-OpaqueValueExpr 0x223b03e4da0 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x223b03e4d88 <line:744:44, line:747:9>
|   |     `-GotoStmt 0x223b03e4d70 <line:746:13, col:18> 'err' 0x223b03e74a0
|   |-IfStmt 0x223b03ebf38 <line:759:5, line:761:18>
|   | |-OpaqueValueExpr 0x223b03ebf20 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x223b03e4e80 <line:760:9, line:761:18>
|   |   |-OpaqueValueExpr 0x223b03e4e68 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x223b03e4e50 <col:13, col:18> 'err' 0x223b03e74a0
|   |-IfStmt 0x223b03ebfa0 <line:762:5, line:763:14>
|   | |-OpaqueValueExpr 0x223b03ebf88 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03ebf70 <col:9, col:14> 'err' 0x223b03e74a0
|   |-IfStmt 0x223b03ec008 <line:764:5, line:765:14>
|   | |-OpaqueValueExpr 0x223b03ebff0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x223b03ebfd8 <col:9, col:14> 'err' 0x223b03e74a0
|   |-LabelStmt 0x223b03ec920 <line:767:2, line:817:5> 'tail'
|   | `-IfStmt 0x223b03ec908 <line:768:5, line:817:5>
|   |   |-OpaqueValueExpr 0x223b03ec8f0 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x223b03ec8b0 <line:768:27, line:817:5>
|   |     |-IfStmt 0x223b03ec318 <line:769:9, line:778:9> has_else
|   |     | |-OpaqueValueExpr 0x223b03ec300 <<invalid sloc>> '_Bool'
|   |     | |-CompoundStmt 0x223b03ec178 <line:769:55, line:773:9>
|   |     | | `-IfStmt 0x223b03ec160 <line:770:13, line:772:22>
|   |     | |   |-OpaqueValueExpr 0x223b03ec148 <<invalid sloc>> '_Bool'
|   |     | |   `-GotoStmt 0x223b03ec130 <col:17, col:22> 'err' 0x223b03e74a0
|   |     | `-CompoundStmt 0x223b03ec2e8 <line:773:16, line:778:9>
|   |     |   `-IfStmt 0x223b03ec2d0 <line:775:13, line:777:22>
|   |     |     |-OpaqueValueExpr 0x223b03ec2b8 <<invalid sloc>> '_Bool'
|   |     |     `-GotoStmt 0x223b03ec2a0 <col:17, col:22> 'err' 0x223b03e74a0
|   |     |-IfStmt 0x223b03ec390 <line:785:9, line:786:18>
|   |     | |-OpaqueValueExpr 0x223b03ec378 <<invalid sloc>> '_Bool'
|   |     | `-GotoStmt 0x223b03ec360 <col:13, col:18> 'err' 0x223b03e74a0
|   |     |-IfStmt 0x223b03ec5a8 <line:787:9, line:791:9>
|   |     | |-OpaqueValueExpr 0x223b03ec590 <<invalid sloc>> '_Bool'
|   |     | `-CompoundStmt 0x223b03ec570 <line:787:31, line:791:9>
|   |     |   |-BinaryOperator 0x223b03ec538 <line:789:13, col:19> 'int' '='
|   |     |   | |-DeclRefExpr 0x223b03ec4d8 <col:13> 'int' lvalue Var 0x223b03e72b8 'ret' 'int'
|   |     |   | `-IntegerLiteral 0x223b03ec510 <col:19> 'int' 1
|   |     |   `-GotoStmt 0x223b03ec558 <line:790:13, col:18> 'err' 0x223b03e74a0
|   |     |-IfStmt 0x223b03ec610 <line:792:9, line:793:18>
|   |     | |-OpaqueValueExpr 0x223b03ec5f8 <<invalid sloc>> '_Bool'
|   |     | `-GotoStmt 0x223b03ec5e0 <col:13, col:18> 'err' 0x223b03e74a0
|   |     |-IfStmt 0x223b03ec6c8 <line:794:9, line:796:22>
|   |     | |-OpaqueValueExpr 0x223b03ec6b0 <<invalid sloc>> '_Bool'
|   |     | `-IfStmt 0x223b03ec698 <line:795:13, line:796:22>
|   |     |   |-OpaqueValueExpr 0x223b03ec680 <<invalid sloc>> '_Bool'
|   |     |   `-GotoStmt 0x223b03ec668 <col:17, col:22> 'err' 0x223b03e74a0
|   |     `-IfStmt 0x223b03ec898 <line:797:9, line:816:9>
|   |       |-OpaqueValueExpr 0x223b03ec880 <<invalid sloc>> '_Bool'
|   |       `-CompoundStmt 0x223b03ec860 <line:797:32, line:816:9>
|   |         |-IfStmt 0x223b03ec788 <line:805:13, line:806:22>
|   |         | |-OpaqueValueExpr 0x223b03ec770 <<invalid sloc>> '_Bool'
|   |         | `-GotoStmt 0x223b03ec758 <col:17, col:22> 'err' 0x223b03e74a0
|   |         `-IfStmt 0x223b03ec828 <line:809:13, line:813:13>
|   |           |-OpaqueValueExpr 0x223b03ec810 <<invalid sloc>> '_Bool'
|   |           `-CompoundStmt 0x223b03ec7f8 <line:810:61, line:813:13>
|   |             `-GotoStmt 0x223b03ec7e0 <line:812:17, col:22> 'err' 0x223b03e74a0
|   |-BinaryOperator 0x223b03ec9a0 <line:827:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x223b03ec958 <col:5> 'int' lvalue Var 0x223b03e72b8 'ret' 'int'
|   | `-IntegerLiteral 0x223b03ec978 <col:11> 'int' 1
|   |-LabelStmt 0x223b03ec9e8 <line:828:2, col:5> 'err'
|   | `-NullStmt 0x223b03ec9e0 <col:5>
|   `-ReturnStmt 0x223b03eca58 <line:830:5, col:16>
|     `-ImplicitCastExpr 0x223b03eca40 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x223b03eca20 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x223b03eca00 <col:13> 'int' lvalue Var 0x223b03e72b8 'ret' 'int'
|-FunctionDecl 0x223b03ecbb8 <line:833:1, line:837:1> line:833:12 invalid rsa_ossl_init 'int (int *)' static
| |-ParmVarDecl 0x223b03ecb20 <col:26, col:31> col:31 invalid rsa 'int *'
| `-CompoundStmt 0x223b03eccd0 <line:834:1, line:837:1>
|   `-ReturnStmt 0x223b03eccc0 <line:836:5, col:14>
|     `-ParenExpr 0x223b03ecca0 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x223b03ecc78 <col:13> 'int' 1
`-FunctionDecl 0x223b03ecd98 <line:839:1, line:845:1> line:839:12 invalid rsa_ossl_finish 'int (int *)' static
  |-ParmVarDecl 0x223b03ecd00 <col:28, col:33> col:33 invalid rsa 'int *'
  `-CompoundStmt 0x223b03e4f90 <line:840:1, line:845:1>
    `-ReturnStmt 0x223b03e4f80 <line:844:5, col:14>
      `-ParenExpr 0x223b03e4f60 <col:12, col:14> 'int'
        `-IntegerLiteral 0x223b03e4f38 <col:13> 'int' 1
