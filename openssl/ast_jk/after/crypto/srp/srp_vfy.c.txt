TranslationUnitDecl 0x267fa378e28 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x267fa3796c0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x267fa3793c0 '__int128'
|-TypedefDecl 0x267fa379730 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x267fa3793e0 'unsigned __int128'
|-TypedefDecl 0x267fa379a68 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x267fa379820 'struct __NSConstantString_tag'
|   `-Record 0x267fa379788 '__NSConstantString_tag'
|-TypedefDecl 0x267fa379ad8 <<invalid sloc>> <invalid sloc> implicit referenced size_t 'unsigned long long'
| `-BuiltinType 0x267fa379000 'unsigned long long'
|-TypedefDecl 0x267fa379b70 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x267fa379b30 'char *'
|   `-BuiltinType 0x267fa378ec0 'char'
|-TypedefDecl 0x267fa379be0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x267fa379b30 'char *'
|   `-BuiltinType 0x267fa378ec0 'char'
|-VarDecl 0x267fa379c88 <.//openssl//file_jk/after\crypto\srp\srp_vfy.c:22:1, line:23:5> line:22:13 used b64table 'char [65]' static cinit
| `-StringLiteral 0x267fa379d78 <line:23:5> 'char [65]' "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz./"
|-FunctionDecl 0x267fbdc17c0 <line:33:1, line:89:1> line:33:12 used t_fromb64 'int (unsigned char *, size_t, const char *)' static
| |-ParmVarDecl 0x267fbdc1538 <col:22, col:37> col:37 used a 'unsigned char *'
| |-ParmVarDecl 0x267fbdc15d0 <col:40, col:47> col:47 used alen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x267fbdc1650 <col:53, col:65> col:65 used src 'const char *'
| `-CompoundStmt 0x267fbdc3540 <line:34:1, line:89:1>
|   |-DeclStmt 0x267fbdc1910 <line:35:5, col:14>
|   | `-VarDecl 0x267fbdc18a8 <col:5, col:11> col:11 used loc 'char *'
|   |-DeclStmt 0x267fbdc1a40 <line:36:5, col:13>
|   | |-VarDecl 0x267fbdc1940 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x267fbdc19c0 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x267fbdc1ad8 <line:37:5, col:13>
|   | `-VarDecl 0x267fbdc1a70 <col:5, col:9> col:9 used size 'int'
|   |-IfStmt 0x267fbdc1c10 <line:39:5, line:40:17>
|   | |-OpaqueValueExpr 0x267fbdc1bf8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x267fbdc1be8 <col:9, col:17>
|   |   `-UnaryOperator 0x267fbdc1bd0 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x267fbdc1ba8 <col:17> 'int' 1
|   |-WhileStmt 0x267fbdc1fb8 <line:42:5, line:43:11>
|   | |-BinaryOperator 0x267fbdc1f60 <line:42:12, col:64> 'int' '&&'
|   | | |-ImplicitCastExpr 0x267fbdc1f48 <col:12, col:13> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x267fbdc1f30 <col:12, col:13> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x267fbdc1c60 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x267fbdc1c48 <col:13> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x267fbdc1c28 <col:13> 'const char *' lvalue ParmVar 0x267fbdc1650 'src' 'const char *'
|   | | `-ParenExpr 0x267fbdc1f10 <col:20, col:64> 'int'
|   | |   `-BinaryOperator 0x267fbdc1ef0 <col:21, col:60> 'int' '||'
|   | |     |-BinaryOperator 0x267fbdc1e18 <col:21, col:44> 'int' '||'
|   | |     | |-BinaryOperator 0x267fbdc1d40 <col:21, col:29> 'int' '=='
|   | |     | | |-ImplicitCastExpr 0x267fbdc1d28 <col:21, col:22> 'int' <IntegralCast>
|   | |     | | | `-ImplicitCastExpr 0x267fbdc1d10 <col:21, col:22> 'char' <LValueToRValue>
|   | |     | | |   `-UnaryOperator 0x267fbdc1ce0 <col:21, col:22> 'const char' lvalue prefix '*' cannot overflow
|   | |     | | |     `-ImplicitCastExpr 0x267fbdc1cc8 <col:22> 'const char *' <LValueToRValue>
|   | |     | | |       `-DeclRefExpr 0x267fbdc1ca8 <col:22> 'const char *' lvalue ParmVar 0x267fbdc1650 'src' 'const char *'
|   | |     | | `-CharacterLiteral 0x267fbdc1cf8 <col:29> 'int' 32
|   | |     | `-BinaryOperator 0x267fbdc1df8 <col:36, col:44> 'int' '=='
|   | |     |   |-ImplicitCastExpr 0x267fbdc1de0 <col:36, col:37> 'int' <IntegralCast>
|   | |     |   | `-ImplicitCastExpr 0x267fbdc1dc8 <col:36, col:37> 'char' <LValueToRValue>
|   | |     |   |   `-UnaryOperator 0x267fbdc1d98 <col:36, col:37> 'const char' lvalue prefix '*' cannot overflow
|   | |     |   |     `-ImplicitCastExpr 0x267fbdc1d80 <col:37> 'const char *' <LValueToRValue>
|   | |     |   |       `-DeclRefExpr 0x267fbdc1d60 <col:37> 'const char *' lvalue ParmVar 0x267fbdc1650 'src' 'const char *'
|   | |     |   `-CharacterLiteral 0x267fbdc1db0 <col:44> 'int' 9
|   | |     `-BinaryOperator 0x267fbdc1ed0 <col:52, col:60> 'int' '=='
|   | |       |-ImplicitCastExpr 0x267fbdc1eb8 <col:52, col:53> 'int' <IntegralCast>
|   | |       | `-ImplicitCastExpr 0x267fbdc1ea0 <col:52, col:53> 'char' <LValueToRValue>
|   | |       |   `-UnaryOperator 0x267fbdc1e70 <col:52, col:53> 'const char' lvalue prefix '*' cannot overflow
|   | |       |     `-ImplicitCastExpr 0x267fbdc1e58 <col:53> 'const char *' <LValueToRValue>
|   | |       |       `-DeclRefExpr 0x267fbdc1e38 <col:53> 'const char *' lvalue ParmVar 0x267fbdc1650 'src' 'const char *'
|   | |       `-CharacterLiteral 0x267fbdc1e88 <col:60> 'int' 10
|   | `-UnaryOperator 0x267fbdc1fa0 <line:43:9, col:11> 'const char *' prefix '++'
|   |   `-DeclRefExpr 0x267fbdc1f80 <col:11> 'const char *' lvalue ParmVar 0x267fbdc1650 'src' 'const char *'
|   |-BinaryOperator 0x267fbdc2258 <line:44:5, col:22> 'int' '='
|   | |-DeclRefExpr 0x267fbdc1fd0 <col:5> 'int' lvalue Var 0x267fbdc1a70 'size' 'int'
|   | `-ImplicitCastExpr 0x267fbdc2240 <col:12, col:22> 'int' <IntegralCast>
|   |   `-CallExpr 0x267fbdc2200 <col:12, col:22> 'unsigned long long'
|   |     |-ImplicitCastExpr 0x267fbdc21e8 <col:12> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x267fbdc2150 <col:12> 'unsigned long long (const char *)' Function 0x267fbdc2040 'strlen' 'unsigned long long (const char *)'
|   |     `-ImplicitCastExpr 0x267fbdc2228 <col:19> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x267fbdc2188 <col:19> 'const char *' lvalue ParmVar 0x267fbdc1650 'src' 'const char *'
|   |-IfStmt 0x267fbdc2438 <line:45:5, line:46:17>
|   | |-BinaryOperator 0x267fbdc23c8 <line:45:9, col:34> 'int' '||'
|   | | |-BinaryOperator 0x267fbdc22d8 <col:9, col:16> 'int' '<'
|   | | | |-ImplicitCastExpr 0x267fbdc22c0 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x267fbdc2278 <col:9> 'int' lvalue Var 0x267fbdc1a70 'size' 'int'
|   | | | `-IntegerLiteral 0x267fbdc2298 <col:16> 'int' 0
|   | | `-BinaryOperator 0x267fbdc23a8 <col:21, col:34> 'int' '>='
|   | |   |-ImplicitCastExpr 0x267fbdc2390 <col:21> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x267fbdc22f8 <col:21> 'int' lvalue Var 0x267fbdc1a70 'size' 'int'
|   | |   `-CStyleCastExpr 0x267fbdc2368 <col:29, col:34> 'int' <IntegralCast>
|   | |     `-ImplicitCastExpr 0x267fbdc2350 <col:34> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   | |       `-DeclRefExpr 0x267fbdc2318 <col:34> 'size_t':'unsigned long long' lvalue ParmVar 0x267fbdc15d0 'alen' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x267fbdc2428 <line:46:9, col:17>
|   |   `-UnaryOperator 0x267fbdc2410 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x267fbdc23e8 <col:17> 'int' 1
|   |-BinaryOperator 0x267fbdc24b0 <line:48:5, col:9> 'int' '='
|   | |-DeclRefExpr 0x267fbdc2450 <col:5> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   | `-IntegerLiteral 0x267fbdc2488 <col:9> 'int' 0
|   |-WhileStmt 0x267fbdbfbf8 <line:49:5, line:56:5>
|   | |-BinaryOperator 0x267fbdbf530 <line:49:12, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x267fbdbf500 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x267fbdc24d0 <col:12> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   | | `-ImplicitCastExpr 0x267fbdbf518 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x267fbdc24f0 <col:16> 'int' lvalue Var 0x267fbdc1a70 'size' 'int'
|   | `-CompoundStmt 0x267fbdbfbd0 <col:22, line:56:5>
|   |   |-BinaryOperator 0x267fbdbf930 <line:50:9, col:38> 'char *' '='
|   |   | |-DeclRefExpr 0x267fbdbf550 <col:9> 'char *' lvalue Var 0x267fbdc18a8 'loc' 'char *'
|   |   | `-CallExpr 0x267fbdbf8a0 <col:15, col:38> 'char *'
|   |   |   |-ImplicitCastExpr 0x267fbdbf888 <col:15> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x267fbdbf748 <col:15> 'char *(const char *, int)' Function 0x267fbdbf5c8 'strchr' 'char *(const char *, int)'
|   |   |   |-ImplicitCastExpr 0x267fbdbf8e8 <col:22> 'const char *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x267fbdbf8d0 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x267fbdbf780 <col:22> 'char [65]' lvalue Var 0x267fa379c88 'b64table' 'char [65]'
|   |   |   `-ImplicitCastExpr 0x267fbdbf918 <col:32, col:37> 'int' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x267fbdbf900 <col:32, col:37> 'char' <LValueToRValue>
|   |   |       `-ArraySubscriptExpr 0x267fbdbf810 <col:32, col:37> 'const char' lvalue
|   |   |         |-ImplicitCastExpr 0x267fbdbf7e0 <col:32> 'const char *' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x267fbdbf7a0 <col:32> 'const char *' lvalue ParmVar 0x267fbdc1650 'src' 'const char *'
|   |   |         `-ImplicitCastExpr 0x267fbdbf7f8 <col:36> 'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x267fbdbf7c0 <col:36> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   |-IfStmt 0x267fbdbfb70 <line:51:9, line:54:26> has_else
|   |   | |-BinaryOperator 0x267fbdbf9f0 <line:51:13, col:28> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x267fbdbf9d8 <col:13> 'char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x267fbdbf950 <col:13> 'char *' lvalue Var 0x267fbdc18a8 'loc' 'char *'
|   |   | | `-CStyleCastExpr 0x267fbdbf9b0 <col:20, col:28> 'char *' <NullToPointer>
|   |   | |   `-IntegerLiteral 0x267fbdbf970 <col:28> 'int' 0
|   |   | |-BreakStmt 0x267fbdbfa10 <line:52:13>
|   |   | `-BinaryOperator 0x267fbdbfb50 <line:54:13, col:26> 'unsigned char' '='
|   |   |   |-ArraySubscriptExpr 0x267fbdbfa88 <col:13, col:16> 'unsigned char' lvalue
|   |   |   | |-ImplicitCastExpr 0x267fbdbfa58 <col:13> 'unsigned char *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x267fbdbfa18 <col:13> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   |   | `-ImplicitCastExpr 0x267fbdbfa70 <col:15> 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x267fbdbfa38 <col:15> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   |   `-ImplicitCastExpr 0x267fbdbfb38 <col:20, col:26> 'unsigned char' <IntegralCast>
|   |   |     `-BinaryOperator 0x267fbdbfb18 <col:20, col:26> 'long long' '-'
|   |   |       |-ImplicitCastExpr 0x267fbdbfae8 <col:20> 'char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x267fbdbfaa8 <col:20> 'char *' lvalue Var 0x267fbdc18a8 'loc' 'char *'
|   |   |       `-ImplicitCastExpr 0x267fbdbfb00 <col:26> 'char *' <ArrayToPointerDecay>
|   |   |         `-DeclRefExpr 0x267fbdbfac8 <col:26> 'char [65]' lvalue Var 0x267fa379c88 'b64table' 'char [65]'
|   |   `-UnaryOperator 0x267fbdbfbb8 <line:55:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x267fbdbfb98 <col:11> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |-IfStmt 0x267fbdbfcc8 <line:58:5, line:59:16>
|   | |-BinaryOperator 0x267fbdbfc70 <line:58:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x267fbdbfc58 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x267fbdbfc10 <col:9> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   | | `-IntegerLiteral 0x267fbdbfc30 <col:14> 'int' 0
|   | `-ReturnStmt 0x267fbdbfcb8 <line:59:9, col:16>
|   |   `-IntegerLiteral 0x267fbdbfc90 <col:16> 'int' 0
|   |-BinaryOperator 0x267fbdbfd38 <line:60:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x267fbdbfce0 <col:5> 'int' lvalue Var 0x267fbdc1a70 'size' 'int'
|   | `-ImplicitCastExpr 0x267fbdbfd20 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x267fbdbfd00 <col:12> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |-BinaryOperator 0x267fbdbfdf8 <line:61:5, col:16> 'int' '='
|   | |-DeclRefExpr 0x267fbdbfd58 <col:5> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   | `-BinaryOperator 0x267fbdbfdd8 <col:9, col:16> 'int' '-'
|   |   |-ImplicitCastExpr 0x267fbdbfdc0 <col:9> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x267fbdbfd78 <col:9> 'int' lvalue Var 0x267fbdc1a70 'size' 'int'
|   |   `-IntegerLiteral 0x267fbdbfd98 <col:16> 'int' 1
|   |-BinaryOperator 0x267fbdbfe88 <line:62:5, col:9> 'int' '='
|   | |-DeclRefExpr 0x267fbdbfe18 <col:5> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   | `-ImplicitCastExpr 0x267fbdbfe70 <col:9> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x267fbdbfe50 <col:9> 'int' lvalue Var 0x267fbdc1a70 'size' 'int'
|   |-WhileStmt 0x267fbdc3050 <line:63:5, line:82:5>
|   | |-IntegerLiteral 0x267fbdbfea8 <line:63:12> 'int' 1
|   | `-CompoundStmt 0x267fbdc2fd8 <col:15, line:82:5>
|   |   |-BinaryOperator 0x267fbdc0008 <line:64:9, col:19> 'unsigned char' '='
|   |   | |-ArraySubscriptExpr 0x267fbdbff40 <col:9, col:12> 'unsigned char' lvalue
|   |   | | |-ImplicitCastExpr 0x267fbdbff10 <col:9> 'unsigned char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x267fbdbfed0 <col:9> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   | | `-ImplicitCastExpr 0x267fbdbff28 <col:11> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x267fbdbfef0 <col:11> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   |   | `-ImplicitCastExpr 0x267fbdbfff0 <col:16, col:19> 'unsigned char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x267fbdbffd0 <col:16, col:19> 'unsigned char' lvalue
|   |   |     |-ImplicitCastExpr 0x267fbdbffa0 <col:16> 'unsigned char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x267fbdbff60 <col:16> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   |     `-ImplicitCastExpr 0x267fbdbffb8 <col:18> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x267fbdbff80 <col:18> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   |-IfStmt 0x267fbdc00b0 <line:65:9, line:66:13>
|   |   | |-BinaryOperator 0x267fbdc0088 <line:65:13, col:19> 'int' '<'
|   |   | | |-UnaryOperator 0x267fbdc0048 <col:13, col:15> 'int' prefix '--'
|   |   | | | `-DeclRefExpr 0x267fbdc0028 <col:15> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   | | `-IntegerLiteral 0x267fbdc0060 <col:19> 'int' 0
|   |   | `-BreakStmt 0x267fbdc00a8 <line:66:13>
|   |   |-CompoundAssignOperator 0x267fbdc02c8 <line:67:9, col:31> 'unsigned char' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |-ArraySubscriptExpr 0x267fbdc0138 <col:9, col:12> 'unsigned char' lvalue
|   |   | | |-ImplicitCastExpr 0x267fbdc0108 <col:9> 'unsigned char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x267fbdc00c8 <col:9> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   | | `-ImplicitCastExpr 0x267fbdc0120 <col:11> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x267fbdc00e8 <col:11> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   |   | `-BinaryOperator 0x267fbdc02a8 <col:17, col:31> 'int' '<<'
|   |   |   |-ParenExpr 0x267fbdc0260 <col:17, col:26> 'int'
|   |   |   | `-BinaryOperator 0x267fbdc0240 <col:18, col:25> 'int' '&'
|   |   |   |   |-ImplicitCastExpr 0x267fbdc0228 <col:18, col:21> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x267fbdc0210 <col:18, col:21> 'unsigned char' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x267fbdc01c8 <col:18, col:21> 'unsigned char' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x267fbdc0198 <col:18> 'unsigned char *' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x267fbdc0158 <col:18> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   |   |   |     `-ImplicitCastExpr 0x267fbdc01b0 <col:20> 'int' <LValueToRValue>
|   |   |   |   |       `-DeclRefExpr 0x267fbdc0178 <col:20> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   |   |   `-IntegerLiteral 0x267fbdc01e8 <col:25> 'int' 3
|   |   |   `-IntegerLiteral 0x267fbdc0280 <col:31> 'int' 6
|   |   |-UnaryOperator 0x267fbdc0318 <line:68:9, col:11> 'int' prefix '--'
|   |   | `-DeclRefExpr 0x267fbdc02f8 <col:11> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   |   |-BinaryOperator 0x267fbdc25f8 <line:69:9, col:50> 'unsigned char' '='
|   |   | |-ArraySubscriptExpr 0x267fbdc03a0 <col:9, col:12> 'unsigned char' lvalue
|   |   | | |-ImplicitCastExpr 0x267fbdc0370 <col:9> 'unsigned char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x267fbdc0330 <col:9> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   | | `-ImplicitCastExpr 0x267fbdc0388 <col:11> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x267fbdc0350 <col:11> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   |   | `-CStyleCastExpr 0x267fbdc25d0 <col:16, col:50> 'unsigned char' <IntegralCast>
|   |   |   `-ParenExpr 0x267fbdc25b0 <col:31, col:50> 'int'
|   |   |     `-BinaryOperator 0x267fbdc2558 <col:32, col:49> 'int' '>>'
|   |   |       |-ParenExpr 0x267fbdc04c8 <col:32, col:44> 'int'
|   |   |       | `-BinaryOperator 0x267fbdc04a8 <col:33, col:40> 'int' '&'
|   |   |       |   |-ImplicitCastExpr 0x267fbdc0490 <col:33, col:36> 'int' <IntegralCast>
|   |   |       |   | `-ImplicitCastExpr 0x267fbdc0478 <col:33, col:36> 'unsigned char' <LValueToRValue>
|   |   |       |   |   `-ArraySubscriptExpr 0x267fbdc0430 <col:33, col:36> 'unsigned char' lvalue
|   |   |       |   |     |-ImplicitCastExpr 0x267fbdc0400 <col:33> 'unsigned char *' <LValueToRValue>
|   |   |       |   |     | `-DeclRefExpr 0x267fbdc03c0 <col:33> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   |       |   |     `-ImplicitCastExpr 0x267fbdc0418 <col:35> 'int' <LValueToRValue>
|   |   |       |   |       `-DeclRefExpr 0x267fbdc03e0 <col:35> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   |       |   `-IntegerLiteral 0x267fbdc0450 <col:40> 'int' 60
|   |   |       `-IntegerLiteral 0x267fbdc2530 <col:49> 'int' 2
|   |   |-IfStmt 0x267fbdc26a0 <line:70:9, line:71:13>
|   |   | |-BinaryOperator 0x267fbdc2678 <line:70:13, col:19> 'int' '<'
|   |   | | |-UnaryOperator 0x267fbdc2638 <col:13, col:15> 'int' prefix '--'
|   |   | | | `-DeclRefExpr 0x267fbdc2618 <col:15> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   | | `-IntegerLiteral 0x267fbdc2650 <col:19> 'int' 0
|   |   | `-BreakStmt 0x267fbdc2698 <line:71:13>
|   |   |-CompoundAssignOperator 0x267fbdc28b8 <line:72:9, col:33> 'unsigned char' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |-ArraySubscriptExpr 0x267fbdc2728 <col:9, col:12> 'unsigned char' lvalue
|   |   | | |-ImplicitCastExpr 0x267fbdc26f8 <col:9> 'unsigned char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x267fbdc26b8 <col:9> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   | | `-ImplicitCastExpr 0x267fbdc2710 <col:11> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x267fbdc26d8 <col:11> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   |   | `-BinaryOperator 0x267fbdc2898 <col:17, col:33> 'int' '<<'
|   |   |   |-ParenExpr 0x267fbdc2850 <col:17, col:28> 'int'
|   |   |   | `-BinaryOperator 0x267fbdc2830 <col:18, col:25> 'int' '&'
|   |   |   |   |-ImplicitCastExpr 0x267fbdc2818 <col:18, col:21> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x267fbdc2800 <col:18, col:21> 'unsigned char' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x267fbdc27b8 <col:18, col:21> 'unsigned char' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x267fbdc2788 <col:18> 'unsigned char *' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x267fbdc2748 <col:18> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   |   |   |     `-ImplicitCastExpr 0x267fbdc27a0 <col:20> 'int' <LValueToRValue>
|   |   |   |   |       `-DeclRefExpr 0x267fbdc2768 <col:20> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   |   |   `-IntegerLiteral 0x267fbdc27d8 <col:25> 'int' 15
|   |   |   `-IntegerLiteral 0x267fbdc2870 <col:33> 'int' 4
|   |   |-UnaryOperator 0x267fbdc2908 <line:73:9, col:11> 'int' prefix '--'
|   |   | `-DeclRefExpr 0x267fbdc28e8 <col:11> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   |   |-BinaryOperator 0x267fbdc2ba0 <line:74:9, col:50> 'unsigned char' '='
|   |   | |-ArraySubscriptExpr 0x267fbdc2990 <col:9, col:12> 'unsigned char' lvalue
|   |   | | |-ImplicitCastExpr 0x267fbdc2960 <col:9> 'unsigned char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x267fbdc2920 <col:9> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   | | `-ImplicitCastExpr 0x267fbdc2978 <col:11> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x267fbdc2940 <col:11> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   |   | `-CStyleCastExpr 0x267fbdc2b78 <col:16, col:50> 'unsigned char' <IntegralCast>
|   |   |   `-ParenExpr 0x267fbdc2b58 <col:31, col:50> 'int'
|   |   |     `-BinaryOperator 0x267fbdc2b00 <col:32, col:49> 'int' '>>'
|   |   |       |-ParenExpr 0x267fbdc2ab8 <col:32, col:44> 'int'
|   |   |       | `-BinaryOperator 0x267fbdc2a98 <col:33, col:40> 'int' '&'
|   |   |       |   |-ImplicitCastExpr 0x267fbdc2a80 <col:33, col:36> 'int' <IntegralCast>
|   |   |       |   | `-ImplicitCastExpr 0x267fbdc2a68 <col:33, col:36> 'unsigned char' <LValueToRValue>
|   |   |       |   |   `-ArraySubscriptExpr 0x267fbdc2a20 <col:33, col:36> 'unsigned char' lvalue
|   |   |       |   |     |-ImplicitCastExpr 0x267fbdc29f0 <col:33> 'unsigned char *' <LValueToRValue>
|   |   |       |   |     | `-DeclRefExpr 0x267fbdc29b0 <col:33> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   |       |   |     `-ImplicitCastExpr 0x267fbdc2a08 <col:35> 'int' <LValueToRValue>
|   |   |       |   |       `-DeclRefExpr 0x267fbdc29d0 <col:35> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   |       |   `-IntegerLiteral 0x267fbdc2a40 <col:40> 'int' 48
|   |   |       `-IntegerLiteral 0x267fbdc2ad8 <col:49> 'int' 4
|   |   |-IfStmt 0x267fbdc2c48 <line:75:9, line:76:13>
|   |   | |-BinaryOperator 0x267fbdc2c20 <line:75:13, col:19> 'int' '<'
|   |   | | |-UnaryOperator 0x267fbdc2be0 <col:13, col:15> 'int' prefix '--'
|   |   | | | `-DeclRefExpr 0x267fbdc2bc0 <col:15> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   | | `-IntegerLiteral 0x267fbdc2bf8 <col:19> 'int' 0
|   |   | `-BreakStmt 0x267fbdc2c40 <line:76:13>
|   |   |-CompoundAssignOperator 0x267fbdc2e18 <line:77:9, col:27> 'unsigned char' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |-ArraySubscriptExpr 0x267fbdc2cd0 <col:9, col:12> 'unsigned char' lvalue
|   |   | | |-ImplicitCastExpr 0x267fbdc2ca0 <col:9> 'unsigned char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x267fbdc2c60 <col:9> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   | | `-ImplicitCastExpr 0x267fbdc2cb8 <col:11> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x267fbdc2c80 <col:11> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   |   | `-ParenExpr 0x267fbdc2df8 <col:17, col:27> 'int'
|   |   |   `-BinaryOperator 0x267fbdc2dd8 <col:18, col:26> 'int' '<<'
|   |   |     |-ImplicitCastExpr 0x267fbdc2dc0 <col:18, col:21> 'int' <IntegralCast>
|   |   |     | `-ImplicitCastExpr 0x267fbdc2da8 <col:18, col:21> 'unsigned char' <LValueToRValue>
|   |   |     |   `-ArraySubscriptExpr 0x267fbdc2d60 <col:18, col:21> 'unsigned char' lvalue
|   |   |     |     |-ImplicitCastExpr 0x267fbdc2d30 <col:18> 'unsigned char *' <LValueToRValue>
|   |   |     |     | `-DeclRefExpr 0x267fbdc2cf0 <col:18> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   |     |     `-ImplicitCastExpr 0x267fbdc2d48 <col:20> 'int' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x267fbdc2d10 <col:20> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   |     `-IntegerLiteral 0x267fbdc2d80 <col:26> 'int' 2
|   |   |-BinaryOperator 0x267fbdc2f18 <line:79:9, col:18> 'unsigned char' '='
|   |   | |-ArraySubscriptExpr 0x267fbdc2eb8 <col:9, col:14> 'unsigned char' lvalue
|   |   | | |-ImplicitCastExpr 0x267fbdc2ea0 <col:9> 'unsigned char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x267fbdc2e48 <col:9> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   | | `-UnaryOperator 0x267fbdc2e88 <col:11, col:13> 'int' prefix '--'
|   |   | |   `-DeclRefExpr 0x267fbdc2e68 <col:13> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   |   | `-ImplicitCastExpr 0x267fbdc2f00 <col:18> 'unsigned char' <IntegralCast>
|   |   |   `-IntegerLiteral 0x267fbdc2ed8 <col:18> 'int' 0
|   |   `-IfStmt 0x267fbdc2fc0 <line:80:9, line:81:13>
|   |     |-BinaryOperator 0x267fbdc2f98 <line:80:13, col:19> 'int' '<'
|   |     | |-UnaryOperator 0x267fbdc2f58 <col:13, col:15> 'int' prefix '--'
|   |     | | `-DeclRefExpr 0x267fbdc2f38 <col:15> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |     | `-IntegerLiteral 0x267fbdc2f70 <col:19> 'int' 0
|   |     `-BreakStmt 0x267fbdc2fb8 <line:81:13>
|   |-WhileStmt 0x267fbdc3258 <line:83:5, line:84:11>
|   | |-BinaryOperator 0x267fbdc3200 <line:83:12, col:33> 'int' '&&'
|   | | |-BinaryOperator 0x267fbdc30d8 <col:12, col:17> 'int' '<='
|   | | | |-ImplicitCastExpr 0x267fbdc30a8 <col:12> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x267fbdc3068 <col:12> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   | | | `-ImplicitCastExpr 0x267fbdc30c0 <col:17> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x267fbdc3088 <col:17> 'int' lvalue Var 0x267fbdc1a70 'size' 'int'
|   | | `-BinaryOperator 0x267fbdc31e0 <col:25, col:33> 'int' '=='
|   | |   |-ImplicitCastExpr 0x267fbdc31c8 <col:25, col:28> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x267fbdc31b0 <col:25, col:28> 'unsigned char' <LValueToRValue>
|   | |   |   `-ArraySubscriptExpr 0x267fbdc3168 <col:25, col:28> 'unsigned char' lvalue
|   | |   |     |-ImplicitCastExpr 0x267fbdc3138 <col:25> 'unsigned char *' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x267fbdc30f8 <col:25> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   | |   |     `-ImplicitCastExpr 0x267fbdc3150 <col:27> 'int' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x267fbdc3118 <col:27> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   | |   `-IntegerLiteral 0x267fbdc3188 <col:33> 'int' 0
|   | `-UnaryOperator 0x267fbdc3240 <line:84:9, col:11> 'int' prefix '++'
|   |   `-DeclRefExpr 0x267fbdc3220 <col:11> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   |-BinaryOperator 0x267fbdc32b8 <line:85:5, col:9> 'int' '='
|   | |-DeclRefExpr 0x267fbdc3270 <col:5> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   | `-IntegerLiteral 0x267fbdc3290 <col:9> 'int' 0
|   |-WhileStmt 0x267fbdc34c0 <line:86:5, line:87:23>
|   | |-BinaryOperator 0x267fbdc3348 <line:86:12, col:17> 'int' '<='
|   | | |-ImplicitCastExpr 0x267fbdc3318 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x267fbdc32d8 <col:12> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   | | `-ImplicitCastExpr 0x267fbdc3330 <col:17> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x267fbdc32f8 <col:17> 'int' lvalue Var 0x267fbdc1a70 'size' 'int'
|   | `-BinaryOperator 0x267fbdc34a0 <line:87:9, col:23> 'unsigned char' '='
|   |   |-ArraySubscriptExpr 0x267fbdc33d8 <col:9, col:14> 'unsigned char' lvalue
|   |   | |-ImplicitCastExpr 0x267fbdc33c0 <col:9> 'unsigned char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x267fbdc3368 <col:9> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |   | `-UnaryOperator 0x267fbdc33a8 <col:11, col:12> 'int' postfix '++'
|   |   |   `-DeclRefExpr 0x267fbdc3388 <col:11> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|   |   `-ImplicitCastExpr 0x267fbdc3488 <col:18, col:23> 'unsigned char' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x267fbdc3468 <col:18, col:23> 'unsigned char' lvalue
|   |       |-ImplicitCastExpr 0x267fbdc3450 <col:18> 'unsigned char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x267fbdc33f8 <col:18> 'unsigned char *' lvalue ParmVar 0x267fbdc1538 'a' 'unsigned char *'
|   |       `-UnaryOperator 0x267fbdc3438 <col:20, col:21> 'int' postfix '++'
|   |         `-DeclRefExpr 0x267fbdc3418 <col:20> 'int' lvalue Var 0x267fbdc19c0 'j' 'int'
|   `-ReturnStmt 0x267fbdc3510 <line:88:5, col:12>
|     `-ImplicitCastExpr 0x267fbdc34f8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x267fbdc34d8 <col:12> 'int' lvalue Var 0x267fbdc1940 'i' 'int'
|-FunctionDecl 0x267fbdc2040 <line:44:12> col:12 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x267fbdc20e0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x267fbdbf5c8 <line:50:15> col:15 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x267fbdbf668 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x267fbdbf6d0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x267fbdc3850 <line:94:1, line:142:1> line:94:14 used t_tob64 'char *(char *, const unsigned char *, int)' static
| |-ParmVarDecl 0x267fbdc35f8 <col:22, col:28> col:28 used dst 'char *'
| |-ParmVarDecl 0x267fbdc36a0 <col:33, col:54> col:54 used src 'const unsigned char *'
| |-ParmVarDecl 0x267fbdc3720 <col:59, col:63> col:63 used size 'int'
| `-CompoundStmt 0x267fbdc7e18 <line:95:1, line:142:1>
|   |-DeclStmt 0x267fbdc3ab8 <line:96:5, col:26>
|   | |-VarDecl 0x267fbdc3938 <col:5, col:9> col:9 used c 'int'
|   | `-VarDecl 0x267fbdc39b8 <col:5, col:25> col:12 used pos 'int' cinit
|   |   `-BinaryOperator 0x267fbdc3a80 <col:18, col:25> 'int' '%'
|   |     |-ImplicitCastExpr 0x267fbdc3a68 <col:18> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x267fbdc3a20 <col:18> 'int' lvalue ParmVar 0x267fbdc3720 'size' 'int'
|   |     `-IntegerLiteral 0x267fbdc3a40 <col:25> 'int' 3
|   |-DeclStmt 0x267fbdc3df8 <line:97:5, col:57>
|   | |-VarDecl 0x267fbdc3ae8 <col:5, col:24> col:19 used b0 'unsigned char' cinit
|   | | `-ImplicitCastExpr 0x267fbdc3b78 <col:24> 'unsigned char' <IntegralCast>
|   | |   `-IntegerLiteral 0x267fbdc3b50 <col:24> 'int' 0
|   | |-VarDecl 0x267fbdc3ba8 <col:5, col:32> col:27 used b1 'unsigned char' cinit
|   | | `-ImplicitCastExpr 0x267fbdc3c38 <col:32> 'unsigned char' <IntegralCast>
|   | |   `-IntegerLiteral 0x267fbdc3c10 <col:32> 'int' 0
|   | |-VarDecl 0x267fbdc3c68 <col:5, col:40> col:35 used b2 'unsigned char' cinit
|   | | `-ImplicitCastExpr 0x267fbdc3cf8 <col:40> 'unsigned char' <IntegralCast>
|   | |   `-IntegerLiteral 0x267fbdc3cd0 <col:40> 'int' 0
|   | `-VarDecl 0x267fbdc3d28 <col:5, col:56> col:43 used notleading 'unsigned char' cinit
|   |   `-ImplicitCastExpr 0x267fbdc3db8 <col:56> 'unsigned char' <IntegralCast>
|   |     `-IntegerLiteral 0x267fbdc3d90 <col:56> 'int' 0
|   |-DeclStmt 0x267fbdc3ec8 <line:98:5, col:23>
|   | `-VarDecl 0x267fbdc3e28 <col:5, col:20> col:11 used olddst 'char *' cinit
|   |   `-ImplicitCastExpr 0x267fbdc3eb0 <col:20> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x267fbdc3e90 <col:20> 'char *' lvalue ParmVar 0x267fbdc35f8 'dst' 'char *'
|   |-SwitchStmt 0x267fbdc3f30 <line:100:5, line:108:5>
|   | |-ImplicitCastExpr 0x267fbdc3f18 <line:100:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x267fbdc3ee0 <col:13> 'int' lvalue Var 0x267fbdc39b8 'pos' 'int'
|   | `-CompoundStmt 0x267fbdc42e8 <col:18, line:108:5>
|   |   |-CaseStmt 0x267fbdc3f90 <line:101:5, line:102:19>
|   |   | |-ConstantExpr 0x267fbdc3f78 <line:101:10> 'int'
|   |   | | `-IntegerLiteral 0x267fbdc3f50 <col:10> 'int' 1
|   |   | `-BinaryOperator 0x267fbdc4088 <line:102:9, col:19> 'unsigned char' '='
|   |   |   |-DeclRefExpr 0x267fbdc3fb8 <col:9> 'unsigned char' lvalue Var 0x267fbdc3c68 'b2' 'unsigned char'
|   |   |   `-ImplicitCastExpr 0x267fbdc4070 <col:14, col:19> 'unsigned char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x267fbdc4050 <col:14, col:19> 'const unsigned char' lvalue
|   |   |       |-ImplicitCastExpr 0x267fbdc4038 <col:14> 'const unsigned char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x267fbdc3ff0 <col:14> 'const unsigned char *' lvalue ParmVar 0x267fbdc36a0 'src' 'const unsigned char *'
|   |   |       `-IntegerLiteral 0x267fbdc4010 <col:18> 'int' 0
|   |   |-BreakStmt 0x267fbdc40a8 <line:103:9>
|   |   |-CaseStmt 0x267fbdc40f0 <line:104:5, line:105:19>
|   |   | |-ConstantExpr 0x267fbdc40d8 <line:104:10> 'int'
|   |   | | `-IntegerLiteral 0x267fbdc40b0 <col:10> 'int' 2
|   |   | `-BinaryOperator 0x267fbdc41e8 <line:105:9, col:19> 'unsigned char' '='
|   |   |   |-DeclRefExpr 0x267fbdc4118 <col:9> 'unsigned char' lvalue Var 0x267fbdc3ba8 'b1' 'unsigned char'
|   |   |   `-ImplicitCastExpr 0x267fbdc41d0 <col:14, col:19> 'unsigned char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x267fbdc41b0 <col:14, col:19> 'const unsigned char' lvalue
|   |   |       |-ImplicitCastExpr 0x267fbdc4198 <col:14> 'const unsigned char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x267fbdc4150 <col:14> 'const unsigned char *' lvalue ParmVar 0x267fbdc36a0 'src' 'const unsigned char *'
|   |   |       `-IntegerLiteral 0x267fbdc4170 <col:18> 'int' 0
|   |   |-BinaryOperator 0x267fbdc42c0 <line:106:9, col:19> 'unsigned char' '='
|   |   | |-DeclRefExpr 0x267fbdc4208 <col:9> 'unsigned char' lvalue Var 0x267fbdc3c68 'b2' 'unsigned char'
|   |   | `-ImplicitCastExpr 0x267fbdc42a8 <col:14, col:19> 'unsigned char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x267fbdc4288 <col:14, col:19> 'const unsigned char' lvalue
|   |   |     |-ImplicitCastExpr 0x267fbdc4270 <col:14> 'const unsigned char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x267fbdc4228 <col:14> 'const unsigned char *' lvalue ParmVar 0x267fbdc36a0 'src' 'const unsigned char *'
|   |   |     `-IntegerLiteral 0x267fbdc4248 <col:18> 'int' 1
|   |   `-BreakStmt 0x267fbdc42e0 <line:107:9>
|   |-WhileStmt 0x267fbdc7d00 <line:110:5, line:138:5>
|   | |-IntegerLiteral 0x267fbdc4320 <line:110:12> 'int' 1
|   | `-CompoundStmt 0x267fbdc7ca8 <col:15, line:138:5>
|   |   |-BinaryOperator 0x267fbdc4498 <line:111:9, col:28> 'int' '='
|   |   | |-DeclRefExpr 0x267fbdc4348 <col:9> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   | `-BinaryOperator 0x267fbdc4478 <col:13, col:28> 'int' '>>'
|   |   |   |-ParenExpr 0x267fbdc4430 <col:13, col:23> 'int'
|   |   |   | `-BinaryOperator 0x267fbdc4410 <col:14, col:19> 'int' '&'
|   |   |   |   |-ImplicitCastExpr 0x267fbdc43f8 <col:14> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x267fbdc43e0 <col:14> 'unsigned char' <LValueToRValue>
|   |   |   |   |   `-DeclRefExpr 0x267fbdc4380 <col:14> 'unsigned char' lvalue Var 0x267fbdc3ae8 'b0' 'unsigned char'
|   |   |   |   `-IntegerLiteral 0x267fbdc43b8 <col:19> 'int' 252
|   |   |   `-IntegerLiteral 0x267fbdc4450 <col:28> 'int' 2
|   |   |-IfStmt 0x267fbdcdaf0 <line:112:9, line:115:9>
|   |   | |-BinaryOperator 0x267fbdcd918 <line:112:13, col:32> 'int' '||'
|   |   | | |-ImplicitCastExpr 0x267fbdcd900 <col:13> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x267fbdcd8e8 <col:13> 'unsigned char' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x267fbdc44b8 <col:13> 'unsigned char' lvalue Var 0x267fbdc3d28 'notleading' 'unsigned char'
|   |   | | `-BinaryOperator 0x267fbdcd8c8 <col:27, col:32> 'int' '!='
|   |   | |   |-ImplicitCastExpr 0x267fbdcd8b0 <col:27> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x267fbdc44f0 <col:27> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   | |   `-IntegerLiteral 0x267fbdc4510 <col:32> 'int' 0
|   |   | `-CompoundStmt 0x267fbdcdad0 <col:35, line:115:9>
|   |   |   |-BinaryOperator 0x267fbdcda30 <line:113:13, col:32> 'char' '='
|   |   |   | |-UnaryOperator 0x267fbdcd970 <col:13, col:17> 'char' lvalue prefix '*' cannot overflow
|   |   |   | | `-UnaryOperator 0x267fbdcd958 <col:14, col:17> 'char *' postfix '++'
|   |   |   | |   `-DeclRefExpr 0x267fbdcd938 <col:14> 'char *' lvalue ParmVar 0x267fbdc35f8 'dst' 'char *'
|   |   |   | `-ImplicitCastExpr 0x267fbdcda18 <col:22, col:32> 'char' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x267fbdcd9f8 <col:22, col:32> 'char' lvalue
|   |   |   |     |-ImplicitCastExpr 0x267fbdcd9c8 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x267fbdcd988 <col:22> 'char [65]' lvalue Var 0x267fa379c88 'b64table' 'char [65]'
|   |   |   |     `-ImplicitCastExpr 0x267fbdcd9e0 <col:31> 'int' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x267fbdcd9a8 <col:31> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   |   `-BinaryOperator 0x267fbdcdab0 <line:114:13, col:26> 'unsigned char' '='
|   |   |     |-DeclRefExpr 0x267fbdcda50 <col:13> 'unsigned char' lvalue Var 0x267fbdc3d28 'notleading' 'unsigned char'
|   |   |     `-ImplicitCastExpr 0x267fbdcda98 <col:26> 'unsigned char' <IntegralCast>
|   |   |       `-IntegerLiteral 0x267fbdcda70 <col:26> 'int' 1
|   |   |-BinaryOperator 0x267fbdcdd88 <line:116:9, col:48> 'int' '='
|   |   | |-DeclRefExpr 0x267fbdcdb08 <col:9> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   | `-BinaryOperator 0x267fbdcdd68 <col:13, col:48> 'int' '|'
|   |   |   |-ParenExpr 0x267fbdcdc28 <col:13, col:27> 'int'
|   |   |   | `-BinaryOperator 0x267fbdcdc08 <col:14, col:26> 'int' '<<'
|   |   |   |   |-ParenExpr 0x267fbdcdbc0 <col:14, col:21> 'int'
|   |   |   |   | `-BinaryOperator 0x267fbdcdba0 <col:15, col:20> 'int' '&'
|   |   |   |   |   |-ImplicitCastExpr 0x267fbdcdb88 <col:15> 'int' <IntegralCast>
|   |   |   |   |   | `-ImplicitCastExpr 0x267fbdcdb70 <col:15> 'unsigned char' <LValueToRValue>
|   |   |   |   |   |   `-DeclRefExpr 0x267fbdcdb28 <col:15> 'unsigned char' lvalue Var 0x267fbdc3ae8 'b0' 'unsigned char'
|   |   |   |   |   `-IntegerLiteral 0x267fbdcdb48 <col:20> 'int' 3
|   |   |   |   `-IntegerLiteral 0x267fbdcdbe0 <col:26> 'int' 4
|   |   |   `-ParenExpr 0x267fbdcdd48 <col:31, col:48> 'int'
|   |   |     `-BinaryOperator 0x267fbdcdd28 <col:32, col:47> 'int' '>>'
|   |   |       |-ParenExpr 0x267fbdcdce0 <col:32, col:42> 'int'
|   |   |       | `-BinaryOperator 0x267fbdcdcc0 <col:33, col:38> 'int' '&'
|   |   |       |   |-ImplicitCastExpr 0x267fbdcdca8 <col:33> 'int' <IntegralCast>
|   |   |       |   | `-ImplicitCastExpr 0x267fbdcdc90 <col:33> 'unsigned char' <LValueToRValue>
|   |   |       |   |   `-DeclRefExpr 0x267fbdcdc48 <col:33> 'unsigned char' lvalue Var 0x267fbdc3ba8 'b1' 'unsigned char'
|   |   |       |   `-IntegerLiteral 0x267fbdcdc68 <col:38> 'int' 240
|   |   |       `-IntegerLiteral 0x267fbdcdd00 <col:47> 'int' 4
|   |   |-IfStmt 0x267fbdce050 <line:117:9, line:120:9>
|   |   | |-BinaryOperator 0x267fbdcde78 <line:117:13, col:32> 'int' '||'
|   |   | | |-ImplicitCastExpr 0x267fbdcde60 <col:13> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x267fbdcde48 <col:13> 'unsigned char' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x267fbdcdda8 <col:13> 'unsigned char' lvalue Var 0x267fbdc3d28 'notleading' 'unsigned char'
|   |   | | `-BinaryOperator 0x267fbdcde28 <col:27, col:32> 'int' '!='
|   |   | |   |-ImplicitCastExpr 0x267fbdcde10 <col:27> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x267fbdcddc8 <col:27> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   | |   `-IntegerLiteral 0x267fbdcdde8 <col:32> 'int' 0
|   |   | `-CompoundStmt 0x267fbdce030 <col:35, line:120:9>
|   |   |   |-BinaryOperator 0x267fbdcdf90 <line:118:13, col:32> 'char' '='
|   |   |   | |-UnaryOperator 0x267fbdcded0 <col:13, col:17> 'char' lvalue prefix '*' cannot overflow
|   |   |   | | `-UnaryOperator 0x267fbdcdeb8 <col:14, col:17> 'char *' postfix '++'
|   |   |   | |   `-DeclRefExpr 0x267fbdcde98 <col:14> 'char *' lvalue ParmVar 0x267fbdc35f8 'dst' 'char *'
|   |   |   | `-ImplicitCastExpr 0x267fbdcdf78 <col:22, col:32> 'char' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x267fbdcdf58 <col:22, col:32> 'char' lvalue
|   |   |   |     |-ImplicitCastExpr 0x267fbdcdf28 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x267fbdcdee8 <col:22> 'char [65]' lvalue Var 0x267fa379c88 'b64table' 'char [65]'
|   |   |   |     `-ImplicitCastExpr 0x267fbdcdf40 <col:31> 'int' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x267fbdcdf08 <col:31> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   |   `-BinaryOperator 0x267fbdce010 <line:119:13, col:26> 'unsigned char' '='
|   |   |     |-DeclRefExpr 0x267fbdcdfb0 <col:13> 'unsigned char' lvalue Var 0x267fbdc3d28 'notleading' 'unsigned char'
|   |   |     `-ImplicitCastExpr 0x267fbdcdff8 <col:26> 'unsigned char' <IntegralCast>
|   |   |       `-IntegerLiteral 0x267fbdcdfd0 <col:26> 'int' 1
|   |   |-BinaryOperator 0x267fbdce2e8 <line:121:9, col:50> 'int' '='
|   |   | |-DeclRefExpr 0x267fbdce068 <col:9> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   | `-BinaryOperator 0x267fbdce2c8 <col:13, col:50> 'int' '|'
|   |   |   |-ParenExpr 0x267fbdce188 <col:13, col:29> 'int'
|   |   |   | `-BinaryOperator 0x267fbdce168 <col:14, col:28> 'int' '<<'
|   |   |   |   |-ParenExpr 0x267fbdce120 <col:14, col:23> 'int'
|   |   |   |   | `-BinaryOperator 0x267fbdce100 <col:15, col:20> 'int' '&'
|   |   |   |   |   |-ImplicitCastExpr 0x267fbdce0e8 <col:15> 'int' <IntegralCast>
|   |   |   |   |   | `-ImplicitCastExpr 0x267fbdce0d0 <col:15> 'unsigned char' <LValueToRValue>
|   |   |   |   |   |   `-DeclRefExpr 0x267fbdce088 <col:15> 'unsigned char' lvalue Var 0x267fbdc3ba8 'b1' 'unsigned char'
|   |   |   |   |   `-IntegerLiteral 0x267fbdce0a8 <col:20> 'int' 15
|   |   |   |   `-IntegerLiteral 0x267fbdce140 <col:28> 'int' 2
|   |   |   `-ParenExpr 0x267fbdce2a8 <col:33, col:50> 'int'
|   |   |     `-BinaryOperator 0x267fbdce288 <col:34, col:49> 'int' '>>'
|   |   |       |-ParenExpr 0x267fbdce240 <col:34, col:44> 'int'
|   |   |       | `-BinaryOperator 0x267fbdce220 <col:35, col:40> 'int' '&'
|   |   |       |   |-ImplicitCastExpr 0x267fbdce208 <col:35> 'int' <IntegralCast>
|   |   |       |   | `-ImplicitCastExpr 0x267fbdce1f0 <col:35> 'unsigned char' <LValueToRValue>
|   |   |       |   |   `-DeclRefExpr 0x267fbdce1a8 <col:35> 'unsigned char' lvalue Var 0x267fbdc3c68 'b2' 'unsigned char'
|   |   |       |   `-IntegerLiteral 0x267fbdce1c8 <col:40> 'int' 192
|   |   |       `-IntegerLiteral 0x267fbdce260 <col:49> 'int' 6
|   |   |-IfStmt 0x267fbdce5b0 <line:122:9, line:125:9>
|   |   | |-BinaryOperator 0x267fbdce3d8 <line:122:13, col:32> 'int' '||'
|   |   | | |-ImplicitCastExpr 0x267fbdce3c0 <col:13> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x267fbdce3a8 <col:13> 'unsigned char' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x267fbdce308 <col:13> 'unsigned char' lvalue Var 0x267fbdc3d28 'notleading' 'unsigned char'
|   |   | | `-BinaryOperator 0x267fbdce388 <col:27, col:32> 'int' '!='
|   |   | |   |-ImplicitCastExpr 0x267fbdce370 <col:27> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x267fbdce328 <col:27> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   | |   `-IntegerLiteral 0x267fbdce348 <col:32> 'int' 0
|   |   | `-CompoundStmt 0x267fbdce590 <col:35, line:125:9>
|   |   |   |-BinaryOperator 0x267fbdce4f0 <line:123:13, col:32> 'char' '='
|   |   |   | |-UnaryOperator 0x267fbdce430 <col:13, col:17> 'char' lvalue prefix '*' cannot overflow
|   |   |   | | `-UnaryOperator 0x267fbdce418 <col:14, col:17> 'char *' postfix '++'
|   |   |   | |   `-DeclRefExpr 0x267fbdce3f8 <col:14> 'char *' lvalue ParmVar 0x267fbdc35f8 'dst' 'char *'
|   |   |   | `-ImplicitCastExpr 0x267fbdce4d8 <col:22, col:32> 'char' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x267fbdce4b8 <col:22, col:32> 'char' lvalue
|   |   |   |     |-ImplicitCastExpr 0x267fbdce488 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x267fbdce448 <col:22> 'char [65]' lvalue Var 0x267fa379c88 'b64table' 'char [65]'
|   |   |   |     `-ImplicitCastExpr 0x267fbdce4a0 <col:31> 'int' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x267fbdce468 <col:31> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   |   `-BinaryOperator 0x267fbdce570 <line:124:13, col:26> 'unsigned char' '='
|   |   |     |-DeclRefExpr 0x267fbdce510 <col:13> 'unsigned char' lvalue Var 0x267fbdc3d28 'notleading' 'unsigned char'
|   |   |     `-ImplicitCastExpr 0x267fbdce558 <col:26> 'unsigned char' <IntegralCast>
|   |   |       `-IntegerLiteral 0x267fbdce530 <col:26> 'int' 1
|   |   |-BinaryOperator 0x267fbdce680 <line:126:9, col:18> 'int' '='
|   |   | |-DeclRefExpr 0x267fbdce5c8 <col:9> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   | `-BinaryOperator 0x267fbdce660 <col:13, col:18> 'int' '&'
|   |   |   |-ImplicitCastExpr 0x267fbdce648 <col:13> 'int' <IntegralCast>
|   |   |   | `-ImplicitCastExpr 0x267fbdce630 <col:13> 'unsigned char' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x267fbdce5e8 <col:13> 'unsigned char' lvalue Var 0x267fbdc3c68 'b2' 'unsigned char'
|   |   |   `-IntegerLiteral 0x267fbdce608 <col:18> 'int' 63
|   |   |-IfStmt 0x267fbdc78f0 <line:127:9, line:130:9>
|   |   | |-BinaryOperator 0x267fbdce770 <line:127:13, col:32> 'int' '||'
|   |   | | |-ImplicitCastExpr 0x267fbdce758 <col:13> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x267fbdce740 <col:13> 'unsigned char' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x267fbdce6a0 <col:13> 'unsigned char' lvalue Var 0x267fbdc3d28 'notleading' 'unsigned char'
|   |   | | `-BinaryOperator 0x267fbdce720 <col:27, col:32> 'int' '!='
|   |   | |   |-ImplicitCastExpr 0x267fbdce708 <col:27> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x267fbdce6c0 <col:27> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   | |   `-IntegerLiteral 0x267fbdce6e0 <col:32> 'int' 0
|   |   | `-CompoundStmt 0x267fbdc78d0 <col:35, line:130:9>
|   |   |   |-BinaryOperator 0x267fbdce888 <line:128:13, col:32> 'char' '='
|   |   |   | |-UnaryOperator 0x267fbdce7c8 <col:13, col:17> 'char' lvalue prefix '*' cannot overflow
|   |   |   | | `-UnaryOperator 0x267fbdce7b0 <col:14, col:17> 'char *' postfix '++'
|   |   |   | |   `-DeclRefExpr 0x267fbdce790 <col:14> 'char *' lvalue ParmVar 0x267fbdc35f8 'dst' 'char *'
|   |   |   | `-ImplicitCastExpr 0x267fbdce870 <col:22, col:32> 'char' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x267fbdce850 <col:22, col:32> 'char' lvalue
|   |   |   |     |-ImplicitCastExpr 0x267fbdce820 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x267fbdce7e0 <col:22> 'char [65]' lvalue Var 0x267fa379c88 'b64table' 'char [65]'
|   |   |   |     `-ImplicitCastExpr 0x267fbdce838 <col:31> 'int' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x267fbdce800 <col:31> 'int' lvalue Var 0x267fbdc3938 'c' 'int'
|   |   |   `-BinaryOperator 0x267fbdc78b0 <line:129:13, col:26> 'unsigned char' '='
|   |   |     |-DeclRefExpr 0x267fbdc7850 <col:13> 'unsigned char' lvalue Var 0x267fbdc3d28 'notleading' 'unsigned char'
|   |   |     `-ImplicitCastExpr 0x267fbdc7898 <col:26> 'unsigned char' <IntegralCast>
|   |   |       `-IntegerLiteral 0x267fbdc7870 <col:26> 'int' 1
|   |   `-IfStmt 0x267fbdc7c80 <line:131:9, line:137:9> has_else
|   |     |-BinaryOperator 0x267fbdc7978 <line:131:13, col:20> 'int' '>='
|   |     | |-ImplicitCastExpr 0x267fbdc7948 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x267fbdc7908 <col:13> 'int' lvalue Var 0x267fbdc39b8 'pos' 'int'
|   |     | `-ImplicitCastExpr 0x267fbdc7960 <col:20> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x267fbdc7928 <col:20> 'int' lvalue ParmVar 0x267fbdc3720 'size' 'int'
|   |     |-BreakStmt 0x267fbdc7998 <line:132:13>
|   |     `-CompoundStmt 0x267fbdc7c58 <line:133:14, line:137:9>
|   |       |-BinaryOperator 0x267fbdc7a68 <line:134:13, col:27> 'unsigned char' '='
|   |       | |-DeclRefExpr 0x267fbdc79a0 <col:13> 'unsigned char' lvalue Var 0x267fbdc3ae8 'b0' 'unsigned char'
|   |       | `-ImplicitCastExpr 0x267fbdc7a50 <col:18, col:27> 'unsigned char' <LValueToRValue>
|   |       |   `-ArraySubscriptExpr 0x267fbdc7a30 <col:18, col:27> 'const unsigned char' lvalue
|   |       |     |-ImplicitCastExpr 0x267fbdc7a18 <col:18> 'const unsigned char *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x267fbdc79c0 <col:18> 'const unsigned char *' lvalue ParmVar 0x267fbdc36a0 'src' 'const unsigned char *'
|   |       |     `-UnaryOperator 0x267fbdc7a00 <col:22, col:25> 'int' postfix '++'
|   |       |       `-DeclRefExpr 0x267fbdc79e0 <col:22> 'int' lvalue Var 0x267fbdc39b8 'pos' 'int'
|   |       |-BinaryOperator 0x267fbdc7b50 <line:135:13, col:27> 'unsigned char' '='
|   |       | |-DeclRefExpr 0x267fbdc7a88 <col:13> 'unsigned char' lvalue Var 0x267fbdc3ba8 'b1' 'unsigned char'
|   |       | `-ImplicitCastExpr 0x267fbdc7b38 <col:18, col:27> 'unsigned char' <LValueToRValue>
|   |       |   `-ArraySubscriptExpr 0x267fbdc7b18 <col:18, col:27> 'const unsigned char' lvalue
|   |       |     |-ImplicitCastExpr 0x267fbdc7b00 <col:18> 'const unsigned char *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x267fbdc7aa8 <col:18> 'const unsigned char *' lvalue ParmVar 0x267fbdc36a0 'src' 'const unsigned char *'
|   |       |     `-UnaryOperator 0x267fbdc7ae8 <col:22, col:25> 'int' postfix '++'
|   |       |       `-DeclRefExpr 0x267fbdc7ac8 <col:22> 'int' lvalue Var 0x267fbdc39b8 'pos' 'int'
|   |       `-BinaryOperator 0x267fbdc7c38 <line:136:13, col:27> 'unsigned char' '='
|   |         |-DeclRefExpr 0x267fbdc7b70 <col:13> 'unsigned char' lvalue Var 0x267fbdc3c68 'b2' 'unsigned char'
|   |         `-ImplicitCastExpr 0x267fbdc7c20 <col:18, col:27> 'unsigned char' <LValueToRValue>
|   |           `-ArraySubscriptExpr 0x267fbdc7c00 <col:18, col:27> 'const unsigned char' lvalue
|   |             |-ImplicitCastExpr 0x267fbdc7be8 <col:18> 'const unsigned char *' <LValueToRValue>
|   |             | `-DeclRefExpr 0x267fbdc7b90 <col:18> 'const unsigned char *' lvalue ParmVar 0x267fbdc36a0 'src' 'const unsigned char *'
|   |             `-UnaryOperator 0x267fbdc7bd0 <col:22, col:25> 'int' postfix '++'
|   |               `-DeclRefExpr 0x267fbdc7bb0 <col:22> 'int' lvalue Var 0x267fbdc39b8 'pos' 'int'
|   |-BinaryOperator 0x267fbdc7d98 <line:140:5, col:14> 'char' '='
|   | |-UnaryOperator 0x267fbdc7d50 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x267fbdc7d38 <col:6, col:9> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x267fbdc7d18 <col:6> 'char *' lvalue ParmVar 0x267fbdc35f8 'dst' 'char *'
|   | `-ImplicitCastExpr 0x267fbdc7d80 <col:14> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x267fbdc7d68 <col:14> 'int' 0
|   `-ReturnStmt 0x267fbdc7e08 <line:141:5, col:12>
|     `-ImplicitCastExpr 0x267fbdc7df0 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x267fbdc7db8 <col:12> 'char *' lvalue Var 0x267fbdc3e28 'olddst' 'char *'
|-FunctionDecl 0x267fbdc7f68 <line:144:1, line:153:1> line:144:6 invalid SRP_user_pwd_free 'void (int *)'
| |-ParmVarDecl 0x267fbdc7ea0 <col:24, col:38> col:38 invalid user_pwd 'int *'
| `-CompoundStmt 0x267fbdc8408 <line:145:1, line:153:1>
|   `-IfStmt 0x267fbdc8050 <line:146:5, line:147:9>
|     |-OpaqueValueExpr 0x267fbdc8038 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x267fbdc8028 <col:9>
|-FunctionDecl 0x267fbdc84f0 <line:155:1, line:167:1> line:155:22 invalid SRP_user_pwd_new 'int *(void)' static
| `-CompoundStmt 0x267fbdc86b8 <line:156:1, line:167:1>
|-FunctionDecl 0x267fbdc88d8 <line:169:1, line:174:1> line:169:13 invalid SRP_user_pwd_set_gN 'void (int *, const int *, const int *)' static
| |-ParmVarDecl 0x267fbdc86e0 <col:33, col:47> col:47 invalid vinfo 'int *'
| |-ParmVarDecl 0x267fbdc8760 <col:54, col:68> col:68 invalid g 'const int *'
| |-ParmVarDecl 0x267fbdc87e0 <line:170:33, col:47> col:47 invalid N 'const int *'
| `-CompoundStmt 0x267fbdc89a8 <line:171:1, line:174:1>
|-FunctionDecl 0x267fbdc8bc0 <line:176:1, line:182:1> line:176:12 invalid SRP_user_pwd_set_ids 'int (int *, const char *, const char *)' static
| |-ParmVarDecl 0x267fbdc89d0 <col:33, col:47> col:47 invalid vinfo 'int *'
| |-ParmVarDecl 0x267fbdc8a50 <col:54, col:66> col:66 used id 'const char *'
| |-ParmVarDecl 0x267fbdc8ad0 <line:177:33, col:45> col:45 used info 'const char *'
| `-CompoundStmt 0x267fbdc8fb8 <line:178:1, line:182:1>
|   `-IfStmt 0x267fbdc8ed0 <line:179:5, line:180:16>
|     |-OpaqueValueExpr 0x267fbdc8eb8 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x267fbdc8ea8 <col:9, col:16>
|       `-IntegerLiteral 0x267fbdc8e80 <col:16> 'int' 0
|-FunctionDecl 0x267fbdc9190 <line:184:1, line:209:1> line:184:12 invalid SRP_user_pwd_set_sv 'int (int *, const char *, const char *)' static
| |-ParmVarDecl 0x267fbdc8fe8 <col:32, col:46> col:46 invalid vinfo 'int *'
| |-ParmVarDecl 0x267fbdc9068 <col:53, col:65> col:65 used s 'const char *'
| |-ParmVarDecl 0x267fbdc90e8 <line:185:32, col:44> col:44 used v 'const char *'
| `-CompoundStmt 0x267fbdd0d38 <line:186:1, line:209:1>
|   |-DeclStmt 0x267fbdc9368 <line:187:5, col:31>
|   | `-VarDecl 0x267fbdc9300 <col:5, col:30> col:19 used tmp 'unsigned char [2500]'
|   |-DeclStmt 0x267fbdc9400 <line:188:5, col:12>
|   | `-VarDecl 0x267fbdc9398 <col:5, col:9> col:9 used len 'int'
|   |-BinaryOperator 0x267fbdc9618 <line:193:5, col:40> 'int' '='
|   | |-DeclRefExpr 0x267fbdc9418 <col:5> 'int' lvalue Var 0x267fbdc9398 'len' 'int'
|   | `-CallExpr 0x267fbdc95b0 <col:11, col:40> 'int'
|   |   |-ImplicitCastExpr 0x267fbdc9598 <col:11> 'int (*)(unsigned char *, size_t, const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x267fbdc9450 <col:11> 'int (unsigned char *, size_t, const char *)' Function 0x267fbdc17c0 't_fromb64' 'int (unsigned char *, size_t, const char *)'
|   |   |-ImplicitCastExpr 0x267fbdc95e8 <col:21> 'unsigned char *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x267fbdc9470 <col:21> 'unsigned char [2500]' lvalue Var 0x267fbdc9300 'tmp' 'unsigned char [2500]'
|   |   |-UnaryExprOrTypeTraitExpr 0x267fbdc94e8 <col:26, col:36> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x267fbdc94c8 <col:32, col:36> 'unsigned char [2500]' lvalue
|   |   |   `-DeclRefExpr 0x267fbdc94a8 <col:33> 'unsigned char [2500]' lvalue Var 0x267fbdc9300 'tmp' 'unsigned char [2500]' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x267fbdc9600 <col:39> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x267fbdc9508 <col:39> 'const char *' lvalue ParmVar 0x267fbdc90e8 'v' 'const char *'
|   |-IfStmt 0x267fbdc96f0 <line:194:5, line:195:16>
|   | |-BinaryOperator 0x267fbdc9698 <line:194:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x267fbdc9680 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x267fbdc9638 <col:9> 'int' lvalue Var 0x267fbdc9398 'len' 'int'
|   | | `-IntegerLiteral 0x267fbdc9658 <col:15> 'int' 0
|   | `-ReturnStmt 0x267fbdc96e0 <line:195:9, col:16>
|   |   `-IntegerLiteral 0x267fbdc96b8 <col:16> 'int' 0
|   |-IfStmt 0x267fbdd0930 <line:196:5, line:197:16>
|   | |-OpaqueValueExpr 0x267fbdd0918 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x267fbdd0908 <col:9, col:16>
|   |   `-IntegerLiteral 0x267fbdd08e0 <col:16> 'int' 0
|   |-BinaryOperator 0x267fbdd0ac0 <line:198:5, col:40> 'int' '='
|   | |-DeclRefExpr 0x267fbdd0948 <col:5> 'int' lvalue Var 0x267fbdc9398 'len' 'int'
|   | `-CallExpr 0x267fbdd0a58 <col:11, col:40> 'int'
|   |   |-ImplicitCastExpr 0x267fbdd0a40 <col:11> 'int (*)(unsigned char *, size_t, const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x267fbdd0968 <col:11> 'int (unsigned char *, size_t, const char *)' Function 0x267fbdc17c0 't_fromb64' 'int (unsigned char *, size_t, const char *)'
|   |   |-ImplicitCastExpr 0x267fbdd0a90 <col:21> 'unsigned char *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x267fbdd0988 <col:21> 'unsigned char [2500]' lvalue Var 0x267fbdc9300 'tmp' 'unsigned char [2500]'
|   |   |-UnaryExprOrTypeTraitExpr 0x267fbdd09e8 <col:26, col:36> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x267fbdd09c8 <col:32, col:36> 'unsigned char [2500]' lvalue
|   |   |   `-DeclRefExpr 0x267fbdd09a8 <col:33> 'unsigned char [2500]' lvalue Var 0x267fbdc9300 'tmp' 'unsigned char [2500]' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x267fbdd0aa8 <col:39> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x267fbdd0a08 <col:39> 'const char *' lvalue ParmVar 0x267fbdc9068 's' 'const char *'
|   |-IfStmt 0x267fbdd0bc8 <line:199:5, line:200:14>
|   | |-BinaryOperator 0x267fbdd0b40 <line:199:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x267fbdd0b28 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x267fbdd0ae0 <col:9> 'int' lvalue Var 0x267fbdc9398 'len' 'int'
|   | | `-IntegerLiteral 0x267fbdd0b00 <col:15> 'int' 0
|   | `-GotoStmt 0x267fbdd0bb0 <line:200:9, col:14> 'err' 0x267fbdd0b60
|   |-IfStmt 0x267fbdd0c70 <line:202:5, line:203:14>
|   | |-OpaqueValueExpr 0x267fbdd0c58 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x267fbdd0c40 <col:9, col:14> 'err' 0x267fbdd0b60
|   |-ReturnStmt 0x267fbdd0cb0 <line:204:5, col:12>
|   | `-IntegerLiteral 0x267fbdd0c88 <col:12> 'int' 1
|   |-LabelStmt 0x267fbdd0ce8 <line:205:2, col:5> 'err'
|   | `-NullStmt 0x267fbdd0ce0 <col:5>
|   `-ReturnStmt 0x267fbdd0d28 <line:208:5, col:12>
|     `-IntegerLiteral 0x267fbdd0d00 <col:12> 'int' 0
|-FunctionDecl 0x267fbdd0fa0 <line:211:1, line:216:1> line:211:12 invalid SRP_user_pwd_set_sv_BN 'int (int *, int *, int *)' static
| |-ParmVarDecl 0x267fbdd0db8 <col:35, col:49> col:49 invalid vinfo 'int *'
| |-ParmVarDecl 0x267fbdd0e38 <col:56, col:64> col:64 invalid s 'int *'
| |-ParmVarDecl 0x267fbdd0eb8 <col:67, col:75> col:75 invalid v 'int *'
| `-CompoundStmt 0x267fbdd1070 <line:212:1, line:216:1>
|-FunctionDecl 0x267fbdd1160 <line:218:1, line:234:1> line:218:22 invalid srp_user_pwd_dup 'int *(int *)' static
| |-ParmVarDecl 0x267fbdd1098 <col:39, col:53> col:53 invalid src 'int *'
| `-CompoundStmt 0x267fbdd1390 <line:219:1, line:234:1>
|   `-IfStmt 0x267fbdd1378 <line:228:5, line:232:5>
|     |-OpaqueValueExpr 0x267fbdd1360 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x267fbdd1350 <line:229:74, line:232:5>
|-FunctionDecl 0x267fbdd14a0 <line:236:1, line:257:1> line:236:12 invalid SRP_VBASE_new 'int *(char *)'
| |-ParmVarDecl 0x267fbdd13c0 <col:26, col:32> col:32 used seed_key 'char *'
| `-CompoundStmt 0x267fbdceb98 <line:237:1, line:257:1>
|   |-IfStmt 0x267fbdd1858 <line:242:5, line:246:5>
|   | |-OpaqueValueExpr 0x267fbdd1840 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x267fbdd1830 <line:243:65, line:246:5>
|   `-IfStmt 0x267fbdceb80 <line:250:5, line:255:5>
|     |-OpaqueValueExpr 0x267fbdceb68 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x267fbdceb58 <line:250:82, line:255:5>
|-FunctionDecl 0x267fbdcec60 <line:259:1, line:267:1> line:259:6 invalid SRP_VBASE_free 'void (int *)'
| |-ParmVarDecl 0x267fbdcebd0 <col:21, col:32> col:32 invalid vb 'int *'
| `-CompoundStmt 0x267fbdceed0 <line:260:1, line:267:1>
|   `-IfStmt 0x267fbdced48 <line:261:5, line:262:9>
|     |-OpaqueValueExpr 0x267fbdced30 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x267fbdced20 <col:9>
|-FunctionDecl 0x267fbdcefe0 <line:269:1, line:292:1> line:269:22 invalid SRP_gN_new_init 'int *(const char *)' static
| |-ParmVarDecl 0x267fbdcef00 <col:38, col:50> col:50 used ch 'const char *'
| `-CompoundStmt 0x267fbdcf690 <line:270:1, line:292:1>
|   |-DeclStmt 0x267fbdcf170 <line:271:5, col:31>
|   | `-VarDecl 0x267fbdcf108 <col:5, col:30> col:19 used tmp 'unsigned char [2500]'
|   |-DeclStmt 0x267fbdcf208 <line:272:5, col:12>
|   | `-VarDecl 0x267fbdcf1a0 <col:5, col:9> col:9 used len 'int'
|   |-BinaryOperator 0x267fbdcf3d0 <line:278:5, col:41> 'int' '='
|   | |-DeclRefExpr 0x267fbdcf240 <col:5> 'int' lvalue Var 0x267fbdcf1a0 'len' 'int'
|   | `-CallExpr 0x267fbdcf368 <col:11, col:41> 'int'
|   |   |-ImplicitCastExpr 0x267fbdcf350 <col:11> 'int (*)(unsigned char *, size_t, const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x267fbdcf278 <col:11> 'int (unsigned char *, size_t, const char *)' Function 0x267fbdc17c0 't_fromb64' 'int (unsigned char *, size_t, const char *)'
|   |   |-ImplicitCastExpr 0x267fbdcf3a0 <col:21> 'unsigned char *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x267fbdcf298 <col:21> 'unsigned char [2500]' lvalue Var 0x267fbdcf108 'tmp' 'unsigned char [2500]'
|   |   |-UnaryExprOrTypeTraitExpr 0x267fbdcf310 <col:26, col:36> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x267fbdcf2f0 <col:32, col:36> 'unsigned char [2500]' lvalue
|   |   |   `-DeclRefExpr 0x267fbdcf2d0 <col:33> 'unsigned char [2500]' lvalue Var 0x267fbdcf108 'tmp' 'unsigned char [2500]' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x267fbdcf3b8 <col:39> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x267fbdcf330 <col:39> 'const char *' lvalue ParmVar 0x267fbdcef00 'ch' 'const char *'
|   |-IfStmt 0x267fbdcf4d8 <line:279:5, line:280:14>
|   | |-BinaryOperator 0x267fbdcf450 <line:279:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x267fbdcf438 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x267fbdcf3f0 <col:9> 'int' lvalue Var 0x267fbdcf1a0 'len' 'int'
|   | | `-IntegerLiteral 0x267fbdcf410 <col:15> 'int' 0
|   | `-GotoStmt 0x267fbdcf4c0 <line:280:9, col:14> 'err' 0x267fbdcf470
|   |-IfStmt 0x267fbdcf5b8 <line:282:5, line:283:14>
|   | |-OpaqueValueExpr 0x267fbdcf5a0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x267fbdcf588 <col:9, col:14> 'err' 0x267fbdcf470
|   `-LabelStmt 0x267fbdcf678 <line:289:2, col:5> 'err'
|     `-NullStmt 0x267fbdcf670 <col:5>
|-FunctionDecl 0x267fbdcf778 <line:294:1, line:301:1> line:294:13 invalid SRP_gN_free 'void (int *)' static
| |-ParmVarDecl 0x267fbdcf6e8 <col:25, col:39> col:39 invalid gN_cache 'int *'
| `-CompoundStmt 0x267fbdcf8f0 <line:295:1, line:301:1>
|   `-IfStmt 0x267fbdcf860 <line:296:5, line:297:9>
|     |-OpaqueValueExpr 0x267fbdcf848 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x267fbdcf838 <col:9>
|-FunctionDecl 0x267fbdcfb00 <line:303:1, line:316:1> line:303:16 invalid SRP_get_gN_by_id 'int *(const char *, int (*)())' static
| |-ParmVarDecl 0x267fbdcf920 <col:33, col:45> col:45 used id 'const char *'
| |-ParmVarDecl 0x267fbdcf9e0 <col:49, <invalid sloc>> col:49 invalid STACK_OF 'int (*)()':'int (*)()'
| `-CompoundStmt 0x267fbdd03a8 <line:304:1, line:316:1>
|   |-DeclStmt 0x267fbdcfc48 <line:305:5, col:10>
|   | `-VarDecl 0x267fbdcfbe0 <col:5, col:9> col:9 used i 'int'
|   `-ReturnStmt 0x267fbdd0398 <line:315:5, col:33>
|     `-ImplicitCastExpr 0x267fbdd0380 <col:12, col:33> 'int *' <IntegralToPointer>
|       `-CallExpr 0x267fbdd0340 <col:12, col:33> 'int'
|         |-ImplicitCastExpr 0x267fbdd0328 <col:12> 'int (*)()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x267fbdd02e8 <col:12> 'int ()' Function 0x267fbdd0220 'SRP_get_default_gN' 'int ()'
|         `-ImplicitCastExpr 0x267fbdd0368 <col:31> 'const char *' <LValueToRValue>
|           `-DeclRefExpr 0x267fbdd0308 <col:31> 'const char *' lvalue ParmVar 0x267fbdcf920 'id' 'const char *'
|-FunctionDecl 0x267fbdcffe8 <line:311:38> col:38 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x267fbdd0088 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x267fbdd00f0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x267fbdd04f0 <line:318:1, line:339:1> line:318:16 invalid SRP_gN_place_bn 'int *(int (*)())' static
| |-ParmVarDecl 0x267fbdd03f0 <col:32, <invalid sloc>> col:32 invalid STACK_OF 'int (*)()':'int (*)()'
| `-CompoundStmt 0x267fbdc9b88 <line:319:1, line:339:1>
|   |-DeclStmt 0x267fbdd0630 <line:320:5, col:10>
|   | `-VarDecl 0x267fbdd05c8 <col:5, col:9> col:9 used i 'int'
|   `-CompoundStmt 0x267fbdc9b70 <line:330:5, line:337:5>
|     `-IfStmt 0x267fbdc9b58 <line:332:9, line:336:9>
|       |-OpaqueValueExpr 0x267fbdc9b40 <<invalid sloc>> '_Bool'
|       `-CompoundStmt 0x267fbdc9b30 <line:332:20, line:336:9>
|-FunctionDecl 0x267fbdc9d20 <line:347:1, line:458:1> line:347:5 invalid SRP_VBASE_init 'int (int *, char *)'
| |-ParmVarDecl 0x267fbdc9bc0 <col:20, col:31> col:31 invalid vb 'int *'
| |-ParmVarDecl 0x267fbdc9c40 <col:35, col:41> col:41 used verifier_file 'char *'
| `-CompoundStmt 0x267fbdcabd0 <line:348:1, line:458:1>
|   |-DeclStmt 0x267fbdc9e68 <line:349:5, col:19>
|   | `-VarDecl 0x267fbdc9e00 <col:5, col:9> col:9 used error_code 'int'
|   |-DeclStmt 0x267fbdca158 <line:351:5, col:28>
|   | `-VarDecl 0x267fbdca0f0 <col:5, col:11> col:11 used last_index 'char *'
|   |-DeclStmt 0x267fbdca1f0 <line:352:5, col:10>
|   | `-VarDecl 0x267fbdca188 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x267fbdca2b8 <line:353:5, col:14>
|   | `-VarDecl 0x267fbdca250 <col:5, col:12> col:12 used pp 'char **'
|   |-IfStmt 0x267fbdca790 <line:363:5, line:364:14>
|   | |-OpaqueValueExpr 0x267fbdca778 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x267fbdca760 <col:9, col:14> 'err' 0x267fbdca710
|   |-IfStmt 0x267fbdd1a08 <line:368:5, line:369:14>
|   | |-OpaqueValueExpr 0x267fbdd19f0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x267fbdd19d8 <col:9, col:14> 'err' 0x267fbdca710
|   |-IfStmt 0x267fbdd1ac0 <line:373:5, line:375:5>
|   | |-OpaqueValueExpr 0x267fbdd1aa8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x267fbdd1a98 <line:373:23, line:375:5>
|   |-IfStmt 0x267fbdd27e0 <line:425:5, line:435:5>
|   | |-OpaqueValueExpr 0x267fbdd27c8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x267fbdd27b0 <line:425:29, line:435:5>
|   |   `-IfStmt 0x267fbdd2798 <line:428:9, line:431:9>
|   |     |-OpaqueValueExpr 0x267fbdd2780 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x267fbdd2768 <line:428:72, line:431:9>
|   |       `-GotoStmt 0x267fbdd2750 <line:430:13, col:18> 'err' 0x267fbdca710
|   |-LabelStmt 0x267fbdd2898 <line:438:2, line:447:5> 'err'
|   | `-IfStmt 0x267fbdd2880 <line:444:5, line:447:5>
|   |   |-OpaqueValueExpr 0x267fbdd2868 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x267fbdd2858 <line:444:21, line:447:5>
|   `-ReturnStmt 0x267fbdcabc0 <line:456:5, col:12>
|     `-ImplicitCastExpr 0x267fbdcaba8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x267fbdcab88 <col:12> 'int' lvalue Var 0x267fbdc9e00 'error_code' 'int'
|-FunctionDecl 0x267fbdcada0 <line:460:1, line:475:1> line:460:22 invalid find_user 'int *(int *, char *)' static
| |-ParmVarDecl 0x267fbdcac48 <col:32, col:43> col:43 invalid vb 'int *'
| |-ParmVarDecl 0x267fbdcacc8 <col:47, col:53> col:53 used username 'char *'
| `-CompoundStmt 0x267fbdcb2a8 <line:461:1, line:475:1>
|   `-DeclStmt 0x267fbdcaee8 <line:462:5, col:10>
|     `-VarDecl 0x267fbdcae80 <col:5, col:9> col:9 used i 'int'
|-FunctionDecl 0x267fbdcb3f8 <line:484:1, line:487:1> line:484:15 invalid SRP_VBASE_get_by_user 'int *(int *, char *)'
| |-ParmVarDecl 0x267fbdcb2d8 <col:37, col:48> col:48 invalid vb 'int *'
| |-ParmVarDecl 0x267fbdcb358 <col:52, col:58> col:58 used username 'char *'
| `-CompoundStmt 0x267fbdcb4f8 <line:485:1, line:487:1>
|-FunctionDecl 0x267fbdcb640 <line:494:1, line:541:1> line:494:15 invalid SRP_VBASE_get1_by_user 'int *(int *, char *)'
| |-ParmVarDecl 0x267fbdcb520 <col:38, col:49> col:49 invalid vb 'int *'
| |-ParmVarDecl 0x267fbdcb5a0 <col:53, col:59> col:59 used username 'char *'
| `-CompoundStmt 0x267fbdd33f8 <line:495:1, line:541:1>
|   |-DeclStmt 0x267fbdcb788 <line:497:5, col:42>
|   | `-VarDecl 0x267fbdcb720 <col:5, col:19> col:19 invalid digv 'unsigned char'
|   |-DeclStmt 0x267fbdcb820 <line:498:5, col:42>
|   | `-VarDecl 0x267fbdcb7b8 <col:5, col:19> col:19 invalid digs 'unsigned char'
|   |-IfStmt 0x267fbdd29a0 <line:518:5, line:519:14>
|   | |-OpaqueValueExpr 0x267fbdd2988 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x267fbdd2970 <col:9, col:14> 'err' 0x267fbdd2920
|   |-IfStmt 0x267fbdd2b20 <line:521:5, line:522:14>
|   | |-OpaqueValueExpr 0x267fbdd2b08 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x267fbdd2af0 <col:9, col:14> 'err' 0x267fbdd2920
|   |-IfStmt 0x267fbdd3250 <line:524:5, line:529:14>
|   | |-OpaqueValueExpr 0x267fbdd3238 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x267fbdd3220 <col:9, col:14> 'err' 0x267fbdd2920
|   `-LabelStmt 0x267fbdd33e0 <line:537:2, col:5> 'err'
|     `-NullStmt 0x267fbdd33d8 <col:5>
|-FunctionDecl 0x267fbdd3910 <line:546:1, line:622:1> line:546:7 SRP_create_verifier 'char *(const char *, const char *, char **, char **, const char *, const char *)'
| |-ParmVarDecl 0x267fbdd3450 <col:27, col:39> col:39 used user 'const char *'
| |-ParmVarDecl 0x267fbdd34d0 <col:45, col:57> col:57 used pass 'const char *'
| |-ParmVarDecl 0x267fbdd3550 <col:63, col:70> col:70 used salt 'char **'
| |-ParmVarDecl 0x267fbdd35d0 <line:547:27, col:34> col:34 used verifier 'char **'
| |-ParmVarDecl 0x267fbdd3650 <col:44, col:56> col:56 used N 'const char *'
| |-ParmVarDecl 0x267fbdd36d0 <col:59, col:71> col:71 used g 'const char *'
| `-CompoundStmt 0x267fbdd6c60 <line:548:1, line:622:1>
|   |-DeclStmt 0x267fbdd3a78 <line:549:5, col:12>
|   | `-VarDecl 0x267fbdd3a10 <col:5, col:9> col:9 used len 'int'
|   |-DeclStmt 0x267fbdd3ba8 <line:550:5, col:36>
|   | |-VarDecl 0x267fbdd3aa8 <col:5, col:11> col:11 used result 'char *'
|   | `-VarDecl 0x267fbdd3b28 <col:5, col:27> col:27 used vf 'char *'
|   |-DeclStmt 0x267fbdd3c40 <line:551:5, col:38>
|   | `-VarDecl 0x267fbdd3bd8 <col:5, col:19> col:19 invalid N_bn 'const int *'
|   |-DeclStmt 0x267fbdd3d28 <line:553:5, col:31>
|   | `-VarDecl 0x267fbdd3cc0 <col:5, col:30> col:19 used tmp 'unsigned char [2500]'
|   |-DeclStmt 0x267fbdd3e10 <line:554:5, col:32>
|   | `-VarDecl 0x267fbdd3da8 <col:5, col:31> col:19 used tmp2 'unsigned char [2500]'
|   |-DeclStmt 0x267fbdd3ea8 <line:555:5, col:25>
|   | `-VarDecl 0x267fbdd3e40 <col:5, col:11> col:11 used defgNid 'char *'
|   |-DeclStmt 0x267fbdd3f68 <line:556:5, col:19>
|   | `-VarDecl 0x267fbdd3ed8 <col:5, col:18> col:9 used vfsize 'int' cinit
|   |   `-IntegerLiteral 0x267fbdd3f40 <col:18> 'int' 0
|   |-IfStmt 0x267fbdd4080 <line:558:5, line:560:14>
|   | |-OpaqueValueExpr 0x267fbdd4068 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x267fbdd4050 <col:9, col:14> 'err' 0x267fbdd4000
|   |-IfStmt 0x267fbdd4788 <line:562:5, line:579:5> has_else
|   | |-ImplicitCastExpr 0x267fbdd40b8 <line:562:9> 'const char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x267fbdd4098 <col:9> 'const char *' lvalue ParmVar 0x267fbdd3650 'N' 'const char *'
|   | |-CompoundStmt 0x267fbdd46c0 <col:12, line:572:5>
|   | | |-IfStmt 0x267fbdd4300 <line:563:9, line:564:18>
|   | | | |-BinaryOperator 0x267fbdd42c8 <line:563:13, col:55> 'int' '<='
|   | | | | |-ParenExpr 0x267fbdd4280 <col:13, col:50> 'int'
|   | | | | | `-BinaryOperator 0x267fbdd4260 <col:14, col:49> 'int' '='
|   | | | | |   |-DeclRefExpr 0x267fbdd40d0 <col:14> 'int' lvalue Var 0x267fbdd3a10 'len' 'int'
|   | | | | |   `-CallExpr 0x267fbdd41f8 <col:20, col:49> 'int'
|   | | | | |     |-ImplicitCastExpr 0x267fbdd41e0 <col:20> 'int (*)(unsigned char *, size_t, const char *)' <FunctionToPointerDecay>
|   | | | | |     | `-DeclRefExpr 0x267fbdd4108 <col:20> 'int (unsigned char *, size_t, const char *)' Function 0x267fbdc17c0 't_fromb64' 'int (unsigned char *, size_t, const char *)'
|   | | | | |     |-ImplicitCastExpr 0x267fbdd4230 <col:30> 'unsigned char *' <ArrayToPointerDecay>
|   | | | | |     | `-DeclRefExpr 0x267fbdd4128 <col:30> 'unsigned char [2500]' lvalue Var 0x267fbdd3cc0 'tmp' 'unsigned char [2500]'
|   | | | | |     |-UnaryExprOrTypeTraitExpr 0x267fbdd41a0 <col:35, col:45> 'unsigned long long' sizeof
|   | | | | |     | `-ParenExpr 0x267fbdd4180 <col:41, col:45> 'unsigned char [2500]' lvalue
|   | | | | |     |   `-DeclRefExpr 0x267fbdd4160 <col:42> 'unsigned char [2500]' lvalue Var 0x267fbdd3cc0 'tmp' 'unsigned char [2500]' non_odr_use_unevaluated
|   | | | | |     `-ImplicitCastExpr 0x267fbdd4248 <col:48> 'const char *' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x267fbdd41c0 <col:48> 'const char *' lvalue ParmVar 0x267fbdd3650 'N' 'const char *'
|   | | | | `-IntegerLiteral 0x267fbdd42a0 <col:55> 'int' 0
|   | | | `-GotoStmt 0x267fbdd42e8 <line:564:13, col:18> 'err' 0x267fbdd4000
|   | | |-IfStmt 0x267fbdd4578 <line:567:9, line:568:18>
|   | | | |-BinaryOperator 0x267fbdd4540 <line:567:13, col:55> 'int' '<='
|   | | | | |-ParenExpr 0x267fbdd44f8 <col:13, col:50> 'int'
|   | | | | | `-BinaryOperator 0x267fbdd44d8 <col:14, col:49> 'int' '='
|   | | | | |   |-DeclRefExpr 0x267fbdd4378 <col:14> 'int' lvalue Var 0x267fbdd3a10 'len' 'int'
|   | | | | |   `-CallExpr 0x267fbdd4470 <col:20, col:49> 'int'
|   | | | | |     |-ImplicitCastExpr 0x267fbdd4458 <col:20> 'int (*)(unsigned char *, size_t, const char *)' <FunctionToPointerDecay>
|   | | | | |     | `-DeclRefExpr 0x267fbdd4398 <col:20> 'int (unsigned char *, size_t, const char *)' Function 0x267fbdc17c0 't_fromb64' 'int (unsigned char *, size_t, const char *)'
|   | | | | |     |-ImplicitCastExpr 0x267fbdd44a8 <col:30> 'unsigned char *' <ArrayToPointerDecay>
|   | | | | |     | `-DeclRefExpr 0x267fbdd43b8 <col:30> 'unsigned char [2500]' lvalue Var 0x267fbdd3cc0 'tmp' 'unsigned char [2500]'
|   | | | | |     |-UnaryExprOrTypeTraitExpr 0x267fbdd4418 <col:35, col:45> 'unsigned long long' sizeof
|   | | | | |     | `-ParenExpr 0x267fbdd43f8 <col:41, col:45> 'unsigned char [2500]' lvalue
|   | | | | |     |   `-DeclRefExpr 0x267fbdd43d8 <col:42> 'unsigned char [2500]' lvalue Var 0x267fbdd3cc0 'tmp' 'unsigned char [2500]' non_odr_use_unevaluated
|   | | | | |     `-ImplicitCastExpr 0x267fbdd44c0 <col:48> 'const char *' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x267fbdd4438 <col:48> 'const char *' lvalue ParmVar 0x267fbdd36d0 'g' 'const char *'
|   | | | | `-IntegerLiteral 0x267fbdd4518 <col:55> 'int' 0
|   | | | `-GotoStmt 0x267fbdd4560 <line:568:13, col:18> 'err' 0x267fbdd4000
|   | | `-BinaryOperator 0x267fbdd46a0 <line:571:9, col:19> 'char *' '='
|   | |   |-DeclRefExpr 0x267fbdd45f0 <col:9> 'char *' lvalue Var 0x267fbdd3e40 'defgNid' 'char *'
|   | |   `-ImplicitCastExpr 0x267fbdd4688 <col:19> 'char *' <ArrayToPointerDecay>
|   | |     `-StringLiteral 0x267fbdd4668 <col:19> 'char [2]' lvalue "*"
|   | `-CompoundStmt 0x267fbdd4770 <line:572:12, line:579:5>
|   |   `-IfStmt 0x267fbdd4738 <line:574:9, line:575:18>
|   |     |-OpaqueValueExpr 0x267fbdd4720 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x267fbdd4708 <col:13, col:18> 'err' 0x267fbdd4000
|   |-IfStmt 0x267fbdd5cf0 <line:581:5, line:590:5> has_else
|   | |-OpaqueValueExpr 0x267fbdd5cd8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x267fbdd59e8 <line:581:24, line:586:5>
|   | | `-IfStmt 0x267fbdd5968 <line:582:9, line:583:18>
|   | |   |-BinaryOperator 0x267fbdd5930 <line:582:13, col:54> 'int' '<='
|   | |   | |-CallExpr 0x267fbdd4898 <col:13, col:49> 'int'
|   | |   | | |-ImplicitCastExpr 0x267fbdd4880 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x267fbdd4800 <col:13> 'int ()' Function 0x267fbdd29e0 'RAND_bytes' 'int ()'
|   | |   | | |-ImplicitCastExpr 0x267fbdd48c8 <col:24> 'unsigned char *' <ArrayToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x267fbdd4820 <col:24> 'unsigned char [2500]' lvalue Var 0x267fbdd3da8 'tmp2' 'unsigned char [2500]'
|   | |   | | `-IntegerLiteral 0x267fbdd4858 <line:19:30> 'int' 20
|   | |   | `-IntegerLiteral 0x267fbdd48e0 <line:582:54> 'int' 0
|   | |   `-GotoStmt 0x267fbdd5950 <line:583:13, col:18> 'err' 0x267fbdd4000
|   | `-CompoundStmt 0x267fbdd5cc0 <line:586:12, line:590:5>
|   |   `-IfStmt 0x267fbdd5c48 <line:587:9, line:588:18>
|   |     |-BinaryOperator 0x267fbdd5c10 <line:587:13, col:61> 'int' '<='
|   |     | |-ParenExpr 0x267fbdd5bc8 <col:13, col:56> 'int'
|   |     | | `-BinaryOperator 0x267fbdd5ba8 <col:14, col:55> 'int' '='
|   |     | |   |-DeclRefExpr 0x267fbdd5a00 <col:14> 'int' lvalue Var 0x267fbdd3a10 'len' 'int'
|   |     | |   `-CallExpr 0x267fbdd5b28 <col:20, col:55> 'int'
|   |     | |     |-ImplicitCastExpr 0x267fbdd5b10 <col:20> 'int (*)(unsigned char *, size_t, const char *)' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x267fbdd5a20 <col:20> 'int (unsigned char *, size_t, const char *)' Function 0x267fbdc17c0 't_fromb64' 'int (unsigned char *, size_t, const char *)'
|   |     | |     |-ImplicitCastExpr 0x267fbdd5b60 <col:30> 'unsigned char *' <ArrayToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x267fbdd5a40 <col:30> 'unsigned char [2500]' lvalue Var 0x267fbdd3da8 'tmp2' 'unsigned char [2500]'
|   |     | |     |-UnaryExprOrTypeTraitExpr 0x267fbdd5aa0 <col:36, col:47> 'unsigned long long' sizeof
|   |     | |     | `-ParenExpr 0x267fbdd5a80 <col:42, col:47> 'unsigned char [2500]' lvalue
|   |     | |     |   `-DeclRefExpr 0x267fbdd5a60 <col:43> 'unsigned char [2500]' lvalue Var 0x267fbdd3da8 'tmp2' 'unsigned char [2500]' non_odr_use_unevaluated
|   |     | |     `-ImplicitCastExpr 0x267fbdd5b90 <col:50, col:51> 'const char *' <NoOp>
|   |     | |       `-ImplicitCastExpr 0x267fbdd5b78 <col:50, col:51> 'char *' <LValueToRValue>
|   |     | |         `-UnaryOperator 0x267fbdd5af8 <col:50, col:51> 'char *' lvalue prefix '*' cannot overflow
|   |     | |           `-ImplicitCastExpr 0x267fbdd5ae0 <col:51> 'char **' <LValueToRValue>
|   |     | |             `-DeclRefExpr 0x267fbdd5ac0 <col:51> 'char **' lvalue ParmVar 0x267fbdd3550 'salt' 'char **'
|   |     | `-IntegerLiteral 0x267fbdd5be8 <col:61> 'int' 0
|   |     `-GotoStmt 0x267fbdd5c30 <line:588:13, col:18> 'err' 0x267fbdd4000
|   |-IfStmt 0x267fbdd5e98 <line:592:5, line:593:14>
|   | |-OpaqueValueExpr 0x267fbdd5e80 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x267fbdd5e68 <col:9, col:14> 'err' 0x267fbdd4000
|   |-IfStmt 0x267fbdd62a8 <line:597:5, line:598:14>
|   | |-OpaqueValueExpr 0x267fbdd6290 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x267fbdd6278 <col:9, col:14> 'err' 0x267fbdd4000
|   |-IfStmt 0x267fbdd6820 <line:601:5, line:609:5>
|   | |-OpaqueValueExpr 0x267fbdd6808 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x267fbdd67d8 <line:601:24, line:609:5>
|   |   |-DeclStmt 0x267fbdd6410 <line:602:9, col:23>
|   |   | `-VarDecl 0x267fbdd63a8 <col:9, col:15> col:15 used tmp_salt 'char *'
|   |   |-IfStmt 0x267fbdd65d0 <line:604:9, line:606:9>
|   |   | |-OpaqueValueExpr 0x267fbdd65b8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x267fbdd65a0 <line:604:75, line:606:9>
|   |   |   `-GotoStmt 0x267fbdd6588 <line:605:13, col:18> 'err' 0x267fbdd4000
|   |   |-CallExpr 0x267fbdd66b0 <line:607:9, col:52> 'char *'
|   |   | |-ImplicitCastExpr 0x267fbdd6698 <col:9> 'char *(*)(char *, const unsigned char *, int)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x267fbdd65e8 <col:9> 'char *(char *, const unsigned char *, int)' Function 0x267fbdc3850 't_tob64' 'char *(char *, const unsigned char *, int)'
|   |   | |-ImplicitCastExpr 0x267fbdd66e8 <col:17> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x267fbdd6608 <col:17> 'char *' lvalue Var 0x267fbdd63a8 'tmp_salt' 'char *'
|   |   | |-ImplicitCastExpr 0x267fbdd6718 <col:27> 'const unsigned char *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x267fbdd6700 <col:27> 'unsigned char *' <ArrayToPointerDecay>
|   |   | |   `-DeclRefExpr 0x267fbdd6628 <col:27> 'unsigned char [2500]' lvalue Var 0x267fbdd3da8 'tmp2' 'unsigned char [2500]'
|   |   | `-IntegerLiteral 0x267fbdd6648 <line:19:30> 'int' 20
|   |   `-BinaryOperator 0x267fbdd67b8 <line:608:9, col:17> 'char *' '='
|   |     |-UnaryOperator 0x267fbdd6768 <col:9, col:10> 'char *' lvalue prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x267fbdd6750 <col:10> 'char **' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x267fbdd6730 <col:10> 'char **' lvalue ParmVar 0x267fbdd3550 'salt' 'char **'
|   |     `-ImplicitCastExpr 0x267fbdd67a0 <col:17> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x267fbdd6780 <col:17> 'char *' lvalue Var 0x267fbdd63a8 'tmp_salt' 'char *'
|   |-BinaryOperator 0x267fbdd68c0 <line:611:5, col:17> 'char *' '='
|   | |-UnaryOperator 0x267fbdd6870 <col:5, col:6> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x267fbdd6858 <col:6> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x267fbdd6838 <col:6> 'char **' lvalue ParmVar 0x267fbdd35d0 'verifier' 'char **'
|   | `-ImplicitCastExpr 0x267fbdd68a8 <col:17> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x267fbdd6888 <col:17> 'char *' lvalue Var 0x267fbdd3b28 'vf' 'char *'
|   |-BinaryOperator 0x267fbdd6990 <line:613:5, col:14> 'char *' '='
|   | |-DeclRefExpr 0x267fbdd6900 <col:5> 'char *' lvalue Var 0x267fbdd3aa8 'result' 'char *'
|   | `-ImplicitCastExpr 0x267fbdd6978 <col:14> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x267fbdd6958 <col:14> 'char *' lvalue Var 0x267fbdd3e40 'defgNid' 'char *'
|   |-LabelStmt 0x267fbdd69d8 <line:615:2, col:5> 'err'
|   | `-NullStmt 0x267fbdd69d0 <col:5>
|   |-CallExpr 0x267fbdd6b78 <line:618:5, col:34> 'int'
|   | |-ImplicitCastExpr 0x267fbdd6b60 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x267fbdd6b00 <col:5> 'int ()' Function 0x267fbdd6a38 'OPENSSL_clear_free' 'int ()'
|   | |-ImplicitCastExpr 0x267fbdd6ba8 <col:24> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x267fbdd6b20 <col:24> 'char *' lvalue Var 0x267fbdd3b28 'vf' 'char *'
|   | `-ImplicitCastExpr 0x267fbdd6bc0 <col:28> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x267fbdd6b40 <col:28> 'int' lvalue Var 0x267fbdd3ed8 'vfsize' 'int'
|   `-ReturnStmt 0x267fbdd6c50 <line:621:5, col:12>
|     `-ImplicitCastExpr 0x267fbdd6c38 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x267fbdd6c18 <col:12> 'char *' lvalue Var 0x267fbdd3aa8 'result' 'char *'
`-FunctionDecl 0x267fbdd70f0 <line:633:1, line:678:1> line:633:5 invalid SRP_create_verifier_BN 'int (const char *, const char *, int **, int **, const int *, const int *)'
  |-ParmVarDecl 0x267fbdd6d18 <col:28, col:40> col:40 used user 'const char *'
  |-ParmVarDecl 0x267fbdd6d98 <col:46, col:58> col:58 used pass 'const char *'
  |-ParmVarDecl 0x267fbdd6e48 <col:64, col:73> col:73 invalid salt 'int **'
  |-ParmVarDecl 0x267fbdd6ed0 <line:634:28, col:37> col:37 invalid verifier 'int **'
  |-ParmVarDecl 0x267fbdd6f50 <col:47, col:61> col:61 invalid N 'const int *'
  |-ParmVarDecl 0x267fbdd6fd0 <line:635:28, col:42> col:42 invalid g 'const int *'
  `-CompoundStmt 0x267fbdd8ed8 <line:636:1, line:678:1>
    |-DeclStmt 0x267fbdd7280 <line:637:5, col:19>
    | `-VarDecl 0x267fbdd71f0 <col:5, col:18> col:9 used result 'int' cinit
    |   `-IntegerLiteral 0x267fbdd7258 <col:18> 'int' 0
    |-DeclStmt 0x267fbdd74b0 <line:640:5, col:32>
    | `-VarDecl 0x267fbdd7448 <col:5, col:31> col:19 used tmp2 'unsigned char [2500]'
    |-IfStmt 0x267fbdd75b8 <line:643:5, line:647:14>
    | |-OpaqueValueExpr 0x267fbdd75a0 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x267fbdd7588 <col:9, col:14> 'err' 0x267fbdd7538
    |-IfStmt 0x267fbdd77d0 <line:649:5, line:656:5> has_else
    | |-OpaqueValueExpr 0x267fbdd77b8 <<invalid sloc>> '_Bool'
    | |-CompoundStmt 0x267fbdd7790 <line:649:24, line:654:5>
    | | `-IfStmt 0x267fbdd7710 <line:650:9, line:651:18>
    | |   |-BinaryOperator 0x267fbdd76d8 <line:650:13, col:54> 'int' '<='
    | |   | |-CallExpr 0x267fbdd7668 <col:13, col:49> 'int'
    | |   | | |-ImplicitCastExpr 0x267fbdd7650 <col:13> 'int (*)()' <FunctionToPointerDecay>
    | |   | | | `-DeclRefExpr 0x267fbdd75d0 <col:13> 'int ()' Function 0x267fbdd29e0 'RAND_bytes' 'int ()'
    | |   | | |-ImplicitCastExpr 0x267fbdd7698 <col:24> 'unsigned char *' <ArrayToPointerDecay>
    | |   | | | `-DeclRefExpr 0x267fbdd75f0 <col:24> 'unsigned char [2500]' lvalue Var 0x267fbdd7448 'tmp2' 'unsigned char [2500]'
    | |   | | `-IntegerLiteral 0x267fbdd7628 <line:19:30> 'int' 20
    | |   | `-IntegerLiteral 0x267fbdd76b0 <line:650:54> 'int' 0
    | |   `-GotoStmt 0x267fbdd76f8 <line:651:13, col:18> 'err' 0x267fbdd7538
    | `-CompoundStmt 0x267fbdd77a8 <line:654:12, line:656:5>
    |-IfStmt 0x267fbdd8af8 <line:661:5, line:662:14>
    | |-OpaqueValueExpr 0x267fbdd8ae0 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x267fbdd8ac8 <col:9, col:14> 'err' 0x267fbdd7538
    |-IfStmt 0x267fbdd8c88 <line:664:5, line:667:5>
    | |-OpaqueValueExpr 0x267fbdd8c70 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x267fbdd8c58 <line:664:50, line:667:5>
    |   `-GotoStmt 0x267fbdd8c40 <line:666:9, col:14> 'err' 0x267fbdd7538
    |-BinaryOperator 0x267fbdd8d00 <line:669:5, col:14> 'int' '='
    | |-DeclRefExpr 0x267fbdd8ca0 <col:5> 'int' lvalue Var 0x267fbdd71f0 'result' 'int'
    | `-IntegerLiteral 0x267fbdd8cd8 <col:14> 'int' 1
    |-LabelStmt 0x267fbdd8d48 <line:672:2, col:5> 'err'
    | `-NullStmt 0x267fbdd8d40 <col:5>
    `-ReturnStmt 0x267fbdd8ec8 <line:677:5, col:12>
      `-ImplicitCastExpr 0x267fbdd8eb0 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x267fbdd8e90 <col:12> 'int' lvalue Var 0x267fbdd71f0 'result' 'int'
