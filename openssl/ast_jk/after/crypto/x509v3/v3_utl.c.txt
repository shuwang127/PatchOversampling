TranslationUnitDecl 0x1faf4aa8728 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1faf4aa8fc0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1faf4aa8cc0 '__int128'
|-TypedefDecl 0x1faf4aa9030 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1faf4aa8ce0 'unsigned __int128'
|-TypedefDecl 0x1faf4aa9368 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1faf4aa9120 'struct __NSConstantString_tag'
|   `-Record 0x1faf4aa9088 '__NSConstantString_tag'
|-TypedefDecl 0x1faf4aa93d8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1faf4aa8900 'unsigned long long'
|-TypedefDecl 0x1faf4aa9470 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1faf4aa9430 'char *'
|   `-BuiltinType 0x1faf4aa87c0 'char'
|-TypedefDecl 0x1faf4aa94e0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1faf4aa9430 'char *'
|   `-BuiltinType 0x1faf4aa87c0 'char'
|-TypedefDecl 0x1faf4aa95a0 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1faf4aa8900 'unsigned long long'
|-TypedefDecl 0x1faf4aa9610 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1faf4aa9430 'char *'
|   `-BuiltinType 0x1faf4aa87c0 'char'
|-FunctionDecl 0x1faf65b83b0 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1faf65b8450 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1faf65b84c0 <col:21> Implicit
|-FunctionDecl 0x1faf65b8518 prev 0x1faf65b83b0 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1faf65b8240 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1faf65b8608 <col:21> Inherited Implicit
|-TypedefDecl 0x1faf65b8648 prev 0x1faf4aa93d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1faf4aa8900 'unsigned long long'
|-TypedefDecl 0x1faf65b86f0 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1faf65b86c0 'size_t' sugar
|   |-Typedef 0x1faf65b8648 'size_t'
|   `-BuiltinType 0x1faf4aa8900 'unsigned long long'
|-TypedefDecl 0x1faf65b8760 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1faf4aa8860 'long long'
|-TypedefDecl 0x1faf65b87d0 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1faf4aa8860 'long long'
|-TypedefDecl 0x1faf65b8840 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1faf4aa88a0 'unsigned short'
|-TypedefDecl 0x1faf65b88b0 <line:541:1, col:24> col:24 referenced wint_t 'unsigned short'
| `-BuiltinType 0x1faf4aa88a0 'unsigned short'
|-TypedefDecl 0x1faf65b8920 <line:542:1, col:24> col:24 referenced wctype_t 'unsigned short'
| `-BuiltinType 0x1faf4aa88a0 'unsigned short'
|-TypedefDecl 0x1faf65b8990 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x1faf4aa8820 'int'
|-TypedefDecl 0x1faf65b8a00 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1faf4aa8840 'long'
|-TypedefDecl 0x1faf65b8a70 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1faf4aa8860 'long long'
|-TypedefDecl 0x1faf65b8b00 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1faf65b8ad0 '__time64_t' sugar
|   |-Typedef 0x1faf65b8a70 '__time64_t'
|   `-BuiltinType 0x1faf4aa8860 'long long'
|-FunctionDecl 0x1faf65b8c78 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1faf65b8e98 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1faf65fbd40 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1faf65b8fd8 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1faf65b9050 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1faf65b90c8 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1faf65b9148 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1faf65fbae0 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1faf65fbe20 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1faf65fbee0 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1faf65fc050 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1faf65fc000 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1faf65fbfa0 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1faf65fbec0 'struct threadlocaleinfostruct'
|       `-Record 0x1faf6603b60 'threadlocaleinfostruct'
|-TypedefDecl 0x1faf65fc160 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1faf65fc110 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1faf65fc0b0 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1faf65fbf80 'struct threadmbcinfostruct'
|       `-Record 0x1faf65fbee0 'threadmbcinfostruct'
|-RecordDecl 0x1faf65fc1b8 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1faf65fc270 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1faf65fc330 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1faf65fc3c0 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1faf65fc450 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1faf65fc508 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1faf65fc4b0 'struct localeinfo_struct' sugar
|   `-RecordType 0x1faf65fc310 'struct localeinfo_struct'
|     `-Record 0x1faf65fc270 'localeinfo_struct'
|-TypedefDecl 0x1faf65fc5e0 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1faf65fc590 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1faf65fc4b0 'struct localeinfo_struct' sugar
|     `-RecordType 0x1faf65fc310 'struct localeinfo_struct'
|       `-Record 0x1faf65fc270 'localeinfo_struct'
|-RecordDecl 0x1faf65fc658 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1faf65fc710 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1faf65fc788 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1faf65fc848 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1faf65fc8e0 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1faf65fc950 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1faf65fca08 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1faf65fc9b0 'struct localerefcount' sugar
|   `-RecordType 0x1faf65fc6f0 'struct localerefcount'
|     `-Record 0x1faf65fc658 'localerefcount'
|-RecordDecl 0x1faf6603b60 prev 0x1faf65fbe20 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1faf6603be0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1faf6603c58 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1faf6603cc8 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1faf6603d38 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1faf6603da8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1faf6603f68 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1faf6603fd8 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1faf6604048 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1faf66040b8 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1faf6604128 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1faf6604198 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1faf66041f0 parent 0x1faf4aa8728 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1faf6604380 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1faf66043f0 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1faf6604460 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1faf66044d0 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1faf6604570 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1faf66045e0 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1faf66046f0 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1faf6604828 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1faf66048d8 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1faf6604880 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1faf65fbec0 'struct threadlocaleinfostruct'
|     `-Record 0x1faf6603b60 'threadlocaleinfostruct'
|-RecordDecl 0x1faf6604970 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:63:1, line:72:9> line:63:8 struct _iobuf definition
| |-MaxFieldAlignmentAttr 0x1faf6604a30 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1faf6604aa8 <line:64:9, col:15> col:15 _ptr 'char *'
| |-FieldDecl 0x1faf65fdb00 <line:65:9, col:15> col:15 _cnt 'int'
| |-FieldDecl 0x1faf65fdb70 <line:66:9, col:15> col:15 _base 'char *'
| |-FieldDecl 0x1faf65fdbe0 <line:67:9, col:15> col:15 _flag 'int'
| |-FieldDecl 0x1faf65fdc50 <line:68:9, col:15> col:15 _file 'int'
| |-FieldDecl 0x1faf65fdcc0 <line:69:9, col:15> col:15 _charbuf 'int'
| |-FieldDecl 0x1faf65fdd30 <line:70:9, col:15> col:15 _bufsiz 'int'
| `-FieldDecl 0x1faf65fdda0 <line:71:9, col:15> col:15 _tmpfname 'char *'
|-TypedefDecl 0x1faf65fde50 <line:73:1, col:23> col:23 referenced FILE 'struct _iobuf':'struct _iobuf'
| `-ElaboratedType 0x1faf65fde00 'struct _iobuf' sugar
|   `-RecordType 0x1faf6604a10 'struct _iobuf'
|     `-Record 0x1faf6604970 '_iobuf'
|-FunctionDecl 0x1faf65fe088 <line:137:9, col:39> col:24 __iob_func 'FILE *(void) __attribute__((cdecl))':'FILE *(void)'
|-TypedefDecl 0x1faf65fe158 <line:144:1, col:17> col:17 referenced fpos_t 'long long'
| `-BuiltinType 0x1faf4aa8860 'long long'
|-FunctionDecl 0x1faf65fe338 <line:175:24, col:65> col:36 _filbuf 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf65fe1c0 <col:52, col:59> col:59 _File 'FILE *'
|-FunctionDecl 0x1faf65fe630 <line:176:28, col:82> col:40 _flsbuf 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1faf65fe410 <col:53, col:57> col:57 _Ch 'int'
| `-ParmVarDecl 0x1faf65fe488 <col:70, col:77> col:77 _File 'FILE *'
|-FunctionDecl 0x1faf65fe9e0 <line:178:24, col:121> col:39 _fsopen 'FILE *(const char *, const char *, int) __attribute__((cdecl))':'FILE *(const char *, const char *, int)'
| |-ParmVarDecl 0x1faf65fe710 <col:54, col:67> col:67 _Filename 'const char *'
| |-ParmVarDecl 0x1faf65fe790 <col:85, col:98> col:98 _Mode 'const char *'
| `-ParmVarDecl 0x1faf65fe810 <col:110, col:114> col:114 _ShFlag 'int'
|-FunctionDecl 0x1faf660ad40 <line:180:9, col:51> col:22 clearerr 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1faf660abd0 <col:39, col:46> col:46 _File 'FILE *'
|-FunctionDecl 0x1faf660af70 <line:182:28, col:76> col:44 clearerr_s 'errno_t (FILE *) __attribute__((cdecl))':'errno_t (FILE *)'
| `-ParmVarDecl 0x1faf660ae30 <col:63, col:70> col:70 _File 'FILE *'
|-FunctionDecl 0x1faf660b120 <line:184:28, col:67> col:40 fclose 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf660b040 <col:55, col:62> col:62 _File 'FILE *'
|-FunctionDecl 0x1faf660b310 <line:185:28, col:55> col:40 _fcloseall 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1faf660b608 <line:187:24, col:94> col:39 _fdopen 'FILE *(int, const char *) __attribute__((cdecl))':'FILE *(int, const char *)'
| |-ParmVarDecl 0x1faf660b3e0 <col:52, col:56> col:56 _FileHandle 'int'
| `-ParmVarDecl 0x1faf660b460 <col:76, col:89> col:89 _Mode 'const char *'
|-FunctionDecl 0x1faf660b7c0 <line:189:24, col:58> col:36 feof 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf660b6e0 <col:46, col:53> col:53 _File 'FILE *'
|-FunctionDecl 0x1faf660b970 <line:190:24, col:60> col:36 ferror 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf660b890 <col:48, col:55> col:55 _File 'FILE *'
|-FunctionDecl 0x1faf660bb20 <line:191:28, col:71> col:40 fflush 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf660ba40 <col:59, col:66> col:66 _File 'FILE *'
|-FunctionDecl 0x1faf660ccf8 <line:192:28, col:66> col:40 fgetc 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf660cc18 <col:54, col:61> col:61 _File 'FILE *'
|-FunctionDecl 0x1faf660ce88 <line:193:28, col:54> col:40 _fgetchar 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1faf660d1f0 <line:194:28, col:90> col:40 fgetpos 'int (FILE *, fpos_t *) __attribute__((cdecl))':'int (FILE *, fpos_t *)'
| |-ParmVarDecl 0x1faf660cf50 <col:56, col:63> col:63 _File 'FILE *'
| `-ParmVarDecl 0x1faf660d048 <col:77, col:86> col:86 _Pos 'fpos_t *'
|-FunctionDecl 0x1faf660d5a8 <line:195:28, col:128> col:43 fgets 'char *(char *, int, FILE *) __attribute__((cdecl))':'char *(char *, int, FILE *)'
| |-ParmVarDecl 0x1faf660d2d0 <col:75, col:82> col:82 _Buf 'char *'
| |-ParmVarDecl 0x1faf660d350 <col:93, col:97> col:97 _MaxCount 'int'
| `-ParmVarDecl 0x1faf660d3c8 <col:116, col:123> col:123 _File 'FILE *'
|-FunctionDecl 0x1faf660d768 <line:197:24, col:61> col:36 _fileno 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf660d688 <col:49, col:56> col:56 _File 'FILE *'
|-FunctionDecl 0x1faf660da30 <line:204:24, col:117> col:39 _tempnam 'char *(const char *, const char *) __attribute__((cdecl))':'char *(const char *, const char *)'
| |-ParmVarDecl 0x1faf660d840 <col:59, col:72> col:72 _DirName 'const char *'
| `-ParmVarDecl 0x1faf660d8c0 <col:93, col:106> col:106 _FilePrefix 'const char *'
|-FunctionDecl 0x1faf6607ba0 <line:210:28, col:54> col:40 _flushall 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1faf6607f98 <line:211:72> col:72 implicit fopen 'FILE *(const char *, const char *)' extern
| |-ParmVarDecl 0x1faf6608038 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1faf66080a0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1faf6608118 prev 0x1faf6607f98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:211:134> col:72 fopen 'FILE *(const char *, const char *)'
| |-ParmVarDecl 0x1faf6607d70 <col:85, col:98> col:98 _Filename 'const char *'
| |-ParmVarDecl 0x1faf6607df0 <col:116, col:129> col:129 _Mode 'const char *'
| `-DeprecatedAttr 0x1faf66081c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6608640 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:213:28, col:149> col:44 fopen_s 'errno_t (FILE **, const char *, const char *) __attribute__((cdecl))':'errno_t (FILE **, const char *, const char *)'
| |-ParmVarDecl 0x1faf6608370 <col:78, col:86> col:86 _File 'FILE **'
| |-ParmVarDecl 0x1faf66083f0 <col:100, col:113> col:113 _Filename 'const char *'
| `-ParmVarDecl 0x1faf6608470 <col:131, col:144> col:144 _Mode 'const char *'
|-FunctionDecl 0x1faf6608960 <line:215:40> col:40 implicit fprintf 'int (FILE *, const char *, ...)' extern
| |-ParmVarDecl 0x1faf6608a00 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x1faf6608a68 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1faf6608ae0 <col:40> Implicit printf 2 3
|-FunctionDecl 0x1faf660fc20 prev 0x1faf6608960 <col:28, col:125> col:40 fprintf 'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1faf6608720 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1faf66087a0 <col:100, col:113> col:113 _Format 'const char *'
| `-FormatAttr 0x1faf660fd18 <col:40> Inherited printf 2 3
|-FunctionDecl 0x1faf660fee0 <line:217:28, col:127> col:40 fprintf_s 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1faf660fd60 <col:58, col:65> col:65 _File 'FILE *'
| `-ParmVarDecl 0x1faf660fde0 <col:102, col:115> col:115 _Format 'const char *'
|-FunctionDecl 0x1faf6610138 <line:219:28, col:80> col:40 fputc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1faf660ffc0 <col:51, col:55> col:55 _Ch 'int'
| `-ParmVarDecl 0x1faf6610038 <col:68, col:75> col:75 _File 'FILE *'
|-FunctionDecl 0x1faf6610368 <line:220:28, col:62> col:40 _fputchar 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf6610218 <col:55, col:59> col:59 _Ch 'int'
|-FunctionDecl 0x1faf6610660 <line:221:28, col:92> col:40 fputs 'int (const char *, FILE *) __attribute__((cdecl))':'int (const char *, FILE *)'
| |-ParmVarDecl 0x1faf6610440 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1faf66104b8 <col:80, col:87> col:87 _File 'FILE *'
|-FunctionDecl 0x1faf6610af8 <line:222:43> col:43 implicit fread 'unsigned long long (void *, unsigned long long, unsigned long long, FILE *)' extern
| |-ParmVarDecl 0x1faf6610b98 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1faf6608bb0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1faf6608c18 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1faf6608c80 <<invalid sloc>> <invalid sloc> 'FILE *'
|-FunctionDecl 0x1faf6608d08 prev 0x1faf6610af8 <col:28, col:171> col:43 fread 'unsigned long long (void *, unsigned long long, unsigned long long, FILE *)'
| |-ParmVarDecl 0x1faf6610740 <col:89, col:96> col:96 _DstBuf 'void *'
| |-ParmVarDecl 0x1faf66107b8 <col:110, col:117> col:117 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6610830 <col:136, col:143> col:143 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf66108a8 <col:159, col:166> col:166 _File 'FILE *'
|-FunctionDecl 0x1faf6609210 <line:224:28, col:195> col:43 fread_s 'size_t (void *, size_t, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1faf6608df8 <col:91, col:98> col:98 _DstBuf 'void *'
| |-ParmVarDecl 0x1faf6608e70 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6608ee8 <col:134, col:141> col:141 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6608f60 <col:160, col:167> col:167 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf6608fd8 <col:183, col:190> col:190 _File 'FILE *'
|-FunctionDecl 0x1faf66096d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:226:160> col:74 freopen 'FILE *(const char *, const char *, FILE *) __attribute__((cdecl))':'FILE *(const char *, const char *, FILE *)'
| |-ParmVarDecl 0x1faf6609400 <col:89, col:102> col:102 _Filename 'const char *'
| |-ParmVarDecl 0x1faf6609480 <col:120, col:133> col:133 _Mode 'const char *'
| |-ParmVarDecl 0x1faf66094f8 <col:148, col:155> col:155 _File 'FILE *'
| `-DeprecatedAttr 0x1faf6609788 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using freopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf660bc88 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:228:28, col:176> col:44 freopen_s 'errno_t (FILE **, const char *, const char *, FILE *) __attribute__((cdecl))':'errno_t (FILE **, const char *, const char *, FILE *)'
| |-ParmVarDecl 0x1faf66098d0 <col:80, col:88> col:88 _File 'FILE **'
| |-ParmVarDecl 0x1faf6609950 <col:102, col:115> col:115 _Filename 'const char *'
| |-ParmVarDecl 0x1faf66099d0 <col:133, col:146> col:146 _Mode 'const char *'
| `-ParmVarDecl 0x1faf6609a48 <col:161, col:168> col:168 _OldFile 'FILE *'
|-FunctionDecl 0x1faf660c030 <line:230:70> col:70 implicit fscanf 'int (FILE *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x1faf660c0d0 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x1faf660c138 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1faf660c1b0 <col:70> Implicit scanf 2 3
|-FunctionDecl 0x1faf660c218 prev 0x1faf660c030 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:230:153> col:70 fscanf 'int (FILE *restrict, const char *restrict, ...)'
| |-ParmVarDecl 0x1faf660be68 <col:85, col:92> col:92 _File 'FILE *'
| |-ParmVarDecl 0x1faf660bee8 <col:128, col:141> col:141 _Format 'const char *'
| |-FormatAttr 0x1faf660c3f8 <col:70> Inherited scanf 2 3
| `-DeprecatedAttr 0x1faf660c2c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf660c838 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:231:201> col:77 _fscanf_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf660c538 <col:95, col:102> col:102 _File 'FILE *'
| |-ParmVarDecl 0x1faf660c5b8 <col:148, col:161> col:161 _Format 'const char *'
| |-ParmVarDecl 0x1faf660c650 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf660c8f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf660ec10 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:235:28, col:127> col:40 fscanf_s 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1faf660ca30 <col:57, col:64> col:64 _File 'FILE *'
| `-ParmVarDecl 0x1faf660cab0 <col:102, col:115> col:115 _Format 'const char *'
|-FunctionDecl 0x1faf660ef00 <line:237:28, col:168> col:40 _fscanf_s_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf660ece8 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1faf660ed68 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1faf660ede0 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf660f260 <line:239:28, col:94> col:40 fsetpos 'int (FILE *, const fpos_t *) __attribute__((cdecl))':'int (FILE *, const fpos_t *)'
| |-ParmVarDecl 0x1faf660efe0 <col:56, col:63> col:63 _File 'FILE *'
| `-ParmVarDecl 0x1faf660f0b8 <col:75, col:90> col:90 _Pos 'const fpos_t *'
|-FunctionDecl 0x1faf660f618 <line:240:28, col:103> col:40 fseek 'int (FILE *, long, int) __attribute__((cdecl))':'int (FILE *, long, int)'
| |-ParmVarDecl 0x1faf660f338 <col:54, col:61> col:61 _File 'FILE *'
| |-ParmVarDecl 0x1faf660f3b8 <col:73, col:78> col:78 _Offset 'long'
| `-ParmVarDecl 0x1faf660f438 <col:92, col:96> col:96 _Origin 'int'
|-FunctionDecl 0x1faf660f878 <line:241:24, col:63> col:37 ftell 'long (FILE *) __attribute__((cdecl))':'long (FILE *)'
| `-ParmVarDecl 0x1faf660f6f8 <col:51, col:58> col:58 _File 'FILE *'
|-FunctionDecl 0x1faf6609c08 <line:243:28, col:110> col:40 _fseeki64 'int (FILE *, long long, int) __attribute__((cdecl))':'int (FILE *, long long, int)'
| |-ParmVarDecl 0x1faf660f948 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1faf660f9c8 <col:77, col:85> col:85 _Offset 'long long'
| `-ParmVarDecl 0x1faf660fa48 <col:99, col:103> col:103 _Origin 'int'
|-FunctionDecl 0x1faf6609e68 <line:244:24, col:70> col:40 _ftelli64 'long long (FILE *) __attribute__((cdecl))':'long long (FILE *)'
| `-ParmVarDecl 0x1faf6609ce8 <col:58, col:65> col:65 _File 'FILE *'
|-FunctionDecl 0x1faf660a328 <line:246:43> col:43 implicit fwrite 'unsigned long long (const void *, unsigned long long, unsigned long long, FILE *)' extern
| |-ParmVarDecl 0x1faf660a3c8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1faf660a430 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1faf660a498 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1faf660a500 <<invalid sloc>> <invalid sloc> 'FILE *'
|-FunctionDecl 0x1faf660a588 prev 0x1faf660a328 <col:28, col:159> col:43 fwrite 'unsigned long long (const void *, unsigned long long, unsigned long long, FILE *)'
| |-ParmVarDecl 0x1faf6609f70 <col:81, col:94> col:94 _Str 'const void *'
| |-ParmVarDecl 0x1faf6609fe8 <col:105, col:112> col:112 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf660a060 <col:124, col:131> col:131 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf660a0d8 <col:147, col:154> col:154 _File 'FILE *'
|-FunctionDecl 0x1faf660a750 <line:247:24, col:61> col:36 getc 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf660a670 <col:49, col:56> col:56 _File 'FILE *'
|-FunctionDecl 0x1faf660a8e0 <line:248:24, col:48> col:36 getchar 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1faf660aa68 <line:249:24, col:53> col:36 _getmaxstdio 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1faf6611e00 <line:251:9, col:84> col:24 gets_s 'char *(char *, rsize_t) __attribute__((cdecl))':'char *(char *, rsize_t)'
| |-ParmVarDecl 0x1faf660ab38 <col:53, col:60> col:60 _Buf 'char *'
| `-ParmVarDecl 0x1faf6611c50 <col:71, col:79> col:79 _Size 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1faf6612128 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:254:80 gets 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1faf6611fe0 <col:139, col:145> col:145 _Buffer 'char *'
| `-DeprecatedAttr 0x1faf66121d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using gets_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf66123f0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:255:16, col:54> col:28 _getw 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf6612310 <col:42, col:49> col:49 _File 'FILE *'
|-FunctionDecl 0x1faf6612610 <line:258:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x1faf66124c8 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x1faf66127c0 <line:261:28, col:68> col:40 _pclose 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf66126e0 <col:56, col:63> col:63 _File 'FILE *'
|-FunctionDecl 0x1faf6612a10 <line:262:24, col:101> col:39 _popen 'FILE *(const char *, const char *) __attribute__((cdecl))':'FILE *(const char *, const char *)'
| |-ParmVarDecl 0x1faf6612898 <col:53, col:66> col:66 _Command 'const char *'
| `-ParmVarDecl 0x1faf6612918 <col:83, col:96> col:96 _Mode 'const char *'
|-FunctionDecl 0x1faf6612c50 <line:264:40> col:40 implicit printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x1faf6612cf0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1faf6612d60 <col:40> Implicit printf 1 2
|-FunctionDecl 0x1faf6612dc8 prev 0x1faf6612c50 <col:28, col:102> col:40 printf 'int (const char *, ...)'
| |-ParmVarDecl 0x1faf6612af0 <col:77, col:90> col:90 _Format 'const char *'
| `-FormatAttr 0x1faf6612eb8 <col:40> Inherited printf 1 2
|-FunctionDecl 0x1faf6612fe8 <line:266:28, col:104> col:40 printf_s 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1faf6612f08 <col:79, col:92> col:92 _Format 'const char *'
|-FunctionDecl 0x1faf6613238 <line:268:28, col:79> col:40 putc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1faf66130c0 <col:50, col:54> col:54 _Ch 'int'
| `-ParmVarDecl 0x1faf6613138 <col:67, col:74> col:74 _File 'FILE *'
|-FunctionDecl 0x1faf66133f8 <line:269:28, col:60> col:40 putchar 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf6613318 <col:53, col:57> col:57 _Ch 'int'
|-FunctionDecl 0x1faf6613618 <line:270:28, col:69> col:40 puts 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1faf66134d0 <col:52, col:65> col:65 _Str 'const char *'
|-FunctionDecl 0x1faf6613868 <line:271:28, col:82> col:40 _putw 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1faf66136f0 <col:51, col:55> col:55 _Word 'int'
| `-ParmVarDecl 0x1faf6613768 <col:70, col:77> col:77 _File 'FILE *'
|-FunctionDecl 0x1faf6613a28 <line:274:9, col:57> col:21 remove 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1faf6613948 <col:35, col:48> col:48 _Filename 'const char *'
|-FunctionDecl 0x1faf6665070 <line:275:24, col:109> col:36 rename 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1faf6613b00 <col:50, col:63> col:63 _OldFilename 'const char *'
| `-ParmVarDecl 0x1faf6613b80 <col:84, col:97> col:97 _NewFilename 'const char *'
|-FunctionDecl 0x1faf6665230 <line:276:9, col:58> col:21 _unlink 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1faf6665150 <col:36, col:49> col:49 _Filename 'const char *'
|-FunctionDecl 0x1faf66654c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:278:89> col:53 unlink 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x1faf66653e0 <col:67, col:80> col:80 _Filename 'const char *'
| `-DeprecatedAttr 0x1faf6665568 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _unlink. See online help for details." ""
|-FunctionDecl 0x1faf6665760 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:281:9, col:49> col:22 rewind 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1faf6665688 <col:37, col:44> col:44 _File 'FILE *'
|-FunctionDecl 0x1faf66658f0 <line:282:28, col:51> col:40 _rmtmp 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1faf6665b98 <line:283:69> col:69 implicit scanf 'int (const char *restrict, ...)' extern
| |-ParmVarDecl 0x1faf6665c38 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1faf6665ca8 <col:69> Implicit scanf 1 2
|-FunctionDecl 0x1faf6665d10 prev 0x1faf6665b98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:283:129> col:69 scanf 'int (const char *restrict, ...)'
| |-ParmVarDecl 0x1faf6665a80 <col:104, col:117> col:117 _Format 'const char *'
| |-FormatAttr 0x1faf6665ee8 <col:69> Inherited scanf 1 2
| `-DeprecatedAttr 0x1faf6665db8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf665f250 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:284:177> col:76 _scanf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf665f018 <col:124, col:137> col:137 _Format 'const char *'
| |-ParmVarDecl 0x1faf665f090 <col:155, col:165> col:165 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf665f300 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _scanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf665f528 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:288:40, col:116> col:52 scanf_s 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1faf665f448 <col:91, col:104> col:104 _Format 'const char *'
|-FunctionDecl 0x1faf665f778 <line:290:40, col:157> col:52 _scanf_s_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf665f600 <col:104, col:117> col:117 _Format 'const char *'
| `-ParmVarDecl 0x1faf665f678 <col:135, col:145> col:145 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf665fb38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:292:150> col:55 setbuf 'void (FILE *, char *) __attribute__((cdecl))':'void (FILE *, char *)'
| |-ParmVarDecl 0x1faf665f910 <col:70, col:77> col:77 _File 'FILE *'
| |-ParmVarDecl 0x1faf665f990 <col:136, col:143> col:143 _Buffer 'char *'
| `-DeprecatedAttr 0x1faf665fbe8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using setvbuf instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf665fe10 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:293:28, col:66> col:40 _setmaxstdio 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf665fd30 <col:58, col:62> col:62 _Max 'int'
|-FunctionDecl 0x1faf66620b8 <line:294:28, col:93> col:49 _set_output_format 'unsigned int (unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int)'
| `-ParmVarDecl 0x1faf6661f70 <col:73, col:86> col:86 _Format 'unsigned int'
|-FunctionDecl 0x1faf66622a0 <line:295:28, col:72> col:49 _get_output_format 'unsigned int (void) __attribute__((cdecl))':'unsigned int (void)'
|-FunctionDecl 0x1faf66626f0 <line:296:28, col:145> col:40 setvbuf 'int (FILE *, char *, int, size_t) __attribute__((cdecl))':'int (FILE *, char *, int, size_t)'
| |-ParmVarDecl 0x1faf6662368 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1faf66623e8 <col:99, col:106> col:106 _Buf 'char *'
| |-ParmVarDecl 0x1faf6662468 <col:117, col:121> col:121 _Mode 'int'
| `-ParmVarDecl 0x1faf66624e0 <col:133, col:140> col:140 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1faf6662b70 <line:297:40, col:213> col:52 _snprintf_s 'int (char *, size_t, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, ...)'
| |-ParmVarDecl 0x1faf66627e0 <col:93, col:100> col:100 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6662858 <col:114, col:121> col:121 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66628d0 <col:140, col:147> col:147 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf6662950 <col:188, col:201> col:201 _Format 'const char *'
|-FunctionDecl 0x1faf6662f80 <line:300:40, col:188> col:52 sprintf_s 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1faf6662c60 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6662cd8 <col:112, col:119> col:119 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf6662d58 <col:163, col:176> col:176 _Format 'const char *'
|-FunctionDecl 0x1faf6663148 <line:303:24, col:101> col:36 _scprintf 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1faf6663068 <col:76, col:89> col:89 _Format 'const char *'
|-FunctionDecl 0x1faf6663520 <line:304:70> col:70 implicit used sscanf 'int (const char *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x1faf66635c0 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1faf6663628 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1faf66636a0 <col:70> Implicit scanf 2 3
|-FunctionDecl 0x1faf6663708 prev 0x1faf6663520 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:304:157> col:70 used sscanf 'int (const char *restrict, const char *restrict, ...)'
| |-ParmVarDecl 0x1faf66632e0 <col:84, col:97> col:97 _Src 'const char *'
| |-ParmVarDecl 0x1faf6663360 <col:132, col:145> col:145 _Format 'const char *'
| |-FormatAttr 0x1faf66638e8 <col:70> Inherited scanf 2 3
| `-DeprecatedAttr 0x1faf66637b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6663cd8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:305:205> col:77 _sscanf_l 'int (const char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf66639f8 <col:94, col:107> col:107 _Src 'const char *'
| |-ParmVarDecl 0x1faf6663a78 <col:152, col:165> col:165 _Format 'const char *'
| |-ParmVarDecl 0x1faf6663af0 <col:183, col:193> col:193 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf6663d90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _sscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf66660b0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:309:40, col:143> col:52 sscanf_s 'int (const char *, const char *, ...) __attribute__((cdecl))':'int (const char *, const char *, ...)'
| |-ParmVarDecl 0x1faf6663ed8 <col:68, col:81> col:81 _Src 'const char *'
| `-ParmVarDecl 0x1faf6665fb0 <col:118, col:131> col:131 _Format 'const char *'
|-FunctionDecl 0x1faf66663a8 <line:311:40, col:184> col:52 _sscanf_s_l 'int (const char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6666190 <col:71, col:84> col:84 _Src 'const char *'
| |-ParmVarDecl 0x1faf6666210 <col:131, col:144> col:144 _Format 'const char *'
| `-ParmVarDecl 0x1faf6666288 <col:162, col:172> col:172 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6666838 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:312:217> col:76 _snscanf 'int (const char *, size_t, const char *, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1faf6666550 <col:121, col:134> col:134 _Src 'const char *'
| |-ParmVarDecl 0x1faf66665c8 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6666648 <col:192, col:205> col:205 _Format 'const char *'
| `-DeprecatedAttr 0x1faf66668f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6666ec0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:313:259> col:78 _snscanf_l 'int (const char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6666b30 <col:125, col:138> col:138 _Src 'const char *'
| |-ParmVarDecl 0x1faf6666ba8 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6666c28 <col:206, col:219> col:219 _Format 'const char *'
| |-ParmVarDecl 0x1faf6666ca0 <col:237, col:247> col:247 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf6666fc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6667320 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:314:40, col:197> col:52 _snscanf_s 'int (const char *, size_t, const char *, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1faf6667108 <col:99, col:112> col:112 _Src 'const char *'
| |-ParmVarDecl 0x1faf6667180 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf6667200 <col:172, col:185> col:185 _Format 'const char *'
|-FunctionDecl 0x1faf66676b8 <line:315:40, col:237> col:52 _snscanf_s_l 'int (const char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6667408 <col:101, col:114> col:114 _Src 'const char *'
| |-ParmVarDecl 0x1faf6667480 <col:125, col:132> col:132 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6667500 <col:184, col:197> col:197 _Format 'const char *'
| `-ParmVarDecl 0x1faf6667578 <col:215, col:225> col:225 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6667918 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:317:86> col:74 tmpfile 'FILE *(void) __attribute__((cdecl))':'FILE *(void)'
| `-DeprecatedAttr 0x1faf66679b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using tmpfile_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6667c70 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:319:28, col:96> col:44 tmpfile_s 'errno_t (FILE **) __attribute__((cdecl))':'errno_t (FILE **)'
| `-ParmVarDecl 0x1faf6667b00 <col:83, col:91> col:91 _File 'FILE **'
|-FunctionDecl 0x1faf6663f90 <line:320:28, col:106> col:44 tmpnam_s 'errno_t (char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t)'
| |-ParmVarDecl 0x1faf6667d48 <col:75, col:82> col:82 _Buf 'char *'
| `-ParmVarDecl 0x1faf6667dc0 <col:93, col:101> col:101 _Size 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1faf6664210 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:323:79 tmpnam 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1faf6664130 <col:113, col:119> col:119 _Buffer 'char *'
| `-DeprecatedAttr 0x1faf66642b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using tmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6664578 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:324:28, col:81> col:40 ungetc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1faf6664400 <col:52, col:56> col:56 _Ch 'int'
| `-ParmVarDecl 0x1faf6664478 <col:69, col:76> col:76 _File 'FILE *'
|-FunctionDecl 0x1faf6664990 <line:325:40> col:40 implicit vfprintf 'int (FILE *, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1faf6664a30 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x1faf6664a98 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1faf6664b00 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1faf6664b80 <col:40> Implicit printf 2 0
|-FunctionDecl 0x1faf6664be8 prev 0x1faf6664990 <col:28, col:139> col:40 vfprintf 'int (FILE *, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1faf6664650 <col:57, col:64> col:64 _File 'FILE *'
| |-ParmVarDecl 0x1faf66646d0 <col:101, col:114> col:114 _Format 'const char *'
| |-ParmVarDecl 0x1faf6664748 <col:123, col:131> col:131 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1faf6664ce8 <col:40> Inherited printf 2 0
|-FunctionDecl 0x1faf665ff50 <line:326:40> col:40 implicit vfscanf 'int (FILE *restrict, const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1faf665fff0 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x1faf6660058 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1faf66600c0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1faf6660140 <col:40> Implicit scanf 2 0
|-FunctionDecl 0x1faf66601a8 prev 0x1faf665ff50 <col:28, col:138> col:40 vfscanf 'int (FILE *restrict, const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1faf6664d30 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1faf6664db0 <col:100, col:113> col:113 _Format 'const char *'
| |-ParmVarDecl 0x1faf6664e28 <col:122, col:130> col:130 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1faf66602a8 <col:40> Inherited scanf 2 0
|-FunctionDecl 0x1faf6660508 <line:328:28, col:141> col:40 vfprintf_s 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1faf66602f0 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1faf6660370 <col:103, col:116> col:116 _Format 'const char *'
| `-ParmVarDecl 0x1faf66603e8 <col:125, col:133> col:133 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6660800 <line:329:28, col:140> col:40 vfscanf_s 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1faf66605e8 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1faf6660668 <col:102, col:115> col:115 _Format 'const char *'
| `-ParmVarDecl 0x1faf66606e0 <col:124, col:132> col:132 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6660b48 <line:331:40> col:40 implicit vprintf 'int (const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1faf6660be8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1faf6660c50 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1faf6660cc8 <col:40> Implicit printf 1 0
|-FunctionDecl 0x1faf6660d30 prev 0x1faf6660b48 <col:28, col:116> col:40 vprintf 'int (const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1faf66608e8 <col:78, col:91> col:91 _Format 'const char *'
| |-ParmVarDecl 0x1faf6660960 <col:100, col:108> col:108 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1faf6660e28 <col:40> Inherited printf 1 0
|-FunctionDecl 0x1faf6668108 <line:332:40> col:40 implicit vscanf 'int (const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1faf66681a8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1faf6668210 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1faf6668288 <col:40> Implicit scanf 1 0
|-FunctionDecl 0x1faf66682f0 prev 0x1faf6668108 <col:28, col:115> col:40 vscanf 'int (const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1faf6660e78 <col:77, col:90> col:90 _Format 'const char *'
| |-ParmVarDecl 0x1faf6667fd0 <col:99, col:107> col:107 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1faf66683e8 <col:40> Inherited scanf 1 0
|-FunctionDecl 0x1faf66685b0 <line:334:28, col:118> col:40 vprintf_s 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1faf6668438 <col:80, col:93> col:93 _Format 'const char *'
| `-ParmVarDecl 0x1faf66684b0 <col:102, col:110> col:110 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6668808 <line:335:28, col:117> col:40 vscanf_s 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1faf6668690 <col:79, col:92> col:92 _Format 'const char *'
| `-ParmVarDecl 0x1faf6668708 <col:101, col:109> col:109 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6668d68 <line:337:77> col:77 implicit vsnprintf 'int (char *, unsigned long long, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1faf6668e08 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1faf6668e70 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1faf6668ed8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1faf6668f40 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1faf6660f60 <col:77> Implicit printf 3 0
|-FunctionDecl 0x1faf6660fc8 prev 0x1faf6668d68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:337:218> col:77 vsnprintf 'int (char *, unsigned long long, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1faf66689a8 <col:111, col:118> col:118 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6668a20 <col:132, col:139> col:139 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6668aa0 <col:180, col:193> col:193 _Format 'const char *'
| |-ParmVarDecl 0x1faf6668b18 <col:202, col:210> col:210 _ArgList 'va_list':'char *'
| |-FormatAttr 0x1faf66611b8 <col:77> Inherited printf 3 0
| `-DeprecatedAttr 0x1faf6661088 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6661628 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:339:28, col:206> col:40 vsnprintf_s 'int (char *, size_t, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1faf6661208 <col:77, col:84> col:84 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6661280 <col:98, col:105> col:105 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66612f8 <col:120, col:127> col:127 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6661378 <col:168, col:181> col:181 _Format 'const char *'
| `-ParmVarDecl 0x1faf66613f0 <col:190, col:198> col:198 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6661a68 <line:342:40, col:227> col:52 _vsnprintf_s 'int (char *, size_t, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1faf6661720 <col:94, col:101> col:101 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6661798 <col:115, col:122> col:122 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6661810 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6661890 <col:189, col:202> col:202 _Format 'const char *'
| `-ParmVarDecl 0x1faf6661908 <col:211, col:219> col:219 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6661e38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2003:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:346:89 _snprintf 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1faf6661c20 <col:182, col:188> col:188 _Dest 'char *'
| |-ParmVarDecl 0x1faf6661c98 <col:200, col:208> col:208 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6661d18 <col:246, col:260> col:260 _Format 'const char *'
| `-DeprecatedAttr 0x1faf6661ef0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf666b470 <col:36, line:2004:164> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:346:100 _vsnprintf 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1faf666b1c0 <col:182, col:188> col:188 _Dest 'char *'
| |-ParmVarDecl 0x1faf666b238 <col:200, col:208> col:208 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf666b2b8 <col:246, col:260> col:260 _Format 'const char *'
| |-ParmVarDecl 0x1faf666b330 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:2004:151, col:159> col:159 _Args 'va_list':'char *'
| `-DeprecatedAttr 0x1faf666b530 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf666b928 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:349:21, col:183> col:33 vsprintf_s 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1faf666b678 <col:73, col:80> col:80 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf666b6f0 <col:94, col:101> col:101 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf666b770 <col:145, col:158> col:158 _Format 'const char *'
| `-ParmVarDecl 0x1faf666b7e8 <col:167, col:175> col:175 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf666bce8 <line:351:40, col:149> col:52 vsscanf_s 'int (const char *, const char *, va_list) __attribute__((cdecl))':'int (const char *, const char *, va_list)'
| |-ParmVarDecl 0x1faf666ba18 <col:62, col:75> col:75 _Src 'const char *'
| |-ParmVarDecl 0x1faf666ba98 <col:111, col:124> col:124 _Format 'const char *'
| `-ParmVarDecl 0x1faf666bb10 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf666c0b0 <line:356:85> col:85 implicit sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x1faf666c150 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1faf666c1b8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1faf666c230 <col:85> Implicit printf 2 3
|-FunctionDecl 0x1faf666c298 prev 0x1faf666c0b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1957:138> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:85 sprintf 'int (char *, const char *, ...)'
| |-ParmVarDecl 0x1faf666be90 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1faf666bf10 <col:171, col:185> col:185 _Format 'const char *'
| |-FormatAttr 0x1faf666c478 <col:85> Inherited printf 2 3
| `-DeprecatedAttr 0x1faf666c348 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf666c8a0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94> col:94 implicit vsprintf 'int (char *, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1faf666c940 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1faf666c9a8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1faf666ca10 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1faf666ca90 <col:94> Implicit printf 2 0
|-FunctionDecl 0x1faf666caf8 prev 0x1faf666c8a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1958:150> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94 vsprintf 'int (char *, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1faf666c588 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1faf666c608 <col:171, col:185> col:185 _Format 'const char *'
| |-ParmVarDecl 0x1faf666c680 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1958:137, col:145> col:145 _Args 'va_list':'char *'
| |-FormatAttr 0x1faf666cce0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94> Inherited printf 2 0
| `-DeprecatedAttr 0x1faf666cbb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using vsprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6669ff0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:357:40> col:40 implicit vsscanf 'int (const char *restrict, const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1faf666a090 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1faf666a0f8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1faf666a160 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1faf666a1e0 <col:40> Implicit scanf 2 0
|-FunctionDecl 0x1faf666a248 prev 0x1faf6669ff0 <col:28, col:138> col:40 vsscanf 'int (const char *restrict, const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1faf666cd30 <col:48, col:61> col:61 _srcBuf 'const char *'
| |-ParmVarDecl 0x1faf666cdb0 <col:100, col:113> col:113 _Format 'const char *'
| |-ParmVarDecl 0x1faf666ce28 <col:122, col:130> col:130 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1faf666a348 <col:40> Inherited scanf 2 0
|-FunctionDecl 0x1faf666a510 <line:359:24, col:115> col:36 _vscprintf 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1faf666a398 <col:77, col:90> col:90 _Format 'const char *'
| `-ParmVarDecl 0x1faf666a410 <col:99, col:107> col:107 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf666a808 <line:360:28, col:170> col:40 _snprintf_c 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1faf666a5f0 <col:76, col:83> col:83 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf666a668 <col:97, col:104> col:104 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf666a6e8 <col:145, col:158> col:158 _Format 'const char *'
|-FunctionDecl 0x1faf666aba0 <line:361:28, col:183> col:40 _vsnprintf_c 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1faf666a8f0 <col:77, col:83> col:83 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf666a968 <col:97, col:104> col:104 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf666a9e8 <col:145, col:158> col:158 _Format 'const char *'
| `-ParmVarDecl 0x1faf666aa60 <col:167, col:175> col:175 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf666ae08 <line:363:28, col:128> col:40 _fprintf_p 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1faf666ac88 <col:59, col:66> col:66 _File 'FILE *'
| `-ParmVarDecl 0x1faf666ad08 <col:103, col:116> col:116 _Format 'const char *'
|-FunctionDecl 0x1faf6668fe0 <line:364:28, col:105> col:40 _printf_p 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1faf666aee8 <col:80, col:93> col:93 _Format 'const char *'
|-FunctionDecl 0x1faf66692d0 <line:365:28, col:168> col:40 _sprintf_p 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1faf66690b8 <col:77, col:84> col:84 _Dst 'char *'
| |-ParmVarDecl 0x1faf6669130 <col:95, col:102> col:102 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf66691b0 <col:143, col:156> col:156 _Format 'const char *'
|-FunctionDecl 0x1faf66695c8 <line:366:28, col:142> col:40 _vfprintf_p 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1faf66693b0 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1faf6669430 <col:104, col:117> col:117 _Format 'const char *'
| `-ParmVarDecl 0x1faf66694a8 <col:126, col:134> col:134 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6669828 <line:367:28, col:119> col:40 _vprintf_p 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1faf66696b0 <col:81, col:94> col:94 _Format 'const char *'
| `-ParmVarDecl 0x1faf6669728 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6669bb8 <line:368:28, col:182> col:40 _vsprintf_p 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1faf6669908 <col:78, col:85> col:85 _Dst 'char *'
| |-ParmVarDecl 0x1faf6669980 <col:96, col:103> col:103 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6669a00 <col:144, col:157> col:157 _Format 'const char *'
| `-ParmVarDecl 0x1faf6669a78 <col:166, col:174> col:174 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6669d88 <line:369:24, col:103> col:36 _scprintf_p 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1faf6669ca8 <col:78, col:91> col:91 _Format 'const char *'
|-FunctionDecl 0x1faf666d020 <line:370:24, col:117> col:36 _vscprintf_p 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1faf6669e60 <col:79, col:92> col:92 _Format 'const char *'
| `-ParmVarDecl 0x1faf6669ed8 <col:101, col:109> col:109 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf666d1e0 <line:371:9, col:61> col:21 _set_printf_count_output 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf666d100 <col:51, col:55> col:55 _Value 'int'
|-FunctionDecl 0x1faf666d370 <line:372:9, col:50> col:21 _get_printf_count_output 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1faf666d5b8 <line:374:28, col:143> col:40 _printf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf666d440 <col:90, col:103> col:103 _Format 'const char *'
| `-ParmVarDecl 0x1faf666d4b8 <col:121, col:131> col:131 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf666d810 <line:375:28, col:145> col:40 _printf_p_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf666d698 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1faf666d710 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf666da68 <line:376:28, col:145> col:40 _printf_s_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf666d8f0 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1faf666d968 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf666de18 <line:377:28, col:157> col:40 _vprintf_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf666db48 <col:91, col:104> col:104 _Format 'const char *'
| |-ParmVarDecl 0x1faf666dbc0 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf666dc38 <col:141, col:149> col:149 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf66731a0 <line:378:28, col:159> col:40 _vprintf_p_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf666df00 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1faf666df78 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6673080 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6673498 <line:379:28, col:159> col:40 _vprintf_s_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6673288 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1faf6673300 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6673378 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6673790 <line:381:28, col:166> col:40 _fprintf_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6673578 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1faf66735f8 <col:113, col:126> col:126 _Format 'const char *'
| `-ParmVarDecl 0x1faf6673670 <col:144, col:154> col:154 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6673a88 <line:382:28, col:168> col:40 _fprintf_p_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6673870 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1faf66738f0 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1faf6673968 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6673d80 <line:383:28, col:168> col:40 _fprintf_s_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6673b68 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1faf6673be8 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1faf6673c60 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6675200 <line:384:28, col:147> col:40 _vfprintf_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6673e60 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1faf6673ee0 <col:81, col:94> col:94 _Format 'const char *'
| |-ParmVarDecl 0x1faf6673f58 <col:112, col:122> col:122 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6673fd0 <col:131, col:139> col:139 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6675598 <line:385:28, col:149> col:40 _vfprintf_p_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf66752e8 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1faf6675368 <col:83, col:96> col:96 _Format 'const char *'
| |-ParmVarDecl 0x1faf66753e0 <col:114, col:124> col:124 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6675458 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6675930 <line:386:28, col:149> col:40 _vfprintf_s_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6675680 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1faf6675700 <col:83, col:96> col:96 _Format 'const char *'
| |-ParmVarDecl 0x1faf6675778 <col:114, col:124> col:124 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf66757f0 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6675dc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:388:221> col:78 _sprintf_l 'int (char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6675ae0 <col:112, col:119> col:119 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6675b60 <col:168, col:181> col:181 _Format 'const char *'
| |-ParmVarDecl 0x1faf6675bd8 <col:199, col:209> col:209 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf6675e80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _sprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf66743a0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:389:28, col:211> col:40 _sprintf_p_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6675fc8 <col:79, col:86> col:86 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6674090 <col:100, col:107> col:107 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6674110 <col:158, col:171> col:171 _Format 'const char *'
| `-ParmVarDecl 0x1faf6674188 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6674740 <line:390:40, col:221> col:52 _sprintf_s_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6674490 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6674508 <col:111, col:118> col:118 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6674588 <col:168, col:181> col:181 _Format 'const char *'
| `-ParmVarDecl 0x1faf6674600 <col:199, col:209> col:209 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6674c90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:391:195> col:79 _vsprintf_l 'int (char *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6674930 <col:114, col:121> col:121 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf66749b0 <col:137, col:150> col:150 _Format 'const char *'
| |-ParmVarDecl 0x1faf6674a28 <col:168> col:177 '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1faf6674aa0 <col:179, col:187> col:187 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1faf6674d50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6671298 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:392:28, col:225> col:40 _vsprintf_p_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6674e98 <col:80, col:87> col:87 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6674f10 <col:101, col:108> col:108 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6674f90 <col:159, col:171> col:171 _Format 'const char *'
| |-ParmVarDecl 0x1faf6675008 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6671060 <col:209, col:217> col:217 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf66716d8 <line:393:40, col:235> col:52 _vsprintf_s_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6671390 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6671408 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6671488 <col:169, col:182> col:182 _Format 'const char *'
| |-ParmVarDecl 0x1faf6671500 <col:200, col:210> col:210 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6671578 <col:219, col:227> col:227 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6671948 <line:395:28, col:145> col:40 _scprintf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf66717d0 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1faf6671848 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6671ba0 <line:396:28, col:147> col:40 _scprintf_p_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6671a28 <col:94, col:107> col:107 _Format 'const char *'
| `-ParmVarDecl 0x1faf6671aa0 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6671e90 <line:397:28, col:159> col:40 _vscprintf_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6671c80 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1faf6671cf8 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6671d70 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf666e160 <line:398:28, col:161> col:40 _vscprintf_p_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6671f78 <col:95, col:108> col:108 _Format 'const char *'
| |-ParmVarDecl 0x1faf6671ff0 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf666e040 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf666e5b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:400:247> col:79 _snprintf_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf666e308 <col:115, col:122> col:122 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf666e380 <col:136, col:143> col:143 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf666e400 <col:194, col:207> col:207 _Format 'const char *'
| |-ParmVarDecl 0x1faf666e478 <col:225, col:235> col:235 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf666e678 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf666ea70 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:401:28, col:210> col:40 _snprintf_c_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf666e7c0 <col:78, col:85> col:85 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf666e838 <col:99, col:106> col:106 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf666e8b8 <col:157, col:170> col:170 _Format 'const char *'
| `-ParmVarDecl 0x1faf666e930 <col:188, col:198> col:198 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66760b0 <line:402:40, col:245> col:52 _snprintf_s_l 'int (char *, size_t, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf666eb60 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf666ebd8 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf666ec50 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf666ecd0 <col:192, col:205> col:205 _Format 'const char *'
| `-ParmVarDecl 0x1faf666ed48 <col:223, col:233> col:233 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66765f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:403:262> col:80 _vsnprintf_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf66762a8 <col:117, col:124> col:124 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6676320 <col:138, col:145> col:145 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66763a0 <col:196, col:209> col:209 _Format 'const char *'
| |-ParmVarDecl 0x1faf6676418 <col:227, col:237> col:237 _Locale '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1faf6676490 <col:246, col:254> col:254 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1faf66766b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6676b38 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:404:28, col:176> col:40 _vsnprintf_c_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6676808 <col:79, col:86> col:86 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6676880 <col:100, col:107> col:107 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6676900 <col:118, col:129> col:130 'const char *'
| |-ParmVarDecl 0x1faf6676978 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf66769f0 <col:160, col:168> col:168 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf66720d0 <line:405:28, col:245> col:40 _vsnprintf_s_l 'int (char *, size_t, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6676c30 <col:80, col:87> col:87 _DstBuf 'char *'
| |-ParmVarDecl 0x1faf6676ca8 <col:101, col:108> col:108 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6676d20 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6676da0 <col:181, col:193> col:193 _Format 'const char *'
| |-ParmVarDecl 0x1faf6676e18 <col:210, col:220> col:220 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6676e90 <col:229, col:237> col:237 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6672490 <line:415:24, col:128> col:39 _wfsopen 'FILE *(const wchar_t *, const wchar_t *, int) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *, int)'
| |-ParmVarDecl 0x1faf66721c8 <col:55, col:71> col:71 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1faf6672240 <col:89, col:105> col:105 _Mode 'const wchar_t *'
| `-ParmVarDecl 0x1faf66722c0 <col:117, col:121> col:121 _ShFlag 'int'
|-FunctionDecl 0x1faf6672700 <line:417:28, col:70> col:43 fgetwc 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1faf6672590 <col:58, col:65> col:65 _File 'FILE *'
|-FunctionDecl 0x1faf6672918 <line:418:28, col:58> col:43 _fgetwchar 'wint_t (void) __attribute__((cdecl))':'wint_t (void)'
|-FunctionDecl 0x1faf6672bf8 <line:419:28, col:88> col:43 fputwc 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1faf66729e0 <col:55, col:63> col:63 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1faf6672a58 <col:76, col:83> col:83 _File 'FILE *'
|-FunctionDecl 0x1faf6672e40 <line:420:28, col:70> col:43 _fputwchar 'wint_t (wchar_t) __attribute__((cdecl))':'wint_t (wchar_t)'
| `-ParmVarDecl 0x1faf6672cd0 <col:59, col:67> col:67 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1faf66770c0 <line:421:24, col:65> col:39 getwc 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1faf6672f10 <col:53, col:60> col:60 _File 'FILE *'
|-FunctionDecl 0x1faf6677248 <line:422:24, col:52> col:39 getwchar 'wint_t (void) __attribute__((cdecl))':'wint_t (void)'
|-FunctionDecl 0x1faf6677480 <line:423:28, col:87> col:43 putwc 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1faf6677310 <col:54, col:62> col:62 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1faf6677388 <col:75, col:82> col:82 _File 'FILE *'
|-FunctionDecl 0x1faf6677630 <line:424:28, col:68> col:43 putwchar 'wint_t (wchar_t) __attribute__((cdecl))':'wint_t (wchar_t)'
| `-ParmVarDecl 0x1faf6677558 <col:57, col:65> col:65 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1faf66778d8 <line:425:28, col:88> col:43 ungetwc 'wint_t (wint_t, FILE *) __attribute__((cdecl))':'wint_t (wint_t, FILE *)'
| |-ParmVarDecl 0x1faf6677700 <col:56, col:63> col:63 _Ch 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf6677778 <col:76, col:83> col:83 _File 'FILE *'
|-FunctionDecl 0x1faf6677c80 <line:427:28, col:141> col:46 fgetws 'wchar_t *(wchar_t *, int, FILE *) __attribute__((cdecl))':'wchar_t *(wchar_t *, int, FILE *)'
| |-ParmVarDecl 0x1faf66779b0 <col:82, col:92> col:92 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1faf6677a30 <col:103, col:107> col:107 _SizeInWords 'int'
| `-ParmVarDecl 0x1faf6677aa8 <col:129, col:136> col:136 _File 'FILE *'
|-FunctionDecl 0x1faf6677f80 <line:428:28, col:96> col:40 fputws 'int (const wchar_t *, FILE *) __attribute__((cdecl))':'int (const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1faf6677d60 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1faf6677dd8 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1faf667b2b8 <line:429:28, col:124> col:46 _getws_s 'wchar_t *(wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, size_t)'
| |-ParmVarDecl 0x1faf6678058 <col:84, col:94> col:94 _Str 'wchar_t *'
| `-ParmVarDecl 0x1faf667b110 <col:105, col:112> col:112 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1faf667b5c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:431:83 _getws 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1faf667b450 <col:115, col:124> col:124 _String 'wchar_t *'
| `-DeprecatedAttr 0x1faf667b668 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _getws_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf667b928 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:432:28, col:74> col:40 _putws 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1faf667b7a8 <col:54, col:70> col:70 _Str 'const wchar_t *'
|-FunctionDecl 0x1faf667bc30 <line:434:28, col:129> col:40 fwprintf 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf667b9f8 <col:57, col:64> col:64 _File 'FILE *'
| `-ParmVarDecl 0x1faf667ba70 <col:101, col:117> col:117 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf667be80 <line:436:28, col:131> col:40 fwprintf_s 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf667bd08 <col:59, col:66> col:66 _File 'FILE *'
| `-ParmVarDecl 0x1faf667bd80 <col:103, col:119> col:119 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf667c110 <line:438:28, col:106> col:40 wprintf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1faf667bf58 <col:78, col:94> col:94 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf667c2c0 <line:440:28, col:108> col:40 wprintf_s 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1faf667c1e0 <col:80, col:96> col:96 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf667c470 <line:442:24, col:105> col:36 _scwprintf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1faf667c390 <col:77, col:93> col:93 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf667c808 <line:443:28, col:143> col:40 vfwprintf 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf667c540 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1faf667c5b8 <col:102, col:118> col:118 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf667c630 <col:127, col:135> col:135 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf667caf8 <line:444:28, col:142> col:40 vfwscanf 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf667c8e8 <col:57, col:64> col:64 _File 'FILE *'
| |-ParmVarDecl 0x1faf667c960 <col:101, col:117> col:117 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf667c9d8 <col:126, col:134> col:134 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf667cde8 <line:446:28, col:145> col:40 vfwprintf_s 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf667cbd8 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1faf667cc50 <col:104, col:120> col:120 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf667ccc8 <col:129, col:137> col:137 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf66780d0 <line:447:28, col:144> col:40 vfwscanf_s 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf667cec8 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1faf667cf40 <col:103, col:119> col:119 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf667cfb8 <col:128, col:136> col:136 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf66783d0 <line:449:28, col:120> col:40 vwprintf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf66781b0 <col:79, col:95> col:95 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6678228 <col:104, col:112> col:112 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6678620 <line:450:28, col:119> col:40 vwscanf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf66784a8 <col:78, col:94> col:94 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6678520 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6678870 <line:452:28, col:122> col:40 vwprintf_s 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf66786f8 <col:81, col:97> col:97 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6678770 <col:106, col:114> col:114 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6678ac0 <line:453:28, col:121> col:40 vwscanf_s 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf6678948 <col:80, col:96> col:96 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf66789c0 <col:105, col:113> col:113 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6678e78 <line:457:21, col:173> col:33 swprintf_s 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf6678b98 <col:73, col:83> col:83 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1faf6678c10 <col:94, col:101> col:101 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf6678c88 <col:145, col:161> col:161 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf667d330 <line:461:21, col:187> col:33 vswprintf_s 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf6678f58 <col:74, col:84> col:84 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1faf6678fd0 <col:95, col:102> col:102 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6679048 <col:146, col:162> col:162 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf667d120 <col:171, col:179> col:179 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf667d6e8 <line:462:40, col:156> col:52 vswscanf_s 'int (const wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf667d418 <col:63, col:79> col:79 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1faf667d490 <col:115, col:131> col:131 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf667d508 <col:140, col:148> col:148 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf667d9d8 <line:466:28, col:145> col:40 vswscanf 'int (const wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf667d7c8 <col:49, col:65> col:65 _srcBuf 'const wchar_t *'
| |-ParmVarDecl 0x1faf667d840 <col:104, col:120> col:120 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf667d8b8 <col:129, col:137> col:137 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf667dcc8 <line:468:28, col:184> col:40 _swprintf_c 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf667dab8 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf667db30 <col:105, col:112> col:112 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf667dba8 <col:156, col:172> col:172 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf667e050 <line:469:28, col:198> col:40 _vswprintf_c 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf667dda8 <col:82, col:92> col:92 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf667de20 <col:106, col:113> col:113 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf667de98 <col:157, col:173> col:173 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf667df10 <col:182, col:190> col:190 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6679490 <line:471:40, col:220> col:52 _snwprintf_s 'int (wchar_t *, size_t, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf6679108 <col:94, col:104> col:104 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf6679180 <col:118, col:125> col:125 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66791f8 <col:144, col:151> col:151 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf6679270 <col:192, col:208> col:208 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf6679998 <line:473:40, col:234> col:52 _vsnwprintf_s 'int (wchar_t *, size_t, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf6679578 <col:95, col:105> col:105 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf66795f0 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6679668 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66796e0 <col:193, col:209> col:209 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6679758 <col:218, col:226> col:226 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6679d58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2003:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:477:89 _snwprintf 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf6679b48 <col:187, col:196> col:196 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1faf6679bc0 <col:208, col:216> col:216 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6679c38 <col:254, col:271> col:271 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1faf6679e10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf667a320 <col:36, line:2004:164> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:477:101 _vsnwprintf 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf667a010 <col:187, col:196> col:196 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1faf667a0f0 <col:208, col:216> col:216 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf667a168 <col:254, col:271> col:271 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf667a1e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:2004:151, col:159> col:159 _Args 'va_list':'char *'
| `-DeprecatedAttr 0x1faf667a3e0 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf667a698 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:480:28, col:132> col:40 _fwprintf_p 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf667a520 <col:60, col:67> col:67 _File 'FILE *'
| `-ParmVarDecl 0x1faf667a598 <col:104, col:120> col:120 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf667a850 <line:481:28, col:109> col:40 _wprintf_p 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1faf667a770 <col:81, col:97> col:97 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf667ab30 <line:482:28, col:146> col:40 _vfwprintf_p 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf667a920 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1faf667a998 <col:105, col:121> col:121 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf667aa10 <col:130, col:138> col:138 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf667ad88 <line:483:28, col:123> col:40 _vwprintf_p 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf667ac10 <col:82, col:98> col:98 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf667ac88 <col:107, col:115> col:115 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6683fb0 <line:484:28, col:178> col:40 _swprintf_p 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf667ae60 <col:78, col:88> col:88 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf667aed8 <col:102, col:109> col:109 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf667af50 <col:150, col:166> col:166 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf6684338 <line:485:28, col:192> col:40 _vswprintf_p 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf6684090 <col:79, col:89> col:89 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf6684108 <col:103, col:110> col:110 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6684180 <col:151, col:167> col:167 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf66841f8 <col:176, col:184> col:184 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6684500 <line:486:24, col:107> col:36 _scwprintf_p 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1faf6684420 <col:79, col:95> col:95 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf6684748 <line:487:24, col:121> col:36 _vscwprintf_p 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf66845d0 <col:80, col:96> col:96 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6684648 <col:105, col:113> col:113 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6684a50 <line:489:28, col:147> col:40 _wprintf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6684820 <col:91, col:107> col:107 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6684898 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6684ca0 <line:490:28, col:149> col:40 _wprintf_p_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6684b28 <col:93, col:109> col:109 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6684ba0 <col:127, col:137> col:137 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6684ef0 <line:491:28, col:149> col:40 _wprintf_s_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6684d78 <col:93, col:109> col:109 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6684df0 <col:127, col:137> col:137 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6680268 <line:492:28, col:161> col:40 _vwprintf_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf667ff98 <col:92, col:108> col:108 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6680010 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6680088 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6680558 <line:493:28, col:163> col:40 _vwprintf_p_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6680348 <col:94, col:110> col:110 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf66803c0 <col:128, col:138> col:138 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6680438 <col:147, col:155> col:155 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6680848 <line:494:28, col:163> col:40 _vwprintf_s_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6680638 <col:94, col:110> col:110 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf66806b0 <col:128, col:138> col:138 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6680728 <col:147, col:155> col:155 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6680c08 <line:496:28, col:170> col:40 _fwprintf_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6680928 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1faf66809a0 <col:114, col:130> col:130 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6680a18 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6680f80 <line:497:28, col:172> col:40 _fwprintf_p_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6680ce8 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1faf6680d60 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6680dd8 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6681270 <line:498:28, col:172> col:40 _fwprintf_s_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6681060 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1faf66810d8 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6681150 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66816c0 <line:499:28, col:184> col:40 _vfwprintf_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6681350 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1faf66813c8 <col:115, col:131> col:131 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6681440 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf66814b8 <col:168, col:176> col:176 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6681a50 <line:500:28, col:186> col:40 _vfwprintf_p_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf66817a8 <col:63, col:70> col:70 _File 'FILE *'
| |-ParmVarDecl 0x1faf6681820 <col:117, col:133> col:133 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6681898 <col:151, col:161> col:161 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6681910 <col:170, col:178> col:178 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6681de0 <line:501:28, col:186> col:40 _vfwprintf_s_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6681b38 <col:63, col:70> col:70 _File 'FILE *'
| |-ParmVarDecl 0x1faf6681bb0 <col:117, col:133> col:133 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6681c28 <col:151, col:161> col:161 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6681ca0 <col:170, col:178> col:178 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf66832b0 <line:503:28, col:218> col:40 _swprintf_c_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6681ec8 <col:80, col:90> col:90 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf6682fa0 <col:104, col:111> col:111 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6683018 <col:162, col:178> col:178 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6683090 <col:196, col:206> col:206 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6683640 <line:504:28, col:218> col:40 _swprintf_p_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6683398 <col:80, col:90> col:90 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf6683410 <col:104, col:111> col:111 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6683488 <col:162, col:178> col:178 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6683500 <col:196, col:206> col:206 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66839d0 <line:505:40, col:228> col:52 _swprintf_s_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6683728 <col:91, col:101> col:101 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf66837a0 <col:115, col:122> col:122 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6683818 <col:172, col:188> col:188 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6683890 <col:206, col:216> col:216 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6683ed8 <line:506:28, col:232> col:40 used _vswprintf_c_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6683ab8 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf6683b30 <col:105, col:112> col:112 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6683ba8 <col:163, col:179> col:179 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6683c20 <col:197, col:207> col:207 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6683c98 <col:216, col:224> col:224 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6685328 <line:507:28, col:232> col:40 _vswprintf_p_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6684fe8 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf6685060 <col:105, col:112> col:112 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66850d8 <col:163, col:179> col:179 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6685150 <col:197, col:207> col:207 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf66851c8 <col:216, col:224> col:224 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6685758 <line:508:40, col:242> col:52 _vswprintf_s_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6685418 <col:92, col:102> col:102 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf6685490 <col:116, col:123> col:123 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6685508 <col:173, col:189> col:189 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6685580 <col:207, col:217> col:217 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf66855f8 <col:226, col:234> col:234 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf66859c0 <line:510:24, col:145> col:36 _scwprintf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6685848 <col:89, col:105> col:105 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf66858c0 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6685c10 <line:511:24, col:147> col:36 _scwprintf_p_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6685a98 <col:91, col:107> col:107 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6685b10 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6685ef8 <line:512:24, col:161> col:36 _vscwprintf_p_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6685ce8 <col:92, col:108> col:108 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6685d60 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf6685dd8 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6688388 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:514:255> col:80 _snwprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf66880e0 <col:117, col:127> col:127 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf6688158 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66881d0 <col:199, col:215> col:215 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6688248 <col:233, col:243> col:243 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf6688448 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf66889b8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:515:40, col:252> col:52 _snwprintf_s_l 'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6688590 <col:92, col:102> col:102 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf6688608 <col:116, col:123> col:123 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6688680 <col:138, col:145> col:145 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66886f8 <col:196, col:212> col:212 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6688770 <col:230, col:240> col:240 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6688ef0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:516:270> col:81 _vsnwprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6688bb0 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf6688c28 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6688ca0 <col:201, col:217> col:217 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6688d18 <col:235, col:245> col:245 _Locale '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1faf6688d90 <col:254, col:262> col:262 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1faf6689000 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6689610 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:517:40, col:266> col:52 _vsnwprintf_s_l 'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6689148 <col:93, col:103> col:103 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1faf66891c0 <col:117, col:124> col:124 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6689238 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66892b0 <col:197, col:213> col:213 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6689328 <col:231, col:241> col:241 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf66893a0 <col:250, col:258> col:258 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6689b10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1957:138> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:533:110 _swprintf 'int (wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf66898d8 <col:183, col:192> col:192 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1faf6689950 <col:229, col:246> col:246 _Format 'const wchar_t *'
| |-DeprecatedAttr 0x1faf6689bc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _swprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1faf6689cd8 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1faf66821f8 <col:36, line:1958:150> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:533:134 _vswprintf 'int (wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf6689f90 <col:183, col:192> col:192 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1faf6681fa0 <col:229, col:246> col:246 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6682018 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1958:137, col:145> col:145 _Args 'va_list':'char *'
| |-DeprecatedAttr 0x1faf66822b0 <line:275:47, col:63> "This function or variable may be unsafe. Consider using vswprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1faf66823c8 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1faf6682968 <col:36, line:1961:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:534:110 __swprintf_l 'int (wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6682688 <col:211, col:220> col:220 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1faf6682700 <col:267, col:284> col:284 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6682778 <col:293, col:304> col:304 _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-DeprecatedAttr 0x1faf6682a20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __swprintf_l_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1faf6682b40 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1faf668a220 <col:36, line:1962:166> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:534:124 __vswprintf_l 'int (wchar_t *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf6682e00 <col:211, col:220> col:220 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1faf6682e78 <col:267, col:284> col:284 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6682ef0 <col:293, col:304> col:304 _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1faf668a010 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1962:153, col:161> col:161 _Args 'va_list':'char *'
| |-DeprecatedAttr 0x1faf668a2e0 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vswprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1faf668a400 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1faf668a708 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:36:1, line:44:1> line:36:21 swprintf 'int (wchar_t *, size_t, const wchar_t *, ...)' static inline
| |-ParmVarDecl 0x1faf668a528 <col:53, col:63> col:63 used _String 'wchar_t *'
| |-ParmVarDecl 0x1faf668a5a0 <col:72, col:79> col:79 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf668a618 <col:117, col:133> col:133 used _Format 'const wchar_t *'
| `-CompoundStmt 0x1faf668b2c0 <line:37:1, line:44:1>
|   |-DeclStmt 0x1faf668a850 <line:38:5, col:21>
|   | `-VarDecl 0x1faf668a7e8 <col:5, col:13> col:13 used _Arglist 'va_list':'char *'
|   |-DeclStmt 0x1faf668a8e8 <line:39:5, col:13>
|   | `-VarDecl 0x1faf668a880 <col:5, col:9> col:9 used _Ret 'int'
|   |-CallExpr 0x1faf668ac40 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34, col:62> 'void'
|   | |-ImplicitCastExpr 0x1faf668ac28 <col:34> 'void (*)(__builtin_va_list &, ...)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1faf668ab40 <col:34> '<builtin fn type>' Function 0x1faf668a9d8 '__builtin_va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1faf668ab78 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:40:19> 'va_list':'char *' lvalue Var 0x1faf668a7e8 '_Arglist' 'va_list':'char *'
|   | `-DeclRefExpr 0x1faf668abb0 <col:29> 'const wchar_t *' lvalue ParmVar 0x1faf668a618 '_Format' 'const wchar_t *'
|   |-BinaryOperator 0x1faf668af00 <line:41:5, col:67> 'int' '='
|   | |-DeclRefExpr 0x1faf668ac70 <col:5> 'int' lvalue Var 0x1faf668a880 '_Ret' 'int'
|   | `-CallExpr 0x1faf668ae40 <col:12, col:67> 'int'
|   |   |-ImplicitCastExpr 0x1faf668ae28 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1faf668aca8 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1faf6683ed8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|   |   |-ImplicitCastExpr 0x1faf668ae88 <col:27> 'wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf668acc8 <col:27> 'wchar_t *' lvalue ParmVar 0x1faf668a528 '_String' 'wchar_t *'
|   |   |-ImplicitCastExpr 0x1faf668aea0 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf668ace8 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf668a5a0 '_Count' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1faf668aeb8 <col:44> 'const wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf668ad08 <col:44> 'const wchar_t *' lvalue ParmVar 0x1faf668a618 '_Format' 'const wchar_t *'
|   |   |-ImplicitCastExpr 0x1faf668aed0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> '_locale_t':'struct localeinfo_struct *' <NullToPointer>
|   |   | `-ParenExpr 0x1faf668ad90 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x1faf668ad68 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x1faf668ad28 <col:26> 'int' 0
|   |   `-ImplicitCastExpr 0x1faf668aee8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:41:59> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf668adb0 <col:59> 'va_list':'char *' lvalue Var 0x1faf668a7e8 '_Arglist' 'va_list':'char *'
|   |-CallExpr 0x1faf668b250 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:27:34, col:53> 'void'
|   | |-ImplicitCastExpr 0x1faf668b238 <col:34> 'void (*)(__builtin_va_list &)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1faf668b188 <col:34> '<builtin fn type>' Function 0x1faf668b020 '__builtin_va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1faf668b1c0 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:42:17> 'va_list':'char *' lvalue Var 0x1faf668a7e8 '_Arglist' 'va_list':'char *'
|   `-ReturnStmt 0x1faf668b2b0 <line:43:5, col:12>
|     `-ImplicitCastExpr 0x1faf668b298 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1faf668b278 <col:12> 'int' lvalue Var 0x1faf668a880 '_Ret' 'int'
|-FunctionDecl 0x1faf668a9d8 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34> col:34 implicit used __builtin_va_start 'void (__builtin_va_list &, ...)' extern
| |-ParmVarDecl 0x1faf668aa78 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1faf668aae8 <col:34> Implicit
|-FunctionDecl 0x1faf668b020 <line:27:34> col:34 implicit used __builtin_va_end 'void (__builtin_va_list &)' extern
| |-ParmVarDecl 0x1faf668b0c0 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1faf668b130 <col:34> Implicit
|-FunctionDecl 0x1faf668b5b8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:49:1, line:52:1> line:49:31 vswprintf 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)' static inline
| |-ParmVarDecl 0x1faf668b310 <col:64, col:74> col:74 used _String 'wchar_t *'
| |-ParmVarDecl 0x1faf668b388 <col:83, col:90> col:90 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf668b400 <col:138, col:154> col:154 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf668b478 <col:163, col:171> col:171 used _Ap 'va_list':'char *'
| `-CompoundStmt 0x1faf668b8a0 <line:50:1, line:52:1>
|   `-ReturnStmt 0x1faf668b890 <line:51:5, col:62>
|     `-CallExpr 0x1faf668b7d0 <col:12, col:62> 'int'
|       |-ImplicitCastExpr 0x1faf668b7b8 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1faf668b690 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1faf6683ed8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|       |-ImplicitCastExpr 0x1faf668b818 <col:27> 'wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf668b6b0 <col:27> 'wchar_t *' lvalue ParmVar 0x1faf668b310 '_String' 'wchar_t *'
|       |-ImplicitCastExpr 0x1faf668b830 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf668b6d0 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf668b388 '_Count' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1faf668b848 <col:44> 'const wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf668b6f0 <col:44> 'const wchar_t *' lvalue ParmVar 0x1faf668b400 '_Format' 'const wchar_t *'
|       |-ImplicitCastExpr 0x1faf668b860 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> '_locale_t':'struct localeinfo_struct *' <NullToPointer>
|       | `-ParenExpr 0x1faf668b778 <col:17, col:27> 'void *'
|       |   `-CStyleCastExpr 0x1faf668b750 <col:18, col:26> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x1faf668b710 <col:26> 'int' 0
|       `-ImplicitCastExpr 0x1faf668b878 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:51:59> 'va_list':'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1faf668b798 <col:59> 'va_list':'char *' lvalue ParmVar 0x1faf668b478 '_Ap' 'va_list':'char *'
|-FunctionDecl 0x1faf668bb40 <line:60:1, line:68:1> line:60:21 _swprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)' static inline
| |-ParmVarDecl 0x1faf668b8c8 <col:56, col:66> col:66 used _String 'wchar_t *'
| |-ParmVarDecl 0x1faf668b940 <col:75, col:82> col:82 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf668b9b8 <col:130, col:146> col:146 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf668ba30 <col:155, col:165> col:165 used _Plocinfo '_locale_t':'struct localeinfo_struct *'
| `-CompoundStmt 0x1faf668c0d8 <line:61:1, line:68:1>
|   |-DeclStmt 0x1faf668bc90 <line:62:5, col:21>
|   | `-VarDecl 0x1faf668bc28 <col:5, col:13> col:13 used _Arglist 'va_list':'char *'
|   |-DeclStmt 0x1faf668bd28 <line:63:5, col:13>
|   | `-VarDecl 0x1faf668bcc0 <col:5, col:9> col:9 used _Ret 'int'
|   |-CallExpr 0x1faf668bdd0 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34, col:62> 'void'
|   | |-ImplicitCastExpr 0x1faf668bdb8 <col:34> 'void (*)(__builtin_va_list &, ...)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1faf668bd40 <col:34> '<builtin fn type>' Function 0x1faf668a9d8 '__builtin_va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1faf668bd60 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:64:19> 'va_list':'char *' lvalue Var 0x1faf668bc28 '_Arglist' 'va_list':'char *'
|   | `-DeclRefExpr 0x1faf668bd98 <col:29> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1faf668ba30 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|   |-BinaryOperator 0x1faf668bfd0 <line:65:5, col:72> 'int' '='
|   | |-DeclRefExpr 0x1faf668be00 <col:5> 'int' lvalue Var 0x1faf668bcc0 '_Ret' 'int'
|   | `-CallExpr 0x1faf668bf10 <col:12, col:72> 'int'
|   |   |-ImplicitCastExpr 0x1faf668bef8 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1faf668be38 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1faf6683ed8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|   |   |-ImplicitCastExpr 0x1faf668bf58 <col:27> 'wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf668be58 <col:27> 'wchar_t *' lvalue ParmVar 0x1faf668b8c8 '_String' 'wchar_t *'
|   |   |-ImplicitCastExpr 0x1faf668bf70 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf668be78 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf668b940 '_Count' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1faf668bf88 <col:44> 'const wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf668be98 <col:44> 'const wchar_t *' lvalue ParmVar 0x1faf668b9b8 '_Format' 'const wchar_t *'
|   |   |-ImplicitCastExpr 0x1faf668bfa0 <col:53> '_locale_t':'struct localeinfo_struct *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf668beb8 <col:53> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1faf668ba30 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|   |   `-ImplicitCastExpr 0x1faf668bfb8 <col:64> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf668bed8 <col:64> 'va_list':'char *' lvalue Var 0x1faf668bc28 '_Arglist' 'va_list':'char *'
|   |-CallExpr 0x1faf668c068 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:27:34, col:53> 'void'
|   | |-ImplicitCastExpr 0x1faf668c050 <col:34> 'void (*)(__builtin_va_list &)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1faf668bff0 <col:34> '<builtin fn type>' Function 0x1faf668b020 '__builtin_va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1faf668c030 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:66:17> 'va_list':'char *' lvalue Var 0x1faf668bc28 '_Arglist' 'va_list':'char *'
|   `-ReturnStmt 0x1faf668c0c8 <line:67:5, col:12>
|     `-ImplicitCastExpr 0x1faf668c0b0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1faf668c090 <col:12> 'int' lvalue Var 0x1faf668bcc0 '_Ret' 'int'
|-FunctionDecl 0x1faf668c468 <line:73:1, line:76:1> line:73:31 _vswprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' static inline
| |-ParmVarDecl 0x1faf668c128 <col:67, col:77> col:77 used _String 'wchar_t *'
| |-ParmVarDecl 0x1faf668c1a0 <col:86, col:93> col:93 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf668c218 <col:141, col:157> col:157 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf668c290 <col:166, col:176> col:176 used _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1faf668c308 <col:187, col:195> col:195 used _Ap 'va_list':'char *'
| `-CompoundStmt 0x1faf668c6f0 <line:74:1, line:76:1>
|   `-ReturnStmt 0x1faf668c6e0 <line:75:5, col:67>
|     `-CallExpr 0x1faf668c620 <col:12, col:67> 'int'
|       |-ImplicitCastExpr 0x1faf668c608 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1faf668c548 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1faf6683ed8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|       |-ImplicitCastExpr 0x1faf668c668 <col:27> 'wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf668c568 <col:27> 'wchar_t *' lvalue ParmVar 0x1faf668c128 '_String' 'wchar_t *'
|       |-ImplicitCastExpr 0x1faf668c680 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf668c588 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf668c1a0 '_Count' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1faf668c698 <col:44> 'const wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf668c5a8 <col:44> 'const wchar_t *' lvalue ParmVar 0x1faf668c218 '_Format' 'const wchar_t *'
|       |-ImplicitCastExpr 0x1faf668c6b0 <col:53> '_locale_t':'struct localeinfo_struct *' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf668c5c8 <col:53> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1faf668c290 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|       `-ImplicitCastExpr 0x1faf668c6c8 <col:64> 'va_list':'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1faf668c5e8 <col:64> 'va_list':'char *' lvalue ParmVar 0x1faf668c308 '_Ap' 'va_list':'char *'
|-FunctionDecl 0x1faf668c938 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:555:24, col:129> col:42 _wtempnam 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1faf668c718 <col:63, col:79> col:79 _Directory 'const wchar_t *'
| `-ParmVarDecl 0x1faf668c790 <col:102, col:118> col:118 _FilePrefix 'const wchar_t *'
|-FunctionDecl 0x1faf668cb88 <line:561:24, col:119> col:36 _vscwprintf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1faf668ca10 <col:78, col:94> col:94 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf668ca88 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf668ce70 <line:562:24, col:159> col:36 _vscwprintf_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1faf668cc60 <col:90, col:106> col:106 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf668ccd8 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1faf668cd50 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1faf6686148 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:563:158> col:71 fwscanf 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf6685fd0 <col:87, col:94> col:94 _File 'FILE *'
| |-ParmVarDecl 0x1faf6686048 <col:130, col:146> col:146 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1faf66861f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6686608 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:564:206> col:78 _fwscanf_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf66863f8 <col:97, col:104> col:104 _File 'FILE *'
| |-ParmVarDecl 0x1faf6686470 <col:150, col:166> col:166 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf66864e8 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf66866c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6686978 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:568:28, col:131> col:40 fwscanf_s 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf6686800 <col:58, col:65> col:65 _File 'FILE *'
| `-ParmVarDecl 0x1faf6686878 <col:103, col:119> col:119 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf6686c60 <line:570:28, col:172> col:40 _fwscanf_s_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6686a50 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1faf6686ac8 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6686b40 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf668f0d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:571:165> col:71 swscanf 'int (const wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf6686e00 <col:86, col:102> col:102 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1faf6686e78 <col:137, col:153> col:153 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1faf668f180 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using swscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf668f658 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:572:213> col:78 _swscanf_l 'int (const wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf668f380 <col:96, col:112> col:112 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1faf668f3f8 <col:157, col:173> col:173 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf668f470 <col:191, col:201> col:201 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf668f710 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _swscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf668f9c8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:574:40, col:149> col:52 swscanf_s 'int (const wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf668f850 <col:69, col:84> col:84 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1faf668f8c8 <col:121, col:137> col:137 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf668fcb0 <line:576:40, col:191> col:52 _swscanf_s_l 'int (const wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf668faa0 <col:72, col:88> col:88 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1faf668fb18 <col:135, col:151> col:151 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf668fb90 <col:169, col:179> col:179 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6693188 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:577:219> col:77 _snwscanf 'int (const wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf668fe50 <col:117, col:133> col:133 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1faf668fec8 <col:144, col:151> col:151 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf668ff40 <col:191, col:207> col:207 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1faf6693240 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf66937c0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:578:261> col:79 _snwscanf_l 'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6693440 <col:121, col:137> col:137 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1faf66934b8 <col:148, col:155> col:155 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6693530 <col:205, col:221> col:221 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf66935a8 <col:239, col:249> col:249 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf6693880 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6693bd0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:579:40, col:198> col:52 _snwscanf_s 'int (const wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf66939c0 <col:94, col:110> col:110 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1faf6693a38 <col:121, col:128> col:128 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf6693ab0 <col:170, col:186> col:186 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf6693f58 <line:580:40, col:238> col:52 _snwscanf_s_l 'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf6693cb0 <col:96, col:112> col:112 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1faf6693d28 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6693da0 <col:182, col:198> col:198 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6693e18 <col:216, col:226> col:226 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6691230 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:581:134> col:70 wscanf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| |-ParmVarDecl 0x1faf6691150 <col:106, col:122> col:122 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1faf66912d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6691650 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:582:182> col:77 _wscanf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf66914d8 <col:126, col:142> col:142 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1faf6691550 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1faf6691700 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6691920 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:584:40, col:120> col:52 wscanf_s 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1faf6691840 <col:92, col:108> col:108 _Format 'const wchar_t *'
|-FunctionDecl 0x1faf6691b68 <line:586:40, col:161> col:52 _wscanf_s_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1faf66919f0 <col:105, col:121> col:121 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1faf6691a68 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf6691e68 <line:589:24, col:99> col:39 _wfdopen 'FILE *(int, const wchar_t *) __attribute__((cdecl))':'FILE *(int, const wchar_t *)'
| |-ParmVarDecl 0x1faf6691c48 <col:53, col:57> col:57 _FileHandle 'int'
| `-ParmVarDecl 0x1faf6691cc0 <col:78, col:94> col:94 _Mode 'const wchar_t *'
|-FunctionDecl 0x1faf6692238 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:590:144> col:74 _wfopen 'FILE *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1faf6692000 <col:89, col:105> col:105 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1faf6692090 <col:123, col:139> col:139 _Mode 'const wchar_t *'
| `-DeprecatedAttr 0x1faf66922e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wfopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf66926f0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:591:28, col:157> col:44 _wfopen_s 'errno_t (FILE **, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (FILE **, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1faf6692430 <col:80, col:88> col:88 _File 'FILE **'
| |-ParmVarDecl 0x1faf66924a8 <col:102, col:118> col:118 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x1faf6692520 <col:136, col:152> col:152 _Mode 'const wchar_t *'
|-FunctionDecl 0x1faf6692b50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:592:173> col:76 _wfreopen 'FILE *(const wchar_t *, const wchar_t *, FILE *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1faf6692890 <col:93, col:109> col:109 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1faf6692908 <col:127, col:143> col:143 _Mode 'const wchar_t *'
| |-ParmVarDecl 0x1faf6692980 <col:158, col:165> col:165 _OldFile 'FILE *'
| `-DeprecatedAttr 0x1faf6692c08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wfreopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6695108 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:593:28, col:184> col:44 _wfreopen_s 'errno_t (FILE **, const wchar_t *, const wchar_t *, FILE *) __attribute__((cdecl))':'errno_t (FILE **, const wchar_t *, const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1faf6692d50 <col:82, col:90> col:90 _File 'FILE **'
| |-ParmVarDecl 0x1faf6692dc8 <col:104, col:120> col:120 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1faf6692e40 <col:138, col:154> col:154 _Mode 'const wchar_t *'
| `-ParmVarDecl 0x1faf6692eb8 <col:169, col:176> col:176 _OldFile 'FILE *'
|-FunctionDecl 0x1faf6695360 <line:597:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x1faf66951f0 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1faf66955a0 <line:600:24, col:107> col:39 _wpopen 'FILE *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1faf6695430 <col:54, col:69> col:69 _Command 'const wchar_t *'
| `-ParmVarDecl 0x1faf66954a8 <col:86, col:102> col:102 _Mode 'const wchar_t *'
|-FunctionDecl 0x1faf6695758 <line:602:9, col:62> col:21 _wremove 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1faf6695678 <col:37, col:53> col:53 _Filename 'const wchar_t *'
|-FunctionDecl 0x1faf6695a48 <line:603:28, col:127> col:44 _wtmpnam_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1faf6695828 <col:84, col:94> col:94 _DstBuf 'wchar_t *'
| `-ParmVarDecl 0x1faf66958a0 <col:108, col:115> col:115 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1faf6695cb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:605:82 _wtmpnam 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1faf6695be0 <col:118, col:127> col:127 _Buffer 'wchar_t *'
| `-DeprecatedAttr 0x1faf6695d60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wtmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1faf6695f78 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:607:28, col:78> col:43 _fgetwc_nolock 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1faf6695ea0 <col:66, col:73> col:73 _File 'FILE *'
|-FunctionDecl 0x1faf668e148 <line:608:28, col:96> col:43 _fputwc_nolock 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1faf6696048 <col:63, col:71> col:71 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1faf668e050 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1faf668e390 <line:609:28, col:96> col:43 _ungetwc_nolock 'wint_t (wint_t, FILE *) __attribute__((cdecl))':'wint_t (wint_t, FILE *)'
| |-ParmVarDecl 0x1faf668e220 <col:64, col:71> col:71 _Ch 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf668e298 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1faf668e540 <line:670:9, col:53> col:22 _lock_file 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1faf668e468 <col:41, col:48> col:48 _File 'FILE *'
|-FunctionDecl 0x1faf668e6e8 <line:671:9, col:55> col:22 _unlock_file 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1faf668e610 <col:43, col:50> col:50 _File 'FILE *'
|-FunctionDecl 0x1faf668e898 <line:673:28, col:75> col:40 _fclose_nolock 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf668e7b8 <col:63, col:70> col:70 _File 'FILE *'
|-FunctionDecl 0x1faf668ea48 <line:674:28, col:79> col:40 _fflush_nolock 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1faf668e968 <col:67, col:74> col:74 _File 'FILE *'
|-FunctionDecl 0x1faf668edc0 <line:675:28, col:179> col:43 _fread_nolock 'size_t (void *, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1faf668eb20 <col:97, col:104> col:104 _DstBuf 'void *'
| |-ParmVarDecl 0x1faf668eb98 <col:118, col:125> col:125 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf668ec10 <col:144, col:151> col:151 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf668ec88 <col:167, col:174> col:174 _File 'FILE *'
|-FunctionDecl 0x1faf66972b0 <line:676:28, col:203> col:43 _fread_nolock_s 'size_t (void *, size_t, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1faf668eeb0 <col:99, col:106> col:106 _DstBuf 'void *'
| |-ParmVarDecl 0x1faf668ef28 <col:120, col:127> col:127 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf668efa0 <col:142, col:149> col:149 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66970e0 <col:168, col:175> col:175 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf6697158 <col:191, col:198> col:198 _File 'FILE *'
|-FunctionDecl 0x1faf66975c0 <line:677:28, col:111> col:40 _fseek_nolock 'int (FILE *, long, int) __attribute__((cdecl))':'int (FILE *, long, int)'
| |-ParmVarDecl 0x1faf66973a0 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1faf6697420 <col:81, col:86> col:86 _Offset 'long'
| `-ParmVarDecl 0x1faf66974a0 <col:100, col:104> col:104 _Origin 'int'
|-FunctionDecl 0x1faf6697780 <line:678:24, col:71> col:37 _ftell_nolock 'long (FILE *) __attribute__((cdecl))':'long (FILE *)'
| `-ParmVarDecl 0x1faf66976a0 <col:59, col:66> col:66 _File 'FILE *'
|-FunctionDecl 0x1faf6697a70 <line:679:28, col:117> col:40 _fseeki64_nolock 'int (FILE *, long long, int) __attribute__((cdecl))':'int (FILE *, long long, int)'
| |-ParmVarDecl 0x1faf6697850 <col:65, col:72> col:72 _File 'FILE *'
| |-ParmVarDecl 0x1faf66978d0 <col:84, col:92> col:92 _Offset 'long long'
| `-ParmVarDecl 0x1faf6697950 <col:106, col:110> col:110 _Origin 'int'
|-FunctionDecl 0x1faf6697c30 <line:680:24, col:77> col:40 _ftelli64_nolock 'long long (FILE *) __attribute__((cdecl))':'long long (FILE *)'
| `-ParmVarDecl 0x1faf6697b50 <col:65, col:72> col:72 _File 'FILE *'
|-FunctionDecl 0x1faf6697fa8 <line:681:28, col:170> col:43 _fwrite_nolock 'size_t (const void *, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (const void *, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1faf6697d08 <col:89, col:102> col:102 _DstBuf 'const void *'
| |-ParmVarDecl 0x1faf6697d80 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf6697df8 <col:135, col:142> col:142 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1faf6697e70 <col:158, col:165> col:165 _File 'FILE *'
|-FunctionDecl 0x1faf66901e8 <line:682:28, col:89> col:40 _ungetc_nolock 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1faf6690070 <col:60, col:64> col:64 _Ch 'int'
| `-ParmVarDecl 0x1faf66900e8 <col:77, col:84> col:84 _File 'FILE *'
|-FunctionDecl 0x1faf6690520 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:709:136> col:57 tempnam 'char *(const char *, const char *) __attribute__((cdecl))':'char *(const char *, const char *)'
| |-ParmVarDecl 0x1faf66903a0 <col:76, col:89> col:89 _Directory 'const char *'
| |-ParmVarDecl 0x1faf6690420 <col:112, col:125> col:125 _FilePrefix 'const char *'
| `-DeprecatedAttr 0x1faf66905d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _tempnam. See online help for details." ""
|-FunctionDecl 0x1faf6690888 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:715:89> col:75 fcloseall 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1faf6690928 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcloseall. See online help for details." ""
|-FunctionDecl 0x1faf6690c68 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:716:127> col:71 fdopen 'FILE *(int, const char *) __attribute__((cdecl))':'FILE *(int, const char *)'
| |-ParmVarDecl 0x1faf6690af0 <col:83, col:87> col:87 _FileHandle 'int'
| |-ParmVarDecl 0x1faf6690b70 <col:107, col:120> col:120 _Format 'const char *'
| `-DeprecatedAttr 0x1faf6690d18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fdopen. See online help for details." ""
|-FunctionDecl 0x1faf6699100 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:717:87> col:74 fgetchar 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1faf66991a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fgetchar. See online help for details." ""
|-FunctionDecl 0x1faf6699440 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:718:92> col:68 fileno 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| |-ParmVarDecl 0x1faf6699360 <col:80, col:87> col:87 _File 'FILE *'
| `-DeprecatedAttr 0x1faf66994e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fileno. See online help for details." ""
|-FunctionDecl 0x1faf6699768 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:719:87> col:74 flushall 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1faf6699808 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _flushall. See online help for details." ""
|-FunctionDecl 0x1faf6699ab0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:720:95> col:74 fputchar 'int (int) __attribute__((cdecl))':'int (int)'
| |-ParmVarDecl 0x1faf66999d0 <col:88, col:92> col:92 _Ch 'int'
| `-DeprecatedAttr 0x1faf6699b58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fputchar. See online help for details." ""
|-FunctionDecl 0x1faf6699e38 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:721:91> col:66 getw 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| |-ParmVarDecl 0x1faf6699d58 <col:79, col:86> col:86 _File 'FILE *'
| `-DeprecatedAttr 0x1faf6699ee0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _getw. See online help for details." ""
|-FunctionDecl 0x1faf6698268 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:722:109> col:70 putw 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1faf66980f0 <col:80, col:84> col:84 _Ch 'int'
| |-ParmVarDecl 0x1faf6698168 <col:97, col:104> col:104 _File 'FILE *'
| `-DeprecatedAttr 0x1faf6698318 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putw. See online help for details." ""
|-FunctionDecl 0x1faf66985d8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:723:77> col:67 rmtmp 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1faf6698678 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _rmtmp. See online help for details." ""
|-FunctionDecl 0x1faf66988b0 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:49:9, col:58> col:40 __pctype_func 'const unsigned short *(void) __attribute__((cdecl))':'const unsigned short *(void)'
|-VarDecl 0x1faf6698980 <line:51:9, col:38> col:38 _pctype 'const unsigned short *' extern
|-VarDecl 0x1faf6698a80 <line:62:9, col:45> col:37 _wctype 'const unsigned short []' extern
|-FunctionDecl 0x1faf6698c78 <line:73:9, col:53> col:34 __pwctype_func 'const wctype_t *(void) __attribute__((cdecl))':'const wctype_t *(void)'
|-VarDecl 0x1faf6698d40 <line:75:9, col:32> col:32 _pwctype 'const wctype_t *' extern
|-FunctionDecl 0x1faf6698fc0 <line:119:24, col:72> col:36 _isctype 'int (int, int) __attribute__((cdecl))':'int (int, int)'
| |-ParmVarDecl 0x1faf6698dd8 <col:50, col:54> col:54 _C 'int'
| `-ParmVarDecl 0x1faf6698e58 <col:63, col:67> col:67 _Type 'int'
|-FunctionDecl 0x1faf669a3e8 <line:120:24, col:102> col:36 _isctype_l 'int (int, int, _locale_t) __attribute__((cdecl))':'int (int, int, _locale_t)'
| |-ParmVarDecl 0x1faf669a110 <col:52, col:56> col:56 _C 'int'
| |-ParmVarDecl 0x1faf669a190 <col:65, col:69> col:69 _Type 'int'
| `-ParmVarDecl 0x1faf669a208 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf669a5b0 <line:121:55> col:55 implicit isalpha 'int (int)' extern
| |-ParmVarDecl 0x1faf669a650 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf669a6c0 <col:55> Implicit
| `-PureAttr 0x1faf669a718 <col:55> Implicit
|-FunctionDecl 0x1faf669a740 prev 0x1faf669a5b0 <col:43, col:74> col:55 isalpha 'int (int)'
| |-ParmVarDecl 0x1faf669a4d0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1faf669a830 <col:55> Inherited Implicit
| `-PureAttr 0x1faf669a858 <col:55> Inherited Implicit
|-FunctionDecl 0x1faf669aac0 <line:122:24, col:86> col:36 _isalpha_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf669a898 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf669a910 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf669ac80 <line:123:55> col:55 implicit isupper 'int (int)' extern
| |-ParmVarDecl 0x1faf669ad20 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf669ad90 <col:55> Implicit
| `-PureAttr 0x1faf669ade8 <col:55> Implicit
|-FunctionDecl 0x1faf669ae10 prev 0x1faf669ac80 <col:43, col:74> col:55 isupper 'int (int)'
| |-ParmVarDecl 0x1faf669aba0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1faf669af00 <col:55> Inherited Implicit
| `-PureAttr 0x1faf669af28 <col:55> Inherited Implicit
|-FunctionDecl 0x1faf669c130 <line:124:24, col:86> col:36 _isupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf669af68 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf669afe0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf669c2f0 <line:125:55> col:55 implicit islower 'int (int)' extern
| |-ParmVarDecl 0x1faf669c390 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf669c400 <col:55> Implicit
| `-PureAttr 0x1faf669c458 <col:55> Implicit
|-FunctionDecl 0x1faf669c480 prev 0x1faf669c2f0 <col:43, col:74> col:55 islower 'int (int)'
| |-ParmVarDecl 0x1faf669c210 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1faf669c570 <col:55> Inherited Implicit
| `-PureAttr 0x1faf669c598 <col:55> Inherited Implicit
|-FunctionDecl 0x1faf669c750 <line:126:24, col:86> col:36 _islower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf669c5d8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf669c650 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf669c910 <line:127:55> col:55 implicit isdigit 'int (int)' extern
| |-ParmVarDecl 0x1faf669c9b0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf669ca20 <col:55> Implicit
| `-PureAttr 0x1faf669ca78 <col:55> Implicit
|-FunctionDecl 0x1faf669caa0 prev 0x1faf669c910 <col:43, col:74> col:55 isdigit 'int (int)'
| |-ParmVarDecl 0x1faf669c830 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1faf669cb90 <col:55> Inherited Implicit
| `-PureAttr 0x1faf669cbb8 <col:55> Inherited Implicit
|-FunctionDecl 0x1faf669cd70 <line:128:24, col:86> col:36 _isdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf669cbf8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf669cc70 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf669cf30 <line:129:36> col:36 implicit isxdigit 'int (int)' extern
| |-ParmVarDecl 0x1faf669cfd0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf669d040 <col:36> Implicit
| `-PureAttr 0x1faf669d098 <col:36> Implicit
|-FunctionDecl 0x1faf669b120 prev 0x1faf669cf30 <col:24, col:56> col:36 isxdigit 'int (int)'
| |-ParmVarDecl 0x1faf669ce50 <col:50, col:54> col:54 _C 'int'
| |-NoThrowAttr 0x1faf669b210 <col:36> Inherited Implicit
| `-PureAttr 0x1faf669b238 <col:36> Inherited Implicit
|-FunctionDecl 0x1faf669b3f0 <line:130:24, col:87> col:36 _isxdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf669b278 <col:53, col:57> col:57 _C 'int'
| `-ParmVarDecl 0x1faf669b2f0 <col:70, col:80> col:80 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf669b5b0 <line:131:55> col:55 implicit isspace 'int (int)' extern
| |-ParmVarDecl 0x1faf669b650 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf669b6c0 <col:55> Implicit
| `-PureAttr 0x1faf669b718 <col:55> Implicit
|-FunctionDecl 0x1faf669b740 prev 0x1faf669b5b0 <col:43, col:74> col:55 isspace 'int (int)'
| |-ParmVarDecl 0x1faf669b4d0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1faf669b830 <col:55> Inherited Implicit
| `-PureAttr 0x1faf669b858 <col:55> Inherited Implicit
|-FunctionDecl 0x1faf669ba10 <line:132:24, col:86> col:36 _isspace_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf669b898 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf669b910 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf669bbd0 <line:133:36> col:36 implicit ispunct 'int (int)' extern
| |-ParmVarDecl 0x1faf669bc70 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf669bce0 <col:36> Implicit
| `-PureAttr 0x1faf669bd38 <col:36> Implicit
|-FunctionDecl 0x1faf669bd60 prev 0x1faf669bbd0 <col:24, col:55> col:36 ispunct 'int (int)'
| |-ParmVarDecl 0x1faf669baf0 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1faf669be50 <col:36> Inherited Implicit
| `-PureAttr 0x1faf669be78 <col:36> Inherited Implicit
|-FunctionDecl 0x1faf669c030 <line:134:24, col:86> col:36 _ispunct_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf669beb8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf669bf30 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66a80e0 <line:135:36> col:36 implicit isblank 'int (int)' extern
| |-ParmVarDecl 0x1faf66a8180 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf66a81f0 <col:36> Implicit
| `-PureAttr 0x1faf66a8248 <col:36> Implicit
|-FunctionDecl 0x1faf66a8270 prev 0x1faf66a80e0 <col:24, col:55> col:36 isblank 'int (int)'
| |-ParmVarDecl 0x1faf66a8000 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1faf66a8360 <col:36> Inherited Implicit
| `-PureAttr 0x1faf66a8388 <col:36> Inherited Implicit
|-FunctionDecl 0x1faf66a8540 <line:136:24, col:86> col:36 _isblank_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf66a83c8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf66a8440 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66a8700 <line:137:55> col:55 implicit isalnum 'int (int)' extern
| |-ParmVarDecl 0x1faf66a87a0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf66a8810 <col:55> Implicit
| `-PureAttr 0x1faf66a8868 <col:55> Implicit
|-FunctionDecl 0x1faf66a8890 prev 0x1faf66a8700 <col:43, col:74> col:55 isalnum 'int (int)'
| |-ParmVarDecl 0x1faf66a8620 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1faf66a8980 <col:55> Inherited Implicit
| `-PureAttr 0x1faf66a89a8 <col:55> Inherited Implicit
|-FunctionDecl 0x1faf66a8b60 <line:138:24, col:86> col:36 _isalnum_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf66a89e8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf66a8a60 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66a8d20 <line:139:36> col:36 implicit isprint 'int (int)' extern
| |-ParmVarDecl 0x1faf66a8dc0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf66a8e30 <col:36> Implicit
| `-PureAttr 0x1faf66a8e88 <col:36> Implicit
|-FunctionDecl 0x1faf66a8eb0 prev 0x1faf66a8d20 <col:24, col:55> col:36 isprint 'int (int)'
| |-ParmVarDecl 0x1faf66a8c40 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1faf66a8fa0 <col:36> Inherited Implicit
| `-PureAttr 0x1faf66a8fc8 <col:36> Inherited Implicit
|-FunctionDecl 0x1faf66af200 <line:140:24, col:86> col:36 _isprint_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf66af088 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf66af100 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66af3c0 <line:141:36> col:36 implicit isgraph 'int (int)' extern
| |-ParmVarDecl 0x1faf66af460 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf66af4d0 <col:36> Implicit
| `-PureAttr 0x1faf66af528 <col:36> Implicit
|-FunctionDecl 0x1faf66af550 prev 0x1faf66af3c0 <col:24, col:55> col:36 isgraph 'int (int)'
| |-ParmVarDecl 0x1faf66af2e0 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1faf66af640 <col:36> Inherited Implicit
| `-PureAttr 0x1faf66af668 <col:36> Inherited Implicit
|-FunctionDecl 0x1faf66af820 <line:142:24, col:86> col:36 _isgraph_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf66af6a8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf66af720 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66af9e0 <line:143:36> col:36 implicit iscntrl 'int (int)' extern
| |-ParmVarDecl 0x1faf66afa80 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf66afaf0 <col:36> Implicit
| `-PureAttr 0x1faf66afb48 <col:36> Implicit
|-FunctionDecl 0x1faf66afb70 prev 0x1faf66af9e0 <col:24, col:55> col:36 iscntrl 'int (int)'
| |-ParmVarDecl 0x1faf66af900 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1faf66afc60 <col:36> Inherited Implicit
| `-PureAttr 0x1faf66afc88 <col:36> Inherited Implicit
|-FunctionDecl 0x1faf66afe40 <line:144:24, col:86> col:36 _iscntrl_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf66afcc8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf66afd40 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66a9010 <line:145:55> col:55 implicit toupper 'int (int)' extern
| |-ParmVarDecl 0x1faf66a90b0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf66a9120 <col:55> Implicit
| `-PureAttr 0x1faf66a9178 <col:55> Implicit
|-FunctionDecl 0x1faf66a91a0 prev 0x1faf66a9010 <col:43, col:74> col:55 toupper 'int (int)'
| |-ParmVarDecl 0x1faf66aff20 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1faf66a9290 <col:55> Inherited Implicit
| `-PureAttr 0x1faf66a92b8 <col:55> Inherited Implicit
|-FunctionDecl 0x1faf66a93d8 <line:146:55> col:55 implicit tolower 'int (int)' extern
| |-ParmVarDecl 0x1faf66a9478 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1faf66a94e8 <col:55> Implicit
| `-PureAttr 0x1faf66a9540 <col:55> Implicit
|-FunctionDecl 0x1faf66a9568 prev 0x1faf66a93d8 <col:43, col:74> col:55 tolower 'int (int)'
| |-ParmVarDecl 0x1faf66a92f8 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1faf66a9658 <col:55> Inherited Implicit
| `-PureAttr 0x1faf66a9680 <col:55> Inherited Implicit
|-FunctionDecl 0x1faf66a97a0 <line:147:43, col:75> col:55 _tolower 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf66a96c0 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1faf66a99f0 <line:148:24, col:86> col:36 _tolower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf66a9878 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf66a98f0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66a9bb0 <line:149:43, col:75> col:55 _toupper 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf66a9ad0 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1faf66a9e00 <line:150:24, col:86> col:36 _toupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf66a9c88 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1faf66a9d00 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b20a0 <line:151:24, col:57> col:36 __isascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf66a9ee0 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1faf66b2258 <line:152:24, col:57> col:36 __toascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf66b2178 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1faf66b2410 <line:153:24, col:57> col:36 __iscsymf 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf66b2330 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1faf66b25c8 <line:154:24, col:56> col:36 __iscsym 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf66b24e8 <col:50, col:54> col:54 _C 'int'
|-FunctionDecl 0x1faf66b2818 <line:164:24, col:59> col:36 iswalpha 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66b2698 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b2b10 <line:165:24, col:90> col:36 _iswalpha_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66b28e8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66b2960 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b2cc8 <line:166:24, col:59> col:36 iswupper 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66b2be8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b2f10 <line:167:24, col:90> col:36 _iswupper_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66b2d98 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66b2e10 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b10c8 <line:168:24, col:59> col:36 iswlower 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66b2fe8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b1310 <line:169:24, col:90> col:36 _iswlower_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66b1198 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66b1210 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b14c8 <line:170:24, col:59> col:36 iswdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66b13e8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b1710 <line:171:24, col:90> col:36 _iswdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66b1598 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66b1610 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b18c8 <line:172:24, col:60> col:36 iswxdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66b17e8 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b1b10 <line:173:24, col:91> col:36 _iswxdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66b1998 <col:54, col:61> col:61 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66b1a10 <col:74, col:84> col:84 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b1cc8 <line:174:24, col:59> col:36 iswspace 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66b1be8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b1f10 <line:175:24, col:90> col:36 _iswspace_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66b1d98 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66b1e10 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66ab068 <line:176:24, col:59> col:36 iswpunct 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66b1fe8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66ab2b0 <line:177:24, col:90> col:36 _iswpunct_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66ab138 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66ab1b0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66ab468 <line:178:24, col:59> col:36 iswblank 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66ab388 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66ab6b0 <line:179:24, col:90> col:36 _iswblank_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66ab538 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66ab5b0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66ab868 <line:180:24, col:59> col:36 iswalnum 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66ab788 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66abab0 <line:181:24, col:90> col:36 _iswalnum_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66ab938 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66ab9b0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66abc68 <line:182:24, col:59> col:36 iswprint 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66abb88 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66abeb0 <line:183:24, col:90> col:36 _iswprint_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66abd38 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66abdb0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b30e8 <line:184:24, col:59> col:36 iswgraph 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66abf88 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b3330 <line:185:24, col:90> col:36 _iswgraph_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66b31b8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66b3230 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b34e8 <line:186:24, col:59> col:36 iswcntrl 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66b3408 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b3730 <line:187:24, col:90> col:36 _iswcntrl_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66b35b8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66b3630 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b38e8 <line:188:24, col:59> col:36 iswascii 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66b3808 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b3b00 <line:190:24, col:62> col:39 towupper 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1faf66b39b8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b3de8 <line:191:24, col:93> col:39 _towupper_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66b3bd0 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66b3c48 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b3f98 <line:192:24, col:62> col:39 towlower 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1faf66b3ec0 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66ac1b0 <line:193:24, col:93> col:39 _towlower_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66ac040 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66ac0b8 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66ac4b0 <line:194:24, col:80> col:36 iswctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1faf66ac288 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66ac300 <col:66, col:75> col:75 _Type 'wctype_t':'unsigned short'
|-FunctionDecl 0x1faf66ac858 <line:195:24, col:111> col:36 _iswctype_l 'int (wint_t, wctype_t, _locale_t) __attribute__((cdecl))':'int (wint_t, wctype_t, _locale_t)'
| |-ParmVarDecl 0x1faf66ac588 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1faf66ac600 <col:69, col:78> col:78 _Type 'wctype_t':'unsigned short'
| `-ParmVarDecl 0x1faf66ac678 <col:94, col:104> col:104 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66aca18 <line:197:24, col:61> col:36 __iswcsymf 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66ac938 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66acc60 <line:198:24, col:90> col:36 _iswcsymf_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66acae8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66acb60 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66ace18 <line:199:24, col:60> col:36 __iswcsym 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1faf66acd38 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1faf66b4100 <line:200:24, col:89> col:36 _iswcsym_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1faf66acee8 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1faf66acf60 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b42c0 <line:203:24, col:58> col:36 isleadbyte 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1faf66b41e0 <col:52, col:56> col:56 _C 'int'
|-FunctionDecl 0x1faf66b4510 <line:204:24, col:89> col:36 _isleadbyte_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1faf66b4398 <col:55, col:59> col:59 _C 'int'
| `-ParmVarDecl 0x1faf66b4410 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b4820 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:205:90> col:45 is_wctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1faf66b46a8 <col:60, col:67> col:67 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1faf66b4720 <col:76, col:85> col:85 _Type 'wctype_t':'unsigned short'
| `-DeprecatedAttr 0x1faf66b48d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instead. See online help for details." ""
|-VarDecl 0x1faf66b4a18 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:235:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x1faf66b4b68 <line:239:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1faf66b4d98 <line:240:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x1faf66b4c30 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1faf66b4fc0 <.//openssl//file_jk/after\crypto\x509v3/ext_dat.h:10:1, col:47> col:5 name_cmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x1faf66b4e70 <col:14, col:26> col:26 name 'const char *'
| `-ParmVarDecl 0x1faf66b4ef0 <col:32, col:44> col:44 cmp 'const char *'
|-VarDecl 0x1faf66bb130 <line:12:1, col:32> col:32 invalid v3_bcons 'const int' extern
|-VarDecl 0x1faf66bb1b0 <line:13:1, col:32> col:32 invalid v3_pkey_usage_period 'const int' extern
|-VarDecl 0x1faf66bb300 <line:14:1, <invalid sloc>> col:32 invalid v3_ns_ia5_list 'const int [8]' extern
|-VarDecl 0x1faf66bb3a8 <line:15:1, col:32> col:32 invalid v3_crl_num 'const int' extern
|-VarDecl 0x1faf66bb428 <line:16:1, col:32> col:32 invalid v3_delta_crl 'const int' extern
|-VarDecl 0x1faf66bb4a8 <line:17:1, col:32> col:32 invalid v3_ocsp_nonce 'const int' extern
|-VarDecl 0x1faf66bb528 <line:18:1, col:32> col:32 invalid v3_ocsp_crlid 'const int' extern
|-VarDecl 0x1faf66bb5a8 <line:19:1, col:32> col:32 invalid v3_crl_hold 'const int' extern
|-VarDecl 0x1faf66bb628 <line:20:1, col:32> col:32 invalid v3_policy_mappings 'const int' extern
|-VarDecl 0x1faf66bb6a8 <line:21:1, col:32> col:32 invalid v3_name_constraints 'const int' extern
|-VarDecl 0x1faf66bb728 <line:22:1, col:32> col:32 invalid v3_addr 'const int' extern
|-VarDecl 0x1faf66bb870 <line:23:1, <invalid sloc>> col:32 invalid v3_ct_scts 'const int [3]' extern
|-VarDecl 0x1faf66bb8f0 <line:24:1, col:32> col:32 invalid v3_tls_feature 'const int' extern
|-FunctionDecl 0x1faf66bba20 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:22:1, col:37> col:14 strip_spaces 'char *(char *)' static
| `-ParmVarDecl 0x1faf66bb970 <col:27, col:33> col:33 name 'char *'
|-FunctionDecl 0x1faf66bbcb0 <line:23:1, col:64> col:12 sk_strcmp 'int (const char *const *, const char *const *)' static
| |-ParmVarDecl 0x1faf66bbb20 <col:22, col:41> col:41 a 'const char *const *'
| `-ParmVarDecl 0x1faf66bbba0 <col:44, col:63> col:63 b 'const char *const *'
|-FunctionDecl 0x1faf66bbe58 <line:26:1, col:40> col:13 invalid str_free 'void (int)' static
| `-ParmVarDecl 0x1faf66bbd90 <col:22, col:37> col:37 invalid str 'int'
|-FunctionDecl 0x1faf66bc140 <line:27:1, col:81> col:12 invalid append_ia5 'int (int (*)())' static
| `-ParmVarDecl 0x1faf66bbfb0 <col:23, <invalid sloc>> col:23 invalid STACK_OF 'int (*)()':'int (*)()'
|-FunctionDecl 0x1faf66bc3c0 <line:29:1, col:59> col:12 used ipv4_from_asc 'int (unsigned char *, const char *)' static
| |-ParmVarDecl 0x1faf66bc230 <col:26, col:41> col:41 v4 'unsigned char *'
| `-ParmVarDecl 0x1faf66bc2b0 <col:45, col:57> col:57 in 'const char *'
|-FunctionDecl 0x1faf66bc5f0 <line:30:1, col:59> col:12 used ipv6_from_asc 'int (unsigned char *, const char *)' static
| |-ParmVarDecl 0x1faf66bc4a0 <col:26, col:41> col:41 v6 'unsigned char *'
| `-ParmVarDecl 0x1faf66bc520 <col:45, col:57> col:57 in 'const char *'
|-FunctionDecl 0x1faf66bc900 <line:31:1, col:56> col:12 used ipv6_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x1faf66bc6d0 <col:20, col:32> col:32 elem 'const char *'
| |-ParmVarDecl 0x1faf66bc750 <col:38, col:42> col:42 len 'int'
| `-ParmVarDecl 0x1faf66bc7d0 <col:47, col:53> col:53 usr 'void *'
|-FunctionDecl 0x1faf66bcc20 <line:32:1, col:66> col:12 used ipv6_hex 'int (unsigned char *, const char *, int)' static
| |-ParmVarDecl 0x1faf66bc9e8 <col:21, col:36> col:36 out 'unsigned char *'
| |-ParmVarDecl 0x1faf66bca68 <col:41, col:53> col:53 in 'const char *'
| `-ParmVarDecl 0x1faf66bcae8 <col:57, col:61> col:61 inlen 'int'
|-FunctionDecl 0x1faf66bcf40 <line:36:1, line:67:1> line:36:5 invalid X509V3_add_value 'int (const char *, const char *, int (*)())'
| |-ParmVarDecl 0x1faf66bcd08 <col:22, col:34> col:34 used name 'const char *'
| |-ParmVarDecl 0x1faf66bcd88 <col:40, col:52> col:52 used value 'const char *'
| |-ParmVarDecl 0x1faf66bce18 <line:37:22, <invalid sloc>> col:22 invalid STACK_OF 'int (*)()':'int (*)()'
| `-CompoundStmt 0x1faf66b86a0 <line:38:1, line:67:1>
|   |-DeclStmt 0x1faf66b92c0 <line:40:5, col:39>
|   | |-VarDecl 0x1faf66bd0b0 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> .//openssl//file_jk/after\crypto\x509v3\v3_utl.c:40:11 used tname 'char *' cinit
|   | | `-ImplicitCastExpr 0x1faf66b9170 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   | |   `-ParenExpr 0x1faf66b9150 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1faf66b9128 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1faf66bd118 <col:26> 'int' 0
|   | `-VarDecl 0x1faf66b91a0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:40:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> .//openssl//file_jk/after\crypto\x509v3\v3_utl.c:40:26 used tvalue 'char *' cinit
|   |   `-ImplicitCastExpr 0x1faf66b9290 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66b9270 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66b9248 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66b9208 <col:26> 'int' 0
|   |-DeclStmt 0x1faf66b93e0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:41:5, col:42>
|   | `-VarDecl 0x1faf66b92f0 <col:5, col:9> col:9 used sk_allocated 'int'
|   |-IfStmt 0x1faf66b97a8 <line:43:5, line:44:14>
|   | |-BinaryOperator 0x1faf66b9720 <line:43:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1faf66b9708 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:43:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66b93f8 <col:9> 'const char *' lvalue ParmVar 0x1faf66bcd08 'name' 'const char *'
|   | | `-BinaryOperator 0x1faf66b96e8 <col:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | |   |-ParenExpr 0x1faf66b9628 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:43:17, col:46> 'char *'
|   | |   | `-BinaryOperator 0x1faf66b9608 <col:18, col:45> 'char *' '='
|   | |   |   |-DeclRefExpr 0x1faf66b9430 <col:18> 'char *' lvalue Var 0x1faf66bd0b0 'tname' 'char *'
|   | |   |   `-ImplicitCastExpr 0x1faf66b95f0 <col:26, col:45> 'char *' <IntegralToPointer>
|   | |   |     `-CallExpr 0x1faf66b95b0 <col:26, col:45> 'int'
|   | |   |       |-ImplicitCastExpr 0x1faf66b9598 <col:26> 'int (*)()' <FunctionToPointerDecay>
|   | |   |       | `-DeclRefExpr 0x1faf66b9558 <col:26> 'int ()' Function 0x1faf66b9490 'OPENSSL_strdup' 'int ()'
|   | |   |       `-ImplicitCastExpr 0x1faf66b95d8 <col:41> 'const char *' <LValueToRValue>
|   | |   |         `-DeclRefExpr 0x1faf66b9578 <col:41> 'const char *' lvalue ParmVar 0x1faf66bcd08 'name' 'const char *'
|   | |   `-ImplicitCastExpr 0x1faf66b96d0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   | |     `-ParenExpr 0x1faf66b96b0 <col:17, col:27> 'void *'
|   | |       `-CStyleCastExpr 0x1faf66b9688 <col:18, col:26> 'void *' <NullToPointer>
|   | |         `-IntegerLiteral 0x1faf66b9648 <col:26> 'int' 0
|   | `-GotoStmt 0x1faf66b9790 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:44:9, col:14> 'err' 0x1faf66b9740
|   |-IfStmt 0x1faf66b9a30 <line:45:5, line:46:14>
|   | |-BinaryOperator 0x1faf66b99f8 <line:45:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1faf66b99e0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:45:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66b97c0 <col:9> 'const char *' lvalue ParmVar 0x1faf66bcd88 'value' 'const char *'
|   | | `-BinaryOperator 0x1faf66b99c0 <col:18, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | |   |-ParenExpr 0x1faf66b9900 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:45:18, col:49> 'char *'
|   | |   | `-BinaryOperator 0x1faf66b98e0 <col:19, col:48> 'char *' '='
|   | |   |   |-DeclRefExpr 0x1faf66b97f8 <col:19> 'char *' lvalue Var 0x1faf66b91a0 'tvalue' 'char *'
|   | |   |   `-ImplicitCastExpr 0x1faf66b98c8 <col:28, col:48> 'char *' <IntegralToPointer>
|   | |   |     `-CallExpr 0x1faf66b9888 <col:28, col:48> 'int'
|   | |   |       |-ImplicitCastExpr 0x1faf66b9870 <col:28> 'int (*)()' <FunctionToPointerDecay>
|   | |   |       | `-DeclRefExpr 0x1faf66b9830 <col:28> 'int ()' Function 0x1faf66b9490 'OPENSSL_strdup' 'int ()'
|   | |   |       `-ImplicitCastExpr 0x1faf66b98b0 <col:43> 'const char *' <LValueToRValue>
|   | |   |         `-DeclRefExpr 0x1faf66b9850 <col:43> 'const char *' lvalue ParmVar 0x1faf66bcd88 'value' 'const char *'
|   | |   `-ImplicitCastExpr 0x1faf66b99a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   | |     `-ParenExpr 0x1faf66b9988 <col:17, col:27> 'void *'
|   | |       `-CStyleCastExpr 0x1faf66b9960 <col:18, col:26> 'void *' <NullToPointer>
|   | |         `-IntegerLiteral 0x1faf66b9920 <col:26> 'int' 0
|   | `-GotoStmt 0x1faf66b9a18 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:46:9, col:14> 'err' 0x1faf66b9740
|   |-IfStmt 0x1faf66b9c10 <line:47:5, line:48:14>
|   | |-OpaqueValueExpr 0x1faf66b9bf8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1faf66b9be0 <col:9, col:14> 'err' 0x1faf66b9740
|   |-IfStmt 0x1faf66b9e88 <line:49:5, line:50:14>
|   | |-OpaqueValueExpr 0x1faf66b9e70 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1faf66b9e58 <col:9, col:14> 'err' 0x1faf66b9740
|   |-IfStmt 0x1faf66ba0a8 <line:54:5, line:55:14>
|   | |-OpaqueValueExpr 0x1faf66ba090 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1faf66ba078 <col:9, col:14> 'err' 0x1faf66b9740
|   |-ReturnStmt 0x1faf66ba0e8 <line:56:5, col:12>
|   | `-IntegerLiteral 0x1faf66ba0c0 <col:12> 'int' 1
|   |-LabelStmt 0x1faf66b8218 <line:57:2, col:5> 'err'
|   | `-NullStmt 0x1faf66b8210 <col:5>
|   |-IfStmt 0x1faf66b8410 <line:59:5, line:62:5>
|   | |-ImplicitCastExpr 0x1faf66b8250 <line:59:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1faf66b8230 <col:9> 'int' lvalue Var 0x1faf66b92f0 'sk_allocated' 'int'
|   | `-CompoundStmt 0x1faf66b8400 <col:23, line:62:5>
|   |-CallExpr 0x1faf66b8590 <line:64:5, col:23> 'int'
|   | |-ImplicitCastExpr 0x1faf66b8578 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1faf66b8538 <col:5> 'int ()' Function 0x1faf66b8450 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1faf66b85b8 <col:18> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1faf66b8558 <col:18> 'char *' lvalue Var 0x1faf66bd0b0 'tname' 'char *'
|   |-CallExpr 0x1faf66b8628 <line:65:5, col:24> 'int'
|   | |-ImplicitCastExpr 0x1faf66b8610 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1faf66b85d0 <col:5> 'int ()' Function 0x1faf66b8450 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1faf66b8650 <col:18> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1faf66b85f0 <col:18> 'char *' lvalue Var 0x1faf66b91a0 'tvalue' 'char *'
|   `-ReturnStmt 0x1faf66b8690 <line:66:5, col:12>
|     `-IntegerLiteral 0x1faf66b8668 <col:12> 'int' 0
|-FunctionDecl 0x1faf66b8970 <line:69:1, line:73:1> line:69:5 invalid X509V3_add_value_uchar 'int (const char *, const unsigned char *, int (*)())'
| |-ParmVarDecl 0x1faf66b8730 <col:28, col:40> col:40 used name 'const char *'
| |-ParmVarDecl 0x1faf66b87b0 <col:46, col:67> col:67 used value 'const unsigned char *'
| |-ParmVarDecl 0x1faf66b8840 <line:70:28, <invalid sloc>> col:28 invalid STACK_OF 'int (*)()':'int (*)()'
| `-CompoundStmt 0x1faf66b8b08 <line:71:1, line:73:1>
|-FunctionDecl 0x1faf66b8bf8 <line:77:1, line:85:1> line:77:6 invalid X509V3_conf_free 'void (int *)'
| |-ParmVarDecl 0x1faf66b8b30 <col:23, col:35> col:35 invalid conf 'int *'
| `-CompoundStmt 0x1faf66b8d78 <line:78:1, line:85:1>
|   `-IfStmt 0x1faf66b8ce0 <line:79:5, line:80:9>
|     |-OpaqueValueExpr 0x1faf66b8cc8 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x1faf66b8cb8 <col:9>
|-FunctionDecl 0x1faf66b8fe0 <line:87:1, line:93:1> line:87:5 invalid X509V3_add_value_bool 'int (const char *, int, int (*)())'
| |-ParmVarDecl 0x1faf66b8da8 <col:27, col:39> col:39 used name 'const char *'
| |-ParmVarDecl 0x1faf66b8e28 <col:45, col:49> col:49 used asn1_bool 'int'
| |-ParmVarDecl 0x1faf66b8eb8 <line:88:27, <invalid sloc>> col:27 invalid STACK_OF 'int (*)()':'int (*)()'
| `-CompoundStmt 0x1faf66c0298 <line:89:1, line:93:1>
|-FunctionDecl 0x1faf66c0478 <line:95:1, line:101:1> line:95:5 invalid X509V3_add_value_bool_nf 'int (const char *, int, int (*)())'
| |-ParmVarDecl 0x1faf66c02c0 <col:30, col:42> col:42 used name 'const char *'
| |-ParmVarDecl 0x1faf66c0340 <col:48, col:52> col:52 used asn1_bool 'int'
| |-ParmVarDecl 0x1faf66c03d0 <line:96:30, <invalid sloc>> col:30 invalid STACK_OF 'int (*)()':'int (*)()'
| `-CompoundStmt 0x1faf66c0628 <line:97:1, line:101:1>
|   `-ReturnStmt 0x1faf66c0618 <line:100:5, col:12>
|     `-IntegerLiteral 0x1faf66c05f0 <col:12> 'int' 1
|-FunctionDecl 0x1faf66c0720 <line:103:1, line:138:1> line:103:14 invalid bignum_to_string 'char *(const int *)' static
| |-ParmVarDecl 0x1faf66c0658 <col:31, col:45> col:45 invalid bn 'const int *'
| `-CompoundStmt 0x1faf66bae70 <line:104:1, line:138:1>
|   |-DeclStmt 0x1faf66c08f8 <line:105:5, col:20>
|   | |-VarDecl 0x1faf66c07f8 <col:5, col:11> col:11 used tmp 'char *'
|   | `-VarDecl 0x1faf66c0878 <col:5, col:17> col:17 used ret 'char *'
|   |-DeclStmt 0x1faf66c0988 <line:106:5, col:15>
|   | `-VarDecl 0x1faf66c0920 <col:5, col:12> col:12 used len 'size_t':'unsigned long long'
|   |-IfStmt 0x1faf66c0ed8 <line:117:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   | |-BinaryOperator 0x1faf66c0e08 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:117:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66c0dd8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:117:9> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66c0d30 <col:9> 'char *' lvalue Var 0x1faf66c07f8 'tmp' 'char *'
|   | | `-ImplicitCastExpr 0x1faf66c0df0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   | |   `-ParenExpr 0x1faf66c0db8 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1faf66c0d90 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1faf66c0d50 <col:26> 'int' 0
|   | `-ReturnStmt 0x1faf66c0ec8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:118:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |   `-ImplicitCastExpr 0x1faf66c0eb0 <col:17, col:27> 'char *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66c0e90 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66c0e68 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66c0e28 <col:26> 'int' 0
|   |-BinaryOperator 0x1faf66ba180 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:120:5, col:25> 'size_t':'unsigned long long' '='
|   | |-DeclRefExpr 0x1faf66c0ef0 <col:5> 'size_t':'unsigned long long' lvalue Var 0x1faf66c0920 'len' 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x1faf66ba160 <col:11, col:25> 'unsigned long long' '+'
|   |   |-CallExpr 0x1faf66c1120 <col:11, col:21> 'unsigned long long'
|   |   | |-ImplicitCastExpr 0x1faf66c1108 <col:11> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1faf66c1070 <col:11> 'unsigned long long (const char *)' Function 0x1faf66c0f60 'strlen' 'unsigned long long (const char *)'
|   |   | `-ImplicitCastExpr 0x1faf66c1160 <col:18> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1faf66c1148 <col:18> 'char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1faf66c10a8 <col:18> 'char *' lvalue Var 0x1faf66c07f8 'tmp' 'char *'
|   |   `-ImplicitCastExpr 0x1faf66ba148 <col:25> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1faf66ba120 <col:25> 'int' 3
|   |-BinaryOperator 0x1faf66ba288 <line:121:5, col:29> 'char *' '='
|   | |-DeclRefExpr 0x1faf66ba1a0 <col:5> 'char *' lvalue Var 0x1faf66c0878 'ret' 'char *'
|   | `-ImplicitCastExpr 0x1faf66ba270 <col:11, col:29> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x1faf66ba230 <col:11, col:29> 'int'
|   |     |-ImplicitCastExpr 0x1faf66ba218 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1faf66ba1d8 <col:11> 'int ()' Function 0x1faf66b9a70 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x1faf66ba258 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1faf66ba1f8 <col:26> 'size_t':'unsigned long long' lvalue Var 0x1faf66c0920 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x1faf66ba528 <line:122:5, line:126:5>
|   | |-BinaryOperator 0x1faf66ba380 <line:122:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66ba350 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:122:9> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66ba2a8 <col:9> 'char *' lvalue Var 0x1faf66c0878 'ret' 'char *'
|   | | `-ImplicitCastExpr 0x1faf66ba368 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   | |   `-ParenExpr 0x1faf66ba330 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1faf66ba308 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1faf66ba2c8 <col:26> 'int' 0
|   | `-CompoundStmt 0x1faf66ba508 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:122:22, line:126:5>
|   |   |-CallExpr 0x1faf66ba418 <line:124:9, col:25> 'int'
|   |   | |-ImplicitCastExpr 0x1faf66ba400 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1faf66ba3c0 <col:9> 'int ()' Function 0x1faf66b8450 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x1faf66ba440 <col:22> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1faf66ba3e0 <col:22> 'char *' lvalue Var 0x1faf66c07f8 'tmp' 'char *'
|   |   `-ReturnStmt 0x1faf66ba4f8 <line:125:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |     `-ImplicitCastExpr 0x1faf66ba4e0 <col:17, col:27> 'char *' <NullToPointer>
|   |       `-ParenExpr 0x1faf66ba4c0 <col:17, col:27> 'void *'
|   |         `-CStyleCastExpr 0x1faf66ba498 <col:18, col:26> 'void *' <NullToPointer>
|   |           `-IntegerLiteral 0x1faf66ba458 <col:26> 'int' 0
|   |-IfStmt 0x1faf66bad68 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:129:5, line:135:5> has_else
|   | |-BinaryOperator 0x1faf66ba608 <line:129:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66ba5f0 <col:9, col:14> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1faf66ba5d8 <col:9, col:14> 'char' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x1faf66ba5a0 <col:9, col:14> 'char' lvalue
|   | | |     |-ImplicitCastExpr 0x1faf66ba588 <col:9> 'char *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1faf66ba540 <col:9> 'char *' lvalue Var 0x1faf66c07f8 'tmp' 'char *'
|   | | |     `-IntegerLiteral 0x1faf66ba560 <col:13> 'int' 0
|   | | `-CharacterLiteral 0x1faf66ba5c0 <col:19> 'int' 45
|   | |-CompoundStmt 0x1faf66baac0 <col:24, line:132:5>
|   | | |-CallExpr 0x1faf66ba7f0 <line:130:9, col:40> 'int'
|   | | | |-ImplicitCastExpr 0x1faf66ba7d8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1faf66ba718 <col:9> 'int ()' Function 0x1faf66ba650 'OPENSSL_strlcpy' 'int ()'
|   | | | |-ImplicitCastExpr 0x1faf66ba828 <col:25> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1faf66ba738 <col:25> 'char *' lvalue Var 0x1faf66c0878 'ret' 'char *'
|   | | | |-ImplicitCastExpr 0x1faf66ba840 <col:30> 'char *' <ArrayToPointerDecay>
|   | | | | `-StringLiteral 0x1faf66ba798 <col:30> 'char [4]' lvalue "-0x"
|   | | | `-ImplicitCastExpr 0x1faf66ba858 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1faf66ba7b8 <col:37> 'size_t':'unsigned long long' lvalue Var 0x1faf66c0920 'len' 'size_t':'unsigned long long'
|   | | `-CallExpr 0x1faf66baa58 <line:131:9, col:42> 'int'
|   | |   |-ImplicitCastExpr 0x1faf66baa40 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1faf66ba960 <col:9> 'int ()' Function 0x1faf66ba898 'OPENSSL_strlcat' 'int ()'
|   | |   |-ImplicitCastExpr 0x1faf66baa90 <col:25> 'char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66ba980 <col:25> 'char *' lvalue Var 0x1faf66c0878 'ret' 'char *'
|   | |   |-BinaryOperator 0x1faf66baa00 <col:30, col:36> 'char *' '+'
|   | |   | |-ImplicitCastExpr 0x1faf66ba9e8 <col:30> 'char *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x1faf66ba9a0 <col:30> 'char *' lvalue Var 0x1faf66c07f8 'tmp' 'char *'
|   | |   | `-IntegerLiteral 0x1faf66ba9c0 <col:36> 'int' 1
|   | |   `-ImplicitCastExpr 0x1faf66baaa8 <col:39> 'size_t':'unsigned long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1faf66baa20 <col:39> 'size_t':'unsigned long long' lvalue Var 0x1faf66c0920 'len' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x1faf66bad48 <line:132:12, line:135:5>
|   |   |-CallExpr 0x1faf66babb0 <line:133:9, col:39> 'int'
|   |   | |-ImplicitCastExpr 0x1faf66bab98 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1faf66baae0 <col:9> 'int ()' Function 0x1faf66ba650 'OPENSSL_strlcpy' 'int ()'
|   |   | |-ImplicitCastExpr 0x1faf66babe8 <col:25> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1faf66bab00 <col:25> 'char *' lvalue Var 0x1faf66c0878 'ret' 'char *'
|   |   | |-ImplicitCastExpr 0x1faf66bac00 <col:30> 'char *' <ArrayToPointerDecay>
|   |   | | `-StringLiteral 0x1faf66bab58 <col:30> 'char [3]' lvalue "0x"
|   |   | `-ImplicitCastExpr 0x1faf66bac18 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1faf66bab78 <col:36> 'size_t':'unsigned long long' lvalue Var 0x1faf66c0920 'len' 'size_t':'unsigned long long'
|   |   `-CallExpr 0x1faf66bacc8 <line:134:9, col:38> 'int'
|   |     |-ImplicitCastExpr 0x1faf66bacb0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1faf66bac30 <col:9> 'int ()' Function 0x1faf66ba898 'OPENSSL_strlcat' 'int ()'
|   |     |-ImplicitCastExpr 0x1faf66bad00 <col:25> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1faf66bac50 <col:25> 'char *' lvalue Var 0x1faf66c0878 'ret' 'char *'
|   |     |-ImplicitCastExpr 0x1faf66bad18 <col:30> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1faf66bac70 <col:30> 'char *' lvalue Var 0x1faf66c07f8 'tmp' 'char *'
|   |     `-ImplicitCastExpr 0x1faf66bad30 <col:35> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1faf66bac90 <col:35> 'size_t':'unsigned long long' lvalue Var 0x1faf66c0920 'len' 'size_t':'unsigned long long'
|   |-CallExpr 0x1faf66bade8 <line:136:5, col:21> 'int'
|   | |-ImplicitCastExpr 0x1faf66badd0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1faf66bad90 <col:5> 'int ()' Function 0x1faf66b8450 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1faf66bae10 <col:18> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1faf66badb0 <col:18> 'char *' lvalue Var 0x1faf66c07f8 'tmp' 'char *'
|   `-ReturnStmt 0x1faf66bae60 <line:137:5, col:12>
|     `-ImplicitCastExpr 0x1faf66bae48 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x1faf66bae28 <col:12> 'char *' lvalue Var 0x1faf66c0878 'ret' 'char *'
|-FunctionDecl 0x1faf66c0f60 <line:120:11> col:11 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x1faf66c1000 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1faf66bb040 <line:140:1, line:152:1> line:140:7 invalid i2s_ASN1_ENUMERATED 'char *(int *, const int *)'
| |-ParmVarDecl 0x1faf66baee0 <col:27, col:46> col:46 invalid method 'int *'
| |-ParmVarDecl 0x1faf66baf60 <col:54, col:77> col:77 invalid a 'const int *'
| `-CompoundStmt 0x1faf66c38a8 <line:141:1, line:152:1>
|   |-DeclStmt 0x1faf66c3358 <line:143:5, col:24>
|   | `-VarDecl 0x1faf66c3250 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> .//openssl//file_jk/after\crypto\x509v3\v3_utl.c:143:11 used strtmp 'char *' cinit
|   |   `-ImplicitCastExpr 0x1faf66c3340 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66c3320 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66c32f8 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66c32b8 <col:26> 'int' 0
|   |-IfStmt 0x1faf66c3438 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:145:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   | |-OpaqueValueExpr 0x1faf66c3420 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1faf66c3410 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:146:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |   `-ImplicitCastExpr 0x1faf66c33f8 <col:17, col:27> 'char *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66c33d8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66c33b0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66c3370 <col:26> 'int' 0
|   `-ReturnStmt 0x1faf66c3898 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:151:5, col:12>
|     `-ImplicitCastExpr 0x1faf66c3880 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x1faf66c3860 <col:12> 'char *' lvalue Var 0x1faf66c3250 'strtmp' 'char *'
|-FunctionDecl 0x1faf66c3a08 <line:154:1, line:166:1> line:154:7 invalid i2s_ASN1_INTEGER 'char *(int *, const int *)'
| |-ParmVarDecl 0x1faf66c38e8 <col:24, col:43> col:43 invalid method 'int *'
| |-ParmVarDecl 0x1faf66c3968 <col:51, col:71> col:71 invalid a 'const int *'
| `-CompoundStmt 0x1faf66c40d8 <line:155:1, line:166:1>
|   |-DeclStmt 0x1faf66c3c78 <line:157:5, col:24>
|   | `-VarDecl 0x1faf66c3b70 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> .//openssl//file_jk/after\crypto\x509v3\v3_utl.c:157:11 used strtmp 'char *' cinit
|   |   `-ImplicitCastExpr 0x1faf66c3c60 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66c3c40 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66c3c18 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66c3bd8 <col:26> 'int' 0
|   |-IfStmt 0x1faf66c3d58 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:159:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   | |-OpaqueValueExpr 0x1faf66c3d40 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1faf66c3d30 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:160:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |   `-ImplicitCastExpr 0x1faf66c3d18 <col:17, col:27> 'char *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66c3cf8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66c3cd0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66c3c90 <col:26> 'int' 0
|   `-ReturnStmt 0x1faf66c40c8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:165:5, col:12>
|     `-ImplicitCastExpr 0x1faf66c40b0 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x1faf66c4090 <col:12> 'char *' lvalue Var 0x1faf66c3b70 'strtmp' 'char *'
|-FunctionDecl 0x1faf66bd230 <line:168:1, line:219:1> line:168:15 invalid s2i_ASN1_INTEGER 'int *(int *, const char *)'
| |-ParmVarDecl 0x1faf66c4118 <col:32, col:51> col:51 invalid method 'int *'
| |-ParmVarDecl 0x1faf66bd150 <col:59, col:71> col:71 used value 'const char *'
| `-CompoundStmt 0x1faf66c4c18 <line:169:1, line:219:1>
|   |-DeclStmt 0x1faf66bd498 <line:172:5, col:21>
|   | |-VarDecl 0x1faf66bd398 <col:5, col:9> col:9 used isneg 'int'
|   | `-VarDecl 0x1faf66bd418 <col:5, col:16> col:16 used ishex 'int'
|   |-DeclStmt 0x1faf66bd530 <line:173:5, col:12>
|   | `-VarDecl 0x1faf66bd4c8 <col:5, col:9> col:9 used ret 'int'
|   |-IfStmt 0x1faf66bd740 <line:174:5, line:177:5>
|   | |-BinaryOperator 0x1faf66bd638 <line:174:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66bd608 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:174:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66bd548 <col:9> 'const char *' lvalue ParmVar 0x1faf66bd150 'value' 'const char *'
|   | | `-ImplicitCastExpr 0x1faf66bd620 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const char *' <BitCast>
|   | |   `-ParenExpr 0x1faf66bd5e8 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1faf66bd5c0 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1faf66bd580 <col:26> 'int' 0
|   | `-CompoundStmt 0x1faf66bd728 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:174:24, line:177:5>
|   |   `-ReturnStmt 0x1faf66bd718 <line:176:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |     `-ImplicitCastExpr 0x1faf66bd700 <col:17, col:27> 'int *' <NullToPointer>
|   |       `-ParenExpr 0x1faf66bd6e0 <col:17, col:27> 'void *'
|   |         `-CStyleCastExpr 0x1faf66bd6b8 <col:18, col:26> 'void *' <NullToPointer>
|   |           `-IntegerLiteral 0x1faf66bd678 <col:26> 'int' 0
|   |-IfStmt 0x1faf66bda28 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:179:5, line:182:5>
|   | |-OpaqueValueExpr 0x1faf66bda10 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1faf66bd9f8 <line:179:21, line:182:5>
|   |   `-ReturnStmt 0x1faf66bd9e8 <line:181:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |     `-ImplicitCastExpr 0x1faf66bd9d0 <col:17, col:27> 'int *' <NullToPointer>
|   |       `-ParenExpr 0x1faf66bd9b0 <col:17, col:27> 'void *'
|   |         `-CStyleCastExpr 0x1faf66bd988 <col:18, col:26> 'void *' <NullToPointer>
|   |           `-IntegerLiteral 0x1faf66bd948 <col:26> 'int' 0
|   |-IfStmt 0x1faf66bdc68 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:183:5, line:187:17> has_else
|   | |-BinaryOperator 0x1faf66bdb08 <line:183:9, col:21> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66bdaf0 <col:9, col:16> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1faf66bdad8 <col:9, col:16> 'char' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x1faf66bdaa0 <col:9, col:16> 'const char' lvalue
|   | | |     |-ImplicitCastExpr 0x1faf66bda88 <col:9> 'const char *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1faf66bda40 <col:9> 'const char *' lvalue ParmVar 0x1faf66bd150 'value' 'const char *'
|   | | |     `-IntegerLiteral 0x1faf66bda60 <col:15> 'int' 0
|   | | `-CharacterLiteral 0x1faf66bdac0 <col:21> 'int' 45
|   | |-CompoundStmt 0x1faf66bdbe0 <col:26, line:186:5>
|   | | |-UnaryOperator 0x1faf66bdb48 <line:184:9, col:14> 'const char *' postfix '++'
|   | | | `-DeclRefExpr 0x1faf66bdb28 <col:9> 'const char *' lvalue ParmVar 0x1faf66bd150 'value' 'const char *'
|   | | `-BinaryOperator 0x1faf66bdbc0 <line:185:9, col:17> 'int' '='
|   | |   |-DeclRefExpr 0x1faf66bdb60 <col:9> 'int' lvalue Var 0x1faf66bd398 'isneg' 'int'
|   | |   `-IntegerLiteral 0x1faf66bdb98 <col:17> 'int' 1
|   | `-BinaryOperator 0x1faf66bdc48 <line:187:9, col:17> 'int' '='
|   |   |-DeclRefExpr 0x1faf66bdc00 <col:9> 'int' lvalue Var 0x1faf66bd398 'isneg' 'int'
|   |   `-IntegerLiteral 0x1faf66bdc20 <col:17> 'int' 0
|   |-IfStmt 0x1faf66c41e0 <line:189:5, line:193:17> has_else
|   | |-BinaryOperator 0x1faf66bdfc8 <line:189:9, col:67> 'int' '&&'
|   | | |-BinaryOperator 0x1faf66bdd58 <col:9, col:21> 'int' '=='
|   | | | |-ImplicitCastExpr 0x1faf66bdd40 <col:9, col:16> 'int' <IntegralCast>
|   | | | | `-ImplicitCastExpr 0x1faf66bdd28 <col:9, col:16> 'char' <LValueToRValue>
|   | | | |   `-ArraySubscriptExpr 0x1faf66bdcf0 <col:9, col:16> 'const char' lvalue
|   | | | |     |-ImplicitCastExpr 0x1faf66bdcd8 <col:9> 'const char *' <LValueToRValue>
|   | | | |     | `-DeclRefExpr 0x1faf66bdc90 <col:9> 'const char *' lvalue ParmVar 0x1faf66bd150 'value' 'const char *'
|   | | | |     `-IntegerLiteral 0x1faf66bdcb0 <col:15> 'int' 0
|   | | | `-CharacterLiteral 0x1faf66bdd10 <col:21> 'int' 48
|   | | `-ParenExpr 0x1faf66bdfa8 <col:28, col:67> 'int'
|   | |   `-BinaryOperator 0x1faf66bdf88 <col:29, col:66> 'int' '||'
|   | |     |-ParenExpr 0x1faf66bde60 <col:29, col:45> 'int'
|   | |     | `-BinaryOperator 0x1faf66bde40 <col:30, col:42> 'int' '=='
|   | |     |   |-ImplicitCastExpr 0x1faf66bde28 <col:30, col:37> 'int' <IntegralCast>
|   | |     |   | `-ImplicitCastExpr 0x1faf66bde10 <col:30, col:37> 'char' <LValueToRValue>
|   | |     |   |   `-ArraySubscriptExpr 0x1faf66bddd8 <col:30, col:37> 'const char' lvalue
|   | |     |   |     |-ImplicitCastExpr 0x1faf66bddc0 <col:30> 'const char *' <LValueToRValue>
|   | |     |   |     | `-DeclRefExpr 0x1faf66bdd78 <col:30> 'const char *' lvalue ParmVar 0x1faf66bd150 'value' 'const char *'
|   | |     |   |     `-IntegerLiteral 0x1faf66bdd98 <col:36> 'int' 1
|   | |     |   `-CharacterLiteral 0x1faf66bddf8 <col:42> 'int' 120
|   | |     `-ParenExpr 0x1faf66bdf68 <col:50, col:66> 'int'
|   | |       `-BinaryOperator 0x1faf66bdf48 <col:51, col:63> 'int' '=='
|   | |         |-ImplicitCastExpr 0x1faf66bdf30 <col:51, col:58> 'int' <IntegralCast>
|   | |         | `-ImplicitCastExpr 0x1faf66bdf18 <col:51, col:58> 'char' <LValueToRValue>
|   | |         |   `-ArraySubscriptExpr 0x1faf66bdee0 <col:51, col:58> 'const char' lvalue
|   | |         |     |-ImplicitCastExpr 0x1faf66bdec8 <col:51> 'const char *' <LValueToRValue>
|   | |         |     | `-DeclRefExpr 0x1faf66bde80 <col:51> 'const char *' lvalue ParmVar 0x1faf66bd150 'value' 'const char *'
|   | |         |     `-IntegerLiteral 0x1faf66bdea0 <col:57> 'int' 1
|   | |         `-CharacterLiteral 0x1faf66bdf00 <col:63> 'int' 88
|   | |-CompoundStmt 0x1faf66be0e0 <col:70, line:192:5>
|   | | |-CompoundAssignOperator 0x1faf66be030 <line:190:9, col:18> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   | | | |-DeclRefExpr 0x1faf66bdfe8 <col:9> 'const char *' lvalue ParmVar 0x1faf66bd150 'value' 'const char *'
|   | | | `-IntegerLiteral 0x1faf66be008 <col:18> 'int' 2
|   | | `-BinaryOperator 0x1faf66be0c0 <line:191:9, col:17> 'int' '='
|   | |   |-DeclRefExpr 0x1faf66be060 <col:9> 'int' lvalue Var 0x1faf66bd418 'ishex' 'int'
|   | |   `-IntegerLiteral 0x1faf66be098 <col:17> 'int' 1
|   | `-BinaryOperator 0x1faf66c41c0 <line:193:9, col:17> 'int' '='
|   |   |-DeclRefExpr 0x1faf66be100 <col:9> 'int' lvalue Var 0x1faf66bd418 'ishex' 'int'
|   |   `-IntegerLiteral 0x1faf66be120 <col:17> 'int' 0
|   |-IfStmt 0x1faf66c4730 <line:200:5, line:204:5>
|   | |-BinaryOperator 0x1faf66c4608 <line:200:9, col:26> 'int' '||'
|   | | |-UnaryOperator 0x1faf66c4530 <col:9, col:10> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x1faf66c4518 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1faf66c44f8 <col:10> 'int' lvalue Var 0x1faf66bd4c8 'ret' 'int'
|   | | `-ImplicitCastExpr 0x1faf66c45f0 <col:17, col:26> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x1faf66c45d8 <col:17, col:26> 'char' <LValueToRValue>
|   | |     `-ArraySubscriptExpr 0x1faf66c45b8 <col:17, col:26> 'const char' lvalue
|   | |       |-ImplicitCastExpr 0x1faf66c4588 <col:17> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1faf66c4548 <col:17> 'const char *' lvalue ParmVar 0x1faf66bd150 'value' 'const char *'
|   | |       `-ImplicitCastExpr 0x1faf66c45a0 <col:23> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1faf66c4568 <col:23> 'int' lvalue Var 0x1faf66bd4c8 'ret' 'int'
|   | `-CompoundStmt 0x1faf66c4718 <col:29, line:204:5>
|   |   `-ReturnStmt 0x1faf66c4708 <line:203:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |     `-ImplicitCastExpr 0x1faf66c46f0 <col:17, col:27> 'int *' <NullToPointer>
|   |       `-ParenExpr 0x1faf66c46d0 <col:17, col:27> 'void *'
|   |         `-CStyleCastExpr 0x1faf66c46a8 <col:18, col:26> 'void *' <NullToPointer>
|   |           `-IntegerLiteral 0x1faf66c4668 <col:26> 'int' 0
|   |-IfStmt 0x1faf66c48f8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:206:5, line:207:17>
|   | |-OpaqueValueExpr 0x1faf66c48e0 <<invalid sloc>> '_Bool'
|   | `-BinaryOperator 0x1faf66c48c0 <col:9, col:17> 'int' '='
|   |   |-DeclRefExpr 0x1faf66c4878 <col:9> 'int' lvalue Var 0x1faf66bd398 'isneg' 'int'
|   |   `-IntegerLiteral 0x1faf66c4898 <col:17> 'int' 0
|   `-IfStmt 0x1faf66c4bc8 <line:211:5, line:215:5>
|     |-OpaqueValueExpr 0x1faf66c4bb0 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x1faf66c4b98 <line:211:16, line:215:5>
|       `-ReturnStmt 0x1faf66c4b88 <line:214:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|         `-ImplicitCastExpr 0x1faf66c4b70 <col:17, col:27> 'int *' <NullToPointer>
|           `-ParenExpr 0x1faf66c4b50 <col:17, col:27> 'void *'
|             `-CStyleCastExpr 0x1faf66c4b28 <col:18, col:26> 'void *' <NullToPointer>
|               `-IntegerLiteral 0x1faf66c4ae8 <col:26> 'int' 0
|-FunctionDecl 0x1faf66c4ec0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:221:1, line:234:1> line:221:5 invalid X509V3_add_value_int 'int (const char *, const int *, int (*)())'
| |-ParmVarDecl 0x1faf66c4c88 <col:26, col:38> col:38 used name 'const char *'
| |-ParmVarDecl 0x1faf66c4d08 <col:44, col:64> col:64 invalid aint 'const int *'
| |-ParmVarDecl 0x1faf66c4d98 <line:222:26, <invalid sloc>> col:26 invalid STACK_OF 'int (*)()':'int (*)()'
| `-CompoundStmt 0x1faf66c1438 <line:223:1, line:234:1>
|   |-DeclStmt 0x1faf66c5010 <line:224:5, col:17>
|   | `-VarDecl 0x1faf66c4fa8 <col:5, col:11> col:11 used strtmp 'char *'
|   |-DeclStmt 0x1faf66c50a8 <line:225:5, col:12>
|   | `-VarDecl 0x1faf66c5040 <col:5, col:9> col:9 used ret 'int'
|   |-IfStmt 0x1faf66c5110 <line:227:5, line:228:16>
|   | |-OpaqueValueExpr 0x1faf66c50f8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1faf66c50e8 <col:9, col:16>
|   |   `-IntegerLiteral 0x1faf66c50c0 <col:16> 'int' 1
|   |-IfStmt 0x1faf66c12b0 <line:229:5, line:230:16>
|   | |-OpaqueValueExpr 0x1faf66c1298 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1faf66c1288 <col:9, col:16>
|   |   `-IntegerLiteral 0x1faf66c1260 <col:16> 'int' 0
|   |-CallExpr 0x1faf66c13b0 <line:232:5, col:24> 'int'
|   | |-ImplicitCastExpr 0x1faf66c1398 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1faf66c1358 <col:5> 'int ()' Function 0x1faf66b8450 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1faf66c13d8 <col:18> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1faf66c1378 <col:18> 'char *' lvalue Var 0x1faf66c4fa8 'strtmp' 'char *'
|   `-ReturnStmt 0x1faf66c1428 <line:233:5, col:12>
|     `-ImplicitCastExpr 0x1faf66c1410 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1faf66c13f0 <col:12> 'int' lvalue Var 0x1faf66c5040 'ret' 'int'
|-FunctionDecl 0x1faf66c15f0 <line:236:1, line:265:1> line:236:5 invalid X509V3_get_value_bool 'int (const int *, int *)'
| |-ParmVarDecl 0x1faf66c1490 <col:27, col:45> col:45 invalid value 'const int *'
| |-ParmVarDecl 0x1faf66c1510 <col:52, col:57> col:57 used asn1_bool 'int *'
| `-CompoundStmt 0x1faf66c60c8 <line:237:1, line:265:1>
|   |-DeclStmt 0x1faf66c1738 <line:238:5, col:21>
|   | `-VarDecl 0x1faf66c16d0 <col:5, col:17> col:17 used btmp 'const char *'
|   |-IfStmt 0x1faf66c1890 <line:240:5, line:241:14>
|   | |-OpaqueValueExpr 0x1faf66c1878 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1faf66c1860 <col:9, col:14> 'err' 0x1faf66c1810
|   |-IfStmt 0x1faf66c5510 <line:242:5, line:250:5>
|   | |-BinaryOperator 0x1faf66c53e8 <line:242:9, line:247:35> 'int' '||'
|   | | |-BinaryOperator 0x1faf66c5260 <line:242:9, line:246:35> 'int' '||'
|   | | | |-BinaryOperator 0x1faf66c2088 <line:242:9, line:245:33> 'int' '||'
|   | | | | |-BinaryOperator 0x1faf66c1f00 <line:242:9, line:244:33> 'int' '||'
|   | | | | | |-BinaryOperator 0x1faf66c1d38 <line:242:9, line:243:36> 'int' '||'
|   | | | | | | |-BinaryOperator 0x1faf66c1bb0 <line:242:9, col:33> 'int' '=='
|   | | | | | | | |-CallExpr 0x1faf66c1b10 <col:9, col:28> 'int'
|   | | | | | | | | |-ImplicitCastExpr 0x1faf66c1af8 <col:9> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | | | | | | `-DeclRefExpr 0x1faf66c1a28 <col:9> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | | | | | | | | |-ImplicitCastExpr 0x1faf66c1b40 <col:16> 'const char *' <LValueToRValue>
|   | | | | | | | | | `-DeclRefExpr 0x1faf66c1a60 <col:16> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | | | | | | | | `-ImplicitCastExpr 0x1faf66c1b70 <col:22> 'const char *' <NoOp>
|   | | | | | | | |   `-ImplicitCastExpr 0x1faf66c1b58 <col:22> 'char *' <ArrayToPointerDecay>
|   | | | | | | | |     `-StringLiteral 0x1faf66c1a80 <col:22> 'char [5]' lvalue "TRUE"
|   | | | | | | | `-IntegerLiteral 0x1faf66c1b88 <col:33> 'int' 0
|   | | | | | | `-BinaryOperator 0x1faf66c1d18 <line:243:12, col:36> 'int' '=='
|   | | | | | |   |-CallExpr 0x1faf66c1c78 <col:12, col:31> 'int'
|   | | | | | |   | |-ImplicitCastExpr 0x1faf66c1c60 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | | |   | | `-DeclRefExpr 0x1faf66c1bd0 <col:12> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | | | | | |   | |-ImplicitCastExpr 0x1faf66c1ca8 <col:19> 'const char *' <LValueToRValue>
|   | | | | | |   | | `-DeclRefExpr 0x1faf66c1bf0 <col:19> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | | | | | |   | `-ImplicitCastExpr 0x1faf66c1cd8 <col:25> 'const char *' <NoOp>
|   | | | | | |   |   `-ImplicitCastExpr 0x1faf66c1cc0 <col:25> 'char *' <ArrayToPointerDecay>
|   | | | | | |   |     `-StringLiteral 0x1faf66c1c10 <col:25> 'char [5]' lvalue "true"
|   | | | | | |   `-IntegerLiteral 0x1faf66c1cf0 <col:36> 'int' 0
|   | | | | | `-BinaryOperator 0x1faf66c1ee0 <line:244:12, col:33> 'int' '=='
|   | | | | |   |-CallExpr 0x1faf66c1e40 <col:12, col:28> 'int'
|   | | | | |   | |-ImplicitCastExpr 0x1faf66c1e28 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | |   | | `-DeclRefExpr 0x1faf66c1d58 <col:12> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | | | | |   | |-ImplicitCastExpr 0x1faf66c1e70 <col:19> 'const char *' <LValueToRValue>
|   | | | | |   | | `-DeclRefExpr 0x1faf66c1d78 <col:19> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | | | | |   | `-ImplicitCastExpr 0x1faf66c1ea0 <col:25> 'const char *' <NoOp>
|   | | | | |   |   `-ImplicitCastExpr 0x1faf66c1e88 <col:25> 'char *' <ArrayToPointerDecay>
|   | | | | |   |     `-StringLiteral 0x1faf66c1dd8 <col:25> 'char [2]' lvalue "Y"
|   | | | | |   `-IntegerLiteral 0x1faf66c1eb8 <col:33> 'int' 0
|   | | | | `-BinaryOperator 0x1faf66c2068 <line:245:12, col:33> 'int' '=='
|   | | | |   |-CallExpr 0x1faf66c1fc8 <col:12, col:28> 'int'
|   | | | |   | |-ImplicitCastExpr 0x1faf66c1fb0 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | |   | | `-DeclRefExpr 0x1faf66c1f20 <col:12> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | | | |   | |-ImplicitCastExpr 0x1faf66c1ff8 <col:19> 'const char *' <LValueToRValue>
|   | | | |   | | `-DeclRefExpr 0x1faf66c1f40 <col:19> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | | | |   | `-ImplicitCastExpr 0x1faf66c2028 <col:25> 'const char *' <NoOp>
|   | | | |   |   `-ImplicitCastExpr 0x1faf66c2010 <col:25> 'char *' <ArrayToPointerDecay>
|   | | | |   |     `-StringLiteral 0x1faf66c1f60 <col:25> 'char [2]' lvalue "y"
|   | | | |   `-IntegerLiteral 0x1faf66c2040 <col:33> 'int' 0
|   | | | `-BinaryOperator 0x1faf66c5240 <line:246:12, col:35> 'int' '=='
|   | | |   |-CallExpr 0x1faf66c2150 <col:12, col:30> 'int'
|   | | |   | |-ImplicitCastExpr 0x1faf66c2138 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x1faf66c20a8 <col:12> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | | |   | |-ImplicitCastExpr 0x1faf66c51d0 <col:19> 'const char *' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x1faf66c20c8 <col:19> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | | |   | `-ImplicitCastExpr 0x1faf66c5200 <col:25> 'const char *' <NoOp>
|   | | |   |   `-ImplicitCastExpr 0x1faf66c51e8 <col:25> 'char *' <ArrayToPointerDecay>
|   | | |   |     `-StringLiteral 0x1faf66c20e8 <col:25> 'char [4]' lvalue "YES"
|   | | |   `-IntegerLiteral 0x1faf66c5218 <col:35> 'int' 0
|   | | `-BinaryOperator 0x1faf66c53c8 <line:247:12, col:35> 'int' '=='
|   | |   |-CallExpr 0x1faf66c5328 <col:12, col:30> 'int'
|   | |   | |-ImplicitCastExpr 0x1faf66c5310 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x1faf66c5280 <col:12> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | |   | |-ImplicitCastExpr 0x1faf66c5358 <col:19> 'const char *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x1faf66c52a0 <col:19> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | |   | `-ImplicitCastExpr 0x1faf66c5388 <col:25> 'const char *' <NoOp>
|   | |   |   `-ImplicitCastExpr 0x1faf66c5370 <col:25> 'char *' <ArrayToPointerDecay>
|   | |   |     `-StringLiteral 0x1faf66c52c0 <col:25> 'char [4]' lvalue "yes"
|   | |   `-IntegerLiteral 0x1faf66c53a0 <col:35> 'int' 0
|   | `-CompoundStmt 0x1faf66c54f0 <col:38, line:250:5>
|   |   |-BinaryOperator 0x1faf66c5498 <line:248:9, col:22> 'int' '='
|   |   | |-UnaryOperator 0x1faf66c5458 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1faf66c5440 <col:10> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1faf66c5408 <col:10> 'int *' lvalue ParmVar 0x1faf66c1510 'asn1_bool' 'int *'
|   |   | `-IntegerLiteral 0x1faf66c5470 <col:22> 'int' 255
|   |   `-ReturnStmt 0x1faf66c54e0 <line:249:9, col:16>
|   |     `-IntegerLiteral 0x1faf66c54b8 <col:16> 'int' 1
|   |-IfStmt 0x1faf66c5f28 <line:251:5, line:259:5>
|   | |-BinaryOperator 0x1faf66c5e18 <line:251:9, line:256:34> 'int' '||'
|   | | |-BinaryOperator 0x1faf66c5c90 <line:251:9, line:255:34> 'int' '||'
|   | | | |-BinaryOperator 0x1faf66c5b08 <line:251:9, line:254:33> 'int' '||'
|   | | | | |-BinaryOperator 0x1faf66c5980 <line:251:9, line:253:33> 'int' '||'
|   | | | | | |-BinaryOperator 0x1faf66c57f8 <line:251:9, line:252:37> 'int' '||'
|   | | | | | | |-BinaryOperator 0x1faf66c5670 <line:251:9, col:34> 'int' '=='
|   | | | | | | | |-CallExpr 0x1faf66c55d0 <col:9, col:29> 'int'
|   | | | | | | | | |-ImplicitCastExpr 0x1faf66c55b8 <col:9> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | | | | | | `-DeclRefExpr 0x1faf66c5528 <col:9> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | | | | | | | | |-ImplicitCastExpr 0x1faf66c5600 <col:16> 'const char *' <LValueToRValue>
|   | | | | | | | | | `-DeclRefExpr 0x1faf66c5548 <col:16> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | | | | | | | | `-ImplicitCastExpr 0x1faf66c5630 <col:22> 'const char *' <NoOp>
|   | | | | | | | |   `-ImplicitCastExpr 0x1faf66c5618 <col:22> 'char *' <ArrayToPointerDecay>
|   | | | | | | | |     `-StringLiteral 0x1faf66c5568 <col:22> 'char [6]' lvalue "FALSE"
|   | | | | | | | `-IntegerLiteral 0x1faf66c5648 <col:34> 'int' 0
|   | | | | | | `-BinaryOperator 0x1faf66c57d8 <line:252:12, col:37> 'int' '=='
|   | | | | | |   |-CallExpr 0x1faf66c5738 <col:12, col:32> 'int'
|   | | | | | |   | |-ImplicitCastExpr 0x1faf66c5720 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | | |   | | `-DeclRefExpr 0x1faf66c5690 <col:12> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | | | | | |   | |-ImplicitCastExpr 0x1faf66c5768 <col:19> 'const char *' <LValueToRValue>
|   | | | | | |   | | `-DeclRefExpr 0x1faf66c56b0 <col:19> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | | | | | |   | `-ImplicitCastExpr 0x1faf66c5798 <col:25> 'const char *' <NoOp>
|   | | | | | |   |   `-ImplicitCastExpr 0x1faf66c5780 <col:25> 'char *' <ArrayToPointerDecay>
|   | | | | | |   |     `-StringLiteral 0x1faf66c56d0 <col:25> 'char [6]' lvalue "false"
|   | | | | | |   `-IntegerLiteral 0x1faf66c57b0 <col:37> 'int' 0
|   | | | | | `-BinaryOperator 0x1faf66c5960 <line:253:12, col:33> 'int' '=='
|   | | | | |   |-CallExpr 0x1faf66c58c0 <col:12, col:28> 'int'
|   | | | | |   | |-ImplicitCastExpr 0x1faf66c58a8 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | |   | | `-DeclRefExpr 0x1faf66c5818 <col:12> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | | | | |   | |-ImplicitCastExpr 0x1faf66c58f0 <col:19> 'const char *' <LValueToRValue>
|   | | | | |   | | `-DeclRefExpr 0x1faf66c5838 <col:19> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | | | | |   | `-ImplicitCastExpr 0x1faf66c5920 <col:25> 'const char *' <NoOp>
|   | | | | |   |   `-ImplicitCastExpr 0x1faf66c5908 <col:25> 'char *' <ArrayToPointerDecay>
|   | | | | |   |     `-StringLiteral 0x1faf66c5858 <col:25> 'char [2]' lvalue "N"
|   | | | | |   `-IntegerLiteral 0x1faf66c5938 <col:33> 'int' 0
|   | | | | `-BinaryOperator 0x1faf66c5ae8 <line:254:12, col:33> 'int' '=='
|   | | | |   |-CallExpr 0x1faf66c5a48 <col:12, col:28> 'int'
|   | | | |   | |-ImplicitCastExpr 0x1faf66c5a30 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | |   | | `-DeclRefExpr 0x1faf66c59a0 <col:12> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | | | |   | |-ImplicitCastExpr 0x1faf66c5a78 <col:19> 'const char *' <LValueToRValue>
|   | | | |   | | `-DeclRefExpr 0x1faf66c59c0 <col:19> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | | | |   | `-ImplicitCastExpr 0x1faf66c5aa8 <col:25> 'const char *' <NoOp>
|   | | | |   |   `-ImplicitCastExpr 0x1faf66c5a90 <col:25> 'char *' <ArrayToPointerDecay>
|   | | | |   |     `-StringLiteral 0x1faf66c59e0 <col:25> 'char [2]' lvalue "n"
|   | | | |   `-IntegerLiteral 0x1faf66c5ac0 <col:33> 'int' 0
|   | | | `-BinaryOperator 0x1faf66c5c70 <line:255:12, col:34> 'int' '=='
|   | | |   |-CallExpr 0x1faf66c5bd0 <col:12, col:29> 'int'
|   | | |   | |-ImplicitCastExpr 0x1faf66c5bb8 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x1faf66c5b28 <col:12> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | | |   | |-ImplicitCastExpr 0x1faf66c5c00 <col:19> 'const char *' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x1faf66c5b48 <col:19> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | | |   | `-ImplicitCastExpr 0x1faf66c5c30 <col:25> 'const char *' <NoOp>
|   | | |   |   `-ImplicitCastExpr 0x1faf66c5c18 <col:25> 'char *' <ArrayToPointerDecay>
|   | | |   |     `-StringLiteral 0x1faf66c5b68 <col:25> 'char [3]' lvalue "NO"
|   | | |   `-IntegerLiteral 0x1faf66c5c48 <col:34> 'int' 0
|   | | `-BinaryOperator 0x1faf66c5df8 <line:256:12, col:34> 'int' '=='
|   | |   |-CallExpr 0x1faf66c5d58 <col:12, col:29> 'int'
|   | |   | |-ImplicitCastExpr 0x1faf66c5d40 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x1faf66c5cb0 <col:12> 'int (const char *, const char *)' Function 0x1faf66c18a8 'strcmp' 'int (const char *, const char *)'
|   | |   | |-ImplicitCastExpr 0x1faf66c5d88 <col:19> 'const char *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x1faf66c5cd0 <col:19> 'const char *' lvalue Var 0x1faf66c16d0 'btmp' 'const char *'
|   | |   | `-ImplicitCastExpr 0x1faf66c5db8 <col:25> 'const char *' <NoOp>
|   | |   |   `-ImplicitCastExpr 0x1faf66c5da0 <col:25> 'char *' <ArrayToPointerDecay>
|   | |   |     `-StringLiteral 0x1faf66c5cf0 <col:25> 'char [3]' lvalue "no"
|   | |   `-IntegerLiteral 0x1faf66c5dd0 <col:34> 'int' 0
|   | `-CompoundStmt 0x1faf66c5f08 <col:37, line:259:5>
|   |   |-BinaryOperator 0x1faf66c5eb0 <line:257:9, col:22> 'int' '='
|   |   | |-UnaryOperator 0x1faf66c5e70 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1faf66c5e58 <col:10> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1faf66c5e38 <col:10> 'int *' lvalue ParmVar 0x1faf66c1510 'asn1_bool' 'int *'
|   |   | `-IntegerLiteral 0x1faf66c5e88 <col:22> 'int' 0
|   |   `-ReturnStmt 0x1faf66c5ef8 <line:258:9, col:16>
|   |     `-IntegerLiteral 0x1faf66c5ed0 <col:16> 'int' 1
|   |-LabelStmt 0x1faf66c5f68 <line:260:2, col:5> 'err'
|   | `-NullStmt 0x1faf66c5f60 <col:5>
|   `-ReturnStmt 0x1faf66c60b8 <line:264:5, col:12>
|     `-IntegerLiteral 0x1faf66c6090 <col:12> 'int' 0
|-FunctionDecl 0x1faf66c18a8 <line:242:9> col:9 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x1faf66c1948 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1faf66c19b0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1faf66c22a0 <line:267:1, line:277:1> line:267:5 invalid X509V3_get_value_int 'int (const int *, int **)'
| |-ParmVarDecl 0x1faf66c6120 <col:26, col:44> col:44 invalid value 'const int *'
| |-ParmVarDecl 0x1faf66c21c0 <col:51, col:66> col:66 invalid aint 'int **'
| `-CompoundStmt 0x1faf66c2550 <line:268:1, line:277:1>
|   |-IfStmt 0x1faf66c2500 <line:271:5, line:274:5>
|   | |-OpaqueValueExpr 0x1faf66c24e8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1faf66c24d0 <line:271:64, line:274:5>
|   |   `-ReturnStmt 0x1faf66c24c0 <line:273:9, col:16>
|   |     `-IntegerLiteral 0x1faf66c2498 <col:16> 'int' 0
|   `-ReturnStmt 0x1faf66c2540 <line:276:5, col:12>
|     `-IntegerLiteral 0x1faf66c2518 <col:12> 'int' 1
|-FunctionDecl 0x1faf66c2928 <line:533:1, line:562:1> line:533:13 used skip_prefix 'void (const unsigned char **, size_t *, size_t, unsigned int)' static
| |-ParmVarDecl 0x1faf66c25b8 <col:25, col:47> col:47 used p 'const unsigned char **'
| |-ParmVarDecl 0x1faf66c2688 <col:50, col:58> col:58 used plen 'size_t *'
| |-ParmVarDecl 0x1faf66c2700 <line:534:25, col:32> col:32 used subject_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66c2780 <line:535:25, col:38> col:38 used flags 'unsigned int'
| `-CompoundStmt 0x1faf66ca238 <line:536:1, line:562:1>
|   |-DeclStmt 0x1faf66c2ae8 <line:537:5, col:38>
|   | `-VarDecl 0x1faf66c2a18 <col:5, col:37> col:26 used pattern 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1faf66c2ad0 <col:36, col:37> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1faf66c2ab8 <col:36, col:37> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1faf66c2aa0 <col:37> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1faf66c2a80 <col:37> 'const unsigned char **' lvalue ParmVar 0x1faf66c25b8 'p' 'const unsigned char **'
|   |-DeclStmt 0x1faf66c2be0 <line:538:5, col:31>
|   | `-VarDecl 0x1faf66c2b10 <col:5, col:27> col:12 used pattern_len 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x1faf66c2bc8 <col:26, col:27> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1faf66c2bb0 <col:26, col:27> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1faf66c2b98 <col:27> 'size_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1faf66c2b78 <col:27> 'size_t *' lvalue ParmVar 0x1faf66c2688 'plen' 'size_t *'
|   |-IfStmt 0x1faf66c2c68 <line:546:5, line:547:9>
|   | |-OpaqueValueExpr 0x1faf66c2c50 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1faf66c2c40 <col:9>
|   |-WhileStmt 0x1faf66c2f88 <line:549:5, line:555:5>
|   | |-BinaryOperator 0x1faf66c2dc0 <line:549:12, col:42> 'int' '&&'
|   | | |-BinaryOperator 0x1faf66c2d08 <col:12, col:26> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1faf66c2cd8 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1faf66c2c80 <col:12> 'size_t':'unsigned long long' lvalue Var 0x1faf66c2b10 'pattern_len' 'size_t':'unsigned long long'
|   | | | `-ImplicitCastExpr 0x1faf66c2cf0 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1faf66c2cb8 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66c2700 'subject_len' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66c2da8 <col:41, col:42> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x1faf66c2d90 <col:41, col:42> 'unsigned char' <LValueToRValue>
|   | |     `-UnaryOperator 0x1faf66c2d78 <col:41, col:42> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1faf66c2d60 <col:42> 'const unsigned char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1faf66c2d28 <col:42> 'const unsigned char *' lvalue Var 0x1faf66c2a18 'pattern' 'const unsigned char *'
|   | `-CompoundStmt 0x1faf66c2f60 <col:51, line:555:5>
|   |   |-IfStmt 0x1faf66c2ed8 <line:550:9, line:552:13>
|   |   | |-OpaqueValueExpr 0x1faf66c2ec0 <<invalid sloc>> '_Bool'
|   |   | `-BreakStmt 0x1faf66c2eb8 <col:13>
|   |   |-UnaryOperator 0x1faf66c2f10 <line:553:9, col:11> 'const unsigned char *' prefix '++'
|   |   | `-DeclRefExpr 0x1faf66c2ef0 <col:11> 'const unsigned char *' lvalue Var 0x1faf66c2a18 'pattern' 'const unsigned char *'
|   |   `-UnaryOperator 0x1faf66c2f48 <line:554:9, col:11> 'size_t':'unsigned long long' prefix '--'
|   |     `-DeclRefExpr 0x1faf66c2f28 <col:11> 'size_t':'unsigned long long' lvalue Var 0x1faf66c2b10 'pattern_len' 'size_t':'unsigned long long'
|   `-IfStmt 0x1faf66ca220 <line:558:5, line:561:5>
|     |-BinaryOperator 0x1faf66c3010 <line:558:9, col:24> 'int' '=='
|     | |-ImplicitCastExpr 0x1faf66c2fe0 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|     | | `-DeclRefExpr 0x1faf66c2fa0 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1faf66c2b10 'pattern_len' 'size_t':'unsigned long long'
|     | `-ImplicitCastExpr 0x1faf66c2ff8 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|     |   `-DeclRefExpr 0x1faf66c2fc0 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66c2700 'subject_len' 'size_t':'unsigned long long'
|     `-CompoundStmt 0x1faf66c3180 <col:37, line:561:5>
|       |-BinaryOperator 0x1faf66c30b8 <line:559:9, col:14> 'const unsigned char *' '='
|       | |-UnaryOperator 0x1faf66c3068 <col:9, col:10> 'const unsigned char *' lvalue prefix '*' cannot overflow
|       | | `-ImplicitCastExpr 0x1faf66c3050 <col:10> 'const unsigned char **' <LValueToRValue>
|       | |   `-DeclRefExpr 0x1faf66c3030 <col:10> 'const unsigned char **' lvalue ParmVar 0x1faf66c25b8 'p' 'const unsigned char **'
|       | `-ImplicitCastExpr 0x1faf66c30a0 <col:14> 'const unsigned char *' <LValueToRValue>
|       |   `-DeclRefExpr 0x1faf66c3080 <col:14> 'const unsigned char *' lvalue Var 0x1faf66c2a18 'pattern' 'const unsigned char *'
|       `-BinaryOperator 0x1faf66c3160 <line:560:9, col:17> 'size_t':'unsigned long long' '='
|         |-UnaryOperator 0x1faf66c3110 <col:9, col:10> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|         | `-ImplicitCastExpr 0x1faf66c30f8 <col:10> 'size_t *' <LValueToRValue>
|         |   `-DeclRefExpr 0x1faf66c30d8 <col:10> 'size_t *' lvalue ParmVar 0x1faf66c2688 'plen' 'size_t *'
|         `-ImplicitCastExpr 0x1faf66c3148 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1faf66c3128 <col:17> 'size_t':'unsigned long long' lvalue Var 0x1faf66c2b10 'pattern_len' 'size_t':'unsigned long long'
|-FunctionDecl 0x1faf66ca650 <line:565:1, line:591:1> line:565:12 used equal_nocase 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' static
| |-ParmVarDecl 0x1faf66ca288 <col:25, col:46> col:46 used pattern 'const unsigned char *'
| |-ParmVarDecl 0x1faf66ca300 <col:55, col:62> col:62 used pattern_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66ca380 <line:566:25, col:46> col:46 used subject 'const unsigned char *'
| |-ParmVarDecl 0x1faf66ca3f8 <col:55, col:62> col:62 used subject_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66ca478 <line:567:25, col:38> col:38 used flags 'unsigned int'
| `-CompoundStmt 0x1faf66cb588 <line:568:1, line:591:1>
|   |-CallExpr 0x1faf66ca870 <line:569:5, col:59> 'void'
|   | |-ImplicitCastExpr 0x1faf66ca858 <col:5> 'void (*)(const unsigned char **, size_t *, size_t, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1faf66ca730 <col:5> 'void (const unsigned char **, size_t *, size_t, unsigned int)' Function 0x1faf66c2928 'skip_prefix' 'void (const unsigned char **, size_t *, size_t, unsigned int)'
|   | |-UnaryOperator 0x1faf66ca770 <col:17, col:18> 'const unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1faf66ca750 <col:18> 'const unsigned char *' lvalue ParmVar 0x1faf66ca288 'pattern' 'const unsigned char *'
|   | |-UnaryOperator 0x1faf66ca7a8 <col:27, col:28> 'size_t *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1faf66ca788 <col:28> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ca300 'pattern_len' 'size_t':'unsigned long long'
|   | |-ImplicitCastExpr 0x1faf66ca8b0 <col:41> 'size_t':'unsigned long long' <LValueToRValue>
|   | | `-DeclRefExpr 0x1faf66ca7c0 <col:41> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ca3f8 'subject_len' 'size_t':'unsigned long long'
|   | `-ImplicitCastExpr 0x1faf66ca8c8 <col:54> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1faf66ca7e0 <col:54> 'unsigned int' lvalue ParmVar 0x1faf66ca478 'flags' 'unsigned int'
|   |-IfStmt 0x1faf66ca9a8 <line:570:5, line:571:16>
|   | |-BinaryOperator 0x1faf66ca950 <line:570:9, col:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x1faf66ca920 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66ca8e0 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ca300 'pattern_len' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66ca938 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1faf66ca900 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ca3f8 'subject_len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x1faf66ca998 <line:571:9, col:16>
|   |   `-IntegerLiteral 0x1faf66ca970 <col:16> 'int' 0
|   |-WhileStmt 0x1faf66cb538 <line:572:5, line:589:5>
|   | |-ImplicitCastExpr 0x1faf66ca9e0 <line:572:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | `-DeclRefExpr 0x1faf66ca9c0 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ca300 'pattern_len' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x1faf66cb4f0 <col:25, line:589:5>
|   |   |-DeclStmt 0x1faf66caae0 <line:573:9, col:35>
|   |   | `-VarDecl 0x1faf66caa10 <col:9, col:28> col:23 used l 'unsigned char' cinit
|   |   |   `-ImplicitCastExpr 0x1faf66caac8 <col:27, col:28> 'unsigned char' <LValueToRValue>
|   |   |     `-UnaryOperator 0x1faf66caab0 <col:27, col:28> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |       `-ImplicitCastExpr 0x1faf66caa98 <col:28> 'const unsigned char *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1faf66caa78 <col:28> 'const unsigned char *' lvalue ParmVar 0x1faf66ca288 'pattern' 'const unsigned char *'
|   |   |-DeclStmt 0x1faf66cabe0 <line:574:9, col:35>
|   |   | `-VarDecl 0x1faf66cab10 <col:9, col:28> col:23 used r 'unsigned char' cinit
|   |   |   `-ImplicitCastExpr 0x1faf66cabc8 <col:27, col:28> 'unsigned char' <LValueToRValue>
|   |   |     `-UnaryOperator 0x1faf66cabb0 <col:27, col:28> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |       `-ImplicitCastExpr 0x1faf66cab98 <col:28> 'const unsigned char *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1faf66cab78 <col:28> 'const unsigned char *' lvalue ParmVar 0x1faf66ca380 'subject' 'const unsigned char *'
|   |   |-IfStmt 0x1faf66cace0 <line:576:9, line:577:20>
|   |   | |-BinaryOperator 0x1faf66cac88 <line:576:13, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1faf66cac70 <col:13> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x1faf66cac58 <col:13> 'unsigned char' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1faf66cabf8 <col:13> 'unsigned char' lvalue Var 0x1faf66caa10 'l' 'unsigned char'
|   |   | | `-IntegerLiteral 0x1faf66cac30 <col:18> 'int' 0
|   |   | `-ReturnStmt 0x1faf66cacd0 <line:577:13, col:20>
|   |   |   `-IntegerLiteral 0x1faf66caca8 <col:20> 'int' 0
|   |   |-IfStmt 0x1faf66cb430 <line:578:9, line:585:9>
|   |   | |-BinaryOperator 0x1faf66cadb0 <line:578:13, col:18> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x1faf66cad80 <col:13> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x1faf66cad50 <col:13> 'unsigned char' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1faf66cacf8 <col:13> 'unsigned char' lvalue Var 0x1faf66caa10 'l' 'unsigned char'
|   |   | | `-ImplicitCastExpr 0x1faf66cad98 <col:18> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x1faf66cad68 <col:18> 'unsigned char' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x1faf66cad18 <col:18> 'unsigned char' lvalue Var 0x1faf66cab10 'r' 'unsigned char'
|   |   | `-CompoundStmt 0x1faf66cb408 <col:21, line:585:9>
|   |   |   |-IfStmt 0x1faf66cb038 <line:579:13, line:580:33>
|   |   |   | |-BinaryOperator 0x1faf66caee0 <line:579:17, col:34> 'int' '&&'
|   |   |   | | |-BinaryOperator 0x1faf66cae38 <col:17, col:24> 'int' '<='
|   |   |   | | | |-CharacterLiteral 0x1faf66cadd0 <col:17> 'int' 65
|   |   |   | | | `-ImplicitCastExpr 0x1faf66cae20 <col:24> 'int' <IntegralCast>
|   |   |   | | |   `-ImplicitCastExpr 0x1faf66cae08 <col:24> 'unsigned char' <LValueToRValue>
|   |   |   | | |     `-DeclRefExpr 0x1faf66cade8 <col:24> 'unsigned char' lvalue Var 0x1faf66caa10 'l' 'unsigned char'
|   |   |   | | `-BinaryOperator 0x1faf66caec0 <col:29, col:34> 'int' '<='
|   |   |   | |   |-ImplicitCastExpr 0x1faf66caea8 <col:29> 'int' <IntegralCast>
|   |   |   | |   | `-ImplicitCastExpr 0x1faf66cae90 <col:29> 'unsigned char' <LValueToRValue>
|   |   |   | |   |   `-DeclRefExpr 0x1faf66cae58 <col:29> 'unsigned char' lvalue Var 0x1faf66caa10 'l' 'unsigned char'
|   |   |   | |   `-CharacterLiteral 0x1faf66cae78 <col:34> 'int' 90
|   |   |   | `-BinaryOperator 0x1faf66cb018 <line:580:17, col:33> 'unsigned char' '='
|   |   |   |   |-DeclRefExpr 0x1faf66caf00 <col:17> 'unsigned char' lvalue Var 0x1faf66caa10 'l' 'unsigned char'
|   |   |   |   `-ImplicitCastExpr 0x1faf66cb000 <col:21, col:33> 'unsigned char' <IntegralCast>
|   |   |   |     `-BinaryOperator 0x1faf66cafe0 <col:21, col:33> 'int' '+'
|   |   |   |       |-ParenExpr 0x1faf66cafa8 <col:21, col:29> 'int'
|   |   |   |       | `-BinaryOperator 0x1faf66caf88 <col:22, col:26> 'int' '-'
|   |   |   |       |   |-ImplicitCastExpr 0x1faf66caf70 <col:22> 'int' <IntegralCast>
|   |   |   |       |   | `-ImplicitCastExpr 0x1faf66caf58 <col:22> 'unsigned char' <LValueToRValue>
|   |   |   |       |   |   `-DeclRefExpr 0x1faf66caf20 <col:22> 'unsigned char' lvalue Var 0x1faf66caa10 'l' 'unsigned char'
|   |   |   |       |   `-CharacterLiteral 0x1faf66caf40 <col:26> 'int' 65
|   |   |   |       `-CharacterLiteral 0x1faf66cafc8 <col:33> 'int' 97
|   |   |   |-IfStmt 0x1faf66cb2e0 <line:581:13, line:582:33>
|   |   |   | |-BinaryOperator 0x1faf66cb160 <line:581:17, col:34> 'int' '&&'
|   |   |   | | |-BinaryOperator 0x1faf66cb0b8 <col:17, col:24> 'int' '<='
|   |   |   | | | |-CharacterLiteral 0x1faf66cb050 <col:17> 'int' 65
|   |   |   | | | `-ImplicitCastExpr 0x1faf66cb0a0 <col:24> 'int' <IntegralCast>
|   |   |   | | |   `-ImplicitCastExpr 0x1faf66cb088 <col:24> 'unsigned char' <LValueToRValue>
|   |   |   | | |     `-DeclRefExpr 0x1faf66cb068 <col:24> 'unsigned char' lvalue Var 0x1faf66cab10 'r' 'unsigned char'
|   |   |   | | `-BinaryOperator 0x1faf66cb140 <col:29, col:34> 'int' '<='
|   |   |   | |   |-ImplicitCastExpr 0x1faf66cb128 <col:29> 'int' <IntegralCast>
|   |   |   | |   | `-ImplicitCastExpr 0x1faf66cb110 <col:29> 'unsigned char' <LValueToRValue>
|   |   |   | |   |   `-DeclRefExpr 0x1faf66cb0d8 <col:29> 'unsigned char' lvalue Var 0x1faf66cab10 'r' 'unsigned char'
|   |   |   | |   `-CharacterLiteral 0x1faf66cb0f8 <col:34> 'int' 90
|   |   |   | `-BinaryOperator 0x1faf66cb2c0 <line:582:17, col:33> 'unsigned char' '='
|   |   |   |   |-DeclRefExpr 0x1faf66cb180 <col:17> 'unsigned char' lvalue Var 0x1faf66cab10 'r' 'unsigned char'
|   |   |   |   `-ImplicitCastExpr 0x1faf66cb2a8 <col:21, col:33> 'unsigned char' <IntegralCast>
|   |   |   |     `-BinaryOperator 0x1faf66cb288 <col:21, col:33> 'int' '+'
|   |   |   |       |-ParenExpr 0x1faf66cb250 <col:21, col:29> 'int'
|   |   |   |       | `-BinaryOperator 0x1faf66cb230 <col:22, col:26> 'int' '-'
|   |   |   |       |   |-ImplicitCastExpr 0x1faf66cb1f0 <col:22> 'int' <IntegralCast>
|   |   |   |       |   | `-ImplicitCastExpr 0x1faf66cb1d8 <col:22> 'unsigned char' <LValueToRValue>
|   |   |   |       |   |   `-DeclRefExpr 0x1faf66cb1a0 <col:22> 'unsigned char' lvalue Var 0x1faf66cab10 'r' 'unsigned char'
|   |   |   |       |   `-CharacterLiteral 0x1faf66cb1c0 <col:26> 'int' 65
|   |   |   |       `-CharacterLiteral 0x1faf66cb270 <col:33> 'int' 97
|   |   |   `-IfStmt 0x1faf66cb3f0 <line:583:13, line:584:24>
|   |   |     |-BinaryOperator 0x1faf66cb398 <line:583:17, col:22> 'int' '!='
|   |   |     | |-ImplicitCastExpr 0x1faf66cb368 <col:17> 'int' <IntegralCast>
|   |   |     | | `-ImplicitCastExpr 0x1faf66cb338 <col:17> 'unsigned char' <LValueToRValue>
|   |   |     | |   `-DeclRefExpr 0x1faf66cb2f8 <col:17> 'unsigned char' lvalue Var 0x1faf66caa10 'l' 'unsigned char'
|   |   |     | `-ImplicitCastExpr 0x1faf66cb380 <col:22> 'int' <IntegralCast>
|   |   |     |   `-ImplicitCastExpr 0x1faf66cb350 <col:22> 'unsigned char' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1faf66cb318 <col:22> 'unsigned char' lvalue Var 0x1faf66cab10 'r' 'unsigned char'
|   |   |     `-ReturnStmt 0x1faf66cb3e0 <line:584:17, col:24>
|   |   |       `-IntegerLiteral 0x1faf66cb3b8 <col:24> 'int' 0
|   |   |-UnaryOperator 0x1faf66cb468 <line:586:9, col:11> 'const unsigned char *' prefix '++'
|   |   | `-DeclRefExpr 0x1faf66cb448 <col:11> 'const unsigned char *' lvalue ParmVar 0x1faf66ca288 'pattern' 'const unsigned char *'
|   |   |-UnaryOperator 0x1faf66cb4a0 <line:587:9, col:11> 'const unsigned char *' prefix '++'
|   |   | `-DeclRefExpr 0x1faf66cb480 <col:11> 'const unsigned char *' lvalue ParmVar 0x1faf66ca380 'subject' 'const unsigned char *'
|   |   `-UnaryOperator 0x1faf66cb4d8 <line:588:9, col:11> 'size_t':'unsigned long long' prefix '--'
|   |     `-DeclRefExpr 0x1faf66cb4b8 <col:11> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ca300 'pattern_len' 'size_t':'unsigned long long'
|   `-ReturnStmt 0x1faf66cb578 <line:590:5, col:12>
|     `-IntegerLiteral 0x1faf66cb550 <col:12> 'int' 1
|-FunctionDecl 0x1faf66cb8f0 <line:594:1, line:602:1> line:594:12 used equal_case 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' static
| |-ParmVarDecl 0x1faf66cb5d0 <col:23, col:44> col:44 used pattern 'const unsigned char *'
| |-ParmVarDecl 0x1faf66cb648 <col:53, col:60> col:60 used pattern_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66cb6c8 <line:595:23, col:44> col:44 used subject 'const unsigned char *'
| |-ParmVarDecl 0x1faf66cb740 <col:53, col:60> col:60 used subject_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66cb7c0 <line:596:23, col:36> col:36 used flags 'unsigned int'
| `-CompoundStmt 0x1faf66cc038 <line:597:1, line:602:1>
|   |-CallExpr 0x1faf66cbab8 <line:598:5, col:59> 'void'
|   | |-ImplicitCastExpr 0x1faf66cbaa0 <col:5> 'void (*)(const unsigned char **, size_t *, size_t, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1faf66cb9d0 <col:5> 'void (const unsigned char **, size_t *, size_t, unsigned int)' Function 0x1faf66c2928 'skip_prefix' 'void (const unsigned char **, size_t *, size_t, unsigned int)'
|   | |-UnaryOperator 0x1faf66cba10 <col:17, col:18> 'const unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1faf66cb9f0 <col:18> 'const unsigned char *' lvalue ParmVar 0x1faf66cb5d0 'pattern' 'const unsigned char *'
|   | |-UnaryOperator 0x1faf66cba48 <col:27, col:28> 'size_t *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1faf66cba28 <col:28> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cb648 'pattern_len' 'size_t':'unsigned long long'
|   | |-ImplicitCastExpr 0x1faf66cbaf8 <col:41> 'size_t':'unsigned long long' <LValueToRValue>
|   | | `-DeclRefExpr 0x1faf66cba60 <col:41> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cb740 'subject_len' 'size_t':'unsigned long long'
|   | `-ImplicitCastExpr 0x1faf66cbb10 <col:54> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1faf66cba80 <col:54> 'unsigned int' lvalue ParmVar 0x1faf66cb7c0 'flags' 'unsigned int'
|   |-IfStmt 0x1faf66cbbf0 <line:599:5, line:600:16>
|   | |-BinaryOperator 0x1faf66cbb98 <line:599:9, col:24> 'int' '!='
|   | | |-ImplicitCastExpr 0x1faf66cbb68 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66cbb28 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cb648 'pattern_len' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66cbb80 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1faf66cbb48 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cb740 'subject_len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x1faf66cbbe0 <line:600:9, col:16>
|   |   `-IntegerLiteral 0x1faf66cbbb8 <col:16> 'int' 0
|   `-ReturnStmt 0x1faf66cc028 <line:601:5, col:49>
|     `-UnaryOperator 0x1faf66cc010 <col:12, col:49> 'int' prefix '!' cannot overflow
|       `-CallExpr 0x1faf66cbf60 <col:13, col:49> 'int'
|         |-ImplicitCastExpr 0x1faf66cbf48 <col:13> 'int (*)(const void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1faf66cbe40 <col:13> 'int (const void *, const void *, unsigned long long)' Function 0x1faf66cbc50 'memcmp' 'int (const void *, const void *, unsigned long long)'
|         |-ImplicitCastExpr 0x1faf66cbfb0 <col:20> 'const void *' <BitCast>
|         | `-ImplicitCastExpr 0x1faf66cbf98 <col:20> 'const unsigned char *' <LValueToRValue>
|         |   `-DeclRefExpr 0x1faf66cbe78 <col:20> 'const unsigned char *' lvalue ParmVar 0x1faf66cb5d0 'pattern' 'const unsigned char *'
|         |-ImplicitCastExpr 0x1faf66cbfe0 <col:29> 'const void *' <BitCast>
|         | `-ImplicitCastExpr 0x1faf66cbfc8 <col:29> 'const unsigned char *' <LValueToRValue>
|         |   `-DeclRefExpr 0x1faf66cbe98 <col:29> 'const unsigned char *' lvalue ParmVar 0x1faf66cb6c8 'subject' 'const unsigned char *'
|         `-ImplicitCastExpr 0x1faf66cbff8 <col:38> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1faf66cbeb8 <col:38> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cb648 'pattern_len' 'size_t':'unsigned long long'
|-FunctionDecl 0x1faf66cbc50 <col:13> col:13 implicit used memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1faf66cbcf0 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1faf66cbd58 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1faf66cbdc0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1faf66cd400 <line:608:1, line:631:1> line:608:12 used equal_email 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' static
| |-ParmVarDecl 0x1faf66cc078 <col:24, col:45> col:45 used a 'const unsigned char *'
| |-ParmVarDecl 0x1faf66cc0f0 <col:48, col:55> col:55 used a_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66cc170 <line:609:24, col:45> col:45 used b 'const unsigned char *'
| |-ParmVarDecl 0x1faf66cd250 <col:48, col:55> col:55 used b_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66cd2d0 <line:610:24, col:37> col:37 unused_flags 'unsigned int'
| `-CompoundStmt 0x1faf66ce098 <line:611:1, line:631:1>
|   |-DeclStmt 0x1faf66cd590 <line:612:5, col:21>
|   | `-VarDecl 0x1faf66cd4f0 <col:5, col:16> col:12 used i 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x1faf66cd578 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66cd558 <col:16> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cc0f0 'a_len' 'size_t':'unsigned long long'
|   |-IfStmt 0x1faf66cd670 <line:613:5, line:614:16>
|   | |-BinaryOperator 0x1faf66cd618 <line:613:9, col:18> 'int' '!='
|   | | |-ImplicitCastExpr 0x1faf66cd5e8 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66cd5a8 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cc0f0 'a_len' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66cd600 <col:18> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1faf66cd5c8 <col:18> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cd250 'b_len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x1faf66cd660 <line:614:9, col:16>
|   |   `-IntegerLiteral 0x1faf66cd638 <col:16> 'int' 0
|   |-WhileStmt 0x1faf66cdda8 <line:620:5, line:627:5>
|   | |-BinaryOperator 0x1faf66cd718 <line:620:12, col:16> 'int' '>'
|   | | |-ImplicitCastExpr 0x1faf66cd6e8 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66cd688 <col:12> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66cd700 <col:16> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1faf66cd6c0 <col:16> 'int' 0
|   | `-CompoundStmt 0x1faf66cdd88 <col:19, line:627:5>
|   |   |-UnaryOperator 0x1faf66cd758 <line:621:9, col:11> 'size_t':'unsigned long long' prefix '--'
|   |   | `-DeclRefExpr 0x1faf66cd738 <col:11> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|   |   `-IfStmt 0x1faf66cdd70 <line:622:9, line:626:9>
|   |     |-BinaryOperator 0x1faf66cd960 <line:622:13, col:36> 'int' '||'
|   |     | |-BinaryOperator 0x1faf66cd848 <col:13, col:21> 'int' '=='
|   |     | | |-ImplicitCastExpr 0x1faf66cd830 <col:13, col:16> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x1faf66cd818 <col:13, col:16> 'unsigned char' <LValueToRValue>
|   |     | | |   `-ArraySubscriptExpr 0x1faf66cd7e0 <col:13, col:16> 'const unsigned char' lvalue
|   |     | | |     |-ImplicitCastExpr 0x1faf66cd7b0 <col:13> 'const unsigned char *' <LValueToRValue>
|   |     | | |     | `-DeclRefExpr 0x1faf66cd770 <col:13> 'const unsigned char *' lvalue ParmVar 0x1faf66cc078 'a' 'const unsigned char *'
|   |     | | |     `-ImplicitCastExpr 0x1faf66cd7c8 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | |       `-DeclRefExpr 0x1faf66cd790 <col:15> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|   |     | | `-CharacterLiteral 0x1faf66cd800 <col:21> 'int' 64
|   |     | `-BinaryOperator 0x1faf66cd940 <col:28, col:36> 'int' '=='
|   |     |   |-ImplicitCastExpr 0x1faf66cd928 <col:28, col:31> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x1faf66cd910 <col:28, col:31> 'unsigned char' <LValueToRValue>
|   |     |   |   `-ArraySubscriptExpr 0x1faf66cd8d8 <col:28, col:31> 'const unsigned char' lvalue
|   |     |   |     |-ImplicitCastExpr 0x1faf66cd8a8 <col:28> 'const unsigned char *' <LValueToRValue>
|   |     |   |     | `-DeclRefExpr 0x1faf66cd868 <col:28> 'const unsigned char *' lvalue ParmVar 0x1faf66cc170 'b' 'const unsigned char *'
|   |     |   |     `-ImplicitCastExpr 0x1faf66cd8c0 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|   |     |   |       `-DeclRefExpr 0x1faf66cd888 <col:30> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|   |     |   `-CharacterLiteral 0x1faf66cd8f8 <col:36> 'int' 64
|   |     `-CompoundStmt 0x1faf66cdd50 <col:41, line:626:9>
|   |       |-IfStmt 0x1faf66cdd30 <line:623:13, line:624:24>
|   |       | |-UnaryOperator 0x1faf66cdce0 <line:623:17, col:68> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x1faf66cdc80 <col:18, col:68> 'int'
|   |       | |   |-ImplicitCastExpr 0x1faf66cdc68 <col:18> 'int (*)(const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1faf66cd980 <col:18> 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' Function 0x1faf66ca650 'equal_nocase' 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)'
|   |       | |   |-BinaryOperator 0x1faf66cda10 <col:31, col:35> 'const unsigned char *' '+'
|   |       | |   | |-ImplicitCastExpr 0x1faf66cd9e0 <col:31> 'const unsigned char *' <LValueToRValue>
|   |       | |   | | `-DeclRefExpr 0x1faf66cd9a0 <col:31> 'const unsigned char *' lvalue ParmVar 0x1faf66cc078 'a' 'const unsigned char *'
|   |       | |   | `-ImplicitCastExpr 0x1faf66cd9f8 <col:35> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x1faf66cd9c0 <col:35> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|   |       | |   |-BinaryOperator 0x1faf66cdaa0 <col:38, col:46> 'unsigned long long' '-'
|   |       | |   | |-ImplicitCastExpr 0x1faf66cda70 <col:38> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | |   | | `-DeclRefExpr 0x1faf66cda30 <col:38> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cc0f0 'a_len' 'size_t':'unsigned long long'
|   |       | |   | `-ImplicitCastExpr 0x1faf66cda88 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x1faf66cda50 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|   |       | |   |-BinaryOperator 0x1faf66cdb30 <col:49, col:53> 'const unsigned char *' '+'
|   |       | |   | |-ImplicitCastExpr 0x1faf66cdb00 <col:49> 'const unsigned char *' <LValueToRValue>
|   |       | |   | | `-DeclRefExpr 0x1faf66cdac0 <col:49> 'const unsigned char *' lvalue ParmVar 0x1faf66cc170 'b' 'const unsigned char *'
|   |       | |   | `-ImplicitCastExpr 0x1faf66cdb18 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x1faf66cdae0 <col:53> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|   |       | |   |-BinaryOperator 0x1faf66cdbc0 <col:56, col:64> 'unsigned long long' '-'
|   |       | |   | |-ImplicitCastExpr 0x1faf66cdb90 <col:56> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | |   | | `-DeclRefExpr 0x1faf66cdb50 <col:56> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cc0f0 'a_len' 'size_t':'unsigned long long'
|   |       | |   | `-ImplicitCastExpr 0x1faf66cdba8 <col:64> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x1faf66cdb70 <col:64> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|   |       | |   `-ImplicitCastExpr 0x1faf66cdcc8 <col:67> 'unsigned int' <IntegralCast>
|   |       | |     `-IntegerLiteral 0x1faf66cdbe0 <col:67> 'int' 0
|   |       | `-ReturnStmt 0x1faf66cdd20 <line:624:17, col:24>
|   |       |   `-IntegerLiteral 0x1faf66cdcf8 <col:24> 'int' 0
|   |       `-BreakStmt 0x1faf66cdd48 <line:625:13>
|   |-IfStmt 0x1faf66cded0 <line:628:5, line:629:13>
|   | |-BinaryOperator 0x1faf66cde38 <line:628:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66cde08 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66cddc0 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66cde20 <col:14> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1faf66cdde0 <col:14> 'int' 0
|   | `-BinaryOperator 0x1faf66cdeb0 <line:629:9, col:13> 'size_t':'unsigned long long' '='
|   |   |-DeclRefExpr 0x1faf66cde58 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1faf66cde98 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66cde78 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66cc0f0 'a_len' 'size_t':'unsigned long long'
|   `-ReturnStmt 0x1faf66ce088 <line:630:5, col:36>
|     `-CallExpr 0x1faf66cdfc8 <col:12, col:36> 'int'
|       |-ImplicitCastExpr 0x1faf66cdfb0 <col:12> 'int (*)(const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1faf66cdee8 <col:12> 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' Function 0x1faf66cb8f0 'equal_case' 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)'
|       |-ImplicitCastExpr 0x1faf66ce010 <col:23> 'const unsigned char *' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf66cdf08 <col:23> 'const unsigned char *' lvalue ParmVar 0x1faf66cc078 'a' 'const unsigned char *'
|       |-ImplicitCastExpr 0x1faf66ce028 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf66cdf28 <col:26> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1faf66ce040 <col:29> 'const unsigned char *' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf66cdf48 <col:29> 'const unsigned char *' lvalue ParmVar 0x1faf66cc170 'b' 'const unsigned char *'
|       |-ImplicitCastExpr 0x1faf66ce058 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf66cdf68 <col:32> 'size_t':'unsigned long long' lvalue Var 0x1faf66cd4f0 'i' 'size_t':'unsigned long long'
|       `-ImplicitCastExpr 0x1faf66ce070 <col:35> 'unsigned int' <IntegralCast>
|         `-IntegerLiteral 0x1faf66cdf88 <col:35> 'int' 0
|-FunctionDecl 0x1faf66ce620 <line:637:1, line:686:1> line:637:12 used wildcard_match 'int (const unsigned char *, size_t, const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' static
| |-ParmVarDecl 0x1faf66ce0e8 <col:27, col:48> col:48 used prefix 'const unsigned char *'
| |-ParmVarDecl 0x1faf66ce160 <col:56, col:63> col:63 used prefix_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66ce1e0 <line:638:27, col:48> col:48 used suffix 'const unsigned char *'
| |-ParmVarDecl 0x1faf66ce270 <col:56, col:63> col:63 used suffix_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66ce2f0 <line:639:27, col:48> col:48 used subject 'const unsigned char *'
| |-ParmVarDecl 0x1faf66ce368 <col:57, col:64> col:64 used subject_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66ce3e8 <line:640:27, col:40> col:40 used flags 'unsigned int'
| `-CompoundStmt 0x1faf66c9720 <line:641:1, line:686:1>
|   |-DeclStmt 0x1faf66ce790 <line:642:5, col:40>
|   | `-VarDecl 0x1faf66ce728 <col:5, col:26> col:26 used wildcard_start 'const unsigned char *'
|   |-DeclStmt 0x1faf66ce828 <line:643:5, col:38>
|   | `-VarDecl 0x1faf66ce7c0 <col:5, col:26> col:26 used wildcard_end 'const unsigned char *'
|   |-DeclStmt 0x1faf66ce8c0 <line:644:5, col:27>
|   | `-VarDecl 0x1faf66ce858 <col:5, col:26> col:26 used p 'const unsigned char *'
|   |-DeclStmt 0x1faf66ce980 <line:645:5, col:24>
|   | `-VarDecl 0x1faf66ce8f0 <col:5, col:23> col:9 used allow_multi 'int' cinit
|   |   `-IntegerLiteral 0x1faf66ce958 <col:23> 'int' 0
|   |-DeclStmt 0x1faf66cea40 <line:646:5, col:23>
|   | `-VarDecl 0x1faf66ce9b0 <col:5, col:22> col:9 used allow_idna 'int' cinit
|   |   `-IntegerLiteral 0x1faf66cea18 <col:22> 'int' 0
|   |-IfStmt 0x1faf66ceb78 <line:648:5, line:649:16>
|   | |-BinaryOperator 0x1faf66ceb20 <line:648:9, col:36> 'int' '<'
|   | | |-ImplicitCastExpr 0x1faf66ceb08 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66cea58 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce368 'subject_len' 'size_t':'unsigned long long'
|   | | `-BinaryOperator 0x1faf66ceae8 <col:23, col:36> 'unsigned long long' '+'
|   | |   |-ImplicitCastExpr 0x1faf66ceab8 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66cea78 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce160 'prefix_len' 'size_t':'unsigned long long'
|   | |   `-ImplicitCastExpr 0x1faf66cead0 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1faf66cea98 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce270 'suffix_len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x1faf66ceb68 <line:649:9, col:16>
|   |   `-IntegerLiteral 0x1faf66ceb40 <col:16> 'int' 0
|   |-IfStmt 0x1faf66ced78 <line:650:5, line:651:16>
|   | |-UnaryOperator 0x1faf66ced28 <line:650:9, col:69> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1faf66cec68 <col:10, col:69> 'int'
|   | |   |-ImplicitCastExpr 0x1faf66cec50 <col:10> 'int (*)(const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1faf66ceb90 <col:10> 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' Function 0x1faf66ca650 'equal_nocase' 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)'
|   | |   |-ImplicitCastExpr 0x1faf66cecb0 <col:23> 'const unsigned char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66cebb0 <col:23> 'const unsigned char *' lvalue ParmVar 0x1faf66ce0e8 'prefix' 'const unsigned char *'
|   | |   |-ImplicitCastExpr 0x1faf66cecc8 <col:31> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66cebd0 <col:31> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce160 'prefix_len' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1faf66cece0 <col:43> 'const unsigned char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66cebf0 <col:43> 'const unsigned char *' lvalue ParmVar 0x1faf66ce2f0 'subject' 'const unsigned char *'
|   | |   |-ImplicitCastExpr 0x1faf66cecf8 <col:52> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66cec10 <col:52> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce160 'prefix_len' 'size_t':'unsigned long long'
|   | |   `-ImplicitCastExpr 0x1faf66ced10 <col:64> 'unsigned int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1faf66cec30 <col:64> 'unsigned int' lvalue ParmVar 0x1faf66ce3e8 'flags' 'unsigned int'
|   | `-ReturnStmt 0x1faf66ced68 <line:651:9, col:16>
|   |   `-IntegerLiteral 0x1faf66ced40 <col:16> 'int' 0
|   |-BinaryOperator 0x1faf66cee58 <line:652:5, col:32> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x1faf66ced90 <col:5> 'const unsigned char *' lvalue Var 0x1faf66ce728 'wildcard_start' 'const unsigned char *'
|   | `-BinaryOperator 0x1faf66cee38 <col:22, col:32> 'const unsigned char *' '+'
|   |   |-ImplicitCastExpr 0x1faf66cee08 <col:22> 'const unsigned char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf66cedc8 <col:22> 'const unsigned char *' lvalue ParmVar 0x1faf66ce2f0 'subject' 'const unsigned char *'
|   |   `-ImplicitCastExpr 0x1faf66cee20 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66cede8 <col:32> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce160 'prefix_len' 'size_t':'unsigned long long'
|   |-BinaryOperator 0x1faf66cefb8 <line:653:5, col:55> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x1faf66cee78 <col:5> 'const unsigned char *' lvalue Var 0x1faf66ce7c0 'wildcard_end' 'const unsigned char *'
|   | `-BinaryOperator 0x1faf66cef98 <col:20, col:55> 'const unsigned char *' '+'
|   |   |-ImplicitCastExpr 0x1faf66cef80 <col:20> 'const unsigned char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf66ceeb0 <col:20> 'const unsigned char *' lvalue ParmVar 0x1faf66ce2f0 'subject' 'const unsigned char *'
|   |   `-ParenExpr 0x1faf66cef60 <col:30, col:55> 'unsigned long long'
|   |     `-BinaryOperator 0x1faf66cef40 <col:31, col:45> 'unsigned long long' '-'
|   |       |-ImplicitCastExpr 0x1faf66cef10 <col:31> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1faf66ceed0 <col:31> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce368 'subject_len' 'size_t':'unsigned long long'
|   |       `-ImplicitCastExpr 0x1faf66cef28 <col:45> 'size_t':'unsigned long long' <LValueToRValue>
|   |         `-DeclRefExpr 0x1faf66ceef0 <col:45> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce270 'suffix_len' 'size_t':'unsigned long long'
|   |-IfStmt 0x1faf66cf1c0 <line:654:5, line:655:16>
|   | |-UnaryOperator 0x1faf66cf170 <line:654:9, col:74> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1faf66cf0b0 <col:10, col:74> 'int'
|   | |   |-ImplicitCastExpr 0x1faf66cf098 <col:10> 'int (*)(const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1faf66cefd8 <col:10> 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' Function 0x1faf66ca650 'equal_nocase' 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)'
|   | |   |-ImplicitCastExpr 0x1faf66cf0f8 <col:23> 'const unsigned char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66ceff8 <col:23> 'const unsigned char *' lvalue Var 0x1faf66ce7c0 'wildcard_end' 'const unsigned char *'
|   | |   |-ImplicitCastExpr 0x1faf66cf110 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66cf018 <col:37> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce270 'suffix_len' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1faf66cf128 <col:49> 'const unsigned char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66cf038 <col:49> 'const unsigned char *' lvalue ParmVar 0x1faf66ce1e0 'suffix' 'const unsigned char *'
|   | |   |-ImplicitCastExpr 0x1faf66cf140 <col:57> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66cf058 <col:57> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce270 'suffix_len' 'size_t':'unsigned long long'
|   | |   `-ImplicitCastExpr 0x1faf66cf158 <col:69> 'unsigned int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1faf66cf078 <col:69> 'unsigned int' lvalue ParmVar 0x1faf66ce3e8 'flags' 'unsigned int'
|   | `-ReturnStmt 0x1faf66cf1b0 <line:655:9, col:16>
|   |   `-IntegerLiteral 0x1faf66cf188 <col:16> 'int' 0
|   |-IfStmt 0x1faf66c7540 <line:660:5, line:666:5>
|   | |-BinaryOperator 0x1faf66c72c8 <line:660:9, col:39> 'int' '&&'
|   | | |-BinaryOperator 0x1faf66c71f0 <col:9, col:23> 'int' '=='
|   | | | |-ImplicitCastExpr 0x1faf66cf220 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1faf66cf1d8 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce160 'prefix_len' 'size_t':'unsigned long long'
|   | | | `-ImplicitCastExpr 0x1faf66cf238 <col:23> 'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1faf66cf1f8 <col:23> 'int' 0
|   | | `-BinaryOperator 0x1faf66c72a8 <col:28, col:39> 'int' '=='
|   | |   |-ImplicitCastExpr 0x1faf66c7290 <col:28, col:29> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x1faf66c7278 <col:28, col:29> 'unsigned char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x1faf66c7248 <col:28, col:29> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x1faf66c7230 <col:29> 'const unsigned char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x1faf66c7210 <col:29> 'const unsigned char *' lvalue ParmVar 0x1faf66ce1e0 'suffix' 'const unsigned char *'
|   | |   `-CharacterLiteral 0x1faf66c7260 <col:39> 'int' 46
|   | `-CompoundStmt 0x1faf66c7518 <col:44, line:666:5>
|   |   |-IfStmt 0x1faf66c73b0 <line:661:9, line:662:20>
|   |   | |-BinaryOperator 0x1faf66c7358 <line:661:13, col:31> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1faf66c7328 <col:13> 'const unsigned char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1faf66c72e8 <col:13> 'const unsigned char *' lvalue Var 0x1faf66ce728 'wildcard_start' 'const unsigned char *'
|   |   | | `-ImplicitCastExpr 0x1faf66c7340 <col:31> 'const unsigned char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1faf66c7308 <col:31> 'const unsigned char *' lvalue Var 0x1faf66ce7c0 'wildcard_end' 'const unsigned char *'
|   |   | `-ReturnStmt 0x1faf66c73a0 <line:662:13, col:20>
|   |   |   `-IntegerLiteral 0x1faf66c7378 <col:20> 'int' 0
|   |   |-BinaryOperator 0x1faf66c7428 <line:663:9, col:22> 'int' '='
|   |   | |-DeclRefExpr 0x1faf66c73c8 <col:9> 'int' lvalue Var 0x1faf66ce9b0 'allow_idna' 'int'
|   |   | `-IntegerLiteral 0x1faf66c7400 <col:22> 'int' 1
|   |   `-IfStmt 0x1faf66c7500 <line:664:9, line:665:27>
|   |     |-OpaqueValueExpr 0x1faf66c74e8 <<invalid sloc>> '_Bool'
|   |     `-BinaryOperator 0x1faf66c74c8 <col:13, col:27> 'int' '='
|   |       |-DeclRefExpr 0x1faf66c7468 <col:13> 'int' lvalue Var 0x1faf66ce8f0 'allow_multi' 'int'
|   |       `-IntegerLiteral 0x1faf66c74a0 <col:27> 'int' 1
|   |-IfStmt 0x1faf66c7b18 <line:668:5, line:670:16>
|   | |-BinaryOperator 0x1faf66c7ac0 <line:668:9, line:669:72> 'int' '&&'
|   | | |-BinaryOperator 0x1faf66c7640 <line:668:9, line:669:24> 'int' '&&'
|   | | | |-UnaryOperator 0x1faf66c7590 <line:668:9, col:10> 'int' prefix '!' cannot overflow
|   | | | | `-ImplicitCastExpr 0x1faf66c7578 <col:10> 'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1faf66c7558 <col:10> 'int' lvalue Var 0x1faf66ce9b0 'allow_idna' 'int'
|   | | | `-BinaryOperator 0x1faf66c7620 <line:669:9, col:24> 'int' '>='
|   | | |   |-ImplicitCastExpr 0x1faf66c75f0 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1faf66c75a8 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66ce368 'subject_len' 'size_t':'unsigned long long'
|   | | |   `-ImplicitCastExpr 0x1faf66c7608 <col:24> 'unsigned long long' <IntegralCast>
|   | | |     `-IntegerLiteral 0x1faf66c75c8 <col:24> 'int' 4
|   | | `-BinaryOperator 0x1faf66c7aa0 <col:29, col:72> 'int' '=='
|   | |   |-CallExpr 0x1faf66c79e0 <col:29, col:67> 'int'
|   | |   | |-ImplicitCastExpr 0x1faf66c79c8 <col:29> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x1faf66c7890 <col:29> 'int (const char *, const char *, unsigned long long)' Function 0x1faf66c76a0 'strncasecmp' 'int (const char *, const char *, unsigned long long)'
|   | |   | |-ImplicitCastExpr 0x1faf66c7a18 <col:41, col:49> 'const char *' <NoOp>
|   | |   | | `-CStyleCastExpr 0x1faf66c7918 <col:41, col:49> 'char *' <BitCast>
|   | |   | |   `-ImplicitCastExpr 0x1faf66c7900 <col:49> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|   | |   | |     `-DeclRefExpr 0x1faf66c78c8 <col:49> 'const unsigned char *' lvalue ParmVar 0x1faf66ce2f0 'subject' 'const unsigned char *'
|   | |   | |-ImplicitCastExpr 0x1faf66c7a48 <col:58> 'const char *' <NoOp>
|   | |   | | `-ImplicitCastExpr 0x1faf66c7a30 <col:58> 'char *' <ArrayToPointerDecay>
|   | |   | |   `-StringLiteral 0x1faf66c7940 <col:58> 'char [5]' lvalue "xn--"
|   | |   | `-ImplicitCastExpr 0x1faf66c7a60 <col:66> 'unsigned long long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x1faf66c7960 <col:66> 'int' 4
|   | |   `-IntegerLiteral 0x1faf66c7a78 <col:72> 'int' 0
|   | `-ReturnStmt 0x1faf66c7b08 <line:670:9, col:16>
|   |   `-IntegerLiteral 0x1faf66c7ae0 <col:16> 'int' 0
|   |-IfStmt 0x1faf66c7d18 <line:672:5, line:673:16>
|   | |-BinaryOperator 0x1faf66c7cc0 <line:672:9, col:66> 'int' '&&'
|   | | |-BinaryOperator 0x1faf66c7be8 <col:9, col:42> 'int' '=='
|   | | | |-ImplicitCastExpr 0x1faf66c7bd0 <col:9> 'const unsigned char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1faf66c7b30 <col:9> 'const unsigned char *' lvalue Var 0x1faf66ce7c0 'wildcard_end' 'const unsigned char *'
|   | | | `-BinaryOperator 0x1faf66c7bb0 <col:25, col:42> 'const unsigned char *' '+'
|   | | |   |-ImplicitCastExpr 0x1faf66c7b98 <col:25> 'const unsigned char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1faf66c7b50 <col:25> 'const unsigned char *' lvalue Var 0x1faf66ce728 'wildcard_start' 'const unsigned char *'
|   | | |   `-IntegerLiteral 0x1faf66c7b70 <col:42> 'int' 1
|   | | `-BinaryOperator 0x1faf66c7ca0 <col:47, col:66> 'int' '=='
|   | |   |-ImplicitCastExpr 0x1faf66c7c88 <col:47, col:48> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x1faf66c7c70 <col:47, col:48> 'unsigned char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x1faf66c7c40 <col:47, col:48> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x1faf66c7c28 <col:48> 'const unsigned char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x1faf66c7c08 <col:48> 'const unsigned char *' lvalue Var 0x1faf66ce728 'wildcard_start' 'const unsigned char *'
|   | |   `-CharacterLiteral 0x1faf66c7c58 <col:66> 'int' 42
|   | `-ReturnStmt 0x1faf66c7d08 <line:673:9, col:16>
|   |   `-IntegerLiteral 0x1faf66c7ce0 <col:16> 'int' 1
|   |-ForStmt 0x1faf66c96b0 <line:679:5, line:684:20>
|   | |-BinaryOperator 0x1faf66c7da0 <line:679:10, col:14> 'const unsigned char *' '='
|   | | |-DeclRefExpr 0x1faf66c7d30 <col:10> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   | | `-ImplicitCastExpr 0x1faf66c7d88 <col:14> 'const unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1faf66c7d68 <col:14> 'const unsigned char *' lvalue Var 0x1faf66ce728 'wildcard_start' 'const unsigned char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1faf66c7e30 <col:30, col:35> 'int' '!='
|   | | |-ImplicitCastExpr 0x1faf66c7e00 <col:30> 'const unsigned char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66c7dc0 <col:30> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   | | `-ImplicitCastExpr 0x1faf66c7e18 <col:35> 'const unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1faf66c7de0 <col:35> 'const unsigned char *' lvalue Var 0x1faf66ce7c0 'wildcard_end' 'const unsigned char *'
|   | |-UnaryOperator 0x1faf66c7e70 <col:49, col:51> 'const unsigned char *' prefix '++'
|   | | `-DeclRefExpr 0x1faf66c7e50 <col:51> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   | `-IfStmt 0x1faf66c9698 <line:680:9, line:684:20>
|   |   |-UnaryOperator 0x1faf66c9648 <line:680:13, line:683:54> 'int' prefix '!' cannot overflow
|   |   | `-ParenExpr 0x1faf66c9628 <line:680:14, line:683:54> 'int'
|   |   |   `-BinaryOperator 0x1faf66c9608 <line:680:15, line:683:53> 'int' '||'
|   |   |     |-BinaryOperator 0x1faf66c94b8 <line:680:15, line:683:21> 'int' '||'
|   |   |     | |-BinaryOperator 0x1faf66c93e0 <line:680:15, line:682:38> 'int' '||'
|   |   |     | | |-BinaryOperator 0x1faf66c9210 <line:680:15, line:681:38> 'int' '||'
|   |   |     | | | |-ParenExpr 0x1faf66c8018 <line:680:15, col:38> 'int'
|   |   |     | | | | `-BinaryOperator 0x1faf66c7ff8 <col:16, col:35> 'int' '&&'
|   |   |     | | | |   |-BinaryOperator 0x1faf66c7f20 <col:16, col:24> 'int' '<='
|   |   |     | | | |   | |-CharacterLiteral 0x1faf66c7e88 <col:16> 'int' 48
|   |   |     | | | |   | `-ImplicitCastExpr 0x1faf66c7f08 <col:23, col:24> 'int' <IntegralCast>
|   |   |     | | | |   |   `-ImplicitCastExpr 0x1faf66c7ef0 <col:23, col:24> 'unsigned char' <LValueToRValue>
|   |   |     | | | |   |     `-UnaryOperator 0x1faf66c7ed8 <col:23, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |     | | | |   |       `-ImplicitCastExpr 0x1faf66c7ec0 <col:24> 'const unsigned char *' <LValueToRValue>
|   |   |     | | | |   |         `-DeclRefExpr 0x1faf66c7ea0 <col:24> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   |   |     | | | |   `-BinaryOperator 0x1faf66c7fd8 <col:29, col:35> 'int' '<='
|   |   |     | | | |     |-ImplicitCastExpr 0x1faf66c7fc0 <col:29, col:30> 'int' <IntegralCast>
|   |   |     | | | |     | `-ImplicitCastExpr 0x1faf66c7fa8 <col:29, col:30> 'unsigned char' <LValueToRValue>
|   |   |     | | | |     |   `-UnaryOperator 0x1faf66c7f78 <col:29, col:30> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |     | | | |     |     `-ImplicitCastExpr 0x1faf66c7f60 <col:30> 'const unsigned char *' <LValueToRValue>
|   |   |     | | | |     |       `-DeclRefExpr 0x1faf66c7f40 <col:30> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   |   |     | | | |     `-CharacterLiteral 0x1faf66c7f90 <col:35> 'int' 57
|   |   |     | | | `-ParenExpr 0x1faf66c81c8 <line:681:15, col:38> 'int'
|   |   |     | | |   `-BinaryOperator 0x1faf66c81a8 <col:16, col:35> 'int' '&&'
|   |   |     | | |     |-BinaryOperator 0x1faf66c80d0 <col:16, col:24> 'int' '<='
|   |   |     | | |     | |-CharacterLiteral 0x1faf66c8038 <col:16> 'int' 65
|   |   |     | | |     | `-ImplicitCastExpr 0x1faf66c80b8 <col:23, col:24> 'int' <IntegralCast>
|   |   |     | | |     |   `-ImplicitCastExpr 0x1faf66c80a0 <col:23, col:24> 'unsigned char' <LValueToRValue>
|   |   |     | | |     |     `-UnaryOperator 0x1faf66c8088 <col:23, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |     | | |     |       `-ImplicitCastExpr 0x1faf66c8070 <col:24> 'const unsigned char *' <LValueToRValue>
|   |   |     | | |     |         `-DeclRefExpr 0x1faf66c8050 <col:24> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   |   |     | | |     `-BinaryOperator 0x1faf66c8188 <col:29, col:35> 'int' '<='
|   |   |     | | |       |-ImplicitCastExpr 0x1faf66c8170 <col:29, col:30> 'int' <IntegralCast>
|   |   |     | | |       | `-ImplicitCastExpr 0x1faf66c8158 <col:29, col:30> 'unsigned char' <LValueToRValue>
|   |   |     | | |       |   `-UnaryOperator 0x1faf66c8128 <col:29, col:30> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |     | | |       |     `-ImplicitCastExpr 0x1faf66c8110 <col:30> 'const unsigned char *' <LValueToRValue>
|   |   |     | | |       |       `-DeclRefExpr 0x1faf66c80f0 <col:30> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   |   |     | | |       `-CharacterLiteral 0x1faf66c8140 <col:35> 'int' 90
|   |   |     | | `-ParenExpr 0x1faf66c93c0 <line:682:15, col:38> 'int'
|   |   |     | |   `-BinaryOperator 0x1faf66c93a0 <col:16, col:35> 'int' '&&'
|   |   |     | |     |-BinaryOperator 0x1faf66c92c8 <col:16, col:24> 'int' '<='
|   |   |     | |     | |-CharacterLiteral 0x1faf66c9230 <col:16> 'int' 97
|   |   |     | |     | `-ImplicitCastExpr 0x1faf66c92b0 <col:23, col:24> 'int' <IntegralCast>
|   |   |     | |     |   `-ImplicitCastExpr 0x1faf66c9298 <col:23, col:24> 'unsigned char' <LValueToRValue>
|   |   |     | |     |     `-UnaryOperator 0x1faf66c9280 <col:23, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |     | |     |       `-ImplicitCastExpr 0x1faf66c9268 <col:24> 'const unsigned char *' <LValueToRValue>
|   |   |     | |     |         `-DeclRefExpr 0x1faf66c9248 <col:24> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   |   |     | |     `-BinaryOperator 0x1faf66c9380 <col:29, col:35> 'int' '<='
|   |   |     | |       |-ImplicitCastExpr 0x1faf66c9368 <col:29, col:30> 'int' <IntegralCast>
|   |   |     | |       | `-ImplicitCastExpr 0x1faf66c9350 <col:29, col:30> 'unsigned char' <LValueToRValue>
|   |   |     | |       |   `-UnaryOperator 0x1faf66c9320 <col:29, col:30> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |     | |       |     `-ImplicitCastExpr 0x1faf66c9308 <col:30> 'const unsigned char *' <LValueToRValue>
|   |   |     | |       |       `-DeclRefExpr 0x1faf66c92e8 <col:30> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   |   |     | |       `-CharacterLiteral 0x1faf66c9338 <col:35> 'int' 122
|   |   |     | `-BinaryOperator 0x1faf66c9498 <line:683:15, col:21> 'int' '=='
|   |   |     |   |-ImplicitCastExpr 0x1faf66c9480 <col:15, col:16> 'int' <IntegralCast>
|   |   |     |   | `-ImplicitCastExpr 0x1faf66c9468 <col:15, col:16> 'unsigned char' <LValueToRValue>
|   |   |     |   |   `-UnaryOperator 0x1faf66c9438 <col:15, col:16> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |     |   |     `-ImplicitCastExpr 0x1faf66c9420 <col:16> 'const unsigned char *' <LValueToRValue>
|   |   |     |   |       `-DeclRefExpr 0x1faf66c9400 <col:16> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   |   |     |   `-CharacterLiteral 0x1faf66c9450 <col:21> 'int' 45
|   |   |     `-ParenExpr 0x1faf66c95e8 <col:28, col:53> 'int'
|   |   |       `-BinaryOperator 0x1faf66c95c8 <col:29, col:50> 'int' '&&'
|   |   |         |-ImplicitCastExpr 0x1faf66c95b0 <col:29> 'int' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x1faf66c94d8 <col:29> 'int' lvalue Var 0x1faf66ce8f0 'allow_multi' 'int'
|   |   |         `-BinaryOperator 0x1faf66c9590 <col:44, col:50> 'int' '=='
|   |   |           |-ImplicitCastExpr 0x1faf66c9578 <col:44, col:45> 'int' <IntegralCast>
|   |   |           | `-ImplicitCastExpr 0x1faf66c9560 <col:44, col:45> 'unsigned char' <LValueToRValue>
|   |   |           |   `-UnaryOperator 0x1faf66c9530 <col:44, col:45> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |           |     `-ImplicitCastExpr 0x1faf66c9518 <col:45> 'const unsigned char *' <LValueToRValue>
|   |   |           |       `-DeclRefExpr 0x1faf66c94f8 <col:45> 'const unsigned char *' lvalue Var 0x1faf66ce858 'p' 'const unsigned char *'
|   |   |           `-CharacterLiteral 0x1faf66c9548 <col:50> 'int' 46
|   |   `-ReturnStmt 0x1faf66c9688 <line:684:13, col:20>
|   |     `-IntegerLiteral 0x1faf66c9660 <col:20> 'int' 0
|   `-ReturnStmt 0x1faf66c9710 <line:685:5, col:12>
|     `-IntegerLiteral 0x1faf66c96e8 <col:12> 'int' 1
|-FunctionDecl 0x1faf66c76a0 <line:669:29> col:29 implicit used strncasecmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1faf66c7740 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1faf66c77a8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1faf66c7810 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1faf66c9a30 <line:693:1, line:752:1> line:693:29 used valid_star 'const unsigned char *(const unsigned char *, size_t, unsigned int)' static
| |-ParmVarDecl 0x1faf66c97c0 <col:40, col:61> col:61 used p 'const unsigned char *'
| |-ParmVarDecl 0x1faf66c9838 <col:64, col:71> col:71 used len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66c98b8 <line:694:40, col:53> col:53 used flags 'unsigned int'
| `-CompoundStmt 0x1faf66d0ca0 <line:695:1, line:752:1>
|   |-DeclStmt 0x1faf66c9bc0 <line:696:5, col:34>
|   | `-VarDecl 0x1faf66c9b18 <col:5, col:33> col:26 used star 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1faf66c9ba8 <col:33> 'const unsigned char *' <NullToPointer>
|   |     `-IntegerLiteral 0x1faf66c9b80 <col:33> 'int' 0
|   |-DeclStmt 0x1faf66c9c50 <line:697:5, col:13>
|   | `-VarDecl 0x1faf66c9be8 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x1faf66c9d78 <line:698:5, col:28>
|   | `-VarDecl 0x1faf66c9c80 <col:5, line:688:32> line:698:9 used state 'int' cinit
|   |   `-ParenExpr 0x1faf66c9d58 <line:688:25, col:32> 'int'
|   |     `-BinaryOperator 0x1faf66c9d38 <col:26, col:31> 'int' '<<'
|   |       |-IntegerLiteral 0x1faf66c9ce8 <col:26> 'int' 1
|   |       `-IntegerLiteral 0x1faf66c9d10 <col:31> 'int' 0
|   |-DeclStmt 0x1faf66c9e38 <line:699:5, col:17>
|   | `-VarDecl 0x1faf66c9da8 <col:5, col:16> col:9 used dots 'int' cinit
|   |   `-IntegerLiteral 0x1faf66c9e10 <col:16> 'int' 0
|   |-ForStmt 0x1faf66d0898 <line:700:5, line:743:5>
|   | |-BinaryOperator 0x1faf66c9ec8 <line:700:10, col:14> 'size_t':'unsigned long long' '='
|   | | |-DeclRefExpr 0x1faf66c9e50 <col:10> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66c9eb0 <col:14> 'size_t':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1faf66c9e88 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1faf66c9f58 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1faf66c9f28 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66c9ee8 <col:17> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66c9f40 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1faf66c9f08 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66c9838 'len' 'size_t':'unsigned long long'
|   | |-UnaryOperator 0x1faf66c9f98 <col:26, col:28> 'size_t':'unsigned long long' prefix '++'
|   | | `-DeclRefExpr 0x1faf66c9f78 <col:28> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x1faf66d0880 <col:31, line:743:5>
|   |   `-IfStmt 0x1faf66d0858 <line:705:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> has_else
|   |     |-BinaryOperator 0x1faf66ca088 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:705:13, col:21> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1faf66ca070 <col:13, col:16> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x1faf66ca058 <col:13, col:16> 'unsigned char' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x1faf66ca020 <col:13, col:16> 'const unsigned char' lvalue
|   |     | |     |-ImplicitCastExpr 0x1faf66c9ff0 <col:13> 'const unsigned char *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x1faf66c9fb0 <col:13> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |     | |     `-ImplicitCastExpr 0x1faf66ca008 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x1faf66c9fd0 <col:15> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |     | `-CharacterLiteral 0x1faf66ca040 <col:21> 'int' 42
|   |     |-CompoundStmt 0x1faf66cff18 <col:26, line:724:9>
|   |     | |-DeclStmt 0x1faf66cf2b0 <line:706:13, col:48>
|   |     | | `-VarDecl 0x1faf66ca0c0 <col:13, col:47> col:17 used atstart 'int' cinit
|   |     | |   `-ParenExpr 0x1faf66cf290 <col:27, col:47> 'int'
|   |     | |     `-BinaryOperator 0x1faf66cf270 <col:28, line:688:32> 'int' '&'
|   |     | |       |-ImplicitCastExpr 0x1faf66ca1f0 <line:706:28> 'int' <LValueToRValue>
|   |     | |       | `-DeclRefExpr 0x1faf66ca128 <col:28> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   |     | |       `-ParenExpr 0x1faf66ca1d0 <line:688:25, col:32> 'int'
|   |     | |         `-BinaryOperator 0x1faf66ca1b0 <col:26, col:31> 'int' '<<'
|   |     | |           |-IntegerLiteral 0x1faf66ca160 <col:26> 'int' 1
|   |     | |           `-IntegerLiteral 0x1faf66ca188 <col:31> 'int' 0
|   |     | |-DeclStmt 0x1faf66cf5d0 <line:707:13, col:58>
|   |     | | `-VarDecl 0x1faf66cf2e0 <col:13, col:57> col:17 used atend 'int' cinit
|   |     | |   `-ParenExpr 0x1faf66cf5b0 <col:25, col:57> 'int'
|   |     | |     `-BinaryOperator 0x1faf66cf590 <col:26, col:54> 'int' '||'
|   |     | |       |-BinaryOperator 0x1faf66cf418 <col:26, col:37> 'int' '=='
|   |     | |       | |-ImplicitCastExpr 0x1faf66cf400 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       | | `-DeclRefExpr 0x1faf66cf348 <col:26> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |     | |       | `-BinaryOperator 0x1faf66cf3e0 <col:31, col:37> 'unsigned long long' '-'
|   |     | |       |   |-ImplicitCastExpr 0x1faf66cf3b0 <col:31> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       |   | `-DeclRefExpr 0x1faf66cf368 <col:31> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66c9838 'len' 'size_t':'unsigned long long'
|   |     | |       |   `-ImplicitCastExpr 0x1faf66cf3c8 <col:37> 'unsigned long long' <IntegralCast>
|   |     | |       |     `-IntegerLiteral 0x1faf66cf388 <col:37> 'int' 1
|   |     | |       `-BinaryOperator 0x1faf66cf570 <col:42, col:54> 'int' '=='
|   |     | |         |-ImplicitCastExpr 0x1faf66cf558 <col:42, col:49> 'int' <IntegralCast>
|   |     | |         | `-ImplicitCastExpr 0x1faf66cf540 <col:42, col:49> 'unsigned char' <LValueToRValue>
|   |     | |         |   `-ArraySubscriptExpr 0x1faf66cf508 <col:42, col:49> 'const unsigned char' lvalue
|   |     | |         |     |-ImplicitCastExpr 0x1faf66cf4f0 <col:42> 'const unsigned char *' <LValueToRValue>
|   |     | |         |     | `-DeclRefExpr 0x1faf66cf438 <col:42> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |     | |         |     `-BinaryOperator 0x1faf66cf4d0 <col:44, col:48> 'unsigned long long' '+'
|   |     | |         |       |-ImplicitCastExpr 0x1faf66cf4a0 <col:44> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |         |       | `-DeclRefExpr 0x1faf66cf458 <col:44> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |     | |         |       `-ImplicitCastExpr 0x1faf66cf4b8 <col:48> 'unsigned long long' <IntegralCast>
|   |     | |         |         `-IntegerLiteral 0x1faf66cf478 <col:48> 'int' 1
|   |     | |         `-CharacterLiteral 0x1faf66cf528 <col:54> 'int' 46
|   |     | |-IfStmt 0x1faf66cf988 <line:713:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |     | | |-BinaryOperator 0x1faf66cf8b8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:713:17, col:62> 'int' '||'
|   |     | | | |-BinaryOperator 0x1faf66cf848 <col:17, col:57> 'int' '||'
|   |     | | | | |-BinaryOperator 0x1faf66cf6d8 <col:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |     | | | | | |-ImplicitCastExpr 0x1faf66cf6a8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:713:17> 'const unsigned char *' <LValueToRValue>
|   |     | | | | | | `-DeclRefExpr 0x1faf66cf5e8 <col:17> 'const unsigned char *' lvalue Var 0x1faf66c9b18 'star' 'const unsigned char *'
|   |     | | | | | `-ImplicitCastExpr 0x1faf66cf6c0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const unsigned char *' <BitCast>
|   |     | | | | |   `-ParenExpr 0x1faf66cf688 <col:17, col:27> 'void *'
|   |     | | | | |     `-CStyleCastExpr 0x1faf66cf660 <col:18, col:26> 'void *' <NullToPointer>
|   |     | | | | |       `-IntegerLiteral 0x1faf66cf620 <col:26> 'int' 0
|   |     | | | | `-BinaryOperator 0x1faf66cf828 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:713:33, col:57> 'int' '!='
|   |     | | | |   |-ParenExpr 0x1faf66cf7e0 <col:33, col:52> 'int'
|   |     | | | |   | `-BinaryOperator 0x1faf66cf7c0 <col:34, line:691:32> 'int' '&'
|   |     | | | |   |   |-ImplicitCastExpr 0x1faf66cf7a8 <line:713:34> 'int' <LValueToRValue>
|   |     | | | |   |   | `-DeclRefExpr 0x1faf66cf6f8 <col:34> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   |     | | | |   |   `-ParenExpr 0x1faf66cf788 <line:691:25, col:32> 'int'
|   |     | | | |   |     `-BinaryOperator 0x1faf66cf768 <col:26, col:31> 'int' '<<'
|   |     | | | |   |       |-IntegerLiteral 0x1faf66cf718 <col:26> 'int' 1
|   |     | | | |   |       `-IntegerLiteral 0x1faf66cf740 <col:31> 'int' 3
|   |     | | | |   `-IntegerLiteral 0x1faf66cf800 <line:713:57> 'int' 0
|   |     | | | `-ImplicitCastExpr 0x1faf66cf8a0 <col:62> 'int' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x1faf66cf868 <col:62> 'int' lvalue Var 0x1faf66c9da8 'dots' 'int'
|   |     | | `-ReturnStmt 0x1faf66cf978 <line:714:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |     | |   `-ImplicitCastExpr 0x1faf66cf960 <col:17, col:27> 'const unsigned char *' <NullToPointer>
|   |     | |     `-ParenExpr 0x1faf66cf940 <col:17, col:27> 'void *'
|   |     | |       `-CStyleCastExpr 0x1faf66cf918 <col:18, col:26> 'void *' <NullToPointer>
|   |     | |         `-IntegerLiteral 0x1faf66cf8d8 <col:26> 'int' 0
|   |     | |-IfStmt 0x1faf66cfb98 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:716:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |     | | |-OpaqueValueExpr 0x1faf66cfb80 <<invalid sloc>> '_Bool'
|   |     | | `-ReturnStmt 0x1faf66cfb70 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:718:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |     | |   `-ImplicitCastExpr 0x1faf66cfb58 <col:17, col:27> 'const unsigned char *' <NullToPointer>
|   |     | |     `-ParenExpr 0x1faf66cfb38 <col:17, col:27> 'void *'
|   |     | |       `-CStyleCastExpr 0x1faf66cfb10 <col:18, col:26> 'void *' <NullToPointer>
|   |     | |         `-IntegerLiteral 0x1faf66cfad0 <col:26> 'int' 0
|   |     | |-IfStmt 0x1faf66cfd20 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:720:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |     | | |-BinaryOperator 0x1faf66cfc50 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:720:17, col:30> 'int' '&&'
|   |     | | | |-UnaryOperator 0x1faf66cfbe8 <col:17, col:18> 'int' prefix '!' cannot overflow
|   |     | | | | `-ImplicitCastExpr 0x1faf66cfbd0 <col:18> 'int' <LValueToRValue>
|   |     | | | |   `-DeclRefExpr 0x1faf66cfbb0 <col:18> 'int' lvalue Var 0x1faf66ca0c0 'atstart' 'int'
|   |     | | | `-UnaryOperator 0x1faf66cfc38 <col:29, col:30> 'int' prefix '!' cannot overflow
|   |     | | |   `-ImplicitCastExpr 0x1faf66cfc20 <col:30> 'int' <LValueToRValue>
|   |     | | |     `-DeclRefExpr 0x1faf66cfc00 <col:30> 'int' lvalue Var 0x1faf66cf2e0 'atend' 'int'
|   |     | | `-ReturnStmt 0x1faf66cfd10 <line:721:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |     | |   `-ImplicitCastExpr 0x1faf66cfcf8 <col:17, col:27> 'const unsigned char *' <NullToPointer>
|   |     | |     `-ParenExpr 0x1faf66cfcd8 <col:17, col:27> 'void *'
|   |     | |       `-CStyleCastExpr 0x1faf66cfcb0 <col:18, col:26> 'void *' <NullToPointer>
|   |     | |         `-IntegerLiteral 0x1faf66cfc70 <col:26> 'int' 0
|   |     | |-BinaryOperator 0x1faf66cfe00 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:722:13, col:24> 'const unsigned char *' '='
|   |     | | |-DeclRefExpr 0x1faf66cfd38 <col:13> 'const unsigned char *' lvalue Var 0x1faf66c9b18 'star' 'const unsigned char *'
|   |     | | `-UnaryOperator 0x1faf66cfde8 <col:20, col:24> 'const unsigned char *' prefix '&' cannot overflow
|   |     | |   `-ArraySubscriptExpr 0x1faf66cfdc8 <col:21, col:24> 'const unsigned char' lvalue
|   |     | |     |-ImplicitCastExpr 0x1faf66cfd98 <col:21> 'const unsigned char *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x1faf66cfd58 <col:21> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |     | |     `-ImplicitCastExpr 0x1faf66cfdb0 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x1faf66cfd78 <col:23> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |     | `-CompoundAssignOperator 0x1faf66cfee8 <line:723:13, line:688:32> 'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |   |-DeclRefExpr 0x1faf66cfe20 <line:723:13> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   |     |   `-UnaryOperator 0x1faf66cfed0 <col:22, line:688:32> 'int' prefix '~' cannot overflow
|   |     |     `-ParenExpr 0x1faf66cfeb0 <col:25, col:32> 'int'
|   |     |       `-BinaryOperator 0x1faf66cfe90 <col:26, col:31> 'int' '<<'
|   |     |         |-IntegerLiteral 0x1faf66cfe40 <col:26> 'int' 1
|   |     |         `-IntegerLiteral 0x1faf66cfe68 <col:31> 'int' 0
|   |     `-IfStmt 0x1faf66d0830 <line:724:16, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> has_else
|   |       |-BinaryOperator 0x1faf66c85a8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:724:20, line:726:50> 'int' '||'
|   |       | |-BinaryOperator 0x1faf66c8358 <line:724:20, line:725:50> 'int' '||'
|   |       | | |-ParenExpr 0x1faf66d0170 <line:724:20, col:47> 'int'
|   |       | | | `-BinaryOperator 0x1faf66d0150 <col:21, col:44> 'int' '&&'
|   |       | | |   |-BinaryOperator 0x1faf66d0038 <col:21, col:31> 'int' '<='
|   |       | | |   | |-CharacterLiteral 0x1faf66cff60 <col:21> 'int' 97
|   |       | | |   | `-ImplicitCastExpr 0x1faf66d0020 <col:28, col:31> 'int' <IntegralCast>
|   |       | | |   |   `-ImplicitCastExpr 0x1faf66d0008 <col:28, col:31> 'unsigned char' <LValueToRValue>
|   |       | | |   |     `-ArraySubscriptExpr 0x1faf66cffe8 <col:28, col:31> 'const unsigned char' lvalue
|   |       | | |   |       |-ImplicitCastExpr 0x1faf66cffb8 <col:28> 'const unsigned char *' <LValueToRValue>
|   |       | | |   |       | `-DeclRefExpr 0x1faf66cff78 <col:28> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |       | | |   |       `-ImplicitCastExpr 0x1faf66cffd0 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | |   |         `-DeclRefExpr 0x1faf66cff98 <col:30> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |       | | |   `-BinaryOperator 0x1faf66d0130 <col:36, col:44> 'int' '<='
|   |       | | |     |-ImplicitCastExpr 0x1faf66d0118 <col:36, col:39> 'int' <IntegralCast>
|   |       | | |     | `-ImplicitCastExpr 0x1faf66d0100 <col:36, col:39> 'unsigned char' <LValueToRValue>
|   |       | | |     |   `-ArraySubscriptExpr 0x1faf66d00c8 <col:36, col:39> 'const unsigned char' lvalue
|   |       | | |     |     |-ImplicitCastExpr 0x1faf66d0098 <col:36> 'const unsigned char *' <LValueToRValue>
|   |       | | |     |     | `-DeclRefExpr 0x1faf66d0058 <col:36> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |       | | |     |     `-ImplicitCastExpr 0x1faf66d00b0 <col:38> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | |     |       `-DeclRefExpr 0x1faf66d0078 <col:38> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |       | | |     `-CharacterLiteral 0x1faf66d00e8 <col:44> 'int' 122
|   |       | | `-ParenExpr 0x1faf66c8338 <line:725:23, col:50> 'int'
|   |       | |   `-BinaryOperator 0x1faf66c8318 <col:24, col:47> 'int' '&&'
|   |       | |     |-BinaryOperator 0x1faf66c8200 <col:24, col:34> 'int' '<='
|   |       | |     | |-CharacterLiteral 0x1faf66d0190 <col:24> 'int' 65
|   |       | |     | `-ImplicitCastExpr 0x1faf66d0250 <col:31, col:34> 'int' <IntegralCast>
|   |       | |     |   `-ImplicitCastExpr 0x1faf66d0238 <col:31, col:34> 'unsigned char' <LValueToRValue>
|   |       | |     |     `-ArraySubscriptExpr 0x1faf66d0218 <col:31, col:34> 'const unsigned char' lvalue
|   |       | |     |       |-ImplicitCastExpr 0x1faf66d01e8 <col:31> 'const unsigned char *' <LValueToRValue>
|   |       | |     |       | `-DeclRefExpr 0x1faf66d01a8 <col:31> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |       | |     |       `-ImplicitCastExpr 0x1faf66d0200 <col:33> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | |     |         `-DeclRefExpr 0x1faf66d01c8 <col:33> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |       | |     `-BinaryOperator 0x1faf66c82f8 <col:39, col:47> 'int' '<='
|   |       | |       |-ImplicitCastExpr 0x1faf66c82e0 <col:39, col:42> 'int' <IntegralCast>
|   |       | |       | `-ImplicitCastExpr 0x1faf66c82c8 <col:39, col:42> 'unsigned char' <LValueToRValue>
|   |       | |       |   `-ArraySubscriptExpr 0x1faf66c8290 <col:39, col:42> 'const unsigned char' lvalue
|   |       | |       |     |-ImplicitCastExpr 0x1faf66c8260 <col:39> 'const unsigned char *' <LValueToRValue>
|   |       | |       |     | `-DeclRefExpr 0x1faf66c8220 <col:39> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |       | |       |     `-ImplicitCastExpr 0x1faf66c8278 <col:41> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | |       |       `-DeclRefExpr 0x1faf66c8240 <col:41> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |       | |       `-CharacterLiteral 0x1faf66c82b0 <col:47> 'int' 90
|   |       | `-ParenExpr 0x1faf66c8588 <line:726:23, col:50> 'int'
|   |       |   `-BinaryOperator 0x1faf66c8568 <col:24, col:47> 'int' '&&'
|   |       |     |-BinaryOperator 0x1faf66c8450 <col:24, col:34> 'int' '<='
|   |       |     | |-CharacterLiteral 0x1faf66c8378 <col:24> 'int' 48
|   |       |     | `-ImplicitCastExpr 0x1faf66c8438 <col:31, col:34> 'int' <IntegralCast>
|   |       |     |   `-ImplicitCastExpr 0x1faf66c8420 <col:31, col:34> 'unsigned char' <LValueToRValue>
|   |       |     |     `-ArraySubscriptExpr 0x1faf66c8400 <col:31, col:34> 'const unsigned char' lvalue
|   |       |     |       |-ImplicitCastExpr 0x1faf66c83d0 <col:31> 'const unsigned char *' <LValueToRValue>
|   |       |     |       | `-DeclRefExpr 0x1faf66c8390 <col:31> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |       |     |       `-ImplicitCastExpr 0x1faf66c83e8 <col:33> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |         `-DeclRefExpr 0x1faf66c83b0 <col:33> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |       |     `-BinaryOperator 0x1faf66c8548 <col:39, col:47> 'int' '<='
|   |       |       |-ImplicitCastExpr 0x1faf66c8530 <col:39, col:42> 'int' <IntegralCast>
|   |       |       | `-ImplicitCastExpr 0x1faf66c8518 <col:39, col:42> 'unsigned char' <LValueToRValue>
|   |       |       |   `-ArraySubscriptExpr 0x1faf66c84e0 <col:39, col:42> 'const unsigned char' lvalue
|   |       |       |     |-ImplicitCastExpr 0x1faf66c84b0 <col:39> 'const unsigned char *' <LValueToRValue>
|   |       |       |     | `-DeclRefExpr 0x1faf66c8470 <col:39> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |       |       |     `-ImplicitCastExpr 0x1faf66c84c8 <col:41> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |       |       `-DeclRefExpr 0x1faf66c8490 <col:41> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |       |       `-CharacterLiteral 0x1faf66c8500 <col:47> 'int' 57
|   |       |-CompoundStmt 0x1faf66c8d68 <col:53, line:731:9>
|   |       | |-IfStmt 0x1faf66c8b88 <line:727:13, line:691:32>
|   |       | | |-BinaryOperator 0x1faf66c8a88 <line:727:17, line:728:77> 'int' '&&'
|   |       | | | |-BinaryOperator 0x1faf66c8808 <line:727:17, line:728:31> 'int' '&&'
|   |       | | | | |-BinaryOperator 0x1faf66c86f8 <line:727:17, col:42> 'int' '!='
|   |       | | | | | |-ParenExpr 0x1faf66c86b0 <col:17, col:37> 'int'
|   |       | | | | | | `-BinaryOperator 0x1faf66c8690 <col:18, line:688:32> 'int' '&'
|   |       | | | | | |   |-ImplicitCastExpr 0x1faf66c8678 <line:727:18> 'int' <LValueToRValue>
|   |       | | | | | |   | `-DeclRefExpr 0x1faf66c85c8 <col:18> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   |       | | | | | |   `-ParenExpr 0x1faf66c8658 <line:688:25, col:32> 'int'
|   |       | | | | | |     `-BinaryOperator 0x1faf66c8638 <col:26, col:31> 'int' '<<'
|   |       | | | | | |       |-IntegerLiteral 0x1faf66c85e8 <col:26> 'int' 1
|   |       | | | | | |       `-IntegerLiteral 0x1faf66c8610 <col:31> 'int' 0
|   |       | | | | | `-IntegerLiteral 0x1faf66c86d0 <line:727:42> 'int' 0
|   |       | | | | `-BinaryOperator 0x1faf66c87e8 <line:728:20, col:31> 'int' '>='
|   |       | | | |   |-BinaryOperator 0x1faf66c8788 <col:20, col:26> 'unsigned long long' '-'
|   |       | | | |   | |-ImplicitCastExpr 0x1faf66c8758 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | | |   | | `-DeclRefExpr 0x1faf66c8718 <col:20> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66c9838 'len' 'size_t':'unsigned long long'
|   |       | | | |   | `-ImplicitCastExpr 0x1faf66c8770 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | | |   |   `-DeclRefExpr 0x1faf66c8738 <col:26> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |       | | | |   `-ImplicitCastExpr 0x1faf66c87d0 <col:31> 'unsigned long long' <IntegralCast>
|   |       | | | |     `-IntegerLiteral 0x1faf66c87a8 <col:31> 'int' 4
|   |       | | | `-BinaryOperator 0x1faf66c8a68 <col:36, col:77> 'int' '=='
|   |       | | |   |-CallExpr 0x1faf66c89a8 <col:36, col:72> 'int'
|   |       | | |   | |-ImplicitCastExpr 0x1faf66c8990 <col:36> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |       | | |   | | `-DeclRefExpr 0x1faf66c8828 <col:36> 'int (const char *, const char *, unsigned long long)' Function 0x1faf66c76a0 'strncasecmp' 'int (const char *, const char *, unsigned long long)'
|   |       | | |   | |-ImplicitCastExpr 0x1faf66c89e0 <col:48, col:60> 'const char *' <NoOp>
|   |       | | |   | | `-CStyleCastExpr 0x1faf66c8908 <col:48, col:60> 'char *' <BitCast>
|   |       | | |   | |   `-UnaryOperator 0x1faf66c88d8 <col:56, col:60> 'const unsigned char *' prefix '&' cannot overflow
|   |       | | |   | |     `-ArraySubscriptExpr 0x1faf66c88b8 <col:57, col:60> 'const unsigned char' lvalue
|   |       | | |   | |       |-ImplicitCastExpr 0x1faf66c8888 <col:57> 'const unsigned char *' <LValueToRValue>
|   |       | | |   | |       | `-DeclRefExpr 0x1faf66c8848 <col:57> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |       | | |   | |       `-ImplicitCastExpr 0x1faf66c88a0 <col:59> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | |   | |         `-DeclRefExpr 0x1faf66c8868 <col:59> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |       | | |   | |-ImplicitCastExpr 0x1faf66c8a10 <col:63> 'const char *' <NoOp>
|   |       | | |   | | `-ImplicitCastExpr 0x1faf66c89f8 <col:63> 'char *' <ArrayToPointerDecay>
|   |       | | |   | |   `-StringLiteral 0x1faf66c8930 <col:63> 'char [5]' lvalue "xn--"
|   |       | | |   | `-ImplicitCastExpr 0x1faf66c8a28 <col:71> 'unsigned long long' <IntegralCast>
|   |       | | |   |   `-IntegerLiteral 0x1faf66c8950 <col:71> 'int' 4
|   |       | | |   `-IntegerLiteral 0x1faf66c8a40 <col:77> 'int' 0
|   |       | | `-CompoundAssignOperator 0x1faf66c8b58 <line:729:17, line:691:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       | |   |-DeclRefExpr 0x1faf66c8aa8 <line:729:17> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   |       | |   `-ParenExpr 0x1faf66c8b38 <line:691:25, col:32> 'int'
|   |       | |     `-BinaryOperator 0x1faf66c8b18 <col:26, col:31> 'int' '<<'
|   |       | |       |-IntegerLiteral 0x1faf66c8ac8 <col:26> 'int' 1
|   |       | |       `-IntegerLiteral 0x1faf66c8af0 <col:31> 'int' 3
|   |       | `-CompoundAssignOperator 0x1faf66c8d38 <line:730:13, col:50> 'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |   |-DeclRefExpr 0x1faf66c8ba0 <col:13> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   |       |   `-UnaryOperator 0x1faf66c8d20 <col:22, col:50> 'int' prefix '~' cannot overflow
|   |       |     `-ParenExpr 0x1faf66c8d00 <col:23, col:50> 'int'
|   |       |       `-BinaryOperator 0x1faf66c8ce0 <line:690:25, line:688:32> 'int' '|'
|   |       |         |-ParenExpr 0x1faf66c8c30 <line:690:25, col:32> 'int'
|   |       |         | `-BinaryOperator 0x1faf66c8c10 <col:26, col:31> 'int' '<<'
|   |       |         |   |-IntegerLiteral 0x1faf66c8bc0 <col:26> 'int' 1
|   |       |         |   `-IntegerLiteral 0x1faf66c8be8 <col:31> 'int' 2
|   |       |         `-ParenExpr 0x1faf66c8cc0 <line:688:25, col:32> 'int'
|   |       |           `-BinaryOperator 0x1faf66c8ca0 <col:26, col:31> 'int' '<<'
|   |       |             |-IntegerLiteral 0x1faf66c8c50 <col:26> 'int' 1
|   |       |             `-IntegerLiteral 0x1faf66c8c78 <col:31> 'int' 0
|   |       `-IfStmt 0x1faf66d0808 <line:731:16, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> has_else
|   |         |-BinaryOperator 0x1faf66c8e60 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:731:20, col:28> 'int' '=='
|   |         | |-ImplicitCastExpr 0x1faf66c8e48 <col:20, col:23> 'int' <IntegralCast>
|   |         | | `-ImplicitCastExpr 0x1faf66c8e30 <col:20, col:23> 'unsigned char' <LValueToRValue>
|   |         | |   `-ArraySubscriptExpr 0x1faf66c8df8 <col:20, col:23> 'const unsigned char' lvalue
|   |         | |     |-ImplicitCastExpr 0x1faf66c8dc8 <col:20> 'const unsigned char *' <LValueToRValue>
|   |         | |     | `-DeclRefExpr 0x1faf66c8d88 <col:20> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |         | |     `-ImplicitCastExpr 0x1faf66c8de0 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x1faf66c8da8 <col:22> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |         | `-CharacterLiteral 0x1faf66c8e18 <col:28> 'int' 46
|   |         |-CompoundStmt 0x1faf66d02f8 <col:33, line:736:9>
|   |         | |-IfStmt 0x1faf66c9150 <line:732:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |         | | |-BinaryOperator 0x1faf66c9080 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:732:17, col:59> 'int' '!='
|   |         | | | |-ParenExpr 0x1faf66c9038 <col:17, col:54> 'int'
|   |         | | | | `-BinaryOperator 0x1faf66c9018 <col:18, col:53> 'int' '&'
|   |         | | | |   |-ImplicitCastExpr 0x1faf66c9000 <col:18> 'int' <LValueToRValue>
|   |         | | | |   | `-DeclRefExpr 0x1faf66c8e80 <col:18> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   |         | | | |   `-ParenExpr 0x1faf66c8fe0 <col:26, col:53> 'int'
|   |         | | | |     `-BinaryOperator 0x1faf66c8fc0 <line:690:25, line:688:32> 'int' '|'
|   |         | | | |       |-ParenExpr 0x1faf66c8f10 <line:690:25, col:32> 'int'
|   |         | | | |       | `-BinaryOperator 0x1faf66c8ef0 <col:26, col:31> 'int' '<<'
|   |         | | | |       |   |-IntegerLiteral 0x1faf66c8ea0 <col:26> 'int' 1
|   |         | | | |       |   `-IntegerLiteral 0x1faf66c8ec8 <col:31> 'int' 2
|   |         | | | |       `-ParenExpr 0x1faf66c8fa0 <line:688:25, col:32> 'int'
|   |         | | | |         `-BinaryOperator 0x1faf66c8f80 <col:26, col:31> 'int' '<<'
|   |         | | | |           |-IntegerLiteral 0x1faf66c8f30 <col:26> 'int' 1
|   |         | | | |           `-IntegerLiteral 0x1faf66c8f58 <col:31> 'int' 0
|   |         | | | `-IntegerLiteral 0x1faf66c9058 <line:732:59> 'int' 0
|   |         | | `-ReturnStmt 0x1faf66c9140 <line:733:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |         | |   `-ImplicitCastExpr 0x1faf66c9128 <col:17, col:27> 'const unsigned char *' <NullToPointer>
|   |         | |     `-ParenExpr 0x1faf66c9108 <col:17, col:27> 'void *'
|   |         | |       `-CStyleCastExpr 0x1faf66c90e0 <col:18, col:26> 'void *' <NullToPointer>
|   |         | |         `-IntegerLiteral 0x1faf66c90a0 <col:26> 'int' 0
|   |         | |-BinaryOperator 0x1faf66d02a0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:734:13, line:688:32> 'int' '='
|   |         | | |-DeclRefExpr 0x1faf66c9168 <line:734:13> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   |         | | `-ParenExpr 0x1faf66d0280 <line:688:25, col:32> 'int'
|   |         | |   `-BinaryOperator 0x1faf66c91d8 <col:26, col:31> 'int' '<<'
|   |         | |     |-IntegerLiteral 0x1faf66c9188 <col:26> 'int' 1
|   |         | |     `-IntegerLiteral 0x1faf66c91b0 <col:31> 'int' 0
|   |         | `-UnaryOperator 0x1faf66d02e0 <line:735:13, col:15> 'int' prefix '++'
|   |         |   `-DeclRefExpr 0x1faf66d02c0 <col:15> 'int' lvalue Var 0x1faf66c9da8 'dots' 'int'
|   |         `-IfStmt 0x1faf66d07e0 <line:736:16, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> has_else
|   |           |-BinaryOperator 0x1faf66d03f8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:736:20, col:28> 'int' '=='
|   |           | |-ImplicitCastExpr 0x1faf66d03e0 <col:20, col:23> 'int' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x1faf66d03c8 <col:20, col:23> 'unsigned char' <LValueToRValue>
|   |           | |   `-ArraySubscriptExpr 0x1faf66d0390 <col:20, col:23> 'const unsigned char' lvalue
|   |           | |     |-ImplicitCastExpr 0x1faf66d0360 <col:20> 'const unsigned char *' <LValueToRValue>
|   |           | |     | `-DeclRefExpr 0x1faf66d0320 <col:20> 'const unsigned char *' lvalue ParmVar 0x1faf66c97c0 'p' 'const unsigned char *'
|   |           | |     `-ImplicitCastExpr 0x1faf66d0378 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |           | |       `-DeclRefExpr 0x1faf66d0340 <col:22> 'size_t':'unsigned long long' lvalue Var 0x1faf66c9be8 'i' 'size_t':'unsigned long long'
|   |           | `-CharacterLiteral 0x1faf66d03b0 <col:28> 'int' 45
|   |           |-CompoundStmt 0x1faf66d0710 <col:33, line:741:9>
|   |           | |-IfStmt 0x1faf66d0618 <line:738:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |           | | |-BinaryOperator 0x1faf66d0548 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:738:17, col:42> 'int' '!='
|   |           | | | |-ParenExpr 0x1faf66d0500 <col:17, col:37> 'int'
|   |           | | | | `-BinaryOperator 0x1faf66d04e0 <col:18, line:688:32> 'int' '&'
|   |           | | | |   |-ImplicitCastExpr 0x1faf66d04c8 <line:738:18> 'int' <LValueToRValue>
|   |           | | | |   | `-DeclRefExpr 0x1faf66d0418 <col:18> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   |           | | | |   `-ParenExpr 0x1faf66d04a8 <line:688:25, col:32> 'int'
|   |           | | | |     `-BinaryOperator 0x1faf66d0488 <col:26, col:31> 'int' '<<'
|   |           | | | |       |-IntegerLiteral 0x1faf66d0438 <col:26> 'int' 1
|   |           | | | |       `-IntegerLiteral 0x1faf66d0460 <col:31> 'int' 0
|   |           | | | `-IntegerLiteral 0x1faf66d0520 <line:738:42> 'int' 0
|   |           | | `-ReturnStmt 0x1faf66d0608 <line:739:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |           | |   `-ImplicitCastExpr 0x1faf66d05f0 <col:17, col:27> 'const unsigned char *' <NullToPointer>
|   |           | |     `-ParenExpr 0x1faf66d05d0 <col:17, col:27> 'void *'
|   |           | |       `-CStyleCastExpr 0x1faf66d05a8 <col:18, col:26> 'void *' <NullToPointer>
|   |           | |         `-IntegerLiteral 0x1faf66d0568 <col:26> 'int' 0
|   |           | `-CompoundAssignOperator 0x1faf66d06e0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:740:13, line:690:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           |   |-DeclRefExpr 0x1faf66d0630 <line:740:13> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   |           |   `-ParenExpr 0x1faf66d06c0 <line:690:25, col:32> 'int'
|   |           |     `-BinaryOperator 0x1faf66d06a0 <col:26, col:31> 'int' '<<'
|   |           |       |-IntegerLiteral 0x1faf66d0650 <col:26> 'int' 1
|   |           |       `-IntegerLiteral 0x1faf66d0678 <col:31> 'int' 2
|   |           `-ReturnStmt 0x1faf66d07d0 <line:742:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |             `-ImplicitCastExpr 0x1faf66d07b8 <col:17, col:27> 'const unsigned char *' <NullToPointer>
|   |               `-ParenExpr 0x1faf66d0798 <col:17, col:27> 'void *'
|   |                 `-CStyleCastExpr 0x1faf66d0770 <col:18, col:26> 'void *' <NullToPointer>
|   |                   `-IntegerLiteral 0x1faf66d0730 <col:26> 'int' 0
|   |-IfStmt 0x1faf66d0c40 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:749:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   | |-BinaryOperator 0x1faf66d0b70 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:749:9, col:63> 'int' '||'
|   | | |-BinaryOperator 0x1faf66d0ad0 <col:9, col:51> 'int' '!='
|   | | | |-ParenExpr 0x1faf66d0a88 <col:9, col:46> 'int'
|   | | | | `-BinaryOperator 0x1faf66d0a68 <col:10, col:45> 'int' '&'
|   | | | |   |-ImplicitCastExpr 0x1faf66d0a50 <col:10> 'int' <LValueToRValue>
|   | | | |   | `-DeclRefExpr 0x1faf66d08d0 <col:10> 'int' lvalue Var 0x1faf66c9c80 'state' 'int'
|   | | | |   `-ParenExpr 0x1faf66d0a30 <col:18, col:45> 'int'
|   | | | |     `-BinaryOperator 0x1faf66d0a10 <line:688:25, line:690:32> 'int' '|'
|   | | | |       |-ParenExpr 0x1faf66d0960 <line:688:25, col:32> 'int'
|   | | | |       | `-BinaryOperator 0x1faf66d0940 <col:26, col:31> 'int' '<<'
|   | | | |       |   |-IntegerLiteral 0x1faf66d08f0 <col:26> 'int' 1
|   | | | |       |   `-IntegerLiteral 0x1faf66d0918 <col:31> 'int' 0
|   | | | |       `-ParenExpr 0x1faf66d09f0 <line:690:25, col:32> 'int'
|   | | | |         `-BinaryOperator 0x1faf66d09d0 <col:26, col:31> 'int' '<<'
|   | | | |           |-IntegerLiteral 0x1faf66d0980 <col:26> 'int' 1
|   | | | |           `-IntegerLiteral 0x1faf66d09a8 <col:31> 'int' 2
|   | | | `-IntegerLiteral 0x1faf66d0aa8 <line:749:51> 'int' 0
|   | | `-BinaryOperator 0x1faf66d0b50 <col:56, col:63> 'int' '<'
|   | |   |-ImplicitCastExpr 0x1faf66d0b38 <col:56> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66d0af0 <col:56> 'int' lvalue Var 0x1faf66c9da8 'dots' 'int'
|   | |   `-IntegerLiteral 0x1faf66d0b10 <col:63> 'int' 2
|   | `-ReturnStmt 0x1faf66d0c30 <line:750:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |   `-ImplicitCastExpr 0x1faf66d0c18 <col:17, col:27> 'const unsigned char *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66d0bf8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66d0bd0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66d0b90 <col:26> 'int' 0
|   `-ReturnStmt 0x1faf66d0c90 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:751:5, col:12>
|     `-ImplicitCastExpr 0x1faf66d0c78 <col:12> 'const unsigned char *' <LValueToRValue>
|       `-DeclRefExpr 0x1faf66d0c58 <col:12> 'const unsigned char *' lvalue Var 0x1faf66c9b18 'star' 'const unsigned char *'
|-FunctionDecl 0x1faf66d1020 <line:755:1, line:773:1> line:755:12 used equal_wildcard 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' static
| |-ParmVarDecl 0x1faf66d0d00 <col:27, col:48> col:48 used pattern 'const unsigned char *'
| |-ParmVarDecl 0x1faf66d0d78 <col:57, col:64> col:64 used pattern_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66d0df8 <line:756:27, col:48> col:48 used subject 'const unsigned char *'
| |-ParmVarDecl 0x1faf66d0e70 <col:57, col:64> col:64 used subject_len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66d0ef0 <line:757:27, col:40> col:40 used flags 'unsigned int'
| `-CompoundStmt 0x1faf66d5d88 <line:758:1, line:773:1>
|   |-DeclStmt 0x1faf66d1220 <line:759:5, col:37>
|   | `-VarDecl 0x1faf66d1118 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> .//openssl//file_jk/after\crypto\x509v3\v3_utl.c:759:26 used star 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1faf66d1208 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const unsigned char *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66d11e8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66d11c0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66d1180 <col:26> 'int' 0
|   |-IfStmt 0x1faf66d5630 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:765:5, line:766:54>
|   | |-UnaryOperator 0x1faf66d5448 <line:765:9, col:47> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x1faf66d5428 <col:10, col:47> 'int'
|   | |   `-BinaryOperator 0x1faf66d5408 <col:11, col:44> 'int' '&&'
|   | |     |-BinaryOperator 0x1faf66d5300 <col:11, col:25> 'int' '>'
|   | |     | |-ImplicitCastExpr 0x1faf66d52d0 <col:11> 'size_t':'unsigned long long' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1faf66d1238 <col:11> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d0e70 'subject_len' 'size_t':'unsigned long long'
|   | |     | `-ImplicitCastExpr 0x1faf66d52e8 <col:25> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x1faf66d1258 <col:25> 'int' 1
|   | |     `-BinaryOperator 0x1faf66d53e8 <col:30, col:44> 'int' '=='
|   | |       |-ImplicitCastExpr 0x1faf66d53d0 <col:30, col:39> 'int' <IntegralCast>
|   | |       | `-ImplicitCastExpr 0x1faf66d53b8 <col:30, col:39> 'unsigned char' <LValueToRValue>
|   | |       |   `-ArraySubscriptExpr 0x1faf66d5380 <col:30, col:39> 'const unsigned char' lvalue
|   | |       |     |-ImplicitCastExpr 0x1faf66d5368 <col:30> 'const unsigned char *' <LValueToRValue>
|   | |       |     | `-DeclRefExpr 0x1faf66d5320 <col:30> 'const unsigned char *' lvalue ParmVar 0x1faf66d0df8 'subject' 'const unsigned char *'
|   | |       |     `-IntegerLiteral 0x1faf66d5340 <col:38> 'int' 0
|   | |       `-CharacterLiteral 0x1faf66d53a0 <col:44> 'int' 46
|   | `-BinaryOperator 0x1faf66d5610 <line:766:9, col:54> 'const unsigned char *' '='
|   |   |-DeclRefExpr 0x1faf66d5460 <col:9> 'const unsigned char *' lvalue Var 0x1faf66d1118 'star' 'const unsigned char *'
|   |   `-CallExpr 0x1faf66d5590 <col:16, col:54> 'const unsigned char *'
|   |     |-ImplicitCastExpr 0x1faf66d5578 <col:16> 'const unsigned char *(*)(const unsigned char *, size_t, unsigned int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1faf66d5498 <col:16> 'const unsigned char *(const unsigned char *, size_t, unsigned int)' Function 0x1faf66c9a30 'valid_star' 'const unsigned char *(const unsigned char *, size_t, unsigned int)'
|   |     |-ImplicitCastExpr 0x1faf66d55c8 <col:27> 'const unsigned char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1faf66d54b8 <col:27> 'const unsigned char *' lvalue ParmVar 0x1faf66d0d00 'pattern' 'const unsigned char *'
|   |     |-ImplicitCastExpr 0x1faf66d55e0 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1faf66d54d8 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d0d78 'pattern_len' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x1faf66d55f8 <col:49> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1faf66d54f8 <col:49> 'unsigned int' lvalue ParmVar 0x1faf66d0ef0 'flags' 'unsigned int'
|   |-IfStmt 0x1faf66d58e8 <line:767:5, line:769:56>
|   | |-BinaryOperator 0x1faf66d5720 <line:767:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66d56f0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:767:9> 'const unsigned char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66d5648 <col:9> 'const unsigned char *' lvalue Var 0x1faf66d1118 'star' 'const unsigned char *'
|   | | `-ImplicitCastExpr 0x1faf66d5708 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const unsigned char *' <BitCast>
|   | |   `-ParenExpr 0x1faf66d56d0 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1faf66d56a8 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1faf66d5668 <col:26> 'int' 0
|   | `-ReturnStmt 0x1faf66d58d8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:768:9, line:769:56>
|   |   `-CallExpr 0x1faf66d5818 <line:768:16, line:769:56> 'int'
|   |     |-ImplicitCastExpr 0x1faf66d5800 <line:768:16> 'int (*)(const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1faf66d5740 <col:16> 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' Function 0x1faf66ca650 'equal_nocase' 'int (const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)'
|   |     |-ImplicitCastExpr 0x1faf66d5860 <col:29> 'const unsigned char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1faf66d5760 <col:29> 'const unsigned char *' lvalue ParmVar 0x1faf66d0d00 'pattern' 'const unsigned char *'
|   |     |-ImplicitCastExpr 0x1faf66d5878 <col:38> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1faf66d5780 <col:38> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d0d78 'pattern_len' 'size_t':'unsigned long long'
|   |     |-ImplicitCastExpr 0x1faf66d5890 <line:769:29> 'const unsigned char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1faf66d57a0 <col:29> 'const unsigned char *' lvalue ParmVar 0x1faf66d0df8 'subject' 'const unsigned char *'
|   |     |-ImplicitCastExpr 0x1faf66d58a8 <col:38> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1faf66d57c0 <col:38> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d0e70 'subject_len' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x1faf66d58c0 <col:51> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1faf66d57e0 <col:51> 'unsigned int' lvalue ParmVar 0x1faf66d0ef0 'flags' 'unsigned int'
|   `-ReturnStmt 0x1faf66d5d78 <line:770:5, line:772:54>
|     `-CallExpr 0x1faf66d5c90 <line:770:12, line:772:54> 'int'
|       |-ImplicitCastExpr 0x1faf66d5c78 <line:770:12> 'int (*)(const unsigned char *, size_t, const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1faf66d5900 <col:12> 'int (const unsigned char *, size_t, const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)' Function 0x1faf66ce620 'wildcard_match' 'int (const unsigned char *, size_t, const unsigned char *, size_t, const unsigned char *, size_t, unsigned int)'
|       |-ImplicitCastExpr 0x1faf66d5ce8 <col:27> 'const unsigned char *' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf66d5920 <col:27> 'const unsigned char *' lvalue ParmVar 0x1faf66d0d00 'pattern' 'const unsigned char *'
|       |-ImplicitCastExpr 0x1faf66d5d00 <col:36, col:43> 'size_t':'unsigned long long' <IntegralCast>
|       | `-BinaryOperator 0x1faf66d59b0 <col:36, col:43> 'long long' '-'
|       |   |-ImplicitCastExpr 0x1faf66d5980 <col:36> 'const unsigned char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1faf66d5940 <col:36> 'const unsigned char *' lvalue Var 0x1faf66d1118 'star' 'const unsigned char *'
|       |   `-ImplicitCastExpr 0x1faf66d5998 <col:43> 'const unsigned char *' <LValueToRValue>
|       |     `-DeclRefExpr 0x1faf66d5960 <col:43> 'const unsigned char *' lvalue ParmVar 0x1faf66d0d00 'pattern' 'const unsigned char *'
|       |-BinaryOperator 0x1faf66d5a30 <line:771:27, col:34> 'const unsigned char *' '+'
|       | |-ImplicitCastExpr 0x1faf66d5a18 <col:27> 'const unsigned char *' <LValueToRValue>
|       | | `-DeclRefExpr 0x1faf66d59d0 <col:27> 'const unsigned char *' lvalue Var 0x1faf66d1118 'star' 'const unsigned char *'
|       | `-IntegerLiteral 0x1faf66d59f0 <col:34> 'int' 1
|       |-ImplicitCastExpr 0x1faf66d5d18 <col:37, col:70> 'size_t':'unsigned long long' <IntegralCast>
|       | `-BinaryOperator 0x1faf66d5b98 <col:37, col:70> 'long long' '-'
|       |   |-BinaryOperator 0x1faf66d5b38 <col:37, col:63> 'long long' '-'
|       |   | |-ParenExpr 0x1faf66d5ae0 <col:37, col:59> 'const unsigned char *'
|       |   | | `-BinaryOperator 0x1faf66d5ac0 <col:38, col:48> 'const unsigned char *' '+'
|       |   | |   |-ImplicitCastExpr 0x1faf66d5a90 <col:38> 'const unsigned char *' <LValueToRValue>
|       |   | |   | `-DeclRefExpr 0x1faf66d5a50 <col:38> 'const unsigned char *' lvalue ParmVar 0x1faf66d0d00 'pattern' 'const unsigned char *'
|       |   | |   `-ImplicitCastExpr 0x1faf66d5aa8 <col:48> 'size_t':'unsigned long long' <LValueToRValue>
|       |   | |     `-DeclRefExpr 0x1faf66d5a70 <col:48> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d0d78 'pattern_len' 'size_t':'unsigned long long'
|       |   | `-ImplicitCastExpr 0x1faf66d5b20 <col:63> 'const unsigned char *' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x1faf66d5b00 <col:63> 'const unsigned char *' lvalue Var 0x1faf66d1118 'star' 'const unsigned char *'
|       |   `-ImplicitCastExpr 0x1faf66d5b80 <col:70> 'long long' <IntegralCast>
|       |     `-IntegerLiteral 0x1faf66d5b58 <col:70> 'int' 1
|       |-ImplicitCastExpr 0x1faf66d5d30 <line:772:27> 'const unsigned char *' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf66d5bb8 <col:27> 'const unsigned char *' lvalue ParmVar 0x1faf66d0df8 'subject' 'const unsigned char *'
|       |-ImplicitCastExpr 0x1faf66d5d48 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1faf66d5bd8 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d0e70 'subject_len' 'size_t':'unsigned long long'
|       `-ImplicitCastExpr 0x1faf66d5d60 <col:49> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x1faf66d5bf8 <col:49> 'unsigned int' lvalue ParmVar 0x1faf66d0ef0 'flags' 'unsigned int'
|-FunctionDecl 0x1faf66d32b0 <line:781:1, line:815:1> line:781:12 invalid do_check_string 'int (const int *, int, int, unsigned int, const char *, size_t, char **)' static
| |-ParmVarDecl 0x1faf66d5dd0 <col:28, col:47> col:47 invalid a 'const int *'
| |-ParmVarDecl 0x1faf66d5e50 <col:50, col:54> col:54 used cmp_type 'int'
| |-ParmVarDecl 0x1faf66d5ed0 <col:64, col:73> col:73 invalid equal 'int'
| |-ParmVarDecl 0x1faf66d5f50 <line:782:28, col:41> col:41 used flags 'unsigned int'
| |-ParmVarDecl 0x1faf66d5fd0 <col:48, col:60> col:60 used b 'const char *'
| |-ParmVarDecl 0x1faf66d6048 <col:63, col:70> col:70 used blen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66d60c8 <line:783:28, col:35> col:35 used peername 'char **'
| `-CompoundStmt 0x1faf66d4468 <line:784:1, line:815:1>
|   |-DeclStmt 0x1faf66d3448 <line:785:5, col:15>
|   | `-VarDecl 0x1faf66d33b8 <col:5, col:14> col:9 used rv 'int' cinit
|   |   `-IntegerLiteral 0x1faf66d3420 <col:14> 'int' 0
|   |-IfStmt 0x1faf66d34b0 <line:787:5, line:788:16>
|   | |-OpaqueValueExpr 0x1faf66d3498 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1faf66d3488 <col:9, col:16>
|   |   `-IntegerLiteral 0x1faf66d3460 <col:16> 'int' 0
|   |-IfStmt 0x1faf66d43f8 <line:789:5, line:813:5> has_else
|   | |-BinaryOperator 0x1faf66d3540 <line:789:9, col:20> 'int' '>'
|   | | |-ImplicitCastExpr 0x1faf66d3528 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66d34c8 <col:9> 'int' lvalue ParmVar 0x1faf66d5e50 'cmp_type' 'int'
|   | | `-IntegerLiteral 0x1faf66d3500 <col:20> 'int' 0
|   | |-CompoundStmt 0x1faf66d3b48 <col:23, line:798:5>
|   | | |-IfStmt 0x1faf66d35d0 <line:790:9, line:791:20>
|   | | | |-OpaqueValueExpr 0x1faf66d35b8 <<invalid sloc>> '_Bool'
|   | | | `-ReturnStmt 0x1faf66d35a8 <col:13, col:20>
|   | | |   `-IntegerLiteral 0x1faf66d3580 <col:20> 'int' 0
|   | | `-IfStmt 0x1faf66d38d0 <line:792:9, line:795:18> has_else
|   | |   |-OpaqueValueExpr 0x1faf66d38b8 <<invalid sloc>> '_Bool'
|   | |   |-NullStmt 0x1faf66d38b0 <line:793:13>
|   | |   `-IfStmt 0x1faf66d3898 <line:794:14, line:795:18>
|   | |     |-OpaqueValueExpr 0x1faf66d3880 <<invalid sloc>> '_Bool'
|   | |     `-BinaryOperator 0x1faf66d3860 <col:13, col:18> 'int' '='
|   | |       |-DeclRefExpr 0x1faf66d3818 <col:13> 'int' lvalue Var 0x1faf66d33b8 'rv' 'int'
|   | |       `-IntegerLiteral 0x1faf66d3838 <col:18> 'int' 1
|   | `-CompoundStmt 0x1faf66d43c0 <line:798:12, line:813:5>
|   |   |-DeclStmt 0x1faf66d3be8 <line:799:9, col:20>
|   |   | `-VarDecl 0x1faf66d3b80 <col:9, col:13> col:13 used astrlen 'int'
|   |   |-DeclStmt 0x1faf66d3c80 <line:800:9, col:28>
|   |   | `-VarDecl 0x1faf66d3c18 <col:9, col:24> col:24 used astr 'unsigned char *'
|   |   |-IfStmt 0x1faf66d3f48 <line:802:9, line:808:9>
|   |   | |-BinaryOperator 0x1faf66d3ec0 <line:802:13, col:23> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1faf66d3ea8 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1faf66d3e60 <col:13> 'int' lvalue Var 0x1faf66d3b80 'astrlen' 'int'
|   |   | | `-IntegerLiteral 0x1faf66d3e80 <col:23> 'int' 0
|   |   | `-CompoundStmt 0x1faf66d3f30 <col:26, line:808:9>
|   |   |   `-ReturnStmt 0x1faf66d3f20 <line:807:13, col:21>
|   |   |     `-UnaryOperator 0x1faf66d3f08 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x1faf66d3ee0 <col:21> 'int' 1
|   |   |-IfStmt 0x1faf66d4310 <line:810:9, line:811:62>
|   |   | |-BinaryOperator 0x1faf66d4130 <line:810:13, col:23> 'int' '&&'
|   |   | | |-BinaryOperator 0x1faf66d40d8 <col:13, col:18> 'int' '>'
|   |   | | | |-ImplicitCastExpr 0x1faf66d40c0 <col:13> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1faf66d4078 <col:13> 'int' lvalue Var 0x1faf66d33b8 'rv' 'int'
|   |   | | | `-IntegerLiteral 0x1faf66d4098 <col:18> 'int' 0
|   |   | | `-ImplicitCastExpr 0x1faf66d4118 <col:23> 'char **' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1faf66d40f8 <col:23> 'char **' lvalue ParmVar 0x1faf66d60c8 'peername' 'char **'
|   |   | `-BinaryOperator 0x1faf66d42f0 <line:811:13, col:62> 'char *' '='
|   |   |   |-UnaryOperator 0x1faf66d4188 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x1faf66d4170 <col:14> 'char **' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1faf66d4150 <col:14> 'char **' lvalue ParmVar 0x1faf66d60c8 'peername' 'char **'
|   |   |   `-ImplicitCastExpr 0x1faf66d42d8 <col:25, col:62> 'char *' <IntegralToPointer>
|   |   |     `-CallExpr 0x1faf66d4270 <col:25, col:62> 'int'
|   |   |       |-ImplicitCastExpr 0x1faf66d4258 <col:25> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x1faf66d41a0 <col:25> 'int ()' Function 0x1faf66d3a60 'OPENSSL_strndup' 'int ()'
|   |   |       |-CStyleCastExpr 0x1faf66d4210 <col:41, col:49> 'char *' <BitCast>
|   |   |       | `-ImplicitCastExpr 0x1faf66d41f8 <col:49> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |   |       |   `-DeclRefExpr 0x1faf66d41c0 <col:49> 'unsigned char *' lvalue Var 0x1faf66d3c18 'astr' 'unsigned char *'
|   |   |       `-ImplicitCastExpr 0x1faf66d42c0 <col:55> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1faf66d4238 <col:55> 'int' lvalue Var 0x1faf66d3b80 'astrlen' 'int'
|   |   `-CallExpr 0x1faf66d4380 <line:812:9, col:26> 'int'
|   |     |-ImplicitCastExpr 0x1faf66d4368 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1faf66d4328 <col:9> 'int ()' Function 0x1faf66b8450 'OPENSSL_free' 'int ()'
|   |     `-ImplicitCastExpr 0x1faf66d43a8 <col:22> 'unsigned char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1faf66d4348 <col:22> 'unsigned char *' lvalue Var 0x1faf66d3c18 'astr' 'unsigned char *'
|   `-ReturnStmt 0x1faf66d4458 <line:814:5, col:12>
|     `-ImplicitCastExpr 0x1faf66d4440 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1faf66d4420 <col:12> 'int' lvalue Var 0x1faf66d33b8 'rv' 'int'
|-FunctionDecl 0x1faf66d48a0 <line:817:1, line:896:1> line:817:12 invalid do_x509_check 'int (int *, const char *, size_t, unsigned int, int, char **)' static
| |-ParmVarDecl 0x1faf66d44b0 <col:26, col:32> col:32 invalid x 'int *'
| |-ParmVarDecl 0x1faf66d4530 <col:35, col:47> col:47 used chk 'const char *'
| |-ParmVarDecl 0x1faf66d45a8 <col:52, col:59> col:59 used chklen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66d4628 <line:818:26, col:39> col:39 used flags 'unsigned int'
| |-ParmVarDecl 0x1faf66d46a8 <col:46, col:50> col:50 used check_type 'int'
| |-ParmVarDecl 0x1faf66d4728 <col:62, col:69> col:69 used peername 'char **'
| `-CompoundStmt 0x1faf66d27f0 <line:819:1, line:896:1>
|   |-DeclStmt 0x1faf66d4b18 <line:822:5, col:10>
|   | `-VarDecl 0x1faf66d4ab0 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x1faf66d4bb0 <line:823:5, col:25>
|   | `-VarDecl 0x1faf66d4b48 <col:5, col:9> col:9 used cnid 'int'
|   |-DeclStmt 0x1faf66d4c48 <line:824:5, col:17>
|   | `-VarDecl 0x1faf66d4be0 <col:5, col:9> col:9 used alt_type 'int'
|   |-DeclStmt 0x1faf66d4d08 <line:825:5, col:24>
|   | `-VarDecl 0x1faf66d4c78 <col:5, col:23> col:9 used san_present 'int' cinit
|   |   `-IntegerLiteral 0x1faf66d4ce0 <col:23> 'int' 0
|   |-DeclStmt 0x1faf66d4dc8 <line:826:5, col:15>
|   | `-VarDecl 0x1faf66d4d38 <col:5, col:14> col:9 used rv 'int' cinit
|   |   `-IntegerLiteral 0x1faf66d4da0 <col:14> 'int' 0
|   |-IfStmt 0x1faf66d5258 <line:831:5, line:848:5> has_else
|   | |-OpaqueValueExpr 0x1faf66d5240 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1faf66d4ee0 <line:831:34, line:835:5>
|   | `-IfStmt 0x1faf66d5218 <col:12, line:848:5> has_else
|   |   |-OpaqueValueExpr 0x1faf66d5200 <<invalid sloc>> '_Bool'
|   |   |-CompoundStmt 0x1faf66d51a0 <line:835:39, line:845:5>
|   |   `-CompoundStmt 0x1faf66d51f0 <col:12, line:848:5>
|   |-IfStmt 0x1faf66d6448 <line:850:5, line:851:28>
|   | |-BinaryOperator 0x1faf66d6338 <line:850:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66d6308 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66d5280 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d45a8 'chklen' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66d6320 <col:19> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1faf66d62e0 <col:19> 'int' 0
|   | `-BinaryOperator 0x1faf66d6428 <line:851:9, col:28> 'size_t':'unsigned long long' '='
|   |   |-DeclRefExpr 0x1faf66d6358 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d45a8 'chklen' 'size_t':'unsigned long long'
|   |   `-CallExpr 0x1faf66d63e8 <col:18, col:28> 'unsigned long long'
|   |     |-ImplicitCastExpr 0x1faf66d63d0 <col:18> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1faf66d6378 <col:18> 'unsigned long long (const char *)' Function 0x1faf66c0f60 'strlen' 'unsigned long long (const char *)'
|   |     `-ImplicitCastExpr 0x1faf66d6410 <col:25> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1faf66d6398 <col:25> 'const char *' lvalue ParmVar 0x1faf66d4530 'chk' 'const char *'
|   |-IfStmt 0x1faf66d6ef8 <line:854:5, line:878:5>
|   | |-OpaqueValueExpr 0x1faf66d6ee0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1faf66d6ec0 <line:854:15, line:878:5>
|   |   |-IfStmt 0x1faf66d6e00 <line:874:9, line:875:20>
|   |   | |-BinaryOperator 0x1faf66d6d98 <line:874:13, col:19> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x1faf66d6d80 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1faf66d6d38 <col:13> 'int' lvalue Var 0x1faf66d4d38 'rv' 'int'
|   |   | | `-IntegerLiteral 0x1faf66d6d58 <col:19> 'int' 0
|   |   | `-ReturnStmt 0x1faf66d6df0 <line:875:13, col:20>
|   |   |   `-ImplicitCastExpr 0x1faf66d6dd8 <col:20> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1faf66d6db8 <col:20> 'int' lvalue Var 0x1faf66d4d38 'rv' 'int'
|   |   `-IfStmt 0x1faf66d6ea8 <line:876:9, line:877:20>
|   |     |-OpaqueValueExpr 0x1faf66d6e90 <<invalid sloc>> '_Bool'
|   |     `-ReturnStmt 0x1faf66d6e80 <col:13, col:20>
|   |       `-IntegerLiteral 0x1faf66d6e58 <col:20> 'int' 0
|   |-IfStmt 0x1faf66d6fa0 <line:881:5, line:882:16>
|   | |-OpaqueValueExpr 0x1faf66d6f88 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1faf66d6f78 <col:9, col:16>
|   |   `-IntegerLiteral 0x1faf66d6f50 <col:16> 'int' 0
|   |-BinaryOperator 0x1faf66d7018 <line:884:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x1faf66d6fb8 <col:5> 'int' lvalue Var 0x1faf66d4ab0 'i' 'int'
|   | `-UnaryOperator 0x1faf66d7000 <col:9, col:10> 'int' prefix '-'
|   |   `-IntegerLiteral 0x1faf66d6fd8 <col:10> 'int' 1
|   `-ReturnStmt 0x1faf66d27e0 <line:895:5, col:12>
|     `-IntegerLiteral 0x1faf66d27b8 <col:12> 'int' 0
|-FunctionDecl 0x1faf66d2bc0 <line:898:1, line:915:1> line:898:5 invalid X509_check_host 'int (int *, const char *, size_t, unsigned int, char **)'
| |-ParmVarDecl 0x1faf66d2870 <col:21, col:27> col:27 invalid x 'int *'
| |-ParmVarDecl 0x1faf66d28f0 <col:30, col:42> col:42 used chk 'const char *'
| |-ParmVarDecl 0x1faf66d2968 <col:47, col:54> col:54 used chklen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66d29e8 <line:899:21, col:34> col:34 used flags 'unsigned int'
| |-ParmVarDecl 0x1faf66d2a68 <col:41, col:48> col:48 used peername 'char **'
| `-CompoundStmt 0x1faf66d78c8 <line:900:1, line:915:1>
|   |-IfStmt 0x1faf66d2e00 <line:901:5, line:902:17>
|   | |-BinaryOperator 0x1faf66d2d90 <line:901:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66d2d60 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:901:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66d2ca0 <col:9> 'const char *' lvalue ParmVar 0x1faf66d28f0 'chk' 'const char *'
|   | | `-ImplicitCastExpr 0x1faf66d2d78 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const char *' <BitCast>
|   | |   `-ParenExpr 0x1faf66d2d40 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1faf66d2d18 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1faf66d2cd8 <col:26> 'int' 0
|   | `-ReturnStmt 0x1faf66d2df0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:902:9, col:17>
|   |   `-UnaryOperator 0x1faf66d2dd8 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1faf66d2db0 <col:17> 'int' 2
|   |-IfStmt 0x1faf66d7590 <line:908:5, line:911:17> has_else
|   | |-BinaryOperator 0x1faf66d2ea8 <line:908:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66d2e78 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66d2e18 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d2968 'chklen' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66d2e90 <col:19> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1faf66d2e50 <col:19> 'int' 0
|   | |-BinaryOperator 0x1faf66d2f98 <line:909:9, col:28> 'size_t':'unsigned long long' '='
|   | | |-DeclRefExpr 0x1faf66d2ec8 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d2968 'chklen' 'size_t':'unsigned long long'
|   | | `-CallExpr 0x1faf66d2f58 <col:18, col:28> 'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1faf66d2f40 <col:18> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1faf66d2ee8 <col:18> 'unsigned long long (const char *)' Function 0x1faf66c0f60 'strlen' 'unsigned long long (const char *)'
|   | |   `-ImplicitCastExpr 0x1faf66d2f80 <col:25> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1faf66d2f08 <col:25> 'const char *' lvalue ParmVar 0x1faf66d28f0 'chk' 'const char *'
|   | `-IfStmt 0x1faf66d7578 <line:910:10, line:911:17>
|   |   |-CallExpr 0x1faf66d74c0 <line:910:14, col:64> 'void *'
|   |   | |-ImplicitCastExpr 0x1faf66d74a8 <col:14> 'void *(*)(const void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1faf66d31f0 <col:14> 'void *(const void *, int, unsigned long long)' Function 0x1faf66d3000 'memchr' 'void *(const void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1faf66d7510 <col:21> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1faf66d74f8 <col:21> 'const char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1faf66d3228 <col:21> 'const char *' lvalue ParmVar 0x1faf66d28f0 'chk' 'const char *'
|   |   | |-CharacterLiteral 0x1faf66d3248 <col:26> 'int' 0
|   |   | `-ConditionalOperator 0x1faf66d7438 <col:32, col:58> 'unsigned long long'
|   |   |   |-BinaryOperator 0x1faf66d7348 <col:32, col:41> 'int' '>'
|   |   |   | |-ImplicitCastExpr 0x1faf66d7318 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1faf66d3260 <col:32> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d2968 'chklen' 'size_t':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1faf66d7330 <col:41> 'unsigned long long' <IntegralCast>
|   |   |   |   `-IntegerLiteral 0x1faf66d72f0 <col:41> 'int' 1
|   |   |   |-BinaryOperator 0x1faf66d73e0 <col:45, col:54> 'unsigned long long' '-'
|   |   |   | |-ImplicitCastExpr 0x1faf66d73b0 <col:45> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1faf66d7368 <col:45> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d2968 'chklen' 'size_t':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1faf66d73c8 <col:54> 'unsigned long long' <IntegralCast>
|   |   |   |   `-IntegerLiteral 0x1faf66d7388 <col:54> 'int' 1
|   |   |   `-ImplicitCastExpr 0x1faf66d7420 <col:58> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1faf66d7400 <col:58> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d2968 'chklen' 'size_t':'unsigned long long'
|   |   `-ReturnStmt 0x1faf66d7568 <line:911:9, col:17>
|   |     `-UnaryOperator 0x1faf66d7550 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1faf66d7528 <col:17> 'int' 2
|   `-IfStmt 0x1faf66d7800 <line:912:5, line:913:11>
|     |-BinaryOperator 0x1faf66d77a8 <line:912:9, col:42> 'int' '&&'
|     | |-BinaryOperator 0x1faf66d7630 <col:9, col:18> 'int' '>'
|     | | |-ImplicitCastExpr 0x1faf66d7600 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|     | | | `-DeclRefExpr 0x1faf66d75b8 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d2968 'chklen' 'size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x1faf66d7618 <col:18> 'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1faf66d75d8 <col:18> 'int' 1
|     | `-BinaryOperator 0x1faf66d7788 <col:23, col:42> 'int' '=='
|     |   |-ImplicitCastExpr 0x1faf66d7770 <col:23, col:37> 'int' <IntegralCast>
|     |   | `-ImplicitCastExpr 0x1faf66d7758 <col:23, col:37> 'char' <LValueToRValue>
|     |   |   `-ArraySubscriptExpr 0x1faf66d7720 <col:23, col:37> 'const char' lvalue
|     |   |     |-ImplicitCastExpr 0x1faf66d7708 <col:23> 'const char *' <LValueToRValue>
|     |   |     | `-DeclRefExpr 0x1faf66d7650 <col:23> 'const char *' lvalue ParmVar 0x1faf66d28f0 'chk' 'const char *'
|     |   |     `-BinaryOperator 0x1faf66d76e8 <col:27, col:36> 'unsigned long long' '-'
|     |   |       |-ImplicitCastExpr 0x1faf66d76b8 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
|     |   |       | `-DeclRefExpr 0x1faf66d7670 <col:27> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d2968 'chklen' 'size_t':'unsigned long long'
|     |   |       `-ImplicitCastExpr 0x1faf66d76d0 <col:36> 'unsigned long long' <IntegralCast>
|     |   |         `-IntegerLiteral 0x1faf66d7690 <col:36> 'int' 1
|     |   `-CharacterLiteral 0x1faf66d7740 <col:42> 'int' 0
|     `-UnaryOperator 0x1faf66d77e8 <line:913:9, col:11> 'size_t':'unsigned long long' prefix '--'
|       `-DeclRefExpr 0x1faf66d77c8 <col:11> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d2968 'chklen' 'size_t':'unsigned long long'
|-FunctionDecl 0x1faf66d3000 <line:910:14> col:14 implicit used memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1faf66d30a0 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1faf66d3108 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1faf66d3170 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1faf66d7bd0 <line:917:1, line:934:1> line:917:5 invalid X509_check_email 'int (int *, const char *, size_t, unsigned int)'
| |-ParmVarDecl 0x1faf66d7908 <col:22, col:28> col:28 invalid x 'int *'
| |-ParmVarDecl 0x1faf66d7988 <col:31, col:43> col:43 used chk 'const char *'
| |-ParmVarDecl 0x1faf66d7a00 <col:48, col:55> col:55 used chklen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66d7a80 <line:918:22, col:35> col:35 used flags 'unsigned int'
| `-CompoundStmt 0x1faf66d8688 <line:919:1, line:934:1>
|   |-IfStmt 0x1faf66d7e08 <line:920:5, line:921:17>
|   | |-BinaryOperator 0x1faf66d7d98 <line:920:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66d7d68 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:920:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66d7ca8 <col:9> 'const char *' lvalue ParmVar 0x1faf66d7988 'chk' 'const char *'
|   | | `-ImplicitCastExpr 0x1faf66d7d80 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const char *' <BitCast>
|   | |   `-ParenExpr 0x1faf66d7d48 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1faf66d7d20 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1faf66d7ce0 <col:26> 'int' 0
|   | `-ReturnStmt 0x1faf66d7df8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:921:9, col:17>
|   |   `-UnaryOperator 0x1faf66d7de0 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1faf66d7db8 <col:17> 'int' 2
|   |-IfStmt 0x1faf66d8300 <line:927:5, line:930:17> has_else
|   | |-BinaryOperator 0x1faf66d7eb0 <line:927:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66d7e80 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66d7e20 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d7a00 'chklen' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1faf66d7e98 <col:19> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1faf66d7e58 <col:19> 'int' 0
|   | |-BinaryOperator 0x1faf66d7fe0 <line:928:9, col:36> 'size_t':'unsigned long long' '='
|   | | |-DeclRefExpr 0x1faf66d7ed0 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d7a00 'chklen' 'size_t':'unsigned long long'
|   | | `-CallExpr 0x1faf66d7fa0 <col:18, col:36> 'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1faf66d7f88 <col:18> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1faf66d7ef0 <col:18> 'unsigned long long (const char *)' Function 0x1faf66c0f60 'strlen' 'unsigned long long (const char *)'
|   | |   `-ImplicitCastExpr 0x1faf66d7fc8 <col:25, col:33> 'const char *' <NoOp>
|   | |     `-CStyleCastExpr 0x1faf66d7f60 <col:25, col:33> 'char *' <NoOp>
|   | |       `-ImplicitCastExpr 0x1faf66d7f48 <col:33> 'const char *' <LValueToRValue> part_of_explicit_cast
|   | |         `-DeclRefExpr 0x1faf66d7f10 <col:33> 'const char *' lvalue ParmVar 0x1faf66d7988 'chk' 'const char *'
|   | `-IfStmt 0x1faf66d82d8 <line:929:10, line:930:17>
|   |   |-CallExpr 0x1faf66d8220 <line:929:14, col:64> 'void *'
|   |   | |-ImplicitCastExpr 0x1faf66d8208 <col:14> 'void *(*)(const void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1faf66d8000 <col:14> 'void *(const void *, int, unsigned long long)' Function 0x1faf66d3000 'memchr' 'void *(const void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1faf66d8270 <col:21> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1faf66d8258 <col:21> 'const char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1faf66d8020 <col:21> 'const char *' lvalue ParmVar 0x1faf66d7988 'chk' 'const char *'
|   |   | |-CharacterLiteral 0x1faf66d8040 <col:26> 'int' 0
|   |   | `-ConditionalOperator 0x1faf66d81c0 <col:32, col:58> 'unsigned long long'
|   |   |   |-BinaryOperator 0x1faf66d80d0 <col:32, col:41> 'int' '>'
|   |   |   | |-ImplicitCastExpr 0x1faf66d80a0 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1faf66d8058 <col:32> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d7a00 'chklen' 'size_t':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1faf66d80b8 <col:41> 'unsigned long long' <IntegralCast>
|   |   |   |   `-IntegerLiteral 0x1faf66d8078 <col:41> 'int' 1
|   |   |   |-BinaryOperator 0x1faf66d8168 <col:45, col:54> 'unsigned long long' '-'
|   |   |   | |-ImplicitCastExpr 0x1faf66d8138 <col:45> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1faf66d80f0 <col:45> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d7a00 'chklen' 'size_t':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1faf66d8150 <col:54> 'unsigned long long' <IntegralCast>
|   |   |   |   `-IntegerLiteral 0x1faf66d8110 <col:54> 'int' 1
|   |   |   `-ImplicitCastExpr 0x1faf66d81a8 <col:58> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1faf66d8188 <col:58> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d7a00 'chklen' 'size_t':'unsigned long long'
|   |   `-ReturnStmt 0x1faf66d82c8 <line:930:9, col:17>
|   |     `-UnaryOperator 0x1faf66d82b0 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1faf66d8288 <col:17> 'int' 2
|   `-IfStmt 0x1faf66d8570 <line:931:5, line:932:11>
|     |-BinaryOperator 0x1faf66d8518 <line:931:9, col:42> 'int' '&&'
|     | |-BinaryOperator 0x1faf66d83a0 <col:9, col:18> 'int' '>'
|     | | |-ImplicitCastExpr 0x1faf66d8370 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|     | | | `-DeclRefExpr 0x1faf66d8328 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d7a00 'chklen' 'size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x1faf66d8388 <col:18> 'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1faf66d8348 <col:18> 'int' 1
|     | `-BinaryOperator 0x1faf66d84f8 <col:23, col:42> 'int' '=='
|     |   |-ImplicitCastExpr 0x1faf66d84e0 <col:23, col:37> 'int' <IntegralCast>
|     |   | `-ImplicitCastExpr 0x1faf66d84c8 <col:23, col:37> 'char' <LValueToRValue>
|     |   |   `-ArraySubscriptExpr 0x1faf66d8490 <col:23, col:37> 'const char' lvalue
|     |   |     |-ImplicitCastExpr 0x1faf66d8478 <col:23> 'const char *' <LValueToRValue>
|     |   |     | `-DeclRefExpr 0x1faf66d83c0 <col:23> 'const char *' lvalue ParmVar 0x1faf66d7988 'chk' 'const char *'
|     |   |     `-BinaryOperator 0x1faf66d8458 <col:27, col:36> 'unsigned long long' '-'
|     |   |       |-ImplicitCastExpr 0x1faf66d8428 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
|     |   |       | `-DeclRefExpr 0x1faf66d83e0 <col:27> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d7a00 'chklen' 'size_t':'unsigned long long'
|     |   |       `-ImplicitCastExpr 0x1faf66d8440 <col:36> 'unsigned long long' <IntegralCast>
|     |   |         `-IntegerLiteral 0x1faf66d8400 <col:36> 'int' 1
|     |   `-CharacterLiteral 0x1faf66d84b0 <col:42> 'int' 0
|     `-UnaryOperator 0x1faf66d8558 <line:932:9, col:11> 'size_t':'unsigned long long' prefix '--'
|       `-DeclRefExpr 0x1faf66d8538 <col:11> 'size_t':'unsigned long long' lvalue ParmVar 0x1faf66d7a00 'chklen' 'size_t':'unsigned long long'
|-FunctionDecl 0x1faf66d8990 <line:936:1, line:942:1> line:936:5 invalid X509_check_ip 'int (int *, const unsigned char *, size_t, unsigned int)'
| |-ParmVarDecl 0x1faf66d86c8 <col:19, col:25> col:25 invalid x 'int *'
| |-ParmVarDecl 0x1faf66d8748 <col:28, col:49> col:49 used chk 'const unsigned char *'
| |-ParmVarDecl 0x1faf66d87c0 <col:54, col:61> col:61 used chklen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1faf66d8840 <line:937:19, col:32> col:32 used flags 'unsigned int'
| `-CompoundStmt 0x1faf66d8d50 <line:938:1, line:942:1>
|   `-IfStmt 0x1faf66d8bc8 <line:939:5, line:940:17>
|     |-BinaryOperator 0x1faf66d8b58 <line:939:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|     | |-ImplicitCastExpr 0x1faf66d8b28 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:939:9> 'const unsigned char *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1faf66d8a68 <col:9> 'const unsigned char *' lvalue ParmVar 0x1faf66d8748 'chk' 'const unsigned char *'
|     | `-ImplicitCastExpr 0x1faf66d8b40 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const unsigned char *' <BitCast>
|     |   `-ParenExpr 0x1faf66d8b08 <col:17, col:27> 'void *'
|     |     `-CStyleCastExpr 0x1faf66d8ae0 <col:18, col:26> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x1faf66d8aa0 <col:26> 'int' 0
|     `-ReturnStmt 0x1faf66d8bb8 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:940:9, col:17>
|       `-UnaryOperator 0x1faf66d8ba0 <col:16, col:17> 'int' prefix '-'
|         `-IntegerLiteral 0x1faf66d8b78 <col:17> 'int' 2
|-FunctionDecl 0x1faf66d8f70 <line:944:1, line:955:1> line:944:5 invalid X509_check_ip_asc 'int (int *, const char *, unsigned int)'
| |-ParmVarDecl 0x1faf66d8d80 <col:23, col:29> col:29 invalid x 'int *'
| |-ParmVarDecl 0x1faf66d8e00 <col:32, col:44> col:44 used ipasc 'const char *'
| |-ParmVarDecl 0x1faf66d8e80 <col:51, col:64> col:64 used flags 'unsigned int'
| `-CompoundStmt 0x1faf66d17c0 <line:945:1, line:955:1>
|   |-DeclStmt 0x1faf66d9148 <line:946:5, col:28>
|   | `-VarDecl 0x1faf66d90e0 <col:5, col:27> col:19 used ipout 'unsigned char [16]'
|   |-DeclStmt 0x1faf66d91d8 <line:947:5, col:17>
|   | `-VarDecl 0x1faf66d9170 <col:5, col:12> col:12 used iplen 'size_t':'unsigned long long'
|   |-IfStmt 0x1faf66d12e0 <line:949:5, line:950:17>
|   | |-BinaryOperator 0x1faf66d92e0 <line:949:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66d92b0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:949:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66d91f0 <col:9> 'const char *' lvalue ParmVar 0x1faf66d8e00 'ipasc' 'const char *'
|   | | `-ImplicitCastExpr 0x1faf66d92c8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const char *' <BitCast>
|   | |   `-ParenExpr 0x1faf66d9290 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1faf66d9268 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1faf66d9228 <col:26> 'int' 0
|   | `-ReturnStmt 0x1faf66d12d0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:950:9, col:17>
|   |   `-UnaryOperator 0x1faf66d12b8 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1faf66d1290 <col:17> 'int' 2
|   |-BinaryOperator 0x1faf66d1548 <line:951:5, col:43> 'size_t':'unsigned long long' '='
|   | |-DeclRefExpr 0x1faf66d12f8 <col:5> 'size_t':'unsigned long long' lvalue Var 0x1faf66d9170 'iplen' 'size_t':'unsigned long long'
|   | `-CStyleCastExpr 0x1faf66d1520 <col:13, col:43> 'size_t':'unsigned long long' <IntegralCast>
|   |   `-CallExpr 0x1faf66d14b0 <col:21, col:43> 'int'
|   |     |-ImplicitCastExpr 0x1faf66d1498 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1faf66d1420 <col:21> 'int ()' Function 0x1faf66d1358 'a2i_ipadd' 'int ()'
|   |     |-ImplicitCastExpr 0x1faf66d14e0 <col:31> 'unsigned char *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1faf66d1440 <col:31> 'unsigned char [16]' lvalue Var 0x1faf66d90e0 'ipout' 'unsigned char [16]'
|   |     `-ImplicitCastExpr 0x1faf66d14f8 <col:38> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1faf66d1478 <col:38> 'const char *' lvalue ParmVar 0x1faf66d8e00 'ipasc' 'const char *'
|   `-IfStmt 0x1faf66d1650 <line:952:5, line:953:17>
|     |-BinaryOperator 0x1faf66d15e0 <line:952:9, col:18> 'int' '=='
|     | |-ImplicitCastExpr 0x1faf66d15b0 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|     | | `-DeclRefExpr 0x1faf66d1568 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1faf66d9170 'iplen' 'size_t':'unsigned long long'
|     | `-ImplicitCastExpr 0x1faf66d15c8 <col:18> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x1faf66d1588 <col:18> 'int' 0
|     `-ReturnStmt 0x1faf66d1640 <line:953:9, col:17>
|       `-UnaryOperator 0x1faf66d1628 <col:16, col:17> 'int' prefix '-'
|         `-IntegerLiteral 0x1faf66d1600 <col:17> 'int' 2
|-FunctionDecl 0x1faf66d18f0 <line:962:1, line:983:1> line:962:20 invalid a2i_IPADDRESS 'int *(const char *)'
| |-ParmVarDecl 0x1faf66d1810 <col:34, col:46> col:46 used ipasc 'const char *'
| `-CompoundStmt 0x1faf66e0498 <line:963:1, line:983:1>
|   |-DeclStmt 0x1faf66d1a80 <line:964:5, col:28>
|   | `-VarDecl 0x1faf66d1a18 <col:5, col:27> col:19 used ipout 'unsigned char [16]'
|   |-DeclStmt 0x1faf66d1b18 <line:966:5, col:14>
|   | `-VarDecl 0x1faf66d1ab0 <col:5, col:9> col:9 used iplen 'int'
|   |-BinaryOperator 0x1faf66d1c58 <line:970:5, col:35> 'int' '='
|   | |-DeclRefExpr 0x1faf66d1b30 <col:5> 'int' lvalue Var 0x1faf66d1ab0 'iplen' 'int'
|   | `-CallExpr 0x1faf66d1bf8 <col:13, col:35> 'int'
|   |   |-ImplicitCastExpr 0x1faf66d1be0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1faf66d1b68 <col:13> 'int ()' Function 0x1faf66d1358 'a2i_ipadd' 'int ()'
|   |   |-ImplicitCastExpr 0x1faf66d1c28 <col:23> 'unsigned char *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1faf66d1b88 <col:23> 'unsigned char [16]' lvalue Var 0x1faf66d1a18 'ipout' 'unsigned char [16]'
|   |   `-ImplicitCastExpr 0x1faf66d1c40 <col:30> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66d1bc0 <col:30> 'const char *' lvalue ParmVar 0x1faf66d1810 'ipasc' 'const char *'
|   |-IfStmt 0x1faf66d1d78 <line:972:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   | |-UnaryOperator 0x1faf66d1cb0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:972:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1faf66d1c98 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1faf66d1c78 <col:10> 'int' lvalue Var 0x1faf66d1ab0 'iplen' 'int'
|   | `-ReturnStmt 0x1faf66d1d68 <line:973:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |   `-ImplicitCastExpr 0x1faf66d1d50 <col:17, col:27> 'int *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66d1d30 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66d1d08 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66d1cc8 <col:26> 'int' 0
|   |-IfStmt 0x1faf66d2028 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:976:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   | |-OpaqueValueExpr 0x1faf66d2010 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1faf66d2000 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:977:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |   `-ImplicitCastExpr 0x1faf66d1fe8 <col:17, col:27> 'int *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66d1fc8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66d1fa0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66d1f60 <col:26> 'int' 0
|   `-IfStmt 0x1faf66e0480 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:978:5, line:981:5>
|     |-OpaqueValueExpr 0x1faf66e0468 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x1faf66e0450 <line:978:52, line:981:5>
|       `-ReturnStmt 0x1faf66e0440 <line:980:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|         `-ImplicitCastExpr 0x1faf66e0428 <col:17, col:27> 'int *' <NullToPointer>
|           `-ParenExpr 0x1faf66e0408 <col:17, col:27> 'void *'
|             `-CStyleCastExpr 0x1faf66e03e0 <col:18, col:26> 'void *' <NullToPointer>
|               `-IntegerLiteral 0x1faf66e03a0 <col:26> 'int' 0
|-FunctionDecl 0x1faf66e05a0 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:985:1, line:1025:1> line:985:20 invalid a2i_IPADDRESS_NC 'int *(const char *)'
| |-ParmVarDecl 0x1faf66e04f0 <col:37, col:49> col:49 used ipasc 'const char *'
| `-CompoundStmt 0x1faf66d9d38 <line:986:1, line:1025:1>
|   |-DeclStmt 0x1faf66e07f8 <line:988:5, col:28>
|   | `-VarDecl 0x1faf66e0790 <col:5, col:27> col:19 used ipout 'unsigned char [32]'
|   |-DeclStmt 0x1faf66e09c8 <line:989:5, col:27>
|   | |-VarDecl 0x1faf66e0828 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> .//openssl//file_jk/after\crypto\x509v3\v3_utl.c:989:11 used iptmp 'char *' cinit
|   | | `-ImplicitCastExpr 0x1faf66e0918 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   | |   `-ParenExpr 0x1faf66e08f8 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1faf66e08d0 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1faf66e0890 <col:26> 'int' 0
|   | `-VarDecl 0x1faf66e0948 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:989:5, col:26> col:26 used p 'char *'
|   |-DeclStmt 0x1faf66e0af8 <line:990:5, col:23>
|   | |-VarDecl 0x1faf66e09f8 <col:5, col:9> col:9 used iplen1 'int'
|   | `-VarDecl 0x1faf66e0a78 <col:5, col:17> col:17 used iplen2 'int'
|   |-BinaryOperator 0x1faf66e0e18 <line:991:5, col:26> 'char *' '='
|   | |-DeclRefExpr 0x1faf66e0b10 <col:5> 'char *' lvalue Var 0x1faf66e0948 'p' 'char *'
|   | `-CallExpr 0x1faf66e0dd0 <col:9, col:26> 'char *'
|   |   |-ImplicitCastExpr 0x1faf66e0db8 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1faf66e0d08 <col:9> 'char *(const char *, int)' Function 0x1faf66e0b88 'strchr' 'char *(const char *, int)'
|   |   |-ImplicitCastExpr 0x1faf66e0e00 <col:16> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf66e0d40 <col:16> 'const char *' lvalue ParmVar 0x1faf66e04f0 'ipasc' 'const char *'
|   |   `-CharacterLiteral 0x1faf66e0d60 <col:23> 'int' 47
|   |-IfStmt 0x1faf66e0f38 <line:992:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   | |-UnaryOperator 0x1faf66e0e70 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:992:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1faf66e0e58 <col:10> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1faf66e0e38 <col:10> 'char *' lvalue Var 0x1faf66e0948 'p' 'char *'
|   | `-ReturnStmt 0x1faf66e0f28 <line:993:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |   `-ImplicitCastExpr 0x1faf66e0f10 <col:17, col:27> 'int *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66e0ef0 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66e0ec8 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66e0e88 <col:26> 'int' 0
|   |-BinaryOperator 0x1faf66e1038 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:994:5, col:33> 'char *' '='
|   | |-DeclRefExpr 0x1faf66e0f50 <col:5> 'char *' lvalue Var 0x1faf66e0828 'iptmp' 'char *'
|   | `-ImplicitCastExpr 0x1faf66e1020 <col:13, col:33> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x1faf66e0fe0 <col:13, col:33> 'int'
|   |     |-ImplicitCastExpr 0x1faf66e0fc8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1faf66e0f88 <col:13> 'int ()' Function 0x1faf66b9490 'OPENSSL_strdup' 'int ()'
|   |     `-ImplicitCastExpr 0x1faf66e1008 <col:28> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1faf66e0fa8 <col:28> 'const char *' lvalue ParmVar 0x1faf66e04f0 'ipasc' 'const char *'
|   |-IfStmt 0x1faf66e1158 <line:995:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   | |-UnaryOperator 0x1faf66e1090 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:995:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1faf66e1078 <col:10> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1faf66e1058 <col:10> 'char *' lvalue Var 0x1faf66e0828 'iptmp' 'char *'
|   | `-ReturnStmt 0x1faf66e1148 <line:996:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|   |   `-ImplicitCastExpr 0x1faf66e1130 <col:17, col:27> 'int *' <NullToPointer>
|   |     `-ParenExpr 0x1faf66e1110 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1faf66e10e8 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1faf66e10a8 <col:26> 'int' 0
|   |-BinaryOperator 0x1faf66e1298 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:997:5, col:27> 'char *' '='
|   | |-DeclRefExpr 0x1faf66e1170 <col:5> 'char *' lvalue Var 0x1faf66e0948 'p' 'char *'
|   | `-BinaryOperator 0x1faf66e1278 <col:9, col:27> 'char *' '+'
|   |   |-ImplicitCastExpr 0x1faf66e1260 <col:9> 'char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1faf66e1190 <col:9> 'char *' lvalue Var 0x1faf66e0828 'iptmp' 'char *'
|   |   `-ParenExpr 0x1faf66e1240 <col:17, col:27> 'long long'
|   |     `-BinaryOperator 0x1faf66e1220 <col:18, col:22> 'long long' '-'
|   |       |-ImplicitCastExpr 0x1faf66e11f0 <col:18> 'char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1faf66e11b0 <col:18> 'char *' lvalue Var 0x1faf66e0948 'p' 'char *'
|   |       `-ImplicitCastExpr 0x1faf66e1208 <col:22> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1faf66e11d0 <col:22> 'const char *' lvalue ParmVar 0x1faf66e04f0 'ipasc' 'const char *'
|   |-BinaryOperator 0x1faf66e1348 <line:998:5, col:12> 'char' '='
|   | |-UnaryOperator 0x1faf66e12f0 <col:5, col:7> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1faf66e12d8 <col:6, col:7> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x1faf66e12b8 <col:6> 'char *' lvalue Var 0x1faf66e0948 'p' 'char *'
|   | `-ImplicitCastExpr 0x1faf66e1330 <col:12> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x1faf66e1308 <col:12> 'int' 0
|   |-BinaryOperator 0x1faf66d9438 <line:1000:5, col:36> 'int' '='
|   | |-DeclRefExpr 0x1faf66d9310 <col:5> 'int' lvalue Var 0x1faf66e09f8 'iplen1' 'int'
|   | `-CallExpr 0x1faf66d93d8 <col:14, col:36> 'int'
|   |   |-ImplicitCastExpr 0x1faf66d93c0 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1faf66d9348 <col:14> 'int ()' Function 0x1faf66d1358 'a2i_ipadd' 'int ()'
|   |   |-ImplicitCastExpr 0x1faf66d9408 <col:24> 'unsigned char *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1faf66d9368 <col:24> 'unsigned char [32]' lvalue Var 0x1faf66e0790 'ipout' 'unsigned char [32]'
|   |   `-ImplicitCastExpr 0x1faf66d9420 <col:31> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66d93a0 <col:31> 'char *' lvalue Var 0x1faf66e0828 'iptmp' 'char *'
|   |-IfStmt 0x1faf66d9510 <line:1002:5, line:1003:14>
|   | |-UnaryOperator 0x1faf66d9490 <line:1002:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1faf66d9478 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1faf66d9458 <col:10> 'int' lvalue Var 0x1faf66e09f8 'iplen1' 'int'
|   | `-GotoStmt 0x1faf66d94f8 <line:1003:9, col:14> 'err' 0x1faf66d94a8
|   |-BinaryOperator 0x1faf66d9690 <line:1005:5, col:41> 'int' '='
|   | |-DeclRefExpr 0x1faf66d9528 <col:5> 'int' lvalue Var 0x1faf66e0a78 'iplen2' 'int'
|   | `-CallExpr 0x1faf66d9648 <col:14, col:41> 'int'
|   |   |-ImplicitCastExpr 0x1faf66d9630 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1faf66d9560 <col:14> 'int ()' Function 0x1faf66d1358 'a2i_ipadd' 'int ()'
|   |   |-BinaryOperator 0x1faf66d95f0 <col:24, col:32> 'unsigned char *' '+'
|   |   | |-ImplicitCastExpr 0x1faf66d95c0 <col:24> 'unsigned char *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1faf66d9580 <col:24> 'unsigned char [32]' lvalue Var 0x1faf66e0790 'ipout' 'unsigned char [32]'
|   |   | `-ImplicitCastExpr 0x1faf66d95d8 <col:32> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1faf66d95a0 <col:32> 'int' lvalue Var 0x1faf66e09f8 'iplen1' 'int'
|   |   `-ImplicitCastExpr 0x1faf66d9678 <col:40> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66d9610 <col:40> 'char *' lvalue Var 0x1faf66e0948 'p' 'char *'
|   |-CallExpr 0x1faf66d9708 <line:1007:5, col:23> 'int'
|   | |-ImplicitCastExpr 0x1faf66d96f0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1faf66d96b0 <col:5> 'int ()' Function 0x1faf66b8450 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1faf66d9730 <col:18> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1faf66d96d0 <col:18> 'char *' lvalue Var 0x1faf66e0828 'iptmp' 'char *'
|   |-BinaryOperator 0x1faf66d9808 <line:1008:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'char *' '='
|   | |-DeclRefExpr 0x1faf66d9748 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:1008:5> 'char *' lvalue Var 0x1faf66e0828 'iptmp' 'char *'
|   | `-ImplicitCastExpr 0x1faf66d97f0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |   `-ParenExpr 0x1faf66d97d0 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x1faf66d97a8 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x1faf66d9768 <col:26> 'int' 0
|   |-IfStmt 0x1faf66d9960 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:1010:5, line:1011:14>
|   | |-BinaryOperator 0x1faf66d9928 <line:1010:9, col:37> 'int' '||'
|   | | |-UnaryOperator 0x1faf66d9860 <col:9, col:10> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x1faf66d9848 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1faf66d9828 <col:10> 'int' lvalue Var 0x1faf66e0a78 'iplen2' 'int'
|   | | `-ParenExpr 0x1faf66d9908 <col:20, col:37> 'int'
|   | |   `-BinaryOperator 0x1faf66d98e8 <col:21, col:31> 'int' '!='
|   | |     |-ImplicitCastExpr 0x1faf66d98b8 <col:21> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1faf66d9878 <col:21> 'int' lvalue Var 0x1faf66e09f8 'iplen1' 'int'
|   | |     `-ImplicitCastExpr 0x1faf66d98d0 <col:31> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1faf66d9898 <col:31> 'int' lvalue Var 0x1faf66e0a78 'iplen2' 'int'
|   | `-GotoStmt 0x1faf66d9948 <line:1011:9, col:14> 'err' 0x1faf66d94a8
|   |-IfStmt 0x1faf66d9a88 <line:1014:5, line:1015:14>
|   | |-OpaqueValueExpr 0x1faf66d9a70 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1faf66d9a58 <col:9, col:14> 'err' 0x1faf66d94a8
|   |-IfStmt 0x1faf66d9ba0 <line:1016:5, line:1017:14>
|   | |-OpaqueValueExpr 0x1faf66d9b88 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1faf66d9b70 <col:9, col:14> 'err' 0x1faf66d94a8
|   |-LabelStmt 0x1faf66d9c50 <line:1021:2, line:1022:23> 'err'
|   | `-CallExpr 0x1faf66d9c10 <col:5, col:23> 'int'
|   |   |-ImplicitCastExpr 0x1faf66d9bf8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1faf66d9bb8 <col:5> 'int ()' Function 0x1faf66b8450 'OPENSSL_free' 'int ()'
|   |   `-ImplicitCastExpr 0x1faf66d9c38 <col:18> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66d9bd8 <col:18> 'char *' lvalue Var 0x1faf66e0828 'iptmp' 'char *'
|   `-ReturnStmt 0x1faf66d9d28 <line:1024:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27>
|     `-ImplicitCastExpr 0x1faf66d9d10 <col:17, col:27> 'int *' <NullToPointer>
|       `-ParenExpr 0x1faf66d9cf0 <col:17, col:27> 'void *'
|         `-CStyleCastExpr 0x1faf66d9cc8 <col:18, col:26> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x1faf66d9c88 <col:26> 'int' 0
|-FunctionDecl 0x1faf66e0b88 <.//openssl//file_jk/after\crypto\x509v3\v3_utl.c:991:9> col:9 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1faf66e0c28 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1faf66e0c90 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1faf66d9f48 prev 0x1faf66d1358 <line:1027:1, line:1040:1> line:1027:5 used a2i_ipadd 'int (unsigned char *, const char *)'
| |-ParmVarDecl 0x1faf66d9df8 <col:15, col:30> col:30 used ipout 'unsigned char *'
| |-ParmVarDecl 0x1faf66d9e78 <col:37, col:49> col:49 used ipasc 'const char *'
| `-CompoundStmt 0x1faf66dc488 <line:1028:1, line:1040:1>
|   `-IfStmt 0x1faf66dc460 <line:1031:5, line:1039:5> has_else
|     |-CallExpr 0x1faf66da080 <line:1031:9, col:26> 'char *'
|     | |-ImplicitCastExpr 0x1faf66da068 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x1faf66d9ff8 <col:9> 'char *(const char *, int)' Function 0x1faf66e0b88 'strchr' 'char *(const char *, int)'
|     | |-ImplicitCastExpr 0x1faf66da0b0 <col:16> 'const char *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1faf66da018 <col:16> 'const char *' lvalue ParmVar 0x1faf66d9e78 'ipasc' 'const char *'
|     | `-CharacterLiteral 0x1faf66da038 <col:23> 'int' 58
|     |-CompoundStmt 0x1faf66da270 <col:29, line:1035:5>
|     | |-IfStmt 0x1faf66da220 <line:1032:9, line:1033:20>
|     | | |-UnaryOperator 0x1faf66da1d0 <line:1032:13, col:40> 'int' prefix '!' cannot overflow
|     | | | `-CallExpr 0x1faf66da170 <col:14, col:40> 'int'
|     | | |   |-ImplicitCastExpr 0x1faf66da158 <col:14> 'int (*)(unsigned char *, const char *)' <FunctionToPointerDecay>
|     | | |   | `-DeclRefExpr 0x1faf66da0c8 <col:14> 'int (unsigned char *, const char *)' Function 0x1faf66bc5f0 'ipv6_from_asc' 'int (unsigned char *, const char *)'
|     | | |   |-ImplicitCastExpr 0x1faf66da1a0 <col:28> 'unsigned char *' <LValueToRValue>
|     | | |   | `-DeclRefExpr 0x1faf66da0e8 <col:28> 'unsigned char *' lvalue ParmVar 0x1faf66d9df8 'ipout' 'unsigned char *'
|     | | |   `-ImplicitCastExpr 0x1faf66da1b8 <col:35> 'const char *' <LValueToRValue>
|     | | |     `-DeclRefExpr 0x1faf66da108 <col:35> 'const char *' lvalue ParmVar 0x1faf66d9e78 'ipasc' 'const char *'
|     | | `-ReturnStmt 0x1faf66da210 <line:1033:13, col:20>
|     | |   `-IntegerLiteral 0x1faf66da1e8 <col:20> 'int' 0
|     | `-ReturnStmt 0x1faf66da260 <line:1034:9, col:16>
|     |   `-IntegerLiteral 0x1faf66da238 <col:16> 'int' 16
|     `-CompoundStmt 0x1faf66dc440 <line:1035:12, line:1039:5>
|       |-IfStmt 0x1faf66dc3f0 <line:1036:9, line:1037:20>
|       | |-UnaryOperator 0x1faf66dc3a0 <line:1036:13, col:40> 'int' prefix '!' cannot overflow
|       | | `-CallExpr 0x1faf66dc340 <col:14, col:40> 'int'
|       | |   |-ImplicitCastExpr 0x1faf66da2f0 <col:14> 'int (*)(unsigned char *, const char *)' <FunctionToPointerDecay>
|       | |   | `-DeclRefExpr 0x1faf66da290 <col:14> 'int (unsigned char *, const char *)' Function 0x1faf66bc3c0 'ipv4_from_asc' 'int (unsigned char *, const char *)'
|       | |   |-ImplicitCastExpr 0x1faf66dc370 <col:28> 'unsigned char *' <LValueToRValue>
|       | |   | `-DeclRefExpr 0x1faf66da2b0 <col:28> 'unsigned char *' lvalue ParmVar 0x1faf66d9df8 'ipout' 'unsigned char *'
|       | |   `-ImplicitCastExpr 0x1faf66dc388 <col:35> 'const char *' <LValueToRValue>
|       | |     `-DeclRefExpr 0x1faf66da2d0 <col:35> 'const char *' lvalue ParmVar 0x1faf66d9e78 'ipasc' 'const char *'
|       | `-ReturnStmt 0x1faf66dc3e0 <line:1037:13, col:20>
|       |   `-IntegerLiteral 0x1faf66dc3b8 <col:20> 'int' 0
|       `-ReturnStmt 0x1faf66dc430 <line:1038:9, col:16>
|         `-IntegerLiteral 0x1faf66dc408 <col:16> 'int' 4
|-FunctionDecl 0x1faf66dc608 prev 0x1faf66bc3c0 <line:1042:1, line:1055:1> line:1042:12 used ipv4_from_asc 'int (unsigned char *, const char *)' static
| |-ParmVarDecl 0x1faf66dc4b8 <col:26, col:41> col:41 used v4 'unsigned char *'
| |-ParmVarDecl 0x1faf66dc538 <col:45, col:57> col:57 used in 'const char *'
| `-CompoundStmt 0x1faf66dd6e8 <line:1043:1, line:1055:1>
|   |-DeclStmt 0x1faf66dc8e0 <line:1044:5, col:23>
|   | |-VarDecl 0x1faf66dc6d0 <col:5, col:9> col:9 used a0 'int'
|   | |-VarDecl 0x1faf66dc750 <col:5, col:13> col:13 used a1 'int'
|   | |-VarDecl 0x1faf66dc7d0 <col:5, col:17> col:17 used a2 'int'
|   | `-VarDecl 0x1faf66dc850 <col:5, col:21> col:21 used a3 'int'
|   |-IfStmt 0x1faf66dcc98 <line:1045:5, line:1046:16>
|   | |-BinaryOperator 0x1faf66dcc40 <line:1045:9, col:58> 'int' '!='
|   | | |-CallExpr 0x1faf66dcb80 <col:9, col:53> 'int'
|   | | | |-ImplicitCastExpr 0x1faf66dcb68 <col:9> 'int (*)(const char *restrict, const char *restrict, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1faf66dc8f8 <col:9> 'int (const char *restrict, const char *restrict, ...)' Function 0x1faf6663708 'sscanf' 'int (const char *restrict, const char *restrict, ...)'
|   | | | |-ImplicitCastExpr 0x1faf66dcbd0 <col:16> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1faf66dc918 <col:16> 'const char *' lvalue ParmVar 0x1faf66dc538 'in' 'const char *'
|   | | | |-ImplicitCastExpr 0x1faf66dcc00 <col:20> 'const char *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1faf66dcbe8 <col:20> 'char *' <ArrayToPointerDecay>
|   | | | |   `-StringLiteral 0x1faf66dc978 <col:20> 'char [12]' lvalue "%d.%d.%d.%d"
|   | | | |-UnaryOperator 0x1faf66dc9d8 <col:35, col:36> 'int *' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1faf66dc9a0 <col:36> 'int' lvalue Var 0x1faf66dc6d0 'a0' 'int'
|   | | | |-UnaryOperator 0x1faf66dca28 <col:40, col:41> 'int *' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1faf66dc9f0 <col:41> 'int' lvalue Var 0x1faf66dc750 'a1' 'int'
|   | | | |-UnaryOperator 0x1faf66dca78 <col:45, col:46> 'int *' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1faf66dca40 <col:46> 'int' lvalue Var 0x1faf66dc7d0 'a2' 'int'
|   | | | `-UnaryOperator 0x1faf66dcac8 <col:50, col:51> 'int *' prefix '&' cannot overflow
|   | | |   `-DeclRefExpr 0x1faf66dca90 <col:51> 'int' lvalue Var 0x1faf66dc850 'a3' 'int'
|   | | `-IntegerLiteral 0x1faf66dcc18 <col:58> 'int' 4
|   | `-ReturnStmt 0x1faf66dcc88 <line:1046:9, col:16>
|   |   `-IntegerLiteral 0x1faf66dcc60 <col:16> 'int' 0
|   |-IfStmt 0x1faf66dd2c8 <line:1047:5, line:1049:16>
|   | |-BinaryOperator 0x1faf66dd270 <line:1047:9, line:1048:59> 'int' '||'
|   | | |-BinaryOperator 0x1faf66dd1b0 <line:1047:9, line:1048:45> 'int' '||'
|   | | | |-BinaryOperator 0x1faf66dd0f0 <line:1047:9, line:1048:33> 'int' '||'
|   | | | | |-BinaryOperator 0x1faf66dd030 <line:1047:9, line:1048:19> 'int' '||'
|   | | | | | |-BinaryOperator 0x1faf66dcf70 <line:1047:9, col:56> 'int' '||'
|   | | | | | | |-BinaryOperator 0x1faf66dceb0 <col:9, col:42> 'int' '||'
|   | | | | | | | |-BinaryOperator 0x1faf66dcdf0 <col:9, col:30> 'int' '||'
|   | | | | | | | | |-ParenExpr 0x1faf66dcd30 <col:9, col:16> 'int'
|   | | | | | | | | | `-BinaryOperator 0x1faf66dcd10 <col:10, col:15> 'int' '<'
|   | | | | | | | | |   |-ImplicitCastExpr 0x1faf66dccf8 <col:10> 'int' <LValueToRValue>
|   | | | | | | | | |   | `-DeclRefExpr 0x1faf66dccb0 <col:10> 'int' lvalue Var 0x1faf66dc6d0 'a0' 'int'
|   | | | | | | | | |   `-IntegerLiteral 0x1faf66dccd0 <col:15> 'int' 0
|   | | | | | | | | `-ParenExpr 0x1faf66dcdd0 <col:21, col:30> 'int'
|   | | | | | | | |   `-BinaryOperator 0x1faf66dcdb0 <col:22, col:27> 'int' '>'
|   | | | | | | | |     |-ImplicitCastExpr 0x1faf66dcd98 <col:22> 'int' <LValueToRValue>
|   | | | | | | | |     | `-DeclRefExpr 0x1faf66dcd50 <col:22> 'int' lvalue Var 0x1faf66dc6d0 'a0' 'int'
|   | | | | | | | |     `-IntegerLiteral 0x1faf66dcd70 <col:27> 'int' 255
|   | | | | | | | `-ParenExpr 0x1faf66dce90 <col:35, col:42> 'int'
|   | | | | | | |   `-BinaryOperator 0x1faf66dce70 <col:36, col:41> 'int' '<'
|   | | | | | | |     |-ImplicitCastExpr 0x1faf66dce58 <col:36> 'int' <LValueToRValue>
|   | | | | | | |     | `-DeclRefExpr 0x1faf66dce10 <col:36> 'int' lvalue Var 0x1faf66dc750 'a1' 'int'
|   | | | | | | |     `-IntegerLiteral 0x1faf66dce30 <col:41> 'int' 0
|   | | | | | | `-ParenExpr 0x1faf66dcf50 <col:47, col:56> 'int'
|   | | | | | |   `-BinaryOperator 0x1faf66dcf30 <col:48, col:53> 'int' '>'
|   | | | | | |     |-ImplicitCastExpr 0x1faf66dcf18 <col:48> 'int' <LValueToRValue>
|   | | | | | |     | `-DeclRefExpr 0x1faf66dced0 <col:48> 'int' lvalue Var 0x1faf66dc750 'a1' 'int'
|   | | | | | |     `-IntegerLiteral 0x1faf66dcef0 <col:53> 'int' 255
|   | | | | | `-ParenExpr 0x1faf66dd010 <line:1048:12, col:19> 'int'
|   | | | | |   `-BinaryOperator 0x1faf66dcff0 <col:13, col:18> 'int' '<'
|   | | | | |     |-ImplicitCastExpr 0x1faf66dcfd8 <col:13> 'int' <LValueToRValue>
|   | | | | |     | `-DeclRefExpr 0x1faf66dcf90 <col:13> 'int' lvalue Var 0x1faf66dc7d0 'a2' 'int'
|   | | | | |     `-IntegerLiteral 0x1faf66dcfb0 <col:18> 'int' 0
|   | | | | `-ParenExpr 0x1faf66dd0d0 <col:24, col:33> 'int'
|   | | | |   `-BinaryOperator 0x1faf66dd0b0 <col:25, col:30> 'int' '>'
|   | | | |     |-ImplicitCastExpr 0x1faf66dd098 <col:25> 'int' <LValueToRValue>
|   | | | |     | `-DeclRefExpr 0x1faf66dd050 <col:25> 'int' lvalue Var 0x1faf66dc7d0 'a2' 'int'
|   | | | |     `-IntegerLiteral 0x1faf66dd070 <col:30> 'int' 255
|   | | | `-ParenExpr 0x1faf66dd190 <col:38, col:45> 'int'
|   | | |   `-BinaryOperator 0x1faf66dd170 <col:39, col:44> 'int' '<'
|   | | |     |-ImplicitCastExpr 0x1faf66dd158 <col:39> 'int' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1faf66dd110 <col:39> 'int' lvalue Var 0x1faf66dc850 'a3' 'int'
|   | | |     `-IntegerLiteral 0x1faf66dd130 <col:44> 'int' 0
|   | | `-ParenExpr 0x1faf66dd250 <col:50, col:59> 'int'
|   | |   `-BinaryOperator 0x1faf66dd230 <col:51, col:56> 'int' '>'
|   | |     |-ImplicitCastExpr 0x1faf66dd218 <col:51> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1faf66dd1d0 <col:51> 'int' lvalue Var 0x1faf66dc850 'a3' 'int'
|   | |     `-IntegerLiteral 0x1faf66dd1f0 <col:56> 'int' 255
|   | `-ReturnStmt 0x1faf66dd2b8 <line:1049:9, col:16>
|   |   `-IntegerLiteral 0x1faf66dd290 <col:16> 'int' 0
|   |-BinaryOperator 0x1faf66dd3c0 <line:1050:5, col:13> 'unsigned char' '='
|   | |-ArraySubscriptExpr 0x1faf66dd350 <col:5, col:9> 'unsigned char' lvalue
|   | | |-ImplicitCastExpr 0x1faf66dd328 <col:5> 'unsigned char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66dd2e0 <col:5> 'unsigned char *' lvalue ParmVar 0x1faf66dc4b8 'v4' 'unsigned char *'
|   | | `-IntegerLiteral 0x1faf66dd300 <col:8> 'int' 0
|   | `-ImplicitCastExpr 0x1faf66dd3a8 <col:13> 'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1faf66dd390 <col:13> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66dd370 <col:13> 'int' lvalue Var 0x1faf66dc6d0 'a0' 'int'
|   |-BinaryOperator 0x1faf66dd4b0 <line:1051:5, col:13> 'unsigned char' '='
|   | |-ArraySubscriptExpr 0x1faf66dd440 <col:5, col:9> 'unsigned char' lvalue
|   | | |-ImplicitCastExpr 0x1faf66dd428 <col:5> 'unsigned char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66dd3e0 <col:5> 'unsigned char *' lvalue ParmVar 0x1faf66dc4b8 'v4' 'unsigned char *'
|   | | `-IntegerLiteral 0x1faf66dd400 <col:8> 'int' 1
|   | `-ImplicitCastExpr 0x1faf66dd498 <col:13> 'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1faf66dd480 <col:13> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66dd460 <col:13> 'int' lvalue Var 0x1faf66dc750 'a1' 'int'
|   |-BinaryOperator 0x1faf66dd5a0 <line:1052:5, col:13> 'unsigned char' '='
|   | |-ArraySubscriptExpr 0x1faf66dd530 <col:5, col:9> 'unsigned char' lvalue
|   | | |-ImplicitCastExpr 0x1faf66dd518 <col:5> 'unsigned char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66dd4d0 <col:5> 'unsigned char *' lvalue ParmVar 0x1faf66dc4b8 'v4' 'unsigned char *'
|   | | `-IntegerLiteral 0x1faf66dd4f0 <col:8> 'int' 2
|   | `-ImplicitCastExpr 0x1faf66dd588 <col:13> 'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1faf66dd570 <col:13> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66dd550 <col:13> 'int' lvalue Var 0x1faf66dc7d0 'a2' 'int'
|   |-BinaryOperator 0x1faf66dd690 <line:1053:5, col:13> 'unsigned char' '='
|   | |-ArraySubscriptExpr 0x1faf66dd620 <col:5, col:9> 'unsigned char' lvalue
|   | | |-ImplicitCastExpr 0x1faf66dd608 <col:5> 'unsigned char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66dd5c0 <col:5> 'unsigned char *' lvalue ParmVar 0x1faf66dc4b8 'v4' 'unsigned char *'
|   | | `-IntegerLiteral 0x1faf66dd5e0 <col:8> 'int' 3
|   | `-ImplicitCastExpr 0x1faf66dd678 <col:13> 'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1faf66dd660 <col:13> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1faf66dd640 <col:13> 'int' lvalue Var 0x1faf66dc850 'a3' 'int'
|   `-ReturnStmt 0x1faf66dd6d8 <line:1054:5, col:12>
|     `-IntegerLiteral 0x1faf66dd6b0 <col:12> 'int' 1
|-RecordDecl 0x1faf66dd738 <line:1057:9, line:1066:1> line:1057:9 struct definition
| |-FieldDecl 0x1faf66dd858 <line:1059:5, col:25> col:19 referenced tmp 'unsigned char [16]'
| |-FieldDecl 0x1faf66dd8c8 <line:1061:5, col:9> col:9 referenced total 'int'
| |-FieldDecl 0x1faf66dd938 <line:1063:5, col:9> col:9 referenced zero_pos 'int'
| `-FieldDecl 0x1faf66dd9a8 <line:1065:5, col:9> col:9 referenced zero_cnt 'int'
|-TypedefDecl 0x1faf66dda58 <line:1057:1, line:1066:3> col:3 referenced IPV6_STAT 'struct IPV6_STAT':'IPV6_STAT'
| `-ElaboratedType 0x1faf66dda00 'struct IPV6_STAT' sugar
|   `-RecordType 0x1faf66dd7d0 'IPV6_STAT'
|     `-Record 0x1faf66dd738 ''
|-FunctionDecl 0x1faf66ddc30 prev 0x1faf66bc5f0 <line:1068:1, line:1130:1> line:1068:12 used ipv6_from_asc 'int (unsigned char *, const char *)' static
| |-ParmVarDecl 0x1faf66ddae0 <col:26, col:41> col:41 used v6 'unsigned char *'
| |-ParmVarDecl 0x1faf66ddb60 <col:45, col:57> col:57 used in 'const char *'
| `-CompoundStmt 0x1faf66df080 <line:1069:1, line:1130:1>
|   |-DeclStmt 0x1faf66ddd78 <line:1070:5, col:21>
|   | `-VarDecl 0x1faf66ddd10 <col:5, col:15> col:15 used v6stat 'IPV6_STAT':'IPV6_STAT'
|   |-BinaryOperator 0x1faf66dde20 <line:1071:5, col:20> 'int' '='
|   | |-MemberExpr 0x1faf66dddc8 <col:5, col:12> 'int' lvalue .total 0x1faf66dd8c8
|   | | `-DeclRefExpr 0x1faf66ddd90 <col:5> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | `-IntegerLiteral 0x1faf66dddf8 <col:20> 'int' 0
|   |-BinaryOperator 0x1faf66ddf38 <line:1072:5, col:24> 'int' '='
|   | |-MemberExpr 0x1faf66ddec8 <col:5, col:12> 'int' lvalue .zero_pos 0x1faf66dd938
|   | | `-DeclRefExpr 0x1faf66ddea8 <col:5> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | `-UnaryOperator 0x1faf66ddf20 <col:23, col:24> 'int' prefix '-'
|   |   `-IntegerLiteral 0x1faf66ddef8 <col:24> 'int' 1
|   |-BinaryOperator 0x1faf66ddfd0 <line:1073:5, col:23> 'int' '='
|   | |-MemberExpr 0x1faf66ddf78 <col:5, col:12> 'int' lvalue .zero_cnt 0x1faf66dd9a8
|   | | `-DeclRefExpr 0x1faf66ddf58 <col:5> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | `-IntegerLiteral 0x1faf66ddfa8 <col:23> 'int' 0
|   |-IfStmt 0x1faf66de320 <line:1079:5, line:1080:16>
|   | |-UnaryOperator 0x1faf66de2d0 <line:1079:9, col:54> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1faf66de228 <col:10, col:54> 'int'
|   | |   |-ImplicitCastExpr 0x1faf66de210 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1faf66de0e0 <col:10> 'int ()' Function 0x1faf66de018 'CONF_parse_list' 'int ()'
|   | |   |-ImplicitCastExpr 0x1faf66de270 <col:26> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1faf66de100 <col:26> 'const char *' lvalue ParmVar 0x1faf66ddb60 'in' 'const char *'
|   | |   |-CharacterLiteral 0x1faf66de120 <col:30> 'int' 58
|   | |   |-IntegerLiteral 0x1faf66de138 <col:35> 'int' 0
|   | |   |-ImplicitCastExpr 0x1faf66de2b8 <col:38> 'int (*)(const char *, int, void *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1faf66de160 <col:38> 'int (const char *, int, void *)' Function 0x1faf66bc900 'ipv6_cb' 'int (const char *, int, void *)'
|   | |   `-UnaryOperator 0x1faf66de1f8 <col:47, col:48> 'IPV6_STAT *' prefix '&' cannot overflow
|   | |     `-DeclRefExpr 0x1faf66de180 <col:48> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | `-ReturnStmt 0x1faf66de310 <line:1080:9, col:16>
|   |   `-IntegerLiteral 0x1faf66de2e8 <col:16> 'int' 0
|   |-IfStmt 0x1faf66daec8 <line:1084:5, line:1112:5> has_else
|   | |-BinaryOperator 0x1faf66da3c8 <line:1084:9, col:29> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66da3b0 <col:9, col:16> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x1faf66da340 <col:9, col:16> 'int' lvalue .zero_pos 0x1faf66dd938
|   | | |   `-DeclRefExpr 0x1faf66da320 <col:9> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | | `-UnaryOperator 0x1faf66da398 <col:28, col:29> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x1faf66da370 <col:29> 'int' 1
|   | |-CompoundStmt 0x1faf66da4e8 <col:32, line:1088:5>
|   | | `-IfStmt 0x1faf66da4d0 <line:1086:9, line:1087:20>
|   | |   |-BinaryOperator 0x1faf66da478 <line:1086:13, col:29> 'int' '!='
|   | |   | |-ImplicitCastExpr 0x1faf66da460 <col:13, col:20> 'int' <LValueToRValue>
|   | |   | | `-MemberExpr 0x1faf66da408 <col:13, col:20> 'int' lvalue .total 0x1faf66dd8c8
|   | |   | |   `-DeclRefExpr 0x1faf66da3e8 <col:13> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | |   | `-IntegerLiteral 0x1faf66da438 <col:29> 'int' 16
|   | |   `-ReturnStmt 0x1faf66da4c0 <line:1087:13, col:20>
|   | |     `-IntegerLiteral 0x1faf66da498 <col:20> 'int' 0
|   | `-CompoundStmt 0x1faf66daea8 <line:1088:12, line:1112:5>
|   |   |-IfStmt 0x1faf66da5e8 <line:1090:9, line:1091:20>
|   |   | |-BinaryOperator 0x1faf66da590 <line:1090:13, col:29> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1faf66da578 <col:13, col:20> 'int' <LValueToRValue>
|   |   | | | `-MemberExpr 0x1faf66da520 <col:13, col:20> 'int' lvalue .total 0x1faf66dd8c8
|   |   | | |   `-DeclRefExpr 0x1faf66da500 <col:13> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |   | | `-IntegerLiteral 0x1faf66da550 <col:29> 'int' 16
|   |   | `-ReturnStmt 0x1faf66da5d8 <line:1091:13, col:20>
|   |   |   `-IntegerLiteral 0x1faf66da5b0 <col:20> 'int' 0
|   |   `-IfStmt 0x1faf66dae80 <line:1093:9, line:1111:9> has_else
|   |     |-BinaryOperator 0x1faf66da690 <line:1093:13, col:31> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1faf66da678 <col:13, col:20> 'int' <LValueToRValue>
|   |     | | `-MemberExpr 0x1faf66da620 <col:13, col:20> 'int' lvalue .zero_cnt 0x1faf66dd9a8
|   |     | |   `-DeclRefExpr 0x1faf66da600 <col:13> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |     | `-IntegerLiteral 0x1faf66da650 <col:31> 'int' 3
|   |     |-ReturnStmt 0x1faf66da6d8 <line:1094:13, col:20>
|   |     | `-IntegerLiteral 0x1faf66da6b0 <col:20> 'int' 0
|   |     `-IfStmt 0x1faf66dae58 <line:1096:14, line:1111:9> has_else
|   |       |-BinaryOperator 0x1faf66da778 <line:1096:18, col:37> 'int' '=='
|   |       | |-ImplicitCastExpr 0x1faf66da760 <col:18, col:25> 'int' <LValueToRValue>
|   |       | | `-MemberExpr 0x1faf66da708 <col:18, col:25> 'int' lvalue .zero_cnt 0x1faf66dd9a8
|   |       | |   `-DeclRefExpr 0x1faf66da6e8 <col:18> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |       | `-IntegerLiteral 0x1faf66da738 <col:37> 'int' 3
|   |       |-CompoundStmt 0x1faf66da898 <col:40, line:1099:9>
|   |       | `-IfStmt 0x1faf66da880 <line:1097:13, line:1098:24>
|   |       |   |-BinaryOperator 0x1faf66da828 <line:1097:17, col:32> 'int' '>'
|   |       |   | |-ImplicitCastExpr 0x1faf66da810 <col:17, col:24> 'int' <LValueToRValue>
|   |       |   | | `-MemberExpr 0x1faf66da7b8 <col:17, col:24> 'int' lvalue .total 0x1faf66dd8c8
|   |       |   | |   `-DeclRefExpr 0x1faf66da798 <col:17> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |       |   | `-IntegerLiteral 0x1faf66da7e8 <col:32> 'int' 0
|   |       |   `-ReturnStmt 0x1faf66da870 <line:1098:17, col:24>
|   |       |     `-IntegerLiteral 0x1faf66da848 <col:24> 'int' 0
|   |       `-IfStmt 0x1faf66dae30 <line:1101:14, line:1111:9> has_else
|   |         |-BinaryOperator 0x1faf66da940 <line:1101:18, col:37> 'int' '=='
|   |         | |-ImplicitCastExpr 0x1faf66da928 <col:18, col:25> 'int' <LValueToRValue>
|   |         | | `-MemberExpr 0x1faf66da8d0 <col:18, col:25> 'int' lvalue .zero_cnt 0x1faf66dd9a8
|   |         | |   `-DeclRefExpr 0x1faf66da8b0 <col:18> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |         | `-IntegerLiteral 0x1faf66da900 <col:37> 'int' 2
|   |         |-CompoundStmt 0x1faf66dabb0 <col:40, line:1105:9>
|   |         | `-IfStmt 0x1faf66dab98 <line:1102:13, line:1104:24>
|   |         |   |-BinaryOperator 0x1faf66dab40 <line:1102:17, line:1103:52> 'int' '&&'
|   |         |   | |-ParenExpr 0x1faf66daa10 <line:1102:17, col:38> 'int'
|   |         |   | | `-BinaryOperator 0x1faf66da9f0 <col:18, col:37> 'int' '!='
|   |         |   | |   |-ImplicitCastExpr 0x1faf66da9d8 <col:18, col:25> 'int' <LValueToRValue>
|   |         |   | |   | `-MemberExpr 0x1faf66da980 <col:18, col:25> 'int' lvalue .zero_pos 0x1faf66dd938
|   |         |   | |   |   `-DeclRefExpr 0x1faf66da960 <col:18> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |         |   | |   `-IntegerLiteral 0x1faf66da9b0 <col:37> 'int' 0
|   |         |   | `-ParenExpr 0x1faf66dab20 <line:1103:20, col:52> 'int'
|   |         |   |   `-BinaryOperator 0x1faf66dab00 <col:21, col:47> 'int' '!='
|   |         |   |     |-ImplicitCastExpr 0x1faf66daad0 <col:21, col:28> 'int' <LValueToRValue>
|   |         |   |     | `-MemberExpr 0x1faf66daa50 <col:21, col:28> 'int' lvalue .zero_pos 0x1faf66dd938
|   |         |   |     |   `-DeclRefExpr 0x1faf66daa30 <col:21> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |         |   |     `-ImplicitCastExpr 0x1faf66daae8 <col:40, col:47> 'int' <LValueToRValue>
|   |         |   |       `-MemberExpr 0x1faf66daaa0 <col:40, col:47> 'int' lvalue .total 0x1faf66dd8c8
|   |         |   |         `-DeclRefExpr 0x1faf66daa80 <col:40> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |         |   `-ReturnStmt 0x1faf66dab88 <line:1104:17, col:24>
|   |         |     `-IntegerLiteral 0x1faf66dab60 <col:24> 'int' 0
|   |         `-CompoundStmt 0x1faf66dae18 <line:1107:9, line:1111:9>
|   |           `-IfStmt 0x1faf66dae00 <line:1108:13, line:1110:24>
|   |             |-BinaryOperator 0x1faf66dada8 <line:1108:17, line:1109:52> 'int' '||'
|   |             | |-ParenExpr 0x1faf66dac78 <line:1108:17, col:38> 'int'
|   |             | | `-BinaryOperator 0x1faf66dac58 <col:18, col:37> 'int' '=='
|   |             | |   |-ImplicitCastExpr 0x1faf66dac40 <col:18, col:25> 'int' <LValueToRValue>
|   |             | |   | `-MemberExpr 0x1faf66dabe8 <col:18, col:25> 'int' lvalue .zero_pos 0x1faf66dd938
|   |             | |   |   `-DeclRefExpr 0x1faf66dabc8 <col:18> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |             | |   `-IntegerLiteral 0x1faf66dac18 <col:37> 'int' 0
|   |             | `-ParenExpr 0x1faf66dad88 <line:1109:20, col:52> 'int'
|   |             |   `-BinaryOperator 0x1faf66dad68 <col:21, col:47> 'int' '=='
|   |             |     |-ImplicitCastExpr 0x1faf66dad38 <col:21, col:28> 'int' <LValueToRValue>
|   |             |     | `-MemberExpr 0x1faf66dacb8 <col:21, col:28> 'int' lvalue .zero_pos 0x1faf66dd938
|   |             |     |   `-DeclRefExpr 0x1faf66dac98 <col:21> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |             |     `-ImplicitCastExpr 0x1faf66dad50 <col:40, col:47> 'int' <LValueToRValue>
|   |             |       `-MemberExpr 0x1faf66dad08 <col:40, col:47> 'int' lvalue .total 0x1faf66dd8c8
|   |             |         `-DeclRefExpr 0x1faf66dace8 <col:40> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |             `-ReturnStmt 0x1faf66dadf0 <line:1110:17, col:24>
|   |               `-IntegerLiteral 0x1faf66dadc8 <col:24> 'int' 0
|   |-IfStmt 0x1faf66df020 <line:1116:5, line:1127:34> has_else
|   | |-BinaryOperator 0x1faf66daf80 <line:1116:9, col:28> 'int' '>='
|   | | |-ImplicitCastExpr 0x1faf66daf68 <col:9, col:16> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x1faf66daf10 <col:9, col:16> 'int' lvalue .zero_pos 0x1faf66dd938
|   | | |   `-DeclRefExpr 0x1faf66daef0 <col:9> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | | `-IntegerLiteral 0x1faf66daf40 <col:28> 'int' 0
|   | |-CompoundStmt 0x1faf66dee48 <col:31, line:1126:5>
|   | | |-CallExpr 0x1faf66de3a0 <line:1118:9, col:47> 'void *'
|   | | | |-ImplicitCastExpr 0x1faf66de388 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1faf66db1d0 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x1faf66dafe0 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   | | | |-ImplicitCastExpr 0x1faf66de3f0 <col:16> 'void *' <BitCast>
|   | | | | `-ImplicitCastExpr 0x1faf66de3d8 <col:16> 'unsigned char *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1faf66db208 <col:16> 'unsigned char *' lvalue ParmVar 0x1faf66ddae0 'v6' 'unsigned char *'
|   | | | |-ImplicitCastExpr 0x1faf66de420 <col:20, col:27> 'const void *' <BitCast>
|   | | | | `-ImplicitCastExpr 0x1faf66de408 <col:20, col:27> 'unsigned char *' <ArrayToPointerDecay>
|   | | | |   `-MemberExpr 0x1faf66db248 <col:20, col:27> 'unsigned char [16]' lvalue .tmp 0x1faf66dd858
|   | | | |     `-DeclRefExpr 0x1faf66db228 <col:20> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | | | `-ImplicitCastExpr 0x1faf66de450 <col:32, col:39> 'unsigned long long' <IntegralCast>
|   | | |   `-ImplicitCastExpr 0x1faf66de438 <col:32, col:39> 'int' <LValueToRValue>
|   | | |     `-MemberExpr 0x1faf66db298 <col:32, col:39> 'int' lvalue .zero_pos 0x1faf66dd938
|   | | |       `-DeclRefExpr 0x1faf66db278 <col:32> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | | |-CallExpr 0x1faf66de8b0 <line:1120:9, col:58> 'void *'
|   | | | |-ImplicitCastExpr 0x1faf66de898 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1faf66de6a0 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1faf66de4b0 'memset' 'void *(void *, int, unsigned long long)'
|   | | | |-ImplicitCastExpr 0x1faf66de8e8 <col:16, col:28> 'void *' <BitCast>
|   | | | | `-BinaryOperator 0x1faf66de778 <col:16, col:28> 'unsigned char *' '+'
|   | | | |   |-ImplicitCastExpr 0x1faf66de748 <col:16> 'unsigned char *' <LValueToRValue>
|   | | | |   | `-DeclRefExpr 0x1faf66de6d8 <col:16> 'unsigned char *' lvalue ParmVar 0x1faf66ddae0 'v6' 'unsigned char *'
|   | | | |   `-ImplicitCastExpr 0x1faf66de760 <col:21, col:28> 'int' <LValueToRValue>
|   | | | |     `-MemberExpr 0x1faf66de718 <col:21, col:28> 'int' lvalue .zero_pos 0x1faf66dd938
|   | | | |       `-DeclRefExpr 0x1faf66de6f8 <col:21> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | | | |-IntegerLiteral 0x1faf66de798 <col:38> 'int' 0
|   | | | `-ImplicitCastExpr 0x1faf66de900 <col:41, col:53> 'unsigned long long' <IntegralCast>
|   | | |   `-BinaryOperator 0x1faf66de850 <col:41, col:53> 'int' '-'
|   | | |     |-IntegerLiteral 0x1faf66de7c0 <col:41> 'int' 16
|   | | |     `-ImplicitCastExpr 0x1faf66de838 <col:46, col:53> 'int' <LValueToRValue>
|   | | |       `-MemberExpr 0x1faf66de808 <col:46, col:53> 'int' lvalue .total 0x1faf66dd8c8
|   | | |         `-DeclRefExpr 0x1faf66de7e8 <col:46> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | | `-IfStmt 0x1faf66dee30 <line:1122:9, line:1125:50>
|   | |   |-BinaryOperator 0x1faf66de9e8 <line:1122:13, col:36> 'int' '!='
|   | |   | |-ImplicitCastExpr 0x1faf66de9b8 <col:13, col:20> 'int' <LValueToRValue>
|   | |   | | `-MemberExpr 0x1faf66de938 <col:13, col:20> 'int' lvalue .total 0x1faf66dd8c8
|   | |   | |   `-DeclRefExpr 0x1faf66de918 <col:13> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | |   | `-ImplicitCastExpr 0x1faf66de9d0 <col:29, col:36> 'int' <LValueToRValue>
|   | |   |   `-MemberExpr 0x1faf66de988 <col:29, col:36> 'int' lvalue .zero_pos 0x1faf66dd938
|   | |   |     `-DeclRefExpr 0x1faf66de968 <col:29> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | |   `-CallExpr 0x1faf66dedb0 <line:1123:13, line:1125:50> 'void *'
|   | |     |-ImplicitCastExpr 0x1faf66ded98 <line:1123:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x1faf66dea08 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x1faf66dafe0 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   | |     |-ImplicitCastExpr 0x1faf66dede8 <col:20, col:55> 'void *' <BitCast>
|   | |     | `-BinaryOperator 0x1faf66deb98 <col:20, col:55> 'unsigned char *' '-'
|   | |     |   |-BinaryOperator 0x1faf66deb10 <col:20, col:43> 'unsigned char *' '+'
|   | |     |   | |-BinaryOperator 0x1faf66deac8 <col:20, col:32> 'unsigned char *' '+'
|   | |     |   | | |-ImplicitCastExpr 0x1faf66dea98 <col:20> 'unsigned char *' <LValueToRValue>
|   | |     |   | | | `-DeclRefExpr 0x1faf66dea28 <col:20> 'unsigned char *' lvalue ParmVar 0x1faf66ddae0 'v6' 'unsigned char *'
|   | |     |   | | `-ImplicitCastExpr 0x1faf66deab0 <col:25, col:32> 'int' <LValueToRValue>
|   | |     |   | |   `-MemberExpr 0x1faf66dea68 <col:25, col:32> 'int' lvalue .zero_pos 0x1faf66dd938
|   | |     |   | |     `-DeclRefExpr 0x1faf66dea48 <col:25> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | |     |   | `-IntegerLiteral 0x1faf66deae8 <col:43> 'int' 16
|   | |     |   `-ImplicitCastExpr 0x1faf66deb80 <col:48, col:55> 'int' <LValueToRValue>
|   | |     |     `-MemberExpr 0x1faf66deb50 <col:48, col:55> 'int' lvalue .total 0x1faf66dd8c8
|   | |     |       `-DeclRefExpr 0x1faf66deb30 <col:48> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | |     |-ImplicitCastExpr 0x1faf66dee00 <line:1124:20, col:40> 'const void *' <BitCast>
|   | |     | `-BinaryOperator 0x1faf66dec88 <col:20, col:40> 'unsigned char *' '+'
|   | |     |   |-ImplicitCastExpr 0x1faf66dec58 <col:20, col:27> 'unsigned char *' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x1faf66debd8 <col:20, col:27> 'unsigned char [16]' lvalue .tmp 0x1faf66dd858
|   | |     |   |   `-DeclRefExpr 0x1faf66debb8 <col:20> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | |     |   `-ImplicitCastExpr 0x1faf66dec70 <col:33, col:40> 'int' <LValueToRValue>
|   | |     |     `-MemberExpr 0x1faf66dec28 <col:33, col:40> 'int' lvalue .zero_pos 0x1faf66dd938
|   | |     |       `-DeclRefExpr 0x1faf66dec08 <col:33> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | |     `-ImplicitCastExpr 0x1faf66dee18 <line:1125:20, col:42> 'unsigned long long' <IntegralCast>
|   | |       `-BinaryOperator 0x1faf66ded78 <col:20, col:42> 'int' '-'
|   | |         |-ImplicitCastExpr 0x1faf66ded48 <col:20, col:27> 'int' <LValueToRValue>
|   | |         | `-MemberExpr 0x1faf66decc8 <col:20, col:27> 'int' lvalue .total 0x1faf66dd8c8
|   | |         |   `-DeclRefExpr 0x1faf66deca8 <col:20> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | |         `-ImplicitCastExpr 0x1faf66ded60 <col:35, col:42> 'int' <LValueToRValue>
|   | |           `-MemberExpr 0x1faf66ded18 <col:35, col:42> 'int' lvalue .zero_pos 0x1faf66dd938
|   | |             `-DeclRefExpr 0x1faf66decf8 <col:35> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   | `-CallExpr 0x1faf66def70 <line:1127:9, col:34> 'void *'
|   |   |-ImplicitCastExpr 0x1faf66def58 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1faf66dee70 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x1faf66dafe0 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |-ImplicitCastExpr 0x1faf66defc0 <col:16> 'void *' <BitCast>
|   |   | `-ImplicitCastExpr 0x1faf66defa8 <col:16> 'unsigned char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1faf66dee90 <col:16> 'unsigned char *' lvalue ParmVar 0x1faf66ddae0 'v6' 'unsigned char *'
|   |   |-ImplicitCastExpr 0x1faf66deff0 <col:20, col:27> 'const void *' <BitCast>
|   |   | `-ImplicitCastExpr 0x1faf66defd8 <col:20, col:27> 'unsigned char *' <ArrayToPointerDecay>
|   |   |   `-MemberExpr 0x1faf66deed0 <col:20, col:27> 'unsigned char [16]' lvalue .tmp 0x1faf66dd858
|   |   |     `-DeclRefExpr 0x1faf66deeb0 <col:20> 'IPV6_STAT':'IPV6_STAT' lvalue Var 0x1faf66ddd10 'v6stat' 'IPV6_STAT':'IPV6_STAT'
|   |   `-ImplicitCastExpr 0x1faf66df008 <col:32> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1faf66def00 <col:32> 'int' 16
|   `-ReturnStmt 0x1faf66df070 <line:1129:5, col:12>
|     `-IntegerLiteral 0x1faf66df048 <col:12> 'int' 1
|-FunctionDecl 0x1faf66dafe0 <line:1118:9> col:9 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1faf66db080 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1faf66db0e8 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1faf66db150 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1faf66de4b0 <line:1120:9> col:9 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1faf66de550 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1faf66de5b8 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1faf66de620 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1faf66e1390 prev 0x1faf66bc900 <line:1132:1, line:1165:1> line:1132:12 used ipv6_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x1faf66df0e8 <col:20, col:32> col:32 used elem 'const char *'
| |-ParmVarDecl 0x1faf66df168 <col:38, col:42> col:42 used len 'int'
| |-ParmVarDecl 0x1faf66df1e8 <col:47, col:53> col:53 used usr 'void *'
| `-CompoundStmt 0x1faf66e24e8 <line:1133:1, line:1165:1>
|   |-DeclStmt 0x1faf66e1510 <line:1134:5, col:23>
|   | `-VarDecl 0x1faf66e1458 <col:5, col:20> col:16 used s 'IPV6_STAT *' cinit
|   |   `-ImplicitCastExpr 0x1faf66e14f8 <col:20> 'IPV6_STAT *' <BitCast>
|   |     `-ImplicitCastExpr 0x1faf66e14e0 <col:20> 'void *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1faf66e14c0 <col:20> 'void *' lvalue ParmVar 0x1faf66df1e8 'usr' 'void *'
|   |-IfStmt 0x1faf66e1640 <line:1136:5, line:1137:16>
|   | |-BinaryOperator 0x1faf66e15e8 <line:1136:9, col:21> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66e15d0 <col:9, col:12> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x1faf66e1578 <col:9, col:12> 'int' lvalue ->total 0x1faf66dd8c8
|   | | |   `-ImplicitCastExpr 0x1faf66e1560 <col:9> 'IPV6_STAT *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1faf66e1528 <col:9> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   | | `-IntegerLiteral 0x1faf66e15a8 <col:21> 'int' 16
|   | `-ReturnStmt 0x1faf66e1630 <line:1137:9, col:16>
|   |   `-IntegerLiteral 0x1faf66e1608 <col:16> 'int' 0
|   |-IfStmt 0x1faf66e2488 <line:1138:5, line:1163:5> has_else
|   | |-BinaryOperator 0x1faf66e16b8 <line:1138:9, col:16> 'int' '=='
|   | | |-ImplicitCastExpr 0x1faf66e16a0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66e1658 <col:9> 'int' lvalue ParmVar 0x1faf66df168 'len' 'int'
|   | | `-IntegerLiteral 0x1faf66e1678 <col:16> 'int' 0
|   | |-CompoundStmt 0x1faf66e1ad8 <col:19, line:1146:5>
|   | | |-IfStmt 0x1faf66e1a30 <line:1140:9, line:1144:20> has_else
|   | | | |-BinaryOperator 0x1faf66e1798 <line:1140:13, col:29> 'int' '=='
|   | | | | |-ImplicitCastExpr 0x1faf66e1780 <col:13, col:16> 'int' <LValueToRValue>
|   | | | | | `-MemberExpr 0x1faf66e1710 <col:13, col:16> 'int' lvalue ->zero_pos 0x1faf66dd938
|   | | | | |   `-ImplicitCastExpr 0x1faf66e16f8 <col:13> 'IPV6_STAT *' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x1faf66e16d8 <col:13> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   | | | | `-UnaryOperator 0x1faf66e1768 <col:28, col:29> 'int' prefix '-'
|   | | | |   `-IntegerLiteral 0x1faf66e1740 <col:29> 'int' 1
|   | | | |-BinaryOperator 0x1faf66e18a0 <line:1141:13, col:30> 'int' '='
|   | | | | |-MemberExpr 0x1faf66e17f0 <col:13, col:16> 'int' lvalue ->zero_pos 0x1faf66dd938
|   | | | | | `-ImplicitCastExpr 0x1faf66e17d8 <col:13> 'IPV6_STAT *' <LValueToRValue>
|   | | | | |   `-DeclRefExpr 0x1faf66e17b8 <col:13> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   | | | | `-ImplicitCastExpr 0x1faf66e1888 <col:27, col:30> 'int' <LValueToRValue>
|   | | | |   `-MemberExpr 0x1faf66e1858 <col:27, col:30> 'int' lvalue ->total 0x1faf66dd8c8
|   | | | |     `-ImplicitCastExpr 0x1faf66e1840 <col:27> 'IPV6_STAT *' <LValueToRValue>
|   | | | |       `-DeclRefExpr 0x1faf66e1820 <col:27> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   | | | `-IfStmt 0x1faf66e1a18 <line:1143:14, line:1144:20>
|   | | |   |-BinaryOperator 0x1faf66e19c0 <line:1143:18, col:36> 'int' '!='
|   | | |   | |-ImplicitCastExpr 0x1faf66e1990 <col:18, col:21> 'int' <LValueToRValue>
|   | | |   | | `-MemberExpr 0x1faf66e18f8 <col:18, col:21> 'int' lvalue ->zero_pos 0x1faf66dd938
|   | | |   | |   `-ImplicitCastExpr 0x1faf66e18e0 <col:18> 'IPV6_STAT *' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x1faf66e18c0 <col:18> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   | | |   | `-ImplicitCastExpr 0x1faf66e19a8 <col:33, col:36> 'int' <LValueToRValue>
|   | | |   |   `-MemberExpr 0x1faf66e1960 <col:33, col:36> 'int' lvalue ->total 0x1faf66dd8c8
|   | | |   |     `-ImplicitCastExpr 0x1faf66e1948 <col:33> 'IPV6_STAT *' <LValueToRValue>
|   | | |   |       `-DeclRefExpr 0x1faf66e1928 <col:33> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   | | |   `-ReturnStmt 0x1faf66e1a08 <line:1144:13, col:20>
|   | | |     `-IntegerLiteral 0x1faf66e19e0 <col:20> 'int' 0
|   | | `-UnaryOperator 0x1faf66e1ac0 <line:1145:9, col:20> 'int' postfix '++'
|   | |   `-MemberExpr 0x1faf66e1a90 <col:9, col:12> 'int' lvalue ->zero_cnt 0x1faf66dd9a8
|   | |     `-ImplicitCastExpr 0x1faf66e1a78 <col:9> 'IPV6_STAT *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1faf66e1a58 <col:9> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   | `-CompoundStmt 0x1faf66e2470 <line:1146:12, line:1163:5>
|   |   `-IfStmt 0x1faf66e2448 <line:1148:9, line:1162:9> has_else
|   |     |-BinaryOperator 0x1faf66e1b58 <line:1148:13, col:19> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1faf66e1b40 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1faf66e1af8 <col:13> 'int' lvalue ParmVar 0x1faf66df168 'len' 'int'
|   |     | `-IntegerLiteral 0x1faf66e1b18 <col:19> 'int' 4
|   |     |-CompoundStmt 0x1faf66e2070 <col:22, line:1158:9>
|   |     | |-IfStmt 0x1faf66e1c78 <line:1150:13, line:1151:24>
|   |     | | |-BinaryOperator 0x1faf66e1c20 <line:1150:17, col:28> 'int' '>'
|   |     | | | |-ImplicitCastExpr 0x1faf66e1c08 <col:17, col:20> 'int' <LValueToRValue>
|   |     | | | | `-MemberExpr 0x1faf66e1bb0 <col:17, col:20> 'int' lvalue ->total 0x1faf66dd8c8
|   |     | | | |   `-ImplicitCastExpr 0x1faf66e1b98 <col:17> 'IPV6_STAT *' <LValueToRValue>
|   |     | | | |     `-DeclRefExpr 0x1faf66e1b78 <col:17> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   |     | | | `-IntegerLiteral 0x1faf66e1be0 <col:28> 'int' 12
|   |     | | `-ReturnStmt 0x1faf66e1c68 <line:1151:17, col:24>
|   |     | |   `-IntegerLiteral 0x1faf66e1c40 <col:24> 'int' 0
|   |     | |-IfStmt 0x1faf66e1d70 <line:1153:13, line:1154:24>
|   |     | | |-ImplicitCastExpr 0x1faf66e1d20 <line:1153:17, col:25> 'char' <LValueToRValue>
|   |     | | | `-ArraySubscriptExpr 0x1faf66e1d00 <col:17, col:25> 'const char' lvalue
|   |     | | |   |-ImplicitCastExpr 0x1faf66e1cd0 <col:17> 'const char *' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x1faf66e1c90 <col:17> 'const char *' lvalue ParmVar 0x1faf66df0e8 'elem' 'const char *'
|   |     | | |   `-ImplicitCastExpr 0x1faf66e1ce8 <col:22> 'int' <LValueToRValue>
|   |     | | |     `-DeclRefExpr 0x1faf66e1cb0 <col:22> 'int' lvalue ParmVar 0x1faf66df168 'len' 'int'
|   |     | | `-ReturnStmt 0x1faf66e1d60 <line:1154:17, col:24>
|   |     | |   `-IntegerLiteral 0x1faf66e1d38 <col:24> 'int' 0
|   |     | |-IfStmt 0x1faf66e1f98 <line:1155:13, line:1156:24>
|   |     | | |-UnaryOperator 0x1faf66e1f48 <line:1155:17, col:55> 'int' prefix '!' cannot overflow
|   |     | | | `-CallExpr 0x1faf66e1f00 <col:18, col:55> 'int'
|   |     | | |   |-ImplicitCastExpr 0x1faf66e1ee8 <col:18> 'int (*)(unsigned char *, const char *)' <FunctionToPointerDecay>
|   |     | | |   | `-DeclRefExpr 0x1faf66e1d88 <col:18> 'int (unsigned char *, const char *)' Function 0x1faf66dc608 'ipv4_from_asc' 'int (unsigned char *, const char *)'
|   |     | | |   |-BinaryOperator 0x1faf66e1ea8 <col:32, col:44> 'unsigned char *' '+'
|   |     | | |   | |-ImplicitCastExpr 0x1faf66e1e78 <col:32, col:35> 'unsigned char *' <ArrayToPointerDecay>
|   |     | | |   | | `-MemberExpr 0x1faf66e1de0 <col:32, col:35> 'unsigned char [16]' lvalue ->tmp 0x1faf66dd858
|   |     | | |   | |   `-ImplicitCastExpr 0x1faf66e1dc8 <col:32> 'IPV6_STAT *' <LValueToRValue>
|   |     | | |   | |     `-DeclRefExpr 0x1faf66e1da8 <col:32> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   |     | | |   | `-ImplicitCastExpr 0x1faf66e1e90 <col:41, col:44> 'int' <LValueToRValue>
|   |     | | |   |   `-MemberExpr 0x1faf66e1e48 <col:41, col:44> 'int' lvalue ->total 0x1faf66dd8c8
|   |     | | |   |     `-ImplicitCastExpr 0x1faf66e1e30 <col:41> 'IPV6_STAT *' <LValueToRValue>
|   |     | | |   |       `-DeclRefExpr 0x1faf66e1e10 <col:41> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   |     | | |   `-ImplicitCastExpr 0x1faf66e1f30 <col:51> 'const char *' <LValueToRValue>
|   |     | | |     `-DeclRefExpr 0x1faf66e1ec8 <col:51> 'const char *' lvalue ParmVar 0x1faf66df0e8 'elem' 'const char *'
|   |     | | `-ReturnStmt 0x1faf66e1f88 <line:1156:17, col:24>
|   |     | |   `-IntegerLiteral 0x1faf66e1f60 <col:24> 'int' 0
|   |     | `-CompoundAssignOperator 0x1faf66e2040 <line:1157:13, col:25> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |   |-MemberExpr 0x1faf66e1fe8 <col:13, col:16> 'int' lvalue ->total 0x1faf66dd8c8
|   |     |   | `-ImplicitCastExpr 0x1faf66e1fd0 <col:13> 'IPV6_STAT *' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x1faf66e1fb0 <col:13> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   |     |   `-IntegerLiteral 0x1faf66e2018 <col:25> 'int' 4
|   |     `-CompoundStmt 0x1faf66e2428 <line:1158:16, line:1162:9>
|   |       |-IfStmt 0x1faf66e2318 <line:1159:13, line:1160:24>
|   |       | |-UnaryOperator 0x1faf66e22c8 <line:1159:17, col:55> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x1faf66e2260 <col:18, col:55> 'int'
|   |       | |   |-ImplicitCastExpr 0x1faf66e2248 <col:18> 'int (*)(unsigned char *, const char *, int)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1faf66e20a0 <col:18> 'int (unsigned char *, const char *, int)' Function 0x1faf66bcc20 'ipv6_hex' 'int (unsigned char *, const char *, int)'
|   |       | |   |-BinaryOperator 0x1faf66e21c0 <col:27, col:39> 'unsigned char *' '+'
|   |       | |   | |-ImplicitCastExpr 0x1faf66e2190 <col:27, col:30> 'unsigned char *' <ArrayToPointerDecay>
|   |       | |   | | `-MemberExpr 0x1faf66e20f8 <col:27, col:30> 'unsigned char [16]' lvalue ->tmp 0x1faf66dd858
|   |       | |   | |   `-ImplicitCastExpr 0x1faf66e20e0 <col:27> 'IPV6_STAT *' <LValueToRValue>
|   |       | |   | |     `-DeclRefExpr 0x1faf66e20c0 <col:27> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   |       | |   | `-ImplicitCastExpr 0x1faf66e21a8 <col:36, col:39> 'int' <LValueToRValue>
|   |       | |   |   `-MemberExpr 0x1faf66e2160 <col:36, col:39> 'int' lvalue ->total 0x1faf66dd8c8
|   |       | |   |     `-ImplicitCastExpr 0x1faf66e2148 <col:36> 'IPV6_STAT *' <LValueToRValue>
|   |       | |   |       `-DeclRefExpr 0x1faf66e2128 <col:36> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   |       | |   |-ImplicitCastExpr 0x1faf66e2298 <col:46> 'const char *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1faf66e21e0 <col:46> 'const char *' lvalue ParmVar 0x1faf66df0e8 'elem' 'const char *'
|   |       | |   `-ImplicitCastExpr 0x1faf66e22b0 <col:52> 'int' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x1faf66e2200 <col:52> 'int' lvalue ParmVar 0x1faf66df168 'len' 'int'
|   |       | `-ReturnStmt 0x1faf66e2308 <line:1160:17, col:24>
|   |       |   `-IntegerLiteral 0x1faf66e22e0 <col:24> 'int' 0
|   |       `-CompoundAssignOperator 0x1faf66e23f8 <line:1161:13, col:25> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |         |-MemberExpr 0x1faf66e23a0 <col:13, col:16> 'int' lvalue ->total 0x1faf66dd8c8
|   |         | `-ImplicitCastExpr 0x1faf66e2350 <col:13> 'IPV6_STAT *' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x1faf66e2330 <col:13> 'IPV6_STAT *' lvalue Var 0x1faf66e1458 's' 'IPV6_STAT *'
|   |         `-IntegerLiteral 0x1faf66e23d0 <col:25> 'int' 2
|   `-ReturnStmt 0x1faf66e24d8 <line:1164:5, col:12>
|     `-IntegerLiteral 0x1faf66e24b0 <col:12> 'int' 1
|-FunctionDecl 0x1faf66e2720 prev 0x1faf66bcc20 <line:1171:1, line:1190:1> line:1171:12 used ipv6_hex 'int (unsigned char *, const char *, int)' static
| |-ParmVarDecl 0x1faf66e2530 <col:21, col:36> col:36 used out 'unsigned char *'
| |-ParmVarDecl 0x1faf66e25b0 <col:41, col:53> col:53 used in 'const char *'
| |-ParmVarDecl 0x1faf66e2630 <col:57, col:61> col:61 used inlen 'int'
| `-CompoundStmt 0x1faf66e3318 <line:1172:1, line:1190:1>
|   |-DeclStmt 0x1faf66e2858 <line:1173:5, col:20>
|   | `-VarDecl 0x1faf66e27f0 <col:5, col:19> col:19 used c 'unsigned char'
|   |-DeclStmt 0x1faf66e2930 <line:1174:5, col:25>
|   | `-VarDecl 0x1faf66e2888 <col:5, col:24> col:18 used num 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x1faf66e2918 <col:24> 'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x1faf66e28f0 <col:24> 'int' 0
|   |-DeclStmt 0x1faf66e29c8 <line:1175:5, col:10>
|   | `-VarDecl 0x1faf66e2960 <col:5, col:9> col:9 used x 'int'
|   |-IfStmt 0x1faf66e2a98 <line:1177:5, line:1178:16>
|   | |-BinaryOperator 0x1faf66e2a40 <line:1177:9, col:17> 'int' '>'
|   | | |-ImplicitCastExpr 0x1faf66e2a28 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66e29e0 <col:9> 'int' lvalue ParmVar 0x1faf66e2630 'inlen' 'int'
|   | | `-IntegerLiteral 0x1faf66e2a00 <col:17> 'int' 4
|   | `-ReturnStmt 0x1faf66e2a88 <line:1178:9, col:16>
|   |   `-IntegerLiteral 0x1faf66e2a60 <col:16> 'int' 0
|   |-WhileStmt 0x1faf66e3040 <line:1179:5, line:1186:5>
|   | |-UnaryOperator 0x1faf66e2ad0 <line:1179:12, col:17> 'int' postfix '--'
|   | | `-DeclRefExpr 0x1faf66e2ab0 <col:12> 'int' lvalue ParmVar 0x1faf66e2630 'inlen' 'int'
|   | `-CompoundStmt 0x1faf66e3008 <col:21, line:1186:5>
|   |   |-BinaryOperator 0x1faf66e2ba0 <line:1180:9, col:16> 'unsigned char' '='
|   |   | |-DeclRefExpr 0x1faf66e2ae8 <col:9> 'unsigned char' lvalue Var 0x1faf66e27f0 'c' 'unsigned char'
|   |   | `-ImplicitCastExpr 0x1faf66e2b88 <col:13, col:16> 'unsigned char' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x1faf66e2b70 <col:13, col:16> 'char' <LValueToRValue>
|   |   |     `-UnaryOperator 0x1faf66e2b58 <col:13, col:16> 'const char' lvalue prefix '*' cannot overflow
|   |   |       `-UnaryOperator 0x1faf66e2b40 <col:14, col:16> 'const char *' postfix '++'
|   |   |         `-DeclRefExpr 0x1faf66e2b20 <col:14> 'const char *' lvalue ParmVar 0x1faf66e25b0 'in' 'const char *'
|   |   |-CompoundAssignOperator 0x1faf66e2c38 <line:1181:9, col:17> 'unsigned int' '<<=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x1faf66e2bc0 <col:9> 'unsigned int' lvalue Var 0x1faf66e2888 'num' 'unsigned int'
|   |   | `-IntegerLiteral 0x1faf66e2bf8 <col:17> 'int' 4
|   |   |-BinaryOperator 0x1faf66e2e40 <line:1182:9, col:34> 'int' '='
|   |   | |-DeclRefExpr 0x1faf66e2c68 <col:9> 'int' lvalue Var 0x1faf66e2960 'x' 'int'
|   |   | `-CallExpr 0x1faf66e2de8 <col:13, col:34> 'int'
|   |   |   |-ImplicitCastExpr 0x1faf66e2dd0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1faf66e2d90 <col:13> 'int ()' Function 0x1faf66e2cc8 'OPENSSL_hexchar2int' 'int ()'
|   |   |   `-ImplicitCastExpr 0x1faf66e2e28 <col:33> 'int' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x1faf66e2e10 <col:33> 'unsigned char' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1faf66e2db0 <col:33> 'unsigned char' lvalue Var 0x1faf66e27f0 'c' 'unsigned char'
|   |   |-IfStmt 0x1faf66e2f18 <line:1183:9, line:1184:20>
|   |   | |-BinaryOperator 0x1faf66e2ec0 <line:1183:13, col:17> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1faf66e2ea8 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1faf66e2e60 <col:13> 'int' lvalue Var 0x1faf66e2960 'x' 'int'
|   |   | | `-IntegerLiteral 0x1faf66e2e80 <col:17> 'int' 0
|   |   | `-ReturnStmt 0x1faf66e2f08 <line:1184:13, col:20>
|   |   |   `-IntegerLiteral 0x1faf66e2ee0 <col:20> 'int' 0
|   |   `-CompoundAssignOperator 0x1faf66e2fd8 <line:1185:9, col:22> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |     |-DeclRefExpr 0x1faf66e2f30 <col:9> 'unsigned int' lvalue Var 0x1faf66e2888 'num' 'unsigned int'
|   |     `-ImplicitCastExpr 0x1faf66e2fc0 <col:16, col:22> 'unsigned int' <IntegralCast>
|   |       `-CStyleCastExpr 0x1faf66e2f98 <col:16, col:22> 'char' <IntegralCast>
|   |         `-ImplicitCastExpr 0x1faf66e2f80 <col:22> 'int' <LValueToRValue> part_of_explicit_cast
|   |           `-DeclRefExpr 0x1faf66e2f50 <col:22> 'int' lvalue Var 0x1faf66e2960 'x' 'int'
|   |-BinaryOperator 0x1faf66e3170 <line:1187:5, col:21> 'unsigned char' '='
|   | |-ArraySubscriptExpr 0x1faf66e30b8 <col:5, col:10> 'unsigned char' lvalue
|   | | |-ImplicitCastExpr 0x1faf66e30a0 <col:5> 'unsigned char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66e3058 <col:5> 'unsigned char *' lvalue ParmVar 0x1faf66e2530 'out' 'unsigned char *'
|   | | `-IntegerLiteral 0x1faf66e3078 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1faf66e3158 <col:14, col:21> 'unsigned char' <IntegralCast>
|   |   `-BinaryOperator 0x1faf66e3138 <col:14, col:21> 'unsigned int' '>>'
|   |     |-ImplicitCastExpr 0x1faf66e3120 <col:14> 'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1faf66e30d8 <col:14> 'unsigned int' lvalue Var 0x1faf66e2888 'num' 'unsigned int'
|   |     `-IntegerLiteral 0x1faf66e30f8 <col:21> 'int' 8
|   |-BinaryOperator 0x1faf66e32c0 <line:1188:5, col:20> 'unsigned char' '='
|   | |-ArraySubscriptExpr 0x1faf66e31f0 <col:5, col:10> 'unsigned char' lvalue
|   | | |-ImplicitCastExpr 0x1faf66e31d8 <col:5> 'unsigned char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1faf66e3190 <col:5> 'unsigned char *' lvalue ParmVar 0x1faf66e2530 'out' 'unsigned char *'
|   | | `-IntegerLiteral 0x1faf66e31b0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1faf66e32a8 <col:14, col:20> 'unsigned char' <IntegralCast>
|   |   `-BinaryOperator 0x1faf66e3288 <col:14, col:20> 'unsigned int' '&'
|   |     |-ImplicitCastExpr 0x1faf66e3258 <col:14> 'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1faf66e3210 <col:14> 'unsigned int' lvalue Var 0x1faf66e2888 'num' 'unsigned int'
|   |     `-ImplicitCastExpr 0x1faf66e3270 <col:20> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1faf66e3230 <col:20> 'int' 255
|   `-ReturnStmt 0x1faf66e3308 <line:1189:5, col:12>
|     `-IntegerLiteral 0x1faf66e32e0 <col:12> 'int' 1
`-FunctionDecl 0x1faf66df520 <line:1192:1, line:1238:1> line:1192:5 invalid X509V3_NAME_from_section 'int (int *, int (*)())'
  |-ParmVarDecl 0x1faf66df370 <col:30, col:41> col:41 invalid nm 'int *'
  |-ParmVarDecl 0x1faf66df400 <col:45, <invalid sloc>> col:45 invalid STACK_OF 'int (*)()':'int (*)()'
  `-CompoundStmt 0x1faf66e3970 <line:1194:1, line:1238:1>
    |-DeclStmt 0x1faf66df810 <line:1196:5, col:38>
    | |-VarDecl 0x1faf66df600 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0x1faf66df680 <col:5, col:12> col:12 used mval 'int'
    | |-VarDecl 0x1faf66df700 <col:5, col:18> col:18 used spec_char 'int'
    | `-VarDecl 0x1faf66df780 <col:5, col:29> col:29 used plus_char 'int'
    |-DeclStmt 0x1faf66df940 <line:1197:5, col:19>
    | |-VarDecl 0x1faf66df840 <col:5, col:11> col:11 used p 'char *'
    | `-VarDecl 0x1faf66df8c0 <col:5, col:15> col:15 used type 'char *'
    |-IfStmt 0x1faf66df9a8 <line:1198:5, line:1199:16>
    | |-OpaqueValueExpr 0x1faf66df990 <<invalid sloc>> '_Bool'
    | `-ReturnStmt 0x1faf66df980 <col:9, col:16>
    |   `-IntegerLiteral 0x1faf66df958 <col:16> 'int' 0
    `-ReturnStmt 0x1faf66e3960 <line:1237:5, col:12>
      `-IntegerLiteral 0x1faf66e3938 <col:12> 'int' 1
