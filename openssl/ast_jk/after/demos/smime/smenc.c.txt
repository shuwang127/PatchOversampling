TranslationUnitDecl 0x283cc9f0e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x283cc9f16a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x283cc9f13a0 '__int128'
|-TypedefDecl 0x283cc9f1710 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x283cc9f13c0 'unsigned __int128'
|-TypedefDecl 0x283cc9f1a48 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x283cc9f1800 'struct __NSConstantString_tag'
|   `-Record 0x283cc9f1768 '__NSConstantString_tag'
|-TypedefDecl 0x283cc9f1ab8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x283cc9f0fe0 'unsigned long long'
|-TypedefDecl 0x283cc9f1b50 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x283cc9f1b10 'char *'
|   `-BuiltinType 0x283cc9f0ea0 'char'
|-TypedefDecl 0x283cc9f1bc0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x283cc9f1b10 'char *'
|   `-BuiltinType 0x283cc9f0ea0 'char'
`-FunctionDecl 0x283ce2bc290 <.//openssl//file_jk/after\demos\smime\smenc.c:15:1, line:91:1> line:15:5 main 'int (int, char **)'
  |-ParmVarDecl 0x283cc9f1c30 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x283cc9f1ce0 <col:20, col:27> col:27 argv 'char **'
  `-CompoundStmt 0x283ce2c0fe0 <line:16:1, line:91:1>
    |-DeclStmt 0x283ce2bc580 <line:21:5, col:16>
    | `-VarDecl 0x283ce2bc4f0 <col:5, col:15> col:9 used ret 'int' cinit
    |   `-IntegerLiteral 0x283ce2bc558 <col:15> 'int' 1
    |-DeclStmt 0x283ce2bc618 <line:27:5, col:29>
    | `-VarDecl 0x283ce2bc5b0 <col:5, col:9> col:9 used flags 'int'
    |-CallExpr 0x283ce2bc780 <line:29:5, col:32> 'int'
    | `-ImplicitCastExpr 0x283ce2bc768 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x283ce2bc720 <col:5> 'int ()' Function 0x283ce2bc658 'OpenSSL_add_all_algorithms' 'int ()'
    |-CallExpr 0x283ce2bc8c8 <line:30:5, col:29> 'int'
    | `-ImplicitCastExpr 0x283ce2bc8b0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x283ce2bc890 <col:5> 'int ()' Function 0x283ce2bc7c8 'ERR_load_crypto_strings' 'int ()'
    |-IfStmt 0x283ce2bcbb0 <line:35:5, line:36:14>
    | |-OpaqueValueExpr 0x283ce2bcb98 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x283ce2bcb80 <col:9, col:14> 'err' 0x283ce2bcb30
    |-IfStmt 0x283ce2bcd30 <line:40:5, line:41:14>
    | |-OpaqueValueExpr 0x283ce2bcd18 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x283ce2bcd00 <col:9, col:14> 'err' 0x283ce2bcb30
    |-IfStmt 0x283ce2bcfd0 <line:46:5, line:47:14>
    | |-OpaqueValueExpr 0x283ce2bcfb8 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x283ce2bcfa0 <col:9, col:14> 'err' 0x283ce2bcb30
    |-IfStmt 0x283ce2bd130 <line:59:5, line:60:14>
    | |-OpaqueValueExpr 0x283ce2bd118 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x283ce2bd100 <col:9, col:14> 'err' 0x283ce2bcb30
    |-IfStmt 0x283ce2c0458 <line:65:5, line:66:14>
    | |-OpaqueValueExpr 0x283ce2c0440 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x283ce2c0428 <col:9, col:14> 'err' 0x283ce2bcb30
    |-IfStmt 0x283ce2c0580 <line:69:5, line:70:14>
    | |-OpaqueValueExpr 0x283ce2c0568 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x283ce2c0550 <col:9, col:14> 'err' 0x283ce2bcb30
    |-IfStmt 0x283ce2c06f8 <line:73:5, line:74:14>
    | |-OpaqueValueExpr 0x283ce2c06e0 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x283ce2c06c8 <col:9, col:14> 'err' 0x283ce2bcb30
    |-BinaryOperator 0x283ce2c0770 <line:76:5, col:11> 'int' '='
    | |-DeclRefExpr 0x283ce2c0710 <col:5> 'int' lvalue Var 0x283ce2bc4f0 'ret' 'int'
    | `-IntegerLiteral 0x283ce2c0748 <col:11> 'int' 0
    |-LabelStmt 0x283ce2c0ae0 <line:78:2, line:82:5> 'err'
    | `-IfStmt 0x283ce2c0ac8 <line:79:5, line:82:5>
    |   |-ImplicitCastExpr 0x283ce2c07b0 <line:79:9> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x283ce2c0790 <col:9> 'int' lvalue Var 0x283ce2bc4f0 'ret' 'int'
    |   `-CompoundStmt 0x283ce2c0ab8 <col:14, line:82:5>
    `-ReturnStmt 0x283ce2c0fd0 <line:89:5, col:12>
      `-ImplicitCastExpr 0x283ce2c0fb8 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x283ce2c0f98 <col:12> 'int' lvalue Var 0x283ce2bc4f0 'ret' 'int'
