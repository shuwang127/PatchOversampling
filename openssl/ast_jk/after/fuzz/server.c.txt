TranslationUnitDecl 0x231cdb01758 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x231cdb01ff0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x231cdb01cf0 '__int128'
|-TypedefDecl 0x231cdb02060 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x231cdb01d10 'unsigned __int128'
|-TypedefDecl 0x231cdb02398 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x231cdb02150 'struct __NSConstantString_tag'
|   `-Record 0x231cdb020b8 '__NSConstantString_tag'
|-TypedefDecl 0x231cdb02408 <<invalid sloc>> <invalid sloc> implicit referenced size_t 'unsigned long long'
| `-BuiltinType 0x231cdb01930 'unsigned long long'
|-TypedefDecl 0x231cdb024a0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x231cdb02460 'char *'
|   `-BuiltinType 0x231cdb017f0 'char'
|-TypedefDecl 0x231cdb02510 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x231cdb02460 'char *'
|   `-BuiltinType 0x231cdb017f0 'char'
|-FunctionDecl 0x231cf42fbb0 <.//openssl//file_jk/after\fuzz/fuzzer.h:11:1, col:54> col:5 invalid FuzzerTestOneInput 'int (const int *, size_t)'
| |-ParmVarDecl 0x231cdb02580 <col:24, col:39> col:39 invalid buf 'const int *'
| `-ParmVarDecl 0x231cdb02620 <col:44, col:51> col:51 len 'size_t':'unsigned long long'
|-FunctionDecl 0x231cf42fe90 <line:12:1, col:45> col:5 FuzzerInitialize 'int (int *, char ***)'
| |-ParmVarDecl 0x231cf42fca0 <col:22, col:27> col:27 argc 'int *'
| `-ParmVarDecl 0x231cf42fd88 <col:33, col:41> col:41 argv 'char ***'
|-VarDecl 0x231cf430020 <.//openssl//file_jk/after\fuzz\server.c:21:1, <invalid sloc>> col:22 invalid kCertificateDER 'const int []' static
|-VarDecl 0x231cf43f8c8 <line:89:1, <invalid sloc>> col:22 invalid kRSAPrivateKeyDER 'const int []' static
|-VarDecl 0x231cf43d488 <line:192:1, col:17> col:17 invalid ctx 'int *' static
|-FunctionDecl 0x231cf43d660 prev 0x231cf42fe90 <line:194:1, line:217:1> line:194:5 FuzzerInitialize 'int (int *, char ***)'
| |-ParmVarDecl 0x231cf43d508 <col:22, col:27> col:27 argc 'int *'
| |-ParmVarDecl 0x231cf43d590 <col:33, col:41> col:41 argv 'char ***'
| `-CompoundStmt 0x231cf44c868 <col:47, line:217:1>
|   |-DeclStmt 0x231cf43d790 <line:195:5, col:44>
|   | `-VarDecl 0x231cf43d728 <col:5, col:20> col:20 invalid bufp 'const int *'
|   |-DeclStmt 0x231cf43d828 <line:198:5, col:12>
|   | `-VarDecl 0x231cf43d7c0 <col:5, col:9> col:9 used ret 'int'
|   |-CallExpr 0x231cf44c2a8 <line:207:5, col:28> 'int'
|   | |-ImplicitCastExpr 0x231cf44c290 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x231cf44c1f0 <col:5> 'int ()' Function 0x231cf44bd68 'OPENSSL_assert' 'int ()'
|   | `-BinaryOperator 0x231cf44c270 <col:20, col:27> 'int' '=='
|   |   |-ImplicitCastExpr 0x231cf44c258 <col:20> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x231cf44c210 <col:20> 'int' lvalue Var 0x231cf43d7c0 'ret' 'int'
|   |   `-IntegerLiteral 0x231cf44c230 <col:27> 'int' 1
|   |-CallExpr 0x231cf44c6f8 <line:213:5, col:28> 'int'
|   | |-ImplicitCastExpr 0x231cf44c6e0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x231cf44c640 <col:5> 'int ()' Function 0x231cf44bd68 'OPENSSL_assert' 'int ()'
|   | `-BinaryOperator 0x231cf44c6c0 <col:20, col:27> 'int' '=='
|   |   |-ImplicitCastExpr 0x231cf44c6a8 <col:20> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x231cf44c660 <col:20> 'int' lvalue Var 0x231cf43d7c0 'ret' 'int'
|   |   `-IntegerLiteral 0x231cf44c680 <col:27> 'int' 1
|   `-ReturnStmt 0x231cf44c858 <line:216:5, col:12>
|     `-IntegerLiteral 0x231cf44c830 <col:12> 'int' 1
`-FunctionDecl 0x231cf44c9d0 <line:219:1, line:250:1> line:219:5 invalid FuzzerTestOneInput 'int (const int *, size_t)'
  |-ParmVarDecl 0x231cf44c8b8 <col:24, col:39> col:39 invalid buf 'const int *'
  |-ParmVarDecl 0x231cf44c930 <col:44, col:51> col:51 used len 'size_t':'unsigned long long'
  `-CompoundStmt 0x231cf44a7e0 <col:56, line:250:1>
    |-IfStmt 0x231cf44cb50 <line:223:5, line:225:5>
    | |-UnaryOperator 0x231cf44cae8 <line:223:9, col:10> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x231cf44cad0 <col:10> 'size_t':'unsigned long long' <LValueToRValue>
    | |   `-DeclRefExpr 0x231cf44ca98 <col:10> 'size_t':'unsigned long long' lvalue ParmVar 0x231cf44c930 'len' 'size_t':'unsigned long long'
    | `-CompoundStmt 0x231cf44cb38 <col:15, line:225:5>
    |   `-ReturnStmt 0x231cf44cb28 <line:224:9, col:16>
    |     `-IntegerLiteral 0x231cf44cb00 <col:16> 'int' 0
    |-IfStmt 0x231cf44a680 <line:239:5, line:247:5>
    | |-OpaqueValueExpr 0x231cf44a668 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x231cf44a650 <line:239:40, line:247:5>
    |   `-ForStmt 0x231cf44a618 <line:242:9, line:246:9>
    |     |-<<<NULL>>>
    |     |-<<<NULL>>>
    |     |-<<<NULL>>>
    |     |-<<<NULL>>>
    |     `-CompoundStmt 0x231cf44a600 <line:242:18, line:246:9>
    |       `-IfStmt 0x231cf44a5e8 <line:243:13, line:245:13>
    |         |-OpaqueValueExpr 0x231cf44a5d0 <<invalid sloc>> '_Bool'
    |         `-CompoundStmt 0x231cf44a5b8 <line:243:58, line:245:13>
    |           `-BreakStmt 0x231cf44a5b0 <line:244:17>
    `-ReturnStmt 0x231cf44a7d0 <line:249:5, col:12>
      `-IntegerLiteral 0x231cf44a7a8 <col:12> 'int' 0
