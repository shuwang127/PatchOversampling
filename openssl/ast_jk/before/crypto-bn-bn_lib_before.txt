TranslationUnitDecl 0x55ec4c99a6d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55ec4c99ac50 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55ec4c99a970 '__int128'
|-TypedefDecl 0x55ec4c99acc0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55ec4c99a990 'unsigned __int128'
|-TypedefDecl 0x55ec4c99afb8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55ec4c99adc0 'struct __NSConstantString_tag'
|   `-Record 0x55ec4c99ad18 '__NSConstantString_tag'
|-TypedefDecl 0x55ec4c99b050 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55ec4c99b010 'char *'
|   `-BuiltinType 0x55ec4c99a770 'char'
|-TypedefDecl 0x55ec4c99b338 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55ec4c99b2e0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55ec4c99b150 'struct __va_list_tag'
|     `-Record 0x55ec4c99b0a8 '__va_list_tag'
|-FunctionDecl 0x55ec4ca124d0 </usr/include/assert.h:69:1, line:71:43> line:69:13 used __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55ec4ca121c0 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x55ec4ca12238 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x55ec4ca122b0 <line:70:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55ec4ca12328 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55ec4ca12590 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x55ec4ca12950 </usr/include/assert.h:74:1, line:76:43> line:74:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55ec4ca12648 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x55ec4ca126c0 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x55ec4ca12738 <line:75:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55ec4ca127b0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55ec4ca12a10 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x55ec4ca12cf0 </usr/include/assert.h:81:1, line:82:43> line:81:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55ec4ca12a88 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x55ec4ca12b00 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x55ec4ca12b78 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x55ec4ca12da8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-VarDecl 0x55ec4ca12e20 <crypto-bn-bn_lib_before.c:29:1, col:28> col:12 used bn_limit_bits 'int' static cinit
| `-IntegerLiteral 0x55ec4ca12e80 <col:28> 'int' 0
|-VarDecl 0x55ec4ca12ed0 <line:30:1, col:27> col:12 used bn_limit_num 'int' static cinit
| `-IntegerLiteral 0x55ec4ca12f30 <col:27> 'int' 8
|-VarDecl 0x55ec4ca12f80 <line:31:1, col:32> col:12 used bn_limit_bits_low 'int' static cinit
| `-IntegerLiteral 0x55ec4ca12fe0 <col:32> 'int' 0
|-VarDecl 0x55ec4ca13030 <line:32:1, col:31> col:12 used bn_limit_num_low 'int' static cinit
| `-IntegerLiteral 0x55ec4ca13090 <col:31> 'int' 8
|-VarDecl 0x55ec4ca130e0 <line:33:1, col:33> col:12 used bn_limit_bits_high 'int' static cinit
| `-IntegerLiteral 0x55ec4ca13140 <col:33> 'int' 0
|-VarDecl 0x55ec4ca45b50 <line:34:1, col:32> col:12 used bn_limit_num_high 'int' static cinit
| `-IntegerLiteral 0x55ec4ca45bb0 <col:32> 'int' 8
|-VarDecl 0x55ec4ca45c00 <line:35:1, col:33> col:12 used bn_limit_bits_mont 'int' static cinit
| `-IntegerLiteral 0x55ec4ca45c60 <col:33> 'int' 0
|-VarDecl 0x55ec4ca45cb0 <line:36:1, col:32> col:12 used bn_limit_num_mont 'int' static cinit
| `-IntegerLiteral 0x55ec4ca45d10 <col:32> 'int' 8
|-FunctionDecl 0x55ec4ca46020 <line:38:1, line:64:1> line:38:6 BN_set_params 'void (int, int, int, int)'
| |-ParmVarDecl 0x55ec4ca45d60 <col:20, col:24> col:24 used mult 'int'
| |-ParmVarDecl 0x55ec4ca45dd8 <col:30, col:34> col:34 used high 'int'
| |-ParmVarDecl 0x55ec4ca45e50 <col:40, col:44> col:44 used low 'int'
| |-ParmVarDecl 0x55ec4ca45ec8 <col:49, col:53> col:53 used mont 'int'
| `-CompoundStmt 0x55ec4ca48f88 <line:39:1, line:64:1>
|   |-IfStmt 0x55ec4ca46680 <line:40:5, line:45:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca46158 <line:40:9, col:17> 'int' '>='
|   | | |-ImplicitCastExpr 0x55ec4ca46140 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca460f8 <col:9> 'int' lvalue ParmVar 0x55ec4ca45d60 'mult' 'int'
|   | | `-IntegerLiteral 0x55ec4ca46120 <col:17> 'int' 0
|   | |-CompoundStmt 0x55ec4ca46658 <col:20, line:45:5>
|   | | |-IfStmt 0x55ec4ca464b8 <line:41:9, line:42:38>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x55ec4ca46330 <line:41:13, col:45> 'int' '>'
|   | | | | |-ImplicitCastExpr 0x55ec4ca46318 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x55ec4ca46180 <col:13> 'int' lvalue ParmVar 0x55ec4ca45d60 'mult' 'int'
|   | | | | `-BinaryOperator 0x55ec4ca462f0 <col:20, col:45> 'int' '-'
|   | | | |   |-CStyleCastExpr 0x55ec4ca462a8 <col:20, col:41> 'int' <IntegralCast>
|   | | | |   | `-ParenExpr 0x55ec4ca46288 <col:25, col:41> 'unsigned long'
|   | | | |   |   `-BinaryOperator 0x55ec4ca46218 <col:26, col:40> 'unsigned long' '*'
|   | | | |   |     |-UnaryExprOrTypeTraitExpr 0x55ec4ca461c0 <col:26, col:36> 'unsigned long' sizeof 'int'
|   | | | |   |     `-ImplicitCastExpr 0x55ec4ca46200 <col:40> 'unsigned long' <IntegralCast>
|   | | | |   |       `-IntegerLiteral 0x55ec4ca461e0 <col:40> 'int' 8
|   | | | |   `-IntegerLiteral 0x55ec4ca462d0 <col:45> 'int' 1
|   | | | |-BinaryOperator 0x55ec4ca46490 <line:42:13, col:38> 'int' '='
|   | | | | |-DeclRefExpr 0x55ec4ca46358 <col:13> 'int' lvalue ParmVar 0x55ec4ca45d60 'mult' 'int'
|   | | | | `-ImplicitCastExpr 0x55ec4ca46478 <col:20, col:38> 'int' <IntegralCast>
|   | | | |   `-BinaryOperator 0x55ec4ca46450 <col:20, col:38> 'unsigned long' '-'
|   | | | |     |-BinaryOperator 0x55ec4ca463f0 <col:20, col:34> 'unsigned long' '*'
|   | | | |     | |-UnaryExprOrTypeTraitExpr 0x55ec4ca46398 <col:20, col:30> 'unsigned long' sizeof 'int'
|   | | | |     | `-ImplicitCastExpr 0x55ec4ca463d8 <col:34> 'unsigned long' <IntegralCast>
|   | | | |     |   `-IntegerLiteral 0x55ec4ca463b8 <col:34> 'int' 8
|   | | | |     `-ImplicitCastExpr 0x55ec4ca46438 <col:38> 'unsigned long' <IntegralCast>
|   | | | |       `-IntegerLiteral 0x55ec4ca46418 <col:38> 'int' 1
|   | | | `-<<<NULL>>>
|   | | |-BinaryOperator 0x55ec4ca46558 <line:43:9, col:25> 'int' '='
|   | | | |-DeclRefExpr 0x55ec4ca464f0 <col:9> 'int' lvalue Var 0x55ec4ca12e20 'bn_limit_bits' 'int'
|   | | | `-ImplicitCastExpr 0x55ec4ca46540 <col:25> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55ec4ca46518 <col:25> 'int' lvalue ParmVar 0x55ec4ca45d60 'mult' 'int'
|   | | `-BinaryOperator 0x55ec4ca46630 <line:44:9, col:29> 'int' '='
|   | |   |-DeclRefExpr 0x55ec4ca46580 <col:9> 'int' lvalue Var 0x55ec4ca12ed0 'bn_limit_num' 'int'
|   | |   `-BinaryOperator 0x55ec4ca46608 <col:24, col:29> 'int' '<<'
|   | |     |-IntegerLiteral 0x55ec4ca465a8 <col:24> 'int' 1
|   | |     `-ImplicitCastExpr 0x55ec4ca465f0 <col:29> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55ec4ca465c8 <col:29> 'int' lvalue ParmVar 0x55ec4ca45d60 'mult' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca483d0 <line:46:5, line:51:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca46718 <line:46:9, col:17> 'int' '>='
|   | | |-ImplicitCastExpr 0x55ec4ca46700 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca466b8 <col:9> 'int' lvalue ParmVar 0x55ec4ca45dd8 'high' 'int'
|   | | `-IntegerLiteral 0x55ec4ca466e0 <col:17> 'int' 0
|   | |-CompoundStmt 0x55ec4ca483a8 <col:20, line:51:5>
|   | | |-IfStmt 0x55ec4ca46a78 <line:47:9, line:48:38>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x55ec4ca468f0 <line:47:13, col:45> 'int' '>'
|   | | | | |-ImplicitCastExpr 0x55ec4ca468d8 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x55ec4ca46740 <col:13> 'int' lvalue ParmVar 0x55ec4ca45dd8 'high' 'int'
|   | | | | `-BinaryOperator 0x55ec4ca468b0 <col:20, col:45> 'int' '-'
|   | | | |   |-CStyleCastExpr 0x55ec4ca46868 <col:20, col:41> 'int' <IntegralCast>
|   | | | |   | `-ParenExpr 0x55ec4ca46848 <col:25, col:41> 'unsigned long'
|   | | | |   |   `-BinaryOperator 0x55ec4ca467d8 <col:26, col:40> 'unsigned long' '*'
|   | | | |   |     |-UnaryExprOrTypeTraitExpr 0x55ec4ca46780 <col:26, col:36> 'unsigned long' sizeof 'int'
|   | | | |   |     `-ImplicitCastExpr 0x55ec4ca467c0 <col:40> 'unsigned long' <IntegralCast>
|   | | | |   |       `-IntegerLiteral 0x55ec4ca467a0 <col:40> 'int' 8
|   | | | |   `-IntegerLiteral 0x55ec4ca46890 <col:45> 'int' 1
|   | | | |-BinaryOperator 0x55ec4ca46a50 <line:48:13, col:38> 'int' '='
|   | | | | |-DeclRefExpr 0x55ec4ca46918 <col:13> 'int' lvalue ParmVar 0x55ec4ca45dd8 'high' 'int'
|   | | | | `-ImplicitCastExpr 0x55ec4ca46a38 <col:20, col:38> 'int' <IntegralCast>
|   | | | |   `-BinaryOperator 0x55ec4ca46a10 <col:20, col:38> 'unsigned long' '-'
|   | | | |     |-BinaryOperator 0x55ec4ca469b0 <col:20, col:34> 'unsigned long' '*'
|   | | | |     | |-UnaryExprOrTypeTraitExpr 0x55ec4ca46958 <col:20, col:30> 'unsigned long' sizeof 'int'
|   | | | |     | `-ImplicitCastExpr 0x55ec4ca46998 <col:34> 'unsigned long' <IntegralCast>
|   | | | |     |   `-IntegerLiteral 0x55ec4ca46978 <col:34> 'int' 8
|   | | | |     `-ImplicitCastExpr 0x55ec4ca469f8 <col:38> 'unsigned long' <IntegralCast>
|   | | | |       `-IntegerLiteral 0x55ec4ca469d8 <col:38> 'int' 1
|   | | | `-<<<NULL>>>
|   | | |-BinaryOperator 0x55ec4ca46b18 <line:49:9, col:30> 'int' '='
|   | | | |-DeclRefExpr 0x55ec4ca46ab0 <col:9> 'int' lvalue Var 0x55ec4ca130e0 'bn_limit_bits_high' 'int'
|   | | | `-ImplicitCastExpr 0x55ec4ca46b00 <col:30> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55ec4ca46ad8 <col:30> 'int' lvalue ParmVar 0x55ec4ca45dd8 'high' 'int'
|   | | `-BinaryOperator 0x55ec4ca48380 <line:50:9, col:34> 'int' '='
|   | |   |-DeclRefExpr 0x55ec4ca482d0 <col:9> 'int' lvalue Var 0x55ec4ca45b50 'bn_limit_num_high' 'int'
|   | |   `-BinaryOperator 0x55ec4ca48358 <col:29, col:34> 'int' '<<'
|   | |     |-IntegerLiteral 0x55ec4ca482f8 <col:29> 'int' 1
|   | |     `-ImplicitCastExpr 0x55ec4ca48340 <col:34> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55ec4ca48318 <col:34> 'int' lvalue ParmVar 0x55ec4ca45dd8 'high' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca48990 <line:52:5, line:57:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca48468 <line:52:9, col:16> 'int' '>='
|   | | |-ImplicitCastExpr 0x55ec4ca48450 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca48408 <col:9> 'int' lvalue ParmVar 0x55ec4ca45e50 'low' 'int'
|   | | `-IntegerLiteral 0x55ec4ca48430 <col:16> 'int' 0
|   | |-CompoundStmt 0x55ec4ca48968 <col:19, line:57:5>
|   | | |-IfStmt 0x55ec4ca487c8 <line:53:9, line:54:37>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x55ec4ca48640 <line:53:13, col:44> 'int' '>'
|   | | | | |-ImplicitCastExpr 0x55ec4ca48628 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x55ec4ca48490 <col:13> 'int' lvalue ParmVar 0x55ec4ca45e50 'low' 'int'
|   | | | | `-BinaryOperator 0x55ec4ca48600 <col:19, col:44> 'int' '-'
|   | | | |   |-CStyleCastExpr 0x55ec4ca485b8 <col:19, col:40> 'int' <IntegralCast>
|   | | | |   | `-ParenExpr 0x55ec4ca48598 <col:24, col:40> 'unsigned long'
|   | | | |   |   `-BinaryOperator 0x55ec4ca48528 <col:25, col:39> 'unsigned long' '*'
|   | | | |   |     |-UnaryExprOrTypeTraitExpr 0x55ec4ca484d0 <col:25, col:35> 'unsigned long' sizeof 'int'
|   | | | |   |     `-ImplicitCastExpr 0x55ec4ca48510 <col:39> 'unsigned long' <IntegralCast>
|   | | | |   |       `-IntegerLiteral 0x55ec4ca484f0 <col:39> 'int' 8
|   | | | |   `-IntegerLiteral 0x55ec4ca485e0 <col:44> 'int' 1
|   | | | |-BinaryOperator 0x55ec4ca487a0 <line:54:13, col:37> 'int' '='
|   | | | | |-DeclRefExpr 0x55ec4ca48668 <col:13> 'int' lvalue ParmVar 0x55ec4ca45e50 'low' 'int'
|   | | | | `-ImplicitCastExpr 0x55ec4ca48788 <col:19, col:37> 'int' <IntegralCast>
|   | | | |   `-BinaryOperator 0x55ec4ca48760 <col:19, col:37> 'unsigned long' '-'
|   | | | |     |-BinaryOperator 0x55ec4ca48700 <col:19, col:33> 'unsigned long' '*'
|   | | | |     | |-UnaryExprOrTypeTraitExpr 0x55ec4ca486a8 <col:19, col:29> 'unsigned long' sizeof 'int'
|   | | | |     | `-ImplicitCastExpr 0x55ec4ca486e8 <col:33> 'unsigned long' <IntegralCast>
|   | | | |     |   `-IntegerLiteral 0x55ec4ca486c8 <col:33> 'int' 8
|   | | | |     `-ImplicitCastExpr 0x55ec4ca48748 <col:37> 'unsigned long' <IntegralCast>
|   | | | |       `-IntegerLiteral 0x55ec4ca48728 <col:37> 'int' 1
|   | | | `-<<<NULL>>>
|   | | |-BinaryOperator 0x55ec4ca48868 <line:55:9, col:29> 'int' '='
|   | | | |-DeclRefExpr 0x55ec4ca48800 <col:9> 'int' lvalue Var 0x55ec4ca12f80 'bn_limit_bits_low' 'int'
|   | | | `-ImplicitCastExpr 0x55ec4ca48850 <col:29> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55ec4ca48828 <col:29> 'int' lvalue ParmVar 0x55ec4ca45e50 'low' 'int'
|   | | `-BinaryOperator 0x55ec4ca48940 <line:56:9, col:33> 'int' '='
|   | |   |-DeclRefExpr 0x55ec4ca48890 <col:9> 'int' lvalue Var 0x55ec4ca13030 'bn_limit_num_low' 'int'
|   | |   `-BinaryOperator 0x55ec4ca48918 <col:28, col:33> 'int' '<<'
|   | |     |-IntegerLiteral 0x55ec4ca488b8 <col:28> 'int' 1
|   | |     `-ImplicitCastExpr 0x55ec4ca48900 <col:33> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55ec4ca488d8 <col:33> 'int' lvalue ParmVar 0x55ec4ca45e50 'low' 'int'
|   | `-<<<NULL>>>
|   `-IfStmt 0x55ec4ca48f50 <line:58:5, line:63:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55ec4ca48a28 <line:58:9, col:17> 'int' '>='
|     | |-ImplicitCastExpr 0x55ec4ca48a10 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ec4ca489c8 <col:9> 'int' lvalue ParmVar 0x55ec4ca45ec8 'mont' 'int'
|     | `-IntegerLiteral 0x55ec4ca489f0 <col:17> 'int' 0
|     |-CompoundStmt 0x55ec4ca48f28 <col:20, line:63:5>
|     | |-IfStmt 0x55ec4ca48d88 <line:59:9, line:60:38>
|     | | |-<<<NULL>>>
|     | | |-<<<NULL>>>
|     | | |-BinaryOperator 0x55ec4ca48c00 <line:59:13, col:45> 'int' '>'
|     | | | |-ImplicitCastExpr 0x55ec4ca48be8 <col:13> 'int' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55ec4ca48a50 <col:13> 'int' lvalue ParmVar 0x55ec4ca45ec8 'mont' 'int'
|     | | | `-BinaryOperator 0x55ec4ca48bc0 <col:20, col:45> 'int' '-'
|     | | |   |-CStyleCastExpr 0x55ec4ca48b78 <col:20, col:41> 'int' <IntegralCast>
|     | | |   | `-ParenExpr 0x55ec4ca48b58 <col:25, col:41> 'unsigned long'
|     | | |   |   `-BinaryOperator 0x55ec4ca48ae8 <col:26, col:40> 'unsigned long' '*'
|     | | |   |     |-UnaryExprOrTypeTraitExpr 0x55ec4ca48a90 <col:26, col:36> 'unsigned long' sizeof 'int'
|     | | |   |     `-ImplicitCastExpr 0x55ec4ca48ad0 <col:40> 'unsigned long' <IntegralCast>
|     | | |   |       `-IntegerLiteral 0x55ec4ca48ab0 <col:40> 'int' 8
|     | | |   `-IntegerLiteral 0x55ec4ca48ba0 <col:45> 'int' 1
|     | | |-BinaryOperator 0x55ec4ca48d60 <line:60:13, col:38> 'int' '='
|     | | | |-DeclRefExpr 0x55ec4ca48c28 <col:13> 'int' lvalue ParmVar 0x55ec4ca45ec8 'mont' 'int'
|     | | | `-ImplicitCastExpr 0x55ec4ca48d48 <col:20, col:38> 'int' <IntegralCast>
|     | | |   `-BinaryOperator 0x55ec4ca48d20 <col:20, col:38> 'unsigned long' '-'
|     | | |     |-BinaryOperator 0x55ec4ca48cc0 <col:20, col:34> 'unsigned long' '*'
|     | | |     | |-UnaryExprOrTypeTraitExpr 0x55ec4ca48c68 <col:20, col:30> 'unsigned long' sizeof 'int'
|     | | |     | `-ImplicitCastExpr 0x55ec4ca48ca8 <col:34> 'unsigned long' <IntegralCast>
|     | | |     |   `-IntegerLiteral 0x55ec4ca48c88 <col:34> 'int' 8
|     | | |     `-ImplicitCastExpr 0x55ec4ca48d08 <col:38> 'unsigned long' <IntegralCast>
|     | | |       `-IntegerLiteral 0x55ec4ca48ce8 <col:38> 'int' 1
|     | | `-<<<NULL>>>
|     | |-BinaryOperator 0x55ec4ca48e28 <line:61:9, col:30> 'int' '='
|     | | |-DeclRefExpr 0x55ec4ca48dc0 <col:9> 'int' lvalue Var 0x55ec4ca45c00 'bn_limit_bits_mont' 'int'
|     | | `-ImplicitCastExpr 0x55ec4ca48e10 <col:30> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ec4ca48de8 <col:30> 'int' lvalue ParmVar 0x55ec4ca45ec8 'mont' 'int'
|     | `-BinaryOperator 0x55ec4ca48f00 <line:62:9, col:34> 'int' '='
|     |   |-DeclRefExpr 0x55ec4ca48e50 <col:9> 'int' lvalue Var 0x55ec4ca45cb0 'bn_limit_num_mont' 'int'
|     |   `-BinaryOperator 0x55ec4ca48ed8 <col:29, col:34> 'int' '<<'
|     |     |-IntegerLiteral 0x55ec4ca48e78 <col:29> 'int' 1
|     |     `-ImplicitCastExpr 0x55ec4ca48ec0 <col:34> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ec4ca48e98 <col:34> 'int' lvalue ParmVar 0x55ec4ca45ec8 'mont' 'int'
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca490b8 <line:66:1, line:78:1> line:66:5 BN_get_params 'int (int)'
| |-ParmVarDecl 0x55ec4ca48fd0 <col:19, col:23> col:23 used which 'int'
| `-CompoundStmt 0x55ec4ca496d0 <line:67:1, line:78:1>
|   `-IfStmt 0x55ec4ca49698 <line:68:5, line:77:18>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55ec4ca491d8 <line:68:9, col:18> 'int' '=='
|     | |-ImplicitCastExpr 0x55ec4ca491c0 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ec4ca49178 <col:9> 'int' lvalue ParmVar 0x55ec4ca48fd0 'which' 'int'
|     | `-IntegerLiteral 0x55ec4ca491a0 <col:18> 'int' 0
|     |-ReturnStmt 0x55ec4ca49260 <line:69:9, col:30>
|     | `-ImplicitCastExpr 0x55ec4ca49248 <col:16, col:30> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x55ec4ca49228 <col:16, col:30> 'int' lvalue
|     |     `-DeclRefExpr 0x55ec4ca49200 <col:17> 'int' lvalue Var 0x55ec4ca12e20 'bn_limit_bits' 'int'
|     `-IfStmt 0x55ec4ca49660 <line:70:10, line:77:18>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x55ec4ca492f8 <line:70:14, col:23> 'int' '=='
|       | |-ImplicitCastExpr 0x55ec4ca492e0 <col:14> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x55ec4ca49278 <col:14> 'int' lvalue ParmVar 0x55ec4ca48fd0 'which' 'int'
|       | `-IntegerLiteral 0x55ec4ca492a0 <col:23> 'int' 1
|       |-ReturnStmt 0x55ec4ca49380 <line:71:9, col:35>
|       | `-ImplicitCastExpr 0x55ec4ca49368 <col:16, col:35> 'int' <LValueToRValue>
|       |   `-ParenExpr 0x55ec4ca49348 <col:16, col:35> 'int' lvalue
|       |     `-DeclRefExpr 0x55ec4ca49320 <col:17> 'int' lvalue Var 0x55ec4ca130e0 'bn_limit_bits_high' 'int'
|       `-IfStmt 0x55ec4ca49628 <line:72:10, line:77:18>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-BinaryOperator 0x55ec4ca493f8 <line:72:14, col:23> 'int' '=='
|         | |-ImplicitCastExpr 0x55ec4ca493e0 <col:14> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ec4ca49398 <col:14> 'int' lvalue ParmVar 0x55ec4ca48fd0 'which' 'int'
|         | `-IntegerLiteral 0x55ec4ca493c0 <col:23> 'int' 2
|         |-ReturnStmt 0x55ec4ca49480 <line:73:9, col:34>
|         | `-ImplicitCastExpr 0x55ec4ca49468 <col:16, col:34> 'int' <LValueToRValue>
|         |   `-ParenExpr 0x55ec4ca49448 <col:16, col:34> 'int' lvalue
|         |     `-DeclRefExpr 0x55ec4ca49420 <col:17> 'int' lvalue Var 0x55ec4ca12f80 'bn_limit_bits_low' 'int'
|         `-IfStmt 0x55ec4ca495f0 <line:74:10, line:77:18>
|           |-<<<NULL>>>
|           |-<<<NULL>>>
|           |-BinaryOperator 0x55ec4ca494f8 <line:74:14, col:23> 'int' '=='
|           | |-ImplicitCastExpr 0x55ec4ca494e0 <col:14> 'int' <LValueToRValue>
|           | | `-DeclRefExpr 0x55ec4ca49498 <col:14> 'int' lvalue ParmVar 0x55ec4ca48fd0 'which' 'int'
|           | `-IntegerLiteral 0x55ec4ca494c0 <col:23> 'int' 3
|           |-ReturnStmt 0x55ec4ca49580 <line:75:9, col:35>
|           | `-ImplicitCastExpr 0x55ec4ca49568 <col:16, col:35> 'int' <LValueToRValue>
|           |   `-ParenExpr 0x55ec4ca49548 <col:16, col:35> 'int' lvalue
|           |     `-DeclRefExpr 0x55ec4ca49520 <col:17> 'int' lvalue Var 0x55ec4ca45c00 'bn_limit_bits_mont' 'int'
|           `-ReturnStmt 0x55ec4ca495d8 <line:77:9, col:18>
|             `-ParenExpr 0x55ec4ca495b8 <col:16, col:18> 'int'
|               `-IntegerLiteral 0x55ec4ca49598 <col:17> 'int' 0
|-FunctionDecl 0x55ec4ca497b8 <line:81:1, line:88:1> line:81:15 invalid BN_value_one 'const int *(void)'
| `-CompoundStmt 0x55ec4ca49a10 <line:82:1, line:88:1>
|   |-DeclStmt 0x55ec4ca49908 <line:83:5, col:40>
|   | `-VarDecl 0x55ec4ca49888 <col:5, col:27> col:27 invalid data_one 'const int' static
|   `-DeclStmt 0x55ec4ca499f8 <line:84:5, line:85:63>
|     `-VarDecl 0x55ec4ca49938 <line:84:5, col:25> col:25 invalid const_one 'const int' static
|-FunctionDecl 0x55ec4ca49ad8 <line:90:1, line:133:1> line:90:5 invalid BN_num_bits_word 'int (int)'
| |-ParmVarDecl 0x55ec4ca49a48 <col:22, col:31> col:31 invalid l 'int'
| `-CompoundStmt 0x55ec4ca4a0a0 <line:91:1, line:133:1>
|   |-DeclStmt 0x55ec4ca49c30 <line:93:5, col:24>
|   | `-VarDecl 0x55ec4ca49bb0 <col:5, col:9> col:9 used bits 'int'
|   `-ReturnStmt 0x55ec4ca4a088 <line:132:5, col:12>
|     `-ImplicitCastExpr 0x55ec4ca4a070 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55ec4ca4a048 <col:12> 'int' lvalue Var 0x55ec4ca49bb0 'bits' 'int'
|-FunctionDecl 0x55ec4ca4a1a8 <line:135:1, line:143:1> line:135:5 invalid BN_num_bits 'int (const int *)'
| |-ParmVarDecl 0x55ec4ca4a0d8 <col:17, col:31> col:31 invalid a 'const int *'
| `-CompoundStmt 0x55ec4ca4ad80 <line:136:1, line:143:1>
|   |-DeclStmt 0x55ec4ca4aa10 <line:137:5, col:23>
|   | `-VarDecl 0x55ec4ca4a280 <col:5, col:9> col:9 used i 'int'
|   `-IfStmt 0x55ec4ca4ace0 <line:140:5, line:141:16>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55ec4ca4acc0 <<invalid sloc>> '_Bool'
|     |-ReturnStmt 0x55ec4ca4aca8 <col:9, col:16>
|     | `-IntegerLiteral 0x55ec4ca4ac88 <col:16> 'int' 0
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca4aea0 <line:145:1, line:151:1> line:145:13 invalid bn_free_d 'void (int *)' static
| |-ParmVarDecl 0x55ec4ca4ade0 <col:23, col:31> col:31 invalid a 'int *'
| `-CompoundStmt 0x55ec4ca4b2a8 <line:146:1, line:151:1>
|-FunctionDecl 0x55ec4ca4b358 <line:154:1, line:170:1> line:154:6 invalid BN_clear_free 'void (int *)'
| |-ParmVarDecl 0x55ec4ca4b2d0 <col:20, col:28> col:28 invalid a 'int *'
| `-CompoundStmt 0x55ec4ca4b800 <line:155:1, line:170:1>
|   |-DeclStmt 0x55ec4ca4b490 <line:156:5, col:10>
|   | `-VarDecl 0x55ec4ca4b430 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x55ec4ca4b4e0 <line:158:5, line:159:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca4b4c0 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55ec4ca4b4a8 <col:9>
|   | `-<<<NULL>>>
|   `-IfStmt 0x55ec4ca4b6d0 <line:161:5, line:165:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55ec4ca4b6b0 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55ec4ca4b6a0 <line:161:23, line:165:5>
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca4b8c8 <line:172:1, line:187:1> line:172:6 invalid BN_free 'void (int *)'
| |-ParmVarDecl 0x55ec4ca4b840 <col:14, col:22> col:22 invalid a 'int *'
| `-CompoundStmt 0x55ec4ca4cf48 <line:173:1, line:187:1>
|   |-IfStmt 0x55ec4ca4ce20 <line:174:5, line:175:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca4b9a0 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55ec4ca4b988 <col:9>
|   | `-<<<NULL>>>
|   `-IfStmt 0x55ec4ca4cf10 <line:179:5, line:186:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55ec4ca4cef0 <<invalid sloc>> '_Bool'
|     |-NullStmt 0x55ec4ca4cee0 <line:180:9>
|     `-CompoundStmt 0x55ec4ca4ced0 <line:181:10, line:186:5>
|-FunctionDecl 0x55ec4ca4d008 <line:189:1, line:195:1> line:189:6 invalid bn_init 'void (int *)'
| |-ParmVarDecl 0x55ec4ca4cf80 <col:14, col:22> col:22 invalid a 'int *'
| `-CompoundStmt 0x55ec4ca4d180 <line:190:1, line:195:1>
|   `-DeclStmt 0x55ec4ca4d140 <line:191:5, col:24>
|     `-VarDecl 0x55ec4ca4d0e0 <col:5, col:19> col:19 invalid nilbn 'int' static
|-FunctionDecl 0x55ec4ca4d268 <line:197:1, line:208:1> line:197:9 invalid BN_new 'int *(void)'
| `-CompoundStmt 0x55ec4ca4d5e0 <line:198:1, line:208:1>
|   `-IfStmt 0x55ec4ca4d580 <line:201:5, line:204:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55ec4ca4d560 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55ec4ca4d550 <line:201:55, line:204:5>
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca4d690 <line:210:2, line:216:2> line:210:10 invalid BN_secure_new 'int *(void)'
| `-CompoundStmt 0x55ec4ca4d748 <line:211:2, line:216:2>
|-FunctionDecl 0x55ec4ca4d8c8 <line:220:1, line:288:1> line:220:18 invalid bn_expand_internal 'int *(const int *, int)' static
| |-ParmVarDecl 0x55ec4ca4d770 <col:37, col:51> col:51 invalid b 'const int *'
| |-ParmVarDecl 0x55ec4ca4d7e8 <col:54, col:58> col:58 used words 'int'
| `-CompoundStmt 0x55ec4ca0d920 <line:221:1, line:288:1>
|   |-DeclStmt 0x55ec4ca4da08 <line:223:5, col:22>
|   | `-VarDecl 0x55ec4ca4d9a8 <col:5, col:21> col:21 invalid B 'const int *'
|   |-DeclStmt 0x55ec4ca4da98 <line:224:5, col:10>
|   | `-VarDecl 0x55ec4ca4da38 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x55ec4ca4db88 <line:226:5, line:229:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca4db68 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55ec4ca4db58 <line:226:45, line:229:5>
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca4dc40 <line:230:5, line:233:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca4dc20 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55ec4ca4dc10 <line:230:46, line:233:5>
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca0d5a0 <line:238:5, line:241:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca0d580 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55ec4ca0d570 <line:238:20, line:241:5>
|   | `-<<<NULL>>>
|   `-IfStmt 0x55ec4ca0d8e8 <line:246:5, line:281:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55ec4ca0d8c8 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55ec4ca0d8b0 <line:246:20, line:281:5>
|     | `-ForStmt 0x55ec4ca0d858 <line:247:9, line:266:9>
|     |   |-<<<NULL>>>
|     |   |-<<<NULL>>>
|     |   |-BinaryOperator 0x55ec4ca0d698 <line:247:31, col:35> 'int' '>'
|     |   | |-ImplicitCastExpr 0x55ec4ca0d680 <col:31> 'int' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55ec4ca0d638 <col:31> 'int' lvalue Var 0x55ec4ca4da38 'i' 'int'
|     |   | `-IntegerLiteral 0x55ec4ca0d660 <col:35> 'int' 0
|     |   |-<<<NULL>>>
|     |   `-CompoundStmt 0x55ec4ca0d848 <col:59, line:266:9>
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca0dac8 <line:298:1, line:313:1> line:298:9 invalid bn_expand2 'int *(int *, int)'
| |-ParmVarDecl 0x55ec4ca0d978 <col:20, col:28> col:28 invalid b 'int *'
| |-ParmVarDecl 0x55ec4ca0d9f0 <col:31, col:35> col:35 used words 'int'
| `-CompoundStmt 0x55ec4ca0dd40 <line:299:1, line:313:1>
|   `-IfStmt 0x55ec4ca0dd08 <line:300:5, line:310:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55ec4ca0dce8 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55ec4ca0dcd0 <line:300:26, line:310:5>
|     | `-IfStmt 0x55ec4ca0dc70 <line:304:9, line:307:9>
|     |   |-<<<NULL>>>
|     |   |-<<<NULL>>>
|     |   |-OpaqueValueExpr 0x55ec4ca0dc50 <<invalid sloc>> '_Bool'
|     |   |-CompoundStmt 0x55ec4ca0dc40 <line:304:19, line:307:9>
|     |   `-<<<NULL>>>
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca0de38 <line:315:1, line:332:1> line:315:9 invalid BN_dup 'int *(const int *)'
| |-ParmVarDecl 0x55ec4ca0dd70 <col:16, col:30> col:30 invalid a 'const int *'
| `-CompoundStmt 0x55ec4ca0e0f0 <line:316:1, line:332:1>
|   `-IfStmt 0x55ec4ca0e090 <line:326:5, line:329:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55ec4ca0e070 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55ec4ca0e060 <line:326:25, line:329:5>
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca0e278 <line:334:1, line:383:1> line:334:9 invalid BN_copy 'int *(int *, const int *)'
| |-ParmVarDecl 0x55ec4ca0e120 <col:17, col:25> col:25 invalid a 'int *'
| |-ParmVarDecl 0x55ec4ca0e198 <col:28, col:42> col:42 invalid b 'const int *'
| `-CompoundStmt 0x55ec4ca51210 <line:335:1, line:383:1>
|   |-DeclStmt 0x55ec4ca0e3b8 <line:336:5, col:10>
|   | `-VarDecl 0x55ec4ca0e358 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x55ec4ca0e448 <line:338:5, col:22>
|   | `-VarDecl 0x55ec4ca0e3e8 <col:5, col:21> col:21 invalid B 'const int *'
|   `-ForStmt 0x55ec4ca51190 <line:350:5, line:360:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55ec4ca50fd0 <line:350:27, col:31> 'int' '>'
|     | |-ImplicitCastExpr 0x55ec4ca50fb8 <col:27> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ec4ca50f70 <col:27> 'int' lvalue Var 0x55ec4ca0e358 'i' 'int'
|     | `-IntegerLiteral 0x55ec4ca50f98 <col:31> 'int' 0
|     |-<<<NULL>>>
|     `-CompoundStmt 0x55ec4ca51180 <col:55, line:360:5>
|-FunctionDecl 0x55ec4ca513a0 <line:391:1, line:422:1> line:391:6 invalid BN_swap 'void (int *, int *)'
| |-ParmVarDecl 0x55ec4ca51250 <col:14, col:22> col:22 invalid a 'int *'
| |-ParmVarDecl 0x55ec4ca512c8 <col:25, col:33> col:33 invalid b 'int *'
| `-CompoundStmt 0x55ec4ca51aa0 <line:392:1, line:422:1>
|   |-DeclStmt 0x55ec4ca51570 <line:393:5, col:33>
|   | |-VarDecl 0x55ec4ca51480 <col:5, col:9> col:9 used flags_old_a 'int'
|   | `-VarDecl 0x55ec4ca514f8 <col:5, col:22> col:22 used flags_old_b 'int'
|   `-DeclStmt 0x55ec4ca51710 <line:395:5, col:35>
|     |-VarDecl 0x55ec4ca515a0 <col:5, col:9> col:9 used tmp_top 'int'
|     |-VarDecl 0x55ec4ca51618 <col:5, col:18> col:18 used tmp_dmax 'int'
|     `-VarDecl 0x55ec4ca51690 <col:5, col:28> col:28 used tmp_neg 'int'
|-FunctionDecl 0x55ec4ca51b60 <line:424:1, line:432:1> line:424:6 invalid BN_clear 'void (int *)'
| |-ParmVarDecl 0x55ec4ca51ad8 <col:15, col:23> col:23 invalid a 'int *'
| `-CompoundStmt 0x55ec4ca51cb0 <line:425:1, line:432:1>
|-FunctionDecl 0x55ec4ca51d68 <line:434:1, line:442:1> line:434:10 invalid BN_get_word 'int (const int *)'
| |-ParmVarDecl 0x55ec4ca51cd8 <col:22, col:36> col:36 invalid a 'const int *'
| `-CompoundStmt 0x55ec4ca51ee0 <line:435:1, line:442:1>
|   `-ReturnStmt 0x55ec4ca51ec8 <line:441:5, col:12>
|     `-IntegerLiteral 0x55ec4ca51ea8 <col:12> 'int' 0
|-FunctionDecl 0x55ec4ca52068 <line:444:1, line:455:1> line:444:5 invalid BN_set_word 'int (int *, int)'
| |-ParmVarDecl 0x55ec4ca51f10 <col:17, col:25> col:25 invalid a 'int *'
| |-ParmVarDecl 0x55ec4ca51f88 <col:28, col:37> col:37 invalid w 'int'
| `-CompoundStmt 0x55ec4ca52440 <line:445:1, line:455:1>
|   |-IfStmt 0x55ec4ca52308 <line:447:5, line:448:18>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca522e8 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55ec4ca522d0 <col:9, col:18>
|   | | `-ParenExpr 0x55ec4ca522b0 <col:16, col:18> 'int'
|   | |   `-IntegerLiteral 0x55ec4ca52290 <col:17> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55ec4ca52428 <line:454:5, col:14>
|     `-ParenExpr 0x55ec4ca52408 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55ec4ca523e8 <col:13> 'int' 1
|-FunctionDecl 0x55ec4ca52678 <line:457:1, line:500:1> line:457:9 invalid BN_bin2bn 'int *(const unsigned char *, int, int *)'
| |-ParmVarDecl 0x55ec4ca524a0 <col:19, col:40> col:40 used s 'const unsigned char *'
| |-ParmVarDecl 0x55ec4ca52518 <col:43, col:47> col:47 used len 'int'
| |-ParmVarDecl 0x55ec4ca52590 <col:52, col:60> col:60 invalid ret 'int *'
| `-CompoundStmt 0x55ec4ca539d0 <line:458:1, line:500:1>
|   |-DeclStmt 0x55ec4ca52850 <line:459:5, col:22>
|   | |-VarDecl 0x55ec4ca52760 <col:5, col:18> col:18 used i 'unsigned int'
|   | `-VarDecl 0x55ec4ca527d8 <col:5, col:21> col:21 used m 'unsigned int'
|   |-DeclStmt 0x55ec4ca528e0 <line:460:5, col:19>
|   | `-VarDecl 0x55ec4ca52880 <col:5, col:18> col:18 used n 'unsigned int'
|   |-ForStmt 0x55ec4ca52b98 <line:470:5, line:471:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca52ab0 <line:470:13, col:30> 'int' '&&'
|   | | |-BinaryOperator 0x55ec4ca52998 <col:13, col:19> 'int' '>'
|   | | | |-ImplicitCastExpr 0x55ec4ca52980 <col:13> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55ec4ca52920 <col:13> 'int' lvalue ParmVar 0x55ec4ca52518 'len' 'int'
|   | | | `-IntegerLiteral 0x55ec4ca52960 <col:19> 'int' 0
|   | | `-BinaryOperator 0x55ec4ca52a88 <col:24, col:30> 'int' '=='
|   | |   |-ImplicitCastExpr 0x55ec4ca52a70 <col:24, col:25> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x55ec4ca52a58 <col:24, col:25> 'unsigned char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x55ec4ca52a18 <col:24, col:25> 'const unsigned char' lvalue prefix '*'
|   | |   |     `-ImplicitCastExpr 0x55ec4ca52a00 <col:25> 'const unsigned char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55ec4ca529c0 <col:25> 'const unsigned char *' lvalue ParmVar 0x55ec4ca524a0 's' 'const unsigned char *'
|   | |   `-IntegerLiteral 0x55ec4ca52a38 <col:30> 'int' 0
|   | |-BinaryOperator 0x55ec4ca52b68 <col:33, col:41> 'int' ','
|   | | |-UnaryOperator 0x55ec4ca52b00 <col:33, col:34> 'const unsigned char *' postfix '++'
|   | | | `-DeclRefExpr 0x55ec4ca52ad8 <col:33> 'const unsigned char *' lvalue ParmVar 0x55ec4ca524a0 's' 'const unsigned char *'
|   | | `-UnaryOperator 0x55ec4ca52b48 <col:38, col:41> 'int' postfix '--'
|   | |   `-DeclRefExpr 0x55ec4ca52b20 <col:38> 'int' lvalue ParmVar 0x55ec4ca52518 'len' 'int'
|   | `-ContinueStmt 0x55ec4ca52b90 <line:471:9>
|   |-BinaryOperator 0x55ec4ca52c68 <line:472:5, col:9> 'unsigned int' '='
|   | |-DeclRefExpr 0x55ec4ca52bd0 <col:5> 'unsigned int' lvalue Var 0x55ec4ca52880 'n' 'unsigned int'
|   | `-ImplicitCastExpr 0x55ec4ca52c50 <col:9> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x55ec4ca52c38 <col:9> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55ec4ca52c10 <col:9> 'int' lvalue ParmVar 0x55ec4ca52518 'len' 'int'
|   |-IfStmt 0x55ec4ca52d60 <line:473:5, line:476:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca52d08 <line:473:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x55ec4ca52cd8 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca52c90 <col:9> 'unsigned int' lvalue Var 0x55ec4ca52880 'n' 'unsigned int'
|   | | `-ImplicitCastExpr 0x55ec4ca52cf0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x55ec4ca52cb8 <col:14> 'int' 0
|   | |-CompoundStmt 0x55ec4ca52d50 <col:17, line:476:5>
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca53550 <line:479:5, line:482:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca53530 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55ec4ca53520 <line:479:42, line:482:5>
|   | `-<<<NULL>>>
|   `-WhileStmt 0x55ec4ca53898 <line:486:5, line:493:5>
|     |-<<<NULL>>>
|     |-UnaryOperator 0x55ec4ca53618 <line:486:12, col:13> 'unsigned int' postfix '--'
|     | `-DeclRefExpr 0x55ec4ca535f0 <col:12> 'unsigned int' lvalue Var 0x55ec4ca52880 'n' 'unsigned int'
|     `-CompoundStmt 0x55ec4ca53880 <col:17, line:493:5>
|       `-IfStmt 0x55ec4ca53848 <line:488:9, line:492:9>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-BinaryOperator 0x55ec4ca53760 <line:488:13, col:20> 'int' '=='
|         | |-UnaryOperator 0x55ec4ca53708 <col:13, col:14> 'unsigned int' postfix '--'
|         | | `-DeclRefExpr 0x55ec4ca536e0 <col:13> 'unsigned int' lvalue Var 0x55ec4ca527d8 'm' 'unsigned int'
|         | `-ImplicitCastExpr 0x55ec4ca53748 <col:20> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x55ec4ca53728 <col:20> 'int' 0
|         |-CompoundStmt 0x55ec4ca53838 <col:23, line:492:9>
|         `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca53c38 <line:503:1, line:543:1> line:503:12 invalid bn2binpad 'int (const int *, unsigned char *, int)' static
| |-ParmVarDecl 0x55ec4ca53a30 <col:22, col:36> col:36 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca53ad0 <col:39, col:54> col:54 used to 'unsigned char *'
| |-ParmVarDecl 0x55ec4ca53b48 <col:58, col:62> col:62 used tolen 'int'
| `-CompoundStmt 0x55ec4ca54818 <line:504:1, line:543:1>
|   |-DeclStmt 0x55ec4ca53d80 <line:505:5, col:10>
|   | `-VarDecl 0x55ec4ca53d20 <col:5, col:9> col:9 used n 'int'
|   |-IfStmt 0x55ec4ca54328 <line:515:5, line:524:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca53f88 <line:515:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x55ec4ca53f70 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca53ef0 <col:9> 'int' lvalue ParmVar 0x55ec4ca53b48 'tolen' 'int'
|   | | `-UnaryOperator 0x55ec4ca53f50 <col:18, col:19> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x55ec4ca53f30 <col:19> 'int' 1
|   | |-CompoundStmt 0x55ec4ca54040 <col:22, line:517:5>
|   | | `-BinaryOperator 0x55ec4ca54018 <line:516:9, col:17> 'int' '='
|   | |   |-DeclRefExpr 0x55ec4ca53fb0 <col:9> 'int' lvalue ParmVar 0x55ec4ca53b48 'tolen' 'int'
|   | |   `-ImplicitCastExpr 0x55ec4ca54000 <col:17> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55ec4ca53fd8 <col:17> 'int' lvalue Var 0x55ec4ca53d20 'n' 'int'
|   | `-IfStmt 0x55ec4ca542f0 <line:517:12, line:524:5>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x55ec4ca540d8 <line:517:16, col:24> 'int' '<'
|   |   | |-ImplicitCastExpr 0x55ec4ca540a8 <col:16> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55ec4ca54058 <col:16> 'int' lvalue ParmVar 0x55ec4ca53b48 'tolen' 'int'
|   |   | `-ImplicitCastExpr 0x55ec4ca540c0 <col:24> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55ec4ca54080 <col:24> 'int' lvalue Var 0x55ec4ca53d20 'n' 'int'
|   |   |-CompoundStmt 0x55ec4ca542b0 <col:27, line:524:5>
|   |   | `-IfStmt 0x55ec4ca54278 <line:522:9, line:523:21>
|   |   |   |-<<<NULL>>>
|   |   |   |-<<<NULL>>>
|   |   |   |-BinaryOperator 0x55ec4ca541f8 <line:522:13, col:21> 'int' '<'
|   |   |   | |-ImplicitCastExpr 0x55ec4ca541c8 <col:13> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec4ca54178 <col:13> 'int' lvalue ParmVar 0x55ec4ca53b48 'tolen' 'int'
|   |   |   | `-ImplicitCastExpr 0x55ec4ca541e0 <col:21> 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55ec4ca541a0 <col:21> 'int' lvalue Var 0x55ec4ca53d20 'n' 'int'
|   |   |   |-ReturnStmt 0x55ec4ca54260 <line:523:13, col:21>
|   |   |   | `-UnaryOperator 0x55ec4ca54240 <col:20, col:21> 'int' prefix '-'
|   |   |   |   `-IntegerLiteral 0x55ec4ca54220 <col:21> 'int' 1
|   |   |   `-<<<NULL>>>
|   |   `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca54550 <line:528:5, line:531:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca54530 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55ec4ca54510 <line:528:20, line:531:5>
|   | | |-CallExpr 0x55ec4ca54450 <line:529:9, col:34> 'int'
|   | | | |-ImplicitCastExpr 0x55ec4ca54438 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55ec4ca54380 <col:9> 'int ()' Function 0x55ec4ca4b568 'OPENSSL_cleanse' 'int ()'
|   | | | |-ImplicitCastExpr 0x55ec4ca54488 <col:25> 'unsigned char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55ec4ca543a8 <col:25> 'unsigned char *' lvalue ParmVar 0x55ec4ca53ad0 'to' 'unsigned char *'
|   | | | `-ImplicitCastExpr 0x55ec4ca544a0 <col:29> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55ec4ca543e8 <col:29> 'int' lvalue ParmVar 0x55ec4ca53b48 'tolen' 'int'
|   | | `-ReturnStmt 0x55ec4ca544f8 <line:530:9, col:16>
|   | |   `-ImplicitCastExpr 0x55ec4ca544e0 <col:16> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55ec4ca544b8 <col:16> 'int' lvalue ParmVar 0x55ec4ca53b48 'tolen' 'int'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55ec4ca54800 <line:542:5, col:12>
|     `-ImplicitCastExpr 0x55ec4ca547e8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55ec4ca547c0 <col:12> 'int' lvalue ParmVar 0x55ec4ca53b48 'tolen' 'int'
|-FunctionDecl 0x55ec4ca549f0 <line:545:1, line:550:1> line:545:5 invalid BN_bn2binpad 'int (const int *, unsigned char *, int)'
| |-ParmVarDecl 0x55ec4ca54860 <col:18, col:32> col:32 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca548d8 <col:35, col:50> col:50 used to 'unsigned char *'
| |-ParmVarDecl 0x55ec4ca54950 <col:54, col:58> col:58 used tolen 'int'
| `-CompoundStmt 0x55ec4ca54c58 <line:546:1, line:550:1>
|   `-IfStmt 0x55ec4ca54bb8 <line:547:5, line:548:17>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55ec4ca54b38 <line:547:9, col:17> 'int' '<'
|     | |-ImplicitCastExpr 0x55ec4ca54b20 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ec4ca54ac0 <col:9> 'int' lvalue ParmVar 0x55ec4ca54950 'tolen' 'int'
|     | `-IntegerLiteral 0x55ec4ca54b00 <col:17> 'int' 0
|     |-ReturnStmt 0x55ec4ca54ba0 <line:548:9, col:17>
|     | `-UnaryOperator 0x55ec4ca54b80 <col:16, col:17> 'int' prefix '-'
|     |   `-IntegerLiteral 0x55ec4ca54b60 <col:17> 'int' 1
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca54dd8 <line:552:1, line:555:1> line:552:5 invalid BN_bn2bin 'int (const int *, unsigned char *)'
| |-ParmVarDecl 0x55ec4ca54c88 <col:15, col:29> col:29 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca54d00 <col:32, col:47> col:47 used to 'unsigned char *'
| `-CompoundStmt 0x55ec4ca54f20 <line:553:1, line:555:1>
|-FunctionDecl 0x55ec4ca550d8 <line:557:1, line:602:1> line:557:9 invalid BN_lebin2bn 'int *(const unsigned char *, int, int *)'
| |-ParmVarDecl 0x55ec4ca54f48 <col:21, col:42> col:42 used s 'const unsigned char *'
| |-ParmVarDecl 0x55ec4ca54fc0 <col:45, col:49> col:49 used len 'int'
| |-ParmVarDecl 0x55ec4ca55038 <col:54, col:62> col:62 invalid ret 'int *'
| `-CompoundStmt 0x55ec4ca55fb0 <line:558:1, line:602:1>
|   |-DeclStmt 0x55ec4ca552b0 <line:559:5, col:22>
|   | |-VarDecl 0x55ec4ca551c0 <col:5, col:18> col:18 used i 'unsigned int'
|   | `-VarDecl 0x55ec4ca55238 <col:5, col:21> col:21 used m 'unsigned int'
|   |-DeclStmt 0x55ec4ca55360 <line:560:5, col:19>
|   | `-VarDecl 0x55ec4ca55300 <col:5, col:18> col:18 used n 'unsigned int'
|   |-CompoundAssignOperator 0x55ec4ca55438 <line:569:5, col:10> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   | |-DeclRefExpr 0x55ec4ca553a0 <col:5> 'const unsigned char *' lvalue ParmVar 0x55ec4ca54f48 's' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x55ec4ca55420 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ec4ca553e0 <col:10> 'int' lvalue ParmVar 0x55ec4ca54fc0 'len' 'int'
|   |-ForStmt 0x55ec4ca55700 <line:571:5, line:572:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca55618 <line:571:13, col:33> 'int' '&&'
|   | | |-BinaryOperator 0x55ec4ca554d0 <col:13, col:19> 'int' '>'
|   | | | |-ImplicitCastExpr 0x55ec4ca554b8 <col:13> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55ec4ca55470 <col:13> 'int' lvalue ParmVar 0x55ec4ca54fc0 'len' 'int'
|   | | | `-IntegerLiteral 0x55ec4ca55498 <col:19> 'int' 0
|   | | `-BinaryOperator 0x55ec4ca555f0 <col:24, col:33> 'int' '=='
|   | |   |-ImplicitCastExpr 0x55ec4ca555d8 <col:24, col:28> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x55ec4ca555c0 <col:24, col:28> 'unsigned char' <LValueToRValue>
|   | |   |   `-ArraySubscriptExpr 0x55ec4ca55578 <col:24, col:28> 'const unsigned char' lvalue
|   | |   |     |-ImplicitCastExpr 0x55ec4ca55560 <col:24> 'const unsigned char *' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x55ec4ca554f8 <col:24> 'const unsigned char *' lvalue ParmVar 0x55ec4ca54f48 's' 'const unsigned char *'
|   | |   |     `-UnaryOperator 0x55ec4ca55540 <col:26, col:27> 'int' prefix '-'
|   | |   |       `-IntegerLiteral 0x55ec4ca55520 <col:27> 'int' 1
|   | |   `-IntegerLiteral 0x55ec4ca555a0 <col:33> 'int' 0
|   | |-BinaryOperator 0x55ec4ca556d0 <col:36, col:44> 'int' ','
|   | | |-UnaryOperator 0x55ec4ca55668 <col:36, col:37> 'const unsigned char *' postfix '--'
|   | | | `-DeclRefExpr 0x55ec4ca55640 <col:36> 'const unsigned char *' lvalue ParmVar 0x55ec4ca54f48 's' 'const unsigned char *'
|   | | `-UnaryOperator 0x55ec4ca556b0 <col:41, col:44> 'int' postfix '--'
|   | |   `-DeclRefExpr 0x55ec4ca55688 <col:41> 'int' lvalue ParmVar 0x55ec4ca54fc0 'len' 'int'
|   | `-ContinueStmt 0x55ec4ca556f8 <line:572:9>
|   |-BinaryOperator 0x55ec4ca557d0 <line:573:5, col:9> 'unsigned int' '='
|   | |-DeclRefExpr 0x55ec4ca55738 <col:5> 'unsigned int' lvalue Var 0x55ec4ca55300 'n' 'unsigned int'
|   | `-ImplicitCastExpr 0x55ec4ca557b8 <col:9> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x55ec4ca557a0 <col:9> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55ec4ca55778 <col:9> 'int' lvalue ParmVar 0x55ec4ca54fc0 'len' 'int'
|   |-IfStmt 0x55ec4ca558c8 <line:574:5, line:577:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca55870 <line:574:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x55ec4ca55840 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca557f8 <col:9> 'unsigned int' lvalue Var 0x55ec4ca55300 'n' 'unsigned int'
|   | | `-ImplicitCastExpr 0x55ec4ca55858 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x55ec4ca55820 <col:14> 'int' 0
|   | |-CompoundStmt 0x55ec4ca558b8 <col:17, line:577:5>
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca55bf8 <line:580:5, line:583:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca55bd8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55ec4ca55bc8 <line:580:42, line:583:5>
|   | `-<<<NULL>>>
|   `-WhileStmt 0x55ec4ca55f68 <line:587:5, line:595:5>
|     |-<<<NULL>>>
|     |-UnaryOperator 0x55ec4ca55cc0 <line:587:12, col:13> 'unsigned int' postfix '--'
|     | `-DeclRefExpr 0x55ec4ca55c98 <col:12> 'unsigned int' lvalue Var 0x55ec4ca55300 'n' 'unsigned int'
|     `-CompoundStmt 0x55ec4ca55f48 <col:17, line:595:5>
|       |-UnaryOperator 0x55ec4ca55d08 <line:588:9, col:10> 'const unsigned char *' postfix '--'
|       | `-DeclRefExpr 0x55ec4ca55ce0 <col:9> 'const unsigned char *' lvalue ParmVar 0x55ec4ca54f48 's' 'const unsigned char *'
|       `-IfStmt 0x55ec4ca55f10 <line:590:9, line:594:9>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-BinaryOperator 0x55ec4ca55e28 <line:590:13, col:20> 'int' '=='
|         | |-UnaryOperator 0x55ec4ca55dd0 <col:13, col:14> 'unsigned int' postfix '--'
|         | | `-DeclRefExpr 0x55ec4ca55da8 <col:13> 'unsigned int' lvalue Var 0x55ec4ca55238 'm' 'unsigned int'
|         | `-ImplicitCastExpr 0x55ec4ca55e10 <col:20> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x55ec4ca55df0 <col:20> 'int' 0
|         |-CompoundStmt 0x55ec4ca55f00 <col:23, line:594:9>
|         `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca561a8 <line:604:1, line:622:1> line:604:5 invalid BN_bn2lebinpad 'int (const int *, unsigned char *, int)'
| |-ParmVarDecl 0x55ec4ca56018 <col:20, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca56090 <col:37, col:52> col:52 used to 'unsigned char *'
| |-ParmVarDecl 0x55ec4ca56108 <col:56, col:60> col:60 used tolen 'int'
| `-CompoundStmt 0x55ec4ca56d38 <line:605:1, line:622:1>
|   |-DeclStmt 0x55ec4ca56310 <line:606:5, col:10>
|   | `-VarDecl 0x55ec4ca56290 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x55ec4ca564d0 <line:610:5, line:611:17>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca56450 <line:610:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x55ec4ca56420 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca563b8 <col:9> 'int' lvalue ParmVar 0x55ec4ca56108 'tolen' 'int'
|   | | `-ImplicitCastExpr 0x55ec4ca56438 <col:17> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ec4ca563f8 <col:17> 'int' lvalue Var 0x55ec4ca56290 'i' 'int'
|   | |-ReturnStmt 0x55ec4ca564b8 <line:611:9, col:17>
|   | | `-UnaryOperator 0x55ec4ca56498 <col:16, col:17> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x55ec4ca56478 <col:17> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca56a50 <line:613:5, line:614:36>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca56588 <line:613:9, col:17> 'int' '>'
|   | | |-ImplicitCastExpr 0x55ec4ca56558 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca56508 <col:9> 'int' lvalue ParmVar 0x55ec4ca56108 'tolen' 'int'
|   | | `-ImplicitCastExpr 0x55ec4ca56570 <col:17> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ec4ca56530 <col:17> 'int' lvalue Var 0x55ec4ca56290 'i' 'int'
|   | |-CallExpr 0x55ec4ca569e0 <line:614:9, col:36> 'void *'
|   | | |-ImplicitCastExpr 0x55ec4ca569c8 <col:9> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x55ec4ca567d0 <col:9> 'void *(void *, int, unsigned long)' Function 0x55ec4ca565f8 'memset' 'void *(void *, int, unsigned long)'
|   | | |-ImplicitCastExpr 0x55ec4ca56a20 <col:16, col:21> 'void *' <BitCast>
|   | | | `-BinaryOperator 0x55ec4ca568a8 <col:16, col:21> 'unsigned char *' '+'
|   | | |   |-ImplicitCastExpr 0x55ec4ca56878 <col:16> 'unsigned char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55ec4ca56810 <col:16> 'unsigned char *' lvalue ParmVar 0x55ec4ca56090 'to' 'unsigned char *'
|   | | |   `-ImplicitCastExpr 0x55ec4ca56890 <col:21> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55ec4ca56850 <col:21> 'int' lvalue Var 0x55ec4ca56290 'i' 'int'
|   | | |-IntegerLiteral 0x55ec4ca568d0 <col:24> 'int' 0
|   | | `-ImplicitCastExpr 0x55ec4ca56a38 <col:27, col:35> 'unsigned long' <IntegralCast>
|   | |   `-BinaryOperator 0x55ec4ca56970 <col:27, col:35> 'int' '-'
|   | |     |-ImplicitCastExpr 0x55ec4ca56940 <col:27> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x55ec4ca568f0 <col:27> 'int' lvalue ParmVar 0x55ec4ca56108 'tolen' 'int'
|   | |     `-ImplicitCastExpr 0x55ec4ca56958 <col:35> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55ec4ca56918 <col:35> 'int' lvalue Var 0x55ec4ca56290 'i' 'int'
|   | `-<<<NULL>>>
|   |-CompoundAssignOperator 0x55ec4ca56af0 <line:615:5, col:11> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |-DeclRefExpr 0x55ec4ca56a88 <col:5> 'unsigned char *' lvalue ParmVar 0x55ec4ca56090 'to' 'unsigned char *'
|   | `-ImplicitCastExpr 0x55ec4ca56ad8 <col:11> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ec4ca56ab0 <col:11> 'int' lvalue Var 0x55ec4ca56290 'i' 'int'
|   |-WhileStmt 0x55ec4ca56cc0 <line:616:5, line:620:5>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x55ec4ca56b50 <line:616:12, col:13> 'int' postfix '--'
|   | | `-DeclRefExpr 0x55ec4ca56b28 <col:12> 'int' lvalue Var 0x55ec4ca56290 'i' 'int'
|   | `-CompoundStmt 0x55ec4ca56ca8 <col:17, line:620:5>
|   |   `-UnaryOperator 0x55ec4ca56bc0 <line:618:9, col:11> 'unsigned char *' postfix '--'
|   |     `-DeclRefExpr 0x55ec4ca56b98 <col:9> 'unsigned char *' lvalue ParmVar 0x55ec4ca56090 'to' 'unsigned char *'
|   `-ReturnStmt 0x55ec4ca56d20 <line:621:5, col:12>
|     `-ImplicitCastExpr 0x55ec4ca56d08 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55ec4ca56ce0 <col:12> 'int' lvalue ParmVar 0x55ec4ca56108 'tolen' 'int'
|-FunctionDecl 0x55ec4ca565f8 <line:614:9> col:9 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x55ec4ca56698 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x55ec4ca566f8 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x55ec4ca56758 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x55ec4ca56ee8 <line:624:1, line:644:1> line:624:5 invalid BN_ucmp 'int (const int *, const int *)'
| |-ParmVarDecl 0x55ec4ca56d90 <col:13, col:27> col:27 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca56e08 <col:30, col:44> col:44 invalid b 'const int *'
| `-CompoundStmt 0x55ec4ca57490 <line:625:1, line:644:1>
|   |-DeclStmt 0x55ec4ca57028 <line:626:5, col:10>
|   | `-VarDecl 0x55ec4ca56fc8 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x55ec4ca571d0 <line:633:5, line:634:18>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca57130 <line:633:9, col:14> 'int' '!='
|   | | |-ImplicitCastExpr 0x55ec4ca57118 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca570d0 <col:9> 'int' lvalue Var 0x55ec4ca56fc8 'i' 'int'
|   | | `-IntegerLiteral 0x55ec4ca570f8 <col:14> 'int' 0
|   | |-ReturnStmt 0x55ec4ca571b8 <line:634:9, col:18>
|   | | `-ImplicitCastExpr 0x55ec4ca571a0 <col:16, col:18> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x55ec4ca57180 <col:16, col:18> 'int' lvalue
|   | |     `-DeclRefExpr 0x55ec4ca57158 <col:17> 'int' lvalue Var 0x55ec4ca56fc8 'i' 'int'
|   | `-<<<NULL>>>
|   |-ForStmt 0x55ec4ca57400 <line:637:5, line:642:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca572b0 <line:637:26, col:31> 'int' '>='
|   | | |-ImplicitCastExpr 0x55ec4ca57298 <col:26> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca57250 <col:26> 'int' lvalue Var 0x55ec4ca56fc8 'i' 'int'
|   | | `-IntegerLiteral 0x55ec4ca57278 <col:31> 'int' 0
|   | |-UnaryOperator 0x55ec4ca57320 <col:34, col:35> 'int' postfix '--'
|   | | `-DeclRefExpr 0x55ec4ca572d8 <col:34> 'int' lvalue Var 0x55ec4ca56fc8 'i' 'int'
|   | `-CompoundStmt 0x55ec4ca573f0 <col:39, line:642:5>
|   `-ReturnStmt 0x55ec4ca57478 <line:643:5, col:14>
|     `-ParenExpr 0x55ec4ca57458 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55ec4ca57438 <col:13> 'int' 0
|-FunctionDecl 0x55ec4ca575e8 <line:646:1, line:691:1> line:646:5 invalid BN_cmp 'int (const int *, const int *)'
| |-ParmVarDecl 0x55ec4ca574d8 <col:12, col:26> col:26 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca57550 <col:29, col:43> col:43 invalid b 'const int *'
| `-CompoundStmt 0x55ec4ca58508 <line:647:1, line:691:1>
|   |-DeclStmt 0x55ec4ca57728 <line:648:5, col:10>
|   | `-VarDecl 0x55ec4ca576c8 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x55ec4ca57848 <line:649:5, col:15>
|   | |-VarDecl 0x55ec4ca57758 <col:5, col:9> col:9 used gt 'int'
|   | `-VarDecl 0x55ec4ca577d0 <col:5, col:13> col:13 used lt 'int'
|   |-IfStmt 0x55ec4ca57a70 <line:652:5, line:659:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca57a50 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55ec4ca57a38 <line:652:37, line:659:5>
|   | | `-IfStmt 0x55ec4ca57a00 <line:653:9, line:658:22>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-OpaqueValueExpr 0x55ec4ca579e0 <<invalid sloc>> '_Bool'
|   | |   |-ReturnStmt 0x55ec4ca578c0 <line:654:13, col:23>
|   | |   | `-ParenExpr 0x55ec4ca578a0 <col:20, col:23> 'int'
|   | |   |   `-UnaryOperator 0x55ec4ca57880 <col:21, col:22> 'int' prefix '-'
|   | |   |     `-IntegerLiteral 0x55ec4ca57860 <col:22> 'int' 1
|   | |   `-IfStmt 0x55ec4ca579a8 <line:655:14, line:658:22>
|   | |     |-<<<NULL>>>
|   | |     |-<<<NULL>>>
|   | |     |-OpaqueValueExpr 0x55ec4ca57988 <<invalid sloc>> '_Bool'
|   | |     |-ReturnStmt 0x55ec4ca57918 <line:656:13, col:22>
|   | |     | `-ParenExpr 0x55ec4ca578f8 <col:20, col:22> 'int'
|   | |     |   `-IntegerLiteral 0x55ec4ca578d8 <col:21> 'int' 1
|   | |     `-ReturnStmt 0x55ec4ca57970 <line:658:13, col:22>
|   | |       `-ParenExpr 0x55ec4ca57950 <col:20, col:22> 'int'
|   | |         `-IntegerLiteral 0x55ec4ca57930 <col:21> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca57c58 <line:664:5, line:669:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca57c38 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55ec4ca57c20 <line:664:27, line:669:5>
|   | | `-IfStmt 0x55ec4ca57be8 <line:665:9, line:668:22>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-OpaqueValueExpr 0x55ec4ca57bc8 <<invalid sloc>> '_Bool'
|   | |   |-ReturnStmt 0x55ec4ca57b58 <line:666:13, col:23>
|   | |   | `-ParenExpr 0x55ec4ca57b38 <col:20, col:23> 'int'
|   | |   |   `-UnaryOperator 0x55ec4ca57b18 <col:21, col:22> 'int' prefix '-'
|   | |   |     `-IntegerLiteral 0x55ec4ca57af8 <col:22> 'int' 1
|   | |   `-ReturnStmt 0x55ec4ca57bb0 <line:668:13, col:22>
|   | |     `-ParenExpr 0x55ec4ca57b90 <col:20, col:22> 'int'
|   | |       `-IntegerLiteral 0x55ec4ca57b70 <col:21> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca57f40 <line:670:5, line:676:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca57f20 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55ec4ca57de0 <line:670:22, line:673:5>
|   | | |-BinaryOperator 0x55ec4ca57d10 <line:671:9, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x55ec4ca57cb0 <col:9> 'int' lvalue Var 0x55ec4ca57758 'gt' 'int'
|   | | | `-IntegerLiteral 0x55ec4ca57cf0 <col:14> 'int' 1
|   | | `-BinaryOperator 0x55ec4ca57db8 <line:672:9, col:15> 'int' '='
|   | |   |-DeclRefExpr 0x55ec4ca57d38 <col:9> 'int' lvalue Var 0x55ec4ca577d0 'lt' 'int'
|   | |   `-UnaryOperator 0x55ec4ca57d98 <col:14, col:15> 'int' prefix '-'
|   | |     `-IntegerLiteral 0x55ec4ca57d78 <col:15> 'int' 1
|   | `-CompoundStmt 0x55ec4ca57f00 <line:673:12, line:676:5>
|   |   |-BinaryOperator 0x55ec4ca57e68 <line:674:9, col:15> 'int' '='
|   |   | |-DeclRefExpr 0x55ec4ca57e00 <col:9> 'int' lvalue Var 0x55ec4ca57758 'gt' 'int'
|   |   | `-UnaryOperator 0x55ec4ca57e48 <col:14, col:15> 'int' prefix '-'
|   |   |   `-IntegerLiteral 0x55ec4ca57e28 <col:15> 'int' 1
|   |   `-BinaryOperator 0x55ec4ca57ed8 <line:675:9, col:14> 'int' '='
|   |     |-DeclRefExpr 0x55ec4ca57e90 <col:9> 'int' lvalue Var 0x55ec4ca577d0 'lt' 'int'
|   |     `-IntegerLiteral 0x55ec4ca57eb8 <col:14> 'int' 1
|   |-IfStmt 0x55ec4ca58010 <line:678:5, line:679:19>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca57ff0 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55ec4ca57fd8 <col:9, col:19>
|   | | `-ImplicitCastExpr 0x55ec4ca57fc0 <col:16, col:19> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x55ec4ca57fa0 <col:16, col:19> 'int' lvalue
|   | |     `-DeclRefExpr 0x55ec4ca57f78 <col:17> 'int' lvalue Var 0x55ec4ca57758 'gt' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca580e0 <line:680:5, line:681:19>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca580c0 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55ec4ca580a8 <col:9, col:19>
|   | | `-ImplicitCastExpr 0x55ec4ca58090 <col:16, col:19> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x55ec4ca58070 <col:16, col:19> 'int' lvalue
|   | |     `-DeclRefExpr 0x55ec4ca58048 <col:17> 'int' lvalue Var 0x55ec4ca577d0 'lt' 'int'
|   | `-<<<NULL>>>
|   |-ForStmt 0x55ec4ca58478 <line:682:5, line:689:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca581d8 <line:682:26, col:31> 'int' '>='
|   | | |-ImplicitCastExpr 0x55ec4ca581c0 <col:26> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca58178 <col:26> 'int' lvalue Var 0x55ec4ca576c8 'i' 'int'
|   | | `-IntegerLiteral 0x55ec4ca581a0 <col:31> 'int' 0
|   | |-UnaryOperator 0x55ec4ca58228 <col:34, col:35> 'int' postfix '--'
|   | | `-DeclRefExpr 0x55ec4ca58200 <col:34> 'int' lvalue Var 0x55ec4ca576c8 'i' 'int'
|   | `-CompoundStmt 0x55ec4ca58458 <col:39, line:689:5>
|   |   |-IfStmt 0x55ec4ca58350 <line:685:9, line:686:23>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-OpaqueValueExpr 0x55ec4ca58330 <<invalid sloc>> '_Bool'
|   |   | |-ReturnStmt 0x55ec4ca582f8 <col:13, col:23>
|   |   | | `-ImplicitCastExpr 0x55ec4ca582e0 <col:20, col:23> 'int' <LValueToRValue>
|   |   | |   `-ParenExpr 0x55ec4ca582c0 <col:20, col:23> 'int' lvalue
|   |   | |     `-DeclRefExpr 0x55ec4ca58298 <col:21> 'int' lvalue Var 0x55ec4ca57758 'gt' 'int'
|   |   | `-<<<NULL>>>
|   |   `-IfStmt 0x55ec4ca58420 <line:687:9, line:688:23>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-OpaqueValueExpr 0x55ec4ca58400 <<invalid sloc>> '_Bool'
|   |     |-ReturnStmt 0x55ec4ca583e8 <col:13, col:23>
|   |     | `-ImplicitCastExpr 0x55ec4ca583d0 <col:20, col:23> 'int' <LValueToRValue>
|   |     |   `-ParenExpr 0x55ec4ca583b0 <col:20, col:23> 'int' lvalue
|   |     |     `-DeclRefExpr 0x55ec4ca58388 <col:21> 'int' lvalue Var 0x55ec4ca577d0 'lt' 'int'
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x55ec4ca584f0 <line:690:5, col:14>
|     `-ParenExpr 0x55ec4ca584d0 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55ec4ca584b0 <col:13> 'int' 0
|-FunctionDecl 0x55ec4ca58688 <line:693:1, line:714:1> line:693:5 invalid BN_set_bit 'int (int *, int)'
| |-ParmVarDecl 0x55ec4ca58578 <col:16, col:24> col:24 invalid a 'int *'
| |-ParmVarDecl 0x55ec4ca585f0 <col:27, col:31> col:31 used n 'int'
| `-CompoundStmt 0x55ec4ca58fe0 <line:694:1, line:714:1>
|   |-DeclStmt 0x55ec4ca588d8 <line:695:5, col:16>
|   | |-VarDecl 0x55ec4ca58768 <col:5, col:9> col:9 used i 'int'
|   | |-VarDecl 0x55ec4ca587e0 <col:5, col:12> col:12 used j 'int'
|   | `-VarDecl 0x55ec4ca58858 <col:5, col:15> col:15 used k 'int'
|   |-IfStmt 0x55ec4ca589c8 <line:697:5, line:698:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca58968 <line:697:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x55ec4ca58950 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca588f0 <col:9> 'int' lvalue ParmVar 0x55ec4ca585f0 'n' 'int'
|   | | `-IntegerLiteral 0x55ec4ca58930 <col:13> 'int' 0
|   | |-ReturnStmt 0x55ec4ca589b0 <line:698:9, col:16>
|   | | `-IntegerLiteral 0x55ec4ca58990 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca58ed8 <line:702:5, line:709:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca58eb8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55ec4ca58ea0 <line:702:22, line:709:5>
|   | | `-IfStmt 0x55ec4ca58c20 <line:703:9, line:704:22>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-OpaqueValueExpr 0x55ec4ca58c00 <<invalid sloc>> '_Bool'
|   | |   |-ReturnStmt 0x55ec4ca58be8 <col:13, col:22>
|   | |   | `-ParenExpr 0x55ec4ca58bc8 <col:20, col:22> 'int'
|   | |   |   `-IntegerLiteral 0x55ec4ca58ba8 <col:21> 'int' 0
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55ec4ca58fc8 <line:713:5, col:14>
|     `-ParenExpr 0x55ec4ca58fa8 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55ec4ca58f88 <col:13> 'int' 1
|-FunctionDecl 0x55ec4ca59138 <line:716:1, line:732:1> line:716:5 invalid BN_clear_bit 'int (int *, int)'
| |-ParmVarDecl 0x55ec4ca59028 <col:18, col:26> col:26 invalid a 'int *'
| |-ParmVarDecl 0x55ec4ca590a0 <col:29, col:33> col:33 used n 'int'
| `-CompoundStmt 0x55ec4ca596f0 <line:717:1, line:732:1>
|   |-DeclStmt 0x55ec4ca59308 <line:718:5, col:13>
|   | |-VarDecl 0x55ec4ca59218 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x55ec4ca59290 <col:5, col:12> col:12 used j 'int'
|   |-IfStmt 0x55ec4ca59440 <line:721:5, line:722:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca593e0 <line:721:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x55ec4ca593c8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca59368 <col:9> 'int' lvalue ParmVar 0x55ec4ca590a0 'n' 'int'
|   | | `-IntegerLiteral 0x55ec4ca593a8 <col:13> 'int' 0
|   | |-ReturnStmt 0x55ec4ca59428 <line:722:9, col:16>
|   | | `-IntegerLiteral 0x55ec4ca59408 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca595e8 <line:726:5, line:727:18>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca595c8 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55ec4ca595b0 <col:9, col:18>
|   | | `-ParenExpr 0x55ec4ca59590 <col:16, col:18> 'int'
|   | |   `-IntegerLiteral 0x55ec4ca59570 <col:17> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55ec4ca596d8 <line:731:5, col:14>
|     `-ParenExpr 0x55ec4ca596b8 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55ec4ca59698 <col:13> 'int' 1
|-FunctionDecl 0x55ec4ca59888 <line:734:1, line:746:1> line:734:5 invalid BN_is_bit_set 'int (const int *, int)'
| |-ParmVarDecl 0x55ec4ca59738 <col:19, col:33> col:33 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca597b0 <col:36, col:40> col:40 used n 'int'
| `-CompoundStmt 0x55ec4ca59d80 <line:735:1, line:746:1>
|   |-DeclStmt 0x55ec4ca59a58 <line:736:5, col:13>
|   | |-VarDecl 0x55ec4ca59968 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x55ec4ca599e0 <col:5, col:12> col:12 used j 'int'
|   |-IfStmt 0x55ec4ca59b70 <line:739:5, line:740:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca59b10 <line:739:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x55ec4ca59af8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca59a98 <col:9> 'int' lvalue ParmVar 0x55ec4ca597b0 'n' 'int'
|   | | `-IntegerLiteral 0x55ec4ca59ad8 <col:13> 'int' 0
|   | |-ReturnStmt 0x55ec4ca59b58 <line:740:9, col:16>
|   | | `-IntegerLiteral 0x55ec4ca59b38 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   `-IfStmt 0x55ec4ca59cf8 <line:743:5, line:744:16>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55ec4ca59cd8 <<invalid sloc>> '_Bool'
|     |-ReturnStmt 0x55ec4ca59cc0 <col:9, col:16>
|     | `-IntegerLiteral 0x55ec4ca59ca0 <col:16> 'int' 0
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca59ed0 <line:748:1, line:768:1> line:748:5 invalid BN_mask_bits 'int (int *, int)'
| |-ParmVarDecl 0x55ec4ca59dc0 <col:18, col:26> col:26 invalid a 'int *'
| |-ParmVarDecl 0x55ec4ca59e38 <col:29, col:33> col:33 used n 'int'
| `-CompoundStmt 0x55ec4ca5b5f8 <line:749:1, line:768:1>
|   |-DeclStmt 0x55ec4ca5a0a0 <line:750:5, col:13>
|   | |-VarDecl 0x55ec4ca59fb0 <col:5, col:9> col:9 used b 'int'
|   | `-VarDecl 0x55ec4ca5a028 <col:5, col:12> col:12 used w 'int'
|   |-IfStmt 0x55ec4ca5a1b8 <line:753:5, line:754:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca5a158 <line:753:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x55ec4ca5a140 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca5a0e0 <col:9> 'int' lvalue ParmVar 0x55ec4ca59e38 'n' 'int'
|   | | `-IntegerLiteral 0x55ec4ca5a120 <col:13> 'int' 0
|   | |-ReturnStmt 0x55ec4ca5a1a0 <line:754:9, col:16>
|   | | `-IntegerLiteral 0x55ec4ca5a180 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca5b360 <line:758:5, line:759:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55ec4ca5a320 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55ec4ca5a308 <col:9, col:16>
|   | | `-IntegerLiteral 0x55ec4ca5a2e8 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x55ec4ca5b540 <line:760:5, line:765:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca5b3f8 <line:760:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x55ec4ca5b3e0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca5b398 <col:9> 'int' lvalue Var 0x55ec4ca59fb0 'b' 'int'
|   | | `-IntegerLiteral 0x55ec4ca5b3c0 <col:14> 'int' 0
|   | |-NullStmt 0x55ec4ca5b530 <line:761:9>
|   | `-CompoundStmt 0x55ec4ca5b520 <line:762:10, line:765:5>
|   `-ReturnStmt 0x55ec4ca5b5e0 <line:767:5, col:14>
|     `-ParenExpr 0x55ec4ca5b5c0 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55ec4ca5b5a0 <col:13> 'int' 1
|-FunctionDecl 0x55ec4ca5b790 <line:770:1, line:776:1> line:770:6 invalid BN_set_negative 'void (int *, int)'
| |-ParmVarDecl 0x55ec4ca5b648 <col:22, col:30> col:30 invalid a 'int *'
| |-ParmVarDecl 0x55ec4ca5b6c0 <col:33, col:37> col:37 used b 'int'
| `-CompoundStmt 0x55ec4ca5b900 <line:771:1, line:776:1>
|-FunctionDecl 0x55ec4ca5bb08 <line:778:1, line:794:1> line:778:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x55ec4ca5b928 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca5b9a0 <col:37, col:53> col:53 invalid b 'const int *'
| |-ParmVarDecl 0x55ec4ca5ba18 <col:56, col:60> col:60 used n 'int'
| `-CompoundStmt 0x55ec4ca5c100 <line:779:1, line:794:1>
|   |-DeclStmt 0x55ec4ca5bc50 <line:780:5, col:10>
|   | `-VarDecl 0x55ec4ca5bbf0 <col:5, col:9> col:9 used i 'int'
|   |-ForStmt 0x55ec4ca5c070 <line:787:5, line:792:5>
|   | |-BinaryOperator 0x55ec4ca5beb8 <line:787:10, col:18> 'int' '='
|   | | |-DeclRefExpr 0x55ec4ca5bdf0 <col:10> 'int' lvalue Var 0x55ec4ca5bbf0 'i' 'int'
|   | | `-BinaryOperator 0x55ec4ca5be90 <col:14, col:18> 'int' '-'
|   | |   |-ImplicitCastExpr 0x55ec4ca5be78 <col:14> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55ec4ca5be30 <col:14> 'int' lvalue ParmVar 0x55ec4ca5ba18 'n' 'int'
|   | |   `-IntegerLiteral 0x55ec4ca5be58 <col:18> 'int' 2
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca5bf40 <col:21, col:26> 'int' '>='
|   | | |-ImplicitCastExpr 0x55ec4ca5bf28 <col:21> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca5bee0 <col:21> 'int' lvalue Var 0x55ec4ca5bbf0 'i' 'int'
|   | | `-IntegerLiteral 0x55ec4ca5bf08 <col:26> 'int' 0
|   | |-UnaryOperator 0x55ec4ca5bf90 <col:29, col:30> 'int' postfix '--'
|   | | `-DeclRefExpr 0x55ec4ca5bf68 <col:29> 'int' lvalue Var 0x55ec4ca5bbf0 'i' 'int'
|   | `-CompoundStmt 0x55ec4ca5c060 <col:34, line:792:5>
|   `-ReturnStmt 0x55ec4ca5c0e8 <line:793:5, col:14>
|     `-ParenExpr 0x55ec4ca5c0c8 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55ec4ca5c0a8 <col:13> 'int' 0
|-FunctionDecl 0x55ec4ca5c3b8 <line:805:1, line:823:1> line:805:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x55ec4ca5c140 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca5c1b8 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x55ec4ca5c230 <col:61, col:65> col:65 used cl 'int'
| |-ParmVarDecl 0x55ec4ca5c2a8 <col:69, col:73> col:73 used dl 'int'
| `-CompoundStmt 0x55ec4ca5cef0 <line:806:1, line:823:1>
|   |-DeclStmt 0x55ec4ca5c598 <line:807:5, col:13>
|   | |-VarDecl 0x55ec4ca5c4a8 <col:5, col:9> col:9 used n 'int'
|   | `-VarDecl 0x55ec4ca5c520 <col:5, col:12> col:12 used i 'int'
|   |-BinaryOperator 0x55ec4ca5c690 <line:808:5, col:14> 'int' '='
|   | |-DeclRefExpr 0x55ec4ca5c5b0 <col:5> 'int' lvalue Var 0x55ec4ca5c4a8 'n' 'int'
|   | `-BinaryOperator 0x55ec4ca5c668 <col:9, col:14> 'int' '-'
|   |   |-ImplicitCastExpr 0x55ec4ca5c650 <col:9> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55ec4ca5c5f0 <col:9> 'int' lvalue ParmVar 0x55ec4ca5c230 'cl' 'int'
|   |   `-IntegerLiteral 0x55ec4ca5c630 <col:14> 'int' 1
|   |-IfStmt 0x55ec4ca5cab0 <line:810:5, line:815:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca5c730 <line:810:9, col:14> 'int' '<'
|   | | |-ImplicitCastExpr 0x55ec4ca5c718 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca5c6b8 <col:9> 'int' lvalue ParmVar 0x55ec4ca5c2a8 'dl' 'int'
|   | | `-IntegerLiteral 0x55ec4ca5c6f8 <col:14> 'int' 0
|   | |-CompoundStmt 0x55ec4ca5ca98 <col:17, line:815:5>
|   | | `-ForStmt 0x55ec4ca5ca60 <line:811:9, line:814:9>
|   | |   |-BinaryOperator 0x55ec4ca5c7d8 <line:811:14, col:18> 'int' '='
|   | |   | |-DeclRefExpr 0x55ec4ca5c758 <col:14> 'int' lvalue Var 0x55ec4ca5c520 'i' 'int'
|   | |   | `-ImplicitCastExpr 0x55ec4ca5c7c0 <col:18> 'int' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55ec4ca5c798 <col:18> 'int' lvalue ParmVar 0x55ec4ca5c2a8 'dl' 'int'
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x55ec4ca5c860 <col:22, col:26> 'int' '<'
|   | |   | |-ImplicitCastExpr 0x55ec4ca5c848 <col:22> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x55ec4ca5c800 <col:22> 'int' lvalue Var 0x55ec4ca5c520 'i' 'int'
|   | |   | `-IntegerLiteral 0x55ec4ca5c828 <col:26> 'int' 0
|   | |   |-UnaryOperator 0x55ec4ca5c8b0 <col:29, col:30> 'int' postfix '++'
|   | |   | `-DeclRefExpr 0x55ec4ca5c888 <col:29> 'int' lvalue Var 0x55ec4ca5c520 'i' 'int'
|   | |   `-CompoundStmt 0x55ec4ca5ca48 <col:34, line:814:9>
|   | |     `-IfStmt 0x55ec4ca5ca10 <line:812:13, line:813:25>
|   | |       |-<<<NULL>>>
|   | |       |-<<<NULL>>>
|   | |       |-OpaqueValueExpr 0x55ec4ca5c9f0 <<invalid sloc>> '_Bool'
|   | |       |-ReturnStmt 0x55ec4ca5c9d8 <col:17, col:25>
|   | |       | `-UnaryOperator 0x55ec4ca5c9b8 <col:24, col:25> 'int' prefix '-'
|   | |       |   `-IntegerLiteral 0x55ec4ca5c998 <col:25> 'int' 1
|   | |       `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-IfStmt 0x55ec4ca5ce90 <line:816:5, line:821:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55ec4ca5cb48 <line:816:9, col:14> 'int' '>'
|     | |-ImplicitCastExpr 0x55ec4ca5cb30 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ec4ca5cae8 <col:9> 'int' lvalue ParmVar 0x55ec4ca5c2a8 'dl' 'int'
|     | `-IntegerLiteral 0x55ec4ca5cb10 <col:14> 'int' 0
|     |-CompoundStmt 0x55ec4ca5ce78 <col:17, line:821:5>
|     | `-ForStmt 0x55ec4ca5ce40 <line:817:9, line:820:9>
|     |   |-BinaryOperator 0x55ec4ca5cbd8 <line:817:14, col:18> 'int' '='
|     |   | |-DeclRefExpr 0x55ec4ca5cb70 <col:14> 'int' lvalue Var 0x55ec4ca5c520 'i' 'int'
|     |   | `-ImplicitCastExpr 0x55ec4ca5cbc0 <col:18> 'int' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x55ec4ca5cb98 <col:18> 'int' lvalue ParmVar 0x55ec4ca5c2a8 'dl' 'int'
|     |   |-<<<NULL>>>
|     |   |-BinaryOperator 0x55ec4ca5cc60 <col:22, col:26> 'int' '>'
|     |   | |-ImplicitCastExpr 0x55ec4ca5cc48 <col:22> 'int' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55ec4ca5cc00 <col:22> 'int' lvalue Var 0x55ec4ca5c520 'i' 'int'
|     |   | `-IntegerLiteral 0x55ec4ca5cc28 <col:26> 'int' 0
|     |   |-UnaryOperator 0x55ec4ca5ccb0 <col:29, col:30> 'int' postfix '--'
|     |   | `-DeclRefExpr 0x55ec4ca5cc88 <col:29> 'int' lvalue Var 0x55ec4ca5c520 'i' 'int'
|     |   `-CompoundStmt 0x55ec4ca5ce28 <col:34, line:820:9>
|     |     `-IfStmt 0x55ec4ca5cdf0 <line:818:13, line:819:24>
|     |       |-<<<NULL>>>
|     |       |-<<<NULL>>>
|     |       |-OpaqueValueExpr 0x55ec4ca5cdd0 <<invalid sloc>> '_Bool'
|     |       |-ReturnStmt 0x55ec4ca5cdb8 <col:17, col:24>
|     |       | `-IntegerLiteral 0x55ec4ca5cd98 <col:24> 'int' 1
|     |       `-<<<NULL>>>
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca5d190 <line:832:1, line:916:1> line:832:6 invalid BN_consttime_swap 'void (int, int *, int *, int)'
| |-ParmVarDecl 0x55ec4ca5cf38 <col:24, col:33> col:33 invalid condition 'int'
| |-ParmVarDecl 0x55ec4ca5cfb0 <col:44, col:52> col:52 invalid a 'int *'
| |-ParmVarDecl 0x55ec4ca5d028 <col:55, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x55ec4ca5d0a0 <col:66, col:70> col:70 used nwords 'int'
| `-CompoundStmt 0x55ec4ca5ff80 <line:833:1, line:916:1>
|   |-DeclStmt 0x55ec4ca5d2e0 <line:835:5, col:10>
|   | `-VarDecl 0x55ec4ca5d280 <col:5, col:9> col:9 used i 'int'
|   `-SwitchStmt 0x55ec4ca5e230 <line:889:5, line:914:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x55ec4ca5e218 <line:889:13> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55ec4ca5e1f0 <col:13> 'int' lvalue ParmVar 0x55ec4ca5d0a0 'nwords' 'int'
|     `-CompoundStmt 0x55ec4ca5ff18 <col:21, line:914:5>
|       |-DefaultStmt 0x55ec4ca5f368 <line:890:5, line:887:19>
|       | `-ForStmt 0x55ec4ca5f330 <line:891:9, line:887:19>
|       |   |-BinaryOperator 0x55ec4ca5e2c0 <line:891:14, col:18> 'int' '='
|       |   | |-DeclRefExpr 0x55ec4ca5e260 <col:14> 'int' lvalue Var 0x55ec4ca5d280 'i' 'int'
|       |   | `-IntegerLiteral 0x55ec4ca5e2a0 <col:18> 'int' 10
|       |   |-<<<NULL>>>
|       |   |-BinaryOperator 0x55ec4ca5f1d0 <col:22, col:26> 'int' '<'
|       |   | |-ImplicitCastExpr 0x55ec4ca5e338 <col:22> 'int' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x55ec4ca5e2e8 <col:22> 'int' lvalue Var 0x55ec4ca5d280 'i' 'int'
|       |   | `-ImplicitCastExpr 0x55ec4ca5e350 <col:26> 'int' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x55ec4ca5e310 <col:26> 'int' lvalue ParmVar 0x55ec4ca5d0a0 'nwords' 'int'
|       |   |-UnaryOperator 0x55ec4ca5f220 <col:34, col:35> 'int' postfix '++'
|       |   | `-DeclRefExpr 0x55ec4ca5f1f8 <col:34> 'int' lvalue Var 0x55ec4ca5d280 'i' 'int'
|       |   `-DoStmt 0x55ec4ca5f310 <line:883:9, line:887:19>
|       |     |-CompoundStmt 0x55ec4ca5f2e0 <line:883:12, line:887:9>
|       |     `-IntegerLiteral 0x55ec4ca5f2f0 <col:18> 'int' 0
|       |-CaseStmt 0x55ec4ca5f3a8 <line:894:5, line:887:19>
|       | |-IntegerLiteral 0x55ec4ca5f388 <line:894:10> 'int' 10
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55ec4ca5f490 <line:883:9, line:887:19>
|       |   |-CompoundStmt 0x55ec4ca5f460 <line:883:12, line:887:9>
|       |   `-IntegerLiteral 0x55ec4ca5f470 <col:18> 'int' 0
|       |-CaseStmt 0x55ec4ca5f4d0 <line:896:5, line:887:19>
|       | |-IntegerLiteral 0x55ec4ca5f4b0 <line:896:10> 'int' 9
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55ec4ca5f5b8 <line:883:9, line:887:19>
|       |   |-CompoundStmt 0x55ec4ca5f588 <line:883:12, line:887:9>
|       |   `-IntegerLiteral 0x55ec4ca5f598 <col:18> 'int' 0
|       |-CaseStmt 0x55ec4ca5f5f8 <line:898:5, line:887:19>
|       | |-IntegerLiteral 0x55ec4ca5f5d8 <line:898:10> 'int' 8
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55ec4ca5f6e0 <line:883:9, line:887:19>
|       |   |-CompoundStmt 0x55ec4ca5f6b0 <line:883:12, line:887:9>
|       |   `-IntegerLiteral 0x55ec4ca5f6c0 <col:18> 'int' 0
|       |-CaseStmt 0x55ec4ca5f720 <line:900:5, line:887:19>
|       | |-IntegerLiteral 0x55ec4ca5f700 <line:900:10> 'int' 7
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55ec4ca5f808 <line:883:9, line:887:19>
|       |   |-CompoundStmt 0x55ec4ca5f7d8 <line:883:12, line:887:9>
|       |   `-IntegerLiteral 0x55ec4ca5f7e8 <col:18> 'int' 0
|       |-CaseStmt 0x55ec4ca5f848 <line:902:5, line:887:19>
|       | |-IntegerLiteral 0x55ec4ca5f828 <line:902:10> 'int' 6
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55ec4ca5f930 <line:883:9, line:887:19>
|       |   |-CompoundStmt 0x55ec4ca5f900 <line:883:12, line:887:9>
|       |   `-IntegerLiteral 0x55ec4ca5f910 <col:18> 'int' 0
|       |-CaseStmt 0x55ec4ca5f970 <line:904:5, line:887:19>
|       | |-IntegerLiteral 0x55ec4ca5f950 <line:904:10> 'int' 5
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55ec4ca5fa58 <line:883:9, line:887:19>
|       |   |-CompoundStmt 0x55ec4ca5fa28 <line:883:12, line:887:9>
|       |   `-IntegerLiteral 0x55ec4ca5fa38 <col:18> 'int' 0
|       |-CaseStmt 0x55ec4ca5fa98 <line:906:5, line:887:19>
|       | |-IntegerLiteral 0x55ec4ca5fa78 <line:906:10> 'int' 4
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55ec4ca5fb80 <line:883:9, line:887:19>
|       |   |-CompoundStmt 0x55ec4ca5fb50 <line:883:12, line:887:9>
|       |   `-IntegerLiteral 0x55ec4ca5fb60 <col:18> 'int' 0
|       |-CaseStmt 0x55ec4ca5fbc0 <line:908:5, line:887:19>
|       | |-IntegerLiteral 0x55ec4ca5fba0 <line:908:10> 'int' 3
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55ec4ca5fca8 <line:883:9, line:887:19>
|       |   |-CompoundStmt 0x55ec4ca5fc78 <line:883:12, line:887:9>
|       |   `-IntegerLiteral 0x55ec4ca5fc88 <col:18> 'int' 0
|       |-CaseStmt 0x55ec4ca5fce8 <line:910:5, line:887:19>
|       | |-IntegerLiteral 0x55ec4ca5fcc8 <line:910:10> 'int' 2
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55ec4ca5fdd0 <line:883:9, line:887:19>
|       |   |-CompoundStmt 0x55ec4ca5fda0 <line:883:12, line:887:9>
|       |   `-IntegerLiteral 0x55ec4ca5fdb0 <col:18> 'int' 0
|       `-CaseStmt 0x55ec4ca5fe10 <line:912:5, line:887:19>
|         |-IntegerLiteral 0x55ec4ca5fdf0 <line:912:10> 'int' 1
|         |-<<<NULL>>>
|         `-DoStmt 0x55ec4ca5fef8 <line:883:9, line:887:19>
|           |-CompoundStmt 0x55ec4ca5fec8 <line:883:12, line:887:9>
|           `-IntegerLiteral 0x55ec4ca5fed8 <col:18> 'int' 0
|-FunctionDecl 0x55ec4ca602e0 <line:920:1, line:941:1> line:920:5 BN_security_bits 'int (int, int)'
| |-ParmVarDecl 0x55ec4ca5ffb8 <col:22, col:26> col:26 used L 'int'
| |-ParmVarDecl 0x55ec4ca60030 <col:29, col:33> col:33 used N 'int'
| `-CompoundStmt 0x55ec4ca60f98 <line:921:1, line:941:1>
|   |-DeclStmt 0x55ec4ca604b0 <line:922:5, col:22>
|   | |-VarDecl 0x55ec4ca603c0 <col:5, col:9> col:9 used secbits 'int'
|   | `-VarDecl 0x55ec4ca60438 <col:5, col:18> col:18 used bits 'int'
|   |-IfStmt 0x55ec4ca60ad0 <line:923:5, line:934:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca60528 <line:923:9, col:14> 'int' '>='
|   | | |-ImplicitCastExpr 0x55ec4ca60510 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca604c8 <col:9> 'int' lvalue ParmVar 0x55ec4ca5ffb8 'L' 'int'
|   | | `-IntegerLiteral 0x55ec4ca604f0 <col:14> 'int' 15360
|   | |-BinaryOperator 0x55ec4ca605b0 <line:924:9, col:19> 'int' '='
|   | | |-DeclRefExpr 0x55ec4ca60550 <col:9> 'int' lvalue Var 0x55ec4ca603c0 'secbits' 'int'
|   | | `-IntegerLiteral 0x55ec4ca60590 <col:19> 'int' 256
|   | `-IfStmt 0x55ec4ca60a98 <line:925:10, line:934:16>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x55ec4ca60638 <line:925:14, col:19> 'int' '>='
|   |   | |-ImplicitCastExpr 0x55ec4ca60620 <col:14> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55ec4ca605d8 <col:14> 'int' lvalue ParmVar 0x55ec4ca5ffb8 'L' 'int'
|   |   | `-IntegerLiteral 0x55ec4ca60600 <col:19> 'int' 7680
|   |   |-BinaryOperator 0x55ec4ca606a8 <line:926:9, col:19> 'int' '='
|   |   | |-DeclRefExpr 0x55ec4ca60660 <col:9> 'int' lvalue Var 0x55ec4ca603c0 'secbits' 'int'
|   |   | `-IntegerLiteral 0x55ec4ca60688 <col:19> 'int' 192
|   |   `-IfStmt 0x55ec4ca60a60 <line:927:10, line:934:16>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x55ec4ca60730 <line:927:14, col:19> 'int' '>='
|   |     | |-ImplicitCastExpr 0x55ec4ca60718 <col:14> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x55ec4ca606d0 <col:14> 'int' lvalue ParmVar 0x55ec4ca5ffb8 'L' 'int'
|   |     | `-IntegerLiteral 0x55ec4ca606f8 <col:19> 'int' 3072
|   |     |-BinaryOperator 0x55ec4ca607a0 <line:928:9, col:19> 'int' '='
|   |     | |-DeclRefExpr 0x55ec4ca60758 <col:9> 'int' lvalue Var 0x55ec4ca603c0 'secbits' 'int'
|   |     | `-IntegerLiteral 0x55ec4ca60780 <col:19> 'int' 128
|   |     `-IfStmt 0x55ec4ca60a28 <line:929:10, line:934:16>
|   |       |-<<<NULL>>>
|   |       |-<<<NULL>>>
|   |       |-BinaryOperator 0x55ec4ca60828 <line:929:14, col:19> 'int' '>='
|   |       | |-ImplicitCastExpr 0x55ec4ca60810 <col:14> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x55ec4ca607c8 <col:14> 'int' lvalue ParmVar 0x55ec4ca5ffb8 'L' 'int'
|   |       | `-IntegerLiteral 0x55ec4ca607f0 <col:19> 'int' 2048
|   |       |-BinaryOperator 0x55ec4ca60898 <line:930:9, col:19> 'int' '='
|   |       | |-DeclRefExpr 0x55ec4ca60850 <col:9> 'int' lvalue Var 0x55ec4ca603c0 'secbits' 'int'
|   |       | `-IntegerLiteral 0x55ec4ca60878 <col:19> 'int' 112
|   |       `-IfStmt 0x55ec4ca609f0 <line:931:10, line:934:16>
|   |         |-<<<NULL>>>
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x55ec4ca60920 <line:931:14, col:19> 'int' '>='
|   |         | |-ImplicitCastExpr 0x55ec4ca60908 <col:14> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x55ec4ca608c0 <col:14> 'int' lvalue ParmVar 0x55ec4ca5ffb8 'L' 'int'
|   |         | `-IntegerLiteral 0x55ec4ca608e8 <col:19> 'int' 1024
|   |         |-BinaryOperator 0x55ec4ca60990 <line:932:9, col:19> 'int' '='
|   |         | |-DeclRefExpr 0x55ec4ca60948 <col:9> 'int' lvalue Var 0x55ec4ca603c0 'secbits' 'int'
|   |         | `-IntegerLiteral 0x55ec4ca60970 <col:19> 'int' 80
|   |         `-ReturnStmt 0x55ec4ca609d8 <line:934:9, col:16>
|   |           `-IntegerLiteral 0x55ec4ca609b8 <col:16> 'int' 0
|   |-IfStmt 0x55ec4ca60c08 <line:935:5, line:936:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca60b88 <line:935:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x55ec4ca60b70 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca60b08 <col:9> 'int' lvalue ParmVar 0x55ec4ca60030 'N' 'int'
|   | | `-UnaryOperator 0x55ec4ca60b50 <col:14, col:15> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x55ec4ca60b30 <col:15> 'int' 1
|   | |-ReturnStmt 0x55ec4ca60bf0 <line:936:9, col:16>
|   | | `-ImplicitCastExpr 0x55ec4ca60bd8 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55ec4ca60bb0 <col:16> 'int' lvalue Var 0x55ec4ca603c0 'secbits' 'int'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x55ec4ca60d08 <line:937:5, col:16> 'int' '='
|   | |-DeclRefExpr 0x55ec4ca60c40 <col:5> 'int' lvalue Var 0x55ec4ca60438 'bits' 'int'
|   | `-BinaryOperator 0x55ec4ca60ce0 <col:12, col:16> 'int' '/'
|   |   |-ImplicitCastExpr 0x55ec4ca60cc8 <col:12> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55ec4ca60c80 <col:12> 'int' lvalue ParmVar 0x55ec4ca60030 'N' 'int'
|   |   `-IntegerLiteral 0x55ec4ca60ca8 <col:16> 'int' 2
|   |-IfStmt 0x55ec4ca60df0 <line:938:5, line:939:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55ec4ca60d90 <line:938:9, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x55ec4ca60d78 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55ec4ca60d30 <col:9> 'int' lvalue Var 0x55ec4ca60438 'bits' 'int'
|   | | `-IntegerLiteral 0x55ec4ca60d58 <col:16> 'int' 80
|   | |-ReturnStmt 0x55ec4ca60dd8 <line:939:9, col:16>
|   | | `-IntegerLiteral 0x55ec4ca60db8 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55ec4ca60f80 <line:940:5, col:40>
|     `-ConditionalOperator 0x55ec4ca60f50 <col:12, col:40> 'int'
|       |-BinaryOperator 0x55ec4ca60ea8 <col:12, col:20> 'int' '>='
|       | |-ImplicitCastExpr 0x55ec4ca60e78 <col:12> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x55ec4ca60e28 <col:12> 'int' lvalue Var 0x55ec4ca60438 'bits' 'int'
|       | `-ImplicitCastExpr 0x55ec4ca60e90 <col:20> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x55ec4ca60e50 <col:20> 'int' lvalue Var 0x55ec4ca603c0 'secbits' 'int'
|       |-ImplicitCastExpr 0x55ec4ca60f20 <col:30> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55ec4ca60ed0 <col:30> 'int' lvalue Var 0x55ec4ca603c0 'secbits' 'int'
|       `-ImplicitCastExpr 0x55ec4ca60f38 <col:40> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x55ec4ca60ef8 <col:40> 'int' lvalue Var 0x55ec4ca60438 'bits' 'int'
|-FunctionDecl 0x55ec4ca61078 <line:943:1, line:948:1> line:943:6 invalid BN_zero_ex 'void (int *)'
| |-ParmVarDecl 0x55ec4ca60ff0 <col:17, col:25> col:25 invalid a 'int *'
| `-CompoundStmt 0x55ec4ca61178 <line:944:1, line:948:1>
|-FunctionDecl 0x55ec4ca616a8 <line:950:1, line:953:1> line:950:5 invalid BN_abs_is_word 'int (const int *, const int)'
| |-ParmVarDecl 0x55ec4ca611a0 <col:20, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca61218 <col:37, col:52> col:52 invalid w 'const int'
| `-CompoundStmt 0x55ec4ca617f0 <line:951:1, line:953:1>
|-FunctionDecl 0x55ec4ca618a8 <line:955:1, line:958:1> line:955:5 invalid BN_is_zero 'int (const int *)'
| |-ParmVarDecl 0x55ec4ca61818 <col:16, col:30> col:30 invalid a 'const int *'
| `-CompoundStmt 0x55ec4ca61988 <line:956:1, line:958:1>
|-FunctionDecl 0x55ec4ca61a40 <line:960:1, line:963:1> line:960:5 invalid BN_is_one 'int (const int *)'
| |-ParmVarDecl 0x55ec4ca619b0 <col:15, col:29> col:29 invalid a 'const int *'
| `-CompoundStmt 0x55ec4ca61b20 <line:961:1, line:963:1>
|-FunctionDecl 0x55ec4ca61c58 <line:965:1, line:968:1> line:965:5 invalid BN_is_word 'int (const int *, const int)'
| |-ParmVarDecl 0x55ec4ca61b48 <col:16, col:30> col:30 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca61bc0 <col:33, col:48> col:48 invalid w 'const int'
| `-CompoundStmt 0x55ec4ca61d20 <line:966:1, line:968:1>
|-FunctionDecl 0x55ec4ca61dd8 <line:970:1, line:973:1> line:970:5 invalid BN_is_odd 'int (const int *)'
| |-ParmVarDecl 0x55ec4ca61d48 <col:15, col:29> col:29 invalid a 'const int *'
| `-CompoundStmt 0x55ec4ca61ef8 <line:971:1, line:973:1>
|-FunctionDecl 0x55ec4ca61fb0 <line:975:1, line:978:1> line:975:5 invalid BN_is_negative 'int (const int *)'
| |-ParmVarDecl 0x55ec4ca61f20 <col:20, col:34> col:34 invalid a 'const int *'
| `-CompoundStmt 0x55ec4ca62090 <line:976:1, line:978:1>
|-FunctionDecl 0x55ec4ca62318 <line:980:1, line:984:1> line:980:5 invalid BN_to_montgomery 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x55ec4ca620b8 <col:22, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x55ec4ca62130 <col:33, col:47> col:47 invalid a 'const int *'
| |-ParmVarDecl 0x55ec4ca621a8 <col:50, col:63> col:63 invalid mont 'int *'
| |-ParmVarDecl 0x55ec4ca62220 <line:981:22, col:30> col:30 invalid ctx 'int *'
| `-CompoundStmt 0x55ec4ca62508 <line:982:1, line:984:1>
|-FunctionDecl 0x55ec4ca62760 <line:986:1, line:995:1> line:986:6 invalid BN_with_flags 'void (int *, const int *, int)'
| |-ParmVarDecl 0x55ec4ca62530 <col:20, col:28> col:28 invalid dest 'int *'
| |-ParmVarDecl 0x55ec4ca625a8 <col:34, col:48> col:48 invalid b 'const int *'
| |-ParmVarDecl 0x55ec4ca62680 <col:51, col:55> col:55 used flags 'int'
| `-CompoundStmt 0x55ec4ca62870 <line:987:1, line:995:1>
|-FunctionDecl 0x55ec4ca62918 <line:997:1, line:1007:1> line:997:11 invalid BN_GENCB_new 'int *(void)'
| `-CompoundStmt 0x55ec4ca62b78 <line:998:1, line:1007:1>
|   `-IfStmt 0x55ec4ca62b40 <line:1001:5, line:1004:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55ec4ca62b20 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55ec4ca62b10 <line:1001:55, line:1004:5>
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca62c30 <line:1009:1, line:1014:1> line:1009:6 invalid BN_GENCB_free 'void (int *)'
| |-ParmVarDecl 0x55ec4ca62ba8 <col:20, col:30> col:30 invalid cb 'int *'
| `-CompoundStmt 0x55ec4ca62d88 <line:1010:1, line:1014:1>
|   `-IfStmt 0x55ec4ca62d28 <line:1011:5, line:1012:9>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55ec4ca62d08 <<invalid sloc>> '_Bool'
|     |-ReturnStmt 0x55ec4ca62cf0 <col:9>
|     `-<<<NULL>>>
|-FunctionDecl 0x55ec4ca62ec0 <line:1016:1, line:1019:1> line:1016:6 invalid BN_set_flags 'void (int *, int)'
| |-ParmVarDecl 0x55ec4ca62db8 <col:19, col:27> col:27 invalid b 'int *'
| |-ParmVarDecl 0x55ec4ca62e30 <col:30, col:34> col:34 used n 'int'
| `-CompoundStmt 0x55ec4ca62fc8 <line:1017:1, line:1019:1>
|-FunctionDecl 0x55ec4ca63100 <line:1021:1, line:1024:1> line:1021:5 invalid BN_get_flags 'int (const int *, int)'
| |-ParmVarDecl 0x55ec4ca62ff0 <col:18, col:32> col:32 invalid b 'const int *'
| |-ParmVarDecl 0x55ec4ca63068 <col:35, col:39> col:39 used n 'int'
| `-CompoundStmt 0x55ec4ca63208 <line:1022:1, line:1024:1>
|-FunctionDecl 0x55ec4ca63710 <line:1027:1, line:1034:1> line:1027:6 invalid BN_GENCB_set_old 'void (int *, void (*)(int, int, void *), void *)'
| |-ParmVarDecl 0x55ec4ca63230 <col:23, col:33> col:33 invalid gencb 'int *'
| |-ParmVarDecl 0x55ec4ca63520 <col:40, col:74> col:47 used callback 'void (*)(int, int, void *)'
| |-ParmVarDecl 0x55ec4ca63598 <line:1028:23, col:29> col:29 used cb_arg 'void *'
| `-CompoundStmt 0x55ec4ca63880 <line:1029:1, line:1034:1>
|-FunctionDecl 0x55ec4ca63d40 <line:1037:1, line:1044:1> line:1037:6 invalid BN_GENCB_set 'void (int *, int (*)(int, int, int *), void *)'
| |-ParmVarDecl 0x55ec4ca638a8 <col:19, col:29> col:29 invalid gencb 'int *'
| |-ParmVarDecl 0x55ec4ca63b98 <col:36, col:73> col:42 used callback 'int (*)(int, int, int *)'
| |-ParmVarDecl 0x55ec4ca63c10 <line:1038:19, col:25> col:25 used cb_arg 'void *'
| `-CompoundStmt 0x55ec4ca63eb0 <line:1039:1, line:1044:1>
|-FunctionDecl 0x55ec4ca63fa8 <line:1046:1, line:1049:1> line:1046:7 invalid BN_GENCB_get_arg 'void *(int *)'
| |-ParmVarDecl 0x55ec4ca63ed8 <col:24, col:34> col:34 invalid cb 'int *'
| `-CompoundStmt 0x55ec4ca64068 <line:1047:1, line:1049:1>
|-FunctionDecl 0x55ec4ca641a0 <line:1051:1, line:1054:1> line:1051:9 invalid bn_wexpand 'int *(int *, int)'
| |-ParmVarDecl 0x55ec4ca64090 <col:20, col:28> col:28 invalid a 'int *'
| |-ParmVarDecl 0x55ec4ca64108 <col:31, col:35> col:35 used words 'int'
| `-CompoundStmt 0x55ec4ca642d0 <line:1052:1, line:1054:1>
`-FunctionDecl 0x55ec4ca64380 <line:1056:1, line:1073:1> line:1056:6 invalid bn_correct_top 'void (int *)'
  |-ParmVarDecl 0x55ec4ca642f8 <col:21, col:29> col:29 invalid a 'int *'
  `-CompoundStmt 0x55ec4ca64918 <line:1057:1, line:1073:1>
    |-DeclStmt 0x55ec4ca644b8 <line:1059:5, col:25>
    | `-VarDecl 0x55ec4ca64458 <col:5, col:9> col:9 used tmp_top 'int'
    `-IfStmt 0x55ec4ca64788 <line:1061:5, line:1068:5>
      |-<<<NULL>>>
      |-<<<NULL>>>
      |-BinaryOperator 0x55ec4ca64548 <line:1061:9, col:19> 'int' '>'
      | |-ImplicitCastExpr 0x55ec4ca64530 <col:9> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x55ec4ca644d0 <col:9> 'int' lvalue Var 0x55ec4ca64458 'tmp_top' 'int'
      | `-IntegerLiteral 0x55ec4ca64510 <col:19> 'int' 0
      |-CompoundStmt 0x55ec4ca64770 <col:22, line:1068:5>
      | `-ForStmt 0x55ec4ca64710 <line:1062:9, line:1066:9>
      |   |-<<<NULL>>>
      |   |-<<<NULL>>>
      |   |-BinaryOperator 0x55ec4ca645f8 <line:1062:38, col:48> 'int' '>'
      |   | |-ImplicitCastExpr 0x55ec4ca645e0 <col:38> 'int' <LValueToRValue>
      |   | | `-DeclRefExpr 0x55ec4ca64598 <col:38> 'int' lvalue Var 0x55ec4ca64458 'tmp_top' 'int'
      |   | `-IntegerLiteral 0x55ec4ca645c0 <col:48> 'int' 0
      |   |-UnaryOperator 0x55ec4ca64648 <col:51, col:58> 'int' postfix '--'
      |   | `-DeclRefExpr 0x55ec4ca64620 <col:51> 'int' lvalue Var 0x55ec4ca64458 'tmp_top' 'int'
      |   `-CompoundStmt 0x55ec4ca646f8 <col:62, line:1066:9>
      |     `-IfStmt 0x55ec4ca646c0 <line:1064:13, line:1065:17>
      |       |-<<<NULL>>>
      |       |-<<<NULL>>>
      |       |-OpaqueValueExpr 0x55ec4ca646a0 <<invalid sloc>> '_Bool'
      |       |-BreakStmt 0x55ec4ca64688 <col:17>
      |       `-<<<NULL>>>
      `-<<<NULL>>>

