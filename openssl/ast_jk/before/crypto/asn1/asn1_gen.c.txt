TranslationUnitDecl 0x20ed99e4e38 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x20ed99e56d0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x20ed99e53d0 '__int128'
|-TypedefDecl 0x20ed99e5740 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x20ed99e53f0 'unsigned __int128'
|-TypedefDecl 0x20ed99e5a78 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x20ed99e5830 'struct __NSConstantString_tag'
|   `-Record 0x20ed99e5798 '__NSConstantString_tag'
|-TypedefDecl 0x20ed99e5ae8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x20ed99e5010 'unsigned long long'
|-TypedefDecl 0x20ed99e5b80 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x20ed99e5b40 'char *'
|   `-BuiltinType 0x20ed99e4ed0 'char'
|-TypedefDecl 0x20ed99e5bf0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x20ed99e5b40 'char *'
|   `-BuiltinType 0x20ed99e4ed0 'char'
|-RecordDecl 0x20ed99e5c48 <.//openssl//file_jk/before\crypto\asn1\asn1_gen.c:41:1, line:45:1> line:41:8 struct tag_name_st definition
| |-FieldDecl 0x20ed99e5d18 <line:42:5, col:17> col:17 referenced strnam 'const char *'
| |-FieldDecl 0x20ed99e5d88 <line:43:5, col:9> col:9 referenced len 'int'
| `-FieldDecl 0x20ed9acc4d0 <line:44:5, col:9> col:9 referenced tag 'int'
|-RecordDecl 0x20ed9acc528 <line:47:9, line:53:1> line:47:9 struct definition
| |-FieldDecl 0x20ed9acc5f8 <line:48:5, col:9> col:9 referenced exp_tag 'int'
| |-FieldDecl 0x20ed9acc668 <line:49:5, col:9> col:9 referenced exp_class 'int'
| |-FieldDecl 0x20ed9acc6d8 <line:50:5, col:9> col:9 referenced exp_constructed 'int'
| |-FieldDecl 0x20ed9acc748 <line:51:5, col:9> col:9 referenced exp_pad 'int'
| `-FieldDecl 0x20ed9acc7b8 <line:52:5, col:10> col:10 referenced exp_len 'long'
|-TypedefDecl 0x20ed9acc868 <line:47:1, line:53:3> col:3 referenced tag_exp_type 'struct tag_exp_type':'tag_exp_type'
| `-ElaboratedType 0x20ed9acc810 'struct tag_exp_type' sugar
|   `-RecordType 0x20ed9acc5c0 'tag_exp_type'
|     `-Record 0x20ed9acc528 ''
|-RecordDecl 0x20ed9acc8d8 <line:55:9, line:63:1> line:55:9 struct definition
| |-FieldDecl 0x20ed9acc9a8 <line:56:5, col:9> col:9 referenced imp_tag 'int'
| |-FieldDecl 0x20ed9acca18 <line:57:5, col:9> col:9 referenced imp_class 'int'
| |-FieldDecl 0x20ed9acca88 <line:58:5, col:9> col:9 referenced utype 'int'
| |-FieldDecl 0x20ed9accaf8 <line:59:5, col:9> col:9 referenced format 'int'
| |-FieldDecl 0x20ed9accb68 <line:60:5, col:17> col:17 referenced str 'const char *'
| |-FieldDecl 0x20ed9accd28 <line:61:5, col:44> col:18 referenced exp_list 'tag_exp_type [20]'
| `-FieldDecl 0x20ed9accd98 <line:62:5, col:9> col:9 referenced exp_count 'int'
|-TypedefDecl 0x20ed9acce48 <line:55:1, line:63:3> col:3 referenced tag_exp_arg 'struct tag_exp_arg':'tag_exp_arg'
| `-ElaboratedType 0x20ed9accdf0 'struct tag_exp_arg' sugar
|   `-RecordType 0x20ed9acc970 'tag_exp_arg'
|     `-Record 0x20ed9acc8d8 ''
|-FunctionDecl 0x20ed9acd180 <line:65:1, line:66:40> line:65:19 invalid generate_v3 'int *(const char *, int *, int, int *)' static
| |-ParmVarDecl 0x20ed9acced0 <col:31, col:43> col:43 str 'const char *'
| |-ParmVarDecl 0x20ed9accf80 <col:48, col:60> col:60 invalid cnf 'int *'
| |-ParmVarDecl 0x20ed9acd000 <col:65, col:69> col:69 depth 'int'
| `-ParmVarDecl 0x20ed9acd080 <line:66:31, col:36> col:36 perr 'int *'
|-FunctionDecl 0x20ed9ac5460 <line:67:1, col:61> col:12 used bitstr_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x20ed9acd258 <col:22, col:34> col:34 elem 'const char *'
| |-ParmVarDecl 0x20ed9acd2d8 <col:40, col:44> col:44 len 'int'
| `-ParmVarDecl 0x20ed9acd358 <col:49, col:55> col:55 bitstr 'void *'
|-FunctionDecl 0x20ed9ac5780 <line:68:1, col:59> col:12 used asn1_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x20ed9ac5590 <col:20, col:32> col:32 elem 'const char *'
| |-ParmVarDecl 0x20ed9ac5610 <col:38, col:42> col:42 len 'int'
| `-ParmVarDecl 0x20ed9ac5690 <col:47, col:53> col:53 bitstr 'void *'
|-FunctionDecl 0x20ed9ac5d60 <line:69:1, line:70:67> line:69:12 used append_exp 'int (tag_exp_arg *, int, int, int, int, int)' static
| |-ParmVarDecl 0x20ed9ac58d8 <col:23, col:36> col:36 arg 'tag_exp_arg *'
| |-ParmVarDecl 0x20ed9ac5958 <col:41, col:45> col:45 exp_tag 'int'
| |-ParmVarDecl 0x20ed9ac59d8 <col:54, col:58> col:58 exp_class 'int'
| |-ParmVarDecl 0x20ed9ac5a58 <line:70:23, col:27> col:27 exp_constructed 'int'
| |-ParmVarDecl 0x20ed9ac5ad8 <col:44, col:48> col:48 exp_pad 'int'
| `-ParmVarDecl 0x20ed9ac5b58 <col:57, col:61> col:61 imp_ok 'int'
|-FunctionDecl 0x20ed9ac6140 <line:71:1, line:72:37> line:71:12 used parse_tagging 'int (const char *, int, int *, int *)' static
| |-ParmVarDecl 0x20ed9ac5e60 <col:26, col:38> col:38 vstart 'const char *'
| |-ParmVarDecl 0x20ed9ac5ee0 <col:46, col:50> col:50 vlen 'int'
| |-ParmVarDecl 0x20ed9ac5f60 <col:56, col:61> col:61 ptag 'int *'
| `-ParmVarDecl 0x20ed9ac5fe0 <line:72:26, col:31> col:31 pclass 'int *'
|-FunctionDecl 0x20ed9acd5f0 <line:73:1, line:74:50> line:73:19 invalid asn1_multi 'int *(int, const char *, int *, int, int *)' static
| |-ParmVarDecl 0x20ed9ac6230 <col:30, col:34> col:34 utype 'int'
| |-ParmVarDecl 0x20ed9ac62b0 <col:41, col:53> col:53 section 'const char *'
| |-ParmVarDecl 0x20ed9ac6330 <col:62, col:74> col:74 invalid cnf 'int *'
| |-ParmVarDecl 0x20ed9ac63b0 <line:74:30, col:34> col:34 depth 'int'
| `-ParmVarDecl 0x20ed9acd4e0 <col:41, col:46> col:46 perr 'int *'
|-FunctionDecl 0x20ed9acd900 <line:75:1, col:71> col:19 invalid asn1_str2type 'int *(const char *, int, int)' static
| |-ParmVarDecl 0x20ed9acd6d0 <col:33, col:45> col:45 str 'const char *'
| |-ParmVarDecl 0x20ed9acd750 <col:50, col:54> col:54 format 'int'
| `-ParmVarDecl 0x20ed9acd7d0 <col:62, col:66> col:66 utype 'int'
|-FunctionDecl 0x20ed9acdb60 <line:76:1, col:52> col:12 used asn1_str2tag 'int (const char *, int)' static
| |-ParmVarDecl 0x20ed9acd9d0 <col:25, col:37> col:37 tagstr 'const char *'
| `-ParmVarDecl 0x20ed9acda50 <col:45, col:49> col:49 len 'int'
|-FunctionDecl 0x20ed9acdda0 <line:78:1, line:87:1> line:78:12 invalid ASN1_generate_nconf 'int *(const char *, int *)'
| |-ParmVarDecl 0x20ed9acdc40 <col:32, col:44> col:44 used str 'const char *'
| |-ParmVarDecl 0x20ed9acdcc0 <col:49, col:55> col:55 invalid nconf 'int *'
| `-CompoundStmt 0x20ed9ace130 <line:79:1, line:87:1>
|-FunctionDecl 0x20ed9ace278 <line:89:1, line:96:1> line:89:12 invalid ASN1_generate_v3 'int *(const char *, int *)'
| |-ParmVarDecl 0x20ed9ace158 <col:29, col:41> col:41 used str 'const char *'
| |-ParmVarDecl 0x20ed9ace1d8 <col:46, col:58> col:58 invalid cnf 'int *'
| `-CompoundStmt 0x20ed9ace638 <line:90:1, line:96:1>
|   `-DeclStmt 0x20ed9ace3e8 <line:91:5, col:16>
|     `-VarDecl 0x20ed9ace358 <col:5, col:15> col:9 used err 'int' cinit
|       `-IntegerLiteral 0x20ed9ace3c0 <col:15> 'int' 0
|-FunctionDecl 0x20ed9ace898 <line:98:1, line:238:1> line:98:19 invalid generate_v3 'int *(const char *, int *, int, int *)' static
| |-ParmVarDecl 0x20ed9ace668 <col:31, col:43> col:43 used str 'const char *'
| |-ParmVarDecl 0x20ed9ace6e8 <col:48, col:60> col:60 invalid cnf 'int *'
| |-ParmVarDecl 0x20ed9ace768 <col:65, col:69> col:69 used depth 'int'
| |-ParmVarDecl 0x20ed9ace7e8 <line:99:31, col:36> col:36 used perr 'int *'
| `-CompoundStmt 0x20ed9adddb0 <line:100:1, line:238:1>
|   |-DeclStmt 0x20ed9ace9e8 <line:102:5, col:26>
|   | `-VarDecl 0x20ed9ace980 <col:5, col:17> col:17 used asn1_tags 'tag_exp_arg':'tag_exp_arg'
|   |-DeclStmt 0x20ed9acead0 <line:103:5, col:23>
|   | `-VarDecl 0x20ed9acea68 <col:5, col:19> col:19 used etmp 'tag_exp_type *'
|   |-DeclStmt 0x20ed9acec00 <line:105:5, col:15>
|   | |-VarDecl 0x20ed9aceb00 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x20ed9aceb80 <col:5, col:12> col:12 used len 'int'
|   |-DeclStmt 0x20ed9aced60 <line:107:5, col:52>
|   | |-VarDecl 0x20ed9acec60 <col:5, col:20> col:20 used orig_der 'unsigned char *'
|   | `-VarDecl 0x20ed9acece0 <col:5, col:38> col:38 used new_der 'unsigned char *'
|   |-DeclStmt 0x20ed9acee28 <line:108:5, col:35>
|   | `-VarDecl 0x20ed9acedc0 <col:5, col:26> col:26 used cpy_start 'const unsigned char *'
|   |-DeclStmt 0x20ed9aceec0 <line:109:5, col:21>
|   | `-VarDecl 0x20ed9acee58 <col:5, col:20> col:20 used p 'unsigned char *'
|   |-DeclStmt 0x20ed9acef58 <line:110:5, col:28>
|   | `-VarDecl 0x20ed9aceef0 <col:5, col:26> col:26 used cp 'const unsigned char *'
|   |-DeclStmt 0x20ed9aceff0 <line:111:5, col:16>
|   | `-VarDecl 0x20ed9acef88 <col:5, col:9> col:9 used cpy_len 'int'
|   |-DeclStmt 0x20ed9acf0c8 <line:112:5, col:21>
|   | `-VarDecl 0x20ed9acf020 <col:5, col:20> col:10 used hdr_len 'long' cinit
|   |   `-ImplicitCastExpr 0x20ed9acf0b0 <col:20> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x20ed9acf088 <col:20> 'int' 0
|   |-DeclStmt 0x20ed9acf2a8 <line:113:5, col:48>
|   | |-VarDecl 0x20ed9acf0f8 <col:5, col:27> col:9 used hdr_constructed 'int' cinit
|   | | `-IntegerLiteral 0x20ed9acf160 <col:27> 'int' 0
|   | |-VarDecl 0x20ed9acf1a0 <col:5, col:30> col:30 used hdr_tag 'int'
|   | `-VarDecl 0x20ed9acf220 <col:5, col:39> col:39 used hdr_class 'int'
|   |-DeclStmt 0x20ed9acf340 <line:114:5, col:10>
|   | `-VarDecl 0x20ed9acf2d8 <col:5, col:9> col:9 used r 'int'
|   |-BinaryOperator 0x20ed9acf400 <line:116:5, col:26> 'int' '='
|   | |-MemberExpr 0x20ed9acf390 <col:5, col:15> 'int' lvalue .imp_tag 0x20ed9acc9a8
|   | | `-DeclRefExpr 0x20ed9acf358 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-UnaryOperator 0x20ed9acf3e8 <col:25, col:26> 'int' prefix '-'
|   |   `-IntegerLiteral 0x20ed9acf3c0 <col:26> 'int' 1
|   |-BinaryOperator 0x20ed9adc4d0 <line:117:5, col:28> 'int' '='
|   | |-MemberExpr 0x20ed9acf4c0 <col:5, col:15> 'int' lvalue .imp_class 0x20ed9acca18
|   | | `-DeclRefExpr 0x20ed9acf4a0 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-UnaryOperator 0x20ed9adc4b8 <col:27, col:28> 'int' prefix '-'
|   |   `-IntegerLiteral 0x20ed9adc490 <col:28> 'int' 1
|   |-BinaryOperator 0x20ed9adc568 <line:118:5, line:33:33> 'int' '='
|   | |-MemberExpr 0x20ed9adc510 <line:118:5, col:15> 'int' lvalue .format 0x20ed9accaf8
|   | | `-DeclRefExpr 0x20ed9adc4f0 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-IntegerLiteral 0x20ed9adc540 <line:33:33> 'int' 1
|   |-BinaryOperator 0x20ed9adc600 <line:119:5, col:27> 'int' '='
|   | |-MemberExpr 0x20ed9adc5a8 <col:5, col:15> 'int' lvalue .exp_count 0x20ed9accd98
|   | | `-DeclRefExpr 0x20ed9adc588 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-IntegerLiteral 0x20ed9adc5d8 <col:27> 'int' 0
|   |-IfStmt 0x20ed9adc9a0 <line:120:5, line:123:5>
|   | |-BinaryOperator 0x20ed9adc908 <line:120:9, col:62> 'int' '!='
|   | | |-CallExpr 0x20ed9adc840 <col:9, col:57> 'int'
|   | | | |-ImplicitCastExpr 0x20ed9adc828 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x20ed9adc710 <col:9> 'int ()' Function 0x20ed9adc648 'CONF_parse_list' 'int ()'
|   | | | |-ImplicitCastExpr 0x20ed9adc888 <col:25> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x20ed9adc730 <col:25> 'const char *' lvalue ParmVar 0x20ed9ace668 'str' 'const char *'
|   | | | |-CharacterLiteral 0x20ed9adc768 <col:30> 'int' 44
|   | | | |-IntegerLiteral 0x20ed9adc780 <col:35> 'int' 1
|   | | | |-ImplicitCastExpr 0x20ed9adc8c8 <col:38> 'int (*)(const char *, int, void *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x20ed9adc7a8 <col:38> 'int (const char *, int, void *)' Function 0x20ed9ac5780 'asn1_cb' 'int (const char *, int, void *)'
|   | | | `-UnaryOperator 0x20ed9adc7e8 <col:47, col:48> 'tag_exp_arg *' prefix '&' cannot overflow
|   | | |   `-DeclRefExpr 0x20ed9adc7c8 <col:48> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | | `-IntegerLiteral 0x20ed9adc8e0 <col:62> 'int' 0
|   | `-CompoundStmt 0x20ed9adc990 <col:65, line:123:5>
|   |-IfStmt 0x20ed9adce08 <line:125:5, line:137:9> has_else
|   | |-OpaqueValueExpr 0x20ed9adcdf0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x20ed9adccd8 <line:126:45, line:136:5>
|   | | |-IfStmt 0x20ed9adcad0 <line:127:9, line:130:9>
|   | | | |-OpaqueValueExpr 0x20ed9adcab8 <<invalid sloc>> '_Bool'
|   | | | `-CompoundStmt 0x20ed9adcaa8 <line:127:19, line:130:9>
|   | | `-IfStmt 0x20ed9adcbe0 <line:131:9, line:134:9>
|   | |   |-BinaryOperator 0x20ed9adcb60 <line:131:13, line:28:33> 'int' '>='
|   | |   | |-ImplicitCastExpr 0x20ed9adcb48 <line:131:13> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x20ed9adcae8 <col:13> 'int' lvalue ParmVar 0x20ed9ace768 'depth' 'int'
|   | |   | `-IntegerLiteral 0x20ed9adcb20 <line:28:33> 'int' 50
|   | |   `-CompoundStmt 0x20ed9adcbd0 <line:131:46, line:134:9>
|   | `-NullStmt 0x20ed9adcde8 <line:137:9>
|   |-BinaryOperator 0x20ed9add368 <line:151:5, col:17> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x20ed9add2e0 <col:5> 'const unsigned char *' lvalue Var 0x20ed9acedc0 'cpy_start' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x20ed9add350 <col:17> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x20ed9add338 <col:17> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x20ed9add318 <col:17> 'unsigned char *' lvalue Var 0x20ed9acec60 'orig_der' 'unsigned char *'
|   |-IfStmt 0x20ed9ad8eb8 <line:154:5, line:180:15> has_else
|   | |-BinaryOperator 0x20ed9add430 <line:154:9, col:31> 'int' '!='
|   | | |-ImplicitCastExpr 0x20ed9add418 <col:9, col:19> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x20ed9add3a8 <col:9, col:19> 'int' lvalue .imp_tag 0x20ed9acc9a8
|   | | |   `-DeclRefExpr 0x20ed9add388 <col:9> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | | `-UnaryOperator 0x20ed9add400 <col:30, col:31> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x20ed9add3d8 <col:31> 'int' 1
|   | |-CompoundStmt 0x20ed9ad8e08 <col:34, line:179:5>
|   | | |-BinaryOperator 0x20ed9ad8778 <line:157:9, line:158:36> 'int' '='
|   | | | |-DeclRefExpr 0x20ed9add450 <line:157:9> 'int' lvalue Var 0x20ed9acf2d8 'r' 'int'
|   | | | `-CallExpr 0x20ed9ad8718 <col:13, line:158:36> 'int'
|   | | |   |-ImplicitCastExpr 0x20ed9ad8700 <line:157:13> 'int (*)()' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x20ed9ad8540 <col:13> 'int ()' Function 0x20ed9ad8478 'ASN1_get_object' 'int ()'
|   | | |   |-UnaryOperator 0x20ed9ad85a8 <col:29, col:30> 'const unsigned char **' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x20ed9ad8560 <col:30> 'const unsigned char *' lvalue Var 0x20ed9acedc0 'cpy_start' 'const unsigned char *'
|   | | |   |-UnaryOperator 0x20ed9ad8628 <col:41, col:42> 'long *' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x20ed9ad85c0 <col:42> 'long' lvalue Var 0x20ed9acf020 'hdr_len' 'long'
|   | | |   |-UnaryOperator 0x20ed9ad8678 <col:51, col:52> 'int *' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x20ed9ad8640 <col:52> 'int' lvalue Var 0x20ed9acf1a0 'hdr_tag' 'int'
|   | | |   |-UnaryOperator 0x20ed9ad86c8 <col:61, col:62> 'int *' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x20ed9ad8690 <col:62> 'int' lvalue Var 0x20ed9acf220 'hdr_class' 'int'
|   | | |   `-ImplicitCastExpr 0x20ed9ad8760 <line:158:29> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x20ed9ad86e0 <col:29> 'int' lvalue Var 0x20ed9acef88 'cpy_len' 'int'
|   | | |-IfStmt 0x20ed9ad8880 <line:159:9, line:160:18>
|   | | | |-BinaryOperator 0x20ed9ad87f8 <line:159:13, col:17> 'int' '&'
|   | | | | |-ImplicitCastExpr 0x20ed9ad87e0 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x20ed9ad8798 <col:13> 'int' lvalue Var 0x20ed9acf2d8 'r' 'int'
|   | | | | `-IntegerLiteral 0x20ed9ad87b8 <col:17> 'int' 128
|   | | | `-GotoStmt 0x20ed9ad8868 <line:160:13, col:18> 'err' 0x20ed9ad8818
|   | | |-CompoundAssignOperator 0x20ed9ad8948 <line:162:9, col:32> 'int' '-=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | | | |-DeclRefExpr 0x20ed9ad8898 <col:9> 'int' lvalue Var 0x20ed9acef88 'cpy_len' 'int'
|   | | | `-BinaryOperator 0x20ed9ad8928 <col:20, col:32> 'long long' '-'
|   | | |   |-ImplicitCastExpr 0x20ed9ad88f8 <col:20> 'const unsigned char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x20ed9ad88b8 <col:20> 'const unsigned char *' lvalue Var 0x20ed9acedc0 'cpy_start' 'const unsigned char *'
|   | | |   `-ImplicitCastExpr 0x20ed9ad8910 <col:32> 'unsigned char *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x20ed9ad88d8 <col:32> 'unsigned char *' lvalue Var 0x20ed9acec60 'orig_der' 'unsigned char *'
|   | | |-IfStmt 0x20ed9ad8b60 <line:167:9, line:173:13> has_else
|   | | | |-BinaryOperator 0x20ed9ad89d8 <line:167:13, col:17> 'int' '&'
|   | | | | |-ImplicitCastExpr 0x20ed9ad89c0 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x20ed9ad8978 <col:13> 'int' lvalue Var 0x20ed9acf2d8 'r' 'int'
|   | | | | `-IntegerLiteral 0x20ed9ad8998 <col:17> 'int' 1
|   | | | |-CompoundStmt 0x20ed9ad8af8 <col:22, line:171:9>
|   | | | | |-BinaryOperator 0x20ed9ad8a58 <line:169:13, col:31> 'int' '='
|   | | | | | |-DeclRefExpr 0x20ed9ad89f8 <col:13> 'int' lvalue Var 0x20ed9acf0f8 'hdr_constructed' 'int'
|   | | | | | `-IntegerLiteral 0x20ed9ad8a30 <col:31> 'int' 2
|   | | | | `-BinaryOperator 0x20ed9ad8ad8 <line:170:13, col:23> 'long' '='
|   | | | |   |-DeclRefExpr 0x20ed9ad8a78 <col:13> 'long' lvalue Var 0x20ed9acf020 'hdr_len' 'long'
|   | | | |   `-ImplicitCastExpr 0x20ed9ad8ac0 <col:23> 'long' <IntegralCast>
|   | | | |     `-IntegerLiteral 0x20ed9ad8a98 <col:23> 'int' 0
|   | | | `-NullStmt 0x20ed9ad8b58 <line:173:13>
|   | | `-BinaryOperator 0x20ed9ad8de8 <line:178:9, col:61> 'int' '='
|   | |   |-DeclRefExpr 0x20ed9ad8b88 <col:9> 'int' lvalue Var 0x20ed9aceb80 'len' 'int'
|   | |   `-CallExpr 0x20ed9ad8d80 <col:15, col:61> 'int'
|   | |     |-ImplicitCastExpr 0x20ed9ad8d68 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x20ed9ad8cb0 <col:15> 'int ()' Function 0x20ed9ad8be8 'ASN1_object_size' 'int ()'
|   | |     |-IntegerLiteral 0x20ed9ad8cd0 <col:32> 'int' 0
|   | |     |-ImplicitCastExpr 0x20ed9ad8db8 <col:35> 'long' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x20ed9ad8cf8 <col:35> 'long' lvalue Var 0x20ed9acf020 'hdr_len' 'long'
|   | |     `-ImplicitCastExpr 0x20ed9ad8dd0 <col:44, col:54> 'int' <LValueToRValue>
|   | |       `-MemberExpr 0x20ed9ad8d38 <col:44, col:54> 'int' lvalue .imp_tag 0x20ed9acc9a8
|   | |         `-DeclRefExpr 0x20ed9ad8d18 <col:44> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-BinaryOperator 0x20ed9ad8e98 <line:180:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x20ed9ad8e40 <col:9> 'int' lvalue Var 0x20ed9aceb80 'len' 'int'
|   |   `-ImplicitCastExpr 0x20ed9ad8e80 <col:15> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x20ed9ad8e60 <col:15> 'int' lvalue Var 0x20ed9acef88 'cpy_len' 'int'
|   |-ForStmt 0x20ed9ada5e8 <line:184:5, line:191:5>
|   | |-BinaryOperator 0x20ed9ad90f0 <line:184:10, col:67> 'tag_exp_type *' ','
|   | | |-BinaryOperator 0x20ed9ad8f40 <col:10, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x20ed9ad8ee0 <col:10> 'int' lvalue Var 0x20ed9aceb00 'i' 'int'
|   | | | `-IntegerLiteral 0x20ed9ad8f18 <col:14> 'int' 0
|   | | `-BinaryOperator 0x20ed9ad90d0 <col:17, col:67> 'tag_exp_type *' '='
|   | |   |-DeclRefExpr 0x20ed9ad8f60 <col:17> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   | |   `-BinaryOperator 0x20ed9ad90b0 <col:24, col:67> 'tag_exp_type *' '-'
|   | |     |-BinaryOperator 0x20ed9ad9068 <col:24, col:55> 'tag_exp_type *' '+'
|   | |     | |-ImplicitCastExpr 0x20ed9ad9038 <col:24, col:34> 'tag_exp_type *' <ArrayToPointerDecay>
|   | |     | | `-MemberExpr 0x20ed9ad8fb8 <col:24, col:34> 'tag_exp_type [20]' lvalue .exp_list 0x20ed9accd28
|   | |     | |   `-DeclRefExpr 0x20ed9ad8f98 <col:24> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |     | `-ImplicitCastExpr 0x20ed9ad9050 <col:45, col:55> 'int' <LValueToRValue>
|   | |     |   `-MemberExpr 0x20ed9ad9008 <col:45, col:55> 'int' lvalue .exp_count 0x20ed9accd98
|   | |     |     `-DeclRefExpr 0x20ed9ad8fe8 <col:45> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |     `-IntegerLiteral 0x20ed9ad9088 <col:67> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x20ed9ad91b0 <line:185:10, col:24> 'int' '<'
|   | | |-ImplicitCastExpr 0x20ed9ad9180 <col:10> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20ed9ad9110 <col:10> 'int' lvalue Var 0x20ed9aceb00 'i' 'int'
|   | | `-ImplicitCastExpr 0x20ed9ad9198 <col:14, col:24> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x20ed9ad9150 <col:14, col:24> 'int' lvalue .exp_count 0x20ed9accd98
|   | |     `-DeclRefExpr 0x20ed9ad9130 <col:14> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |-BinaryOperator 0x20ed9ad9240 <col:35, col:44> 'tag_exp_type *' ','
|   | | |-UnaryOperator 0x20ed9ad91f0 <col:35, col:36> 'int' postfix '++'
|   | | | `-DeclRefExpr 0x20ed9ad91d0 <col:35> 'int' lvalue Var 0x20ed9aceb00 'i' 'int'
|   | | `-UnaryOperator 0x20ed9ad9228 <col:40, col:44> 'tag_exp_type *' postfix '--'
|   | |   `-DeclRefExpr 0x20ed9ad9208 <col:40> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   | `-CompoundStmt 0x20ed9ada5c0 <col:48, line:191:5>
|   |   |-CompoundAssignOperator 0x20ed9ad9300 <line:187:9, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |-DeclRefExpr 0x20ed9ad9260 <col:9> 'int' lvalue Var 0x20ed9aceb80 'len' 'int'
|   |   | `-ImplicitCastExpr 0x20ed9ad92e8 <col:16, col:22> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x20ed9ad92b8 <col:16, col:22> 'int' lvalue ->exp_pad 0x20ed9acc748
|   |   |     `-ImplicitCastExpr 0x20ed9ad92a0 <col:16> 'tag_exp_type *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x20ed9ad9280 <col:16> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   |   |-BinaryOperator 0x20ed9ad93e8 <line:188:9, col:25> 'long' '='
|   |   | |-MemberExpr 0x20ed9ad9368 <col:9, col:15> 'long' lvalue ->exp_len 0x20ed9acc7b8
|   |   | | `-ImplicitCastExpr 0x20ed9ad9350 <col:9> 'tag_exp_type *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x20ed9ad9330 <col:9> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   |   | `-ImplicitCastExpr 0x20ed9ad93d0 <col:25> 'long' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x20ed9ad93b8 <col:25> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x20ed9ad9398 <col:25> 'int' lvalue Var 0x20ed9aceb80 'len' 'int'
|   |   `-BinaryOperator 0x20ed9ada5a0 <line:190:9, col:53> 'int' '='
|   |     |-DeclRefExpr 0x20ed9ad9408 <col:9> 'int' lvalue Var 0x20ed9aceb80 'len' 'int'
|   |     `-CallExpr 0x20ed9ada538 <col:15, col:53> 'int'
|   |       |-ImplicitCastExpr 0x20ed9ada520 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x20ed9ad9428 <col:15> 'int ()' Function 0x20ed9ad8be8 'ASN1_object_size' 'int ()'
|   |       |-IntegerLiteral 0x20ed9ada470 <col:32> 'int' 0
|   |       |-ImplicitCastExpr 0x20ed9ada570 <col:35> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x20ed9ada498 <col:35> 'int' lvalue Var 0x20ed9aceb80 'len' 'int'
|   |       `-ImplicitCastExpr 0x20ed9ada588 <col:40, col:46> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x20ed9ada4f0 <col:40, col:46> 'int' lvalue ->exp_tag 0x20ed9acc5f8
|   |           `-ImplicitCastExpr 0x20ed9ada4d8 <col:40> 'tag_exp_type *' <LValueToRValue>
|   |             `-DeclRefExpr 0x20ed9ada4b8 <col:40> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   |-BinaryOperator 0x20ed9ada7f8 <line:195:5, col:33> 'unsigned char *' '='
|   | |-DeclRefExpr 0x20ed9ada620 <col:5> 'unsigned char *' lvalue Var 0x20ed9acece0 'new_der' 'unsigned char *'
|   | `-ImplicitCastExpr 0x20ed9ada7e0 <col:15, col:33> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x20ed9ada7a0 <col:15, col:33> 'int'
|   |     |-ImplicitCastExpr 0x20ed9ada788 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x20ed9ada748 <col:15> 'int ()' Function 0x20ed9ada680 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x20ed9ada7c8 <col:30> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x20ed9ada768 <col:30> 'int' lvalue Var 0x20ed9aceb80 'len' 'int'
|   |-IfStmt 0x20ed9ada868 <line:196:5, line:197:14>
|   | |-OpaqueValueExpr 0x20ed9ada850 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x20ed9ada838 <col:9, col:14> 'err' 0x20ed9ad8818
|   |-BinaryOperator 0x20ed9ada8f0 <line:201:5, col:9> 'unsigned char *' '='
|   | |-DeclRefExpr 0x20ed9ada880 <col:5> 'unsigned char *' lvalue Var 0x20ed9acee58 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x20ed9ada8d8 <col:9> 'unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x20ed9ada8b8 <col:9> 'unsigned char *' lvalue Var 0x20ed9acece0 'new_der' 'unsigned char *'
|   |-ForStmt 0x20ed9adb0a0 <line:205:5, line:211:5>
|   | |-BinaryOperator 0x20ed9adaa20 <line:205:10, col:34> 'tag_exp_type *' ','
|   | | |-BinaryOperator 0x20ed9ada958 <col:10, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x20ed9ada910 <col:10> 'int' lvalue Var 0x20ed9aceb00 'i' 'int'
|   | | | `-IntegerLiteral 0x20ed9ada930 <col:14> 'int' 0
|   | | `-BinaryOperator 0x20ed9adaa00 <col:17, col:34> 'tag_exp_type *' '='
|   | |   |-DeclRefExpr 0x20ed9ada978 <col:17> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   | |   `-ImplicitCastExpr 0x20ed9ada9e8 <col:24, col:34> 'tag_exp_type *' <ArrayToPointerDecay>
|   | |     `-MemberExpr 0x20ed9ada9b8 <col:24, col:34> 'tag_exp_type [20]' lvalue .exp_list 0x20ed9accd28
|   | |       `-DeclRefExpr 0x20ed9ada998 <col:24> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x20ed9adaae0 <col:44, col:58> 'int' '<'
|   | | |-ImplicitCastExpr 0x20ed9adaab0 <col:44> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20ed9adaa40 <col:44> 'int' lvalue Var 0x20ed9aceb00 'i' 'int'
|   | | `-ImplicitCastExpr 0x20ed9adaac8 <col:48, col:58> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x20ed9adaa80 <col:48, col:58> 'int' lvalue .exp_count 0x20ed9accd98
|   | |     `-DeclRefExpr 0x20ed9adaa60 <col:48> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |-BinaryOperator 0x20ed9adab70 <line:206:10, col:19> 'tag_exp_type *' ','
|   | | |-UnaryOperator 0x20ed9adab20 <col:10, col:11> 'int' postfix '++'
|   | | | `-DeclRefExpr 0x20ed9adab00 <col:10> 'int' lvalue Var 0x20ed9aceb00 'i' 'int'
|   | | `-UnaryOperator 0x20ed9adab58 <col:15, col:19> 'tag_exp_type *' postfix '++'
|   | |   `-DeclRefExpr 0x20ed9adab38 <col:15> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   | `-CompoundStmt 0x20ed9adb080 <col:23, line:211:5>
|   |   |-CallExpr 0x20ed9adae90 <line:207:9, line:208:55> 'int'
|   |   | |-ImplicitCastExpr 0x20ed9adae78 <line:207:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x20ed9adac80 <col:9> 'int ()' Function 0x20ed9adabb8 'ASN1_put_object' 'int ()'
|   |   | |-UnaryOperator 0x20ed9adacc0 <col:25, col:26> 'unsigned char **' prefix '&' cannot overflow
|   |   | | `-DeclRefExpr 0x20ed9adaca0 <col:26> 'unsigned char *' lvalue Var 0x20ed9acee58 'p' 'unsigned char *'
|   |   | |-ImplicitCastExpr 0x20ed9adaed8 <col:29, col:35> 'int' <LValueToRValue>
|   |   | | `-MemberExpr 0x20ed9adad10 <col:29, col:35> 'int' lvalue ->exp_constructed 0x20ed9acc6d8
|   |   | |   `-ImplicitCastExpr 0x20ed9adacf8 <col:29> 'tag_exp_type *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x20ed9adacd8 <col:29> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   |   | |-ImplicitCastExpr 0x20ed9adaef0 <col:52, col:58> 'long' <LValueToRValue>
|   |   | | `-MemberExpr 0x20ed9adad78 <col:52, col:58> 'long' lvalue ->exp_len 0x20ed9acc7b8
|   |   | |   `-ImplicitCastExpr 0x20ed9adad60 <col:52> 'tag_exp_type *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x20ed9adad40 <col:52> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   |   | |-ImplicitCastExpr 0x20ed9adaf08 <line:208:25, col:31> 'int' <LValueToRValue>
|   |   | | `-MemberExpr 0x20ed9adade0 <col:25, col:31> 'int' lvalue ->exp_tag 0x20ed9acc5f8
|   |   | |   `-ImplicitCastExpr 0x20ed9adadc8 <col:25> 'tag_exp_type *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x20ed9adada8 <col:25> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   |   | `-ImplicitCastExpr 0x20ed9adaf20 <col:40, col:46> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x20ed9adae48 <col:40, col:46> 'int' lvalue ->exp_class 0x20ed9acc668
|   |   |     `-ImplicitCastExpr 0x20ed9adae30 <col:40> 'tag_exp_type *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x20ed9adae10 <col:40> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   |   `-IfStmt 0x20ed9adb068 <line:209:9, line:210:20>
|   |     |-ImplicitCastExpr 0x20ed9adafa0 <line:209:13, col:19> 'int' <LValueToRValue>
|   |     | `-MemberExpr 0x20ed9adaf70 <col:13, col:19> 'int' lvalue ->exp_pad 0x20ed9acc748
|   |     |   `-ImplicitCastExpr 0x20ed9adaf58 <col:13> 'tag_exp_type *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x20ed9adaf38 <col:13> 'tag_exp_type *' lvalue Var 0x20ed9acea68 'etmp' 'tag_exp_type *'
|   |     `-BinaryOperator 0x20ed9adb048 <line:210:13, col:20> 'unsigned char' '='
|   |       |-UnaryOperator 0x20ed9adaff0 <col:13, col:15> 'unsigned char' lvalue prefix '*' cannot overflow
|   |       | `-UnaryOperator 0x20ed9adafd8 <col:14, col:15> 'unsigned char *' postfix '++'
|   |       |   `-DeclRefExpr 0x20ed9adafb8 <col:14> 'unsigned char *' lvalue Var 0x20ed9acee58 'p' 'unsigned char *'
|   |       `-ImplicitCastExpr 0x20ed9adb030 <col:20> 'unsigned char' <IntegralCast>
|   |         `-IntegerLiteral 0x20ed9adb008 <col:20> 'int' 0
|   |-IfStmt 0x20ed9add500 <line:215:5, line:222:5>
|   | |-BinaryOperator 0x20ed9adb180 <line:215:9, col:31> 'int' '!='
|   | | |-ImplicitCastExpr 0x20ed9adb168 <col:9, col:19> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x20ed9adb0f8 <col:9, col:19> 'int' lvalue .imp_tag 0x20ed9acc9a8
|   | | |   `-DeclRefExpr 0x20ed9adb0d8 <col:9> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | | `-UnaryOperator 0x20ed9adb150 <col:30, col:31> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x20ed9adb128 <col:31> 'int' 1
|   | `-CompoundStmt 0x20ed9add4e8 <col:34, line:222:5>
|   |   `-CallExpr 0x20ed9adb400 <line:220:9, line:221:63> 'int'
|   |     |-ImplicitCastExpr 0x20ed9adb3e8 <line:220:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x20ed9adb2b0 <col:9> 'int ()' Function 0x20ed9adabb8 'ASN1_put_object' 'int ()'
|   |     |-UnaryOperator 0x20ed9adb2f0 <col:25, col:26> 'unsigned char **' prefix '&' cannot overflow
|   |     | `-DeclRefExpr 0x20ed9adb2d0 <col:26> 'unsigned char *' lvalue Var 0x20ed9acee58 'p' 'unsigned char *'
|   |     |-ImplicitCastExpr 0x20ed9adb448 <col:29> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x20ed9adb308 <col:29> 'int' lvalue Var 0x20ed9acf0f8 'hdr_constructed' 'int'
|   |     |-ImplicitCastExpr 0x20ed9add4a0 <col:46> 'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x20ed9adb328 <col:46> 'long' lvalue Var 0x20ed9acf020 'hdr_len' 'long'
|   |     |-ImplicitCastExpr 0x20ed9add4b8 <line:221:25, col:35> 'int' <LValueToRValue>
|   |     | `-MemberExpr 0x20ed9adb368 <col:25, col:35> 'int' lvalue .imp_tag 0x20ed9acc9a8
|   |     |   `-DeclRefExpr 0x20ed9adb348 <col:25> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   |     `-ImplicitCastExpr 0x20ed9add4d0 <col:44, col:54> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x20ed9adb3b8 <col:44, col:54> 'int' lvalue .imp_class 0x20ed9acca18
|   |         `-DeclRefExpr 0x20ed9adb398 <col:44> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x20ed9ace980 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   |-CallExpr 0x20ed9add8a0 <line:225:5, col:33> 'void *'
|   | |-ImplicitCastExpr 0x20ed9add888 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x20ed9add780 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x20ed9add590 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   | |-ImplicitCastExpr 0x20ed9add8f0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x20ed9add8d8 <col:12> 'unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9add7b8 <col:12> 'unsigned char *' lvalue Var 0x20ed9acee58 'p' 'unsigned char *'
|   | |-ImplicitCastExpr 0x20ed9add920 <col:15> 'const void *' <BitCast>
|   | | `-ImplicitCastExpr 0x20ed9add908 <col:15> 'const unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9add7d8 <col:15> 'const unsigned char *' lvalue Var 0x20ed9acedc0 'cpy_start' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x20ed9add950 <col:26> 'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x20ed9add938 <col:26> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x20ed9add7f8 <col:26> 'int' lvalue Var 0x20ed9acef88 'cpy_len' 'int'
|   |-BinaryOperator 0x20ed9add9f0 <line:227:5, col:10> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x20ed9add968 <col:5> 'const unsigned char *' lvalue Var 0x20ed9aceef0 'cp' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x20ed9add9d8 <col:10> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x20ed9add9c0 <col:10> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x20ed9add9a0 <col:10> 'unsigned char *' lvalue Var 0x20ed9acece0 'new_der' 'unsigned char *'
|   |-LabelStmt 0x20ed9addd00 <line:232:2, line:233:26> 'err'
|   | `-CallExpr 0x20ed9addcc0 <col:5, col:26> 'int'
|   |   |-ImplicitCastExpr 0x20ed9addca8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x20ed9addc68 <col:5> 'int ()' Function 0x20ed9addba0 'OPENSSL_free' 'int ()'
|   |   `-ImplicitCastExpr 0x20ed9addce8 <col:18> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x20ed9addc88 <col:18> 'unsigned char *' lvalue Var 0x20ed9acec60 'orig_der' 'unsigned char *'
|   `-CallExpr 0x20ed9addd70 <line:234:5, col:25> 'int'
|     |-ImplicitCastExpr 0x20ed9addd58 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x20ed9addd18 <col:5> 'int ()' Function 0x20ed9addba0 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x20ed9addd98 <col:18> 'unsigned char *' <LValueToRValue>
|       `-DeclRefExpr 0x20ed9addd38 <col:18> 'unsigned char *' lvalue Var 0x20ed9acece0 'new_der' 'unsigned char *'
|-FunctionDecl 0x20ed9add590 <line:225:5> col:5 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x20ed9add630 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x20ed9add698 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x20ed9add700 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x20ed9ade0b0 prev 0x20ed9ac5780 <line:240:1, line:346:1> line:240:12 used asn1_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x20ed9addec0 <col:20, col:32> col:32 used elem 'const char *'
| |-ParmVarDecl 0x20ed9addf40 <col:38, col:42> col:42 used len 'int'
| |-ParmVarDecl 0x20ed9addfc0 <col:47, col:53> col:53 used bitstr 'void *'
| `-CompoundStmt 0x20ed9ad9b18 <line:241:1, line:346:1>
|   |-DeclStmt 0x20ed9ade230 <line:242:5, col:30>
|   | `-VarDecl 0x20ed9ade178 <col:5, col:24> col:18 used arg 'tag_exp_arg *' cinit
|   |   `-ImplicitCastExpr 0x20ed9ade218 <col:24> 'tag_exp_arg *' <BitCast>
|   |     `-ImplicitCastExpr 0x20ed9ade200 <col:24> 'void *' <LValueToRValue>
|   |       `-DeclRefExpr 0x20ed9ade1e0 <col:24> 'void *' lvalue ParmVar 0x20ed9addfc0 'bitstr' 'void *'
|   |-DeclStmt 0x20ed9ade2c8 <line:243:5, col:10>
|   | `-VarDecl 0x20ed9ade260 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x20ed9ade360 <line:244:5, col:14>
|   | `-VarDecl 0x20ed9ade2f8 <col:5, col:9> col:9 used utype 'int'
|   |-DeclStmt 0x20ed9ade420 <line:245:5, col:17>
|   | `-VarDecl 0x20ed9ade390 <col:5, col:16> col:9 used vlen 'int' cinit
|   |   `-IntegerLiteral 0x20ed9ade3f8 <col:16> 'int' 0
|   |-DeclStmt 0x20ed9ade5b0 <line:246:5, col:34>
|   | |-VarDecl 0x20ed9ade4b0 <col:5, col:17> col:17 used p 'const char *'
|   | `-VarDecl 0x20ed9ade530 <col:5, col:21> col:21 used vstart 'const char *'
|   |-DeclStmt 0x20ed9ade6e0 <line:248:5, col:27>
|   | |-VarDecl 0x20ed9ade5e0 <col:5, col:9> col:9 used tmp_tag 'int'
|   | `-VarDecl 0x20ed9ade660 <col:5, col:18> col:18 used tmp_class 'int'
|   |-IfStmt 0x20ed9ade780 <line:250:5, line:251:17>
|   | |-OpaqueValueExpr 0x20ed9ade768 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x20ed9ade758 <col:9, col:17>
|   |   `-UnaryOperator 0x20ed9ade740 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x20ed9ade718 <col:17> 'int' 1
|   |-ForStmt 0x20ed9adee58 <line:253:5, line:261:5>
|   | |-BinaryOperator 0x20ed9ade8a8 <line:253:10, col:21> 'const char *' ','
|   | | |-BinaryOperator 0x20ed9ade7f8 <col:10, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x20ed9ade798 <col:10> 'int' lvalue Var 0x20ed9ade260 'i' 'int'
|   | | | `-IntegerLiteral 0x20ed9ade7d0 <col:14> 'int' 0
|   | | `-BinaryOperator 0x20ed9ade888 <col:17, col:21> 'const char *' '='
|   | |   |-DeclRefExpr 0x20ed9ade818 <col:17> 'const char *' lvalue Var 0x20ed9ade4b0 'p' 'const char *'
|   | |   `-ImplicitCastExpr 0x20ed9ade870 <col:21> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x20ed9ade850 <col:21> 'const char *' lvalue ParmVar 0x20ed9addec0 'elem' 'const char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x20ed9ade938 <col:27, col:31> 'int' '<'
|   | | |-ImplicitCastExpr 0x20ed9ade908 <col:27> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20ed9ade8c8 <col:27> 'int' lvalue Var 0x20ed9ade260 'i' 'int'
|   | | `-ImplicitCastExpr 0x20ed9ade920 <col:31> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9ade8e8 <col:31> 'int' lvalue ParmVar 0x20ed9addf40 'len' 'int'
|   | |-BinaryOperator 0x20ed9ade9c8 <col:36, col:42> 'int' ','
|   | | |-UnaryOperator 0x20ed9ade978 <col:36, col:37> 'const char *' postfix '++'
|   | | | `-DeclRefExpr 0x20ed9ade958 <col:36> 'const char *' lvalue Var 0x20ed9ade4b0 'p' 'const char *'
|   | | `-UnaryOperator 0x20ed9ade9b0 <col:41, col:42> 'int' postfix '++'
|   | |   `-DeclRefExpr 0x20ed9ade990 <col:41> 'int' lvalue Var 0x20ed9ade260 'i' 'int'
|   | `-CompoundStmt 0x20ed9adee40 <col:46, line:261:5>
|   |   `-IfStmt 0x20ed9adee28 <line:255:9, line:260:9>
|   |     |-BinaryOperator 0x20ed9adea80 <line:255:13, col:19> 'int' '=='
|   |     | |-ImplicitCastExpr 0x20ed9adea68 <col:13, col:14> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x20ed9adea50 <col:13, col:14> 'char' <LValueToRValue>
|   |     | |   `-UnaryOperator 0x20ed9adea20 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |     | |     `-ImplicitCastExpr 0x20ed9adea08 <col:14> 'const char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x20ed9ade9e8 <col:14> 'const char *' lvalue Var 0x20ed9ade4b0 'p' 'const char *'
|   |     | `-CharacterLiteral 0x20ed9adea38 <col:19> 'int' 58
|   |     `-CompoundStmt 0x20ed9adedf8 <col:24, line:260:9>
|   |       |-BinaryOperator 0x20ed9adeb58 <line:256:13, col:26> 'const char *' '='
|   |       | |-DeclRefExpr 0x20ed9adeaa0 <col:13> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |       | `-BinaryOperator 0x20ed9adeb38 <col:22, col:26> 'const char *' '+'
|   |       |   |-ImplicitCastExpr 0x20ed9adeb20 <col:22> 'const char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x20ed9adead8 <col:22> 'const char *' lvalue Var 0x20ed9ade4b0 'p' 'const char *'
|   |       |   `-IntegerLiteral 0x20ed9adeaf8 <col:26> 'int' 1
|   |       |-BinaryOperator 0x20ed9adece8 <line:257:13, col:40> 'int' '='
|   |       | |-DeclRefExpr 0x20ed9adeb78 <col:13> 'int' lvalue Var 0x20ed9ade390 'vlen' 'int'
|   |       | `-ImplicitCastExpr 0x20ed9adecd0 <col:20, col:40> 'int' <IntegralCast>
|   |       |   `-BinaryOperator 0x20ed9adecb0 <col:20, col:40> 'long long' '-'
|   |       |     |-ImplicitCastExpr 0x20ed9adec98 <col:20> 'long long' <IntegralCast>
|   |       |     | `-ImplicitCastExpr 0x20ed9adec80 <col:20> 'int' <LValueToRValue>
|   |       |     |   `-DeclRefExpr 0x20ed9adebb0 <col:20> 'int' lvalue ParmVar 0x20ed9addf40 'len' 'int'
|   |       |     `-ParenExpr 0x20ed9adec60 <col:26, col:40> 'long long'
|   |       |       `-BinaryOperator 0x20ed9adec40 <col:27, col:36> 'long long' '-'
|   |       |         |-ImplicitCastExpr 0x20ed9adec10 <col:27> 'const char *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x20ed9adebd0 <col:27> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |       |         `-ImplicitCastExpr 0x20ed9adec28 <col:36> 'const char *' <LValueToRValue>
|   |       |           `-DeclRefExpr 0x20ed9adebf0 <col:36> 'const char *' lvalue ParmVar 0x20ed9addec0 'elem' 'const char *'
|   |       |-BinaryOperator 0x20ed9adedd0 <line:258:13, col:23> 'int' '='
|   |       | |-DeclRefExpr 0x20ed9aded08 <col:13> 'int' lvalue ParmVar 0x20ed9addf40 'len' 'int'
|   |       | `-ImplicitCastExpr 0x20ed9adedb8 <col:19, col:23> 'int' <IntegralCast>
|   |       |   `-BinaryOperator 0x20ed9aded98 <col:19, col:23> 'long long' '-'
|   |       |     |-ImplicitCastExpr 0x20ed9aded68 <col:19> 'const char *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x20ed9aded28 <col:19> 'const char *' lvalue Var 0x20ed9ade4b0 'p' 'const char *'
|   |       |     `-ImplicitCastExpr 0x20ed9aded80 <col:23> 'const char *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x20ed9aded48 <col:23> 'const char *' lvalue ParmVar 0x20ed9addec0 'elem' 'const char *'
|   |       `-BreakStmt 0x20ed9adedf0 <line:259:13>
|   |-BinaryOperator 0x20ed9adefd0 <line:263:5, col:35> 'int' '='
|   | |-DeclRefExpr 0x20ed9adee90 <col:5> 'int' lvalue Var 0x20ed9ade2f8 'utype' 'int'
|   | `-CallExpr 0x20ed9adef70 <col:13, col:35> 'int'
|   |   |-ImplicitCastExpr 0x20ed9adef58 <col:13> 'int (*)(const char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x20ed9adeec8 <col:13> 'int (const char *, int)' Function 0x20ed9acdb60 'asn1_str2tag' 'int (const char *, int)'
|   |   |-ImplicitCastExpr 0x20ed9adefa0 <col:26> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x20ed9adeee8 <col:26> 'const char *' lvalue ParmVar 0x20ed9addec0 'elem' 'const char *'
|   |   `-ImplicitCastExpr 0x20ed9adefb8 <col:32> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x20ed9adef08 <col:32> 'int' lvalue ParmVar 0x20ed9addf40 'len' 'int'
|   |-IfStmt 0x20ed9adf348 <line:265:5, line:269:5>
|   | |-BinaryOperator 0x20ed9adf068 <line:265:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x20ed9adf050 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20ed9adeff0 <col:9> 'int' lvalue Var 0x20ed9ade2f8 'utype' 'int'
|   | | `-UnaryOperator 0x20ed9adf038 <col:18, col:19> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x20ed9adf010 <col:19> 'int' 1
|   | `-CompoundStmt 0x20ed9adf328 <col:22, line:269:5>
|   |   |-CallExpr 0x20ed9adf270 <line:267:9, col:43> 'int'
|   |   | |-ImplicitCastExpr 0x20ed9adf258 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x20ed9adf198 <col:9> 'int ()' Function 0x20ed9adf0d0 'ERR_add_error_data' 'int ()'
|   |   | |-IntegerLiteral 0x20ed9adf1b8 <col:28> 'int' 2
|   |   | |-ImplicitCastExpr 0x20ed9adf2a8 <col:31> 'char *' <ArrayToPointerDecay>
|   |   | | `-StringLiteral 0x20ed9adf218 <col:31> 'char [5]' lvalue "tag="
|   |   | `-ImplicitCastExpr 0x20ed9adf2c0 <col:39> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x20ed9adf238 <col:39> 'const char *' lvalue ParmVar 0x20ed9addec0 'elem' 'const char *'
|   |   `-ReturnStmt 0x20ed9adf318 <line:268:9, col:17>
|   |     `-UnaryOperator 0x20ed9adf300 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x20ed9adf2d8 <col:17> 'int' 1
|   |-IfStmt 0x20ed9adf810 <line:272:5, line:281:5>
|   | |-UnaryOperator 0x20ed9adf400 <line:272:9, col:32> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x20ed9adf3e0 <col:10, col:32> 'int'
|   | |   `-BinaryOperator 0x20ed9adf3c0 <col:11, line:14:33> 'int' '&'
|   | |     |-ImplicitCastExpr 0x20ed9adf3a8 <line:272:11> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x20ed9adf360 <col:11> 'int' lvalue Var 0x20ed9ade2f8 'utype' 'int'
|   | |     `-IntegerLiteral 0x20ed9adf380 <line:14:33> 'int' 65536
|   | `-CompoundStmt 0x20ed9adf7e0 <line:272:35, line:281:5>
|   |   |-BinaryOperator 0x20ed9adf4f8 <line:273:9, col:22> 'int' '='
|   |   | |-MemberExpr 0x20ed9adf468 <col:9, col:14> 'int' lvalue ->utype 0x20ed9acca88
|   |   | | `-ImplicitCastExpr 0x20ed9adf450 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x20ed9adf418 <col:9> 'tag_exp_arg *' lvalue Var 0x20ed9ade178 'arg' 'tag_exp_arg *'
|   |   | `-ImplicitCastExpr 0x20ed9adf4e0 <col:22> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x20ed9adf4c0 <col:22> 'int' lvalue Var 0x20ed9ade2f8 'utype' 'int'
|   |   |-BinaryOperator 0x20ed9adf5b8 <line:274:9, col:20> 'const char *' '='
|   |   | |-MemberExpr 0x20ed9adf550 <col:9, col:14> 'const char *' lvalue ->str 0x20ed9accb68
|   |   | | `-ImplicitCastExpr 0x20ed9adf538 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x20ed9adf518 <col:9> 'tag_exp_arg *' lvalue Var 0x20ed9ade178 'arg' 'tag_exp_arg *'
|   |   | `-ImplicitCastExpr 0x20ed9adf5a0 <col:20> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x20ed9adf580 <col:20> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |   |-IfStmt 0x20ed9adf790 <line:276:9, line:279:9>
|   |   | |-BinaryOperator 0x20ed9adf6e8 <line:276:13, col:32> 'int' '&&'
|   |   | | |-UnaryOperator 0x20ed9adf610 <col:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x20ed9adf5f8 <col:14> 'const char *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x20ed9adf5d8 <col:14> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |   | | `-ImplicitCastExpr 0x20ed9adf6d0 <col:24, col:32> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x20ed9adf6b8 <col:24, col:32> 'char' <LValueToRValue>
|   |   | |     `-ArraySubscriptExpr 0x20ed9adf698 <col:24, col:32> 'const char' lvalue
|   |   | |       |-ImplicitCastExpr 0x20ed9adf668 <col:24> 'const char *' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x20ed9adf628 <col:24> 'const char *' lvalue ParmVar 0x20ed9addec0 'elem' 'const char *'
|   |   | |       `-ImplicitCastExpr 0x20ed9adf680 <col:29> 'int' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x20ed9adf648 <col:29> 'int' lvalue ParmVar 0x20ed9addf40 'len' 'int'
|   |   | `-CompoundStmt 0x20ed9adf778 <col:35, line:279:9>
|   |   |   `-ReturnStmt 0x20ed9adf768 <line:278:13, col:21>
|   |   |     `-UnaryOperator 0x20ed9adf750 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x20ed9adf728 <col:21> 'int' 1
|   |   `-ReturnStmt 0x20ed9adf7d0 <line:280:9, col:16>
|   |     `-IntegerLiteral 0x20ed9adf7a8 <col:16> 'int' 0
|   |-SwitchStmt 0x20ed9adf860 <line:283:5, line:342:5>
|   | |-ImplicitCastExpr 0x20ed9adf848 <line:283:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x20ed9adf828 <col:13> 'int' lvalue Var 0x20ed9ade2f8 'utype' 'int'
|   | `-CompoundStmt 0x20ed9ad9a48 <col:20, line:342:5>
|   |   |-CaseStmt 0x20ed9adf928 <line:285:5, line:290:9>
|   |   | |-ConstantExpr 0x20ed9adf910 <line:15:33, col:49> 'int'
|   |   | | `-ParenExpr 0x20ed9adf8f0 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x20ed9adf8d0 <line:14:33, line:15:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x20ed9adf880 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x20ed9adf8a8 <line:15:48> 'int' 1
|   |   | `-IfStmt 0x20ed9adfab8 <line:287:9, line:290:9>
|   |   |   |-BinaryOperator 0x20ed9adfa10 <line:287:13, col:30> 'int' '!='
|   |   |   | |-ImplicitCastExpr 0x20ed9adf9f8 <col:13, col:18> 'int' <LValueToRValue>
|   |   |   | | `-MemberExpr 0x20ed9adf988 <col:13, col:18> 'int' lvalue ->imp_tag 0x20ed9acc9a8
|   |   |   | |   `-ImplicitCastExpr 0x20ed9adf970 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x20ed9adf950 <col:13> 'tag_exp_arg *' lvalue Var 0x20ed9ade178 'arg' 'tag_exp_arg *'
|   |   |   | `-UnaryOperator 0x20ed9adf9e0 <col:29, col:30> 'int' prefix '-'
|   |   |   |   `-IntegerLiteral 0x20ed9adf9b8 <col:30> 'int' 1
|   |   |   `-CompoundStmt 0x20ed9adfaa0 <col:33, line:290:9>
|   |   |     `-ReturnStmt 0x20ed9adfa90 <line:289:13, col:21>
|   |   |       `-UnaryOperator 0x20ed9adfa78 <col:20, col:21> 'int' prefix '-'
|   |   |         `-IntegerLiteral 0x20ed9adfa50 <col:21> 'int' 1
|   |   |-IfStmt 0x20ed9adfd48 <line:291:9, line:292:21>
|   |   | |-UnaryOperator 0x20ed9adfce0 <line:291:13, col:72> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x20ed9adfc70 <col:14, col:72> 'int'
|   |   | |   |-ImplicitCastExpr 0x20ed9adfc58 <col:14> 'int (*)(const char *, int, int *, int *)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x20ed9adfad0 <col:14> 'int (const char *, int, int *, int *)' Function 0x20ed9ac6140 'parse_tagging' 'int (const char *, int, int *, int *)'
|   |   | |   |-ImplicitCastExpr 0x20ed9adfcb0 <col:28> 'const char *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x20ed9adfaf0 <col:28> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |   | |   |-ImplicitCastExpr 0x20ed9adfcc8 <col:36> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x20ed9adfb10 <col:36> 'int' lvalue Var 0x20ed9ade390 'vlen' 'int'
|   |   | |   |-UnaryOperator 0x20ed9adfb98 <col:42, col:48> 'int *' prefix '&' cannot overflow
|   |   | |   | `-MemberExpr 0x20ed9adfb68 <col:43, col:48> 'int' lvalue ->imp_tag 0x20ed9acc9a8
|   |   | |   |   `-ImplicitCastExpr 0x20ed9adfb50 <col:43> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x20ed9adfb30 <col:43> 'tag_exp_arg *' lvalue Var 0x20ed9ade178 'arg' 'tag_exp_arg *'
|   |   | |   `-UnaryOperator 0x20ed9adfc18 <col:57, col:63> 'int *' prefix '&' cannot overflow
|   |   | |     `-MemberExpr 0x20ed9adfbe8 <col:58, col:63> 'int' lvalue ->imp_class 0x20ed9acca18
|   |   | |       `-ImplicitCastExpr 0x20ed9adfbd0 <col:58> 'tag_exp_arg *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x20ed9adfbb0 <col:58> 'tag_exp_arg *' lvalue Var 0x20ed9ade178 'arg' 'tag_exp_arg *'
|   |   | `-ReturnStmt 0x20ed9adfd38 <line:292:13, col:21>
|   |   |   `-UnaryOperator 0x20ed9adfd20 <col:20, col:21> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x20ed9adfcf8 <col:21> 'int' 1
|   |   |-BreakStmt 0x20ed9adfd60 <line:293:9>
|   |   |-CaseStmt 0x20ed9adfe10 <line:295:5, line:298:21>
|   |   | |-ConstantExpr 0x20ed9adfdf8 <line:16:33, col:49> 'int'
|   |   | | `-ParenExpr 0x20ed9adfdd8 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x20ed9adfdb8 <line:14:33, line:16:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x20ed9adfd68 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x20ed9adfd90 <line:16:48> 'int' 2
|   |   | `-IfStmt 0x20ed9ae0028 <line:297:9, line:298:21>
|   |   |   |-UnaryOperator 0x20ed9adffc0 <line:297:13, col:62> 'int' prefix '!' cannot overflow
|   |   |   | `-CallExpr 0x20ed9adff50 <col:14, col:62> 'int'
|   |   |   |   |-ImplicitCastExpr 0x20ed9adff38 <col:14> 'int (*)(const char *, int, int *, int *)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x20ed9adfe38 <col:14> 'int (const char *, int, int *, int *)' Function 0x20ed9ac6140 'parse_tagging' 'int (const char *, int, int *, int *)'
|   |   |   |   |-ImplicitCastExpr 0x20ed9adff90 <col:28> 'const char *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x20ed9adfe58 <col:28> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |   |   |   |-ImplicitCastExpr 0x20ed9adffa8 <col:36> 'int' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x20ed9adfe78 <col:36> 'int' lvalue Var 0x20ed9ade390 'vlen' 'int'
|   |   |   |   |-UnaryOperator 0x20ed9adfed0 <col:42, col:43> 'int *' prefix '&' cannot overflow
|   |   |   |   | `-DeclRefExpr 0x20ed9adfe98 <col:43> 'int' lvalue Var 0x20ed9ade5e0 'tmp_tag' 'int'
|   |   |   |   `-UnaryOperator 0x20ed9adff20 <col:52, col:53> 'int *' prefix '&' cannot overflow
|   |   |   |     `-DeclRefExpr 0x20ed9adfee8 <col:53> 'int' lvalue Var 0x20ed9ade660 'tmp_class' 'int'
|   |   |   `-ReturnStmt 0x20ed9ae0018 <line:298:13, col:21>
|   |   |     `-UnaryOperator 0x20ed9ae0000 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x20ed9adffd8 <col:21> 'int' 1
|   |   |-IfStmt 0x20ed9ae02b0 <line:299:9, line:300:21>
|   |   | |-UnaryOperator 0x20ed9ae0248 <line:299:13, col:57> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x20ed9ae01b0 <col:14, col:57> 'int'
|   |   | |   |-ImplicitCastExpr 0x20ed9ae0198 <col:14> 'int (*)(tag_exp_arg *, int, int, int, int, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x20ed9ae0040 <col:14> 'int (tag_exp_arg *, int, int, int, int, int)' Function 0x20ed9ac5d60 'append_exp' 'int (tag_exp_arg *, int, int, int, int, int)'
|   |   | |   |-ImplicitCastExpr 0x20ed9ae0200 <col:25> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x20ed9ae0060 <col:25> 'tag_exp_arg *' lvalue Var 0x20ed9ade178 'arg' 'tag_exp_arg *'
|   |   | |   |-ImplicitCastExpr 0x20ed9ae0218 <col:30> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x20ed9ae0080 <col:30> 'int' lvalue Var 0x20ed9ade5e0 'tmp_tag' 'int'
|   |   | |   |-ImplicitCastExpr 0x20ed9ae0230 <col:39> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x20ed9ae00a0 <col:39> 'int' lvalue Var 0x20ed9ade660 'tmp_class' 'int'
|   |   | |   |-IntegerLiteral 0x20ed9ae00c0 <col:50> 'int' 1
|   |   | |   |-IntegerLiteral 0x20ed9ae00e8 <col:53> 'int' 0
|   |   | |   `-IntegerLiteral 0x20ed9ae0110 <col:56> 'int' 0
|   |   | `-ReturnStmt 0x20ed9ae02a0 <line:300:13, col:21>
|   |   |   `-UnaryOperator 0x20ed9ae0288 <col:20, col:21> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x20ed9ae0260 <col:21> 'int' 1
|   |   |-BreakStmt 0x20ed9ae02c8 <line:301:9>
|   |   |-CaseStmt 0x20ed9ae0378 <line:303:5, line:305:21>
|   |   | |-ConstantExpr 0x20ed9ae0360 <line:20:33, col:49> 'int'
|   |   | | `-ParenExpr 0x20ed9ae0340 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x20ed9ae0320 <line:14:33, line:20:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x20ed9ae02d0 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x20ed9ae02f8 <line:20:48> 'int' 6
|   |   | `-IfStmt 0x20ed9ae04d0 <line:304:9, line:305:21>
|   |   |   |-OpaqueValueExpr 0x20ed9ae04a8 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x20ed9ae0498 <col:13, col:21>
|   |   |     `-UnaryOperator 0x20ed9ae0480 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x20ed9ae0458 <col:21> 'int' 1
|   |   |-BreakStmt 0x20ed9ae04e8 <line:306:9>
|   |   |-CaseStmt 0x20ed9ae0598 <line:308:5, line:310:21>
|   |   | |-ConstantExpr 0x20ed9ae0580 <line:21:33, col:49> 'int'
|   |   | | `-ParenExpr 0x20ed9ae0560 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x20ed9ae0540 <line:14:33, line:21:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x20ed9ae04f0 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x20ed9ae0518 <line:21:48> 'int' 7
|   |   | `-IfStmt 0x20ed9ae06e0 <line:309:9, line:310:21>
|   |   |   |-OpaqueValueExpr 0x20ed9ae06c8 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x20ed9ae06b8 <col:13, col:21>
|   |   |     `-UnaryOperator 0x20ed9ae06a0 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x20ed9ae0678 <col:21> 'int' 1
|   |   |-BreakStmt 0x20ed9ae06f8 <line:311:9>
|   |   |-CaseStmt 0x20ed9ae07a8 <line:313:5, line:315:21>
|   |   | |-ConstantExpr 0x20ed9ae0790 <line:18:33, col:49> 'int'
|   |   | | `-ParenExpr 0x20ed9ae0770 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x20ed9ae0750 <line:14:33, line:18:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x20ed9ae0700 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x20ed9ae0728 <line:18:48> 'int' 4
|   |   | `-IfStmt 0x20ed9ae08f0 <line:314:9, line:315:21>
|   |   |   |-OpaqueValueExpr 0x20ed9ae08d8 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x20ed9ae08c8 <col:13, col:21>
|   |   |     `-UnaryOperator 0x20ed9ae08b0 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x20ed9ae0888 <col:21> 'int' 1
|   |   |-BreakStmt 0x20ed9ae0908 <line:316:9>
|   |   |-CaseStmt 0x20ed9ae09b8 <line:318:5, line:320:21>
|   |   | |-ConstantExpr 0x20ed9ae09a0 <line:19:33, col:49> 'int'
|   |   | | `-ParenExpr 0x20ed9ae0980 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x20ed9ae0960 <line:14:33, line:19:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x20ed9ae0910 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x20ed9ae0938 <line:19:48> 'int' 5
|   |   | `-IfStmt 0x20ed9ae0b00 <line:319:9, line:320:21>
|   |   |   |-OpaqueValueExpr 0x20ed9ae0ae8 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x20ed9ae0ad8 <col:13, col:21>
|   |   |     `-UnaryOperator 0x20ed9ae0ac0 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x20ed9ae0a98 <col:21> 'int' 1
|   |   |-BreakStmt 0x20ed9ae0b18 <line:321:9>
|   |   |-CaseStmt 0x20ed9ae0bc8 <line:323:5, line:327:9>
|   |   | |-ConstantExpr 0x20ed9ae0bb0 <line:22:33, col:49> 'int'
|   |   | | `-ParenExpr 0x20ed9ae0b90 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x20ed9ae0b70 <line:14:33, line:22:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x20ed9ae0b20 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x20ed9ae0b48 <line:22:48> 'int' 8
|   |   | `-IfStmt 0x20ed9ae0cc8 <line:324:9, line:327:9>
|   |   |   |-UnaryOperator 0x20ed9ae0c28 <line:324:13, col:14> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x20ed9ae0c10 <col:14> 'const char *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x20ed9ae0bf0 <col:14> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |   |   `-CompoundStmt 0x20ed9ae0cb0 <col:22, line:327:9>
|   |   |     `-ReturnStmt 0x20ed9ae0ca0 <line:326:13, col:21>
|   |   |       `-UnaryOperator 0x20ed9ae0c88 <col:20, col:21> 'int' prefix '-'
|   |   |         `-IntegerLiteral 0x20ed9ae0c60 <col:21> 'int' 1
|   |   |-IfStmt 0x20ed9ad9a18 <line:328:9, line:339:9> has_else
|   |   | |-BinaryOperator 0x20ed9ae1120 <line:328:13, col:44> 'int' '=='
|   |   | | |-CallExpr 0x20ed9ae1060 <col:13, col:39> 'int'
|   |   | | | |-ImplicitCastExpr 0x20ed9ae1048 <col:13> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x20ed9ae0f10 <col:13> 'int (const char *, const char *, unsigned long long)' Function 0x20ed9ae0d20 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   | | | |-ImplicitCastExpr 0x20ed9ae1098 <col:21> 'const char *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x20ed9ae0f48 <col:21> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |   | | | |-ImplicitCastExpr 0x20ed9ae10c8 <col:29> 'const char *' <NoOp>
|   |   | | | | `-ImplicitCastExpr 0x20ed9ae10b0 <col:29> 'char *' <ArrayToPointerDecay>
|   |   | | | |   `-StringLiteral 0x20ed9ae0fa8 <col:29> 'char [6]' lvalue "ASCII"
|   |   | | | `-ImplicitCastExpr 0x20ed9ae10e0 <col:38> 'unsigned long long' <IntegralCast>
|   |   | | |   `-IntegerLiteral 0x20ed9ae0fc8 <col:38> 'int' 5
|   |   | | `-IntegerLiteral 0x20ed9ae10f8 <col:44> 'int' 0
|   |   | |-BinaryOperator 0x20ed9ae11d0 <line:329:13, line:33:33> 'int' '='
|   |   | | |-MemberExpr 0x20ed9ae1178 <line:329:13, col:18> 'int' lvalue ->format 0x20ed9accaf8
|   |   | | | `-ImplicitCastExpr 0x20ed9ae1160 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x20ed9ae1140 <col:13> 'tag_exp_arg *' lvalue Var 0x20ed9ade178 'arg' 'tag_exp_arg *'
|   |   | | `-IntegerLiteral 0x20ed9ae11a8 <line:33:33> 'int' 1
|   |   | `-IfStmt 0x20ed9ad99f0 <line:330:14, line:339:9> has_else
|   |   |   |-BinaryOperator 0x20ed9ae1380 <line:330:18, col:48> 'int' '=='
|   |   |   | |-CallExpr 0x20ed9ae12c0 <col:18, col:43> 'int'
|   |   |   | | |-ImplicitCastExpr 0x20ed9ae12a8 <col:18> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | | | `-DeclRefExpr 0x20ed9ae11f0 <col:18> 'int (const char *, const char *, unsigned long long)' Function 0x20ed9ae0d20 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   |   | | |-ImplicitCastExpr 0x20ed9ae12f8 <col:26> 'const char *' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x20ed9ae1210 <col:26> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |   |   | | |-ImplicitCastExpr 0x20ed9ae1328 <col:34> 'const char *' <NoOp>
|   |   |   | | | `-ImplicitCastExpr 0x20ed9ae1310 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |   | | |   `-StringLiteral 0x20ed9ae1230 <col:34> 'char [5]' lvalue "UTF8"
|   |   |   | | `-ImplicitCastExpr 0x20ed9ae1340 <col:42> 'unsigned long long' <IntegralCast>
|   |   |   | |   `-IntegerLiteral 0x20ed9ae1250 <col:42> 'int' 4
|   |   |   | `-IntegerLiteral 0x20ed9ae1358 <col:48> 'int' 0
|   |   |   |-BinaryOperator 0x20ed9ae1430 <line:331:13, line:35:33> 'int' '='
|   |   |   | |-MemberExpr 0x20ed9ae13d8 <line:331:13, col:18> 'int' lvalue ->format 0x20ed9accaf8
|   |   |   | | `-ImplicitCastExpr 0x20ed9ae13c0 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x20ed9ae13a0 <col:13> 'tag_exp_arg *' lvalue Var 0x20ed9ade178 'arg' 'tag_exp_arg *'
|   |   |   | `-IntegerLiteral 0x20ed9ae1408 <line:35:33> 'int' 2
|   |   |   `-IfStmt 0x20ed9ad99c8 <line:332:14, line:339:9> has_else
|   |   |     |-BinaryOperator 0x20ed9ad95b0 <line:332:18, col:47> 'int' '=='
|   |   |     | |-CallExpr 0x20ed9ad94f0 <col:18, col:42> 'int'
|   |   |     | | |-ImplicitCastExpr 0x20ed9ad94d8 <col:18> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   |     | | | `-DeclRefExpr 0x20ed9ae1450 <col:18> 'int (const char *, const char *, unsigned long long)' Function 0x20ed9ae0d20 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   |     | | |-ImplicitCastExpr 0x20ed9ad9528 <col:26> 'const char *' <LValueToRValue>
|   |   |     | | | `-DeclRefExpr 0x20ed9ae1470 <col:26> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |   |     | | |-ImplicitCastExpr 0x20ed9ad9558 <col:34> 'const char *' <NoOp>
|   |   |     | | | `-ImplicitCastExpr 0x20ed9ad9540 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |     | | |   `-StringLiteral 0x20ed9ad9460 <col:34> 'char [4]' lvalue "HEX"
|   |   |     | | `-ImplicitCastExpr 0x20ed9ad9570 <col:41> 'unsigned long long' <IntegralCast>
|   |   |     | |   `-IntegerLiteral 0x20ed9ad9480 <col:41> 'int' 3
|   |   |     | `-IntegerLiteral 0x20ed9ad9588 <col:47> 'int' 0
|   |   |     |-BinaryOperator 0x20ed9ad9660 <line:333:13, line:37:33> 'int' '='
|   |   |     | |-MemberExpr 0x20ed9ad9608 <line:333:13, col:18> 'int' lvalue ->format 0x20ed9accaf8
|   |   |     | | `-ImplicitCastExpr 0x20ed9ad95f0 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |     | |   `-DeclRefExpr 0x20ed9ad95d0 <col:13> 'tag_exp_arg *' lvalue Var 0x20ed9ade178 'arg' 'tag_exp_arg *'
|   |   |     | `-IntegerLiteral 0x20ed9ad9638 <line:37:33> 'int' 3
|   |   |     `-IfStmt 0x20ed9ad99a0 <line:334:14, line:339:9> has_else
|   |   |       |-BinaryOperator 0x20ed9ad9848 <line:334:18, col:51> 'int' '=='
|   |   |       | |-CallExpr 0x20ed9ad9788 <col:18, col:46> 'int'
|   |   |       | | |-ImplicitCastExpr 0x20ed9ad9770 <col:18> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | | `-DeclRefExpr 0x20ed9ad9680 <col:18> 'int (const char *, const char *, unsigned long long)' Function 0x20ed9ae0d20 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   |       | | |-ImplicitCastExpr 0x20ed9ad97c0 <col:26> 'const char *' <LValueToRValue>
|   |   |       | | | `-DeclRefExpr 0x20ed9ad96a0 <col:26> 'const char *' lvalue Var 0x20ed9ade530 'vstart' 'const char *'
|   |   |       | | |-ImplicitCastExpr 0x20ed9ad97f0 <col:34> 'const char *' <NoOp>
|   |   |       | | | `-ImplicitCastExpr 0x20ed9ad97d8 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |       | | |   `-StringLiteral 0x20ed9ad96f8 <col:34> 'char [8]' lvalue "BITLIST"
|   |   |       | | `-ImplicitCastExpr 0x20ed9ad9808 <col:45> 'unsigned long long' <IntegralCast>
|   |   |       | |   `-IntegerLiteral 0x20ed9ad9718 <col:45> 'int' 7
|   |   |       | `-IntegerLiteral 0x20ed9ad9820 <col:51> 'int' 0
|   |   |       |-BinaryOperator 0x20ed9ad98f8 <line:335:13, line:39:33> 'int' '='
|   |   |       | |-MemberExpr 0x20ed9ad98a0 <line:335:13, col:18> 'int' lvalue ->format 0x20ed9accaf8
|   |   |       | | `-ImplicitCastExpr 0x20ed9ad9888 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |       | |   `-DeclRefExpr 0x20ed9ad9868 <col:13> 'tag_exp_arg *' lvalue Var 0x20ed9ade178 'arg' 'tag_exp_arg *'
|   |   |       | `-IntegerLiteral 0x20ed9ad98d0 <line:39:33> 'int' 4
|   |   |       `-CompoundStmt 0x20ed9ad9988 <line:336:14, line:339:9>
|   |   |         `-ReturnStmt 0x20ed9ad9978 <line:338:13, col:21>
|   |   |           `-UnaryOperator 0x20ed9ad9960 <col:20, col:21> 'int' prefix '-'
|   |   |             `-IntegerLiteral 0x20ed9ad9938 <col:21> 'int' 1
|   |   `-BreakStmt 0x20ed9ad9a40 <line:340:9>
|   `-ReturnStmt 0x20ed9ad9b08 <line:344:5, col:12>
|     `-IntegerLiteral 0x20ed9ad9ae0 <col:12> 'int' 1
|-FunctionDecl 0x20ed9ae0d20 <line:328:13> col:13 implicit used strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x20ed9ae0dc0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x20ed9ae0e28 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x20ed9ae0e90 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x20ed9ad9e38 prev 0x20ed9ac6140 <line:348:1, line:401:1> line:348:12 used parse_tagging 'int (const char *, int, int *, int *)' static
| |-ParmVarDecl 0x20ed9ad9ba8 <col:26, col:38> col:38 used vstart 'const char *'
| |-ParmVarDecl 0x20ed9ad9c28 <col:46, col:50> col:50 used vlen 'int'
| |-ParmVarDecl 0x20ed9ad9ca8 <col:56, col:61> col:61 used ptag 'int *'
| |-ParmVarDecl 0x20ed9ad9d28 <col:67, col:72> col:72 used pclass 'int *'
| `-CompoundStmt 0x20ed9ae15b0 <line:349:1, line:401:1>
|   |-DeclStmt 0x20ed9ada000 <line:350:5, col:17>
|   | `-VarDecl 0x20ed9ad9f98 <col:5, col:16> col:10 used erch 'char [2]'
|   |-DeclStmt 0x20ed9ada098 <line:351:5, col:17>
|   | `-VarDecl 0x20ed9ada030 <col:5, col:10> col:10 used tag_num 'long'
|   |-DeclStmt 0x20ed9ada130 <line:352:5, col:15>
|   | `-VarDecl 0x20ed9ada0c8 <col:5, col:11> col:11 used eptr 'char *'
|   |-IfStmt 0x20ed9ada1d0 <line:353:5, line:354:16>
|   | |-UnaryOperator 0x20ed9ada180 <line:353:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x20ed9ada168 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9ada148 <col:10> 'const char *' lvalue ParmVar 0x20ed9ad9ba8 'vstart' 'const char *'
|   | `-ReturnStmt 0x20ed9ada1c0 <line:354:9, col:16>
|   |   `-IntegerLiteral 0x20ed9ada198 <col:16> 'int' 0
|   |-BinaryOperator 0x20ed9ae2708 <line:355:5, col:40> 'long' '='
|   | |-DeclRefExpr 0x20ed9ada1e8 <col:5> 'long' lvalue Var 0x20ed9ada030 'tag_num' 'long'
|   | `-ImplicitCastExpr 0x20ed9ae26f0 <col:15, col:40> 'long' <IntegralCast>
|   |   `-CallExpr 0x20ed9ae26a0 <col:15, col:40> 'unsigned long'
|   |     |-ImplicitCastExpr 0x20ed9ae2688 <col:15> 'unsigned long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x20ed9ae2570 <col:15> 'unsigned long (const char *, char **, int)' Function 0x20ed9ada290 'strtoul' 'unsigned long (const char *, char **, int)'
|   |     |-ImplicitCastExpr 0x20ed9ae26d8 <col:23> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x20ed9ae25a8 <col:23> 'const char *' lvalue ParmVar 0x20ed9ad9ba8 'vstart' 'const char *'
|   |     |-UnaryOperator 0x20ed9ae2600 <col:31, col:32> 'char **' prefix '&' cannot overflow
|   |     | `-DeclRefExpr 0x20ed9ae25c8 <col:32> 'char *' lvalue Var 0x20ed9ada0c8 'eptr' 'char *'
|   |     `-IntegerLiteral 0x20ed9ae2618 <col:38> 'int' 10
|   |-IfStmt 0x20ed9ae29a8 <line:357:5, line:358:16>
|   | |-BinaryOperator 0x20ed9ae2950 <line:357:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x20ed9ae2810 <col:9, col:18> 'int' '&&'
|   | | | |-ImplicitCastExpr 0x20ed9ae27c8 <col:9> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x20ed9ae2728 <col:9> 'char *' lvalue Var 0x20ed9ada0c8 'eptr' 'char *'
|   | | | `-ImplicitCastExpr 0x20ed9ae27f8 <col:17, col:18> 'int' <IntegralCast>
|   | | |   `-ImplicitCastExpr 0x20ed9ae27e0 <col:17, col:18> 'char' <LValueToRValue>
|   | | |     `-UnaryOperator 0x20ed9ae27b0 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | | |       `-ImplicitCastExpr 0x20ed9ae2798 <col:18> 'char *' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x20ed9ae2778 <col:18> 'char *' lvalue Var 0x20ed9ada0c8 'eptr' 'char *'
|   | | `-ParenExpr 0x20ed9ae2930 <col:26, col:47> 'int'
|   | |   `-BinaryOperator 0x20ed9ae2910 <col:27, col:43> 'int' '>'
|   | |     |-ImplicitCastExpr 0x20ed9ae28e0 <col:27> 'char *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x20ed9ae2830 <col:27> 'char *' lvalue Var 0x20ed9ada0c8 'eptr' 'char *'
|   | |     `-ImplicitCastExpr 0x20ed9ae28f8 <col:34, col:43> 'char *' <BitCast>
|   | |       `-BinaryOperator 0x20ed9ae28c0 <col:34, col:43> 'const char *' '+'
|   | |         |-ImplicitCastExpr 0x20ed9ae2890 <col:34> 'const char *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x20ed9ae2850 <col:34> 'const char *' lvalue ParmVar 0x20ed9ad9ba8 'vstart' 'const char *'
|   | |         `-ImplicitCastExpr 0x20ed9ae28a8 <col:43> 'int' <LValueToRValue>
|   | |           `-DeclRefExpr 0x20ed9ae2870 <col:43> 'int' lvalue ParmVar 0x20ed9ad9c28 'vlen' 'int'
|   | `-ReturnStmt 0x20ed9ae2998 <line:358:9, col:16>
|   |   `-IntegerLiteral 0x20ed9ae2970 <col:16> 'int' 0
|   |-IfStmt 0x20ed9ae2ac8 <line:359:5, line:362:5>
|   | |-BinaryOperator 0x20ed9ae2a38 <line:359:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x20ed9ae2a08 <col:9> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20ed9ae29c0 <col:9> 'long' lvalue Var 0x20ed9ada030 'tag_num' 'long'
|   | | `-ImplicitCastExpr 0x20ed9ae2a20 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x20ed9ae29e0 <col:19> 'int' 0
|   | `-CompoundStmt 0x20ed9ae2ab0 <col:22, line:362:5>
|   |   `-ReturnStmt 0x20ed9ae2aa0 <line:361:9, col:16>
|   |     `-IntegerLiteral 0x20ed9ae2a78 <col:16> 'int' 0
|   |-BinaryOperator 0x20ed9ae2b80 <line:363:5, col:13> 'int' '='
|   | |-UnaryOperator 0x20ed9ae2b18 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x20ed9ae2b00 <col:6> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9ae2ae0 <col:6> 'int *' lvalue ParmVar 0x20ed9ad9ca8 'ptag' 'int *'
|   | `-ImplicitCastExpr 0x20ed9ae2b68 <col:13> 'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x20ed9ae2b50 <col:13> 'long' <LValueToRValue>
|   |     `-DeclRefExpr 0x20ed9ae2b30 <col:13> 'long' lvalue Var 0x20ed9ada030 'tag_num' 'long'
|   |-IfStmt 0x20ed9ae2d20 <line:365:5, line:368:16> has_else
|   | |-ImplicitCastExpr 0x20ed9ae2bc0 <line:365:9> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x20ed9ae2ba0 <col:9> 'char *' lvalue Var 0x20ed9ada0c8 'eptr' 'char *'
|   | |-CompoundAssignOperator 0x20ed9ae2c88 <line:366:9, col:24> 'int' '-=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | | |-DeclRefExpr 0x20ed9ae2bd8 <col:9> 'int' lvalue ParmVar 0x20ed9ad9c28 'vlen' 'int'
|   | | `-BinaryOperator 0x20ed9ae2c68 <col:17, col:24> 'long long' '-'
|   | |   |-ImplicitCastExpr 0x20ed9ae2c38 <col:17> 'char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x20ed9ae2bf8 <col:17> 'char *' lvalue Var 0x20ed9ada0c8 'eptr' 'char *'
|   | |   `-ImplicitCastExpr 0x20ed9ae2c50 <col:24> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x20ed9ae2c18 <col:24> 'const char *' lvalue ParmVar 0x20ed9ad9ba8 'vstart' 'const char *'
|   | `-BinaryOperator 0x20ed9ae2d00 <line:368:9, col:16> 'int' '='
|   |   |-DeclRefExpr 0x20ed9ae2cb8 <col:9> 'int' lvalue ParmVar 0x20ed9ad9c28 'vlen' 'int'
|   |   `-IntegerLiteral 0x20ed9ae2cd8 <col:16> 'int' 0
|   |-IfStmt 0x20ed9ae1550 <line:369:5, line:397:9> has_else
|   | |-ImplicitCastExpr 0x20ed9ae2d68 <line:369:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x20ed9ae2d48 <col:9> 'int' lvalue ParmVar 0x20ed9ad9c28 'vlen' 'int'
|   | |-CompoundStmt 0x20ed9ae14e0 <col:15, line:396:5>
|   | | `-SwitchStmt 0x20ed9ae2e00 <line:370:9, line:395:9>
|   | |   |-ImplicitCastExpr 0x20ed9ae2de8 <line:370:17, col:18> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x20ed9ae2dd0 <col:17, col:18> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x20ed9ae2db8 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x20ed9ae2da0 <col:18> 'char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x20ed9ae2d80 <col:18> 'char *' lvalue Var 0x20ed9ada0c8 'eptr' 'char *'
|   | |   `-CompoundStmt 0x20ed9ae3480 <col:24, line:395:9>
|   | |     |-CaseStmt 0x20ed9ae2e50 <line:372:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x20ed9ae2e38 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x20ed9ae2e20 <col:14> 'int' 85
|   | |     | `-NullStmt 0x20ed9ae2ec8 <<invalid sloc>>
|   | |     |-BreakStmt 0x20ed9ae2ed0 <line:374:13>
|   | |     |-CaseStmt 0x20ed9ae2f08 <line:376:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x20ed9ae2ef0 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x20ed9ae2ed8 <col:14> 'int' 65
|   | |     | `-NullStmt 0x20ed9ae2f80 <<invalid sloc>>
|   | |     |-BreakStmt 0x20ed9ae2f88 <line:378:13>
|   | |     |-CaseStmt 0x20ed9ae2fc0 <line:380:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x20ed9ae2fa8 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x20ed9ae2f90 <col:14> 'int' 80
|   | |     | `-NullStmt 0x20ed9ae3038 <<invalid sloc>>
|   | |     |-BreakStmt 0x20ed9ae3040 <line:382:13>
|   | |     |-CaseStmt 0x20ed9ae3078 <line:384:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x20ed9ae3060 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x20ed9ae3048 <col:14> 'int' 67
|   | |     | `-NullStmt 0x20ed9ae30f0 <<invalid sloc>>
|   | |     |-BreakStmt 0x20ed9ae30f8 <line:386:13>
|   | |     |-DefaultStmt 0x20ed9ae3220 <line:388:9, line:389:24>
|   | |     | `-BinaryOperator 0x20ed9ae3200 <col:13, col:24> 'char' '='
|   | |     |   |-ArraySubscriptExpr 0x20ed9ae3178 <col:13, col:19> 'char' lvalue
|   | |     |   | |-ImplicitCastExpr 0x20ed9ae3160 <col:13> 'char *' <ArrayToPointerDecay>
|   | |     |   | | `-DeclRefExpr 0x20ed9ae3100 <col:13> 'char [2]' lvalue Var 0x20ed9ad9f98 'erch' 'char [2]'
|   | |     |   | `-IntegerLiteral 0x20ed9ae3138 <col:18> 'int' 0
|   | |     |   `-ImplicitCastExpr 0x20ed9ae31e8 <col:23, col:24> 'char' <LValueToRValue>
|   | |     |     `-UnaryOperator 0x20ed9ae31d0 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
|   | |     |       `-ImplicitCastExpr 0x20ed9ae31b8 <col:24> 'char *' <LValueToRValue>
|   | |     |         `-DeclRefExpr 0x20ed9ae3198 <col:24> 'char *' lvalue Var 0x20ed9ada0c8 'eptr' 'char *'
|   | |     |-BinaryOperator 0x20ed9ae3300 <line:390:13, col:23> 'char' '='
|   | |     | |-ArraySubscriptExpr 0x20ed9ae32a0 <col:13, col:19> 'char' lvalue
|   | |     | | |-ImplicitCastExpr 0x20ed9ae3288 <col:13> 'char *' <ArrayToPointerDecay>
|   | |     | | | `-DeclRefExpr 0x20ed9ae3240 <col:13> 'char [2]' lvalue Var 0x20ed9ad9f98 'erch' 'char [2]'
|   | |     | | `-IntegerLiteral 0x20ed9ae3260 <col:18> 'int' 1
|   | |     | `-ImplicitCastExpr 0x20ed9ae32e8 <col:23> 'char' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x20ed9ae32c0 <col:23> 'int' 0
|   | |     |-CallExpr 0x20ed9ae33e0 <line:392:13, col:48> 'int'
|   | |     | |-ImplicitCastExpr 0x20ed9ae33c8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   | |     | | `-DeclRefExpr 0x20ed9ae3340 <col:13> 'int ()' Function 0x20ed9adf0d0 'ERR_add_error_data' 'int ()'
|   | |     | |-IntegerLiteral 0x20ed9ae3360 <col:32> 'int' 2
|   | |     | |-ImplicitCastExpr 0x20ed9ae3418 <col:35> 'char *' <ArrayToPointerDecay>
|   | |     | | `-StringLiteral 0x20ed9ae3388 <col:35> 'char [6]' lvalue "Char="
|   | |     | `-ImplicitCastExpr 0x20ed9ae3430 <col:44> 'char *' <ArrayToPointerDecay>
|   | |     |   `-DeclRefExpr 0x20ed9ae33a8 <col:44> 'char [2]' lvalue Var 0x20ed9ad9f98 'erch' 'char [2]'
|   | |     `-ReturnStmt 0x20ed9ae3470 <line:393:13, col:20>
|   | |       `-IntegerLiteral 0x20ed9ae3448 <col:20> 'int' 0
|   | `-NullStmt 0x20ed9ae1548 <line:397:9>
|   `-ReturnStmt 0x20ed9ae15a0 <line:399:5, col:12>
|     `-IntegerLiteral 0x20ed9ae1578 <col:12> 'int' 1
|-FunctionDecl 0x20ed9ada290 <line:355:15> col:15 implicit used strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x20ed9ada330 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x20ed9ada398 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x20ed9ae24f0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x20ed9ae18e8 <line:405:1, line:464:1> line:405:19 invalid asn1_multi 'int *(int, const char *, int *, int, int *)' static
| |-ParmVarDecl 0x20ed9ae1630 <col:30, col:34> col:34 used utype 'int'
| |-ParmVarDecl 0x20ed9ae16b0 <col:41, col:53> col:53 used section 'const char *'
| |-ParmVarDecl 0x20ed9ae1730 <col:62, col:74> col:74 invalid cnf 'int *'
| |-ParmVarDecl 0x20ed9ae17b0 <line:406:30, col:34> col:34 used depth 'int'
| |-ParmVarDecl 0x20ed9ae1830 <col:41, col:46> col:46 used perr 'int *'
| `-CompoundStmt 0x20ed9aeb218 <line:407:1, line:464:1>
|   |-DeclStmt 0x20ed9ae1b78 <line:411:5, col:30>
|   | `-VarDecl 0x20ed9ae1b10 <col:5, col:20> col:20 used der 'unsigned char *'
|   |-DeclStmt 0x20ed9ae1c10 <line:412:5, col:15>
|   | `-VarDecl 0x20ed9ae1ba8 <col:5, col:9> col:9 used derlen 'int'
|   |-DeclStmt 0x20ed9ae1ca8 <line:413:5, col:10>
|   | `-VarDecl 0x20ed9ae1c40 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x20ed9ae1e88 <line:415:5, line:416:14>
|   | |-OpaqueValueExpr 0x20ed9ae1e70 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x20ed9ae1e58 <col:9, col:14> 'bad' 0x20ed9ae1e08
|   |-IfStmt 0x20ed9aea768 <line:417:5, line:432:5>
|   | |-ImplicitCastExpr 0x20ed9ae1ed8 <line:417:9> 'const char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x20ed9ae1ea0 <col:9> 'const char *' lvalue ParmVar 0x20ed9ae16b0 'section' 'const char *'
|   | `-CompoundStmt 0x20ed9aea748 <col:18, line:432:5>
|   |   |-IfStmt 0x20ed9ae1f20 <line:418:9, line:419:18>
|   |   | |-OpaqueValueExpr 0x20ed9ae1f08 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x20ed9ae1ef0 <col:13, col:18> 'bad' 0x20ed9ae1e08
|   |   `-IfStmt 0x20ed9ae20f0 <line:421:9, line:422:18>
|   |     |-OpaqueValueExpr 0x20ed9ae20d8 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x20ed9ae20c0 <col:13, col:18> 'bad' 0x20ed9ae1e08
|   |-IfStmt 0x20ed9aeab50 <line:443:5, line:444:14>
|   | |-BinaryOperator 0x20ed9aeab18 <line:443:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x20ed9aeab00 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20ed9aeaab8 <col:9> 'int' lvalue Var 0x20ed9ae1ba8 'derlen' 'int'
|   | | `-IntegerLiteral 0x20ed9aeaad8 <col:18> 'int' 0
|   | `-GotoStmt 0x20ed9aeab38 <line:444:9, col:14> 'bad' 0x20ed9ae1e08
|   |-IfStmt 0x20ed9aeace0 <line:445:5, line:446:14>
|   | |-OpaqueValueExpr 0x20ed9aeacc8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x20ed9aeacb0 <col:9, col:14> 'bad' 0x20ed9ae1e08
|   |-IfStmt 0x20ed9aeaeb0 <line:447:5, line:448:14>
|   | |-OpaqueValueExpr 0x20ed9aeae98 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x20ed9aeae80 <col:9, col:14> 'bad' 0x20ed9ae1e08
|   `-LabelStmt 0x20ed9aeafe0 <line:456:2, line:458:21> 'bad'
|     `-CallExpr 0x20ed9aeafa0 <col:5, col:21> 'int'
|       |-ImplicitCastExpr 0x20ed9aeaf88 <col:5> 'int (*)()' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x20ed9aeaf48 <col:5> 'int ()' Function 0x20ed9addba0 'OPENSSL_free' 'int ()'
|       `-ImplicitCastExpr 0x20ed9aeafc8 <col:18> 'unsigned char *' <LValueToRValue>
|         `-DeclRefExpr 0x20ed9aeaf68 <col:18> 'unsigned char *' lvalue Var 0x20ed9ae1b10 'der' 'unsigned char *'
|-FunctionDecl 0x20ed9ae8638 prev 0x20ed9ac5d60 <line:466:1, line:500:1> line:466:12 used append_exp 'int (tag_exp_arg *, int, int, int, int, int)' static
| |-ParmVarDecl 0x20ed9aeb280 <col:23, col:36> col:36 used arg 'tag_exp_arg *'
| |-ParmVarDecl 0x20ed9aeb300 <col:41, col:45> col:45 used exp_tag 'int'
| |-ParmVarDecl 0x20ed9aeb380 <col:54, col:58> col:58 used exp_class 'int'
| |-ParmVarDecl 0x20ed9aeb400 <line:467:23, col:27> col:27 used exp_constructed 'int'
| |-ParmVarDecl 0x20ed9aeb480 <col:44, col:48> col:48 used exp_pad 'int'
| |-ParmVarDecl 0x20ed9aeb500 <col:57, col:61> col:61 used imp_ok 'int'
| `-CompoundStmt 0x20ed9ae94a0 <line:468:1, line:500:1>
|   |-DeclStmt 0x20ed9ae8780 <line:469:5, col:26>
|   | `-VarDecl 0x20ed9ae8718 <col:5, col:19> col:19 used exp_tmp 'tag_exp_type *'
|   |-IfStmt 0x20ed9ae8978 <line:471:5, line:474:5>
|   | |-BinaryOperator 0x20ed9ae88e8 <line:471:9, col:34> 'int' '&&'
|   | | |-ParenExpr 0x20ed9ae8878 <col:9, col:28> 'int'
|   | | | `-BinaryOperator 0x20ed9ae8858 <col:10, col:27> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x20ed9ae8840 <col:10, col:15> 'int' <LValueToRValue>
|   | | |   | `-MemberExpr 0x20ed9ae87d0 <col:10, col:15> 'int' lvalue ->imp_tag 0x20ed9acc9a8
|   | | |   |   `-ImplicitCastExpr 0x20ed9ae87b8 <col:10> 'tag_exp_arg *' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x20ed9ae8798 <col:10> 'tag_exp_arg *' lvalue ParmVar 0x20ed9aeb280 'arg' 'tag_exp_arg *'
|   | | |   `-UnaryOperator 0x20ed9ae8828 <col:26, col:27> 'int' prefix '-'
|   | | |     `-IntegerLiteral 0x20ed9ae8800 <col:27> 'int' 1
|   | | `-UnaryOperator 0x20ed9ae88d0 <col:33, col:34> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x20ed9ae88b8 <col:34> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x20ed9ae8898 <col:34> 'int' lvalue ParmVar 0x20ed9aeb500 'imp_ok' 'int'
|   | `-CompoundStmt 0x20ed9ae8960 <col:42, line:474:5>
|   |   `-ReturnStmt 0x20ed9ae8950 <line:473:9, col:16>
|   |     `-IntegerLiteral 0x20ed9ae8928 <col:16> 'int' 0
|   |-IfStmt 0x20ed9ae8ac8 <line:476:5, line:479:5>
|   | |-BinaryOperator 0x20ed9ae8a38 <line:476:9, line:26:33> 'int' '=='
|   | | |-ImplicitCastExpr 0x20ed9ae8a20 <line:476:9, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x20ed9ae89c8 <col:9, col:14> 'int' lvalue ->exp_count 0x20ed9accd98
|   | | |   `-ImplicitCastExpr 0x20ed9ae89b0 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x20ed9ae8990 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x20ed9aeb280 'arg' 'tag_exp_arg *'
|   | | `-IntegerLiteral 0x20ed9ae89f8 <line:26:33> 'int' 20
|   | `-CompoundStmt 0x20ed9ae8ab0 <line:476:46, line:479:5>
|   |   `-ReturnStmt 0x20ed9ae8aa0 <line:478:9, col:16>
|   |     `-IntegerLiteral 0x20ed9ae8a78 <col:16> 'int' 0
|   |-BinaryOperator 0x20ed9ae8c50 <line:481:5, col:46> 'tag_exp_type *' '='
|   | |-DeclRefExpr 0x20ed9ae8ae0 <col:5> 'tag_exp_type *' lvalue Var 0x20ed9ae8718 'exp_tmp' 'tag_exp_type *'
|   | `-UnaryOperator 0x20ed9ae8c38 <col:15, col:46> 'tag_exp_type *' prefix '&' cannot overflow
|   |   `-ArraySubscriptExpr 0x20ed9ae8c18 <col:16, col:46> 'tag_exp_type':'tag_exp_type' lvalue
|   |     |-ImplicitCastExpr 0x20ed9ae8c00 <col:16, col:21> 'tag_exp_type *' <ArrayToPointerDecay>
|   |     | `-MemberExpr 0x20ed9ae8b50 <col:16, col:21> 'tag_exp_type [20]' lvalue ->exp_list 0x20ed9accd28
|   |     |   `-ImplicitCastExpr 0x20ed9ae8b38 <col:16> 'tag_exp_arg *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x20ed9ae8b18 <col:16> 'tag_exp_arg *' lvalue ParmVar 0x20ed9aeb280 'arg' 'tag_exp_arg *'
|   |     `-UnaryOperator 0x20ed9ae8be8 <col:30, col:44> 'int' postfix '++'
|   |       `-MemberExpr 0x20ed9ae8bb8 <col:30, col:35> 'int' lvalue ->exp_count 0x20ed9accd98
|   |         `-ImplicitCastExpr 0x20ed9ae8ba0 <col:30> 'tag_exp_arg *' <LValueToRValue>
|   |           `-DeclRefExpr 0x20ed9ae8b80 <col:30> 'tag_exp_arg *' lvalue ParmVar 0x20ed9aeb280 'arg' 'tag_exp_arg *'
|   |-IfStmt 0x20ed9ae92c0 <line:487:5, line:495:5> has_else
|   | |-BinaryOperator 0x20ed9ae8d30 <line:487:9, col:26> 'int' '!='
|   | | |-ImplicitCastExpr 0x20ed9ae8d18 <col:9, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x20ed9ae8ca8 <col:9, col:14> 'int' lvalue ->imp_tag 0x20ed9acc9a8
|   | | |   `-ImplicitCastExpr 0x20ed9ae8c90 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x20ed9ae8c70 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x20ed9aeb280 'arg' 'tag_exp_arg *'
|   | | `-UnaryOperator 0x20ed9ae8d00 <col:25, col:26> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x20ed9ae8cd8 <col:26> 'int' 1
|   | |-CompoundStmt 0x20ed9ae90f0 <col:29, line:492:5>
|   | | |-BinaryOperator 0x20ed9ae8e38 <line:488:9, col:33> 'int' '='
|   | | | |-MemberExpr 0x20ed9ae8d88 <col:9, col:18> 'int' lvalue ->exp_tag 0x20ed9acc5f8
|   | | | | `-ImplicitCastExpr 0x20ed9ae8d70 <col:9> 'tag_exp_type *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x20ed9ae8d50 <col:9> 'tag_exp_type *' lvalue Var 0x20ed9ae8718 'exp_tmp' 'tag_exp_type *'
|   | | | `-ImplicitCastExpr 0x20ed9ae8e20 <col:28, col:33> 'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x20ed9ae8df0 <col:28, col:33> 'int' lvalue ->imp_tag 0x20ed9acc9a8
|   | | |     `-ImplicitCastExpr 0x20ed9ae8dd8 <col:28> 'tag_exp_arg *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x20ed9ae8db8 <col:28> 'tag_exp_arg *' lvalue ParmVar 0x20ed9aeb280 'arg' 'tag_exp_arg *'
|   | | |-BinaryOperator 0x20ed9ae8f40 <line:489:9, col:35> 'int' '='
|   | | | |-MemberExpr 0x20ed9ae8e90 <col:9, col:18> 'int' lvalue ->exp_class 0x20ed9acc668
|   | | | | `-ImplicitCastExpr 0x20ed9ae8e78 <col:9> 'tag_exp_type *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x20ed9ae8e58 <col:9> 'tag_exp_type *' lvalue Var 0x20ed9ae8718 'exp_tmp' 'tag_exp_type *'
|   | | | `-ImplicitCastExpr 0x20ed9ae8f28 <col:30, col:35> 'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x20ed9ae8ef8 <col:30, col:35> 'int' lvalue ->imp_class 0x20ed9acca18
|   | | |     `-ImplicitCastExpr 0x20ed9ae8ee0 <col:30> 'tag_exp_arg *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x20ed9ae8ec0 <col:30> 'tag_exp_arg *' lvalue ParmVar 0x20ed9aeb280 'arg' 'tag_exp_arg *'
|   | | |-BinaryOperator 0x20ed9ae9008 <line:490:9, col:25> 'int' '='
|   | | | |-MemberExpr 0x20ed9ae8f98 <col:9, col:14> 'int' lvalue ->imp_tag 0x20ed9acc9a8
|   | | | | `-ImplicitCastExpr 0x20ed9ae8f80 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x20ed9ae8f60 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x20ed9aeb280 'arg' 'tag_exp_arg *'
|   | | | `-UnaryOperator 0x20ed9ae8ff0 <col:24, col:25> 'int' prefix '-'
|   | | |   `-IntegerLiteral 0x20ed9ae8fc8 <col:25> 'int' 1
|   | | `-BinaryOperator 0x20ed9ae90d0 <line:491:9, col:27> 'int' '='
|   | |   |-MemberExpr 0x20ed9ae9060 <col:9, col:14> 'int' lvalue ->imp_class 0x20ed9acca18
|   | |   | `-ImplicitCastExpr 0x20ed9ae9048 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x20ed9ae9028 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x20ed9aeb280 'arg' 'tag_exp_arg *'
|   | |   `-UnaryOperator 0x20ed9ae90b8 <col:26, col:27> 'int' prefix '-'
|   | |     `-IntegerLiteral 0x20ed9ae9090 <col:27> 'int' 1
|   | `-CompoundStmt 0x20ed9ae92a0 <line:492:12, line:495:5>
|   |   |-BinaryOperator 0x20ed9ae91c0 <line:493:9, col:28> 'int' '='
|   |   | |-MemberExpr 0x20ed9ae9158 <col:9, col:18> 'int' lvalue ->exp_tag 0x20ed9acc5f8
|   |   | | `-ImplicitCastExpr 0x20ed9ae9140 <col:9> 'tag_exp_type *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x20ed9ae9120 <col:9> 'tag_exp_type *' lvalue Var 0x20ed9ae8718 'exp_tmp' 'tag_exp_type *'
|   |   | `-ImplicitCastExpr 0x20ed9ae91a8 <col:28> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x20ed9ae9188 <col:28> 'int' lvalue ParmVar 0x20ed9aeb300 'exp_tag' 'int'
|   |   `-BinaryOperator 0x20ed9ae9280 <line:494:9, col:30> 'int' '='
|   |     |-MemberExpr 0x20ed9ae9218 <col:9, col:18> 'int' lvalue ->exp_class 0x20ed9acc668
|   |     | `-ImplicitCastExpr 0x20ed9ae9200 <col:9> 'tag_exp_type *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x20ed9ae91e0 <col:9> 'tag_exp_type *' lvalue Var 0x20ed9ae8718 'exp_tmp' 'tag_exp_type *'
|   |     `-ImplicitCastExpr 0x20ed9ae9268 <col:30> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x20ed9ae9248 <col:30> 'int' lvalue ParmVar 0x20ed9aeb380 'exp_class' 'int'
|   |-BinaryOperator 0x20ed9ae9388 <line:496:5, col:32> 'int' '='
|   | |-MemberExpr 0x20ed9ae9320 <col:5, col:14> 'int' lvalue ->exp_constructed 0x20ed9acc6d8
|   | | `-ImplicitCastExpr 0x20ed9ae9308 <col:5> 'tag_exp_type *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9ae92e8 <col:5> 'tag_exp_type *' lvalue Var 0x20ed9ae8718 'exp_tmp' 'tag_exp_type *'
|   | `-ImplicitCastExpr 0x20ed9ae9370 <col:32> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x20ed9ae9350 <col:32> 'int' lvalue ParmVar 0x20ed9aeb400 'exp_constructed' 'int'
|   |-BinaryOperator 0x20ed9ae9448 <line:497:5, col:24> 'int' '='
|   | |-MemberExpr 0x20ed9ae93e0 <col:5, col:14> 'int' lvalue ->exp_pad 0x20ed9acc748
|   | | `-ImplicitCastExpr 0x20ed9ae93c8 <col:5> 'tag_exp_type *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9ae93a8 <col:5> 'tag_exp_type *' lvalue Var 0x20ed9ae8718 'exp_tmp' 'tag_exp_type *'
|   | `-ImplicitCastExpr 0x20ed9ae9430 <col:24> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x20ed9ae9410 <col:24> 'int' lvalue ParmVar 0x20ed9aeb480 'exp_pad' 'int'
|   `-ReturnStmt 0x20ed9ae9490 <line:499:5, col:12>
|     `-IntegerLiteral 0x20ed9ae9468 <col:12> 'int' 1
|-FunctionDecl 0x20ed9ae96b0 prev 0x20ed9acdb60 <line:502:1, line:576:1> line:502:12 used asn1_str2tag 'int (const char *, int)' static
| |-ParmVarDecl 0x20ed9ae9560 <col:25, col:37> col:37 used tagstr 'const char *'
| |-ParmVarDecl 0x20ed9ae95e0 <col:45, col:49> col:49 used len 'int'
| `-CompoundStmt 0x20ed9aebcb0 <line:503:1, line:576:1>
|   |-DeclStmt 0x20ed9ae97e0 <line:504:5, col:19>
|   | `-VarDecl 0x20ed9ae9778 <col:5, col:18> col:18 used i 'unsigned int'
|   |-DeclStmt 0x20ed9aed118 <line:505:5, line:564:6>
|   | |-VarDecl 0x20ed9ae98b0 <line:505:5, col:38> col:38 used tntmp 'const struct tag_name_st *' static
|   | `-VarDecl 0x20ed9ae99a8 <col:5, col:50> col:45 used tnst 'const struct tag_name_st []' static
|   |-IfStmt 0x20ed9aed458 <line:566:5, line:567:28>
|   | |-BinaryOperator 0x20ed9aed1a8 <line:566:9, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x20ed9aed190 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20ed9aed130 <col:9> 'int' lvalue ParmVar 0x20ed9ae95e0 'len' 'int'
|   | | `-UnaryOperator 0x20ed9aed178 <col:16, col:17> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x20ed9aed150 <col:17> 'int' 1
|   | `-BinaryOperator 0x20ed9aed438 <line:567:9, col:28> 'int' '='
|   |   |-DeclRefExpr 0x20ed9aed1c8 <col:9> 'int' lvalue ParmVar 0x20ed9ae95e0 'len' 'int'
|   |   `-ImplicitCastExpr 0x20ed9aed420 <col:15, col:28> 'int' <IntegralCast>
|   |     `-CallExpr 0x20ed9aed3e0 <col:15, col:28> 'unsigned long long'
|   |       |-ImplicitCastExpr 0x20ed9aed3c8 <col:15> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x20ed9aed330 <col:15> 'unsigned long long (const char *)' Function 0x20ed9aed220 'strlen' 'unsigned long long (const char *)'
|   |       `-ImplicitCastExpr 0x20ed9aed408 <col:22> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x20ed9aed368 <col:22> 'const char *' lvalue ParmVar 0x20ed9ae9560 'tagstr' 'const char *'
|   |-BinaryOperator 0x20ed9aed4f8 <line:569:5, col:13> 'const struct tag_name_st *' '='
|   | |-DeclRefExpr 0x20ed9aed470 <col:5> 'const struct tag_name_st *' lvalue Var 0x20ed9ae98b0 'tntmp' 'const struct tag_name_st *'
|   | `-ImplicitCastExpr 0x20ed9aed4e0 <col:13> 'const struct tag_name_st *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x20ed9aed4a8 <col:13> 'const struct tag_name_st []' lvalue Var 0x20ed9ae99a8 'tnst' 'const struct tag_name_st []'
|   |-ForStmt 0x20ed9aebc28 <line:570:5, line:573:5>
|   | |-BinaryOperator 0x20ed9aeb580 <line:570:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x20ed9aed518 <col:10> 'unsigned int' lvalue Var 0x20ed9ae9778 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x20ed9aed578 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x20ed9aed550 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x20ed9aeb778 <col:17, col:36> 'int' '<'
|   | | |-ImplicitCastExpr 0x20ed9aeb748 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20ed9aeb5a0 <col:17> 'unsigned int' lvalue Var 0x20ed9ae9778 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x20ed9aeb760 <col:21, col:36> 'unsigned int' <IntegralCast>
|   | |   `-CallExpr 0x20ed9aeb708 <col:21, col:36> 'int'
|   | |     |-ImplicitCastExpr 0x20ed9aeb6f0 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x20ed9aeb6b0 <col:21> 'int ()' Function 0x20ed9aeb5e8 'OSSL_NELEM' 'int ()'
|   | |     `-ImplicitCastExpr 0x20ed9aeb730 <col:32> 'const struct tag_name_st *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x20ed9aeb6d0 <col:32> 'const struct tag_name_st []' lvalue Var 0x20ed9ae99a8 'tnst' 'const struct tag_name_st []'
|   | |-BinaryOperator 0x20ed9aeb808 <col:39, col:49> 'const struct tag_name_st *' ','
|   | | |-UnaryOperator 0x20ed9aeb7b8 <col:39, col:40> 'unsigned int' postfix '++'
|   | | | `-DeclRefExpr 0x20ed9aeb798 <col:39> 'unsigned int' lvalue Var 0x20ed9ae9778 'i' 'unsigned int'
|   | | `-UnaryOperator 0x20ed9aeb7f0 <col:44, col:49> 'const struct tag_name_st *' postfix '++'
|   | |   `-DeclRefExpr 0x20ed9aeb7d0 <col:44> 'const struct tag_name_st *' lvalue Var 0x20ed9ae98b0 'tntmp' 'const struct tag_name_st *'
|   | `-CompoundStmt 0x20ed9aebc10 <col:53, line:573:5>
|   |   `-IfStmt 0x20ed9aebbf8 <line:571:9, line:572:27>
|   |     |-BinaryOperator 0x20ed9aebb48 <line:571:13, col:77> 'int' '&&'
|   |     | |-ParenExpr 0x20ed9aeb900 <col:13, col:31> 'int'
|   |     | | `-BinaryOperator 0x20ed9aeb8e0 <col:14, col:28> 'int' '=='
|   |     | |   |-ImplicitCastExpr 0x20ed9aeb8b0 <col:14> 'int' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x20ed9aeb828 <col:14> 'int' lvalue ParmVar 0x20ed9ae95e0 'len' 'int'
|   |     | |   `-ImplicitCastExpr 0x20ed9aeb8c8 <col:21, col:28> 'int' <LValueToRValue>
|   |     | |     `-MemberExpr 0x20ed9aeb880 <col:21, col:28> 'const int' lvalue ->len 0x20ed99e5d88
|   |     | |       `-ImplicitCastExpr 0x20ed9aeb868 <col:21> 'const struct tag_name_st *' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x20ed9aeb848 <col:21> 'const struct tag_name_st *' lvalue Var 0x20ed9ae98b0 'tntmp' 'const struct tag_name_st *'
|   |     | `-ParenExpr 0x20ed9aebb28 <col:36, col:77> 'int'
|   |     |   `-BinaryOperator 0x20ed9aebb08 <col:37, col:76> 'int' '=='
|   |     |     |-CallExpr 0x20ed9aeba48 <col:37, col:71> 'int'
|   |     |     | |-ImplicitCastExpr 0x20ed9aeba30 <col:37> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |     |     | | `-DeclRefExpr 0x20ed9aeb920 <col:37> 'int (const char *, const char *, unsigned long long)' Function 0x20ed9ae0d20 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |     |     | |-ImplicitCastExpr 0x20ed9aeba80 <col:45, col:52> 'const char *' <LValueToRValue>
|   |     |     | | `-MemberExpr 0x20ed9aeb978 <col:45, col:52> 'const char *const' lvalue ->strnam 0x20ed99e5d18
|   |     |     | |   `-ImplicitCastExpr 0x20ed9aeb960 <col:45> 'const struct tag_name_st *' <LValueToRValue>
|   |     |     | |     `-DeclRefExpr 0x20ed9aeb940 <col:45> 'const struct tag_name_st *' lvalue Var 0x20ed9ae98b0 'tntmp' 'const struct tag_name_st *'
|   |     |     | |-ImplicitCastExpr 0x20ed9aeba98 <col:60> 'const char *' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x20ed9aeb9a8 <col:60> 'const char *' lvalue ParmVar 0x20ed9ae9560 'tagstr' 'const char *'
|   |     |     | `-ImplicitCastExpr 0x20ed9aebac8 <col:68> 'unsigned long long' <IntegralCast>
|   |     |     |   `-ImplicitCastExpr 0x20ed9aebab0 <col:68> 'int' <LValueToRValue>
|   |     |     |     `-DeclRefExpr 0x20ed9aeb9c8 <col:68> 'int' lvalue ParmVar 0x20ed9ae95e0 'len' 'int'
|   |     |     `-IntegerLiteral 0x20ed9aebae0 <col:76> 'int' 0
|   |     `-ReturnStmt 0x20ed9aebbe8 <line:572:13, col:27>
|   |       `-ImplicitCastExpr 0x20ed9aebbd0 <col:20, col:27> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x20ed9aebba0 <col:20, col:27> 'const int' lvalue ->tag 0x20ed9acc4d0
|   |           `-ImplicitCastExpr 0x20ed9aebb88 <col:20> 'const struct tag_name_st *' <LValueToRValue>
|   |             `-DeclRefExpr 0x20ed9aebb68 <col:20> 'const struct tag_name_st *' lvalue Var 0x20ed9ae98b0 'tntmp' 'const struct tag_name_st *'
|   `-ReturnStmt 0x20ed9aebca0 <line:575:5, col:13>
|     `-UnaryOperator 0x20ed9aebc88 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x20ed9aebc60 <col:13> 'int' 1
|-FunctionDecl 0x20ed9aed220 <line:567:15> col:15 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x20ed9aed2c0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x20ed9aebef8 <line:578:1, line:743:1> line:578:19 invalid asn1_str2type 'int *(const char *, int, int)' static
| |-ParmVarDecl 0x20ed9aebd08 <col:33, col:45> col:45 used str 'const char *'
| |-ParmVarDecl 0x20ed9aebd88 <col:50, col:54> col:54 used format 'int'
| |-ParmVarDecl 0x20ed9aebe08 <col:62, col:66> col:66 used utype 'int'
| `-CompoundStmt 0x20ed9ae6788 <line:579:1, line:743:1>
|   |-DeclStmt 0x20ed9aec048 <line:582:5, col:25>
|   | `-VarDecl 0x20ed9aebfe0 <col:5, col:20> col:20 used rdata 'unsigned char *'
|   |-DeclStmt 0x20ed9aec0e0 <line:583:5, col:15>
|   | `-VarDecl 0x20ed9aec078 <col:5, col:10> col:10 used rdlen 'long'
|   |-DeclStmt 0x20ed9aec1a0 <line:584:5, col:22>
|   | `-VarDecl 0x20ed9aec110 <col:5, col:21> col:9 used no_unused 'int' cinit
|   |   `-IntegerLiteral 0x20ed9aec178 <col:21> 'int' 1
|   |-IfStmt 0x20ed9aec258 <line:586:5, line:589:5>
|   | |-OpaqueValueExpr 0x20ed9aec240 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x20ed9aec230 <line:586:43, line:589:5>
|   |-IfStmt 0x20ed9aec380 <line:591:5, line:592:15>
|   | |-UnaryOperator 0x20ed9aec2a8 <line:591:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x20ed9aec290 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9aec270 <col:10> 'const char *' lvalue ParmVar 0x20ed9aebd08 'str' 'const char *'
|   | `-BinaryOperator 0x20ed9aec360 <line:592:9, col:15> 'const char *' '='
|   |   |-DeclRefExpr 0x20ed9aec2c0 <col:9> 'const char *' lvalue ParmVar 0x20ed9aebd08 'str' 'const char *'
|   |   `-ImplicitCastExpr 0x20ed9aec348 <col:15> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x20ed9aec330 <col:15> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x20ed9aec318 <col:15> 'char [1]' lvalue ""
|   |-SwitchStmt 0x20ed9aec3d0 <line:594:5, line:731:5>
|   | |-ImplicitCastExpr 0x20ed9aec3b8 <line:594:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x20ed9aec398 <col:13> 'int' lvalue ParmVar 0x20ed9aebe08 'utype' 'int'
|   | `-CompoundStmt 0x20ed9ae6530 <col:20, line:731:5>
|   |   |-IfStmt 0x20ed9aec568 <line:597:9, line:600:9>
|   |   | |-BinaryOperator 0x20ed9aec4a8 <line:597:13, col:21> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x20ed9aec460 <col:13> 'const char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x20ed9aec3f0 <col:13> 'const char *' lvalue ParmVar 0x20ed9aebd08 'str' 'const char *'
|   |   | | `-ImplicitCastExpr 0x20ed9aec490 <col:20, col:21> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x20ed9aec478 <col:20, col:21> 'char' <LValueToRValue>
|   |   | |     `-UnaryOperator 0x20ed9aec448 <col:20, col:21> 'const char' lvalue prefix '*' cannot overflow
|   |   | |       `-ImplicitCastExpr 0x20ed9aec430 <col:21> 'const char *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x20ed9aec410 <col:21> 'const char *' lvalue ParmVar 0x20ed9aebd08 'str' 'const char *'
|   |   | `-CompoundStmt 0x20ed9aec550 <col:26, line:600:9>
|   |   |   `-GotoStmt 0x20ed9aec538 <line:599:13, col:18> 'bad_form' 0x20ed9aec4e8
|   |   |-BreakStmt 0x20ed9ae5520 <line:601:9>
|   |   |-IfStmt 0x20ed9ae55f8 <line:604:9, line:607:9>
|   |   | |-BinaryOperator 0x20ed9ae5588 <line:604:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x20ed9ae5570 <line:604:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x20ed9ae5528 <col:13> 'int' lvalue ParmVar 0x20ed9aebd88 'format' 'int'
|   |   | | `-IntegerLiteral 0x20ed9ae5548 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x20ed9ae55e0 <line:604:46, line:607:9>
|   |   |   `-GotoStmt 0x20ed9ae55c8 <line:606:13, col:18> 'bad_form' 0x20ed9aec4e8
|   |   |-IfStmt 0x20ed9ae5850 <line:611:9, line:614:9>
|   |   | |-OpaqueValueExpr 0x20ed9ae5838 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x20ed9ae5820 <line:611:66, line:614:9>
|   |   |   `-GotoStmt 0x20ed9ae5808 <line:613:13, col:18> 'bad_str' 0x20ed9ae57b8
|   |   |-BreakStmt 0x20ed9ae5868 <line:615:9>
|   |   |-IfStmt 0x20ed9ae5940 <line:619:9, line:622:9>
|   |   | |-BinaryOperator 0x20ed9ae58d0 <line:619:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x20ed9ae58b8 <line:619:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x20ed9ae5870 <col:13> 'int' lvalue ParmVar 0x20ed9aebd88 'format' 'int'
|   |   | | `-IntegerLiteral 0x20ed9ae5890 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x20ed9ae5928 <line:619:46, line:622:9>
|   |   |   `-GotoStmt 0x20ed9ae5910 <line:621:13, col:18> 'bad_form' 0x20ed9aec4e8
|   |   |-IfStmt 0x20ed9ae5af0 <line:623:9, line:627:9>
|   |   | |-OpaqueValueExpr 0x20ed9ae5ad8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x20ed9ae5ac0 <line:624:61, line:627:9>
|   |   |   `-GotoStmt 0x20ed9ae5aa8 <line:626:13, col:18> 'bad_str' 0x20ed9ae57b8
|   |   |-BreakStmt 0x20ed9ae5b08 <line:628:9>
|   |   |-IfStmt 0x20ed9ae5be0 <line:631:9, line:634:9>
|   |   | |-BinaryOperator 0x20ed9ae5b70 <line:631:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x20ed9ae5b58 <line:631:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x20ed9ae5b10 <col:13> 'int' lvalue ParmVar 0x20ed9aebd88 'format' 'int'
|   |   | | `-IntegerLiteral 0x20ed9ae5b30 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x20ed9ae5bc8 <line:631:46, line:634:9>
|   |   |   `-GotoStmt 0x20ed9ae5bb0 <line:633:13, col:18> 'bad_form' 0x20ed9aec4e8
|   |   |-IfStmt 0x20ed9ae5e18 <line:635:9, line:638:9>
|   |   | |-OpaqueValueExpr 0x20ed9ae5e00 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x20ed9ae5de8 <line:635:65, line:638:9>
|   |   |   `-GotoStmt 0x20ed9ae5dd0 <line:637:13, col:18> 'bad_str' 0x20ed9ae57b8
|   |   |-BreakStmt 0x20ed9ae5e30 <line:639:9>
|   |   |-IfStmt 0x20ed9ae5f08 <line:643:9, line:646:9>
|   |   | |-BinaryOperator 0x20ed9ae5e98 <line:643:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x20ed9ae5e80 <line:643:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x20ed9ae5e38 <col:13> 'int' lvalue ParmVar 0x20ed9aebd88 'format' 'int'
|   |   | | `-IntegerLiteral 0x20ed9ae5e58 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x20ed9ae5ef0 <line:643:46, line:646:9>
|   |   |   `-GotoStmt 0x20ed9ae5ed8 <line:645:13, col:18> 'bad_form' 0x20ed9aec4e8
|   |   |-IfStmt 0x20ed9ae60d0 <line:647:9, line:650:9>
|   |   | |-OpaqueValueExpr 0x20ed9ae60b8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x20ed9ae60a0 <line:647:68, line:650:9>
|   |   |   `-GotoStmt 0x20ed9ae6088 <line:649:13, col:18> 'bad_str' 0x20ed9ae57b8
|   |   |-IfStmt 0x20ed9ae62c0 <line:651:9, line:654:9>
|   |   | |-OpaqueValueExpr 0x20ed9ae62a8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x20ed9ae6290 <line:651:65, line:654:9>
|   |   |   `-GotoStmt 0x20ed9ae6278 <line:653:13, col:18> 'bad_str' 0x20ed9ae57b8
|   |   |-IfStmt 0x20ed9ae6470 <line:656:9, line:659:9>
|   |   | |-OpaqueValueExpr 0x20ed9ae6458 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x20ed9ae6440 <line:656:56, line:659:9>
|   |   |   `-GotoStmt 0x20ed9ae6428 <line:658:13, col:18> 'bad_str' 0x20ed9ae57b8
|   |   |-BreakStmt 0x20ed9ae6488 <line:661:9>
|   |   |-IfStmt 0x20ed9aed6e8 <line:672:9, line:679:9> has_else
|   |   | |-BinaryOperator 0x20ed9ae64f0 <line:672:13, line:33:33> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x20ed9ae64d8 <line:672:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x20ed9ae6490 <col:13> 'int' lvalue ParmVar 0x20ed9aebd88 'format' 'int'
|   |   | | `-IntegerLiteral 0x20ed9ae64b0 <line:33:33> 'int' 1
|   |   | |-NullStmt 0x20ed9aed6e0 <line:673:13>
|   |   | `-IfStmt 0x20ed9aed6b8 <line:674:14, line:679:9> has_else
|   |   |   |-BinaryOperator 0x20ed9aed620 <line:674:18, line:35:33> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x20ed9aed608 <line:674:18> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x20ed9aed5c0 <col:18> 'int' lvalue ParmVar 0x20ed9aebd88 'format' 'int'
|   |   |   | `-IntegerLiteral 0x20ed9aed5e0 <line:35:33> 'int' 2
|   |   |   |-NullStmt 0x20ed9aed6b0 <line:675:13>
|   |   |   `-CompoundStmt 0x20ed9aed698 <line:676:14, line:679:9>
|   |   |     `-GotoStmt 0x20ed9aed680 <line:678:13, col:18> 'bad_form' 0x20ed9aec4e8
|   |   |-IfStmt 0x20ed9aedb10 <line:681:9, line:685:9>
|   |   | |-OpaqueValueExpr 0x20ed9aedaf8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x20ed9aedae0 <line:682:71, line:685:9>
|   |   |   `-GotoStmt 0x20ed9aedac8 <line:684:13, col:18> 'bad_str' 0x20ed9ae57b8
|   |   |-BreakStmt 0x20ed9aedb28 <line:687:9>
|   |   |-IfStmt 0x20ed9aedbf0 <line:691:9, line:694:9>
|   |   | |-OpaqueValueExpr 0x20ed9aedbd8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x20ed9aedbc0 <line:691:68, line:694:9>
|   |   |   `-GotoStmt 0x20ed9aedba8 <line:693:13, col:18> 'bad_form' 0x20ed9aec4e8
|   |   |-IfStmt 0x20ed9aee430 <line:696:9, line:718:9> has_else
|   |   | |-BinaryOperator 0x20ed9aedc68 <line:696:13, line:37:33> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x20ed9aedc50 <line:696:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x20ed9aedc08 <col:13> 'int' lvalue ParmVar 0x20ed9aebd88 'format' 'int'
|   |   | | `-IntegerLiteral 0x20ed9aedc28 <line:37:33> 'int' 3
|   |   | |-CompoundStmt 0x20ed9aedfd8 <line:696:44, line:704:9>
|   |   | | `-IfStmt 0x20ed9aedf60 <line:697:13, line:700:13>
|   |   | |   |-OpaqueValueExpr 0x20ed9aedf48 <<invalid sloc>> '_Bool'
|   |   | |   `-CompoundStmt 0x20ed9aedf30 <line:697:68, line:700:13>
|   |   | |     `-GotoStmt 0x20ed9aedf18 <line:699:17, col:22> 'bad_str' 0x20ed9ae57b8
|   |   | `-IfStmt 0x20ed9aee408 <line:704:16, line:718:9> has_else
|   |   |   |-BinaryOperator 0x20ed9aee050 <line:704:20, line:33:33> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x20ed9aee038 <line:704:20> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x20ed9aedff0 <col:20> 'int' lvalue ParmVar 0x20ed9aebd88 'format' 'int'
|   |   |   | `-IntegerLiteral 0x20ed9aee010 <line:33:33> 'int' 1
|   |   |   |-NullStmt 0x20ed9aee400 <line:705:13>
|   |   |   `-IfStmt 0x20ed9aee3d8 <line:706:14, line:718:9> has_else
|   |   |     |-OpaqueValueExpr 0x20ed9aee3c0 <<invalid sloc>> '_Bool'
|   |   |     |-CompoundStmt 0x20ed9aee350 <line:707:51, line:715:9>
|   |   |     | |-IfStmt 0x20ed9aee2b8 <line:708:13, line:712:13>
|   |   |     | | |-OpaqueValueExpr 0x20ed9aee2a0 <<invalid sloc>> '_Bool'
|   |   |     | | `-CompoundStmt 0x20ed9aee288 <line:709:67, line:712:13>
|   |   |     | |   `-GotoStmt 0x20ed9aee270 <line:711:17, col:22> 'bad_str' 0x20ed9ae57b8
|   |   |     | `-BinaryOperator 0x20ed9aee330 <line:713:13, col:25> 'int' '='
|   |   |     |   |-DeclRefExpr 0x20ed9aee2d0 <col:13> 'int' lvalue Var 0x20ed9aec110 'no_unused' 'int'
|   |   |     |   `-IntegerLiteral 0x20ed9aee308 <col:25> 'int' 0
|   |   |     `-CompoundStmt 0x20ed9aee3a8 <line:715:16, line:718:9>
|   |   |       `-GotoStmt 0x20ed9aee390 <line:717:13, col:18> 'bad_form' 0x20ed9aec4e8
|   |   |-IfStmt 0x20ed9aee4e8 <line:720:9, line:724:9>
|   |   | |-OpaqueValueExpr 0x20ed9aee4d0 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x20ed9aee4c0 <line:720:56, line:724:9>
|   |   |-BreakStmt 0x20ed9aee500 <line:726:9>
|   |   |-DefaultStmt 0x20ed9aee530 <line:728:5, col:12>
|   |   | `-NullStmt 0x20ed9aee528 <col:12>
|   |   `-GotoStmt 0x20ed9aee550 <line:730:9, col:14> 'bad_str' 0x20ed9ae57b8
|   |-LabelStmt 0x20ed9ae6730 <line:736:2, line:737:41> 'bad_str'
|   | `-CallExpr 0x20ed9ae66c8 <col:5, col:41> 'int'
|   |   |-ImplicitCastExpr 0x20ed9ae66b0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x20ed9ae6628 <col:5> 'int ()' Function 0x20ed9adf0d0 'ERR_add_error_data' 'int ()'
|   |   |-IntegerLiteral 0x20ed9ae6648 <col:24> 'int' 2
|   |   |-ImplicitCastExpr 0x20ed9ae6700 <col:27> 'char *' <ArrayToPointerDecay>
|   |   | `-StringLiteral 0x20ed9ae6670 <col:27> 'char [8]' lvalue "string="
|   |   `-ImplicitCastExpr 0x20ed9ae6718 <col:38> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x20ed9ae6690 <col:38> 'const char *' lvalue ParmVar 0x20ed9aebd08 'str' 'const char *'
|   `-LabelStmt 0x20ed9ae6770 <line:738:2, col:10> 'bad_form'
|     `-NullStmt 0x20ed9ae6768 <col:10>
|-FunctionDecl 0x20ed9ae69e0 prev 0x20ed9ac5460 <line:745:1, line:763:1> line:745:12 used bitstr_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x20ed9ae67f0 <col:22, col:34> col:34 used elem 'const char *'
| |-ParmVarDecl 0x20ed9ae6870 <col:40, col:44> col:44 used len 'int'
| |-ParmVarDecl 0x20ed9ae68f0 <col:49, col:55> col:55 used bitstr 'void *'
| `-CompoundStmt 0x20ed9ae7468 <line:746:1, line:763:1>
|   |-DeclStmt 0x20ed9ae6b18 <line:747:5, col:16>
|   | `-VarDecl 0x20ed9ae6ab0 <col:5, col:10> col:10 used bitnum 'long'
|   |-DeclStmt 0x20ed9ae6bb0 <line:748:5, col:15>
|   | `-VarDecl 0x20ed9ae6b48 <col:5, col:11> col:11 used eptr 'char *'
|   |-IfStmt 0x20ed9ae6c50 <line:749:5, line:750:16>
|   | |-UnaryOperator 0x20ed9ae6c00 <line:749:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x20ed9ae6be8 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9ae6bc8 <col:10> 'const char *' lvalue ParmVar 0x20ed9ae67f0 'elem' 'const char *'
|   | `-ReturnStmt 0x20ed9ae6c40 <line:750:9, col:16>
|   |   `-IntegerLiteral 0x20ed9ae6c18 <col:16> 'int' 0
|   |-BinaryOperator 0x20ed9ae6df0 <line:751:5, col:37> 'long' '='
|   | |-DeclRefExpr 0x20ed9ae6c68 <col:5> 'long' lvalue Var 0x20ed9ae6ab0 'bitnum' 'long'
|   | `-ImplicitCastExpr 0x20ed9ae6dd8 <col:14, col:37> 'long' <IntegralCast>
|   |   `-CallExpr 0x20ed9ae6d88 <col:14, col:37> 'unsigned long'
|   |     |-ImplicitCastExpr 0x20ed9ae6d70 <col:14> 'unsigned long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x20ed9ae6ca0 <col:14> 'unsigned long (const char *, char **, int)' Function 0x20ed9ada290 'strtoul' 'unsigned long (const char *, char **, int)'
|   |     |-ImplicitCastExpr 0x20ed9ae6dc0 <col:22> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x20ed9ae6cc0 <col:22> 'const char *' lvalue ParmVar 0x20ed9ae67f0 'elem' 'const char *'
|   |     |-UnaryOperator 0x20ed9ae6d18 <col:28, col:29> 'char **' prefix '&' cannot overflow
|   |     | `-DeclRefExpr 0x20ed9ae6ce0 <col:29> 'char *' lvalue Var 0x20ed9ae6b48 'eptr' 'char *'
|   |     `-IntegerLiteral 0x20ed9ae6d30 <col:35> 'int' 10
|   |-IfStmt 0x20ed9ae7060 <line:752:5, line:753:16>
|   | |-BinaryOperator 0x20ed9ae7008 <line:752:9, col:45> 'int' '&&'
|   | | |-BinaryOperator 0x20ed9ae6ec8 <col:9, col:18> 'int' '&&'
|   | | | |-ImplicitCastExpr 0x20ed9ae6e80 <col:9> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x20ed9ae6e10 <col:9> 'char *' lvalue Var 0x20ed9ae6b48 'eptr' 'char *'
|   | | | `-ImplicitCastExpr 0x20ed9ae6eb0 <col:17, col:18> 'int' <IntegralCast>
|   | | |   `-ImplicitCastExpr 0x20ed9ae6e98 <col:17, col:18> 'char' <LValueToRValue>
|   | | |     `-UnaryOperator 0x20ed9ae6e68 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | | |       `-ImplicitCastExpr 0x20ed9ae6e50 <col:18> 'char *' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x20ed9ae6e30 <col:18> 'char *' lvalue Var 0x20ed9ae6b48 'eptr' 'char *'
|   | | `-ParenExpr 0x20ed9ae6fe8 <col:26, col:45> 'int'
|   | |   `-BinaryOperator 0x20ed9ae6fc8 <col:27, col:42> 'int' '!='
|   | |     |-ImplicitCastExpr 0x20ed9ae6f98 <col:27> 'char *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x20ed9ae6ee8 <col:27> 'char *' lvalue Var 0x20ed9ae6b48 'eptr' 'char *'
|   | |     `-ImplicitCastExpr 0x20ed9ae6fb0 <col:35, col:42> 'char *' <BitCast>
|   | |       `-BinaryOperator 0x20ed9ae6f78 <col:35, col:42> 'const char *' '+'
|   | |         |-ImplicitCastExpr 0x20ed9ae6f48 <col:35> 'const char *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x20ed9ae6f08 <col:35> 'const char *' lvalue ParmVar 0x20ed9ae67f0 'elem' 'const char *'
|   | |         `-ImplicitCastExpr 0x20ed9ae6f60 <col:42> 'int' <LValueToRValue>
|   | |           `-DeclRefExpr 0x20ed9ae6f28 <col:42> 'int' lvalue ParmVar 0x20ed9ae6870 'len' 'int'
|   | `-ReturnStmt 0x20ed9ae7050 <line:753:9, col:16>
|   |   `-IntegerLiteral 0x20ed9ae7028 <col:16> 'int' 0
|   |-IfStmt 0x20ed9ae7180 <line:754:5, line:757:5>
|   | |-BinaryOperator 0x20ed9ae70f0 <line:754:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x20ed9ae70c0 <col:9> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x20ed9ae7078 <col:9> 'long' lvalue Var 0x20ed9ae6ab0 'bitnum' 'long'
|   | | `-ImplicitCastExpr 0x20ed9ae70d8 <col:18> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x20ed9ae7098 <col:18> 'int' 0
|   | `-CompoundStmt 0x20ed9ae7168 <col:21, line:757:5>
|   |   `-ReturnStmt 0x20ed9ae7158 <line:756:9, col:16>
|   |     `-IntegerLiteral 0x20ed9ae7130 <col:16> 'int' 0
|   |-IfStmt 0x20ed9ae7418 <line:758:5, line:761:5>
|   | |-UnaryOperator 0x20ed9ae7390 <line:758:9, col:51> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x20ed9ae7328 <col:10, col:51> 'int'
|   | |   |-ImplicitCastExpr 0x20ed9ae7310 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x20ed9ae7288 <col:10> 'int ()' Function 0x20ed9ae71c0 'ASN1_BIT_STRING_set_bit' 'int ()'
|   | |   |-ImplicitCastExpr 0x20ed9ae7360 <col:34> 'void *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x20ed9ae72a8 <col:34> 'void *' lvalue ParmVar 0x20ed9ae68f0 'bitstr' 'void *'
|   | |   |-ImplicitCastExpr 0x20ed9ae7378 <col:42> 'long' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x20ed9ae72c8 <col:42> 'long' lvalue Var 0x20ed9ae6ab0 'bitnum' 'long'
|   | |   `-IntegerLiteral 0x20ed9ae72e8 <col:50> 'int' 1
|   | `-CompoundStmt 0x20ed9ae7400 <col:54, line:761:5>
|   |   `-ReturnStmt 0x20ed9ae73f0 <line:760:9, col:16>
|   |     `-IntegerLiteral 0x20ed9ae73c8 <col:16> 'int' 0
|   `-ReturnStmt 0x20ed9ae7458 <line:762:5, col:12>
|     `-IntegerLiteral 0x20ed9ae7430 <col:12> 'int' 1
|-FunctionDecl 0x20ed9af37f0 <line:765:1, line:783:1> line:765:12 used mask_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x20ed9af3600 <col:20, col:32> col:32 used elem 'const char *'
| |-ParmVarDecl 0x20ed9af3680 <col:38, col:42> col:42 used len 'int'
| |-ParmVarDecl 0x20ed9af3700 <col:47, col:53> col:53 used arg 'void *'
| `-CompoundStmt 0x20ed9af4410 <line:766:1, line:783:1>
|   |-DeclStmt 0x20ed9af3a50 <line:767:5, col:40>
|   | |-VarDecl 0x20ed9af3900 <col:5, col:28> col:20 used pmask 'unsigned long *' cinit
|   | | `-ImplicitCastExpr 0x20ed9af39a0 <col:28> 'unsigned long *' <BitCast>
|   | |   `-ImplicitCastExpr 0x20ed9af3988 <col:28> 'void *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x20ed9af3968 <col:28> 'void *' lvalue ParmVar 0x20ed9af3700 'arg' 'void *'
|   | `-VarDecl 0x20ed9af39d0 <col:5, col:33> col:33 used tmpmask 'unsigned long'
|   |-DeclStmt 0x20ed9af3ae8 <line:768:5, col:12>
|   | `-VarDecl 0x20ed9af3a80 <col:5, col:9> col:9 used tag 'int'
|   |-IfStmt 0x20ed9af3b70 <line:769:5, line:770:16>
|   | |-OpaqueValueExpr 0x20ed9af3b58 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x20ed9af3b48 <col:9, col:16>
|   |   `-IntegerLiteral 0x20ed9af3b20 <col:16> 'int' 0
|   |-IfStmt 0x20ed9af3ed0 <line:771:5, line:774:5>
|   | |-BinaryOperator 0x20ed9af3df8 <line:771:9, col:52> 'int' '&&'
|   | | |-ParenExpr 0x20ed9af3c08 <col:9, col:18> 'int'
|   | | | `-BinaryOperator 0x20ed9af3be8 <col:10, col:17> 'int' '=='
|   | | |   |-ImplicitCastExpr 0x20ed9af3bd0 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x20ed9af3b88 <col:10> 'int' lvalue ParmVar 0x20ed9af3680 'len' 'int'
|   | | |   `-IntegerLiteral 0x20ed9af3ba8 <col:17> 'int' 3
|   | | `-ParenExpr 0x20ed9af3dd8 <col:23, col:52> 'int'
|   | |   `-BinaryOperator 0x20ed9af3db8 <col:24, col:51> 'int' '=='
|   | |     |-CallExpr 0x20ed9af3cf8 <col:24, col:46> 'int'
|   | |     | |-ImplicitCastExpr 0x20ed9af3ce0 <col:24> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   | |     | | `-DeclRefExpr 0x20ed9af3c28 <col:24> 'int (const char *, const char *, unsigned long long)' Function 0x20ed9ae0d20 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   | |     | |-ImplicitCastExpr 0x20ed9af3d30 <col:32> 'const char *' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x20ed9af3c48 <col:32> 'const char *' lvalue ParmVar 0x20ed9af3600 'elem' 'const char *'
|   | |     | |-ImplicitCastExpr 0x20ed9af3d60 <col:38> 'const char *' <NoOp>
|   | |     | | `-ImplicitCastExpr 0x20ed9af3d48 <col:38> 'char *' <ArrayToPointerDecay>
|   | |     | |   `-StringLiteral 0x20ed9af3c68 <col:38> 'char [4]' lvalue "DIR"
|   | |     | `-ImplicitCastExpr 0x20ed9af3d78 <col:45> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x20ed9af3c88 <col:45> 'int' 3
|   | |     `-IntegerLiteral 0x20ed9af3d90 <col:51> 'int' 0
|   | `-CompoundStmt 0x20ed9af3eb8 <col:55, line:774:5>
|   |   `-ReturnStmt 0x20ed9af3ea8 <line:773:9, col:16>
|   |     `-IntegerLiteral 0x20ed9af3e80 <col:16> 'int' 1
|   |-BinaryOperator 0x20ed9af3ff8 <line:775:5, col:33> 'int' '='
|   | |-DeclRefExpr 0x20ed9af3ee8 <col:5> 'int' lvalue Var 0x20ed9af3a80 'tag' 'int'
|   | `-CallExpr 0x20ed9af3f98 <col:11, col:33> 'int'
|   |   |-ImplicitCastExpr 0x20ed9af3f80 <col:11> 'int (*)(const char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x20ed9af3f20 <col:11> 'int (const char *, int)' Function 0x20ed9ae96b0 'asn1_str2tag' 'int (const char *, int)'
|   |   |-ImplicitCastExpr 0x20ed9af3fc8 <col:24> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x20ed9af3f40 <col:24> 'const char *' lvalue ParmVar 0x20ed9af3600 'elem' 'const char *'
|   |   `-ImplicitCastExpr 0x20ed9af3fe0 <col:30> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x20ed9af3f60 <col:30> 'int' lvalue ParmVar 0x20ed9af3680 'len' 'int'
|   |-IfStmt 0x20ed9af4160 <line:776:5, line:777:16>
|   | |-BinaryOperator 0x20ed9af4108 <line:776:9, col:37> 'int' '||'
|   | | |-UnaryOperator 0x20ed9af4050 <col:9, col:10> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x20ed9af4038 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x20ed9af4018 <col:10> 'int' lvalue Var 0x20ed9af3a80 'tag' 'int'
|   | | `-ParenExpr 0x20ed9af40e8 <col:17, col:37> 'int'
|   | |   `-BinaryOperator 0x20ed9af40c8 <col:18, line:14:33> 'int' '&'
|   | |     |-ImplicitCastExpr 0x20ed9af40b0 <line:776:18> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x20ed9af4068 <col:18> 'int' lvalue Var 0x20ed9af3a80 'tag' 'int'
|   | |     `-IntegerLiteral 0x20ed9af4088 <line:14:33> 'int' 65536
|   | `-ReturnStmt 0x20ed9af4150 <line:777:9, col:16>
|   |   `-IntegerLiteral 0x20ed9af4128 <col:16> 'int' 0
|   |-BinaryOperator 0x20ed9af4260 <line:778:5, col:31> 'unsigned long' '='
|   | |-DeclRefExpr 0x20ed9af4178 <col:5> 'unsigned long' lvalue Var 0x20ed9af39d0 'tmpmask' 'unsigned long'
|   | `-ImplicitCastExpr 0x20ed9af4248 <col:15, col:31> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x20ed9af4208 <col:15, col:31> 'int'
|   |     |-ImplicitCastExpr 0x20ed9af41f0 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x20ed9af41b0 <col:15> 'int ()' Function 0x20ed9aed920 'ASN1_tag2bit' 'int ()'
|   |     `-ImplicitCastExpr 0x20ed9af4230 <col:28> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x20ed9af41d0 <col:28> 'int' lvalue Var 0x20ed9af3a80 'tag' 'int'
|   |-IfStmt 0x20ed9af4308 <line:779:5, line:780:16>
|   | |-UnaryOperator 0x20ed9af42b8 <line:779:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x20ed9af42a0 <col:10> 'unsigned long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9af4280 <col:10> 'unsigned long' lvalue Var 0x20ed9af39d0 'tmpmask' 'unsigned long'
|   | `-ReturnStmt 0x20ed9af42f8 <line:780:9, col:16>
|   |   `-IntegerLiteral 0x20ed9af42d0 <col:16> 'int' 0
|   |-CompoundAssignOperator 0x20ed9af43a8 <line:781:5, col:15> 'unsigned long' '|=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   | |-UnaryOperator 0x20ed9af4358 <col:5, col:6> 'unsigned long' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x20ed9af4340 <col:6> 'unsigned long *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x20ed9af4320 <col:6> 'unsigned long *' lvalue Var 0x20ed9af3900 'pmask' 'unsigned long *'
|   | `-ImplicitCastExpr 0x20ed9af4390 <col:15> 'unsigned long' <LValueToRValue>
|   |   `-DeclRefExpr 0x20ed9af4370 <col:15> 'unsigned long' lvalue Var 0x20ed9af39d0 'tmpmask' 'unsigned long'
|   `-ReturnStmt 0x20ed9af4400 <line:782:5, col:12>
|     `-IntegerLiteral 0x20ed9af43d8 <col:12> 'int' 1
`-FunctionDecl 0x20ed9aef5f8 <line:785:1, line:789:1> line:785:5 ASN1_str2mask 'int (const char *, unsigned long *)'
  |-ParmVarDecl 0x20ed9af4488 <col:19, col:31> col:31 used str 'const char *'
  |-ParmVarDecl 0x20ed9af4508 <col:36, col:51> col:51 used pmask 'unsigned long *'
  `-CompoundStmt 0x20ed9aef8e8 <line:786:1, line:789:1>
    |-BinaryOperator 0x20ed9aef750 <line:787:5, col:14> 'unsigned long' '='
    | |-UnaryOperator 0x20ed9aef6f8 <col:5, col:6> 'unsigned long' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x20ed9aef6e0 <col:6> 'unsigned long *' <LValueToRValue>
    | |   `-DeclRefExpr 0x20ed9aef6c0 <col:6> 'unsigned long *' lvalue ParmVar 0x20ed9af4508 'pmask' 'unsigned long *'
    | `-ImplicitCastExpr 0x20ed9aef738 <col:14> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x20ed9aef710 <col:14> 'int' 0
    `-ReturnStmt 0x20ed9aef8d8 <line:788:5, col:55>
      `-CallExpr 0x20ed9aef848 <col:12, col:55> 'int'
        |-ImplicitCastExpr 0x20ed9aef830 <col:12> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x20ed9aef770 <col:12> 'int ()' Function 0x20ed9adc648 'CONF_parse_list' 'int ()'
        |-ImplicitCastExpr 0x20ed9aef890 <col:28> 'const char *' <LValueToRValue>
        | `-DeclRefExpr 0x20ed9aef790 <col:28> 'const char *' lvalue ParmVar 0x20ed9af4488 'str' 'const char *'
        |-CharacterLiteral 0x20ed9aef7b0 <col:33> 'int' 124
        |-IntegerLiteral 0x20ed9aef7c8 <col:38> 'int' 1
        |-ImplicitCastExpr 0x20ed9aef8a8 <col:41> 'int (*)(const char *, int, void *)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x20ed9aef7f0 <col:41> 'int (const char *, int, void *)' Function 0x20ed9af37f0 'mask_cb' 'int (const char *, int, void *)'
        `-ImplicitCastExpr 0x20ed9aef8c0 <col:50> 'unsigned long *' <LValueToRValue>
          `-DeclRefExpr 0x20ed9aef810 <col:50> 'unsigned long *' lvalue ParmVar 0x20ed9af4508 'pmask' 'unsigned long *'
