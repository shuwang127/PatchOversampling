TranslationUnitDecl 0x27ee778c578 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x27ee778ce10 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x27ee778cb10 '__int128'
|-TypedefDecl 0x27ee778ce80 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x27ee778cb30 'unsigned __int128'
|-TypedefDecl 0x27ee778d1b8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x27ee778cf70 'struct __NSConstantString_tag'
|   `-Record 0x27ee778ced8 '__NSConstantString_tag'
|-TypedefDecl 0x27ee778d228 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x27ee778c750 'unsigned long long'
|-TypedefDecl 0x27ee778d2c0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x27ee778d280 'char *'
|   `-BuiltinType 0x27ee778c610 'char'
|-TypedefDecl 0x27ee778d330 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x27ee778d280 'char *'
|   `-BuiltinType 0x27ee778c610 'char'
|-RecordDecl 0x27ee778d388 <.//openssl//file_jk/before\crypto\asn1\asn1_gen.c:41:1, line:45:1> line:41:8 struct tag_name_st definition
| |-FieldDecl 0x27ee778d458 <line:42:5, col:17> col:17 referenced strnam 'const char *'
| |-FieldDecl 0x27ee778d4c8 <line:43:5, col:9> col:9 referenced len 'int'
| `-FieldDecl 0x27ee9152f60 <line:44:5, col:9> col:9 referenced tag 'int'
|-RecordDecl 0x27ee9152fb8 <line:47:9, line:53:1> line:47:9 struct definition
| |-FieldDecl 0x27ee9153088 <line:48:5, col:9> col:9 referenced exp_tag 'int'
| |-FieldDecl 0x27ee91530f8 <line:49:5, col:9> col:9 referenced exp_class 'int'
| |-FieldDecl 0x27ee9153168 <line:50:5, col:9> col:9 referenced exp_constructed 'int'
| |-FieldDecl 0x27ee91531d8 <line:51:5, col:9> col:9 referenced exp_pad 'int'
| `-FieldDecl 0x27ee9153248 <line:52:5, col:10> col:10 referenced exp_len 'long'
|-TypedefDecl 0x27ee91532f8 <line:47:1, line:53:3> col:3 referenced tag_exp_type 'struct tag_exp_type':'tag_exp_type'
| `-ElaboratedType 0x27ee91532a0 'struct tag_exp_type' sugar
|   `-RecordType 0x27ee9153050 'tag_exp_type'
|     `-Record 0x27ee9152fb8 ''
|-RecordDecl 0x27ee9153368 <line:55:9, line:63:1> line:55:9 struct definition
| |-FieldDecl 0x27ee9153438 <line:56:5, col:9> col:9 referenced imp_tag 'int'
| |-FieldDecl 0x27ee91534a8 <line:57:5, col:9> col:9 referenced imp_class 'int'
| |-FieldDecl 0x27ee9153518 <line:58:5, col:9> col:9 referenced utype 'int'
| |-FieldDecl 0x27ee9153588 <line:59:5, col:9> col:9 referenced format 'int'
| |-FieldDecl 0x27ee91535f8 <line:60:5, col:17> col:17 referenced str 'const char *'
| |-FieldDecl 0x27ee91537b8 <line:61:5, col:44> col:18 referenced exp_list 'tag_exp_type [20]'
| `-FieldDecl 0x27ee9153828 <line:62:5, col:9> col:9 referenced exp_count 'int'
|-TypedefDecl 0x27ee91538d8 <line:55:1, line:63:3> col:3 referenced tag_exp_arg 'struct tag_exp_arg':'tag_exp_arg'
| `-ElaboratedType 0x27ee9153880 'struct tag_exp_arg' sugar
|   `-RecordType 0x27ee9153400 'tag_exp_arg'
|     `-Record 0x27ee9153368 ''
|-FunctionDecl 0x27ee9153c10 <line:65:1, line:66:40> line:65:19 invalid generate_v3 'int *(const char *, int *, int, int *)' static
| |-ParmVarDecl 0x27ee9153960 <col:31, col:43> col:43 str 'const char *'
| |-ParmVarDecl 0x27ee9153a10 <col:48, col:60> col:60 invalid cnf 'int *'
| |-ParmVarDecl 0x27ee9153a90 <col:65, col:69> col:69 depth 'int'
| `-ParmVarDecl 0x27ee9153b10 <line:66:31, col:36> col:36 perr 'int *'
|-FunctionDecl 0x27ee914ef20 <line:67:1, col:61> col:12 used bitstr_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x27ee9153ce8 <col:22, col:34> col:34 elem 'const char *'
| |-ParmVarDecl 0x27ee9153d68 <col:40, col:44> col:44 len 'int'
| `-ParmVarDecl 0x27ee9153de8 <col:49, col:55> col:55 bitstr 'void *'
|-FunctionDecl 0x27ee914f240 <line:68:1, col:59> col:12 used asn1_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x27ee914f050 <col:20, col:32> col:32 elem 'const char *'
| |-ParmVarDecl 0x27ee914f0d0 <col:38, col:42> col:42 len 'int'
| `-ParmVarDecl 0x27ee914f150 <col:47, col:53> col:53 bitstr 'void *'
|-FunctionDecl 0x27ee914f820 <line:69:1, line:70:67> line:69:12 used append_exp 'int (tag_exp_arg *, int, int, int, int, int)' static
| |-ParmVarDecl 0x27ee914f398 <col:23, col:36> col:36 arg 'tag_exp_arg *'
| |-ParmVarDecl 0x27ee914f418 <col:41, col:45> col:45 exp_tag 'int'
| |-ParmVarDecl 0x27ee914f498 <col:54, col:58> col:58 exp_class 'int'
| |-ParmVarDecl 0x27ee914f518 <line:70:23, col:27> col:27 exp_constructed 'int'
| |-ParmVarDecl 0x27ee914f598 <col:44, col:48> col:48 exp_pad 'int'
| `-ParmVarDecl 0x27ee914f618 <col:57, col:61> col:61 imp_ok 'int'
|-FunctionDecl 0x27ee914fc00 <line:71:1, line:72:37> line:71:12 used parse_tagging 'int (const char *, int, int *, int *)' static
| |-ParmVarDecl 0x27ee914f920 <col:26, col:38> col:38 vstart 'const char *'
| |-ParmVarDecl 0x27ee914f9a0 <col:46, col:50> col:50 vlen 'int'
| |-ParmVarDecl 0x27ee914fa20 <col:56, col:61> col:61 ptag 'int *'
| `-ParmVarDecl 0x27ee914faa0 <line:72:26, col:31> col:31 pclass 'int *'
|-FunctionDecl 0x27ee91570b0 <line:73:1, line:74:50> line:73:19 invalid asn1_multi 'int *(int, const char *, int *, int, int *)' static
| |-ParmVarDecl 0x27ee914fcf0 <col:30, col:34> col:34 utype 'int'
| |-ParmVarDecl 0x27ee914fd70 <col:41, col:53> col:53 section 'const char *'
| |-ParmVarDecl 0x27ee914fdf0 <col:62, col:74> col:74 invalid cnf 'int *'
| |-ParmVarDecl 0x27ee914fe70 <line:74:30, col:34> col:34 depth 'int'
| `-ParmVarDecl 0x27ee9156fa0 <col:41, col:46> col:46 perr 'int *'
|-FunctionDecl 0x27ee91573c0 <line:75:1, col:71> col:19 invalid asn1_str2type 'int *(const char *, int, int)' static
| |-ParmVarDecl 0x27ee9157190 <col:33, col:45> col:45 str 'const char *'
| |-ParmVarDecl 0x27ee9157210 <col:50, col:54> col:54 format 'int'
| `-ParmVarDecl 0x27ee9157290 <col:62, col:66> col:66 utype 'int'
|-FunctionDecl 0x27ee9157620 <line:76:1, col:52> col:12 used asn1_str2tag 'int (const char *, int)' static
| |-ParmVarDecl 0x27ee9157490 <col:25, col:37> col:37 tagstr 'const char *'
| `-ParmVarDecl 0x27ee9157510 <col:45, col:49> col:49 len 'int'
|-FunctionDecl 0x27ee9157860 <line:78:1, line:87:1> line:78:12 invalid ASN1_generate_nconf 'int *(const char *, int *)'
| |-ParmVarDecl 0x27ee9157700 <col:32, col:44> col:44 used str 'const char *'
| |-ParmVarDecl 0x27ee9157780 <col:49, col:55> col:55 invalid nconf 'int *'
| `-CompoundStmt 0x27ee9157bf0 <line:79:1, line:87:1>
|-FunctionDecl 0x27ee9157d38 <line:89:1, line:96:1> line:89:12 invalid ASN1_generate_v3 'int *(const char *, int *)'
| |-ParmVarDecl 0x27ee9157c18 <col:29, col:41> col:41 used str 'const char *'
| |-ParmVarDecl 0x27ee9157c98 <col:46, col:58> col:58 invalid cnf 'int *'
| `-CompoundStmt 0x27ee91580f8 <line:90:1, line:96:1>
|   `-DeclStmt 0x27ee9157ea8 <line:91:5, col:16>
|     `-VarDecl 0x27ee9157e18 <col:5, col:15> col:9 used err 'int' cinit
|       `-IntegerLiteral 0x27ee9157e80 <col:15> 'int' 0
|-FunctionDecl 0x27ee9158358 <line:98:1, line:238:1> line:98:19 invalid generate_v3 'int *(const char *, int *, int, int *)' static
| |-ParmVarDecl 0x27ee9158128 <col:31, col:43> col:43 used str 'const char *'
| |-ParmVarDecl 0x27ee91581a8 <col:48, col:60> col:60 invalid cnf 'int *'
| |-ParmVarDecl 0x27ee9158228 <col:65, col:69> col:69 used depth 'int'
| |-ParmVarDecl 0x27ee91582a8 <line:99:31, col:36> col:36 used perr 'int *'
| `-CompoundStmt 0x27ee9164570 <line:100:1, line:238:1>
|   |-DeclStmt 0x27ee91584a8 <line:102:5, col:26>
|   | `-VarDecl 0x27ee9158440 <col:5, col:17> col:17 used asn1_tags 'tag_exp_arg':'tag_exp_arg'
|   |-DeclStmt 0x27ee9158590 <line:103:5, col:23>
|   | `-VarDecl 0x27ee9158528 <col:5, col:19> col:19 used etmp 'tag_exp_type *'
|   |-DeclStmt 0x27ee91586c0 <line:105:5, col:15>
|   | |-VarDecl 0x27ee91585c0 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x27ee9158640 <col:5, col:12> col:12 used len 'int'
|   |-DeclStmt 0x27ee9158820 <line:107:5, col:52>
|   | |-VarDecl 0x27ee9158720 <col:5, col:20> col:20 used orig_der 'unsigned char *'
|   | `-VarDecl 0x27ee91587a0 <col:5, col:38> col:38 used new_der 'unsigned char *'
|   |-DeclStmt 0x27ee91588e8 <line:108:5, col:35>
|   | `-VarDecl 0x27ee9158880 <col:5, col:26> col:26 used cpy_start 'const unsigned char *'
|   |-DeclStmt 0x27ee9158980 <line:109:5, col:21>
|   | `-VarDecl 0x27ee9158918 <col:5, col:20> col:20 used p 'unsigned char *'
|   |-DeclStmt 0x27ee9158a18 <line:110:5, col:28>
|   | `-VarDecl 0x27ee91589b0 <col:5, col:26> col:26 used cp 'const unsigned char *'
|   |-DeclStmt 0x27ee9158ab0 <line:111:5, col:16>
|   | `-VarDecl 0x27ee9158a48 <col:5, col:9> col:9 used cpy_len 'int'
|   |-DeclStmt 0x27ee9158b88 <line:112:5, col:21>
|   | `-VarDecl 0x27ee9158ae0 <col:5, col:20> col:10 used hdr_len 'long' cinit
|   |   `-ImplicitCastExpr 0x27ee9158b70 <col:20> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x27ee9158b48 <col:20> 'int' 0
|   |-DeclStmt 0x27ee9158d68 <line:113:5, col:48>
|   | |-VarDecl 0x27ee9158bb8 <col:5, col:27> col:9 used hdr_constructed 'int' cinit
|   | | `-IntegerLiteral 0x27ee9158c20 <col:27> 'int' 0
|   | |-VarDecl 0x27ee9158c60 <col:5, col:30> col:30 used hdr_tag 'int'
|   | `-VarDecl 0x27ee9158ce0 <col:5, col:39> col:39 used hdr_class 'int'
|   |-DeclStmt 0x27ee9158e00 <line:114:5, col:10>
|   | `-VarDecl 0x27ee9158d98 <col:5, col:9> col:9 used r 'int'
|   |-BinaryOperator 0x27ee9158ec0 <line:116:5, col:26> 'int' '='
|   | |-MemberExpr 0x27ee9158e50 <col:5, col:15> 'int' lvalue .imp_tag 0x27ee9153438
|   | | `-DeclRefExpr 0x27ee9158e18 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-UnaryOperator 0x27ee9158ea8 <col:25, col:26> 'int' prefix '-'
|   |   `-IntegerLiteral 0x27ee9158e80 <col:26> 'int' 1
|   |-BinaryOperator 0x27ee9168cf0 <line:117:5, col:28> 'int' '='
|   | |-MemberExpr 0x27ee9158f80 <col:5, col:15> 'int' lvalue .imp_class 0x27ee91534a8
|   | | `-DeclRefExpr 0x27ee9158f60 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-UnaryOperator 0x27ee9168cd8 <col:27, col:28> 'int' prefix '-'
|   |   `-IntegerLiteral 0x27ee9168cb0 <col:28> 'int' 1
|   |-BinaryOperator 0x27ee9168d88 <line:118:5, line:33:33> 'int' '='
|   | |-MemberExpr 0x27ee9168d30 <line:118:5, col:15> 'int' lvalue .format 0x27ee9153588
|   | | `-DeclRefExpr 0x27ee9168d10 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-IntegerLiteral 0x27ee9168d60 <line:33:33> 'int' 1
|   |-BinaryOperator 0x27ee9168e20 <line:119:5, col:27> 'int' '='
|   | |-MemberExpr 0x27ee9168dc8 <col:5, col:15> 'int' lvalue .exp_count 0x27ee9153828
|   | | `-DeclRefExpr 0x27ee9168da8 <col:5> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-IntegerLiteral 0x27ee9168df8 <col:27> 'int' 0
|   |-IfStmt 0x27ee91691c0 <line:120:5, line:123:5>
|   | |-BinaryOperator 0x27ee9169128 <line:120:9, col:62> 'int' '!='
|   | | |-CallExpr 0x27ee9169060 <col:9, col:57> 'int'
|   | | | |-ImplicitCastExpr 0x27ee9169048 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x27ee9168f30 <col:9> 'int ()' Function 0x27ee9168e68 'CONF_parse_list' 'int ()'
|   | | | |-ImplicitCastExpr 0x27ee91690a8 <col:25> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x27ee9168f50 <col:25> 'const char *' lvalue ParmVar 0x27ee9158128 'str' 'const char *'
|   | | | |-CharacterLiteral 0x27ee9168f88 <col:30> 'int' 44
|   | | | |-IntegerLiteral 0x27ee9168fa0 <col:35> 'int' 1
|   | | | |-ImplicitCastExpr 0x27ee91690e8 <col:38> 'int (*)(const char *, int, void *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x27ee9168fc8 <col:38> 'int (const char *, int, void *)' Function 0x27ee914f240 'asn1_cb' 'int (const char *, int, void *)'
|   | | | `-UnaryOperator 0x27ee9169008 <col:47, col:48> 'tag_exp_arg *' prefix '&' cannot overflow
|   | | |   `-DeclRefExpr 0x27ee9168fe8 <col:48> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | | `-IntegerLiteral 0x27ee9169100 <col:62> 'int' 0
|   | `-CompoundStmt 0x27ee91691b0 <col:65, line:123:5>
|   |-IfStmt 0x27ee9169628 <line:125:5, line:137:9> has_else
|   | |-OpaqueValueExpr 0x27ee9169610 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x27ee91694f8 <line:126:45, line:136:5>
|   | | |-IfStmt 0x27ee91692f0 <line:127:9, line:130:9>
|   | | | |-OpaqueValueExpr 0x27ee91692d8 <<invalid sloc>> '_Bool'
|   | | | `-CompoundStmt 0x27ee91692c8 <line:127:19, line:130:9>
|   | | `-IfStmt 0x27ee9169400 <line:131:9, line:134:9>
|   | |   |-BinaryOperator 0x27ee9169380 <line:131:13, line:28:33> 'int' '>='
|   | |   | |-ImplicitCastExpr 0x27ee9169368 <line:131:13> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x27ee9169308 <col:13> 'int' lvalue ParmVar 0x27ee9158228 'depth' 'int'
|   | |   | `-IntegerLiteral 0x27ee9169340 <line:28:33> 'int' 50
|   | |   `-CompoundStmt 0x27ee91693f0 <line:131:46, line:134:9>
|   | `-NullStmt 0x27ee9169608 <line:137:9>
|   |-BinaryOperator 0x27ee9169b88 <line:151:5, col:17> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x27ee9169b00 <col:5> 'const unsigned char *' lvalue Var 0x27ee9158880 'cpy_start' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x27ee9169b70 <col:17> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x27ee9169b58 <col:17> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x27ee9169b38 <col:17> 'unsigned char *' lvalue Var 0x27ee9158720 'orig_der' 'unsigned char *'
|   |-IfStmt 0x27ee91666e8 <line:154:5, line:180:15> has_else
|   | |-BinaryOperator 0x27ee9169c50 <line:154:9, col:31> 'int' '!='
|   | | |-ImplicitCastExpr 0x27ee9169c38 <col:9, col:19> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x27ee9169bc8 <col:9, col:19> 'int' lvalue .imp_tag 0x27ee9153438
|   | | |   `-DeclRefExpr 0x27ee9169ba8 <col:9> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | | `-UnaryOperator 0x27ee9169c20 <col:30, col:31> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x27ee9169bf8 <col:31> 'int' 1
|   | |-CompoundStmt 0x27ee9166638 <col:34, line:179:5>
|   | | |-BinaryOperator 0x27ee9165fa8 <line:157:9, line:158:36> 'int' '='
|   | | | |-DeclRefExpr 0x27ee9169c70 <line:157:9> 'int' lvalue Var 0x27ee9158d98 'r' 'int'
|   | | | `-CallExpr 0x27ee9165f48 <col:13, line:158:36> 'int'
|   | | |   |-ImplicitCastExpr 0x27ee9165f30 <line:157:13> 'int (*)()' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x27ee9165d70 <col:13> 'int ()' Function 0x27ee9165ca8 'ASN1_get_object' 'int ()'
|   | | |   |-UnaryOperator 0x27ee9165dd8 <col:29, col:30> 'const unsigned char **' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x27ee9165d90 <col:30> 'const unsigned char *' lvalue Var 0x27ee9158880 'cpy_start' 'const unsigned char *'
|   | | |   |-UnaryOperator 0x27ee9165e58 <col:41, col:42> 'long *' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x27ee9165df0 <col:42> 'long' lvalue Var 0x27ee9158ae0 'hdr_len' 'long'
|   | | |   |-UnaryOperator 0x27ee9165ea8 <col:51, col:52> 'int *' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x27ee9165e70 <col:52> 'int' lvalue Var 0x27ee9158c60 'hdr_tag' 'int'
|   | | |   |-UnaryOperator 0x27ee9165ef8 <col:61, col:62> 'int *' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x27ee9165ec0 <col:62> 'int' lvalue Var 0x27ee9158ce0 'hdr_class' 'int'
|   | | |   `-ImplicitCastExpr 0x27ee9165f90 <line:158:29> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x27ee9165f10 <col:29> 'int' lvalue Var 0x27ee9158a48 'cpy_len' 'int'
|   | | |-IfStmt 0x27ee91660b0 <line:159:9, line:160:18>
|   | | | |-BinaryOperator 0x27ee9166028 <line:159:13, col:17> 'int' '&'
|   | | | | |-ImplicitCastExpr 0x27ee9166010 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x27ee9165fc8 <col:13> 'int' lvalue Var 0x27ee9158d98 'r' 'int'
|   | | | | `-IntegerLiteral 0x27ee9165fe8 <col:17> 'int' 128
|   | | | `-GotoStmt 0x27ee9166098 <line:160:13, col:18> 'err' 0x27ee9166048
|   | | |-CompoundAssignOperator 0x27ee9166178 <line:162:9, col:32> 'int' '-=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | | | |-DeclRefExpr 0x27ee91660c8 <col:9> 'int' lvalue Var 0x27ee9158a48 'cpy_len' 'int'
|   | | | `-BinaryOperator 0x27ee9166158 <col:20, col:32> 'long long' '-'
|   | | |   |-ImplicitCastExpr 0x27ee9166128 <col:20> 'const unsigned char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x27ee91660e8 <col:20> 'const unsigned char *' lvalue Var 0x27ee9158880 'cpy_start' 'const unsigned char *'
|   | | |   `-ImplicitCastExpr 0x27ee9166140 <col:32> 'unsigned char *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x27ee9166108 <col:32> 'unsigned char *' lvalue Var 0x27ee9158720 'orig_der' 'unsigned char *'
|   | | |-IfStmt 0x27ee9166390 <line:167:9, line:173:13> has_else
|   | | | |-BinaryOperator 0x27ee9166208 <line:167:13, col:17> 'int' '&'
|   | | | | |-ImplicitCastExpr 0x27ee91661f0 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x27ee91661a8 <col:13> 'int' lvalue Var 0x27ee9158d98 'r' 'int'
|   | | | | `-IntegerLiteral 0x27ee91661c8 <col:17> 'int' 1
|   | | | |-CompoundStmt 0x27ee9166328 <col:22, line:171:9>
|   | | | | |-BinaryOperator 0x27ee9166288 <line:169:13, col:31> 'int' '='
|   | | | | | |-DeclRefExpr 0x27ee9166228 <col:13> 'int' lvalue Var 0x27ee9158bb8 'hdr_constructed' 'int'
|   | | | | | `-IntegerLiteral 0x27ee9166260 <col:31> 'int' 2
|   | | | | `-BinaryOperator 0x27ee9166308 <line:170:13, col:23> 'long' '='
|   | | | |   |-DeclRefExpr 0x27ee91662a8 <col:13> 'long' lvalue Var 0x27ee9158ae0 'hdr_len' 'long'
|   | | | |   `-ImplicitCastExpr 0x27ee91662f0 <col:23> 'long' <IntegralCast>
|   | | | |     `-IntegerLiteral 0x27ee91662c8 <col:23> 'int' 0
|   | | | `-NullStmt 0x27ee9166388 <line:173:13>
|   | | `-BinaryOperator 0x27ee9166618 <line:178:9, col:61> 'int' '='
|   | |   |-DeclRefExpr 0x27ee91663b8 <col:9> 'int' lvalue Var 0x27ee9158640 'len' 'int'
|   | |   `-CallExpr 0x27ee91665b0 <col:15, col:61> 'int'
|   | |     |-ImplicitCastExpr 0x27ee9166598 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x27ee91664e0 <col:15> 'int ()' Function 0x27ee9166418 'ASN1_object_size' 'int ()'
|   | |     |-IntegerLiteral 0x27ee9166500 <col:32> 'int' 0
|   | |     |-ImplicitCastExpr 0x27ee91665e8 <col:35> 'long' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x27ee9166528 <col:35> 'long' lvalue Var 0x27ee9158ae0 'hdr_len' 'long'
|   | |     `-ImplicitCastExpr 0x27ee9166600 <col:44, col:54> 'int' <LValueToRValue>
|   | |       `-MemberExpr 0x27ee9166568 <col:44, col:54> 'int' lvalue .imp_tag 0x27ee9153438
|   | |         `-DeclRefExpr 0x27ee9166548 <col:44> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | `-BinaryOperator 0x27ee91666c8 <line:180:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x27ee9166670 <col:9> 'int' lvalue Var 0x27ee9158640 'len' 'int'
|   |   `-ImplicitCastExpr 0x27ee91666b0 <col:15> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x27ee9166690 <col:15> 'int' lvalue Var 0x27ee9158a48 'cpy_len' 'int'
|   |-ForStmt 0x27ee9161db8 <line:184:5, line:191:5>
|   | |-BinaryOperator 0x27ee9166920 <line:184:10, col:67> 'tag_exp_type *' ','
|   | | |-BinaryOperator 0x27ee9166770 <col:10, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x27ee9166710 <col:10> 'int' lvalue Var 0x27ee91585c0 'i' 'int'
|   | | | `-IntegerLiteral 0x27ee9166748 <col:14> 'int' 0
|   | | `-BinaryOperator 0x27ee9166900 <col:17, col:67> 'tag_exp_type *' '='
|   | |   |-DeclRefExpr 0x27ee9166790 <col:17> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   | |   `-BinaryOperator 0x27ee91668e0 <col:24, col:67> 'tag_exp_type *' '-'
|   | |     |-BinaryOperator 0x27ee9166898 <col:24, col:55> 'tag_exp_type *' '+'
|   | |     | |-ImplicitCastExpr 0x27ee9166868 <col:24, col:34> 'tag_exp_type *' <ArrayToPointerDecay>
|   | |     | | `-MemberExpr 0x27ee91667e8 <col:24, col:34> 'tag_exp_type [20]' lvalue .exp_list 0x27ee91537b8
|   | |     | |   `-DeclRefExpr 0x27ee91667c8 <col:24> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |     | `-ImplicitCastExpr 0x27ee9166880 <col:45, col:55> 'int' <LValueToRValue>
|   | |     |   `-MemberExpr 0x27ee9166838 <col:45, col:55> 'int' lvalue .exp_count 0x27ee9153828
|   | |     |     `-DeclRefExpr 0x27ee9166818 <col:45> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |     `-IntegerLiteral 0x27ee91668b8 <col:67> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x27ee91669e0 <line:185:10, col:24> 'int' '<'
|   | | |-ImplicitCastExpr 0x27ee91669b0 <col:10> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x27ee9166940 <col:10> 'int' lvalue Var 0x27ee91585c0 'i' 'int'
|   | | `-ImplicitCastExpr 0x27ee91669c8 <col:14, col:24> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x27ee9166980 <col:14, col:24> 'int' lvalue .exp_count 0x27ee9153828
|   | |     `-DeclRefExpr 0x27ee9166960 <col:14> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |-BinaryOperator 0x27ee9166a70 <col:35, col:44> 'tag_exp_type *' ','
|   | | |-UnaryOperator 0x27ee9166a20 <col:35, col:36> 'int' postfix '++'
|   | | | `-DeclRefExpr 0x27ee9166a00 <col:35> 'int' lvalue Var 0x27ee91585c0 'i' 'int'
|   | | `-UnaryOperator 0x27ee9166a58 <col:40, col:44> 'tag_exp_type *' postfix '--'
|   | |   `-DeclRefExpr 0x27ee9166a38 <col:40> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   | `-CompoundStmt 0x27ee9161d90 <col:48, line:191:5>
|   |   |-CompoundAssignOperator 0x27ee9166b30 <line:187:9, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |-DeclRefExpr 0x27ee9166a90 <col:9> 'int' lvalue Var 0x27ee9158640 'len' 'int'
|   |   | `-ImplicitCastExpr 0x27ee9166b18 <col:16, col:22> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x27ee9166ae8 <col:16, col:22> 'int' lvalue ->exp_pad 0x27ee91531d8
|   |   |     `-ImplicitCastExpr 0x27ee9166ad0 <col:16> 'tag_exp_type *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x27ee9166ab0 <col:16> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   |   |-BinaryOperator 0x27ee9166c18 <line:188:9, col:25> 'long' '='
|   |   | |-MemberExpr 0x27ee9166b98 <col:9, col:15> 'long' lvalue ->exp_len 0x27ee9153248
|   |   | | `-ImplicitCastExpr 0x27ee9166b80 <col:9> 'tag_exp_type *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x27ee9166b60 <col:9> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   |   | `-ImplicitCastExpr 0x27ee9166c00 <col:25> 'long' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x27ee9166be8 <col:25> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x27ee9166bc8 <col:25> 'int' lvalue Var 0x27ee9158640 'len' 'int'
|   |   `-BinaryOperator 0x27ee9161d70 <line:190:9, col:53> 'int' '='
|   |     |-DeclRefExpr 0x27ee9166c38 <col:9> 'int' lvalue Var 0x27ee9158640 'len' 'int'
|   |     `-CallExpr 0x27ee9161d08 <col:15, col:53> 'int'
|   |       |-ImplicitCastExpr 0x27ee9161cf0 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x27ee9166c58 <col:15> 'int ()' Function 0x27ee9166418 'ASN1_object_size' 'int ()'
|   |       |-IntegerLiteral 0x27ee9161c40 <col:32> 'int' 0
|   |       |-ImplicitCastExpr 0x27ee9161d40 <col:35> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x27ee9161c68 <col:35> 'int' lvalue Var 0x27ee9158640 'len' 'int'
|   |       `-ImplicitCastExpr 0x27ee9161d58 <col:40, col:46> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x27ee9161cc0 <col:40, col:46> 'int' lvalue ->exp_tag 0x27ee9153088
|   |           `-ImplicitCastExpr 0x27ee9161ca8 <col:40> 'tag_exp_type *' <LValueToRValue>
|   |             `-DeclRefExpr 0x27ee9161c88 <col:40> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   |-BinaryOperator 0x27ee9161fc8 <line:195:5, col:33> 'unsigned char *' '='
|   | |-DeclRefExpr 0x27ee9161df0 <col:5> 'unsigned char *' lvalue Var 0x27ee91587a0 'new_der' 'unsigned char *'
|   | `-ImplicitCastExpr 0x27ee9161fb0 <col:15, col:33> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x27ee9161f70 <col:15, col:33> 'int'
|   |     |-ImplicitCastExpr 0x27ee9161f58 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x27ee9161f18 <col:15> 'int ()' Function 0x27ee9161e50 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x27ee9161f98 <col:30> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x27ee9161f38 <col:30> 'int' lvalue Var 0x27ee9158640 'len' 'int'
|   |-IfStmt 0x27ee9162038 <line:196:5, line:197:14>
|   | |-OpaqueValueExpr 0x27ee9162020 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x27ee9162008 <col:9, col:14> 'err' 0x27ee9166048
|   |-BinaryOperator 0x27ee91620c0 <line:201:5, col:9> 'unsigned char *' '='
|   | |-DeclRefExpr 0x27ee9162050 <col:5> 'unsigned char *' lvalue Var 0x27ee9158918 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x27ee91620a8 <col:9> 'unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x27ee9162088 <col:9> 'unsigned char *' lvalue Var 0x27ee91587a0 'new_der' 'unsigned char *'
|   |-ForStmt 0x27ee9162870 <line:205:5, line:211:5>
|   | |-BinaryOperator 0x27ee91621f0 <line:205:10, col:34> 'tag_exp_type *' ','
|   | | |-BinaryOperator 0x27ee9162128 <col:10, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x27ee91620e0 <col:10> 'int' lvalue Var 0x27ee91585c0 'i' 'int'
|   | | | `-IntegerLiteral 0x27ee9162100 <col:14> 'int' 0
|   | | `-BinaryOperator 0x27ee91621d0 <col:17, col:34> 'tag_exp_type *' '='
|   | |   |-DeclRefExpr 0x27ee9162148 <col:17> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   | |   `-ImplicitCastExpr 0x27ee91621b8 <col:24, col:34> 'tag_exp_type *' <ArrayToPointerDecay>
|   | |     `-MemberExpr 0x27ee9162188 <col:24, col:34> 'tag_exp_type [20]' lvalue .exp_list 0x27ee91537b8
|   | |       `-DeclRefExpr 0x27ee9162168 <col:24> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x27ee91622b0 <col:44, col:58> 'int' '<'
|   | | |-ImplicitCastExpr 0x27ee9162280 <col:44> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x27ee9162210 <col:44> 'int' lvalue Var 0x27ee91585c0 'i' 'int'
|   | | `-ImplicitCastExpr 0x27ee9162298 <col:48, col:58> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x27ee9162250 <col:48, col:58> 'int' lvalue .exp_count 0x27ee9153828
|   | |     `-DeclRefExpr 0x27ee9162230 <col:48> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | |-BinaryOperator 0x27ee9162340 <line:206:10, col:19> 'tag_exp_type *' ','
|   | | |-UnaryOperator 0x27ee91622f0 <col:10, col:11> 'int' postfix '++'
|   | | | `-DeclRefExpr 0x27ee91622d0 <col:10> 'int' lvalue Var 0x27ee91585c0 'i' 'int'
|   | | `-UnaryOperator 0x27ee9162328 <col:15, col:19> 'tag_exp_type *' postfix '++'
|   | |   `-DeclRefExpr 0x27ee9162308 <col:15> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   | `-CompoundStmt 0x27ee9162850 <col:23, line:211:5>
|   |   |-CallExpr 0x27ee9162660 <line:207:9, line:208:55> 'int'
|   |   | |-ImplicitCastExpr 0x27ee9162648 <line:207:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x27ee9162450 <col:9> 'int ()' Function 0x27ee9162388 'ASN1_put_object' 'int ()'
|   |   | |-UnaryOperator 0x27ee9162490 <col:25, col:26> 'unsigned char **' prefix '&' cannot overflow
|   |   | | `-DeclRefExpr 0x27ee9162470 <col:26> 'unsigned char *' lvalue Var 0x27ee9158918 'p' 'unsigned char *'
|   |   | |-ImplicitCastExpr 0x27ee91626a8 <col:29, col:35> 'int' <LValueToRValue>
|   |   | | `-MemberExpr 0x27ee91624e0 <col:29, col:35> 'int' lvalue ->exp_constructed 0x27ee9153168
|   |   | |   `-ImplicitCastExpr 0x27ee91624c8 <col:29> 'tag_exp_type *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x27ee91624a8 <col:29> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   |   | |-ImplicitCastExpr 0x27ee91626c0 <col:52, col:58> 'long' <LValueToRValue>
|   |   | | `-MemberExpr 0x27ee9162548 <col:52, col:58> 'long' lvalue ->exp_len 0x27ee9153248
|   |   | |   `-ImplicitCastExpr 0x27ee9162530 <col:52> 'tag_exp_type *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x27ee9162510 <col:52> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   |   | |-ImplicitCastExpr 0x27ee91626d8 <line:208:25, col:31> 'int' <LValueToRValue>
|   |   | | `-MemberExpr 0x27ee91625b0 <col:25, col:31> 'int' lvalue ->exp_tag 0x27ee9153088
|   |   | |   `-ImplicitCastExpr 0x27ee9162598 <col:25> 'tag_exp_type *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x27ee9162578 <col:25> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   |   | `-ImplicitCastExpr 0x27ee91626f0 <col:40, col:46> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x27ee9162618 <col:40, col:46> 'int' lvalue ->exp_class 0x27ee91530f8
|   |   |     `-ImplicitCastExpr 0x27ee9162600 <col:40> 'tag_exp_type *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x27ee91625e0 <col:40> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   |   `-IfStmt 0x27ee9162838 <line:209:9, line:210:20>
|   |     |-ImplicitCastExpr 0x27ee9162770 <line:209:13, col:19> 'int' <LValueToRValue>
|   |     | `-MemberExpr 0x27ee9162740 <col:13, col:19> 'int' lvalue ->exp_pad 0x27ee91531d8
|   |     |   `-ImplicitCastExpr 0x27ee9162728 <col:13> 'tag_exp_type *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x27ee9162708 <col:13> 'tag_exp_type *' lvalue Var 0x27ee9158528 'etmp' 'tag_exp_type *'
|   |     `-BinaryOperator 0x27ee9162818 <line:210:13, col:20> 'unsigned char' '='
|   |       |-UnaryOperator 0x27ee91627c0 <col:13, col:15> 'unsigned char' lvalue prefix '*' cannot overflow
|   |       | `-UnaryOperator 0x27ee91627a8 <col:14, col:15> 'unsigned char *' postfix '++'
|   |       |   `-DeclRefExpr 0x27ee9162788 <col:14> 'unsigned char *' lvalue Var 0x27ee9158918 'p' 'unsigned char *'
|   |       `-ImplicitCastExpr 0x27ee9162800 <col:20> 'unsigned char' <IntegralCast>
|   |         `-IntegerLiteral 0x27ee91627d8 <col:20> 'int' 0
|   |-IfStmt 0x27ee9163cc0 <line:215:5, line:222:5>
|   | |-BinaryOperator 0x27ee9162950 <line:215:9, col:31> 'int' '!='
|   | | |-ImplicitCastExpr 0x27ee9162938 <col:9, col:19> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x27ee91628c8 <col:9, col:19> 'int' lvalue .imp_tag 0x27ee9153438
|   | | |   `-DeclRefExpr 0x27ee91628a8 <col:9> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   | | `-UnaryOperator 0x27ee9162920 <col:30, col:31> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x27ee91628f8 <col:31> 'int' 1
|   | `-CompoundStmt 0x27ee9163ca8 <col:34, line:222:5>
|   |   `-CallExpr 0x27ee9162bd0 <line:220:9, line:221:63> 'int'
|   |     |-ImplicitCastExpr 0x27ee9162bb8 <line:220:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x27ee9162a80 <col:9> 'int ()' Function 0x27ee9162388 'ASN1_put_object' 'int ()'
|   |     |-UnaryOperator 0x27ee9162ac0 <col:25, col:26> 'unsigned char **' prefix '&' cannot overflow
|   |     | `-DeclRefExpr 0x27ee9162aa0 <col:26> 'unsigned char *' lvalue Var 0x27ee9158918 'p' 'unsigned char *'
|   |     |-ImplicitCastExpr 0x27ee9162c18 <col:29> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x27ee9162ad8 <col:29> 'int' lvalue Var 0x27ee9158bb8 'hdr_constructed' 'int'
|   |     |-ImplicitCastExpr 0x27ee9163c60 <col:46> 'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x27ee9162af8 <col:46> 'long' lvalue Var 0x27ee9158ae0 'hdr_len' 'long'
|   |     |-ImplicitCastExpr 0x27ee9163c78 <line:221:25, col:35> 'int' <LValueToRValue>
|   |     | `-MemberExpr 0x27ee9162b38 <col:25, col:35> 'int' lvalue .imp_tag 0x27ee9153438
|   |     |   `-DeclRefExpr 0x27ee9162b18 <col:25> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   |     `-ImplicitCastExpr 0x27ee9163c90 <col:44, col:54> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x27ee9162b88 <col:44, col:54> 'int' lvalue .imp_class 0x27ee91534a8
|   |         `-DeclRefExpr 0x27ee9162b68 <col:44> 'tag_exp_arg':'tag_exp_arg' lvalue Var 0x27ee9158440 'asn1_tags' 'tag_exp_arg':'tag_exp_arg'
|   |-CallExpr 0x27ee9164060 <line:225:5, col:33> 'void *'
|   | |-ImplicitCastExpr 0x27ee9164048 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x27ee9163f40 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x27ee9163d50 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   | |-ImplicitCastExpr 0x27ee91640b0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x27ee9164098 <col:12> 'unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee9163f78 <col:12> 'unsigned char *' lvalue Var 0x27ee9158918 'p' 'unsigned char *'
|   | |-ImplicitCastExpr 0x27ee91640e0 <col:15> 'const void *' <BitCast>
|   | | `-ImplicitCastExpr 0x27ee91640c8 <col:15> 'const unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee9163f98 <col:15> 'const unsigned char *' lvalue Var 0x27ee9158880 'cpy_start' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x27ee9164110 <col:26> 'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x27ee91640f8 <col:26> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x27ee9163fb8 <col:26> 'int' lvalue Var 0x27ee9158a48 'cpy_len' 'int'
|   |-BinaryOperator 0x27ee91641b0 <line:227:5, col:10> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x27ee9164128 <col:5> 'const unsigned char *' lvalue Var 0x27ee91589b0 'cp' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x27ee9164198 <col:10> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x27ee9164180 <col:10> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x27ee9164160 <col:10> 'unsigned char *' lvalue Var 0x27ee91587a0 'new_der' 'unsigned char *'
|   |-LabelStmt 0x27ee91644c0 <line:232:2, line:233:26> 'err'
|   | `-CallExpr 0x27ee9164480 <col:5, col:26> 'int'
|   |   |-ImplicitCastExpr 0x27ee9164468 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x27ee9164428 <col:5> 'int ()' Function 0x27ee9164360 'OPENSSL_free' 'int ()'
|   |   `-ImplicitCastExpr 0x27ee91644a8 <col:18> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x27ee9164448 <col:18> 'unsigned char *' lvalue Var 0x27ee9158720 'orig_der' 'unsigned char *'
|   `-CallExpr 0x27ee9164530 <line:234:5, col:25> 'int'
|     |-ImplicitCastExpr 0x27ee9164518 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x27ee91644d8 <col:5> 'int ()' Function 0x27ee9164360 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x27ee9164558 <col:18> 'unsigned char *' <LValueToRValue>
|       `-DeclRefExpr 0x27ee91644f8 <col:18> 'unsigned char *' lvalue Var 0x27ee91587a0 'new_der' 'unsigned char *'
|-FunctionDecl 0x27ee9163d50 <line:225:5> col:5 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x27ee9163df0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x27ee9163e58 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x27ee9163ec0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x27ee9164870 prev 0x27ee914f240 <line:240:1, line:346:1> line:240:12 used asn1_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x27ee9164680 <col:20, col:32> col:32 used elem 'const char *'
| |-ParmVarDecl 0x27ee9164700 <col:38, col:42> col:42 used len 'int'
| |-ParmVarDecl 0x27ee9164780 <col:47, col:53> col:53 used bitstr 'void *'
| `-CompoundStmt 0x27ee916c398 <line:241:1, line:346:1>
|   |-DeclStmt 0x27ee91649f0 <line:242:5, col:30>
|   | `-VarDecl 0x27ee9164938 <col:5, col:24> col:18 used arg 'tag_exp_arg *' cinit
|   |   `-ImplicitCastExpr 0x27ee91649d8 <col:24> 'tag_exp_arg *' <BitCast>
|   |     `-ImplicitCastExpr 0x27ee91649c0 <col:24> 'void *' <LValueToRValue>
|   |       `-DeclRefExpr 0x27ee91649a0 <col:24> 'void *' lvalue ParmVar 0x27ee9164780 'bitstr' 'void *'
|   |-DeclStmt 0x27ee9164a88 <line:243:5, col:10>
|   | `-VarDecl 0x27ee9164a20 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x27ee9164b20 <line:244:5, col:14>
|   | `-VarDecl 0x27ee9164ab8 <col:5, col:9> col:9 used utype 'int'
|   |-DeclStmt 0x27ee9164be0 <line:245:5, col:17>
|   | `-VarDecl 0x27ee9164b50 <col:5, col:16> col:9 used vlen 'int' cinit
|   |   `-IntegerLiteral 0x27ee9164bb8 <col:16> 'int' 0
|   |-DeclStmt 0x27ee9166d90 <line:246:5, col:34>
|   | |-VarDecl 0x27ee9166c90 <col:5, col:17> col:17 used p 'const char *'
|   | `-VarDecl 0x27ee9166d10 <col:5, col:21> col:21 used vstart 'const char *'
|   |-DeclStmt 0x27ee9166ec0 <line:248:5, col:27>
|   | |-VarDecl 0x27ee9166dc0 <col:5, col:9> col:9 used tmp_tag 'int'
|   | `-VarDecl 0x27ee9166e40 <col:5, col:18> col:18 used tmp_class 'int'
|   |-IfStmt 0x27ee9166f60 <line:250:5, line:251:17>
|   | |-OpaqueValueExpr 0x27ee9166f48 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x27ee9166f38 <col:9, col:17>
|   |   `-UnaryOperator 0x27ee9166f20 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x27ee9166ef8 <col:17> 'int' 1
|   |-ForStmt 0x27ee9167638 <line:253:5, line:261:5>
|   | |-BinaryOperator 0x27ee9167088 <line:253:10, col:21> 'const char *' ','
|   | | |-BinaryOperator 0x27ee9166fd8 <col:10, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x27ee9166f78 <col:10> 'int' lvalue Var 0x27ee9164a20 'i' 'int'
|   | | | `-IntegerLiteral 0x27ee9166fb0 <col:14> 'int' 0
|   | | `-BinaryOperator 0x27ee9167068 <col:17, col:21> 'const char *' '='
|   | |   |-DeclRefExpr 0x27ee9166ff8 <col:17> 'const char *' lvalue Var 0x27ee9166c90 'p' 'const char *'
|   | |   `-ImplicitCastExpr 0x27ee9167050 <col:21> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x27ee9167030 <col:21> 'const char *' lvalue ParmVar 0x27ee9164680 'elem' 'const char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x27ee9167118 <col:27, col:31> 'int' '<'
|   | | |-ImplicitCastExpr 0x27ee91670e8 <col:27> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x27ee91670a8 <col:27> 'int' lvalue Var 0x27ee9164a20 'i' 'int'
|   | | `-ImplicitCastExpr 0x27ee9167100 <col:31> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee91670c8 <col:31> 'int' lvalue ParmVar 0x27ee9164700 'len' 'int'
|   | |-BinaryOperator 0x27ee91671a8 <col:36, col:42> 'int' ','
|   | | |-UnaryOperator 0x27ee9167158 <col:36, col:37> 'const char *' postfix '++'
|   | | | `-DeclRefExpr 0x27ee9167138 <col:36> 'const char *' lvalue Var 0x27ee9166c90 'p' 'const char *'
|   | | `-UnaryOperator 0x27ee9167190 <col:41, col:42> 'int' postfix '++'
|   | |   `-DeclRefExpr 0x27ee9167170 <col:41> 'int' lvalue Var 0x27ee9164a20 'i' 'int'
|   | `-CompoundStmt 0x27ee9167620 <col:46, line:261:5>
|   |   `-IfStmt 0x27ee9167608 <line:255:9, line:260:9>
|   |     |-BinaryOperator 0x27ee9167260 <line:255:13, col:19> 'int' '=='
|   |     | |-ImplicitCastExpr 0x27ee9167248 <col:13, col:14> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x27ee9167230 <col:13, col:14> 'char' <LValueToRValue>
|   |     | |   `-UnaryOperator 0x27ee9167200 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |     | |     `-ImplicitCastExpr 0x27ee91671e8 <col:14> 'const char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x27ee91671c8 <col:14> 'const char *' lvalue Var 0x27ee9166c90 'p' 'const char *'
|   |     | `-CharacterLiteral 0x27ee9167218 <col:19> 'int' 58
|   |     `-CompoundStmt 0x27ee91675d8 <col:24, line:260:9>
|   |       |-BinaryOperator 0x27ee9167338 <line:256:13, col:26> 'const char *' '='
|   |       | |-DeclRefExpr 0x27ee9167280 <col:13> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |       | `-BinaryOperator 0x27ee9167318 <col:22, col:26> 'const char *' '+'
|   |       |   |-ImplicitCastExpr 0x27ee9167300 <col:22> 'const char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x27ee91672b8 <col:22> 'const char *' lvalue Var 0x27ee9166c90 'p' 'const char *'
|   |       |   `-IntegerLiteral 0x27ee91672d8 <col:26> 'int' 1
|   |       |-BinaryOperator 0x27ee91674c8 <line:257:13, col:40> 'int' '='
|   |       | |-DeclRefExpr 0x27ee9167358 <col:13> 'int' lvalue Var 0x27ee9164b50 'vlen' 'int'
|   |       | `-ImplicitCastExpr 0x27ee91674b0 <col:20, col:40> 'int' <IntegralCast>
|   |       |   `-BinaryOperator 0x27ee9167490 <col:20, col:40> 'long long' '-'
|   |       |     |-ImplicitCastExpr 0x27ee9167478 <col:20> 'long long' <IntegralCast>
|   |       |     | `-ImplicitCastExpr 0x27ee9167460 <col:20> 'int' <LValueToRValue>
|   |       |     |   `-DeclRefExpr 0x27ee9167390 <col:20> 'int' lvalue ParmVar 0x27ee9164700 'len' 'int'
|   |       |     `-ParenExpr 0x27ee9167440 <col:26, col:40> 'long long'
|   |       |       `-BinaryOperator 0x27ee9167420 <col:27, col:36> 'long long' '-'
|   |       |         |-ImplicitCastExpr 0x27ee91673f0 <col:27> 'const char *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x27ee91673b0 <col:27> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |       |         `-ImplicitCastExpr 0x27ee9167408 <col:36> 'const char *' <LValueToRValue>
|   |       |           `-DeclRefExpr 0x27ee91673d0 <col:36> 'const char *' lvalue ParmVar 0x27ee9164680 'elem' 'const char *'
|   |       |-BinaryOperator 0x27ee91675b0 <line:258:13, col:23> 'int' '='
|   |       | |-DeclRefExpr 0x27ee91674e8 <col:13> 'int' lvalue ParmVar 0x27ee9164700 'len' 'int'
|   |       | `-ImplicitCastExpr 0x27ee9167598 <col:19, col:23> 'int' <IntegralCast>
|   |       |   `-BinaryOperator 0x27ee9167578 <col:19, col:23> 'long long' '-'
|   |       |     |-ImplicitCastExpr 0x27ee9167548 <col:19> 'const char *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x27ee9167508 <col:19> 'const char *' lvalue Var 0x27ee9166c90 'p' 'const char *'
|   |       |     `-ImplicitCastExpr 0x27ee9167560 <col:23> 'const char *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x27ee9167528 <col:23> 'const char *' lvalue ParmVar 0x27ee9164680 'elem' 'const char *'
|   |       `-BreakStmt 0x27ee91675d0 <line:259:13>
|   |-BinaryOperator 0x27ee91677b0 <line:263:5, col:35> 'int' '='
|   | |-DeclRefExpr 0x27ee9167670 <col:5> 'int' lvalue Var 0x27ee9164ab8 'utype' 'int'
|   | `-CallExpr 0x27ee9167750 <col:13, col:35> 'int'
|   |   |-ImplicitCastExpr 0x27ee9167738 <col:13> 'int (*)(const char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x27ee91676a8 <col:13> 'int (const char *, int)' Function 0x27ee9157620 'asn1_str2tag' 'int (const char *, int)'
|   |   |-ImplicitCastExpr 0x27ee9167780 <col:26> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x27ee91676c8 <col:26> 'const char *' lvalue ParmVar 0x27ee9164680 'elem' 'const char *'
|   |   `-ImplicitCastExpr 0x27ee9167798 <col:32> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x27ee91676e8 <col:32> 'int' lvalue ParmVar 0x27ee9164700 'len' 'int'
|   |-IfStmt 0x27ee9167b28 <line:265:5, line:269:5>
|   | |-BinaryOperator 0x27ee9167848 <line:265:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x27ee9167830 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x27ee91677d0 <col:9> 'int' lvalue Var 0x27ee9164ab8 'utype' 'int'
|   | | `-UnaryOperator 0x27ee9167818 <col:18, col:19> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x27ee91677f0 <col:19> 'int' 1
|   | `-CompoundStmt 0x27ee9167b08 <col:22, line:269:5>
|   |   |-CallExpr 0x27ee9167a50 <line:267:9, col:43> 'int'
|   |   | |-ImplicitCastExpr 0x27ee9167a38 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x27ee9167978 <col:9> 'int ()' Function 0x27ee91678b0 'ERR_add_error_data' 'int ()'
|   |   | |-IntegerLiteral 0x27ee9167998 <col:28> 'int' 2
|   |   | |-ImplicitCastExpr 0x27ee9167a88 <col:31> 'char *' <ArrayToPointerDecay>
|   |   | | `-StringLiteral 0x27ee91679f8 <col:31> 'char [5]' lvalue "tag="
|   |   | `-ImplicitCastExpr 0x27ee9167aa0 <col:39> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x27ee9167a18 <col:39> 'const char *' lvalue ParmVar 0x27ee9164680 'elem' 'const char *'
|   |   `-ReturnStmt 0x27ee9167af8 <line:268:9, col:17>
|   |     `-UnaryOperator 0x27ee9167ae0 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x27ee9167ab8 <col:17> 'int' 1
|   |-IfStmt 0x27ee916a010 <line:272:5, line:281:5>
|   | |-UnaryOperator 0x27ee9167be0 <line:272:9, col:32> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x27ee9167bc0 <col:10, col:32> 'int'
|   | |   `-BinaryOperator 0x27ee9167ba0 <col:11, line:14:33> 'int' '&'
|   | |     |-ImplicitCastExpr 0x27ee9167b88 <line:272:11> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x27ee9167b40 <col:11> 'int' lvalue Var 0x27ee9164ab8 'utype' 'int'
|   | |     `-IntegerLiteral 0x27ee9167b60 <line:14:33> 'int' 65536
|   | `-CompoundStmt 0x27ee9169fe0 <line:272:35, line:281:5>
|   |   |-BinaryOperator 0x27ee9169cf8 <line:273:9, col:22> 'int' '='
|   |   | |-MemberExpr 0x27ee9167c48 <col:9, col:14> 'int' lvalue ->utype 0x27ee9153518
|   |   | | `-ImplicitCastExpr 0x27ee9167c30 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x27ee9167bf8 <col:9> 'tag_exp_arg *' lvalue Var 0x27ee9164938 'arg' 'tag_exp_arg *'
|   |   | `-ImplicitCastExpr 0x27ee9169ce0 <col:22> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x27ee9169cc0 <col:22> 'int' lvalue Var 0x27ee9164ab8 'utype' 'int'
|   |   |-BinaryOperator 0x27ee9169db8 <line:274:9, col:20> 'const char *' '='
|   |   | |-MemberExpr 0x27ee9169d50 <col:9, col:14> 'const char *' lvalue ->str 0x27ee91535f8
|   |   | | `-ImplicitCastExpr 0x27ee9169d38 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x27ee9169d18 <col:9> 'tag_exp_arg *' lvalue Var 0x27ee9164938 'arg' 'tag_exp_arg *'
|   |   | `-ImplicitCastExpr 0x27ee9169da0 <col:20> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x27ee9169d80 <col:20> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |   |-IfStmt 0x27ee9169f90 <line:276:9, line:279:9>
|   |   | |-BinaryOperator 0x27ee9169ee8 <line:276:13, col:32> 'int' '&&'
|   |   | | |-UnaryOperator 0x27ee9169e10 <col:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x27ee9169df8 <col:14> 'const char *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x27ee9169dd8 <col:14> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |   | | `-ImplicitCastExpr 0x27ee9169ed0 <col:24, col:32> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x27ee9169eb8 <col:24, col:32> 'char' <LValueToRValue>
|   |   | |     `-ArraySubscriptExpr 0x27ee9169e98 <col:24, col:32> 'const char' lvalue
|   |   | |       |-ImplicitCastExpr 0x27ee9169e68 <col:24> 'const char *' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x27ee9169e28 <col:24> 'const char *' lvalue ParmVar 0x27ee9164680 'elem' 'const char *'
|   |   | |       `-ImplicitCastExpr 0x27ee9169e80 <col:29> 'int' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x27ee9169e48 <col:29> 'int' lvalue ParmVar 0x27ee9164700 'len' 'int'
|   |   | `-CompoundStmt 0x27ee9169f78 <col:35, line:279:9>
|   |   |   `-ReturnStmt 0x27ee9169f68 <line:278:13, col:21>
|   |   |     `-UnaryOperator 0x27ee9169f50 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x27ee9169f28 <col:21> 'int' 1
|   |   `-ReturnStmt 0x27ee9169fd0 <line:280:9, col:16>
|   |     `-IntegerLiteral 0x27ee9169fa8 <col:16> 'int' 0
|   |-SwitchStmt 0x27ee916a060 <line:283:5, line:342:5>
|   | |-ImplicitCastExpr 0x27ee916a048 <line:283:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x27ee916a028 <col:13> 'int' lvalue Var 0x27ee9164ab8 'utype' 'int'
|   | `-CompoundStmt 0x27ee916c2c8 <col:20, line:342:5>
|   |   |-CaseStmt 0x27ee916a128 <line:285:5, line:290:9>
|   |   | |-ConstantExpr 0x27ee916a110 <line:15:33, col:49> 'int'
|   |   | | `-ParenExpr 0x27ee916a0f0 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x27ee916a0d0 <line:14:33, line:15:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x27ee916a080 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x27ee916a0a8 <line:15:48> 'int' 1
|   |   | `-IfStmt 0x27ee916a2b8 <line:287:9, line:290:9>
|   |   |   |-BinaryOperator 0x27ee916a210 <line:287:13, col:30> 'int' '!='
|   |   |   | |-ImplicitCastExpr 0x27ee916a1f8 <col:13, col:18> 'int' <LValueToRValue>
|   |   |   | | `-MemberExpr 0x27ee916a188 <col:13, col:18> 'int' lvalue ->imp_tag 0x27ee9153438
|   |   |   | |   `-ImplicitCastExpr 0x27ee916a170 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x27ee916a150 <col:13> 'tag_exp_arg *' lvalue Var 0x27ee9164938 'arg' 'tag_exp_arg *'
|   |   |   | `-UnaryOperator 0x27ee916a1e0 <col:29, col:30> 'int' prefix '-'
|   |   |   |   `-IntegerLiteral 0x27ee916a1b8 <col:30> 'int' 1
|   |   |   `-CompoundStmt 0x27ee916a2a0 <col:33, line:290:9>
|   |   |     `-ReturnStmt 0x27ee916a290 <line:289:13, col:21>
|   |   |       `-UnaryOperator 0x27ee916a278 <col:20, col:21> 'int' prefix '-'
|   |   |         `-IntegerLiteral 0x27ee916a250 <col:21> 'int' 1
|   |   |-IfStmt 0x27ee916a548 <line:291:9, line:292:21>
|   |   | |-UnaryOperator 0x27ee916a4e0 <line:291:13, col:72> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x27ee916a470 <col:14, col:72> 'int'
|   |   | |   |-ImplicitCastExpr 0x27ee916a458 <col:14> 'int (*)(const char *, int, int *, int *)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x27ee916a2d0 <col:14> 'int (const char *, int, int *, int *)' Function 0x27ee914fc00 'parse_tagging' 'int (const char *, int, int *, int *)'
|   |   | |   |-ImplicitCastExpr 0x27ee916a4b0 <col:28> 'const char *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x27ee916a2f0 <col:28> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |   | |   |-ImplicitCastExpr 0x27ee916a4c8 <col:36> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x27ee916a310 <col:36> 'int' lvalue Var 0x27ee9164b50 'vlen' 'int'
|   |   | |   |-UnaryOperator 0x27ee916a398 <col:42, col:48> 'int *' prefix '&' cannot overflow
|   |   | |   | `-MemberExpr 0x27ee916a368 <col:43, col:48> 'int' lvalue ->imp_tag 0x27ee9153438
|   |   | |   |   `-ImplicitCastExpr 0x27ee916a350 <col:43> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x27ee916a330 <col:43> 'tag_exp_arg *' lvalue Var 0x27ee9164938 'arg' 'tag_exp_arg *'
|   |   | |   `-UnaryOperator 0x27ee916a418 <col:57, col:63> 'int *' prefix '&' cannot overflow
|   |   | |     `-MemberExpr 0x27ee916a3e8 <col:58, col:63> 'int' lvalue ->imp_class 0x27ee91534a8
|   |   | |       `-ImplicitCastExpr 0x27ee916a3d0 <col:58> 'tag_exp_arg *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x27ee916a3b0 <col:58> 'tag_exp_arg *' lvalue Var 0x27ee9164938 'arg' 'tag_exp_arg *'
|   |   | `-ReturnStmt 0x27ee916a538 <line:292:13, col:21>
|   |   |   `-UnaryOperator 0x27ee916a520 <col:20, col:21> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x27ee916a4f8 <col:21> 'int' 1
|   |   |-BreakStmt 0x27ee916a560 <line:293:9>
|   |   |-CaseStmt 0x27ee916a610 <line:295:5, line:298:21>
|   |   | |-ConstantExpr 0x27ee916a5f8 <line:16:33, col:49> 'int'
|   |   | | `-ParenExpr 0x27ee916a5d8 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x27ee916a5b8 <line:14:33, line:16:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x27ee916a568 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x27ee916a590 <line:16:48> 'int' 2
|   |   | `-IfStmt 0x27ee916a828 <line:297:9, line:298:21>
|   |   |   |-UnaryOperator 0x27ee916a7c0 <line:297:13, col:62> 'int' prefix '!' cannot overflow
|   |   |   | `-CallExpr 0x27ee916a750 <col:14, col:62> 'int'
|   |   |   |   |-ImplicitCastExpr 0x27ee916a738 <col:14> 'int (*)(const char *, int, int *, int *)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x27ee916a638 <col:14> 'int (const char *, int, int *, int *)' Function 0x27ee914fc00 'parse_tagging' 'int (const char *, int, int *, int *)'
|   |   |   |   |-ImplicitCastExpr 0x27ee916a790 <col:28> 'const char *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x27ee916a658 <col:28> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |   |   |   |-ImplicitCastExpr 0x27ee916a7a8 <col:36> 'int' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x27ee916a678 <col:36> 'int' lvalue Var 0x27ee9164b50 'vlen' 'int'
|   |   |   |   |-UnaryOperator 0x27ee916a6d0 <col:42, col:43> 'int *' prefix '&' cannot overflow
|   |   |   |   | `-DeclRefExpr 0x27ee916a698 <col:43> 'int' lvalue Var 0x27ee9166dc0 'tmp_tag' 'int'
|   |   |   |   `-UnaryOperator 0x27ee916a720 <col:52, col:53> 'int *' prefix '&' cannot overflow
|   |   |   |     `-DeclRefExpr 0x27ee916a6e8 <col:53> 'int' lvalue Var 0x27ee9166e40 'tmp_class' 'int'
|   |   |   `-ReturnStmt 0x27ee916a818 <line:298:13, col:21>
|   |   |     `-UnaryOperator 0x27ee916a800 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x27ee916a7d8 <col:21> 'int' 1
|   |   |-IfStmt 0x27ee916aab0 <line:299:9, line:300:21>
|   |   | |-UnaryOperator 0x27ee916aa48 <line:299:13, col:57> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x27ee916a9b0 <col:14, col:57> 'int'
|   |   | |   |-ImplicitCastExpr 0x27ee916a998 <col:14> 'int (*)(tag_exp_arg *, int, int, int, int, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x27ee916a840 <col:14> 'int (tag_exp_arg *, int, int, int, int, int)' Function 0x27ee914f820 'append_exp' 'int (tag_exp_arg *, int, int, int, int, int)'
|   |   | |   |-ImplicitCastExpr 0x27ee916aa00 <col:25> 'tag_exp_arg *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x27ee916a860 <col:25> 'tag_exp_arg *' lvalue Var 0x27ee9164938 'arg' 'tag_exp_arg *'
|   |   | |   |-ImplicitCastExpr 0x27ee916aa18 <col:30> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x27ee916a880 <col:30> 'int' lvalue Var 0x27ee9166dc0 'tmp_tag' 'int'
|   |   | |   |-ImplicitCastExpr 0x27ee916aa30 <col:39> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x27ee916a8a0 <col:39> 'int' lvalue Var 0x27ee9166e40 'tmp_class' 'int'
|   |   | |   |-IntegerLiteral 0x27ee916a8c0 <col:50> 'int' 1
|   |   | |   |-IntegerLiteral 0x27ee916a8e8 <col:53> 'int' 0
|   |   | |   `-IntegerLiteral 0x27ee916a910 <col:56> 'int' 0
|   |   | `-ReturnStmt 0x27ee916aaa0 <line:300:13, col:21>
|   |   |   `-UnaryOperator 0x27ee916aa88 <col:20, col:21> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x27ee916aa60 <col:21> 'int' 1
|   |   |-BreakStmt 0x27ee916aac8 <line:301:9>
|   |   |-CaseStmt 0x27ee916ab78 <line:303:5, line:305:21>
|   |   | |-ConstantExpr 0x27ee916ab60 <line:20:33, col:49> 'int'
|   |   | | `-ParenExpr 0x27ee916ab40 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x27ee916ab20 <line:14:33, line:20:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x27ee916aad0 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x27ee916aaf8 <line:20:48> 'int' 6
|   |   | `-IfStmt 0x27ee9162c50 <line:304:9, line:305:21>
|   |   |   |-OpaqueValueExpr 0x27ee916aca8 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x27ee916ac98 <col:13, col:21>
|   |   |     `-UnaryOperator 0x27ee916ac80 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x27ee916ac58 <col:21> 'int' 1
|   |   |-BreakStmt 0x27ee9162c68 <line:306:9>
|   |   |-CaseStmt 0x27ee9162d18 <line:308:5, line:310:21>
|   |   | |-ConstantExpr 0x27ee9162d00 <line:21:33, col:49> 'int'
|   |   | | `-ParenExpr 0x27ee9162ce0 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x27ee9162cc0 <line:14:33, line:21:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x27ee9162c70 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x27ee9162c98 <line:21:48> 'int' 7
|   |   | `-IfStmt 0x27ee9162e60 <line:309:9, line:310:21>
|   |   |   |-OpaqueValueExpr 0x27ee9162e48 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x27ee9162e38 <col:13, col:21>
|   |   |     `-UnaryOperator 0x27ee9162e20 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x27ee9162df8 <col:21> 'int' 1
|   |   |-BreakStmt 0x27ee9162e78 <line:311:9>
|   |   |-CaseStmt 0x27ee9162f28 <line:313:5, line:315:21>
|   |   | |-ConstantExpr 0x27ee9162f10 <line:18:33, col:49> 'int'
|   |   | | `-ParenExpr 0x27ee9162ef0 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x27ee9162ed0 <line:14:33, line:18:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x27ee9162e80 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x27ee9162ea8 <line:18:48> 'int' 4
|   |   | `-IfStmt 0x27ee9163070 <line:314:9, line:315:21>
|   |   |   |-OpaqueValueExpr 0x27ee9163058 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x27ee9163048 <col:13, col:21>
|   |   |     `-UnaryOperator 0x27ee9163030 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x27ee9163008 <col:21> 'int' 1
|   |   |-BreakStmt 0x27ee9163088 <line:316:9>
|   |   |-CaseStmt 0x27ee9163138 <line:318:5, line:320:21>
|   |   | |-ConstantExpr 0x27ee9163120 <line:19:33, col:49> 'int'
|   |   | | `-ParenExpr 0x27ee9163100 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x27ee91630e0 <line:14:33, line:19:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x27ee9163090 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x27ee91630b8 <line:19:48> 'int' 5
|   |   | `-IfStmt 0x27ee9163280 <line:319:9, line:320:21>
|   |   |   |-OpaqueValueExpr 0x27ee9163268 <<invalid sloc>> '_Bool'
|   |   |   `-ReturnStmt 0x27ee9163258 <col:13, col:21>
|   |   |     `-UnaryOperator 0x27ee9163240 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x27ee9163218 <col:21> 'int' 1
|   |   |-BreakStmt 0x27ee9163298 <line:321:9>
|   |   |-CaseStmt 0x27ee9163348 <line:323:5, line:327:9>
|   |   | |-ConstantExpr 0x27ee9163330 <line:22:33, col:49> 'int'
|   |   | | `-ParenExpr 0x27ee9163310 <col:33, col:49> 'int'
|   |   | |   `-BinaryOperator 0x27ee91632f0 <line:14:33, line:22:48> 'int' '|'
|   |   | |     |-IntegerLiteral 0x27ee91632a0 <line:14:33> 'int' 65536
|   |   | |     `-IntegerLiteral 0x27ee91632c8 <line:22:48> 'int' 8
|   |   | `-IfStmt 0x27ee9163448 <line:324:9, line:327:9>
|   |   |   |-UnaryOperator 0x27ee91633a8 <line:324:13, col:14> 'int' prefix '!' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x27ee9163390 <col:14> 'const char *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x27ee9163370 <col:14> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |   |   `-CompoundStmt 0x27ee9163430 <col:22, line:327:9>
|   |   |     `-ReturnStmt 0x27ee9163420 <line:326:13, col:21>
|   |   |       `-UnaryOperator 0x27ee9163408 <col:20, col:21> 'int' prefix '-'
|   |   |         `-IntegerLiteral 0x27ee91633e0 <col:21> 'int' 1
|   |   |-IfStmt 0x27ee916c298 <line:328:9, line:339:9> has_else
|   |   | |-BinaryOperator 0x27ee91638a0 <line:328:13, col:44> 'int' '=='
|   |   | | |-CallExpr 0x27ee91637e0 <col:13, col:39> 'int'
|   |   | | | |-ImplicitCastExpr 0x27ee91637c8 <col:13> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x27ee9163690 <col:13> 'int (const char *, const char *, unsigned long long)' Function 0x27ee91634a0 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   | | | |-ImplicitCastExpr 0x27ee9163818 <col:21> 'const char *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x27ee91636c8 <col:21> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |   | | | |-ImplicitCastExpr 0x27ee9163848 <col:29> 'const char *' <NoOp>
|   |   | | | | `-ImplicitCastExpr 0x27ee9163830 <col:29> 'char *' <ArrayToPointerDecay>
|   |   | | | |   `-StringLiteral 0x27ee9163728 <col:29> 'char [6]' lvalue "ASCII"
|   |   | | | `-ImplicitCastExpr 0x27ee9163860 <col:38> 'unsigned long long' <IntegralCast>
|   |   | | |   `-IntegerLiteral 0x27ee9163748 <col:38> 'int' 5
|   |   | | `-IntegerLiteral 0x27ee9163878 <col:44> 'int' 0
|   |   | |-BinaryOperator 0x27ee9163950 <line:329:13, line:33:33> 'int' '='
|   |   | | |-MemberExpr 0x27ee91638f8 <line:329:13, col:18> 'int' lvalue ->format 0x27ee9153588
|   |   | | | `-ImplicitCastExpr 0x27ee91638e0 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x27ee91638c0 <col:13> 'tag_exp_arg *' lvalue Var 0x27ee9164938 'arg' 'tag_exp_arg *'
|   |   | | `-IntegerLiteral 0x27ee9163928 <line:33:33> 'int' 1
|   |   | `-IfStmt 0x27ee916c270 <line:330:14, line:339:9> has_else
|   |   |   |-BinaryOperator 0x27ee9163b00 <line:330:18, col:48> 'int' '=='
|   |   |   | |-CallExpr 0x27ee9163a40 <col:18, col:43> 'int'
|   |   |   | | |-ImplicitCastExpr 0x27ee9163a28 <col:18> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | | | `-DeclRefExpr 0x27ee9163970 <col:18> 'int (const char *, const char *, unsigned long long)' Function 0x27ee91634a0 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   |   | | |-ImplicitCastExpr 0x27ee9163a78 <col:26> 'const char *' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x27ee9163990 <col:26> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |   |   | | |-ImplicitCastExpr 0x27ee9163aa8 <col:34> 'const char *' <NoOp>
|   |   |   | | | `-ImplicitCastExpr 0x27ee9163a90 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |   | | |   `-StringLiteral 0x27ee91639b0 <col:34> 'char [5]' lvalue "UTF8"
|   |   |   | | `-ImplicitCastExpr 0x27ee9163ac0 <col:42> 'unsigned long long' <IntegralCast>
|   |   |   | |   `-IntegerLiteral 0x27ee91639d0 <col:42> 'int' 4
|   |   |   | `-IntegerLiteral 0x27ee9163ad8 <col:48> 'int' 0
|   |   |   |-BinaryOperator 0x27ee9163bb0 <line:331:13, line:35:33> 'int' '='
|   |   |   | |-MemberExpr 0x27ee9163b58 <line:331:13, col:18> 'int' lvalue ->format 0x27ee9153588
|   |   |   | | `-ImplicitCastExpr 0x27ee9163b40 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x27ee9163b20 <col:13> 'tag_exp_arg *' lvalue Var 0x27ee9164938 'arg' 'tag_exp_arg *'
|   |   |   | `-IntegerLiteral 0x27ee9163b88 <line:35:33> 'int' 2
|   |   |   `-IfStmt 0x27ee916c248 <line:332:14, line:339:9> has_else
|   |   |     |-BinaryOperator 0x27ee916be30 <line:332:18, col:47> 'int' '=='
|   |   |     | |-CallExpr 0x27ee916bd70 <col:18, col:42> 'int'
|   |   |     | | |-ImplicitCastExpr 0x27ee916bd58 <col:18> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   |     | | | `-DeclRefExpr 0x27ee9163bd0 <col:18> 'int (const char *, const char *, unsigned long long)' Function 0x27ee91634a0 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   |     | | |-ImplicitCastExpr 0x27ee916bda8 <col:26> 'const char *' <LValueToRValue>
|   |   |     | | | `-DeclRefExpr 0x27ee9163bf0 <col:26> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |   |     | | |-ImplicitCastExpr 0x27ee916bdd8 <col:34> 'const char *' <NoOp>
|   |   |     | | | `-ImplicitCastExpr 0x27ee916bdc0 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |     | | |   `-StringLiteral 0x27ee916bce0 <col:34> 'char [4]' lvalue "HEX"
|   |   |     | | `-ImplicitCastExpr 0x27ee916bdf0 <col:41> 'unsigned long long' <IntegralCast>
|   |   |     | |   `-IntegerLiteral 0x27ee916bd00 <col:41> 'int' 3
|   |   |     | `-IntegerLiteral 0x27ee916be08 <col:47> 'int' 0
|   |   |     |-BinaryOperator 0x27ee916bee0 <line:333:13, line:37:33> 'int' '='
|   |   |     | |-MemberExpr 0x27ee916be88 <line:333:13, col:18> 'int' lvalue ->format 0x27ee9153588
|   |   |     | | `-ImplicitCastExpr 0x27ee916be70 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |     | |   `-DeclRefExpr 0x27ee916be50 <col:13> 'tag_exp_arg *' lvalue Var 0x27ee9164938 'arg' 'tag_exp_arg *'
|   |   |     | `-IntegerLiteral 0x27ee916beb8 <line:37:33> 'int' 3
|   |   |     `-IfStmt 0x27ee916c220 <line:334:14, line:339:9> has_else
|   |   |       |-BinaryOperator 0x27ee916c0c8 <line:334:18, col:51> 'int' '=='
|   |   |       | |-CallExpr 0x27ee916c008 <col:18, col:46> 'int'
|   |   |       | | |-ImplicitCastExpr 0x27ee916bff0 <col:18> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | | `-DeclRefExpr 0x27ee916bf00 <col:18> 'int (const char *, const char *, unsigned long long)' Function 0x27ee91634a0 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |   |       | | |-ImplicitCastExpr 0x27ee916c040 <col:26> 'const char *' <LValueToRValue>
|   |   |       | | | `-DeclRefExpr 0x27ee916bf20 <col:26> 'const char *' lvalue Var 0x27ee9166d10 'vstart' 'const char *'
|   |   |       | | |-ImplicitCastExpr 0x27ee916c070 <col:34> 'const char *' <NoOp>
|   |   |       | | | `-ImplicitCastExpr 0x27ee916c058 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |       | | |   `-StringLiteral 0x27ee916bf78 <col:34> 'char [8]' lvalue "BITLIST"
|   |   |       | | `-ImplicitCastExpr 0x27ee916c088 <col:45> 'unsigned long long' <IntegralCast>
|   |   |       | |   `-IntegerLiteral 0x27ee916bf98 <col:45> 'int' 7
|   |   |       | `-IntegerLiteral 0x27ee916c0a0 <col:51> 'int' 0
|   |   |       |-BinaryOperator 0x27ee916c178 <line:335:13, line:39:33> 'int' '='
|   |   |       | |-MemberExpr 0x27ee916c120 <line:335:13, col:18> 'int' lvalue ->format 0x27ee9153588
|   |   |       | | `-ImplicitCastExpr 0x27ee916c108 <col:13> 'tag_exp_arg *' <LValueToRValue>
|   |   |       | |   `-DeclRefExpr 0x27ee916c0e8 <col:13> 'tag_exp_arg *' lvalue Var 0x27ee9164938 'arg' 'tag_exp_arg *'
|   |   |       | `-IntegerLiteral 0x27ee916c150 <line:39:33> 'int' 4
|   |   |       `-CompoundStmt 0x27ee916c208 <line:336:14, line:339:9>
|   |   |         `-ReturnStmt 0x27ee916c1f8 <line:338:13, col:21>
|   |   |           `-UnaryOperator 0x27ee916c1e0 <col:20, col:21> 'int' prefix '-'
|   |   |             `-IntegerLiteral 0x27ee916c1b8 <col:21> 'int' 1
|   |   `-BreakStmt 0x27ee916c2c0 <line:340:9>
|   `-ReturnStmt 0x27ee916c388 <line:344:5, col:12>
|     `-IntegerLiteral 0x27ee916c360 <col:12> 'int' 1
|-FunctionDecl 0x27ee91634a0 <line:328:13> col:13 implicit used strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x27ee9163540 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x27ee91635a8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x27ee9163610 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x27ee916c6b8 prev 0x27ee914fc00 <line:348:1, line:401:1> line:348:12 used parse_tagging 'int (const char *, int, int *, int *)' static
| |-ParmVarDecl 0x27ee916c428 <col:26, col:38> col:38 used vstart 'const char *'
| |-ParmVarDecl 0x27ee916c4a8 <col:46, col:50> col:50 used vlen 'int'
| |-ParmVarDecl 0x27ee916c528 <col:56, col:61> col:61 used ptag 'int *'
| |-ParmVarDecl 0x27ee916c5a8 <col:67, col:72> col:72 used pclass 'int *'
| `-CompoundStmt 0x27ee916ada0 <line:349:1, line:401:1>
|   |-DeclStmt 0x27ee916c880 <line:350:5, col:17>
|   | `-VarDecl 0x27ee916c818 <col:5, col:16> col:10 used erch 'char [2]'
|   |-DeclStmt 0x27ee916c918 <line:351:5, col:17>
|   | `-VarDecl 0x27ee916c8b0 <col:5, col:10> col:10 used tag_num 'long'
|   |-DeclStmt 0x27ee916c9b0 <line:352:5, col:15>
|   | `-VarDecl 0x27ee916c948 <col:5, col:11> col:11 used eptr 'char *'
|   |-IfStmt 0x27ee916ca50 <line:353:5, line:354:16>
|   | |-UnaryOperator 0x27ee916ca00 <line:353:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x27ee916c9e8 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee916c9c8 <col:10> 'const char *' lvalue ParmVar 0x27ee916c428 'vstart' 'const char *'
|   | `-ReturnStmt 0x27ee916ca40 <line:354:9, col:16>
|   |   `-IntegerLiteral 0x27ee916ca18 <col:16> 'int' 0
|   |-BinaryOperator 0x27ee9167eb8 <line:355:5, col:40> 'long' '='
|   | |-DeclRefExpr 0x27ee916ca68 <col:5> 'long' lvalue Var 0x27ee916c8b0 'tag_num' 'long'
|   | `-ImplicitCastExpr 0x27ee9167ea0 <col:15, col:40> 'long' <IntegralCast>
|   |   `-CallExpr 0x27ee9167e50 <col:15, col:40> 'unsigned long'
|   |     |-ImplicitCastExpr 0x27ee9167e38 <col:15> 'unsigned long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x27ee9167d20 <col:15> 'unsigned long (const char *, char **, int)' Function 0x27ee916cb10 'strtoul' 'unsigned long (const char *, char **, int)'
|   |     |-ImplicitCastExpr 0x27ee9167e88 <col:23> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x27ee9167d58 <col:23> 'const char *' lvalue ParmVar 0x27ee916c428 'vstart' 'const char *'
|   |     |-UnaryOperator 0x27ee9167db0 <col:31, col:32> 'char **' prefix '&' cannot overflow
|   |     | `-DeclRefExpr 0x27ee9167d78 <col:32> 'char *' lvalue Var 0x27ee916c948 'eptr' 'char *'
|   |     `-IntegerLiteral 0x27ee9167dc8 <col:38> 'int' 10
|   |-IfStmt 0x27ee9168158 <line:357:5, line:358:16>
|   | |-BinaryOperator 0x27ee9168100 <line:357:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x27ee9167fc0 <col:9, col:18> 'int' '&&'
|   | | | |-ImplicitCastExpr 0x27ee9167f78 <col:9> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x27ee9167ed8 <col:9> 'char *' lvalue Var 0x27ee916c948 'eptr' 'char *'
|   | | | `-ImplicitCastExpr 0x27ee9167fa8 <col:17, col:18> 'int' <IntegralCast>
|   | | |   `-ImplicitCastExpr 0x27ee9167f90 <col:17, col:18> 'char' <LValueToRValue>
|   | | |     `-UnaryOperator 0x27ee9167f60 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | | |       `-ImplicitCastExpr 0x27ee9167f48 <col:18> 'char *' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x27ee9167f28 <col:18> 'char *' lvalue Var 0x27ee916c948 'eptr' 'char *'
|   | | `-ParenExpr 0x27ee91680e0 <col:26, col:47> 'int'
|   | |   `-BinaryOperator 0x27ee91680c0 <col:27, col:43> 'int' '>'
|   | |     |-ImplicitCastExpr 0x27ee9168090 <col:27> 'char *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x27ee9167fe0 <col:27> 'char *' lvalue Var 0x27ee916c948 'eptr' 'char *'
|   | |     `-ImplicitCastExpr 0x27ee91680a8 <col:34, col:43> 'char *' <BitCast>
|   | |       `-BinaryOperator 0x27ee9168070 <col:34, col:43> 'const char *' '+'
|   | |         |-ImplicitCastExpr 0x27ee9168040 <col:34> 'const char *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x27ee9168000 <col:34> 'const char *' lvalue ParmVar 0x27ee916c428 'vstart' 'const char *'
|   | |         `-ImplicitCastExpr 0x27ee9168058 <col:43> 'int' <LValueToRValue>
|   | |           `-DeclRefExpr 0x27ee9168020 <col:43> 'int' lvalue ParmVar 0x27ee916c4a8 'vlen' 'int'
|   | `-ReturnStmt 0x27ee9168148 <line:358:9, col:16>
|   |   `-IntegerLiteral 0x27ee9168120 <col:16> 'int' 0
|   |-IfStmt 0x27ee9168278 <line:359:5, line:362:5>
|   | |-BinaryOperator 0x27ee91681e8 <line:359:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x27ee91681b8 <col:9> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x27ee9168170 <col:9> 'long' lvalue Var 0x27ee916c8b0 'tag_num' 'long'
|   | | `-ImplicitCastExpr 0x27ee91681d0 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x27ee9168190 <col:19> 'int' 0
|   | `-CompoundStmt 0x27ee9168260 <col:22, line:362:5>
|   |   `-ReturnStmt 0x27ee9168250 <line:361:9, col:16>
|   |     `-IntegerLiteral 0x27ee9168228 <col:16> 'int' 0
|   |-BinaryOperator 0x27ee9168330 <line:363:5, col:13> 'int' '='
|   | |-UnaryOperator 0x27ee91682c8 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x27ee91682b0 <col:6> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee9168290 <col:6> 'int *' lvalue ParmVar 0x27ee916c528 'ptag' 'int *'
|   | `-ImplicitCastExpr 0x27ee9168318 <col:13> 'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x27ee9168300 <col:13> 'long' <LValueToRValue>
|   |     `-DeclRefExpr 0x27ee91682e0 <col:13> 'long' lvalue Var 0x27ee916c8b0 'tag_num' 'long'
|   |-IfStmt 0x27ee91684d0 <line:365:5, line:368:16> has_else
|   | |-ImplicitCastExpr 0x27ee9168370 <line:365:9> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x27ee9168350 <col:9> 'char *' lvalue Var 0x27ee916c948 'eptr' 'char *'
|   | |-CompoundAssignOperator 0x27ee9168438 <line:366:9, col:24> 'int' '-=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | | |-DeclRefExpr 0x27ee9168388 <col:9> 'int' lvalue ParmVar 0x27ee916c4a8 'vlen' 'int'
|   | | `-BinaryOperator 0x27ee9168418 <col:17, col:24> 'long long' '-'
|   | |   |-ImplicitCastExpr 0x27ee91683e8 <col:17> 'char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x27ee91683a8 <col:17> 'char *' lvalue Var 0x27ee916c948 'eptr' 'char *'
|   | |   `-ImplicitCastExpr 0x27ee9168400 <col:24> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x27ee91683c8 <col:24> 'const char *' lvalue ParmVar 0x27ee916c428 'vstart' 'const char *'
|   | `-BinaryOperator 0x27ee91684b0 <line:368:9, col:16> 'int' '='
|   |   |-DeclRefExpr 0x27ee9168468 <col:9> 'int' lvalue ParmVar 0x27ee916c4a8 'vlen' 'int'
|   |   `-IntegerLiteral 0x27ee9168488 <col:16> 'int' 0
|   |-IfStmt 0x27ee916ad40 <line:369:5, line:397:9> has_else
|   | |-ImplicitCastExpr 0x27ee9168518 <line:369:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x27ee91684f8 <col:9> 'int' lvalue ParmVar 0x27ee916c4a8 'vlen' 'int'
|   | |-CompoundStmt 0x27ee916acd0 <col:15, line:396:5>
|   | | `-SwitchStmt 0x27ee91685b0 <line:370:9, line:395:9>
|   | |   |-ImplicitCastExpr 0x27ee9168598 <line:370:17, col:18> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x27ee9168580 <col:17, col:18> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x27ee9168568 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x27ee9168550 <col:18> 'char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x27ee9168530 <col:18> 'char *' lvalue Var 0x27ee916c948 'eptr' 'char *'
|   | |   `-CompoundStmt 0x27ee9168c30 <col:24, line:395:9>
|   | |     |-CaseStmt 0x27ee9168600 <line:372:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x27ee91685e8 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x27ee91685d0 <col:14> 'int' 85
|   | |     | `-NullStmt 0x27ee9168678 <<invalid sloc>>
|   | |     |-BreakStmt 0x27ee9168680 <line:374:13>
|   | |     |-CaseStmt 0x27ee91686b8 <line:376:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x27ee91686a0 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x27ee9168688 <col:14> 'int' 65
|   | |     | `-NullStmt 0x27ee9168730 <<invalid sloc>>
|   | |     |-BreakStmt 0x27ee9168738 <line:378:13>
|   | |     |-CaseStmt 0x27ee9168770 <line:380:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x27ee9168758 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x27ee9168740 <col:14> 'int' 80
|   | |     | `-NullStmt 0x27ee91687e8 <<invalid sloc>>
|   | |     |-BreakStmt 0x27ee91687f0 <line:382:13>
|   | |     |-CaseStmt 0x27ee9168828 <line:384:9, <invalid sloc>>
|   | |     | |-ConstantExpr 0x27ee9168810 <col:14> 'int'
|   | |     | | `-CharacterLiteral 0x27ee91687f8 <col:14> 'int' 67
|   | |     | `-NullStmt 0x27ee91688a0 <<invalid sloc>>
|   | |     |-BreakStmt 0x27ee91688a8 <line:386:13>
|   | |     |-DefaultStmt 0x27ee91689d0 <line:388:9, line:389:24>
|   | |     | `-BinaryOperator 0x27ee91689b0 <col:13, col:24> 'char' '='
|   | |     |   |-ArraySubscriptExpr 0x27ee9168928 <col:13, col:19> 'char' lvalue
|   | |     |   | |-ImplicitCastExpr 0x27ee9168910 <col:13> 'char *' <ArrayToPointerDecay>
|   | |     |   | | `-DeclRefExpr 0x27ee91688b0 <col:13> 'char [2]' lvalue Var 0x27ee916c818 'erch' 'char [2]'
|   | |     |   | `-IntegerLiteral 0x27ee91688e8 <col:18> 'int' 0
|   | |     |   `-ImplicitCastExpr 0x27ee9168998 <col:23, col:24> 'char' <LValueToRValue>
|   | |     |     `-UnaryOperator 0x27ee9168980 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
|   | |     |       `-ImplicitCastExpr 0x27ee9168968 <col:24> 'char *' <LValueToRValue>
|   | |     |         `-DeclRefExpr 0x27ee9168948 <col:24> 'char *' lvalue Var 0x27ee916c948 'eptr' 'char *'
|   | |     |-BinaryOperator 0x27ee9168ab0 <line:390:13, col:23> 'char' '='
|   | |     | |-ArraySubscriptExpr 0x27ee9168a50 <col:13, col:19> 'char' lvalue
|   | |     | | |-ImplicitCastExpr 0x27ee9168a38 <col:13> 'char *' <ArrayToPointerDecay>
|   | |     | | | `-DeclRefExpr 0x27ee91689f0 <col:13> 'char [2]' lvalue Var 0x27ee916c818 'erch' 'char [2]'
|   | |     | | `-IntegerLiteral 0x27ee9168a10 <col:18> 'int' 1
|   | |     | `-ImplicitCastExpr 0x27ee9168a98 <col:23> 'char' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x27ee9168a70 <col:23> 'int' 0
|   | |     |-CallExpr 0x27ee9168b90 <line:392:13, col:48> 'int'
|   | |     | |-ImplicitCastExpr 0x27ee9168b78 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   | |     | | `-DeclRefExpr 0x27ee9168af0 <col:13> 'int ()' Function 0x27ee91678b0 'ERR_add_error_data' 'int ()'
|   | |     | |-IntegerLiteral 0x27ee9168b10 <col:32> 'int' 2
|   | |     | |-ImplicitCastExpr 0x27ee9168bc8 <col:35> 'char *' <ArrayToPointerDecay>
|   | |     | | `-StringLiteral 0x27ee9168b38 <col:35> 'char [6]' lvalue "Char="
|   | |     | `-ImplicitCastExpr 0x27ee9168be0 <col:44> 'char *' <ArrayToPointerDecay>
|   | |     |   `-DeclRefExpr 0x27ee9168b58 <col:44> 'char [2]' lvalue Var 0x27ee916c818 'erch' 'char [2]'
|   | |     `-ReturnStmt 0x27ee9168c20 <line:393:13, col:20>
|   | |       `-IntegerLiteral 0x27ee9168bf8 <col:20> 'int' 0
|   | `-NullStmt 0x27ee916ad38 <line:397:9>
|   `-ReturnStmt 0x27ee916ad90 <line:399:5, col:12>
|     `-IntegerLiteral 0x27ee916ad68 <col:12> 'int' 1
|-FunctionDecl 0x27ee916cb10 <line:355:15> col:15 implicit used strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x27ee916cbb0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x27ee916cc18 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x27ee9167ca0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x27ee916b0d8 <line:405:1, line:464:1> line:405:19 invalid asn1_multi 'int *(int, const char *, int *, int, int *)' static
| |-ParmVarDecl 0x27ee916ae20 <col:30, col:34> col:34 used utype 'int'
| |-ParmVarDecl 0x27ee916aea0 <col:41, col:53> col:53 used section 'const char *'
| |-ParmVarDecl 0x27ee916af20 <col:62, col:74> col:74 invalid cnf 'int *'
| |-ParmVarDecl 0x27ee916afa0 <line:406:30, col:34> col:34 used depth 'int'
| |-ParmVarDecl 0x27ee916b020 <col:41, col:46> col:46 used perr 'int *'
| `-CompoundStmt 0x27ee91709c8 <line:407:1, line:464:1>
|   |-DeclStmt 0x27ee916b368 <line:411:5, col:30>
|   | `-VarDecl 0x27ee916b300 <col:5, col:20> col:20 used der 'unsigned char *'
|   |-DeclStmt 0x27ee916b400 <line:412:5, col:15>
|   | `-VarDecl 0x27ee916b398 <col:5, col:9> col:9 used derlen 'int'
|   |-DeclStmt 0x27ee916b498 <line:413:5, col:10>
|   | `-VarDecl 0x27ee916b430 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x27ee916b678 <line:415:5, line:416:14>
|   | |-OpaqueValueExpr 0x27ee916b660 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x27ee916b648 <col:9, col:14> 'bad' 0x27ee916b5f8
|   |-IfStmt 0x27ee916ff18 <line:417:5, line:432:5>
|   | |-ImplicitCastExpr 0x27ee916b6c8 <line:417:9> 'const char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x27ee916b690 <col:9> 'const char *' lvalue ParmVar 0x27ee916aea0 'section' 'const char *'
|   | `-CompoundStmt 0x27ee916fef8 <col:18, line:432:5>
|   |   |-IfStmt 0x27ee916b710 <line:418:9, line:419:18>
|   |   | |-OpaqueValueExpr 0x27ee916b6f8 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x27ee916b6e0 <col:13, col:18> 'bad' 0x27ee916b5f8
|   |   `-IfStmt 0x27ee916b8e0 <line:421:9, line:422:18>
|   |     |-OpaqueValueExpr 0x27ee916b8c8 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x27ee916b8b0 <col:13, col:18> 'bad' 0x27ee916b5f8
|   |-IfStmt 0x27ee9170300 <line:443:5, line:444:14>
|   | |-BinaryOperator 0x27ee91702c8 <line:443:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x27ee91702b0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x27ee9170268 <col:9> 'int' lvalue Var 0x27ee916b398 'derlen' 'int'
|   | | `-IntegerLiteral 0x27ee9170288 <col:18> 'int' 0
|   | `-GotoStmt 0x27ee91702e8 <line:444:9, col:14> 'bad' 0x27ee916b5f8
|   |-IfStmt 0x27ee9170490 <line:445:5, line:446:14>
|   | |-OpaqueValueExpr 0x27ee9170478 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x27ee9170460 <col:9, col:14> 'bad' 0x27ee916b5f8
|   |-IfStmt 0x27ee9170660 <line:447:5, line:448:14>
|   | |-OpaqueValueExpr 0x27ee9170648 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x27ee9170630 <col:9, col:14> 'bad' 0x27ee916b5f8
|   `-LabelStmt 0x27ee9170790 <line:456:2, line:458:21> 'bad'
|     `-CallExpr 0x27ee9170750 <col:5, col:21> 'int'
|       |-ImplicitCastExpr 0x27ee9170738 <col:5> 'int (*)()' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x27ee91706f8 <col:5> 'int ()' Function 0x27ee9164360 'OPENSSL_free' 'int ()'
|       `-ImplicitCastExpr 0x27ee9170778 <col:18> 'unsigned char *' <LValueToRValue>
|         `-DeclRefExpr 0x27ee9170718 <col:18> 'unsigned char *' lvalue Var 0x27ee916b300 'der' 'unsigned char *'
|-FunctionDecl 0x27ee9170e18 prev 0x27ee914f820 <line:466:1, line:500:1> line:466:12 used append_exp 'int (tag_exp_arg *, int, int, int, int, int)' static
| |-ParmVarDecl 0x27ee9170a30 <col:23, col:36> col:36 used arg 'tag_exp_arg *'
| |-ParmVarDecl 0x27ee9170ab0 <col:41, col:45> col:45 used exp_tag 'int'
| |-ParmVarDecl 0x27ee9170b30 <col:54, col:58> col:58 used exp_class 'int'
| |-ParmVarDecl 0x27ee9170bb0 <line:467:23, col:27> col:27 used exp_constructed 'int'
| |-ParmVarDecl 0x27ee9170c30 <col:44, col:48> col:48 used exp_pad 'int'
| |-ParmVarDecl 0x27ee9170cb0 <col:57, col:61> col:61 used imp_ok 'int'
| `-CompoundStmt 0x27ee9171c80 <line:468:1, line:500:1>
|   |-DeclStmt 0x27ee9170f60 <line:469:5, col:26>
|   | `-VarDecl 0x27ee9170ef8 <col:5, col:19> col:19 used exp_tmp 'tag_exp_type *'
|   |-IfStmt 0x27ee9171158 <line:471:5, line:474:5>
|   | |-BinaryOperator 0x27ee91710c8 <line:471:9, col:34> 'int' '&&'
|   | | |-ParenExpr 0x27ee9171058 <col:9, col:28> 'int'
|   | | | `-BinaryOperator 0x27ee9171038 <col:10, col:27> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x27ee9171020 <col:10, col:15> 'int' <LValueToRValue>
|   | | |   | `-MemberExpr 0x27ee9170fb0 <col:10, col:15> 'int' lvalue ->imp_tag 0x27ee9153438
|   | | |   |   `-ImplicitCastExpr 0x27ee9170f98 <col:10> 'tag_exp_arg *' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x27ee9170f78 <col:10> 'tag_exp_arg *' lvalue ParmVar 0x27ee9170a30 'arg' 'tag_exp_arg *'
|   | | |   `-UnaryOperator 0x27ee9171008 <col:26, col:27> 'int' prefix '-'
|   | | |     `-IntegerLiteral 0x27ee9170fe0 <col:27> 'int' 1
|   | | `-UnaryOperator 0x27ee91710b0 <col:33, col:34> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x27ee9171098 <col:34> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x27ee9171078 <col:34> 'int' lvalue ParmVar 0x27ee9170cb0 'imp_ok' 'int'
|   | `-CompoundStmt 0x27ee9171140 <col:42, line:474:5>
|   |   `-ReturnStmt 0x27ee9171130 <line:473:9, col:16>
|   |     `-IntegerLiteral 0x27ee9171108 <col:16> 'int' 0
|   |-IfStmt 0x27ee91712a8 <line:476:5, line:479:5>
|   | |-BinaryOperator 0x27ee9171218 <line:476:9, line:26:33> 'int' '=='
|   | | |-ImplicitCastExpr 0x27ee9171200 <line:476:9, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x27ee91711a8 <col:9, col:14> 'int' lvalue ->exp_count 0x27ee9153828
|   | | |   `-ImplicitCastExpr 0x27ee9171190 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x27ee9171170 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x27ee9170a30 'arg' 'tag_exp_arg *'
|   | | `-IntegerLiteral 0x27ee91711d8 <line:26:33> 'int' 20
|   | `-CompoundStmt 0x27ee9171290 <line:476:46, line:479:5>
|   |   `-ReturnStmt 0x27ee9171280 <line:478:9, col:16>
|   |     `-IntegerLiteral 0x27ee9171258 <col:16> 'int' 0
|   |-BinaryOperator 0x27ee9171430 <line:481:5, col:46> 'tag_exp_type *' '='
|   | |-DeclRefExpr 0x27ee91712c0 <col:5> 'tag_exp_type *' lvalue Var 0x27ee9170ef8 'exp_tmp' 'tag_exp_type *'
|   | `-UnaryOperator 0x27ee9171418 <col:15, col:46> 'tag_exp_type *' prefix '&' cannot overflow
|   |   `-ArraySubscriptExpr 0x27ee91713f8 <col:16, col:46> 'tag_exp_type':'tag_exp_type' lvalue
|   |     |-ImplicitCastExpr 0x27ee91713e0 <col:16, col:21> 'tag_exp_type *' <ArrayToPointerDecay>
|   |     | `-MemberExpr 0x27ee9171330 <col:16, col:21> 'tag_exp_type [20]' lvalue ->exp_list 0x27ee91537b8
|   |     |   `-ImplicitCastExpr 0x27ee9171318 <col:16> 'tag_exp_arg *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x27ee91712f8 <col:16> 'tag_exp_arg *' lvalue ParmVar 0x27ee9170a30 'arg' 'tag_exp_arg *'
|   |     `-UnaryOperator 0x27ee91713c8 <col:30, col:44> 'int' postfix '++'
|   |       `-MemberExpr 0x27ee9171398 <col:30, col:35> 'int' lvalue ->exp_count 0x27ee9153828
|   |         `-ImplicitCastExpr 0x27ee9171380 <col:30> 'tag_exp_arg *' <LValueToRValue>
|   |           `-DeclRefExpr 0x27ee9171360 <col:30> 'tag_exp_arg *' lvalue ParmVar 0x27ee9170a30 'arg' 'tag_exp_arg *'
|   |-IfStmt 0x27ee9171aa0 <line:487:5, line:495:5> has_else
|   | |-BinaryOperator 0x27ee9171510 <line:487:9, col:26> 'int' '!='
|   | | |-ImplicitCastExpr 0x27ee91714f8 <col:9, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x27ee9171488 <col:9, col:14> 'int' lvalue ->imp_tag 0x27ee9153438
|   | | |   `-ImplicitCastExpr 0x27ee9171470 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x27ee9171450 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x27ee9170a30 'arg' 'tag_exp_arg *'
|   | | `-UnaryOperator 0x27ee91714e0 <col:25, col:26> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x27ee91714b8 <col:26> 'int' 1
|   | |-CompoundStmt 0x27ee91718d0 <col:29, line:492:5>
|   | | |-BinaryOperator 0x27ee9171618 <line:488:9, col:33> 'int' '='
|   | | | |-MemberExpr 0x27ee9171568 <col:9, col:18> 'int' lvalue ->exp_tag 0x27ee9153088
|   | | | | `-ImplicitCastExpr 0x27ee9171550 <col:9> 'tag_exp_type *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x27ee9171530 <col:9> 'tag_exp_type *' lvalue Var 0x27ee9170ef8 'exp_tmp' 'tag_exp_type *'
|   | | | `-ImplicitCastExpr 0x27ee9171600 <col:28, col:33> 'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x27ee91715d0 <col:28, col:33> 'int' lvalue ->imp_tag 0x27ee9153438
|   | | |     `-ImplicitCastExpr 0x27ee91715b8 <col:28> 'tag_exp_arg *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x27ee9171598 <col:28> 'tag_exp_arg *' lvalue ParmVar 0x27ee9170a30 'arg' 'tag_exp_arg *'
|   | | |-BinaryOperator 0x27ee9171720 <line:489:9, col:35> 'int' '='
|   | | | |-MemberExpr 0x27ee9171670 <col:9, col:18> 'int' lvalue ->exp_class 0x27ee91530f8
|   | | | | `-ImplicitCastExpr 0x27ee9171658 <col:9> 'tag_exp_type *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x27ee9171638 <col:9> 'tag_exp_type *' lvalue Var 0x27ee9170ef8 'exp_tmp' 'tag_exp_type *'
|   | | | `-ImplicitCastExpr 0x27ee9171708 <col:30, col:35> 'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x27ee91716d8 <col:30, col:35> 'int' lvalue ->imp_class 0x27ee91534a8
|   | | |     `-ImplicitCastExpr 0x27ee91716c0 <col:30> 'tag_exp_arg *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x27ee91716a0 <col:30> 'tag_exp_arg *' lvalue ParmVar 0x27ee9170a30 'arg' 'tag_exp_arg *'
|   | | |-BinaryOperator 0x27ee91717e8 <line:490:9, col:25> 'int' '='
|   | | | |-MemberExpr 0x27ee9171778 <col:9, col:14> 'int' lvalue ->imp_tag 0x27ee9153438
|   | | | | `-ImplicitCastExpr 0x27ee9171760 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x27ee9171740 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x27ee9170a30 'arg' 'tag_exp_arg *'
|   | | | `-UnaryOperator 0x27ee91717d0 <col:24, col:25> 'int' prefix '-'
|   | | |   `-IntegerLiteral 0x27ee91717a8 <col:25> 'int' 1
|   | | `-BinaryOperator 0x27ee91718b0 <line:491:9, col:27> 'int' '='
|   | |   |-MemberExpr 0x27ee9171840 <col:9, col:14> 'int' lvalue ->imp_class 0x27ee91534a8
|   | |   | `-ImplicitCastExpr 0x27ee9171828 <col:9> 'tag_exp_arg *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x27ee9171808 <col:9> 'tag_exp_arg *' lvalue ParmVar 0x27ee9170a30 'arg' 'tag_exp_arg *'
|   | |   `-UnaryOperator 0x27ee9171898 <col:26, col:27> 'int' prefix '-'
|   | |     `-IntegerLiteral 0x27ee9171870 <col:27> 'int' 1
|   | `-CompoundStmt 0x27ee9171a80 <line:492:12, line:495:5>
|   |   |-BinaryOperator 0x27ee91719a0 <line:493:9, col:28> 'int' '='
|   |   | |-MemberExpr 0x27ee9171938 <col:9, col:18> 'int' lvalue ->exp_tag 0x27ee9153088
|   |   | | `-ImplicitCastExpr 0x27ee9171920 <col:9> 'tag_exp_type *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x27ee9171900 <col:9> 'tag_exp_type *' lvalue Var 0x27ee9170ef8 'exp_tmp' 'tag_exp_type *'
|   |   | `-ImplicitCastExpr 0x27ee9171988 <col:28> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x27ee9171968 <col:28> 'int' lvalue ParmVar 0x27ee9170ab0 'exp_tag' 'int'
|   |   `-BinaryOperator 0x27ee9171a60 <line:494:9, col:30> 'int' '='
|   |     |-MemberExpr 0x27ee91719f8 <col:9, col:18> 'int' lvalue ->exp_class 0x27ee91530f8
|   |     | `-ImplicitCastExpr 0x27ee91719e0 <col:9> 'tag_exp_type *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x27ee91719c0 <col:9> 'tag_exp_type *' lvalue Var 0x27ee9170ef8 'exp_tmp' 'tag_exp_type *'
|   |     `-ImplicitCastExpr 0x27ee9171a48 <col:30> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x27ee9171a28 <col:30> 'int' lvalue ParmVar 0x27ee9170b30 'exp_class' 'int'
|   |-BinaryOperator 0x27ee9171b68 <line:496:5, col:32> 'int' '='
|   | |-MemberExpr 0x27ee9171b00 <col:5, col:14> 'int' lvalue ->exp_constructed 0x27ee9153168
|   | | `-ImplicitCastExpr 0x27ee9171ae8 <col:5> 'tag_exp_type *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee9171ac8 <col:5> 'tag_exp_type *' lvalue Var 0x27ee9170ef8 'exp_tmp' 'tag_exp_type *'
|   | `-ImplicitCastExpr 0x27ee9171b50 <col:32> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x27ee9171b30 <col:32> 'int' lvalue ParmVar 0x27ee9170bb0 'exp_constructed' 'int'
|   |-BinaryOperator 0x27ee9171c28 <line:497:5, col:24> 'int' '='
|   | |-MemberExpr 0x27ee9171bc0 <col:5, col:14> 'int' lvalue ->exp_pad 0x27ee91531d8
|   | | `-ImplicitCastExpr 0x27ee9171ba8 <col:5> 'tag_exp_type *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee9171b88 <col:5> 'tag_exp_type *' lvalue Var 0x27ee9170ef8 'exp_tmp' 'tag_exp_type *'
|   | `-ImplicitCastExpr 0x27ee9171c10 <col:24> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x27ee9171bf0 <col:24> 'int' lvalue ParmVar 0x27ee9170c30 'exp_pad' 'int'
|   `-ReturnStmt 0x27ee9171c70 <line:499:5, col:12>
|     `-IntegerLiteral 0x27ee9171c48 <col:12> 'int' 1
|-FunctionDecl 0x27ee9172ea0 prev 0x27ee9157620 <line:502:1, line:576:1> line:502:12 used asn1_str2tag 'int (const char *, int)' static
| |-ParmVarDecl 0x27ee9172d50 <col:25, col:37> col:37 used tagstr 'const char *'
| |-ParmVarDecl 0x27ee9172dd0 <col:45, col:49> col:49 used len 'int'
| `-CompoundStmt 0x27ee9172470 <line:503:1, line:576:1>
|   |-DeclStmt 0x27ee9172fd0 <line:504:5, col:19>
|   | `-VarDecl 0x27ee9172f68 <col:5, col:18> col:18 used i 'unsigned int'
|   |-DeclStmt 0x27ee91758f8 <line:505:5, line:564:6>
|   | |-VarDecl 0x27ee91730a0 <line:505:5, col:38> col:38 used tntmp 'const struct tag_name_st *' static
|   | `-VarDecl 0x27ee9173198 <col:5, col:50> col:45 used tnst 'const struct tag_name_st []' static
|   |-IfStmt 0x27ee9175c38 <line:566:5, line:567:28>
|   | |-BinaryOperator 0x27ee9175988 <line:566:9, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x27ee9175970 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x27ee9175910 <col:9> 'int' lvalue ParmVar 0x27ee9172dd0 'len' 'int'
|   | | `-UnaryOperator 0x27ee9175958 <col:16, col:17> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x27ee9175930 <col:17> 'int' 1
|   | `-BinaryOperator 0x27ee9175c18 <line:567:9, col:28> 'int' '='
|   |   |-DeclRefExpr 0x27ee91759a8 <col:9> 'int' lvalue ParmVar 0x27ee9172dd0 'len' 'int'
|   |   `-ImplicitCastExpr 0x27ee9175c00 <col:15, col:28> 'int' <IntegralCast>
|   |     `-CallExpr 0x27ee9175bc0 <col:15, col:28> 'unsigned long long'
|   |       |-ImplicitCastExpr 0x27ee9175ba8 <col:15> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x27ee9175b10 <col:15> 'unsigned long long (const char *)' Function 0x27ee9175a00 'strlen' 'unsigned long long (const char *)'
|   |       `-ImplicitCastExpr 0x27ee9175be8 <col:22> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x27ee9175b48 <col:22> 'const char *' lvalue ParmVar 0x27ee9172d50 'tagstr' 'const char *'
|   |-BinaryOperator 0x27ee9175cd8 <line:569:5, col:13> 'const struct tag_name_st *' '='
|   | |-DeclRefExpr 0x27ee9175c50 <col:5> 'const struct tag_name_st *' lvalue Var 0x27ee91730a0 'tntmp' 'const struct tag_name_st *'
|   | `-ImplicitCastExpr 0x27ee9175cc0 <col:13> 'const struct tag_name_st *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x27ee9175c88 <col:13> 'const struct tag_name_st []' lvalue Var 0x27ee9173198 'tnst' 'const struct tag_name_st []'
|   |-ForStmt 0x27ee91723e8 <line:570:5, line:573:5>
|   | |-BinaryOperator 0x27ee9171d40 <line:570:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x27ee9175cf8 <col:10> 'unsigned int' lvalue Var 0x27ee9172f68 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x27ee9175d58 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x27ee9175d30 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x27ee9171f38 <col:17, col:36> 'int' '<'
|   | | |-ImplicitCastExpr 0x27ee9171f08 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x27ee9171d60 <col:17> 'unsigned int' lvalue Var 0x27ee9172f68 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x27ee9171f20 <col:21, col:36> 'unsigned int' <IntegralCast>
|   | |   `-CallExpr 0x27ee9171ec8 <col:21, col:36> 'int'
|   | |     |-ImplicitCastExpr 0x27ee9171eb0 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x27ee9171e70 <col:21> 'int ()' Function 0x27ee9171da8 'OSSL_NELEM' 'int ()'
|   | |     `-ImplicitCastExpr 0x27ee9171ef0 <col:32> 'const struct tag_name_st *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x27ee9171e90 <col:32> 'const struct tag_name_st []' lvalue Var 0x27ee9173198 'tnst' 'const struct tag_name_st []'
|   | |-BinaryOperator 0x27ee9171fc8 <col:39, col:49> 'const struct tag_name_st *' ','
|   | | |-UnaryOperator 0x27ee9171f78 <col:39, col:40> 'unsigned int' postfix '++'
|   | | | `-DeclRefExpr 0x27ee9171f58 <col:39> 'unsigned int' lvalue Var 0x27ee9172f68 'i' 'unsigned int'
|   | | `-UnaryOperator 0x27ee9171fb0 <col:44, col:49> 'const struct tag_name_st *' postfix '++'
|   | |   `-DeclRefExpr 0x27ee9171f90 <col:44> 'const struct tag_name_st *' lvalue Var 0x27ee91730a0 'tntmp' 'const struct tag_name_st *'
|   | `-CompoundStmt 0x27ee91723d0 <col:53, line:573:5>
|   |   `-IfStmt 0x27ee91723b8 <line:571:9, line:572:27>
|   |     |-BinaryOperator 0x27ee9172308 <line:571:13, col:77> 'int' '&&'
|   |     | |-ParenExpr 0x27ee91720c0 <col:13, col:31> 'int'
|   |     | | `-BinaryOperator 0x27ee91720a0 <col:14, col:28> 'int' '=='
|   |     | |   |-ImplicitCastExpr 0x27ee9172070 <col:14> 'int' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x27ee9171fe8 <col:14> 'int' lvalue ParmVar 0x27ee9172dd0 'len' 'int'
|   |     | |   `-ImplicitCastExpr 0x27ee9172088 <col:21, col:28> 'int' <LValueToRValue>
|   |     | |     `-MemberExpr 0x27ee9172040 <col:21, col:28> 'const int' lvalue ->len 0x27ee778d4c8
|   |     | |       `-ImplicitCastExpr 0x27ee9172028 <col:21> 'const struct tag_name_st *' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x27ee9172008 <col:21> 'const struct tag_name_st *' lvalue Var 0x27ee91730a0 'tntmp' 'const struct tag_name_st *'
|   |     | `-ParenExpr 0x27ee91722e8 <col:36, col:77> 'int'
|   |     |   `-BinaryOperator 0x27ee91722c8 <col:37, col:76> 'int' '=='
|   |     |     |-CallExpr 0x27ee9172208 <col:37, col:71> 'int'
|   |     |     | |-ImplicitCastExpr 0x27ee91721f0 <col:37> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   |     |     | | `-DeclRefExpr 0x27ee91720e0 <col:37> 'int (const char *, const char *, unsigned long long)' Function 0x27ee91634a0 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   |     |     | |-ImplicitCastExpr 0x27ee9172240 <col:45, col:52> 'const char *' <LValueToRValue>
|   |     |     | | `-MemberExpr 0x27ee9172138 <col:45, col:52> 'const char *const' lvalue ->strnam 0x27ee778d458
|   |     |     | |   `-ImplicitCastExpr 0x27ee9172120 <col:45> 'const struct tag_name_st *' <LValueToRValue>
|   |     |     | |     `-DeclRefExpr 0x27ee9172100 <col:45> 'const struct tag_name_st *' lvalue Var 0x27ee91730a0 'tntmp' 'const struct tag_name_st *'
|   |     |     | |-ImplicitCastExpr 0x27ee9172258 <col:60> 'const char *' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x27ee9172168 <col:60> 'const char *' lvalue ParmVar 0x27ee9172d50 'tagstr' 'const char *'
|   |     |     | `-ImplicitCastExpr 0x27ee9172288 <col:68> 'unsigned long long' <IntegralCast>
|   |     |     |   `-ImplicitCastExpr 0x27ee9172270 <col:68> 'int' <LValueToRValue>
|   |     |     |     `-DeclRefExpr 0x27ee9172188 <col:68> 'int' lvalue ParmVar 0x27ee9172dd0 'len' 'int'
|   |     |     `-IntegerLiteral 0x27ee91722a0 <col:76> 'int' 0
|   |     `-ReturnStmt 0x27ee91723a8 <line:572:13, col:27>
|   |       `-ImplicitCastExpr 0x27ee9172390 <col:20, col:27> 'int' <LValueToRValue>
|   |         `-MemberExpr 0x27ee9172360 <col:20, col:27> 'const int' lvalue ->tag 0x27ee9152f60
|   |           `-ImplicitCastExpr 0x27ee9172348 <col:20> 'const struct tag_name_st *' <LValueToRValue>
|   |             `-DeclRefExpr 0x27ee9172328 <col:20> 'const struct tag_name_st *' lvalue Var 0x27ee91730a0 'tntmp' 'const struct tag_name_st *'
|   `-ReturnStmt 0x27ee9172460 <line:575:5, col:13>
|     `-UnaryOperator 0x27ee9172448 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x27ee9172420 <col:13> 'int' 1
|-FunctionDecl 0x27ee9175a00 <line:567:15> col:15 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x27ee9175aa0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x27ee91726b8 <line:578:1, line:743:1> line:578:19 invalid asn1_str2type 'int *(const char *, int, int)' static
| |-ParmVarDecl 0x27ee91724c8 <col:33, col:45> col:45 used str 'const char *'
| |-ParmVarDecl 0x27ee9172548 <col:50, col:54> col:54 used format 'int'
| |-ParmVarDecl 0x27ee91725c8 <col:62, col:66> col:66 used utype 'int'
| `-CompoundStmt 0x27ee917a018 <line:579:1, line:743:1>
|   |-DeclStmt 0x27ee9172808 <line:582:5, col:25>
|   | `-VarDecl 0x27ee91727a0 <col:5, col:20> col:20 used rdata 'unsigned char *'
|   |-DeclStmt 0x27ee91728a0 <line:583:5, col:15>
|   | `-VarDecl 0x27ee9172838 <col:5, col:10> col:10 used rdlen 'long'
|   |-DeclStmt 0x27ee9172960 <line:584:5, col:22>
|   | `-VarDecl 0x27ee91728d0 <col:5, col:21> col:9 used no_unused 'int' cinit
|   |   `-IntegerLiteral 0x27ee9172938 <col:21> 'int' 1
|   |-IfStmt 0x27ee9172a18 <line:586:5, line:589:5>
|   | |-OpaqueValueExpr 0x27ee9172a00 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x27ee91729f0 <line:586:43, line:589:5>
|   |-IfStmt 0x27ee9172b40 <line:591:5, line:592:15>
|   | |-UnaryOperator 0x27ee9172a68 <line:591:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x27ee9172a50 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee9172a30 <col:10> 'const char *' lvalue ParmVar 0x27ee91724c8 'str' 'const char *'
|   | `-BinaryOperator 0x27ee9172b20 <line:592:9, col:15> 'const char *' '='
|   |   |-DeclRefExpr 0x27ee9172a80 <col:9> 'const char *' lvalue ParmVar 0x27ee91724c8 'str' 'const char *'
|   |   `-ImplicitCastExpr 0x27ee9172b08 <col:15> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x27ee9172af0 <col:15> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x27ee9172ad8 <col:15> 'char [1]' lvalue ""
|   |-SwitchStmt 0x27ee9172b90 <line:594:5, line:731:5>
|   | |-ImplicitCastExpr 0x27ee9172b78 <line:594:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x27ee9172b58 <col:13> 'int' lvalue ParmVar 0x27ee91725c8 'utype' 'int'
|   | `-CompoundStmt 0x27ee9179dc0 <col:20, line:731:5>
|   |   |-IfStmt 0x27ee9172d28 <line:597:9, line:600:9>
|   |   | |-BinaryOperator 0x27ee9172c68 <line:597:13, col:21> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x27ee9172c20 <col:13> 'const char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x27ee9172bb0 <col:13> 'const char *' lvalue ParmVar 0x27ee91724c8 'str' 'const char *'
|   |   | | `-ImplicitCastExpr 0x27ee9172c50 <col:20, col:21> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x27ee9172c38 <col:20, col:21> 'char' <LValueToRValue>
|   |   | |     `-UnaryOperator 0x27ee9172c08 <col:20, col:21> 'const char' lvalue prefix '*' cannot overflow
|   |   | |       `-ImplicitCastExpr 0x27ee9172bf0 <col:21> 'const char *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x27ee9172bd0 <col:21> 'const char *' lvalue ParmVar 0x27ee91724c8 'str' 'const char *'
|   |   | `-CompoundStmt 0x27ee9172d10 <col:26, line:600:9>
|   |   |   `-GotoStmt 0x27ee9172cf8 <line:599:13, col:18> 'bad_form' 0x27ee9172ca8
|   |   |-BreakStmt 0x27ee916dd00 <line:601:9>
|   |   |-IfStmt 0x27ee916ddd8 <line:604:9, line:607:9>
|   |   | |-BinaryOperator 0x27ee916dd68 <line:604:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x27ee916dd50 <line:604:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x27ee916dd08 <col:13> 'int' lvalue ParmVar 0x27ee9172548 'format' 'int'
|   |   | | `-IntegerLiteral 0x27ee916dd28 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x27ee916ddc0 <line:604:46, line:607:9>
|   |   |   `-GotoStmt 0x27ee916dda8 <line:606:13, col:18> 'bad_form' 0x27ee9172ca8
|   |   |-IfStmt 0x27ee916e030 <line:611:9, line:614:9>
|   |   | |-OpaqueValueExpr 0x27ee916e018 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x27ee916e000 <line:611:66, line:614:9>
|   |   |   `-GotoStmt 0x27ee916dfe8 <line:613:13, col:18> 'bad_str' 0x27ee916df98
|   |   |-BreakStmt 0x27ee916e048 <line:615:9>
|   |   |-IfStmt 0x27ee916e120 <line:619:9, line:622:9>
|   |   | |-BinaryOperator 0x27ee916e0b0 <line:619:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x27ee916e098 <line:619:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x27ee916e050 <col:13> 'int' lvalue ParmVar 0x27ee9172548 'format' 'int'
|   |   | | `-IntegerLiteral 0x27ee916e070 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x27ee916e108 <line:619:46, line:622:9>
|   |   |   `-GotoStmt 0x27ee916e0f0 <line:621:13, col:18> 'bad_form' 0x27ee9172ca8
|   |   |-IfStmt 0x27ee916e2d0 <line:623:9, line:627:9>
|   |   | |-OpaqueValueExpr 0x27ee916e2b8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x27ee916e2a0 <line:624:61, line:627:9>
|   |   |   `-GotoStmt 0x27ee916e288 <line:626:13, col:18> 'bad_str' 0x27ee916df98
|   |   |-BreakStmt 0x27ee916e2e8 <line:628:9>
|   |   |-IfStmt 0x27ee916e3c0 <line:631:9, line:634:9>
|   |   | |-BinaryOperator 0x27ee916e350 <line:631:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x27ee916e338 <line:631:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x27ee916e2f0 <col:13> 'int' lvalue ParmVar 0x27ee9172548 'format' 'int'
|   |   | | `-IntegerLiteral 0x27ee916e310 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x27ee916e3a8 <line:631:46, line:634:9>
|   |   |   `-GotoStmt 0x27ee916e390 <line:633:13, col:18> 'bad_form' 0x27ee9172ca8
|   |   |-IfStmt 0x27ee916e5f8 <line:635:9, line:638:9>
|   |   | |-OpaqueValueExpr 0x27ee916e5e0 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x27ee916e5c8 <line:635:65, line:638:9>
|   |   |   `-GotoStmt 0x27ee916e5b0 <line:637:13, col:18> 'bad_str' 0x27ee916df98
|   |   |-BreakStmt 0x27ee916e610 <line:639:9>
|   |   |-IfStmt 0x27ee916e6e8 <line:643:9, line:646:9>
|   |   | |-BinaryOperator 0x27ee916e678 <line:643:13, line:33:33> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x27ee916e660 <line:643:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x27ee916e618 <col:13> 'int' lvalue ParmVar 0x27ee9172548 'format' 'int'
|   |   | | `-IntegerLiteral 0x27ee916e638 <line:33:33> 'int' 1
|   |   | `-CompoundStmt 0x27ee916e6d0 <line:643:46, line:646:9>
|   |   |   `-GotoStmt 0x27ee916e6b8 <line:645:13, col:18> 'bad_form' 0x27ee9172ca8
|   |   |-IfStmt 0x27ee916e8b0 <line:647:9, line:650:9>
|   |   | |-OpaqueValueExpr 0x27ee916e898 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x27ee916e880 <line:647:68, line:650:9>
|   |   |   `-GotoStmt 0x27ee916e868 <line:649:13, col:18> 'bad_str' 0x27ee916df98
|   |   |-IfStmt 0x27ee916eaa0 <line:651:9, line:654:9>
|   |   | |-OpaqueValueExpr 0x27ee916ea88 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x27ee916ea70 <line:651:65, line:654:9>
|   |   |   `-GotoStmt 0x27ee916ea58 <line:653:13, col:18> 'bad_str' 0x27ee916df98
|   |   |-IfStmt 0x27ee916ec50 <line:656:9, line:659:9>
|   |   | |-OpaqueValueExpr 0x27ee916ec38 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x27ee916ec20 <line:656:56, line:659:9>
|   |   |   `-GotoStmt 0x27ee916ec08 <line:658:13, col:18> 'bad_str' 0x27ee916df98
|   |   |-BreakStmt 0x27ee916ec68 <line:661:9>
|   |   |-IfStmt 0x27ee9177ee8 <line:672:9, line:679:9> has_else
|   |   | |-BinaryOperator 0x27ee916ecd0 <line:672:13, line:33:33> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x27ee916ecb8 <line:672:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x27ee916ec70 <col:13> 'int' lvalue ParmVar 0x27ee9172548 'format' 'int'
|   |   | | `-IntegerLiteral 0x27ee916ec90 <line:33:33> 'int' 1
|   |   | |-NullStmt 0x27ee9177ee0 <line:673:13>
|   |   | `-IfStmt 0x27ee9177eb8 <line:674:14, line:679:9> has_else
|   |   |   |-BinaryOperator 0x27ee9177e20 <line:674:18, line:35:33> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x27ee9177e08 <line:674:18> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x27ee9177dc0 <col:18> 'int' lvalue ParmVar 0x27ee9172548 'format' 'int'
|   |   |   | `-IntegerLiteral 0x27ee9177de0 <line:35:33> 'int' 2
|   |   |   |-NullStmt 0x27ee9177eb0 <line:675:13>
|   |   |   `-CompoundStmt 0x27ee9177e98 <line:676:14, line:679:9>
|   |   |     `-GotoStmt 0x27ee9177e80 <line:678:13, col:18> 'bad_form' 0x27ee9172ca8
|   |   |-IfStmt 0x27ee9178310 <line:681:9, line:685:9>
|   |   | |-OpaqueValueExpr 0x27ee91782f8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x27ee91782e0 <line:682:71, line:685:9>
|   |   |   `-GotoStmt 0x27ee91782c8 <line:684:13, col:18> 'bad_str' 0x27ee916df98
|   |   |-BreakStmt 0x27ee9178328 <line:687:9>
|   |   |-IfStmt 0x27ee91783f0 <line:691:9, line:694:9>
|   |   | |-OpaqueValueExpr 0x27ee91783d8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x27ee91783c0 <line:691:68, line:694:9>
|   |   |   `-GotoStmt 0x27ee91783a8 <line:693:13, col:18> 'bad_form' 0x27ee9172ca8
|   |   |-IfStmt 0x27ee9178c30 <line:696:9, line:718:9> has_else
|   |   | |-BinaryOperator 0x27ee9178468 <line:696:13, line:37:33> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x27ee9178450 <line:696:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x27ee9178408 <col:13> 'int' lvalue ParmVar 0x27ee9172548 'format' 'int'
|   |   | | `-IntegerLiteral 0x27ee9178428 <line:37:33> 'int' 3
|   |   | |-CompoundStmt 0x27ee91787d8 <line:696:44, line:704:9>
|   |   | | `-IfStmt 0x27ee9178760 <line:697:13, line:700:13>
|   |   | |   |-OpaqueValueExpr 0x27ee9178748 <<invalid sloc>> '_Bool'
|   |   | |   `-CompoundStmt 0x27ee9178730 <line:697:68, line:700:13>
|   |   | |     `-GotoStmt 0x27ee9178718 <line:699:17, col:22> 'bad_str' 0x27ee916df98
|   |   | `-IfStmt 0x27ee9178c08 <line:704:16, line:718:9> has_else
|   |   |   |-BinaryOperator 0x27ee9178850 <line:704:20, line:33:33> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x27ee9178838 <line:704:20> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x27ee91787f0 <col:20> 'int' lvalue ParmVar 0x27ee9172548 'format' 'int'
|   |   |   | `-IntegerLiteral 0x27ee9178810 <line:33:33> 'int' 1
|   |   |   |-NullStmt 0x27ee9178c00 <line:705:13>
|   |   |   `-IfStmt 0x27ee9178bd8 <line:706:14, line:718:9> has_else
|   |   |     |-OpaqueValueExpr 0x27ee9178bc0 <<invalid sloc>> '_Bool'
|   |   |     |-CompoundStmt 0x27ee9178b50 <line:707:51, line:715:9>
|   |   |     | |-IfStmt 0x27ee9178ab8 <line:708:13, line:712:13>
|   |   |     | | |-OpaqueValueExpr 0x27ee9178aa0 <<invalid sloc>> '_Bool'
|   |   |     | | `-CompoundStmt 0x27ee9178a88 <line:709:67, line:712:13>
|   |   |     | |   `-GotoStmt 0x27ee9178a70 <line:711:17, col:22> 'bad_str' 0x27ee916df98
|   |   |     | `-BinaryOperator 0x27ee9178b30 <line:713:13, col:25> 'int' '='
|   |   |     |   |-DeclRefExpr 0x27ee9178ad0 <col:13> 'int' lvalue Var 0x27ee91728d0 'no_unused' 'int'
|   |   |     |   `-IntegerLiteral 0x27ee9178b08 <col:25> 'int' 0
|   |   |     `-CompoundStmt 0x27ee9178ba8 <line:715:16, line:718:9>
|   |   |       `-GotoStmt 0x27ee9178b90 <line:717:13, col:18> 'bad_form' 0x27ee9172ca8
|   |   |-IfStmt 0x27ee9178ce8 <line:720:9, line:724:9>
|   |   | |-OpaqueValueExpr 0x27ee9178cd0 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x27ee9178cc0 <line:720:56, line:724:9>
|   |   |-BreakStmt 0x27ee9178d00 <line:726:9>
|   |   |-DefaultStmt 0x27ee9178d30 <line:728:5, col:12>
|   |   | `-NullStmt 0x27ee9178d28 <col:12>
|   |   `-GotoStmt 0x27ee9178d50 <line:730:9, col:14> 'bad_str' 0x27ee916df98
|   |-LabelStmt 0x27ee9179fc0 <line:736:2, line:737:41> 'bad_str'
|   | `-CallExpr 0x27ee9179f58 <col:5, col:41> 'int'
|   |   |-ImplicitCastExpr 0x27ee9179f40 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x27ee9179eb8 <col:5> 'int ()' Function 0x27ee91678b0 'ERR_add_error_data' 'int ()'
|   |   |-IntegerLiteral 0x27ee9179ed8 <col:24> 'int' 2
|   |   |-ImplicitCastExpr 0x27ee9179f90 <col:27> 'char *' <ArrayToPointerDecay>
|   |   | `-StringLiteral 0x27ee9179f00 <col:27> 'char [8]' lvalue "string="
|   |   `-ImplicitCastExpr 0x27ee9179fa8 <col:38> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x27ee9179f20 <col:38> 'const char *' lvalue ParmVar 0x27ee91724c8 'str' 'const char *'
|   `-LabelStmt 0x27ee917a000 <line:738:2, col:10> 'bad_form'
|     `-NullStmt 0x27ee9179ff8 <col:10>
|-FunctionDecl 0x27ee917a270 prev 0x27ee914ef20 <line:745:1, line:763:1> line:745:12 used bitstr_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x27ee917a080 <col:22, col:34> col:34 used elem 'const char *'
| |-ParmVarDecl 0x27ee917a100 <col:40, col:44> col:44 used len 'int'
| |-ParmVarDecl 0x27ee917a180 <col:49, col:55> col:55 used bitstr 'void *'
| `-CompoundStmt 0x27ee917acf8 <line:746:1, line:763:1>
|   |-DeclStmt 0x27ee917a3a8 <line:747:5, col:16>
|   | `-VarDecl 0x27ee917a340 <col:5, col:10> col:10 used bitnum 'long'
|   |-DeclStmt 0x27ee917a440 <line:748:5, col:15>
|   | `-VarDecl 0x27ee917a3d8 <col:5, col:11> col:11 used eptr 'char *'
|   |-IfStmt 0x27ee917a4e0 <line:749:5, line:750:16>
|   | |-UnaryOperator 0x27ee917a490 <line:749:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x27ee917a478 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee917a458 <col:10> 'const char *' lvalue ParmVar 0x27ee917a080 'elem' 'const char *'
|   | `-ReturnStmt 0x27ee917a4d0 <line:750:9, col:16>
|   |   `-IntegerLiteral 0x27ee917a4a8 <col:16> 'int' 0
|   |-BinaryOperator 0x27ee917a680 <line:751:5, col:37> 'long' '='
|   | |-DeclRefExpr 0x27ee917a4f8 <col:5> 'long' lvalue Var 0x27ee917a340 'bitnum' 'long'
|   | `-ImplicitCastExpr 0x27ee917a668 <col:14, col:37> 'long' <IntegralCast>
|   |   `-CallExpr 0x27ee917a618 <col:14, col:37> 'unsigned long'
|   |     |-ImplicitCastExpr 0x27ee917a600 <col:14> 'unsigned long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x27ee917a530 <col:14> 'unsigned long (const char *, char **, int)' Function 0x27ee916cb10 'strtoul' 'unsigned long (const char *, char **, int)'
|   |     |-ImplicitCastExpr 0x27ee917a650 <col:22> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x27ee917a550 <col:22> 'const char *' lvalue ParmVar 0x27ee917a080 'elem' 'const char *'
|   |     |-UnaryOperator 0x27ee917a5a8 <col:28, col:29> 'char **' prefix '&' cannot overflow
|   |     | `-DeclRefExpr 0x27ee917a570 <col:29> 'char *' lvalue Var 0x27ee917a3d8 'eptr' 'char *'
|   |     `-IntegerLiteral 0x27ee917a5c0 <col:35> 'int' 10
|   |-IfStmt 0x27ee917a8f0 <line:752:5, line:753:16>
|   | |-BinaryOperator 0x27ee917a898 <line:752:9, col:45> 'int' '&&'
|   | | |-BinaryOperator 0x27ee917a758 <col:9, col:18> 'int' '&&'
|   | | | |-ImplicitCastExpr 0x27ee917a710 <col:9> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x27ee917a6a0 <col:9> 'char *' lvalue Var 0x27ee917a3d8 'eptr' 'char *'
|   | | | `-ImplicitCastExpr 0x27ee917a740 <col:17, col:18> 'int' <IntegralCast>
|   | | |   `-ImplicitCastExpr 0x27ee917a728 <col:17, col:18> 'char' <LValueToRValue>
|   | | |     `-UnaryOperator 0x27ee917a6f8 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | | |       `-ImplicitCastExpr 0x27ee917a6e0 <col:18> 'char *' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x27ee917a6c0 <col:18> 'char *' lvalue Var 0x27ee917a3d8 'eptr' 'char *'
|   | | `-ParenExpr 0x27ee917a878 <col:26, col:45> 'int'
|   | |   `-BinaryOperator 0x27ee917a858 <col:27, col:42> 'int' '!='
|   | |     |-ImplicitCastExpr 0x27ee917a828 <col:27> 'char *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x27ee917a778 <col:27> 'char *' lvalue Var 0x27ee917a3d8 'eptr' 'char *'
|   | |     `-ImplicitCastExpr 0x27ee917a840 <col:35, col:42> 'char *' <BitCast>
|   | |       `-BinaryOperator 0x27ee917a808 <col:35, col:42> 'const char *' '+'
|   | |         |-ImplicitCastExpr 0x27ee917a7d8 <col:35> 'const char *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x27ee917a798 <col:35> 'const char *' lvalue ParmVar 0x27ee917a080 'elem' 'const char *'
|   | |         `-ImplicitCastExpr 0x27ee917a7f0 <col:42> 'int' <LValueToRValue>
|   | |           `-DeclRefExpr 0x27ee917a7b8 <col:42> 'int' lvalue ParmVar 0x27ee917a100 'len' 'int'
|   | `-ReturnStmt 0x27ee917a8e0 <line:753:9, col:16>
|   |   `-IntegerLiteral 0x27ee917a8b8 <col:16> 'int' 0
|   |-IfStmt 0x27ee917aa10 <line:754:5, line:757:5>
|   | |-BinaryOperator 0x27ee917a980 <line:754:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x27ee917a950 <col:9> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x27ee917a908 <col:9> 'long' lvalue Var 0x27ee917a340 'bitnum' 'long'
|   | | `-ImplicitCastExpr 0x27ee917a968 <col:18> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x27ee917a928 <col:18> 'int' 0
|   | `-CompoundStmt 0x27ee917a9f8 <col:21, line:757:5>
|   |   `-ReturnStmt 0x27ee917a9e8 <line:756:9, col:16>
|   |     `-IntegerLiteral 0x27ee917a9c0 <col:16> 'int' 0
|   |-IfStmt 0x27ee917aca8 <line:758:5, line:761:5>
|   | |-UnaryOperator 0x27ee917ac20 <line:758:9, col:51> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x27ee917abb8 <col:10, col:51> 'int'
|   | |   |-ImplicitCastExpr 0x27ee917aba0 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x27ee917ab18 <col:10> 'int ()' Function 0x27ee917aa50 'ASN1_BIT_STRING_set_bit' 'int ()'
|   | |   |-ImplicitCastExpr 0x27ee917abf0 <col:34> 'void *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x27ee917ab38 <col:34> 'void *' lvalue ParmVar 0x27ee917a180 'bitstr' 'void *'
|   | |   |-ImplicitCastExpr 0x27ee917ac08 <col:42> 'long' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x27ee917ab58 <col:42> 'long' lvalue Var 0x27ee917a340 'bitnum' 'long'
|   | |   `-IntegerLiteral 0x27ee917ab78 <col:50> 'int' 1
|   | `-CompoundStmt 0x27ee917ac90 <col:54, line:761:5>
|   |   `-ReturnStmt 0x27ee917ac80 <line:760:9, col:16>
|   |     `-IntegerLiteral 0x27ee917ac58 <col:16> 'int' 0
|   `-ReturnStmt 0x27ee917ace8 <line:762:5, col:12>
|     `-IntegerLiteral 0x27ee917acc0 <col:12> 'int' 1
|-FunctionDecl 0x27ee917cfe0 <line:765:1, line:783:1> line:765:12 used mask_cb 'int (const char *, int, void *)' static
| |-ParmVarDecl 0x27ee917cdf0 <col:20, col:32> col:32 used elem 'const char *'
| |-ParmVarDecl 0x27ee917ce70 <col:38, col:42> col:42 used len 'int'
| |-ParmVarDecl 0x27ee917cef0 <col:47, col:53> col:53 used arg 'void *'
| `-CompoundStmt 0x27ee917dc00 <line:766:1, line:783:1>
|   |-DeclStmt 0x27ee917d240 <line:767:5, col:40>
|   | |-VarDecl 0x27ee917d0f0 <col:5, col:28> col:20 used pmask 'unsigned long *' cinit
|   | | `-ImplicitCastExpr 0x27ee917d190 <col:28> 'unsigned long *' <BitCast>
|   | |   `-ImplicitCastExpr 0x27ee917d178 <col:28> 'void *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x27ee917d158 <col:28> 'void *' lvalue ParmVar 0x27ee917cef0 'arg' 'void *'
|   | `-VarDecl 0x27ee917d1c0 <col:5, col:33> col:33 used tmpmask 'unsigned long'
|   |-DeclStmt 0x27ee917d2d8 <line:768:5, col:12>
|   | `-VarDecl 0x27ee917d270 <col:5, col:9> col:9 used tag 'int'
|   |-IfStmt 0x27ee917d360 <line:769:5, line:770:16>
|   | |-OpaqueValueExpr 0x27ee917d348 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x27ee917d338 <col:9, col:16>
|   |   `-IntegerLiteral 0x27ee917d310 <col:16> 'int' 0
|   |-IfStmt 0x27ee917d6c0 <line:771:5, line:774:5>
|   | |-BinaryOperator 0x27ee917d5e8 <line:771:9, col:52> 'int' '&&'
|   | | |-ParenExpr 0x27ee917d3f8 <col:9, col:18> 'int'
|   | | | `-BinaryOperator 0x27ee917d3d8 <col:10, col:17> 'int' '=='
|   | | |   |-ImplicitCastExpr 0x27ee917d3c0 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x27ee917d378 <col:10> 'int' lvalue ParmVar 0x27ee917ce70 'len' 'int'
|   | | |   `-IntegerLiteral 0x27ee917d398 <col:17> 'int' 3
|   | | `-ParenExpr 0x27ee917d5c8 <col:23, col:52> 'int'
|   | |   `-BinaryOperator 0x27ee917d5a8 <col:24, col:51> 'int' '=='
|   | |     |-CallExpr 0x27ee917d4e8 <col:24, col:46> 'int'
|   | |     | |-ImplicitCastExpr 0x27ee917d4d0 <col:24> 'int (*)(const char *, const char *, unsigned long long)' <FunctionToPointerDecay>
|   | |     | | `-DeclRefExpr 0x27ee917d418 <col:24> 'int (const char *, const char *, unsigned long long)' Function 0x27ee91634a0 'strncmp' 'int (const char *, const char *, unsigned long long)'
|   | |     | |-ImplicitCastExpr 0x27ee917d520 <col:32> 'const char *' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x27ee917d438 <col:32> 'const char *' lvalue ParmVar 0x27ee917cdf0 'elem' 'const char *'
|   | |     | |-ImplicitCastExpr 0x27ee917d550 <col:38> 'const char *' <NoOp>
|   | |     | | `-ImplicitCastExpr 0x27ee917d538 <col:38> 'char *' <ArrayToPointerDecay>
|   | |     | |   `-StringLiteral 0x27ee917d458 <col:38> 'char [4]' lvalue "DIR"
|   | |     | `-ImplicitCastExpr 0x27ee917d568 <col:45> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x27ee917d478 <col:45> 'int' 3
|   | |     `-IntegerLiteral 0x27ee917d580 <col:51> 'int' 0
|   | `-CompoundStmt 0x27ee917d6a8 <col:55, line:774:5>
|   |   `-ReturnStmt 0x27ee917d698 <line:773:9, col:16>
|   |     `-IntegerLiteral 0x27ee917d670 <col:16> 'int' 1
|   |-BinaryOperator 0x27ee917d7e8 <line:775:5, col:33> 'int' '='
|   | |-DeclRefExpr 0x27ee917d6d8 <col:5> 'int' lvalue Var 0x27ee917d270 'tag' 'int'
|   | `-CallExpr 0x27ee917d788 <col:11, col:33> 'int'
|   |   |-ImplicitCastExpr 0x27ee917d770 <col:11> 'int (*)(const char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x27ee917d710 <col:11> 'int (const char *, int)' Function 0x27ee9172ea0 'asn1_str2tag' 'int (const char *, int)'
|   |   |-ImplicitCastExpr 0x27ee917d7b8 <col:24> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x27ee917d730 <col:24> 'const char *' lvalue ParmVar 0x27ee917cdf0 'elem' 'const char *'
|   |   `-ImplicitCastExpr 0x27ee917d7d0 <col:30> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x27ee917d750 <col:30> 'int' lvalue ParmVar 0x27ee917ce70 'len' 'int'
|   |-IfStmt 0x27ee917d950 <line:776:5, line:777:16>
|   | |-BinaryOperator 0x27ee917d8f8 <line:776:9, col:37> 'int' '||'
|   | | |-UnaryOperator 0x27ee917d840 <col:9, col:10> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x27ee917d828 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x27ee917d808 <col:10> 'int' lvalue Var 0x27ee917d270 'tag' 'int'
|   | | `-ParenExpr 0x27ee917d8d8 <col:17, col:37> 'int'
|   | |   `-BinaryOperator 0x27ee917d8b8 <col:18, line:14:33> 'int' '&'
|   | |     |-ImplicitCastExpr 0x27ee917d8a0 <line:776:18> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x27ee917d858 <col:18> 'int' lvalue Var 0x27ee917d270 'tag' 'int'
|   | |     `-IntegerLiteral 0x27ee917d878 <line:14:33> 'int' 65536
|   | `-ReturnStmt 0x27ee917d940 <line:777:9, col:16>
|   |   `-IntegerLiteral 0x27ee917d918 <col:16> 'int' 0
|   |-BinaryOperator 0x27ee917da50 <line:778:5, col:31> 'unsigned long' '='
|   | |-DeclRefExpr 0x27ee917d968 <col:5> 'unsigned long' lvalue Var 0x27ee917d1c0 'tmpmask' 'unsigned long'
|   | `-ImplicitCastExpr 0x27ee917da38 <col:15, col:31> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x27ee917d9f8 <col:15, col:31> 'int'
|   |     |-ImplicitCastExpr 0x27ee917d9e0 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x27ee917d9a0 <col:15> 'int ()' Function 0x27ee9178120 'ASN1_tag2bit' 'int ()'
|   |     `-ImplicitCastExpr 0x27ee917da20 <col:28> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x27ee917d9c0 <col:28> 'int' lvalue Var 0x27ee917d270 'tag' 'int'
|   |-IfStmt 0x27ee917daf8 <line:779:5, line:780:16>
|   | |-UnaryOperator 0x27ee917daa8 <line:779:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x27ee917da90 <col:10> 'unsigned long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee917da70 <col:10> 'unsigned long' lvalue Var 0x27ee917d1c0 'tmpmask' 'unsigned long'
|   | `-ReturnStmt 0x27ee917dae8 <line:780:9, col:16>
|   |   `-IntegerLiteral 0x27ee917dac0 <col:16> 'int' 0
|   |-CompoundAssignOperator 0x27ee917db98 <line:781:5, col:15> 'unsigned long' '|=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   | |-UnaryOperator 0x27ee917db48 <col:5, col:6> 'unsigned long' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x27ee917db30 <col:6> 'unsigned long *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x27ee917db10 <col:6> 'unsigned long *' lvalue Var 0x27ee917d0f0 'pmask' 'unsigned long *'
|   | `-ImplicitCastExpr 0x27ee917db80 <col:15> 'unsigned long' <LValueToRValue>
|   |   `-DeclRefExpr 0x27ee917db60 <col:15> 'unsigned long' lvalue Var 0x27ee917d1c0 'tmpmask' 'unsigned long'
|   `-ReturnStmt 0x27ee917dbf0 <line:782:5, col:12>
|     `-IntegerLiteral 0x27ee917dbc8 <col:12> 'int' 1
`-FunctionDecl 0x27ee9176dc8 <line:785:1, line:789:1> line:785:5 ASN1_str2mask 'int (const char *, unsigned long *)'
  |-ParmVarDecl 0x27ee917dc78 <col:19, col:31> col:31 used str 'const char *'
  |-ParmVarDecl 0x27ee917dcf8 <col:36, col:51> col:51 used pmask 'unsigned long *'
  `-CompoundStmt 0x27ee91770b8 <line:786:1, line:789:1>
    |-BinaryOperator 0x27ee9176f20 <line:787:5, col:14> 'unsigned long' '='
    | |-UnaryOperator 0x27ee9176ec8 <col:5, col:6> 'unsigned long' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x27ee9176eb0 <col:6> 'unsigned long *' <LValueToRValue>
    | |   `-DeclRefExpr 0x27ee9176e90 <col:6> 'unsigned long *' lvalue ParmVar 0x27ee917dcf8 'pmask' 'unsigned long *'
    | `-ImplicitCastExpr 0x27ee9176f08 <col:14> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x27ee9176ee0 <col:14> 'int' 0
    `-ReturnStmt 0x27ee91770a8 <line:788:5, col:55>
      `-CallExpr 0x27ee9177018 <col:12, col:55> 'int'
        |-ImplicitCastExpr 0x27ee9177000 <col:12> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x27ee9176f40 <col:12> 'int ()' Function 0x27ee9168e68 'CONF_parse_list' 'int ()'
        |-ImplicitCastExpr 0x27ee9177060 <col:28> 'const char *' <LValueToRValue>
        | `-DeclRefExpr 0x27ee9176f60 <col:28> 'const char *' lvalue ParmVar 0x27ee917dc78 'str' 'const char *'
        |-CharacterLiteral 0x27ee9176f80 <col:33> 'int' 124
        |-IntegerLiteral 0x27ee9176f98 <col:38> 'int' 1
        |-ImplicitCastExpr 0x27ee9177078 <col:41> 'int (*)(const char *, int, void *)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x27ee9176fc0 <col:41> 'int (const char *, int, void *)' Function 0x27ee917cfe0 'mask_cb' 'int (const char *, int, void *)'
        `-ImplicitCastExpr 0x27ee9177090 <col:50> 'unsigned long *' <LValueToRValue>
          `-DeclRefExpr 0x27ee9176fe0 <col:50> 'unsigned long *' lvalue ParmVar 0x27ee917dcf8 'pmask' 'unsigned long *'
