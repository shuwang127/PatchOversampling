TranslationUnitDecl 0x267a10a50c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x267a10a5960 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x267a10a5660 '__int128'
|-TypedefDecl 0x267a10a59d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x267a10a5680 'unsigned __int128'
|-TypedefDecl 0x267a10a5d08 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x267a10a5ac0 'struct __NSConstantString_tag'
|   `-Record 0x267a10a5a28 '__NSConstantString_tag'
|-TypedefDecl 0x267a10a5d78 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x267a10a52a0 'unsigned long long'
|-TypedefDecl 0x267a10a5e10 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x267a10a5dd0 'char *'
|   `-BuiltinType 0x267a10a5160 'char'
|-TypedefDecl 0x267a10a5e80 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x267a10a5dd0 'char *'
|   `-BuiltinType 0x267a10a5160 'char'
`-FunctionDecl 0x267a2a8c618 <.//openssl//file_jk/before\crypto\bf\bf_cfb64.c:19:1, line:74:1> line:19:6 invalid BF_cfb64_encrypt 'void (const unsigned char *, unsigned char *, long, const int *, unsigned char *, int *, int)'
  |-ParmVarDecl 0x267a10a5f20 <col:23, col:44> col:44 used in 'const unsigned char *'
  |-ParmVarDecl 0x267a10a5fd0 <col:48, col:63> col:63 used out 'unsigned char *'
  |-ParmVarDecl 0x267a10a6050 <line:20:23, col:28> col:28 used length 'long'
  |-ParmVarDecl 0x267a2a8c348 <col:36, col:50> col:50 invalid schedule 'const int *'
  |-ParmVarDecl 0x267a2a8c3c8 <line:21:23, col:38> col:38 used ivec 'unsigned char *'
  |-ParmVarDecl 0x267a2a8c470 <col:44, col:49> col:49 used num 'int *'
  |-ParmVarDecl 0x267a2a8c4f0 <col:54, col:58> col:58 used encrypt 'int'
  `-CompoundStmt 0x267a2a92740 <line:22:1, line:74:1>
    |-DeclStmt 0x267a2a8c788 <line:23:5, col:31>
    | `-VarDecl 0x267a2a8c720 <col:5, col:22> col:22 invalid v0 'int' register
    |-DeclStmt 0x267a2a8c8a0 <line:24:5, col:26>
    | `-VarDecl 0x267a2a8c7b8 <col:5, col:23> col:18 used n 'int' register cinit
    |   `-ImplicitCastExpr 0x267a2a8c888 <col:22, col:23> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x267a2a8c870 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x267a2a8c858 <col:23> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x267a2a8c820 <col:23> 'int *' lvalue ParmVar 0x267a2a8c470 'num' 'int *'
    |-DeclStmt 0x267a2a8c988 <line:25:5, col:29>
    | `-VarDecl 0x267a2a8c8d0 <col:5, col:23> col:19 used l 'long' register cinit
    |   `-ImplicitCastExpr 0x267a2a8c970 <col:23> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x267a2a8c938 <col:23> 'long' lvalue ParmVar 0x267a10a6050 'length' 'long'
    |-DeclStmt 0x267a2a8cb40 <line:27:5, col:29>
    | |-VarDecl 0x267a2a8c9b8 <col:5, col:20> col:20 used iv 'unsigned char *'
    | |-VarDecl 0x267a2a8ca38 <col:5, col:24> col:24 used c 'unsigned char'
    | `-VarDecl 0x267a2a8cab8 <col:5, col:27> col:27 used cc 'unsigned char'
    |-BinaryOperator 0x267a2a8cc20 <line:29:5, col:27> 'unsigned char *' '='
    | |-DeclRefExpr 0x267a2a8cb58 <col:5> 'unsigned char *' lvalue Var 0x267a2a8c9b8 'iv' 'unsigned char *'
    | `-CStyleCastExpr 0x267a2a8cbf8 <col:10, col:27> 'unsigned char *' <NoOp>
    |   `-ImplicitCastExpr 0x267a2a8cbe0 <col:27> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x267a2a8cb90 <col:27> 'unsigned char *' lvalue ParmVar 0x267a2a8c3c8 'ivec' 'unsigned char *'
    |-IfStmt 0x267a2a92560 <line:30:5, line:71:5> has_else
    | |-ImplicitCastExpr 0x267a2a8cc78 <line:30:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x267a2a8cc40 <col:9> 'int' lvalue ParmVar 0x267a2a8c4f0 'encrypt' 'int'
    | |-CompoundStmt 0x267a2a8d958 <col:18, line:50:5>
    | | `-WhileStmt 0x267a2a8d940 <line:31:9, line:49:9>
    | |   |-UnaryOperator 0x267a2a8ccc8 <line:31:16, col:17> 'long' postfix '--'
    | |   | `-DeclRefExpr 0x267a2a8cc90 <col:16> 'long' lvalue Var 0x267a2a8c8d0 'l' 'long'
    | |   `-CompoundStmt 0x267a2a8d908 <col:21, line:49:9>
    | |     |-IfStmt 0x267a2a8d3f8 <line:32:13, line:44:13>
    | |     | |-BinaryOperator 0x267a2a8cd58 <line:32:17, col:22> 'int' '=='
    | |     | | |-ImplicitCastExpr 0x267a2a8cd40 <col:17> 'int' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x267a2a8cce0 <col:17> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
    | |     | | `-IntegerLiteral 0x267a2a8cd18 <col:22> 'int' 0
    | |     | `-CompoundStmt 0x267a2a8d3d8 <col:25, line:44:13>
    | |     |   |-BinaryOperator 0x267a2a91c30 <line:38:17, col:39> 'unsigned char *' '='
    | |     |   | |-DeclRefExpr 0x267a2a91b98 <col:17> 'unsigned char *' lvalue Var 0x267a2a8c9b8 'iv' 'unsigned char *'
    | |     |   | `-CStyleCastExpr 0x267a2a91c08 <col:22, col:39> 'unsigned char *' <NoOp>
    | |     |   |   `-ImplicitCastExpr 0x267a2a91bf0 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    | |     |   |     `-DeclRefExpr 0x267a2a91bb8 <col:39> 'unsigned char *' lvalue ParmVar 0x267a2a8c3c8 'ivec' 'unsigned char *'
    | |     |   `-BinaryOperator 0x267a2a8d3b8 <line:43:17, col:39> 'unsigned char *' '='
    | |     |     |-DeclRefExpr 0x267a2a92350 <col:17> 'unsigned char *' lvalue Var 0x267a2a8c9b8 'iv' 'unsigned char *'
    | |     |     `-CStyleCastExpr 0x267a2a8d390 <col:22, col:39> 'unsigned char *' <NoOp>
    | |     |       `-ImplicitCastExpr 0x267a2a8d378 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    | |     |         `-DeclRefExpr 0x267a2a8d340 <col:39> 'unsigned char *' lvalue ParmVar 0x267a2a8c3c8 'ivec' 'unsigned char *'
    | |     |-BinaryOperator 0x267a2a8d5f8 <line:45:13, col:31> 'unsigned char' '='
    | |     | |-DeclRefExpr 0x267a2a8d410 <col:13> 'unsigned char' lvalue Var 0x267a2a8ca38 'c' 'unsigned char'
    | |     | `-ImplicitCastExpr 0x267a2a8d5e0 <col:17, col:31> 'unsigned char' <IntegralCast>
    | |     |   `-BinaryOperator 0x267a2a8d5c0 <col:17, col:31> 'int' '^'
    | |     |     |-ImplicitCastExpr 0x267a2a8d578 <col:17, col:23> 'int' <IntegralCast>
    | |     |     | `-ImplicitCastExpr 0x267a2a8d560 <col:17, col:23> 'unsigned char' <LValueToRValue>
    | |     |     |   `-UnaryOperator 0x267a2a8d4b8 <col:17, col:23> 'const unsigned char' lvalue prefix '*' cannot overflow
    | |     |     |     `-ParenExpr 0x267a2a8d498 <col:18, col:23> 'const unsigned char *'
    | |     |     |       `-UnaryOperator 0x267a2a8d480 <col:19, col:21> 'const unsigned char *' postfix '++'
    | |     |     |         `-DeclRefExpr 0x267a2a8d448 <col:19> 'const unsigned char *' lvalue ParmVar 0x267a10a5f20 'in' 'const unsigned char *'
    | |     |     `-ImplicitCastExpr 0x267a2a8d5a8 <col:27, col:31> 'int' <IntegralCast>
    | |     |       `-ImplicitCastExpr 0x267a2a8d590 <col:27, col:31> 'unsigned char' <LValueToRValue>
    | |     |         `-ArraySubscriptExpr 0x267a2a8d540 <col:27, col:31> 'unsigned char' lvalue
    | |     |           |-ImplicitCastExpr 0x267a2a8d510 <col:27> 'unsigned char *' <LValueToRValue>
    | |     |           | `-DeclRefExpr 0x267a2a8d4d0 <col:27> 'unsigned char *' lvalue Var 0x267a2a8c9b8 'iv' 'unsigned char *'
    | |     |           `-ImplicitCastExpr 0x267a2a8d528 <col:30> 'int' <LValueToRValue>
    | |     |             `-DeclRefExpr 0x267a2a8d4f0 <col:30> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
    | |     |-BinaryOperator 0x267a2a8d6d8 <line:46:13, col:24> 'unsigned char' '='
    | |     | |-UnaryOperator 0x267a2a8d688 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    | |     | | `-ParenExpr 0x267a2a8d668 <col:14, col:20> 'unsigned char *'
    | |     | |   `-UnaryOperator 0x267a2a8d650 <col:15, col:18> 'unsigned char *' postfix '++'
    | |     | |     `-DeclRefExpr 0x267a2a8d618 <col:15> 'unsigned char *' lvalue ParmVar 0x267a10a5fd0 'out' 'unsigned char *'
    | |     | `-ImplicitCastExpr 0x267a2a8d6c0 <col:24> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x267a2a8d6a0 <col:24> 'unsigned char' lvalue Var 0x267a2a8ca38 'c' 'unsigned char'
    | |     |-BinaryOperator 0x267a2a8d7c0 <line:47:13, col:21> 'unsigned char' '='
    | |     | |-ArraySubscriptExpr 0x267a2a8d768 <col:13, col:17> 'unsigned char' lvalue
    | |     | | |-ImplicitCastExpr 0x267a2a8d738 <col:13> 'unsigned char *' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x267a2a8d6f8 <col:13> 'unsigned char *' lvalue Var 0x267a2a8c9b8 'iv' 'unsigned char *'
    | |     | | `-ImplicitCastExpr 0x267a2a8d750 <col:16> 'int' <LValueToRValue>
    | |     | |   `-DeclRefExpr 0x267a2a8d718 <col:16> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
    | |     | `-ImplicitCastExpr 0x267a2a8d7a8 <col:21> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x267a2a8d788 <col:21> 'unsigned char' lvalue Var 0x267a2a8ca38 'c' 'unsigned char'
    | |     `-BinaryOperator 0x267a2a8d8e8 <line:48:13, col:27> 'int' '='
    | |       |-DeclRefExpr 0x267a2a8d7e0 <col:13> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
    | |       `-BinaryOperator 0x267a2a8d8c8 <col:17, col:27> 'int' '&'
    | |         |-ParenExpr 0x267a2a8d880 <col:17, col:23> 'int'
    | |         | `-BinaryOperator 0x267a2a8d860 <col:18, col:22> 'int' '+'
    | |         |   |-ImplicitCastExpr 0x267a2a8d848 <col:18> 'int' <LValueToRValue>
    | |         |   | `-DeclRefExpr 0x267a2a8d800 <col:18> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
    | |         |   `-IntegerLiteral 0x267a2a8d820 <col:22> 'int' 1
    | |         `-IntegerLiteral 0x267a2a8d8a0 <col:27> 'int' 7
    | `-CompoundStmt 0x267a2a92548 <line:50:12, line:71:5>
    |   `-WhileStmt 0x267a2a92530 <line:51:9, line:70:9>
    |     |-UnaryOperator 0x267a2a8d990 <line:51:16, col:17> 'long' postfix '--'
    |     | `-DeclRefExpr 0x267a2a8d970 <col:16> 'long' lvalue Var 0x267a2a8c8d0 'l' 'long'
    |     `-CompoundStmt 0x267a2a924f0 <col:21, line:70:9>
    |       |-IfStmt 0x267a2a8ff58 <line:52:13, line:64:13>
    |       | |-BinaryOperator 0x267a2a8da08 <line:52:17, col:22> 'int' '=='
    |       | | |-ImplicitCastExpr 0x267a2a8d9f0 <col:17> 'int' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x267a2a8d9a8 <col:17> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
    |       | | `-IntegerLiteral 0x267a2a8d9c8 <col:22> 'int' 0
    |       | `-CompoundStmt 0x267a2a8ff38 <col:25, line:64:13>
    |       |   |-BinaryOperator 0x267a2a8f760 <line:58:17, col:39> 'unsigned char *' '='
    |       |   | |-DeclRefExpr 0x267a2a8f6c8 <col:17> 'unsigned char *' lvalue Var 0x267a2a8c9b8 'iv' 'unsigned char *'
    |       |   | `-CStyleCastExpr 0x267a2a8f738 <col:22, col:39> 'unsigned char *' <NoOp>
    |       |   |   `-ImplicitCastExpr 0x267a2a8f720 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |       |   |     `-DeclRefExpr 0x267a2a8f6e8 <col:39> 'unsigned char *' lvalue ParmVar 0x267a2a8c3c8 'ivec' 'unsigned char *'
    |       |   `-BinaryOperator 0x267a2a8ff18 <line:63:17, col:39> 'unsigned char *' '='
    |       |     |-DeclRefExpr 0x267a2a8fe80 <col:17> 'unsigned char *' lvalue Var 0x267a2a8c9b8 'iv' 'unsigned char *'
    |       |     `-CStyleCastExpr 0x267a2a8fef0 <col:22, col:39> 'unsigned char *' <NoOp>
    |       |       `-ImplicitCastExpr 0x267a2a8fed8 <col:39> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |       |         `-DeclRefExpr 0x267a2a8fea0 <col:39> 'unsigned char *' lvalue ParmVar 0x267a2a8c3c8 'ivec' 'unsigned char *'
    |       |-BinaryOperator 0x267a2a90030 <line:65:13, col:24> 'unsigned char' '='
    |       | |-DeclRefExpr 0x267a2a8ff70 <col:13> 'unsigned char' lvalue Var 0x267a2a8cab8 'cc' 'unsigned char'
    |       | `-ImplicitCastExpr 0x267a2a90018 <col:18, col:24> 'unsigned char' <LValueToRValue>
    |       |   `-UnaryOperator 0x267a2a90000 <col:18, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
    |       |     `-ParenExpr 0x267a2a8ffe0 <col:19, col:24> 'const unsigned char *'
    |       |       `-UnaryOperator 0x267a2a8ffc8 <col:20, col:22> 'const unsigned char *' postfix '++'
    |       |         `-DeclRefExpr 0x267a2a8ffa8 <col:20> 'const unsigned char *' lvalue ParmVar 0x267a10a5f20 'in' 'const unsigned char *'
    |       |-BinaryOperator 0x267a2a90118 <line:66:13, col:21> 'unsigned char' '='
    |       | |-DeclRefExpr 0x267a2a90050 <col:13> 'unsigned char' lvalue Var 0x267a2a8ca38 'c' 'unsigned char'
    |       | `-ImplicitCastExpr 0x267a2a90100 <col:17, col:21> 'unsigned char' <LValueToRValue>
    |       |   `-ArraySubscriptExpr 0x267a2a900e0 <col:17, col:21> 'unsigned char' lvalue
    |       |     |-ImplicitCastExpr 0x267a2a900b0 <col:17> 'unsigned char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x267a2a90070 <col:17> 'unsigned char *' lvalue Var 0x267a2a8c9b8 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x267a2a900c8 <col:20> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x267a2a90090 <col:20> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
    |       |-BinaryOperator 0x267a2a90200 <line:67:13, col:21> 'unsigned char' '='
    |       | |-ArraySubscriptExpr 0x267a2a901a8 <col:13, col:17> 'unsigned char' lvalue
    |       | | |-ImplicitCastExpr 0x267a2a90178 <col:13> 'unsigned char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x267a2a90138 <col:13> 'unsigned char *' lvalue Var 0x267a2a8c9b8 'iv' 'unsigned char *'
    |       | | `-ImplicitCastExpr 0x267a2a90190 <col:16> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x267a2a90158 <col:16> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
    |       | `-ImplicitCastExpr 0x267a2a901e8 <col:21> 'unsigned char' <LValueToRValue>
    |       |   `-DeclRefExpr 0x267a2a901c8 <col:21> 'unsigned char' lvalue Var 0x267a2a8cab8 'cc' 'unsigned char'
    |       |-BinaryOperator 0x267a2a923a8 <line:68:13, col:28> 'unsigned char' '='
    |       | |-UnaryOperator 0x267a2a90278 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    |       | | `-ParenExpr 0x267a2a90258 <col:14, col:20> 'unsigned char *'
    |       | |   `-UnaryOperator 0x267a2a90240 <col:15, col:18> 'unsigned char *' postfix '++'
    |       | |     `-DeclRefExpr 0x267a2a90220 <col:15> 'unsigned char *' lvalue ParmVar 0x267a10a5fd0 'out' 'unsigned char *'
    |       | `-ImplicitCastExpr 0x267a2a92390 <col:24, col:28> 'unsigned char' <IntegralCast>
    |       |   `-BinaryOperator 0x267a2a90330 <col:24, col:28> 'int' '^'
    |       |     |-ImplicitCastExpr 0x267a2a902e8 <col:24> 'int' <IntegralCast>
    |       |     | `-ImplicitCastExpr 0x267a2a902d0 <col:24> 'unsigned char' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x267a2a90290 <col:24> 'unsigned char' lvalue Var 0x267a2a8ca38 'c' 'unsigned char'
    |       |     `-ImplicitCastExpr 0x267a2a90318 <col:28> 'int' <IntegralCast>
    |       |       `-ImplicitCastExpr 0x267a2a90300 <col:28> 'unsigned char' <LValueToRValue>
    |       |         `-DeclRefExpr 0x267a2a902b0 <col:28> 'unsigned char' lvalue Var 0x267a2a8cab8 'cc' 'unsigned char'
    |       `-BinaryOperator 0x267a2a924d0 <line:69:13, col:27> 'int' '='
    |         |-DeclRefExpr 0x267a2a923c8 <col:13> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
    |         `-BinaryOperator 0x267a2a924b0 <col:17, col:27> 'int' '&'
    |           |-ParenExpr 0x267a2a92468 <col:17, col:23> 'int'
    |           | `-BinaryOperator 0x267a2a92448 <col:18, col:22> 'int' '+'
    |           |   |-ImplicitCastExpr 0x267a2a92430 <col:18> 'int' <LValueToRValue>
    |           |   | `-DeclRefExpr 0x267a2a923e8 <col:18> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
    |           |   `-IntegerLiteral 0x267a2a92408 <col:22> 'int' 1
    |           `-IntegerLiteral 0x267a2a92488 <col:27> 'int' 7
    `-BinaryOperator 0x267a2a92720 <line:73:5, col:12> 'int' '='
      |-UnaryOperator 0x267a2a926d0 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x267a2a926b8 <col:6> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x267a2a92698 <col:6> 'int *' lvalue ParmVar 0x267a2a8c470 'num' 'int *'
      `-ImplicitCastExpr 0x267a2a92708 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x267a2a926e8 <col:12> 'int' lvalue Var 0x267a2a8c7b8 'n' 'int'
