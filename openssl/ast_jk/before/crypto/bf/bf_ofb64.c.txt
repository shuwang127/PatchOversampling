TranslationUnitDecl 0x1eb79863c38 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1eb798644d0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1eb798641d0 '__int128'
|-TypedefDecl 0x1eb79864540 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1eb798641f0 'unsigned __int128'
|-TypedefDecl 0x1eb79864878 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1eb79864630 'struct __NSConstantString_tag'
|   `-Record 0x1eb79864598 '__NSConstantString_tag'
|-TypedefDecl 0x1eb798648e8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1eb79863e10 'unsigned long long'
|-TypedefDecl 0x1eb79864980 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1eb79864940 'char *'
|   `-BuiltinType 0x1eb79863cd0 'char'
|-TypedefDecl 0x1eb798649f0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1eb79864940 'char *'
|   `-BuiltinType 0x1eb79863cd0 'char'
`-FunctionDecl 0x1eb7b2ac1b8 <.//openssl//file_jk/before\crypto\bf\bf_ofb64.c:18:1, line:61:1> line:18:6 invalid BF_ofb64_encrypt 'void (const unsigned char *, unsigned char *, long, const int *, unsigned char *, int *)'
  |-ParmVarDecl 0x1eb79864a90 <col:23, col:44> col:44 used in 'const unsigned char *'
  |-ParmVarDecl 0x1eb79864b40 <col:48, col:63> col:63 used out 'unsigned char *'
  |-ParmVarDecl 0x1eb79864bc0 <line:19:23, col:28> col:28 used length 'long'
  |-ParmVarDecl 0x1eb7b2abf78 <col:36, col:50> col:50 invalid schedule 'const int *'
  |-ParmVarDecl 0x1eb7b2abff8 <line:20:23, col:38> col:38 used ivec 'unsigned char *'
  |-ParmVarDecl 0x1eb7b2ac0a0 <col:44, col:49> col:49 used num 'int *'
  `-CompoundStmt 0x1eb7b2b2548 <line:21:1, line:61:1>
    |-DeclStmt 0x1eb7b2ac320 <line:22:5, col:31>
    | `-VarDecl 0x1eb7b2ac2b8 <col:5, col:22> col:22 invalid v0 'int' register
    |-DeclStmt 0x1eb7b2ac438 <line:23:5, col:26>
    | `-VarDecl 0x1eb7b2ac350 <col:5, col:23> col:18 used n 'int' register cinit
    |   `-ImplicitCastExpr 0x1eb7b2ac420 <col:22, col:23> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x1eb7b2ac408 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x1eb7b2ac3f0 <col:23> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x1eb7b2ac3b8 <col:23> 'int *' lvalue ParmVar 0x1eb7b2ac0a0 'num' 'int *'
    |-DeclStmt 0x1eb7b2ac520 <line:24:5, col:29>
    | `-VarDecl 0x1eb7b2ac468 <col:5, col:23> col:19 used l 'long' register cinit
    |   `-ImplicitCastExpr 0x1eb7b2ac508 <col:23> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x1eb7b2ac4d0 <col:23> 'long' lvalue ParmVar 0x1eb79864bc0 'length' 'long'
    |-DeclStmt 0x1eb7b2ac648 <line:25:5, col:23>
    | `-VarDecl 0x1eb7b2ac5e0 <col:5, col:22> col:19 used d 'unsigned char [8]'
    |-DeclStmt 0x1eb7b2ac6e0 <line:26:5, col:22>
    | `-VarDecl 0x1eb7b2ac678 <col:5, col:20> col:20 used dp 'char *' register
    |-DeclStmt 0x1eb7b2ac778 <line:28:5, col:22>
    | `-VarDecl 0x1eb7b2ac710 <col:5, col:20> col:20 used iv 'unsigned char *'
    |-DeclStmt 0x1eb7b2ac838 <line:29:5, col:17>
    | `-VarDecl 0x1eb7b2ac7a8 <col:5, col:16> col:9 used save 'int' cinit
    |   `-IntegerLiteral 0x1eb7b2ac810 <col:16> 'int' 0
    |-BinaryOperator 0x1eb7b2ac918 <line:31:5, col:27> 'unsigned char *' '='
    | |-DeclRefExpr 0x1eb7b2ac850 <col:5> 'unsigned char *' lvalue Var 0x1eb7b2ac710 'iv' 'unsigned char *'
    | `-CStyleCastExpr 0x1eb7b2ac8f0 <col:10, col:27> 'unsigned char *' <NoOp>
    |   `-ImplicitCastExpr 0x1eb7b2ac8d8 <col:27> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x1eb7b2ac888 <col:27> 'unsigned char *' lvalue ParmVar 0x1eb7b2abff8 'ivec' 'unsigned char *'
    |-BinaryOperator 0x1eb7b2ae670 <line:36:5, col:18> 'char *' '='
    | |-DeclRefExpr 0x1eb7b2ae5a8 <col:5> 'char *' lvalue Var 0x1eb7b2ac678 'dp' 'char *'
    | `-CStyleCastExpr 0x1eb7b2ae648 <col:10, col:18> 'char *' <BitCast>
    |   `-ImplicitCastExpr 0x1eb7b2ae630 <col:18> 'unsigned char *' <ArrayToPointerDecay> part_of_explicit_cast
    |     `-DeclRefExpr 0x1eb7b2ae5e0 <col:18> 'unsigned char [8]' lvalue Var 0x1eb7b2ac5e0 'd' 'unsigned char [8]'
    |-WhileStmt 0x1eb7b2a9b50 <line:39:5, line:51:5>
    | |-UnaryOperator 0x1eb7b2aed78 <line:39:12, col:13> 'long' postfix '--'
    | | `-DeclRefExpr 0x1eb7b2aed40 <col:12> 'long' lvalue Var 0x1eb7b2ac468 'l' 'long'
    | `-CompoundStmt 0x1eb7b2a9b28 <col:17, line:51:5>
    |   |-IfStmt 0x1eb7b2a9790 <line:40:9, line:48:9>
    |   | |-BinaryOperator 0x1eb7b2aee08 <line:40:13, col:18> 'int' '=='
    |   | | |-ImplicitCastExpr 0x1eb7b2aedf0 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1eb7b2aed90 <col:13> 'int' lvalue Var 0x1eb7b2ac350 'n' 'int'
    |   | | `-IntegerLiteral 0x1eb7b2aedc8 <col:18> 'int' 0
    |   | `-CompoundStmt 0x1eb7b2a9770 <col:21, line:48:9>
    |   |   |-BinaryOperator 0x1eb7b2a9000 <line:42:13, col:26> 'char *' '='
    |   |   | |-DeclRefExpr 0x1eb7b2a8f68 <col:13> 'char *' lvalue Var 0x1eb7b2ac678 'dp' 'char *'
    |   |   | `-CStyleCastExpr 0x1eb7b2a8fd8 <col:18, col:26> 'char *' <BitCast>
    |   |   |   `-ImplicitCastExpr 0x1eb7b2a8fc0 <col:26> 'unsigned char *' <ArrayToPointerDecay> part_of_explicit_cast
    |   |   |     `-DeclRefExpr 0x1eb7b2a8f88 <col:26> 'unsigned char [8]' lvalue Var 0x1eb7b2ac5e0 'd' 'unsigned char [8]'
    |   |   `-UnaryOperator 0x1eb7b2a9758 <line:47:13, col:17> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x1eb7b2a9720 <col:13> 'int' lvalue Var 0x1eb7b2ac7a8 'save' 'int'
    |   |-BinaryOperator 0x1eb7b2a99e0 <line:49:9, col:33> 'unsigned char' '='
    |   | |-UnaryOperator 0x1eb7b2a9818 <col:9, col:16> 'unsigned char' lvalue prefix '*' cannot overflow
    |   | | `-ParenExpr 0x1eb7b2a97f8 <col:10, col:16> 'unsigned char *'
    |   | |   `-UnaryOperator 0x1eb7b2a97e0 <col:11, col:14> 'unsigned char *' postfix '++'
    |   | |     `-DeclRefExpr 0x1eb7b2a97a8 <col:11> 'unsigned char *' lvalue ParmVar 0x1eb79864b40 'out' 'unsigned char *'
    |   | `-ImplicitCastExpr 0x1eb7b2a99c8 <col:20, col:33> 'unsigned char' <IntegralCast>
    |   |   `-BinaryOperator 0x1eb7b2a99a8 <col:20, col:33> 'int' '^'
    |   |     |-ImplicitCastExpr 0x1eb7b2a9960 <col:20, col:26> 'int' <IntegralCast>
    |   |     | `-ImplicitCastExpr 0x1eb7b2a9948 <col:20, col:26> 'unsigned char' <LValueToRValue>
    |   |     |   `-UnaryOperator 0x1eb7b2a98a0 <col:20, col:26> 'const unsigned char' lvalue prefix '*' cannot overflow
    |   |     |     `-ParenExpr 0x1eb7b2a9880 <col:21, col:26> 'const unsigned char *'
    |   |     |       `-UnaryOperator 0x1eb7b2a9868 <col:22, col:24> 'const unsigned char *' postfix '++'
    |   |     |         `-DeclRefExpr 0x1eb7b2a9830 <col:22> 'const unsigned char *' lvalue ParmVar 0x1eb79864a90 'in' 'const unsigned char *'
    |   |     `-ImplicitCastExpr 0x1eb7b2a9990 <col:30, col:33> 'int' <IntegralCast>
    |   |       `-ImplicitCastExpr 0x1eb7b2a9978 <col:30, col:33> 'unsigned char' <LValueToRValue>
    |   |         `-ArraySubscriptExpr 0x1eb7b2a9928 <col:30, col:33> 'unsigned char' lvalue
    |   |           |-ImplicitCastExpr 0x1eb7b2a98f8 <col:30> 'unsigned char *' <ArrayToPointerDecay>
    |   |           | `-DeclRefExpr 0x1eb7b2a98b8 <col:30> 'unsigned char [8]' lvalue Var 0x1eb7b2ac5e0 'd' 'unsigned char [8]'
    |   |           `-ImplicitCastExpr 0x1eb7b2a9910 <col:32> 'int' <LValueToRValue>
    |   |             `-DeclRefExpr 0x1eb7b2a98d8 <col:32> 'int' lvalue Var 0x1eb7b2ac350 'n' 'int'
    |   `-BinaryOperator 0x1eb7b2a9b08 <line:50:9, col:23> 'int' '='
    |     |-DeclRefExpr 0x1eb7b2a9a00 <col:9> 'int' lvalue Var 0x1eb7b2ac350 'n' 'int'
    |     `-BinaryOperator 0x1eb7b2a9ae8 <col:13, col:23> 'int' '&'
    |       |-ParenExpr 0x1eb7b2a9aa0 <col:13, col:19> 'int'
    |       | `-BinaryOperator 0x1eb7b2a9a80 <col:14, col:18> 'int' '+'
    |       |   |-ImplicitCastExpr 0x1eb7b2a9a68 <col:14> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x1eb7b2a9a20 <col:14> 'int' lvalue Var 0x1eb7b2ac350 'n' 'int'
    |       |   `-IntegerLiteral 0x1eb7b2a9a40 <col:18> 'int' 1
    |       `-IntegerLiteral 0x1eb7b2a9ac0 <col:23> 'int' 7
    |-IfStmt 0x1eb7b2b2410 <line:52:5, line:58:5>
    | |-ImplicitCastExpr 0x1eb7b2a9b88 <line:52:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1eb7b2a9b68 <col:9> 'int' lvalue Var 0x1eb7b2ac7a8 'save' 'int'
    | `-CompoundStmt 0x1eb7b2b23f8 <col:15, line:58:5>
    |   `-BinaryOperator 0x1eb7b2a9c88 <line:55:9, col:31> 'unsigned char *' '='
    |     |-DeclRefExpr 0x1eb7b2a9bf0 <col:9> 'unsigned char *' lvalue Var 0x1eb7b2ac710 'iv' 'unsigned char *'
    |     `-CStyleCastExpr 0x1eb7b2a9c60 <col:14, col:31> 'unsigned char *' <NoOp>
    |       `-ImplicitCastExpr 0x1eb7b2a9c48 <col:31> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |         `-DeclRefExpr 0x1eb7b2a9c10 <col:31> 'unsigned char *' lvalue ParmVar 0x1eb7b2abff8 'ivec' 'unsigned char *'
    `-BinaryOperator 0x1eb7b2b2528 <line:60:5, col:12> 'int' '='
      |-UnaryOperator 0x1eb7b2b24d8 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x1eb7b2b24c0 <col:6> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x1eb7b2b24a0 <col:6> 'int *' lvalue ParmVar 0x1eb7b2ac0a0 'num' 'int *'
      `-ImplicitCastExpr 0x1eb7b2b2510 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1eb7b2b24f0 <col:12> 'int' lvalue Var 0x1eb7b2ac350 'n' 'int'
