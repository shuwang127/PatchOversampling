TranslationUnitDecl 0x28148760208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x28148760aa0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x281487607a0 '__int128'
|-TypedefDecl 0x28148760b10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x281487607c0 'unsigned __int128'
|-TypedefDecl 0x28148760e48 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x28148760c00 'struct __NSConstantString_tag'
|   `-Record 0x28148760b68 '__NSConstantString_tag'
|-TypedefDecl 0x28148760eb8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x281487603e0 'unsigned long long'
|-TypedefDecl 0x28148760f50 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x28148760f10 'char *'
|   `-BuiltinType 0x281487602a0 'char'
|-TypedefDecl 0x28148760fc0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x28148760f10 'char *'
|   `-BuiltinType 0x281487602a0 'char'
`-FunctionDecl 0x2814a016408 <.//openssl//file_jk/before\crypto\bf\bf_ofb64.c:18:1, line:61:1> line:18:6 invalid BF_ofb64_encrypt 'void (const unsigned char *, unsigned char *, long, const int *, unsigned char *, int *)'
  |-ParmVarDecl 0x28148761060 <col:23, col:44> col:44 used in 'const unsigned char *'
  |-ParmVarDecl 0x28148761110 <col:48, col:63> col:63 used out 'unsigned char *'
  |-ParmVarDecl 0x28148761190 <line:19:23, col:28> col:28 used length 'long'
  |-ParmVarDecl 0x2814a0161c8 <col:36, col:50> col:50 invalid schedule 'const int *'
  |-ParmVarDecl 0x2814a016248 <line:20:23, col:38> col:38 used ivec 'unsigned char *'
  |-ParmVarDecl 0x2814a0162f0 <col:44, col:49> col:49 used num 'int *'
  `-CompoundStmt 0x2814a01c798 <line:21:1, line:61:1>
    |-DeclStmt 0x2814a016570 <line:22:5, col:31>
    | `-VarDecl 0x2814a016508 <col:5, col:22> col:22 invalid v0 'int' register
    |-DeclStmt 0x2814a016688 <line:23:5, col:26>
    | `-VarDecl 0x2814a0165a0 <col:5, col:23> col:18 used n 'int' register cinit
    |   `-ImplicitCastExpr 0x2814a016670 <col:22, col:23> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x2814a016658 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x2814a016640 <col:23> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x2814a016608 <col:23> 'int *' lvalue ParmVar 0x2814a0162f0 'num' 'int *'
    |-DeclStmt 0x2814a016770 <line:24:5, col:29>
    | `-VarDecl 0x2814a0166b8 <col:5, col:23> col:19 used l 'long' register cinit
    |   `-ImplicitCastExpr 0x2814a016758 <col:23> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x2814a016720 <col:23> 'long' lvalue ParmVar 0x28148761190 'length' 'long'
    |-DeclStmt 0x2814a016898 <line:25:5, col:23>
    | `-VarDecl 0x2814a016830 <col:5, col:22> col:19 used d 'unsigned char [8]'
    |-DeclStmt 0x2814a016930 <line:26:5, col:22>
    | `-VarDecl 0x2814a0168c8 <col:5, col:20> col:20 used dp 'char *' register
    |-DeclStmt 0x2814a0169c8 <line:28:5, col:22>
    | `-VarDecl 0x2814a016960 <col:5, col:20> col:20 used iv 'unsigned char *'
    |-DeclStmt 0x2814a016a88 <line:29:5, col:17>
    | `-VarDecl 0x2814a0169f8 <col:5, col:16> col:9 used save 'int' cinit
    |   `-IntegerLiteral 0x2814a016a60 <col:16> 'int' 0
    |-BinaryOperator 0x2814a016b68 <line:31:5, col:27> 'unsigned char *' '='
    | |-DeclRefExpr 0x2814a016aa0 <col:5> 'unsigned char *' lvalue Var 0x2814a016960 'iv' 'unsigned char *'
    | `-CStyleCastExpr 0x2814a016b40 <col:10, col:27> 'unsigned char *' <NoOp>
    |   `-ImplicitCastExpr 0x2814a016b28 <col:27> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x2814a016ad8 <col:27> 'unsigned char *' lvalue ParmVar 0x2814a016248 'ivec' 'unsigned char *'
    |-BinaryOperator 0x2814a01b8f0 <line:36:5, col:18> 'char *' '='
    | |-DeclRefExpr 0x2814a01b828 <col:5> 'char *' lvalue Var 0x2814a0168c8 'dp' 'char *'
    | `-CStyleCastExpr 0x2814a01b8c8 <col:10, col:18> 'char *' <BitCast>
    |   `-ImplicitCastExpr 0x2814a01b8b0 <col:18> 'unsigned char *' <ArrayToPointerDecay> part_of_explicit_cast
    |     `-DeclRefExpr 0x2814a01b860 <col:18> 'unsigned char [8]' lvalue Var 0x2814a016830 'd' 'unsigned char [8]'
    |-WhileStmt 0x2814a014db0 <line:39:5, line:51:5>
    | |-UnaryOperator 0x2814a01bff8 <line:39:12, col:13> 'long' postfix '--'
    | | `-DeclRefExpr 0x2814a01bfc0 <col:12> 'long' lvalue Var 0x2814a0166b8 'l' 'long'
    | `-CompoundStmt 0x2814a014d88 <col:17, line:51:5>
    |   |-IfStmt 0x2814a0149f0 <line:40:9, line:48:9>
    |   | |-BinaryOperator 0x2814a01c088 <line:40:13, col:18> 'int' '=='
    |   | | |-ImplicitCastExpr 0x2814a01c070 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x2814a01c010 <col:13> 'int' lvalue Var 0x2814a0165a0 'n' 'int'
    |   | | `-IntegerLiteral 0x2814a01c048 <col:18> 'int' 0
    |   | `-CompoundStmt 0x2814a0149d0 <col:21, line:48:9>
    |   |   |-BinaryOperator 0x2814a014260 <line:42:13, col:26> 'char *' '='
    |   |   | |-DeclRefExpr 0x2814a0141c8 <col:13> 'char *' lvalue Var 0x2814a0168c8 'dp' 'char *'
    |   |   | `-CStyleCastExpr 0x2814a014238 <col:18, col:26> 'char *' <BitCast>
    |   |   |   `-ImplicitCastExpr 0x2814a014220 <col:26> 'unsigned char *' <ArrayToPointerDecay> part_of_explicit_cast
    |   |   |     `-DeclRefExpr 0x2814a0141e8 <col:26> 'unsigned char [8]' lvalue Var 0x2814a016830 'd' 'unsigned char [8]'
    |   |   `-UnaryOperator 0x2814a0149b8 <line:47:13, col:17> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x2814a014980 <col:13> 'int' lvalue Var 0x2814a0169f8 'save' 'int'
    |   |-BinaryOperator 0x2814a014c40 <line:49:9, col:33> 'unsigned char' '='
    |   | |-UnaryOperator 0x2814a014a78 <col:9, col:16> 'unsigned char' lvalue prefix '*' cannot overflow
    |   | | `-ParenExpr 0x2814a014a58 <col:10, col:16> 'unsigned char *'
    |   | |   `-UnaryOperator 0x2814a014a40 <col:11, col:14> 'unsigned char *' postfix '++'
    |   | |     `-DeclRefExpr 0x2814a014a08 <col:11> 'unsigned char *' lvalue ParmVar 0x28148761110 'out' 'unsigned char *'
    |   | `-ImplicitCastExpr 0x2814a014c28 <col:20, col:33> 'unsigned char' <IntegralCast>
    |   |   `-BinaryOperator 0x2814a014c08 <col:20, col:33> 'int' '^'
    |   |     |-ImplicitCastExpr 0x2814a014bc0 <col:20, col:26> 'int' <IntegralCast>
    |   |     | `-ImplicitCastExpr 0x2814a014ba8 <col:20, col:26> 'unsigned char' <LValueToRValue>
    |   |     |   `-UnaryOperator 0x2814a014b00 <col:20, col:26> 'const unsigned char' lvalue prefix '*' cannot overflow
    |   |     |     `-ParenExpr 0x2814a014ae0 <col:21, col:26> 'const unsigned char *'
    |   |     |       `-UnaryOperator 0x2814a014ac8 <col:22, col:24> 'const unsigned char *' postfix '++'
    |   |     |         `-DeclRefExpr 0x2814a014a90 <col:22> 'const unsigned char *' lvalue ParmVar 0x28148761060 'in' 'const unsigned char *'
    |   |     `-ImplicitCastExpr 0x2814a014bf0 <col:30, col:33> 'int' <IntegralCast>
    |   |       `-ImplicitCastExpr 0x2814a014bd8 <col:30, col:33> 'unsigned char' <LValueToRValue>
    |   |         `-ArraySubscriptExpr 0x2814a014b88 <col:30, col:33> 'unsigned char' lvalue
    |   |           |-ImplicitCastExpr 0x2814a014b58 <col:30> 'unsigned char *' <ArrayToPointerDecay>
    |   |           | `-DeclRefExpr 0x2814a014b18 <col:30> 'unsigned char [8]' lvalue Var 0x2814a016830 'd' 'unsigned char [8]'
    |   |           `-ImplicitCastExpr 0x2814a014b70 <col:32> 'int' <LValueToRValue>
    |   |             `-DeclRefExpr 0x2814a014b38 <col:32> 'int' lvalue Var 0x2814a0165a0 'n' 'int'
    |   `-BinaryOperator 0x2814a014d68 <line:50:9, col:23> 'int' '='
    |     |-DeclRefExpr 0x2814a014c60 <col:9> 'int' lvalue Var 0x2814a0165a0 'n' 'int'
    |     `-BinaryOperator 0x2814a014d48 <col:13, col:23> 'int' '&'
    |       |-ParenExpr 0x2814a014d00 <col:13, col:19> 'int'
    |       | `-BinaryOperator 0x2814a014ce0 <col:14, col:18> 'int' '+'
    |       |   |-ImplicitCastExpr 0x2814a014cc8 <col:14> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x2814a014c80 <col:14> 'int' lvalue Var 0x2814a0165a0 'n' 'int'
    |       |   `-IntegerLiteral 0x2814a014ca0 <col:18> 'int' 1
    |       `-IntegerLiteral 0x2814a014d20 <col:23> 'int' 7
    |-IfStmt 0x2814a01c660 <line:52:5, line:58:5>
    | |-ImplicitCastExpr 0x2814a014de8 <line:52:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x2814a014dc8 <col:9> 'int' lvalue Var 0x2814a0169f8 'save' 'int'
    | `-CompoundStmt 0x2814a01c648 <col:15, line:58:5>
    |   `-BinaryOperator 0x2814a014ee8 <line:55:9, col:31> 'unsigned char *' '='
    |     |-DeclRefExpr 0x2814a014e50 <col:9> 'unsigned char *' lvalue Var 0x2814a016960 'iv' 'unsigned char *'
    |     `-CStyleCastExpr 0x2814a014ec0 <col:14, col:31> 'unsigned char *' <NoOp>
    |       `-ImplicitCastExpr 0x2814a014ea8 <col:31> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |         `-DeclRefExpr 0x2814a014e70 <col:31> 'unsigned char *' lvalue ParmVar 0x2814a016248 'ivec' 'unsigned char *'
    `-BinaryOperator 0x2814a01c778 <line:60:5, col:12> 'int' '='
      |-UnaryOperator 0x2814a01c728 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x2814a01c710 <col:6> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x2814a01c6f0 <col:6> 'int *' lvalue ParmVar 0x2814a0162f0 'num' 'int *'
      `-ImplicitCastExpr 0x2814a01c760 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x2814a01c740 <col:12> 'int' lvalue Var 0x2814a0165a0 'n' 'int'
