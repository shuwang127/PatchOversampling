TranslationUnitDecl 0x1fe1a803778 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1fe1a804010 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1fe1a803d10 '__int128'
|-TypedefDecl 0x1fe1a804080 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1fe1a803d30 'unsigned __int128'
|-TypedefDecl 0x1fe1a8043b8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1fe1a804170 'struct __NSConstantString_tag'
|   `-Record 0x1fe1a8040d8 '__NSConstantString_tag'
|-TypedefDecl 0x1fe1a804428 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1fe1a803950 'unsigned long long'
|-TypedefDecl 0x1fe1a8044c0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1fe1a804480 'char *'
|   `-BuiltinType 0x1fe1a803810 'char'
|-TypedefDecl 0x1fe1a804530 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1fe1a804480 'char *'
|   `-BuiltinType 0x1fe1a803810 'char'
|-TypedefDecl 0x1fe1a8045f0 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1fe1a803950 'unsigned long long'
|-TypedefDecl 0x1fe1a804660 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1fe1a804480 'char *'
|   `-BuiltinType 0x1fe1a803810 'char'
|-FunctionDecl 0x1fe1c3bd400 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1fe1c3bd4a0 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1fe1c3bd510 <col:21> Implicit
|-FunctionDecl 0x1fe1c3bd568 prev 0x1fe1c3bd400 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1fe1c3bd290 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1fe1c3bd658 <col:21> Inherited Implicit
|-TypedefDecl 0x1fe1c3bd698 prev 0x1fe1a804428 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1fe1a803950 'unsigned long long'
|-TypedefDecl 0x1fe1c3bd740 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1fe1c3bd710 'size_t' sugar
|   |-Typedef 0x1fe1c3bd698 'size_t'
|   `-BuiltinType 0x1fe1a803950 'unsigned long long'
|-TypedefDecl 0x1fe1c3bd7b0 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1fe1a8038b0 'long long'
|-TypedefDecl 0x1fe1c3bd820 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1fe1a8038b0 'long long'
|-TypedefDecl 0x1fe1c3bd890 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1fe1a8038f0 'unsigned short'
|-TypedefDecl 0x1fe1c3bd900 <line:541:1, col:24> col:24 referenced wint_t 'unsigned short'
| `-BuiltinType 0x1fe1a8038f0 'unsigned short'
|-TypedefDecl 0x1fe1c3bd970 <line:542:1, col:24> col:24 referenced wctype_t 'unsigned short'
| `-BuiltinType 0x1fe1a8038f0 'unsigned short'
|-TypedefDecl 0x1fe1c3bd9e0 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x1fe1a803870 'int'
|-TypedefDecl 0x1fe1c3bda50 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1fe1a803890 'long'
|-TypedefDecl 0x1fe1c3bdac0 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1fe1a8038b0 'long long'
|-TypedefDecl 0x1fe1c3bdb50 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1fe1c3bdb20 '__time64_t' sugar
|   |-Typedef 0x1fe1c3bdac0 '__time64_t'
|   `-BuiltinType 0x1fe1a8038b0 'long long'
|-FunctionDecl 0x1fe1c3bdcc8 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1fe1c3bdee8 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1fe1c3fa590 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1fe1c3be028 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c3be0a0 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c3be118 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c3be198 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1fe1c3fa330 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1fe1c3fa670 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1fe1c3fa730 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1fe1c3fa8a0 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1fe1c3fa850 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1fe1c3fa7f0 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1fe1c3fa710 'struct threadlocaleinfostruct'
|       `-Record 0x1fe1c4023b0 'threadlocaleinfostruct'
|-TypedefDecl 0x1fe1c3fa9b0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1fe1c3fa960 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1fe1c3fa900 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1fe1c3fa7d0 'struct threadmbcinfostruct'
|       `-Record 0x1fe1c3fa730 'threadmbcinfostruct'
|-RecordDecl 0x1fe1c3faa08 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1fe1c3faac0 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1fe1c3fab80 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1fe1c3fac10 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1fe1c3faca0 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1fe1c3fad58 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1fe1c3fad00 'struct localeinfo_struct' sugar
|   `-RecordType 0x1fe1c3fab60 'struct localeinfo_struct'
|     `-Record 0x1fe1c3faac0 'localeinfo_struct'
|-TypedefDecl 0x1fe1c3fae30 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1fe1c3fade0 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1fe1c3fad00 'struct localeinfo_struct' sugar
|     `-RecordType 0x1fe1c3fab60 'struct localeinfo_struct'
|       `-Record 0x1fe1c3faac0 'localeinfo_struct'
|-RecordDecl 0x1fe1c3faea8 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1fe1c3faf60 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1fe1c3fafd8 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1fe1c3fb098 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1fe1c3fb130 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1fe1c3fb1a0 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1fe1c3fb258 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1fe1c3fb200 'struct localerefcount' sugar
|   `-RecordType 0x1fe1c3faf40 'struct localerefcount'
|     `-Record 0x1fe1c3faea8 'localerefcount'
|-RecordDecl 0x1fe1c4023b0 prev 0x1fe1c3fa670 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1fe1c402430 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1fe1c4024a8 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1fe1c402518 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1fe1c402588 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1fe1c4025f8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1fe1c4027b8 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1fe1c402828 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1fe1c402898 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1fe1c402908 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1fe1c402978 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1fe1c4029e8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1fe1c402a40 parent 0x1fe1a803778 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1fe1c402bd0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1fe1c402c40 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1fe1c402cb0 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1fe1c402d20 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1fe1c402dc0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1fe1c402e30 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1fe1c402f40 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1fe1c403078 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1fe1c403128 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1fe1c4030d0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1fe1c3fa710 'struct threadlocaleinfostruct'
|     `-Record 0x1fe1c4023b0 'threadlocaleinfostruct'
|-RecordDecl 0x1fe1c4031c0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:63:1, line:72:9> line:63:8 struct _iobuf definition
| |-MaxFieldAlignmentAttr 0x1fe1c403280 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1fe1c4032f8 <line:64:9, col:15> col:15 _ptr 'char *'
| |-FieldDecl 0x1fe1c4033c0 <line:65:9, col:15> col:15 _cnt 'int'
| |-FieldDecl 0x1fe1c403430 <line:66:9, col:15> col:15 _base 'char *'
| |-FieldDecl 0x1fe1c4034a0 <line:67:9, col:15> col:15 _flag 'int'
| |-FieldDecl 0x1fe1c403510 <line:68:9, col:15> col:15 _file 'int'
| |-FieldDecl 0x1fe1c403580 <line:69:9, col:15> col:15 _charbuf 'int'
| |-FieldDecl 0x1fe1c4035f0 <line:70:9, col:15> col:15 _bufsiz 'int'
| `-FieldDecl 0x1fe1c403660 <line:71:9, col:15> col:15 _tmpfname 'char *'
|-TypedefDecl 0x1fe1c403710 <line:73:1, col:23> col:23 referenced FILE 'struct _iobuf':'struct _iobuf'
| `-ElaboratedType 0x1fe1c4036c0 'struct _iobuf' sugar
|   `-RecordType 0x1fe1c403260 'struct _iobuf'
|     `-Record 0x1fe1c4031c0 '_iobuf'
|-FunctionDecl 0x1fe1c403948 <line:137:9, col:39> col:24 __iob_func 'FILE *(void) __attribute__((cdecl))':'FILE *(void)'
|-TypedefDecl 0x1fe1c403a18 <line:144:1, col:17> col:17 referenced fpos_t 'long long'
| `-BuiltinType 0x1fe1a8038b0 'long long'
|-FunctionDecl 0x1fe1c403bf8 <line:175:24, col:65> col:36 _filbuf 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c403a80 <col:52, col:59> col:59 _File 'FILE *'
|-FunctionDecl 0x1fe1c403ef0 <line:176:28, col:82> col:40 _flsbuf 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1fe1c403cd0 <col:53, col:57> col:57 _Ch 'int'
| `-ParmVarDecl 0x1fe1c403d48 <col:70, col:77> col:77 _File 'FILE *'
|-FunctionDecl 0x1fe1c4042a0 <line:178:24, col:121> col:39 _fsopen 'FILE *(const char *, const char *, int) __attribute__((cdecl))':'FILE *(const char *, const char *, int)'
| |-ParmVarDecl 0x1fe1c403fd0 <col:54, col:67> col:67 _Filename 'const char *'
| |-ParmVarDecl 0x1fe1c404050 <col:85, col:98> col:98 _Mode 'const char *'
| `-ParmVarDecl 0x1fe1c4040d0 <col:110, col:114> col:114 _ShFlag 'int'
|-FunctionDecl 0x1fe1c404540 <line:180:9, col:51> col:22 clearerr 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1fe1c4043d0 <col:39, col:46> col:46 _File 'FILE *'
|-FunctionDecl 0x1fe1c404770 <line:182:28, col:76> col:44 clearerr_s 'errno_t (FILE *) __attribute__((cdecl))':'errno_t (FILE *)'
| `-ParmVarDecl 0x1fe1c404630 <col:63, col:70> col:70 _File 'FILE *'
|-FunctionDecl 0x1fe1c404920 <line:184:28, col:67> col:40 fclose 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c404840 <col:55, col:62> col:62 _File 'FILE *'
|-FunctionDecl 0x1fe1c404b10 <line:185:28, col:55> col:40 _fcloseall 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1fe1c404e08 <line:187:24, col:94> col:39 _fdopen 'FILE *(int, const char *) __attribute__((cdecl))':'FILE *(int, const char *)'
| |-ParmVarDecl 0x1fe1c404be0 <col:52, col:56> col:56 _FileHandle 'int'
| `-ParmVarDecl 0x1fe1c404c60 <col:76, col:89> col:89 _Mode 'const char *'
|-FunctionDecl 0x1fe1c404fc0 <line:189:24, col:58> col:36 feof 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c404ee0 <col:46, col:53> col:53 _File 'FILE *'
|-FunctionDecl 0x1fe1c405170 <line:190:24, col:60> col:36 ferror 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c405090 <col:48, col:55> col:55 _File 'FILE *'
|-FunctionDecl 0x1fe1c405320 <line:191:28, col:71> col:40 fflush 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c405240 <col:59, col:66> col:66 _File 'FILE *'
|-FunctionDecl 0x1fe1c4054e8 <line:192:28, col:66> col:40 fgetc 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c405408 <col:54, col:61> col:61 _File 'FILE *'
|-FunctionDecl 0x1fe1c405678 <line:193:28, col:54> col:40 _fgetchar 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1fe1c4059e0 <line:194:28, col:90> col:40 fgetpos 'int (FILE *, fpos_t *) __attribute__((cdecl))':'int (FILE *, fpos_t *)'
| |-ParmVarDecl 0x1fe1c405740 <col:56, col:63> col:63 _File 'FILE *'
| `-ParmVarDecl 0x1fe1c405838 <col:77, col:86> col:86 _Pos 'fpos_t *'
|-FunctionDecl 0x1fe1c405d98 <line:195:28, col:128> col:43 fgets 'char *(char *, int, FILE *) __attribute__((cdecl))':'char *(char *, int, FILE *)'
| |-ParmVarDecl 0x1fe1c405ac0 <col:75, col:82> col:82 _Buf 'char *'
| |-ParmVarDecl 0x1fe1c405b40 <col:93, col:97> col:97 _MaxCount 'int'
| `-ParmVarDecl 0x1fe1c405bb8 <col:116, col:123> col:123 _File 'FILE *'
|-FunctionDecl 0x1fe1c405f58 <line:197:24, col:61> col:36 _fileno 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c405e78 <col:49, col:56> col:56 _File 'FILE *'
|-FunctionDecl 0x1fe1c406220 <line:204:24, col:117> col:39 _tempnam 'char *(const char *, const char *) __attribute__((cdecl))':'char *(const char *, const char *)'
| |-ParmVarDecl 0x1fe1c406030 <col:59, col:72> col:72 _DirName 'const char *'
| `-ParmVarDecl 0x1fe1c4060b0 <col:93, col:106> col:106 _FilePrefix 'const char *'
|-FunctionDecl 0x1fe1c40b440 <line:210:28, col:54> col:40 _flushall 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1fe1c40b838 <line:211:72> col:72 implicit fopen 'FILE *(const char *, const char *)' extern
| |-ParmVarDecl 0x1fe1c40b8d8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c40b940 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c40b9b8 prev 0x1fe1c40b838 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:211:134> col:72 fopen 'FILE *(const char *, const char *)'
| |-ParmVarDecl 0x1fe1c40b610 <col:85, col:98> col:98 _Filename 'const char *'
| |-ParmVarDecl 0x1fe1c40b690 <col:116, col:129> col:129 _Mode 'const char *'
| `-DeprecatedAttr 0x1fe1c40ba68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c40bee0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:213:28, col:149> col:44 fopen_s 'errno_t (FILE **, const char *, const char *) __attribute__((cdecl))':'errno_t (FILE **, const char *, const char *)'
| |-ParmVarDecl 0x1fe1c40bc10 <col:78, col:86> col:86 _File 'FILE **'
| |-ParmVarDecl 0x1fe1c40bc90 <col:100, col:113> col:113 _Filename 'const char *'
| `-ParmVarDecl 0x1fe1c40bd10 <col:131, col:144> col:144 _Mode 'const char *'
|-FunctionDecl 0x1fe1c40c200 <line:215:40> col:40 implicit fprintf 'int (FILE *, const char *, ...)' extern
| |-ParmVarDecl 0x1fe1c40c2a0 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x1fe1c40c308 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1fe1c40c380 <col:40> Implicit printf 2 3
|-FunctionDecl 0x1fe1c407400 prev 0x1fe1c40c200 <col:28, col:125> col:40 fprintf 'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1fe1c40bfc0 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c40c040 <col:100, col:113> col:113 _Format 'const char *'
| `-FormatAttr 0x1fe1c4074f8 <col:40> Inherited printf 2 3
|-FunctionDecl 0x1fe1c4076c0 <line:217:28, col:127> col:40 fprintf_s 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1fe1c407540 <col:58, col:65> col:65 _File 'FILE *'
| `-ParmVarDecl 0x1fe1c4075c0 <col:102, col:115> col:115 _Format 'const char *'
|-FunctionDecl 0x1fe1c407918 <line:219:28, col:80> col:40 fputc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1fe1c4077a0 <col:51, col:55> col:55 _Ch 'int'
| `-ParmVarDecl 0x1fe1c407818 <col:68, col:75> col:75 _File 'FILE *'
|-FunctionDecl 0x1fe1c407b48 <line:220:28, col:62> col:40 _fputchar 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c4079f8 <col:55, col:59> col:59 _Ch 'int'
|-FunctionDecl 0x1fe1c407e40 <line:221:28, col:92> col:40 fputs 'int (const char *, FILE *) __attribute__((cdecl))':'int (const char *, FILE *)'
| |-ParmVarDecl 0x1fe1c407c20 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1fe1c407c98 <col:80, col:87> col:87 _File 'FILE *'
|-FunctionDecl 0x1fe1c4082d8 <line:222:43> col:43 implicit fread 'unsigned long long (void *, unsigned long long, unsigned long long, FILE *)' extern
| |-ParmVarDecl 0x1fe1c408378 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1fe1c40c450 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1fe1c40c4b8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1fe1c40c520 <<invalid sloc>> <invalid sloc> 'FILE *'
|-FunctionDecl 0x1fe1c40c5a8 prev 0x1fe1c4082d8 <col:28, col:171> col:43 fread 'unsigned long long (void *, unsigned long long, unsigned long long, FILE *)'
| |-ParmVarDecl 0x1fe1c407f20 <col:89, col:96> col:96 _DstBuf 'void *'
| |-ParmVarDecl 0x1fe1c407f98 <col:110, col:117> col:117 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c408010 <col:136, col:143> col:143 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c408088 <col:159, col:166> col:166 _File 'FILE *'
|-FunctionDecl 0x1fe1c40cab0 <line:224:28, col:195> col:43 fread_s 'size_t (void *, size_t, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1fe1c40c698 <col:91, col:98> col:98 _DstBuf 'void *'
| |-ParmVarDecl 0x1fe1c40c710 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c40c788 <col:134, col:141> col:141 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c40c800 <col:160, col:167> col:167 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c40c878 <col:183, col:190> col:190 _File 'FILE *'
|-FunctionDecl 0x1fe1c40cf70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:226:160> col:74 freopen 'FILE *(const char *, const char *, FILE *) __attribute__((cdecl))':'FILE *(const char *, const char *, FILE *)'
| |-ParmVarDecl 0x1fe1c40cca0 <col:89, col:102> col:102 _Filename 'const char *'
| |-ParmVarDecl 0x1fe1c40cd20 <col:120, col:133> col:133 _Mode 'const char *'
| |-ParmVarDecl 0x1fe1c40cd98 <col:148, col:155> col:155 _File 'FILE *'
| `-DeprecatedAttr 0x1fe1c40d028 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using freopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c40d508 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:228:28, col:176> col:44 freopen_s 'errno_t (FILE **, const char *, const char *, FILE *) __attribute__((cdecl))':'errno_t (FILE **, const char *, const char *, FILE *)'
| |-ParmVarDecl 0x1fe1c40d170 <col:80, col:88> col:88 _File 'FILE **'
| |-ParmVarDecl 0x1fe1c40d1f0 <col:102, col:115> col:115 _Filename 'const char *'
| |-ParmVarDecl 0x1fe1c40d270 <col:133, col:146> col:146 _Mode 'const char *'
| `-ParmVarDecl 0x1fe1c40d2e8 <col:161, col:168> col:168 _OldFile 'FILE *'
|-FunctionDecl 0x1fe1c40d8b0 <line:230:70> col:70 implicit fscanf 'int (FILE *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x1fe1c40d950 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x1fe1c40d9b8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1fe1c40da30 <col:70> Implicit scanf 2 3
|-FunctionDecl 0x1fe1c40da98 prev 0x1fe1c40d8b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:230:153> col:70 fscanf 'int (FILE *restrict, const char *restrict, ...)'
| |-ParmVarDecl 0x1fe1c40d6e8 <col:85, col:92> col:92 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c40d768 <col:128, col:141> col:141 _Format 'const char *'
| |-FormatAttr 0x1fe1c40dc78 <col:70> Inherited scanf 2 3
| `-DeprecatedAttr 0x1fe1c40db48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c40e0b8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:231:201> col:77 _fscanf_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c40ddb8 <col:95, col:102> col:102 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c40de38 <col:148, col:161> col:161 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c40ded0 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c40e170 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4063f0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:235:28, col:127> col:40 fscanf_s 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1fe1c40e2b0 <col:57, col:64> col:64 _File 'FILE *'
| `-ParmVarDecl 0x1fe1c40e330 <col:102, col:115> col:115 _Format 'const char *'
|-FunctionDecl 0x1fe1c4066e0 <line:237:28, col:168> col:40 _fscanf_s_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c4064c8 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c406548 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c4065c0 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c406a40 <line:239:28, col:94> col:40 fsetpos 'int (FILE *, const fpos_t *) __attribute__((cdecl))':'int (FILE *, const fpos_t *)'
| |-ParmVarDecl 0x1fe1c4067c0 <col:56, col:63> col:63 _File 'FILE *'
| `-ParmVarDecl 0x1fe1c406898 <col:75, col:90> col:90 _Pos 'const fpos_t *'
|-FunctionDecl 0x1fe1c406df8 <line:240:28, col:103> col:40 fseek 'int (FILE *, long, int) __attribute__((cdecl))':'int (FILE *, long, int)'
| |-ParmVarDecl 0x1fe1c406b18 <col:54, col:61> col:61 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c406b98 <col:73, col:78> col:78 _Offset 'long'
| `-ParmVarDecl 0x1fe1c406c18 <col:92, col:96> col:96 _Origin 'int'
|-FunctionDecl 0x1fe1c407058 <line:241:24, col:63> col:37 ftell 'long (FILE *) __attribute__((cdecl))':'long (FILE *)'
| `-ParmVarDecl 0x1fe1c406ed8 <col:51, col:58> col:58 _File 'FILE *'
|-FunctionDecl 0x1fe1c408458 <line:243:28, col:110> col:40 _fseeki64 'int (FILE *, long long, int) __attribute__((cdecl))':'int (FILE *, long long, int)'
| |-ParmVarDecl 0x1fe1c407128 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c4071a8 <col:77, col:85> col:85 _Offset 'long long'
| `-ParmVarDecl 0x1fe1c407228 <col:99, col:103> col:103 _Origin 'int'
|-FunctionDecl 0x1fe1c4086b8 <line:244:24, col:70> col:40 _ftelli64 'long long (FILE *) __attribute__((cdecl))':'long long (FILE *)'
| `-ParmVarDecl 0x1fe1c408538 <col:58, col:65> col:65 _File 'FILE *'
|-FunctionDecl 0x1fe1c408b78 <line:246:43> col:43 implicit fwrite 'unsigned long long (const void *, unsigned long long, unsigned long long, FILE *)' extern
| |-ParmVarDecl 0x1fe1c408c18 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1fe1c408c80 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1fe1c408ce8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1fe1c408d50 <<invalid sloc>> <invalid sloc> 'FILE *'
|-FunctionDecl 0x1fe1c408dd8 prev 0x1fe1c408b78 <col:28, col:159> col:43 fwrite 'unsigned long long (const void *, unsigned long long, unsigned long long, FILE *)'
| |-ParmVarDecl 0x1fe1c4087c0 <col:81, col:94> col:94 _Str 'const void *'
| |-ParmVarDecl 0x1fe1c408838 <col:105, col:112> col:112 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c4088b0 <col:124, col:131> col:131 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c408928 <col:147, col:154> col:154 _File 'FILE *'
|-FunctionDecl 0x1fe1c408fa0 <line:247:24, col:61> col:36 getc 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c408ec0 <col:49, col:56> col:56 _File 'FILE *'
|-FunctionDecl 0x1fe1c409130 <line:248:24, col:48> col:36 getchar 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1fe1c4092b8 <line:249:24, col:53> col:36 _getmaxstdio 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1fe1c40f640 <line:251:9, col:84> col:24 gets_s 'char *(char *, rsize_t) __attribute__((cdecl))':'char *(char *, rsize_t)'
| |-ParmVarDecl 0x1fe1c409388 <col:53, col:60> col:60 _Buf 'char *'
| `-ParmVarDecl 0x1fe1c40f490 <col:71, col:79> col:79 _Size 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1fe1c40f968 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:254:80 gets 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1fe1c40f820 <col:139, col:145> col:145 _Buffer 'char *'
| `-DeprecatedAttr 0x1fe1c40fa10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using gets_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c40fc30 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:255:16, col:54> col:28 _getw 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c40fb50 <col:42, col:49> col:49 _File 'FILE *'
|-FunctionDecl 0x1fe1c40fe50 <line:258:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x1fe1c40fd08 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x1fe1c410000 <line:261:28, col:68> col:40 _pclose 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c40ff20 <col:56, col:63> col:63 _File 'FILE *'
|-FunctionDecl 0x1fe1c410250 <line:262:24, col:101> col:39 _popen 'FILE *(const char *, const char *) __attribute__((cdecl))':'FILE *(const char *, const char *)'
| |-ParmVarDecl 0x1fe1c4100d8 <col:53, col:66> col:66 _Command 'const char *'
| `-ParmVarDecl 0x1fe1c410158 <col:83, col:96> col:96 _Mode 'const char *'
|-FunctionDecl 0x1fe1c410490 <line:264:40> col:40 implicit printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x1fe1c410530 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1fe1c4105a0 <col:40> Implicit printf 1 2
|-FunctionDecl 0x1fe1c410608 prev 0x1fe1c410490 <col:28, col:102> col:40 printf 'int (const char *, ...)'
| |-ParmVarDecl 0x1fe1c410330 <col:77, col:90> col:90 _Format 'const char *'
| `-FormatAttr 0x1fe1c4106f8 <col:40> Inherited printf 1 2
|-FunctionDecl 0x1fe1c410828 <line:266:28, col:104> col:40 printf_s 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1fe1c410748 <col:79, col:92> col:92 _Format 'const char *'
|-FunctionDecl 0x1fe1c410a78 <line:268:28, col:79> col:40 putc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1fe1c410900 <col:50, col:54> col:54 _Ch 'int'
| `-ParmVarDecl 0x1fe1c410978 <col:67, col:74> col:74 _File 'FILE *'
|-FunctionDecl 0x1fe1c410c38 <line:269:28, col:60> col:40 putchar 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c410b58 <col:53, col:57> col:57 _Ch 'int'
|-FunctionDecl 0x1fe1c410e58 <line:270:28, col:69> col:40 puts 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1fe1c410d10 <col:52, col:65> col:65 _Str 'const char *'
|-FunctionDecl 0x1fe1c4110a8 <line:271:28, col:82> col:40 _putw 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1fe1c410f30 <col:51, col:55> col:55 _Word 'int'
| `-ParmVarDecl 0x1fe1c410fa8 <col:70, col:77> col:77 _File 'FILE *'
|-FunctionDecl 0x1fe1c411268 <line:274:9, col:57> col:21 remove 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1fe1c411188 <col:35, col:48> col:48 _Filename 'const char *'
|-FunctionDecl 0x1fe1c45f000 <line:275:24, col:109> col:36 rename 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1fe1c411340 <col:50, col:63> col:63 _OldFilename 'const char *'
| `-ParmVarDecl 0x1fe1c4113c0 <col:84, col:97> col:97 _NewFilename 'const char *'
|-FunctionDecl 0x1fe1c45f1c0 <line:276:9, col:58> col:21 _unlink 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1fe1c45f0e0 <col:36, col:49> col:49 _Filename 'const char *'
|-FunctionDecl 0x1fe1c45f450 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:278:89> col:53 unlink 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x1fe1c45f370 <col:67, col:80> col:80 _Filename 'const char *'
| `-DeprecatedAttr 0x1fe1c45f4f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _unlink. See online help for details." ""
|-FunctionDecl 0x1fe1c45f6f0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:281:9, col:49> col:22 rewind 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1fe1c45f618 <col:37, col:44> col:44 _File 'FILE *'
|-FunctionDecl 0x1fe1c45f880 <line:282:28, col:51> col:40 _rmtmp 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1fe1c45fb28 <line:283:69> col:69 implicit scanf 'int (const char *restrict, ...)' extern
| |-ParmVarDecl 0x1fe1c45fbc8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1fe1c45fc38 <col:69> Implicit scanf 1 2
|-FunctionDecl 0x1fe1c45fca0 prev 0x1fe1c45fb28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:283:129> col:69 scanf 'int (const char *restrict, ...)'
| |-ParmVarDecl 0x1fe1c45fa10 <col:104, col:117> col:117 _Format 'const char *'
| |-FormatAttr 0x1fe1c45fe78 <col:69> Inherited scanf 1 2
| `-DeprecatedAttr 0x1fe1c45fd48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c463280 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:284:177> col:76 _scanf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c463048 <col:124, col:137> col:137 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c4630c0 <col:155, col:165> col:165 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c463330 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _scanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c463558 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:288:40, col:116> col:52 scanf_s 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1fe1c463478 <col:91, col:104> col:104 _Format 'const char *'
|-FunctionDecl 0x1fe1c4637a8 <line:290:40, col:157> col:52 _scanf_s_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c463630 <col:104, col:117> col:117 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c4636a8 <col:135, col:145> col:145 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c463b68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:292:150> col:55 setbuf 'void (FILE *, char *) __attribute__((cdecl))':'void (FILE *, char *)'
| |-ParmVarDecl 0x1fe1c463940 <col:70, col:77> col:77 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c4639c0 <col:136, col:143> col:143 _Buffer 'char *'
| `-DeprecatedAttr 0x1fe1c463c18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using setvbuf instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c463e40 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:293:28, col:66> col:40 _setmaxstdio 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c463d60 <col:58, col:62> col:62 _Max 'int'
|-FunctionDecl 0x1fe1c45c048 <line:294:28, col:93> col:49 _set_output_format 'unsigned int (unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int)'
| `-ParmVarDecl 0x1fe1c45bf00 <col:73, col:86> col:86 _Format 'unsigned int'
|-FunctionDecl 0x1fe1c45c230 <line:295:28, col:72> col:49 _get_output_format 'unsigned int (void) __attribute__((cdecl))':'unsigned int (void)'
|-FunctionDecl 0x1fe1c45c680 <line:296:28, col:145> col:40 setvbuf 'int (FILE *, char *, int, size_t) __attribute__((cdecl))':'int (FILE *, char *, int, size_t)'
| |-ParmVarDecl 0x1fe1c45c2f8 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c45c378 <col:99, col:106> col:106 _Buf 'char *'
| |-ParmVarDecl 0x1fe1c45c3f8 <col:117, col:121> col:121 _Mode 'int'
| `-ParmVarDecl 0x1fe1c45c470 <col:133, col:140> col:140 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c45cb00 <line:297:40, col:213> col:52 _snprintf_s 'int (char *, size_t, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, ...)'
| |-ParmVarDecl 0x1fe1c45c770 <col:93, col:100> col:100 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c45c7e8 <col:114, col:121> col:121 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c45c860 <col:140, col:147> col:147 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c45c8e0 <col:188, col:201> col:201 _Format 'const char *'
|-FunctionDecl 0x1fe1c463f80 <line:300:40, col:188> col:52 sprintf_s 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1fe1c45cbf0 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c45cc68 <col:112, col:119> col:119 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c45cce8 <col:163, col:176> col:176 _Format 'const char *'
|-FunctionDecl 0x1fe1c464148 <line:303:24, col:101> col:36 _scprintf 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1fe1c464068 <col:76, col:89> col:89 _Format 'const char *'
|-FunctionDecl 0x1fe1c464520 <line:304:70> col:70 implicit sscanf 'int (const char *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x1fe1c4645c0 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1fe1c464628 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1fe1c4646a0 <col:70> Implicit scanf 2 3
|-FunctionDecl 0x1fe1c464708 prev 0x1fe1c464520 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:304:157> col:70 sscanf 'int (const char *restrict, const char *restrict, ...)'
| |-ParmVarDecl 0x1fe1c4642e0 <col:84, col:97> col:97 _Src 'const char *'
| |-ParmVarDecl 0x1fe1c464360 <col:132, col:145> col:145 _Format 'const char *'
| |-FormatAttr 0x1fe1c4648e8 <col:70> Inherited scanf 2 3
| `-DeprecatedAttr 0x1fe1c4647b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c464cd8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:305:205> col:77 _sscanf_l 'int (const char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c4649f8 <col:94, col:107> col:107 _Src 'const char *'
| |-ParmVarDecl 0x1fe1c464a78 <col:152, col:165> col:165 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c464af0 <col:183, col:193> col:193 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c464d90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _sscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c45e020 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:309:40, col:143> col:52 sscanf_s 'int (const char *, const char *, ...) __attribute__((cdecl))':'int (const char *, const char *, ...)'
| |-ParmVarDecl 0x1fe1c464ed8 <col:68, col:81> col:81 _Src 'const char *'
| `-ParmVarDecl 0x1fe1c45df20 <col:118, col:131> col:131 _Format 'const char *'
|-FunctionDecl 0x1fe1c45e318 <line:311:40, col:184> col:52 _sscanf_s_l 'int (const char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c45e100 <col:71, col:84> col:84 _Src 'const char *'
| |-ParmVarDecl 0x1fe1c45e180 <col:131, col:144> col:144 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c45e1f8 <col:162, col:172> col:172 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c45e7a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:312:217> col:76 _snscanf 'int (const char *, size_t, const char *, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1fe1c45e4c0 <col:121, col:134> col:134 _Src 'const char *'
| |-ParmVarDecl 0x1fe1c45e538 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c45e5b8 <col:192, col:205> col:205 _Format 'const char *'
| `-DeprecatedAttr 0x1fe1c45e860 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c45ee30 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:313:259> col:78 _snscanf_l 'int (const char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c45eaa0 <col:125, col:138> col:138 _Src 'const char *'
| |-ParmVarDecl 0x1fe1c45eb18 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c45eb98 <col:206, col:219> col:219 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c45ec10 <col:237, col:247> col:247 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c45ff40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4602a0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:314:40, col:197> col:52 _snscanf_s 'int (const char *, size_t, const char *, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1fe1c460088 <col:99, col:112> col:112 _Src 'const char *'
| |-ParmVarDecl 0x1fe1c460100 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c460180 <col:172, col:185> col:185 _Format 'const char *'
|-FunctionDecl 0x1fe1c460638 <line:315:40, col:237> col:52 _snscanf_s_l 'int (const char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c460388 <col:101, col:114> col:114 _Src 'const char *'
| |-ParmVarDecl 0x1fe1c460400 <col:125, col:132> col:132 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c460480 <col:184, col:197> col:197 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c4604f8 <col:215, col:225> col:225 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c460898 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:317:86> col:74 tmpfile 'FILE *(void) __attribute__((cdecl))':'FILE *(void)'
| `-DeprecatedAttr 0x1fe1c460938 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using tmpfile_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c460bf0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:319:28, col:96> col:44 tmpfile_s 'errno_t (FILE **) __attribute__((cdecl))':'errno_t (FILE **)'
| `-ParmVarDecl 0x1fe1c460a80 <col:83, col:91> col:91 _File 'FILE **'
|-FunctionDecl 0x1fe1c460f50 <line:320:28, col:106> col:44 tmpnam_s 'errno_t (char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t)'
| |-ParmVarDecl 0x1fe1c460cc8 <col:75, col:82> col:82 _Buf 'char *'
| `-ParmVarDecl 0x1fe1c460d40 <col:93, col:101> col:101 _Size 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1fe1c4611d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:323:79 tmpnam 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1fe1c4610f0 <col:113, col:119> col:119 _Buffer 'char *'
| `-DeprecatedAttr 0x1fe1c461278 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using tmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c461538 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:324:28, col:81> col:40 ungetc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1fe1c4613c0 <col:52, col:56> col:56 _Ch 'int'
| `-ParmVarDecl 0x1fe1c461438 <col:69, col:76> col:76 _File 'FILE *'
|-FunctionDecl 0x1fe1c461950 <line:325:40> col:40 implicit vfprintf 'int (FILE *, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1fe1c4619f0 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x1fe1c461a58 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1fe1c461ac0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1fe1c461b40 <col:40> Implicit printf 2 0
|-FunctionDecl 0x1fe1c461ba8 prev 0x1fe1c461950 <col:28, col:139> col:40 vfprintf 'int (FILE *, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1fe1c461610 <col:57, col:64> col:64 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c461690 <col:101, col:114> col:114 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c461708 <col:123, col:131> col:131 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1fe1c461ca8 <col:40> Inherited printf 2 0
|-FunctionDecl 0x1fe1c45cf10 <line:326:40> col:40 implicit vfscanf 'int (FILE *restrict, const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1fe1c45cfb0 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x1fe1c45d018 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1fe1c45d080 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1fe1c45d100 <col:40> Implicit scanf 2 0
|-FunctionDecl 0x1fe1c45d168 prev 0x1fe1c45cf10 <col:28, col:138> col:40 vfscanf 'int (FILE *restrict, const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1fe1c461cf0 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c461d70 <col:100, col:113> col:113 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c461de8 <col:122, col:130> col:130 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1fe1c45d268 <col:40> Inherited scanf 2 0
|-FunctionDecl 0x1fe1c45d4c8 <line:328:28, col:141> col:40 vfprintf_s 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c45d2b0 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c45d330 <col:103, col:116> col:116 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c45d3a8 <col:125, col:133> col:133 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c45d7c0 <line:329:28, col:140> col:40 vfscanf_s 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c45d5a8 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c45d628 <col:102, col:115> col:115 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c45d6a0 <col:124, col:132> col:132 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c45db08 <line:331:40> col:40 implicit vprintf 'int (const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1fe1c45dba8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1fe1c45dc10 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1fe1c45dc88 <col:40> Implicit printf 1 0
|-FunctionDecl 0x1fe1c45dcf0 prev 0x1fe1c45db08 <col:28, col:116> col:40 vprintf 'int (const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1fe1c45d8a8 <col:78, col:91> col:91 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c45d920 <col:100, col:108> col:108 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1fe1c45dde8 <col:40> Inherited printf 1 0
|-FunctionDecl 0x1fe1c4660d8 <line:332:40> col:40 implicit vscanf 'int (const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1fe1c466178 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1fe1c4661e0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1fe1c466258 <col:40> Implicit scanf 1 0
|-FunctionDecl 0x1fe1c4662c0 prev 0x1fe1c4660d8 <col:28, col:115> col:40 vscanf 'int (const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1fe1c45de38 <col:77, col:90> col:90 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c465fa0 <col:99, col:107> col:107 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1fe1c4663b8 <col:40> Inherited scanf 1 0
|-FunctionDecl 0x1fe1c466580 <line:334:28, col:118> col:40 vprintf_s 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1fe1c466408 <col:80, col:93> col:93 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c466480 <col:102, col:110> col:110 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c4667d8 <line:335:28, col:117> col:40 vscanf_s 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1fe1c466660 <col:79, col:92> col:92 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c4666d8 <col:101, col:109> col:109 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c466d38 <line:337:77> col:77 implicit vsnprintf 'int (char *, unsigned long long, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1fe1c466dd8 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1fe1c466e40 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1fe1c466ea8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1fe1c466f10 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1fe1c464f90 <col:77> Implicit printf 3 0
|-FunctionDecl 0x1fe1c464ff8 prev 0x1fe1c466d38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:337:218> col:77 vsnprintf 'int (char *, unsigned long long, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1fe1c466978 <col:111, col:118> col:118 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c4669f0 <col:132, col:139> col:139 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c466a70 <col:180, col:193> col:193 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c466ae8 <col:202, col:210> col:210 _ArgList 'va_list':'char *'
| |-FormatAttr 0x1fe1c4651e8 <col:77> Inherited printf 3 0
| `-DeprecatedAttr 0x1fe1c4650b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c465658 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:339:28, col:206> col:40 vsnprintf_s 'int (char *, size_t, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c465238 <col:77, col:84> col:84 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c4652b0 <col:98, col:105> col:105 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c465328 <col:120, col:127> col:127 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c4653a8 <col:168, col:181> col:181 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c465420 <col:190, col:198> col:198 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c465a98 <line:342:40, col:227> col:52 _vsnprintf_s 'int (char *, size_t, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c465750 <col:94, col:101> col:101 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c4657c8 <col:115, col:122> col:122 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c465840 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c4658c0 <col:189, col:202> col:202 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c465938 <col:211, col:219> col:219 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c465e68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2003:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:346:89 _snprintf 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1fe1c465c50 <col:182, col:188> col:188 _Dest 'char *'
| |-ParmVarDecl 0x1fe1c465cc8 <col:200, col:208> col:208 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c465d48 <col:246, col:260> col:260 _Format 'const char *'
| `-DeprecatedAttr 0x1fe1c465f20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c468430 <col:36, line:2004:164> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:346:100 _vsnprintf 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c468180 <col:182, col:188> col:188 _Dest 'char *'
| |-ParmVarDecl 0x1fe1c4681f8 <col:200, col:208> col:208 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c468278 <col:246, col:260> col:260 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c4682f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:2004:151, col:159> col:159 _Args 'va_list':'char *'
| `-DeprecatedAttr 0x1fe1c4684f0 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4688e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:349:21, col:183> col:33 vsprintf_s 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c468638 <col:73, col:80> col:80 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c4686b0 <col:94, col:101> col:101 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c468730 <col:145, col:158> col:158 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c4687a8 <col:167, col:175> col:175 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c468ca8 <line:351:40, col:149> col:52 vsscanf_s 'int (const char *, const char *, va_list) __attribute__((cdecl))':'int (const char *, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c4689d8 <col:62, col:75> col:75 _Src 'const char *'
| |-ParmVarDecl 0x1fe1c468a58 <col:111, col:124> col:124 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c468ad0 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c467050 <line:356:85> col:85 implicit sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x1fe1c4670f0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1fe1c467158 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1fe1c4671d0 <col:85> Implicit printf 2 3
|-FunctionDecl 0x1fe1c467238 prev 0x1fe1c467050 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1957:138> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:85 sprintf 'int (char *, const char *, ...)'
| |-ParmVarDecl 0x1fe1c468e50 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1fe1c468ed0 <col:171, col:185> col:185 _Format 'const char *'
| |-FormatAttr 0x1fe1c467418 <col:85> Inherited printf 2 3
| `-DeprecatedAttr 0x1fe1c4672e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c467840 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94> col:94 implicit vsprintf 'int (char *, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1fe1c4678e0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1fe1c467948 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1fe1c4679b0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1fe1c467a30 <col:94> Implicit printf 2 0
|-FunctionDecl 0x1fe1c467a98 prev 0x1fe1c467840 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1958:150> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94 vsprintf 'int (char *, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1fe1c467528 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1fe1c4675a8 <col:171, col:185> col:185 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c467620 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1958:137, col:145> col:145 _Args 'va_list':'char *'
| |-FormatAttr 0x1fe1c467c80 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94> Inherited printf 2 0
| `-DeprecatedAttr 0x1fe1c467b50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using vsprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c461f60 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:357:40> col:40 implicit vsscanf 'int (const char *restrict, const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1fe1c462000 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1fe1c462068 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1fe1c4620d0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1fe1c462150 <col:40> Implicit scanf 2 0
|-FunctionDecl 0x1fe1c4621b8 prev 0x1fe1c461f60 <col:28, col:138> col:40 vsscanf 'int (const char *restrict, const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1fe1c467cd0 <col:48, col:61> col:61 _srcBuf 'const char *'
| |-ParmVarDecl 0x1fe1c467d50 <col:100, col:113> col:113 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c467dc8 <col:122, col:130> col:130 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1fe1c4622b8 <col:40> Inherited scanf 2 0
|-FunctionDecl 0x1fe1c462480 <line:359:24, col:115> col:36 _vscprintf 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1fe1c462308 <col:77, col:90> col:90 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c462380 <col:99, col:107> col:107 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c462778 <line:360:28, col:170> col:40 _snprintf_c 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1fe1c462560 <col:76, col:83> col:83 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c4625d8 <col:97, col:104> col:104 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c462658 <col:145, col:158> col:158 _Format 'const char *'
|-FunctionDecl 0x1fe1c462b10 <line:361:28, col:183> col:40 _vsnprintf_c 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c462860 <col:77, col:83> col:83 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c4628d8 <col:97, col:104> col:104 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c462958 <col:145, col:158> col:158 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c4629d0 <col:167, col:175> col:175 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c462d78 <line:363:28, col:128> col:40 _fprintf_p 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1fe1c462bf8 <col:59, col:66> col:66 _File 'FILE *'
| `-ParmVarDecl 0x1fe1c462c78 <col:103, col:116> col:116 _Format 'const char *'
|-FunctionDecl 0x1fe1c470040 <line:364:28, col:105> col:40 _printf_p 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1fe1c462e58 <col:80, col:93> col:93 _Format 'const char *'
|-FunctionDecl 0x1fe1c470330 <line:365:28, col:168> col:40 _sprintf_p 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1fe1c470118 <col:77, col:84> col:84 _Dst 'char *'
| |-ParmVarDecl 0x1fe1c470190 <col:95, col:102> col:102 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c470210 <col:143, col:156> col:156 _Format 'const char *'
|-FunctionDecl 0x1fe1c470628 <line:366:28, col:142> col:40 _vfprintf_p 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c470410 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c470490 <col:104, col:117> col:117 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c470508 <col:126, col:134> col:134 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c470888 <line:367:28, col:119> col:40 _vprintf_p 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1fe1c470710 <col:81, col:94> col:94 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c470788 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c470c18 <line:368:28, col:182> col:40 _vsprintf_p 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c470968 <col:78, col:85> col:85 _Dst 'char *'
| |-ParmVarDecl 0x1fe1c4709e0 <col:96, col:103> col:103 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c470a60 <col:144, col:157> col:157 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c470ad8 <col:166, col:174> col:174 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c470de8 <line:369:24, col:103> col:36 _scprintf_p 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1fe1c470d08 <col:78, col:91> col:91 _Format 'const char *'
|-FunctionDecl 0x1fe1c469fe0 <line:370:24, col:117> col:36 _vscprintf_p 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1fe1c470ec0 <col:79, col:92> col:92 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c470f38 <col:101, col:109> col:109 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c46a1a0 <line:371:9, col:61> col:21 _set_printf_count_output 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c46a0c0 <col:51, col:55> col:55 _Value 'int'
|-FunctionDecl 0x1fe1c46a330 <line:372:9, col:50> col:21 _get_printf_count_output 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1fe1c46a578 <line:374:28, col:143> col:40 _printf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c46a400 <col:90, col:103> col:103 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c46a478 <col:121, col:131> col:131 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c46a7d0 <line:375:28, col:145> col:40 _printf_p_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c46a658 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c46a6d0 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c46aa28 <line:376:28, col:145> col:40 _printf_s_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c46a8b0 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c46a928 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c46add8 <line:377:28, col:157> col:40 _vprintf_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c46ab08 <col:91, col:104> col:104 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c46ab80 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c46abf8 <col:141, col:149> col:149 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c4690f0 <line:378:28, col:159> col:40 _vprintf_p_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c46aec0 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c46af38 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c468fd0 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c4693e8 <line:379:28, col:159> col:40 _vprintf_s_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c4691d8 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c469250 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c4692c8 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c4696e0 <line:381:28, col:166> col:40 _fprintf_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c4694c8 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c469548 <col:113, col:126> col:126 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c4695c0 <col:144, col:154> col:154 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4699d8 <line:382:28, col:168> col:40 _fprintf_p_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c4697c0 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c469840 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c4698b8 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c469cd0 <line:383:28, col:168> col:40 _fprintf_s_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c469ab8 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c469b38 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c469bb0 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4711b0 <line:384:28, col:147> col:40 _vfprintf_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c469db0 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c469e30 <col:81, col:94> col:94 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c469ea8 <col:112, col:122> col:122 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c469f20 <col:131, col:139> col:139 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c471548 <line:385:28, col:149> col:40 _vfprintf_p_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c471298 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c471318 <col:83, col:96> col:96 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c471390 <col:114, col:124> col:124 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c471408 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c4718e0 <line:386:28, col:149> col:40 _vfprintf_s_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c471630 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c4716b0 <col:83, col:96> col:96 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c471728 <col:114, col:124> col:124 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c4717a0 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c471d78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:388:221> col:78 _sprintf_l 'int (char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c471a90 <col:112, col:119> col:119 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c471b10 <col:168, col:181> col:181 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c471b88 <col:199, col:209> col:209 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c471e30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _sprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c46f340 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:389:28, col:211> col:40 _sprintf_p_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c471f78 <col:79, col:86> col:86 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c46f030 <col:100, col:107> col:107 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46f0b0 <col:158, col:171> col:171 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c46f128 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c46f6e0 <line:390:40, col:221> col:52 _sprintf_s_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c46f430 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c46f4a8 <col:111, col:118> col:118 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46f528 <col:168, col:181> col:181 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c46f5a0 <col:199, col:209> col:209 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c46fc30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:391:195> col:79 _vsprintf_l 'int (char *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c46f8d0 <col:114, col:121> col:121 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c46f950 <col:137, col:150> col:150 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c46f9c8 <col:168> col:177 '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1fe1c46fa40 <col:179, col:187> col:187 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1fe1c46fcf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c472298 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:392:28, col:225> col:40 _vsprintf_p_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c46fe38 <col:80, col:87> col:87 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c46feb0 <col:101, col:108> col:108 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46ff30 <col:159, col:171> col:171 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c46ffa8 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c472060 <col:209, col:217> col:217 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c4726d8 <line:393:40, col:235> col:52 _vsprintf_s_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c472390 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c472408 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c472488 <col:169, col:182> col:182 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c472500 <col:200, col:210> col:210 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c472578 <col:219, col:227> col:227 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c472948 <line:395:28, col:145> col:40 _scprintf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c4727d0 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c472848 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c472ba0 <line:396:28, col:147> col:40 _scprintf_p_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c472a28 <col:94, col:107> col:107 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c472aa0 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c472e90 <line:397:28, col:159> col:40 _vscprintf_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c472c80 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c472cf8 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c472d70 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c46d140 <line:398:28, col:161> col:40 _vscprintf_p_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c472f78 <col:95, col:108> col:108 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c472ff0 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c46d020 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c46d598 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:400:247> col:79 _snprintf_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c46d2e8 <col:115, col:122> col:122 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c46d360 <col:136, col:143> col:143 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46d3e0 <col:194, col:207> col:207 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c46d458 <col:225, col:235> col:235 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c46d658 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c46da50 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:401:28, col:210> col:40 _snprintf_c_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c46d7a0 <col:78, col:85> col:85 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c46d818 <col:99, col:106> col:106 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46d898 <col:157, col:170> col:170 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c46d910 <col:188, col:198> col:198 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c46aff0 <line:402:40, col:245> col:52 _snprintf_s_l 'int (char *, size_t, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c46db40 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c46dbb8 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46dc30 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46dcb0 <col:192, col:205> col:205 _Format 'const char *'
| `-ParmVarDecl 0x1fe1c46dd28 <col:223, col:233> col:233 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c46b530 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:403:262> col:80 _vsnprintf_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c46b1e8 <col:117, col:124> col:124 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c46b260 <col:138, col:145> col:145 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46b2e0 <col:196, col:209> col:209 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c46b358 <col:227, col:237> col:237 _Locale '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1fe1c46b3d0 <col:246, col:254> col:254 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1fe1c46b5f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c46ba78 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:404:28, col:176> col:40 _vsnprintf_c_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c46b748 <col:79, col:86> col:86 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c46b7c0 <col:100, col:107> col:107 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46b840 <col:118, col:129> col:130 'const char *'
| |-ParmVarDecl 0x1fe1c46b8b8 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c46b930 <col:160, col:168> col:168 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c4730d0 <line:405:28, col:245> col:40 _vsnprintf_s_l 'int (char *, size_t, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c46bb70 <col:80, col:87> col:87 _DstBuf 'char *'
| |-ParmVarDecl 0x1fe1c46bbe8 <col:101, col:108> col:108 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46bc60 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c46bce0 <col:181, col:193> col:193 _Format 'const char *'
| |-ParmVarDecl 0x1fe1c46bd58 <col:210, col:220> col:220 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c46bdd0 <col:229, col:237> col:237 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c473490 <line:415:24, col:128> col:39 _wfsopen 'FILE *(const wchar_t *, const wchar_t *, int) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *, int)'
| |-ParmVarDecl 0x1fe1c4731c8 <col:55, col:71> col:71 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c473240 <col:89, col:105> col:105 _Mode 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4732c0 <col:117, col:121> col:121 _ShFlag 'int'
|-FunctionDecl 0x1fe1c473700 <line:417:28, col:70> col:43 fgetwc 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1fe1c473590 <col:58, col:65> col:65 _File 'FILE *'
|-FunctionDecl 0x1fe1c473918 <line:418:28, col:58> col:43 _fgetwchar 'wint_t (void) __attribute__((cdecl))':'wint_t (void)'
|-FunctionDecl 0x1fe1c473bf8 <line:419:28, col:88> col:43 fputwc 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1fe1c4739e0 <col:55, col:63> col:63 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c473a58 <col:76, col:83> col:83 _File 'FILE *'
|-FunctionDecl 0x1fe1c473e40 <line:420:28, col:70> col:43 _fputwchar 'wint_t (wchar_t) __attribute__((cdecl))':'wint_t (wchar_t)'
| `-ParmVarDecl 0x1fe1c473cd0 <col:59, col:67> col:67 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1fe1c46c000 <line:421:24, col:65> col:39 getwc 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1fe1c473f10 <col:53, col:60> col:60 _File 'FILE *'
|-FunctionDecl 0x1fe1c46c188 <line:422:24, col:52> col:39 getwchar 'wint_t (void) __attribute__((cdecl))':'wint_t (void)'
|-FunctionDecl 0x1fe1c46c3c0 <line:423:28, col:87> col:43 putwc 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1fe1c46c250 <col:54, col:62> col:62 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c46c2c8 <col:75, col:82> col:82 _File 'FILE *'
|-FunctionDecl 0x1fe1c46c570 <line:424:28, col:68> col:43 putwchar 'wint_t (wchar_t) __attribute__((cdecl))':'wint_t (wchar_t)'
| `-ParmVarDecl 0x1fe1c46c498 <col:57, col:65> col:65 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1fe1c46c818 <line:425:28, col:88> col:43 ungetwc 'wint_t (wint_t, FILE *) __attribute__((cdecl))':'wint_t (wint_t, FILE *)'
| |-ParmVarDecl 0x1fe1c46c640 <col:56, col:63> col:63 _Ch 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c46c6b8 <col:76, col:83> col:83 _File 'FILE *'
|-FunctionDecl 0x1fe1c46cbc0 <line:427:28, col:141> col:46 fgetws 'wchar_t *(wchar_t *, int, FILE *) __attribute__((cdecl))':'wchar_t *(wchar_t *, int, FILE *)'
| |-ParmVarDecl 0x1fe1c46c8f0 <col:82, col:92> col:92 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c46c970 <col:103, col:107> col:107 _SizeInWords 'int'
| `-ParmVarDecl 0x1fe1c46c9e8 <col:129, col:136> col:136 _File 'FILE *'
|-FunctionDecl 0x1fe1c46cec0 <line:428:28, col:96> col:40 fputws 'int (const wchar_t *, FILE *) __attribute__((cdecl))':'int (const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1fe1c46cca0 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c46cd18 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1fe1c478278 <line:429:28, col:124> col:46 _getws_s 'wchar_t *(wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c46cf98 <col:84, col:94> col:94 _Str 'wchar_t *'
| `-ParmVarDecl 0x1fe1c4780d0 <col:105, col:112> col:112 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c478580 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:431:83 _getws 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1fe1c478410 <col:115, col:124> col:124 _String 'wchar_t *'
| `-DeprecatedAttr 0x1fe1c478628 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _getws_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4788e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:432:28, col:74> col:40 _putws 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1fe1c478768 <col:54, col:70> col:70 _Str 'const wchar_t *'
|-FunctionDecl 0x1fe1c478bf0 <line:434:28, col:129> col:40 fwprintf 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c4789b8 <col:57, col:64> col:64 _File 'FILE *'
| `-ParmVarDecl 0x1fe1c478a30 <col:101, col:117> col:117 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c478e40 <line:436:28, col:131> col:40 fwprintf_s 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c478cc8 <col:59, col:66> col:66 _File 'FILE *'
| `-ParmVarDecl 0x1fe1c478d40 <col:103, col:119> col:119 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c4760a0 <line:438:28, col:106> col:40 wprintf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1fe1c478f18 <col:78, col:94> col:94 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c476250 <line:440:28, col:108> col:40 wprintf_s 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1fe1c476170 <col:80, col:96> col:96 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c476400 <line:442:24, col:105> col:36 _scwprintf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1fe1c476320 <col:77, col:93> col:93 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c476798 <line:443:28, col:143> col:40 vfwprintf 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c4764d0 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c476548 <col:102, col:118> col:118 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4765c0 <col:127, col:135> col:135 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c476a88 <line:444:28, col:142> col:40 vfwscanf 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c476878 <col:57, col:64> col:64 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c4768f0 <col:101, col:117> col:117 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c476968 <col:126, col:134> col:134 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c476d78 <line:446:28, col:145> col:40 vfwprintf_s 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c476b68 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c476be0 <col:104, col:120> col:120 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c476c58 <col:129, col:137> col:137 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c475090 <line:447:28, col:144> col:40 vfwscanf_s 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c476e58 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c476ed0 <col:103, col:119> col:119 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c476f48 <col:128, col:136> col:136 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c475390 <line:449:28, col:120> col:40 vwprintf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c475170 <col:79, col:95> col:95 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4751e8 <col:104, col:112> col:112 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c4755e0 <line:450:28, col:119> col:40 vwscanf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c475468 <col:78, col:94> col:94 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4754e0 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c475830 <line:452:28, col:122> col:40 vwprintf_s 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c4756b8 <col:81, col:97> col:97 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c475730 <col:106, col:114> col:114 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c475a80 <line:453:28, col:121> col:40 vwscanf_s 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c475908 <col:80, col:96> col:96 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c475980 <col:105, col:113> col:113 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c475e38 <line:457:21, col:173> col:33 swprintf_s 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c475b58 <col:73, col:83> col:83 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c475bd0 <col:94, col:101> col:101 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c475c48 <col:145, col:161> col:161 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c4792e0 <line:461:21, col:187> col:33 vswprintf_s 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c475f18 <col:74, col:84> col:84 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c475f90 <col:95, col:102> col:102 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c476008 <col:146, col:162> col:162 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4790d0 <col:171, col:179> col:179 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c479698 <line:462:40, col:156> col:52 vswscanf_s 'int (const wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c4793c8 <col:63, col:79> col:79 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c479440 <col:115, col:131> col:131 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4794b8 <col:140, col:148> col:148 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c479988 <line:466:28, col:145> col:40 vswscanf 'int (const wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c479778 <col:49, col:65> col:65 _srcBuf 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4797f0 <col:104, col:120> col:120 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c479868 <col:129, col:137> col:137 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c479c78 <line:468:28, col:184> col:40 _swprintf_c 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c479a68 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c479ae0 <col:105, col:112> col:112 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c479b58 <col:156, col:172> col:172 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c47a000 <line:469:28, col:198> col:40 _vswprintf_c 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c479d58 <col:82, col:92> col:92 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c479dd0 <col:106, col:113> col:113 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c479e48 <col:157, col:173> col:173 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c479ec0 <col:182, col:190> col:190 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c47a490 <line:471:40, col:220> col:52 _snwprintf_s 'int (wchar_t *, size_t, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c47a108 <col:94, col:104> col:104 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c47a180 <col:118, col:125> col:125 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c47a1f8 <col:144, col:151> col:151 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c47a270 <col:192, col:208> col:208 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c47a998 <line:473:40, col:234> col:52 _vsnwprintf_s 'int (wchar_t *, size_t, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c47a578 <col:95, col:105> col:105 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c47a5f0 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c47a668 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c47a6e0 <col:193, col:209> col:209 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c47a758 <col:218, col:226> col:226 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c47ad58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2003:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:477:89 _snwprintf 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c47ab48 <col:187, col:196> col:196 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1fe1c47abc0 <col:208, col:216> col:216 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c47ac38 <col:254, col:271> col:271 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c47ae10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4742b0 <col:36, line:2004:164> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:477:101 _vsnwprintf 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c47b010 <col:187, col:196> col:196 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1fe1c474080 <col:208, col:216> col:216 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c4740f8 <col:254, col:271> col:271 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c474170 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:2004:151, col:159> col:159 _Args 'va_list':'char *'
| `-DeprecatedAttr 0x1fe1c474370 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c474628 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:480:28, col:132> col:40 _fwprintf_p 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c4744b0 <col:60, col:67> col:67 _File 'FILE *'
| `-ParmVarDecl 0x1fe1c474528 <col:104, col:120> col:120 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c4747e0 <line:481:28, col:109> col:40 _wprintf_p 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1fe1c474700 <col:81, col:97> col:97 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c474ac0 <line:482:28, col:146> col:40 _vfwprintf_p 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c4748b0 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c474928 <col:105, col:121> col:121 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4749a0 <col:130, col:138> col:138 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c474d18 <line:483:28, col:123> col:40 _vwprintf_p 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c474ba0 <col:82, col:98> col:98 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c474c18 <col:107, col:115> col:115 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c441000 <line:484:28, col:178> col:40 _swprintf_p 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c474df0 <col:78, col:88> col:88 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c474e68 <col:102, col:109> col:109 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c474ee0 <col:150, col:166> col:166 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c441388 <line:485:28, col:192> col:40 _vswprintf_p 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c4410e0 <col:79, col:89> col:89 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c441158 <col:103, col:110> col:110 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c4411d0 <col:151, col:167> col:167 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c441248 <col:176, col:184> col:184 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c441550 <line:486:24, col:107> col:36 _scwprintf_p 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1fe1c441470 <col:79, col:95> col:95 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c441798 <line:487:24, col:121> col:36 _vscwprintf_p 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c441620 <col:80, col:96> col:96 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c441698 <col:105, col:113> col:113 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c441aa0 <line:489:28, col:147> col:40 _wprintf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c441870 <col:91, col:107> col:107 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4418e8 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c441cf0 <line:490:28, col:149> col:40 _wprintf_p_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c441b78 <col:93, col:109> col:109 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c441bf0 <col:127, col:137> col:137 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c441f40 <line:491:28, col:149> col:40 _wprintf_s_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c441dc8 <col:93, col:109> col:109 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c441e40 <col:127, col:137> col:137 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c43b298 <line:492:28, col:161> col:40 _vwprintf_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43afc8 <col:92, col:108> col:108 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43b040 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c43b0b8 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c43b588 <line:493:28, col:163> col:40 _vwprintf_p_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43b378 <col:94, col:110> col:110 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43b3f0 <col:128, col:138> col:138 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c43b468 <col:147, col:155> col:155 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c43b878 <line:494:28, col:163> col:40 _vwprintf_s_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43b668 <col:94, col:110> col:110 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43b6e0 <col:128, col:138> col:138 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c43b758 <col:147, col:155> col:155 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c43bc38 <line:496:28, col:170> col:40 _fwprintf_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c43b958 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c43b9d0 <col:114, col:130> col:130 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c43ba48 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c43dfd0 <line:497:28, col:172> col:40 _fwprintf_p_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c43bd18 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c43bd90 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c43be08 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c43e2c0 <line:498:28, col:172> col:40 _fwprintf_s_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c43e0b0 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c43e128 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c43e1a0 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c43e710 <line:499:28, col:184> col:40 _vfwprintf_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43e3a0 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c43e418 <col:115, col:131> col:131 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43e490 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c43e508 <col:168, col:176> col:176 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c43eaa0 <line:500:28, col:186> col:40 _vfwprintf_p_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43e7f8 <col:63, col:70> col:70 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c43e870 <col:117, col:133> col:133 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43e8e8 <col:151, col:161> col:161 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c43e960 <col:170, col:178> col:178 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c43ee30 <line:501:28, col:186> col:40 _vfwprintf_s_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43eb88 <col:63, col:70> col:70 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c43ec00 <col:117, col:133> col:133 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43ec78 <col:151, col:161> col:161 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c43ecf0 <col:170, col:178> col:178 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c443330 <line:503:28, col:218> col:40 _swprintf_c_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c43ef18 <col:80, col:90> col:90 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c443020 <col:104, col:111> col:111 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c443098 <col:162, col:178> col:178 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c443110 <col:196, col:206> col:206 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4436c0 <line:504:28, col:218> col:40 _swprintf_p_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c443418 <col:80, col:90> col:90 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c443490 <col:104, col:111> col:111 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c443508 <col:162, col:178> col:178 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c443580 <col:196, col:206> col:206 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c443a50 <line:505:40, col:228> col:52 _swprintf_s_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c4437a8 <col:91, col:101> col:101 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c443820 <col:115, col:122> col:122 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c443898 <col:172, col:188> col:188 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c443910 <col:206, col:216> col:216 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c443f58 <line:506:28, col:232> col:40 used _vswprintf_c_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c443b38 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c443bb0 <col:105, col:112> col:112 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c443c28 <col:163, col:179> col:179 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c443ca0 <col:197, col:207> col:207 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c443d18 <col:216, col:224> col:224 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c43f348 <line:507:28, col:232> col:40 _vswprintf_p_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43f008 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c43f080 <col:105, col:112> col:112 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c43f0f8 <col:163, col:179> col:179 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43f170 <col:197, col:207> col:207 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c43f1e8 <col:216, col:224> col:224 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c43f778 <line:508:40, col:242> col:52 _vswprintf_s_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43f438 <col:92, col:102> col:102 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c43f4b0 <col:116, col:123> col:123 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c43f528 <col:173, col:189> col:189 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43f5a0 <col:207, col:217> col:217 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c43f618 <col:226, col:234> col:234 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c43f9e0 <line:510:24, col:145> col:36 _scwprintf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c43f868 <col:89, col:105> col:105 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c43f8e0 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c43fc30 <line:511:24, col:147> col:36 _scwprintf_p_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c43fab8 <col:91, col:107> col:107 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c43fb30 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c43ff18 <line:512:24, col:161> col:36 _vscwprintf_p_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43fd08 <col:92, col:108> col:108 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43fd80 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c43fdf8 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c43c348 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:514:255> col:80 _snwprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c43c0a0 <col:117, col:127> col:127 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c43c118 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c43c190 <col:199, col:215> col:215 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43c208 <col:233, col:243> col:243 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c43c408 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c43c978 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:515:40, col:252> col:52 _snwprintf_s_l 'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c43c550 <col:92, col:102> col:102 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c43c5c8 <col:116, col:123> col:123 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c43c640 <col:138, col:145> col:145 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c43c6b8 <col:196, col:212> col:212 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c43c730 <col:230, col:240> col:240 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c43ceb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:516:270> col:81 _vsnwprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43cb70 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c43cbe8 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c43cc60 <col:201, col:217> col:217 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43ccd8 <col:235, col:245> col:245 _Locale '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1fe1c43cd50 <col:254, col:262> col:262 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1fe1c444030 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c444640 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:517:40, col:266> col:52 _vsnwprintf_s_l 'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c444178 <col:93, col:103> col:103 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4441f0 <col:117, col:124> col:124 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c444268 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c4442e0 <col:197, col:213> col:213 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c444358 <col:231, col:241> col:241 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c4443d0 <col:250, col:258> col:258 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c444b40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1957:138> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:533:110 _swprintf 'int (wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c444908 <col:183, col:192> col:192 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1fe1c444980 <col:229, col:246> col:246 _Format 'const wchar_t *'
| |-DeprecatedAttr 0x1fe1c444bf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _swprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1fe1c444d08 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1fe1c43d228 <col:36, line:1958:150> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:533:134 _vswprintf 'int (wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c444fc0 <col:183, col:192> col:192 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1fe1c43cfd0 <col:229, col:246> col:246 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43d048 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1958:137, col:145> col:145 _Args 'va_list':'char *'
| |-DeprecatedAttr 0x1fe1c43d2e0 <line:275:47, col:63> "This function or variable may be unsafe. Consider using vswprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1fe1c43d3f8 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1fe1c43d998 <col:36, line:1961:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:534:110 __swprintf_l 'int (wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c43d6b8 <col:211, col:220> col:220 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1fe1c43d730 <col:267, col:284> col:284 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43d7a8 <col:293, col:304> col:304 _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-DeprecatedAttr 0x1fe1c43da50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __swprintf_l_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1fe1c43db70 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1fe1c445250 <col:36, line:1962:166> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:534:124 __vswprintf_l 'int (wchar_t *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c43de30 <col:211, col:220> col:220 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1fe1c43dea8 <col:267, col:284> col:284 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c43df20 <col:293, col:304> col:304 _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1fe1c445040 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1962:153, col:161> col:161 _Args 'va_list':'char *'
| |-DeprecatedAttr 0x1fe1c445310 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vswprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1fe1c445430 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1fe1c445738 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:36:1, line:44:1> line:36:21 swprintf 'int (wchar_t *, size_t, const wchar_t *, ...)' static inline
| |-ParmVarDecl 0x1fe1c445558 <col:53, col:63> col:63 used _String 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4455d0 <col:72, col:79> col:79 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c445648 <col:117, col:133> col:133 used _Format 'const wchar_t *'
| `-CompoundStmt 0x1fe1c447300 <line:37:1, line:44:1>
|   |-DeclStmt 0x1fe1c445880 <line:38:5, col:21>
|   | `-VarDecl 0x1fe1c445818 <col:5, col:13> col:13 used _Arglist 'va_list':'char *'
|   |-DeclStmt 0x1fe1c445918 <line:39:5, col:13>
|   | `-VarDecl 0x1fe1c4458b0 <col:5, col:9> col:9 used _Ret 'int'
|   |-CallExpr 0x1fe1c445c70 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34, col:62> 'void'
|   | |-ImplicitCastExpr 0x1fe1c445c58 <col:34> 'void (*)(__builtin_va_list &, ...)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1fe1c445b70 <col:34> '<builtin fn type>' Function 0x1fe1c445a08 '__builtin_va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1fe1c445ba8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:40:19> 'va_list':'char *' lvalue Var 0x1fe1c445818 '_Arglist' 'va_list':'char *'
|   | `-DeclRefExpr 0x1fe1c445be0 <col:29> 'const wchar_t *' lvalue ParmVar 0x1fe1c445648 '_Format' 'const wchar_t *'
|   |-BinaryOperator 0x1fe1c445f30 <line:41:5, col:67> 'int' '='
|   | |-DeclRefExpr 0x1fe1c445ca0 <col:5> 'int' lvalue Var 0x1fe1c4458b0 '_Ret' 'int'
|   | `-CallExpr 0x1fe1c445e70 <col:12, col:67> 'int'
|   |   |-ImplicitCastExpr 0x1fe1c445e58 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1fe1c445cd8 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1fe1c443f58 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|   |   |-ImplicitCastExpr 0x1fe1c445eb8 <col:27> 'wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c445cf8 <col:27> 'wchar_t *' lvalue ParmVar 0x1fe1c445558 '_String' 'wchar_t *'
|   |   |-ImplicitCastExpr 0x1fe1c445ed0 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c445d18 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1fe1c4455d0 '_Count' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1fe1c445ee8 <col:44> 'const wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c445d38 <col:44> 'const wchar_t *' lvalue ParmVar 0x1fe1c445648 '_Format' 'const wchar_t *'
|   |   |-ImplicitCastExpr 0x1fe1c445f00 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> '_locale_t':'struct localeinfo_struct *' <NullToPointer>
|   |   | `-ParenExpr 0x1fe1c445dc0 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x1fe1c445d98 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x1fe1c445d58 <col:26> 'int' 0
|   |   `-ImplicitCastExpr 0x1fe1c445f18 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:41:59> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1fe1c445de0 <col:59> 'va_list':'char *' lvalue Var 0x1fe1c445818 '_Arglist' 'va_list':'char *'
|   |-CallExpr 0x1fe1c447290 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:27:34, col:53> 'void'
|   | |-ImplicitCastExpr 0x1fe1c447278 <col:34> 'void (*)(__builtin_va_list &)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1fe1c4471c8 <col:34> '<builtin fn type>' Function 0x1fe1c447060 '__builtin_va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1fe1c447200 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:42:17> 'va_list':'char *' lvalue Var 0x1fe1c445818 '_Arglist' 'va_list':'char *'
|   `-ReturnStmt 0x1fe1c4472f0 <line:43:5, col:12>
|     `-ImplicitCastExpr 0x1fe1c4472d8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1fe1c4472b8 <col:12> 'int' lvalue Var 0x1fe1c4458b0 '_Ret' 'int'
|-FunctionDecl 0x1fe1c445a08 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34> col:34 implicit used __builtin_va_start 'void (__builtin_va_list &, ...)' extern
| |-ParmVarDecl 0x1fe1c445aa8 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1fe1c445b18 <col:34> Implicit
|-FunctionDecl 0x1fe1c447060 <line:27:34> col:34 implicit used __builtin_va_end 'void (__builtin_va_list &)' extern
| |-ParmVarDecl 0x1fe1c447100 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1fe1c447170 <col:34> Implicit
|-FunctionDecl 0x1fe1c4475f8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:49:1, line:52:1> line:49:31 vswprintf 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)' static inline
| |-ParmVarDecl 0x1fe1c447350 <col:64, col:74> col:74 used _String 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4473c8 <col:83, col:90> col:90 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c447440 <col:138, col:154> col:154 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4474b8 <col:163, col:171> col:171 used _Ap 'va_list':'char *'
| `-CompoundStmt 0x1fe1c4478e0 <line:50:1, line:52:1>
|   `-ReturnStmt 0x1fe1c4478d0 <line:51:5, col:62>
|     `-CallExpr 0x1fe1c447810 <col:12, col:62> 'int'
|       |-ImplicitCastExpr 0x1fe1c4477f8 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1fe1c4476d0 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1fe1c443f58 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|       |-ImplicitCastExpr 0x1fe1c447858 <col:27> 'wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1fe1c4476f0 <col:27> 'wchar_t *' lvalue ParmVar 0x1fe1c447350 '_String' 'wchar_t *'
|       |-ImplicitCastExpr 0x1fe1c447870 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1fe1c447710 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1fe1c4473c8 '_Count' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1fe1c447888 <col:44> 'const wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1fe1c447730 <col:44> 'const wchar_t *' lvalue ParmVar 0x1fe1c447440 '_Format' 'const wchar_t *'
|       |-ImplicitCastExpr 0x1fe1c4478a0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> '_locale_t':'struct localeinfo_struct *' <NullToPointer>
|       | `-ParenExpr 0x1fe1c4477b8 <col:17, col:27> 'void *'
|       |   `-CStyleCastExpr 0x1fe1c447790 <col:18, col:26> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x1fe1c447750 <col:26> 'int' 0
|       `-ImplicitCastExpr 0x1fe1c4478b8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:51:59> 'va_list':'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1fe1c4477d8 <col:59> 'va_list':'char *' lvalue ParmVar 0x1fe1c4474b8 '_Ap' 'va_list':'char *'
|-FunctionDecl 0x1fe1c447b80 <line:60:1, line:68:1> line:60:21 _swprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)' static inline
| |-ParmVarDecl 0x1fe1c447908 <col:56, col:66> col:66 used _String 'wchar_t *'
| |-ParmVarDecl 0x1fe1c447980 <col:75, col:82> col:82 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c4479f8 <col:130, col:146> col:146 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c447a70 <col:155, col:165> col:165 used _Plocinfo '_locale_t':'struct localeinfo_struct *'
| `-CompoundStmt 0x1fe1c440098 <line:61:1, line:68:1>
|   |-DeclStmt 0x1fe1c447cd0 <line:62:5, col:21>
|   | `-VarDecl 0x1fe1c447c68 <col:5, col:13> col:13 used _Arglist 'va_list':'char *'
|   |-DeclStmt 0x1fe1c447d68 <line:63:5, col:13>
|   | `-VarDecl 0x1fe1c447d00 <col:5, col:9> col:9 used _Ret 'int'
|   |-CallExpr 0x1fe1c447e10 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34, col:62> 'void'
|   | |-ImplicitCastExpr 0x1fe1c447df8 <col:34> 'void (*)(__builtin_va_list &, ...)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1fe1c447d80 <col:34> '<builtin fn type>' Function 0x1fe1c445a08 '__builtin_va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1fe1c447da0 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:64:19> 'va_list':'char *' lvalue Var 0x1fe1c447c68 '_Arglist' 'va_list':'char *'
|   | `-DeclRefExpr 0x1fe1c447dd8 <col:29> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1fe1c447a70 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|   |-BinaryOperator 0x1fe1c448010 <line:65:5, col:72> 'int' '='
|   | |-DeclRefExpr 0x1fe1c447e40 <col:5> 'int' lvalue Var 0x1fe1c447d00 '_Ret' 'int'
|   | `-CallExpr 0x1fe1c447f50 <col:12, col:72> 'int'
|   |   |-ImplicitCastExpr 0x1fe1c447f38 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1fe1c447e78 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1fe1c443f58 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|   |   |-ImplicitCastExpr 0x1fe1c447f98 <col:27> 'wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c447e98 <col:27> 'wchar_t *' lvalue ParmVar 0x1fe1c447908 '_String' 'wchar_t *'
|   |   |-ImplicitCastExpr 0x1fe1c447fb0 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c447eb8 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1fe1c447980 '_Count' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1fe1c447fc8 <col:44> 'const wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c447ed8 <col:44> 'const wchar_t *' lvalue ParmVar 0x1fe1c4479f8 '_Format' 'const wchar_t *'
|   |   |-ImplicitCastExpr 0x1fe1c447fe0 <col:53> '_locale_t':'struct localeinfo_struct *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c447ef8 <col:53> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1fe1c447a70 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|   |   `-ImplicitCastExpr 0x1fe1c447ff8 <col:64> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1fe1c447f18 <col:64> 'va_list':'char *' lvalue Var 0x1fe1c447c68 '_Arglist' 'va_list':'char *'
|   |-CallExpr 0x1fe1c440028 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:27:34, col:53> 'void'
|   | |-ImplicitCastExpr 0x1fe1c440010 <col:34> 'void (*)(__builtin_va_list &)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1fe1c448030 <col:34> '<builtin fn type>' Function 0x1fe1c447060 '__builtin_va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1fe1c43fff0 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:66:17> 'va_list':'char *' lvalue Var 0x1fe1c447c68 '_Arglist' 'va_list':'char *'
|   `-ReturnStmt 0x1fe1c440088 <line:67:5, col:12>
|     `-ImplicitCastExpr 0x1fe1c440070 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1fe1c440050 <col:12> 'int' lvalue Var 0x1fe1c447d00 '_Ret' 'int'
|-FunctionDecl 0x1fe1c440428 <line:73:1, line:76:1> line:73:31 _vswprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' static inline
| |-ParmVarDecl 0x1fe1c4400e8 <col:67, col:77> col:77 used _String 'wchar_t *'
| |-ParmVarDecl 0x1fe1c440160 <col:86, col:93> col:93 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c4401d8 <col:141, col:157> col:157 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c440250 <col:166, col:176> col:176 used _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1fe1c4402c8 <col:187, col:195> col:195 used _Ap 'va_list':'char *'
| `-CompoundStmt 0x1fe1c4406b0 <line:74:1, line:76:1>
|   `-ReturnStmt 0x1fe1c4406a0 <line:75:5, col:67>
|     `-CallExpr 0x1fe1c4405e0 <col:12, col:67> 'int'
|       |-ImplicitCastExpr 0x1fe1c4405c8 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1fe1c440508 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1fe1c443f58 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|       |-ImplicitCastExpr 0x1fe1c440628 <col:27> 'wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1fe1c440528 <col:27> 'wchar_t *' lvalue ParmVar 0x1fe1c4400e8 '_String' 'wchar_t *'
|       |-ImplicitCastExpr 0x1fe1c440640 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1fe1c440548 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1fe1c440160 '_Count' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1fe1c440658 <col:44> 'const wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1fe1c440568 <col:44> 'const wchar_t *' lvalue ParmVar 0x1fe1c4401d8 '_Format' 'const wchar_t *'
|       |-ImplicitCastExpr 0x1fe1c440670 <col:53> '_locale_t':'struct localeinfo_struct *' <LValueToRValue>
|       | `-DeclRefExpr 0x1fe1c440588 <col:53> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1fe1c440250 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|       `-ImplicitCastExpr 0x1fe1c440688 <col:64> 'va_list':'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1fe1c4405a8 <col:64> 'va_list':'char *' lvalue ParmVar 0x1fe1c4402c8 '_Ap' 'va_list':'char *'
|-FunctionDecl 0x1fe1c4408f8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:555:24, col:129> col:42 _wtempnam 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c4406d8 <col:63, col:79> col:79 _Directory 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c440750 <col:102, col:118> col:118 _FilePrefix 'const wchar_t *'
|-FunctionDecl 0x1fe1c440b48 <line:561:24, col:119> col:36 _vscwprintf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1fe1c4409d0 <col:78, col:94> col:94 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c440a48 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c440e30 <line:562:24, col:159> col:36 _vscwprintf_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1fe1c440c20 <col:90, col:106> col:106 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c440c98 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1fe1c440d10 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1fe1c44a208 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:563:158> col:71 fwscanf 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c44a090 <col:87, col:94> col:94 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c44a108 <col:130, col:146> col:146 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c44a2b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c44a6c8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:564:206> col:78 _fwscanf_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c44a4b8 <col:97, col:104> col:104 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c44a530 <col:150, col:166> col:166 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44a5a8 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c44a780 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c44aa38 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:568:28, col:131> col:40 fwscanf_s 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c44a8c0 <col:58, col:65> col:65 _File 'FILE *'
| `-ParmVarDecl 0x1fe1c44a938 <col:103, col:119> col:119 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c44ad20 <line:570:28, col:172> col:40 _fwscanf_s_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c44ab10 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c44ab88 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c44ac00 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c44b110 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:571:165> col:71 swscanf 'int (const wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c44aec0 <col:86, col:102> col:102 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44af38 <col:137, col:153> col:153 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c44b1c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using swscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c44b698 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:572:213> col:78 _swscanf_l 'int (const wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c44b3c0 <col:96, col:112> col:112 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44b438 <col:157, col:173> col:173 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44b4b0 <col:191, col:201> col:201 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c44b750 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _swscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c44ba08 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:574:40, col:149> col:52 swscanf_s 'int (const wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c44b890 <col:69, col:84> col:84 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c44b908 <col:121, col:137> col:137 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c44bcf0 <line:576:40, col:191> col:52 _swscanf_s_l 'int (const wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c44bae0 <col:72, col:88> col:88 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44bb58 <col:135, col:151> col:151 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c44bbd0 <col:169, col:179> col:179 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c448158 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:577:219> col:77 _snwscanf 'int (const wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c44be90 <col:117, col:133> col:133 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44bf08 <col:144, col:151> col:151 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c44bf80 <col:191, col:207> col:207 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c448210 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c448790 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:578:261> col:79 _snwscanf_l 'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c448410 <col:121, col:137> col:137 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c448488 <col:148, col:155> col:155 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c448500 <col:205, col:221> col:221 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c448578 <col:239, col:249> col:249 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c448850 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c448ba0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:579:40, col:198> col:52 _snwscanf_s 'int (const wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c448990 <col:94, col:110> col:110 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c448a08 <col:121, col:128> col:128 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c448a80 <col:170, col:186> col:186 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c448f28 <line:580:40, col:238> col:52 _snwscanf_s_l 'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c448c80 <col:96, col:112> col:112 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c448cf8 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c448d70 <col:182, col:198> col:198 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c448de8 <col:216, col:226> col:226 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c44f290 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:581:134> col:70 wscanf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| |-ParmVarDecl 0x1fe1c44f1b0 <col:106, col:122> col:122 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c44f338 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c44f6b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:582:182> col:77 _wscanf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c44f538 <col:126, col:142> col:142 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44f5b0 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c44f760 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c44f980 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:584:40, col:120> col:52 wscanf_s 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1fe1c44f8a0 <col:92, col:108> col:108 _Format 'const wchar_t *'
|-FunctionDecl 0x1fe1c44fbc8 <line:586:40, col:161> col:52 _wscanf_s_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1fe1c44fa50 <col:105, col:121> col:121 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c44fac8 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c44fec8 <line:589:24, col:99> col:39 _wfdopen 'FILE *(int, const wchar_t *) __attribute__((cdecl))':'FILE *(int, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c44fca8 <col:53, col:57> col:57 _FileHandle 'int'
| `-ParmVarDecl 0x1fe1c44fd20 <col:78, col:94> col:94 _Mode 'const wchar_t *'
|-FunctionDecl 0x1fe1c44c258 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:590:144> col:74 _wfopen 'FILE *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c450060 <col:89, col:105> col:105 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44c0b0 <col:123, col:139> col:139 _Mode 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c44c308 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wfopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c44c710 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:591:28, col:157> col:44 _wfopen_s 'errno_t (FILE **, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (FILE **, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c44c450 <col:80, col:88> col:88 _File 'FILE **'
| |-ParmVarDecl 0x1fe1c44c4c8 <col:102, col:118> col:118 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c44c540 <col:136, col:152> col:152 _Mode 'const wchar_t *'
|-FunctionDecl 0x1fe1c44cb70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:592:173> col:76 _wfreopen 'FILE *(const wchar_t *, const wchar_t *, FILE *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1fe1c44c8b0 <col:93, col:109> col:109 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44c928 <col:127, col:143> col:143 _Mode 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44c9a0 <col:158, col:165> col:165 _OldFile 'FILE *'
| `-DeprecatedAttr 0x1fe1c44cc28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wfreopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c450138 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:593:28, col:184> col:44 _wfreopen_s 'errno_t (FILE **, const wchar_t *, const wchar_t *, FILE *) __attribute__((cdecl))':'errno_t (FILE **, const wchar_t *, const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1fe1c44cd70 <col:82, col:90> col:90 _File 'FILE **'
| |-ParmVarDecl 0x1fe1c44cde8 <col:104, col:120> col:120 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c44ce60 <col:138, col:154> col:154 _Mode 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c44ced8 <col:169, col:176> col:176 _OldFile 'FILE *'
|-FunctionDecl 0x1fe1c450390 <line:597:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x1fe1c450220 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1fe1c4505d0 <line:600:24, col:107> col:39 _wpopen 'FILE *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c450460 <col:54, col:69> col:69 _Command 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4504d8 <col:86, col:102> col:102 _Mode 'const wchar_t *'
|-FunctionDecl 0x1fe1c450788 <line:602:9, col:62> col:21 _wremove 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1fe1c4506a8 <col:37, col:53> col:53 _Filename 'const wchar_t *'
|-FunctionDecl 0x1fe1c450a78 <line:603:28, col:127> col:44 _wtmpnam_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c450858 <col:84, col:94> col:94 _DstBuf 'wchar_t *'
| `-ParmVarDecl 0x1fe1c4508d0 <col:108, col:115> col:115 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c450ce8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:605:82 _wtmpnam 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1fe1c450c10 <col:118, col:127> col:127 _Buffer 'wchar_t *'
| `-DeprecatedAttr 0x1fe1c450d90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wtmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c450fa8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:607:28, col:78> col:43 _fgetwc_nolock 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1fe1c450ed0 <col:66, col:73> col:73 _File 'FILE *'
|-FunctionDecl 0x1fe1c44e1c8 <line:608:28, col:96> col:43 _fputwc_nolock 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1fe1c451078 <col:63, col:71> col:71 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c44e0d0 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1fe1c44e410 <line:609:28, col:96> col:43 _ungetwc_nolock 'wint_t (wint_t, FILE *) __attribute__((cdecl))':'wint_t (wint_t, FILE *)'
| |-ParmVarDecl 0x1fe1c44e2a0 <col:64, col:71> col:71 _Ch 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c44e318 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1fe1c44e5c0 <line:670:9, col:53> col:22 _lock_file 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1fe1c44e4e8 <col:41, col:48> col:48 _File 'FILE *'
|-FunctionDecl 0x1fe1c44e768 <line:671:9, col:55> col:22 _unlock_file 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1fe1c44e690 <col:43, col:50> col:50 _File 'FILE *'
|-FunctionDecl 0x1fe1c44e918 <line:673:28, col:75> col:40 _fclose_nolock 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c44e838 <col:63, col:70> col:70 _File 'FILE *'
|-FunctionDecl 0x1fe1c44eac8 <line:674:28, col:79> col:40 _fflush_nolock 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1fe1c44e9e8 <col:67, col:74> col:74 _File 'FILE *'
|-FunctionDecl 0x1fe1c44ee40 <line:675:28, col:179> col:43 _fread_nolock 'size_t (void *, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1fe1c44eba0 <col:97, col:104> col:104 _DstBuf 'void *'
| |-ParmVarDecl 0x1fe1c44ec18 <col:118, col:125> col:125 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c44ec90 <col:144, col:151> col:151 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c44ed08 <col:167, col:174> col:174 _File 'FILE *'
|-FunctionDecl 0x1fe1c4512d0 <line:676:28, col:203> col:43 _fread_nolock_s 'size_t (void *, size_t, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1fe1c44ef30 <col:99, col:106> col:106 _DstBuf 'void *'
| |-ParmVarDecl 0x1fe1c44efa8 <col:120, col:127> col:127 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c44f020 <col:142, col:149> col:149 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c451100 <col:168, col:175> col:175 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c451178 <col:191, col:198> col:198 _File 'FILE *'
|-FunctionDecl 0x1fe1c4515e0 <line:677:28, col:111> col:40 _fseek_nolock 'int (FILE *, long, int) __attribute__((cdecl))':'int (FILE *, long, int)'
| |-ParmVarDecl 0x1fe1c4513c0 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c451440 <col:81, col:86> col:86 _Offset 'long'
| `-ParmVarDecl 0x1fe1c4514c0 <col:100, col:104> col:104 _Origin 'int'
|-FunctionDecl 0x1fe1c4517a0 <line:678:24, col:71> col:37 _ftell_nolock 'long (FILE *) __attribute__((cdecl))':'long (FILE *)'
| `-ParmVarDecl 0x1fe1c4516c0 <col:59, col:66> col:66 _File 'FILE *'
|-FunctionDecl 0x1fe1c451a90 <line:679:28, col:117> col:40 _fseeki64_nolock 'int (FILE *, long long, int) __attribute__((cdecl))':'int (FILE *, long long, int)'
| |-ParmVarDecl 0x1fe1c451870 <col:65, col:72> col:72 _File 'FILE *'
| |-ParmVarDecl 0x1fe1c4518f0 <col:84, col:92> col:92 _Offset 'long long'
| `-ParmVarDecl 0x1fe1c451970 <col:106, col:110> col:110 _Origin 'int'
|-FunctionDecl 0x1fe1c451c50 <line:680:24, col:77> col:40 _ftelli64_nolock 'long long (FILE *) __attribute__((cdecl))':'long long (FILE *)'
| `-ParmVarDecl 0x1fe1c451b70 <col:65, col:72> col:72 _File 'FILE *'
|-FunctionDecl 0x1fe1c451fc8 <line:681:28, col:170> col:43 _fwrite_nolock 'size_t (const void *, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (const void *, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1fe1c451d28 <col:89, col:102> col:102 _DstBuf 'const void *'
| |-ParmVarDecl 0x1fe1c451da0 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c451e18 <col:135, col:142> col:142 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c451e90 <col:158, col:165> col:165 _File 'FILE *'
|-FunctionDecl 0x1fe1c4542a8 <line:682:28, col:89> col:40 _ungetc_nolock 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1fe1c454130 <col:60, col:64> col:64 _Ch 'int'
| `-ParmVarDecl 0x1fe1c4541a8 <col:77, col:84> col:84 _File 'FILE *'
|-FunctionDecl 0x1fe1c4545e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:709:136> col:57 tempnam 'char *(const char *, const char *) __attribute__((cdecl))':'char *(const char *, const char *)'
| |-ParmVarDecl 0x1fe1c454460 <col:76, col:89> col:89 _Directory 'const char *'
| |-ParmVarDecl 0x1fe1c4544e0 <col:112, col:125> col:125 _FilePrefix 'const char *'
| `-DeprecatedAttr 0x1fe1c454690 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _tempnam. See online help for details." ""
|-FunctionDecl 0x1fe1c454948 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:715:89> col:75 fcloseall 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1fe1c4549e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcloseall. See online help for details." ""
|-FunctionDecl 0x1fe1c454d28 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:716:127> col:71 fdopen 'FILE *(int, const char *) __attribute__((cdecl))':'FILE *(int, const char *)'
| |-ParmVarDecl 0x1fe1c454bb0 <col:83, col:87> col:87 _FileHandle 'int'
| |-ParmVarDecl 0x1fe1c454c30 <col:107, col:120> col:120 _Format 'const char *'
| `-DeprecatedAttr 0x1fe1c454dd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fdopen. See online help for details." ""
|-FunctionDecl 0x1fe1c452110 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:717:87> col:74 fgetchar 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1fe1c4521b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fgetchar. See online help for details." ""
|-FunctionDecl 0x1fe1c452450 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:718:92> col:68 fileno 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| |-ParmVarDecl 0x1fe1c452370 <col:80, col:87> col:87 _File 'FILE *'
| `-DeprecatedAttr 0x1fe1c4524f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fileno. See online help for details." ""
|-FunctionDecl 0x1fe1c452778 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:719:87> col:74 flushall 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1fe1c452818 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _flushall. See online help for details." ""
|-FunctionDecl 0x1fe1c452ac0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:720:95> col:74 fputchar 'int (int) __attribute__((cdecl))':'int (int)'
| |-ParmVarDecl 0x1fe1c4529e0 <col:88, col:92> col:92 _Ch 'int'
| `-DeprecatedAttr 0x1fe1c452b68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fputchar. See online help for details." ""
|-FunctionDecl 0x1fe1c452e48 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:721:91> col:66 getw 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| |-ParmVarDecl 0x1fe1c452d68 <col:79, col:86> col:86 _File 'FILE *'
| `-DeprecatedAttr 0x1fe1c452ef0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _getw. See online help for details." ""
|-FunctionDecl 0x1fe1c4562c8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:722:109> col:70 putw 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1fe1c456150 <col:80, col:84> col:84 _Ch 'int'
| |-ParmVarDecl 0x1fe1c4561c8 <col:97, col:104> col:104 _File 'FILE *'
| `-DeprecatedAttr 0x1fe1c456378 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putw. See online help for details." ""
|-FunctionDecl 0x1fe1c456638 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:723:77> col:67 rmtmp 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1fe1c4566d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _rmtmp. See online help for details." ""
|-FunctionDecl 0x1fe1c456b80 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x1fe1c456800 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x1fe1c456880 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x1fe1c456900 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x1fe1c456978 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c456f48 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c456fe8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1fe1c457050 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1fe1c4570b8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c455140 prev 0x1fe1c456f48 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1fe1c456c70 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x1fe1c456cf0 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x1fe1c456d68 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c4554f8 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1fe1c455228 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x1fe1c4552a8 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x1fe1c455320 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c455960 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4555e0 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x1fe1c455660 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x1fe1c4556d8 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c455750 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c455c68 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c455d08 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1fe1c455d70 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1fe1c455dd8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c455e58 prev 0x1fe1c455c68 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1fe1c455a50 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x1fe1c455ad0 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x1fe1c455b48 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c458258 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c4582f8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1fe1c458360 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1fe1c4583c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c458448 prev 0x1fe1c458258 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1fe1c455f40 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x1fe1c455fc0 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x1fe1c456038 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c4588a8 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1fe1c458530 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x1fe1c4585a8 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c458628 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1fe1c4586a0 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1fe1c458c68 <line:94:25> col:25 implicit memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c458d08 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1fe1c458d70 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1fe1c458dd8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c458e58 prev 0x1fe1c458c68 <col:9, col:107> col:25 memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x1fe1c458998 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x1fe1c458a18 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x1fe1c458a90 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c4592c0 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c459360 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1fe1c4593c8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1fe1c459430 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1fe1c459498 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c459520 prev 0x1fe1c4592c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1fe1c458fe0 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x1fe1c459060 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x1fe1c4590e0 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x1fe1c459180 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c4595e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x1fe1c4599c0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1fe1c4597a8 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x1fe1c459828 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x1fe1c4598a0 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c459a78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x1fe1c459e70 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1fe1c459ba0 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1fe1c459c18 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c459c98 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x1fe1c4531c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1fe1c45a018 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x1fe1c45a098 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x1fe1c453270 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c453680 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1fe1c4533b8 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1fe1c453430 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c4534b0 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x1fe1c453a10 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1fe1c453ab0 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1fe1c453b18 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c453b90 prev 0x1fe1c453a10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x1fe1c453828 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x1fe1c4538a8 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x1fe1c453c40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c453f98 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1fe1c453d88 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1fe1c453e00 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c453e80 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x1fe1c4893b8 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1fe1c489458 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1fe1c4894c0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c489538 prev 0x1fe1c4893b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x1fe1c489238 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x1fe1c4892b8 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x1fe1c4895e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4898b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x1fe1c489950 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c4899b8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c489a30 prev 0x1fe1c4898b0 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x1fe1c489730 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x1fe1c4897b0 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x1fe1c489c80 <line:121:32> col:32 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x1fe1c489d20 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c489d90 prev 0x1fe1c489c80 <col:16, col:63> col:32 used strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x1fe1c489b10 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x1fe1c48a088 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1fe1c489e68 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1fe1c489ee0 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c48b308 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x1fe1c48b198 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x1fe1c48b210 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1fe1c48b638 <line:131:1, line:133:1>
|   `-ReturnStmt 0x1fe1c48b628 <line:132:5, col:51>
|     `-ConditionalOperator 0x1fe1c48b5f8 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x1fe1c48b468 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x1fe1c48b448 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x1fe1c48b418 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1fe1c48b3d0 <col:13> 'const char *' lvalue ParmVar 0x1fe1c48b198 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x1fe1c48b430 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x1fe1c48b3f0 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x1fe1c48b5e0 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1fe1c48b488 <col:24> 'int' 0
|       `-CallExpr 0x1fe1c48b580 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1fe1c48b568 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1fe1c48b4b0 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x1fe1c48a088 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x1fe1c48b5b0 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1fe1c48b4d0 <col:36> 'const char *' lvalue ParmVar 0x1fe1c48b198 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x1fe1c48b5c8 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1fe1c48b4f0 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x1fe1c48b210 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c48b910 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1fe1c48b668 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x1fe1c48b6e0 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c48b760 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x1fe1c48b7d8 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1fe1c48bc18 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c48bcb8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1fe1c48bd20 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1fe1c48bd88 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c48be08 prev 0x1fe1c48bc18 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1fe1c48ba00 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x1fe1c48ba80 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1fe1c48baf8 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c48c038 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x1fe1c48bef0 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x1fe1c48a2f0 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1fe1c48a390 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c48a3f8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1fe1c48a470 prev 0x1fe1c48a2f0 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1fe1c48c110 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x1fe1c48a188 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x1fe1c48a6d0 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1fe1c48a550 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1fe1c48a5d0 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1fe1c48a930 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1fe1c48a7b0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1fe1c48a830 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1fe1c48ace8 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1fe1c48aa10 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c48aa90 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1fe1c48ab08 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c48af50 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1fe1c48add0 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x1fe1c48ae50 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1fe1c488270 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1fe1c48b030 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c48b0b0 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1fe1c488150 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4884d8 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1fe1c488358 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x1fe1c4883d8 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x1fe1c4887d0 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1fe1c4885b8 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c488638 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x1fe1c4886b0 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c488b88 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1fe1c4888b8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c488938 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1fe1c4889b0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c488ff0 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c488c70 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c488cf0 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1fe1c488d68 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c488de0 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c48c340 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1fe1c4890e0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c48c1a8 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1fe1c48c220 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c48c6d8 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c48c428 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c48c4a8 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x1fe1c48c520 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c48c598 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c48c9e8 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1fe1c48ca88 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c48caf0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c48cb68 prev 0x1fe1c48c9e8 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1fe1c48c7c8 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1fe1c48c848 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x1fe1c48cde8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1fe1c48cd08 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x1fe1c48ce90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c485200 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x1fe1c48cfd8 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x1fe1c48d050 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c48d0d0 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x1fe1c4854d8 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x1fe1c485578 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1fe1c4855e8 prev 0x1fe1c4854d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x1fe1c4853a8 <col:90> col:93 'int'
| `-DeprecatedAttr 0x1fe1c485690 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4859e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1fe1c4857d8 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x1fe1c485850 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c4858d0 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x1fe1c485ca8 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1fe1c485ad0 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1fe1c485b48 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c485f28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1fe1c485e48 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1fe1c485fd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c48d460 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c48d1a0 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1fe1c48d218 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c48d290 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c48d830 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1fe1c48d608 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1fe1c48d680 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c48d8e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c48dd98 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1fe1c48da28 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x1fe1c48daa0 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c48db20 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x1fe1c48db98 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1fe1c4861a8 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c486248 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1fe1c4862b0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c486318 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c486398 prev 0x1fe1c4861a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1fe1c48df48 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x1fe1c48dfc8 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x1fe1c48e040 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c486450 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4867b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c486850 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1fe1c4868b8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c486920 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c4869a0 prev 0x1fe1c4867b0 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1fe1c486598 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c486618 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x1fe1c486690 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c486ca0 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1fe1c486a88 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c486b08 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x1fe1c486b80 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c487038 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c486d88 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c486e08 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1fe1c486e80 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c486ef8 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c48f468 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1fe1c48f1c0 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1fe1c48f238 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c48f2b8 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x1fe1c48f330 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1fe1c48f830 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c48f8d0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1fe1c48f938 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c48f9a0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c48fa20 prev 0x1fe1c48f830 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1fe1c48f618 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x1fe1c48f698 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x1fe1c48f710 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c48fad8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c48ff98 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x1fe1c48fc20 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x1fe1c48fc98 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c48fd18 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x1fe1c48fd90 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c48e418 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1fe1c490148 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x1fe1c48e1c8 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x1fe1c48e240 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c48e4d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c48e798 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1fe1c48e838 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c48e8a0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c48e918 prev 0x1fe1c48e798 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1fe1c48e618 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1fe1c48e698 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x1fe1c48eb78 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1fe1c48ec18 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c48ec80 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1fe1c48ecf8 prev 0x1fe1c48eb78 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1fe1c48e9f8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1fe1c48ea78 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x1fe1c48eeb8 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x1fe1c48edd8 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x1fe1c48f108 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1fe1c4901d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c490238 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c4902b0 prev 0x1fe1c48f108 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1fe1c48ef90 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x1fe1c48f010 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x1fe1c490510 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1fe1c4905b0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c490618 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c490690 prev 0x1fe1c490510 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1fe1c490390 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x1fe1c490410 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x1fe1c4909b0 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1fe1c490a50 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1fe1c490ab8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c490b30 prev 0x1fe1c4909b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x1fe1c490830 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x1fe1c4908b0 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x1fe1c490be0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c490fc8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x1fe1c490d28 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x1fe1c490da8 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x1fe1c490e28 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x1fe1c493260 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1fe1c4910b0 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1fe1c491128 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c4934e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1fe1c493400 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1fe1c493588 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4938d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4936d0 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1fe1c493748 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c4937c0 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c493bf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1fe1c493a80 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1fe1c493af8 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c493ca8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4940c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c494160 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1fe1c496230 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1fe1c496298 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c496318 prev 0x1fe1c4940c0 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1fe1c493df0 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1fe1c493e70 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x1fe1c493ee8 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c496778 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c496400 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1fe1c496480 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x1fe1c4964f8 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c496570 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4969e8 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x1fe1c496a88 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1fe1c496af8 prev 0x1fe1c4969e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x1fe1c496908 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x1fe1c496ba0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x1fe1c496ee8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1fe1c496d68 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c496de8 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1fe1c496f98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x1fe1c497340 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1fe1c497160 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c497240 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1fe1c4973f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x1fe1c497698 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1fe1c4975b8 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1fe1c497740 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x1fe1c497b20 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1fe1c497908 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x1fe1c497988 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x1fe1c497a00 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c497bd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x1fe1c497fb8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1fe1c497da0 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x1fe1c497e20 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x1fe1c497e98 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c498070 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x1fe1c498330 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1fe1c498250 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1fe1c4983d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x1fe1c498720 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1fe1c4985a0 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x1fe1c498620 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x1fe1c4987d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x1fe1c498a78 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1fe1c498998 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1fe1c498b20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x1fe1c498db0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x1fe1c498c40 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x1fe1c499140 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c498e80 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c498ef8 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c498f70 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x1fe1c4914c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c4912b0 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1fe1c491328 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c491578 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4918d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x1fe1c491978 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1fe1c4919e0 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x1fe1c491a58 prev 0x1fe1c4918d8 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x1fe1c4916b8 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c491730 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1fe1c491d50 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x1fe1c491df0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1fe1c491e58 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1fe1c491ed0 prev 0x1fe1c491d50 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x1fe1c491b30 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c491ba8 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x1fe1c494210 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c491fa8 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c492020 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c492098 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x1fe1c494520 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c4943b0 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1fe1c494428 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c4945d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c494928 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c494710 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c494788 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x1fe1c494b70 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x1fe1c494c10 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1fe1c494c80 prev 0x1fe1c494b70 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x1fe1c494a00 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x1fe1c494f68 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c494d50 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c494dc8 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c499260 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x1fe1c495040 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4950b8 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1fe1c4995f8 <line:306:1, line:308:1>
|   `-ReturnStmt 0x1fe1c4995e8 <line:307:5, col:56>
|     `-ConditionalOperator 0x1fe1c4995b8 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x1fe1c499420 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x1fe1c499400 <col:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x1fe1c4993d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1fe1c499328 <col:13> 'const wchar_t *' lvalue ParmVar 0x1fe1c495040 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x1fe1c4993e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x1fe1c4993b0 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x1fe1c499388 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x1fe1c499348 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x1fe1c4995a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1fe1c499440 <col:29> 'int' 0
|       `-CallExpr 0x1fe1c499540 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1fe1c499528 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1fe1c499468 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x1fe1c494f68 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x1fe1c499570 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x1fe1c499488 <col:41> 'const wchar_t *' lvalue ParmVar 0x1fe1c495040 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x1fe1c499588 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1fe1c4994a8 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x1fe1c4950b8 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c499988 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1fe1c499620 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c499698 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c499710 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c499788 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1fe1c499df0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c499b30 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1fe1c499ba8 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c499c20 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c499ea8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c492268 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x1fe1c492308 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x1fe1c492370 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1fe1c4923d8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1fe1c492458 prev 0x1fe1c492268 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x1fe1c499fe8 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c49a060 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c49a0d8 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c4927d8 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1fe1c492538 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4925b0 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c492628 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4926a0 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1fe1c492b88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c492980 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4929f8 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c492a70 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c492c40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c492ef0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c492d80 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c492df8 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x1fe1c493138 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1fe1c492fc8 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c493040 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1fe1c4a1478 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c4a1308 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4a1380 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x1fe1c4a16c0 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c4a1550 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4a15c8 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x1fe1c4a19c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c4a1858 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4a18d0 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c4a1a78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4a1ee0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1fe1c4a1bb8 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4a1c30 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4a1d10 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x1fe1c4a2200 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x1fe1c4a2088 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x1fe1c49e2b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c49e6c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1fe1c49e3f0 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x1fe1c49e468 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c49e4e8 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x1fe1c49e938 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1fe1c49e860 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c49e9e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c49eda0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c49eb20 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x1fe1c49eb98 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c49ec10 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1fe1c49eff8 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c49ee80 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c49eef8 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x1fe1c4a03b8 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1fe1c49f0d0 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c49f148 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c49f1c0 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a06a8 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c4a0498 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4a0510 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4a0588 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c4a0b00 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a0788 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4a0800 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4a0878 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c4a08f0 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a0f58 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x1fe1c4a0be8 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4a0c60 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c4a0cd8 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4a0d50 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c49b3a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1fe1c4a1100 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4a1178 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1fe1c4a11f0 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c49b458 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c49b670 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x1fe1c49b598 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x1fe1c49ba00 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x1fe1c49b740 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c49b7b8 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c49b830 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x1fe1c49bdb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1fe1c49bba0 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x1fe1c49bc18 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1fe1c49be68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c49c118 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c49bfa8 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x1fe1c49c020 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c49f468 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1fe1c49f390 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1fe1c49f510 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c49f910 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c49f650 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x1fe1c49f6c8 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c49f740 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c49fcc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1fe1c49fab0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1fe1c49fb28 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c49fd78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c4a0028 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c49feb8 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x1fe1c49ff30 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c49c290 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1fe1c4a01c0 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1fe1c49c338 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c49c680 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c49c478 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x1fe1c49c4f0 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c49c568 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c49c990 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1fe1c49c820 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1fe1c49c898 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1fe1c49ca40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1fe1c49ce40 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c49cb80 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c49cbf8 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c49cc70 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c49a270 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c49cf20 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1fe1c49cf98 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c49d010 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c49d088 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c49a4d0 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c49a358 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c49a3d0 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x1fe1c49a7b8 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1fe1c49a5a8 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c49a620 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c49a698 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c49aa10 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c49a898 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c49a910 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x1fe1c49acf8 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1fe1c49aae8 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c49ab60 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c49abd8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c49afe8 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c49add8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c49ae50 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c49aec8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c4a5460 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c49b0c8 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c49b140 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c49b1b8 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c4a5320 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a5758 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c4a5548 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4a55c0 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1fe1c4a5638 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1fe1c4a5ae0 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a5838 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4a58b0 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4a5928 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1fe1c4a59a0 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a5d40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1fe1c4a5c68 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c4a5de8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x1fe1c4a6120 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c4a5fa8 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4a6020 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c4a61d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x1fe1c4a65f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1fe1c4a63e0 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4a6458 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4a64d0 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c4a66a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x1fe1c4a6a70 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1fe1c4a6868 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4a68e0 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1fe1c4a6958 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1fe1c4a6b28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x1fe1c4a6dc0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1fe1c4a6ce8 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1fe1c4a6e68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x1fe1c4a7198 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1fe1c4a7028 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x1fe1c4a70a0 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1fe1c4a7248 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x1fe1c4a7510 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1fe1c4a7438 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1fe1c4a75b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x1fe1c4a7850 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1fe1c4a7778 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1fe1c4a78f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x1fe1c4a7c30 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1fe1c4a7ab8 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1fe1c4a7b30 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1fe1c4a7ce0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-FunctionDecl 0x1fe1c4a7f20 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:49:9, col:58> col:40 __pctype_func 'const unsigned short *(void) __attribute__((cdecl))':'const unsigned short *(void)'
|-VarDecl 0x1fe1c4a7ff0 <line:51:9, col:38> col:38 _pctype 'const unsigned short *' extern
|-VarDecl 0x1fe1c4a80f0 <line:62:9, col:45> col:37 _wctype 'const unsigned short []' extern
|-FunctionDecl 0x1fe1c4a8350 <line:73:9, col:53> col:34 __pwctype_func 'const wctype_t *(void) __attribute__((cdecl))':'const wctype_t *(void)'
|-VarDecl 0x1fe1c4a8418 <line:75:9, col:32> col:32 _pwctype 'const wctype_t *' extern
|-FunctionDecl 0x1fe1c4a86a0 <line:119:24, col:72> col:36 _isctype 'int (int, int) __attribute__((cdecl))':'int (int, int)'
| |-ParmVarDecl 0x1fe1c4a84b0 <col:50, col:54> col:54 _C 'int'
| `-ParmVarDecl 0x1fe1c4a8530 <col:63, col:67> col:67 _Type 'int'
|-FunctionDecl 0x1fe1c4a8a58 <line:120:24, col:102> col:36 _isctype_l 'int (int, int, _locale_t) __attribute__((cdecl))':'int (int, int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a8780 <col:52, col:56> col:56 _C 'int'
| |-ParmVarDecl 0x1fe1c4a8800 <col:65, col:69> col:69 _Type 'int'
| `-ParmVarDecl 0x1fe1c4a8878 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a8c20 <line:121:55> col:55 implicit isalpha 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4a8cc0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4a8d30 <col:55> Implicit
| `-PureAttr 0x1fe1c4a8d88 <col:55> Implicit
|-FunctionDecl 0x1fe1c4a8db0 prev 0x1fe1c4a8c20 <col:43, col:74> col:55 isalpha 'int (int)'
| |-ParmVarDecl 0x1fe1c4a8b40 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1fe1c4a8ea0 <col:55> Inherited Implicit
| `-PureAttr 0x1fe1c4a8ec8 <col:55> Inherited Implicit
|-FunctionDecl 0x1fe1c4a9130 <line:122:24, col:86> col:36 _isalpha_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a8f08 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4a8f80 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a4310 <line:123:55> col:55 implicit isupper 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4a43b0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4a4420 <col:55> Implicit
| `-PureAttr 0x1fe1c4a4478 <col:55> Implicit
|-FunctionDecl 0x1fe1c4a44a0 prev 0x1fe1c4a4310 <col:43, col:74> col:55 isupper 'int (int)'
| |-ParmVarDecl 0x1fe1c4a9210 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1fe1c4a4590 <col:55> Inherited Implicit
| `-PureAttr 0x1fe1c4a45b8 <col:55> Inherited Implicit
|-FunctionDecl 0x1fe1c4a4770 <line:124:24, col:86> col:36 _isupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a45f8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4a4670 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a4930 <line:125:55> col:55 implicit islower 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4a49d0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4a4a40 <col:55> Implicit
| `-PureAttr 0x1fe1c4a4a98 <col:55> Implicit
|-FunctionDecl 0x1fe1c4a4ac0 prev 0x1fe1c4a4930 <col:43, col:74> col:55 islower 'int (int)'
| |-ParmVarDecl 0x1fe1c4a4850 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1fe1c4a4bb0 <col:55> Inherited Implicit
| `-PureAttr 0x1fe1c4a4bd8 <col:55> Inherited Implicit
|-FunctionDecl 0x1fe1c4a4d90 <line:126:24, col:86> col:36 _islower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a4c18 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4a4c90 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a4f50 <line:127:55> col:55 implicit used isdigit 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4a4ff0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4a5060 <col:55> Implicit
| `-PureAttr 0x1fe1c4a50b8 <col:55> Implicit
|-FunctionDecl 0x1fe1c4a50e0 prev 0x1fe1c4a4f50 <col:43, col:74> col:55 used isdigit 'int (int)'
| |-ParmVarDecl 0x1fe1c4a4e70 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1fe1c4a51d0 <col:55> Inherited Implicit
| `-PureAttr 0x1fe1c4a51f8 <col:55> Inherited Implicit
|-FunctionDecl 0x1fe1c4a9460 <line:128:24, col:86> col:36 _isdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a5238 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4a9360 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a9620 <line:129:36> col:36 implicit isxdigit 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4a96c0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4a9730 <col:36> Implicit
| `-PureAttr 0x1fe1c4a9788 <col:36> Implicit
|-FunctionDecl 0x1fe1c4a97b0 prev 0x1fe1c4a9620 <col:24, col:56> col:36 isxdigit 'int (int)'
| |-ParmVarDecl 0x1fe1c4a9540 <col:50, col:54> col:54 _C 'int'
| |-NoThrowAttr 0x1fe1c4a98a0 <col:36> Inherited Implicit
| `-PureAttr 0x1fe1c4a98c8 <col:36> Inherited Implicit
|-FunctionDecl 0x1fe1c4a9a80 <line:130:24, col:87> col:36 _isxdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a9908 <col:53, col:57> col:57 _C 'int'
| `-ParmVarDecl 0x1fe1c4a9980 <col:70, col:80> col:80 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a9c40 <line:131:55> col:55 implicit isspace 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4a9ce0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4a9d50 <col:55> Implicit
| `-PureAttr 0x1fe1c4a9da8 <col:55> Implicit
|-FunctionDecl 0x1fe1c4a9dd0 prev 0x1fe1c4a9c40 <col:43, col:74> col:55 isspace 'int (int)'
| |-ParmVarDecl 0x1fe1c4a9b60 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1fe1c4a9ec0 <col:55> Inherited Implicit
| `-PureAttr 0x1fe1c4a9ee8 <col:55> Inherited Implicit
|-FunctionDecl 0x1fe1c4aa0a0 <line:132:24, col:86> col:36 _isspace_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a9f28 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4a9fa0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4aa260 <line:133:36> col:36 implicit ispunct 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4aa370 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4aa3e0 <col:36> Implicit
| `-PureAttr 0x1fe1c4aa438 <col:36> Implicit
|-FunctionDecl 0x1fe1c4aa460 prev 0x1fe1c4aa260 <col:24, col:55> col:36 ispunct 'int (int)'
| |-ParmVarDecl 0x1fe1c4aa180 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1fe1c4aa550 <col:36> Inherited Implicit
| `-PureAttr 0x1fe1c4aa578 <col:36> Inherited Implicit
|-FunctionDecl 0x1fe1c4aa730 <line:134:24, col:86> col:36 _ispunct_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4aa5b8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4aa630 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4aa8f0 <line:135:36> col:36 implicit isblank 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4aa990 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4aaa00 <col:36> Implicit
| `-PureAttr 0x1fe1c4aaa58 <col:36> Implicit
|-FunctionDecl 0x1fe1c4aaa80 prev 0x1fe1c4aa8f0 <col:24, col:55> col:36 isblank 'int (int)'
| |-ParmVarDecl 0x1fe1c4aa810 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1fe1c4aab70 <col:36> Inherited Implicit
| `-PureAttr 0x1fe1c4aab98 <col:36> Inherited Implicit
|-FunctionDecl 0x1fe1c4aad50 <line:136:24, col:86> col:36 _isblank_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4aabd8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4aac50 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4aaf10 <line:137:55> col:55 implicit isalnum 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4aafb0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4ab020 <col:55> Implicit
| `-PureAttr 0x1fe1c4ab078 <col:55> Implicit
|-FunctionDecl 0x1fe1c4ab0a0 prev 0x1fe1c4aaf10 <col:43, col:74> col:55 isalnum 'int (int)'
| |-ParmVarDecl 0x1fe1c4aae30 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1fe1c4ab190 <col:55> Inherited Implicit
| `-PureAttr 0x1fe1c4ab1b8 <col:55> Inherited Implicit
|-FunctionDecl 0x1fe1c4a3300 <line:138:24, col:86> col:36 _isalnum_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4ab1f8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4ab270 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a34c0 <line:139:36> col:36 implicit isprint 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4a3560 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4a35d0 <col:36> Implicit
| `-PureAttr 0x1fe1c4a3628 <col:36> Implicit
|-FunctionDecl 0x1fe1c4a3650 prev 0x1fe1c4a34c0 <col:24, col:55> col:36 isprint 'int (int)'
| |-ParmVarDecl 0x1fe1c4a33e0 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1fe1c4a3740 <col:36> Inherited Implicit
| `-PureAttr 0x1fe1c4a3768 <col:36> Inherited Implicit
|-FunctionDecl 0x1fe1c4a3920 <line:140:24, col:86> col:36 _isprint_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a37a8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4a3820 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a3ae0 <line:141:36> col:36 implicit isgraph 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4a3b80 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4a3bf0 <col:36> Implicit
| `-PureAttr 0x1fe1c4a3c48 <col:36> Implicit
|-FunctionDecl 0x1fe1c4a3c70 prev 0x1fe1c4a3ae0 <col:24, col:55> col:36 isgraph 'int (int)'
| |-ParmVarDecl 0x1fe1c4a3a00 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1fe1c4a3d60 <col:36> Inherited Implicit
| `-PureAttr 0x1fe1c4a3d88 <col:36> Inherited Implicit
|-FunctionDecl 0x1fe1c4a3f40 <line:142:24, col:86> col:36 _isgraph_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4a3dc8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4a3e40 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4a4100 <line:143:36> col:36 implicit iscntrl 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4a41a0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4a4210 <col:36> Implicit
| `-PureAttr 0x1fe1c4a4268 <col:36> Implicit
|-FunctionDecl 0x1fe1c4ac390 prev 0x1fe1c4a4100 <col:24, col:55> col:36 iscntrl 'int (int)'
| |-ParmVarDecl 0x1fe1c4a4020 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1fe1c4ac480 <col:36> Inherited Implicit
| `-PureAttr 0x1fe1c4ac4a8 <col:36> Inherited Implicit
|-FunctionDecl 0x1fe1c4ac660 <line:144:24, col:86> col:36 _iscntrl_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4ac4e8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4ac560 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4ac820 <line:145:55> col:55 implicit toupper 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4ac8c0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4ac930 <col:55> Implicit
| `-PureAttr 0x1fe1c4ac988 <col:55> Implicit
|-FunctionDecl 0x1fe1c4ac9b0 prev 0x1fe1c4ac820 <col:43, col:74> col:55 toupper 'int (int)'
| |-ParmVarDecl 0x1fe1c4ac740 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1fe1c4acaa0 <col:55> Inherited Implicit
| `-PureAttr 0x1fe1c4acac8 <col:55> Inherited Implicit
|-FunctionDecl 0x1fe1c4acbe8 <line:146:55> col:55 implicit tolower 'int (int)' extern
| |-ParmVarDecl 0x1fe1c4acc88 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1fe1c4accf8 <col:55> Implicit
| `-PureAttr 0x1fe1c4acd50 <col:55> Implicit
|-FunctionDecl 0x1fe1c4acd78 prev 0x1fe1c4acbe8 <col:43, col:74> col:55 tolower 'int (int)'
| |-ParmVarDecl 0x1fe1c4acb08 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1fe1c4ace68 <col:55> Inherited Implicit
| `-PureAttr 0x1fe1c4ace90 <col:55> Inherited Implicit
|-FunctionDecl 0x1fe1c4acfb0 <line:147:43, col:75> col:55 _tolower 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c4aced0 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1fe1c4ad200 <line:148:24, col:86> col:36 _tolower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4ad088 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4ad100 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b1418 <line:149:43, col:75> col:55 _toupper 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c4ad2e0 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1fe1c4b1668 <line:150:24, col:86> col:36 _toupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b14f0 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1fe1c4b1568 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b1828 <line:151:24, col:57> col:36 __isascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c4b1748 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1fe1c4b19e0 <line:152:24, col:57> col:36 __toascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c4b1900 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1fe1c4b1b98 <line:153:24, col:57> col:36 __iscsymf 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c4b1ab8 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1fe1c4b1d50 <line:154:24, col:56> col:36 __iscsym 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c4b1c70 <col:50, col:54> col:54 _C 'int'
|-FunctionDecl 0x1fe1c4b1f98 <line:164:24, col:59> col:36 iswalpha 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b1e20 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b2290 <line:165:24, col:90> col:36 _iswalpha_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b2068 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b20e0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b0448 <line:166:24, col:59> col:36 iswupper 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b2368 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b0690 <line:167:24, col:90> col:36 _iswupper_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b0518 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b0590 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b0848 <line:168:24, col:59> col:36 iswlower 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b0768 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b0a90 <line:169:24, col:90> col:36 _iswlower_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b0918 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b0990 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b0c48 <line:170:24, col:59> col:36 iswdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b0b68 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b0e90 <line:171:24, col:90> col:36 _iswdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b0d18 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b0d90 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b1048 <line:172:24, col:60> col:36 iswxdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b0f68 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b1290 <line:173:24, col:91> col:36 _iswxdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b1118 <col:54, col:61> col:61 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b1190 <col:74, col:84> col:84 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b2468 <line:174:24, col:59> col:36 iswspace 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b1368 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b26b0 <line:175:24, col:90> col:36 _iswspace_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b2538 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b25b0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b2868 <line:176:24, col:59> col:36 iswpunct 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b2788 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b2ab0 <line:177:24, col:90> col:36 _iswpunct_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b2938 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b29b0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b2c68 <line:178:24, col:59> col:36 iswblank 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b2b88 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b2eb0 <line:179:24, col:90> col:36 _iswblank_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b2d38 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b2db0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b3068 <line:180:24, col:59> col:36 iswalnum 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b2f88 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b32b0 <line:181:24, col:90> col:36 _iswalnum_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b3138 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b31b0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4ab3f8 <line:182:24, col:59> col:36 iswprint 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b3388 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4ab640 <line:183:24, col:90> col:36 _iswprint_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4ab4c8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4ab540 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4ab7f8 <line:184:24, col:59> col:36 iswgraph 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4ab718 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4aba40 <line:185:24, col:90> col:36 _iswgraph_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4ab8c8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4ab940 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4abbf8 <line:186:24, col:59> col:36 iswcntrl 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4abb18 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4abe40 <line:187:24, col:90> col:36 _iswcntrl_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4abcc8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4abd40 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4abff8 <line:188:24, col:59> col:36 iswascii 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4abf18 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4ac210 <line:190:24, col:62> col:39 towupper 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1fe1c4ac0c8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b35a8 <line:191:24, col:93> col:39 _towupper_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4ac2e0 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b3400 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b3758 <line:192:24, col:62> col:39 towlower 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1fe1c4b3680 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b3998 <line:193:24, col:93> col:39 _towlower_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b3828 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b38a0 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b3c90 <line:194:24, col:80> col:36 iswctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1fe1c4b3a70 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b3ae8 <col:66, col:75> col:75 _Type 'wctype_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b4038 <line:195:24, col:111> col:36 _iswctype_l 'int (wint_t, wctype_t, _locale_t) __attribute__((cdecl))':'int (wint_t, wctype_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b3d68 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1fe1c4b3de0 <col:69, col:78> col:78 _Type 'wctype_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b3e58 <col:94, col:104> col:104 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b41f8 <line:197:24, col:61> col:36 __iswcsymf 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b4118 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b4450 <line:198:24, col:90> col:36 _iswcsymf_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b42c8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b4340 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b4608 <line:199:24, col:60> col:36 __iswcsym 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1fe1c4b4528 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1fe1c4b4850 <line:200:24, col:89> col:36 _iswcsym_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b46d8 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1fe1c4b4750 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b4a10 <line:203:24, col:58> col:36 isleadbyte 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1fe1c4b4930 <col:52, col:56> col:56 _C 'int'
|-FunctionDecl 0x1fe1c4b4c60 <line:204:24, col:89> col:36 _isleadbyte_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1fe1c4b4ae8 <col:55, col:59> col:59 _C 'int'
| `-ParmVarDecl 0x1fe1c4b4b60 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4b4f70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:205:90> col:45 is_wctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1fe1c4b4df8 <col:60, col:67> col:67 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1fe1c4b4e70 <col:76, col:85> col:85 _Type 'wctype_t':'unsigned short'
| `-DeprecatedAttr 0x1fe1c4b5020 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instead. See online help for details." ""
|-VarDecl 0x1fe1c4b5168 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:235:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x1fe1c4b52b8 <line:239:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1fe1c4ae4a8 <line:240:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x1fe1c4b5380 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1fe1c4aeb00 <.//openssl//file_jk/before\crypto\bio\b_print.c:30:1, line:31:46> line:30:12 used fmtstr 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' static
| |-ParmVarDecl 0x1fe1c4ae580 <col:19, col:25> col:26 'char **'
| |-ParmVarDecl 0x1fe1c4ae600 <col:28, col:34> col:35 'char **'
| |-ParmVarDecl 0x1fe1c4ae6d8 <col:37, col:44> col:45 'size_t *'
| |-ParmVarDecl 0x1fe1c4ae750 <col:47, col:54> col:55 'size_t *'
| |-ParmVarDecl 0x1fe1c4ae7d0 <line:31:19, col:30> col:31 'const char *'
| |-ParmVarDecl 0x1fe1c4ae850 <col:33> col:36 'int'
| |-ParmVarDecl 0x1fe1c4ae8d0 <col:38> col:41 'int'
| `-ParmVarDecl 0x1fe1c4ae950 <col:43> col:46 'int'
|-FunctionDecl 0x1fe1c4af1d0 <line:32:1, line:33:46> line:32:12 used fmtint 'int (char **, char **, size_t *, size_t *, int, int, int, int, int)' static
| |-ParmVarDecl 0x1fe1c4aec10 <col:19, col:25> col:26 'char **'
| |-ParmVarDecl 0x1fe1c4aec90 <col:28, col:34> col:35 'char **'
| |-ParmVarDecl 0x1fe1c4aed08 <col:37, col:44> col:45 'size_t *'
| |-ParmVarDecl 0x1fe1c4aed80 <col:47, col:54> col:55 'size_t *'
| |-ParmVarDecl 0x1fe1c4aee00 <line:33:19> col:19 int64_t 'int'
| |-ParmVarDecl 0x1fe1c4aee80 <col:28> col:31 'int'
| |-ParmVarDecl 0x1fe1c4aef00 <col:33> col:36 'int'
| |-ParmVarDecl 0x1fe1c4aef80 <col:38> col:41 'int'
| `-ParmVarDecl 0x1fe1c4af000 <col:43> col:46 'int'
|-FunctionDecl 0x1fe1c4b6960 <line:34:1, line:35:45> line:34:12 used fmtfp 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' static
| |-ParmVarDecl 0x1fe1c4af2e8 <col:18, col:24> col:25 'char **'
| |-ParmVarDecl 0x1fe1c4b6430 <col:27, col:33> col:34 'char **'
| |-ParmVarDecl 0x1fe1c4b64a8 <col:36, col:43> col:44 'size_t *'
| |-ParmVarDecl 0x1fe1c4b6520 <col:46, col:53> col:54 'size_t *'
| |-ParmVarDecl 0x1fe1c4b65a0 <line:27:18> line:35:25 'double'
| |-ParmVarDecl 0x1fe1c4b6620 <col:27> col:30 'int'
| |-ParmVarDecl 0x1fe1c4b66a0 <col:32> col:35 'int'
| |-ParmVarDecl 0x1fe1c4b6720 <col:37> col:40 'int'
| `-ParmVarDecl 0x1fe1c4b67a0 <col:42> col:45 'int'
|-FunctionDecl 0x1fe1c4b6dc0 <line:36:1, col:65> col:12 used doapr_outch 'int (char **, char **, size_t *, size_t *, int)' static
| |-ParmVarDecl 0x1fe1c4b6a78 <col:24, col:30> col:31 'char **'
| |-ParmVarDecl 0x1fe1c4b6af8 <col:33, col:39> col:40 'char **'
| |-ParmVarDecl 0x1fe1c4b6b70 <col:42, col:49> col:50 'size_t *'
| |-ParmVarDecl 0x1fe1c4b6be8 <col:52, col:59> col:60 'size_t *'
| `-ParmVarDecl 0x1fe1c4b6c68 <col:62> col:65 'int'
|-FunctionDecl 0x1fe1c4be4b0 <line:37:1, line:39:50> line:37:12 used _dopr 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' static
| |-ParmVarDecl 0x1fe1c4b6eb8 <col:18, col:25> col:25 sbuffer 'char **'
| |-ParmVarDecl 0x1fe1c4b6f38 <col:34, col:41> col:41 buffer 'char **'
| |-ParmVarDecl 0x1fe1c4b6fb0 <line:38:18, col:26> col:26 maxlen 'size_t *'
| |-ParmVarDecl 0x1fe1c4b7028 <col:34, col:42> col:42 retlen 'size_t *'
| |-ParmVarDecl 0x1fe1c4b70a8 <col:50, col:55> col:55 truncated 'int *'
| |-ParmVarDecl 0x1fe1c4b7128 <line:39:18, col:30> col:30 format 'const char *'
| `-ParmVarDecl 0x1fe1c4b71a0 <col:38, col:46> col:46 args 'va_list':'char *'
|-FunctionDecl 0x1fe1c4bea10 prev 0x1fe1c4be4b0 <line:82:1, line:361:1> line:83:1 used _dopr 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' static
| |-ParmVarDecl 0x1fe1c4be5b8 <col:7, col:14> col:14 used sbuffer 'char **'
| |-ParmVarDecl 0x1fe1c4be638 <line:84:7, col:14> col:14 used buffer 'char **'
| |-ParmVarDecl 0x1fe1c4be6b0 <line:85:7, col:15> col:15 used maxlen 'size_t *'
| |-ParmVarDecl 0x1fe1c4be728 <line:86:7, col:15> col:15 used retlen 'size_t *'
| |-ParmVarDecl 0x1fe1c4be7a8 <col:23, col:28> col:28 used truncated 'int *'
| |-ParmVarDecl 0x1fe1c4be828 <col:39, col:51> col:51 used format 'const char *'
| |-ParmVarDecl 0x1fe1c4be8a0 <col:59, col:67> col:67 used args 'va_list':'char *'
| `-CompoundStmt 0x1fe1c4774e8 <line:87:1, line:361:1>
|   |-DeclStmt 0x1fe1c4beb60 <line:88:5, col:12>
|   | `-VarDecl 0x1fe1c4beaf8 <col:5, col:10> col:10 used ch 'char'
|   |-DeclStmt 0x1fe1c4bebf8 <line:27:18, line:90:19>
|   | `-VarDecl 0x1fe1c4beb90 <line:27:18, line:90:13> col:13 used fvalue 'double'
|   |-DeclStmt 0x1fe1c4bec90 <line:91:5, col:19>
|   | `-VarDecl 0x1fe1c4bec28 <col:5, col:11> col:11 used strvalue 'char *'
|   |-DeclStmt 0x1fe1c4bed28 <line:92:5, col:12>
|   | `-VarDecl 0x1fe1c4becc0 <col:5, col:9> col:9 used min 'int'
|   |-DeclStmt 0x1fe1c4bedc0 <line:93:5, col:12>
|   | `-VarDecl 0x1fe1c4bed58 <col:5, col:9> col:9 used max 'int'
|   |-DeclStmt 0x1fe1c4bee58 <line:94:5, col:14>
|   | `-VarDecl 0x1fe1c4bedf0 <col:5, col:9> col:9 used state 'int'
|   |-DeclStmt 0x1fe1c4beef0 <line:95:5, col:14>
|   | `-VarDecl 0x1fe1c4bee88 <col:5, col:9> col:9 used flags 'int'
|   |-DeclStmt 0x1fe1c4bef88 <line:96:5, col:15>
|   | `-VarDecl 0x1fe1c4bef20 <col:5, col:9> col:9 used cflags 'int'
|   |-DeclStmt 0x1fe1c4bf018 <line:97:5, col:19>
|   | `-VarDecl 0x1fe1c4befb0 <col:5, col:12> col:12 used currlen 'size_t':'unsigned long long'
|   |-BinaryOperator 0x1fe1c4bf090 <line:99:5, line:42:25> 'int' '='
|   | |-DeclRefExpr 0x1fe1c4bf030 <line:99:5> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   | `-IntegerLiteral 0x1fe1c4bf068 <line:42:25> 'int' 0
|   |-BinaryOperator 0x1fe1c4bf248 <line:100:5, col:38> 'int' '='
|   | |-DeclRefExpr 0x1fe1c4bf0b0 <col:5> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   | `-ImplicitCastExpr 0x1fe1c4bf230 <col:13, col:38> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1fe1c4bf210 <col:13, col:38> 'size_t':'unsigned long long' '='
|   |     |-DeclRefExpr 0x1fe1c4bf0e8 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x1fe1c4bf1f8 <col:23, col:38> 'size_t':'unsigned long long' <IntegralCast>
|   |       `-BinaryOperator 0x1fe1c4bf1d8 <col:23, col:38> 'int' '='
|   |         |-DeclRefExpr 0x1fe1c4bf120 <col:23> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |         `-BinaryOperator 0x1fe1c4bf1b8 <col:32, col:38> 'int' '='
|   |           |-DeclRefExpr 0x1fe1c4bf158 <col:32> 'int' lvalue Var 0x1fe1c4becc0 'min' 'int'
|   |           `-IntegerLiteral 0x1fe1c4bf190 <col:38> 'int' 0
|   |-BinaryOperator 0x1fe1c4bf2e0 <line:101:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x1fe1c4bf268 <col:5> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   | `-UnaryOperator 0x1fe1c4bf2c8 <col:11, col:12> 'int' prefix '-'
|   |   `-IntegerLiteral 0x1fe1c4bf2a0 <col:12> 'int' 1
|   |-BinaryOperator 0x1fe1c4bf3a0 <line:102:5, col:17> 'char' '='
|   | |-DeclRefExpr 0x1fe1c4bf300 <col:5> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   | `-ImplicitCastExpr 0x1fe1c4bf388 <col:10, col:17> 'char' <LValueToRValue>
|   |   `-UnaryOperator 0x1fe1c4bf370 <col:10, col:17> 'const char' lvalue prefix '*' cannot overflow
|   |     `-UnaryOperator 0x1fe1c4bf358 <col:11, col:17> 'const char *' postfix '++'
|   |       `-DeclRefExpr 0x1fe1c4bf338 <col:11> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |-WhileStmt 0x1fe1c4c5198 <line:104:5, line:347:5>
|   | |-BinaryOperator 0x1fe1c4bf420 <line:104:12, line:49:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x1fe1c4bf408 <line:104:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4bf3c0 <col:12> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   | | `-IntegerLiteral 0x1fe1c4bf3e0 <line:49:25> 'int' 7
|   | `-CompoundStmt 0x1fe1c4c5178 <line:104:32, line:347:5>
|   |   |-IfStmt 0x1fe1c4c0770 <line:105:9, line:49:25>
|   |   | |-BinaryOperator 0x1fe1c4c06e8 <line:105:13, col:64> 'int' '||'
|   |   | | |-BinaryOperator 0x1fe1c4c04d0 <col:13, col:19> 'int' '=='
|   |   | | | |-ImplicitCastExpr 0x1fe1c4bf490 <col:13> 'int' <IntegralCast>
|   |   | | | | `-ImplicitCastExpr 0x1fe1c4bf478 <col:13> 'char' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x1fe1c4bf440 <col:13> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |   | | | `-CharacterLiteral 0x1fe1c4bf460 <col:19> 'int' 0
|   |   | | `-ParenExpr 0x1fe1c4c06c8 <col:27, col:64> 'int'
|   |   | |   `-BinaryOperator 0x1fe1c4c06a8 <col:28, col:58> 'int' '&&'
|   |   | |     |-BinaryOperator 0x1fe1c4c05c8 <col:28, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |   | |     | |-ImplicitCastExpr 0x1fe1c4c0598 <.//openssl//file_jk/before\crypto\bio\b_print.c:105:28> 'char **' <LValueToRValue>
|   |   | |     | | `-DeclRefExpr 0x1fe1c4c04f0 <col:28> 'char **' lvalue ParmVar 0x1fe1c4be638 'buffer' 'char **'
|   |   | |     | `-ImplicitCastExpr 0x1fe1c4c05b0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   |   | |     |   `-ParenExpr 0x1fe1c4c0578 <col:17, col:27> 'void *'
|   |   | |     |     `-CStyleCastExpr 0x1fe1c4c0550 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |     |       `-IntegerLiteral 0x1fe1c4c0510 <col:26> 'int' 0
|   |   | |     `-BinaryOperator 0x1fe1c4c0688 <.//openssl//file_jk/before\crypto\bio\b_print.c:105:46, col:58> 'int' '>='
|   |   | |       |-ImplicitCastExpr 0x1fe1c4c0658 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x1fe1c4c05e8 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |   | |       `-ImplicitCastExpr 0x1fe1c4c0670 <col:57, col:58> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |         `-UnaryOperator 0x1fe1c4c0640 <col:57, col:58> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   | |           `-ImplicitCastExpr 0x1fe1c4c0628 <col:58> 'size_t *' <LValueToRValue>
|   |   | |             `-DeclRefExpr 0x1fe1c4c0608 <col:58> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   |   | `-BinaryOperator 0x1fe1c4c0750 <line:106:13, line:49:25> 'int' '='
|   |   |   |-DeclRefExpr 0x1fe1c4c0708 <line:106:13> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |   |   `-IntegerLiteral 0x1fe1c4c0728 <line:49:25> 'int' 7
|   |   `-SwitchStmt 0x1fe1c4c07c0 <line:108:9, line:346:9>
|   |     |-ImplicitCastExpr 0x1fe1c4c07a8 <line:108:17> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1fe1c4c0788 <col:17> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |     `-CompoundStmt 0x1fe1c4c50b8 <col:24, line:346:9>
|   |       |-CaseStmt 0x1fe1c4c0820 <line:109:9, line:114:28>
|   |       | |-ConstantExpr 0x1fe1c4c0808 <line:42:25> 'int'
|   |       | | `-IntegerLiteral 0x1fe1c4c07e0 <col:25> 'int' 0
|   |       | `-IfStmt 0x1fe1c4c0ba8 <line:110:13, line:114:28> has_else
|   |       |   |-BinaryOperator 0x1fe1c4c08b0 <line:110:17, col:23> 'int' '=='
|   |       |   | |-ImplicitCastExpr 0x1fe1c4c0898 <col:17> 'int' <IntegralCast>
|   |       |   | | `-ImplicitCastExpr 0x1fe1c4c0880 <col:17> 'char' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x1fe1c4c0848 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   | `-CharacterLiteral 0x1fe1c4c0868 <col:23> 'int' 37
|   |       |   |-BinaryOperator 0x1fe1c4c0918 <line:111:17, line:43:25> 'int' '='
|   |       |   | |-DeclRefExpr 0x1fe1c4c08d0 <line:111:17> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |       |   | `-IntegerLiteral 0x1fe1c4c08f0 <line:43:25> 'int' 1
|   |       |   `-IfStmt 0x1fe1c4c0b90 <line:113:17, line:114:28>
|   |       |     |-UnaryOperator 0x1fe1c4c0b40 <line:113:20, col:70> 'int' prefix '!' cannot overflow
|   |       |     | `-CallExpr 0x1fe1c4c0a80 <col:21, col:70> 'int'
|   |       |     |   |-ImplicitCastExpr 0x1fe1c4c0a68 <col:21> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       |     |   | `-DeclRefExpr 0x1fe1c4c0938 <col:21> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       |     |   |-ImplicitCastExpr 0x1fe1c4c0ac8 <col:33> 'char **' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1fe1c4c0958 <col:33> 'char **' lvalue ParmVar 0x1fe1c4be5b8 'sbuffer' 'char **'
|   |       |     |   |-ImplicitCastExpr 0x1fe1c4c0ae0 <col:42> 'char **' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1fe1c4c0978 <col:42> 'char **' lvalue ParmVar 0x1fe1c4be638 'buffer' 'char **'
|   |       |     |   |-UnaryOperator 0x1fe1c4c09b8 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   |       |     |   | `-DeclRefExpr 0x1fe1c4c0998 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |       |     |   |-ImplicitCastExpr 0x1fe1c4c0af8 <col:60> 'size_t *' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1fe1c4c09d0 <col:60> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   |       |     |   `-ImplicitCastExpr 0x1fe1c4c0b28 <col:68> 'int' <IntegralCast>
|   |       |     |     `-ImplicitCastExpr 0x1fe1c4c0b10 <col:68> 'char' <LValueToRValue>
|   |       |     |       `-DeclRefExpr 0x1fe1c4c09f0 <col:68> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     `-ReturnStmt 0x1fe1c4c0b80 <line:114:21, col:28>
|   |       |       `-IntegerLiteral 0x1fe1c4c0b58 <col:28> 'int' 0
|   |       |-BinaryOperator 0x1fe1c4c0c58 <line:115:13, col:25> 'char' '='
|   |       | |-DeclRefExpr 0x1fe1c4c0bd0 <col:13> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       | `-ImplicitCastExpr 0x1fe1c4c0c40 <col:18, col:25> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1fe1c4c0c28 <col:18, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1fe1c4c0c10 <col:19, col:25> 'const char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1fe1c4c0bf0 <col:19> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |-BreakStmt 0x1fe1c4c0c78 <line:116:13>
|   |       |-CaseStmt 0x1fe1c4c0cc0 <line:117:9, line:142:13>
|   |       | |-ConstantExpr 0x1fe1c4c0ca8 <line:43:25> 'int'
|   |       | | `-IntegerLiteral 0x1fe1c4c0c80 <col:25> 'int' 1
|   |       | `-SwitchStmt 0x1fe1c4c0d38 <line:118:13, line:142:13>
|   |       |   |-ImplicitCastExpr 0x1fe1c4c0d20 <line:118:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1fe1c4c0d08 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1fe1c4c0ce8 <col:21> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   `-CompoundStmt 0x1fe1c4bc730 <col:25, line:142:13>
|   |       |     |-CaseStmt 0x1fe1c4c0d88 <line:119:13, line:53:32>
|   |       |     | |-ConstantExpr 0x1fe1c4c0d70 <line:119:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c0d58 <col:18> 'int' 45
|   |       |     | `-CompoundAssignOperator 0x1fe1c4c0e60 <line:120:17, line:53:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1fe1c4c0db0 <line:120:17> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1fe1c4c0e40 <line:53:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1fe1c4c0e20 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1fe1c4c0dd0 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1fe1c4c0df8 <col:31> 'int' 0
|   |       |     |-BinaryOperator 0x1fe1c4c0f18 <line:121:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1fe1c4c0e90 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1fe1c4c0f00 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1fe1c4c0ee8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1fe1c4c0ed0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1fe1c4c0eb0 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |-BreakStmt 0x1fe1c4c0f38 <line:122:17>
|   |       |     |-CaseStmt 0x1fe1c4c0f70 <line:123:13, line:55:32>
|   |       |     | |-ConstantExpr 0x1fe1c4c0f58 <line:123:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c0f40 <col:18> 'int' 43
|   |       |     | `-CompoundAssignOperator 0x1fe1c4c1048 <line:124:17, line:55:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1fe1c4c0f98 <line:124:17> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1fe1c4c1028 <line:55:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1fe1c4c1008 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1fe1c4c0fb8 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1fe1c4c0fe0 <col:31> 'int' 1
|   |       |     |-BinaryOperator 0x1fe1c4c1100 <line:125:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1fe1c4c1078 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1fe1c4c10e8 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1fe1c4c10d0 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1fe1c4c10b8 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1fe1c4c1098 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |-BreakStmt 0x1fe1c4c1120 <line:126:17>
|   |       |     |-CaseStmt 0x1fe1c4c1158 <line:127:13, line:57:32>
|   |       |     | |-ConstantExpr 0x1fe1c4c1140 <line:127:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c1128 <col:18> 'int' 32
|   |       |     | `-CompoundAssignOperator 0x1fe1c4c1230 <line:128:17, line:57:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1fe1c4c1180 <line:128:17> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1fe1c4c1210 <line:57:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1fe1c4c11f0 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1fe1c4c11a0 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1fe1c4c11c8 <col:31> 'int' 2
|   |       |     |-BinaryOperator 0x1fe1c4c12e8 <line:129:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1fe1c4c1260 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1fe1c4c12d0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1fe1c4c12b8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1fe1c4c12a0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1fe1c4c1280 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |-BreakStmt 0x1fe1c4c1308 <line:130:17>
|   |       |     |-CaseStmt 0x1fe1c4c1340 <line:131:13, line:59:32>
|   |       |     | |-ConstantExpr 0x1fe1c4c1328 <line:131:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c1310 <col:18> 'int' 35
|   |       |     | `-CompoundAssignOperator 0x1fe1c4c1418 <line:132:17, line:59:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1fe1c4c1368 <line:132:17> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1fe1c4c13f8 <line:59:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1fe1c4c13d8 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1fe1c4c1388 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1fe1c4c13b0 <col:31> 'int' 3
|   |       |     |-BinaryOperator 0x1fe1c4bc490 <line:133:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1fe1c4c1448 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1fe1c4c14b8 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1fe1c4c14a0 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1fe1c4c1488 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1fe1c4c1468 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |-BreakStmt 0x1fe1c4bc4b0 <line:134:17>
|   |       |     |-CaseStmt 0x1fe1c4bc4e8 <line:135:13, line:61:32>
|   |       |     | |-ConstantExpr 0x1fe1c4bc4d0 <line:135:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4bc4b8 <col:18> 'int' 48
|   |       |     | `-CompoundAssignOperator 0x1fe1c4bc5c0 <line:136:17, line:61:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1fe1c4bc510 <line:136:17> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1fe1c4bc5a0 <line:61:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1fe1c4bc580 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1fe1c4bc530 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1fe1c4bc558 <col:31> 'int' 4
|   |       |     |-BinaryOperator 0x1fe1c4bc678 <line:137:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1fe1c4bc5f0 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1fe1c4bc660 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1fe1c4bc648 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1fe1c4bc630 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1fe1c4bc610 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |-BreakStmt 0x1fe1c4bc698 <line:138:17>
|   |       |     |-DefaultStmt 0x1fe1c4bc708 <line:139:13, line:44:25>
|   |       |     | `-BinaryOperator 0x1fe1c4bc6e8 <line:140:17, line:44:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1fe1c4bc6a0 <line:140:17> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1fe1c4bc6c0 <line:44:25> 'int' 2
|   |       |     `-BreakStmt 0x1fe1c4bc728 <line:141:17>
|   |       |-BreakStmt 0x1fe1c4bc7c8 <line:143:13>
|   |       |-CaseStmt 0x1fe1c4bc810 <line:144:9, line:45:25>
|   |       | |-ConstantExpr 0x1fe1c4bc7f8 <line:44:25> 'int'
|   |       | | `-IntegerLiteral 0x1fe1c4bc7d0 <col:25> 'int' 2
|   |       | `-IfStmt 0x1fe1c4bcf68 <line:145:13, line:45:25> has_else
|   |       |   |-CallExpr 0x1fe1c4bc910 <line:145:17, col:42> 'int'
|   |       |   | |-ImplicitCastExpr 0x1fe1c4bc8f8 <col:17> 'int (*)(int)' <FunctionToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x1fe1c4bc838 <col:17> 'int (int)' Function 0x1fe1c4a50e0 'isdigit' 'int (int)'
|   |       |   | `-ImplicitCastExpr 0x1fe1c4bc938 <col:25, col:40> 'int' <IntegralCast>
|   |       |   |   `-CStyleCastExpr 0x1fe1c4bc8a8 <col:25, col:40> 'unsigned char' <IntegralCast>
|   |       |   |     `-ImplicitCastExpr 0x1fe1c4bc890 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|   |       |   |       `-DeclRefExpr 0x1fe1c4bc858 <col:40> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   |-CompoundStmt 0x1fe1c4bcb80 <col:45, line:148:13>
|   |       |   | |-BinaryOperator 0x1fe1c4bcab8 <line:146:17, line:79:32> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1fe1c4bc950 <line:146:17> 'int' lvalue Var 0x1fe1c4becc0 'min' 'int'
|   |       |   | | `-BinaryOperator 0x1fe1c4bca98 <col:23, line:79:32> 'int' '+'
|   |       |   | |   |-BinaryOperator 0x1fe1c4bc9d0 <line:146:23, col:28> 'int' '*'
|   |       |   | |   | |-IntegerLiteral 0x1fe1c4bc970 <col:23> 'int' 10
|   |       |   | |   | `-ImplicitCastExpr 0x1fe1c4bc9b8 <col:28> 'int' <LValueToRValue>
|   |       |   | |   |   `-DeclRefExpr 0x1fe1c4bc998 <col:28> 'int' lvalue Var 0x1fe1c4becc0 'min' 'int'
|   |       |   | |   `-ParenExpr 0x1fe1c4bca78 <line:79:24, col:32> 'int'
|   |       |   | |     `-BinaryOperator 0x1fe1c4bca58 <line:146:46, line:79:29> 'int' '-'
|   |       |   | |       |-ImplicitCastExpr 0x1fe1c4bca40 <line:146:46> 'int' <IntegralCast>
|   |       |   | |       | `-ImplicitCastExpr 0x1fe1c4bca28 <col:46> 'char' <LValueToRValue>
|   |       |   | |       |   `-DeclRefExpr 0x1fe1c4bc9f0 <col:46> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   | |       `-CharacterLiteral 0x1fe1c4bca10 <line:79:29> 'int' 48
|   |       |   | `-BinaryOperator 0x1fe1c4bcb60 <line:147:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1fe1c4bcad8 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1fe1c4bcb48 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1fe1c4bcb30 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1fe1c4bcb18 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1fe1c4bcaf8 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |   `-IfStmt 0x1fe1c4bcf40 <line:148:20, line:45:25> has_else
|   |       |     |-BinaryOperator 0x1fe1c4bcc08 <line:148:24, col:30> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x1fe1c4bcbf0 <col:24> 'int' <IntegralCast>
|   |       |     | | `-ImplicitCastExpr 0x1fe1c4bcbd8 <col:24> 'char' <LValueToRValue>
|   |       |     | |   `-DeclRefExpr 0x1fe1c4bcba0 <col:24> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-CharacterLiteral 0x1fe1c4bcbc0 <col:30> 'int' 42
|   |       |     |-CompoundStmt 0x1fe1c4bceb8 <col:35, line:152:13>
|   |       |     | |-BinaryOperator 0x1fe1c4bce30 <line:150:17, col:29> 'char' '='
|   |       |     | | |-DeclRefExpr 0x1fe1c4bcda8 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | | `-ImplicitCastExpr 0x1fe1c4bce18 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     | |   `-UnaryOperator 0x1fe1c4bce00 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     | |     `-UnaryOperator 0x1fe1c4bcde8 <col:23, col:29> 'const char *' postfix '++'
|   |       |     | |       `-DeclRefExpr 0x1fe1c4bcdc8 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     | `-BinaryOperator 0x1fe1c4bce98 <line:151:17, line:45:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1fe1c4bce50 <line:151:17> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1fe1c4bce70 <line:45:25> 'int' 3
|   |       |     `-BinaryOperator 0x1fe1c4bcf20 <line:153:17, line:45:25> 'int' '='
|   |       |       |-DeclRefExpr 0x1fe1c4bced8 <line:153:17> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |       |       `-IntegerLiteral 0x1fe1c4bcef8 <line:45:25> 'int' 3
|   |       |-BreakStmt 0x1fe1c4bcf90 <line:154:13>
|   |       |-CaseStmt 0x1fe1c4bcfd8 <line:155:9, line:47:25>
|   |       | |-ConstantExpr 0x1fe1c4bcfc0 <line:45:25> 'int'
|   |       | | `-IntegerLiteral 0x1fe1c4bcf98 <col:25> 'int' 3
|   |       | `-IfStmt 0x1fe1c4bd220 <line:156:13, line:47:25> has_else
|   |       |   |-BinaryOperator 0x1fe1c4bd068 <line:156:17, col:23> 'int' '=='
|   |       |   | |-ImplicitCastExpr 0x1fe1c4bd050 <col:17> 'int' <IntegralCast>
|   |       |   | | `-ImplicitCastExpr 0x1fe1c4bd038 <col:17> 'char' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x1fe1c4bd000 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   | `-CharacterLiteral 0x1fe1c4bd020 <col:23> 'int' 46
|   |       |   |-CompoundStmt 0x1fe1c4bd198 <col:28, line:159:13>
|   |       |   | |-BinaryOperator 0x1fe1c4bd0d0 <line:157:17, line:46:25> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1fe1c4bd088 <line:157:17> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |       |   | | `-IntegerLiteral 0x1fe1c4bd0a8 <line:46:25> 'int' 4
|   |       |   | `-BinaryOperator 0x1fe1c4bd178 <line:158:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1fe1c4bd0f0 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1fe1c4bd160 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1fe1c4bd148 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1fe1c4bd130 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1fe1c4bd110 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |   `-BinaryOperator 0x1fe1c4bd200 <line:160:17, line:47:25> 'int' '='
|   |       |     |-DeclRefExpr 0x1fe1c4bd1b8 <line:160:17> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |       |     `-IntegerLiteral 0x1fe1c4bd1d8 <line:47:25> 'int' 5
|   |       |-BreakStmt 0x1fe1c4bd248 <line:161:13>
|   |       |-CaseStmt 0x1fe1c4bd290 <line:162:9, line:47:25>
|   |       | |-ConstantExpr 0x1fe1c4bd278 <line:46:25> 'int'
|   |       | | `-IntegerLiteral 0x1fe1c4bd250 <col:25> 'int' 4
|   |       | `-IfStmt 0x1fe1c4b9978 <line:163:13, line:47:25> has_else
|   |       |   |-CallExpr 0x1fe1c4bd368 <line:163:17, col:42> 'int'
|   |       |   | |-ImplicitCastExpr 0x1fe1c4bd350 <col:17> 'int (*)(int)' <FunctionToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x1fe1c4bd2b8 <col:17> 'int (int)' Function 0x1fe1c4a50e0 'isdigit' 'int (int)'
|   |       |   | `-ImplicitCastExpr 0x1fe1c4bd390 <col:25, col:40> 'int' <IntegralCast>
|   |       |   |   `-CStyleCastExpr 0x1fe1c4bd328 <col:25, col:40> 'unsigned char' <IntegralCast>
|   |       |   |     `-ImplicitCastExpr 0x1fe1c4bd310 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|   |       |   |       `-DeclRefExpr 0x1fe1c4bd2d8 <col:40> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   |-CompoundStmt 0x1fe1c4b96a8 <col:45, line:168:13>
|   |       |   | |-IfStmt 0x1fe1c4b9460 <line:164:17, line:165:27>
|   |       |   | | |-BinaryOperator 0x1fe1c4bd408 <line:164:21, col:27> 'int' '<'
|   |       |   | | | |-ImplicitCastExpr 0x1fe1c4bd3f0 <col:21> 'int' <LValueToRValue>
|   |       |   | | | | `-DeclRefExpr 0x1fe1c4bd3a8 <col:21> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       |   | | | `-IntegerLiteral 0x1fe1c4bd3c8 <col:27> 'int' 0
|   |       |   | | `-BinaryOperator 0x1fe1c4bd470 <line:165:21, col:27> 'int' '='
|   |       |   | |   |-DeclRefExpr 0x1fe1c4bd428 <col:21> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       |   | |   `-IntegerLiteral 0x1fe1c4bd448 <col:27> 'int' 0
|   |       |   | |-BinaryOperator 0x1fe1c4b95e0 <line:166:17, line:79:32> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1fe1c4b9478 <line:166:17> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       |   | | `-BinaryOperator 0x1fe1c4b95c0 <col:23, line:79:32> 'int' '+'
|   |       |   | |   |-BinaryOperator 0x1fe1c4b94f8 <line:166:23, col:28> 'int' '*'
|   |       |   | |   | |-IntegerLiteral 0x1fe1c4b9498 <col:23> 'int' 10
|   |       |   | |   | `-ImplicitCastExpr 0x1fe1c4b94e0 <col:28> 'int' <LValueToRValue>
|   |       |   | |   |   `-DeclRefExpr 0x1fe1c4b94c0 <col:28> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       |   | |   `-ParenExpr 0x1fe1c4b95a0 <line:79:24, col:32> 'int'
|   |       |   | |     `-BinaryOperator 0x1fe1c4b9580 <line:166:46, line:79:29> 'int' '-'
|   |       |   | |       |-ImplicitCastExpr 0x1fe1c4b9568 <line:166:46> 'int' <IntegralCast>
|   |       |   | |       | `-ImplicitCastExpr 0x1fe1c4b9550 <col:46> 'char' <LValueToRValue>
|   |       |   | |       |   `-DeclRefExpr 0x1fe1c4b9518 <col:46> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   | |       `-CharacterLiteral 0x1fe1c4b9538 <line:79:29> 'int' 48
|   |       |   | `-BinaryOperator 0x1fe1c4b9688 <line:167:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1fe1c4b9600 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1fe1c4b9670 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1fe1c4b9658 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1fe1c4b9640 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1fe1c4b9620 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |   `-IfStmt 0x1fe1c4b9950 <line:168:20, line:47:25> has_else
|   |       |     |-BinaryOperator 0x1fe1c4b9738 <line:168:24, col:30> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x1fe1c4b9720 <col:24> 'int' <IntegralCast>
|   |       |     | | `-ImplicitCastExpr 0x1fe1c4b9708 <col:24> 'char' <LValueToRValue>
|   |       |     | |   `-DeclRefExpr 0x1fe1c4b96d0 <col:24> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-CharacterLiteral 0x1fe1c4b96f0 <col:30> 'int' 42
|   |       |     |-CompoundStmt 0x1fe1c4b98c8 <col:35, line:172:13>
|   |       |     | |-BinaryOperator 0x1fe1c4b9840 <line:170:17, col:29> 'char' '='
|   |       |     | | |-DeclRefExpr 0x1fe1c4b97b8 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | | `-ImplicitCastExpr 0x1fe1c4b9828 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     | |   `-UnaryOperator 0x1fe1c4b9810 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     | |     `-UnaryOperator 0x1fe1c4b97f8 <col:23, col:29> 'const char *' postfix '++'
|   |       |     | |       `-DeclRefExpr 0x1fe1c4b97d8 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     | `-BinaryOperator 0x1fe1c4b98a8 <line:171:17, line:47:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1fe1c4b9860 <line:171:17> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1fe1c4b9880 <line:47:25> 'int' 5
|   |       |     `-BinaryOperator 0x1fe1c4b9930 <line:173:17, line:47:25> 'int' '='
|   |       |       |-DeclRefExpr 0x1fe1c4b98e8 <line:173:17> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |       |       `-IntegerLiteral 0x1fe1c4b9908 <line:47:25> 'int' 5
|   |       |-BreakStmt 0x1fe1c4b99a0 <line:174:13>
|   |       |-CaseStmt 0x1fe1c4b99e8 <line:175:9, line:199:13>
|   |       | |-ConstantExpr 0x1fe1c4b99d0 <line:47:25> 'int'
|   |       | | `-IntegerLiteral 0x1fe1c4b99a8 <col:25> 'int' 5
|   |       | `-SwitchStmt 0x1fe1c4b9a60 <line:176:13, line:199:13>
|   |       |   |-ImplicitCastExpr 0x1fe1c4b9a48 <line:176:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1fe1c4b9a30 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1fe1c4b9a10 <col:21> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   `-CompoundStmt 0x1fe1c4ba208 <col:25, line:199:13>
|   |       |     |-CaseStmt 0x1fe1c4b9ab0 <line:177:13, line:68:25>
|   |       |     | |-ConstantExpr 0x1fe1c4b9a98 <line:177:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4b9a80 <col:18> 'int' 104
|   |       |     | `-BinaryOperator 0x1fe1c4b9b20 <line:178:17, line:68:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1fe1c4b9ad8 <line:178:17> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1fe1c4b9af8 <line:68:25> 'int' 1
|   |       |     |-BinaryOperator 0x1fe1c4b9bc8 <line:179:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1fe1c4b9b40 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1fe1c4b9bb0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1fe1c4b9b98 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1fe1c4b9b80 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1fe1c4b9b60 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |-BreakStmt 0x1fe1c4b9be8 <line:180:17>
|   |       |     |-CaseStmt 0x1fe1c4b9c20 <line:181:13, line:69:25>
|   |       |     | |-ConstantExpr 0x1fe1c4b9c08 <line:181:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4b9bf0 <col:18> 'int' 108
|   |       |     | `-IfStmt 0x1fe1c4b9e28 <line:182:17, line:69:25> has_else
|   |       |     |   |-BinaryOperator 0x1fe1c4b9ce0 <line:182:21, col:32> 'int' '=='
|   |       |     |   | |-ImplicitCastExpr 0x1fe1c4b9cc8 <col:21, col:22> 'int' <IntegralCast>
|   |       |     |   | | `-ImplicitCastExpr 0x1fe1c4b9cb0 <col:21, col:22> 'char' <LValueToRValue>
|   |       |     |   | |   `-UnaryOperator 0x1fe1c4b9c80 <col:21, col:22> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |   | |     `-ImplicitCastExpr 0x1fe1c4b9c68 <col:22> 'const char *' <LValueToRValue>
|   |       |     |   | |       `-DeclRefExpr 0x1fe1c4b9c48 <col:22> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |   | `-CharacterLiteral 0x1fe1c4b9c98 <col:32> 'int' 108
|   |       |     |   |-CompoundStmt 0x1fe1c4b9da0 <col:37, line:185:17>
|   |       |     |   | |-BinaryOperator 0x1fe1c4b9d48 <line:183:21, line:71:25> 'int' '='
|   |       |     |   | | |-DeclRefExpr 0x1fe1c4b9d00 <line:183:21> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |     |   | | `-IntegerLiteral 0x1fe1c4b9d20 <line:71:25> 'int' 4
|   |       |     |   | `-UnaryOperator 0x1fe1c4b9d88 <line:184:21, col:27> 'const char *' postfix '++'
|   |       |     |   |   `-DeclRefExpr 0x1fe1c4b9d68 <col:21> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |   `-BinaryOperator 0x1fe1c4b9e08 <line:186:21, line:69:25> 'int' '='
|   |       |     |     |-DeclRefExpr 0x1fe1c4b9dc0 <line:186:21> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |     |     `-IntegerLiteral 0x1fe1c4b9de0 <line:69:25> 'int' 2
|   |       |     |-BinaryOperator 0x1fe1c4b9ed8 <line:187:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1fe1c4b9e50 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1fe1c4b9ec0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1fe1c4b9ea8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1fe1c4b9e90 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1fe1c4b9e70 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |-BreakStmt 0x1fe1c4b9ef8 <line:188:17>
|   |       |     |-CaseStmt 0x1fe1c4b9f30 <line:189:13, line:71:25>
|   |       |     | |-ConstantExpr 0x1fe1c4b9f18 <line:189:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4b9f00 <col:18> 'int' 113
|   |       |     | `-BinaryOperator 0x1fe1c4b9fa0 <line:190:17, line:71:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1fe1c4b9f58 <line:190:17> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1fe1c4b9f78 <line:71:25> 'int' 4
|   |       |     |-BinaryOperator 0x1fe1c4ba048 <line:191:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1fe1c4b9fc0 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1fe1c4ba030 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1fe1c4ba018 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1fe1c4ba000 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1fe1c4b9fe0 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |-BreakStmt 0x1fe1c4ba068 <line:192:17>
|   |       |     |-CaseStmt 0x1fe1c4ba0a0 <line:193:13, line:70:25>
|   |       |     | |-ConstantExpr 0x1fe1c4ba088 <line:193:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4ba070 <col:18> 'int' 76
|   |       |     | `-BinaryOperator 0x1fe1c4ba110 <line:194:17, line:70:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1fe1c4ba0c8 <line:194:17> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1fe1c4ba0e8 <line:70:25> 'int' 3
|   |       |     |-BinaryOperator 0x1fe1c4ba1b8 <line:195:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1fe1c4ba130 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1fe1c4ba1a0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1fe1c4ba188 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1fe1c4ba170 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1fe1c4ba150 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |-BreakStmt 0x1fe1c4ba1d8 <line:196:17>
|   |       |     `-DefaultStmt 0x1fe1c4ba1e8 <line:197:13, line:198:17>
|   |       |       `-BreakStmt 0x1fe1c4ba1e0 <col:17>
|   |       |-BinaryOperator 0x1fe1c4ba2c8 <line:200:13, line:48:25> 'int' '='
|   |       | |-DeclRefExpr 0x1fe1c4ba280 <line:200:13> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |       | `-IntegerLiteral 0x1fe1c4ba2a0 <line:48:25> 'int' 6
|   |       |-BreakStmt 0x1fe1c4ba2e8 <line:201:13>
|   |       |-CaseStmt 0x1fe1c4ba330 <line:202:9, line:336:13>
|   |       | |-ConstantExpr 0x1fe1c4ba318 <line:48:25> 'int'
|   |       | | `-IntegerLiteral 0x1fe1c4ba2f0 <col:25> 'int' 6
|   |       | `-SwitchStmt 0x1fe1c4ba3a8 <line:203:13, line:336:13>
|   |       |   |-ImplicitCastExpr 0x1fe1c4ba390 <line:203:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1fe1c4ba378 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1fe1c4ba358 <col:21> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |   `-CompoundStmt 0x1fe1c4c4c78 <col:25, line:336:13>
|   |       |     |-CaseStmt 0x1fe1c4ba3f8 <line:204:13, line:219:17>
|   |       |     | |-ConstantExpr 0x1fe1c4ba3e0 <line:204:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4ba3c8 <col:18> 'int' 100
|   |       |     | `-CaseStmt 0x1fe1c4c14e0 <line:205:13, line:219:17>
|   |       |     |   |-ConstantExpr 0x1fe1c4ba438 <line:205:18> 'int'
|   |       |     |   | `-CharacterLiteral 0x1fe1c4ba420 <col:18> 'int' 105
|   |       |     |   `-SwitchStmt 0x1fe1c4c1540 <line:206:17, line:219:17>
|   |       |     |     |-ImplicitCastExpr 0x1fe1c4c1528 <line:206:25> 'int' <LValueToRValue>
|   |       |     |     | `-DeclRefExpr 0x1fe1c4c1508 <col:25> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |     |     `-CompoundStmt 0x1fe1c4c17f8 <col:33, line:219:17>
|   |       |     |       |-CaseStmt 0x1fe1c4c15a0 <line:207:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1fe1c4c1588 <line:68:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1fe1c4c1560 <col:25> 'int' 1
|   |       |     |       | `-NullStmt 0x1fe1c4c1608 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1fe1c4c1610 <line:209:21>
|   |       |     |       |-CaseStmt 0x1fe1c4c1658 <line:210:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1fe1c4c1640 <line:69:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1fe1c4c1618 <col:25> 'int' 2
|   |       |     |       | `-NullStmt 0x1fe1c4c16c0 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1fe1c4c16c8 <line:212:21>
|   |       |     |       |-CaseStmt 0x1fe1c4c1710 <line:213:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1fe1c4c16f8 <line:71:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1fe1c4c16d0 <col:25> 'int' 4
|   |       |     |       | `-NullStmt 0x1fe1c4c1778 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1fe1c4c1780 <line:215:21>
|   |       |     |       |-DefaultStmt 0x1fe1c4c17d0 <line:216:17, col:24>
|   |       |     |       | `-NullStmt 0x1fe1c4c17c8 <col:24>
|   |       |     |       `-BreakStmt 0x1fe1c4c17f0 <line:218:21>
|   |       |     |-IfStmt 0x1fe1c4c19d8 <line:220:17, line:222:28>
|   |       |     | |-OpaqueValueExpr 0x1fe1c4c19c0 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1fe1c4c19b0 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1fe1c4c1988 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1fe1c4c19f0 <line:223:17>
|   |       |     |-CaseStmt 0x1fe1c4c1a28 <line:224:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1fe1c4c1a10 <line:224:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c19f8 <col:18> 'int' 88
|   |       |     | `-CompoundAssignOperator 0x1fe1c4c1b00 <line:225:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1fe1c4c1a50 <line:225:17> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1fe1c4c1ae0 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1fe1c4c1ac0 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1fe1c4c1a70 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1fe1c4c1a98 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1fe1c4c1b60 <line:227:13, line:65:32>
|   |       |     | |-ConstantExpr 0x1fe1c4c1b48 <line:227:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c1b30 <col:18> 'int' 120
|   |       |     | `-CaseStmt 0x1fe1c4c1bb8 <line:228:13, line:65:32>
|   |       |     |   |-ConstantExpr 0x1fe1c4c1ba0 <line:228:18> 'int'
|   |       |     |   | `-CharacterLiteral 0x1fe1c4c1b88 <col:18> 'int' 111
|   |       |     |   `-CaseStmt 0x1fe1c4c1c10 <line:229:13, line:65:32>
|   |       |     |     |-ConstantExpr 0x1fe1c4c1bf8 <line:229:18> 'int'
|   |       |     |     | `-CharacterLiteral 0x1fe1c4c1be0 <col:18> 'int' 117
|   |       |     |     `-CompoundAssignOperator 0x1fe1c4c1ce8 <line:230:17, line:65:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |       |-DeclRefExpr 0x1fe1c4c1c38 <line:230:17> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     |       `-ParenExpr 0x1fe1c4c1cc8 <line:65:25, col:32> 'int'
|   |       |     |         `-BinaryOperator 0x1fe1c4c1ca8 <col:26, col:31> 'int' '<<'
|   |       |     |           |-IntegerLiteral 0x1fe1c4c1c58 <col:26> 'int' 1
|   |       |     |           `-IntegerLiteral 0x1fe1c4c1c80 <col:31> 'int' 6
|   |       |     |-SwitchStmt 0x1fe1c4c1d50 <line:231:17, line:244:17>
|   |       |     | |-ImplicitCastExpr 0x1fe1c4c1d38 <line:231:25> 'int' <LValueToRValue>
|   |       |     | | `-DeclRefExpr 0x1fe1c4c1d18 <col:25> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |     | `-CompoundStmt 0x1fe1c4c2008 <col:33, line:244:17>
|   |       |     |   |-CaseStmt 0x1fe1c4c1db0 <line:232:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1fe1c4c1d98 <line:68:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1fe1c4c1d70 <col:25> 'int' 1
|   |       |     |   | `-NullStmt 0x1fe1c4c1e18 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1fe1c4c1e20 <line:234:21>
|   |       |     |   |-CaseStmt 0x1fe1c4c1e68 <line:235:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1fe1c4c1e50 <line:69:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1fe1c4c1e28 <col:25> 'int' 2
|   |       |     |   | `-NullStmt 0x1fe1c4c1ed0 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1fe1c4c1ed8 <line:237:21>
|   |       |     |   |-CaseStmt 0x1fe1c4c1f20 <line:238:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1fe1c4c1f08 <line:71:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1fe1c4c1ee0 <col:25> 'int' 4
|   |       |     |   | `-NullStmt 0x1fe1c4c1f88 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1fe1c4c1f90 <line:240:21>
|   |       |     |   |-DefaultStmt 0x1fe1c4c1fe0 <line:241:17, col:24>
|   |       |     |   | `-NullStmt 0x1fe1c4c1fd8 <col:24>
|   |       |     |   `-BreakStmt 0x1fe1c4c2000 <line:243:21>
|   |       |     |-IfStmt 0x1fe1c4c23c8 <line:245:17, line:248:28>
|   |       |     | |-OpaqueValueExpr 0x1fe1c4c23b0 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1fe1c4c23a0 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1fe1c4c2378 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1fe1c4c23e0 <line:249:17>
|   |       |     |-CaseStmt 0x1fe1c4c2418 <line:250:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1fe1c4c2400 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c23e8 <col:18> 'int' 102
|   |       |     | `-NullStmt 0x1fe1c4c25a8 <<invalid sloc>>
|   |       |     |-IfStmt 0x1fe1c4c28e0 <line:255:17, line:257:28>
|   |       |     | |-UnaryOperator 0x1fe1c4c2890 <line:255:21, line:256:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1fe1c4c2780 <line:255:22, line:256:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2768 <line:255:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c25b0 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1fe1c4b6960 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c27e8 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c25d0 <col:28> 'char **' lvalue ParmVar 0x1fe1c4be5b8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2800 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c25f0 <col:37> 'char **' lvalue ParmVar 0x1fe1c4be638 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1fe1c4c2630 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2610 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2818 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2648 <col:55> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2830 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2668 <col:63> 'double' lvalue Var 0x1fe1c4beb90 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2848 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2688 <col:71> 'int' lvalue Var 0x1fe1c4becc0 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2860 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c26a8 <col:76> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2878 <line:256:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c26c8 <col:28> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1fe1c4c26e8 <line:74:25> 'int' 0
|   |       |     | `-ReturnStmt 0x1fe1c4c28d0 <line:257:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1fe1c4c28a8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1fe1c4c28f8 <line:258:17>
|   |       |     |-CaseStmt 0x1fe1c4c2930 <line:259:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1fe1c4c2918 <line:259:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c2900 <col:18> 'int' 69
|   |       |     | `-CompoundAssignOperator 0x1fe1c4c2a08 <line:260:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1fe1c4c2958 <line:260:17> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1fe1c4c29e8 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1fe1c4c29c8 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1fe1c4c2978 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1fe1c4c29a0 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1fe1c4c2a68 <line:262:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1fe1c4c2a50 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c2a38 <col:18> 'int' 101
|   |       |     | `-NullStmt 0x1fe1c4c2bd0 <<invalid sloc>>
|   |       |     |-IfStmt 0x1fe1c4c2eb0 <line:267:17, line:269:28>
|   |       |     | |-UnaryOperator 0x1fe1c4c2e60 <line:267:21, line:268:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1fe1c4c2d50 <line:267:22, line:268:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2d38 <line:267:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2bd8 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1fe1c4b6960 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2db8 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2bf8 <col:28> 'char **' lvalue ParmVar 0x1fe1c4be5b8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2dd0 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2c18 <col:37> 'char **' lvalue ParmVar 0x1fe1c4be638 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1fe1c4c2c58 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2c38 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2de8 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2c70 <col:55> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2e00 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2c90 <col:63> 'double' lvalue Var 0x1fe1c4beb90 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2e18 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2cb0 <col:71> 'int' lvalue Var 0x1fe1c4becc0 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2e30 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2cd0 <col:76> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c2e48 <line:268:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c2cf0 <col:28> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1fe1c4c2d10 <line:75:25> 'int' 1
|   |       |     | `-ReturnStmt 0x1fe1c4c2ea0 <line:269:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1fe1c4c2e78 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1fe1c4c2ec8 <line:270:17>
|   |       |     |-CaseStmt 0x1fe1c4c2f00 <line:271:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1fe1c4c2ee8 <line:271:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c2ed0 <col:18> 'int' 71
|   |       |     | `-CompoundAssignOperator 0x1fe1c4c2fd8 <line:272:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1fe1c4c2f28 <line:272:17> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1fe1c4c2fb8 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1fe1c4c2f98 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1fe1c4c2f48 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1fe1c4c2f70 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1fe1c4c3038 <line:274:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1fe1c4c3020 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c3008 <col:18> 'int' 103
|   |       |     | `-NullStmt 0x1fe1c4c31a0 <<invalid sloc>>
|   |       |     |-IfStmt 0x1fe1c4c3480 <line:279:17, line:281:28>
|   |       |     | |-UnaryOperator 0x1fe1c4c3430 <line:279:21, line:280:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1fe1c4c3320 <line:279:22, line:280:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3308 <line:279:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c31a8 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1fe1c4b6960 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3388 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c31c8 <col:28> 'char **' lvalue ParmVar 0x1fe1c4be5b8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c33a0 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c31e8 <col:37> 'char **' lvalue ParmVar 0x1fe1c4be638 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1fe1c4c3228 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c3208 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c33b8 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c3240 <col:55> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c33d0 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c3260 <col:63> 'double' lvalue Var 0x1fe1c4beb90 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c33e8 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c3280 <col:71> 'int' lvalue Var 0x1fe1c4becc0 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3400 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c32a0 <col:76> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3418 <line:280:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c32c0 <col:28> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1fe1c4c32e0 <line:76:25> 'int' 2
|   |       |     | `-ReturnStmt 0x1fe1c4c3470 <line:281:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1fe1c4c3448 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1fe1c4c3498 <line:282:17>
|   |       |     |-CaseStmt 0x1fe1c4c3500 <line:283:13, line:286:28>
|   |       |     | |-ConstantExpr 0x1fe1c4c34b8 <line:283:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c34a0 <col:18> 'int' 99
|   |       |     | `-IfStmt 0x1fe1c4c3670 <line:284:17, line:286:28>
|   |       |     |   |-OpaqueValueExpr 0x1fe1c4c3658 <<invalid sloc>> '_Bool'
|   |       |     |   `-ReturnStmt 0x1fe1c4c3648 <col:21, col:28>
|   |       |     |     `-IntegerLiteral 0x1fe1c4c3620 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1fe1c4c3688 <line:287:17>
|   |       |     |-CaseStmt 0x1fe1c4c36c0 <line:288:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1fe1c4c36a8 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c3690 <col:18> 'int' 115
|   |       |     | `-NullStmt 0x1fe1c4c3760 <<invalid sloc>>
|   |       |     |-IfStmt 0x1fe1c4c3948 <line:290:17, line:295:17>
|   |       |     | |-BinaryOperator 0x1fe1c4c37c8 <line:290:21, col:27> 'int' '<'
|   |       |     | | |-ImplicitCastExpr 0x1fe1c4c37b0 <col:21> 'int' <LValueToRValue>
|   |       |     | | | `-DeclRefExpr 0x1fe1c4c3768 <col:21> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       |     | | `-IntegerLiteral 0x1fe1c4c3788 <col:27> 'int' 0
|   |       |     | `-CompoundStmt 0x1fe1c4c3930 <col:30, line:295:17>
|   |       |     |   `-IfStmt 0x1fe1c4c3908 <line:291:21, line:294:32> has_else
|   |       |     |     |-ImplicitCastExpr 0x1fe1c4c3808 <line:291:25> 'char **' <LValueToRValue>
|   |       |     |     | `-DeclRefExpr 0x1fe1c4c37e8 <col:25> 'char **' lvalue ParmVar 0x1fe1c4be638 'buffer' 'char **'
|   |       |     |     |-NullStmt 0x1fe1c4c3900 <line:292:25>
|   |       |     |     `-BinaryOperator 0x1fe1c4c38e0 <line:294:25, col:32> 'int' '='
|   |       |     |       |-DeclRefExpr 0x1fe1c4c3840 <col:25> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       |     |       `-ImplicitCastExpr 0x1fe1c4c38c8 <col:31, col:32> 'int' <IntegralCast>
|   |       |     |         `-ImplicitCastExpr 0x1fe1c4c38b0 <col:31, col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |           `-UnaryOperator 0x1fe1c4c3898 <col:31, col:32> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |     |             `-ImplicitCastExpr 0x1fe1c4c3880 <col:32> 'size_t *' <LValueToRValue>
|   |       |     |               `-DeclRefExpr 0x1fe1c4c3860 <col:32> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   |       |     |-IfStmt 0x1fe1c4c3c80 <line:296:17, line:298:28>
|   |       |     | |-UnaryOperator 0x1fe1c4c3c30 <line:296:21, line:297:44> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1fe1c4c3b10 <line:296:22, line:297:44> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3af8 <line:296:22> 'int (*)(char **, char **, size_t *, size_t *, const char *, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c3960 <col:22> 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' Function 0x1fe1c4aeb00 'fmtstr' 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3b70 <col:29> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c3980 <col:29> 'char **' lvalue ParmVar 0x1fe1c4be5b8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3b88 <col:38> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c39a0 <col:38> 'char **' lvalue ParmVar 0x1fe1c4be638 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1fe1c4c39e0 <col:46, col:47> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c39c0 <col:47> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3ba0 <col:56> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c39f8 <col:56> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3bd0 <col:64> 'const char *' <NoOp>
|   |       |     | |   | `-ImplicitCastExpr 0x1fe1c4c3bb8 <col:64> 'char *' <LValueToRValue>
|   |       |     | |   |   `-DeclRefExpr 0x1fe1c4c3a18 <col:64> 'char *' lvalue Var 0x1fe1c4bec28 'strvalue' 'char *'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3be8 <line:297:29> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c3a38 <col:29> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1fe1c4c3c00 <col:36> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1fe1c4c3a58 <col:36> 'int' lvalue Var 0x1fe1c4becc0 'min' 'int'
|   |       |     | |   `-ImplicitCastExpr 0x1fe1c4c3c18 <col:41> 'int' <LValueToRValue>
|   |       |     | |     `-DeclRefExpr 0x1fe1c4c3a78 <col:41> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       |     | `-ReturnStmt 0x1fe1c4c3c70 <line:298:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1fe1c4c3c48 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1fe1c4c3c98 <line:299:17>
|   |       |     |-CaseStmt 0x1fe1c4c3cd0 <line:300:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1fe1c4c3cb8 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c3ca0 <col:18> 'int' 112
|   |       |     | `-NullStmt 0x1fe1c4c3d38 <<invalid sloc>>
|   |       |     |-IfStmt 0x1fe1c4c3f98 <line:302:17, line:304:28>
|   |       |     | |-OpaqueValueExpr 0x1fe1c4c3f80 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1fe1c4c3f70 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1fe1c4c3f48 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1fe1c4c3fb0 <line:305:17>
|   |       |     |-CaseStmt 0x1fe1c4c3fe8 <line:306:13, line:323:17>
|   |       |     | |-ConstantExpr 0x1fe1c4c3fd0 <line:306:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c3fb8 <col:18> 'int' 110
|   |       |     | `-IfStmt 0x1fe1c4c48a0 <line:307:17, line:323:17> has_else
|   |       |     |   |-BinaryOperator 0x1fe1c4c4070 <line:307:21, line:68:25> 'int' '=='
|   |       |     |   | |-ImplicitCastExpr 0x1fe1c4c4058 <line:307:21> 'int' <LValueToRValue>
|   |       |     |   | | `-DeclRefExpr 0x1fe1c4c4010 <col:21> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |     |   | `-IntegerLiteral 0x1fe1c4c4030 <line:68:25> 'int' 1
|   |       |     |   |-CompoundStmt 0x1fe1c4c4288 <line:307:43, line:311:17>
|   |       |     |   | |-DeclStmt 0x1fe1c4c4138 <line:308:21, col:35>
|   |       |     |   | | `-VarDecl 0x1fe1c4c40d0 <col:21, col:32> col:32 used num 'short *'
|   |       |     |   | `-BinaryOperator 0x1fe1c4c4268 <line:310:21, col:28> 'short' '='
|   |       |     |   |   |-UnaryOperator 0x1fe1c4c4200 <col:21, col:22> 'short' lvalue prefix '*' cannot overflow
|   |       |     |   |   | `-ImplicitCastExpr 0x1fe1c4c41e8 <col:22> 'short *' <LValueToRValue>
|   |       |     |   |   |   `-DeclRefExpr 0x1fe1c4c41c8 <col:22> 'short *' lvalue Var 0x1fe1c4c40d0 'num' 'short *'
|   |       |     |   |   `-ImplicitCastExpr 0x1fe1c4c4250 <col:28> 'short' <IntegralCast>
|   |       |     |   |     `-ImplicitCastExpr 0x1fe1c4c4238 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |   |       `-DeclRefExpr 0x1fe1c4c4218 <col:28> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |       |     |   `-IfStmt 0x1fe1c4c4878 <line:311:24, line:323:17> has_else
|   |       |     |     |-BinaryOperator 0x1fe1c4c4308 <line:311:28, line:69:25> 'int' '=='
|   |       |     |     | |-ImplicitCastExpr 0x1fe1c4c42f0 <line:311:28> 'int' <LValueToRValue>
|   |       |     |     | | `-DeclRefExpr 0x1fe1c4c42a8 <col:28> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |     |     | `-IntegerLiteral 0x1fe1c4c42c8 <line:69:25> 'int' 2
|   |       |     |     |-CompoundStmt 0x1fe1c4c4570 <line:311:49, line:315:17>
|   |       |     |     | |-DeclStmt 0x1fe1c4c43d8 <line:312:21, col:34>
|   |       |     |     | | `-VarDecl 0x1fe1c4c4370 <col:21, col:31> col:31 used num 'long *'
|   |       |     |     | `-BinaryOperator 0x1fe1c4c4550 <line:314:21, col:38> 'long' '='
|   |       |     |     |   |-UnaryOperator 0x1fe1c4c44a0 <col:21, col:22> 'long' lvalue prefix '*' cannot overflow
|   |       |     |     |   | `-ImplicitCastExpr 0x1fe1c4c4488 <col:22> 'long *' <LValueToRValue>
|   |       |     |     |   |   `-DeclRefExpr 0x1fe1c4c4468 <col:22> 'long *' lvalue Var 0x1fe1c4c4370 'num' 'long *'
|   |       |     |     |   `-CStyleCastExpr 0x1fe1c4c4528 <col:28, col:38> 'long' <IntegralCast>
|   |       |     |     |     `-ImplicitCastExpr 0x1fe1c4c4510 <col:38> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |     |     |       `-DeclRefExpr 0x1fe1c4c44b8 <col:38> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |       |     |     `-IfStmt 0x1fe1c4c4850 <line:315:24, line:323:17> has_else
|   |       |     |       |-BinaryOperator 0x1fe1c4c45f0 <line:315:28, line:71:25> 'int' '=='
|   |       |     |       | |-ImplicitCastExpr 0x1fe1c4c45d8 <line:315:28> 'int' <LValueToRValue>
|   |       |     |       | | `-DeclRefExpr 0x1fe1c4c4590 <col:28> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |     |       | `-IntegerLiteral 0x1fe1c4c45b0 <line:71:25> 'int' 4
|   |       |     |       |-CompoundStmt 0x1fe1c4c4650 <line:315:50, line:319:17>
|   |       |     |       `-CompoundStmt 0x1fe1c4c4830 <col:24, line:323:17>
|   |       |     |         |-DeclStmt 0x1fe1c4c46e0 <line:320:21, col:29>
|   |       |     |         | `-VarDecl 0x1fe1c4c4678 <col:21, col:26> col:26 used num 'int *'
|   |       |     |         `-BinaryOperator 0x1fe1c4c4810 <line:322:21, col:28> 'int' '='
|   |       |     |           |-UnaryOperator 0x1fe1c4c47a8 <col:21, col:22> 'int' lvalue prefix '*' cannot overflow
|   |       |     |           | `-ImplicitCastExpr 0x1fe1c4c4790 <col:22> 'int *' <LValueToRValue>
|   |       |     |           |   `-DeclRefExpr 0x1fe1c4c4770 <col:22> 'int *' lvalue Var 0x1fe1c4c4678 'num' 'int *'
|   |       |     |           `-ImplicitCastExpr 0x1fe1c4c47f8 <col:28> 'int' <IntegralCast>
|   |       |     |             `-ImplicitCastExpr 0x1fe1c4c47e0 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |               `-DeclRefExpr 0x1fe1c4c47c0 <col:28> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |       |     |-BreakStmt 0x1fe1c4c48c8 <line:324:17>
|   |       |     |-CaseStmt 0x1fe1c4c4900 <line:325:13, line:327:28>
|   |       |     | |-ConstantExpr 0x1fe1c4c48e8 <line:325:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c48d0 <col:18> 'int' 37
|   |       |     | `-IfStmt 0x1fe1c4c4b28 <line:326:17, line:327:28>
|   |       |     |   |-UnaryOperator 0x1fe1c4c4ad8 <line:326:20, col:70> 'int' prefix '!' cannot overflow
|   |       |     |   | `-CallExpr 0x1fe1c4c4a18 <col:21, col:70> 'int'
|   |       |     |   |   |-ImplicitCastExpr 0x1fe1c4c4a00 <col:21> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       |     |   |   | `-DeclRefExpr 0x1fe1c4c4928 <col:21> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       |     |   |   |-ImplicitCastExpr 0x1fe1c4c4a60 <col:33> 'char **' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1fe1c4c4948 <col:33> 'char **' lvalue ParmVar 0x1fe1c4be5b8 'sbuffer' 'char **'
|   |       |     |   |   |-ImplicitCastExpr 0x1fe1c4c4a78 <col:42> 'char **' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1fe1c4c4968 <col:42> 'char **' lvalue ParmVar 0x1fe1c4be638 'buffer' 'char **'
|   |       |     |   |   |-UnaryOperator 0x1fe1c4c49a8 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   |       |     |   |   | `-DeclRefExpr 0x1fe1c4c4988 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |       |     |   |   |-ImplicitCastExpr 0x1fe1c4c4a90 <col:60> 'size_t *' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1fe1c4c49c0 <col:60> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   |       |     |   |   `-ImplicitCastExpr 0x1fe1c4c4ac0 <col:68> 'int' <IntegralCast>
|   |       |     |   |     `-ImplicitCastExpr 0x1fe1c4c4aa8 <col:68> 'char' <LValueToRValue>
|   |       |     |   |       `-DeclRefExpr 0x1fe1c4c49e0 <col:68> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     |   `-ReturnStmt 0x1fe1c4c4b18 <line:327:21, col:28>
|   |       |     |     `-IntegerLiteral 0x1fe1c4c4af0 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1fe1c4c4b40 <line:328:17>
|   |       |     |-CaseStmt 0x1fe1c4c4b78 <line:329:13, line:331:29>
|   |       |     | |-ConstantExpr 0x1fe1c4c4b60 <line:329:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1fe1c4c4b48 <col:18> 'int' 119
|   |       |     | `-BinaryOperator 0x1fe1c4c4c28 <line:331:17, col:29> 'char' '='
|   |       |     |   |-DeclRefExpr 0x1fe1c4c4ba0 <col:17> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       |     |   `-ImplicitCastExpr 0x1fe1c4c4c10 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |     `-UnaryOperator 0x1fe1c4c4bf8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |       `-UnaryOperator 0x1fe1c4c4be0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |         `-DeclRefExpr 0x1fe1c4c4bc0 <col:23> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |     |-BreakStmt 0x1fe1c4c4c48 <line:332:17>
|   |       |     `-DefaultStmt 0x1fe1c4c4c58 <line:333:13, line:335:17>
|   |       |       `-BreakStmt 0x1fe1c4c4c50 <col:17>
|   |       |-BinaryOperator 0x1fe1c4c4e28 <line:337:13, col:25> 'char' '='
|   |       | |-DeclRefExpr 0x1fe1c4c4da0 <col:13> 'char' lvalue Var 0x1fe1c4beaf8 'ch' 'char'
|   |       | `-ImplicitCastExpr 0x1fe1c4c4e10 <col:18, col:25> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1fe1c4c4df8 <col:18, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1fe1c4c4de0 <col:19, col:25> 'const char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1fe1c4c4dc0 <col:19> 'const char *' lvalue ParmVar 0x1fe1c4be828 'format' 'const char *'
|   |       |-BinaryOperator 0x1fe1c4c4e90 <line:338:13, line:42:25> 'int' '='
|   |       | |-DeclRefExpr 0x1fe1c4c4e48 <line:338:13> 'int' lvalue Var 0x1fe1c4bedf0 'state' 'int'
|   |       | `-IntegerLiteral 0x1fe1c4c4e68 <line:42:25> 'int' 0
|   |       |-BinaryOperator 0x1fe1c4c4f78 <line:339:13, col:36> 'int' '='
|   |       | |-DeclRefExpr 0x1fe1c4c4eb0 <col:13> 'int' lvalue Var 0x1fe1c4bee88 'flags' 'int'
|   |       | `-BinaryOperator 0x1fe1c4c4f58 <col:21, col:36> 'int' '='
|   |       |   |-DeclRefExpr 0x1fe1c4c4ed0 <col:21> 'int' lvalue Var 0x1fe1c4bef20 'cflags' 'int'
|   |       |   `-BinaryOperator 0x1fe1c4c4f38 <col:30, col:36> 'int' '='
|   |       |     |-DeclRefExpr 0x1fe1c4c4ef0 <col:30> 'int' lvalue Var 0x1fe1c4becc0 'min' 'int'
|   |       |     `-IntegerLiteral 0x1fe1c4c4f10 <col:36> 'int' 0
|   |       |-BinaryOperator 0x1fe1c4c4ff8 <line:340:13, col:20> 'int' '='
|   |       | |-DeclRefExpr 0x1fe1c4c4f98 <col:13> 'int' lvalue Var 0x1fe1c4bed58 'max' 'int'
|   |       | `-UnaryOperator 0x1fe1c4c4fe0 <col:19, col:20> 'int' prefix '-'
|   |       |   `-IntegerLiteral 0x1fe1c4c4fb8 <col:20> 'int' 1
|   |       |-BreakStmt 0x1fe1c4c5018 <line:341:13>
|   |       |-CaseStmt 0x1fe1c4c5060 <line:342:9, line:343:13>
|   |       | |-ConstantExpr 0x1fe1c4c5048 <line:49:25> 'int'
|   |       | | `-IntegerLiteral 0x1fe1c4c5020 <col:25> 'int' 7
|   |       | `-BreakStmt 0x1fe1c4c5088 <line:343:13>
|   |       `-DefaultStmt 0x1fe1c4c5098 <line:344:9, line:345:13>
|   |         `-BreakStmt 0x1fe1c4c5090 <col:13>
|   |-IfStmt 0x1fe1c4771b0 <line:352:5, line:356:5>
|   | |-BinaryOperator 0x1fe1c4c5288 <line:352:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1fe1c4c5258 <.//openssl//file_jk/before\crypto\bio\b_print.c:352:9> 'char **' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4c51b0 <col:9> 'char **' lvalue ParmVar 0x1fe1c4be638 'buffer' 'char **'
|   | | `-ImplicitCastExpr 0x1fe1c4c5270 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   | |   `-ParenExpr 0x1fe1c4c5238 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1fe1c4c5210 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1fe1c4c51d0 <col:26> 'int' 0
|   | `-CompoundStmt 0x1fe1c477190 <.//openssl//file_jk/before\crypto\bio\b_print.c:352:25, line:356:5>
|   |   |-BinaryOperator 0x1fe1c4c5438 <line:353:9, col:44> 'int' '='
|   |   | |-UnaryOperator 0x1fe1c4c52e0 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1fe1c4c52c8 <col:10> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1fe1c4c52a8 <col:10> 'int *' lvalue ParmVar 0x1fe1c4be7a8 'truncated' 'int *'
|   |   | `-ParenExpr 0x1fe1c4c5418 <col:22, col:44> 'int'
|   |   |   `-BinaryOperator 0x1fe1c4c53f8 <col:23, col:43> 'int' '>'
|   |   |     |-ImplicitCastExpr 0x1fe1c4c53e0 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1fe1c4c52f8 <col:23> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |   |     `-BinaryOperator 0x1fe1c4c53c0 <col:33, col:43> 'unsigned long long' '-'
|   |   |       |-ImplicitCastExpr 0x1fe1c4c5390 <col:33, col:34> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |       | `-UnaryOperator 0x1fe1c4c5350 <col:33, col:34> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   |       |   `-ImplicitCastExpr 0x1fe1c4c5338 <col:34> 'size_t *' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1fe1c4c5318 <col:34> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   |   |       `-ImplicitCastExpr 0x1fe1c4c53a8 <col:43> 'unsigned long long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1fe1c4c5368 <col:43> 'int' 1
|   |   `-IfStmt 0x1fe1c477178 <line:354:9, line:355:33>
|   |     |-ImplicitCastExpr 0x1fe1c4c54a8 <line:354:13, col:14> 'int' <LValueToRValue>
|   |     | `-UnaryOperator 0x1fe1c4c5490 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |     |   `-ImplicitCastExpr 0x1fe1c4c5478 <col:14> 'int *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x1fe1c4c5458 <col:14> 'int *' lvalue ParmVar 0x1fe1c4be7a8 'truncated' 'int *'
|   |     `-BinaryOperator 0x1fe1c477158 <line:355:13, col:33> 'size_t':'unsigned long long' '='
|   |       |-DeclRefExpr 0x1fe1c4c54c0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |       `-BinaryOperator 0x1fe1c477138 <col:23, col:33> 'unsigned long long' '-'
|   |         |-ImplicitCastExpr 0x1fe1c477108 <col:23, col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |         | `-UnaryOperator 0x1fe1c4770c8 <col:23, col:24> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |         |   `-ImplicitCastExpr 0x1fe1c4770b0 <col:24> 'size_t *' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x1fe1c4c54e0 <col:24> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   |         `-ImplicitCastExpr 0x1fe1c477120 <col:33> 'unsigned long long' <IntegralCast>
|   |           `-IntegerLiteral 0x1fe1c4770e0 <col:33> 'int' 1
|   |-IfStmt 0x1fe1c477390 <line:357:5, line:358:16>
|   | |-UnaryOperator 0x1fe1c477340 <line:357:8, col:60> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1fe1c4772b0 <col:9, col:60> 'int'
|   | |   |-ImplicitCastExpr 0x1fe1c477298 <col:9> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1fe1c4771c8 <col:9> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   | |   |-ImplicitCastExpr 0x1fe1c4772f8 <col:21> 'char **' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1fe1c4771e8 <col:21> 'char **' lvalue ParmVar 0x1fe1c4be5b8 'sbuffer' 'char **'
|   | |   |-ImplicitCastExpr 0x1fe1c477310 <col:30> 'char **' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1fe1c477208 <col:30> 'char **' lvalue ParmVar 0x1fe1c4be638 'buffer' 'char **'
|   | |   |-UnaryOperator 0x1fe1c477248 <col:38, col:39> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1fe1c477228 <col:39> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1fe1c477328 <col:48> 'size_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1fe1c477260 <col:48> 'size_t *' lvalue ParmVar 0x1fe1c4be6b0 'maxlen' 'size_t *'
|   | |   `-CharacterLiteral 0x1fe1c477280 <col:56> 'int' 0
|   | `-ReturnStmt 0x1fe1c477380 <line:358:9, col:16>
|   |   `-IntegerLiteral 0x1fe1c477358 <col:16> 'int' 0
|   |-BinaryOperator 0x1fe1c477490 <line:359:5, col:25> 'size_t':'unsigned long long' '='
|   | |-UnaryOperator 0x1fe1c4773e0 <col:5, col:6> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1fe1c4773c8 <col:6> 'size_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1fe1c4773a8 <col:6> 'size_t *' lvalue ParmVar 0x1fe1c4be728 'retlen' 'size_t *'
|   | `-BinaryOperator 0x1fe1c477470 <col:15, col:25> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1fe1c477440 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c4773f8 <col:15> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4befb0 'currlen' 'size_t':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1fe1c477458 <col:25> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1fe1c477418 <col:25> 'int' 1
|   `-ReturnStmt 0x1fe1c4774d8 <line:360:5, col:12>
|     `-IntegerLiteral 0x1fe1c4774b0 <col:12> 'int' 1
|-FunctionDecl 0x1fe1c477aa0 prev 0x1fe1c4aeb00 <line:363:1, line:413:1> line:364:1 used fmtstr 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' static
| |-ParmVarDecl 0x1fe1c4775a0 <col:8, col:15> col:15 used sbuffer 'char **'
| |-ParmVarDecl 0x1fe1c477620 <line:365:8, col:15> col:15 used buffer 'char **'
| |-ParmVarDecl 0x1fe1c477698 <line:366:8, col:16> col:16 used currlen 'size_t *'
| |-ParmVarDecl 0x1fe1c477710 <line:367:8, col:16> col:16 used maxlen 'size_t *'
| |-ParmVarDecl 0x1fe1c477790 <col:24, col:36> col:36 used value 'const char *'
| |-ParmVarDecl 0x1fe1c477810 <col:43, col:47> col:47 used flags 'int'
| |-ParmVarDecl 0x1fe1c477890 <col:54, col:58> col:58 used min 'int'
| |-ParmVarDecl 0x1fe1c477910 <col:63, col:67> col:67 used max 'int'
| `-CompoundStmt 0x1fe1c5986a0 <line:368:1, line:413:1>
|   |-DeclStmt 0x1fe1c477c00 <line:369:5, col:15>
|   | `-VarDecl 0x1fe1c477b98 <col:5, col:9> col:9 used padlen 'int'
|   |-DeclStmt 0x1fe1c477c90 <line:370:5, col:17>
|   | `-VarDecl 0x1fe1c477c28 <col:5, col:12> col:12 used strln 'size_t':'unsigned long long'
|   |-DeclStmt 0x1fe1c477d50 <line:371:5, col:16>
|   | `-VarDecl 0x1fe1c477cc0 <col:5, col:15> col:9 used cnt 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c477d28 <col:15> 'int' 0
|   |-IfStmt 0x1fe1c477ec8 <line:373:5, line:374:17>
|   | |-BinaryOperator 0x1fe1c477de0 <line:373:9, col:18> 'int' '=='
|   | | |-ImplicitCastExpr 0x1fe1c477db0 <col:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c477d68 <col:9> 'const char *' lvalue ParmVar 0x1fe1c477790 'value' 'const char *'
|   | | `-ImplicitCastExpr 0x1fe1c477dc8 <col:18> 'const char *' <NullToPointer>
|   | |   `-IntegerLiteral 0x1fe1c477d88 <col:18> 'int' 0
|   | `-BinaryOperator 0x1fe1c477ea8 <line:374:9, col:17> 'const char *' '='
|   |   |-DeclRefExpr 0x1fe1c477e00 <col:9> 'const char *' lvalue ParmVar 0x1fe1c477790 'value' 'const char *'
|   |   `-ImplicitCastExpr 0x1fe1c477e90 <col:17> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x1fe1c477e78 <col:17> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1fe1c477e58 <col:17> 'char [7]' lvalue "<NULL>"
|   |-BinaryOperator 0x1fe1c590258 <line:378:5, col:20> 'int' '='
|   | |-DeclRefExpr 0x1fe1c590160 <col:5> 'int' lvalue Var 0x1fe1c477b98 'padlen' 'int'
|   | `-ImplicitCastExpr 0x1fe1c590240 <col:14, col:20> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1fe1c590220 <col:14, col:20> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1fe1c590208 <col:14> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1fe1c5901d8 <col:14> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1fe1c590198 <col:14> 'int' lvalue ParmVar 0x1fe1c477890 'min' 'int'
|   |     `-ImplicitCastExpr 0x1fe1c5901f0 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1fe1c5901b8 <col:20> 'size_t':'unsigned long long' lvalue Var 0x1fe1c477c28 'strln' 'size_t':'unsigned long long'
|   |-IfStmt 0x1fe1c590400 <line:379:5, line:380:18>
|   | |-BinaryOperator 0x1fe1c590378 <line:379:9, col:29> 'int' '||'
|   | | |-BinaryOperator 0x1fe1c5902d8 <col:9, col:15> 'int' '<'
|   | | | |-ImplicitCastExpr 0x1fe1c5902c0 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1fe1c590278 <col:9> 'int' lvalue ParmVar 0x1fe1c477890 'min' 'int'
|   | | | `-IntegerLiteral 0x1fe1c590298 <col:15> 'int' 0
|   | | `-BinaryOperator 0x1fe1c590358 <col:20, col:29> 'int' '<'
|   | |   |-ImplicitCastExpr 0x1fe1c590340 <col:20> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1fe1c5902f8 <col:20> 'int' lvalue Var 0x1fe1c477b98 'padlen' 'int'
|   | |   `-IntegerLiteral 0x1fe1c590318 <col:29> 'int' 0
|   | `-BinaryOperator 0x1fe1c5903e0 <line:380:9, col:18> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c590398 <col:9> 'int' lvalue Var 0x1fe1c477b98 'padlen' 'int'
|   |   `-IntegerLiteral 0x1fe1c5903b8 <col:18> 'int' 0
|   |-IfStmt 0x1fe1c5905e0 <line:381:5, line:390:5>
|   | |-BinaryOperator 0x1fe1c590478 <line:381:9, col:16> 'int' '>='
|   | | |-ImplicitCastExpr 0x1fe1c590460 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c590418 <col:9> 'int' lvalue ParmVar 0x1fe1c477910 'max' 'int'
|   | | `-IntegerLiteral 0x1fe1c590438 <col:16> 'int' 0
|   | `-CompoundStmt 0x1fe1c5905c8 <col:19, line:390:5>
|   |   `-IfStmt 0x1fe1c5905a0 <line:386:9, line:389:13> has_else
|   |     |-OpaqueValueExpr 0x1fe1c590588 <<invalid sloc>> '_Bool'
|   |     |-CompoundAssignOperator 0x1fe1c590530 <line:387:13, col:20> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | |-DeclRefExpr 0x1fe1c5904d8 <col:13> 'int' lvalue ParmVar 0x1fe1c477910 'max' 'int'
|   |     | `-ImplicitCastExpr 0x1fe1c590518 <col:20> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1fe1c5904f8 <col:20> 'int' lvalue Var 0x1fe1c477b98 'padlen' 'int'
|   |     `-NullStmt 0x1fe1c590580 <line:389:13>
|   |-IfStmt 0x1fe1c590770 <line:391:5, line:392:19>
|   | |-BinaryOperator 0x1fe1c5906c0 <line:391:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1fe1c5906a8 <line:391:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c5905f8 <col:9> 'int' lvalue ParmVar 0x1fe1c477810 'flags' 'int'
|   | | `-ParenExpr 0x1fe1c590688 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1fe1c590668 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1fe1c590618 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1fe1c590640 <col:31> 'int' 0
|   | `-BinaryOperator 0x1fe1c590750 <line:392:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c5906e0 <col:9> 'int' lvalue Var 0x1fe1c477b98 'padlen' 'int'
|   |   `-UnaryOperator 0x1fe1c590738 <col:18, col:19> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1fe1c590720 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1fe1c590700 <col:19> 'int' lvalue Var 0x1fe1c477b98 'padlen' 'int'
|   |-WhileStmt 0x1fe1c590c28 <line:394:5, line:399:5>
|   | |-BinaryOperator 0x1fe1c590990 <line:394:12, col:49> 'int' '&&'
|   | | |-ParenExpr 0x1fe1c590808 <col:12, col:23> 'int'
|   | | | `-BinaryOperator 0x1fe1c5907e8 <col:13, col:22> 'int' '>'
|   | | |   |-ImplicitCastExpr 0x1fe1c5907d0 <col:13> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1fe1c590788 <col:13> 'int' lvalue Var 0x1fe1c477b98 'padlen' 'int'
|   | | |   `-IntegerLiteral 0x1fe1c5907a8 <col:22> 'int' 0
|   | | `-ParenExpr 0x1fe1c590970 <col:28, col:49> 'int'
|   | |   `-BinaryOperator 0x1fe1c590950 <col:29, col:46> 'int' '||'
|   | |     |-BinaryOperator 0x1fe1c590888 <col:29, col:35> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1fe1c590870 <col:29> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1fe1c590828 <col:29> 'int' lvalue ParmVar 0x1fe1c477910 'max' 'int'
|   | |     | `-IntegerLiteral 0x1fe1c590848 <col:35> 'int' 0
|   | |     `-BinaryOperator 0x1fe1c590930 <col:40, col:46> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1fe1c590900 <col:40> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1fe1c5908a8 <col:40> 'int' lvalue Var 0x1fe1c477cc0 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1fe1c590918 <col:46> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1fe1c5908e0 <col:46> 'int' lvalue ParmVar 0x1fe1c477910 'max' 'int'
|   | `-CompoundStmt 0x1fe1c590c00 <col:52, line:399:5>
|   |   |-IfStmt 0x1fe1c590b78 <line:395:9, line:396:20>
|   |   | |-UnaryOperator 0x1fe1c590b28 <line:395:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c590a80 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c590a68 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c5909b0 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c590ac8 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c5909d0 <col:25> 'char **' lvalue ParmVar 0x1fe1c4775a0 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c590ae0 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c5909f0 <col:34> 'char **' lvalue ParmVar 0x1fe1c477620 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c590af8 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c590a10 <col:42> 'size_t *' lvalue ParmVar 0x1fe1c477698 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c590b10 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c590a30 <col:51> 'size_t *' lvalue ParmVar 0x1fe1c477710 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1fe1c590a50 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1fe1c590b68 <line:396:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c590b40 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1fe1c590bb0 <line:397:9, col:11> 'int' prefix '--'
|   |   | `-DeclRefExpr 0x1fe1c590b90 <col:11> 'int' lvalue Var 0x1fe1c477b98 'padlen' 'int'
|   |   `-UnaryOperator 0x1fe1c590be8 <line:398:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1fe1c590bc8 <col:11> 'int' lvalue Var 0x1fe1c477cc0 'cnt' 'int'
|   |-WhileStmt 0x1fe1c5981b0 <line:400:5, line:405:5>
|   | |-BinaryOperator 0x1fe1c590e28 <line:400:12, col:46> 'int' '&&'
|   | | |-BinaryOperator 0x1fe1c590cb8 <col:12, col:20> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1fe1c590c88 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1fe1c590c40 <col:12> 'size_t':'unsigned long long' lvalue Var 0x1fe1c477c28 'strln' 'size_t':'unsigned long long'
|   | | | `-ImplicitCastExpr 0x1fe1c590ca0 <col:20> 'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1fe1c590c60 <col:20> 'int' 0
|   | | `-ParenExpr 0x1fe1c590e08 <col:25, col:46> 'int'
|   | |   `-BinaryOperator 0x1fe1c590de8 <col:26, col:43> 'int' '||'
|   | |     |-BinaryOperator 0x1fe1c590d38 <col:26, col:32> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1fe1c590d20 <col:26> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1fe1c590cd8 <col:26> 'int' lvalue ParmVar 0x1fe1c477910 'max' 'int'
|   | |     | `-IntegerLiteral 0x1fe1c590cf8 <col:32> 'int' 0
|   | |     `-BinaryOperator 0x1fe1c590dc8 <col:37, col:43> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1fe1c590d98 <col:37> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1fe1c590d58 <col:37> 'int' lvalue Var 0x1fe1c477cc0 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1fe1c590db0 <col:43> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1fe1c590d78 <col:43> 'int' lvalue ParmVar 0x1fe1c477910 'max' 'int'
|   | `-CompoundStmt 0x1fe1c598188 <col:49, line:405:5>
|   |   |-IfStmt 0x1fe1c591078 <line:401:9, line:402:20>
|   |   | |-UnaryOperator 0x1fe1c591028 <line:401:12, col:67> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c590f50 <col:13, col:67> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c590f38 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c590e48 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c590f98 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c590e68 <col:25> 'char **' lvalue ParmVar 0x1fe1c4775a0 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c590fb0 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c590e88 <col:34> 'char **' lvalue ParmVar 0x1fe1c477620 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c590fc8 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c590ea8 <col:42> 'size_t *' lvalue ParmVar 0x1fe1c477698 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c590fe0 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c590ec8 <col:51> 'size_t *' lvalue ParmVar 0x1fe1c477710 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1fe1c591010 <col:59, col:65> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1fe1c590ff8 <col:59, col:65> 'char' <LValueToRValue>
|   |   | |       `-UnaryOperator 0x1fe1c590f20 <col:59, col:65> 'const char' lvalue prefix '*' cannot overflow
|   |   | |         `-UnaryOperator 0x1fe1c590f08 <col:60, col:65> 'const char *' postfix '++'
|   |   | |           `-DeclRefExpr 0x1fe1c590ee8 <col:60> 'const char *' lvalue ParmVar 0x1fe1c477790 'value' 'const char *'
|   |   | `-ReturnStmt 0x1fe1c591068 <line:402:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c591040 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1fe1c5910b0 <line:403:9, col:11> 'size_t':'unsigned long long' prefix '--'
|   |   | `-DeclRefExpr 0x1fe1c591090 <col:11> 'size_t':'unsigned long long' lvalue Var 0x1fe1c477c28 'strln' 'size_t':'unsigned long long'
|   |   `-UnaryOperator 0x1fe1c598170 <line:404:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1fe1c598150 <col:11> 'int' lvalue Var 0x1fe1c477cc0 'cnt' 'int'
|   |-WhileStmt 0x1fe1c598650 <line:406:5, line:411:5>
|   | |-BinaryOperator 0x1fe1c5983b8 <line:406:12, col:49> 'int' '&&'
|   | | |-ParenExpr 0x1fe1c598248 <col:12, col:23> 'int'
|   | | | `-BinaryOperator 0x1fe1c598228 <col:13, col:22> 'int' '<'
|   | | |   |-ImplicitCastExpr 0x1fe1c598210 <col:13> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1fe1c5981c8 <col:13> 'int' lvalue Var 0x1fe1c477b98 'padlen' 'int'
|   | | |   `-IntegerLiteral 0x1fe1c5981e8 <col:22> 'int' 0
|   | | `-ParenExpr 0x1fe1c598398 <col:28, col:49> 'int'
|   | |   `-BinaryOperator 0x1fe1c598378 <col:29, col:46> 'int' '||'
|   | |     |-BinaryOperator 0x1fe1c5982c8 <col:29, col:35> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1fe1c5982b0 <col:29> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1fe1c598268 <col:29> 'int' lvalue ParmVar 0x1fe1c477910 'max' 'int'
|   | |     | `-IntegerLiteral 0x1fe1c598288 <col:35> 'int' 0
|   | |     `-BinaryOperator 0x1fe1c598358 <col:40, col:46> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1fe1c598328 <col:40> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1fe1c5982e8 <col:40> 'int' lvalue Var 0x1fe1c477cc0 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1fe1c598340 <col:46> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1fe1c598308 <col:46> 'int' lvalue ParmVar 0x1fe1c477910 'max' 'int'
|   | `-CompoundStmt 0x1fe1c598628 <col:52, line:411:5>
|   |   |-IfStmt 0x1fe1c5985a0 <line:407:9, line:408:20>
|   |   | |-UnaryOperator 0x1fe1c598550 <line:407:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c5984a8 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c598490 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c5983d8 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c5984f0 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c5983f8 <col:25> 'char **' lvalue ParmVar 0x1fe1c4775a0 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c598508 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c598418 <col:34> 'char **' lvalue ParmVar 0x1fe1c477620 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c598520 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c598438 <col:42> 'size_t *' lvalue ParmVar 0x1fe1c477698 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c598538 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c598458 <col:51> 'size_t *' lvalue ParmVar 0x1fe1c477710 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1fe1c598478 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1fe1c598590 <line:408:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c598568 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1fe1c5985d8 <line:409:9, col:11> 'int' prefix '++'
|   |   | `-DeclRefExpr 0x1fe1c5985b8 <col:11> 'int' lvalue Var 0x1fe1c477b98 'padlen' 'int'
|   |   `-UnaryOperator 0x1fe1c598610 <line:410:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1fe1c5985f0 <col:11> 'int' lvalue Var 0x1fe1c477cc0 'cnt' 'int'
|   `-ReturnStmt 0x1fe1c598690 <line:412:5, col:12>
|     `-IntegerLiteral 0x1fe1c598668 <col:12> 'int' 1
|-FunctionDecl 0x1fe1c598bf0 <line:415:1, line:513:1> line:416:1 invalid fmtint 'int (char **, char **, size_t *, size_t *, int, int, int, int, int)' static
| |-ParmVarDecl 0x1fe1c598728 <col:8, col:15> col:15 used sbuffer 'char **'
| |-ParmVarDecl 0x1fe1c5987a8 <line:417:8, col:15> col:15 used buffer 'char **'
| |-ParmVarDecl 0x1fe1c598820 <line:418:8, col:16> col:16 used currlen 'size_t *'
| |-ParmVarDecl 0x1fe1c598898 <line:419:8, col:16> col:16 used maxlen 'size_t *'
| |-ParmVarDecl 0x1fe1c598918 <col:24, col:32> col:32 invalid value 'int'
| |-ParmVarDecl 0x1fe1c598998 <col:39, col:43> col:43 used base 'int'
| |-ParmVarDecl 0x1fe1c598a18 <col:49, col:53> col:53 used min 'int'
| |-ParmVarDecl 0x1fe1c598a98 <col:58, col:62> col:62 used max 'int'
| |-ParmVarDecl 0x1fe1c598b18 <col:67, col:71> col:71 used flags 'int'
| `-CompoundStmt 0x1fe1c594110 <line:420:1, line:513:1>
|   |-DeclStmt 0x1fe1c598d98 <line:421:5, col:22>
|   | `-VarDecl 0x1fe1c598d08 <col:5, col:21> col:9 used signvalue 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c598d70 <col:21> 'int' 0
|   |-DeclStmt 0x1fe1c598eb0 <line:422:5, col:28>
|   | `-VarDecl 0x1fe1c598dc8 <col:5, col:26> col:17 used prefix 'const char *' cinit
|   |   `-ImplicitCastExpr 0x1fe1c598e98 <col:26> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x1fe1c598e80 <col:26> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1fe1c598e68 <col:26> 'char [1]' lvalue ""
|   |-DeclStmt 0x1fe1c599078 <line:424:5, col:42>
|   | `-VarDecl 0x1fe1c599010 <col:5, col:10> col:10 invalid convert 'char'
|   |-DeclStmt 0x1fe1c599138 <line:425:5, col:18>
|   | `-VarDecl 0x1fe1c5990a8 <col:5, col:17> col:9 used place 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c599110 <col:17> 'int' 0
|   |-DeclStmt 0x1fe1c5971e8 <line:426:5, col:20>
|   | `-VarDecl 0x1fe1c597158 <col:5, col:19> col:9 used spadlen 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c5971c0 <col:19> 'int' 0
|   |-DeclStmt 0x1fe1c5972a8 <line:427:5, col:20>
|   | `-VarDecl 0x1fe1c597218 <col:5, col:19> col:9 used zpadlen 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c597280 <col:19> 'int' 0
|   |-DeclStmt 0x1fe1c597368 <line:428:5, col:17>
|   | `-VarDecl 0x1fe1c5972d8 <col:5, col:16> col:9 used caps 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c597340 <col:16> 'int' 0
|   |-IfStmt 0x1fe1c597480 <line:430:5, line:431:15>
|   | |-BinaryOperator 0x1fe1c5973f8 <line:430:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c5973e0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c597380 <col:9> 'int' lvalue ParmVar 0x1fe1c598a98 'max' 'int'
|   | | `-IntegerLiteral 0x1fe1c5973b8 <col:15> 'int' 0
|   | `-BinaryOperator 0x1fe1c597460 <line:431:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c597418 <col:9> 'int' lvalue ParmVar 0x1fe1c598a98 'max' 'int'
|   |   `-IntegerLiteral 0x1fe1c597438 <col:15> 'int' 0
|   |-IfStmt 0x1fe1c5979c0 <line:433:5, line:441:5>
|   | |-UnaryOperator 0x1fe1c5975b8 <line:433:9, col:32> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x1fe1c597598 <col:10, col:32> 'int'
|   | |   `-BinaryOperator 0x1fe1c597578 <col:11, line:65:32> 'int' '&'
|   | |     |-ImplicitCastExpr 0x1fe1c597560 <line:433:11> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1fe1c597498 <col:11> 'int' lvalue ParmVar 0x1fe1c598b18 'flags' 'int'
|   | |     `-ParenExpr 0x1fe1c597540 <line:65:25, col:32> 'int'
|   | |       `-BinaryOperator 0x1fe1c597520 <col:26, col:31> 'int' '<<'
|   | |         |-IntegerLiteral 0x1fe1c5974d0 <col:26> 'int' 1
|   | |         `-IntegerLiteral 0x1fe1c5974f8 <col:31> 'int' 6
|   | `-CompoundStmt 0x1fe1c5979a8 <line:433:35, line:441:5>
|   |   `-IfStmt 0x1fe1c597980 <line:434:9, line:440:25> has_else
|   |     |-OpaqueValueExpr 0x1fe1c597968 <<invalid sloc>> '_Bool'
|   |     |-CompoundStmt 0x1fe1c597690 <line:434:24, line:437:9>
|   |     | `-BinaryOperator 0x1fe1c597648 <line:435:13, col:25> 'int' '='
|   |     |   |-DeclRefExpr 0x1fe1c5975f8 <col:13> 'int' lvalue Var 0x1fe1c598d08 'signvalue' 'int'
|   |     |   `-CharacterLiteral 0x1fe1c597630 <col:25> 'int' 45
|   |     `-IfStmt 0x1fe1c597940 <line:437:16, line:440:25> has_else
|   |       |-BinaryOperator 0x1fe1c597770 <line:437:20, line:55:32> 'int' '&'
|   |       | |-ImplicitCastExpr 0x1fe1c597758 <line:437:20> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x1fe1c5976a8 <col:20> 'int' lvalue ParmVar 0x1fe1c598b18 'flags' 'int'
|   |       | `-ParenExpr 0x1fe1c597738 <line:55:25, col:32> 'int'
|   |       |   `-BinaryOperator 0x1fe1c597718 <col:26, col:31> 'int' '<<'
|   |       |     |-IntegerLiteral 0x1fe1c5976c8 <col:26> 'int' 1
|   |       |     `-IntegerLiteral 0x1fe1c5976f0 <col:31> 'int' 1
|   |       |-BinaryOperator 0x1fe1c5977c8 <line:438:13, col:25> 'int' '='
|   |       | |-DeclRefExpr 0x1fe1c597790 <col:13> 'int' lvalue Var 0x1fe1c598d08 'signvalue' 'int'
|   |       | `-CharacterLiteral 0x1fe1c5977b0 <col:25> 'int' 43
|   |       `-IfStmt 0x1fe1c597928 <line:439:14, line:440:25>
|   |         |-BinaryOperator 0x1fe1c5978b0 <line:439:18, line:57:32> 'int' '&'
|   |         | |-ImplicitCastExpr 0x1fe1c597898 <line:439:18> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x1fe1c5977e8 <col:18> 'int' lvalue ParmVar 0x1fe1c598b18 'flags' 'int'
|   |         | `-ParenExpr 0x1fe1c597878 <line:57:25, col:32> 'int'
|   |         |   `-BinaryOperator 0x1fe1c597858 <col:26, col:31> 'int' '<<'
|   |         |     |-IntegerLiteral 0x1fe1c597808 <col:26> 'int' 1
|   |         |     `-IntegerLiteral 0x1fe1c597830 <col:31> 'int' 2
|   |         `-BinaryOperator 0x1fe1c597908 <line:440:13, col:25> 'int' '='
|   |           |-DeclRefExpr 0x1fe1c5978d0 <col:13> 'int' lvalue Var 0x1fe1c598d08 'signvalue' 'int'
|   |           `-CharacterLiteral 0x1fe1c5978f0 <col:25> 'int' 32
|   |-IfStmt 0x1fe1c597dd0 <line:442:5, line:447:5>
|   | |-BinaryOperator 0x1fe1c597aa0 <line:442:9, line:59:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1fe1c597a88 <line:442:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c5979d8 <col:9> 'int' lvalue ParmVar 0x1fe1c598b18 'flags' 'int'
|   | | `-ParenExpr 0x1fe1c597a68 <line:59:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1fe1c597a48 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1fe1c5979f8 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1fe1c597a20 <col:31> 'int' 3
|   | `-CompoundStmt 0x1fe1c597db0 <line:442:27, line:447:5>
|   |   |-IfStmt 0x1fe1c597c38 <line:443:9, line:444:22>
|   |   | |-BinaryOperator 0x1fe1c597b38 <line:443:13, col:21> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1fe1c597b20 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1fe1c597ac0 <col:13> 'int' lvalue ParmVar 0x1fe1c598998 'base' 'int'
|   |   | | `-IntegerLiteral 0x1fe1c597af8 <col:21> 'int' 8
|   |   | `-BinaryOperator 0x1fe1c597c18 <line:444:13, col:22> 'const char *' '='
|   |   |   |-DeclRefExpr 0x1fe1c597b58 <col:13> 'const char *' lvalue Var 0x1fe1c598dc8 'prefix' 'const char *'
|   |   |   `-ImplicitCastExpr 0x1fe1c597c00 <col:22> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x1fe1c597be8 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x1fe1c597bc8 <col:22> 'char [2]' lvalue "0"
|   |   `-IfStmt 0x1fe1c597d98 <line:445:9, line:446:22>
|   |     |-BinaryOperator 0x1fe1c597cb0 <line:445:13, col:21> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1fe1c597c98 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1fe1c597c50 <col:13> 'int' lvalue ParmVar 0x1fe1c598998 'base' 'int'
|   |     | `-IntegerLiteral 0x1fe1c597c70 <col:21> 'int' 16
|   |     `-BinaryOperator 0x1fe1c597d78 <line:446:13, col:22> 'const char *' '='
|   |       |-DeclRefExpr 0x1fe1c597cd0 <col:13> 'const char *' lvalue Var 0x1fe1c598dc8 'prefix' 'const char *'
|   |       `-ImplicitCastExpr 0x1fe1c597d60 <col:22> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x1fe1c597d48 <col:22> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x1fe1c597d28 <col:22> 'char [3]' lvalue "0x"
|   |-IfStmt 0x1fe1c597f50 <line:448:5, line:449:16>
|   | |-BinaryOperator 0x1fe1c597eb0 <line:448:9, line:63:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1fe1c597e98 <line:448:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c597de8 <col:9> 'int' lvalue ParmVar 0x1fe1c598b18 'flags' 'int'
|   | | `-ParenExpr 0x1fe1c597e78 <line:63:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1fe1c597e58 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1fe1c597e08 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1fe1c597e30 <col:31> 'int' 5
|   | `-BinaryOperator 0x1fe1c597f30 <line:449:9, col:16> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c597ed0 <col:9> 'int' lvalue Var 0x1fe1c5972d8 'caps' 'int'
|   |   `-IntegerLiteral 0x1fe1c597f08 <col:16> 'int' 1
|   |-IfStmt 0x1fe1c596390 <line:455:5, line:456:14>
|   | |-OpaqueValueExpr 0x1fe1c596378 <<invalid sloc>> '_Bool'
|   | `-UnaryOperator 0x1fe1c596360 <col:9, col:14> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1fe1c596340 <col:9> 'int' lvalue Var 0x1fe1c5990a8 'place' 'int'
|   |-BinaryOperator 0x1fe1c5964b8 <line:459:5, col:21> 'int' '='
|   | |-DeclRefExpr 0x1fe1c5963f0 <col:5> 'int' lvalue Var 0x1fe1c597218 'zpadlen' 'int'
|   | `-BinaryOperator 0x1fe1c596498 <col:15, col:21> 'int' '-'
|   |   |-ImplicitCastExpr 0x1fe1c596468 <col:15> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c596428 <col:15> 'int' lvalue ParmVar 0x1fe1c598a98 'max' 'int'
|   |   `-ImplicitCastExpr 0x1fe1c596480 <col:21> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1fe1c596448 <col:21> 'int' lvalue Var 0x1fe1c5990a8 'place' 'int'
|   |-BinaryOperator 0x1fe1c596910 <line:460:5, line:461:73> 'int' '='
|   | |-DeclRefExpr 0x1fe1c5964d8 <line:460:5> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   | `-ImplicitCastExpr 0x1fe1c5968f8 <line:461:9, col:73> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1fe1c5968d8 <col:9, col:73> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1fe1c5968c0 <col:9, col:56> 'unsigned long long' <IntegralCast>
|   |     | `-BinaryOperator 0x1fe1c5967c8 <col:9, col:56> 'int' '-'
|   |     |   |-BinaryOperator 0x1fe1c5966d0 <col:9, line:80:40> 'int' '-'
|   |     |   | |-ImplicitCastExpr 0x1fe1c5966b8 <line:461:9> 'int' <LValueToRValue>
|   |     |   | | `-DeclRefExpr 0x1fe1c596510 <col:9> 'int' lvalue ParmVar 0x1fe1c598a18 'min' 'int'
|   |     |   | `-ParenExpr 0x1fe1c596698 <line:80:23, col:40> 'int'
|   |     |   |   `-ConditionalOperator 0x1fe1c596668 <col:24, line:461:29> 'int'
|   |     |   |     |-ParenExpr 0x1fe1c5965d8 <line:80:24, col:31> 'int'
|   |     |   |     | `-BinaryOperator 0x1fe1c5965b8 <line:461:24, col:29> 'int' '>='
|   |     |   |     |   |-ImplicitCastExpr 0x1fe1c596588 <col:24> 'int' <LValueToRValue>
|   |     |   |     |   | `-DeclRefExpr 0x1fe1c596548 <col:24> 'int' lvalue ParmVar 0x1fe1c598a98 'max' 'int'
|   |     |   |     |   `-ImplicitCastExpr 0x1fe1c5965a0 <col:29> 'int' <LValueToRValue>
|   |     |   |     |     `-DeclRefExpr 0x1fe1c596568 <col:29> 'int' lvalue Var 0x1fe1c5990a8 'place' 'int'
|   |     |   |     |-ImplicitCastExpr 0x1fe1c596638 <col:24> 'int' <LValueToRValue>
|   |     |   |     | `-DeclRefExpr 0x1fe1c5965f8 <col:24> 'int' lvalue ParmVar 0x1fe1c598a98 'max' 'int'
|   |     |   |     `-ImplicitCastExpr 0x1fe1c596650 <col:29> 'int' <LValueToRValue>
|   |     |   |       `-DeclRefExpr 0x1fe1c596618 <col:29> 'int' lvalue Var 0x1fe1c5990a8 'place' 'int'
|   |     |   `-ParenExpr 0x1fe1c5967a8 <col:38, col:56> 'int'
|   |     |     `-ConditionalOperator 0x1fe1c596778 <col:39, col:55> 'int'
|   |     |       |-ImplicitCastExpr 0x1fe1c596760 <col:39> 'int' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x1fe1c5966f0 <col:39> 'int' lvalue Var 0x1fe1c598d08 'signvalue' 'int'
|   |     |       |-IntegerLiteral 0x1fe1c596710 <col:51> 'int' 1
|   |     |       `-IntegerLiteral 0x1fe1c596738 <col:55> 'int' 0
|   |     `-CallExpr 0x1fe1c596880 <col:60, col:73> 'unsigned long long'
|   |       |-ImplicitCastExpr 0x1fe1c596868 <col:60> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1fe1c5967e8 <col:60> 'unsigned long long (const char *)' Function 0x1fe1c489d90 'strlen' 'unsigned long long (const char *)'
|   |       `-ImplicitCastExpr 0x1fe1c5968a8 <col:67> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1fe1c596808 <col:67> 'const char *' lvalue Var 0x1fe1c598dc8 'prefix' 'const char *'
|   |-IfStmt 0x1fe1c596a18 <line:462:5, line:463:19>
|   | |-BinaryOperator 0x1fe1c596990 <line:462:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c596978 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c596930 <col:9> 'int' lvalue Var 0x1fe1c597218 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1fe1c596950 <col:19> 'int' 0
|   | `-BinaryOperator 0x1fe1c5969f8 <line:463:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c5969b0 <col:9> 'int' lvalue Var 0x1fe1c597218 'zpadlen' 'int'
|   |   `-IntegerLiteral 0x1fe1c5969d0 <col:19> 'int' 0
|   |-IfStmt 0x1fe1c596b18 <line:464:5, line:465:19>
|   | |-BinaryOperator 0x1fe1c596a90 <line:464:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c596a78 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c596a30 <col:9> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1fe1c596a50 <col:19> 'int' 0
|   | `-BinaryOperator 0x1fe1c596af8 <line:465:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c596ab0 <col:9> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   |   `-IntegerLiteral 0x1fe1c596ad0 <col:19> 'int' 0
|   |-IfStmt 0x1fe1c596e50 <line:466:5, line:469:5>
|   | |-BinaryOperator 0x1fe1c596bf8 <line:466:9, line:61:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1fe1c596be0 <line:466:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c596b30 <col:9> 'int' lvalue ParmVar 0x1fe1c598b18 'flags' 'int'
|   | | `-ParenExpr 0x1fe1c596bc0 <line:61:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1fe1c596ba0 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1fe1c596b50 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1fe1c596b78 <col:31> 'int' 4
|   | `-CompoundStmt 0x1fe1c596e30 <line:466:28, line:469:5>
|   |   |-BinaryOperator 0x1fe1c596da8 <line:467:9, line:80:40> 'int' '='
|   |   | |-DeclRefExpr 0x1fe1c596c18 <line:467:9> 'int' lvalue Var 0x1fe1c597218 'zpadlen' 'int'
|   |   | `-ParenExpr 0x1fe1c596d88 <line:80:23, col:40> 'int'
|   |   |   `-ConditionalOperator 0x1fe1c596d58 <col:24, line:467:37> 'int'
|   |   |     |-ParenExpr 0x1fe1c596cc8 <line:80:24, col:31> 'int'
|   |   |     | `-BinaryOperator 0x1fe1c596ca8 <line:467:28, col:37> 'int' '>='
|   |   |     |   |-ImplicitCastExpr 0x1fe1c596c78 <col:28> 'int' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1fe1c596c38 <col:28> 'int' lvalue Var 0x1fe1c597218 'zpadlen' 'int'
|   |   |     |   `-ImplicitCastExpr 0x1fe1c596c90 <col:37> 'int' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1fe1c596c58 <col:37> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   |   |     |-ImplicitCastExpr 0x1fe1c596d28 <col:28> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1fe1c596ce8 <col:28> 'int' lvalue Var 0x1fe1c597218 'zpadlen' 'int'
|   |   |     `-ImplicitCastExpr 0x1fe1c596d40 <col:37> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1fe1c596d08 <col:37> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   |   `-BinaryOperator 0x1fe1c596e10 <line:468:9, col:19> 'int' '='
|   |     |-DeclRefExpr 0x1fe1c596dc8 <col:9> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   |     `-IntegerLiteral 0x1fe1c596de8 <col:19> 'int' 0
|   |-IfStmt 0x1fe1c596fe0 <line:470:5, line:471:20>
|   | |-BinaryOperator 0x1fe1c596f30 <line:470:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1fe1c596f18 <line:470:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c596e68 <col:9> 'int' lvalue ParmVar 0x1fe1c598b18 'flags' 'int'
|   | | `-ParenExpr 0x1fe1c596ef8 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1fe1c596ed8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1fe1c596e88 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1fe1c596eb0 <col:31> 'int' 0
|   | `-BinaryOperator 0x1fe1c596fc0 <line:471:9, col:20> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c596f50 <col:9> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   |   `-UnaryOperator 0x1fe1c596fa8 <col:19, col:20> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1fe1c596f90 <col:20> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1fe1c596f70 <col:20> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   |-WhileStmt 0x1fe1c5912c8 <line:474:5, line:478:5>
|   | |-BinaryOperator 0x1fe1c597058 <line:474:12, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1fe1c597040 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c596ff8 <col:12> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1fe1c597018 <col:22> 'int' 0
|   | `-CompoundStmt 0x1fe1c5912a8 <col:25, line:478:5>
|   |   |-IfStmt 0x1fe1c591258 <line:475:9, line:476:20>
|   |   | |-UnaryOperator 0x1fe1c591208 <line:475:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c591160 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c591148 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c597078 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c5911a8 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c597098 <col:25> 'char **' lvalue ParmVar 0x1fe1c598728 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c5911c0 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c5970d0 <col:34> 'char **' lvalue ParmVar 0x1fe1c5987a8 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c5911d8 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c597108 <col:42> 'size_t *' lvalue ParmVar 0x1fe1c598820 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c5911f0 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c5910f8 <col:51> 'size_t *' lvalue ParmVar 0x1fe1c598898 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1fe1c591130 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1fe1c591248 <line:476:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c591220 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1fe1c591290 <line:477:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1fe1c591270 <col:11> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   |-IfStmt 0x1fe1c591518 <line:481:5, line:483:20>
|   | |-ImplicitCastExpr 0x1fe1c591300 <line:481:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1fe1c5912e0 <col:9> 'int' lvalue Var 0x1fe1c598d08 'signvalue' 'int'
|   | `-IfStmt 0x1fe1c591500 <line:482:9, line:483:20>
|   |   |-UnaryOperator 0x1fe1c5914b0 <line:482:12, col:68> 'int' prefix '!' cannot overflow
|   |   | `-CallExpr 0x1fe1c5913f0 <col:13, col:68> 'int'
|   |   |   |-ImplicitCastExpr 0x1fe1c5913d8 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1fe1c591318 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |   |-ImplicitCastExpr 0x1fe1c591438 <col:25> 'char **' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1fe1c591338 <col:25> 'char **' lvalue ParmVar 0x1fe1c598728 'sbuffer' 'char **'
|   |   |   |-ImplicitCastExpr 0x1fe1c591450 <col:34> 'char **' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1fe1c591358 <col:34> 'char **' lvalue ParmVar 0x1fe1c5987a8 'buffer' 'char **'
|   |   |   |-ImplicitCastExpr 0x1fe1c591468 <col:42> 'size_t *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1fe1c591378 <col:42> 'size_t *' lvalue ParmVar 0x1fe1c598820 'currlen' 'size_t *'
|   |   |   |-ImplicitCastExpr 0x1fe1c591480 <col:51> 'size_t *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1fe1c591398 <col:51> 'size_t *' lvalue ParmVar 0x1fe1c598898 'maxlen' 'size_t *'
|   |   |   `-ImplicitCastExpr 0x1fe1c591498 <col:59> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1fe1c5913b8 <col:59> 'int' lvalue Var 0x1fe1c598d08 'signvalue' 'int'
|   |   `-ReturnStmt 0x1fe1c5914f0 <line:483:13, col:20>
|   |     `-IntegerLiteral 0x1fe1c5914c8 <col:20> 'int' 0
|   |-WhileStmt 0x1fe1c591838 <line:486:5, line:490:5>
|   | |-ImplicitCastExpr 0x1fe1c591580 <line:486:12, col:13> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x1fe1c591568 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x1fe1c591550 <col:13> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1fe1c591530 <col:13> 'const char *' lvalue Var 0x1fe1c598dc8 'prefix' 'const char *'
|   | `-CompoundStmt 0x1fe1c591818 <col:21, line:490:5>
|   |   |-IfStmt 0x1fe1c5917c8 <line:487:9, line:488:20>
|   |   | |-UnaryOperator 0x1fe1c591778 <line:487:12, col:66> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c5916a0 <col:13, col:66> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c591688 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c591598 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c5916e8 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c5915b8 <col:25> 'char **' lvalue ParmVar 0x1fe1c598728 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c591700 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c5915d8 <col:34> 'char **' lvalue ParmVar 0x1fe1c5987a8 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c591718 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c5915f8 <col:42> 'size_t *' lvalue ParmVar 0x1fe1c598820 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c591730 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c591618 <col:51> 'size_t *' lvalue ParmVar 0x1fe1c598898 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1fe1c591760 <col:59, col:60> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1fe1c591748 <col:59, col:60> 'char' <LValueToRValue>
|   |   | |       `-UnaryOperator 0x1fe1c591670 <col:59, col:60> 'const char' lvalue prefix '*' cannot overflow
|   |   | |         `-ImplicitCastExpr 0x1fe1c591658 <col:60> 'const char *' <LValueToRValue>
|   |   | |           `-DeclRefExpr 0x1fe1c591638 <col:60> 'const char *' lvalue Var 0x1fe1c598dc8 'prefix' 'const char *'
|   |   | `-ReturnStmt 0x1fe1c5917b8 <line:488:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c591790 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1fe1c591800 <line:489:9, col:15> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x1fe1c5917e0 <col:9> 'const char *' lvalue Var 0x1fe1c598dc8 'prefix' 'const char *'
|   |-IfStmt 0x1fe1c591bb8 <line:493:5, line:499:5>
|   | |-BinaryOperator 0x1fe1c5918b0 <line:493:9, col:19> 'int' '>'
|   | | |-ImplicitCastExpr 0x1fe1c591898 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c591850 <col:9> 'int' lvalue Var 0x1fe1c597218 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1fe1c591870 <col:19> 'int' 0
|   | `-CompoundStmt 0x1fe1c591ba0 <col:22, line:499:5>
|   |   `-WhileStmt 0x1fe1c591b88 <line:494:9, line:498:9>
|   |     |-BinaryOperator 0x1fe1c591930 <line:494:16, col:26> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1fe1c591918 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1fe1c5918d0 <col:16> 'int' lvalue Var 0x1fe1c597218 'zpadlen' 'int'
|   |     | `-IntegerLiteral 0x1fe1c5918f0 <col:26> 'int' 0
|   |     `-CompoundStmt 0x1fe1c591b68 <col:29, line:498:9>
|   |       |-IfStmt 0x1fe1c591b18 <line:495:13, line:496:24>
|   |       | |-UnaryOperator 0x1fe1c591ac8 <line:495:16, col:66> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x1fe1c591a20 <col:17, col:66> 'int'
|   |       | |   |-ImplicitCastExpr 0x1fe1c591a08 <col:17> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1fe1c591950 <col:17> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       | |   |-ImplicitCastExpr 0x1fe1c591a68 <col:29> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1fe1c591970 <col:29> 'char **' lvalue ParmVar 0x1fe1c598728 'sbuffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1fe1c591a80 <col:38> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1fe1c591990 <col:38> 'char **' lvalue ParmVar 0x1fe1c5987a8 'buffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1fe1c591a98 <col:46> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1fe1c5919b0 <col:46> 'size_t *' lvalue ParmVar 0x1fe1c598820 'currlen' 'size_t *'
|   |       | |   |-ImplicitCastExpr 0x1fe1c591ab0 <col:55> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1fe1c5919d0 <col:55> 'size_t *' lvalue ParmVar 0x1fe1c598898 'maxlen' 'size_t *'
|   |       | |   `-CharacterLiteral 0x1fe1c5919f0 <col:63> 'int' 48
|   |       | `-ReturnStmt 0x1fe1c591b08 <line:496:17, col:24>
|   |       |   `-IntegerLiteral 0x1fe1c591ae0 <col:24> 'int' 0
|   |       `-UnaryOperator 0x1fe1c591b50 <line:497:13, col:15> 'int' prefix '--'
|   |         `-DeclRefExpr 0x1fe1c591b30 <col:15> 'int' lvalue Var 0x1fe1c597218 'zpadlen' 'int'
|   |-WhileStmt 0x1fe1c591da8 <line:501:5, line:504:5>
|   | |-BinaryOperator 0x1fe1c591c30 <line:501:12, col:20> 'int' '>'
|   | | |-ImplicitCastExpr 0x1fe1c591c18 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c591bd0 <col:12> 'int' lvalue Var 0x1fe1c5990a8 'place' 'int'
|   | | `-IntegerLiteral 0x1fe1c591bf0 <col:20> 'int' 0
|   | `-CompoundStmt 0x1fe1c591d90 <col:23, line:504:5>
|   |   `-IfStmt 0x1fe1c591d78 <line:502:9, line:503:20>
|   |     |-OpaqueValueExpr 0x1fe1c591d60 <<invalid sloc>> '_Bool'
|   |     `-ReturnStmt 0x1fe1c591d50 <col:13, col:20>
|   |       `-IntegerLiteral 0x1fe1c591d28 <col:20> 'int' 0
|   |-WhileStmt 0x1fe1c592078 <line:507:5, line:511:5>
|   | |-BinaryOperator 0x1fe1c591e20 <line:507:12, col:22> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c591e08 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c591dc0 <col:12> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1fe1c591de0 <col:22> 'int' 0
|   | `-CompoundStmt 0x1fe1c592058 <col:25, line:511:5>
|   |   |-IfStmt 0x1fe1c592008 <line:508:9, line:509:20>
|   |   | |-UnaryOperator 0x1fe1c591fb8 <line:508:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c591f10 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c591ef8 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c591e40 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c591f58 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c591e60 <col:26> 'char **' lvalue ParmVar 0x1fe1c598728 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c591f70 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c591e80 <col:35> 'char **' lvalue ParmVar 0x1fe1c5987a8 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c591f88 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c591ea0 <col:43> 'size_t *' lvalue ParmVar 0x1fe1c598820 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c591fa0 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c591ec0 <col:52> 'size_t *' lvalue ParmVar 0x1fe1c598898 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1fe1c591ee0 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1fe1c591ff8 <line:509:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c591fd0 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1fe1c592040 <line:510:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1fe1c592020 <col:11> 'int' lvalue Var 0x1fe1c597158 'spadlen' 'int'
|   `-ReturnStmt 0x1fe1c5920b8 <line:512:5, col:12>
|     `-IntegerLiteral 0x1fe1c592090 <col:12> 'int' 1
|-FunctionDecl 0x1fe1c5942e0 <line:515:1, line:521:1> line:515:16 used abs_val 'double (double)' static
| |-ParmVarDecl 0x1fe1c594200 <line:27:18, line:515:32> col:32 used value 'double'
| `-CompoundStmt 0x1fe1c594610 <line:516:1, line:521:1>
|   |-DeclStmt 0x1fe1c594458 <line:27:18, line:517:27>
|   | `-VarDecl 0x1fe1c5943b8 <line:27:18, line:517:22> col:13 used result 'double' cinit
|   |   `-ImplicitCastExpr 0x1fe1c594440 <col:22> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1fe1c594420 <col:22> 'double' lvalue ParmVar 0x1fe1c594200 'value' 'double'
|   |-IfStmt 0x1fe1c5945b0 <line:518:5, line:519:19>
|   | |-BinaryOperator 0x1fe1c5944e8 <line:518:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c5944b8 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c594470 <col:9> 'double' lvalue ParmVar 0x1fe1c594200 'value' 'double'
|   | | `-ImplicitCastExpr 0x1fe1c5944d0 <col:17> 'double' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x1fe1c594490 <col:17> 'int' 0
|   | `-BinaryOperator 0x1fe1c594590 <line:519:9, col:19> 'double' '='
|   |   |-DeclRefExpr 0x1fe1c594508 <col:9> 'double' lvalue Var 0x1fe1c5943b8 'result' 'double'
|   |   `-UnaryOperator 0x1fe1c594578 <col:18, col:19> 'double' prefix '-'
|   |     `-ImplicitCastExpr 0x1fe1c594560 <col:19> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x1fe1c594540 <col:19> 'double' lvalue ParmVar 0x1fe1c594200 'value' 'double'
|   `-ReturnStmt 0x1fe1c594600 <line:520:5, col:12>
|     `-ImplicitCastExpr 0x1fe1c5945e8 <col:12> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x1fe1c5945c8 <col:12> 'double' lvalue Var 0x1fe1c5943b8 'result' 'double'
|-FunctionDecl 0x1fe1c594730 <line:523:1, line:531:1> line:523:16 used pow_10 'double (int)' static
| |-ParmVarDecl 0x1fe1c594650 <col:23, col:27> col:27 used in_exp 'int'
| `-CompoundStmt 0x1fe1c594a60 <line:524:1, line:531:1>
|   |-DeclStmt 0x1fe1c5948b0 <line:27:18, line:525:23>
|   | `-VarDecl 0x1fe1c594808 <line:27:18, line:525:22> col:13 used result 'double' cinit
|   |   `-ImplicitCastExpr 0x1fe1c594898 <col:22> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x1fe1c594870 <col:22> 'int' 1
|   |-WhileStmt 0x1fe1c594a00 <line:526:5, line:529:5>
|   | |-ImplicitCastExpr 0x1fe1c5948e8 <line:526:12> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1fe1c5948c8 <col:12> 'int' lvalue ParmVar 0x1fe1c594650 'in_exp' 'int'
|   | `-CompoundStmt 0x1fe1c5949e0 <col:20, line:529:5>
|   |   |-CompoundAssignOperator 0x1fe1c594978 <line:527:9, col:19> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-DeclRefExpr 0x1fe1c594900 <col:9> 'double' lvalue Var 0x1fe1c594808 'result' 'double'
|   |   | `-ImplicitCastExpr 0x1fe1c594960 <col:19> 'double' <IntegralToFloating>
|   |   |   `-IntegerLiteral 0x1fe1c594938 <col:19> 'int' 10
|   |   `-UnaryOperator 0x1fe1c5949c8 <line:528:9, col:15> 'int' postfix '--'
|   |     `-DeclRefExpr 0x1fe1c5949a8 <col:9> 'int' lvalue ParmVar 0x1fe1c594650 'in_exp' 'int'
|   `-ReturnStmt 0x1fe1c594a50 <line:530:5, col:12>
|     `-ImplicitCastExpr 0x1fe1c594a38 <col:12> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x1fe1c594a18 <col:12> 'double' lvalue Var 0x1fe1c594808 'result' 'double'
|-FunctionDecl 0x1fe1c594b80 <line:533:1, line:541:1> line:533:13 used roundv 'long (double)' static
| |-ParmVarDecl 0x1fe1c594aa0 <line:27:18, line:533:28> col:28 used value 'double'
| `-CompoundStmt 0x1fe1c594fa8 <line:534:1, line:541:1>
|   |-DeclStmt 0x1fe1c594cc0 <line:535:5, col:17>
|   | `-VarDecl 0x1fe1c594c58 <col:5, col:10> col:10 used intpart 'long'
|   |-BinaryOperator 0x1fe1c594d88 <line:536:5, col:21> 'long' '='
|   | |-DeclRefExpr 0x1fe1c594cd8 <col:5> 'long' lvalue Var 0x1fe1c594c58 'intpart' 'long'
|   | `-CStyleCastExpr 0x1fe1c594d60 <col:15, col:21> 'long' <FloatingToIntegral>
|   |   `-ImplicitCastExpr 0x1fe1c594d48 <col:21> 'double' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x1fe1c594d10 <col:21> 'double' lvalue ParmVar 0x1fe1c594aa0 'value' 'double'
|   |-BinaryOperator 0x1fe1c594e70 <line:537:5, col:21> 'double' '='
|   | |-DeclRefExpr 0x1fe1c594da8 <col:5> 'double' lvalue ParmVar 0x1fe1c594aa0 'value' 'double'
|   | `-BinaryOperator 0x1fe1c594e50 <col:13, col:21> 'double' '-'
|   |   |-ImplicitCastExpr 0x1fe1c594e08 <col:13> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c594dc8 <col:13> 'double' lvalue ParmVar 0x1fe1c594aa0 'value' 'double'
|   |   `-ImplicitCastExpr 0x1fe1c594e38 <col:21> 'double' <IntegralToFloating>
|   |     `-ImplicitCastExpr 0x1fe1c594e20 <col:21> 'long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1fe1c594de8 <col:21> 'long' lvalue Var 0x1fe1c594c58 'intpart' 'long'
|   |-IfStmt 0x1fe1c594f48 <line:538:5, line:539:16>
|   | |-BinaryOperator 0x1fe1c594ef0 <line:538:9, col:18> 'int' '>='
|   | | |-ImplicitCastExpr 0x1fe1c594ed8 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c594e90 <col:9> 'double' lvalue ParmVar 0x1fe1c594aa0 'value' 'double'
|   | | `-FloatingLiteral 0x1fe1c594eb0 <col:18> 'double' 5.000000e-01
|   | `-UnaryOperator 0x1fe1c594f30 <line:539:9, col:16> 'long' postfix '++'
|   |   `-DeclRefExpr 0x1fe1c594f10 <col:9> 'long' lvalue Var 0x1fe1c594c58 'intpart' 'long'
|   `-ReturnStmt 0x1fe1c594f98 <line:540:5, col:12>
|     `-ImplicitCastExpr 0x1fe1c594f80 <col:12> 'long' <LValueToRValue>
|       `-DeclRefExpr 0x1fe1c594f60 <col:12> 'long' lvalue Var 0x1fe1c594c58 'intpart' 'long'
|-FunctionDecl 0x1fe1c4d70f8 prev 0x1fe1c4b6960 <line:543:1, line:800:1> line:544:1 used fmtfp 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' static
| |-ParmVarDecl 0x1fe1c594ff8 <col:7, col:14> col:14 used sbuffer 'char **'
| |-ParmVarDecl 0x1fe1c595078 <line:545:7, col:14> col:14 used buffer 'char **'
| |-ParmVarDecl 0x1fe1c4d6c50 <line:546:7, col:15> col:15 used currlen 'size_t *'
| |-ParmVarDecl 0x1fe1c4d6cc8 <line:547:7, col:15> col:15 used maxlen 'size_t *'
| |-ParmVarDecl 0x1fe1c4d6d48 <line:27:18, line:547:31> col:31 used fvalue 'double'
| |-ParmVarDecl 0x1fe1c4d6dc8 <col:39, col:43> col:43 used min 'int'
| |-ParmVarDecl 0x1fe1c4d6e48 <col:48, col:52> col:52 used max 'int'
| |-ParmVarDecl 0x1fe1c4d6ec8 <col:57, col:61> col:61 used flags 'int'
| |-ParmVarDecl 0x1fe1c4d6f48 <col:68, col:72> col:72 used style 'int'
| `-CompoundStmt 0x1fe1c4deef8 <line:548:1, line:800:1>
|   |-DeclStmt 0x1fe1c4d7288 <line:549:5, col:22>
|   | `-VarDecl 0x1fe1c4d71f8 <col:5, col:21> col:9 used signvalue 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c4d7260 <col:21> 'int' 0
|   |-DeclStmt 0x1fe1c4d7320 <line:27:18, line:550:20>
|   | `-VarDecl 0x1fe1c4d72b8 <line:27:18, line:550:13> col:13 used ufvalue 'double'
|   |-DeclStmt 0x1fe1c4d73b8 <line:27:18, line:551:21>
|   | `-VarDecl 0x1fe1c4d7350 <line:27:18, line:551:13> col:13 used tmpvalue 'double'
|   |-DeclStmt 0x1fe1c4d74d0 <line:552:5, col:22>
|   | `-VarDecl 0x1fe1c4d7468 <col:5, col:21> col:10 used iconvert 'char [20]'
|   |-DeclStmt 0x1fe1c4d75b0 <line:553:5, col:22>
|   | `-VarDecl 0x1fe1c4d7548 <col:5, col:21> col:10 used fconvert 'char [20]'
|   |-DeclStmt 0x1fe1c4d7690 <line:554:5, col:22>
|   | `-VarDecl 0x1fe1c4d7628 <col:5, col:21> col:10 used econvert 'char [20]'
|   |-DeclStmt 0x1fe1c4d7750 <line:555:5, col:19>
|   | `-VarDecl 0x1fe1c4d76c0 <col:5, col:18> col:9 used iplace 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c4d7728 <col:18> 'int' 0
|   |-DeclStmt 0x1fe1c4d7810 <line:556:5, col:19>
|   | `-VarDecl 0x1fe1c4d7780 <col:5, col:18> col:9 used fplace 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c4d77e8 <col:18> 'int' 0
|   |-DeclStmt 0x1fe1c4d78d0 <line:557:5, col:19>
|   | `-VarDecl 0x1fe1c4d7840 <col:5, col:18> col:9 used eplace 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c4d78a8 <col:18> 'int' 0
|   |-DeclStmt 0x1fe1c4d7990 <line:558:5, col:19>
|   | `-VarDecl 0x1fe1c4d7900 <col:5, col:18> col:9 used padlen 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c4d7968 <col:18> 'int' 0
|   |-DeclStmt 0x1fe1c4d7a50 <line:559:5, col:20>
|   | `-VarDecl 0x1fe1c4d79c0 <col:5, col:19> col:9 used zpadlen 'int' cinit
|   |   `-IntegerLiteral 0x1fe1c4d7a28 <col:19> 'int' 0
|   |-DeclStmt 0x1fe1c4d7b28 <line:560:5, col:17>
|   | `-VarDecl 0x1fe1c4d7a80 <col:5, col:16> col:10 used exp 'long' cinit
|   |   `-ImplicitCastExpr 0x1fe1c4d7b10 <col:16> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x1fe1c4d7ae8 <col:16> 'int' 0
|   |-DeclStmt 0x1fe1c4d7bc0 <line:561:5, col:26>
|   | `-VarDecl 0x1fe1c4d7b58 <col:5, col:19> col:19 used intpart 'unsigned long'
|   |-DeclStmt 0x1fe1c4d7c58 <line:562:5, col:27>
|   | `-VarDecl 0x1fe1c4d7bf0 <col:5, col:19> col:19 used fracpart 'unsigned long'
|   |-DeclStmt 0x1fe1c4d7cf0 <line:563:5, col:24>
|   | `-VarDecl 0x1fe1c4d7c88 <col:5, col:19> col:19 used max10 'unsigned long'
|   |-DeclStmt 0x1fe1c4d7d88 <line:564:5, col:18>
|   | `-VarDecl 0x1fe1c4d7d20 <col:5, col:9> col:9 used realstyle 'int'
|   |-IfStmt 0x1fe1c4d7e88 <line:566:5, line:567:15>
|   | |-BinaryOperator 0x1fe1c4d7e00 <line:566:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c4d7de8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4d7da0 <col:9> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   | | `-IntegerLiteral 0x1fe1c4d7dc0 <col:15> 'int' 0
|   | `-BinaryOperator 0x1fe1c4d7e68 <line:567:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c4d7e20 <col:9> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   `-IntegerLiteral 0x1fe1c4d7e40 <col:15> 'int' 6
|   |-IfStmt 0x1fe1c4d8268 <line:569:5, line:574:21> has_else
|   | |-BinaryOperator 0x1fe1c4d7f18 <line:569:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c4d7ee8 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4d7ea0 <col:9> 'double' lvalue ParmVar 0x1fe1c4d6d48 'fvalue' 'double'
|   | | `-ImplicitCastExpr 0x1fe1c4d7f00 <col:18> 'double' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x1fe1c4d7ec0 <col:18> 'int' 0
|   | |-BinaryOperator 0x1fe1c4d7f88 <line:570:9, col:21> 'int' '='
|   | | |-DeclRefExpr 0x1fe1c4d7f38 <col:9> 'int' lvalue Var 0x1fe1c4d71f8 'signvalue' 'int'
|   | | `-CharacterLiteral 0x1fe1c4d7f70 <col:21> 'int' 45
|   | `-IfStmt 0x1fe1c4d8240 <line:571:10, line:574:21> has_else
|   |   |-BinaryOperator 0x1fe1c4d8070 <line:571:14, line:55:32> 'int' '&'
|   |   | |-ImplicitCastExpr 0x1fe1c4d8058 <line:571:14> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1fe1c4d7fa8 <col:14> 'int' lvalue ParmVar 0x1fe1c4d6ec8 'flags' 'int'
|   |   | `-ParenExpr 0x1fe1c4d8038 <line:55:25, col:32> 'int'
|   |   |   `-BinaryOperator 0x1fe1c4d8018 <col:26, col:31> 'int' '<<'
|   |   |     |-IntegerLiteral 0x1fe1c4d7fc8 <col:26> 'int' 1
|   |   |     `-IntegerLiteral 0x1fe1c4d7ff0 <col:31> 'int' 1
|   |   |-BinaryOperator 0x1fe1c4d80c8 <line:572:9, col:21> 'int' '='
|   |   | |-DeclRefExpr 0x1fe1c4d8090 <col:9> 'int' lvalue Var 0x1fe1c4d71f8 'signvalue' 'int'
|   |   | `-CharacterLiteral 0x1fe1c4d80b0 <col:21> 'int' 43
|   |   `-IfStmt 0x1fe1c4d8228 <line:573:10, line:574:21>
|   |     |-BinaryOperator 0x1fe1c4d81b0 <line:573:14, line:57:32> 'int' '&'
|   |     | |-ImplicitCastExpr 0x1fe1c4d8198 <line:573:14> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1fe1c4d80e8 <col:14> 'int' lvalue ParmVar 0x1fe1c4d6ec8 'flags' 'int'
|   |     | `-ParenExpr 0x1fe1c4d8178 <line:57:25, col:32> 'int'
|   |     |   `-BinaryOperator 0x1fe1c4d8158 <col:26, col:31> 'int' '<<'
|   |     |     |-IntegerLiteral 0x1fe1c4d8108 <col:26> 'int' 1
|   |     |     `-IntegerLiteral 0x1fe1c4d8130 <col:31> 'int' 2
|   |     `-BinaryOperator 0x1fe1c4d8208 <line:574:9, col:21> 'int' '='
|   |       |-DeclRefExpr 0x1fe1c4d81d0 <col:9> 'int' lvalue Var 0x1fe1c4d71f8 'signvalue' 'int'
|   |       `-CharacterLiteral 0x1fe1c4d81f0 <col:21> 'int' 32
|   |-IfStmt 0x1fe1c4d8a98 <line:581:5, line:594:5> has_else
|   | |-BinaryOperator 0x1fe1c4d82f0 <line:581:9, line:76:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1fe1c4d82d8 <line:581:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4d8290 <col:9> 'int' lvalue ParmVar 0x1fe1c4d6f48 'style' 'int'
|   | | `-IntegerLiteral 0x1fe1c4d82b0 <line:76:25> 'int' 2
|   | |-CompoundStmt 0x1fe1c4d89f0 <line:581:28, line:592:5>
|   | | `-IfStmt 0x1fe1c4d89c8 <line:582:9, line:591:9> has_else
|   | |   |-BinaryOperator 0x1fe1c4d8370 <line:582:13, col:23> 'int' '=='
|   | |   | |-ImplicitCastExpr 0x1fe1c4d8358 <col:13> 'double' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x1fe1c4d8310 <col:13> 'double' lvalue ParmVar 0x1fe1c4d6d48 'fvalue' 'double'
|   | |   | `-FloatingLiteral 0x1fe1c4d8330 <col:23> 'double' 0.000000e+00
|   | |   |-CompoundStmt 0x1fe1c4d8410 <col:28, line:584:9>
|   | |   | `-BinaryOperator 0x1fe1c4d83f0 <line:583:13, line:74:25> 'int' '='
|   | |   |   |-DeclRefExpr 0x1fe1c4d8390 <line:583:13> 'int' lvalue Var 0x1fe1c4d7d20 'realstyle' 'int'
|   | |   |   `-IntegerLiteral 0x1fe1c4d83c8 <line:74:25> 'int' 0
|   | |   `-IfStmt 0x1fe1c4d89a0 <line:584:16, line:591:9> has_else
|   | |     |-BinaryOperator 0x1fe1c4d8488 <line:584:20, col:29> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1fe1c4d8470 <col:20> 'double' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1fe1c4d8428 <col:20> 'double' lvalue ParmVar 0x1fe1c4d6d48 'fvalue' 'double'
|   | |     | `-FloatingLiteral 0x1fe1c4d8448 <col:29> 'double' 1.000000e-04
|   | |     |-CompoundStmt 0x1fe1c4d8510 <col:37, line:586:9>
|   | |     | `-BinaryOperator 0x1fe1c4d84f0 <line:585:13, line:75:25> 'int' '='
|   | |     |   |-DeclRefExpr 0x1fe1c4d84a8 <line:585:13> 'int' lvalue Var 0x1fe1c4d7d20 'realstyle' 'int'
|   | |     |   `-IntegerLiteral 0x1fe1c4d84c8 <line:75:25> 'int' 1
|   | |     `-IfStmt 0x1fe1c4d8978 <line:586:16, line:591:9> has_else
|   | |       |-BinaryOperator 0x1fe1c4d8858 <line:586:20, line:587:57> 'int' '||'
|   | |       | |-ParenExpr 0x1fe1c4d8660 <line:586:20, col:45> 'int'
|   | |       | | `-BinaryOperator 0x1fe1c4d8640 <col:21, col:43> 'int' '&&'
|   | |       | |   |-BinaryOperator 0x1fe1c4d8588 <col:21, col:28> 'int' '=='
|   | |       | |   | |-ImplicitCastExpr 0x1fe1c4d8570 <col:21> 'int' <LValueToRValue>
|   | |       | |   | | `-DeclRefExpr 0x1fe1c4d8528 <col:21> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   | |       | |   | `-IntegerLiteral 0x1fe1c4d8548 <col:28> 'int' 0
|   | |       | |   `-BinaryOperator 0x1fe1c4d8620 <col:33, col:43> 'int' '>='
|   | |       | |     |-ImplicitCastExpr 0x1fe1c4d85f0 <col:33> 'double' <LValueToRValue>
|   | |       | |     | `-DeclRefExpr 0x1fe1c4d85a8 <col:33> 'double' lvalue ParmVar 0x1fe1c4d6d48 'fvalue' 'double'
|   | |       | |     `-ImplicitCastExpr 0x1fe1c4d8608 <col:43> 'double' <IntegralToFloating>
|   | |       | |       `-IntegerLiteral 0x1fe1c4d85c8 <col:43> 'int' 10
|   | |       | `-ParenExpr 0x1fe1c4d8838 <line:587:24, col:57> 'int'
|   | |       |   `-BinaryOperator 0x1fe1c4d8818 <col:25, col:56> 'int' '&&'
|   | |       |     |-BinaryOperator 0x1fe1c4d86e0 <col:25, col:31> 'int' '>'
|   | |       |     | |-ImplicitCastExpr 0x1fe1c4d86c8 <col:25> 'int' <LValueToRValue>
|   | |       |     | | `-DeclRefExpr 0x1fe1c4d8680 <col:25> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   | |       |     | `-IntegerLiteral 0x1fe1c4d86a0 <col:31> 'int' 0
|   | |       |     `-BinaryOperator 0x1fe1c4d87f8 <col:36, col:56> 'int' '>='
|   | |       |       |-ImplicitCastExpr 0x1fe1c4d87e0 <col:36> 'double' <LValueToRValue>
|   | |       |       | `-DeclRefExpr 0x1fe1c4d8700 <col:36> 'double' lvalue ParmVar 0x1fe1c4d6d48 'fvalue' 'double'
|   | |       |       `-CallExpr 0x1fe1c4d87a0 <col:46, col:56> 'double'
|   | |       |         |-ImplicitCastExpr 0x1fe1c4d8788 <col:46> 'double (*)(int)' <FunctionToPointerDecay>
|   | |       |         | `-DeclRefExpr 0x1fe1c4d8720 <col:46> 'double (int)' Function 0x1fe1c594730 'pow_10' 'double (int)'
|   | |       |         `-ImplicitCastExpr 0x1fe1c4d87c8 <col:53> 'int' <LValueToRValue>
|   | |       |           `-DeclRefExpr 0x1fe1c4d8740 <col:53> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   | |       |-CompoundStmt 0x1fe1c4d88e0 <col:60, line:589:9>
|   | |       | `-BinaryOperator 0x1fe1c4d88c0 <line:588:13, line:75:25> 'int' '='
|   | |       |   |-DeclRefExpr 0x1fe1c4d8878 <line:588:13> 'int' lvalue Var 0x1fe1c4d7d20 'realstyle' 'int'
|   | |       |   `-IntegerLiteral 0x1fe1c4d8898 <line:75:25> 'int' 1
|   | |       `-CompoundStmt 0x1fe1c4d8960 <line:589:16, line:591:9>
|   | |         `-BinaryOperator 0x1fe1c4d8940 <line:590:13, line:74:25> 'int' '='
|   | |           |-DeclRefExpr 0x1fe1c4d88f8 <line:590:13> 'int' lvalue Var 0x1fe1c4d7d20 'realstyle' 'int'
|   | |           `-IntegerLiteral 0x1fe1c4d8918 <line:74:25> 'int' 0
|   | `-CompoundStmt 0x1fe1c4d8a80 <line:592:12, line:594:5>
|   |   `-BinaryOperator 0x1fe1c4d8a60 <line:593:9, col:21> 'int' '='
|   |     |-DeclRefExpr 0x1fe1c4d8a08 <col:9> 'int' lvalue Var 0x1fe1c4d7d20 'realstyle' 'int'
|   |     `-ImplicitCastExpr 0x1fe1c4d8a48 <col:21> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1fe1c4d8a28 <col:21> 'int' lvalue ParmVar 0x1fe1c4d6f48 'style' 'int'
|   |-IfStmt 0x1fe1c4d95e0 <line:596:5, line:636:5>
|   | |-BinaryOperator 0x1fe1c4d8b20 <line:596:9, line:74:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x1fe1c4d8b08 <line:596:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4d8ac0 <col:9> 'int' lvalue ParmVar 0x1fe1c4d6f48 'style' 'int'
|   | | `-IntegerLiteral 0x1fe1c4d8ae0 <line:74:25> 'int' 0
|   | `-CompoundStmt 0x1fe1c4d95b0 <line:596:28, line:636:5>
|   |   |-BinaryOperator 0x1fe1c4d8bb0 <line:597:9, col:20> 'double' '='
|   |   | |-DeclRefExpr 0x1fe1c4d8b40 <col:9> 'double' lvalue Var 0x1fe1c4d7350 'tmpvalue' 'double'
|   |   | `-ImplicitCastExpr 0x1fe1c4d8b98 <col:20> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1fe1c4d8b78 <col:20> 'double' lvalue ParmVar 0x1fe1c4d6d48 'fvalue' 'double'
|   |   |-IfStmt 0x1fe1c4d8fc8 <line:599:9, line:608:9>
|   |   | |-BinaryOperator 0x1fe1c4d8c30 <line:599:13, col:23> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x1fe1c4d8c18 <col:13> 'double' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1fe1c4d8bd0 <col:13> 'double' lvalue ParmVar 0x1fe1c4d6d48 'fvalue' 'double'
|   |   | | `-FloatingLiteral 0x1fe1c4d8bf0 <col:23> 'double' 0.000000e+00
|   |   | `-CompoundStmt 0x1fe1c4d8fa8 <col:28, line:608:9>
|   |   |   |-WhileStmt 0x1fe1c4d8df8 <line:600:13, line:603:13>
|   |   |   | |-BinaryOperator 0x1fe1c4d8cd8 <line:600:20, col:31> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x1fe1c4d8ca8 <col:20> 'double' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1fe1c4d8c60 <col:20> 'double' lvalue Var 0x1fe1c4d7350 'tmpvalue' 'double'
|   |   |   | | `-ImplicitCastExpr 0x1fe1c4d8cc0 <col:31> 'double' <IntegralToFloating>
|   |   |   | |   `-IntegerLiteral 0x1fe1c4d8c80 <col:31> 'int' 1
|   |   |   | `-CompoundStmt 0x1fe1c4d8dd8 <col:34, line:603:13>
|   |   |   |   |-CompoundAssignOperator 0x1fe1c4d8d58 <line:601:17, col:29> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   |   |   | |-DeclRefExpr 0x1fe1c4d8cf8 <col:17> 'double' lvalue Var 0x1fe1c4d7350 'tmpvalue' 'double'
|   |   |   |   | `-ImplicitCastExpr 0x1fe1c4d8d40 <col:29> 'double' <IntegralToFloating>
|   |   |   |   |   `-IntegerLiteral 0x1fe1c4d8d18 <col:29> 'int' 10
|   |   |   |   `-UnaryOperator 0x1fe1c4d8dc0 <line:602:17, col:20> 'long' postfix '--'
|   |   |   |     `-DeclRefExpr 0x1fe1c4d8d88 <col:17> 'long' lvalue Var 0x1fe1c4d7a80 'exp' 'long'
|   |   |   `-WhileStmt 0x1fe1c4d8f90 <line:604:13, line:607:13>
|   |   |     |-BinaryOperator 0x1fe1c4d8e88 <line:604:20, col:31> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x1fe1c4d8e58 <col:20> 'double' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1fe1c4d8e10 <col:20> 'double' lvalue Var 0x1fe1c4d7350 'tmpvalue' 'double'
|   |   |     | `-ImplicitCastExpr 0x1fe1c4d8e70 <col:31> 'double' <IntegralToFloating>
|   |   |     |   `-IntegerLiteral 0x1fe1c4d8e30 <col:31> 'int' 10
|   |   |     `-CompoundStmt 0x1fe1c4d8f70 <col:35, line:607:13>
|   |   |       |-CompoundAssignOperator 0x1fe1c4d8f08 <line:605:17, col:29> 'double' '/=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   |       | |-DeclRefExpr 0x1fe1c4d8ea8 <col:17> 'double' lvalue Var 0x1fe1c4d7350 'tmpvalue' 'double'
|   |   |       | `-ImplicitCastExpr 0x1fe1c4d8ef0 <col:29> 'double' <IntegralToFloating>
|   |   |       |   `-IntegerLiteral 0x1fe1c4d8ec8 <col:29> 'int' 10
|   |   |       `-UnaryOperator 0x1fe1c4d8f58 <line:606:17, col:20> 'long' postfix '++'
|   |   |         `-DeclRefExpr 0x1fe1c4d8f38 <col:17> 'long' lvalue Var 0x1fe1c4d7a80 'exp' 'long'
|   |   |-IfStmt 0x1fe1c4d9488 <line:609:9, line:633:9>
|   |   | |-BinaryOperator 0x1fe1c4d9040 <line:609:13, line:76:25> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1fe1c4d9028 <line:609:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1fe1c4d8fe0 <col:13> 'int' lvalue ParmVar 0x1fe1c4d6f48 'style' 'int'
|   |   | | `-IntegerLiteral 0x1fe1c4d9000 <line:76:25> 'int' 2
|   |   | `-CompoundStmt 0x1fe1c4d9468 <line:609:32, line:633:9>
|   |   |   |-IfStmt 0x1fe1c4d9148 <line:614:13, line:615:23>
|   |   |   | |-BinaryOperator 0x1fe1c4d90c0 <line:614:17, col:24> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x1fe1c4d90a8 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1fe1c4d9060 <col:17> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   |   | | `-IntegerLiteral 0x1fe1c4d9080 <col:24> 'int' 0
|   |   |   | `-BinaryOperator 0x1fe1c4d9128 <line:615:17, col:23> 'int' '='
|   |   |   |   |-DeclRefExpr 0x1fe1c4d90e0 <col:17> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   |   |   `-IntegerLiteral 0x1fe1c4d9100 <col:23> 'int' 1
|   |   |   `-IfStmt 0x1fe1c4d9440 <line:617:13, line:632:13> has_else
|   |   |     |-BinaryOperator 0x1fe1c4d91c0 <line:617:17, line:74:25> 'int' '=='
|   |   |     | |-ImplicitCastExpr 0x1fe1c4d91a8 <line:617:17> 'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1fe1c4d9160 <col:17> 'int' lvalue Var 0x1fe1c4d7d20 'realstyle' 'int'
|   |   |     | `-IntegerLiteral 0x1fe1c4d9180 <line:74:25> 'int' 0
|   |   |     |-CompoundStmt 0x1fe1c4d93d0 <line:617:40, line:625:13>
|   |   |     | |-CompoundAssignOperator 0x1fe1c4d92b8 <line:618:17, col:32> 'int' '-=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   |     | | |-DeclRefExpr 0x1fe1c4d91e0 <col:17> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   |     | | `-ParenExpr 0x1fe1c4d9298 <col:24, col:32> 'long'
|   |   |     | |   `-BinaryOperator 0x1fe1c4d9278 <col:25, col:31> 'long' '+'
|   |   |     | |     |-ImplicitCastExpr 0x1fe1c4d9248 <col:25> 'long' <LValueToRValue>
|   |   |     | |     | `-DeclRefExpr 0x1fe1c4d9200 <col:25> 'long' lvalue Var 0x1fe1c4d7a80 'exp' 'long'
|   |   |     | |     `-ImplicitCastExpr 0x1fe1c4d9260 <col:31> 'long' <IntegralCast>
|   |   |     | |       `-IntegerLiteral 0x1fe1c4d9220 <col:31> 'int' 1
|   |   |     | `-IfStmt 0x1fe1c4d93b8 <line:619:17, line:624:17>
|   |   |     |   |-BinaryOperator 0x1fe1c4d9348 <line:619:21, col:27> 'int' '<'
|   |   |     |   | |-ImplicitCastExpr 0x1fe1c4d9330 <col:21> 'int' <LValueToRValue>
|   |   |     |   | | `-DeclRefExpr 0x1fe1c4d92e8 <col:21> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   |     |   | `-IntegerLiteral 0x1fe1c4d9308 <col:27> 'int' 0
|   |   |     |   `-CompoundStmt 0x1fe1c4d93a0 <col:30, line:624:17>
|   |   |     |     `-ReturnStmt 0x1fe1c4d9390 <line:623:21, col:28>
|   |   |     |       `-IntegerLiteral 0x1fe1c4d9368 <col:28> 'int' 0
|   |   |     `-CompoundStmt 0x1fe1c4d9428 <line:625:20, line:632:13>
|   |   |       `-UnaryOperator 0x1fe1c4d9410 <line:631:17, col:20> 'int' postfix '--'
|   |   |         `-DeclRefExpr 0x1fe1c4d93f0 <col:17> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   `-IfStmt 0x1fe1c4d9598 <line:634:9, line:635:22>
|   |     |-BinaryOperator 0x1fe1c4d9500 <line:634:13, line:75:25> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1fe1c4d94e8 <line:634:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1fe1c4d94a0 <col:13> 'int' lvalue Var 0x1fe1c4d7d20 'realstyle' 'int'
|   |     | `-IntegerLiteral 0x1fe1c4d94c0 <line:75:25> 'int' 1
|   |     `-BinaryOperator 0x1fe1c4d9578 <line:635:13, col:22> 'double' '='
|   |       |-DeclRefExpr 0x1fe1c4d9520 <col:13> 'double' lvalue ParmVar 0x1fe1c4d6d48 'fvalue' 'double'
|   |       `-ImplicitCastExpr 0x1fe1c4d9560 <col:22> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x1fe1c4d9540 <col:22> 'double' lvalue Var 0x1fe1c4d7350 'tmpvalue' 'double'
|   |-BinaryOperator 0x1fe1c4d96f0 <line:637:5, col:29> 'double' '='
|   | |-DeclRefExpr 0x1fe1c4d95f8 <col:5> 'double' lvalue Var 0x1fe1c4d72b8 'ufvalue' 'double'
|   | `-CallExpr 0x1fe1c4d96b0 <col:15, col:29> 'double'
|   |   |-ImplicitCastExpr 0x1fe1c4d9698 <col:15> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1fe1c4d9630 <col:15> 'double (double)' Function 0x1fe1c5942e0 'abs_val' 'double (double)'
|   |   `-ImplicitCastExpr 0x1fe1c4d96d8 <col:23> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1fe1c4d9650 <col:23> 'double' lvalue ParmVar 0x1fe1c4d6d48 'fvalue' 'double'
|   |-IfStmt 0x1fe1c4d9798 <line:638:5, line:641:5>
|   | |-OpaqueValueExpr 0x1fe1c4d9780 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1fe1c4d9768 <line:638:30, line:641:5>
|   |   `-ReturnStmt 0x1fe1c4d9758 <line:640:9, col:16>
|   |     `-IntegerLiteral 0x1fe1c4d9730 <col:16> 'int' 0
|   |-BinaryOperator 0x1fe1c4d9860 <line:642:5, col:30> 'unsigned long' '='
|   | |-DeclRefExpr 0x1fe1c4d97b0 <col:5> 'unsigned long' lvalue Var 0x1fe1c4d7b58 'intpart' 'unsigned long'
|   | `-CStyleCastExpr 0x1fe1c4d9838 <col:15, col:30> 'unsigned long' <FloatingToIntegral>
|   |   `-ImplicitCastExpr 0x1fe1c4d9820 <col:30> 'double' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x1fe1c4d97e8 <col:30> 'double' lvalue Var 0x1fe1c4d72b8 'ufvalue' 'double'
|   |-IfStmt 0x1fe1c4d9968 <line:648:5, line:649:15>
|   | |-BinaryOperator 0x1fe1c4d98e0 <line:648:9, col:15> 'int' '>'
|   | | |-ImplicitCastExpr 0x1fe1c4d98c8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4d9880 <col:9> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   | | `-IntegerLiteral 0x1fe1c4d98a0 <col:15> 'int' 9
|   | `-BinaryOperator 0x1fe1c4d9948 <line:649:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c4d9900 <col:9> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   `-IntegerLiteral 0x1fe1c4d9920 <col:15> 'int' 9
|   |-BinaryOperator 0x1fe1c4d9af0 <line:655:5, col:31> 'unsigned long' '='
|   | |-DeclRefExpr 0x1fe1c4d9980 <col:5> 'unsigned long' lvalue Var 0x1fe1c4d7c88 'max10' 'unsigned long'
|   | `-ImplicitCastExpr 0x1fe1c4d9ad8 <col:13, col:31> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x1fe1c4d9ab0 <col:13, col:31> 'long'
|   |     |-ImplicitCastExpr 0x1fe1c4d9a98 <col:13> 'long (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1fe1c4d99b8 <col:13> 'long (double)' Function 0x1fe1c594b80 'roundv' 'long (double)'
|   |     `-CallExpr 0x1fe1c4d9a30 <col:20, col:30> 'double'
|   |       |-ImplicitCastExpr 0x1fe1c4d9a18 <col:20> 'double (*)(int)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1fe1c4d99d8 <col:20> 'double (int)' Function 0x1fe1c594730 'pow_10' 'double (int)'
|   |       `-ImplicitCastExpr 0x1fe1c4d9a58 <col:27> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1fe1c4d99f8 <col:27> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |-BinaryOperator 0x1fe1c4d9d40 <line:656:5, col:56> 'unsigned long' '='
|   | |-DeclRefExpr 0x1fe1c4d9b10 <col:5> 'unsigned long' lvalue Var 0x1fe1c4d7bf0 'fracpart' 'unsigned long'
|   | `-ImplicitCastExpr 0x1fe1c4d9d28 <col:16, col:56> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x1fe1c4d9d00 <col:16, col:56> 'long'
|   |     |-ImplicitCastExpr 0x1fe1c4d9ce8 <col:16> 'long (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1fe1c4d9b48 <col:16> 'long (double)' Function 0x1fe1c594b80 'roundv' 'long (double)'
|   |     `-BinaryOperator 0x1fe1c4d9cc8 <col:23, col:55> 'double' '*'
|   |       |-CallExpr 0x1fe1c4d9bc0 <col:23, col:33> 'double'
|   |       | |-ImplicitCastExpr 0x1fe1c4d9ba8 <col:23> 'double (*)(int)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x1fe1c4d9b68 <col:23> 'double (int)' Function 0x1fe1c594730 'pow_10' 'double (int)'
|   |       | `-ImplicitCastExpr 0x1fe1c4d9be8 <col:30> 'int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1fe1c4d9b88 <col:30> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |       `-ParenExpr 0x1fe1c4d9ca8 <col:37, col:55> 'double'
|   |         `-BinaryOperator 0x1fe1c4d9c88 <col:38, col:48> 'double' '-'
|   |           |-ImplicitCastExpr 0x1fe1c4d9c40 <col:38> 'double' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1fe1c4d9c00 <col:38> 'double' lvalue Var 0x1fe1c4d72b8 'ufvalue' 'double'
|   |           `-ImplicitCastExpr 0x1fe1c4d9c70 <col:48> 'double' <IntegralToFloating>
|   |             `-ImplicitCastExpr 0x1fe1c4d9c58 <col:48> 'unsigned long' <LValueToRValue>
|   |               `-DeclRefExpr 0x1fe1c4d9c20 <col:48> 'unsigned long' lvalue Var 0x1fe1c4d7b58 'intpart' 'unsigned long'
|   |-IfStmt 0x1fe1c4d9ed0 <line:658:5, line:661:5>
|   | |-BinaryOperator 0x1fe1c4d9dd0 <line:658:9, col:21> 'int' '>='
|   | | |-ImplicitCastExpr 0x1fe1c4d9da0 <col:9> 'unsigned long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4d9d60 <col:9> 'unsigned long' lvalue Var 0x1fe1c4d7bf0 'fracpart' 'unsigned long'
|   | | `-ImplicitCastExpr 0x1fe1c4d9db8 <col:21> 'unsigned long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1fe1c4d9d80 <col:21> 'unsigned long' lvalue Var 0x1fe1c4d7c88 'max10' 'unsigned long'
|   | `-CompoundStmt 0x1fe1c4d9eb0 <col:28, line:661:5>
|   |   |-UnaryOperator 0x1fe1c4d9e10 <line:659:9, col:16> 'unsigned long' postfix '++'
|   |   | `-DeclRefExpr 0x1fe1c4d9df0 <col:9> 'unsigned long' lvalue Var 0x1fe1c4d7b58 'intpart' 'unsigned long'
|   |   `-CompoundAssignOperator 0x1fe1c4d9e80 <line:660:9, col:21> 'unsigned long' '-=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   |     |-DeclRefExpr 0x1fe1c4d9e28 <col:9> 'unsigned long' lvalue Var 0x1fe1c4d7bf0 'fracpart' 'unsigned long'
|   |     `-ImplicitCastExpr 0x1fe1c4d9e68 <col:21> 'unsigned long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1fe1c4d9e48 <col:21> 'unsigned long' lvalue Var 0x1fe1c4d7c88 'max10' 'unsigned long'
|   |-DoStmt 0x1fe1c4da3a0 <line:664:5, line:667:57>
|   | |-CompoundStmt 0x1fe1c4da210 <line:664:8, line:667:5>
|   | | |-BinaryOperator 0x1fe1c4da0f8 <line:665:9, col:55> 'char' '='
|   | | | |-ArraySubscriptExpr 0x1fe1c4d9f88 <col:9, col:26> 'char' lvalue
|   | | | | |-ImplicitCastExpr 0x1fe1c4d9f70 <col:9> 'char *' <ArrayToPointerDecay>
|   | | | | | `-DeclRefExpr 0x1fe1c4d9ee8 <col:9> 'char [20]' lvalue Var 0x1fe1c4d7468 'iconvert' 'char [20]'
|   | | | | `-UnaryOperator 0x1fe1c4d9f58 <col:18, col:24> 'int' postfix '++'
|   | | | |   `-DeclRefExpr 0x1fe1c4d9f20 <col:18> 'int' lvalue Var 0x1fe1c4d76c0 'iplace' 'int'
|   | | | `-ImplicitCastExpr 0x1fe1c4da0e0 <col:30, col:55> 'char' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x1fe1c4da0c0 <col:30, col:55> 'char' lvalue
|   | | |     |-ImplicitCastExpr 0x1fe1c4da0a8 <col:30> 'char *' <ArrayToPointerDecay>
|   | | |     | `-StringLiteral 0x1fe1c4d9fe8 <col:30> 'char [11]' lvalue "0123456789"
|   | | |     `-BinaryOperator 0x1fe1c4da088 <col:43, col:53> 'unsigned long' '%'
|   | | |       |-ImplicitCastExpr 0x1fe1c4da058 <col:43> 'unsigned long' <LValueToRValue>
|   | | |       | `-DeclRefExpr 0x1fe1c4da010 <col:43> 'unsigned long' lvalue Var 0x1fe1c4d7b58 'intpart' 'unsigned long'
|   | | |       `-ImplicitCastExpr 0x1fe1c4da070 <col:53> 'unsigned long' <IntegralCast>
|   | | |         `-IntegerLiteral 0x1fe1c4da030 <col:53> 'int' 10
|   | | `-BinaryOperator 0x1fe1c4da1f0 <line:666:9, col:32> 'unsigned long' '='
|   | |   |-DeclRefExpr 0x1fe1c4da118 <col:9> 'unsigned long' lvalue Var 0x1fe1c4d7b58 'intpart' 'unsigned long'
|   | |   `-ParenExpr 0x1fe1c4da1d0 <col:19, col:32> 'unsigned long'
|   | |     `-BinaryOperator 0x1fe1c4da1b0 <col:20, col:30> 'unsigned long' '/'
|   | |       |-ImplicitCastExpr 0x1fe1c4da180 <col:20> 'unsigned long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1fe1c4da138 <col:20> 'unsigned long' lvalue Var 0x1fe1c4d7b58 'intpart' 'unsigned long'
|   | |       `-ImplicitCastExpr 0x1fe1c4da198 <col:30> 'unsigned long' <IntegralCast>
|   | |         `-IntegerLiteral 0x1fe1c4da158 <col:30> 'int' 10
|   | `-BinaryOperator 0x1fe1c4da380 <line:667:14, col:56> 'int' '&&'
|   |   |-ImplicitCastExpr 0x1fe1c4da368 <col:14> 'unsigned long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c4da230 <col:14> 'unsigned long' lvalue Var 0x1fe1c4d7b58 'intpart' 'unsigned long'
|   |   `-ParenExpr 0x1fe1c4da348 <col:25, col:56> 'int'
|   |     `-BinaryOperator 0x1fe1c4da328 <col:26, col:55> 'int' '<'
|   |       |-ImplicitCastExpr 0x1fe1c4da310 <col:26> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1fe1c4da250 <col:26> 'int' lvalue Var 0x1fe1c4d76c0 'iplace' 'int'
|   |       `-CStyleCastExpr 0x1fe1c4da2e8 <col:35, col:55> 'int' <IntegralCast>
|   |         `-UnaryExprOrTypeTraitExpr 0x1fe1c4da2b0 <col:40, col:55> 'unsigned long long' sizeof
|   |           `-ParenExpr 0x1fe1c4da290 <col:46, col:55> 'char [20]' lvalue
|   |             `-DeclRefExpr 0x1fe1c4da270 <col:47> 'char [20]' lvalue Var 0x1fe1c4d7468 'iconvert' 'char [20]' non_odr_use_unevaluated
|   |-IfStmt 0x1fe1c4da4c8 <line:668:5, line:669:15>
|   | |-BinaryOperator 0x1fe1c4da470 <line:668:9, col:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x1fe1c4da458 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1fe1c4da440 <col:9> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1fe1c4da3c0 <col:9> 'int' lvalue Var 0x1fe1c4d76c0 'iplace' 'int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1fe1c4da420 <col:19, col:34> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1fe1c4da400 <col:25, col:34> 'char [20]' lvalue
|   | |     `-DeclRefExpr 0x1fe1c4da3e0 <col:26> 'char [20]' lvalue Var 0x1fe1c4d7468 'iconvert' 'char [20]' non_odr_use_unevaluated
|   | `-UnaryOperator 0x1fe1c4da4b0 <line:669:9, col:15> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1fe1c4da490 <col:9> 'int' lvalue Var 0x1fe1c4d76c0 'iplace' 'int'
|   |-BinaryOperator 0x1fe1c4da5b0 <line:670:5, col:24> 'char' '='
|   | |-ArraySubscriptExpr 0x1fe1c4da550 <col:5, col:20> 'char' lvalue
|   | | |-ImplicitCastExpr 0x1fe1c4da520 <col:5> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1fe1c4da4e0 <col:5> 'char [20]' lvalue Var 0x1fe1c4d7468 'iconvert' 'char [20]'
|   | | `-ImplicitCastExpr 0x1fe1c4da538 <col:14> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1fe1c4da500 <col:14> 'int' lvalue Var 0x1fe1c4d76c0 'iplace' 'int'
|   | `-ImplicitCastExpr 0x1fe1c4da598 <col:24> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x1fe1c4da570 <col:24> 'int' 0
|   |-WhileStmt 0x1fe1c4dade8 <line:673:5, line:684:5>
|   | |-BinaryOperator 0x1fe1c4da658 <line:673:12, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c4da628 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4da5d0 <col:12> 'int' lvalue Var 0x1fe1c4d7780 'fplace' 'int'
|   | | `-ImplicitCastExpr 0x1fe1c4da640 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1fe1c4da608 <col:21> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   | `-CompoundStmt 0x1fe1c4dadc0 <col:26, line:684:5>
|   |   |-IfStmt 0x1fe1c4daac8 <line:674:9, line:681:9>
|   |   | |-BinaryOperator 0x1fe1c4da8b0 <line:674:13, col:68> 'int' '&&'
|   |   | | |-BinaryOperator 0x1fe1c4da778 <col:13, col:44> 'int' '&&'
|   |   | | | |-BinaryOperator 0x1fe1c4da6d8 <col:13, line:76:25> 'int' '=='
|   |   | | | | |-ImplicitCastExpr 0x1fe1c4da6c0 <line:674:13> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x1fe1c4da678 <col:13> 'int' lvalue ParmVar 0x1fe1c4d6f48 'style' 'int'
|   |   | | | | `-IntegerLiteral 0x1fe1c4da698 <line:76:25> 'int' 2
|   |   | | | `-BinaryOperator 0x1fe1c4da758 <line:674:34, col:44> 'int' '=='
|   |   | | |   |-ImplicitCastExpr 0x1fe1c4da740 <col:34> 'int' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x1fe1c4da6f8 <col:34> 'int' lvalue Var 0x1fe1c4d7780 'fplace' 'int'
|   |   | | |   `-IntegerLiteral 0x1fe1c4da718 <col:44> 'int' 0
|   |   | | `-BinaryOperator 0x1fe1c4da890 <col:49, col:68> 'int' '=='
|   |   | |   |-ParenExpr 0x1fe1c4da830 <col:49, col:63> 'unsigned long'
|   |   | |   | `-BinaryOperator 0x1fe1c4da810 <col:50, col:61> 'unsigned long' '%'
|   |   | |   |   |-ImplicitCastExpr 0x1fe1c4da7e0 <col:50> 'unsigned long' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1fe1c4da798 <col:50> 'unsigned long' lvalue Var 0x1fe1c4d7bf0 'fracpart' 'unsigned long'
|   |   | |   |   `-ImplicitCastExpr 0x1fe1c4da7f8 <col:61> 'unsigned long' <IntegralCast>
|   |   | |   |     `-IntegerLiteral 0x1fe1c4da7b8 <col:61> 'int' 10
|   |   | |   `-ImplicitCastExpr 0x1fe1c4da878 <col:68> 'unsigned long' <IntegralCast>
|   |   | |     `-IntegerLiteral 0x1fe1c4da850 <col:68> 'int' 0
|   |   | `-CompoundStmt 0x1fe1c4daa98 <col:71, line:681:9>
|   |   |   |-UnaryOperator 0x1fe1c4da8f0 <line:676:13, col:16> 'int' postfix '--'
|   |   |   | `-DeclRefExpr 0x1fe1c4da8d0 <col:13> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   |   |-BinaryOperator 0x1fe1c4da9c0 <line:677:13, col:35> 'unsigned long' '='
|   |   |   | |-DeclRefExpr 0x1fe1c4da908 <col:13> 'unsigned long' lvalue Var 0x1fe1c4d7bf0 'fracpart' 'unsigned long'
|   |   |   | `-BinaryOperator 0x1fe1c4da9a0 <col:24, col:35> 'unsigned long' '/'
|   |   |   |   |-ImplicitCastExpr 0x1fe1c4da970 <col:24> 'unsigned long' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x1fe1c4da928 <col:24> 'unsigned long' lvalue Var 0x1fe1c4d7bf0 'fracpart' 'unsigned long'
|   |   |   |   `-ImplicitCastExpr 0x1fe1c4da988 <col:35> 'unsigned long' <IntegralCast>
|   |   |   |     `-IntegerLiteral 0x1fe1c4da948 <col:35> 'int' 10
|   |   |   |-IfStmt 0x1fe1c4daa78 <line:678:13, line:679:17>
|   |   |   | |-BinaryOperator 0x1fe1c4daa50 <line:678:17, col:26> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x1fe1c4daa20 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1fe1c4da9e0 <col:17> 'int' lvalue Var 0x1fe1c4d7780 'fplace' 'int'
|   |   |   | | `-ImplicitCastExpr 0x1fe1c4daa38 <col:26> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1fe1c4daa00 <col:26> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   |   | `-ContinueStmt 0x1fe1c4daa70 <line:679:17>
|   |   |   `-BreakStmt 0x1fe1c4daa90 <line:680:13>
|   |   |-BinaryOperator 0x1fe1c4daca8 <line:682:9, col:56> 'char' '='
|   |   | |-ArraySubscriptExpr 0x1fe1c4dab68 <col:9, col:26> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x1fe1c4dab50 <col:9> 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x1fe1c4daae0 <col:9> 'char [20]' lvalue Var 0x1fe1c4d7548 'fconvert' 'char [20]'
|   |   | | `-UnaryOperator 0x1fe1c4dab38 <col:18, col:24> 'int' postfix '++'
|   |   | |   `-DeclRefExpr 0x1fe1c4dab18 <col:18> 'int' lvalue Var 0x1fe1c4d7780 'fplace' 'int'
|   |   | `-ImplicitCastExpr 0x1fe1c4dac90 <col:30, col:56> 'char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1fe1c4dac70 <col:30, col:56> 'char' lvalue
|   |   |     |-ImplicitCastExpr 0x1fe1c4dac48 <col:30> 'char *' <ArrayToPointerDecay>
|   |   |     | `-StringLiteral 0x1fe1c4dab88 <col:30> 'char [11]' lvalue "0123456789"
|   |   |     `-BinaryOperator 0x1fe1c4dac28 <col:43, col:54> 'unsigned long' '%'
|   |   |       |-ImplicitCastExpr 0x1fe1c4dabf8 <col:43> 'unsigned long' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x1fe1c4dabb0 <col:43> 'unsigned long' lvalue Var 0x1fe1c4d7bf0 'fracpart' 'unsigned long'
|   |   |       `-ImplicitCastExpr 0x1fe1c4dac10 <col:54> 'unsigned long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1fe1c4dabd0 <col:54> 'int' 10
|   |   `-BinaryOperator 0x1fe1c4dada0 <line:683:9, col:34> 'unsigned long' '='
|   |     |-DeclRefExpr 0x1fe1c4dacc8 <col:9> 'unsigned long' lvalue Var 0x1fe1c4d7bf0 'fracpart' 'unsigned long'
|   |     `-ParenExpr 0x1fe1c4dad80 <col:20, col:34> 'unsigned long'
|   |       `-BinaryOperator 0x1fe1c4dad60 <col:21, col:32> 'unsigned long' '/'
|   |         |-ImplicitCastExpr 0x1fe1c4dad30 <col:21> 'unsigned long' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1fe1c4dace8 <col:21> 'unsigned long' lvalue Var 0x1fe1c4d7bf0 'fracpart' 'unsigned long'
|   |         `-ImplicitCastExpr 0x1fe1c4dad48 <col:32> 'unsigned long' <IntegralCast>
|   |           `-IntegerLiteral 0x1fe1c4dad08 <col:32> 'int' 10
|   |-IfStmt 0x1fe1c4daf08 <line:686:5, line:687:15>
|   | |-BinaryOperator 0x1fe1c4daeb0 <line:686:9, col:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x1fe1c4dae98 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1fe1c4dae80 <col:9> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1fe1c4dae00 <col:9> 'int' lvalue Var 0x1fe1c4d7780 'fplace' 'int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1fe1c4dae60 <col:19, col:34> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1fe1c4dae40 <col:25, col:34> 'char [20]' lvalue
|   | |     `-DeclRefExpr 0x1fe1c4dae20 <col:26> 'char [20]' lvalue Var 0x1fe1c4d7548 'fconvert' 'char [20]' non_odr_use_unevaluated
|   | `-UnaryOperator 0x1fe1c4daef0 <line:687:9, col:15> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1fe1c4daed0 <col:9> 'int' lvalue Var 0x1fe1c4d7780 'fplace' 'int'
|   |-BinaryOperator 0x1fe1c4daff0 <line:688:5, col:24> 'char' '='
|   | |-ArraySubscriptExpr 0x1fe1c4daf90 <col:5, col:20> 'char' lvalue
|   | | |-ImplicitCastExpr 0x1fe1c4daf60 <col:5> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1fe1c4daf20 <col:5> 'char [20]' lvalue Var 0x1fe1c4d7548 'fconvert' 'char [20]'
|   | | `-ImplicitCastExpr 0x1fe1c4daf78 <col:14> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1fe1c4daf40 <col:14> 'int' lvalue Var 0x1fe1c4d7780 'fplace' 'int'
|   | `-ImplicitCastExpr 0x1fe1c4dafd8 <col:24> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x1fe1c4dafb0 <col:24> 'int' 0
|   |-IfStmt 0x1fe1c4dba48 <line:691:5, line:708:5>
|   | |-BinaryOperator 0x1fe1c4db070 <line:691:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1fe1c4db058 <line:691:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4db010 <col:9> 'int' lvalue Var 0x1fe1c4d7d20 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1fe1c4db030 <line:75:25> 'int' 1
|   | `-CompoundStmt 0x1fe1c4dba10 <line:691:32, line:708:5>
|   |   |-DeclStmt 0x1fe1c4db110 <line:692:9, col:19>
|   |   | `-VarDecl 0x1fe1c4db0a8 <col:9, col:13> col:13 used tmpexp 'int'
|   |   |-IfStmt 0x1fe1c4db310 <line:693:9, line:696:22> has_else
|   |   | |-BinaryOperator 0x1fe1c4db1a0 <line:693:13, col:19> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1fe1c4db170 <col:13> 'long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1fe1c4db128 <col:13> 'long' lvalue Var 0x1fe1c4d7a80 'exp' 'long'
|   |   | | `-ImplicitCastExpr 0x1fe1c4db188 <col:19> 'long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1fe1c4db148 <col:19> 'int' 0
|   |   | |-BinaryOperator 0x1fe1c4db260 <line:694:13, col:23> 'int' '='
|   |   | | |-DeclRefExpr 0x1fe1c4db1c0 <col:13> 'int' lvalue Var 0x1fe1c4db0a8 'tmpexp' 'int'
|   |   | | `-ImplicitCastExpr 0x1fe1c4db248 <col:22, col:23> 'int' <IntegralCast>
|   |   | |   `-UnaryOperator 0x1fe1c4db230 <col:22, col:23> 'long' prefix '-'
|   |   | |     `-ImplicitCastExpr 0x1fe1c4db218 <col:23> 'long' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1fe1c4db1f8 <col:23> 'long' lvalue Var 0x1fe1c4d7a80 'exp' 'long'
|   |   | `-BinaryOperator 0x1fe1c4db2f0 <line:696:13, col:22> 'int' '='
|   |   |   |-DeclRefExpr 0x1fe1c4db280 <col:13> 'int' lvalue Var 0x1fe1c4db0a8 'tmpexp' 'int'
|   |   |   `-ImplicitCastExpr 0x1fe1c4db2d8 <col:22> 'int' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x1fe1c4db2c0 <col:22> 'long' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1fe1c4db2a0 <col:22> 'long' lvalue Var 0x1fe1c4d7a80 'exp' 'long'
|   |   |-DoStmt 0x1fe1c4db7a8 <line:698:9, line:701:62>
|   |   | |-CompoundStmt 0x1fe1c4db5f0 <line:698:12, line:701:9>
|   |   | | |-BinaryOperator 0x1fe1c4db4f0 <line:699:13, col:58> 'char' '='
|   |   | | | |-ArraySubscriptExpr 0x1fe1c4db3d8 <col:13, col:30> 'char' lvalue
|   |   | | | | |-ImplicitCastExpr 0x1fe1c4db3c0 <col:13> 'char *' <ArrayToPointerDecay>
|   |   | | | | | `-DeclRefExpr 0x1fe1c4db338 <col:13> 'char [20]' lvalue Var 0x1fe1c4d7628 'econvert' 'char [20]'
|   |   | | | | `-UnaryOperator 0x1fe1c4db3a8 <col:22, col:28> 'int' postfix '++'
|   |   | | | |   `-DeclRefExpr 0x1fe1c4db370 <col:22> 'int' lvalue Var 0x1fe1c4d7840 'eplace' 'int'
|   |   | | | `-ImplicitCastExpr 0x1fe1c4db4d8 <col:34, col:58> 'char' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x1fe1c4db4b8 <col:34, col:58> 'char' lvalue
|   |   | | |     |-ImplicitCastExpr 0x1fe1c4db4a0 <col:34> 'char *' <ArrayToPointerDecay>
|   |   | | |     | `-StringLiteral 0x1fe1c4db3f8 <col:34> 'char [11]' lvalue "0123456789"
|   |   | | |     `-BinaryOperator 0x1fe1c4db480 <col:47, col:56> 'int' '%'
|   |   | | |       |-ImplicitCastExpr 0x1fe1c4db468 <col:47> 'int' <LValueToRValue>
|   |   | | |       | `-DeclRefExpr 0x1fe1c4db420 <col:47> 'int' lvalue Var 0x1fe1c4db0a8 'tmpexp' 'int'
|   |   | | |       `-IntegerLiteral 0x1fe1c4db440 <col:56> 'int' 10
|   |   | | `-BinaryOperator 0x1fe1c4db5d0 <line:700:13, col:34> 'int' '='
|   |   | |   |-DeclRefExpr 0x1fe1c4db510 <col:13> 'int' lvalue Var 0x1fe1c4db0a8 'tmpexp' 'int'
|   |   | |   `-ParenExpr 0x1fe1c4db5b0 <col:22, col:34> 'int'
|   |   | |     `-BinaryOperator 0x1fe1c4db590 <col:23, col:32> 'int' '/'
|   |   | |       |-ImplicitCastExpr 0x1fe1c4db578 <col:23> 'int' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x1fe1c4db530 <col:23> 'int' lvalue Var 0x1fe1c4db0a8 'tmpexp' 'int'
|   |   | |       `-IntegerLiteral 0x1fe1c4db550 <col:32> 'int' 10
|   |   | `-BinaryOperator 0x1fe1c4db788 <line:701:18, col:61> 'int' '&&'
|   |   |   |-BinaryOperator 0x1fe1c4db670 <col:18, col:27> 'int' '>'
|   |   |   | |-ImplicitCastExpr 0x1fe1c4db658 <col:18> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1fe1c4db610 <col:18> 'int' lvalue Var 0x1fe1c4db0a8 'tmpexp' 'int'
|   |   |   | `-IntegerLiteral 0x1fe1c4db630 <col:27> 'int' 0
|   |   |   `-BinaryOperator 0x1fe1c4db768 <col:32, col:61> 'int' '<'
|   |   |     |-ImplicitCastExpr 0x1fe1c4db750 <col:32> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1fe1c4db690 <col:32> 'int' lvalue Var 0x1fe1c4d7840 'eplace' 'int'
|   |   |     `-CStyleCastExpr 0x1fe1c4db728 <col:41, col:61> 'int' <IntegralCast>
|   |   |       `-UnaryExprOrTypeTraitExpr 0x1fe1c4db6f0 <col:46, col:61> 'unsigned long long' sizeof
|   |   |         `-ParenExpr 0x1fe1c4db6d0 <col:52, col:61> 'char [20]' lvalue
|   |   |           `-DeclRefExpr 0x1fe1c4db6b0 <col:53> 'char [20]' lvalue Var 0x1fe1c4d7628 'econvert' 'char [20]' non_odr_use_unevaluated
|   |   |-IfStmt 0x1fe1c4db880 <line:703:9, line:704:20>
|   |   | |-BinaryOperator 0x1fe1c4db828 <line:703:13, col:22> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x1fe1c4db810 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1fe1c4db7c8 <col:13> 'int' lvalue Var 0x1fe1c4db0a8 'tmpexp' 'int'
|   |   | | `-IntegerLiteral 0x1fe1c4db7e8 <col:22> 'int' 0
|   |   | `-ReturnStmt 0x1fe1c4db870 <line:704:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c4db848 <col:20> 'int' 0
|   |   `-IfStmt 0x1fe1c4db9f8 <line:706:9, line:707:34>
|   |     |-BinaryOperator 0x1fe1c4db8f8 <line:706:13, col:23> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1fe1c4db8e0 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1fe1c4db898 <col:13> 'int' lvalue Var 0x1fe1c4d7840 'eplace' 'int'
|   |     | `-IntegerLiteral 0x1fe1c4db8b8 <col:23> 'int' 1
|   |     `-BinaryOperator 0x1fe1c4db9d8 <line:707:13, col:34> 'char' '='
|   |       |-ArraySubscriptExpr 0x1fe1c4db988 <col:13, col:30> 'char' lvalue
|   |       | |-ImplicitCastExpr 0x1fe1c4db970 <col:13> 'char *' <ArrayToPointerDecay>
|   |       | | `-DeclRefExpr 0x1fe1c4db918 <col:13> 'char [20]' lvalue Var 0x1fe1c4d7628 'econvert' 'char [20]'
|   |       | `-UnaryOperator 0x1fe1c4db958 <col:22, col:28> 'int' postfix '++'
|   |       |   `-DeclRefExpr 0x1fe1c4db938 <col:22> 'int' lvalue Var 0x1fe1c4d7840 'eplace' 'int'
|   |       `-ImplicitCastExpr 0x1fe1c4db9c0 <col:34> 'char' <IntegralCast>
|   |         `-CharacterLiteral 0x1fe1c4db9a8 <col:34> 'int' 48
|   |-BinaryOperator 0x1fe1c4dbdd8 <line:714:5, col:75> 'int' '='
|   | |-DeclRefExpr 0x1fe1c4dba60 <col:5> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   | `-BinaryOperator 0x1fe1c4dbdb8 <col:14, col:75> 'int' '-'
|   |   |-BinaryOperator 0x1fe1c4dbca0 <col:14, col:51> 'int' '-'
|   |   | |-BinaryOperator 0x1fe1c4dbb60 <col:14, col:29> 'int' '-'
|   |   | | |-BinaryOperator 0x1fe1c4dbb08 <col:14, col:20> 'int' '-'
|   |   | | | |-ImplicitCastExpr 0x1fe1c4dbad8 <col:14> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1fe1c4dba98 <col:14> 'int' lvalue ParmVar 0x1fe1c4d6dc8 'min' 'int'
|   |   | | | `-ImplicitCastExpr 0x1fe1c4dbaf0 <col:20> 'int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1fe1c4dbab8 <col:20> 'int' lvalue Var 0x1fe1c4d76c0 'iplace' 'int'
|   |   | | `-ImplicitCastExpr 0x1fe1c4dbb48 <col:29> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1fe1c4dbb28 <col:29> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   | `-ParenExpr 0x1fe1c4dbc80 <col:35, col:51> 'int'
|   |   |   `-ConditionalOperator 0x1fe1c4dbc50 <col:36, col:50> 'int'
|   |   |     |-BinaryOperator 0x1fe1c4dbbe0 <col:36, col:42> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x1fe1c4dbbc8 <col:36> 'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1fe1c4dbb80 <col:36> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   |     | `-IntegerLiteral 0x1fe1c4dbba0 <col:42> 'int' 0
|   |   |     |-IntegerLiteral 0x1fe1c4dbc00 <col:46> 'int' 1
|   |   |     `-IntegerLiteral 0x1fe1c4dbc28 <col:50> 'int' 0
|   |   `-ParenExpr 0x1fe1c4dbd98 <col:55, col:75> 'int'
|   |     `-ConditionalOperator 0x1fe1c4dbd68 <col:56, col:74> 'int'
|   |       |-ImplicitCastExpr 0x1fe1c4dbd50 <col:56, col:66> 'int' <LValueToRValue>
|   |       | `-ParenExpr 0x1fe1c4dbce0 <col:56, col:66> 'int' lvalue
|   |       |   `-DeclRefExpr 0x1fe1c4dbcc0 <col:57> 'int' lvalue Var 0x1fe1c4d71f8 'signvalue' 'int'
|   |       |-IntegerLiteral 0x1fe1c4dbd00 <col:70> 'int' 1
|   |       `-IntegerLiteral 0x1fe1c4dbd28 <col:74> 'int' 0
|   |-IfStmt 0x1fe1c4dbf48 <line:716:5, line:717:23>
|   | |-BinaryOperator 0x1fe1c4dbe58 <line:716:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1fe1c4dbe40 <line:716:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4dbdf8 <col:9> 'int' lvalue Var 0x1fe1c4d7d20 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1fe1c4dbe18 <line:75:25> 'int' 1
|   | `-CompoundAssignOperator 0x1fe1c4dbf18 <line:717:9, col:23> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x1fe1c4dbe78 <col:9> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   |   `-BinaryOperator 0x1fe1c4dbef8 <col:19, col:23> 'int' '+'
|   |     |-IntegerLiteral 0x1fe1c4dbe98 <col:19> 'int' 2
|   |     `-ImplicitCastExpr 0x1fe1c4dbee0 <col:23> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1fe1c4dbec0 <col:23> 'int' lvalue Var 0x1fe1c4d7840 'eplace' 'int'
|   |-BinaryOperator 0x1fe1c4dc028 <line:718:5, col:21> 'int' '='
|   | |-DeclRefExpr 0x1fe1c4dbf60 <col:5> 'int' lvalue Var 0x1fe1c4d79c0 'zpadlen' 'int'
|   | `-BinaryOperator 0x1fe1c4dc008 <col:15, col:21> 'int' '-'
|   |   |-ImplicitCastExpr 0x1fe1c4dbfd8 <col:15> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c4dbf98 <col:15> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   |   `-ImplicitCastExpr 0x1fe1c4dbff0 <col:21> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1fe1c4dbfb8 <col:21> 'int' lvalue Var 0x1fe1c4d7780 'fplace' 'int'
|   |-IfStmt 0x1fe1c4dc130 <line:719:5, line:720:19>
|   | |-BinaryOperator 0x1fe1c4dc0a8 <line:719:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c4dc090 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4dc048 <col:9> 'int' lvalue Var 0x1fe1c4d79c0 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1fe1c4dc068 <col:19> 'int' 0
|   | `-BinaryOperator 0x1fe1c4dc110 <line:720:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c4dc0c8 <col:9> 'int' lvalue Var 0x1fe1c4d79c0 'zpadlen' 'int'
|   |   `-IntegerLiteral 0x1fe1c4dc0e8 <col:19> 'int' 0
|   |-IfStmt 0x1fe1c4dc230 <line:721:5, line:722:18>
|   | |-BinaryOperator 0x1fe1c4dc1a8 <line:721:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c4dc190 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4dc148 <col:9> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   | | `-IntegerLiteral 0x1fe1c4dc168 <col:18> 'int' 0
|   | `-BinaryOperator 0x1fe1c4dc210 <line:722:9, col:18> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c4dc1c8 <col:9> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   |   `-IntegerLiteral 0x1fe1c4dc1e8 <col:18> 'int' 0
|   |-IfStmt 0x1fe1c4dc3c0 <line:723:5, line:724:19>
|   | |-BinaryOperator 0x1fe1c4dc310 <line:723:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1fe1c4dc2f8 <line:723:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4dc248 <col:9> 'int' lvalue ParmVar 0x1fe1c4d6ec8 'flags' 'int'
|   | | `-ParenExpr 0x1fe1c4dc2d8 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1fe1c4dc2b8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1fe1c4dc268 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1fe1c4dc290 <col:31> 'int' 0
|   | `-BinaryOperator 0x1fe1c4dc3a0 <line:724:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1fe1c4dc330 <col:9> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   |   `-UnaryOperator 0x1fe1c4dc388 <col:18, col:19> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1fe1c4dc370 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1fe1c4dc350 <col:19> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   |-IfStmt 0x1fe1c4dcba8 <line:726:5, line:738:5>
|   | |-BinaryOperator 0x1fe1c4dc580 <line:726:9, col:43> 'int' '&&'
|   | | |-ParenExpr 0x1fe1c4dc4c0 <col:9, col:27> 'int'
|   | | | `-BinaryOperator 0x1fe1c4dc4a0 <col:10, line:61:32> 'int' '&'
|   | | |   |-ImplicitCastExpr 0x1fe1c4dc488 <line:726:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1fe1c4dc3d8 <col:10> 'int' lvalue ParmVar 0x1fe1c4d6ec8 'flags' 'int'
|   | | |   `-ParenExpr 0x1fe1c4dc468 <line:61:25, col:32> 'int'
|   | | |     `-BinaryOperator 0x1fe1c4dc448 <col:26, col:31> 'int' '<<'
|   | | |       |-IntegerLiteral 0x1fe1c4dc3f8 <col:26> 'int' 1
|   | | |       `-IntegerLiteral 0x1fe1c4dc420 <col:31> 'int' 4
|   | | `-ParenExpr 0x1fe1c4dc560 <line:726:32, col:43> 'int'
|   | |   `-BinaryOperator 0x1fe1c4dc540 <col:33, col:42> 'int' '>'
|   | |     |-ImplicitCastExpr 0x1fe1c4dc528 <col:33> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1fe1c4dc4e0 <col:33> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   | |     `-IntegerLiteral 0x1fe1c4dc500 <col:42> 'int' 0
|   | `-CompoundStmt 0x1fe1c4dcb88 <col:46, line:738:5>
|   |   |-IfStmt 0x1fe1c4dc8a0 <line:727:9, line:732:9>
|   |   | |-ImplicitCastExpr 0x1fe1c4dc5c0 <line:727:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1fe1c4dc5a0 <col:13> 'int' lvalue Var 0x1fe1c4d71f8 'signvalue' 'int'
|   |   | `-CompoundStmt 0x1fe1c4dc878 <col:24, line:732:9>
|   |   |   |-IfStmt 0x1fe1c4dc7c0 <line:728:13, line:729:24>
|   |   |   | |-UnaryOperator 0x1fe1c4dc770 <line:728:17, col:73> 'int' prefix '!' cannot overflow
|   |   |   | | `-CallExpr 0x1fe1c4dc6b0 <col:18, col:73> 'int'
|   |   |   | |   |-ImplicitCastExpr 0x1fe1c4dc698 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x1fe1c4dc5d8 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |   | |   |-ImplicitCastExpr 0x1fe1c4dc6f8 <col:30> 'char **' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1fe1c4dc5f8 <col:30> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |   |   | |   |-ImplicitCastExpr 0x1fe1c4dc710 <col:39> 'char **' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1fe1c4dc618 <col:39> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |   |   | |   |-ImplicitCastExpr 0x1fe1c4dc728 <col:47> 'size_t *' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1fe1c4dc638 <col:47> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |   |   | |   |-ImplicitCastExpr 0x1fe1c4dc740 <col:56> 'size_t *' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1fe1c4dc658 <col:56> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |   |   | |   `-ImplicitCastExpr 0x1fe1c4dc758 <col:64> 'int' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x1fe1c4dc678 <col:64> 'int' lvalue Var 0x1fe1c4d71f8 'signvalue' 'int'
|   |   |   | `-ReturnStmt 0x1fe1c4dc7b0 <line:729:17, col:24>
|   |   |   |   `-IntegerLiteral 0x1fe1c4dc788 <col:24> 'int' 0
|   |   |   |-UnaryOperator 0x1fe1c4dc7f8 <line:730:13, col:15> 'int' prefix '--'
|   |   |   | `-DeclRefExpr 0x1fe1c4dc7d8 <col:15> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   |   |   `-BinaryOperator 0x1fe1c4dc858 <line:731:13, col:25> 'int' '='
|   |   |     |-DeclRefExpr 0x1fe1c4dc810 <col:13> 'int' lvalue Var 0x1fe1c4d71f8 'signvalue' 'int'
|   |   |     `-IntegerLiteral 0x1fe1c4dc830 <col:25> 'int' 0
|   |   `-WhileStmt 0x1fe1c4dcb70 <line:733:9, line:737:9>
|   |     |-BinaryOperator 0x1fe1c4dc918 <line:733:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1fe1c4dc900 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1fe1c4dc8b8 <col:16> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   |     | `-IntegerLiteral 0x1fe1c4dc8d8 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1fe1c4dcb50 <col:28, line:737:9>
|   |       |-IfStmt 0x1fe1c4dcb00 <line:734:13, line:735:24>
|   |       | |-UnaryOperator 0x1fe1c4dcab0 <line:734:17, col:67> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x1fe1c4dca08 <col:18, col:67> 'int'
|   |       | |   |-ImplicitCastExpr 0x1fe1c4dc9f0 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1fe1c4dc938 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       | |   |-ImplicitCastExpr 0x1fe1c4dca50 <col:30> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1fe1c4dc958 <col:30> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1fe1c4dca68 <col:39> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1fe1c4dc978 <col:39> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1fe1c4dca80 <col:47> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1fe1c4dc998 <col:47> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |       | |   |-ImplicitCastExpr 0x1fe1c4dca98 <col:56> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1fe1c4dc9b8 <col:56> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |       | |   `-CharacterLiteral 0x1fe1c4dc9d8 <col:64> 'int' 48
|   |       | `-ReturnStmt 0x1fe1c4dcaf0 <line:735:17, col:24>
|   |       |   `-IntegerLiteral 0x1fe1c4dcac8 <col:24> 'int' 0
|   |       `-UnaryOperator 0x1fe1c4dcb38 <line:736:13, col:15> 'int' prefix '--'
|   |         `-DeclRefExpr 0x1fe1c4dcb18 <col:15> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   |-WhileStmt 0x1fe1c4dce98 <line:739:5, line:743:5>
|   | |-BinaryOperator 0x1fe1c4dcc20 <line:739:12, col:21> 'int' '>'
|   | | |-ImplicitCastExpr 0x1fe1c4dcc08 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4dcbc0 <col:12> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   | | `-IntegerLiteral 0x1fe1c4dcbe0 <col:21> 'int' 0
|   | `-CompoundStmt 0x1fe1c4dce78 <col:24, line:743:5>
|   |   |-IfStmt 0x1fe1c4dce28 <line:740:9, line:741:20>
|   |   | |-UnaryOperator 0x1fe1c4dcdd8 <line:740:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c4dcd30 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dcd18 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dcc40 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dcd78 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dcc80 <col:26> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dcd90 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dcca0 <col:35> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dcda8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dccc0 <col:43> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dcdc0 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dcce0 <col:52> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1fe1c4dcd00 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1fe1c4dce18 <line:741:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c4dcdf0 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1fe1c4dce60 <line:742:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1fe1c4dce40 <col:11> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   |-IfStmt 0x1fe1c4dd0f0 <line:744:5, line:745:16>
|   | |-BinaryOperator 0x1fe1c4dd098 <line:744:9, col:78> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1fe1c4dd080 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4dceb0 <col:9> 'int' lvalue Var 0x1fe1c4d71f8 'signvalue' 'int'
|   | | `-UnaryOperator 0x1fe1c4dd068 <col:22, col:78> 'int' prefix '!' cannot overflow
|   | |   `-CallExpr 0x1fe1c4dcfa8 <col:23, col:78> 'int'
|   | |     |-ImplicitCastExpr 0x1fe1c4dcf90 <col:23> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x1fe1c4dced0 <col:23> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   | |     |-ImplicitCastExpr 0x1fe1c4dcff0 <col:35> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1fe1c4dcef0 <col:35> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   | |     |-ImplicitCastExpr 0x1fe1c4dd008 <col:44> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1fe1c4dcf10 <col:44> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   | |     |-ImplicitCastExpr 0x1fe1c4dd020 <col:52> 'size_t *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1fe1c4dcf30 <col:52> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   | |     |-ImplicitCastExpr 0x1fe1c4dd038 <col:61> 'size_t *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1fe1c4dcf50 <col:61> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   | |     `-ImplicitCastExpr 0x1fe1c4dd050 <col:69> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1fe1c4dcf70 <col:69> 'int' lvalue Var 0x1fe1c4d71f8 'signvalue' 'int'
|   | `-ReturnStmt 0x1fe1c4dd0e0 <line:745:9, col:16>
|   |   `-IntegerLiteral 0x1fe1c4dd0b8 <col:16> 'int' 0
|   |-WhileStmt 0x1fe1c4dd428 <line:747:5, line:750:5>
|   | |-BinaryOperator 0x1fe1c4dd168 <line:747:12, col:21> 'int' '>'
|   | | |-ImplicitCastExpr 0x1fe1c4dd150 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4dd108 <col:12> 'int' lvalue Var 0x1fe1c4d76c0 'iplace' 'int'
|   | | `-IntegerLiteral 0x1fe1c4dd128 <col:21> 'int' 0
|   | `-CompoundStmt 0x1fe1c4dd410 <col:24, line:750:5>
|   |   `-IfStmt 0x1fe1c4dd3f8 <line:748:9, line:749:20>
|   |     |-UnaryOperator 0x1fe1c4dd3a8 <line:748:13, col:78> 'int' prefix '!' cannot overflow
|   |     | `-CallExpr 0x1fe1c4dd2d0 <col:14, col:78> 'int'
|   |     |   |-ImplicitCastExpr 0x1fe1c4dd2b8 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x1fe1c4dd188 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |     |   |-ImplicitCastExpr 0x1fe1c4dd318 <col:26> 'char **' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1fe1c4dd1a8 <col:26> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |     |   |-ImplicitCastExpr 0x1fe1c4dd330 <col:35> 'char **' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1fe1c4dd1c8 <col:35> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |     |   |-ImplicitCastExpr 0x1fe1c4dd348 <col:43> 'size_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1fe1c4dd1e8 <col:43> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |     |   |-ImplicitCastExpr 0x1fe1c4dd360 <col:52> 'size_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1fe1c4dd208 <col:52> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |     |   `-ImplicitCastExpr 0x1fe1c4dd390 <col:60, col:77> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x1fe1c4dd378 <col:60, col:77> 'char' <LValueToRValue>
|   |     |       `-ArraySubscriptExpr 0x1fe1c4dd298 <col:60, col:77> 'char' lvalue
|   |     |         |-ImplicitCastExpr 0x1fe1c4dd280 <col:60> 'char *' <ArrayToPointerDecay>
|   |     |         | `-DeclRefExpr 0x1fe1c4dd228 <col:60> 'char [20]' lvalue Var 0x1fe1c4d7468 'iconvert' 'char [20]'
|   |     |         `-UnaryOperator 0x1fe1c4dd268 <col:69, col:71> 'int' prefix '--'
|   |     |           `-DeclRefExpr 0x1fe1c4dd248 <col:71> 'int' lvalue Var 0x1fe1c4d76c0 'iplace' 'int'
|   |     `-ReturnStmt 0x1fe1c4dd3e8 <line:749:13, col:20>
|   |       `-IntegerLiteral 0x1fe1c4dd3c0 <col:20> 'int' 0
|   |-IfStmt 0x1fe1c4ddb20 <line:756:5, line:765:5>
|   | |-BinaryOperator 0x1fe1c4dd5c8 <line:756:9, col:37> 'int' '||'
|   | | |-BinaryOperator 0x1fe1c4dd4a0 <col:9, col:15> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1fe1c4dd488 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1fe1c4dd440 <col:9> 'int' lvalue ParmVar 0x1fe1c4d6e48 'max' 'int'
|   | | | `-IntegerLiteral 0x1fe1c4dd460 <col:15> 'int' 0
|   | | `-ParenExpr 0x1fe1c4dd5a8 <col:20, col:37> 'int'
|   | |   `-BinaryOperator 0x1fe1c4dd588 <col:21, line:59:32> 'int' '&'
|   | |     |-ImplicitCastExpr 0x1fe1c4dd570 <line:756:21> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1fe1c4dd4c0 <col:21> 'int' lvalue ParmVar 0x1fe1c4d6ec8 'flags' 'int'
|   | |     `-ParenExpr 0x1fe1c4dd550 <line:59:25, col:32> 'int'
|   | |       `-BinaryOperator 0x1fe1c4dd530 <col:26, col:31> 'int' '<<'
|   | |         |-IntegerLiteral 0x1fe1c4dd4e0 <col:26> 'int' 1
|   | |         `-IntegerLiteral 0x1fe1c4dd508 <col:31> 'int' 3
|   | `-CompoundStmt 0x1fe1c4ddb00 <line:756:40, line:765:5>
|   |   |-IfStmt 0x1fe1c4dd7b0 <line:757:9, line:758:20>
|   |   | |-UnaryOperator 0x1fe1c4dd760 <line:757:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c4dd6b8 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dd6a0 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dd5e8 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dd700 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dd608 <col:26> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dd718 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dd628 <col:35> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dd730 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dd648 <col:43> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dd748 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dd668 <col:52> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1fe1c4dd688 <col:60> 'int' 46
|   |   | `-ReturnStmt 0x1fe1c4dd7a0 <line:758:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c4dd778 <col:20> 'int' 0
|   |   `-WhileStmt 0x1fe1c4ddae8 <line:760:9, line:764:9>
|   |     |-BinaryOperator 0x1fe1c4dd828 <line:760:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1fe1c4dd810 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1fe1c4dd7c8 <col:16> 'int' lvalue Var 0x1fe1c4d7780 'fplace' 'int'
|   |     | `-IntegerLiteral 0x1fe1c4dd7e8 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1fe1c4ddad0 <col:28, line:764:9>
|   |       `-IfStmt 0x1fe1c4ddab8 <line:761:13, line:763:24>
|   |         |-UnaryOperator 0x1fe1c4dda68 <line:761:16, line:762:47> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x1fe1c4dd990 <line:761:17, line:762:47> 'int'
|   |         |   |-ImplicitCastExpr 0x1fe1c4dd978 <line:761:17> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1fe1c4dd848 <col:17> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |         |   |-ImplicitCastExpr 0x1fe1c4dd9d8 <col:29> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1fe1c4dd868 <col:29> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1fe1c4dd9f0 <col:38> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1fe1c4dd888 <col:38> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1fe1c4dda08 <col:46> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1fe1c4dd8a8 <col:46> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |         |   |-ImplicitCastExpr 0x1fe1c4dda20 <col:55> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1fe1c4dd8c8 <col:55> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |         |   `-ImplicitCastExpr 0x1fe1c4dda50 <line:762:29, col:46> 'int' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x1fe1c4dda38 <col:29, col:46> 'char' <LValueToRValue>
|   |         |       `-ArraySubscriptExpr 0x1fe1c4dd958 <col:29, col:46> 'char' lvalue
|   |         |         |-ImplicitCastExpr 0x1fe1c4dd940 <col:29> 'char *' <ArrayToPointerDecay>
|   |         |         | `-DeclRefExpr 0x1fe1c4dd8e8 <col:29> 'char [20]' lvalue Var 0x1fe1c4d7548 'fconvert' 'char [20]'
|   |         |         `-UnaryOperator 0x1fe1c4dd928 <col:38, col:40> 'int' prefix '--'
|   |         |           `-DeclRefExpr 0x1fe1c4dd908 <col:40> 'int' lvalue Var 0x1fe1c4d7780 'fplace' 'int'
|   |         `-ReturnStmt 0x1fe1c4ddaa8 <line:763:17, col:24>
|   |           `-IntegerLiteral 0x1fe1c4dda80 <col:24> 'int' 0
|   |-WhileStmt 0x1fe1c4dddf0 <line:766:5, line:770:5>
|   | |-BinaryOperator 0x1fe1c4ddb98 <line:766:12, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1fe1c4ddb80 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4ddb38 <col:12> 'int' lvalue Var 0x1fe1c4d79c0 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1fe1c4ddb58 <col:22> 'int' 0
|   | `-CompoundStmt 0x1fe1c4dddd0 <col:25, line:770:5>
|   |   |-IfStmt 0x1fe1c4ddd80 <line:767:9, line:768:20>
|   |   | |-UnaryOperator 0x1fe1c4ddd30 <line:767:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c4ddc88 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4ddc70 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c4ddbb8 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4ddcd0 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4ddbd8 <col:26> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4ddce8 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4ddbf8 <col:35> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4ddd00 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4ddc18 <col:43> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4ddd18 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4ddc38 <col:52> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1fe1c4ddc58 <col:60> 'int' 48
|   |   | `-ReturnStmt 0x1fe1c4ddd70 <line:768:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c4ddd48 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1fe1c4dddb8 <line:769:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1fe1c4ddd98 <col:11> 'int' lvalue Var 0x1fe1c4d79c0 'zpadlen' 'int'
|   |-IfStmt 0x1fe1c4debc0 <line:771:5, line:792:5>
|   | |-BinaryOperator 0x1fe1c4dde68 <line:771:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1fe1c4dde50 <line:771:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4dde08 <col:9> 'int' lvalue Var 0x1fe1c4d7d20 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1fe1c4dde28 <line:75:25> 'int' 1
|   | `-CompoundStmt 0x1fe1c4deb88 <line:771:32, line:792:5>
|   |   |-DeclStmt 0x1fe1c4ddf00 <line:772:9, col:17>
|   |   | `-VarDecl 0x1fe1c4dde98 <col:9, col:14> col:14 used ech 'char'
|   |   |-IfStmt 0x1fe1c4de160 <line:774:9, line:777:19> has_else
|   |   | |-BinaryOperator 0x1fe1c4de048 <line:774:13, col:34> 'int' '=='
|   |   | | |-ParenExpr 0x1fe1c4de000 <col:13, col:29> 'int'
|   |   | | | `-BinaryOperator 0x1fe1c4ddfe0 <col:14, line:63:32> 'int' '&'
|   |   | | |   |-ImplicitCastExpr 0x1fe1c4ddfc8 <line:774:14> 'int' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x1fe1c4ddf18 <col:14> 'int' lvalue ParmVar 0x1fe1c4d6ec8 'flags' 'int'
|   |   | | |   `-ParenExpr 0x1fe1c4ddfa8 <line:63:25, col:32> 'int'
|   |   | | |     `-BinaryOperator 0x1fe1c4ddf88 <col:26, col:31> 'int' '<<'
|   |   | | |       |-IntegerLiteral 0x1fe1c4ddf38 <col:26> 'int' 1
|   |   | | |       `-IntegerLiteral 0x1fe1c4ddf60 <col:31> 'int' 5
|   |   | | `-IntegerLiteral 0x1fe1c4de020 <line:774:34> 'int' 0
|   |   | |-BinaryOperator 0x1fe1c4de0d0 <line:775:13, col:19> 'char' '='
|   |   | | |-DeclRefExpr 0x1fe1c4de068 <col:13> 'char' lvalue Var 0x1fe1c4dde98 'ech' 'char'
|   |   | | `-ImplicitCastExpr 0x1fe1c4de0b8 <col:19> 'char' <IntegralCast>
|   |   | |   `-CharacterLiteral 0x1fe1c4de0a0 <col:19> 'int' 101
|   |   | `-BinaryOperator 0x1fe1c4de140 <line:777:13, col:19> 'char' '='
|   |   |   |-DeclRefExpr 0x1fe1c4de0f0 <col:13> 'char' lvalue Var 0x1fe1c4dde98 'ech' 'char'
|   |   |   `-ImplicitCastExpr 0x1fe1c4de128 <col:19> 'char' <IntegralCast>
|   |   |     `-CharacterLiteral 0x1fe1c4de110 <col:19> 'int' 69
|   |   |-IfStmt 0x1fe1c4de388 <line:778:9, line:779:24>
|   |   | |-UnaryOperator 0x1fe1c4de338 <line:778:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c4de260 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4de248 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c4de188 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4de2a8 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4de1a8 <col:26> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4de2c0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4de1c8 <col:35> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4de2d8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4de1e8 <col:43> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4de2f0 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4de208 <col:52> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1fe1c4de320 <col:60> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1fe1c4de308 <col:60> 'char' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1fe1c4de228 <col:60> 'char' lvalue Var 0x1fe1c4dde98 'ech' 'char'
|   |   | `-ReturnStmt 0x1fe1c4de378 <line:779:17, col:24>
|   |   |   `-IntegerLiteral 0x1fe1c4de350 <col:24> 'int' 0
|   |   |-IfStmt 0x1fe1c4de828 <line:780:9, line:786:9> has_else
|   |   | |-BinaryOperator 0x1fe1c4de418 <line:780:13, col:19> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1fe1c4de3e8 <col:13> 'long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1fe1c4de3a0 <col:13> 'long' lvalue Var 0x1fe1c4d7a80 'exp' 'long'
|   |   | | `-ImplicitCastExpr 0x1fe1c4de400 <col:19> 'long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1fe1c4de3c0 <col:19> 'int' 0
|   |   | |-CompoundStmt 0x1fe1c4de618 <col:22, line:783:9>
|   |   | | `-IfStmt 0x1fe1c4de600 <line:781:13, line:782:28>
|   |   | |   |-UnaryOperator 0x1fe1c4de5b0 <line:781:17, col:67> 'int' prefix '!' cannot overflow
|   |   | |   | `-CallExpr 0x1fe1c4de508 <col:18, col:67> 'int'
|   |   | |   |   |-ImplicitCastExpr 0x1fe1c4de4f0 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   |   | `-DeclRefExpr 0x1fe1c4de438 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |   |-ImplicitCastExpr 0x1fe1c4de550 <col:30> 'char **' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1fe1c4de458 <col:30> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |   | |   |   |-ImplicitCastExpr 0x1fe1c4de568 <col:39> 'char **' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1fe1c4de478 <col:39> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |   | |   |   |-ImplicitCastExpr 0x1fe1c4de580 <col:47> 'size_t *' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1fe1c4de498 <col:47> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |   | |   |   |-ImplicitCastExpr 0x1fe1c4de598 <col:56> 'size_t *' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1fe1c4de4b8 <col:56> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |   | |   |   `-CharacterLiteral 0x1fe1c4de4d8 <col:64> 'int' 45
|   |   | |   `-ReturnStmt 0x1fe1c4de5f0 <line:782:21, col:28>
|   |   | |     `-IntegerLiteral 0x1fe1c4de5c8 <col:28> 'int' 0
|   |   | `-CompoundStmt 0x1fe1c4de810 <line:783:16, line:786:9>
|   |   |   `-IfStmt 0x1fe1c4de7f8 <line:784:13, line:785:28>
|   |   |     |-UnaryOperator 0x1fe1c4de7a8 <line:784:17, col:67> 'int' prefix '!' cannot overflow
|   |   |     | `-CallExpr 0x1fe1c4de700 <col:18, col:67> 'int'
|   |   |     |   |-ImplicitCastExpr 0x1fe1c4de6e8 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1fe1c4de630 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |     |   |-ImplicitCastExpr 0x1fe1c4de748 <col:30> 'char **' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1fe1c4de650 <col:30> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |   |     |   |-ImplicitCastExpr 0x1fe1c4de760 <col:39> 'char **' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1fe1c4de670 <col:39> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |   |     |   |-ImplicitCastExpr 0x1fe1c4de778 <col:47> 'size_t *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1fe1c4de690 <col:47> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |   |     |   |-ImplicitCastExpr 0x1fe1c4de790 <col:56> 'size_t *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1fe1c4de6b0 <col:56> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |   |     |   `-CharacterLiteral 0x1fe1c4de6d0 <col:64> 'int' 43
|   |   |     `-ReturnStmt 0x1fe1c4de7e8 <line:785:21, col:28>
|   |   |       `-IntegerLiteral 0x1fe1c4de7c0 <col:28> 'int' 0
|   |   `-WhileStmt 0x1fe1c4deb70 <line:787:9, line:791:9>
|   |     |-BinaryOperator 0x1fe1c4de8b0 <line:787:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1fe1c4de898 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1fe1c4de850 <col:16> 'int' lvalue Var 0x1fe1c4d7840 'eplace' 'int'
|   |     | `-IntegerLiteral 0x1fe1c4de870 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1fe1c4deb58 <col:28, line:791:9>
|   |       `-IfStmt 0x1fe1c4deb40 <line:788:13, line:790:24>
|   |         |-UnaryOperator 0x1fe1c4deaf0 <line:788:17, line:789:48> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x1fe1c4dea18 <line:788:18, line:789:48> 'int'
|   |         |   |-ImplicitCastExpr 0x1fe1c4dea00 <line:788:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1fe1c4de8d0 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |         |   |-ImplicitCastExpr 0x1fe1c4dea60 <col:30> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1fe1c4de8f0 <col:30> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1fe1c4dea78 <col:39> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1fe1c4de910 <col:39> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1fe1c4dea90 <col:47> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1fe1c4de930 <col:47> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |         |   |-ImplicitCastExpr 0x1fe1c4deaa8 <col:56> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1fe1c4de950 <col:56> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |         |   `-ImplicitCastExpr 0x1fe1c4dead8 <line:789:30, col:47> 'int' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x1fe1c4deac0 <col:30, col:47> 'char' <LValueToRValue>
|   |         |       `-ArraySubscriptExpr 0x1fe1c4de9e0 <col:30, col:47> 'char' lvalue
|   |         |         |-ImplicitCastExpr 0x1fe1c4de9c8 <col:30> 'char *' <ArrayToPointerDecay>
|   |         |         | `-DeclRefExpr 0x1fe1c4de970 <col:30> 'char [20]' lvalue Var 0x1fe1c4d7628 'econvert' 'char [20]'
|   |         |         `-UnaryOperator 0x1fe1c4de9b0 <col:39, col:41> 'int' prefix '--'
|   |         |           `-DeclRefExpr 0x1fe1c4de990 <col:41> 'int' lvalue Var 0x1fe1c4d7840 'eplace' 'int'
|   |         `-ReturnStmt 0x1fe1c4deb30 <line:790:17, col:24>
|   |           `-IntegerLiteral 0x1fe1c4deb08 <col:24> 'int' 0
|   |-WhileStmt 0x1fe1c4deea8 <line:794:5, line:798:5>
|   | |-BinaryOperator 0x1fe1c4dec38 <line:794:12, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c4dec20 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4debd8 <col:12> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   | | `-IntegerLiteral 0x1fe1c4debf8 <col:21> 'int' 0
|   | `-CompoundStmt 0x1fe1c4dee88 <col:24, line:798:5>
|   |   |-IfStmt 0x1fe1c4dee38 <line:795:9, line:796:20>
|   |   | |-UnaryOperator 0x1fe1c4dede8 <line:795:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1fe1c4ded40 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4ded28 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dec58 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1fe1c4b6dc0 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4ded88 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4dec90 <col:26> 'char **' lvalue ParmVar 0x1fe1c594ff8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4deda0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4decb0 <col:35> 'char **' lvalue ParmVar 0x1fe1c595078 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dedb8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4decd0 <col:43> 'size_t *' lvalue ParmVar 0x1fe1c4d6c50 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1fe1c4dedd0 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1fe1c4decf0 <col:52> 'size_t *' lvalue ParmVar 0x1fe1c4d6cc8 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1fe1c4ded10 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1fe1c4dee28 <line:796:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c4dee00 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1fe1c4dee70 <line:797:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1fe1c4dee50 <col:11> 'int' lvalue Var 0x1fe1c4d7900 'padlen' 'int'
|   `-ReturnStmt 0x1fe1c4deee8 <line:799:5, col:12>
|     `-IntegerLiteral 0x1fe1c4deec0 <col:12> 'int' 1
|-FunctionDecl 0x1fe1c4df3c8 prev 0x1fe1c4b6dc0 <line:804:1, line:845:1> line:805:1 used doapr_outch 'int (char **, char **, size_t *, size_t *, int)' static
| |-ParmVarDecl 0x1fe1c4df0a8 <col:13, col:20> col:20 used sbuffer 'char **'
| |-ParmVarDecl 0x1fe1c4df128 <line:806:13, col:20> col:20 used buffer 'char **'
| |-ParmVarDecl 0x1fe1c4df1a0 <col:28, col:36> col:36 used currlen 'size_t *'
| |-ParmVarDecl 0x1fe1c4df218 <col:45, col:53> col:53 used maxlen 'size_t *'
| |-ParmVarDecl 0x1fe1c4df298 <col:61, col:65> col:65 used c 'int'
| `-CompoundStmt 0x1fe1c4e1308 <line:807:1, line:845:1>
|   |-CallExpr 0x1fe1c4df820 <line:809:5, col:54> 'int'
|   | |-ImplicitCastExpr 0x1fe1c4df808 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1fe1c4df580 <col:5> 'int ()' Function 0x1fe1c4df4b8 'OPENSSL_assert' 'int ()'
|   | `-BinaryOperator 0x1fe1c4df7c0 <col:20, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '||'
|   |   |-BinaryOperator 0x1fe1c4df6a8 <.//openssl//file_jk/before\crypto\bio\b_print.c:809:20, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |   | |-ImplicitCastExpr 0x1fe1c4df678 <.//openssl//file_jk/before\crypto\bio\b_print.c:809:20, col:21> 'char *' <LValueToRValue>
|   |   | | `-UnaryOperator 0x1fe1c4df5d8 <col:20, col:21> 'char *' lvalue prefix '*' cannot overflow
|   |   | |   `-ImplicitCastExpr 0x1fe1c4df5c0 <col:21> 'char **' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x1fe1c4df5a0 <col:21> 'char **' lvalue ParmVar 0x1fe1c4df0a8 'sbuffer' 'char **'
|   |   | `-ImplicitCastExpr 0x1fe1c4df690 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |   |   `-ParenExpr 0x1fe1c4df658 <col:17, col:27> 'void *'
|   |   |     `-CStyleCastExpr 0x1fe1c4df630 <col:18, col:26> 'void *' <NullToPointer>
|   |   |       `-IntegerLiteral 0x1fe1c4df5f0 <col:26> 'int' 0
|   |   `-BinaryOperator 0x1fe1c4df7a0 <.//openssl//file_jk/before\crypto\bio\b_print.c:809:40, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |     |-ImplicitCastExpr 0x1fe1c4df770 <.//openssl//file_jk/before\crypto\bio\b_print.c:809:40> 'char **' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1fe1c4df6c8 <col:40> 'char **' lvalue ParmVar 0x1fe1c4df128 'buffer' 'char **'
|   |     `-ImplicitCastExpr 0x1fe1c4df788 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   |       `-ParenExpr 0x1fe1c4df750 <col:17, col:27> 'void *'
|   |         `-CStyleCastExpr 0x1fe1c4df728 <col:18, col:26> 'void *' <NullToPointer>
|   |           `-IntegerLiteral 0x1fe1c4df6e8 <col:26> 'int' 0
|   |-CallExpr 0x1fe1c4df970 <.//openssl//file_jk/before\crypto\bio\b_print.c:812:5, col:39> 'int'
|   | |-ImplicitCastExpr 0x1fe1c4df958 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1fe1c4df848 <col:5> 'int ()' Function 0x1fe1c4df4b8 'OPENSSL_assert' 'int ()'
|   | `-BinaryOperator 0x1fe1c4df938 <col:20, col:33> 'int' '<='
|   |   |-ImplicitCastExpr 0x1fe1c4df908 <col:20, col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-UnaryOperator 0x1fe1c4df8a0 <col:20, col:21> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   |   `-ImplicitCastExpr 0x1fe1c4df888 <col:21> 'size_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1fe1c4df868 <col:21> 'size_t *' lvalue ParmVar 0x1fe1c4df1a0 'currlen' 'size_t *'
|   |   `-ImplicitCastExpr 0x1fe1c4df920 <col:32, col:33> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1fe1c4df8f0 <col:32, col:33> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1fe1c4df8d8 <col:33> 'size_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1fe1c4df8b8 <col:33> 'size_t *' lvalue ParmVar 0x1fe1c4df218 'maxlen' 'size_t *'
|   |-IfStmt 0x1fe1c4e0d58 <line:814:5, line:835:5>
|   | |-BinaryOperator 0x1fe1c4dfaf0 <line:814:9, col:32> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1fe1c4dfad8 <col:9> 'char **' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1fe1c4df998 <col:9> 'char **' lvalue ParmVar 0x1fe1c4df128 'buffer' 'char **'
|   | | `-BinaryOperator 0x1fe1c4dfab8 <col:19, col:32> 'int' '=='
|   | |   |-ImplicitCastExpr 0x1fe1c4dfa88 <col:19, col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   | `-UnaryOperator 0x1fe1c4dfa20 <col:19, col:20> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |   |   `-ImplicitCastExpr 0x1fe1c4dfa08 <col:20> 'size_t *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1fe1c4df9e8 <col:20> 'size_t *' lvalue ParmVar 0x1fe1c4df1a0 'currlen' 'size_t *'
|   | |   `-ImplicitCastExpr 0x1fe1c4dfaa0 <col:31, col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   | |     `-UnaryOperator 0x1fe1c4dfa70 <col:31, col:32> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1fe1c4dfa58 <col:32> 'size_t *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1fe1c4dfa38 <col:32> 'size_t *' lvalue ParmVar 0x1fe1c4df218 'maxlen' 'size_t *'
|   | `-CompoundStmt 0x1fe1c4e0d30 <col:40, line:835:5>
|   |   |-IfStmt 0x1fe1c4dfbd8 <line:815:9, line:816:20>
|   |   | |-OpaqueValueExpr 0x1fe1c4dfbc0 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x1fe1c4dfbb0 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x1fe1c4dfb88 <col:20> 'int' 0
|   |   |-CompoundAssignOperator 0x1fe1c4dfc80 <line:818:9, line:802:21> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-UnaryOperator 0x1fe1c4dfc28 <line:818:9, col:10> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1fe1c4dfc10 <col:10> 'size_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1fe1c4dfbf0 <col:10> 'size_t *' lvalue ParmVar 0x1fe1c4df218 'maxlen' 'size_t *'
|   |   | `-ImplicitCastExpr 0x1fe1c4dfc68 <line:802:21> 'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1fe1c4dfc40 <col:21> 'int' 1024
|   |   `-IfStmt 0x1fe1c4e0d08 <line:819:9, line:834:9> has_else
|   |     |-BinaryOperator 0x1fe1c4dfdb8 <line:819:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1fe1c4dfd88 <.//openssl//file_jk/before\crypto\bio\b_print.c:819:13, col:14> 'char *' <LValueToRValue>
|   |     | | `-UnaryOperator 0x1fe1c4dfce8 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     | |   `-ImplicitCastExpr 0x1fe1c4dfcd0 <col:14> 'char **' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x1fe1c4dfcb0 <col:14> 'char **' lvalue ParmVar 0x1fe1c4df128 'buffer' 'char **'
|   |     | `-ImplicitCastExpr 0x1fe1c4dfda0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     |   `-ParenExpr 0x1fe1c4dfd68 <col:17, col:27> 'void *'
|   |     |     `-CStyleCastExpr 0x1fe1c4dfd40 <col:18, col:26> 'void *' <NullToPointer>
|   |     |       `-IntegerLiteral 0x1fe1c4dfd00 <col:26> 'int' 0
|   |     |-CompoundStmt 0x1fe1c4e0778 <.//openssl//file_jk/before\crypto\bio\b_print.c:819:30, line:828:9>
|   |     | |-BinaryOperator 0x1fe1c4dfff8 <line:820:13, col:45> 'char *' '='
|   |     | | |-UnaryOperator 0x1fe1c4dfe10 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     | | | `-ImplicitCastExpr 0x1fe1c4dfdf8 <col:14> 'char **' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x1fe1c4dfdd8 <col:14> 'char **' lvalue ParmVar 0x1fe1c4df128 'buffer' 'char **'
|   |     | | `-ImplicitCastExpr 0x1fe1c4dffe0 <col:23, col:45> 'char *' <IntegralToPointer>
|   |     | |   `-CallExpr 0x1fe1c4dffa0 <col:23, col:45> 'int'
|   |     | |     |-ImplicitCastExpr 0x1fe1c4dff88 <col:23> 'int (*)()' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x1fe1c4dff18 <col:23> 'int ()' Function 0x1fe1c4dfe50 'OPENSSL_malloc' 'int ()'
|   |     | |     `-ImplicitCastExpr 0x1fe1c4dffc8 <col:38, col:39> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       `-UnaryOperator 0x1fe1c4dff70 <col:38, col:39> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |         `-ImplicitCastExpr 0x1fe1c4dff58 <col:39> 'size_t *' <LValueToRValue>
|   |     | |           `-DeclRefExpr 0x1fe1c4dff38 <col:39> 'size_t *' lvalue ParmVar 0x1fe1c4df218 'maxlen' 'size_t *'
|   |     | |-IfStmt 0x1fe1c4e0178 <line:821:13, line:822:24>
|   |     | | |-BinaryOperator 0x1fe1c4e0120 <line:821:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |     | | | |-ImplicitCastExpr 0x1fe1c4e00f0 <.//openssl//file_jk/before\crypto\bio\b_print.c:821:17, col:18> 'char *' <LValueToRValue>
|   |     | | | | `-UnaryOperator 0x1fe1c4e0050 <col:17, col:18> 'char *' lvalue prefix '*' cannot overflow
|   |     | | | |   `-ImplicitCastExpr 0x1fe1c4e0038 <col:18> 'char **' <LValueToRValue>
|   |     | | | |     `-DeclRefExpr 0x1fe1c4e0018 <col:18> 'char **' lvalue ParmVar 0x1fe1c4df128 'buffer' 'char **'
|   |     | | | `-ImplicitCastExpr 0x1fe1c4e0108 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     | | |   `-ParenExpr 0x1fe1c4e00d0 <col:17, col:27> 'void *'
|   |     | | |     `-CStyleCastExpr 0x1fe1c4e00a8 <col:18, col:26> 'void *' <NullToPointer>
|   |     | | |       `-IntegerLiteral 0x1fe1c4e0068 <col:26> 'int' 0
|   |     | | `-ReturnStmt 0x1fe1c4e0168 <.//openssl//file_jk/before\crypto\bio\b_print.c:822:17, col:24>
|   |     | |   `-IntegerLiteral 0x1fe1c4e0140 <col:24> 'int' 0
|   |     | |-IfStmt 0x1fe1c4e0650 <line:823:13, line:826:13>
|   |     | | |-BinaryOperator 0x1fe1c4e0238 <line:823:17, col:28> 'int' '>'
|   |     | | | |-ImplicitCastExpr 0x1fe1c4e0208 <col:17, col:18> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | | `-UnaryOperator 0x1fe1c4e01c8 <col:17, col:18> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | | | |   `-ImplicitCastExpr 0x1fe1c4e01b0 <col:18> 'size_t *' <LValueToRValue>
|   |     | | | |     `-DeclRefExpr 0x1fe1c4e0190 <col:18> 'size_t *' lvalue ParmVar 0x1fe1c4df1a0 'currlen' 'size_t *'
|   |     | | | `-ImplicitCastExpr 0x1fe1c4e0220 <col:28> 'unsigned long long' <IntegralCast>
|   |     | | |   `-IntegerLiteral 0x1fe1c4e01e0 <col:28> 'int' 0
|   |     | | `-CompoundStmt 0x1fe1c4e0630 <col:31, line:826:13>
|   |     | |   |-CallExpr 0x1fe1c4e03b8 <line:824:17, col:48> 'int'
|   |     | |   | |-ImplicitCastExpr 0x1fe1c4e03a0 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |     | |   | | `-DeclRefExpr 0x1fe1c4e0258 <col:17> 'int ()' Function 0x1fe1c4df4b8 'OPENSSL_assert' 'int ()'
|   |     | |   | `-BinaryOperator 0x1fe1c4e0380 <col:32, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |     | |   |   |-ImplicitCastExpr 0x1fe1c4e0350 <.//openssl//file_jk/before\crypto\bio\b_print.c:824:32, col:33> 'char *' <LValueToRValue>
|   |     | |   |   | `-UnaryOperator 0x1fe1c4e02b0 <col:32, col:33> 'char *' lvalue prefix '*' cannot overflow
|   |     | |   |   |   `-ImplicitCastExpr 0x1fe1c4e0298 <col:33> 'char **' <LValueToRValue>
|   |     | |   |   |     `-DeclRefExpr 0x1fe1c4e0278 <col:33> 'char **' lvalue ParmVar 0x1fe1c4df0a8 'sbuffer' 'char **'
|   |     | |   |   `-ImplicitCastExpr 0x1fe1c4e0368 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     | |   |     `-ParenExpr 0x1fe1c4e0330 <col:17, col:27> 'void *'
|   |     | |   |       `-CStyleCastExpr 0x1fe1c4e0308 <col:18, col:26> 'void *' <NullToPointer>
|   |     | |   |         `-IntegerLiteral 0x1fe1c4e02c8 <col:26> 'int' 0
|   |     | |   `-CallExpr 0x1fe1c4e0580 <.//openssl//file_jk/before\crypto\bio\b_print.c:825:17, col:51> 'void *'
|   |     | |     |-ImplicitCastExpr 0x1fe1c4e0568 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x1fe1c4e03e0 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x1fe1c458448 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |     | |     |-ImplicitCastExpr 0x1fe1c4e05d0 <col:24, col:25> 'void *' <BitCast>
|   |     | |     | `-ImplicitCastExpr 0x1fe1c4e05b8 <col:24, col:25> 'char *' <LValueToRValue>
|   |     | |     |   `-UnaryOperator 0x1fe1c4e0438 <col:24, col:25> 'char *' lvalue prefix '*' cannot overflow
|   |     | |     |     `-ImplicitCastExpr 0x1fe1c4e0420 <col:25> 'char **' <LValueToRValue>
|   |     | |     |       `-DeclRefExpr 0x1fe1c4e0400 <col:25> 'char **' lvalue ParmVar 0x1fe1c4df128 'buffer' 'char **'
|   |     | |     |-ImplicitCastExpr 0x1fe1c4e0600 <col:33, col:34> 'const void *' <BitCast>
|   |     | |     | `-ImplicitCastExpr 0x1fe1c4e05e8 <col:33, col:34> 'char *' <LValueToRValue>
|   |     | |     |   `-UnaryOperator 0x1fe1c4e0488 <col:33, col:34> 'char *' lvalue prefix '*' cannot overflow
|   |     | |     |     `-ImplicitCastExpr 0x1fe1c4e0470 <col:34> 'char **' <LValueToRValue>
|   |     | |     |       `-DeclRefExpr 0x1fe1c4e0450 <col:34> 'char **' lvalue ParmVar 0x1fe1c4df0a8 'sbuffer' 'char **'
|   |     | |     `-ImplicitCastExpr 0x1fe1c4e0618 <col:43, col:44> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       `-UnaryOperator 0x1fe1c4e04d8 <col:43, col:44> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |         `-ImplicitCastExpr 0x1fe1c4e04c0 <col:44> 'size_t *' <LValueToRValue>
|   |     | |           `-DeclRefExpr 0x1fe1c4e04a0 <col:44> 'size_t *' lvalue ParmVar 0x1fe1c4df1a0 'currlen' 'size_t *'
|   |     | `-BinaryOperator 0x1fe1c4e0758 <line:827:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'char *' '='
|   |     |   |-UnaryOperator 0x1fe1c4e06a0 <.//openssl//file_jk/before\crypto\bio\b_print.c:827:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     |   | `-ImplicitCastExpr 0x1fe1c4e0688 <col:14> 'char **' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x1fe1c4e0668 <col:14> 'char **' lvalue ParmVar 0x1fe1c4df0a8 'sbuffer' 'char **'
|   |     |   `-ImplicitCastExpr 0x1fe1c4e0740 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     |     `-ParenExpr 0x1fe1c4e0720 <col:17, col:27> 'void *'
|   |     |       `-CStyleCastExpr 0x1fe1c4e06f8 <col:18, col:26> 'void *' <NullToPointer>
|   |     |         `-IntegerLiteral 0x1fe1c4e06b8 <col:26> 'int' 0
|   |     `-CompoundStmt 0x1fe1c4e0cd8 <.//openssl//file_jk/before\crypto\bio\b_print.c:828:16, line:834:9>
|   |       |-DeclStmt 0x1fe1c4e0828 <line:829:13, col:25>
|   |       | `-VarDecl 0x1fe1c4e07c0 <col:13, col:19> col:19 used tmpbuf 'char *'
|   |       |-BinaryOperator 0x1fe1c4e0ab8 <line:830:13, col:54> 'char *' '='
|   |       | |-DeclRefExpr 0x1fe1c4e0840 <col:13> 'char *' lvalue Var 0x1fe1c4e07c0 'tmpbuf' 'char *'
|   |       | `-ImplicitCastExpr 0x1fe1c4e0aa0 <col:22, col:54> 'char *' <IntegralToPointer>
|   |       |   `-CallExpr 0x1fe1c4e0a40 <col:22, col:54> 'int'
|   |       |     |-ImplicitCastExpr 0x1fe1c4e0a28 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |       |     | `-DeclRefExpr 0x1fe1c4e0968 <col:22> 'int ()' Function 0x1fe1c4e08a0 'OPENSSL_realloc' 'int ()'
|   |       |     |-ImplicitCastExpr 0x1fe1c4e0a70 <col:38, col:39> 'char *' <LValueToRValue>
|   |       |     | `-UnaryOperator 0x1fe1c4e09c0 <col:38, col:39> 'char *' lvalue prefix '*' cannot overflow
|   |       |     |   `-ImplicitCastExpr 0x1fe1c4e09a8 <col:39> 'char **' <LValueToRValue>
|   |       |     |     `-DeclRefExpr 0x1fe1c4e0988 <col:39> 'char **' lvalue ParmVar 0x1fe1c4df128 'buffer' 'char **'
|   |       |     `-ImplicitCastExpr 0x1fe1c4e0a88 <col:47, col:48> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |       `-UnaryOperator 0x1fe1c4e0a10 <col:47, col:48> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |         `-ImplicitCastExpr 0x1fe1c4e09f8 <col:48> 'size_t *' <LValueToRValue>
|   |       |           `-DeclRefExpr 0x1fe1c4e09d8 <col:48> 'size_t *' lvalue ParmVar 0x1fe1c4df218 'maxlen' 'size_t *'
|   |       |-IfStmt 0x1fe1c4e0c08 <line:831:13, line:832:24>
|   |       | |-BinaryOperator 0x1fe1c4e0bb0 <line:831:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |       | | |-ImplicitCastExpr 0x1fe1c4e0b80 <.//openssl//file_jk/before\crypto\bio\b_print.c:831:17> 'char *' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x1fe1c4e0ad8 <col:17> 'char *' lvalue Var 0x1fe1c4e07c0 'tmpbuf' 'char *'
|   |       | | `-ImplicitCastExpr 0x1fe1c4e0b98 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |       | |   `-ParenExpr 0x1fe1c4e0b60 <col:17, col:27> 'void *'
|   |       | |     `-CStyleCastExpr 0x1fe1c4e0b38 <col:18, col:26> 'void *' <NullToPointer>
|   |       | |       `-IntegerLiteral 0x1fe1c4e0af8 <col:26> 'int' 0
|   |       | `-ReturnStmt 0x1fe1c4e0bf8 <.//openssl//file_jk/before\crypto\bio\b_print.c:832:17, col:24>
|   |       |   `-IntegerLiteral 0x1fe1c4e0bd0 <col:24> 'int' 0
|   |       `-BinaryOperator 0x1fe1c4e0cb8 <line:833:13, col:23> 'char *' '='
|   |         |-UnaryOperator 0x1fe1c4e0c58 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |         | `-ImplicitCastExpr 0x1fe1c4e0c40 <col:14> 'char **' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x1fe1c4e0c20 <col:14> 'char **' lvalue ParmVar 0x1fe1c4df128 'buffer' 'char **'
|   |         `-ImplicitCastExpr 0x1fe1c4e0ca0 <col:23> 'char *' <LValueToRValue>
|   |           `-DeclRefExpr 0x1fe1c4e0c70 <col:23> 'char *' lvalue Var 0x1fe1c4e07c0 'tmpbuf' 'char *'
|   |-IfStmt 0x1fe1c4e1288 <line:837:5, line:842:5>
|   | |-BinaryOperator 0x1fe1c4e0e40 <line:837:9, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1fe1c4e0e10 <col:9, col:10> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-UnaryOperator 0x1fe1c4e0da8 <col:9, col:10> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | |   `-ImplicitCastExpr 0x1fe1c4e0d90 <col:10> 'size_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1fe1c4e0d70 <col:10> 'size_t *' lvalue ParmVar 0x1fe1c4df1a0 'currlen' 'size_t *'
|   | | `-ImplicitCastExpr 0x1fe1c4e0e28 <col:20, col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-UnaryOperator 0x1fe1c4e0df8 <col:20, col:21> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x1fe1c4e0de0 <col:21> 'size_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1fe1c4e0dc0 <col:21> 'size_t *' lvalue ParmVar 0x1fe1c4df218 'maxlen' 'size_t *'
|   | `-CompoundStmt 0x1fe1c4e1270 <col:29, line:842:5>
|   |   `-IfStmt 0x1fe1c4e1248 <line:838:9, line:841:45> has_else
|   |     |-ImplicitCastExpr 0x1fe1c4e0eb0 <line:838:13, col:14> 'char *' <LValueToRValue>
|   |     | `-UnaryOperator 0x1fe1c4e0e98 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     |   `-ImplicitCastExpr 0x1fe1c4e0e80 <col:14> 'char **' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x1fe1c4e0e60 <col:14> 'char **' lvalue ParmVar 0x1fe1c4df0a8 'sbuffer' 'char **'
|   |     |-BinaryOperator 0x1fe1c4e1068 <line:839:13, col:46> 'char' '='
|   |     | |-ArraySubscriptExpr 0x1fe1c4e0fd8 <col:13, col:36> 'char' lvalue
|   |     | | |-ImplicitCastExpr 0x1fe1c4e0fc0 <col:13, col:22> 'char *' <LValueToRValue>
|   |     | | | `-ParenExpr 0x1fe1c4e0f18 <col:13, col:22> 'char *' lvalue
|   |     | | |   `-UnaryOperator 0x1fe1c4e0f00 <col:14, col:15> 'char *' lvalue prefix '*' cannot overflow
|   |     | | |     `-ImplicitCastExpr 0x1fe1c4e0ee8 <col:15> 'char **' <LValueToRValue>
|   |     | | |       `-DeclRefExpr 0x1fe1c4e0ec8 <col:15> 'char **' lvalue ParmVar 0x1fe1c4df0a8 'sbuffer' 'char **'
|   |     | | `-UnaryOperator 0x1fe1c4e0fa8 <col:24, col:34> 'size_t':'unsigned long long' postfix '++'
|   |     | |   `-ParenExpr 0x1fe1c4e0f88 <col:24, col:33> 'size_t':'unsigned long long' lvalue
|   |     | |     `-UnaryOperator 0x1fe1c4e0f70 <col:25, col:26> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |       `-ImplicitCastExpr 0x1fe1c4e0f58 <col:26> 'size_t *' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x1fe1c4e0f38 <col:26> 'size_t *' lvalue ParmVar 0x1fe1c4df1a0 'currlen' 'size_t *'
|   |     | `-CStyleCastExpr 0x1fe1c4e1040 <col:40, col:46> 'char' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x1fe1c4e1028 <col:46> 'int' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x1fe1c4e0ff8 <col:46> 'int' lvalue ParmVar 0x1fe1c4df298 'c' 'int'
|   |     `-BinaryOperator 0x1fe1c4e1228 <line:841:13, col:45> 'char' '='
|   |       |-ArraySubscriptExpr 0x1fe1c4e1198 <col:13, col:35> 'char' lvalue
|   |       | |-ImplicitCastExpr 0x1fe1c4e1180 <col:13, col:21> 'char *' <LValueToRValue>
|   |       | | `-ParenExpr 0x1fe1c4e10d8 <col:13, col:21> 'char *' lvalue
|   |       | |   `-UnaryOperator 0x1fe1c4e10c0 <col:14, col:15> 'char *' lvalue prefix '*' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x1fe1c4e10a8 <col:15> 'char **' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x1fe1c4e1088 <col:15> 'char **' lvalue ParmVar 0x1fe1c4df128 'buffer' 'char **'
|   |       | `-UnaryOperator 0x1fe1c4e1168 <col:23, col:33> 'size_t':'unsigned long long' postfix '++'
|   |       |   `-ParenExpr 0x1fe1c4e1148 <col:23, col:32> 'size_t':'unsigned long long' lvalue
|   |       |     `-UnaryOperator 0x1fe1c4e1130 <col:24, col:25> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |       `-ImplicitCastExpr 0x1fe1c4e1118 <col:25> 'size_t *' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x1fe1c4e10f8 <col:25> 'size_t *' lvalue ParmVar 0x1fe1c4df1a0 'currlen' 'size_t *'
|   |       `-CStyleCastExpr 0x1fe1c4e1200 <col:39, col:45> 'char' <IntegralCast>
|   |         `-ImplicitCastExpr 0x1fe1c4e11e8 <col:45> 'int' <LValueToRValue> part_of_explicit_cast
|   |           `-DeclRefExpr 0x1fe1c4e11b8 <col:45> 'int' lvalue ParmVar 0x1fe1c4df298 'c' 'int'
|   `-ReturnStmt 0x1fe1c4e12c8 <line:844:5, col:12>
|     `-IntegerLiteral 0x1fe1c4e12a0 <col:12> 'int' 1
|-FunctionDecl 0x1fe1c4e14b8 <line:849:1, line:860:1> line:849:5 invalid BIO_printf 'int (int *, const char *, ...)'
| |-ParmVarDecl 0x1fe1c4e1358 <col:16, col:21> col:21 invalid bio 'int *'
| |-ParmVarDecl 0x1fe1c4e13d8 <col:26, col:38> col:38 used format 'const char *'
| |-CompoundStmt 0x1fe1c4e1d08 <line:850:1, line:860:1>
| | |-DeclStmt 0x1fe1c4e15f8 <line:851:5, col:17>
| | | `-VarDecl 0x1fe1c4e1590 <col:5, col:13> col:13 used args 'va_list':'char *'
| | |-DeclStmt 0x1fe1c4e1690 <line:852:5, col:12>
| | | `-VarDecl 0x1fe1c4e1628 <col:5, col:9> col:9 used ret 'int'
| | |-CallExpr 0x1fe1c4e18d0 <line:854:5, col:26> 'void'
| | | |-ImplicitCastExpr 0x1fe1c4e18b8 <col:5> 'void (*)(__builtin_va_list &, ...)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1fe1c4e1810 <col:5> 'void (__builtin_va_list &, ...)' Function 0x1fe1c4e16a8 'va_start' 'void (__builtin_va_list &, ...)'
| | | |-DeclRefExpr 0x1fe1c4e1848 <col:14> 'va_list':'char *' lvalue Var 0x1fe1c4e1590 'args' 'va_list':'char *'
| | | `-ImplicitCastExpr 0x1fe1c4e1900 <col:20> 'const char *' <LValueToRValue>
| | |   `-DeclRefExpr 0x1fe1c4e1880 <col:20> 'const char *' lvalue ParmVar 0x1fe1c4e13d8 'format' 'const char *'
| | |-CallExpr 0x1fe1c4e1c78 <line:858:5, col:16> 'void'
| | | |-ImplicitCastExpr 0x1fe1c4e1c60 <col:5> 'void (*)(__builtin_va_list &)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1fe1c4e1c08 <col:5> 'void (__builtin_va_list &)' Function 0x1fe1c4e1aa0 'va_end' 'void (__builtin_va_list &)'
| | | `-DeclRefExpr 0x1fe1c4e1c40 <col:12> 'va_list':'char *' lvalue Var 0x1fe1c4e1590 'args' 'va_list':'char *'
| | `-ReturnStmt 0x1fe1c4e1cf8 <line:859:5, col:16>
| |   `-ImplicitCastExpr 0x1fe1c4e1ce0 <col:12, col:16> 'int' <LValueToRValue>
| |     `-ParenExpr 0x1fe1c4e1cc0 <col:12, col:16> 'int' lvalue
| |       `-DeclRefExpr 0x1fe1c4e1ca0 <col:13> 'int' lvalue Var 0x1fe1c4e1628 'ret' 'int'
| `-FullComment 0x1fe1c4e5b98 <line:847:4, col:75>
|   `-ParagraphComment 0x1fe1c4e5b70 <col:4, col:75>
|     `-TextComment 0x1fe1c4e5b48 <col:4, col:75> Text="************************************************************************"
|-FunctionDecl 0x1fe1c4e16a8 <line:854:5> col:5 implicit used va_start 'void (__builtin_va_list &, ...)' extern
| |-ParmVarDecl 0x1fe1c4e1748 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1fe1c4e17b8 <col:5> Implicit
|-FunctionDecl 0x1fe1c4e1aa0 <line:858:5> col:5 implicit used va_end 'void (__builtin_va_list &)' extern
| |-ParmVarDecl 0x1fe1c4e1b40 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1fe1c4e1bb0 <col:5> Implicit
|-FunctionDecl 0x1fe1c4e1f80 <line:862:1, line:887:1> line:862:5 invalid BIO_vprintf 'int (int *, const char *, va_list)'
| |-ParmVarDecl 0x1fe1c4e1d58 <col:17, col:22> col:22 invalid bio 'int *'
| |-ParmVarDecl 0x1fe1c4e1dd8 <col:27, col:39> col:39 used format 'const char *'
| |-ParmVarDecl 0x1fe1c4e1e50 <col:47, col:55> col:55 used args 'va_list':'char *'
| `-CompoundStmt 0x1fe1c4e3700 <line:863:1, line:887:1>
|   |-DeclStmt 0x1fe1c4e20d0 <line:864:5, col:12>
|   | `-VarDecl 0x1fe1c4e2068 <col:5, col:9> col:9 used ret 'int'
|   |-DeclStmt 0x1fe1c4e2160 <line:865:5, col:18>
|   | `-VarDecl 0x1fe1c4e20f8 <col:5, col:12> col:12 used retlen 'size_t':'unsigned long long'
|   |-DeclStmt 0x1fe1c4e22c0 <line:866:5, col:27>
|   | `-VarDecl 0x1fe1c4e2258 <col:5, col:26> col:10 used hugebuf 'char [2048]'
|   |-DeclStmt 0x1fe1c4e23a8 <line:869:5, col:29>
|   | `-VarDecl 0x1fe1c4e22f0 <col:5, col:22> col:11 used hugebufp 'char *' cinit
|   |   `-ImplicitCastExpr 0x1fe1c4e2390 <col:22> 'char *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1fe1c4e2358 <col:22> 'char [2048]' lvalue Var 0x1fe1c4e2258 'hugebuf' 'char [2048]'
|   |-DeclStmt 0x1fe1c4e2498 <line:870:5, col:41>
|   | `-VarDecl 0x1fe1c4e23d0 <col:5, col:40> col:12 used hugebufsize 'size_t':'unsigned long long' cinit
|   |   `-UnaryExprOrTypeTraitExpr 0x1fe1c4e2478 <col:26, col:40> 'unsigned long long' sizeof
|   |     `-ParenExpr 0x1fe1c4e2458 <col:32, col:40> 'char [2048]' lvalue
|   |       `-DeclRefExpr 0x1fe1c4e2438 <col:33> 'char [2048]' lvalue Var 0x1fe1c4e2258 'hugebuf' 'char [2048]' non_odr_use_unevaluated
|   |-DeclStmt 0x1fe1c4e25d0 <line:871:5, col:24>
|   | `-VarDecl 0x1fe1c4e24c8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> .//openssl//file_jk/before\crypto\bio\b_print.c:871:11 used dynbuf 'char *' cinit
|   |   `-ImplicitCastExpr 0x1fe1c4e25b8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     `-ParenExpr 0x1fe1c4e2598 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1fe1c4e2570 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1fe1c4e2530 <col:26> 'int' 0
|   |-DeclStmt 0x1fe1c4e2668 <.//openssl//file_jk/before\crypto\bio\b_print.c:872:5, col:16>
|   | `-VarDecl 0x1fe1c4e2600 <col:5, col:9> col:9 used ignored 'int'
|   |-BinaryOperator 0x1fe1c4e2758 <line:874:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'char *' '='
|   | |-DeclRefExpr 0x1fe1c4e2680 <.//openssl//file_jk/before\crypto\bio\b_print.c:874:5> 'char *' lvalue Var 0x1fe1c4e24c8 'dynbuf' 'char *'
|   | `-ImplicitCastExpr 0x1fe1c4e2740 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |   `-ParenExpr 0x1fe1c4e2720 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x1fe1c4e26f8 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x1fe1c4e26b8 <col:26> 'int' 0
|   |-IfStmt 0x1fe1c4e2c88 <.//openssl//file_jk/before\crypto\bio\b_print.c:875:5, line:879:5>
|   | |-UnaryOperator 0x1fe1c4e2a78 <line:875:9, line:876:21> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1fe1c4e29f0 <line:875:10, line:876:21> 'int'
|   | |   |-ImplicitCastExpr 0x1fe1c4e29d8 <line:875:10> 'int (*)(char **, char **, size_t *, size_t *, int *, const char *, va_list)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1fe1c4e2778 <col:10> 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' Function 0x1fe1c4bea10 '_dopr' 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)'
|   | |   |-UnaryOperator 0x1fe1c4e27d0 <col:16, col:17> 'char **' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1fe1c4e2798 <col:17> 'char *' lvalue Var 0x1fe1c4e22f0 'hugebufp' 'char *'
|   | |   |-UnaryOperator 0x1fe1c4e2808 <col:27, col:28> 'char **' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1fe1c4e27e8 <col:28> 'char *' lvalue Var 0x1fe1c4e24c8 'dynbuf' 'char *'
|   | |   |-UnaryOperator 0x1fe1c4e2858 <col:36, col:37> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1fe1c4e2820 <col:37> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4e23d0 'hugebufsize' 'size_t':'unsigned long long'
|   | |   |-UnaryOperator 0x1fe1c4e28a8 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1fe1c4e2870 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4e20f8 'retlen' 'size_t':'unsigned long long'
|   | |   |-UnaryOperator 0x1fe1c4e28f8 <col:59, col:60> 'int *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1fe1c4e28c0 <col:60> 'int' lvalue Var 0x1fe1c4e2600 'ignored' 'int'
|   | |   |-ImplicitCastExpr 0x1fe1c4e2a48 <col:69> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1fe1c4e2910 <col:69> 'const char *' lvalue ParmVar 0x1fe1c4e1dd8 'format' 'const char *'
|   | |   `-ImplicitCastExpr 0x1fe1c4e2a60 <line:876:17> 'va_list':'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1fe1c4e2948 <col:17> 'va_list':'char *' lvalue ParmVar 0x1fe1c4e1e50 'args' 'va_list':'char *'
|   | `-CompoundStmt 0x1fe1c4e2c68 <col:24, line:879:5>
|   |   |-CallExpr 0x1fe1c4e2bd8 <line:877:9, col:28> 'int'
|   |   | |-ImplicitCastExpr 0x1fe1c4e2bc0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1fe1c4e2b80 <col:9> 'int ()' Function 0x1fe1c4e2ab8 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x1fe1c4e2c00 <col:22> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1fe1c4e2ba0 <col:22> 'char *' lvalue Var 0x1fe1c4e24c8 'dynbuf' 'char *'
|   |   `-ReturnStmt 0x1fe1c4e2c58 <line:878:9, col:17>
|   |     `-UnaryOperator 0x1fe1c4e2c40 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1fe1c4e2c18 <col:17> 'int' 1
|   |-IfStmt 0x1fe1c4e3670 <line:880:5, line:885:5> has_else
|   | |-ImplicitCastExpr 0x1fe1c4e32e0 <line:880:9> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1fe1c4e32c0 <col:9> 'char *' lvalue Var 0x1fe1c4e24c8 'dynbuf' 'char *'
|   | |-CompoundStmt 0x1fe1c4e3570 <col:17, line:883:5>
|   | | `-CallExpr 0x1fe1c4e3530 <line:882:9, col:28> 'int'
|   | |   |-ImplicitCastExpr 0x1fe1c4e3518 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1fe1c4e34d8 <col:9> 'int ()' Function 0x1fe1c4e2ab8 'OPENSSL_free' 'int ()'
|   | |   `-ImplicitCastExpr 0x1fe1c4e3558 <col:22> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1fe1c4e34f8 <col:22> 'char *' lvalue Var 0x1fe1c4e24c8 'dynbuf' 'char *'
|   | `-CompoundStmt 0x1fe1c4e3660 <line:883:12, line:885:5>
|   `-ReturnStmt 0x1fe1c4e36f0 <line:886:5, col:16>
|     `-ImplicitCastExpr 0x1fe1c4e36d8 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1fe1c4e36b8 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1fe1c4e3698 <col:13> 'int' lvalue Var 0x1fe1c4e2068 'ret' 'int'
|-FunctionDecl 0x1fe1c4e3968 <line:895:1, line:906:1> line:895:5 BIO_snprintf 'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1fe1c4e3780 <col:18, col:24> col:24 used buf 'char *'
| |-ParmVarDecl 0x1fe1c4e37f8 <col:29, col:36> col:36 used n 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1fe1c4e3878 <col:39, col:51> col:51 used format 'const char *'
| `-CompoundStmt 0x1fe1c4e3fc0 <line:896:1, line:906:1>
|   |-DeclStmt 0x1fe1c4e3ab0 <line:897:5, col:17>
|   | `-VarDecl 0x1fe1c4e3a48 <col:5, col:13> col:13 used args 'va_list':'char *'
|   |-DeclStmt 0x1fe1c4e3b48 <line:898:5, col:12>
|   | `-VarDecl 0x1fe1c4e3ae0 <col:5, col:9> col:9 used ret 'int'
|   |-CallExpr 0x1fe1c4e3bf0 <line:900:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1fe1c4e3bd8 <col:5> 'void (*)(__builtin_va_list &, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1fe1c4e3b60 <col:5> 'void (__builtin_va_list &, ...)' Function 0x1fe1c4e16a8 'va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1fe1c4e3b80 <col:14> 'va_list':'char *' lvalue Var 0x1fe1c4e3a48 'args' 'va_list':'char *'
|   | `-ImplicitCastExpr 0x1fe1c4e3c20 <col:20> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1fe1c4e3bb8 <col:20> 'const char *' lvalue ParmVar 0x1fe1c4e3878 'format' 'const char *'
|   |-BinaryOperator 0x1fe1c4e3eb8 <line:902:5, col:45> 'int' '='
|   | |-DeclRefExpr 0x1fe1c4e3c38 <col:5> 'int' lvalue Var 0x1fe1c4e3ae0 'ret' 'int'
|   | `-CallExpr 0x1fe1c4e3e18 <col:11, col:45> 'int'
|   |   |-ImplicitCastExpr 0x1fe1c4e3e00 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1fe1c4e3d60 <col:11> 'int ()' Function 0x1fe1c4e3c98 'BIO_vsnprintf' 'int ()'
|   |   |-ImplicitCastExpr 0x1fe1c4e3e58 <col:25> 'char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c4e3d80 <col:25> 'char *' lvalue ParmVar 0x1fe1c4e3780 'buf' 'char *'
|   |   |-ImplicitCastExpr 0x1fe1c4e3e70 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c4e3da0 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x1fe1c4e37f8 'n' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1fe1c4e3e88 <col:33> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1fe1c4e3dc0 <col:33> 'const char *' lvalue ParmVar 0x1fe1c4e3878 'format' 'const char *'
|   |   `-ImplicitCastExpr 0x1fe1c4e3ea0 <col:41> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1fe1c4e3de0 <col:41> 'va_list':'char *' lvalue Var 0x1fe1c4e3a48 'args' 'va_list':'char *'
|   |-CallExpr 0x1fe1c4e3f30 <line:904:5, col:16> 'void'
|   | |-ImplicitCastExpr 0x1fe1c4e3f18 <col:5> 'void (*)(__builtin_va_list &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1fe1c4e3ed8 <col:5> 'void (__builtin_va_list &)' Function 0x1fe1c4e1aa0 'va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1fe1c4e3ef8 <col:12> 'va_list':'char *' lvalue Var 0x1fe1c4e3a48 'args' 'va_list':'char *'
|   `-ReturnStmt 0x1fe1c4e3fb0 <line:905:5, col:16>
|     `-ImplicitCastExpr 0x1fe1c4e3f98 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1fe1c4e3f78 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1fe1c4e3f58 <col:13> 'int' lvalue Var 0x1fe1c4e3ae0 'ret' 'int'
`-FunctionDecl 0x1fe1c4e4298 prev 0x1fe1c4e3c98 <line:908:1, line:926:1> line:908:5 used BIO_vsnprintf 'int (char *, size_t, const char *, va_list)'
  |-ParmVarDecl 0x1fe1c4e4018 <col:19, col:25> col:25 used buf 'char *'
  |-ParmVarDecl 0x1fe1c4e4090 <col:30, col:37> col:37 used n 'size_t':'unsigned long long'
  |-ParmVarDecl 0x1fe1c4e4110 <col:40, col:52> col:52 used format 'const char *'
  |-ParmVarDecl 0x1fe1c4e4188 <col:60, col:68> col:68 used args 'va_list':'char *'
  `-CompoundStmt 0x1fe1c4e4940 <line:909:1, line:926:1>
    |-DeclStmt 0x1fe1c4e43d0 <line:910:5, col:18>
    | `-VarDecl 0x1fe1c4e4368 <col:5, col:12> col:12 used retlen 'size_t':'unsigned long long'
    |-DeclStmt 0x1fe1c4e4468 <line:911:5, col:18>
    | `-VarDecl 0x1fe1c4e4400 <col:5, col:9> col:9 used truncated 'int'
    |-IfStmt 0x1fe1c4e4798 <line:913:5, line:914:17>
    | |-UnaryOperator 0x1fe1c4e4730 <line:913:8, col:64> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x1fe1c4e4690 <col:9, col:64> 'int'
    | |   |-ImplicitCastExpr 0x1fe1c4e4678 <col:9> 'int (*)(char **, char **, size_t *, size_t *, int *, const char *, va_list)' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x1fe1c4e4480 <col:9> 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' Function 0x1fe1c4bea10 '_dopr' 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)'
    | |   |-UnaryOperator 0x1fe1c4e44c0 <col:15, col:16> 'char **' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1fe1c4e44a0 <col:16> 'char *' lvalue ParmVar 0x1fe1c4e4018 'buf' 'char *'
    | |   |-ImplicitCastExpr 0x1fe1c4e46e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <NullToPointer>
    | |   | `-ParenExpr 0x1fe1c4e4540 <col:17, col:27> 'void *'
    | |   |   `-CStyleCastExpr 0x1fe1c4e4518 <col:18, col:26> 'void *' <NullToPointer>
    | |   |     `-IntegerLiteral 0x1fe1c4e44d8 <col:26> 'int' 0
    | |   |-UnaryOperator 0x1fe1c4e4580 <.//openssl//file_jk/before\crypto\bio\b_print.c:913:27, col:28> 'size_t *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1fe1c4e4560 <col:28> 'size_t':'unsigned long long' lvalue ParmVar 0x1fe1c4e4090 'n' 'size_t':'unsigned long long'
    | |   |-UnaryOperator 0x1fe1c4e45d0 <col:31, col:32> 'size_t *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1fe1c4e4598 <col:32> 'size_t':'unsigned long long' lvalue Var 0x1fe1c4e4368 'retlen' 'size_t':'unsigned long long'
    | |   |-UnaryOperator 0x1fe1c4e4620 <col:40, col:41> 'int *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1fe1c4e45e8 <col:41> 'int' lvalue Var 0x1fe1c4e4400 'truncated' 'int'
    | |   |-ImplicitCastExpr 0x1fe1c4e4700 <col:52> 'const char *' <LValueToRValue>
    | |   | `-DeclRefExpr 0x1fe1c4e4638 <col:52> 'const char *' lvalue ParmVar 0x1fe1c4e4110 'format' 'const char *'
    | |   `-ImplicitCastExpr 0x1fe1c4e4718 <col:60> 'va_list':'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1fe1c4e4658 <col:60> 'va_list':'char *' lvalue ParmVar 0x1fe1c4e4188 'args' 'va_list':'char *'
    | `-ReturnStmt 0x1fe1c4e4788 <line:914:9, col:17>
    |   `-UnaryOperator 0x1fe1c4e4770 <col:16, col:17> 'int' prefix '-'
    |     `-IntegerLiteral 0x1fe1c4e4748 <col:17> 'int' 1
    `-IfStmt 0x1fe1c4e4918 <line:916:5, line:925:9> has_else
      |-ImplicitCastExpr 0x1fe1c4e47d0 <line:916:9> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x1fe1c4e47b0 <col:9> 'int' lvalue Var 0x1fe1c4e4400 'truncated' 'int'
      |-ReturnStmt 0x1fe1c4e4828 <line:923:9, col:17>
      | `-UnaryOperator 0x1fe1c4e4810 <col:16, col:17> 'int' prefix '-'
      |   `-IntegerLiteral 0x1fe1c4e47e8 <col:17> 'int' 1
      `-NullStmt 0x1fe1c4e4910 <line:925:9>
