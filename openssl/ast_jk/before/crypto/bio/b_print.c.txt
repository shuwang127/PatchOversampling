TranslationUnitDecl 0x1ace060e0b8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1ace060e950 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1ace060e650 '__int128'
|-TypedefDecl 0x1ace060e9c0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1ace060e670 'unsigned __int128'
|-TypedefDecl 0x1ace060ecf8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1ace060eab0 'struct __NSConstantString_tag'
|   `-Record 0x1ace060ea18 '__NSConstantString_tag'
|-TypedefDecl 0x1ace060ed68 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1ace060e290 'unsigned long long'
|-TypedefDecl 0x1ace060ee00 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1ace060edc0 'char *'
|   `-BuiltinType 0x1ace060e150 'char'
|-TypedefDecl 0x1ace060ee70 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1ace060edc0 'char *'
|   `-BuiltinType 0x1ace060e150 'char'
|-TypedefDecl 0x1ace060ef30 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1ace060e290 'unsigned long long'
|-TypedefDecl 0x1ace060efa0 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1ace060edc0 'char *'
|   `-BuiltinType 0x1ace060e150 'char'
|-FunctionDecl 0x1ace1fc9430 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1ace1fc94d0 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1ace1fc9540 <col:21> Implicit
|-FunctionDecl 0x1ace1fc9598 prev 0x1ace1fc9430 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1ace1fc92c0 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1ace1fc9688 <col:21> Inherited Implicit
|-TypedefDecl 0x1ace1fc96c8 prev 0x1ace060ed68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1ace060e290 'unsigned long long'
|-TypedefDecl 0x1ace1fc9770 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1ace1fc9740 'size_t' sugar
|   |-Typedef 0x1ace1fc96c8 'size_t'
|   `-BuiltinType 0x1ace060e290 'unsigned long long'
|-TypedefDecl 0x1ace1fc97e0 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1ace060e1f0 'long long'
|-TypedefDecl 0x1ace1fc9850 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1ace060e1f0 'long long'
|-TypedefDecl 0x1ace1fc98c0 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1ace060e230 'unsigned short'
|-TypedefDecl 0x1ace1fc9930 <line:541:1, col:24> col:24 referenced wint_t 'unsigned short'
| `-BuiltinType 0x1ace060e230 'unsigned short'
|-TypedefDecl 0x1ace1fc99a0 <line:542:1, col:24> col:24 referenced wctype_t 'unsigned short'
| `-BuiltinType 0x1ace060e230 'unsigned short'
|-TypedefDecl 0x1ace1fc9a10 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x1ace060e1b0 'int'
|-TypedefDecl 0x1ace1fc9a80 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1ace060e1d0 'long'
|-TypedefDecl 0x1ace1fc9af0 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1ace060e1f0 'long long'
|-TypedefDecl 0x1ace1fc9b80 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1ace1fc9b50 '__time64_t' sugar
|   |-Typedef 0x1ace1fc9af0 '__time64_t'
|   `-BuiltinType 0x1ace060e1f0 'long long'
|-FunctionDecl 0x1ace1fc9cf8 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1ace1fc9f18 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1ace1ffcef0 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1ace1fca058 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1ace1fca0d0 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1ace1fca148 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1ace1fca1c8 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1ace1ffcc90 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1ace1ffcfd0 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1ace1ffd090 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1ace1ffd200 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1ace1ffd1b0 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1ace1ffd150 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1ace1ffd070 'struct threadlocaleinfostruct'
|       `-Record 0x1ace200cd90 'threadlocaleinfostruct'
|-TypedefDecl 0x1ace1ffd310 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1ace1ffd2c0 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1ace1ffd260 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1ace1ffd130 'struct threadmbcinfostruct'
|       `-Record 0x1ace1ffd090 'threadmbcinfostruct'
|-RecordDecl 0x1ace1ffd368 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1ace1ffd420 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1ace1ffd4e0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1ace1ffd570 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1ace1ffd600 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1ace1ffd6b8 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1ace1ffd660 'struct localeinfo_struct' sugar
|   `-RecordType 0x1ace1ffd4c0 'struct localeinfo_struct'
|     `-Record 0x1ace1ffd420 'localeinfo_struct'
|-TypedefDecl 0x1ace1ffd790 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1ace1ffd740 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1ace1ffd660 'struct localeinfo_struct' sugar
|     `-RecordType 0x1ace1ffd4c0 'struct localeinfo_struct'
|       `-Record 0x1ace1ffd420 'localeinfo_struct'
|-RecordDecl 0x1ace1ffd808 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1ace1ffd8c0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1ace1ffd938 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1ace1ffd9f8 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1ace1ffda90 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1ace1ffdb00 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1ace1ffdbb8 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1ace1ffdb60 'struct localerefcount' sugar
|   `-RecordType 0x1ace1ffd8a0 'struct localerefcount'
|     `-Record 0x1ace1ffd808 'localerefcount'
|-RecordDecl 0x1ace200cd90 prev 0x1ace1ffcfd0 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1ace200ce10 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1ace200ce88 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1ace200cef8 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1ace200cf68 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1ace200cfd8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1ace200d198 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1ace200d208 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1ace200d278 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1ace200d2e8 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1ace200d358 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1ace200d3c8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1ace200d420 parent 0x1ace060e0b8 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1ace200d5b0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1ace200d620 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1ace200d690 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1ace200d700 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1ace200d7a0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1ace200d810 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1ace200d920 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1ace200da58 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1ace200db08 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1ace200dab0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1ace1ffd070 'struct threadlocaleinfostruct'
|     `-Record 0x1ace200cd90 'threadlocaleinfostruct'
|-RecordDecl 0x1ace200dba0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:63:1, line:72:9> line:63:8 struct _iobuf definition
| |-MaxFieldAlignmentAttr 0x1ace200dc60 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1ace200dcd8 <line:64:9, col:15> col:15 _ptr 'char *'
| |-FieldDecl 0x1ace200dda0 <line:65:9, col:15> col:15 _cnt 'int'
| |-FieldDecl 0x1ace200de10 <line:66:9, col:15> col:15 _base 'char *'
| |-FieldDecl 0x1ace200de80 <line:67:9, col:15> col:15 _flag 'int'
| |-FieldDecl 0x1ace200def0 <line:68:9, col:15> col:15 _file 'int'
| |-FieldDecl 0x1ace200df60 <line:69:9, col:15> col:15 _charbuf 'int'
| |-FieldDecl 0x1ace200dfd0 <line:70:9, col:15> col:15 _bufsiz 'int'
| `-FieldDecl 0x1ace200e040 <line:71:9, col:15> col:15 _tmpfname 'char *'
|-TypedefDecl 0x1ace200e0f0 <line:73:1, col:23> col:23 referenced FILE 'struct _iobuf':'struct _iobuf'
| `-ElaboratedType 0x1ace200e0a0 'struct _iobuf' sugar
|   `-RecordType 0x1ace200dc40 'struct _iobuf'
|     `-Record 0x1ace200dba0 '_iobuf'
|-FunctionDecl 0x1ace200e328 <line:137:9, col:39> col:24 __iob_func 'FILE *(void) __attribute__((cdecl))':'FILE *(void)'
|-TypedefDecl 0x1ace200e3f8 <line:144:1, col:17> col:17 referenced fpos_t 'long long'
| `-BuiltinType 0x1ace060e1f0 'long long'
|-FunctionDecl 0x1ace200e5d8 <line:175:24, col:65> col:36 _filbuf 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace200e460 <col:52, col:59> col:59 _File 'FILE *'
|-FunctionDecl 0x1ace200e8d0 <line:176:28, col:82> col:40 _flsbuf 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1ace200e6b0 <col:53, col:57> col:57 _Ch 'int'
| `-ParmVarDecl 0x1ace200e728 <col:70, col:77> col:77 _File 'FILE *'
|-FunctionDecl 0x1ace200ec80 <line:178:24, col:121> col:39 _fsopen 'FILE *(const char *, const char *, int) __attribute__((cdecl))':'FILE *(const char *, const char *, int)'
| |-ParmVarDecl 0x1ace200e9b0 <col:54, col:67> col:67 _Filename 'const char *'
| |-ParmVarDecl 0x1ace200ea30 <col:85, col:98> col:98 _Mode 'const char *'
| `-ParmVarDecl 0x1ace200eab0 <col:110, col:114> col:114 _ShFlag 'int'
|-FunctionDecl 0x1ace2011f50 <line:180:9, col:51> col:22 clearerr 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1ace2011de0 <col:39, col:46> col:46 _File 'FILE *'
|-FunctionDecl 0x1ace2012180 <line:182:28, col:76> col:44 clearerr_s 'errno_t (FILE *) __attribute__((cdecl))':'errno_t (FILE *)'
| `-ParmVarDecl 0x1ace2012040 <col:63, col:70> col:70 _File 'FILE *'
|-FunctionDecl 0x1ace2012330 <line:184:28, col:67> col:40 fclose 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace2012250 <col:55, col:62> col:62 _File 'FILE *'
|-FunctionDecl 0x1ace2012520 <line:185:28, col:55> col:40 _fcloseall 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1ace2012818 <line:187:24, col:94> col:39 _fdopen 'FILE *(int, const char *) __attribute__((cdecl))':'FILE *(int, const char *)'
| |-ParmVarDecl 0x1ace20125f0 <col:52, col:56> col:56 _FileHandle 'int'
| `-ParmVarDecl 0x1ace2012670 <col:76, col:89> col:89 _Mode 'const char *'
|-FunctionDecl 0x1ace20129d0 <line:189:24, col:58> col:36 feof 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace20128f0 <col:46, col:53> col:53 _File 'FILE *'
|-FunctionDecl 0x1ace2012b80 <line:190:24, col:60> col:36 ferror 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace2012aa0 <col:48, col:55> col:55 _File 'FILE *'
|-FunctionDecl 0x1ace2012d30 <line:191:28, col:71> col:40 fflush 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace2012c50 <col:59, col:66> col:66 _File 'FILE *'
|-FunctionDecl 0x1ace2013f08 <line:192:28, col:66> col:40 fgetc 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace2013e28 <col:54, col:61> col:61 _File 'FILE *'
|-FunctionDecl 0x1ace2014098 <line:193:28, col:54> col:40 _fgetchar 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1ace2014400 <line:194:28, col:90> col:40 fgetpos 'int (FILE *, fpos_t *) __attribute__((cdecl))':'int (FILE *, fpos_t *)'
| |-ParmVarDecl 0x1ace2014160 <col:56, col:63> col:63 _File 'FILE *'
| `-ParmVarDecl 0x1ace2014258 <col:77, col:86> col:86 _Pos 'fpos_t *'
|-FunctionDecl 0x1ace20147b8 <line:195:28, col:128> col:43 fgets 'char *(char *, int, FILE *) __attribute__((cdecl))':'char *(char *, int, FILE *)'
| |-ParmVarDecl 0x1ace20144e0 <col:75, col:82> col:82 _Buf 'char *'
| |-ParmVarDecl 0x1ace2014560 <col:93, col:97> col:97 _MaxCount 'int'
| `-ParmVarDecl 0x1ace20145d8 <col:116, col:123> col:123 _File 'FILE *'
|-FunctionDecl 0x1ace2014978 <line:197:24, col:61> col:36 _fileno 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace2014898 <col:49, col:56> col:56 _File 'FILE *'
|-FunctionDecl 0x1ace2014c40 <line:204:24, col:117> col:39 _tempnam 'char *(const char *, const char *) __attribute__((cdecl))':'char *(const char *, const char *)'
| |-ParmVarDecl 0x1ace2014a50 <col:59, col:72> col:72 _DirName 'const char *'
| `-ParmVarDecl 0x1ace2014ad0 <col:93, col:106> col:106 _FilePrefix 'const char *'
|-FunctionDecl 0x1ace2014e10 <line:210:28, col:54> col:40 _flushall 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1ace2015208 <line:211:72> col:72 implicit fopen 'FILE *(const char *, const char *)' extern
| |-ParmVarDecl 0x1ace20152a8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace2015310 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace2015388 prev 0x1ace2015208 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:211:134> col:72 fopen 'FILE *(const char *, const char *)'
| |-ParmVarDecl 0x1ace2014fe0 <col:85, col:98> col:98 _Filename 'const char *'
| |-ParmVarDecl 0x1ace2015060 <col:116, col:129> col:129 _Mode 'const char *'
| `-DeprecatedAttr 0x1ace2015438 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20158b0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:213:28, col:149> col:44 fopen_s 'errno_t (FILE **, const char *, const char *) __attribute__((cdecl))':'errno_t (FILE **, const char *, const char *)'
| |-ParmVarDecl 0x1ace20155e0 <col:78, col:86> col:86 _File 'FILE **'
| |-ParmVarDecl 0x1ace2015660 <col:100, col:113> col:113 _Filename 'const char *'
| `-ParmVarDecl 0x1ace20156e0 <col:131, col:144> col:144 _Mode 'const char *'
|-FunctionDecl 0x1ace2015bd0 <line:215:40> col:40 implicit fprintf 'int (FILE *, const char *, ...)' extern
| |-ParmVarDecl 0x1ace2015c70 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x1ace2015cd8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1ace2015d50 <col:40> Implicit printf 2 3
|-FunctionDecl 0x1ace2016e30 prev 0x1ace2015bd0 <col:28, col:125> col:40 fprintf 'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1ace2015990 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1ace2015a10 <col:100, col:113> col:113 _Format 'const char *'
| `-FormatAttr 0x1ace2016f28 <col:40> Inherited printf 2 3
|-FunctionDecl 0x1ace20170f0 <line:217:28, col:127> col:40 fprintf_s 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1ace2016f70 <col:58, col:65> col:65 _File 'FILE *'
| `-ParmVarDecl 0x1ace2016ff0 <col:102, col:115> col:115 _Format 'const char *'
|-FunctionDecl 0x1ace2017348 <line:219:28, col:80> col:40 fputc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1ace20171d0 <col:51, col:55> col:55 _Ch 'int'
| `-ParmVarDecl 0x1ace2017248 <col:68, col:75> col:75 _File 'FILE *'
|-FunctionDecl 0x1ace2017578 <line:220:28, col:62> col:40 _fputchar 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace2017428 <col:55, col:59> col:59 _Ch 'int'
|-FunctionDecl 0x1ace2017870 <line:221:28, col:92> col:40 fputs 'int (const char *, FILE *) __attribute__((cdecl))':'int (const char *, FILE *)'
| |-ParmVarDecl 0x1ace2017650 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1ace20176c8 <col:80, col:87> col:87 _File 'FILE *'
|-FunctionDecl 0x1ace2017d08 <line:222:43> col:43 implicit fread 'unsigned long long (void *, unsigned long long, unsigned long long, FILE *)' extern
| |-ParmVarDecl 0x1ace2017da8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1ace2010dd0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1ace2010e38 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1ace2010ea0 <<invalid sloc>> <invalid sloc> 'FILE *'
|-FunctionDecl 0x1ace2010f28 prev 0x1ace2017d08 <col:28, col:171> col:43 fread 'unsigned long long (void *, unsigned long long, unsigned long long, FILE *)'
| |-ParmVarDecl 0x1ace2017950 <col:89, col:96> col:96 _DstBuf 'void *'
| |-ParmVarDecl 0x1ace20179c8 <col:110, col:117> col:117 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2017a40 <col:136, col:143> col:143 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace2017ab8 <col:159, col:166> col:166 _File 'FILE *'
|-FunctionDecl 0x1ace2011430 <line:224:28, col:195> col:43 fread_s 'size_t (void *, size_t, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1ace2011018 <col:91, col:98> col:98 _DstBuf 'void *'
| |-ParmVarDecl 0x1ace2011090 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2011108 <col:134, col:141> col:141 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2011180 <col:160, col:167> col:167 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20111f8 <col:183, col:190> col:190 _File 'FILE *'
|-FunctionDecl 0x1ace20118f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:226:160> col:74 freopen 'FILE *(const char *, const char *, FILE *) __attribute__((cdecl))':'FILE *(const char *, const char *, FILE *)'
| |-ParmVarDecl 0x1ace2011620 <col:89, col:102> col:102 _Filename 'const char *'
| |-ParmVarDecl 0x1ace20116a0 <col:120, col:133> col:133 _Mode 'const char *'
| |-ParmVarDecl 0x1ace2011718 <col:148, col:155> col:155 _File 'FILE *'
| `-DeprecatedAttr 0x1ace20119a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using freopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2018ef8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:228:28, col:176> col:44 freopen_s 'errno_t (FILE **, const char *, const char *, FILE *) __attribute__((cdecl))':'errno_t (FILE **, const char *, const char *, FILE *)'
| |-ParmVarDecl 0x1ace2011af0 <col:80, col:88> col:88 _File 'FILE **'
| |-ParmVarDecl 0x1ace2011b70 <col:102, col:115> col:115 _Filename 'const char *'
| |-ParmVarDecl 0x1ace2011bf0 <col:133, col:146> col:146 _Mode 'const char *'
| `-ParmVarDecl 0x1ace2011c68 <col:161, col:168> col:168 _OldFile 'FILE *'
|-FunctionDecl 0x1ace20192a0 <line:230:70> col:70 implicit fscanf 'int (FILE *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x1ace2019340 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x1ace20193a8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1ace2019420 <col:70> Implicit scanf 2 3
|-FunctionDecl 0x1ace2019488 prev 0x1ace20192a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:230:153> col:70 fscanf 'int (FILE *restrict, const char *restrict, ...)'
| |-ParmVarDecl 0x1ace20190d8 <col:85, col:92> col:92 _File 'FILE *'
| |-ParmVarDecl 0x1ace2019158 <col:128, col:141> col:141 _Format 'const char *'
| |-FormatAttr 0x1ace2019668 <col:70> Inherited scanf 2 3
| `-DeprecatedAttr 0x1ace2019538 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2019aa8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:231:201> col:77 _fscanf_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace20197a8 <col:95, col:102> col:102 _File 'FILE *'
| |-ParmVarDecl 0x1ace2019828 <col:148, col:161> col:161 _Format 'const char *'
| |-ParmVarDecl 0x1ace20198c0 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace2019b60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2019e60 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:235:28, col:127> col:40 fscanf_s 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1ace2019ca0 <col:57, col:64> col:64 _File 'FILE *'
| `-ParmVarDecl 0x1ace2019d20 <col:102, col:115> col:115 _Format 'const char *'
|-FunctionDecl 0x1ace201a150 <line:237:28, col:168> col:40 _fscanf_s_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2019f38 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1ace2019fb8 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1ace201a030 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace201a4b0 <line:239:28, col:94> col:40 fsetpos 'int (FILE *, const fpos_t *) __attribute__((cdecl))':'int (FILE *, const fpos_t *)'
| |-ParmVarDecl 0x1ace201a230 <col:56, col:63> col:63 _File 'FILE *'
| `-ParmVarDecl 0x1ace201a308 <col:75, col:90> col:90 _Pos 'const fpos_t *'
|-FunctionDecl 0x1ace201a868 <line:240:28, col:103> col:40 fseek 'int (FILE *, long, int) __attribute__((cdecl))':'int (FILE *, long, int)'
| |-ParmVarDecl 0x1ace201a588 <col:54, col:61> col:61 _File 'FILE *'
| |-ParmVarDecl 0x1ace201a608 <col:73, col:78> col:78 _Offset 'long'
| `-ParmVarDecl 0x1ace201a688 <col:92, col:96> col:96 _Origin 'int'
|-FunctionDecl 0x1ace201aac8 <line:241:24, col:63> col:37 ftell 'long (FILE *) __attribute__((cdecl))':'long (FILE *)'
| `-ParmVarDecl 0x1ace201a948 <col:51, col:58> col:58 _File 'FILE *'
|-FunctionDecl 0x1ace2012e38 <line:243:28, col:110> col:40 _fseeki64 'int (FILE *, long long, int) __attribute__((cdecl))':'int (FILE *, long long, int)'
| |-ParmVarDecl 0x1ace201ab98 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1ace201ac18 <col:77, col:85> col:85 _Offset 'long long'
| `-ParmVarDecl 0x1ace201ac98 <col:99, col:103> col:103 _Origin 'int'
|-FunctionDecl 0x1ace2013098 <line:244:24, col:70> col:40 _ftelli64 'long long (FILE *) __attribute__((cdecl))':'long long (FILE *)'
| `-ParmVarDecl 0x1ace2012f18 <col:58, col:65> col:65 _File 'FILE *'
|-FunctionDecl 0x1ace2013558 <line:246:43> col:43 implicit fwrite 'unsigned long long (const void *, unsigned long long, unsigned long long, FILE *)' extern
| |-ParmVarDecl 0x1ace20135f8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1ace2013660 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1ace20136c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1ace2013730 <<invalid sloc>> <invalid sloc> 'FILE *'
|-FunctionDecl 0x1ace20137b8 prev 0x1ace2013558 <col:28, col:159> col:43 fwrite 'unsigned long long (const void *, unsigned long long, unsigned long long, FILE *)'
| |-ParmVarDecl 0x1ace20131a0 <col:81, col:94> col:94 _Str 'const void *'
| |-ParmVarDecl 0x1ace2013218 <col:105, col:112> col:112 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2013290 <col:124, col:131> col:131 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace2013308 <col:147, col:154> col:154 _File 'FILE *'
|-FunctionDecl 0x1ace2013980 <line:247:24, col:61> col:36 getc 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace20138a0 <col:49, col:56> col:56 _File 'FILE *'
|-FunctionDecl 0x1ace2013b10 <line:248:24, col:48> col:36 getchar 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1ace2013c98 <line:249:24, col:53> col:36 _getmaxstdio 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1ace201b030 <line:251:9, col:84> col:24 gets_s 'char *(char *, rsize_t) __attribute__((cdecl))':'char *(char *, rsize_t)'
| |-ParmVarDecl 0x1ace2013d68 <col:53, col:60> col:60 _Buf 'char *'
| `-ParmVarDecl 0x1ace201ae80 <col:71, col:79> col:79 _Size 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1ace201b358 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:254:80 gets 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1ace201b210 <col:139, col:145> col:145 _Buffer 'char *'
| `-DeprecatedAttr 0x1ace201b400 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using gets_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace201b620 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:255:16, col:54> col:28 _getw 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace201b540 <col:42, col:49> col:49 _File 'FILE *'
|-FunctionDecl 0x1ace201b840 <line:258:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x1ace201b6f8 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x1ace201b9f0 <line:261:28, col:68> col:40 _pclose 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace201b910 <col:56, col:63> col:63 _File 'FILE *'
|-FunctionDecl 0x1ace201bc40 <line:262:24, col:101> col:39 _popen 'FILE *(const char *, const char *) __attribute__((cdecl))':'FILE *(const char *, const char *)'
| |-ParmVarDecl 0x1ace201bac8 <col:53, col:66> col:66 _Command 'const char *'
| `-ParmVarDecl 0x1ace201bb48 <col:83, col:96> col:96 _Mode 'const char *'
|-FunctionDecl 0x1ace206a000 <line:264:40> col:40 implicit printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x1ace206a0a0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1ace206a110 <col:40> Implicit printf 1 2
|-FunctionDecl 0x1ace206a178 prev 0x1ace206a000 <col:28, col:102> col:40 printf 'int (const char *, ...)'
| |-ParmVarDecl 0x1ace201bd20 <col:77, col:90> col:90 _Format 'const char *'
| `-FormatAttr 0x1ace206a268 <col:40> Inherited printf 1 2
|-FunctionDecl 0x1ace206a398 <line:266:28, col:104> col:40 printf_s 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1ace206a2b8 <col:79, col:92> col:92 _Format 'const char *'
|-FunctionDecl 0x1ace206a5e8 <line:268:28, col:79> col:40 putc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1ace206a470 <col:50, col:54> col:54 _Ch 'int'
| `-ParmVarDecl 0x1ace206a4e8 <col:67, col:74> col:74 _File 'FILE *'
|-FunctionDecl 0x1ace206a7a8 <line:269:28, col:60> col:40 putchar 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace206a6c8 <col:53, col:57> col:57 _Ch 'int'
|-FunctionDecl 0x1ace206a9c8 <line:270:28, col:69> col:40 puts 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1ace206a880 <col:52, col:65> col:65 _Str 'const char *'
|-FunctionDecl 0x1ace206ac18 <line:271:28, col:82> col:40 _putw 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1ace206aaa0 <col:51, col:55> col:55 _Word 'int'
| `-ParmVarDecl 0x1ace206ab18 <col:70, col:77> col:77 _File 'FILE *'
|-FunctionDecl 0x1ace206add8 <line:274:9, col:57> col:21 remove 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1ace206acf8 <col:35, col:48> col:48 _Filename 'const char *'
|-FunctionDecl 0x1ace206e110 <line:275:24, col:109> col:36 rename 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1ace206aeb0 <col:50, col:63> col:63 _OldFilename 'const char *'
| `-ParmVarDecl 0x1ace206af30 <col:84, col:97> col:97 _NewFilename 'const char *'
|-FunctionDecl 0x1ace206e2d0 <line:276:9, col:58> col:21 _unlink 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1ace206e1f0 <col:36, col:49> col:49 _Filename 'const char *'
|-FunctionDecl 0x1ace206e560 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:278:89> col:53 unlink 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x1ace206e480 <col:67, col:80> col:80 _Filename 'const char *'
| `-DeprecatedAttr 0x1ace206e608 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _unlink. See online help for details." ""
|-FunctionDecl 0x1ace206e800 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:281:9, col:49> col:22 rewind 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1ace206e728 <col:37, col:44> col:44 _File 'FILE *'
|-FunctionDecl 0x1ace206e990 <line:282:28, col:51> col:40 _rmtmp 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1ace206ec38 <line:283:69> col:69 implicit scanf 'int (const char *restrict, ...)' extern
| |-ParmVarDecl 0x1ace206ecd8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1ace206ed48 <col:69> Implicit scanf 1 2
|-FunctionDecl 0x1ace206edb0 prev 0x1ace206ec38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:283:129> col:69 scanf 'int (const char *restrict, ...)'
| |-ParmVarDecl 0x1ace206eb20 <col:104, col:117> col:117 _Format 'const char *'
| |-FormatAttr 0x1ace206ef88 <col:69> Inherited scanf 1 2
| `-DeprecatedAttr 0x1ace206ee58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20672e0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:284:177> col:76 _scanf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace20670a8 <col:124, col:137> col:137 _Format 'const char *'
| |-ParmVarDecl 0x1ace2067120 <col:155, col:165> col:165 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace2067390 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _scanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20675b8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:288:40, col:116> col:52 scanf_s 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1ace20674d8 <col:91, col:104> col:104 _Format 'const char *'
|-FunctionDecl 0x1ace2067808 <line:290:40, col:157> col:52 _scanf_s_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2067690 <col:104, col:117> col:117 _Format 'const char *'
| `-ParmVarDecl 0x1ace2067708 <col:135, col:145> col:145 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2067bc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:292:150> col:55 setbuf 'void (FILE *, char *) __attribute__((cdecl))':'void (FILE *, char *)'
| |-ParmVarDecl 0x1ace20679a0 <col:70, col:77> col:77 _File 'FILE *'
| |-ParmVarDecl 0x1ace2067a20 <col:136, col:143> col:143 _Buffer 'char *'
| `-DeprecatedAttr 0x1ace2067c78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using setvbuf instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2067ea0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:293:28, col:66> col:40 _setmaxstdio 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace2067dc0 <col:58, col:62> col:62 _Max 'int'
|-FunctionDecl 0x1ace206c168 <line:294:28, col:93> col:49 _set_output_format 'unsigned int (unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int)'
| `-ParmVarDecl 0x1ace206c020 <col:73, col:86> col:86 _Format 'unsigned int'
|-FunctionDecl 0x1ace206c350 <line:295:28, col:72> col:49 _get_output_format 'unsigned int (void) __attribute__((cdecl))':'unsigned int (void)'
|-FunctionDecl 0x1ace206c7a0 <line:296:28, col:145> col:40 setvbuf 'int (FILE *, char *, int, size_t) __attribute__((cdecl))':'int (FILE *, char *, int, size_t)'
| |-ParmVarDecl 0x1ace206c418 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1ace206c498 <col:99, col:106> col:106 _Buf 'char *'
| |-ParmVarDecl 0x1ace206c518 <col:117, col:121> col:121 _Mode 'int'
| `-ParmVarDecl 0x1ace206c590 <col:133, col:140> col:140 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace206cc20 <line:297:40, col:213> col:52 _snprintf_s 'int (char *, size_t, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, ...)'
| |-ParmVarDecl 0x1ace206c890 <col:93, col:100> col:100 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace206c908 <col:114, col:121> col:121 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace206c980 <col:140, col:147> col:147 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace206ca00 <col:188, col:201> col:201 _Format 'const char *'
|-FunctionDecl 0x1ace2067fe0 <line:300:40, col:188> col:52 sprintf_s 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1ace206cd10 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace206cd88 <col:112, col:119> col:119 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace206ce08 <col:163, col:176> col:176 _Format 'const char *'
|-FunctionDecl 0x1ace20681a8 <line:303:24, col:101> col:36 _scprintf 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1ace20680c8 <col:76, col:89> col:89 _Format 'const char *'
|-FunctionDecl 0x1ace2068580 <line:304:70> col:70 implicit sscanf 'int (const char *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x1ace2068620 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1ace2068688 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| `-FormatAttr 0x1ace2068700 <col:70> Implicit scanf 2 3
|-FunctionDecl 0x1ace2068768 prev 0x1ace2068580 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:304:157> col:70 sscanf 'int (const char *restrict, const char *restrict, ...)'
| |-ParmVarDecl 0x1ace2068340 <col:84, col:97> col:97 _Src 'const char *'
| |-ParmVarDecl 0x1ace20683c0 <col:132, col:145> col:145 _Format 'const char *'
| |-FormatAttr 0x1ace2068948 <col:70> Inherited scanf 2 3
| `-DeprecatedAttr 0x1ace2068818 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2068d38 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:305:205> col:77 _sscanf_l 'int (const char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2068a58 <col:94, col:107> col:107 _Src 'const char *'
| |-ParmVarDecl 0x1ace2068ad8 <col:152, col:165> col:165 _Format 'const char *'
| |-ParmVarDecl 0x1ace2068b50 <col:183, col:193> col:193 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace2068df0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _sscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace206f150 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:309:40, col:143> col:52 sscanf_s 'int (const char *, const char *, ...) __attribute__((cdecl))':'int (const char *, const char *, ...)'
| |-ParmVarDecl 0x1ace2068f38 <col:68, col:81> col:81 _Src 'const char *'
| `-ParmVarDecl 0x1ace206f050 <col:118, col:131> col:131 _Format 'const char *'
|-FunctionDecl 0x1ace206f448 <line:311:40, col:184> col:52 _sscanf_s_l 'int (const char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace206f230 <col:71, col:84> col:84 _Src 'const char *'
| |-ParmVarDecl 0x1ace206f2b0 <col:131, col:144> col:144 _Format 'const char *'
| `-ParmVarDecl 0x1ace206f328 <col:162, col:172> col:172 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace206f8d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:312:217> col:76 _snscanf 'int (const char *, size_t, const char *, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1ace206f5f0 <col:121, col:134> col:134 _Src 'const char *'
| |-ParmVarDecl 0x1ace206f668 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace206f6e8 <col:192, col:205> col:205 _Format 'const char *'
| `-DeprecatedAttr 0x1ace206f990 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace206ff60 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:313:259> col:78 _snscanf_l 'int (const char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace206fbd0 <col:125, col:138> col:138 _Src 'const char *'
| |-ParmVarDecl 0x1ace206fc48 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace206fcc8 <col:206, col:219> col:219 _Format 'const char *'
| |-ParmVarDecl 0x1ace206fd40 <col:237, col:247> col:247 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace206b010 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace206b370 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:314:40, col:197> col:52 _snscanf_s 'int (const char *, size_t, const char *, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1ace206b158 <col:99, col:112> col:112 _Src 'const char *'
| |-ParmVarDecl 0x1ace206b1d0 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace206b250 <col:172, col:185> col:185 _Format 'const char *'
|-FunctionDecl 0x1ace206b708 <line:315:40, col:237> col:52 _snscanf_s_l 'int (const char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace206b458 <col:101, col:114> col:114 _Src 'const char *'
| |-ParmVarDecl 0x1ace206b4d0 <col:125, col:132> col:132 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace206b550 <col:184, col:197> col:197 _Format 'const char *'
| `-ParmVarDecl 0x1ace206b5c8 <col:215, col:225> col:225 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace206b968 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:317:86> col:74 tmpfile 'FILE *(void) __attribute__((cdecl))':'FILE *(void)'
| `-DeprecatedAttr 0x1ace206ba08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using tmpfile_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace206bcc0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:319:28, col:96> col:44 tmpfile_s 'errno_t (FILE **) __attribute__((cdecl))':'errno_t (FILE **)'
| `-ParmVarDecl 0x1ace206bb50 <col:83, col:91> col:91 _File 'FILE **'
|-FunctionDecl 0x1ace206d030 <line:320:28, col:106> col:44 tmpnam_s 'errno_t (char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t)'
| |-ParmVarDecl 0x1ace206bd98 <col:75, col:82> col:82 _Buf 'char *'
| `-ParmVarDecl 0x1ace206be10 <col:93, col:101> col:101 _Size 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1ace206d2b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:323:79 tmpnam 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1ace206d1d0 <col:113, col:119> col:119 _Buffer 'char *'
| `-DeprecatedAttr 0x1ace206d358 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using tmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace206d618 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:324:28, col:81> col:40 ungetc 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1ace206d4a0 <col:52, col:56> col:56 _Ch 'int'
| `-ParmVarDecl 0x1ace206d518 <col:69, col:76> col:76 _File 'FILE *'
|-FunctionDecl 0x1ace206da30 <line:325:40> col:40 implicit vfprintf 'int (FILE *, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1ace206dad0 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x1ace206db38 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1ace206dba0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1ace206dc20 <col:40> Implicit printf 2 0
|-FunctionDecl 0x1ace206dc88 prev 0x1ace206da30 <col:28, col:139> col:40 vfprintf 'int (FILE *, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1ace206d6f0 <col:57, col:64> col:64 _File 'FILE *'
| |-ParmVarDecl 0x1ace206d770 <col:101, col:114> col:114 _Format 'const char *'
| |-ParmVarDecl 0x1ace206d7e8 <col:123, col:131> col:131 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1ace206dd88 <col:40> Inherited printf 2 0
|-FunctionDecl 0x1ace2070060 <line:326:40> col:40 implicit vfscanf 'int (FILE *restrict, const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1ace2070100 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x1ace2070168 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1ace20701d0 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1ace2070250 <col:40> Implicit scanf 2 0
|-FunctionDecl 0x1ace20702b8 prev 0x1ace2070060 <col:28, col:138> col:40 vfscanf 'int (FILE *restrict, const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1ace206ddd0 <col:56, col:63> col:63 _File 'FILE *'
| |-ParmVarDecl 0x1ace206de50 <col:100, col:113> col:113 _Format 'const char *'
| |-ParmVarDecl 0x1ace206dec8 <col:122, col:130> col:130 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1ace20703b8 <col:40> Inherited scanf 2 0
|-FunctionDecl 0x1ace2070618 <line:328:28, col:141> col:40 vfprintf_s 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1ace2070400 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1ace2070480 <col:103, col:116> col:116 _Format 'const char *'
| `-ParmVarDecl 0x1ace20704f8 <col:125, col:133> col:133 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2070910 <line:329:28, col:140> col:40 vfscanf_s 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1ace20706f8 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1ace2070778 <col:102, col:115> col:115 _Format 'const char *'
| `-ParmVarDecl 0x1ace20707f0 <col:124, col:132> col:132 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2070c58 <line:331:40> col:40 implicit vprintf 'int (const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1ace2070cf8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1ace2070d60 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1ace2070dd8 <col:40> Implicit printf 1 0
|-FunctionDecl 0x1ace2070e40 prev 0x1ace2070c58 <col:28, col:116> col:40 vprintf 'int (const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1ace20709f8 <col:78, col:91> col:91 _Format 'const char *'
| |-ParmVarDecl 0x1ace2070a70 <col:100, col:108> col:108 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1ace2070f38 <col:40> Inherited printf 1 0
|-FunctionDecl 0x1ace2069128 <line:332:40> col:40 implicit vscanf 'int (const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1ace20691c8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1ace2069230 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1ace20692a8 <col:40> Implicit scanf 1 0
|-FunctionDecl 0x1ace2069310 prev 0x1ace2069128 <col:28, col:115> col:40 vscanf 'int (const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1ace2070f88 <col:77, col:90> col:90 _Format 'const char *'
| |-ParmVarDecl 0x1ace2068ff0 <col:99, col:107> col:107 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1ace2069408 <col:40> Inherited scanf 1 0
|-FunctionDecl 0x1ace20695d0 <line:334:28, col:118> col:40 vprintf_s 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1ace2069458 <col:80, col:93> col:93 _Format 'const char *'
| `-ParmVarDecl 0x1ace20694d0 <col:102, col:110> col:110 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2069828 <line:335:28, col:117> col:40 vscanf_s 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1ace20696b0 <col:79, col:92> col:92 _Format 'const char *'
| `-ParmVarDecl 0x1ace2069728 <col:101, col:109> col:109 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2069d88 <line:337:77> col:77 implicit vsnprintf 'int (char *, unsigned long long, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1ace2069e28 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1ace2069e90 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1ace2069ef8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1ace2069f60 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1ace20770d0 <col:77> Implicit printf 3 0
|-FunctionDecl 0x1ace2077138 prev 0x1ace2069d88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:337:218> col:77 vsnprintf 'int (char *, unsigned long long, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1ace20699c8 <col:111, col:118> col:118 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace2069a40 <col:132, col:139> col:139 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2069ac0 <col:180, col:193> col:193 _Format 'const char *'
| |-ParmVarDecl 0x1ace2069b38 <col:202, col:210> col:210 _ArgList 'va_list':'char *'
| |-FormatAttr 0x1ace2077328 <col:77> Inherited printf 3 0
| `-DeprecatedAttr 0x1ace20771f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2077798 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:339:28, col:206> col:40 vsnprintf_s 'int (char *, size_t, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1ace2077378 <col:77, col:84> col:84 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace20773f0 <col:98, col:105> col:105 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2077468 <col:120, col:127> col:127 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20774e8 <col:168, col:181> col:181 _Format 'const char *'
| `-ParmVarDecl 0x1ace2077560 <col:190, col:198> col:198 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2077bd8 <line:342:40, col:227> col:52 _vsnprintf_s 'int (char *, size_t, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1ace2077890 <col:94, col:101> col:101 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace2077908 <col:115, col:122> col:122 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2077980 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2077a00 <col:189, col:202> col:202 _Format 'const char *'
| `-ParmVarDecl 0x1ace2077a78 <col:211, col:219> col:219 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2077fa8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2003:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:346:89 _snprintf 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1ace2077d90 <col:182, col:188> col:188 _Dest 'char *'
| |-ParmVarDecl 0x1ace2077e08 <col:200, col:208> col:208 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2077e88 <col:246, col:260> col:260 _Format 'const char *'
| `-DeprecatedAttr 0x1ace2078060 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2078550 <col:36, line:2004:164> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:346:100 _vsnprintf 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1ace20782a0 <col:182, col:188> col:188 _Dest 'char *'
| |-ParmVarDecl 0x1ace2078318 <col:200, col:208> col:208 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2078398 <col:246, col:260> col:260 _Format 'const char *'
| |-ParmVarDecl 0x1ace2078410 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:2004:151, col:159> col:159 _Args 'va_list':'char *'
| `-DeprecatedAttr 0x1ace2078610 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2078a08 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:349:21, col:183> col:33 vsprintf_s 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1ace2078758 <col:73, col:80> col:80 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace20787d0 <col:94, col:101> col:101 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2078850 <col:145, col:158> col:158 _Format 'const char *'
| `-ParmVarDecl 0x1ace20788c8 <col:167, col:175> col:175 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2078dc8 <line:351:40, col:149> col:52 vsscanf_s 'int (const char *, const char *, va_list) __attribute__((cdecl))':'int (const char *, const char *, va_list)'
| |-ParmVarDecl 0x1ace2078af8 <col:62, col:75> col:75 _Src 'const char *'
| |-ParmVarDecl 0x1ace2078b78 <col:111, col:124> col:124 _Format 'const char *'
| `-ParmVarDecl 0x1ace2078bf0 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2072120 <line:356:85> col:85 implicit sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x1ace20721c0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1ace2072228 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x1ace20722a0 <col:85> Implicit printf 2 3
|-FunctionDecl 0x1ace2072308 prev 0x1ace2072120 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1957:138> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:85 sprintf 'int (char *, const char *, ...)'
| |-ParmVarDecl 0x1ace2078f70 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1ace2078ff0 <col:171, col:185> col:185 _Format 'const char *'
| |-FormatAttr 0x1ace20724e8 <col:85> Inherited printf 2 3
| `-DeprecatedAttr 0x1ace20723b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2072910 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94> col:94 implicit vsprintf 'int (char *, const char *, __builtin_va_list)' extern
| |-ParmVarDecl 0x1ace20729b0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1ace2072a18 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1ace2072a80 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1ace2072b00 <col:94> Implicit printf 2 0
|-FunctionDecl 0x1ace2072b68 prev 0x1ace2072910 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1958:150> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94 vsprintf 'int (char *, const char *, __builtin_va_list)'
| |-ParmVarDecl 0x1ace20725f8 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1ace2072678 <col:171, col:185> col:185 _Format 'const char *'
| |-ParmVarDecl 0x1ace20726f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1958:137, col:145> col:145 _Args 'va_list':'char *'
| |-FormatAttr 0x1ace2072d50 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:356:94> Inherited printf 2 0
| `-DeprecatedAttr 0x1ace2072c20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using vsprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2073090 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:357:40> col:40 implicit vsscanf 'int (const char *restrict, const char *restrict, __builtin_va_list)' extern
| |-ParmVarDecl 0x1ace2073130 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1ace2073198 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x1ace2073200 <<invalid sloc>> <invalid sloc> '__builtin_va_list':'char *'
| `-FormatAttr 0x1ace2073280 <col:40> Implicit scanf 2 0
|-FunctionDecl 0x1ace20732e8 prev 0x1ace2073090 <col:28, col:138> col:40 vsscanf 'int (const char *restrict, const char *restrict, __builtin_va_list)'
| |-ParmVarDecl 0x1ace2072da0 <col:48, col:61> col:61 _srcBuf 'const char *'
| |-ParmVarDecl 0x1ace2072e20 <col:100, col:113> col:113 _Format 'const char *'
| |-ParmVarDecl 0x1ace2072e98 <col:122, col:130> col:130 _ArgList 'va_list':'char *'
| `-FormatAttr 0x1ace20733e8 <col:40> Inherited scanf 2 0
|-FunctionDecl 0x1ace20735b0 <line:359:24, col:115> col:36 _vscprintf 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1ace2073438 <col:77, col:90> col:90 _Format 'const char *'
| `-ParmVarDecl 0x1ace20734b0 <col:99, col:107> col:107 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace20738a8 <line:360:28, col:170> col:40 _snprintf_c 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1ace2073690 <col:76, col:83> col:83 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace2073708 <col:97, col:104> col:104 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace2073788 <col:145, col:158> col:158 _Format 'const char *'
|-FunctionDecl 0x1ace2073c40 <line:361:28, col:183> col:40 _vsnprintf_c 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1ace2073990 <col:77, col:83> col:83 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace2073a08 <col:97, col:104> col:104 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2073a88 <col:145, col:158> col:158 _Format 'const char *'
| `-ParmVarDecl 0x1ace2073b00 <col:167, col:175> col:175 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2073ea8 <line:363:28, col:128> col:40 _fprintf_p 'int (FILE *, const char *, ...) __attribute__((cdecl))':'int (FILE *, const char *, ...)'
| |-ParmVarDecl 0x1ace2073d28 <col:59, col:66> col:66 _File 'FILE *'
| `-ParmVarDecl 0x1ace2073da8 <col:103, col:116> col:116 _Format 'const char *'
|-FunctionDecl 0x1ace20740a0 <line:364:28, col:105> col:40 _printf_p 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1ace2073f88 <col:80, col:93> col:93 _Format 'const char *'
|-FunctionDecl 0x1ace2074390 <line:365:28, col:168> col:40 _sprintf_p 'int (char *, size_t, const char *, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1ace2074178 <col:77, col:84> col:84 _Dst 'char *'
| |-ParmVarDecl 0x1ace20741f0 <col:95, col:102> col:102 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace2074270 <col:143, col:156> col:156 _Format 'const char *'
|-FunctionDecl 0x1ace2074688 <line:366:28, col:142> col:40 _vfprintf_p 'int (FILE *, const char *, va_list) __attribute__((cdecl))':'int (FILE *, const char *, va_list)'
| |-ParmVarDecl 0x1ace2074470 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1ace20744f0 <col:104, col:117> col:117 _Format 'const char *'
| `-ParmVarDecl 0x1ace2074568 <col:126, col:134> col:134 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace20748e8 <line:367:28, col:119> col:40 _vprintf_p 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1ace2074770 <col:81, col:94> col:94 _Format 'const char *'
| `-ParmVarDecl 0x1ace20747e8 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2074c78 <line:368:28, col:182> col:40 _vsprintf_p 'int (char *, size_t, const char *, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, va_list)'
| |-ParmVarDecl 0x1ace20749c8 <col:78, col:85> col:85 _Dst 'char *'
| |-ParmVarDecl 0x1ace2074a40 <col:96, col:103> col:103 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2074ac0 <col:144, col:157> col:157 _Format 'const char *'
| `-ParmVarDecl 0x1ace2074b38 <col:166, col:174> col:174 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2074e48 <line:369:24, col:103> col:36 _scprintf_p 'int (const char *, ...) __attribute__((cdecl))':'int (const char *, ...)'
| `-ParmVarDecl 0x1ace2074d68 <col:78, col:91> col:91 _Format 'const char *'
|-FunctionDecl 0x1ace20790f0 <line:370:24, col:117> col:36 _vscprintf_p 'int (const char *, va_list) __attribute__((cdecl))':'int (const char *, va_list)'
| |-ParmVarDecl 0x1ace2074f20 <col:79, col:92> col:92 _Format 'const char *'
| `-ParmVarDecl 0x1ace2074f98 <col:101, col:109> col:109 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace20792b0 <line:371:9, col:61> col:21 _set_printf_count_output 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace20791d0 <col:51, col:55> col:55 _Value 'int'
|-FunctionDecl 0x1ace2079440 <line:372:9, col:50> col:21 _get_printf_count_output 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1ace2079688 <line:374:28, col:143> col:40 _printf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2079510 <col:90, col:103> col:103 _Format 'const char *'
| `-ParmVarDecl 0x1ace2079588 <col:121, col:131> col:131 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20798e0 <line:375:28, col:145> col:40 _printf_p_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2079768 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1ace20797e0 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2079b38 <line:376:28, col:145> col:40 _printf_s_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace20799c0 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1ace2079a38 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2079ee8 <line:377:28, col:157> col:40 _vprintf_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2079c18 <col:91, col:104> col:104 _Format 'const char *'
| |-ParmVarDecl 0x1ace2079c90 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2079d08 <col:141, col:149> col:149 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207a220 <line:378:28, col:159> col:40 _vprintf_p_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2079fd0 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1ace207a048 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace207a100 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207a518 <line:379:28, col:159> col:40 _vprintf_s_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace207a308 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1ace207a380 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace207a3f8 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207a810 <line:381:28, col:166> col:40 _fprintf_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace207a5f8 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1ace207a678 <col:113, col:126> col:126 _Format 'const char *'
| `-ParmVarDecl 0x1ace207a6f0 <col:144, col:154> col:154 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace207ab08 <line:382:28, col:168> col:40 _fprintf_p_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace207a8f0 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1ace207a970 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1ace207a9e8 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace207ae00 <line:383:28, col:168> col:40 _fprintf_s_l 'int (FILE *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace207abe8 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1ace207ac68 <col:115, col:128> col:128 _Format 'const char *'
| `-ParmVarDecl 0x1ace207ace0 <col:146, col:156> col:156 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2075210 <line:384:28, col:147> col:40 _vfprintf_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace207aee0 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1ace207af60 <col:81, col:94> col:94 _Format 'const char *'
| |-ParmVarDecl 0x1ace207afd8 <col:112, col:122> col:122 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace207b050 <col:131, col:139> col:139 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace20755a8 <line:385:28, col:149> col:40 _vfprintf_p_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace20752f8 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1ace2075378 <col:83, col:96> col:96 _Format 'const char *'
| |-ParmVarDecl 0x1ace20753f0 <col:114, col:124> col:124 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2075468 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2075940 <line:386:28, col:149> col:40 _vfprintf_s_l 'int (FILE *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2075690 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1ace2075710 <col:83, col:96> col:96 _Format 'const char *'
| |-ParmVarDecl 0x1ace2075788 <col:114, col:124> col:124 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2075800 <col:133, col:141> col:141 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2075dd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:388:221> col:78 _sprintf_l 'int (char *, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2075af0 <col:112, col:119> col:119 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace2075b70 <col:168, col:181> col:181 _Format 'const char *'
| |-ParmVarDecl 0x1ace2075be8 <col:199, col:209> col:209 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace2075e90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _sprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace207b420 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:389:28, col:211> col:40 _sprintf_p_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2075fd8 <col:79, col:86> col:86 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace207b110 <col:100, col:107> col:107 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace207b190 <col:158, col:171> col:171 _Format 'const char *'
| `-ParmVarDecl 0x1ace207b208 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace207b7c0 <line:390:40, col:221> col:52 _sprintf_s_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace207b510 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace207b588 <col:111, col:118> col:118 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace207b608 <col:168, col:181> col:181 _Format 'const char *'
| `-ParmVarDecl 0x1ace207b680 <col:199, col:209> col:209 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace207bd10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:391:195> col:79 _vsprintf_l 'int (char *, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace207b9b0 <col:114, col:121> col:121 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace207ba30 <col:137, col:150> col:150 _Format 'const char *'
| |-ParmVarDecl 0x1ace207baa8 <col:168> col:177 '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1ace207bb20 <col:179, col:187> col:187 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1ace207bdd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace207c358 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:392:28, col:225> col:40 _vsprintf_p_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace207bf18 <col:80, col:87> col:87 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace207bf90 <col:101, col:108> col:108 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace207c010 <col:159, col:171> col:171 _Format 'const char *'
| |-ParmVarDecl 0x1ace207c088 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace207c120 <col:209, col:217> col:217 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207c798 <line:393:40, col:235> col:52 _vsprintf_s_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace207c450 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace207c4c8 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace207c548 <col:169, col:182> col:182 _Format 'const char *'
| |-ParmVarDecl 0x1ace207c5c0 <col:200, col:210> col:210 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace207c638 <col:219, col:227> col:227 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207ca08 <line:395:28, col:145> col:40 _scprintf_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace207c890 <col:92, col:105> col:105 _Format 'const char *'
| `-ParmVarDecl 0x1ace207c908 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace207cc60 <line:396:28, col:147> col:40 _scprintf_p_l 'int (const char *, _locale_t, ...) __attribute__((cdecl))':'int (const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace207cae8 <col:94, col:107> col:107 _Format 'const char *'
| `-ParmVarDecl 0x1ace207cb60 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace207cf50 <line:397:28, col:159> col:40 _vscprintf_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace207cd40 <col:93, col:106> col:106 _Format 'const char *'
| |-ParmVarDecl 0x1ace207cdb8 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace207ce30 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207d260 <line:398:28, col:161> col:40 _vscprintf_p_l 'int (const char *, _locale_t, va_list) __attribute__((cdecl))':'int (const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace207d038 <col:95, col:108> col:108 _Format 'const char *'
| |-ParmVarDecl 0x1ace207d0b0 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace207d140 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207d6b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:400:247> col:79 _snprintf_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace207d408 <col:115, col:122> col:122 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace207d480 <col:136, col:143> col:143 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace207d500 <col:194, col:207> col:207 _Format 'const char *'
| |-ParmVarDecl 0x1ace207d578 <col:225, col:235> col:235 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace207d778 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace207db70 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:401:28, col:210> col:40 _snprintf_c_l 'int (char *, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace207d8c0 <col:78, col:85> col:85 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace207d938 <col:99, col:106> col:106 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace207d9b8 <col:157, col:170> col:170 _Format 'const char *'
| `-ParmVarDecl 0x1ace207da30 <col:188, col:198> col:198 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20760c0 <line:402:40, col:245> col:52 _snprintf_s_l 'int (char *, size_t, size_t, const char *, _locale_t, ...) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace207dc60 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace207dcd8 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace207dd50 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace207ddd0 <col:192, col:205> col:205 _Format 'const char *'
| `-ParmVarDecl 0x1ace207de48 <col:223, col:233> col:233 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2076600 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:403:262> col:80 _vsnprintf_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace20762b8 <col:117, col:124> col:124 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace2076330 <col:138, col:145> col:145 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20763b0 <col:196, col:209> col:209 _Format 'const char *'
| |-ParmVarDecl 0x1ace2076428 <col:227, col:237> col:237 _Locale '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1ace20764a0 <col:246, col:254> col:254 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1ace20766c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2076b48 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:404:28, col:176> col:40 _vsnprintf_c_l 'int (char *, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2076818 <col:79, col:86> col:86 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace2076890 <col:100, col:107> col:107 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2076910 <col:118, col:129> col:130 'const char *'
| |-ParmVarDecl 0x1ace2076988 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2076a00 <col:160, col:168> col:168 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace20821e0 <line:405:28, col:245> col:40 _vsnprintf_s_l 'int (char *, size_t, size_t, const char *, _locale_t, va_list) __attribute__((cdecl))':'int (char *, size_t, size_t, const char *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2076c40 <col:80, col:87> col:87 _DstBuf 'char *'
| |-ParmVarDecl 0x1ace2076cb8 <col:101, col:108> col:108 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2076d30 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2076db0 <col:181, col:193> col:193 _Format 'const char *'
| |-ParmVarDecl 0x1ace2076e28 <col:210, col:220> col:220 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2076ea0 <col:229, col:237> col:237 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace20825a0 <line:415:24, col:128> col:39 _wfsopen 'FILE *(const wchar_t *, const wchar_t *, int) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *, int)'
| |-ParmVarDecl 0x1ace20822d8 <col:55, col:71> col:71 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1ace2082350 <col:89, col:105> col:105 _Mode 'const wchar_t *'
| `-ParmVarDecl 0x1ace20823d0 <col:117, col:121> col:121 _ShFlag 'int'
|-FunctionDecl 0x1ace2082810 <line:417:28, col:70> col:43 fgetwc 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1ace20826a0 <col:58, col:65> col:65 _File 'FILE *'
|-FunctionDecl 0x1ace2082a28 <line:418:28, col:58> col:43 _fgetwchar 'wint_t (void) __attribute__((cdecl))':'wint_t (void)'
|-FunctionDecl 0x1ace2082d08 <line:419:28, col:88> col:43 fputwc 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1ace2082af0 <col:55, col:63> col:63 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1ace2082b68 <col:76, col:83> col:83 _File 'FILE *'
|-FunctionDecl 0x1ace2082f50 <line:420:28, col:70> col:43 _fputwchar 'wint_t (wchar_t) __attribute__((cdecl))':'wint_t (wchar_t)'
| `-ParmVarDecl 0x1ace2082de0 <col:59, col:67> col:67 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1ace2081170 <line:421:24, col:65> col:39 getwc 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1ace2083020 <col:53, col:60> col:60 _File 'FILE *'
|-FunctionDecl 0x1ace20812f8 <line:422:24, col:52> col:39 getwchar 'wint_t (void) __attribute__((cdecl))':'wint_t (void)'
|-FunctionDecl 0x1ace2081530 <line:423:28, col:87> col:43 putwc 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1ace20813c0 <col:54, col:62> col:62 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1ace2081438 <col:75, col:82> col:82 _File 'FILE *'
|-FunctionDecl 0x1ace20816e0 <line:424:28, col:68> col:43 putwchar 'wint_t (wchar_t) __attribute__((cdecl))':'wint_t (wchar_t)'
| `-ParmVarDecl 0x1ace2081608 <col:57, col:65> col:65 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1ace2081988 <line:425:28, col:88> col:43 ungetwc 'wint_t (wint_t, FILE *) __attribute__((cdecl))':'wint_t (wint_t, FILE *)'
| |-ParmVarDecl 0x1ace20817b0 <col:56, col:63> col:63 _Ch 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace2081828 <col:76, col:83> col:83 _File 'FILE *'
|-FunctionDecl 0x1ace2081d30 <line:427:28, col:141> col:46 fgetws 'wchar_t *(wchar_t *, int, FILE *) __attribute__((cdecl))':'wchar_t *(wchar_t *, int, FILE *)'
| |-ParmVarDecl 0x1ace2081a60 <col:82, col:92> col:92 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace2081ae0 <col:103, col:107> col:107 _SizeInWords 'int'
| `-ParmVarDecl 0x1ace2081b58 <col:129, col:136> col:136 _File 'FILE *'
|-FunctionDecl 0x1ace2082030 <line:428:28, col:96> col:40 fputws 'int (const wchar_t *, FILE *) __attribute__((cdecl))':'int (const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1ace2081e10 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1ace2081e88 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1ace2085368 <line:429:28, col:124> col:46 _getws_s 'wchar_t *(wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace2082108 <col:84, col:94> col:94 _Str 'wchar_t *'
| `-ParmVarDecl 0x1ace20851c0 <col:105, col:112> col:112 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace2085670 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:431:83 _getws 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1ace2085500 <col:115, col:124> col:124 _String 'wchar_t *'
| `-DeprecatedAttr 0x1ace2085718 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _getws_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20859d8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:432:28, col:74> col:40 _putws 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1ace2085858 <col:54, col:70> col:70 _Str 'const wchar_t *'
|-FunctionDecl 0x1ace2085ce0 <line:434:28, col:129> col:40 fwprintf 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace2085aa8 <col:57, col:64> col:64 _File 'FILE *'
| `-ParmVarDecl 0x1ace2085b20 <col:101, col:117> col:117 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace2085f30 <line:436:28, col:131> col:40 fwprintf_s 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace2085db8 <col:59, col:66> col:66 _File 'FILE *'
| `-ParmVarDecl 0x1ace2085e30 <col:103, col:119> col:119 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace207e140 <line:438:28, col:106> col:40 wprintf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1ace2086008 <col:78, col:94> col:94 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace207e2f0 <line:440:28, col:108> col:40 wprintf_s 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1ace207e210 <col:80, col:96> col:96 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace207e4a0 <line:442:24, col:105> col:36 _scwprintf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1ace207e3c0 <col:77, col:93> col:93 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace207e838 <line:443:28, col:143> col:40 vfwprintf 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace207e570 <col:58, col:65> col:65 _File 'FILE *'
| |-ParmVarDecl 0x1ace207e5e8 <col:102, col:118> col:118 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace207e660 <col:127, col:135> col:135 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207eb28 <line:444:28, col:142> col:40 vfwscanf 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace207e918 <col:57, col:64> col:64 _File 'FILE *'
| |-ParmVarDecl 0x1ace207e990 <col:101, col:117> col:117 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace207ea08 <col:126, col:134> col:134 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207ee18 <line:446:28, col:145> col:40 vfwprintf_s 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace207ec08 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1ace207ec80 <col:104, col:120> col:120 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace207ecf8 <col:129, col:137> col:137 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207f150 <line:447:28, col:144> col:40 vfwscanf_s 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace207eef8 <col:59, col:66> col:66 _File 'FILE *'
| |-ParmVarDecl 0x1ace207ef70 <col:103, col:119> col:119 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace207efe8 <col:128, col:136> col:136 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207f450 <line:449:28, col:120> col:40 vwprintf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace207f230 <col:79, col:95> col:95 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace207f2a8 <col:104, col:112> col:112 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207f6a0 <line:450:28, col:119> col:40 vwscanf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace207f528 <col:78, col:94> col:94 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace207f5a0 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207f8f0 <line:452:28, col:122> col:40 vwprintf_s 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace207f778 <col:81, col:97> col:97 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace207f7f0 <col:106, col:114> col:114 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207fb40 <line:453:28, col:121> col:40 vwscanf_s 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace207f9c8 <col:80, col:96> col:96 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace207fa40 <col:105, col:113> col:113 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace207fef8 <line:457:21, col:173> col:33 swprintf_s 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace207fc18 <col:73, col:83> col:83 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace207fc90 <col:94, col:101> col:101 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace207fd08 <col:145, col:161> col:161 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace2080370 <line:461:21, col:187> col:33 vswprintf_s 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace207ffd8 <col:74, col:84> col:84 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace2080050 <col:95, col:102> col:102 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20800c8 <col:146, col:162> col:162 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2080160 <col:171, col:179> col:179 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2080728 <line:462:40, col:156> col:52 vswscanf_s 'int (const wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace2080458 <col:63, col:79> col:79 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1ace20804d0 <col:115, col:131> col:131 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2080548 <col:140, col:148> col:148 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2080a18 <line:466:28, col:145> col:40 vswscanf 'int (const wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace2080808 <col:49, col:65> col:65 _srcBuf 'const wchar_t *'
| |-ParmVarDecl 0x1ace2080880 <col:104, col:120> col:120 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace20808f8 <col:129, col:137> col:137 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2080d08 <line:468:28, col:184> col:40 _swprintf_c 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace2080af8 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace2080b70 <col:105, col:112> col:112 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace2080be8 <col:156, col:172> col:172 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace2081090 <line:469:28, col:198> col:40 _vswprintf_c 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace2080de8 <col:82, col:92> col:92 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace2080e60 <col:106, col:113> col:113 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2080ed8 <col:157, col:173> col:173 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2080f50 <col:182, col:190> col:190 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2084550 <line:471:40, col:220> col:52 _snwprintf_s 'int (wchar_t *, size_t, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace20841c8 <col:94, col:104> col:104 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace2084240 <col:118, col:125> col:125 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20842b8 <col:144, col:151> col:151 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace2084330 <col:192, col:208> col:208 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace2084a58 <line:473:40, col:234> col:52 _vsnwprintf_s 'int (wchar_t *, size_t, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace2084638 <col:95, col:105> col:105 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace20846b0 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2084728 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20847a0 <col:193, col:209> col:209 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2084818 <col:218, col:226> col:226 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2084e18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2003:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:477:89 _snwprintf 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace2084c08 <col:187, col:196> col:196 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1ace2084c80 <col:208, col:216> col:216 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2084cf8 <col:254, col:271> col:271 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1ace2084ed0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2088230 <col:36, line:2004:164> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:477:101 _vsnwprintf 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace20850d0 <col:187, col:196> col:196 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1ace2088000 <col:208, col:216> col:216 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2088078 <col:254, col:271> col:271 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace20880f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:2004:151, col:159> col:159 _Args 'va_list':'char *'
| `-DeprecatedAttr 0x1ace20882f0 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20885a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:480:28, col:132> col:40 _fwprintf_p 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace2088430 <col:60, col:67> col:67 _File 'FILE *'
| `-ParmVarDecl 0x1ace20884a8 <col:104, col:120> col:120 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace2088760 <line:481:28, col:109> col:40 _wprintf_p 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1ace2088680 <col:81, col:97> col:97 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace2088a40 <line:482:28, col:146> col:40 _vfwprintf_p 'int (FILE *, const wchar_t *, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace2088830 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1ace20888a8 <col:105, col:121> col:121 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2088920 <col:130, col:138> col:138 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2088c98 <line:483:28, col:123> col:40 _vwprintf_p 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace2088b20 <col:82, col:98> col:98 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2088b98 <col:107, col:115> col:115 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace208a020 <line:484:28, col:178> col:40 _swprintf_p 'int (wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace2088d70 <col:78, col:88> col:88 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace2088de8 <col:102, col:109> col:109 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace2088e60 <col:150, col:166> col:166 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace208a3a8 <line:485:28, col:192> col:40 _vswprintf_p 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace208a100 <col:79, col:89> col:89 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace208a178 <col:103, col:110> col:110 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace208a1f0 <col:151, col:167> col:167 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace208a268 <col:176, col:184> col:184 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace208a570 <line:486:24, col:107> col:36 _scwprintf_p 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1ace208a490 <col:79, col:95> col:95 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace208a7b8 <line:487:24, col:121> col:36 _vscwprintf_p 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace208a640 <col:80, col:96> col:96 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace208a6b8 <col:105, col:113> col:113 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace208aac0 <line:489:28, col:147> col:40 _wprintf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace208a890 <col:91, col:107> col:107 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace208a908 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace208ad10 <line:490:28, col:149> col:40 _wprintf_p_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace208ab98 <col:93, col:109> col:109 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace208ac10 <col:127, col:137> col:137 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace208af60 <line:491:28, col:149> col:40 _wprintf_s_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace208ade8 <col:93, col:109> col:109 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace208ae60 <col:127, col:137> col:137 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace208b328 <line:492:28, col:161> col:40 _vwprintf_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace208b058 <col:92, col:108> col:108 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208b0d0 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace208b148 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace208b618 <line:493:28, col:163> col:40 _vwprintf_p_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace208b408 <col:94, col:110> col:110 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208b480 <col:128, col:138> col:138 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace208b4f8 <col:147, col:155> col:155 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace208b908 <line:494:28, col:163> col:40 _vwprintf_s_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace208b6f8 <col:94, col:110> col:110 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208b770 <col:128, col:138> col:138 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace208b7e8 <col:147, col:155> col:155 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace208bcc8 <line:496:28, col:170> col:40 _fwprintf_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace208b9e8 <col:60, col:67> col:67 _File 'FILE *'
| |-ParmVarDecl 0x1ace208ba60 <col:114, col:130> col:130 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace208bad8 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace208c040 <line:497:28, col:172> col:40 _fwprintf_p_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace208bda8 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1ace208be20 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace208be98 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace208c330 <line:498:28, col:172> col:40 _fwprintf_s_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace208c120 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1ace208c198 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace208c210 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace208c780 <line:499:28, col:184> col:40 _vfwprintf_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace208c410 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1ace208c488 <col:115, col:131> col:131 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208c500 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace208c578 <col:168, col:176> col:176 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace208cb10 <line:500:28, col:186> col:40 _vfwprintf_p_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace208c868 <col:63, col:70> col:70 _File 'FILE *'
| |-ParmVarDecl 0x1ace208c8e0 <col:117, col:133> col:133 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208c958 <col:151, col:161> col:161 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace208c9d0 <col:170, col:178> col:178 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace208cea0 <line:501:28, col:186> col:40 _vfwprintf_s_l 'int (FILE *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace208cbf8 <col:63, col:70> col:70 _File 'FILE *'
| |-ParmVarDecl 0x1ace208cc70 <col:117, col:133> col:133 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208cce8 <col:151, col:161> col:161 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace208cd60 <col:170, col:178> col:178 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2090390 <line:503:28, col:218> col:40 _swprintf_c_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace208cf88 <col:80, col:90> col:90 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace2090080 <col:104, col:111> col:111 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20900f8 <col:162, col:178> col:178 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2090170 <col:196, col:206> col:206 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2090720 <line:504:28, col:218> col:40 _swprintf_p_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2090478 <col:80, col:90> col:90 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace20904f0 <col:104, col:111> col:111 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2090568 <col:162, col:178> col:178 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace20905e0 <col:196, col:206> col:206 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2090ab0 <line:505:40, col:228> col:52 _swprintf_s_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2090808 <col:91, col:101> col:101 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace2090880 <col:115, col:122> col:122 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20908f8 <col:172, col:188> col:188 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2090970 <col:206, col:216> col:216 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2090fb8 <line:506:28, col:232> col:40 used _vswprintf_c_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2090b98 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace2090c10 <col:105, col:112> col:112 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2090c88 <col:163, col:179> col:179 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace2090d00 <col:197, col:207> col:207 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2090d78 <col:216, col:224> col:224 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2089378 <line:507:28, col:232> col:40 _vswprintf_p_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2089038 <col:81, col:91> col:91 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace20890b0 <col:105, col:112> col:112 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2089128 <col:163, col:179> col:179 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace20891a0 <col:197, col:207> col:207 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2089218 <col:216, col:224> col:224 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace20897a8 <line:508:40, col:242> col:52 _vswprintf_s_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2089468 <col:92, col:102> col:102 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace20894e0 <col:116, col:123> col:123 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2089558 <col:173, col:189> col:189 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace20895d0 <col:207, col:217> col:217 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2089648 <col:226, col:234> col:234 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2089a10 <line:510:24, col:145> col:36 _scwprintf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2089898 <col:89, col:105> col:105 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2089910 <col:123, col:133> col:133 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2089c60 <line:511:24, col:147> col:36 _scwprintf_p_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2089ae8 <col:91, col:107> col:107 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2089b60 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2089f48 <line:512:24, col:161> col:36 _vscwprintf_p_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2089d38 <col:92, col:108> col:108 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace2089db0 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2089e28 <col:145, col:153> col:153 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2093448 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:514:255> col:80 _snwprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace20931a0 <col:117, col:127> col:127 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace2093218 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2093290 <col:199, col:215> col:215 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace2093308 <col:233, col:243> col:243 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace2093508 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2093a78 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:515:40, col:252> col:52 _snwprintf_s_l 'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2093650 <col:92, col:102> col:102 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace20936c8 <col:116, col:123> col:123 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2093740 <col:138, col:145> col:145 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20937b8 <col:196, col:212> col:212 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2093830 <col:230, col:240> col:240 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2093fb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:516:270> col:81 _vsnwprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2093c70 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace2093ce8 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2093d60 <col:201, col:217> col:217 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace2093dd8 <col:235, col:245> col:245 _Locale '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1ace2093e50 <col:254, col:262> col:262 _ArgList 'va_list':'char *'
| `-DeprecatedAttr 0x1ace20940c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _vsnwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20946d0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:517:40, col:266> col:52 _vsnwprintf_s_l 'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, size_t, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2094208 <col:93, col:103> col:103 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1ace2094280 <col:117, col:124> col:124 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20942f8 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2094370 <col:197, col:213> col:213 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace20943e8 <col:231, col:241> col:241 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2094460 <col:250, col:258> col:258 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2094bd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1957:138> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:533:110 _swprintf 'int (wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace2094998 <col:183, col:192> col:192 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1ace2094a10 <col:229, col:246> col:246 _Format 'const wchar_t *'
| |-DeprecatedAttr 0x1ace2094c80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _swprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1ace2094d98 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1ace208d2b8 <col:36, line:1958:150> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:533:134 _vswprintf 'int (wchar_t *, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace2095050 <col:183, col:192> col:192 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1ace208d060 <col:229, col:246> col:246 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208d0d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1958:137, col:145> col:145 _Args 'va_list':'char *'
| |-DeprecatedAttr 0x1ace208d370 <line:275:47, col:63> "This function or variable may be unsafe. Consider using vswprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1ace208d488 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1ace208da28 <col:36, line:1961:152> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:534:110 __swprintf_l 'int (wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace208d748 <col:211, col:220> col:220 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1ace208d7c0 <col:267, col:284> col:284 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208d838 <col:293, col:304> col:304 _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-DeprecatedAttr 0x1ace208dae0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __swprintf_l_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1ace208dc00 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1ace20922b0 <col:36, line:1962:166> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:534:124 __vswprintf_l 'int (wchar_t *, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace208dec0 <col:211, col:220> col:220 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1ace208df38 <col:267, col:284> col:284 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208dfb0 <col:293, col:304> col:304 _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1ace20920a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:1962:153, col:161> col:161 _Args 'va_list':'char *'
| |-DeprecatedAttr 0x1ace2092370 <line:275:47, col:63> "This function or variable may be unsafe. Consider using _vswprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
| `-DeprecatedAttr 0x1ace2092490 <col:47, col:63> "swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS." ""
|-FunctionDecl 0x1ace2092798 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:36:1, line:44:1> line:36:21 swprintf 'int (wchar_t *, size_t, const wchar_t *, ...)' static inline
| |-ParmVarDecl 0x1ace20925b8 <col:53, col:63> col:63 used _String 'wchar_t *'
| |-ParmVarDecl 0x1ace2092630 <col:72, col:79> col:79 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20926a8 <col:117, col:133> col:133 used _Format 'const wchar_t *'
| `-CompoundStmt 0x1ace208e300 <line:37:1, line:44:1>
|   |-DeclStmt 0x1ace20928e0 <line:38:5, col:21>
|   | `-VarDecl 0x1ace2092878 <col:5, col:13> col:13 used _Arglist 'va_list':'char *'
|   |-DeclStmt 0x1ace2092978 <line:39:5, col:13>
|   | `-VarDecl 0x1ace2092910 <col:5, col:9> col:9 used _Ret 'int'
|   |-CallExpr 0x1ace2092cd0 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34, col:62> 'void'
|   | |-ImplicitCastExpr 0x1ace2092cb8 <col:34> 'void (*)(__builtin_va_list &, ...)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1ace2092bd0 <col:34> '<builtin fn type>' Function 0x1ace2092a68 '__builtin_va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1ace2092c08 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:40:19> 'va_list':'char *' lvalue Var 0x1ace2092878 '_Arglist' 'va_list':'char *'
|   | `-DeclRefExpr 0x1ace2092c40 <col:29> 'const wchar_t *' lvalue ParmVar 0x1ace20926a8 '_Format' 'const wchar_t *'
|   |-BinaryOperator 0x1ace2092f90 <line:41:5, col:67> 'int' '='
|   | |-DeclRefExpr 0x1ace2092d00 <col:5> 'int' lvalue Var 0x1ace2092910 '_Ret' 'int'
|   | `-CallExpr 0x1ace2092ed0 <col:12, col:67> 'int'
|   |   |-ImplicitCastExpr 0x1ace2092eb8 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1ace2092d38 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1ace2090fb8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|   |   |-ImplicitCastExpr 0x1ace2092f18 <col:27> 'wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace2092d58 <col:27> 'wchar_t *' lvalue ParmVar 0x1ace20925b8 '_String' 'wchar_t *'
|   |   |-ImplicitCastExpr 0x1ace2092f30 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace2092d78 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1ace2092630 '_Count' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1ace2092f48 <col:44> 'const wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace2092d98 <col:44> 'const wchar_t *' lvalue ParmVar 0x1ace20926a8 '_Format' 'const wchar_t *'
|   |   |-ImplicitCastExpr 0x1ace2092f60 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> '_locale_t':'struct localeinfo_struct *' <NullToPointer>
|   |   | `-ParenExpr 0x1ace2092e20 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x1ace2092df8 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x1ace2092db8 <col:26> 'int' 0
|   |   `-ImplicitCastExpr 0x1ace2092f78 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:41:59> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1ace2092e40 <col:59> 'va_list':'char *' lvalue Var 0x1ace2092878 '_Arglist' 'va_list':'char *'
|   |-CallExpr 0x1ace208e290 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:27:34, col:53> 'void'
|   | |-ImplicitCastExpr 0x1ace208e278 <col:34> 'void (*)(__builtin_va_list &)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1ace208e1c8 <col:34> '<builtin fn type>' Function 0x1ace208e060 '__builtin_va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1ace208e200 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:42:17> 'va_list':'char *' lvalue Var 0x1ace2092878 '_Arglist' 'va_list':'char *'
|   `-ReturnStmt 0x1ace208e2f0 <line:43:5, col:12>
|     `-ImplicitCastExpr 0x1ace208e2d8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1ace208e2b8 <col:12> 'int' lvalue Var 0x1ace2092910 '_Ret' 'int'
|-FunctionDecl 0x1ace2092a68 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34> col:34 implicit used __builtin_va_start 'void (__builtin_va_list &, ...)' extern
| |-ParmVarDecl 0x1ace2092b08 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1ace2092b78 <col:34> Implicit
|-FunctionDecl 0x1ace208e060 <line:27:34> col:34 implicit used __builtin_va_end 'void (__builtin_va_list &)' extern
| |-ParmVarDecl 0x1ace208e100 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1ace208e170 <col:34> Implicit
|-FunctionDecl 0x1ace208e5f8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:49:1, line:52:1> line:49:31 vswprintf 'int (wchar_t *, size_t, const wchar_t *, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, va_list)' static inline
| |-ParmVarDecl 0x1ace208e350 <col:64, col:74> col:74 used _String 'wchar_t *'
| |-ParmVarDecl 0x1ace208e3c8 <col:83, col:90> col:90 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace208e440 <col:138, col:154> col:154 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208e4b8 <col:163, col:171> col:171 used _Ap 'va_list':'char *'
| `-CompoundStmt 0x1ace208e8e0 <line:50:1, line:52:1>
|   `-ReturnStmt 0x1ace208e8d0 <line:51:5, col:62>
|     `-CallExpr 0x1ace208e810 <col:12, col:62> 'int'
|       |-ImplicitCastExpr 0x1ace208e7f8 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1ace208e6d0 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1ace2090fb8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|       |-ImplicitCastExpr 0x1ace208e858 <col:27> 'wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1ace208e6f0 <col:27> 'wchar_t *' lvalue ParmVar 0x1ace208e350 '_String' 'wchar_t *'
|       |-ImplicitCastExpr 0x1ace208e870 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1ace208e710 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1ace208e3c8 '_Count' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1ace208e888 <col:44> 'const wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1ace208e730 <col:44> 'const wchar_t *' lvalue ParmVar 0x1ace208e440 '_Format' 'const wchar_t *'
|       |-ImplicitCastExpr 0x1ace208e8a0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> '_locale_t':'struct localeinfo_struct *' <NullToPointer>
|       | `-ParenExpr 0x1ace208e7b8 <col:17, col:27> 'void *'
|       |   `-CStyleCastExpr 0x1ace208e790 <col:18, col:26> 'void *' <NullToPointer>
|       |     `-IntegerLiteral 0x1ace208e750 <col:26> 'int' 0
|       `-ImplicitCastExpr 0x1ace208e8b8 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:51:59> 'va_list':'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1ace208e7d8 <col:59> 'va_list':'char *' lvalue ParmVar 0x1ace208e4b8 '_Ap' 'va_list':'char *'
|-FunctionDecl 0x1ace208eb80 <line:60:1, line:68:1> line:60:21 _swprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, ...)' static inline
| |-ParmVarDecl 0x1ace208e908 <col:56, col:66> col:66 used _String 'wchar_t *'
| |-ParmVarDecl 0x1ace208e980 <col:75, col:82> col:82 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace208e9f8 <col:130, col:146> col:146 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace208ea70 <col:155, col:165> col:165 used _Plocinfo '_locale_t':'struct localeinfo_struct *'
| `-CompoundStmt 0x1ace2091138 <line:61:1, line:68:1>
|   |-DeclStmt 0x1ace208ecd0 <line:62:5, col:21>
|   | `-VarDecl 0x1ace208ec68 <col:5, col:13> col:13 used _Arglist 'va_list':'char *'
|   |-DeclStmt 0x1ace208ed68 <line:63:5, col:13>
|   | `-VarDecl 0x1ace208ed00 <col:5, col:9> col:9 used _Ret 'int'
|   |-CallExpr 0x1ace208ee10 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:23:34, col:62> 'void'
|   | |-ImplicitCastExpr 0x1ace208edf8 <col:34> 'void (*)(__builtin_va_list &, ...)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1ace208ed80 <col:34> '<builtin fn type>' Function 0x1ace2092a68 '__builtin_va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1ace208eda0 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:64:19> 'va_list':'char *' lvalue Var 0x1ace208ec68 '_Arglist' 'va_list':'char *'
|   | `-DeclRefExpr 0x1ace208edd8 <col:29> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1ace208ea70 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|   |-BinaryOperator 0x1ace208f010 <line:65:5, col:72> 'int' '='
|   | |-DeclRefExpr 0x1ace208ee40 <col:5> 'int' lvalue Var 0x1ace208ed00 '_Ret' 'int'
|   | `-CallExpr 0x1ace208ef50 <col:12, col:72> 'int'
|   |   |-ImplicitCastExpr 0x1ace208ef38 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1ace208ee78 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1ace2090fb8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|   |   |-ImplicitCastExpr 0x1ace208ef98 <col:27> 'wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace208ee98 <col:27> 'wchar_t *' lvalue ParmVar 0x1ace208e908 '_String' 'wchar_t *'
|   |   |-ImplicitCastExpr 0x1ace208efb0 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace208eeb8 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1ace208e980 '_Count' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1ace208efc8 <col:44> 'const wchar_t *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace208eed8 <col:44> 'const wchar_t *' lvalue ParmVar 0x1ace208e9f8 '_Format' 'const wchar_t *'
|   |   |-ImplicitCastExpr 0x1ace208efe0 <col:53> '_locale_t':'struct localeinfo_struct *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace208eef8 <col:53> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1ace208ea70 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|   |   `-ImplicitCastExpr 0x1ace208eff8 <col:64> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1ace208ef18 <col:64> 'va_list':'char *' lvalue Var 0x1ace208ec68 '_Arglist' 'va_list':'char *'
|   |-CallExpr 0x1ace20910c8 <D:\LLVM\lib\clang\10.0.0\include\vadefs.h:27:34, col:53> 'void'
|   | |-ImplicitCastExpr 0x1ace20910b0 <col:34> 'void (*)(__builtin_va_list &)' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x1ace208f030 <col:34> '<builtin fn type>' Function 0x1ace208e060 '__builtin_va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1ace2091090 <D:\Microsoft Visual Studio 12.0\VC\include\swprintf.inl:66:17> 'va_list':'char *' lvalue Var 0x1ace208ec68 '_Arglist' 'va_list':'char *'
|   `-ReturnStmt 0x1ace2091128 <line:67:5, col:12>
|     `-ImplicitCastExpr 0x1ace2091110 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1ace20910f0 <col:12> 'int' lvalue Var 0x1ace208ed00 '_Ret' 'int'
|-FunctionDecl 0x1ace20914c8 <line:73:1, line:76:1> line:73:31 _vswprintf_l 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' static inline
| |-ParmVarDecl 0x1ace2091188 <col:67, col:77> col:77 used _String 'wchar_t *'
| |-ParmVarDecl 0x1ace2091200 <col:86, col:93> col:93 used _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2091278 <col:141, col:157> col:157 used _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace20912f0 <col:166, col:176> col:176 used _Plocinfo '_locale_t':'struct localeinfo_struct *'
| |-ParmVarDecl 0x1ace2091368 <col:187, col:195> col:195 used _Ap 'va_list':'char *'
| `-CompoundStmt 0x1ace2091750 <line:74:1, line:76:1>
|   `-ReturnStmt 0x1ace2091740 <line:75:5, col:67>
|     `-CallExpr 0x1ace2091680 <col:12, col:67> 'int'
|       |-ImplicitCastExpr 0x1ace2091668 <col:12> 'int (*)(wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1ace20915a8 <col:12> 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)' Function 0x1ace2090fb8 '_vswprintf_c_l' 'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (wchar_t *, size_t, const wchar_t *, _locale_t, va_list)'
|       |-ImplicitCastExpr 0x1ace20916c8 <col:27> 'wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1ace20915c8 <col:27> 'wchar_t *' lvalue ParmVar 0x1ace2091188 '_String' 'wchar_t *'
|       |-ImplicitCastExpr 0x1ace20916e0 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1ace20915e8 <col:36> 'size_t':'unsigned long long' lvalue ParmVar 0x1ace2091200 '_Count' 'size_t':'unsigned long long'
|       |-ImplicitCastExpr 0x1ace20916f8 <col:44> 'const wchar_t *' <LValueToRValue>
|       | `-DeclRefExpr 0x1ace2091608 <col:44> 'const wchar_t *' lvalue ParmVar 0x1ace2091278 '_Format' 'const wchar_t *'
|       |-ImplicitCastExpr 0x1ace2091710 <col:53> '_locale_t':'struct localeinfo_struct *' <LValueToRValue>
|       | `-DeclRefExpr 0x1ace2091628 <col:53> '_locale_t':'struct localeinfo_struct *' lvalue ParmVar 0x1ace20912f0 '_Plocinfo' '_locale_t':'struct localeinfo_struct *'
|       `-ImplicitCastExpr 0x1ace2091728 <col:64> 'va_list':'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1ace2091648 <col:64> 'va_list':'char *' lvalue ParmVar 0x1ace2091368 '_Ap' 'va_list':'char *'
|-FunctionDecl 0x1ace2091998 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:555:24, col:129> col:42 _wtempnam 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace2091778 <col:63, col:79> col:79 _Directory 'const wchar_t *'
| `-ParmVarDecl 0x1ace20917f0 <col:102, col:118> col:118 _FilePrefix 'const wchar_t *'
|-FunctionDecl 0x1ace2091be8 <line:561:24, col:119> col:36 _vscwprintf 'int (const wchar_t *, va_list) __attribute__((cdecl))':'int (const wchar_t *, va_list)'
| |-ParmVarDecl 0x1ace2091a70 <col:78, col:94> col:94 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2091ae8 <col:103, col:111> col:111 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace2091ed0 <line:562:24, col:159> col:36 _vscwprintf_l 'int (const wchar_t *, _locale_t, va_list) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, va_list)'
| |-ParmVarDecl 0x1ace2091cc0 <col:90, col:106> col:106 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace2091d38 <col:124, col:134> col:134 _Locale '_locale_t':'struct localeinfo_struct *'
| `-ParmVarDecl 0x1ace2091db0 <col:143, col:151> col:151 _ArgList 'va_list':'char *'
|-FunctionDecl 0x1ace209a298 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:563:158> col:71 fwscanf 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace209a120 <col:87, col:94> col:94 _File 'FILE *'
| |-ParmVarDecl 0x1ace209a198 <col:130, col:146> col:146 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1ace209a348 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using fwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace209a758 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:564:206> col:78 _fwscanf_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace209a548 <col:97, col:104> col:104 _File 'FILE *'
| |-ParmVarDecl 0x1ace209a5c0 <col:150, col:166> col:166 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace209a638 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace209a810 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace209aac8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:568:28, col:131> col:40 fwscanf_s 'int (FILE *, const wchar_t *, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace209a950 <col:58, col:65> col:65 _File 'FILE *'
| `-ParmVarDecl 0x1ace209a9c8 <col:103, col:119> col:119 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace209adb0 <line:570:28, col:172> col:40 _fwscanf_s_l 'int (FILE *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (FILE *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace209aba0 <col:61, col:68> col:68 _File 'FILE *'
| |-ParmVarDecl 0x1ace209ac18 <col:116, col:132> col:132 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace209ac90 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace2099180 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:571:165> col:71 swscanf 'int (const wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace209af50 <col:86, col:102> col:102 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1ace209afc8 <col:137, col:153> col:153 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1ace2099230 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using swscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2099708 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:572:213> col:78 _swscanf_l 'int (const wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2099430 <col:96, col:112> col:112 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1ace20994a8 <col:157, col:173> col:173 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace2099520 <col:191, col:201> col:201 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace20997c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _swscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2099a78 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:574:40, col:149> col:52 swscanf_s 'int (const wchar_t *, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace2099900 <col:69, col:84> col:84 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1ace2099978 <col:121, col:137> col:137 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace2099d60 <line:576:40, col:191> col:52 _swscanf_s_l 'int (const wchar_t *, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace2099b50 <col:72, col:88> col:88 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1ace2099bc8 <col:135, col:151> col:151 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace2099c40 <col:169, col:179> col:179 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace209d238 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:577:219> col:77 _snwscanf 'int (const wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace2099f00 <col:117, col:133> col:133 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1ace2099f78 <col:144, col:151> col:151 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2099ff0 <col:191, col:207> col:207 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1ace209d2f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace209d870 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:578:261> col:79 _snwscanf_l 'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace209d4f0 <col:121, col:137> col:137 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1ace209d568 <col:148, col:155> col:155 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace209d5e0 <col:205, col:221> col:221 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace209d658 <col:239, col:249> col:249 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace209d930 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _snwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace209dc80 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:579:40, col:198> col:52 _snwscanf_s 'int (const wchar_t *, size_t, const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace209da70 <col:94, col:110> col:110 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1ace209dae8 <col:121, col:128> col:128 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace209db60 <col:170, col:186> col:186 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace209e008 <line:580:40, col:238> col:52 _snwscanf_s_l 'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, size_t, const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace209dd60 <col:96, col:112> col:112 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1ace209ddd8 <col:123, col:130> col:130 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace209de50 <col:182, col:198> col:198 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace209dec8 <col:216, col:226> col:226 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace209b2e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:581:134> col:70 wscanf 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| |-ParmVarDecl 0x1ace209b200 <col:106, col:122> col:122 _Format 'const wchar_t *'
| `-DeprecatedAttr 0x1ace209b388 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace209b700 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:582:182> col:77 _wscanf_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace209b588 <col:126, col:142> col:142 _Format 'const wchar_t *'
| |-ParmVarDecl 0x1ace209b600 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace209b7b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace209b9d0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:584:40, col:120> col:52 wscanf_s 'int (const wchar_t *, ...) __attribute__((cdecl))':'int (const wchar_t *, ...)'
| `-ParmVarDecl 0x1ace209b8f0 <col:92, col:108> col:108 _Format 'const wchar_t *'
|-FunctionDecl 0x1ace209bc18 <line:586:40, col:161> col:52 _wscanf_s_l 'int (const wchar_t *, _locale_t, ...) __attribute__((cdecl))':'int (const wchar_t *, _locale_t, ...)'
| |-ParmVarDecl 0x1ace209baa0 <col:105, col:121> col:121 _Format 'const wchar_t *'
| `-ParmVarDecl 0x1ace209bb18 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace209bf18 <line:589:24, col:99> col:39 _wfdopen 'FILE *(int, const wchar_t *) __attribute__((cdecl))':'FILE *(int, const wchar_t *)'
| |-ParmVarDecl 0x1ace209bcf8 <col:53, col:57> col:57 _FileHandle 'int'
| `-ParmVarDecl 0x1ace209bd70 <col:78, col:94> col:94 _Mode 'const wchar_t *'
|-FunctionDecl 0x1ace20982a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:590:144> col:74 _wfopen 'FILE *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace209c0b0 <col:89, col:105> col:105 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1ace2098100 <col:123, col:139> col:139 _Mode 'const wchar_t *'
| `-DeprecatedAttr 0x1ace2098358 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wfopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace2098760 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:591:28, col:157> col:44 _wfopen_s 'errno_t (FILE **, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (FILE **, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20984a0 <col:80, col:88> col:88 _File 'FILE **'
| |-ParmVarDecl 0x1ace2098518 <col:102, col:118> col:118 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x1ace2098590 <col:136, col:152> col:152 _Mode 'const wchar_t *'
|-FunctionDecl 0x1ace2098bc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:592:173> col:76 _wfreopen 'FILE *(const wchar_t *, const wchar_t *, FILE *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1ace2098900 <col:93, col:109> col:109 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1ace2098978 <col:127, col:143> col:143 _Mode 'const wchar_t *'
| |-ParmVarDecl 0x1ace20989f0 <col:158, col:165> col:165 _OldFile 'FILE *'
| `-DeprecatedAttr 0x1ace2098c78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wfreopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace209c188 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:593:28, col:184> col:44 _wfreopen_s 'errno_t (FILE **, const wchar_t *, const wchar_t *, FILE *) __attribute__((cdecl))':'errno_t (FILE **, const wchar_t *, const wchar_t *, FILE *)'
| |-ParmVarDecl 0x1ace2098dc0 <col:82, col:90> col:90 _File 'FILE **'
| |-ParmVarDecl 0x1ace2098e38 <col:104, col:120> col:120 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1ace2098eb0 <col:138, col:154> col:154 _Mode 'const wchar_t *'
| `-ParmVarDecl 0x1ace2098f28 <col:169, col:176> col:176 _OldFile 'FILE *'
|-FunctionDecl 0x1ace209c3e0 <line:597:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x1ace209c270 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1ace209c620 <line:600:24, col:107> col:39 _wpopen 'FILE *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'FILE *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace209c4b0 <col:54, col:69> col:69 _Command 'const wchar_t *'
| `-ParmVarDecl 0x1ace209c528 <col:86, col:102> col:102 _Mode 'const wchar_t *'
|-FunctionDecl 0x1ace209c7d8 <line:602:9, col:62> col:21 _wremove 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1ace209c6f8 <col:37, col:53> col:53 _Filename 'const wchar_t *'
|-FunctionDecl 0x1ace209cac8 <line:603:28, col:127> col:44 _wtmpnam_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace209c8a8 <col:84, col:94> col:94 _DstBuf 'wchar_t *'
| `-ParmVarDecl 0x1ace209c920 <col:108, col:115> col:115 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace209cd38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:605:82 _wtmpnam 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1ace209cc60 <col:118, col:127> col:127 _Buffer 'wchar_t *'
| `-DeprecatedAttr 0x1ace209cde0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wtmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace209cff8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:607:28, col:78> col:43 _fgetwc_nolock 'wint_t (FILE *) __attribute__((cdecl))':'wint_t (FILE *)'
| `-ParmVarDecl 0x1ace209cf20 <col:66, col:73> col:73 _File 'FILE *'
|-FunctionDecl 0x1ace20961d8 <line:608:28, col:96> col:43 _fputwc_nolock 'wint_t (wchar_t, FILE *) __attribute__((cdecl))':'wint_t (wchar_t, FILE *)'
| |-ParmVarDecl 0x1ace209d0c8 <col:63, col:71> col:71 _Ch 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1ace20960e0 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1ace2096420 <line:609:28, col:96> col:43 _ungetwc_nolock 'wint_t (wint_t, FILE *) __attribute__((cdecl))':'wint_t (wint_t, FILE *)'
| |-ParmVarDecl 0x1ace20962b0 <col:64, col:71> col:71 _Ch 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace2096328 <col:84, col:91> col:91 _File 'FILE *'
|-FunctionDecl 0x1ace20965d0 <line:670:9, col:53> col:22 _lock_file 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1ace20964f8 <col:41, col:48> col:48 _File 'FILE *'
|-FunctionDecl 0x1ace2096778 <line:671:9, col:55> col:22 _unlock_file 'void (FILE *) __attribute__((cdecl))':'void (FILE *)'
| `-ParmVarDecl 0x1ace20966a0 <col:43, col:50> col:50 _File 'FILE *'
|-FunctionDecl 0x1ace2096928 <line:673:28, col:75> col:40 _fclose_nolock 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace2096848 <col:63, col:70> col:70 _File 'FILE *'
|-FunctionDecl 0x1ace2096ad8 <line:674:28, col:79> col:40 _fflush_nolock 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| `-ParmVarDecl 0x1ace20969f8 <col:67, col:74> col:74 _File 'FILE *'
|-FunctionDecl 0x1ace2096e50 <line:675:28, col:179> col:43 _fread_nolock 'size_t (void *, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1ace2096bb0 <col:97, col:104> col:104 _DstBuf 'void *'
| |-ParmVarDecl 0x1ace2096c28 <col:118, col:125> col:125 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2096ca0 <col:144, col:151> col:151 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace2096d18 <col:167, col:174> col:174 _File 'FILE *'
|-FunctionDecl 0x1ace20a4390 <line:676:28, col:203> col:43 _fread_nolock_s 'size_t (void *, size_t, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (void *, size_t, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1ace2096f40 <col:99, col:106> col:106 _DstBuf 'void *'
| |-ParmVarDecl 0x1ace2096fb8 <col:120, col:127> col:127 _DstSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2097030 <col:142, col:149> col:149 _ElementSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20a41c0 <col:168, col:175> col:175 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20a4238 <col:191, col:198> col:198 _File 'FILE *'
|-FunctionDecl 0x1ace20a46a0 <line:677:28, col:111> col:40 _fseek_nolock 'int (FILE *, long, int) __attribute__((cdecl))':'int (FILE *, long, int)'
| |-ParmVarDecl 0x1ace20a4480 <col:62, col:69> col:69 _File 'FILE *'
| |-ParmVarDecl 0x1ace20a4500 <col:81, col:86> col:86 _Offset 'long'
| `-ParmVarDecl 0x1ace20a4580 <col:100, col:104> col:104 _Origin 'int'
|-FunctionDecl 0x1ace20a4860 <line:678:24, col:71> col:37 _ftell_nolock 'long (FILE *) __attribute__((cdecl))':'long (FILE *)'
| `-ParmVarDecl 0x1ace20a4780 <col:59, col:66> col:66 _File 'FILE *'
|-FunctionDecl 0x1ace20a4b50 <line:679:28, col:117> col:40 _fseeki64_nolock 'int (FILE *, long long, int) __attribute__((cdecl))':'int (FILE *, long long, int)'
| |-ParmVarDecl 0x1ace20a4930 <col:65, col:72> col:72 _File 'FILE *'
| |-ParmVarDecl 0x1ace20a49b0 <col:84, col:92> col:92 _Offset 'long long'
| `-ParmVarDecl 0x1ace20a4a30 <col:106, col:110> col:110 _Origin 'int'
|-FunctionDecl 0x1ace20a4d10 <line:680:24, col:77> col:40 _ftelli64_nolock 'long long (FILE *) __attribute__((cdecl))':'long long (FILE *)'
| `-ParmVarDecl 0x1ace20a4c30 <col:65, col:72> col:72 _File 'FILE *'
|-FunctionDecl 0x1ace20a5088 <line:681:28, col:170> col:43 _fwrite_nolock 'size_t (const void *, size_t, size_t, FILE *) __attribute__((cdecl))':'size_t (const void *, size_t, size_t, FILE *)'
| |-ParmVarDecl 0x1ace20a4de8 <col:89, col:102> col:102 _DstBuf 'const void *'
| |-ParmVarDecl 0x1ace20a4e60 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20a4ed8 <col:135, col:142> col:142 _Count 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20a4f50 <col:158, col:165> col:165 _File 'FILE *'
|-FunctionDecl 0x1ace20a5348 <line:682:28, col:89> col:40 _ungetc_nolock 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1ace20a51d0 <col:60, col:64> col:64 _Ch 'int'
| `-ParmVarDecl 0x1ace20a5248 <col:77, col:84> col:84 _File 'FILE *'
|-FunctionDecl 0x1ace20a5680 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:709:136> col:57 tempnam 'char *(const char *, const char *) __attribute__((cdecl))':'char *(const char *, const char *)'
| |-ParmVarDecl 0x1ace20a5500 <col:76, col:89> col:89 _Directory 'const char *'
| |-ParmVarDecl 0x1ace20a5580 <col:112, col:125> col:125 _FilePrefix 'const char *'
| `-DeprecatedAttr 0x1ace20a5730 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _tempnam. See online help for details." ""
|-FunctionDecl 0x1ace20a59e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:715:89> col:75 fcloseall 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1ace20a5a88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcloseall. See online help for details." ""
|-FunctionDecl 0x1ace20a5dc8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:716:127> col:71 fdopen 'FILE *(int, const char *) __attribute__((cdecl))':'FILE *(int, const char *)'
| |-ParmVarDecl 0x1ace20a5c50 <col:83, col:87> col:87 _FileHandle 'int'
| |-ParmVarDecl 0x1ace20a5cd0 <col:107, col:120> col:120 _Format 'const char *'
| `-DeprecatedAttr 0x1ace20a5e78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fdopen. See online help for details." ""
|-FunctionDecl 0x1ace20a1190 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:717:87> col:74 fgetchar 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1ace20a1230 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fgetchar. See online help for details." ""
|-FunctionDecl 0x1ace20a14d0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:718:92> col:68 fileno 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| |-ParmVarDecl 0x1ace20a13f0 <col:80, col:87> col:87 _File 'FILE *'
| `-DeprecatedAttr 0x1ace20a1578 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fileno. See online help for details." ""
|-FunctionDecl 0x1ace20a17f8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:719:87> col:74 flushall 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1ace20a1898 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _flushall. See online help for details." ""
|-FunctionDecl 0x1ace20a1b40 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:720:95> col:74 fputchar 'int (int) __attribute__((cdecl))':'int (int)'
| |-ParmVarDecl 0x1ace20a1a60 <col:88, col:92> col:92 _Ch 'int'
| `-DeprecatedAttr 0x1ace20a1be8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fputchar. See online help for details." ""
|-FunctionDecl 0x1ace20a1ec8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:721:91> col:66 getw 'int (FILE *) __attribute__((cdecl))':'int (FILE *)'
| |-ParmVarDecl 0x1ace20a1de8 <col:79, col:86> col:86 _File 'FILE *'
| `-DeprecatedAttr 0x1ace20a1f70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _getw. See online help for details." ""
|-FunctionDecl 0x1ace209e2d8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:722:109> col:70 putw 'int (int, FILE *) __attribute__((cdecl))':'int (int, FILE *)'
| |-ParmVarDecl 0x1ace209e160 <col:80, col:84> col:84 _Ch 'int'
| |-ParmVarDecl 0x1ace209e1d8 <col:97, col:104> col:104 _File 'FILE *'
| `-DeprecatedAttr 0x1ace209e388 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putw. See online help for details." ""
|-FunctionDecl 0x1ace209e648 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:723:77> col:67 rmtmp 'int (void) __attribute__((cdecl))':'int (void)'
| `-DeprecatedAttr 0x1ace209e6e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _rmtmp. See online help for details." ""
|-FunctionDecl 0x1ace209eb90 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x1ace209e810 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x1ace209e890 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x1ace209e910 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x1ace209e988 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace209ef58 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1ace209eff8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1ace209f060 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1ace209f0c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20a31b0 prev 0x1ace209ef58 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1ace209ec80 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x1ace209ed00 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x1ace209ed78 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20a3568 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1ace20a3298 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x1ace20a3318 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x1ace20a3390 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20a39d0 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20a3650 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x1ace20a36d0 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x1ace20a3748 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20a37c0 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20a3cd8 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1ace20a3d78 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1ace20a3de0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1ace20a3e48 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20a3ec8 prev 0x1ace20a3cd8 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1ace20a3ac0 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x1ace20a3b40 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x1ace20a3bb8 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20a62c8 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1ace20a6368 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1ace20a63d0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1ace20a6438 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20a64b8 prev 0x1ace20a62c8 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1ace20a3fb0 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x1ace20a4030 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x1ace20a40a8 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20a6918 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1ace20a65a0 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x1ace20a6618 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20a6698 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1ace20a6710 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1ace20a6cd8 <line:94:25> col:25 implicit memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1ace20a6d78 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1ace20a6de0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1ace20a6e48 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20a6ec8 prev 0x1ace20a6cd8 <col:9, col:107> col:25 memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x1ace20a6a08 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x1ace20a6a88 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x1ace20a6b00 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20a02c0 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1ace20a0360 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1ace20a03c8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1ace20a0430 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1ace20a0498 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20a0520 prev 0x1ace20a02c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1ace20a7050 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x1ace20a70d0 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x1ace20a7150 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x1ace20a0180 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20a05e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x1ace20a09c0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1ace20a07a8 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x1ace20a0828 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x1ace20a08a0 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20a0a78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x1ace20a0e70 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1ace20a0ba0 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1ace20a0c18 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20a0c98 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x1ace20af750 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1ace20a1018 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x1ace20a1098 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x1ace20af800 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20afc10 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1ace20af948 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1ace20af9c0 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20afa40 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x1ace20affa0 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1ace20b0040 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1ace20b00a8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace20b0120 prev 0x1ace20affa0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x1ace20afdb8 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x1ace20afe38 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x1ace20b01d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20b0528 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1ace20b0318 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1ace20b0390 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20b0410 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x1ace20ab8c8 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1ace20ab968 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1ace20ab9d0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace20aba48 prev 0x1ace20ab8c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x1ace20ab748 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x1ace20ab7c8 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x1ace20abaf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20abdc0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x1ace20abe60 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20abec8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace20abf40 prev 0x1ace20abdc0 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x1ace20abc40 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x1ace20abcc0 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x1ace20ac190 <line:121:32> col:32 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x1ace20ac230 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace20ac2a0 prev 0x1ace20ac190 <col:16, col:63> col:32 used strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x1ace20ac020 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x1ace20ac598 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1ace20ac378 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1ace20ac3f0 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20b0848 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x1ace20b06d8 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x1ace20b0750 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1ace20b0b78 <line:131:1, line:133:1>
|   `-ReturnStmt 0x1ace20b0b68 <line:132:5, col:51>
|     `-ConditionalOperator 0x1ace20b0b38 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x1ace20b09a8 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x1ace20b0988 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x1ace20b0958 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1ace20b0910 <col:13> 'const char *' lvalue ParmVar 0x1ace20b06d8 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x1ace20b0970 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x1ace20b0930 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x1ace20b0b20 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1ace20b09c8 <col:24> 'int' 0
|       `-CallExpr 0x1ace20b0ac0 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1ace20b0aa8 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1ace20b09f0 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x1ace20ac598 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x1ace20b0af0 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1ace20b0a10 <col:36> 'const char *' lvalue ParmVar 0x1ace20b06d8 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x1ace20b0b08 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1ace20b0a30 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x1ace20b0750 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20b0e50 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1ace20b0ba8 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x1ace20b0c20 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20b0ca0 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x1ace20b0d18 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1ace20b1158 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1ace20b11f8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1ace20b1260 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1ace20b12c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20b1348 prev 0x1ace20b1158 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1ace20b0f40 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x1ace20b0fc0 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1ace20b1038 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20b1578 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x1ace20b1430 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x1ace20ae820 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1ace20ae8c0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20ae928 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1ace20ae9a0 prev 0x1ace20ae820 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1ace20b1650 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x1ace20ae6b8 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x1ace20aec00 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1ace20aea80 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1ace20aeb00 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1ace20aee60 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1ace20aece0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1ace20aed60 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1ace20af218 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1ace20aef40 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20aefc0 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1ace20af038 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20af480 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1ace20af300 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x1ace20af380 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1ace20ac7a0 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1ace20af560 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20af5e0 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1ace20ac680 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20aca08 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1ace20ac888 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x1ace20ac908 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x1ace20acd00 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1ace20acae8 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20acb68 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x1ace20acbe0 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20ad0b8 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1ace20acde8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20ace68 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1ace20acee0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20ad520 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20ad1a0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20ad220 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1ace20ad298 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20ad310 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20b1880 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1ace20ad610 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20b16e8 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1ace20b1760 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20b1c18 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20b1968 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20b19e8 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x1ace20b1a60 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20b1ad8 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20b1f28 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1ace20b1fc8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20b2030 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace20b20a8 prev 0x1ace20b1f28 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1ace20b1d08 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1ace20b1d88 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x1ace20b2328 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1ace20b2248 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x1ace20b23d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20aa740 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x1ace20b2518 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x1ace20b2590 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20b2610 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x1ace20aaa18 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x1ace20aaab8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1ace20aab28 prev 0x1ace20aaa18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x1ace20aa8e8 <col:90> col:93 'int'
| `-DeprecatedAttr 0x1ace20aabd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20aaf28 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1ace20aad18 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x1ace20aad90 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20aae10 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x1ace20ab1e8 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1ace20ab010 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1ace20ab088 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20ab468 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1ace20ab388 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1ace20ab510 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20b39b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20b36f0 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1ace20b3768 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20b37e0 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20b3d80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1ace20b3b58 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1ace20b3bd0 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace20b3e30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20b42e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1ace20b3f78 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x1ace20b3ff0 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20b4070 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x1ace20b40e8 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1ace20b2758 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1ace20b27f8 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1ace20b2860 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20b28c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20b2948 prev 0x1ace20b2758 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1ace20b4498 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x1ace20b4518 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x1ace20b4590 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20b2a00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20b2d60 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1ace20b2e00 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1ace20b2e68 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20b2ed0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20b2f50 prev 0x1ace20b2d60 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1ace20b2b48 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20b2bc8 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x1ace20b2c40 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20b3250 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1ace20b3038 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20b30b8 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x1ace20b3130 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20b35e8 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20b3338 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20b33b8 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1ace20b3430 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20b34a8 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20b49a8 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1ace20b4700 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1ace20b4778 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20b47f8 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x1ace20b4870 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1ace20b4d70 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1ace20b4e10 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1ace20b4e78 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20b4ee0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20b4f60 prev 0x1ace20b4d70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1ace20b4b58 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x1ace20b4bd8 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x1ace20b4c50 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20b5018 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20b54d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x1ace20b5160 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x1ace20b51d8 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20b5258 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x1ace20b52d0 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20ad8f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1ace20b5688 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x1ace20ad6a8 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x1ace20ad720 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20ad9b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20adc78 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1ace20add18 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20add80 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace20addf8 prev 0x1ace20adc78 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1ace20adaf8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1ace20adb78 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x1ace20ae058 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1ace20ae0f8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20ae160 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1ace20ae1d8 prev 0x1ace20ae058 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1ace20aded8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1ace20adf58 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x1ace20ae398 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x1ace20ae2b8 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x1ace20ae5e8 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1ace20b7730 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20b7798 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace20b7810 prev 0x1ace20ae5e8 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1ace20ae470 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x1ace20ae4f0 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x1ace20b7a70 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1ace20b7b10 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20b7b78 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace20b7bf0 prev 0x1ace20b7a70 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1ace20b78f0 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x1ace20b7970 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x1ace20b7f10 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1ace20b7fb0 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1ace20b8018 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace20b8090 prev 0x1ace20b7f10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x1ace20b7d90 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x1ace20b7e10 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x1ace20b8140 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20b8528 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x1ace20b8288 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x1ace20b8308 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x1ace20b8388 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x1ace20bc7e0 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1ace20b8610 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1ace20b8688 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20bca60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1ace20bc980 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1ace20bcb08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20bce58 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20bcc50 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1ace20bccc8 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20bcd40 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20bd178 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1ace20bd000 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1ace20bd078 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace20bd228 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20bd640 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1ace20bd6e0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1ace20b6720 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1ace20b6788 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20b6808 prev 0x1ace20bd640 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1ace20bd370 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1ace20bd3f0 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x1ace20bd468 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20b6c68 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20b68f0 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1ace20b6970 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x1ace20b69e8 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20b6a60 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20b6ed8 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x1ace20b6f78 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1ace20b6fe8 prev 0x1ace20b6ed8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x1ace20b6df8 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x1ace20b7090 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x1ace20b73d8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1ace20b7258 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20b72d8 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1ace20b7488 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x1ace20bb870 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1ace20b7650 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20bb770 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1ace20bb920 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x1ace20bbbc8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1ace20bbae8 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1ace20bbc70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x1ace20bc050 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1ace20bbe38 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x1ace20bbeb8 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x1ace20bbf30 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20bc108 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x1ace20bc4e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1ace20bc2d0 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x1ace20bc350 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x1ace20bc3c8 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20bc5a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x1ace20bd870 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1ace20bd790 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1ace20bd918 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x1ace20bdc60 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1ace20bdae0 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x1ace20bdb60 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x1ace20bdd10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x1ace20bdfb8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1ace20bded8 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1ace20be060 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x1ace20be2f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x1ace20be180 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x1ace20be680 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1ace20be3c0 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace20be438 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20be4b0 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x1ace20bea88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20be870 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1ace20be8e8 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1ace20beb38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20bee98 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x1ace20bef38 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1ace20befa0 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x1ace20bf018 prev 0x1ace20bee98 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x1ace20bec78 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1ace20becf0 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1ace20bf310 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x1ace20bf3b0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1ace20bf418 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1ace20bf490 prev 0x1ace20bf310 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x1ace20bf0f0 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1ace20bf168 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x1ace20b9750 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1ace20bf568 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace20bf5e0 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20bf658 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x1ace20b9a60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20b98f0 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1ace20b9968 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1ace20b9b10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20b9e68 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20b9c50 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1ace20b9cc8 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x1ace20ba0b0 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x1ace20ba150 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1ace20ba1c0 prev 0x1ace20ba0b0 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x1ace20b9f40 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x1ace20ba4a8 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace20ba290 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1ace20ba308 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20bf7b0 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x1ace20ba580 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x1ace20ba5f8 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1ace20bfb48 <line:306:1, line:308:1>
|   `-ReturnStmt 0x1ace20bfb38 <line:307:5, col:56>
|     `-ConditionalOperator 0x1ace20bfb08 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x1ace20bf970 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x1ace20bf950 <col:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x1ace20bf920 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1ace20bf878 <col:13> 'const wchar_t *' lvalue ParmVar 0x1ace20ba580 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x1ace20bf938 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x1ace20bf900 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x1ace20bf8d8 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x1ace20bf898 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x1ace20bfaf0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1ace20bf990 <col:29> 'int' 0
|       `-CallExpr 0x1ace20bfa90 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1ace20bfa78 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1ace20bf9b8 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x1ace20ba4a8 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x1ace20bfac0 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x1ace20bf9d8 <col:41> 'const wchar_t *' lvalue ParmVar 0x1ace20ba580 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x1ace20bfad8 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1ace20bf9f8 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x1ace20ba5f8 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20bfed8 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1ace20bfb70 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace20bfbe8 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20bfc60 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1ace20bfcd8 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1ace20c0340 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace20c0080 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1ace20c00f8 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c0170 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20c03f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20b87b8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x1ace20b8858 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x1ace20b88c0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1ace20b8928 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1ace20b89a8 prev 0x1ace20b87b8 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x1ace20c0538 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c05b0 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c0628 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20b8d28 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1ace20b8a88 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace20b8b00 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20b8b78 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1ace20b8bf0 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1ace20b90d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace20b8ed0 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1ace20b8f48 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1ace20b8fc0 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20b9190 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20b9440 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20b92d0 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1ace20b9348 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x1ace20b9688 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1ace20b9518 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1ace20b9590 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1ace20ba8f8 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20ba788 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1ace20ba800 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x1ace20bab40 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20ba9d0 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1ace20baa48 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x1ace20bae48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20bacd8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1ace20bad50 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x1ace20baef8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20bb360 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1ace20bb038 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x1ace20bb0b0 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x1ace20bb190 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x1ace20bb680 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x1ace20bb508 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x1ace20c6820 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20c6c30 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1ace20c6960 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x1ace20c69d8 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20c6a58 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x1ace20c6ea8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1ace20c6dd0 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1ace20c6f50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20c7310 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1ace20c7090 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x1ace20c7108 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20c7180 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1ace20c7568 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20c73f0 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c7468 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x1ace20c58f8 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1ace20c7640 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c76b8 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c7730 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20c5be8 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace20c59d8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c5a50 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c5ac8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20c6040 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20c5cc8 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c5d40 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c5db8 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20c5e30 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20c6498 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x1ace20c6128 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace20c61a0 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace20c6218 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1ace20c6290 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20c7950 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1ace20c6640 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x1ace20c66b8 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1ace20c6730 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20c7a08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20c7c20 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x1ace20c7b48 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x1ace20c7fb0 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x1ace20c7cf0 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace20c7d68 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20c7de0 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x1ace20c8368 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1ace20c8150 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x1ace20c81c8 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1ace20c8418 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20c86c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace20c8558 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x1ace20c85d0 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20c89e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1ace20c8910 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1ace20c8a90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20c8e90 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20c8bd0 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x1ace20c8c48 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20c8cc0 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20c9248 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1ace20c9030 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1ace20c90a8 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace20c92f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20c95a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace20c9438 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x1ace20c94b0 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20c17d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1ace20c9740 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1ace20c1878 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20c1bc0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20c19b8 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x1ace20c1a30 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20c1aa8 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20c1ed0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1ace20c1d60 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1ace20c1dd8 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1ace20c1f80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1ace20c2380 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace20c20c0 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace20c2138 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c21b0 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20c4800 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20c2460 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1ace20c24d8 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c2550 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20c25c8 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20c4a60 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20c48e8 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c4960 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x1ace20c4d48 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1ace20c4b38 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c4bb0 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c4c28 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20c4fa0 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20c4e28 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c4ea0 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x1ace20c5288 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1ace20c5078 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c50f0 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c5168 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20c5578 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace20c5368 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c53e0 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c5458 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20c9990 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20c5658 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c56d0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c5748 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20c9850 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20c9c88 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace20c9a78 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c9af0 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1ace20c9b68 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1ace20ca010 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1ace20c9d68 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c9de0 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c9e58 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1ace20c9ed0 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20ca270 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1ace20ca198 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1ace20ca318 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x1ace20ca650 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20ca4d8 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20ca550 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1ace20ca700 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x1ace20c3ab0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1ace20c38a0 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c3918 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c3990 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20c3b68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x1ace20c3f30 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1ace20c3d28 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1ace20c3da0 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1ace20c3e18 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1ace20c3fe8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x1ace20c4280 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1ace20c41a8 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1ace20c4328 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x1ace20c4658 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1ace20c44e8 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x1ace20c4560 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1ace20c4708 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x1ace20c29b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1ace20c28d8 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1ace20c2a58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x1ace20c2cf0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1ace20c2c18 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1ace20c2d98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x1ace20c30d0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1ace20c2f58 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1ace20c2fd0 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1ace20c3180 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-FunctionDecl 0x1ace20c33c0 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:49:9, col:58> col:40 __pctype_func 'const unsigned short *(void) __attribute__((cdecl))':'const unsigned short *(void)'
|-VarDecl 0x1ace20c3490 <line:51:9, col:38> col:38 _pctype 'const unsigned short *' extern
|-VarDecl 0x1ace20c3590 <line:62:9, col:45> col:37 _wctype 'const unsigned short []' extern
|-FunctionDecl 0x1ace20d08c0 <line:73:9, col:53> col:34 __pwctype_func 'const wctype_t *(void) __attribute__((cdecl))':'const wctype_t *(void)'
|-VarDecl 0x1ace20d0988 <line:75:9, col:32> col:32 _pwctype 'const wctype_t *' extern
|-FunctionDecl 0x1ace20d0c10 <line:119:24, col:72> col:36 _isctype 'int (int, int) __attribute__((cdecl))':'int (int, int)'
| |-ParmVarDecl 0x1ace20d0a20 <col:50, col:54> col:54 _C 'int'
| `-ParmVarDecl 0x1ace20d0aa0 <col:63, col:67> col:67 _Type 'int'
|-FunctionDecl 0x1ace20d0fc8 <line:120:24, col:102> col:36 _isctype_l 'int (int, int, _locale_t) __attribute__((cdecl))':'int (int, int, _locale_t)'
| |-ParmVarDecl 0x1ace20d0cf0 <col:52, col:56> col:56 _C 'int'
| |-ParmVarDecl 0x1ace20d0d70 <col:65, col:69> col:69 _Type 'int'
| `-ParmVarDecl 0x1ace20d0de8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d1190 <line:121:55> col:55 implicit isalpha 'int (int)' extern
| |-ParmVarDecl 0x1ace20d1230 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20d12a0 <col:55> Implicit
| `-PureAttr 0x1ace20d12f8 <col:55> Implicit
|-FunctionDecl 0x1ace20d1320 prev 0x1ace20d1190 <col:43, col:74> col:55 isalpha 'int (int)'
| |-ParmVarDecl 0x1ace20d10b0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1ace20d1410 <col:55> Inherited Implicit
| `-PureAttr 0x1ace20d1438 <col:55> Inherited Implicit
|-FunctionDecl 0x1ace20d16a0 <line:122:24, col:86> col:36 _isalpha_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20d1478 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20d14f0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d18d0 <line:123:55> col:55 implicit isupper 'int (int)' extern
| |-ParmVarDecl 0x1ace20d1970 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20d19e0 <col:55> Implicit
| `-PureAttr 0x1ace20d1a38 <col:55> Implicit
|-FunctionDecl 0x1ace20d1a60 prev 0x1ace20d18d0 <col:43, col:74> col:55 isupper 'int (int)'
| |-ParmVarDecl 0x1ace20d1780 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1ace20d1b50 <col:55> Inherited Implicit
| `-PureAttr 0x1ace20d1b78 <col:55> Inherited Implicit
|-FunctionDecl 0x1ace20d1d30 <line:124:24, col:86> col:36 _isupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20d1bb8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20d1c30 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d1ef0 <line:125:55> col:55 implicit islower 'int (int)' extern
| |-ParmVarDecl 0x1ace20d1f90 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20d2000 <col:55> Implicit
| `-PureAttr 0x1ace20d2058 <col:55> Implicit
|-FunctionDecl 0x1ace20d2080 prev 0x1ace20d1ef0 <col:43, col:74> col:55 islower 'int (int)'
| |-ParmVarDecl 0x1ace20d1e10 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1ace20d2170 <col:55> Inherited Implicit
| `-PureAttr 0x1ace20d2198 <col:55> Inherited Implicit
|-FunctionDecl 0x1ace20d2350 <line:126:24, col:86> col:36 _islower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20d21d8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20d2250 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d2510 <line:127:55> col:55 implicit used isdigit 'int (int)' extern
| |-ParmVarDecl 0x1ace20d25b0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20d2620 <col:55> Implicit
| `-PureAttr 0x1ace20d2678 <col:55> Implicit
|-FunctionDecl 0x1ace20d26a0 prev 0x1ace20d2510 <col:43, col:74> col:55 used isdigit 'int (int)'
| |-ParmVarDecl 0x1ace20d2430 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1ace20d2790 <col:55> Inherited Implicit
| `-PureAttr 0x1ace20d27b8 <col:55> Inherited Implicit
|-FunctionDecl 0x1ace20ce9a0 <line:128:24, col:86> col:36 _isdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20d27f8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20ce8a0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20ceb60 <line:129:36> col:36 implicit isxdigit 'int (int)' extern
| |-ParmVarDecl 0x1ace20cec00 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20cec70 <col:36> Implicit
| `-PureAttr 0x1ace20cecc8 <col:36> Implicit
|-FunctionDecl 0x1ace20cecf0 prev 0x1ace20ceb60 <col:24, col:56> col:36 isxdigit 'int (int)'
| |-ParmVarDecl 0x1ace20cea80 <col:50, col:54> col:54 _C 'int'
| |-NoThrowAttr 0x1ace20cede0 <col:36> Inherited Implicit
| `-PureAttr 0x1ace20cee08 <col:36> Inherited Implicit
|-FunctionDecl 0x1ace20cefc0 <line:130:24, col:87> col:36 _isxdigit_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20cee48 <col:53, col:57> col:57 _C 'int'
| `-ParmVarDecl 0x1ace20ceec0 <col:70, col:80> col:80 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20cf180 <line:131:55> col:55 implicit isspace 'int (int)' extern
| |-ParmVarDecl 0x1ace20cf220 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20cf290 <col:55> Implicit
| `-PureAttr 0x1ace20cf2e8 <col:55> Implicit
|-FunctionDecl 0x1ace20cf310 prev 0x1ace20cf180 <col:43, col:74> col:55 isspace 'int (int)'
| |-ParmVarDecl 0x1ace20cf0a0 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1ace20cf400 <col:55> Inherited Implicit
| `-PureAttr 0x1ace20cf428 <col:55> Inherited Implicit
|-FunctionDecl 0x1ace20cf5e0 <line:132:24, col:86> col:36 _isspace_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20cf468 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20cf4e0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20cf7a0 <line:133:36> col:36 implicit ispunct 'int (int)' extern
| |-ParmVarDecl 0x1ace20cc880 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20cc8f0 <col:36> Implicit
| `-PureAttr 0x1ace20cc948 <col:36> Implicit
|-FunctionDecl 0x1ace20cc970 prev 0x1ace20cf7a0 <col:24, col:55> col:36 ispunct 'int (int)'
| |-ParmVarDecl 0x1ace20cf6c0 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1ace20cca60 <col:36> Inherited Implicit
| `-PureAttr 0x1ace20cca88 <col:36> Inherited Implicit
|-FunctionDecl 0x1ace20ccc40 <line:134:24, col:86> col:36 _ispunct_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20ccac8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20ccb40 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20cce00 <line:135:36> col:36 implicit isblank 'int (int)' extern
| |-ParmVarDecl 0x1ace20ccea0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20ccf10 <col:36> Implicit
| `-PureAttr 0x1ace20ccf68 <col:36> Implicit
|-FunctionDecl 0x1ace20ccf90 prev 0x1ace20cce00 <col:24, col:55> col:36 isblank 'int (int)'
| |-ParmVarDecl 0x1ace20ccd20 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1ace20cd080 <col:36> Inherited Implicit
| `-PureAttr 0x1ace20cd0a8 <col:36> Inherited Implicit
|-FunctionDecl 0x1ace20cd260 <line:136:24, col:86> col:36 _isblank_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20cd0e8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20cd160 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20cd420 <line:137:55> col:55 implicit isalnum 'int (int)' extern
| |-ParmVarDecl 0x1ace20cd4c0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20cd530 <col:55> Implicit
| `-PureAttr 0x1ace20cd588 <col:55> Implicit
|-FunctionDecl 0x1ace20cd5b0 prev 0x1ace20cd420 <col:43, col:74> col:55 isalnum 'int (int)'
| |-ParmVarDecl 0x1ace20cd340 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1ace20cd6a0 <col:55> Inherited Implicit
| `-PureAttr 0x1ace20cd6c8 <col:55> Inherited Implicit
|-FunctionDecl 0x1ace20ca860 <line:138:24, col:86> col:36 _isalnum_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20cd708 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20cd780 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20caa20 <line:139:36> col:36 implicit isprint 'int (int)' extern
| |-ParmVarDecl 0x1ace20caac0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20cab30 <col:36> Implicit
| `-PureAttr 0x1ace20cab88 <col:36> Implicit
|-FunctionDecl 0x1ace20cabb0 prev 0x1ace20caa20 <col:24, col:55> col:36 isprint 'int (int)'
| |-ParmVarDecl 0x1ace20ca940 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1ace20caca0 <col:36> Inherited Implicit
| `-PureAttr 0x1ace20cacc8 <col:36> Inherited Implicit
|-FunctionDecl 0x1ace20cae80 <line:140:24, col:86> col:36 _isprint_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20cad08 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20cad80 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20cb040 <line:141:36> col:36 implicit isgraph 'int (int)' extern
| |-ParmVarDecl 0x1ace20cb0e0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20cb150 <col:36> Implicit
| `-PureAttr 0x1ace20cb1a8 <col:36> Implicit
|-FunctionDecl 0x1ace20cb1d0 prev 0x1ace20cb040 <col:24, col:55> col:36 isgraph 'int (int)'
| |-ParmVarDecl 0x1ace20caf60 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1ace20cb2c0 <col:36> Inherited Implicit
| `-PureAttr 0x1ace20cb2e8 <col:36> Inherited Implicit
|-FunctionDecl 0x1ace20cb4a0 <line:142:24, col:86> col:36 _isgraph_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20cb328 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20cb3a0 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20cb660 <line:143:36> col:36 implicit iscntrl 'int (int)' extern
| |-ParmVarDecl 0x1ace20cb700 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20cb770 <col:36> Implicit
| `-PureAttr 0x1ace20cb7c8 <col:36> Implicit
|-FunctionDecl 0x1ace20cd890 prev 0x1ace20cb660 <col:24, col:55> col:36 iscntrl 'int (int)'
| |-ParmVarDecl 0x1ace20cb580 <col:49, col:53> col:53 _C 'int'
| |-NoThrowAttr 0x1ace20cd980 <col:36> Inherited Implicit
| `-PureAttr 0x1ace20cd9a8 <col:36> Inherited Implicit
|-FunctionDecl 0x1ace20cdb60 <line:144:24, col:86> col:36 _iscntrl_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20cd9e8 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20cda60 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20cdd20 <line:145:55> col:55 implicit toupper 'int (int)' extern
| |-ParmVarDecl 0x1ace20cddc0 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20cde30 <col:55> Implicit
| `-PureAttr 0x1ace20cde88 <col:55> Implicit
|-FunctionDecl 0x1ace20cdeb0 prev 0x1ace20cdd20 <col:43, col:74> col:55 toupper 'int (int)'
| |-ParmVarDecl 0x1ace20cdc40 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1ace20cdfa0 <col:55> Inherited Implicit
| `-PureAttr 0x1ace20cdfc8 <col:55> Inherited Implicit
|-FunctionDecl 0x1ace20ce0e8 <line:146:55> col:55 implicit tolower 'int (int)' extern
| |-ParmVarDecl 0x1ace20ce188 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1ace20ce1f8 <col:55> Implicit
| `-PureAttr 0x1ace20ce250 <col:55> Implicit
|-FunctionDecl 0x1ace20ce278 prev 0x1ace20ce0e8 <col:43, col:74> col:55 tolower 'int (int)'
| |-ParmVarDecl 0x1ace20ce008 <col:68, col:72> col:72 _C 'int'
| |-NoThrowAttr 0x1ace20ce368 <col:55> Inherited Implicit
| `-PureAttr 0x1ace20ce390 <col:55> Inherited Implicit
|-FunctionDecl 0x1ace20ce4b0 <line:147:43, col:75> col:55 _tolower 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace20ce3d0 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1ace20ce700 <line:148:24, col:86> col:36 _tolower_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20ce588 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20ce600 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d2918 <line:149:43, col:75> col:55 _toupper 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace20ce7e0 <col:69, col:73> col:73 _C 'int'
|-FunctionDecl 0x1ace20d2b68 <line:150:24, col:86> col:36 _toupper_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20d29f0 <col:52, col:56> col:56 _C 'int'
| `-ParmVarDecl 0x1ace20d2a68 <col:69, col:79> col:79 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d2d28 <line:151:24, col:57> col:36 __isascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace20d2c48 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1ace20d2ee0 <line:152:24, col:57> col:36 __toascii 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace20d2e00 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1ace20d3098 <line:153:24, col:57> col:36 __iscsymf 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace20d2fb8 <col:51, col:55> col:55 _C 'int'
|-FunctionDecl 0x1ace20d3250 <line:154:24, col:56> col:36 __iscsym 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace20d3170 <col:50, col:54> col:54 _C 'int'
|-FunctionDecl 0x1ace20d3498 <line:164:24, col:59> col:36 iswalpha 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d3320 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d3790 <line:165:24, col:90> col:36 _iswalpha_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d3568 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d35e0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d79a8 <line:166:24, col:59> col:36 iswupper 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d3868 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d7bf0 <line:167:24, col:90> col:36 _iswupper_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d7a78 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d7af0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d7da8 <line:168:24, col:59> col:36 iswlower 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d7cc8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d7ff0 <line:169:24, col:90> col:36 _iswlower_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d7e78 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d7ef0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d81a8 <line:170:24, col:59> col:36 iswdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d80c8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d83f0 <line:171:24, col:90> col:36 _iswdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d8278 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d82f0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d85a8 <line:172:24, col:60> col:36 iswxdigit 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d84c8 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d87f0 <line:173:24, col:91> col:36 _iswxdigit_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d8678 <col:54, col:61> col:61 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d86f0 <col:74, col:84> col:84 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d99c8 <line:174:24, col:59> col:36 iswspace 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d88c8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d9c10 <line:175:24, col:90> col:36 _iswspace_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d9a98 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d9b10 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d9dc8 <line:176:24, col:59> col:36 iswpunct 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d9ce8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20da010 <line:177:24, col:90> col:36 _iswpunct_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d9e98 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d9f10 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20da1c8 <line:178:24, col:59> col:36 iswblank 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20da0e8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20da410 <line:179:24, col:90> col:36 _iswblank_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20da298 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20da310 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20da5c8 <line:180:24, col:59> col:36 iswalnum 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20da4e8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20da810 <line:181:24, col:90> col:36 _iswalnum_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20da698 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20da710 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d5988 <line:182:24, col:59> col:36 iswprint 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20da8e8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d5bd0 <line:183:24, col:90> col:36 _iswprint_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d5a58 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d5ad0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d5d88 <line:184:24, col:59> col:36 iswgraph 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d5ca8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d5fd0 <line:185:24, col:90> col:36 _iswgraph_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d5e58 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d5ed0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d6188 <line:186:24, col:59> col:36 iswcntrl 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d60a8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d63d0 <line:187:24, col:90> col:36 _iswcntrl_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d6258 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d62d0 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d6588 <line:188:24, col:59> col:36 iswascii 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d64a8 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d67a0 <line:190:24, col:62> col:39 towupper 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1ace20d6658 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d6ac8 <line:191:24, col:93> col:39 _towupper_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d6870 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d6920 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d6c78 <line:192:24, col:62> col:39 towlower 'wint_t (wint_t) __attribute__((cdecl))':'wint_t (wint_t)'
| `-ParmVarDecl 0x1ace20d6ba0 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d6eb8 <line:193:24, col:93> col:39 _towlower_l 'wint_t (wint_t, _locale_t) __attribute__((cdecl))':'wint_t (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d6d48 <col:56, col:63> col:63 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d6dc0 <col:76, col:86> col:86 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d71b0 <line:194:24, col:80> col:36 iswctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1ace20d6f90 <col:50, col:57> col:57 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d7008 <col:66, col:75> col:75 _Type 'wctype_t':'unsigned short'
|-FunctionDecl 0x1ace20d7558 <line:195:24, col:111> col:36 _iswctype_l 'int (wint_t, wctype_t, _locale_t) __attribute__((cdecl))':'int (wint_t, wctype_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d7288 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1ace20d7300 <col:69, col:78> col:78 _Type 'wctype_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d7378 <col:94, col:104> col:104 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d7718 <line:197:24, col:61> col:36 __iswcsymf 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d7638 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d4940 <line:198:24, col:90> col:36 _iswcsymf_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d77e8 <col:53, col:60> col:60 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d7860 <col:73, col:83> col:83 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d4af8 <line:199:24, col:60> col:36 __iswcsym 'int (wint_t) __attribute__((cdecl))':'int (wint_t)'
| `-ParmVarDecl 0x1ace20d4a18 <col:51, col:58> col:58 _C 'wint_t':'unsigned short'
|-FunctionDecl 0x1ace20d4d40 <line:200:24, col:89> col:36 _iswcsym_l 'int (wint_t, _locale_t) __attribute__((cdecl))':'int (wint_t, _locale_t)'
| |-ParmVarDecl 0x1ace20d4bc8 <col:52, col:59> col:59 _C 'wint_t':'unsigned short'
| `-ParmVarDecl 0x1ace20d4c40 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d4f00 <line:203:24, col:58> col:36 isleadbyte 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1ace20d4e20 <col:52, col:56> col:56 _C 'int'
|-FunctionDecl 0x1ace20d5150 <line:204:24, col:89> col:36 _isleadbyte_l 'int (int, _locale_t) __attribute__((cdecl))':'int (int, _locale_t)'
| |-ParmVarDecl 0x1ace20d4fd8 <col:55, col:59> col:59 _C 'int'
| `-ParmVarDecl 0x1ace20d5050 <col:72, col:82> col:82 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d5460 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:205:90> col:45 is_wctype 'int (wint_t, wctype_t) __attribute__((cdecl))':'int (wint_t, wctype_t)'
| |-ParmVarDecl 0x1ace20d52e8 <col:60, col:67> col:67 _C 'wint_t':'unsigned short'
| |-ParmVarDecl 0x1ace20d5360 <col:76, col:85> col:85 _Type 'wctype_t':'unsigned short'
| `-DeprecatedAttr 0x1ace20d5510 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instead. See online help for details." ""
|-VarDecl 0x1ace20d5658 <D:\Microsoft Visual Studio 12.0\VC\include\ctype.h:235:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x1ace20d57a8 <line:239:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1ace20d8a38 <line:240:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x1ace20d5870 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1ace20d9090 <.//openssl//file_jk/before\crypto\bio\b_print.c:30:1, line:31:46> line:30:12 used fmtstr 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' static
| |-ParmVarDecl 0x1ace20d8b10 <col:19, col:25> col:26 'char **'
| |-ParmVarDecl 0x1ace20d8b90 <col:28, col:34> col:35 'char **'
| |-ParmVarDecl 0x1ace20d8c68 <col:37, col:44> col:45 'size_t *'
| |-ParmVarDecl 0x1ace20d8ce0 <col:47, col:54> col:55 'size_t *'
| |-ParmVarDecl 0x1ace20d8d60 <line:31:19, col:30> col:31 'const char *'
| |-ParmVarDecl 0x1ace20d8de0 <col:33> col:36 'int'
| |-ParmVarDecl 0x1ace20d8e60 <col:38> col:41 'int'
| `-ParmVarDecl 0x1ace20d8ee0 <col:43> col:46 'int'
|-FunctionDecl 0x1ace20d9760 <line:32:1, line:33:46> line:32:12 used fmtint 'int (char **, char **, size_t *, size_t *, int, int, int, int, int)' static
| |-ParmVarDecl 0x1ace20d91a0 <col:19, col:25> col:26 'char **'
| |-ParmVarDecl 0x1ace20d9220 <col:28, col:34> col:35 'char **'
| |-ParmVarDecl 0x1ace20d9298 <col:37, col:44> col:45 'size_t *'
| |-ParmVarDecl 0x1ace20d9310 <col:47, col:54> col:55 'size_t *'
| |-ParmVarDecl 0x1ace20d9390 <line:33:19> col:19 int64_t 'int'
| |-ParmVarDecl 0x1ace20d9410 <col:28> col:31 'int'
| |-ParmVarDecl 0x1ace20d9490 <col:33> col:36 'int'
| |-ParmVarDecl 0x1ace20d9510 <col:38> col:41 'int'
| `-ParmVarDecl 0x1ace20d9590 <col:43> col:46 'int'
|-FunctionDecl 0x1ace20e1f00 <line:34:1, line:35:45> line:34:12 used fmtfp 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' static
| |-ParmVarDecl 0x1ace20d9878 <col:18, col:24> col:25 'char **'
| |-ParmVarDecl 0x1ace20e19d0 <col:27, col:33> col:34 'char **'
| |-ParmVarDecl 0x1ace20e1a48 <col:36, col:43> col:44 'size_t *'
| |-ParmVarDecl 0x1ace20e1ac0 <col:46, col:53> col:54 'size_t *'
| |-ParmVarDecl 0x1ace20e1b40 <line:27:18> line:35:25 'double'
| |-ParmVarDecl 0x1ace20e1bc0 <col:27> col:30 'int'
| |-ParmVarDecl 0x1ace20e1c40 <col:32> col:35 'int'
| |-ParmVarDecl 0x1ace20e1cc0 <col:37> col:40 'int'
| `-ParmVarDecl 0x1ace20e1d40 <col:42> col:45 'int'
|-FunctionDecl 0x1ace20e2360 <line:36:1, col:65> col:12 used doapr_outch 'int (char **, char **, size_t *, size_t *, int)' static
| |-ParmVarDecl 0x1ace20e2018 <col:24, col:30> col:31 'char **'
| |-ParmVarDecl 0x1ace20e2098 <col:33, col:39> col:40 'char **'
| |-ParmVarDecl 0x1ace20e2110 <col:42, col:49> col:50 'size_t *'
| |-ParmVarDecl 0x1ace20e2188 <col:52, col:59> col:60 'size_t *'
| `-ParmVarDecl 0x1ace20e2208 <col:62> col:65 'int'
|-FunctionDecl 0x1ace20e29e0 <line:37:1, line:39:50> line:37:12 used _dopr 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' static
| |-ParmVarDecl 0x1ace20e2458 <col:18, col:25> col:25 sbuffer 'char **'
| |-ParmVarDecl 0x1ace20e24d8 <col:34, col:41> col:41 buffer 'char **'
| |-ParmVarDecl 0x1ace20e2550 <line:38:18, col:26> col:26 maxlen 'size_t *'
| |-ParmVarDecl 0x1ace20e25c8 <col:34, col:42> col:42 retlen 'size_t *'
| |-ParmVarDecl 0x1ace20e2648 <col:50, col:55> col:55 truncated 'int *'
| |-ParmVarDecl 0x1ace20e26c8 <line:39:18, col:30> col:30 format 'const char *'
| `-ParmVarDecl 0x1ace20e2740 <col:38, col:46> col:46 args 'va_list':'char *'
|-FunctionDecl 0x1ace20e2f40 prev 0x1ace20e29e0 <line:82:1, line:361:1> line:83:1 used _dopr 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' static
| |-ParmVarDecl 0x1ace20e2ae8 <col:7, col:14> col:14 used sbuffer 'char **'
| |-ParmVarDecl 0x1ace20e2b68 <line:84:7, col:14> col:14 used buffer 'char **'
| |-ParmVarDecl 0x1ace20e2be0 <line:85:7, col:15> col:15 used maxlen 'size_t *'
| |-ParmVarDecl 0x1ace20e2c58 <line:86:7, col:15> col:15 used retlen 'size_t *'
| |-ParmVarDecl 0x1ace20e2cd8 <col:23, col:28> col:28 used truncated 'int *'
| |-ParmVarDecl 0x1ace20e2d58 <col:39, col:51> col:51 used format 'const char *'
| |-ParmVarDecl 0x1ace20e2dd0 <col:59, col:67> col:67 used args 'va_list':'char *'
| `-CompoundStmt 0x1ace21a5558 <line:87:1, line:361:1>
|   |-DeclStmt 0x1ace20e3090 <line:88:5, col:12>
|   | `-VarDecl 0x1ace20e3028 <col:5, col:10> col:10 used ch 'char'
|   |-DeclStmt 0x1ace20e3128 <line:27:18, line:90:19>
|   | `-VarDecl 0x1ace20e30c0 <line:27:18, line:90:13> col:13 used fvalue 'double'
|   |-DeclStmt 0x1ace20e31c0 <line:91:5, col:19>
|   | `-VarDecl 0x1ace20e3158 <col:5, col:11> col:11 used strvalue 'char *'
|   |-DeclStmt 0x1ace20e3258 <line:92:5, col:12>
|   | `-VarDecl 0x1ace20e31f0 <col:5, col:9> col:9 used min 'int'
|   |-DeclStmt 0x1ace20e32f0 <line:93:5, col:12>
|   | `-VarDecl 0x1ace20e3288 <col:5, col:9> col:9 used max 'int'
|   |-DeclStmt 0x1ace20e3388 <line:94:5, col:14>
|   | `-VarDecl 0x1ace20e3320 <col:5, col:9> col:9 used state 'int'
|   |-DeclStmt 0x1ace20e3420 <line:95:5, col:14>
|   | `-VarDecl 0x1ace20e33b8 <col:5, col:9> col:9 used flags 'int'
|   |-DeclStmt 0x1ace20e34b8 <line:96:5, col:15>
|   | `-VarDecl 0x1ace20e3450 <col:5, col:9> col:9 used cflags 'int'
|   |-DeclStmt 0x1ace20e3548 <line:97:5, col:19>
|   | `-VarDecl 0x1ace20e34e0 <col:5, col:12> col:12 used currlen 'size_t':'unsigned long long'
|   |-BinaryOperator 0x1ace20e35c0 <line:99:5, line:42:25> 'int' '='
|   | |-DeclRefExpr 0x1ace20e3560 <line:99:5> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   | `-IntegerLiteral 0x1ace20e3598 <line:42:25> 'int' 0
|   |-BinaryOperator 0x1ace20e3778 <line:100:5, col:38> 'int' '='
|   | |-DeclRefExpr 0x1ace20e35e0 <col:5> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   | `-ImplicitCastExpr 0x1ace20e3760 <col:13, col:38> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1ace20e3740 <col:13, col:38> 'size_t':'unsigned long long' '='
|   |     |-DeclRefExpr 0x1ace20e3618 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x1ace20e3728 <col:23, col:38> 'size_t':'unsigned long long' <IntegralCast>
|   |       `-BinaryOperator 0x1ace20e3708 <col:23, col:38> 'int' '='
|   |         |-DeclRefExpr 0x1ace20e3650 <col:23> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |         `-BinaryOperator 0x1ace20e36e8 <col:32, col:38> 'int' '='
|   |           |-DeclRefExpr 0x1ace20e3688 <col:32> 'int' lvalue Var 0x1ace20e31f0 'min' 'int'
|   |           `-IntegerLiteral 0x1ace20e36c0 <col:38> 'int' 0
|   |-BinaryOperator 0x1ace20e3810 <line:101:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x1ace20e3798 <col:5> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   | `-UnaryOperator 0x1ace20e37f8 <col:11, col:12> 'int' prefix '-'
|   |   `-IntegerLiteral 0x1ace20e37d0 <col:12> 'int' 1
|   |-BinaryOperator 0x1ace20e38d0 <line:102:5, col:17> 'char' '='
|   | |-DeclRefExpr 0x1ace20e3830 <col:5> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   | `-ImplicitCastExpr 0x1ace20e38b8 <col:10, col:17> 'char' <LValueToRValue>
|   |   `-UnaryOperator 0x1ace20e38a0 <col:10, col:17> 'const char' lvalue prefix '*' cannot overflow
|   |     `-UnaryOperator 0x1ace20e3888 <col:11, col:17> 'const char *' postfix '++'
|   |       `-DeclRefExpr 0x1ace20e3868 <col:11> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |-WhileStmt 0x1ace2083e18 <line:104:5, line:347:5>
|   | |-BinaryOperator 0x1ace20e3950 <line:104:12, line:49:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x1ace20e3938 <line:104:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace20e38f0 <col:12> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   | | `-IntegerLiteral 0x1ace20e3910 <line:49:25> 'int' 7
|   | `-CompoundStmt 0x1ace2083df8 <line:104:32, line:347:5>
|   |   |-IfStmt 0x1ace20e4ca0 <line:105:9, line:49:25>
|   |   | |-BinaryOperator 0x1ace20e4c18 <line:105:13, col:64> 'int' '||'
|   |   | | |-BinaryOperator 0x1ace20e4a00 <col:13, col:19> 'int' '=='
|   |   | | | |-ImplicitCastExpr 0x1ace20e39c0 <col:13> 'int' <IntegralCast>
|   |   | | | | `-ImplicitCastExpr 0x1ace20e39a8 <col:13> 'char' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x1ace20e3970 <col:13> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |   | | | `-CharacterLiteral 0x1ace20e3990 <col:19> 'int' 0
|   |   | | `-ParenExpr 0x1ace20e4bf8 <col:27, col:64> 'int'
|   |   | |   `-BinaryOperator 0x1ace20e4bd8 <col:28, col:58> 'int' '&&'
|   |   | |     |-BinaryOperator 0x1ace20e4af8 <col:28, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |   | |     | |-ImplicitCastExpr 0x1ace20e4ac8 <.//openssl//file_jk/before\crypto\bio\b_print.c:105:28> 'char **' <LValueToRValue>
|   |   | |     | | `-DeclRefExpr 0x1ace20e4a20 <col:28> 'char **' lvalue ParmVar 0x1ace20e2b68 'buffer' 'char **'
|   |   | |     | `-ImplicitCastExpr 0x1ace20e4ae0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   |   | |     |   `-ParenExpr 0x1ace20e4aa8 <col:17, col:27> 'void *'
|   |   | |     |     `-CStyleCastExpr 0x1ace20e4a80 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |     |       `-IntegerLiteral 0x1ace20e4a40 <col:26> 'int' 0
|   |   | |     `-BinaryOperator 0x1ace20e4bb8 <.//openssl//file_jk/before\crypto\bio\b_print.c:105:46, col:58> 'int' '>='
|   |   | |       |-ImplicitCastExpr 0x1ace20e4b88 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x1ace20e4b18 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |   | |       `-ImplicitCastExpr 0x1ace20e4ba0 <col:57, col:58> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |         `-UnaryOperator 0x1ace20e4b70 <col:57, col:58> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   | |           `-ImplicitCastExpr 0x1ace20e4b58 <col:58> 'size_t *' <LValueToRValue>
|   |   | |             `-DeclRefExpr 0x1ace20e4b38 <col:58> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   |   | `-BinaryOperator 0x1ace20e4c80 <line:106:13, line:49:25> 'int' '='
|   |   |   |-DeclRefExpr 0x1ace20e4c38 <line:106:13> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |   |   `-IntegerLiteral 0x1ace20e4c58 <line:49:25> 'int' 7
|   |   `-SwitchStmt 0x1ace20e4cf0 <line:108:9, line:346:9>
|   |     |-ImplicitCastExpr 0x1ace20e4cd8 <line:108:17> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1ace20e4cb8 <col:17> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |     `-CompoundStmt 0x1ace2083d38 <col:24, line:346:9>
|   |       |-CaseStmt 0x1ace20e4d50 <line:109:9, line:114:28>
|   |       | |-ConstantExpr 0x1ace20e4d38 <line:42:25> 'int'
|   |       | | `-IntegerLiteral 0x1ace20e4d10 <col:25> 'int' 0
|   |       | `-IfStmt 0x1ace20e50d8 <line:110:13, line:114:28> has_else
|   |       |   |-BinaryOperator 0x1ace20e4de0 <line:110:17, col:23> 'int' '=='
|   |       |   | |-ImplicitCastExpr 0x1ace20e4dc8 <col:17> 'int' <IntegralCast>
|   |       |   | | `-ImplicitCastExpr 0x1ace20e4db0 <col:17> 'char' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x1ace20e4d78 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   | `-CharacterLiteral 0x1ace20e4d98 <col:23> 'int' 37
|   |       |   |-BinaryOperator 0x1ace20e4e48 <line:111:17, line:43:25> 'int' '='
|   |       |   | |-DeclRefExpr 0x1ace20e4e00 <line:111:17> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |       |   | `-IntegerLiteral 0x1ace20e4e20 <line:43:25> 'int' 1
|   |       |   `-IfStmt 0x1ace20e50c0 <line:113:17, line:114:28>
|   |       |     |-UnaryOperator 0x1ace20e5070 <line:113:20, col:70> 'int' prefix '!' cannot overflow
|   |       |     | `-CallExpr 0x1ace20e4fb0 <col:21, col:70> 'int'
|   |       |     |   |-ImplicitCastExpr 0x1ace20e4f98 <col:21> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       |     |   | `-DeclRefExpr 0x1ace20e4e68 <col:21> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       |     |   |-ImplicitCastExpr 0x1ace20e4ff8 <col:33> 'char **' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1ace20e4e88 <col:33> 'char **' lvalue ParmVar 0x1ace20e2ae8 'sbuffer' 'char **'
|   |       |     |   |-ImplicitCastExpr 0x1ace20e5010 <col:42> 'char **' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1ace20e4ea8 <col:42> 'char **' lvalue ParmVar 0x1ace20e2b68 'buffer' 'char **'
|   |       |     |   |-UnaryOperator 0x1ace20e4ee8 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   |       |     |   | `-DeclRefExpr 0x1ace20e4ec8 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |       |     |   |-ImplicitCastExpr 0x1ace20e5028 <col:60> 'size_t *' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x1ace20e4f00 <col:60> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   |       |     |   `-ImplicitCastExpr 0x1ace20e5058 <col:68> 'int' <IntegralCast>
|   |       |     |     `-ImplicitCastExpr 0x1ace20e5040 <col:68> 'char' <LValueToRValue>
|   |       |     |       `-DeclRefExpr 0x1ace20e4f20 <col:68> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     `-ReturnStmt 0x1ace20e50b0 <line:114:21, col:28>
|   |       |       `-IntegerLiteral 0x1ace20e5088 <col:28> 'int' 0
|   |       |-BinaryOperator 0x1ace20e5188 <line:115:13, col:25> 'char' '='
|   |       | |-DeclRefExpr 0x1ace20e5100 <col:13> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       | `-ImplicitCastExpr 0x1ace20e5170 <col:18, col:25> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1ace20e5158 <col:18, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1ace20e5140 <col:19, col:25> 'const char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1ace20e5120 <col:19> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |-BreakStmt 0x1ace20e51a8 <line:116:13>
|   |       |-CaseStmt 0x1ace20e51f0 <line:117:9, line:142:13>
|   |       | |-ConstantExpr 0x1ace20e51d8 <line:43:25> 'int'
|   |       | | `-IntegerLiteral 0x1ace20e51b0 <col:25> 'int' 1
|   |       | `-SwitchStmt 0x1ace20e5268 <line:118:13, line:142:13>
|   |       |   |-ImplicitCastExpr 0x1ace20e5250 <line:118:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1ace20e5238 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1ace20e5218 <col:21> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   `-CompoundStmt 0x1ace20e5cb0 <col:25, line:142:13>
|   |       |     |-CaseStmt 0x1ace20e52b8 <line:119:13, line:53:32>
|   |       |     | |-ConstantExpr 0x1ace20e52a0 <line:119:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e5288 <col:18> 'int' 45
|   |       |     | `-CompoundAssignOperator 0x1ace20e5390 <line:120:17, line:53:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1ace20e52e0 <line:120:17> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1ace20e5370 <line:53:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1ace20e5350 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1ace20e5300 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1ace20e5328 <col:31> 'int' 0
|   |       |     |-BinaryOperator 0x1ace20e5448 <line:121:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1ace20e53c0 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1ace20e5430 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1ace20e5418 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1ace20e5400 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1ace20e53e0 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |-BreakStmt 0x1ace20e5468 <line:122:17>
|   |       |     |-CaseStmt 0x1ace20e54a0 <line:123:13, line:55:32>
|   |       |     | |-ConstantExpr 0x1ace20e5488 <line:123:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e5470 <col:18> 'int' 43
|   |       |     | `-CompoundAssignOperator 0x1ace20e5578 <line:124:17, line:55:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1ace20e54c8 <line:124:17> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1ace20e5558 <line:55:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1ace20e5538 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1ace20e54e8 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1ace20e5510 <col:31> 'int' 1
|   |       |     |-BinaryOperator 0x1ace20e5630 <line:125:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1ace20e55a8 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1ace20e5618 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1ace20e5600 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1ace20e55e8 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1ace20e55c8 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |-BreakStmt 0x1ace20e5650 <line:126:17>
|   |       |     |-CaseStmt 0x1ace20e5688 <line:127:13, line:57:32>
|   |       |     | |-ConstantExpr 0x1ace20e5670 <line:127:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e5658 <col:18> 'int' 32
|   |       |     | `-CompoundAssignOperator 0x1ace20e5760 <line:128:17, line:57:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1ace20e56b0 <line:128:17> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1ace20e5740 <line:57:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1ace20e5720 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1ace20e56d0 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1ace20e56f8 <col:31> 'int' 2
|   |       |     |-BinaryOperator 0x1ace20e5818 <line:129:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1ace20e5790 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1ace20e5800 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1ace20e57e8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1ace20e57d0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1ace20e57b0 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |-BreakStmt 0x1ace20e5838 <line:130:17>
|   |       |     |-CaseStmt 0x1ace20e5870 <line:131:13, line:59:32>
|   |       |     | |-ConstantExpr 0x1ace20e5858 <line:131:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e5840 <col:18> 'int' 35
|   |       |     | `-CompoundAssignOperator 0x1ace20e5948 <line:132:17, line:59:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1ace20e5898 <line:132:17> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1ace20e5928 <line:59:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1ace20e5908 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1ace20e58b8 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1ace20e58e0 <col:31> 'int' 3
|   |       |     |-BinaryOperator 0x1ace20e5a10 <line:133:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1ace20e5978 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1ace20e59e8 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1ace20e59d0 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1ace20e59b8 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1ace20e5998 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |-BreakStmt 0x1ace20e5a30 <line:134:17>
|   |       |     |-CaseStmt 0x1ace20e5a68 <line:135:13, line:61:32>
|   |       |     | |-ConstantExpr 0x1ace20e5a50 <line:135:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e5a38 <col:18> 'int' 48
|   |       |     | `-CompoundAssignOperator 0x1ace20e5b40 <line:136:17, line:61:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1ace20e5a90 <line:136:17> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1ace20e5b20 <line:61:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1ace20e5b00 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1ace20e5ab0 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1ace20e5ad8 <col:31> 'int' 4
|   |       |     |-BinaryOperator 0x1ace20e5bf8 <line:137:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1ace20e5b70 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1ace20e5be0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1ace20e5bc8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1ace20e5bb0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1ace20e5b90 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |-BreakStmt 0x1ace20e5c18 <line:138:17>
|   |       |     |-DefaultStmt 0x1ace20e5c88 <line:139:13, line:44:25>
|   |       |     | `-BinaryOperator 0x1ace20e5c68 <line:140:17, line:44:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1ace20e5c20 <line:140:17> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1ace20e5c40 <line:44:25> 'int' 2
|   |       |     `-BreakStmt 0x1ace20e5ca8 <line:141:17>
|   |       |-BreakStmt 0x1ace20e5d48 <line:143:13>
|   |       |-CaseStmt 0x1ace20e5d90 <line:144:9, line:45:25>
|   |       | |-ConstantExpr 0x1ace20e5d78 <line:44:25> 'int'
|   |       | | `-IntegerLiteral 0x1ace20e5d50 <col:25> 'int' 2
|   |       | `-IfStmt 0x1ace20e64e8 <line:145:13, line:45:25> has_else
|   |       |   |-CallExpr 0x1ace20e5e90 <line:145:17, col:42> 'int'
|   |       |   | |-ImplicitCastExpr 0x1ace20e5e78 <col:17> 'int (*)(int)' <FunctionToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x1ace20e5db8 <col:17> 'int (int)' Function 0x1ace20d26a0 'isdigit' 'int (int)'
|   |       |   | `-ImplicitCastExpr 0x1ace20e5eb8 <col:25, col:40> 'int' <IntegralCast>
|   |       |   |   `-CStyleCastExpr 0x1ace20e5e28 <col:25, col:40> 'unsigned char' <IntegralCast>
|   |       |   |     `-ImplicitCastExpr 0x1ace20e5e10 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|   |       |   |       `-DeclRefExpr 0x1ace20e5dd8 <col:40> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   |-CompoundStmt 0x1ace20e6100 <col:45, line:148:13>
|   |       |   | |-BinaryOperator 0x1ace20e6038 <line:146:17, line:79:32> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1ace20e5ed0 <line:146:17> 'int' lvalue Var 0x1ace20e31f0 'min' 'int'
|   |       |   | | `-BinaryOperator 0x1ace20e6018 <col:23, line:79:32> 'int' '+'
|   |       |   | |   |-BinaryOperator 0x1ace20e5f50 <line:146:23, col:28> 'int' '*'
|   |       |   | |   | |-IntegerLiteral 0x1ace20e5ef0 <col:23> 'int' 10
|   |       |   | |   | `-ImplicitCastExpr 0x1ace20e5f38 <col:28> 'int' <LValueToRValue>
|   |       |   | |   |   `-DeclRefExpr 0x1ace20e5f18 <col:28> 'int' lvalue Var 0x1ace20e31f0 'min' 'int'
|   |       |   | |   `-ParenExpr 0x1ace20e5ff8 <line:79:24, col:32> 'int'
|   |       |   | |     `-BinaryOperator 0x1ace20e5fd8 <line:146:46, line:79:29> 'int' '-'
|   |       |   | |       |-ImplicitCastExpr 0x1ace20e5fc0 <line:146:46> 'int' <IntegralCast>
|   |       |   | |       | `-ImplicitCastExpr 0x1ace20e5fa8 <col:46> 'char' <LValueToRValue>
|   |       |   | |       |   `-DeclRefExpr 0x1ace20e5f70 <col:46> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   | |       `-CharacterLiteral 0x1ace20e5f90 <line:79:29> 'int' 48
|   |       |   | `-BinaryOperator 0x1ace20e60e0 <line:147:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1ace20e6058 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1ace20e60c8 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1ace20e60b0 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1ace20e6098 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1ace20e6078 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |   `-IfStmt 0x1ace20e64c0 <line:148:20, line:45:25> has_else
|   |       |     |-BinaryOperator 0x1ace20e6188 <line:148:24, col:30> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x1ace20e6170 <col:24> 'int' <IntegralCast>
|   |       |     | | `-ImplicitCastExpr 0x1ace20e6158 <col:24> 'char' <LValueToRValue>
|   |       |     | |   `-DeclRefExpr 0x1ace20e6120 <col:24> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-CharacterLiteral 0x1ace20e6140 <col:30> 'int' 42
|   |       |     |-CompoundStmt 0x1ace20e6438 <col:35, line:152:13>
|   |       |     | |-BinaryOperator 0x1ace20e63b0 <line:150:17, col:29> 'char' '='
|   |       |     | | |-DeclRefExpr 0x1ace20e6328 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | | `-ImplicitCastExpr 0x1ace20e6398 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     | |   `-UnaryOperator 0x1ace20e6380 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     | |     `-UnaryOperator 0x1ace20e6368 <col:23, col:29> 'const char *' postfix '++'
|   |       |     | |       `-DeclRefExpr 0x1ace20e6348 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     | `-BinaryOperator 0x1ace20e6418 <line:151:17, line:45:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1ace20e63d0 <line:151:17> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1ace20e63f0 <line:45:25> 'int' 3
|   |       |     `-BinaryOperator 0x1ace20e64a0 <line:153:17, line:45:25> 'int' '='
|   |       |       |-DeclRefExpr 0x1ace20e6458 <line:153:17> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |       |       `-IntegerLiteral 0x1ace20e6478 <line:45:25> 'int' 3
|   |       |-BreakStmt 0x1ace20e6510 <line:154:13>
|   |       |-CaseStmt 0x1ace20e6558 <line:155:9, line:47:25>
|   |       | |-ConstantExpr 0x1ace20e6540 <line:45:25> 'int'
|   |       | | `-IntegerLiteral 0x1ace20e6518 <col:25> 'int' 3
|   |       | `-IfStmt 0x1ace20e67a0 <line:156:13, line:47:25> has_else
|   |       |   |-BinaryOperator 0x1ace20e65e8 <line:156:17, col:23> 'int' '=='
|   |       |   | |-ImplicitCastExpr 0x1ace20e65d0 <col:17> 'int' <IntegralCast>
|   |       |   | | `-ImplicitCastExpr 0x1ace20e65b8 <col:17> 'char' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x1ace20e6580 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   | `-CharacterLiteral 0x1ace20e65a0 <col:23> 'int' 46
|   |       |   |-CompoundStmt 0x1ace20e6718 <col:28, line:159:13>
|   |       |   | |-BinaryOperator 0x1ace20e6650 <line:157:17, line:46:25> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1ace20e6608 <line:157:17> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |       |   | | `-IntegerLiteral 0x1ace20e6628 <line:46:25> 'int' 4
|   |       |   | `-BinaryOperator 0x1ace20e66f8 <line:158:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1ace20e6670 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1ace20e66e0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1ace20e66c8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1ace20e66b0 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1ace20e6690 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |   `-BinaryOperator 0x1ace20e6780 <line:160:17, line:47:25> 'int' '='
|   |       |     |-DeclRefExpr 0x1ace20e6738 <line:160:17> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |       |     `-IntegerLiteral 0x1ace20e6758 <line:47:25> 'int' 5
|   |       |-BreakStmt 0x1ace20e67c8 <line:161:13>
|   |       |-CaseStmt 0x1ace20e6810 <line:162:9, line:47:25>
|   |       | |-ConstantExpr 0x1ace20e67f8 <line:46:25> 'int'
|   |       | | `-IntegerLiteral 0x1ace20e67d0 <col:25> 'int' 4
|   |       | `-IfStmt 0x1ace20deeb8 <line:163:13, line:47:25> has_else
|   |       |   |-CallExpr 0x1ace20e68e8 <line:163:17, col:42> 'int'
|   |       |   | |-ImplicitCastExpr 0x1ace20e68d0 <col:17> 'int (*)(int)' <FunctionToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x1ace20e6838 <col:17> 'int (int)' Function 0x1ace20d26a0 'isdigit' 'int (int)'
|   |       |   | `-ImplicitCastExpr 0x1ace20e6910 <col:25, col:40> 'int' <IntegralCast>
|   |       |   |   `-CStyleCastExpr 0x1ace20e68a8 <col:25, col:40> 'unsigned char' <IntegralCast>
|   |       |   |     `-ImplicitCastExpr 0x1ace20e6890 <col:40> 'char' <LValueToRValue> part_of_explicit_cast
|   |       |   |       `-DeclRefExpr 0x1ace20e6858 <col:40> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   |-CompoundStmt 0x1ace20debe8 <col:45, line:168:13>
|   |       |   | |-IfStmt 0x1ace20de9a0 <line:164:17, line:165:27>
|   |       |   | | |-BinaryOperator 0x1ace20e6988 <line:164:21, col:27> 'int' '<'
|   |       |   | | | |-ImplicitCastExpr 0x1ace20e6970 <col:21> 'int' <LValueToRValue>
|   |       |   | | | | `-DeclRefExpr 0x1ace20e6928 <col:21> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       |   | | | `-IntegerLiteral 0x1ace20e6948 <col:27> 'int' 0
|   |       |   | | `-BinaryOperator 0x1ace20e69f0 <line:165:21, col:27> 'int' '='
|   |       |   | |   |-DeclRefExpr 0x1ace20e69a8 <col:21> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       |   | |   `-IntegerLiteral 0x1ace20e69c8 <col:27> 'int' 0
|   |       |   | |-BinaryOperator 0x1ace20deb20 <line:166:17, line:79:32> 'int' '='
|   |       |   | | |-DeclRefExpr 0x1ace20de9b8 <line:166:17> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       |   | | `-BinaryOperator 0x1ace20deb00 <col:23, line:79:32> 'int' '+'
|   |       |   | |   |-BinaryOperator 0x1ace20dea38 <line:166:23, col:28> 'int' '*'
|   |       |   | |   | |-IntegerLiteral 0x1ace20de9d8 <col:23> 'int' 10
|   |       |   | |   | `-ImplicitCastExpr 0x1ace20dea20 <col:28> 'int' <LValueToRValue>
|   |       |   | |   |   `-DeclRefExpr 0x1ace20dea00 <col:28> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       |   | |   `-ParenExpr 0x1ace20deae0 <line:79:24, col:32> 'int'
|   |       |   | |     `-BinaryOperator 0x1ace20deac0 <line:166:46, line:79:29> 'int' '-'
|   |       |   | |       |-ImplicitCastExpr 0x1ace20deaa8 <line:166:46> 'int' <IntegralCast>
|   |       |   | |       | `-ImplicitCastExpr 0x1ace20dea90 <col:46> 'char' <LValueToRValue>
|   |       |   | |       |   `-DeclRefExpr 0x1ace20dea58 <col:46> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   | |       `-CharacterLiteral 0x1ace20dea78 <line:79:29> 'int' 48
|   |       |   | `-BinaryOperator 0x1ace20debc8 <line:167:17, col:29> 'char' '='
|   |       |   |   |-DeclRefExpr 0x1ace20deb40 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   |   `-ImplicitCastExpr 0x1ace20debb0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |   |     `-UnaryOperator 0x1ace20deb98 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |   |       `-UnaryOperator 0x1ace20deb80 <col:23, col:29> 'const char *' postfix '++'
|   |       |   |         `-DeclRefExpr 0x1ace20deb60 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |   `-IfStmt 0x1ace20dee90 <line:168:20, line:47:25> has_else
|   |       |     |-BinaryOperator 0x1ace20dec78 <line:168:24, col:30> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x1ace20dec60 <col:24> 'int' <IntegralCast>
|   |       |     | | `-ImplicitCastExpr 0x1ace20dec48 <col:24> 'char' <LValueToRValue>
|   |       |     | |   `-DeclRefExpr 0x1ace20dec10 <col:24> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-CharacterLiteral 0x1ace20dec30 <col:30> 'int' 42
|   |       |     |-CompoundStmt 0x1ace20dee08 <col:35, line:172:13>
|   |       |     | |-BinaryOperator 0x1ace20ded80 <line:170:17, col:29> 'char' '='
|   |       |     | | |-DeclRefExpr 0x1ace20decf8 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | | `-ImplicitCastExpr 0x1ace20ded68 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     | |   `-UnaryOperator 0x1ace20ded50 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     | |     `-UnaryOperator 0x1ace20ded38 <col:23, col:29> 'const char *' postfix '++'
|   |       |     | |       `-DeclRefExpr 0x1ace20ded18 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     | `-BinaryOperator 0x1ace20dede8 <line:171:17, line:47:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1ace20deda0 <line:171:17> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |       |     |   `-IntegerLiteral 0x1ace20dedc0 <line:47:25> 'int' 5
|   |       |     `-BinaryOperator 0x1ace20dee70 <line:173:17, line:47:25> 'int' '='
|   |       |       |-DeclRefExpr 0x1ace20dee28 <line:173:17> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |       |       `-IntegerLiteral 0x1ace20dee48 <line:47:25> 'int' 5
|   |       |-BreakStmt 0x1ace20deee0 <line:174:13>
|   |       |-CaseStmt 0x1ace20def28 <line:175:9, line:199:13>
|   |       | |-ConstantExpr 0x1ace20def10 <line:47:25> 'int'
|   |       | | `-IntegerLiteral 0x1ace20deee8 <col:25> 'int' 5
|   |       | `-SwitchStmt 0x1ace20defa0 <line:176:13, line:199:13>
|   |       |   |-ImplicitCastExpr 0x1ace20def88 <line:176:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1ace20def70 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1ace20def50 <col:21> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   `-CompoundStmt 0x1ace20df748 <col:25, line:199:13>
|   |       |     |-CaseStmt 0x1ace20deff0 <line:177:13, line:68:25>
|   |       |     | |-ConstantExpr 0x1ace20defd8 <line:177:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20defc0 <col:18> 'int' 104
|   |       |     | `-BinaryOperator 0x1ace20df060 <line:178:17, line:68:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1ace20df018 <line:178:17> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1ace20df038 <line:68:25> 'int' 1
|   |       |     |-BinaryOperator 0x1ace20df108 <line:179:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1ace20df080 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1ace20df0f0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1ace20df0d8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1ace20df0c0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1ace20df0a0 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |-BreakStmt 0x1ace20df128 <line:180:17>
|   |       |     |-CaseStmt 0x1ace20df160 <line:181:13, line:69:25>
|   |       |     | |-ConstantExpr 0x1ace20df148 <line:181:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20df130 <col:18> 'int' 108
|   |       |     | `-IfStmt 0x1ace20df368 <line:182:17, line:69:25> has_else
|   |       |     |   |-BinaryOperator 0x1ace20df220 <line:182:21, col:32> 'int' '=='
|   |       |     |   | |-ImplicitCastExpr 0x1ace20df208 <col:21, col:22> 'int' <IntegralCast>
|   |       |     |   | | `-ImplicitCastExpr 0x1ace20df1f0 <col:21, col:22> 'char' <LValueToRValue>
|   |       |     |   | |   `-UnaryOperator 0x1ace20df1c0 <col:21, col:22> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |   | |     `-ImplicitCastExpr 0x1ace20df1a8 <col:22> 'const char *' <LValueToRValue>
|   |       |     |   | |       `-DeclRefExpr 0x1ace20df188 <col:22> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |   | `-CharacterLiteral 0x1ace20df1d8 <col:32> 'int' 108
|   |       |     |   |-CompoundStmt 0x1ace20df2e0 <col:37, line:185:17>
|   |       |     |   | |-BinaryOperator 0x1ace20df288 <line:183:21, line:71:25> 'int' '='
|   |       |     |   | | |-DeclRefExpr 0x1ace20df240 <line:183:21> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |     |   | | `-IntegerLiteral 0x1ace20df260 <line:71:25> 'int' 4
|   |       |     |   | `-UnaryOperator 0x1ace20df2c8 <line:184:21, col:27> 'const char *' postfix '++'
|   |       |     |   |   `-DeclRefExpr 0x1ace20df2a8 <col:21> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |   `-BinaryOperator 0x1ace20df348 <line:186:21, line:69:25> 'int' '='
|   |       |     |     |-DeclRefExpr 0x1ace20df300 <line:186:21> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |     |     `-IntegerLiteral 0x1ace20df320 <line:69:25> 'int' 2
|   |       |     |-BinaryOperator 0x1ace20df418 <line:187:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1ace20df390 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1ace20df400 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1ace20df3e8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1ace20df3d0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1ace20df3b0 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |-BreakStmt 0x1ace20df438 <line:188:17>
|   |       |     |-CaseStmt 0x1ace20df470 <line:189:13, line:71:25>
|   |       |     | |-ConstantExpr 0x1ace20df458 <line:189:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20df440 <col:18> 'int' 113
|   |       |     | `-BinaryOperator 0x1ace20df4e0 <line:190:17, line:71:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1ace20df498 <line:190:17> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1ace20df4b8 <line:71:25> 'int' 4
|   |       |     |-BinaryOperator 0x1ace20df588 <line:191:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1ace20df500 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1ace20df570 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1ace20df558 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1ace20df540 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1ace20df520 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |-BreakStmt 0x1ace20df5a8 <line:192:17>
|   |       |     |-CaseStmt 0x1ace20df5e0 <line:193:13, line:70:25>
|   |       |     | |-ConstantExpr 0x1ace20df5c8 <line:193:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20df5b0 <col:18> 'int' 76
|   |       |     | `-BinaryOperator 0x1ace20df650 <line:194:17, line:70:25> 'int' '='
|   |       |     |   |-DeclRefExpr 0x1ace20df608 <line:194:17> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |     |   `-IntegerLiteral 0x1ace20df628 <line:70:25> 'int' 3
|   |       |     |-BinaryOperator 0x1ace20df6f8 <line:195:17, col:29> 'char' '='
|   |       |     | |-DeclRefExpr 0x1ace20df670 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     | `-ImplicitCastExpr 0x1ace20df6e0 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |   `-UnaryOperator 0x1ace20df6c8 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |     `-UnaryOperator 0x1ace20df6b0 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |       `-DeclRefExpr 0x1ace20df690 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |-BreakStmt 0x1ace20df718 <line:196:17>
|   |       |     `-DefaultStmt 0x1ace20df728 <line:197:13, line:198:17>
|   |       |       `-BreakStmt 0x1ace20df720 <col:17>
|   |       |-BinaryOperator 0x1ace20df808 <line:200:13, line:48:25> 'int' '='
|   |       | |-DeclRefExpr 0x1ace20df7c0 <line:200:13> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |       | `-IntegerLiteral 0x1ace20df7e0 <line:48:25> 'int' 6
|   |       |-BreakStmt 0x1ace20df828 <line:201:13>
|   |       |-CaseStmt 0x1ace20df870 <line:202:9, line:336:13>
|   |       | |-ConstantExpr 0x1ace20df858 <line:48:25> 'int'
|   |       | | `-IntegerLiteral 0x1ace20df830 <col:25> 'int' 6
|   |       | `-SwitchStmt 0x1ace20df8e8 <line:203:13, line:336:13>
|   |       |   |-ImplicitCastExpr 0x1ace20df8d0 <line:203:21> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x1ace20df8b8 <col:21> 'char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x1ace20df898 <col:21> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |   `-CompoundStmt 0x1ace20838f8 <col:25, line:336:13>
|   |       |     |-CaseStmt 0x1ace20df938 <line:204:13, line:219:17>
|   |       |     | |-ConstantExpr 0x1ace20df920 <line:204:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20df908 <col:18> 'int' 100
|   |       |     | `-CaseStmt 0x1ace20e7a30 <line:205:13, line:219:17>
|   |       |     |   |-ConstantExpr 0x1ace20df978 <line:205:18> 'int'
|   |       |     |   | `-CharacterLiteral 0x1ace20df960 <col:18> 'int' 105
|   |       |     |   `-SwitchStmt 0x1ace20e7a90 <line:206:17, line:219:17>
|   |       |     |     |-ImplicitCastExpr 0x1ace20e7a78 <line:206:25> 'int' <LValueToRValue>
|   |       |     |     | `-DeclRefExpr 0x1ace20e7a58 <col:25> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |     |     `-CompoundStmt 0x1ace20e7d48 <col:33, line:219:17>
|   |       |     |       |-CaseStmt 0x1ace20e7af0 <line:207:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1ace20e7ad8 <line:68:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1ace20e7ab0 <col:25> 'int' 1
|   |       |     |       | `-NullStmt 0x1ace20e7b58 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1ace20e7b60 <line:209:21>
|   |       |     |       |-CaseStmt 0x1ace20e7ba8 <line:210:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1ace20e7b90 <line:69:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1ace20e7b68 <col:25> 'int' 2
|   |       |     |       | `-NullStmt 0x1ace20e7c10 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1ace20e7c18 <line:212:21>
|   |       |     |       |-CaseStmt 0x1ace20e7c60 <line:213:17, <invalid sloc>>
|   |       |     |       | |-ConstantExpr 0x1ace20e7c48 <line:71:25> 'int'
|   |       |     |       | | `-IntegerLiteral 0x1ace20e7c20 <col:25> 'int' 4
|   |       |     |       | `-NullStmt 0x1ace20e7cc8 <<invalid sloc>>
|   |       |     |       |-BreakStmt 0x1ace20e7cd0 <line:215:21>
|   |       |     |       |-DefaultStmt 0x1ace20e7d20 <line:216:17, col:24>
|   |       |     |       | `-NullStmt 0x1ace20e7d18 <col:24>
|   |       |     |       `-BreakStmt 0x1ace20e7d40 <line:218:21>
|   |       |     |-IfStmt 0x1ace20e7f28 <line:220:17, line:222:28>
|   |       |     | |-OpaqueValueExpr 0x1ace20e7f10 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1ace20e7f00 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1ace20e7ed8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1ace20e7f40 <line:223:17>
|   |       |     |-CaseStmt 0x1ace20e7f78 <line:224:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1ace20e7f60 <line:224:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e7f48 <col:18> 'int' 88
|   |       |     | `-CompoundAssignOperator 0x1ace20e8050 <line:225:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1ace20e7fa0 <line:225:17> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1ace20e8030 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1ace20e8010 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1ace20e7fc0 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1ace20e7fe8 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1ace20e80b0 <line:227:13, line:65:32>
|   |       |     | |-ConstantExpr 0x1ace20e8098 <line:227:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e8080 <col:18> 'int' 120
|   |       |     | `-CaseStmt 0x1ace20e8108 <line:228:13, line:65:32>
|   |       |     |   |-ConstantExpr 0x1ace20e80f0 <line:228:18> 'int'
|   |       |     |   | `-CharacterLiteral 0x1ace20e80d8 <col:18> 'int' 111
|   |       |     |   `-CaseStmt 0x1ace20e8160 <line:229:13, line:65:32>
|   |       |     |     |-ConstantExpr 0x1ace20e8148 <line:229:18> 'int'
|   |       |     |     | `-CharacterLiteral 0x1ace20e8130 <col:18> 'int' 117
|   |       |     |     `-CompoundAssignOperator 0x1ace20e8238 <line:230:17, line:65:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |       |-DeclRefExpr 0x1ace20e8188 <line:230:17> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     |       `-ParenExpr 0x1ace20e8218 <line:65:25, col:32> 'int'
|   |       |     |         `-BinaryOperator 0x1ace20e81f8 <col:26, col:31> 'int' '<<'
|   |       |     |           |-IntegerLiteral 0x1ace20e81a8 <col:26> 'int' 1
|   |       |     |           `-IntegerLiteral 0x1ace20e81d0 <col:31> 'int' 6
|   |       |     |-SwitchStmt 0x1ace20e82a0 <line:231:17, line:244:17>
|   |       |     | |-ImplicitCastExpr 0x1ace20e8288 <line:231:25> 'int' <LValueToRValue>
|   |       |     | | `-DeclRefExpr 0x1ace20e8268 <col:25> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |     | `-CompoundStmt 0x1ace20e8558 <col:33, line:244:17>
|   |       |     |   |-CaseStmt 0x1ace20e8300 <line:232:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1ace20e82e8 <line:68:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1ace20e82c0 <col:25> 'int' 1
|   |       |     |   | `-NullStmt 0x1ace20e8368 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1ace20e8370 <line:234:21>
|   |       |     |   |-CaseStmt 0x1ace20e83b8 <line:235:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1ace20e83a0 <line:69:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1ace20e8378 <col:25> 'int' 2
|   |       |     |   | `-NullStmt 0x1ace20e8420 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1ace20e8428 <line:237:21>
|   |       |     |   |-CaseStmt 0x1ace20e8470 <line:238:17, <invalid sloc>>
|   |       |     |   | |-ConstantExpr 0x1ace20e8458 <line:71:25> 'int'
|   |       |     |   | | `-IntegerLiteral 0x1ace20e8430 <col:25> 'int' 4
|   |       |     |   | `-NullStmt 0x1ace20e84d8 <<invalid sloc>>
|   |       |     |   |-BreakStmt 0x1ace20e84e0 <line:240:21>
|   |       |     |   |-DefaultStmt 0x1ace20e8530 <line:241:17, col:24>
|   |       |     |   | `-NullStmt 0x1ace20e8528 <col:24>
|   |       |     |   `-BreakStmt 0x1ace20e8550 <line:243:21>
|   |       |     |-IfStmt 0x1ace20e8918 <line:245:17, line:248:28>
|   |       |     | |-OpaqueValueExpr 0x1ace20e8900 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1ace20e88f0 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1ace20e88c8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1ace20e8930 <line:249:17>
|   |       |     |-CaseStmt 0x1ace20e8968 <line:250:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1ace20e8950 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e8938 <col:18> 'int' 102
|   |       |     | `-NullStmt 0x1ace20e8af8 <<invalid sloc>>
|   |       |     |-IfStmt 0x1ace20e8e30 <line:255:17, line:257:28>
|   |       |     | |-UnaryOperator 0x1ace20e8de0 <line:255:21, line:256:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1ace20e8cd0 <line:255:22, line:256:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e8cb8 <line:255:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e8b00 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1ace20e1f00 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e8d38 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e8b20 <col:28> 'char **' lvalue ParmVar 0x1ace20e2ae8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e8d50 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e8b40 <col:37> 'char **' lvalue ParmVar 0x1ace20e2b68 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1ace20e8b80 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1ace20e8b60 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e8d68 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e8b98 <col:55> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e8d80 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e8bb8 <col:63> 'double' lvalue Var 0x1ace20e30c0 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e8d98 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e8bd8 <col:71> 'int' lvalue Var 0x1ace20e31f0 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e8db0 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e8bf8 <col:76> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e8dc8 <line:256:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e8c18 <col:28> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1ace20e8c38 <line:74:25> 'int' 0
|   |       |     | `-ReturnStmt 0x1ace20e8e20 <line:257:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1ace20e8df8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1ace20e8e48 <line:258:17>
|   |       |     |-CaseStmt 0x1ace20e8e80 <line:259:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1ace20e8e68 <line:259:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e8e50 <col:18> 'int' 69
|   |       |     | `-CompoundAssignOperator 0x1ace20e8f58 <line:260:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1ace20e8ea8 <line:260:17> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1ace20e8f38 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1ace20e8f18 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1ace20e8ec8 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1ace20e8ef0 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1ace20e8fb8 <line:262:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1ace20e8fa0 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e8f88 <col:18> 'int' 101
|   |       |     | `-NullStmt 0x1ace20e9120 <<invalid sloc>>
|   |       |     |-IfStmt 0x1ace20e9400 <line:267:17, line:269:28>
|   |       |     | |-UnaryOperator 0x1ace20e93b0 <line:267:21, line:268:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1ace20e92a0 <line:267:22, line:268:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9288 <line:267:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9128 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1ace20e1f00 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9308 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9148 <col:28> 'char **' lvalue ParmVar 0x1ace20e2ae8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9320 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9168 <col:37> 'char **' lvalue ParmVar 0x1ace20e2b68 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1ace20e91a8 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9188 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9338 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e91c0 <col:55> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9350 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e91e0 <col:63> 'double' lvalue Var 0x1ace20e30c0 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9368 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9200 <col:71> 'int' lvalue Var 0x1ace20e31f0 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9380 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9220 <col:76> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9398 <line:268:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9240 <col:28> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1ace20e9260 <line:75:25> 'int' 1
|   |       |     | `-ReturnStmt 0x1ace20e93f0 <line:269:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1ace20e93c8 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1ace20e9418 <line:270:17>
|   |       |     |-CaseStmt 0x1ace20e9450 <line:271:13, line:63:32>
|   |       |     | |-ConstantExpr 0x1ace20e9438 <line:271:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e9420 <col:18> 'int' 71
|   |       |     | `-CompoundAssignOperator 0x1ace20e9528 <line:272:17, line:63:32> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       |     |   |-DeclRefExpr 0x1ace20e9478 <line:272:17> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     |   `-ParenExpr 0x1ace20e9508 <line:63:25, col:32> 'int'
|   |       |     |     `-BinaryOperator 0x1ace20e94e8 <col:26, col:31> 'int' '<<'
|   |       |     |       |-IntegerLiteral 0x1ace20e9498 <col:26> 'int' 1
|   |       |     |       `-IntegerLiteral 0x1ace20e94c0 <col:31> 'int' 5
|   |       |     |-CaseStmt 0x1ace20e9588 <line:274:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1ace20e9570 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e9558 <col:18> 'int' 103
|   |       |     | `-NullStmt 0x1ace20e96f0 <<invalid sloc>>
|   |       |     |-IfStmt 0x1ace20e99d0 <line:279:17, line:281:28>
|   |       |     | |-UnaryOperator 0x1ace20e9980 <line:279:21, line:280:43> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1ace20e9870 <line:279:22, line:280:43> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9858 <line:279:22> 'int (*)(char **, char **, size_t *, size_t *, double, int, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e96f8 <col:22> 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' Function 0x1ace20e1f00 'fmtfp' 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e98d8 <col:28> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9718 <col:28> 'char **' lvalue ParmVar 0x1ace20e2ae8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e98f0 <col:37> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9738 <col:37> 'char **' lvalue ParmVar 0x1ace20e2b68 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1ace20e9778 <col:45, col:46> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9758 <col:46> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9908 <col:55> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9790 <col:55> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9920 <col:63> 'double' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e97b0 <col:63> 'double' lvalue Var 0x1ace20e30c0 'fvalue' 'double'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9938 <col:71> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e97d0 <col:71> 'int' lvalue Var 0x1ace20e31f0 'min' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9950 <col:76> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e97f0 <col:76> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e9968 <line:280:28> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e9810 <col:28> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     | |   `-IntegerLiteral 0x1ace20e9830 <line:76:25> 'int' 2
|   |       |     | `-ReturnStmt 0x1ace20e99c0 <line:281:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1ace20e9998 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1ace20e99e8 <line:282:17>
|   |       |     |-CaseStmt 0x1ace20e6a20 <line:283:13, line:286:28>
|   |       |     | |-ConstantExpr 0x1ace20e9a08 <line:283:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e99f0 <col:18> 'int' 99
|   |       |     | `-IfStmt 0x1ace20e6b90 <line:284:17, line:286:28>
|   |       |     |   |-OpaqueValueExpr 0x1ace20e6b78 <<invalid sloc>> '_Bool'
|   |       |     |   `-ReturnStmt 0x1ace20e6b68 <col:21, col:28>
|   |       |     |     `-IntegerLiteral 0x1ace20e6b40 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1ace20e6ba8 <line:287:17>
|   |       |     |-CaseStmt 0x1ace20e6be0 <line:288:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1ace20e6bc8 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e6bb0 <col:18> 'int' 115
|   |       |     | `-NullStmt 0x1ace20e6c80 <<invalid sloc>>
|   |       |     |-IfStmt 0x1ace20e6e68 <line:290:17, line:295:17>
|   |       |     | |-BinaryOperator 0x1ace20e6ce8 <line:290:21, col:27> 'int' '<'
|   |       |     | | |-ImplicitCastExpr 0x1ace20e6cd0 <col:21> 'int' <LValueToRValue>
|   |       |     | | | `-DeclRefExpr 0x1ace20e6c88 <col:21> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       |     | | `-IntegerLiteral 0x1ace20e6ca8 <col:27> 'int' 0
|   |       |     | `-CompoundStmt 0x1ace20e6e50 <col:30, line:295:17>
|   |       |     |   `-IfStmt 0x1ace20e6e28 <line:291:21, line:294:32> has_else
|   |       |     |     |-ImplicitCastExpr 0x1ace20e6d28 <line:291:25> 'char **' <LValueToRValue>
|   |       |     |     | `-DeclRefExpr 0x1ace20e6d08 <col:25> 'char **' lvalue ParmVar 0x1ace20e2b68 'buffer' 'char **'
|   |       |     |     |-NullStmt 0x1ace20e6e20 <line:292:25>
|   |       |     |     `-BinaryOperator 0x1ace20e6e00 <line:294:25, col:32> 'int' '='
|   |       |     |       |-DeclRefExpr 0x1ace20e6d60 <col:25> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       |     |       `-ImplicitCastExpr 0x1ace20e6de8 <col:31, col:32> 'int' <IntegralCast>
|   |       |     |         `-ImplicitCastExpr 0x1ace20e6dd0 <col:31, col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |           `-UnaryOperator 0x1ace20e6db8 <col:31, col:32> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |     |             `-ImplicitCastExpr 0x1ace20e6da0 <col:32> 'size_t *' <LValueToRValue>
|   |       |     |               `-DeclRefExpr 0x1ace20e6d80 <col:32> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   |       |     |-IfStmt 0x1ace20e71a0 <line:296:17, line:298:28>
|   |       |     | |-UnaryOperator 0x1ace20e7150 <line:296:21, line:297:44> 'int' prefix '!' cannot overflow
|   |       |     | | `-CallExpr 0x1ace20e7030 <line:296:22, line:297:44> 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e7018 <line:296:22> 'int (*)(char **, char **, size_t *, size_t *, const char *, int, int, int)' <FunctionToPointerDecay>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e6e80 <col:22> 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' Function 0x1ace20d9090 'fmtstr' 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e7090 <col:29> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e6ea0 <col:29> 'char **' lvalue ParmVar 0x1ace20e2ae8 'sbuffer' 'char **'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e70a8 <col:38> 'char **' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e6ec0 <col:38> 'char **' lvalue ParmVar 0x1ace20e2b68 'buffer' 'char **'
|   |       |     | |   |-UnaryOperator 0x1ace20e6f00 <col:46, col:47> 'size_t *' prefix '&' cannot overflow
|   |       |     | |   | `-DeclRefExpr 0x1ace20e6ee0 <col:47> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e70c0 <col:56> 'size_t *' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e6f18 <col:56> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e70f0 <col:64> 'const char *' <NoOp>
|   |       |     | |   | `-ImplicitCastExpr 0x1ace20e70d8 <col:64> 'char *' <LValueToRValue>
|   |       |     | |   |   `-DeclRefExpr 0x1ace20e6f38 <col:64> 'char *' lvalue Var 0x1ace20e3158 'strvalue' 'char *'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e7108 <line:297:29> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e6f58 <col:29> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       |     | |   |-ImplicitCastExpr 0x1ace20e7120 <col:36> 'int' <LValueToRValue>
|   |       |     | |   | `-DeclRefExpr 0x1ace20e6f78 <col:36> 'int' lvalue Var 0x1ace20e31f0 'min' 'int'
|   |       |     | |   `-ImplicitCastExpr 0x1ace20e7138 <col:41> 'int' <LValueToRValue>
|   |       |     | |     `-DeclRefExpr 0x1ace20e6f98 <col:41> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       |     | `-ReturnStmt 0x1ace20e7190 <line:298:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1ace20e7168 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1ace20e71b8 <line:299:17>
|   |       |     |-CaseStmt 0x1ace20e71f0 <line:300:13, <invalid sloc>>
|   |       |     | |-ConstantExpr 0x1ace20e71d8 <col:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e71c0 <col:18> 'int' 112
|   |       |     | `-NullStmt 0x1ace20e7258 <<invalid sloc>>
|   |       |     |-IfStmt 0x1ace20e74b8 <line:302:17, line:304:28>
|   |       |     | |-OpaqueValueExpr 0x1ace20e74a0 <<invalid sloc>> '_Bool'
|   |       |     | `-ReturnStmt 0x1ace20e7490 <col:21, col:28>
|   |       |     |   `-IntegerLiteral 0x1ace20e7468 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1ace20e74d0 <line:305:17>
|   |       |     |-CaseStmt 0x1ace20e7508 <line:306:13, line:323:17>
|   |       |     | |-ConstantExpr 0x1ace20e74f0 <line:306:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20e74d8 <col:18> 'int' 110
|   |       |     | `-IfStmt 0x1ace2083520 <line:307:17, line:323:17> has_else
|   |       |     |   |-BinaryOperator 0x1ace20e7590 <line:307:21, line:68:25> 'int' '=='
|   |       |     |   | |-ImplicitCastExpr 0x1ace20e7578 <line:307:21> 'int' <LValueToRValue>
|   |       |     |   | | `-DeclRefExpr 0x1ace20e7530 <col:21> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |     |   | `-IntegerLiteral 0x1ace20e7550 <line:68:25> 'int' 1
|   |       |     |   |-CompoundStmt 0x1ace20e77a8 <line:307:43, line:311:17>
|   |       |     |   | |-DeclStmt 0x1ace20e7658 <line:308:21, col:35>
|   |       |     |   | | `-VarDecl 0x1ace20e75f0 <col:21, col:32> col:32 used num 'short *'
|   |       |     |   | `-BinaryOperator 0x1ace20e7788 <line:310:21, col:28> 'short' '='
|   |       |     |   |   |-UnaryOperator 0x1ace20e7720 <col:21, col:22> 'short' lvalue prefix '*' cannot overflow
|   |       |     |   |   | `-ImplicitCastExpr 0x1ace20e7708 <col:22> 'short *' <LValueToRValue>
|   |       |     |   |   |   `-DeclRefExpr 0x1ace20e76e8 <col:22> 'short *' lvalue Var 0x1ace20e75f0 'num' 'short *'
|   |       |     |   |   `-ImplicitCastExpr 0x1ace20e7770 <col:28> 'short' <IntegralCast>
|   |       |     |   |     `-ImplicitCastExpr 0x1ace20e7758 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |   |       `-DeclRefExpr 0x1ace20e7738 <col:28> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |       |     |   `-IfStmt 0x1ace20834f8 <line:311:24, line:323:17> has_else
|   |       |     |     |-BinaryOperator 0x1ace20e7828 <line:311:28, line:69:25> 'int' '=='
|   |       |     |     | |-ImplicitCastExpr 0x1ace20e7810 <line:311:28> 'int' <LValueToRValue>
|   |       |     |     | | `-DeclRefExpr 0x1ace20e77c8 <col:28> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |     |     | `-IntegerLiteral 0x1ace20e77e8 <line:69:25> 'int' 2
|   |       |     |     |-CompoundStmt 0x1ace20831f0 <line:311:49, line:315:17>
|   |       |     |     | |-DeclStmt 0x1ace20e78f8 <line:312:21, col:34>
|   |       |     |     | | `-VarDecl 0x1ace20e7890 <col:21, col:31> col:31 used num 'long *'
|   |       |     |     | `-BinaryOperator 0x1ace20831d0 <line:314:21, col:38> 'long' '='
|   |       |     |     |   |-UnaryOperator 0x1ace20e79c0 <col:21, col:22> 'long' lvalue prefix '*' cannot overflow
|   |       |     |     |   | `-ImplicitCastExpr 0x1ace20e79a8 <col:22> 'long *' <LValueToRValue>
|   |       |     |     |   |   `-DeclRefExpr 0x1ace20e7988 <col:22> 'long *' lvalue Var 0x1ace20e7890 'num' 'long *'
|   |       |     |     |   `-CStyleCastExpr 0x1ace20831a8 <col:28, col:38> 'long' <IntegralCast>
|   |       |     |     |     `-ImplicitCastExpr 0x1ace2083190 <col:38> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |     |     |       `-DeclRefExpr 0x1ace20e79d8 <col:38> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |       |     |     `-IfStmt 0x1ace20834d0 <line:315:24, line:323:17> has_else
|   |       |     |       |-BinaryOperator 0x1ace2083270 <line:315:28, line:71:25> 'int' '=='
|   |       |     |       | |-ImplicitCastExpr 0x1ace2083258 <line:315:28> 'int' <LValueToRValue>
|   |       |     |       | | `-DeclRefExpr 0x1ace2083210 <col:28> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |     |       | `-IntegerLiteral 0x1ace2083230 <line:71:25> 'int' 4
|   |       |     |       |-CompoundStmt 0x1ace20832d0 <line:315:50, line:319:17>
|   |       |     |       `-CompoundStmt 0x1ace20834b0 <col:24, line:323:17>
|   |       |     |         |-DeclStmt 0x1ace2083360 <line:320:21, col:29>
|   |       |     |         | `-VarDecl 0x1ace20832f8 <col:21, col:26> col:26 used num 'int *'
|   |       |     |         `-BinaryOperator 0x1ace2083490 <line:322:21, col:28> 'int' '='
|   |       |     |           |-UnaryOperator 0x1ace2083428 <col:21, col:22> 'int' lvalue prefix '*' cannot overflow
|   |       |     |           | `-ImplicitCastExpr 0x1ace2083410 <col:22> 'int *' <LValueToRValue>
|   |       |     |           |   `-DeclRefExpr 0x1ace20833f0 <col:22> 'int *' lvalue Var 0x1ace20832f8 'num' 'int *'
|   |       |     |           `-ImplicitCastExpr 0x1ace2083478 <col:28> 'int' <IntegralCast>
|   |       |     |             `-ImplicitCastExpr 0x1ace2083460 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |     |               `-DeclRefExpr 0x1ace2083440 <col:28> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |       |     |-BreakStmt 0x1ace2083548 <line:324:17>
|   |       |     |-CaseStmt 0x1ace2083580 <line:325:13, line:327:28>
|   |       |     | |-ConstantExpr 0x1ace2083568 <line:325:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace2083550 <col:18> 'int' 37
|   |       |     | `-IfStmt 0x1ace20837a8 <line:326:17, line:327:28>
|   |       |     |   |-UnaryOperator 0x1ace2083758 <line:326:20, col:70> 'int' prefix '!' cannot overflow
|   |       |     |   | `-CallExpr 0x1ace2083698 <col:21, col:70> 'int'
|   |       |     |   |   |-ImplicitCastExpr 0x1ace2083680 <col:21> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       |     |   |   | `-DeclRefExpr 0x1ace20835a8 <col:21> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       |     |   |   |-ImplicitCastExpr 0x1ace20836e0 <col:33> 'char **' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1ace20835c8 <col:33> 'char **' lvalue ParmVar 0x1ace20e2ae8 'sbuffer' 'char **'
|   |       |     |   |   |-ImplicitCastExpr 0x1ace20836f8 <col:42> 'char **' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1ace20835e8 <col:42> 'char **' lvalue ParmVar 0x1ace20e2b68 'buffer' 'char **'
|   |       |     |   |   |-UnaryOperator 0x1ace2083628 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   |       |     |   |   | `-DeclRefExpr 0x1ace2083608 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |       |     |   |   |-ImplicitCastExpr 0x1ace2083710 <col:60> 'size_t *' <LValueToRValue>
|   |       |     |   |   | `-DeclRefExpr 0x1ace2083640 <col:60> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   |       |     |   |   `-ImplicitCastExpr 0x1ace2083740 <col:68> 'int' <IntegralCast>
|   |       |     |   |     `-ImplicitCastExpr 0x1ace2083728 <col:68> 'char' <LValueToRValue>
|   |       |     |   |       `-DeclRefExpr 0x1ace2083660 <col:68> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     |   `-ReturnStmt 0x1ace2083798 <line:327:21, col:28>
|   |       |     |     `-IntegerLiteral 0x1ace2083770 <col:28> 'int' 0
|   |       |     |-BreakStmt 0x1ace20837c0 <line:328:17>
|   |       |     |-CaseStmt 0x1ace20837f8 <line:329:13, line:331:29>
|   |       |     | |-ConstantExpr 0x1ace20837e0 <line:329:18> 'int'
|   |       |     | | `-CharacterLiteral 0x1ace20837c8 <col:18> 'int' 119
|   |       |     | `-BinaryOperator 0x1ace20838a8 <line:331:17, col:29> 'char' '='
|   |       |     |   |-DeclRefExpr 0x1ace2083820 <col:17> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       |     |   `-ImplicitCastExpr 0x1ace2083890 <col:22, col:29> 'char' <LValueToRValue>
|   |       |     |     `-UnaryOperator 0x1ace2083878 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |     |       `-UnaryOperator 0x1ace2083860 <col:23, col:29> 'const char *' postfix '++'
|   |       |     |         `-DeclRefExpr 0x1ace2083840 <col:23> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |     |-BreakStmt 0x1ace20838c8 <line:332:17>
|   |       |     `-DefaultStmt 0x1ace20838d8 <line:333:13, line:335:17>
|   |       |       `-BreakStmt 0x1ace20838d0 <col:17>
|   |       |-BinaryOperator 0x1ace2083aa8 <line:337:13, col:25> 'char' '='
|   |       | |-DeclRefExpr 0x1ace2083a20 <col:13> 'char' lvalue Var 0x1ace20e3028 'ch' 'char'
|   |       | `-ImplicitCastExpr 0x1ace2083a90 <col:18, col:25> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1ace2083a78 <col:18, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1ace2083a60 <col:19, col:25> 'const char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1ace2083a40 <col:19> 'const char *' lvalue ParmVar 0x1ace20e2d58 'format' 'const char *'
|   |       |-BinaryOperator 0x1ace2083b10 <line:338:13, line:42:25> 'int' '='
|   |       | |-DeclRefExpr 0x1ace2083ac8 <line:338:13> 'int' lvalue Var 0x1ace20e3320 'state' 'int'
|   |       | `-IntegerLiteral 0x1ace2083ae8 <line:42:25> 'int' 0
|   |       |-BinaryOperator 0x1ace2083bf8 <line:339:13, col:36> 'int' '='
|   |       | |-DeclRefExpr 0x1ace2083b30 <col:13> 'int' lvalue Var 0x1ace20e33b8 'flags' 'int'
|   |       | `-BinaryOperator 0x1ace2083bd8 <col:21, col:36> 'int' '='
|   |       |   |-DeclRefExpr 0x1ace2083b50 <col:21> 'int' lvalue Var 0x1ace20e3450 'cflags' 'int'
|   |       |   `-BinaryOperator 0x1ace2083bb8 <col:30, col:36> 'int' '='
|   |       |     |-DeclRefExpr 0x1ace2083b70 <col:30> 'int' lvalue Var 0x1ace20e31f0 'min' 'int'
|   |       |     `-IntegerLiteral 0x1ace2083b90 <col:36> 'int' 0
|   |       |-BinaryOperator 0x1ace2083c78 <line:340:13, col:20> 'int' '='
|   |       | |-DeclRefExpr 0x1ace2083c18 <col:13> 'int' lvalue Var 0x1ace20e3288 'max' 'int'
|   |       | `-UnaryOperator 0x1ace2083c60 <col:19, col:20> 'int' prefix '-'
|   |       |   `-IntegerLiteral 0x1ace2083c38 <col:20> 'int' 1
|   |       |-BreakStmt 0x1ace2083c98 <line:341:13>
|   |       |-CaseStmt 0x1ace2083ce0 <line:342:9, line:343:13>
|   |       | |-ConstantExpr 0x1ace2083cc8 <line:49:25> 'int'
|   |       | | `-IntegerLiteral 0x1ace2083ca0 <col:25> 'int' 7
|   |       | `-BreakStmt 0x1ace2083d08 <line:343:13>
|   |       `-DefaultStmt 0x1ace2083d18 <line:344:9, line:345:13>
|   |         `-BreakStmt 0x1ace2083d10 <col:13>
|   |-IfStmt 0x1ace21a5220 <line:352:5, line:356:5>
|   | |-BinaryOperator 0x1ace2083f08 <line:352:9, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1ace2083ed8 <.//openssl//file_jk/before\crypto\bio\b_print.c:352:9> 'char **' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace2083e30 <col:9> 'char **' lvalue ParmVar 0x1ace20e2b68 'buffer' 'char **'
|   | | `-ImplicitCastExpr 0x1ace2083ef0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   | |   `-ParenExpr 0x1ace2083eb8 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1ace2083e90 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1ace2083e50 <col:26> 'int' 0
|   | `-CompoundStmt 0x1ace21a5200 <.//openssl//file_jk/before\crypto\bio\b_print.c:352:25, line:356:5>
|   |   |-BinaryOperator 0x1ace20840b8 <line:353:9, col:44> 'int' '='
|   |   | |-UnaryOperator 0x1ace2083f60 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1ace2083f48 <col:10> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1ace2083f28 <col:10> 'int *' lvalue ParmVar 0x1ace20e2cd8 'truncated' 'int *'
|   |   | `-ParenExpr 0x1ace2084098 <col:22, col:44> 'int'
|   |   |   `-BinaryOperator 0x1ace2084078 <col:23, col:43> 'int' '>'
|   |   |     |-ImplicitCastExpr 0x1ace2084060 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1ace2083f78 <col:23> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |   |     `-BinaryOperator 0x1ace2084040 <col:33, col:43> 'unsigned long long' '-'
|   |   |       |-ImplicitCastExpr 0x1ace2084010 <col:33, col:34> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |       | `-UnaryOperator 0x1ace2083fd0 <col:33, col:34> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   |       |   `-ImplicitCastExpr 0x1ace2083fb8 <col:34> 'size_t *' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1ace2083f98 <col:34> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   |   |       `-ImplicitCastExpr 0x1ace2084028 <col:43> 'unsigned long long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1ace2083fe8 <col:43> 'int' 1
|   |   `-IfStmt 0x1ace21a51e8 <line:354:9, line:355:33>
|   |     |-ImplicitCastExpr 0x1ace2084128 <line:354:13, col:14> 'int' <LValueToRValue>
|   |     | `-UnaryOperator 0x1ace2084110 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |     |   `-ImplicitCastExpr 0x1ace20840f8 <col:14> 'int *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x1ace20840d8 <col:14> 'int *' lvalue ParmVar 0x1ace20e2cd8 'truncated' 'int *'
|   |     `-BinaryOperator 0x1ace21a51c8 <line:355:13, col:33> 'size_t':'unsigned long long' '='
|   |       |-DeclRefExpr 0x1ace2084140 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |       `-BinaryOperator 0x1ace21a51a8 <col:23, col:33> 'unsigned long long' '-'
|   |         |-ImplicitCastExpr 0x1ace21a5178 <col:23, col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |         | `-UnaryOperator 0x1ace21a5138 <col:23, col:24> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |         |   `-ImplicitCastExpr 0x1ace21a5120 <col:24> 'size_t *' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x1ace2084160 <col:24> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   |         `-ImplicitCastExpr 0x1ace21a5190 <col:33> 'unsigned long long' <IntegralCast>
|   |           `-IntegerLiteral 0x1ace21a5150 <col:33> 'int' 1
|   |-IfStmt 0x1ace21a5400 <line:357:5, line:358:16>
|   | |-UnaryOperator 0x1ace21a53b0 <line:357:8, col:60> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1ace21a5320 <col:9, col:60> 'int'
|   | |   |-ImplicitCastExpr 0x1ace21a5308 <col:9> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1ace21a5238 <col:9> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   | |   |-ImplicitCastExpr 0x1ace21a5368 <col:21> 'char **' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1ace21a5258 <col:21> 'char **' lvalue ParmVar 0x1ace20e2ae8 'sbuffer' 'char **'
|   | |   |-ImplicitCastExpr 0x1ace21a5380 <col:30> 'char **' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1ace21a5278 <col:30> 'char **' lvalue ParmVar 0x1ace20e2b68 'buffer' 'char **'
|   | |   |-UnaryOperator 0x1ace21a52b8 <col:38, col:39> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1ace21a5298 <col:39> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1ace21a5398 <col:48> 'size_t *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1ace21a52d0 <col:48> 'size_t *' lvalue ParmVar 0x1ace20e2be0 'maxlen' 'size_t *'
|   | |   `-CharacterLiteral 0x1ace21a52f0 <col:56> 'int' 0
|   | `-ReturnStmt 0x1ace21a53f0 <line:358:9, col:16>
|   |   `-IntegerLiteral 0x1ace21a53c8 <col:16> 'int' 0
|   |-BinaryOperator 0x1ace21a5500 <line:359:5, col:25> 'size_t':'unsigned long long' '='
|   | |-UnaryOperator 0x1ace21a5450 <col:5, col:6> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1ace21a5438 <col:6> 'size_t *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1ace21a5418 <col:6> 'size_t *' lvalue ParmVar 0x1ace20e2c58 'retlen' 'size_t *'
|   | `-BinaryOperator 0x1ace21a54e0 <col:15, col:25> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1ace21a54b0 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace21a5468 <col:15> 'size_t':'unsigned long long' lvalue Var 0x1ace20e34e0 'currlen' 'size_t':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1ace21a54c8 <col:25> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1ace21a5488 <col:25> 'int' 1
|   `-ReturnStmt 0x1ace21a5548 <line:360:5, col:12>
|     `-IntegerLiteral 0x1ace21a5520 <col:12> 'int' 1
|-FunctionDecl 0x1ace21a5b10 prev 0x1ace20d9090 <line:363:1, line:413:1> line:364:1 used fmtstr 'int (char **, char **, size_t *, size_t *, const char *, int, int, int)' static
| |-ParmVarDecl 0x1ace21a5610 <col:8, col:15> col:15 used sbuffer 'char **'
| |-ParmVarDecl 0x1ace21a5690 <line:365:8, col:15> col:15 used buffer 'char **'
| |-ParmVarDecl 0x1ace21a5708 <line:366:8, col:16> col:16 used currlen 'size_t *'
| |-ParmVarDecl 0x1ace21a5780 <line:367:8, col:16> col:16 used maxlen 'size_t *'
| |-ParmVarDecl 0x1ace21a5800 <col:24, col:36> col:36 used value 'const char *'
| |-ParmVarDecl 0x1ace21a5880 <col:43, col:47> col:47 used flags 'int'
| |-ParmVarDecl 0x1ace21a5900 <col:54, col:58> col:58 used min 'int'
| |-ParmVarDecl 0x1ace21a5980 <col:63, col:67> col:67 used max 'int'
| `-CompoundStmt 0x1ace21a1630 <line:368:1, line:413:1>
|   |-DeclStmt 0x1ace21a5c70 <line:369:5, col:15>
|   | `-VarDecl 0x1ace21a5c08 <col:5, col:9> col:9 used padlen 'int'
|   |-DeclStmt 0x1ace21a5d00 <line:370:5, col:17>
|   | `-VarDecl 0x1ace21a5c98 <col:5, col:12> col:12 used strln 'size_t':'unsigned long long'
|   |-DeclStmt 0x1ace21a5dc0 <line:371:5, col:16>
|   | `-VarDecl 0x1ace21a5d30 <col:5, col:15> col:9 used cnt 'int' cinit
|   |   `-IntegerLiteral 0x1ace21a5d98 <col:15> 'int' 0
|   |-IfStmt 0x1ace21a5f38 <line:373:5, line:374:17>
|   | |-BinaryOperator 0x1ace21a5e50 <line:373:9, col:18> 'int' '=='
|   | | |-ImplicitCastExpr 0x1ace21a5e20 <col:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a5dd8 <col:9> 'const char *' lvalue ParmVar 0x1ace21a5800 'value' 'const char *'
|   | | `-ImplicitCastExpr 0x1ace21a5e38 <col:18> 'const char *' <NullToPointer>
|   | |   `-IntegerLiteral 0x1ace21a5df8 <col:18> 'int' 0
|   | `-BinaryOperator 0x1ace21a5f18 <line:374:9, col:17> 'const char *' '='
|   |   |-DeclRefExpr 0x1ace21a5e70 <col:9> 'const char *' lvalue ParmVar 0x1ace21a5800 'value' 'const char *'
|   |   `-ImplicitCastExpr 0x1ace21a5f00 <col:17> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x1ace21a5ee8 <col:17> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1ace21a5ec8 <col:17> 'char [7]' lvalue "<NULL>"
|   |-BinaryOperator 0x1ace21a72c8 <line:378:5, col:20> 'int' '='
|   | |-DeclRefExpr 0x1ace21a71d0 <col:5> 'int' lvalue Var 0x1ace21a5c08 'padlen' 'int'
|   | `-ImplicitCastExpr 0x1ace21a72b0 <col:14, col:20> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1ace21a7290 <col:14, col:20> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1ace21a7278 <col:14> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1ace21a7248 <col:14> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1ace21a7208 <col:14> 'int' lvalue ParmVar 0x1ace21a5900 'min' 'int'
|   |     `-ImplicitCastExpr 0x1ace21a7260 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1ace21a7228 <col:20> 'size_t':'unsigned long long' lvalue Var 0x1ace21a5c98 'strln' 'size_t':'unsigned long long'
|   |-IfStmt 0x1ace21a7470 <line:379:5, line:380:18>
|   | |-BinaryOperator 0x1ace21a73e8 <line:379:9, col:29> 'int' '||'
|   | | |-BinaryOperator 0x1ace21a7348 <col:9, col:15> 'int' '<'
|   | | | |-ImplicitCastExpr 0x1ace21a7330 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1ace21a72e8 <col:9> 'int' lvalue ParmVar 0x1ace21a5900 'min' 'int'
|   | | | `-IntegerLiteral 0x1ace21a7308 <col:15> 'int' 0
|   | | `-BinaryOperator 0x1ace21a73c8 <col:20, col:29> 'int' '<'
|   | |   |-ImplicitCastExpr 0x1ace21a73b0 <col:20> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1ace21a7368 <col:20> 'int' lvalue Var 0x1ace21a5c08 'padlen' 'int'
|   | |   `-IntegerLiteral 0x1ace21a7388 <col:29> 'int' 0
|   | `-BinaryOperator 0x1ace21a7450 <line:380:9, col:18> 'int' '='
|   |   |-DeclRefExpr 0x1ace21a7408 <col:9> 'int' lvalue Var 0x1ace21a5c08 'padlen' 'int'
|   |   `-IntegerLiteral 0x1ace21a7428 <col:18> 'int' 0
|   |-IfStmt 0x1ace21a7650 <line:381:5, line:390:5>
|   | |-BinaryOperator 0x1ace21a74e8 <line:381:9, col:16> 'int' '>='
|   | | |-ImplicitCastExpr 0x1ace21a74d0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a7488 <col:9> 'int' lvalue ParmVar 0x1ace21a5980 'max' 'int'
|   | | `-IntegerLiteral 0x1ace21a74a8 <col:16> 'int' 0
|   | `-CompoundStmt 0x1ace21a7638 <col:19, line:390:5>
|   |   `-IfStmt 0x1ace21a7610 <line:386:9, line:389:13> has_else
|   |     |-OpaqueValueExpr 0x1ace21a75f8 <<invalid sloc>> '_Bool'
|   |     |-CompoundAssignOperator 0x1ace21a75a0 <line:387:13, col:20> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | |-DeclRefExpr 0x1ace21a7548 <col:13> 'int' lvalue ParmVar 0x1ace21a5980 'max' 'int'
|   |     | `-ImplicitCastExpr 0x1ace21a7588 <col:20> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1ace21a7568 <col:20> 'int' lvalue Var 0x1ace21a5c08 'padlen' 'int'
|   |     `-NullStmt 0x1ace21a75f0 <line:389:13>
|   |-IfStmt 0x1ace21a77e0 <line:391:5, line:392:19>
|   | |-BinaryOperator 0x1ace21a7730 <line:391:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1ace21a7718 <line:391:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a7668 <col:9> 'int' lvalue ParmVar 0x1ace21a5880 'flags' 'int'
|   | | `-ParenExpr 0x1ace21a76f8 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1ace21a76d8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1ace21a7688 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1ace21a76b0 <col:31> 'int' 0
|   | `-BinaryOperator 0x1ace21a77c0 <line:392:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1ace21a7750 <col:9> 'int' lvalue Var 0x1ace21a5c08 'padlen' 'int'
|   |   `-UnaryOperator 0x1ace21a77a8 <col:18, col:19> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1ace21a7790 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1ace21a7770 <col:19> 'int' lvalue Var 0x1ace21a5c08 'padlen' 'int'
|   |-WhileStmt 0x1ace21a7c98 <line:394:5, line:399:5>
|   | |-BinaryOperator 0x1ace21a7a00 <line:394:12, col:49> 'int' '&&'
|   | | |-ParenExpr 0x1ace21a7878 <col:12, col:23> 'int'
|   | | | `-BinaryOperator 0x1ace21a7858 <col:13, col:22> 'int' '>'
|   | | |   |-ImplicitCastExpr 0x1ace21a7840 <col:13> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1ace21a77f8 <col:13> 'int' lvalue Var 0x1ace21a5c08 'padlen' 'int'
|   | | |   `-IntegerLiteral 0x1ace21a7818 <col:22> 'int' 0
|   | | `-ParenExpr 0x1ace21a79e0 <col:28, col:49> 'int'
|   | |   `-BinaryOperator 0x1ace21a79c0 <col:29, col:46> 'int' '||'
|   | |     |-BinaryOperator 0x1ace21a78f8 <col:29, col:35> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1ace21a78e0 <col:29> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1ace21a7898 <col:29> 'int' lvalue ParmVar 0x1ace21a5980 'max' 'int'
|   | |     | `-IntegerLiteral 0x1ace21a78b8 <col:35> 'int' 0
|   | |     `-BinaryOperator 0x1ace21a79a0 <col:40, col:46> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1ace21a7970 <col:40> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1ace21a7918 <col:40> 'int' lvalue Var 0x1ace21a5d30 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1ace21a7988 <col:46> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1ace21a7950 <col:46> 'int' lvalue ParmVar 0x1ace21a5980 'max' 'int'
|   | `-CompoundStmt 0x1ace21a7c70 <col:52, line:399:5>
|   |   |-IfStmt 0x1ace21a7be8 <line:395:9, line:396:20>
|   |   | |-UnaryOperator 0x1ace21a7b98 <line:395:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace21a7af0 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace21a7ad8 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace21a7a20 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace21a7b38 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a7a40 <col:25> 'char **' lvalue ParmVar 0x1ace21a5610 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a7b50 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a7a60 <col:34> 'char **' lvalue ParmVar 0x1ace21a5690 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a7b68 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a7a80 <col:42> 'size_t *' lvalue ParmVar 0x1ace21a5708 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace21a7b80 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a7aa0 <col:51> 'size_t *' lvalue ParmVar 0x1ace21a5780 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1ace21a7ac0 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1ace21a7bd8 <line:396:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace21a7bb0 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1ace21a7c20 <line:397:9, col:11> 'int' prefix '--'
|   |   | `-DeclRefExpr 0x1ace21a7c00 <col:11> 'int' lvalue Var 0x1ace21a5c08 'padlen' 'int'
|   |   `-UnaryOperator 0x1ace21a7c58 <line:398:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1ace21a7c38 <col:11> 'int' lvalue Var 0x1ace21a5d30 'cnt' 'int'
|   |-WhileStmt 0x1ace21a1140 <line:400:5, line:405:5>
|   | |-BinaryOperator 0x1ace21a7e98 <line:400:12, col:46> 'int' '&&'
|   | | |-BinaryOperator 0x1ace21a7d28 <col:12, col:20> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1ace21a7cf8 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1ace21a7cb0 <col:12> 'size_t':'unsigned long long' lvalue Var 0x1ace21a5c98 'strln' 'size_t':'unsigned long long'
|   | | | `-ImplicitCastExpr 0x1ace21a7d10 <col:20> 'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1ace21a7cd0 <col:20> 'int' 0
|   | | `-ParenExpr 0x1ace21a7e78 <col:25, col:46> 'int'
|   | |   `-BinaryOperator 0x1ace21a7e58 <col:26, col:43> 'int' '||'
|   | |     |-BinaryOperator 0x1ace21a7da8 <col:26, col:32> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1ace21a7d90 <col:26> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1ace21a7d48 <col:26> 'int' lvalue ParmVar 0x1ace21a5980 'max' 'int'
|   | |     | `-IntegerLiteral 0x1ace21a7d68 <col:32> 'int' 0
|   | |     `-BinaryOperator 0x1ace21a7e38 <col:37, col:43> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1ace21a7e08 <col:37> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1ace21a7dc8 <col:37> 'int' lvalue Var 0x1ace21a5d30 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1ace21a7e20 <col:43> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1ace21a7de8 <col:43> 'int' lvalue ParmVar 0x1ace21a5980 'max' 'int'
|   | `-CompoundStmt 0x1ace21a1118 <col:49, line:405:5>
|   |   |-IfStmt 0x1ace21a80e8 <line:401:9, line:402:20>
|   |   | |-UnaryOperator 0x1ace21a8098 <line:401:12, col:67> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace21a7fc0 <col:13, col:67> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace21a7fa8 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace21a7eb8 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8008 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a7ed8 <col:25> 'char **' lvalue ParmVar 0x1ace21a5610 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8020 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a7ef8 <col:34> 'char **' lvalue ParmVar 0x1ace21a5690 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8038 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a7f18 <col:42> 'size_t *' lvalue ParmVar 0x1ace21a5708 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8050 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a7f38 <col:51> 'size_t *' lvalue ParmVar 0x1ace21a5780 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1ace21a8080 <col:59, col:65> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1ace21a8068 <col:59, col:65> 'char' <LValueToRValue>
|   |   | |       `-UnaryOperator 0x1ace21a7f90 <col:59, col:65> 'const char' lvalue prefix '*' cannot overflow
|   |   | |         `-UnaryOperator 0x1ace21a7f78 <col:60, col:65> 'const char *' postfix '++'
|   |   | |           `-DeclRefExpr 0x1ace21a7f58 <col:60> 'const char *' lvalue ParmVar 0x1ace21a5800 'value' 'const char *'
|   |   | `-ReturnStmt 0x1ace21a80d8 <line:402:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace21a80b0 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1ace21a8120 <line:403:9, col:11> 'size_t':'unsigned long long' prefix '--'
|   |   | `-DeclRefExpr 0x1ace21a8100 <col:11> 'size_t':'unsigned long long' lvalue Var 0x1ace21a5c98 'strln' 'size_t':'unsigned long long'
|   |   `-UnaryOperator 0x1ace21a1100 <line:404:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1ace21a10e0 <col:11> 'int' lvalue Var 0x1ace21a5d30 'cnt' 'int'
|   |-WhileStmt 0x1ace21a15e0 <line:406:5, line:411:5>
|   | |-BinaryOperator 0x1ace21a1348 <line:406:12, col:49> 'int' '&&'
|   | | |-ParenExpr 0x1ace21a11d8 <col:12, col:23> 'int'
|   | | | `-BinaryOperator 0x1ace21a11b8 <col:13, col:22> 'int' '<'
|   | | |   |-ImplicitCastExpr 0x1ace21a11a0 <col:13> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1ace21a1158 <col:13> 'int' lvalue Var 0x1ace21a5c08 'padlen' 'int'
|   | | |   `-IntegerLiteral 0x1ace21a1178 <col:22> 'int' 0
|   | | `-ParenExpr 0x1ace21a1328 <col:28, col:49> 'int'
|   | |   `-BinaryOperator 0x1ace21a1308 <col:29, col:46> 'int' '||'
|   | |     |-BinaryOperator 0x1ace21a1258 <col:29, col:35> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1ace21a1240 <col:29> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1ace21a11f8 <col:29> 'int' lvalue ParmVar 0x1ace21a5980 'max' 'int'
|   | |     | `-IntegerLiteral 0x1ace21a1218 <col:35> 'int' 0
|   | |     `-BinaryOperator 0x1ace21a12e8 <col:40, col:46> 'int' '<'
|   | |       |-ImplicitCastExpr 0x1ace21a12b8 <col:40> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1ace21a1278 <col:40> 'int' lvalue Var 0x1ace21a5d30 'cnt' 'int'
|   | |       `-ImplicitCastExpr 0x1ace21a12d0 <col:46> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1ace21a1298 <col:46> 'int' lvalue ParmVar 0x1ace21a5980 'max' 'int'
|   | `-CompoundStmt 0x1ace21a15b8 <col:52, line:411:5>
|   |   |-IfStmt 0x1ace21a1530 <line:407:9, line:408:20>
|   |   | |-UnaryOperator 0x1ace21a14e0 <line:407:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace21a1438 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace21a1420 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace21a1368 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace21a1480 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a1388 <col:25> 'char **' lvalue ParmVar 0x1ace21a5610 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a1498 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a13a8 <col:34> 'char **' lvalue ParmVar 0x1ace21a5690 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a14b0 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a13c8 <col:42> 'size_t *' lvalue ParmVar 0x1ace21a5708 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace21a14c8 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a13e8 <col:51> 'size_t *' lvalue ParmVar 0x1ace21a5780 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1ace21a1408 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1ace21a1520 <line:408:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace21a14f8 <col:20> 'int' 0
|   |   |-UnaryOperator 0x1ace21a1568 <line:409:9, col:11> 'int' prefix '++'
|   |   | `-DeclRefExpr 0x1ace21a1548 <col:11> 'int' lvalue Var 0x1ace21a5c08 'padlen' 'int'
|   |   `-UnaryOperator 0x1ace21a15a0 <line:410:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1ace21a1580 <col:11> 'int' lvalue Var 0x1ace21a5d30 'cnt' 'int'
|   `-ReturnStmt 0x1ace21a1620 <line:412:5, col:12>
|     `-IntegerLiteral 0x1ace21a15f8 <col:12> 'int' 1
|-FunctionDecl 0x1ace21a1b80 <line:415:1, line:513:1> line:416:1 invalid fmtint 'int (char **, char **, size_t *, size_t *, int, int, int, int, int)' static
| |-ParmVarDecl 0x1ace21a16b8 <col:8, col:15> col:15 used sbuffer 'char **'
| |-ParmVarDecl 0x1ace21a1738 <line:417:8, col:15> col:15 used buffer 'char **'
| |-ParmVarDecl 0x1ace21a17b0 <line:418:8, col:16> col:16 used currlen 'size_t *'
| |-ParmVarDecl 0x1ace21a1828 <line:419:8, col:16> col:16 used maxlen 'size_t *'
| |-ParmVarDecl 0x1ace21a18a8 <col:24, col:32> col:32 invalid value 'int'
| |-ParmVarDecl 0x1ace21a1928 <col:39, col:43> col:43 used base 'int'
| |-ParmVarDecl 0x1ace21a19a8 <col:49, col:53> col:53 used min 'int'
| |-ParmVarDecl 0x1ace21a1a28 <col:58, col:62> col:62 used max 'int'
| |-ParmVarDecl 0x1ace21a1aa8 <col:67, col:71> col:71 used flags 'int'
| `-CompoundStmt 0x1ace21a9160 <line:420:1, line:513:1>
|   |-DeclStmt 0x1ace21a1d28 <line:421:5, col:22>
|   | `-VarDecl 0x1ace21a1c98 <col:5, col:21> col:9 used signvalue 'int' cinit
|   |   `-IntegerLiteral 0x1ace21a1d00 <col:21> 'int' 0
|   |-DeclStmt 0x1ace21a1e40 <line:422:5, col:28>
|   | `-VarDecl 0x1ace21a1d58 <col:5, col:26> col:17 used prefix 'const char *' cinit
|   |   `-ImplicitCastExpr 0x1ace21a1e28 <col:26> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x1ace21a1e10 <col:26> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1ace21a1df8 <col:26> 'char [1]' lvalue ""
|   |-DeclStmt 0x1ace21a2008 <line:424:5, col:42>
|   | `-VarDecl 0x1ace21a1fa0 <col:5, col:10> col:10 invalid convert 'char'
|   |-DeclStmt 0x1ace21a20c8 <line:425:5, col:18>
|   | `-VarDecl 0x1ace21a2038 <col:5, col:17> col:9 used place 'int' cinit
|   |   `-IntegerLiteral 0x1ace21a20a0 <col:17> 'int' 0
|   |-DeclStmt 0x1ace21a61d8 <line:426:5, col:20>
|   | `-VarDecl 0x1ace21a6148 <col:5, col:19> col:9 used spadlen 'int' cinit
|   |   `-IntegerLiteral 0x1ace21a61b0 <col:19> 'int' 0
|   |-DeclStmt 0x1ace21a6298 <line:427:5, col:20>
|   | `-VarDecl 0x1ace21a6208 <col:5, col:19> col:9 used zpadlen 'int' cinit
|   |   `-IntegerLiteral 0x1ace21a6270 <col:19> 'int' 0
|   |-DeclStmt 0x1ace21a6358 <line:428:5, col:17>
|   | `-VarDecl 0x1ace21a62c8 <col:5, col:16> col:9 used caps 'int' cinit
|   |   `-IntegerLiteral 0x1ace21a6330 <col:16> 'int' 0
|   |-IfStmt 0x1ace21a6470 <line:430:5, line:431:15>
|   | |-BinaryOperator 0x1ace21a63e8 <line:430:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace21a63d0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a6370 <col:9> 'int' lvalue ParmVar 0x1ace21a1a28 'max' 'int'
|   | | `-IntegerLiteral 0x1ace21a63a8 <col:15> 'int' 0
|   | `-BinaryOperator 0x1ace21a6450 <line:431:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1ace21a6408 <col:9> 'int' lvalue ParmVar 0x1ace21a1a28 'max' 'int'
|   |   `-IntegerLiteral 0x1ace21a6428 <col:15> 'int' 0
|   |-IfStmt 0x1ace21a69b0 <line:433:5, line:441:5>
|   | |-UnaryOperator 0x1ace21a65a8 <line:433:9, col:32> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x1ace21a6588 <col:10, col:32> 'int'
|   | |   `-BinaryOperator 0x1ace21a6568 <col:11, line:65:32> 'int' '&'
|   | |     |-ImplicitCastExpr 0x1ace21a6550 <line:433:11> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1ace21a6488 <col:11> 'int' lvalue ParmVar 0x1ace21a1aa8 'flags' 'int'
|   | |     `-ParenExpr 0x1ace21a6530 <line:65:25, col:32> 'int'
|   | |       `-BinaryOperator 0x1ace21a6510 <col:26, col:31> 'int' '<<'
|   | |         |-IntegerLiteral 0x1ace21a64c0 <col:26> 'int' 1
|   | |         `-IntegerLiteral 0x1ace21a64e8 <col:31> 'int' 6
|   | `-CompoundStmt 0x1ace21a6998 <line:433:35, line:441:5>
|   |   `-IfStmt 0x1ace21a6970 <line:434:9, line:440:25> has_else
|   |     |-OpaqueValueExpr 0x1ace21a6958 <<invalid sloc>> '_Bool'
|   |     |-CompoundStmt 0x1ace21a6680 <line:434:24, line:437:9>
|   |     | `-BinaryOperator 0x1ace21a6638 <line:435:13, col:25> 'int' '='
|   |     |   |-DeclRefExpr 0x1ace21a65e8 <col:13> 'int' lvalue Var 0x1ace21a1c98 'signvalue' 'int'
|   |     |   `-CharacterLiteral 0x1ace21a6620 <col:25> 'int' 45
|   |     `-IfStmt 0x1ace21a6930 <line:437:16, line:440:25> has_else
|   |       |-BinaryOperator 0x1ace21a6760 <line:437:20, line:55:32> 'int' '&'
|   |       | |-ImplicitCastExpr 0x1ace21a6748 <line:437:20> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x1ace21a6698 <col:20> 'int' lvalue ParmVar 0x1ace21a1aa8 'flags' 'int'
|   |       | `-ParenExpr 0x1ace21a6728 <line:55:25, col:32> 'int'
|   |       |   `-BinaryOperator 0x1ace21a6708 <col:26, col:31> 'int' '<<'
|   |       |     |-IntegerLiteral 0x1ace21a66b8 <col:26> 'int' 1
|   |       |     `-IntegerLiteral 0x1ace21a66e0 <col:31> 'int' 1
|   |       |-BinaryOperator 0x1ace21a67b8 <line:438:13, col:25> 'int' '='
|   |       | |-DeclRefExpr 0x1ace21a6780 <col:13> 'int' lvalue Var 0x1ace21a1c98 'signvalue' 'int'
|   |       | `-CharacterLiteral 0x1ace21a67a0 <col:25> 'int' 43
|   |       `-IfStmt 0x1ace21a6918 <line:439:14, line:440:25>
|   |         |-BinaryOperator 0x1ace21a68a0 <line:439:18, line:57:32> 'int' '&'
|   |         | |-ImplicitCastExpr 0x1ace21a6888 <line:439:18> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x1ace21a67d8 <col:18> 'int' lvalue ParmVar 0x1ace21a1aa8 'flags' 'int'
|   |         | `-ParenExpr 0x1ace21a6868 <line:57:25, col:32> 'int'
|   |         |   `-BinaryOperator 0x1ace21a6848 <col:26, col:31> 'int' '<<'
|   |         |     |-IntegerLiteral 0x1ace21a67f8 <col:26> 'int' 1
|   |         |     `-IntegerLiteral 0x1ace21a6820 <col:31> 'int' 2
|   |         `-BinaryOperator 0x1ace21a68f8 <line:440:13, col:25> 'int' '='
|   |           |-DeclRefExpr 0x1ace21a68c0 <col:13> 'int' lvalue Var 0x1ace21a1c98 'signvalue' 'int'
|   |           `-CharacterLiteral 0x1ace21a68e0 <col:25> 'int' 32
|   |-IfStmt 0x1ace21a6dc0 <line:442:5, line:447:5>
|   | |-BinaryOperator 0x1ace21a6a90 <line:442:9, line:59:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1ace21a6a78 <line:442:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a69c8 <col:9> 'int' lvalue ParmVar 0x1ace21a1aa8 'flags' 'int'
|   | | `-ParenExpr 0x1ace21a6a58 <line:59:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1ace21a6a38 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1ace21a69e8 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1ace21a6a10 <col:31> 'int' 3
|   | `-CompoundStmt 0x1ace21a6da0 <line:442:27, line:447:5>
|   |   |-IfStmt 0x1ace21a6c28 <line:443:9, line:444:22>
|   |   | |-BinaryOperator 0x1ace21a6b28 <line:443:13, col:21> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1ace21a6b10 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1ace21a6ab0 <col:13> 'int' lvalue ParmVar 0x1ace21a1928 'base' 'int'
|   |   | | `-IntegerLiteral 0x1ace21a6ae8 <col:21> 'int' 8
|   |   | `-BinaryOperator 0x1ace21a6c08 <line:444:13, col:22> 'const char *' '='
|   |   |   |-DeclRefExpr 0x1ace21a6b48 <col:13> 'const char *' lvalue Var 0x1ace21a1d58 'prefix' 'const char *'
|   |   |   `-ImplicitCastExpr 0x1ace21a6bf0 <col:22> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x1ace21a6bd8 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x1ace21a6bb8 <col:22> 'char [2]' lvalue "0"
|   |   `-IfStmt 0x1ace21a6d88 <line:445:9, line:446:22>
|   |     |-BinaryOperator 0x1ace21a6ca0 <line:445:13, col:21> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1ace21a6c88 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1ace21a6c40 <col:13> 'int' lvalue ParmVar 0x1ace21a1928 'base' 'int'
|   |     | `-IntegerLiteral 0x1ace21a6c60 <col:21> 'int' 16
|   |     `-BinaryOperator 0x1ace21a6d68 <line:446:13, col:22> 'const char *' '='
|   |       |-DeclRefExpr 0x1ace21a6cc0 <col:13> 'const char *' lvalue Var 0x1ace21a1d58 'prefix' 'const char *'
|   |       `-ImplicitCastExpr 0x1ace21a6d50 <col:22> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x1ace21a6d38 <col:22> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x1ace21a6d18 <col:22> 'char [3]' lvalue "0x"
|   |-IfStmt 0x1ace21a6f40 <line:448:5, line:449:16>
|   | |-BinaryOperator 0x1ace21a6ea0 <line:448:9, line:63:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1ace21a6e88 <line:448:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a6dd8 <col:9> 'int' lvalue ParmVar 0x1ace21a1aa8 'flags' 'int'
|   | | `-ParenExpr 0x1ace21a6e68 <line:63:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1ace21a6e48 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1ace21a6df8 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1ace21a6e20 <col:31> 'int' 5
|   | `-BinaryOperator 0x1ace21a6f20 <line:449:9, col:16> 'int' '='
|   |   |-DeclRefExpr 0x1ace21a6ec0 <col:9> 'int' lvalue Var 0x1ace21a62c8 'caps' 'int'
|   |   `-IntegerLiteral 0x1ace21a6ef8 <col:16> 'int' 1
|   |-IfStmt 0x1ace21a0330 <line:455:5, line:456:14>
|   | |-OpaqueValueExpr 0x1ace21a0318 <<invalid sloc>> '_Bool'
|   | `-UnaryOperator 0x1ace21a0300 <col:9, col:14> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1ace21a02e0 <col:9> 'int' lvalue Var 0x1ace21a2038 'place' 'int'
|   |-BinaryOperator 0x1ace21a0458 <line:459:5, col:21> 'int' '='
|   | |-DeclRefExpr 0x1ace21a0390 <col:5> 'int' lvalue Var 0x1ace21a6208 'zpadlen' 'int'
|   | `-BinaryOperator 0x1ace21a0438 <col:15, col:21> 'int' '-'
|   |   |-ImplicitCastExpr 0x1ace21a0408 <col:15> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace21a03c8 <col:15> 'int' lvalue ParmVar 0x1ace21a1a28 'max' 'int'
|   |   `-ImplicitCastExpr 0x1ace21a0420 <col:21> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1ace21a03e8 <col:21> 'int' lvalue Var 0x1ace21a2038 'place' 'int'
|   |-BinaryOperator 0x1ace21a08b0 <line:460:5, line:461:73> 'int' '='
|   | |-DeclRefExpr 0x1ace21a0478 <line:460:5> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   | `-ImplicitCastExpr 0x1ace21a0898 <line:461:9, col:73> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1ace21a0878 <col:9, col:73> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x1ace21a0860 <col:9, col:56> 'unsigned long long' <IntegralCast>
|   |     | `-BinaryOperator 0x1ace21a0768 <col:9, col:56> 'int' '-'
|   |     |   |-BinaryOperator 0x1ace21a0670 <col:9, line:80:40> 'int' '-'
|   |     |   | |-ImplicitCastExpr 0x1ace21a0658 <line:461:9> 'int' <LValueToRValue>
|   |     |   | | `-DeclRefExpr 0x1ace21a04b0 <col:9> 'int' lvalue ParmVar 0x1ace21a19a8 'min' 'int'
|   |     |   | `-ParenExpr 0x1ace21a0638 <line:80:23, col:40> 'int'
|   |     |   |   `-ConditionalOperator 0x1ace21a0608 <col:24, line:461:29> 'int'
|   |     |   |     |-ParenExpr 0x1ace21a0578 <line:80:24, col:31> 'int'
|   |     |   |     | `-BinaryOperator 0x1ace21a0558 <line:461:24, col:29> 'int' '>='
|   |     |   |     |   |-ImplicitCastExpr 0x1ace21a0528 <col:24> 'int' <LValueToRValue>
|   |     |   |     |   | `-DeclRefExpr 0x1ace21a04e8 <col:24> 'int' lvalue ParmVar 0x1ace21a1a28 'max' 'int'
|   |     |   |     |   `-ImplicitCastExpr 0x1ace21a0540 <col:29> 'int' <LValueToRValue>
|   |     |   |     |     `-DeclRefExpr 0x1ace21a0508 <col:29> 'int' lvalue Var 0x1ace21a2038 'place' 'int'
|   |     |   |     |-ImplicitCastExpr 0x1ace21a05d8 <col:24> 'int' <LValueToRValue>
|   |     |   |     | `-DeclRefExpr 0x1ace21a0598 <col:24> 'int' lvalue ParmVar 0x1ace21a1a28 'max' 'int'
|   |     |   |     `-ImplicitCastExpr 0x1ace21a05f0 <col:29> 'int' <LValueToRValue>
|   |     |   |       `-DeclRefExpr 0x1ace21a05b8 <col:29> 'int' lvalue Var 0x1ace21a2038 'place' 'int'
|   |     |   `-ParenExpr 0x1ace21a0748 <col:38, col:56> 'int'
|   |     |     `-ConditionalOperator 0x1ace21a0718 <col:39, col:55> 'int'
|   |     |       |-ImplicitCastExpr 0x1ace21a0700 <col:39> 'int' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x1ace21a0690 <col:39> 'int' lvalue Var 0x1ace21a1c98 'signvalue' 'int'
|   |     |       |-IntegerLiteral 0x1ace21a06b0 <col:51> 'int' 1
|   |     |       `-IntegerLiteral 0x1ace21a06d8 <col:55> 'int' 0
|   |     `-CallExpr 0x1ace21a0820 <col:60, col:73> 'unsigned long long'
|   |       |-ImplicitCastExpr 0x1ace21a0808 <col:60> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1ace21a0788 <col:60> 'unsigned long long (const char *)' Function 0x1ace20ac2a0 'strlen' 'unsigned long long (const char *)'
|   |       `-ImplicitCastExpr 0x1ace21a0848 <col:67> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1ace21a07a8 <col:67> 'const char *' lvalue Var 0x1ace21a1d58 'prefix' 'const char *'
|   |-IfStmt 0x1ace21a09b8 <line:462:5, line:463:19>
|   | |-BinaryOperator 0x1ace21a0930 <line:462:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace21a0918 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a08d0 <col:9> 'int' lvalue Var 0x1ace21a6208 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1ace21a08f0 <col:19> 'int' 0
|   | `-BinaryOperator 0x1ace21a0998 <line:463:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1ace21a0950 <col:9> 'int' lvalue Var 0x1ace21a6208 'zpadlen' 'int'
|   |   `-IntegerLiteral 0x1ace21a0970 <col:19> 'int' 0
|   |-IfStmt 0x1ace21a0ab8 <line:464:5, line:465:19>
|   | |-BinaryOperator 0x1ace21a0a30 <line:464:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace21a0a18 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a09d0 <col:9> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1ace21a09f0 <col:19> 'int' 0
|   | `-BinaryOperator 0x1ace21a0a98 <line:465:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1ace21a0a50 <col:9> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   |   `-IntegerLiteral 0x1ace21a0a70 <col:19> 'int' 0
|   |-IfStmt 0x1ace21a0df0 <line:466:5, line:469:5>
|   | |-BinaryOperator 0x1ace21a0b98 <line:466:9, line:61:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1ace21a0b80 <line:466:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a0ad0 <col:9> 'int' lvalue ParmVar 0x1ace21a1aa8 'flags' 'int'
|   | | `-ParenExpr 0x1ace21a0b60 <line:61:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1ace21a0b40 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1ace21a0af0 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1ace21a0b18 <col:31> 'int' 4
|   | `-CompoundStmt 0x1ace21a0dd0 <line:466:28, line:469:5>
|   |   |-BinaryOperator 0x1ace21a0d48 <line:467:9, line:80:40> 'int' '='
|   |   | |-DeclRefExpr 0x1ace21a0bb8 <line:467:9> 'int' lvalue Var 0x1ace21a6208 'zpadlen' 'int'
|   |   | `-ParenExpr 0x1ace21a0d28 <line:80:23, col:40> 'int'
|   |   |   `-ConditionalOperator 0x1ace21a0cf8 <col:24, line:467:37> 'int'
|   |   |     |-ParenExpr 0x1ace21a0c68 <line:80:24, col:31> 'int'
|   |   |     | `-BinaryOperator 0x1ace21a0c48 <line:467:28, col:37> 'int' '>='
|   |   |     |   |-ImplicitCastExpr 0x1ace21a0c18 <col:28> 'int' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1ace21a0bd8 <col:28> 'int' lvalue Var 0x1ace21a6208 'zpadlen' 'int'
|   |   |     |   `-ImplicitCastExpr 0x1ace21a0c30 <col:37> 'int' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1ace21a0bf8 <col:37> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   |   |     |-ImplicitCastExpr 0x1ace21a0cc8 <col:28> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1ace21a0c88 <col:28> 'int' lvalue Var 0x1ace21a6208 'zpadlen' 'int'
|   |   |     `-ImplicitCastExpr 0x1ace21a0ce0 <col:37> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1ace21a0ca8 <col:37> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   |   `-BinaryOperator 0x1ace21a0db0 <line:468:9, col:19> 'int' '='
|   |     |-DeclRefExpr 0x1ace21a0d68 <col:9> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   |     `-IntegerLiteral 0x1ace21a0d88 <col:19> 'int' 0
|   |-IfStmt 0x1ace21a0f80 <line:470:5, line:471:20>
|   | |-BinaryOperator 0x1ace21a0ed0 <line:470:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1ace21a0eb8 <line:470:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a0e08 <col:9> 'int' lvalue ParmVar 0x1ace21a1aa8 'flags' 'int'
|   | | `-ParenExpr 0x1ace21a0e98 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1ace21a0e78 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1ace21a0e28 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1ace21a0e50 <col:31> 'int' 0
|   | `-BinaryOperator 0x1ace21a0f60 <line:471:9, col:20> 'int' '='
|   |   |-DeclRefExpr 0x1ace21a0ef0 <col:9> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   |   `-UnaryOperator 0x1ace21a0f48 <col:19, col:20> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1ace21a0f30 <col:20> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1ace21a0f10 <col:20> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   |-WhileStmt 0x1ace21a8338 <line:474:5, line:478:5>
|   | |-BinaryOperator 0x1ace21a0ff8 <line:474:12, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1ace21a0fe0 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a0f98 <col:12> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1ace21a0fb8 <col:22> 'int' 0
|   | `-CompoundStmt 0x1ace21a8318 <col:25, line:478:5>
|   |   |-IfStmt 0x1ace21a82c8 <line:475:9, line:476:20>
|   |   | |-UnaryOperator 0x1ace21a8278 <line:475:12, col:62> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace21a81d0 <col:13, col:62> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace21a81b8 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace21a1018 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8218 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a1038 <col:25> 'char **' lvalue ParmVar 0x1ace21a16b8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8230 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a1070 <col:34> 'char **' lvalue ParmVar 0x1ace21a1738 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8248 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a10a8 <col:42> 'size_t *' lvalue ParmVar 0x1ace21a17b0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8260 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a8168 <col:51> 'size_t *' lvalue ParmVar 0x1ace21a1828 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1ace21a81a0 <col:59> 'int' 32
|   |   | `-ReturnStmt 0x1ace21a82b8 <line:476:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace21a8290 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1ace21a8300 <line:477:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1ace21a82e0 <col:11> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   |-IfStmt 0x1ace21a8588 <line:481:5, line:483:20>
|   | |-ImplicitCastExpr 0x1ace21a8370 <line:481:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1ace21a8350 <col:9> 'int' lvalue Var 0x1ace21a1c98 'signvalue' 'int'
|   | `-IfStmt 0x1ace21a8570 <line:482:9, line:483:20>
|   |   |-UnaryOperator 0x1ace21a8520 <line:482:12, col:68> 'int' prefix '!' cannot overflow
|   |   | `-CallExpr 0x1ace21a8460 <col:13, col:68> 'int'
|   |   |   |-ImplicitCastExpr 0x1ace21a8448 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1ace21a8388 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |   |-ImplicitCastExpr 0x1ace21a84a8 <col:25> 'char **' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1ace21a83a8 <col:25> 'char **' lvalue ParmVar 0x1ace21a16b8 'sbuffer' 'char **'
|   |   |   |-ImplicitCastExpr 0x1ace21a84c0 <col:34> 'char **' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1ace21a83c8 <col:34> 'char **' lvalue ParmVar 0x1ace21a1738 'buffer' 'char **'
|   |   |   |-ImplicitCastExpr 0x1ace21a84d8 <col:42> 'size_t *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1ace21a83e8 <col:42> 'size_t *' lvalue ParmVar 0x1ace21a17b0 'currlen' 'size_t *'
|   |   |   |-ImplicitCastExpr 0x1ace21a84f0 <col:51> 'size_t *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1ace21a8408 <col:51> 'size_t *' lvalue ParmVar 0x1ace21a1828 'maxlen' 'size_t *'
|   |   |   `-ImplicitCastExpr 0x1ace21a8508 <col:59> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1ace21a8428 <col:59> 'int' lvalue Var 0x1ace21a1c98 'signvalue' 'int'
|   |   `-ReturnStmt 0x1ace21a8560 <line:483:13, col:20>
|   |     `-IntegerLiteral 0x1ace21a8538 <col:20> 'int' 0
|   |-WhileStmt 0x1ace21a88a8 <line:486:5, line:490:5>
|   | |-ImplicitCastExpr 0x1ace21a85f0 <line:486:12, col:13> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x1ace21a85d8 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x1ace21a85c0 <col:13> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1ace21a85a0 <col:13> 'const char *' lvalue Var 0x1ace21a1d58 'prefix' 'const char *'
|   | `-CompoundStmt 0x1ace21a8888 <col:21, line:490:5>
|   |   |-IfStmt 0x1ace21a8838 <line:487:9, line:488:20>
|   |   | |-UnaryOperator 0x1ace21a87e8 <line:487:12, col:66> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace21a8710 <col:13, col:66> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace21a86f8 <col:13> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace21a8608 <col:13> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8758 <col:25> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a8628 <col:25> 'char **' lvalue ParmVar 0x1ace21a16b8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8770 <col:34> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a8648 <col:34> 'char **' lvalue ParmVar 0x1ace21a1738 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8788 <col:42> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a8668 <col:42> 'size_t *' lvalue ParmVar 0x1ace21a17b0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace21a87a0 <col:51> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a8688 <col:51> 'size_t *' lvalue ParmVar 0x1ace21a1828 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1ace21a87d0 <col:59, col:60> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1ace21a87b8 <col:59, col:60> 'char' <LValueToRValue>
|   |   | |       `-UnaryOperator 0x1ace21a86e0 <col:59, col:60> 'const char' lvalue prefix '*' cannot overflow
|   |   | |         `-ImplicitCastExpr 0x1ace21a86c8 <col:60> 'const char *' <LValueToRValue>
|   |   | |           `-DeclRefExpr 0x1ace21a86a8 <col:60> 'const char *' lvalue Var 0x1ace21a1d58 'prefix' 'const char *'
|   |   | `-ReturnStmt 0x1ace21a8828 <line:488:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace21a8800 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1ace21a8870 <line:489:9, col:15> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x1ace21a8850 <col:9> 'const char *' lvalue Var 0x1ace21a1d58 'prefix' 'const char *'
|   |-IfStmt 0x1ace21a8c28 <line:493:5, line:499:5>
|   | |-BinaryOperator 0x1ace21a8920 <line:493:9, col:19> 'int' '>'
|   | | |-ImplicitCastExpr 0x1ace21a8908 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a88c0 <col:9> 'int' lvalue Var 0x1ace21a6208 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1ace21a88e0 <col:19> 'int' 0
|   | `-CompoundStmt 0x1ace21a8c10 <col:22, line:499:5>
|   |   `-WhileStmt 0x1ace21a8bf8 <line:494:9, line:498:9>
|   |     |-BinaryOperator 0x1ace21a89a0 <line:494:16, col:26> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1ace21a8988 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1ace21a8940 <col:16> 'int' lvalue Var 0x1ace21a6208 'zpadlen' 'int'
|   |     | `-IntegerLiteral 0x1ace21a8960 <col:26> 'int' 0
|   |     `-CompoundStmt 0x1ace21a8bd8 <col:29, line:498:9>
|   |       |-IfStmt 0x1ace21a8b88 <line:495:13, line:496:24>
|   |       | |-UnaryOperator 0x1ace21a8b38 <line:495:16, col:66> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x1ace21a8a90 <col:17, col:66> 'int'
|   |       | |   |-ImplicitCastExpr 0x1ace21a8a78 <col:17> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1ace21a89c0 <col:17> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       | |   |-ImplicitCastExpr 0x1ace21a8ad8 <col:29> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1ace21a89e0 <col:29> 'char **' lvalue ParmVar 0x1ace21a16b8 'sbuffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1ace21a8af0 <col:38> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1ace21a8a00 <col:38> 'char **' lvalue ParmVar 0x1ace21a1738 'buffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1ace21a8b08 <col:46> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1ace21a8a20 <col:46> 'size_t *' lvalue ParmVar 0x1ace21a17b0 'currlen' 'size_t *'
|   |       | |   |-ImplicitCastExpr 0x1ace21a8b20 <col:55> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1ace21a8a40 <col:55> 'size_t *' lvalue ParmVar 0x1ace21a1828 'maxlen' 'size_t *'
|   |       | |   `-CharacterLiteral 0x1ace21a8a60 <col:63> 'int' 48
|   |       | `-ReturnStmt 0x1ace21a8b78 <line:496:17, col:24>
|   |       |   `-IntegerLiteral 0x1ace21a8b50 <col:24> 'int' 0
|   |       `-UnaryOperator 0x1ace21a8bc0 <line:497:13, col:15> 'int' prefix '--'
|   |         `-DeclRefExpr 0x1ace21a8ba0 <col:15> 'int' lvalue Var 0x1ace21a6208 'zpadlen' 'int'
|   |-WhileStmt 0x1ace21a8e18 <line:501:5, line:504:5>
|   | |-BinaryOperator 0x1ace21a8ca0 <line:501:12, col:20> 'int' '>'
|   | | |-ImplicitCastExpr 0x1ace21a8c88 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a8c40 <col:12> 'int' lvalue Var 0x1ace21a2038 'place' 'int'
|   | | `-IntegerLiteral 0x1ace21a8c60 <col:20> 'int' 0
|   | `-CompoundStmt 0x1ace21a8e00 <col:23, line:504:5>
|   |   `-IfStmt 0x1ace21a8de8 <line:502:9, line:503:20>
|   |     |-OpaqueValueExpr 0x1ace21a8dd0 <<invalid sloc>> '_Bool'
|   |     `-ReturnStmt 0x1ace21a8dc0 <col:13, col:20>
|   |       `-IntegerLiteral 0x1ace21a8d98 <col:20> 'int' 0
|   |-WhileStmt 0x1ace21a90e8 <line:507:5, line:511:5>
|   | |-BinaryOperator 0x1ace21a8e90 <line:507:12, col:22> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace21a8e78 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a8e30 <col:12> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   | | `-IntegerLiteral 0x1ace21a8e50 <col:22> 'int' 0
|   | `-CompoundStmt 0x1ace21a90c8 <col:25, line:511:5>
|   |   |-IfStmt 0x1ace21a9078 <line:508:9, line:509:20>
|   |   | |-UnaryOperator 0x1ace21a9028 <line:508:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace21a8f80 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8f68 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace21a8eb0 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8fc8 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a8ed0 <col:26> 'char **' lvalue ParmVar 0x1ace21a16b8 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8fe0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a8ef0 <col:35> 'char **' lvalue ParmVar 0x1ace21a1738 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace21a8ff8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a8f10 <col:43> 'size_t *' lvalue ParmVar 0x1ace21a17b0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace21a9010 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace21a8f30 <col:52> 'size_t *' lvalue ParmVar 0x1ace21a1828 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1ace21a8f50 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1ace21a9068 <line:509:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace21a9040 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1ace21a90b0 <line:510:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1ace21a9090 <col:11> 'int' lvalue Var 0x1ace21a6148 'spadlen' 'int'
|   `-ReturnStmt 0x1ace21a9128 <line:512:5, col:12>
|     `-IntegerLiteral 0x1ace21a9100 <col:12> 'int' 1
|-FunctionDecl 0x1ace21a9330 <line:515:1, line:521:1> line:515:16 used abs_val 'double (double)' static
| |-ParmVarDecl 0x1ace21a9250 <line:27:18, line:515:32> col:32 used value 'double'
| `-CompoundStmt 0x1ace21a9660 <line:516:1, line:521:1>
|   |-DeclStmt 0x1ace21a94a8 <line:27:18, line:517:27>
|   | `-VarDecl 0x1ace21a9408 <line:27:18, line:517:22> col:13 used result 'double' cinit
|   |   `-ImplicitCastExpr 0x1ace21a9490 <col:22> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1ace21a9470 <col:22> 'double' lvalue ParmVar 0x1ace21a9250 'value' 'double'
|   |-IfStmt 0x1ace21a9600 <line:518:5, line:519:19>
|   | |-BinaryOperator 0x1ace21a9538 <line:518:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace21a9508 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a94c0 <col:9> 'double' lvalue ParmVar 0x1ace21a9250 'value' 'double'
|   | | `-ImplicitCastExpr 0x1ace21a9520 <col:17> 'double' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x1ace21a94e0 <col:17> 'int' 0
|   | `-BinaryOperator 0x1ace21a95e0 <line:519:9, col:19> 'double' '='
|   |   |-DeclRefExpr 0x1ace21a9558 <col:9> 'double' lvalue Var 0x1ace21a9408 'result' 'double'
|   |   `-UnaryOperator 0x1ace21a95c8 <col:18, col:19> 'double' prefix '-'
|   |     `-ImplicitCastExpr 0x1ace21a95b0 <col:19> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x1ace21a9590 <col:19> 'double' lvalue ParmVar 0x1ace21a9250 'value' 'double'
|   `-ReturnStmt 0x1ace21a9650 <line:520:5, col:12>
|     `-ImplicitCastExpr 0x1ace21a9638 <col:12> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x1ace21a9618 <col:12> 'double' lvalue Var 0x1ace21a9408 'result' 'double'
|-FunctionDecl 0x1ace21a9780 <line:523:1, line:531:1> line:523:16 used pow_10 'double (int)' static
| |-ParmVarDecl 0x1ace21a96a0 <col:23, col:27> col:27 used in_exp 'int'
| `-CompoundStmt 0x1ace21a9ab0 <line:524:1, line:531:1>
|   |-DeclStmt 0x1ace21a9900 <line:27:18, line:525:23>
|   | `-VarDecl 0x1ace21a9858 <line:27:18, line:525:22> col:13 used result 'double' cinit
|   |   `-ImplicitCastExpr 0x1ace21a98e8 <col:22> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x1ace21a98c0 <col:22> 'int' 1
|   |-WhileStmt 0x1ace21a9a50 <line:526:5, line:529:5>
|   | |-ImplicitCastExpr 0x1ace21a9938 <line:526:12> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1ace21a9918 <col:12> 'int' lvalue ParmVar 0x1ace21a96a0 'in_exp' 'int'
|   | `-CompoundStmt 0x1ace21a9a30 <col:20, line:529:5>
|   |   |-CompoundAssignOperator 0x1ace21a99c8 <line:527:9, col:19> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-DeclRefExpr 0x1ace21a9950 <col:9> 'double' lvalue Var 0x1ace21a9858 'result' 'double'
|   |   | `-ImplicitCastExpr 0x1ace21a99b0 <col:19> 'double' <IntegralToFloating>
|   |   |   `-IntegerLiteral 0x1ace21a9988 <col:19> 'int' 10
|   |   `-UnaryOperator 0x1ace21a9a18 <line:528:9, col:15> 'int' postfix '--'
|   |     `-DeclRefExpr 0x1ace21a99f8 <col:9> 'int' lvalue ParmVar 0x1ace21a96a0 'in_exp' 'int'
|   `-ReturnStmt 0x1ace21a9aa0 <line:530:5, col:12>
|     `-ImplicitCastExpr 0x1ace21a9a88 <col:12> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x1ace21a9a68 <col:12> 'double' lvalue Var 0x1ace21a9858 'result' 'double'
|-FunctionDecl 0x1ace21a9bd0 <line:533:1, line:541:1> line:533:13 used roundv 'long (double)' static
| |-ParmVarDecl 0x1ace21a9af0 <line:27:18, line:533:28> col:28 used value 'double'
| `-CompoundStmt 0x1ace21a9ff8 <line:534:1, line:541:1>
|   |-DeclStmt 0x1ace21a9d10 <line:535:5, col:17>
|   | `-VarDecl 0x1ace21a9ca8 <col:5, col:10> col:10 used intpart 'long'
|   |-BinaryOperator 0x1ace21a9dd8 <line:536:5, col:21> 'long' '='
|   | |-DeclRefExpr 0x1ace21a9d28 <col:5> 'long' lvalue Var 0x1ace21a9ca8 'intpart' 'long'
|   | `-CStyleCastExpr 0x1ace21a9db0 <col:15, col:21> 'long' <FloatingToIntegral>
|   |   `-ImplicitCastExpr 0x1ace21a9d98 <col:21> 'double' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x1ace21a9d60 <col:21> 'double' lvalue ParmVar 0x1ace21a9af0 'value' 'double'
|   |-BinaryOperator 0x1ace21a9ec0 <line:537:5, col:21> 'double' '='
|   | |-DeclRefExpr 0x1ace21a9df8 <col:5> 'double' lvalue ParmVar 0x1ace21a9af0 'value' 'double'
|   | `-BinaryOperator 0x1ace21a9ea0 <col:13, col:21> 'double' '-'
|   |   |-ImplicitCastExpr 0x1ace21a9e58 <col:13> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace21a9e18 <col:13> 'double' lvalue ParmVar 0x1ace21a9af0 'value' 'double'
|   |   `-ImplicitCastExpr 0x1ace21a9e88 <col:21> 'double' <IntegralToFloating>
|   |     `-ImplicitCastExpr 0x1ace21a9e70 <col:21> 'long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1ace21a9e38 <col:21> 'long' lvalue Var 0x1ace21a9ca8 'intpart' 'long'
|   |-IfStmt 0x1ace21a9f98 <line:538:5, line:539:16>
|   | |-BinaryOperator 0x1ace21a9f40 <line:538:9, col:18> 'int' '>='
|   | | |-ImplicitCastExpr 0x1ace21a9f28 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace21a9ee0 <col:9> 'double' lvalue ParmVar 0x1ace21a9af0 'value' 'double'
|   | | `-FloatingLiteral 0x1ace21a9f00 <col:18> 'double' 5.000000e-01
|   | `-UnaryOperator 0x1ace21a9f80 <line:539:9, col:16> 'long' postfix '++'
|   |   `-DeclRefExpr 0x1ace21a9f60 <col:9> 'long' lvalue Var 0x1ace21a9ca8 'intpart' 'long'
|   `-ReturnStmt 0x1ace21a9fe8 <line:540:5, col:12>
|     `-ImplicitCastExpr 0x1ace21a9fd0 <col:12> 'long' <LValueToRValue>
|       `-DeclRefExpr 0x1ace21a9fb0 <col:12> 'long' lvalue Var 0x1ace21a9ca8 'intpart' 'long'
|-FunctionDecl 0x1ace20fcd98 prev 0x1ace20e1f00 <line:543:1, line:800:1> line:544:1 used fmtfp 'int (char **, char **, size_t *, size_t *, double, int, int, int, int)' static
| |-ParmVarDecl 0x1ace21aa048 <col:7, col:14> col:14 used sbuffer 'char **'
| |-ParmVarDecl 0x1ace21aa0c8 <line:545:7, col:14> col:14 used buffer 'char **'
| |-ParmVarDecl 0x1ace20fc8f0 <line:546:7, col:15> col:15 used currlen 'size_t *'
| |-ParmVarDecl 0x1ace20fc968 <line:547:7, col:15> col:15 used maxlen 'size_t *'
| |-ParmVarDecl 0x1ace20fc9e8 <line:27:18, line:547:31> col:31 used fvalue 'double'
| |-ParmVarDecl 0x1ace20fca68 <col:39, col:43> col:43 used min 'int'
| |-ParmVarDecl 0x1ace20fcae8 <col:48, col:52> col:52 used max 'int'
| |-ParmVarDecl 0x1ace20fcb68 <col:57, col:61> col:61 used flags 'int'
| |-ParmVarDecl 0x1ace20fcbe8 <col:68, col:72> col:72 used style 'int'
| `-CompoundStmt 0x1ace2051408 <line:548:1, line:800:1>
|   |-DeclStmt 0x1ace20fcf28 <line:549:5, col:22>
|   | `-VarDecl 0x1ace20fce98 <col:5, col:21> col:9 used signvalue 'int' cinit
|   |   `-IntegerLiteral 0x1ace20fcf00 <col:21> 'int' 0
|   |-DeclStmt 0x1ace20fcfc0 <line:27:18, line:550:20>
|   | `-VarDecl 0x1ace20fcf58 <line:27:18, line:550:13> col:13 used ufvalue 'double'
|   |-DeclStmt 0x1ace20fd058 <line:27:18, line:551:21>
|   | `-VarDecl 0x1ace20fcff0 <line:27:18, line:551:13> col:13 used tmpvalue 'double'
|   |-DeclStmt 0x1ace20fd170 <line:552:5, col:22>
|   | `-VarDecl 0x1ace20fd108 <col:5, col:21> col:10 used iconvert 'char [20]'
|   |-DeclStmt 0x1ace20fd250 <line:553:5, col:22>
|   | `-VarDecl 0x1ace20fd1e8 <col:5, col:21> col:10 used fconvert 'char [20]'
|   |-DeclStmt 0x1ace20fd330 <line:554:5, col:22>
|   | `-VarDecl 0x1ace20fd2c8 <col:5, col:21> col:10 used econvert 'char [20]'
|   |-DeclStmt 0x1ace20fd3f0 <line:555:5, col:19>
|   | `-VarDecl 0x1ace20fd360 <col:5, col:18> col:9 used iplace 'int' cinit
|   |   `-IntegerLiteral 0x1ace20fd3c8 <col:18> 'int' 0
|   |-DeclStmt 0x1ace20fd4b0 <line:556:5, col:19>
|   | `-VarDecl 0x1ace20fd420 <col:5, col:18> col:9 used fplace 'int' cinit
|   |   `-IntegerLiteral 0x1ace20fd488 <col:18> 'int' 0
|   |-DeclStmt 0x1ace20fd570 <line:557:5, col:19>
|   | `-VarDecl 0x1ace20fd4e0 <col:5, col:18> col:9 used eplace 'int' cinit
|   |   `-IntegerLiteral 0x1ace20fd548 <col:18> 'int' 0
|   |-DeclStmt 0x1ace20fd630 <line:558:5, col:19>
|   | `-VarDecl 0x1ace20fd5a0 <col:5, col:18> col:9 used padlen 'int' cinit
|   |   `-IntegerLiteral 0x1ace20fd608 <col:18> 'int' 0
|   |-DeclStmt 0x1ace20fd6f0 <line:559:5, col:20>
|   | `-VarDecl 0x1ace20fd660 <col:5, col:19> col:9 used zpadlen 'int' cinit
|   |   `-IntegerLiteral 0x1ace20fd6c8 <col:19> 'int' 0
|   |-DeclStmt 0x1ace20fd7c8 <line:560:5, col:17>
|   | `-VarDecl 0x1ace20fd720 <col:5, col:16> col:10 used exp 'long' cinit
|   |   `-ImplicitCastExpr 0x1ace20fd7b0 <col:16> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x1ace20fd788 <col:16> 'int' 0
|   |-DeclStmt 0x1ace20fd860 <line:561:5, col:26>
|   | `-VarDecl 0x1ace20fd7f8 <col:5, col:19> col:19 used intpart 'unsigned long'
|   |-DeclStmt 0x1ace20fd8f8 <line:562:5, col:27>
|   | `-VarDecl 0x1ace20fd890 <col:5, col:19> col:19 used fracpart 'unsigned long'
|   |-DeclStmt 0x1ace20fd990 <line:563:5, col:24>
|   | `-VarDecl 0x1ace20fd928 <col:5, col:19> col:19 used max10 'unsigned long'
|   |-DeclStmt 0x1ace20fda28 <line:564:5, col:18>
|   | `-VarDecl 0x1ace20fd9c0 <col:5, col:9> col:9 used realstyle 'int'
|   |-IfStmt 0x1ace20fdb28 <line:566:5, line:567:15>
|   | |-BinaryOperator 0x1ace20fdaa0 <line:566:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace20fda88 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace20fda40 <col:9> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   | | `-IntegerLiteral 0x1ace20fda60 <col:15> 'int' 0
|   | `-BinaryOperator 0x1ace20fdb08 <line:567:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1ace20fdac0 <col:9> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   `-IntegerLiteral 0x1ace20fdae0 <col:15> 'int' 6
|   |-IfStmt 0x1ace20fdf08 <line:569:5, line:574:21> has_else
|   | |-BinaryOperator 0x1ace20fdbb8 <line:569:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace20fdb88 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace20fdb40 <col:9> 'double' lvalue ParmVar 0x1ace20fc9e8 'fvalue' 'double'
|   | | `-ImplicitCastExpr 0x1ace20fdba0 <col:18> 'double' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x1ace20fdb60 <col:18> 'int' 0
|   | |-BinaryOperator 0x1ace20fdc28 <line:570:9, col:21> 'int' '='
|   | | |-DeclRefExpr 0x1ace20fdbd8 <col:9> 'int' lvalue Var 0x1ace20fce98 'signvalue' 'int'
|   | | `-CharacterLiteral 0x1ace20fdc10 <col:21> 'int' 45
|   | `-IfStmt 0x1ace20fdee0 <line:571:10, line:574:21> has_else
|   |   |-BinaryOperator 0x1ace20fdd10 <line:571:14, line:55:32> 'int' '&'
|   |   | |-ImplicitCastExpr 0x1ace20fdcf8 <line:571:14> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1ace20fdc48 <col:14> 'int' lvalue ParmVar 0x1ace20fcb68 'flags' 'int'
|   |   | `-ParenExpr 0x1ace20fdcd8 <line:55:25, col:32> 'int'
|   |   |   `-BinaryOperator 0x1ace20fdcb8 <col:26, col:31> 'int' '<<'
|   |   |     |-IntegerLiteral 0x1ace20fdc68 <col:26> 'int' 1
|   |   |     `-IntegerLiteral 0x1ace20fdc90 <col:31> 'int' 1
|   |   |-BinaryOperator 0x1ace20fdd68 <line:572:9, col:21> 'int' '='
|   |   | |-DeclRefExpr 0x1ace20fdd30 <col:9> 'int' lvalue Var 0x1ace20fce98 'signvalue' 'int'
|   |   | `-CharacterLiteral 0x1ace20fdd50 <col:21> 'int' 43
|   |   `-IfStmt 0x1ace20fdec8 <line:573:10, line:574:21>
|   |     |-BinaryOperator 0x1ace20fde50 <line:573:14, line:57:32> 'int' '&'
|   |     | |-ImplicitCastExpr 0x1ace20fde38 <line:573:14> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1ace20fdd88 <col:14> 'int' lvalue ParmVar 0x1ace20fcb68 'flags' 'int'
|   |     | `-ParenExpr 0x1ace20fde18 <line:57:25, col:32> 'int'
|   |     |   `-BinaryOperator 0x1ace20fddf8 <col:26, col:31> 'int' '<<'
|   |     |     |-IntegerLiteral 0x1ace20fdda8 <col:26> 'int' 1
|   |     |     `-IntegerLiteral 0x1ace20fddd0 <col:31> 'int' 2
|   |     `-BinaryOperator 0x1ace20fdea8 <line:574:9, col:21> 'int' '='
|   |       |-DeclRefExpr 0x1ace20fde70 <col:9> 'int' lvalue Var 0x1ace20fce98 'signvalue' 'int'
|   |       `-CharacterLiteral 0x1ace20fde90 <col:21> 'int' 32
|   |-IfStmt 0x1ace20fe738 <line:581:5, line:594:5> has_else
|   | |-BinaryOperator 0x1ace20fdf90 <line:581:9, line:76:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1ace20fdf78 <line:581:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace20fdf30 <col:9> 'int' lvalue ParmVar 0x1ace20fcbe8 'style' 'int'
|   | | `-IntegerLiteral 0x1ace20fdf50 <line:76:25> 'int' 2
|   | |-CompoundStmt 0x1ace20fe690 <line:581:28, line:592:5>
|   | | `-IfStmt 0x1ace20fe668 <line:582:9, line:591:9> has_else
|   | |   |-BinaryOperator 0x1ace20fe010 <line:582:13, col:23> 'int' '=='
|   | |   | |-ImplicitCastExpr 0x1ace20fdff8 <col:13> 'double' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x1ace20fdfb0 <col:13> 'double' lvalue ParmVar 0x1ace20fc9e8 'fvalue' 'double'
|   | |   | `-FloatingLiteral 0x1ace20fdfd0 <col:23> 'double' 0.000000e+00
|   | |   |-CompoundStmt 0x1ace20fe0b0 <col:28, line:584:9>
|   | |   | `-BinaryOperator 0x1ace20fe090 <line:583:13, line:74:25> 'int' '='
|   | |   |   |-DeclRefExpr 0x1ace20fe030 <line:583:13> 'int' lvalue Var 0x1ace20fd9c0 'realstyle' 'int'
|   | |   |   `-IntegerLiteral 0x1ace20fe068 <line:74:25> 'int' 0
|   | |   `-IfStmt 0x1ace20fe640 <line:584:16, line:591:9> has_else
|   | |     |-BinaryOperator 0x1ace20fe128 <line:584:20, col:29> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x1ace20fe110 <col:20> 'double' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x1ace20fe0c8 <col:20> 'double' lvalue ParmVar 0x1ace20fc9e8 'fvalue' 'double'
|   | |     | `-FloatingLiteral 0x1ace20fe0e8 <col:29> 'double' 1.000000e-04
|   | |     |-CompoundStmt 0x1ace20fe1b0 <col:37, line:586:9>
|   | |     | `-BinaryOperator 0x1ace20fe190 <line:585:13, line:75:25> 'int' '='
|   | |     |   |-DeclRefExpr 0x1ace20fe148 <line:585:13> 'int' lvalue Var 0x1ace20fd9c0 'realstyle' 'int'
|   | |     |   `-IntegerLiteral 0x1ace20fe168 <line:75:25> 'int' 1
|   | |     `-IfStmt 0x1ace20fe618 <line:586:16, line:591:9> has_else
|   | |       |-BinaryOperator 0x1ace20fe4f8 <line:586:20, line:587:57> 'int' '||'
|   | |       | |-ParenExpr 0x1ace20fe300 <line:586:20, col:45> 'int'
|   | |       | | `-BinaryOperator 0x1ace20fe2e0 <col:21, col:43> 'int' '&&'
|   | |       | |   |-BinaryOperator 0x1ace20fe228 <col:21, col:28> 'int' '=='
|   | |       | |   | |-ImplicitCastExpr 0x1ace20fe210 <col:21> 'int' <LValueToRValue>
|   | |       | |   | | `-DeclRefExpr 0x1ace20fe1c8 <col:21> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   | |       | |   | `-IntegerLiteral 0x1ace20fe1e8 <col:28> 'int' 0
|   | |       | |   `-BinaryOperator 0x1ace20fe2c0 <col:33, col:43> 'int' '>='
|   | |       | |     |-ImplicitCastExpr 0x1ace20fe290 <col:33> 'double' <LValueToRValue>
|   | |       | |     | `-DeclRefExpr 0x1ace20fe248 <col:33> 'double' lvalue ParmVar 0x1ace20fc9e8 'fvalue' 'double'
|   | |       | |     `-ImplicitCastExpr 0x1ace20fe2a8 <col:43> 'double' <IntegralToFloating>
|   | |       | |       `-IntegerLiteral 0x1ace20fe268 <col:43> 'int' 10
|   | |       | `-ParenExpr 0x1ace20fe4d8 <line:587:24, col:57> 'int'
|   | |       |   `-BinaryOperator 0x1ace20fe4b8 <col:25, col:56> 'int' '&&'
|   | |       |     |-BinaryOperator 0x1ace20fe380 <col:25, col:31> 'int' '>'
|   | |       |     | |-ImplicitCastExpr 0x1ace20fe368 <col:25> 'int' <LValueToRValue>
|   | |       |     | | `-DeclRefExpr 0x1ace20fe320 <col:25> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   | |       |     | `-IntegerLiteral 0x1ace20fe340 <col:31> 'int' 0
|   | |       |     `-BinaryOperator 0x1ace20fe498 <col:36, col:56> 'int' '>='
|   | |       |       |-ImplicitCastExpr 0x1ace20fe480 <col:36> 'double' <LValueToRValue>
|   | |       |       | `-DeclRefExpr 0x1ace20fe3a0 <col:36> 'double' lvalue ParmVar 0x1ace20fc9e8 'fvalue' 'double'
|   | |       |       `-CallExpr 0x1ace20fe440 <col:46, col:56> 'double'
|   | |       |         |-ImplicitCastExpr 0x1ace20fe428 <col:46> 'double (*)(int)' <FunctionToPointerDecay>
|   | |       |         | `-DeclRefExpr 0x1ace20fe3c0 <col:46> 'double (int)' Function 0x1ace21a9780 'pow_10' 'double (int)'
|   | |       |         `-ImplicitCastExpr 0x1ace20fe468 <col:53> 'int' <LValueToRValue>
|   | |       |           `-DeclRefExpr 0x1ace20fe3e0 <col:53> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   | |       |-CompoundStmt 0x1ace20fe580 <col:60, line:589:9>
|   | |       | `-BinaryOperator 0x1ace20fe560 <line:588:13, line:75:25> 'int' '='
|   | |       |   |-DeclRefExpr 0x1ace20fe518 <line:588:13> 'int' lvalue Var 0x1ace20fd9c0 'realstyle' 'int'
|   | |       |   `-IntegerLiteral 0x1ace20fe538 <line:75:25> 'int' 1
|   | |       `-CompoundStmt 0x1ace20fe600 <line:589:16, line:591:9>
|   | |         `-BinaryOperator 0x1ace20fe5e0 <line:590:13, line:74:25> 'int' '='
|   | |           |-DeclRefExpr 0x1ace20fe598 <line:590:13> 'int' lvalue Var 0x1ace20fd9c0 'realstyle' 'int'
|   | |           `-IntegerLiteral 0x1ace20fe5b8 <line:74:25> 'int' 0
|   | `-CompoundStmt 0x1ace20fe720 <line:592:12, line:594:5>
|   |   `-BinaryOperator 0x1ace20fe700 <line:593:9, col:21> 'int' '='
|   |     |-DeclRefExpr 0x1ace20fe6a8 <col:9> 'int' lvalue Var 0x1ace20fd9c0 'realstyle' 'int'
|   |     `-ImplicitCastExpr 0x1ace20fe6e8 <col:21> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1ace20fe6c8 <col:21> 'int' lvalue ParmVar 0x1ace20fcbe8 'style' 'int'
|   |-IfStmt 0x1ace204baf0 <line:596:5, line:636:5>
|   | |-BinaryOperator 0x1ace20fe7c0 <line:596:9, line:74:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x1ace20fe7a8 <line:596:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace20fe760 <col:9> 'int' lvalue ParmVar 0x1ace20fcbe8 'style' 'int'
|   | | `-IntegerLiteral 0x1ace20fe780 <line:74:25> 'int' 0
|   | `-CompoundStmt 0x1ace204bac0 <line:596:28, line:636:5>
|   |   |-BinaryOperator 0x1ace20fe850 <line:597:9, col:20> 'double' '='
|   |   | |-DeclRefExpr 0x1ace20fe7e0 <col:9> 'double' lvalue Var 0x1ace20fcff0 'tmpvalue' 'double'
|   |   | `-ImplicitCastExpr 0x1ace20fe838 <col:20> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1ace20fe818 <col:20> 'double' lvalue ParmVar 0x1ace20fc9e8 'fvalue' 'double'
|   |   |-IfStmt 0x1ace204b4d8 <line:599:9, line:608:9>
|   |   | |-BinaryOperator 0x1ace20fe8d0 <line:599:13, col:23> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x1ace20fe8b8 <col:13> 'double' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1ace20fe870 <col:13> 'double' lvalue ParmVar 0x1ace20fc9e8 'fvalue' 'double'
|   |   | | `-FloatingLiteral 0x1ace20fe890 <col:23> 'double' 0.000000e+00
|   |   | `-CompoundStmt 0x1ace204b4b8 <col:28, line:608:9>
|   |   |   |-WhileStmt 0x1ace204b308 <line:600:13, line:603:13>
|   |   |   | |-BinaryOperator 0x1ace204b1e8 <line:600:20, col:31> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x1ace204b1b8 <col:20> 'double' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1ace204b170 <col:20> 'double' lvalue Var 0x1ace20fcff0 'tmpvalue' 'double'
|   |   |   | | `-ImplicitCastExpr 0x1ace204b1d0 <col:31> 'double' <IntegralToFloating>
|   |   |   | |   `-IntegerLiteral 0x1ace204b190 <col:31> 'int' 1
|   |   |   | `-CompoundStmt 0x1ace204b2e8 <col:34, line:603:13>
|   |   |   |   |-CompoundAssignOperator 0x1ace204b268 <line:601:17, col:29> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   |   |   | |-DeclRefExpr 0x1ace204b208 <col:17> 'double' lvalue Var 0x1ace20fcff0 'tmpvalue' 'double'
|   |   |   |   | `-ImplicitCastExpr 0x1ace204b250 <col:29> 'double' <IntegralToFloating>
|   |   |   |   |   `-IntegerLiteral 0x1ace204b228 <col:29> 'int' 10
|   |   |   |   `-UnaryOperator 0x1ace204b2d0 <line:602:17, col:20> 'long' postfix '--'
|   |   |   |     `-DeclRefExpr 0x1ace204b298 <col:17> 'long' lvalue Var 0x1ace20fd720 'exp' 'long'
|   |   |   `-WhileStmt 0x1ace204b4a0 <line:604:13, line:607:13>
|   |   |     |-BinaryOperator 0x1ace204b398 <line:604:20, col:31> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x1ace204b368 <col:20> 'double' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1ace204b320 <col:20> 'double' lvalue Var 0x1ace20fcff0 'tmpvalue' 'double'
|   |   |     | `-ImplicitCastExpr 0x1ace204b380 <col:31> 'double' <IntegralToFloating>
|   |   |     |   `-IntegerLiteral 0x1ace204b340 <col:31> 'int' 10
|   |   |     `-CompoundStmt 0x1ace204b480 <col:35, line:607:13>
|   |   |       |-CompoundAssignOperator 0x1ace204b418 <line:605:17, col:29> 'double' '/=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   |       | |-DeclRefExpr 0x1ace204b3b8 <col:17> 'double' lvalue Var 0x1ace20fcff0 'tmpvalue' 'double'
|   |   |       | `-ImplicitCastExpr 0x1ace204b400 <col:29> 'double' <IntegralToFloating>
|   |   |       |   `-IntegerLiteral 0x1ace204b3d8 <col:29> 'int' 10
|   |   |       `-UnaryOperator 0x1ace204b468 <line:606:17, col:20> 'long' postfix '++'
|   |   |         `-DeclRefExpr 0x1ace204b448 <col:17> 'long' lvalue Var 0x1ace20fd720 'exp' 'long'
|   |   |-IfStmt 0x1ace204b998 <line:609:9, line:633:9>
|   |   | |-BinaryOperator 0x1ace204b550 <line:609:13, line:76:25> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1ace204b538 <line:609:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1ace204b4f0 <col:13> 'int' lvalue ParmVar 0x1ace20fcbe8 'style' 'int'
|   |   | | `-IntegerLiteral 0x1ace204b510 <line:76:25> 'int' 2
|   |   | `-CompoundStmt 0x1ace204b978 <line:609:32, line:633:9>
|   |   |   |-IfStmt 0x1ace204b658 <line:614:13, line:615:23>
|   |   |   | |-BinaryOperator 0x1ace204b5d0 <line:614:17, col:24> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x1ace204b5b8 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1ace204b570 <col:17> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   |   | | `-IntegerLiteral 0x1ace204b590 <col:24> 'int' 0
|   |   |   | `-BinaryOperator 0x1ace204b638 <line:615:17, col:23> 'int' '='
|   |   |   |   |-DeclRefExpr 0x1ace204b5f0 <col:17> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   |   |   `-IntegerLiteral 0x1ace204b610 <col:23> 'int' 1
|   |   |   `-IfStmt 0x1ace204b950 <line:617:13, line:632:13> has_else
|   |   |     |-BinaryOperator 0x1ace204b6d0 <line:617:17, line:74:25> 'int' '=='
|   |   |     | |-ImplicitCastExpr 0x1ace204b6b8 <line:617:17> 'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1ace204b670 <col:17> 'int' lvalue Var 0x1ace20fd9c0 'realstyle' 'int'
|   |   |     | `-IntegerLiteral 0x1ace204b690 <line:74:25> 'int' 0
|   |   |     |-CompoundStmt 0x1ace204b8e0 <line:617:40, line:625:13>
|   |   |     | |-CompoundAssignOperator 0x1ace204b7c8 <line:618:17, col:32> 'int' '-=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   |     | | |-DeclRefExpr 0x1ace204b6f0 <col:17> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   |     | | `-ParenExpr 0x1ace204b7a8 <col:24, col:32> 'long'
|   |   |     | |   `-BinaryOperator 0x1ace204b788 <col:25, col:31> 'long' '+'
|   |   |     | |     |-ImplicitCastExpr 0x1ace204b758 <col:25> 'long' <LValueToRValue>
|   |   |     | |     | `-DeclRefExpr 0x1ace204b710 <col:25> 'long' lvalue Var 0x1ace20fd720 'exp' 'long'
|   |   |     | |     `-ImplicitCastExpr 0x1ace204b770 <col:31> 'long' <IntegralCast>
|   |   |     | |       `-IntegerLiteral 0x1ace204b730 <col:31> 'int' 1
|   |   |     | `-IfStmt 0x1ace204b8c8 <line:619:17, line:624:17>
|   |   |     |   |-BinaryOperator 0x1ace204b858 <line:619:21, col:27> 'int' '<'
|   |   |     |   | |-ImplicitCastExpr 0x1ace204b840 <col:21> 'int' <LValueToRValue>
|   |   |     |   | | `-DeclRefExpr 0x1ace204b7f8 <col:21> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   |     |   | `-IntegerLiteral 0x1ace204b818 <col:27> 'int' 0
|   |   |     |   `-CompoundStmt 0x1ace204b8b0 <col:30, line:624:17>
|   |   |     |     `-ReturnStmt 0x1ace204b8a0 <line:623:21, col:28>
|   |   |     |       `-IntegerLiteral 0x1ace204b878 <col:28> 'int' 0
|   |   |     `-CompoundStmt 0x1ace204b938 <line:625:20, line:632:13>
|   |   |       `-UnaryOperator 0x1ace204b920 <line:631:17, col:20> 'int' postfix '--'
|   |   |         `-DeclRefExpr 0x1ace204b900 <col:17> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   `-IfStmt 0x1ace204baa8 <line:634:9, line:635:22>
|   |     |-BinaryOperator 0x1ace204ba10 <line:634:13, line:75:25> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1ace204b9f8 <line:634:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1ace204b9b0 <col:13> 'int' lvalue Var 0x1ace20fd9c0 'realstyle' 'int'
|   |     | `-IntegerLiteral 0x1ace204b9d0 <line:75:25> 'int' 1
|   |     `-BinaryOperator 0x1ace204ba88 <line:635:13, col:22> 'double' '='
|   |       |-DeclRefExpr 0x1ace204ba30 <col:13> 'double' lvalue ParmVar 0x1ace20fc9e8 'fvalue' 'double'
|   |       `-ImplicitCastExpr 0x1ace204ba70 <col:22> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x1ace204ba50 <col:22> 'double' lvalue Var 0x1ace20fcff0 'tmpvalue' 'double'
|   |-BinaryOperator 0x1ace204bc00 <line:637:5, col:29> 'double' '='
|   | |-DeclRefExpr 0x1ace204bb08 <col:5> 'double' lvalue Var 0x1ace20fcf58 'ufvalue' 'double'
|   | `-CallExpr 0x1ace204bbc0 <col:15, col:29> 'double'
|   |   |-ImplicitCastExpr 0x1ace204bba8 <col:15> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1ace204bb40 <col:15> 'double (double)' Function 0x1ace21a9330 'abs_val' 'double (double)'
|   |   `-ImplicitCastExpr 0x1ace204bbe8 <col:23> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1ace204bb60 <col:23> 'double' lvalue ParmVar 0x1ace20fc9e8 'fvalue' 'double'
|   |-IfStmt 0x1ace204bca8 <line:638:5, line:641:5>
|   | |-OpaqueValueExpr 0x1ace204bc90 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1ace204bc78 <line:638:30, line:641:5>
|   |   `-ReturnStmt 0x1ace204bc68 <line:640:9, col:16>
|   |     `-IntegerLiteral 0x1ace204bc40 <col:16> 'int' 0
|   |-BinaryOperator 0x1ace204bd70 <line:642:5, col:30> 'unsigned long' '='
|   | |-DeclRefExpr 0x1ace204bcc0 <col:5> 'unsigned long' lvalue Var 0x1ace20fd7f8 'intpart' 'unsigned long'
|   | `-CStyleCastExpr 0x1ace204bd48 <col:15, col:30> 'unsigned long' <FloatingToIntegral>
|   |   `-ImplicitCastExpr 0x1ace204bd30 <col:30> 'double' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x1ace204bcf8 <col:30> 'double' lvalue Var 0x1ace20fcf58 'ufvalue' 'double'
|   |-IfStmt 0x1ace204be78 <line:648:5, line:649:15>
|   | |-BinaryOperator 0x1ace204bdf0 <line:648:9, col:15> 'int' '>'
|   | | |-ImplicitCastExpr 0x1ace204bdd8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204bd90 <col:9> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   | | `-IntegerLiteral 0x1ace204bdb0 <col:15> 'int' 9
|   | `-BinaryOperator 0x1ace204be58 <line:649:9, col:15> 'int' '='
|   |   |-DeclRefExpr 0x1ace204be10 <col:9> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   `-IntegerLiteral 0x1ace204be30 <col:15> 'int' 9
|   |-BinaryOperator 0x1ace204c000 <line:655:5, col:31> 'unsigned long' '='
|   | |-DeclRefExpr 0x1ace204be90 <col:5> 'unsigned long' lvalue Var 0x1ace20fd928 'max10' 'unsigned long'
|   | `-ImplicitCastExpr 0x1ace204bfe8 <col:13, col:31> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x1ace204bfc0 <col:13, col:31> 'long'
|   |     |-ImplicitCastExpr 0x1ace204bfa8 <col:13> 'long (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1ace204bec8 <col:13> 'long (double)' Function 0x1ace21a9bd0 'roundv' 'long (double)'
|   |     `-CallExpr 0x1ace204bf40 <col:20, col:30> 'double'
|   |       |-ImplicitCastExpr 0x1ace204bf28 <col:20> 'double (*)(int)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1ace204bee8 <col:20> 'double (int)' Function 0x1ace21a9780 'pow_10' 'double (int)'
|   |       `-ImplicitCastExpr 0x1ace204bf68 <col:27> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1ace204bf08 <col:27> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |-BinaryOperator 0x1ace204c250 <line:656:5, col:56> 'unsigned long' '='
|   | |-DeclRefExpr 0x1ace204c020 <col:5> 'unsigned long' lvalue Var 0x1ace20fd890 'fracpart' 'unsigned long'
|   | `-ImplicitCastExpr 0x1ace204c238 <col:16, col:56> 'unsigned long' <IntegralCast>
|   |   `-CallExpr 0x1ace204c210 <col:16, col:56> 'long'
|   |     |-ImplicitCastExpr 0x1ace204c1f8 <col:16> 'long (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1ace204c058 <col:16> 'long (double)' Function 0x1ace21a9bd0 'roundv' 'long (double)'
|   |     `-BinaryOperator 0x1ace204c1d8 <col:23, col:55> 'double' '*'
|   |       |-CallExpr 0x1ace204c0d0 <col:23, col:33> 'double'
|   |       | |-ImplicitCastExpr 0x1ace204c0b8 <col:23> 'double (*)(int)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x1ace204c078 <col:23> 'double (int)' Function 0x1ace21a9780 'pow_10' 'double (int)'
|   |       | `-ImplicitCastExpr 0x1ace204c0f8 <col:30> 'int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1ace204c098 <col:30> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |       `-ParenExpr 0x1ace204c1b8 <col:37, col:55> 'double'
|   |         `-BinaryOperator 0x1ace204c198 <col:38, col:48> 'double' '-'
|   |           |-ImplicitCastExpr 0x1ace204c150 <col:38> 'double' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1ace204c110 <col:38> 'double' lvalue Var 0x1ace20fcf58 'ufvalue' 'double'
|   |           `-ImplicitCastExpr 0x1ace204c180 <col:48> 'double' <IntegralToFloating>
|   |             `-ImplicitCastExpr 0x1ace204c168 <col:48> 'unsigned long' <LValueToRValue>
|   |               `-DeclRefExpr 0x1ace204c130 <col:48> 'unsigned long' lvalue Var 0x1ace20fd7f8 'intpart' 'unsigned long'
|   |-IfStmt 0x1ace204c3e0 <line:658:5, line:661:5>
|   | |-BinaryOperator 0x1ace204c2e0 <line:658:9, col:21> 'int' '>='
|   | | |-ImplicitCastExpr 0x1ace204c2b0 <col:9> 'unsigned long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204c270 <col:9> 'unsigned long' lvalue Var 0x1ace20fd890 'fracpart' 'unsigned long'
|   | | `-ImplicitCastExpr 0x1ace204c2c8 <col:21> 'unsigned long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1ace204c290 <col:21> 'unsigned long' lvalue Var 0x1ace20fd928 'max10' 'unsigned long'
|   | `-CompoundStmt 0x1ace204c3c0 <col:28, line:661:5>
|   |   |-UnaryOperator 0x1ace204c320 <line:659:9, col:16> 'unsigned long' postfix '++'
|   |   | `-DeclRefExpr 0x1ace204c300 <col:9> 'unsigned long' lvalue Var 0x1ace20fd7f8 'intpart' 'unsigned long'
|   |   `-CompoundAssignOperator 0x1ace204c390 <line:660:9, col:21> 'unsigned long' '-=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   |     |-DeclRefExpr 0x1ace204c338 <col:9> 'unsigned long' lvalue Var 0x1ace20fd890 'fracpart' 'unsigned long'
|   |     `-ImplicitCastExpr 0x1ace204c378 <col:21> 'unsigned long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1ace204c358 <col:21> 'unsigned long' lvalue Var 0x1ace20fd928 'max10' 'unsigned long'
|   |-DoStmt 0x1ace204c8b0 <line:664:5, line:667:57>
|   | |-CompoundStmt 0x1ace204c720 <line:664:8, line:667:5>
|   | | |-BinaryOperator 0x1ace204c608 <line:665:9, col:55> 'char' '='
|   | | | |-ArraySubscriptExpr 0x1ace204c498 <col:9, col:26> 'char' lvalue
|   | | | | |-ImplicitCastExpr 0x1ace204c480 <col:9> 'char *' <ArrayToPointerDecay>
|   | | | | | `-DeclRefExpr 0x1ace204c3f8 <col:9> 'char [20]' lvalue Var 0x1ace20fd108 'iconvert' 'char [20]'
|   | | | | `-UnaryOperator 0x1ace204c468 <col:18, col:24> 'int' postfix '++'
|   | | | |   `-DeclRefExpr 0x1ace204c430 <col:18> 'int' lvalue Var 0x1ace20fd360 'iplace' 'int'
|   | | | `-ImplicitCastExpr 0x1ace204c5f0 <col:30, col:55> 'char' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x1ace204c5d0 <col:30, col:55> 'char' lvalue
|   | | |     |-ImplicitCastExpr 0x1ace204c5b8 <col:30> 'char *' <ArrayToPointerDecay>
|   | | |     | `-StringLiteral 0x1ace204c4f8 <col:30> 'char [11]' lvalue "0123456789"
|   | | |     `-BinaryOperator 0x1ace204c598 <col:43, col:53> 'unsigned long' '%'
|   | | |       |-ImplicitCastExpr 0x1ace204c568 <col:43> 'unsigned long' <LValueToRValue>
|   | | |       | `-DeclRefExpr 0x1ace204c520 <col:43> 'unsigned long' lvalue Var 0x1ace20fd7f8 'intpart' 'unsigned long'
|   | | |       `-ImplicitCastExpr 0x1ace204c580 <col:53> 'unsigned long' <IntegralCast>
|   | | |         `-IntegerLiteral 0x1ace204c540 <col:53> 'int' 10
|   | | `-BinaryOperator 0x1ace204c700 <line:666:9, col:32> 'unsigned long' '='
|   | |   |-DeclRefExpr 0x1ace204c628 <col:9> 'unsigned long' lvalue Var 0x1ace20fd7f8 'intpart' 'unsigned long'
|   | |   `-ParenExpr 0x1ace204c6e0 <col:19, col:32> 'unsigned long'
|   | |     `-BinaryOperator 0x1ace204c6c0 <col:20, col:30> 'unsigned long' '/'
|   | |       |-ImplicitCastExpr 0x1ace204c690 <col:20> 'unsigned long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1ace204c648 <col:20> 'unsigned long' lvalue Var 0x1ace20fd7f8 'intpart' 'unsigned long'
|   | |       `-ImplicitCastExpr 0x1ace204c6a8 <col:30> 'unsigned long' <IntegralCast>
|   | |         `-IntegerLiteral 0x1ace204c668 <col:30> 'int' 10
|   | `-BinaryOperator 0x1ace204c890 <line:667:14, col:56> 'int' '&&'
|   |   |-ImplicitCastExpr 0x1ace204c878 <col:14> 'unsigned long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace204c740 <col:14> 'unsigned long' lvalue Var 0x1ace20fd7f8 'intpart' 'unsigned long'
|   |   `-ParenExpr 0x1ace204c858 <col:25, col:56> 'int'
|   |     `-BinaryOperator 0x1ace204c838 <col:26, col:55> 'int' '<'
|   |       |-ImplicitCastExpr 0x1ace204c820 <col:26> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1ace204c760 <col:26> 'int' lvalue Var 0x1ace20fd360 'iplace' 'int'
|   |       `-CStyleCastExpr 0x1ace204c7f8 <col:35, col:55> 'int' <IntegralCast>
|   |         `-UnaryExprOrTypeTraitExpr 0x1ace204c7c0 <col:40, col:55> 'unsigned long long' sizeof
|   |           `-ParenExpr 0x1ace204c7a0 <col:46, col:55> 'char [20]' lvalue
|   |             `-DeclRefExpr 0x1ace204c780 <col:47> 'char [20]' lvalue Var 0x1ace20fd108 'iconvert' 'char [20]' non_odr_use_unevaluated
|   |-IfStmt 0x1ace204c9d8 <line:668:5, line:669:15>
|   | |-BinaryOperator 0x1ace204c980 <line:668:9, col:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x1ace204c968 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1ace204c950 <col:9> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1ace204c8d0 <col:9> 'int' lvalue Var 0x1ace20fd360 'iplace' 'int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1ace204c930 <col:19, col:34> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1ace204c910 <col:25, col:34> 'char [20]' lvalue
|   | |     `-DeclRefExpr 0x1ace204c8f0 <col:26> 'char [20]' lvalue Var 0x1ace20fd108 'iconvert' 'char [20]' non_odr_use_unevaluated
|   | `-UnaryOperator 0x1ace204c9c0 <line:669:9, col:15> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1ace204c9a0 <col:9> 'int' lvalue Var 0x1ace20fd360 'iplace' 'int'
|   |-BinaryOperator 0x1ace204cac0 <line:670:5, col:24> 'char' '='
|   | |-ArraySubscriptExpr 0x1ace204ca60 <col:5, col:20> 'char' lvalue
|   | | |-ImplicitCastExpr 0x1ace204ca30 <col:5> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1ace204c9f0 <col:5> 'char [20]' lvalue Var 0x1ace20fd108 'iconvert' 'char [20]'
|   | | `-ImplicitCastExpr 0x1ace204ca48 <col:14> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1ace204ca10 <col:14> 'int' lvalue Var 0x1ace20fd360 'iplace' 'int'
|   | `-ImplicitCastExpr 0x1ace204caa8 <col:24> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x1ace204ca80 <col:24> 'int' 0
|   |-WhileStmt 0x1ace204d2f8 <line:673:5, line:684:5>
|   | |-BinaryOperator 0x1ace204cb68 <line:673:12, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace204cb38 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204cae0 <col:12> 'int' lvalue Var 0x1ace20fd420 'fplace' 'int'
|   | | `-ImplicitCastExpr 0x1ace204cb50 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1ace204cb18 <col:21> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   | `-CompoundStmt 0x1ace204d2d0 <col:26, line:684:5>
|   |   |-IfStmt 0x1ace204cfd8 <line:674:9, line:681:9>
|   |   | |-BinaryOperator 0x1ace204cdc0 <line:674:13, col:68> 'int' '&&'
|   |   | | |-BinaryOperator 0x1ace204cc88 <col:13, col:44> 'int' '&&'
|   |   | | | |-BinaryOperator 0x1ace204cbe8 <col:13, line:76:25> 'int' '=='
|   |   | | | | |-ImplicitCastExpr 0x1ace204cbd0 <line:674:13> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x1ace204cb88 <col:13> 'int' lvalue ParmVar 0x1ace20fcbe8 'style' 'int'
|   |   | | | | `-IntegerLiteral 0x1ace204cba8 <line:76:25> 'int' 2
|   |   | | | `-BinaryOperator 0x1ace204cc68 <line:674:34, col:44> 'int' '=='
|   |   | | |   |-ImplicitCastExpr 0x1ace204cc50 <col:34> 'int' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x1ace204cc08 <col:34> 'int' lvalue Var 0x1ace20fd420 'fplace' 'int'
|   |   | | |   `-IntegerLiteral 0x1ace204cc28 <col:44> 'int' 0
|   |   | | `-BinaryOperator 0x1ace204cda0 <col:49, col:68> 'int' '=='
|   |   | |   |-ParenExpr 0x1ace204cd40 <col:49, col:63> 'unsigned long'
|   |   | |   | `-BinaryOperator 0x1ace204cd20 <col:50, col:61> 'unsigned long' '%'
|   |   | |   |   |-ImplicitCastExpr 0x1ace204ccf0 <col:50> 'unsigned long' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1ace204cca8 <col:50> 'unsigned long' lvalue Var 0x1ace20fd890 'fracpart' 'unsigned long'
|   |   | |   |   `-ImplicitCastExpr 0x1ace204cd08 <col:61> 'unsigned long' <IntegralCast>
|   |   | |   |     `-IntegerLiteral 0x1ace204ccc8 <col:61> 'int' 10
|   |   | |   `-ImplicitCastExpr 0x1ace204cd88 <col:68> 'unsigned long' <IntegralCast>
|   |   | |     `-IntegerLiteral 0x1ace204cd60 <col:68> 'int' 0
|   |   | `-CompoundStmt 0x1ace204cfa8 <col:71, line:681:9>
|   |   |   |-UnaryOperator 0x1ace204ce00 <line:676:13, col:16> 'int' postfix '--'
|   |   |   | `-DeclRefExpr 0x1ace204cde0 <col:13> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   |   |-BinaryOperator 0x1ace204ced0 <line:677:13, col:35> 'unsigned long' '='
|   |   |   | |-DeclRefExpr 0x1ace204ce18 <col:13> 'unsigned long' lvalue Var 0x1ace20fd890 'fracpart' 'unsigned long'
|   |   |   | `-BinaryOperator 0x1ace204ceb0 <col:24, col:35> 'unsigned long' '/'
|   |   |   |   |-ImplicitCastExpr 0x1ace204ce80 <col:24> 'unsigned long' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x1ace204ce38 <col:24> 'unsigned long' lvalue Var 0x1ace20fd890 'fracpart' 'unsigned long'
|   |   |   |   `-ImplicitCastExpr 0x1ace204ce98 <col:35> 'unsigned long' <IntegralCast>
|   |   |   |     `-IntegerLiteral 0x1ace204ce58 <col:35> 'int' 10
|   |   |   |-IfStmt 0x1ace204cf88 <line:678:13, line:679:17>
|   |   |   | |-BinaryOperator 0x1ace204cf60 <line:678:17, col:26> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x1ace204cf30 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1ace204cef0 <col:17> 'int' lvalue Var 0x1ace20fd420 'fplace' 'int'
|   |   |   | | `-ImplicitCastExpr 0x1ace204cf48 <col:26> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1ace204cf10 <col:26> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   |   | `-ContinueStmt 0x1ace204cf80 <line:679:17>
|   |   |   `-BreakStmt 0x1ace204cfa0 <line:680:13>
|   |   |-BinaryOperator 0x1ace204d1b8 <line:682:9, col:56> 'char' '='
|   |   | |-ArraySubscriptExpr 0x1ace204d078 <col:9, col:26> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x1ace204d060 <col:9> 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x1ace204cff0 <col:9> 'char [20]' lvalue Var 0x1ace20fd1e8 'fconvert' 'char [20]'
|   |   | | `-UnaryOperator 0x1ace204d048 <col:18, col:24> 'int' postfix '++'
|   |   | |   `-DeclRefExpr 0x1ace204d028 <col:18> 'int' lvalue Var 0x1ace20fd420 'fplace' 'int'
|   |   | `-ImplicitCastExpr 0x1ace204d1a0 <col:30, col:56> 'char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1ace204d180 <col:30, col:56> 'char' lvalue
|   |   |     |-ImplicitCastExpr 0x1ace204d158 <col:30> 'char *' <ArrayToPointerDecay>
|   |   |     | `-StringLiteral 0x1ace204d098 <col:30> 'char [11]' lvalue "0123456789"
|   |   |     `-BinaryOperator 0x1ace204d138 <col:43, col:54> 'unsigned long' '%'
|   |   |       |-ImplicitCastExpr 0x1ace204d108 <col:43> 'unsigned long' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x1ace204d0c0 <col:43> 'unsigned long' lvalue Var 0x1ace20fd890 'fracpart' 'unsigned long'
|   |   |       `-ImplicitCastExpr 0x1ace204d120 <col:54> 'unsigned long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1ace204d0e0 <col:54> 'int' 10
|   |   `-BinaryOperator 0x1ace204d2b0 <line:683:9, col:34> 'unsigned long' '='
|   |     |-DeclRefExpr 0x1ace204d1d8 <col:9> 'unsigned long' lvalue Var 0x1ace20fd890 'fracpart' 'unsigned long'
|   |     `-ParenExpr 0x1ace204d290 <col:20, col:34> 'unsigned long'
|   |       `-BinaryOperator 0x1ace204d270 <col:21, col:32> 'unsigned long' '/'
|   |         |-ImplicitCastExpr 0x1ace204d240 <col:21> 'unsigned long' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1ace204d1f8 <col:21> 'unsigned long' lvalue Var 0x1ace20fd890 'fracpart' 'unsigned long'
|   |         `-ImplicitCastExpr 0x1ace204d258 <col:32> 'unsigned long' <IntegralCast>
|   |           `-IntegerLiteral 0x1ace204d218 <col:32> 'int' 10
|   |-IfStmt 0x1ace204d418 <line:686:5, line:687:15>
|   | |-BinaryOperator 0x1ace204d3c0 <line:686:9, col:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x1ace204d3a8 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1ace204d390 <col:9> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1ace204d310 <col:9> 'int' lvalue Var 0x1ace20fd420 'fplace' 'int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1ace204d370 <col:19, col:34> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1ace204d350 <col:25, col:34> 'char [20]' lvalue
|   | |     `-DeclRefExpr 0x1ace204d330 <col:26> 'char [20]' lvalue Var 0x1ace20fd1e8 'fconvert' 'char [20]' non_odr_use_unevaluated
|   | `-UnaryOperator 0x1ace204d400 <line:687:9, col:15> 'int' postfix '--'
|   |   `-DeclRefExpr 0x1ace204d3e0 <col:9> 'int' lvalue Var 0x1ace20fd420 'fplace' 'int'
|   |-BinaryOperator 0x1ace204d500 <line:688:5, col:24> 'char' '='
|   | |-ArraySubscriptExpr 0x1ace204d4a0 <col:5, col:20> 'char' lvalue
|   | | |-ImplicitCastExpr 0x1ace204d470 <col:5> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1ace204d430 <col:5> 'char [20]' lvalue Var 0x1ace20fd1e8 'fconvert' 'char [20]'
|   | | `-ImplicitCastExpr 0x1ace204d488 <col:14> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1ace204d450 <col:14> 'int' lvalue Var 0x1ace20fd420 'fplace' 'int'
|   | `-ImplicitCastExpr 0x1ace204d4e8 <col:24> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x1ace204d4c0 <col:24> 'int' 0
|   |-IfStmt 0x1ace204df58 <line:691:5, line:708:5>
|   | |-BinaryOperator 0x1ace204d580 <line:691:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1ace204d568 <line:691:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204d520 <col:9> 'int' lvalue Var 0x1ace20fd9c0 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1ace204d540 <line:75:25> 'int' 1
|   | `-CompoundStmt 0x1ace204df20 <line:691:32, line:708:5>
|   |   |-DeclStmt 0x1ace204d620 <line:692:9, col:19>
|   |   | `-VarDecl 0x1ace204d5b8 <col:9, col:13> col:13 used tmpexp 'int'
|   |   |-IfStmt 0x1ace204d820 <line:693:9, line:696:22> has_else
|   |   | |-BinaryOperator 0x1ace204d6b0 <line:693:13, col:19> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1ace204d680 <col:13> 'long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1ace204d638 <col:13> 'long' lvalue Var 0x1ace20fd720 'exp' 'long'
|   |   | | `-ImplicitCastExpr 0x1ace204d698 <col:19> 'long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1ace204d658 <col:19> 'int' 0
|   |   | |-BinaryOperator 0x1ace204d770 <line:694:13, col:23> 'int' '='
|   |   | | |-DeclRefExpr 0x1ace204d6d0 <col:13> 'int' lvalue Var 0x1ace204d5b8 'tmpexp' 'int'
|   |   | | `-ImplicitCastExpr 0x1ace204d758 <col:22, col:23> 'int' <IntegralCast>
|   |   | |   `-UnaryOperator 0x1ace204d740 <col:22, col:23> 'long' prefix '-'
|   |   | |     `-ImplicitCastExpr 0x1ace204d728 <col:23> 'long' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1ace204d708 <col:23> 'long' lvalue Var 0x1ace20fd720 'exp' 'long'
|   |   | `-BinaryOperator 0x1ace204d800 <line:696:13, col:22> 'int' '='
|   |   |   |-DeclRefExpr 0x1ace204d790 <col:13> 'int' lvalue Var 0x1ace204d5b8 'tmpexp' 'int'
|   |   |   `-ImplicitCastExpr 0x1ace204d7e8 <col:22> 'int' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x1ace204d7d0 <col:22> 'long' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1ace204d7b0 <col:22> 'long' lvalue Var 0x1ace20fd720 'exp' 'long'
|   |   |-DoStmt 0x1ace204dcb8 <line:698:9, line:701:62>
|   |   | |-CompoundStmt 0x1ace204db00 <line:698:12, line:701:9>
|   |   | | |-BinaryOperator 0x1ace204da00 <line:699:13, col:58> 'char' '='
|   |   | | | |-ArraySubscriptExpr 0x1ace204d8e8 <col:13, col:30> 'char' lvalue
|   |   | | | | |-ImplicitCastExpr 0x1ace204d8d0 <col:13> 'char *' <ArrayToPointerDecay>
|   |   | | | | | `-DeclRefExpr 0x1ace204d848 <col:13> 'char [20]' lvalue Var 0x1ace20fd2c8 'econvert' 'char [20]'
|   |   | | | | `-UnaryOperator 0x1ace204d8b8 <col:22, col:28> 'int' postfix '++'
|   |   | | | |   `-DeclRefExpr 0x1ace204d880 <col:22> 'int' lvalue Var 0x1ace20fd4e0 'eplace' 'int'
|   |   | | | `-ImplicitCastExpr 0x1ace204d9e8 <col:34, col:58> 'char' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x1ace204d9c8 <col:34, col:58> 'char' lvalue
|   |   | | |     |-ImplicitCastExpr 0x1ace204d9b0 <col:34> 'char *' <ArrayToPointerDecay>
|   |   | | |     | `-StringLiteral 0x1ace204d908 <col:34> 'char [11]' lvalue "0123456789"
|   |   | | |     `-BinaryOperator 0x1ace204d990 <col:47, col:56> 'int' '%'
|   |   | | |       |-ImplicitCastExpr 0x1ace204d978 <col:47> 'int' <LValueToRValue>
|   |   | | |       | `-DeclRefExpr 0x1ace204d930 <col:47> 'int' lvalue Var 0x1ace204d5b8 'tmpexp' 'int'
|   |   | | |       `-IntegerLiteral 0x1ace204d950 <col:56> 'int' 10
|   |   | | `-BinaryOperator 0x1ace204dae0 <line:700:13, col:34> 'int' '='
|   |   | |   |-DeclRefExpr 0x1ace204da20 <col:13> 'int' lvalue Var 0x1ace204d5b8 'tmpexp' 'int'
|   |   | |   `-ParenExpr 0x1ace204dac0 <col:22, col:34> 'int'
|   |   | |     `-BinaryOperator 0x1ace204daa0 <col:23, col:32> 'int' '/'
|   |   | |       |-ImplicitCastExpr 0x1ace204da88 <col:23> 'int' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x1ace204da40 <col:23> 'int' lvalue Var 0x1ace204d5b8 'tmpexp' 'int'
|   |   | |       `-IntegerLiteral 0x1ace204da60 <col:32> 'int' 10
|   |   | `-BinaryOperator 0x1ace204dc98 <line:701:18, col:61> 'int' '&&'
|   |   |   |-BinaryOperator 0x1ace204db80 <col:18, col:27> 'int' '>'
|   |   |   | |-ImplicitCastExpr 0x1ace204db68 <col:18> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1ace204db20 <col:18> 'int' lvalue Var 0x1ace204d5b8 'tmpexp' 'int'
|   |   |   | `-IntegerLiteral 0x1ace204db40 <col:27> 'int' 0
|   |   |   `-BinaryOperator 0x1ace204dc78 <col:32, col:61> 'int' '<'
|   |   |     |-ImplicitCastExpr 0x1ace204dc60 <col:32> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1ace204dba0 <col:32> 'int' lvalue Var 0x1ace20fd4e0 'eplace' 'int'
|   |   |     `-CStyleCastExpr 0x1ace204dc38 <col:41, col:61> 'int' <IntegralCast>
|   |   |       `-UnaryExprOrTypeTraitExpr 0x1ace204dc00 <col:46, col:61> 'unsigned long long' sizeof
|   |   |         `-ParenExpr 0x1ace204dbe0 <col:52, col:61> 'char [20]' lvalue
|   |   |           `-DeclRefExpr 0x1ace204dbc0 <col:53> 'char [20]' lvalue Var 0x1ace20fd2c8 'econvert' 'char [20]' non_odr_use_unevaluated
|   |   |-IfStmt 0x1ace204dd90 <line:703:9, line:704:20>
|   |   | |-BinaryOperator 0x1ace204dd38 <line:703:13, col:22> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x1ace204dd20 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1ace204dcd8 <col:13> 'int' lvalue Var 0x1ace204d5b8 'tmpexp' 'int'
|   |   | | `-IntegerLiteral 0x1ace204dcf8 <col:22> 'int' 0
|   |   | `-ReturnStmt 0x1ace204dd80 <line:704:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace204dd58 <col:20> 'int' 0
|   |   `-IfStmt 0x1ace204df08 <line:706:9, line:707:34>
|   |     |-BinaryOperator 0x1ace204de08 <line:706:13, col:23> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1ace204ddf0 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1ace204dda8 <col:13> 'int' lvalue Var 0x1ace20fd4e0 'eplace' 'int'
|   |     | `-IntegerLiteral 0x1ace204ddc8 <col:23> 'int' 1
|   |     `-BinaryOperator 0x1ace204dee8 <line:707:13, col:34> 'char' '='
|   |       |-ArraySubscriptExpr 0x1ace204de98 <col:13, col:30> 'char' lvalue
|   |       | |-ImplicitCastExpr 0x1ace204de80 <col:13> 'char *' <ArrayToPointerDecay>
|   |       | | `-DeclRefExpr 0x1ace204de28 <col:13> 'char [20]' lvalue Var 0x1ace20fd2c8 'econvert' 'char [20]'
|   |       | `-UnaryOperator 0x1ace204de68 <col:22, col:28> 'int' postfix '++'
|   |       |   `-DeclRefExpr 0x1ace204de48 <col:22> 'int' lvalue Var 0x1ace20fd4e0 'eplace' 'int'
|   |       `-ImplicitCastExpr 0x1ace204ded0 <col:34> 'char' <IntegralCast>
|   |         `-CharacterLiteral 0x1ace204deb8 <col:34> 'int' 48
|   |-BinaryOperator 0x1ace204e2e8 <line:714:5, col:75> 'int' '='
|   | |-DeclRefExpr 0x1ace204df70 <col:5> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   | `-BinaryOperator 0x1ace204e2c8 <col:14, col:75> 'int' '-'
|   |   |-BinaryOperator 0x1ace204e1b0 <col:14, col:51> 'int' '-'
|   |   | |-BinaryOperator 0x1ace204e070 <col:14, col:29> 'int' '-'
|   |   | | |-BinaryOperator 0x1ace204e018 <col:14, col:20> 'int' '-'
|   |   | | | |-ImplicitCastExpr 0x1ace204dfe8 <col:14> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1ace204dfa8 <col:14> 'int' lvalue ParmVar 0x1ace20fca68 'min' 'int'
|   |   | | | `-ImplicitCastExpr 0x1ace204e000 <col:20> 'int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1ace204dfc8 <col:20> 'int' lvalue Var 0x1ace20fd360 'iplace' 'int'
|   |   | | `-ImplicitCastExpr 0x1ace204e058 <col:29> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1ace204e038 <col:29> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   | `-ParenExpr 0x1ace204e190 <col:35, col:51> 'int'
|   |   |   `-ConditionalOperator 0x1ace204e160 <col:36, col:50> 'int'
|   |   |     |-BinaryOperator 0x1ace204e0f0 <col:36, col:42> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x1ace204e0d8 <col:36> 'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x1ace204e090 <col:36> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   |     | `-IntegerLiteral 0x1ace204e0b0 <col:42> 'int' 0
|   |   |     |-IntegerLiteral 0x1ace204e110 <col:46> 'int' 1
|   |   |     `-IntegerLiteral 0x1ace204e138 <col:50> 'int' 0
|   |   `-ParenExpr 0x1ace204e2a8 <col:55, col:75> 'int'
|   |     `-ConditionalOperator 0x1ace204e278 <col:56, col:74> 'int'
|   |       |-ImplicitCastExpr 0x1ace204e260 <col:56, col:66> 'int' <LValueToRValue>
|   |       | `-ParenExpr 0x1ace204e1f0 <col:56, col:66> 'int' lvalue
|   |       |   `-DeclRefExpr 0x1ace204e1d0 <col:57> 'int' lvalue Var 0x1ace20fce98 'signvalue' 'int'
|   |       |-IntegerLiteral 0x1ace204e210 <col:70> 'int' 1
|   |       `-IntegerLiteral 0x1ace204e238 <col:74> 'int' 0
|   |-IfStmt 0x1ace204e458 <line:716:5, line:717:23>
|   | |-BinaryOperator 0x1ace204e368 <line:716:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1ace204e350 <line:716:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204e308 <col:9> 'int' lvalue Var 0x1ace20fd9c0 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1ace204e328 <line:75:25> 'int' 1
|   | `-CompoundAssignOperator 0x1ace204e428 <line:717:9, col:23> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x1ace204e388 <col:9> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   |   `-BinaryOperator 0x1ace204e408 <col:19, col:23> 'int' '+'
|   |     |-IntegerLiteral 0x1ace204e3a8 <col:19> 'int' 2
|   |     `-ImplicitCastExpr 0x1ace204e3f0 <col:23> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1ace204e3d0 <col:23> 'int' lvalue Var 0x1ace20fd4e0 'eplace' 'int'
|   |-BinaryOperator 0x1ace204e538 <line:718:5, col:21> 'int' '='
|   | |-DeclRefExpr 0x1ace204e470 <col:5> 'int' lvalue Var 0x1ace20fd660 'zpadlen' 'int'
|   | `-BinaryOperator 0x1ace204e518 <col:15, col:21> 'int' '-'
|   |   |-ImplicitCastExpr 0x1ace204e4e8 <col:15> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace204e4a8 <col:15> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   |   `-ImplicitCastExpr 0x1ace204e500 <col:21> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1ace204e4c8 <col:21> 'int' lvalue Var 0x1ace20fd420 'fplace' 'int'
|   |-IfStmt 0x1ace204e640 <line:719:5, line:720:19>
|   | |-BinaryOperator 0x1ace204e5b8 <line:719:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace204e5a0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204e558 <col:9> 'int' lvalue Var 0x1ace20fd660 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1ace204e578 <col:19> 'int' 0
|   | `-BinaryOperator 0x1ace204e620 <line:720:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1ace204e5d8 <col:9> 'int' lvalue Var 0x1ace20fd660 'zpadlen' 'int'
|   |   `-IntegerLiteral 0x1ace204e5f8 <col:19> 'int' 0
|   |-IfStmt 0x1ace204e740 <line:721:5, line:722:18>
|   | |-BinaryOperator 0x1ace204e6b8 <line:721:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace204e6a0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204e658 <col:9> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   | | `-IntegerLiteral 0x1ace204e678 <col:18> 'int' 0
|   | `-BinaryOperator 0x1ace204e720 <line:722:9, col:18> 'int' '='
|   |   |-DeclRefExpr 0x1ace204e6d8 <col:9> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   |   `-IntegerLiteral 0x1ace204e6f8 <col:18> 'int' 0
|   |-IfStmt 0x1ace204e8d0 <line:723:5, line:724:19>
|   | |-BinaryOperator 0x1ace204e820 <line:723:9, line:53:32> 'int' '&'
|   | | |-ImplicitCastExpr 0x1ace204e808 <line:723:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204e758 <col:9> 'int' lvalue ParmVar 0x1ace20fcb68 'flags' 'int'
|   | | `-ParenExpr 0x1ace204e7e8 <line:53:25, col:32> 'int'
|   | |   `-BinaryOperator 0x1ace204e7c8 <col:26, col:31> 'int' '<<'
|   | |     |-IntegerLiteral 0x1ace204e778 <col:26> 'int' 1
|   | |     `-IntegerLiteral 0x1ace204e7a0 <col:31> 'int' 0
|   | `-BinaryOperator 0x1ace204e8b0 <line:724:9, col:19> 'int' '='
|   |   |-DeclRefExpr 0x1ace204e840 <col:9> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   |   `-UnaryOperator 0x1ace204e898 <col:18, col:19> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1ace204e880 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1ace204e860 <col:19> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   |-IfStmt 0x1ace204f0b8 <line:726:5, line:738:5>
|   | |-BinaryOperator 0x1ace204ea90 <line:726:9, col:43> 'int' '&&'
|   | | |-ParenExpr 0x1ace204e9d0 <col:9, col:27> 'int'
|   | | | `-BinaryOperator 0x1ace204e9b0 <col:10, line:61:32> 'int' '&'
|   | | |   |-ImplicitCastExpr 0x1ace204e998 <line:726:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1ace204e8e8 <col:10> 'int' lvalue ParmVar 0x1ace20fcb68 'flags' 'int'
|   | | |   `-ParenExpr 0x1ace204e978 <line:61:25, col:32> 'int'
|   | | |     `-BinaryOperator 0x1ace204e958 <col:26, col:31> 'int' '<<'
|   | | |       |-IntegerLiteral 0x1ace204e908 <col:26> 'int' 1
|   | | |       `-IntegerLiteral 0x1ace204e930 <col:31> 'int' 4
|   | | `-ParenExpr 0x1ace204ea70 <line:726:32, col:43> 'int'
|   | |   `-BinaryOperator 0x1ace204ea50 <col:33, col:42> 'int' '>'
|   | |     |-ImplicitCastExpr 0x1ace204ea38 <col:33> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1ace204e9f0 <col:33> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   | |     `-IntegerLiteral 0x1ace204ea10 <col:42> 'int' 0
|   | `-CompoundStmt 0x1ace204f098 <col:46, line:738:5>
|   |   |-IfStmt 0x1ace204edb0 <line:727:9, line:732:9>
|   |   | |-ImplicitCastExpr 0x1ace204ead0 <line:727:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1ace204eab0 <col:13> 'int' lvalue Var 0x1ace20fce98 'signvalue' 'int'
|   |   | `-CompoundStmt 0x1ace204ed88 <col:24, line:732:9>
|   |   |   |-IfStmt 0x1ace204ecd0 <line:728:13, line:729:24>
|   |   |   | |-UnaryOperator 0x1ace204ec80 <line:728:17, col:73> 'int' prefix '!' cannot overflow
|   |   |   | | `-CallExpr 0x1ace204ebc0 <col:18, col:73> 'int'
|   |   |   | |   |-ImplicitCastExpr 0x1ace204eba8 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x1ace204eae8 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |   | |   |-ImplicitCastExpr 0x1ace204ec08 <col:30> 'char **' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1ace204eb08 <col:30> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |   |   | |   |-ImplicitCastExpr 0x1ace204ec20 <col:39> 'char **' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1ace204eb28 <col:39> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |   |   | |   |-ImplicitCastExpr 0x1ace204ec38 <col:47> 'size_t *' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1ace204eb48 <col:47> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |   |   | |   |-ImplicitCastExpr 0x1ace204ec50 <col:56> 'size_t *' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1ace204eb68 <col:56> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |   |   | |   `-ImplicitCastExpr 0x1ace204ec68 <col:64> 'int' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x1ace204eb88 <col:64> 'int' lvalue Var 0x1ace20fce98 'signvalue' 'int'
|   |   |   | `-ReturnStmt 0x1ace204ecc0 <line:729:17, col:24>
|   |   |   |   `-IntegerLiteral 0x1ace204ec98 <col:24> 'int' 0
|   |   |   |-UnaryOperator 0x1ace204ed08 <line:730:13, col:15> 'int' prefix '--'
|   |   |   | `-DeclRefExpr 0x1ace204ece8 <col:15> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   |   |   `-BinaryOperator 0x1ace204ed68 <line:731:13, col:25> 'int' '='
|   |   |     |-DeclRefExpr 0x1ace204ed20 <col:13> 'int' lvalue Var 0x1ace20fce98 'signvalue' 'int'
|   |   |     `-IntegerLiteral 0x1ace204ed40 <col:25> 'int' 0
|   |   `-WhileStmt 0x1ace204f080 <line:733:9, line:737:9>
|   |     |-BinaryOperator 0x1ace204ee28 <line:733:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1ace204ee10 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1ace204edc8 <col:16> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   |     | `-IntegerLiteral 0x1ace204ede8 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1ace204f060 <col:28, line:737:9>
|   |       |-IfStmt 0x1ace204f010 <line:734:13, line:735:24>
|   |       | |-UnaryOperator 0x1ace204efc0 <line:734:17, col:67> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x1ace204ef18 <col:18, col:67> 'int'
|   |       | |   |-ImplicitCastExpr 0x1ace204ef00 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1ace204ee48 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |       | |   |-ImplicitCastExpr 0x1ace204ef60 <col:30> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1ace204ee68 <col:30> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1ace204ef78 <col:39> 'char **' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1ace204ee88 <col:39> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |       | |   |-ImplicitCastExpr 0x1ace204ef90 <col:47> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1ace204eea8 <col:47> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |       | |   |-ImplicitCastExpr 0x1ace204efa8 <col:56> 'size_t *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x1ace204eec8 <col:56> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |       | |   `-CharacterLiteral 0x1ace204eee8 <col:64> 'int' 48
|   |       | `-ReturnStmt 0x1ace204f000 <line:735:17, col:24>
|   |       |   `-IntegerLiteral 0x1ace204efd8 <col:24> 'int' 0
|   |       `-UnaryOperator 0x1ace204f048 <line:736:13, col:15> 'int' prefix '--'
|   |         `-DeclRefExpr 0x1ace204f028 <col:15> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   |-WhileStmt 0x1ace204f3a8 <line:739:5, line:743:5>
|   | |-BinaryOperator 0x1ace204f130 <line:739:12, col:21> 'int' '>'
|   | | |-ImplicitCastExpr 0x1ace204f118 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204f0d0 <col:12> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   | | `-IntegerLiteral 0x1ace204f0f0 <col:21> 'int' 0
|   | `-CompoundStmt 0x1ace204f388 <col:24, line:743:5>
|   |   |-IfStmt 0x1ace204f338 <line:740:9, line:741:20>
|   |   | |-UnaryOperator 0x1ace204f2e8 <line:740:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace204f240 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace204f228 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace204f150 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace204f288 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace204f190 <col:26> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace204f2a0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace204f1b0 <col:35> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace204f2b8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace204f1d0 <col:43> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace204f2d0 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace204f1f0 <col:52> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1ace204f210 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1ace204f328 <line:741:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace204f300 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1ace204f370 <line:742:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1ace204f350 <col:11> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   |-IfStmt 0x1ace204f600 <line:744:5, line:745:16>
|   | |-BinaryOperator 0x1ace204f5a8 <line:744:9, col:78> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1ace204f590 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204f3c0 <col:9> 'int' lvalue Var 0x1ace20fce98 'signvalue' 'int'
|   | | `-UnaryOperator 0x1ace204f578 <col:22, col:78> 'int' prefix '!' cannot overflow
|   | |   `-CallExpr 0x1ace204f4b8 <col:23, col:78> 'int'
|   | |     |-ImplicitCastExpr 0x1ace204f4a0 <col:23> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x1ace204f3e0 <col:23> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   | |     |-ImplicitCastExpr 0x1ace204f500 <col:35> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1ace204f400 <col:35> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   | |     |-ImplicitCastExpr 0x1ace204f518 <col:44> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1ace204f420 <col:44> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   | |     |-ImplicitCastExpr 0x1ace204f530 <col:52> 'size_t *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1ace204f440 <col:52> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   | |     |-ImplicitCastExpr 0x1ace204f548 <col:61> 'size_t *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1ace204f460 <col:61> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   | |     `-ImplicitCastExpr 0x1ace204f560 <col:69> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1ace204f480 <col:69> 'int' lvalue Var 0x1ace20fce98 'signvalue' 'int'
|   | `-ReturnStmt 0x1ace204f5f0 <line:745:9, col:16>
|   |   `-IntegerLiteral 0x1ace204f5c8 <col:16> 'int' 0
|   |-WhileStmt 0x1ace204f938 <line:747:5, line:750:5>
|   | |-BinaryOperator 0x1ace204f678 <line:747:12, col:21> 'int' '>'
|   | | |-ImplicitCastExpr 0x1ace204f660 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace204f618 <col:12> 'int' lvalue Var 0x1ace20fd360 'iplace' 'int'
|   | | `-IntegerLiteral 0x1ace204f638 <col:21> 'int' 0
|   | `-CompoundStmt 0x1ace204f920 <col:24, line:750:5>
|   |   `-IfStmt 0x1ace204f908 <line:748:9, line:749:20>
|   |     |-UnaryOperator 0x1ace204f8b8 <line:748:13, col:78> 'int' prefix '!' cannot overflow
|   |     | `-CallExpr 0x1ace204f7e0 <col:14, col:78> 'int'
|   |     |   |-ImplicitCastExpr 0x1ace204f7c8 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x1ace204f698 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |     |   |-ImplicitCastExpr 0x1ace204f828 <col:26> 'char **' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1ace204f6b8 <col:26> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |     |   |-ImplicitCastExpr 0x1ace204f840 <col:35> 'char **' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1ace204f6d8 <col:35> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |     |   |-ImplicitCastExpr 0x1ace204f858 <col:43> 'size_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1ace204f6f8 <col:43> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |     |   |-ImplicitCastExpr 0x1ace204f870 <col:52> 'size_t *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1ace204f718 <col:52> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |     |   `-ImplicitCastExpr 0x1ace204f8a0 <col:60, col:77> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x1ace204f888 <col:60, col:77> 'char' <LValueToRValue>
|   |     |       `-ArraySubscriptExpr 0x1ace204f7a8 <col:60, col:77> 'char' lvalue
|   |     |         |-ImplicitCastExpr 0x1ace204f790 <col:60> 'char *' <ArrayToPointerDecay>
|   |     |         | `-DeclRefExpr 0x1ace204f738 <col:60> 'char [20]' lvalue Var 0x1ace20fd108 'iconvert' 'char [20]'
|   |     |         `-UnaryOperator 0x1ace204f778 <col:69, col:71> 'int' prefix '--'
|   |     |           `-DeclRefExpr 0x1ace204f758 <col:71> 'int' lvalue Var 0x1ace20fd360 'iplace' 'int'
|   |     `-ReturnStmt 0x1ace204f8f8 <line:749:13, col:20>
|   |       `-IntegerLiteral 0x1ace204f8d0 <col:20> 'int' 0
|   |-IfStmt 0x1ace2050030 <line:756:5, line:765:5>
|   | |-BinaryOperator 0x1ace204fad8 <line:756:9, col:37> 'int' '||'
|   | | |-BinaryOperator 0x1ace204f9b0 <col:9, col:15> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1ace204f998 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1ace204f950 <col:9> 'int' lvalue ParmVar 0x1ace20fcae8 'max' 'int'
|   | | | `-IntegerLiteral 0x1ace204f970 <col:15> 'int' 0
|   | | `-ParenExpr 0x1ace204fab8 <col:20, col:37> 'int'
|   | |   `-BinaryOperator 0x1ace204fa98 <col:21, line:59:32> 'int' '&'
|   | |     |-ImplicitCastExpr 0x1ace204fa80 <line:756:21> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1ace204f9d0 <col:21> 'int' lvalue ParmVar 0x1ace20fcb68 'flags' 'int'
|   | |     `-ParenExpr 0x1ace204fa60 <line:59:25, col:32> 'int'
|   | |       `-BinaryOperator 0x1ace204fa40 <col:26, col:31> 'int' '<<'
|   | |         |-IntegerLiteral 0x1ace204f9f0 <col:26> 'int' 1
|   | |         `-IntegerLiteral 0x1ace204fa18 <col:31> 'int' 3
|   | `-CompoundStmt 0x1ace2050010 <line:756:40, line:765:5>
|   |   |-IfStmt 0x1ace204fcc0 <line:757:9, line:758:20>
|   |   | |-UnaryOperator 0x1ace204fc70 <line:757:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace204fbc8 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace204fbb0 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace204faf8 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace204fc10 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace204fb18 <col:26> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace204fc28 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace204fb38 <col:35> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace204fc40 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace204fb58 <col:43> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace204fc58 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace204fb78 <col:52> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1ace204fb98 <col:60> 'int' 46
|   |   | `-ReturnStmt 0x1ace204fcb0 <line:758:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace204fc88 <col:20> 'int' 0
|   |   `-WhileStmt 0x1ace204fff8 <line:760:9, line:764:9>
|   |     |-BinaryOperator 0x1ace204fd38 <line:760:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1ace204fd20 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1ace204fcd8 <col:16> 'int' lvalue Var 0x1ace20fd420 'fplace' 'int'
|   |     | `-IntegerLiteral 0x1ace204fcf8 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1ace204ffe0 <col:28, line:764:9>
|   |       `-IfStmt 0x1ace204ffc8 <line:761:13, line:763:24>
|   |         |-UnaryOperator 0x1ace204ff78 <line:761:16, line:762:47> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x1ace204fea0 <line:761:17, line:762:47> 'int'
|   |         |   |-ImplicitCastExpr 0x1ace204fe88 <line:761:17> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1ace204fd58 <col:17> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |         |   |-ImplicitCastExpr 0x1ace204fee8 <col:29> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1ace204fd78 <col:29> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1ace204ff00 <col:38> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1ace204fd98 <col:38> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1ace204ff18 <col:46> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1ace204fdb8 <col:46> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |         |   |-ImplicitCastExpr 0x1ace204ff30 <col:55> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1ace204fdd8 <col:55> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |         |   `-ImplicitCastExpr 0x1ace204ff60 <line:762:29, col:46> 'int' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x1ace204ff48 <col:29, col:46> 'char' <LValueToRValue>
|   |         |       `-ArraySubscriptExpr 0x1ace204fe68 <col:29, col:46> 'char' lvalue
|   |         |         |-ImplicitCastExpr 0x1ace204fe50 <col:29> 'char *' <ArrayToPointerDecay>
|   |         |         | `-DeclRefExpr 0x1ace204fdf8 <col:29> 'char [20]' lvalue Var 0x1ace20fd1e8 'fconvert' 'char [20]'
|   |         |         `-UnaryOperator 0x1ace204fe38 <col:38, col:40> 'int' prefix '--'
|   |         |           `-DeclRefExpr 0x1ace204fe18 <col:40> 'int' lvalue Var 0x1ace20fd420 'fplace' 'int'
|   |         `-ReturnStmt 0x1ace204ffb8 <line:763:17, col:24>
|   |           `-IntegerLiteral 0x1ace204ff90 <col:24> 'int' 0
|   |-WhileStmt 0x1ace2050300 <line:766:5, line:770:5>
|   | |-BinaryOperator 0x1ace20500a8 <line:766:12, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1ace2050090 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace2050048 <col:12> 'int' lvalue Var 0x1ace20fd660 'zpadlen' 'int'
|   | | `-IntegerLiteral 0x1ace2050068 <col:22> 'int' 0
|   | `-CompoundStmt 0x1ace20502e0 <col:25, line:770:5>
|   |   |-IfStmt 0x1ace2050290 <line:767:9, line:768:20>
|   |   | |-UnaryOperator 0x1ace2050240 <line:767:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace2050198 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace2050180 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace20500c8 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace20501e0 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace20500e8 <col:26> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace20501f8 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace2050108 <col:35> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace2050210 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace2050128 <col:43> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace2050228 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace2050148 <col:52> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1ace2050168 <col:60> 'int' 48
|   |   | `-ReturnStmt 0x1ace2050280 <line:768:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace2050258 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1ace20502c8 <line:769:9, col:11> 'int' prefix '--'
|   |     `-DeclRefExpr 0x1ace20502a8 <col:11> 'int' lvalue Var 0x1ace20fd660 'zpadlen' 'int'
|   |-IfStmt 0x1ace20510d0 <line:771:5, line:792:5>
|   | |-BinaryOperator 0x1ace2050378 <line:771:9, line:75:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x1ace2050360 <line:771:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace2050318 <col:9> 'int' lvalue Var 0x1ace20fd9c0 'realstyle' 'int'
|   | | `-IntegerLiteral 0x1ace2050338 <line:75:25> 'int' 1
|   | `-CompoundStmt 0x1ace2051098 <line:771:32, line:792:5>
|   |   |-DeclStmt 0x1ace2050410 <line:772:9, col:17>
|   |   | `-VarDecl 0x1ace20503a8 <col:9, col:14> col:14 used ech 'char'
|   |   |-IfStmt 0x1ace2050670 <line:774:9, line:777:19> has_else
|   |   | |-BinaryOperator 0x1ace2050558 <line:774:13, col:34> 'int' '=='
|   |   | | |-ParenExpr 0x1ace2050510 <col:13, col:29> 'int'
|   |   | | | `-BinaryOperator 0x1ace20504f0 <col:14, line:63:32> 'int' '&'
|   |   | | |   |-ImplicitCastExpr 0x1ace20504d8 <line:774:14> 'int' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x1ace2050428 <col:14> 'int' lvalue ParmVar 0x1ace20fcb68 'flags' 'int'
|   |   | | |   `-ParenExpr 0x1ace20504b8 <line:63:25, col:32> 'int'
|   |   | | |     `-BinaryOperator 0x1ace2050498 <col:26, col:31> 'int' '<<'
|   |   | | |       |-IntegerLiteral 0x1ace2050448 <col:26> 'int' 1
|   |   | | |       `-IntegerLiteral 0x1ace2050470 <col:31> 'int' 5
|   |   | | `-IntegerLiteral 0x1ace2050530 <line:774:34> 'int' 0
|   |   | |-BinaryOperator 0x1ace20505e0 <line:775:13, col:19> 'char' '='
|   |   | | |-DeclRefExpr 0x1ace2050578 <col:13> 'char' lvalue Var 0x1ace20503a8 'ech' 'char'
|   |   | | `-ImplicitCastExpr 0x1ace20505c8 <col:19> 'char' <IntegralCast>
|   |   | |   `-CharacterLiteral 0x1ace20505b0 <col:19> 'int' 101
|   |   | `-BinaryOperator 0x1ace2050650 <line:777:13, col:19> 'char' '='
|   |   |   |-DeclRefExpr 0x1ace2050600 <col:13> 'char' lvalue Var 0x1ace20503a8 'ech' 'char'
|   |   |   `-ImplicitCastExpr 0x1ace2050638 <col:19> 'char' <IntegralCast>
|   |   |     `-CharacterLiteral 0x1ace2050620 <col:19> 'int' 69
|   |   |-IfStmt 0x1ace2050898 <line:778:9, line:779:24>
|   |   | |-UnaryOperator 0x1ace2050848 <line:778:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace2050770 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace2050758 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace2050698 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace20507b8 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace20506b8 <col:26> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace20507d0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace20506d8 <col:35> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace20507e8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace20506f8 <col:43> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace2050800 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace2050718 <col:52> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |   | |   `-ImplicitCastExpr 0x1ace2050830 <col:60> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x1ace2050818 <col:60> 'char' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1ace2050738 <col:60> 'char' lvalue Var 0x1ace20503a8 'ech' 'char'
|   |   | `-ReturnStmt 0x1ace2050888 <line:779:17, col:24>
|   |   |   `-IntegerLiteral 0x1ace2050860 <col:24> 'int' 0
|   |   |-IfStmt 0x1ace2050d38 <line:780:9, line:786:9> has_else
|   |   | |-BinaryOperator 0x1ace2050928 <line:780:13, col:19> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1ace20508f8 <col:13> 'long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1ace20508b0 <col:13> 'long' lvalue Var 0x1ace20fd720 'exp' 'long'
|   |   | | `-ImplicitCastExpr 0x1ace2050910 <col:19> 'long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1ace20508d0 <col:19> 'int' 0
|   |   | |-CompoundStmt 0x1ace2050b28 <col:22, line:783:9>
|   |   | | `-IfStmt 0x1ace2050b10 <line:781:13, line:782:28>
|   |   | |   |-UnaryOperator 0x1ace2050ac0 <line:781:17, col:67> 'int' prefix '!' cannot overflow
|   |   | |   | `-CallExpr 0x1ace2050a18 <col:18, col:67> 'int'
|   |   | |   |   |-ImplicitCastExpr 0x1ace2050a00 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   |   | `-DeclRefExpr 0x1ace2050948 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |   |-ImplicitCastExpr 0x1ace2050a60 <col:30> 'char **' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1ace2050968 <col:30> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |   | |   |   |-ImplicitCastExpr 0x1ace2050a78 <col:39> 'char **' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1ace2050988 <col:39> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |   | |   |   |-ImplicitCastExpr 0x1ace2050a90 <col:47> 'size_t *' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1ace20509a8 <col:47> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |   | |   |   |-ImplicitCastExpr 0x1ace2050aa8 <col:56> 'size_t *' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1ace20509c8 <col:56> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |   | |   |   `-CharacterLiteral 0x1ace20509e8 <col:64> 'int' 45
|   |   | |   `-ReturnStmt 0x1ace2050b00 <line:782:21, col:28>
|   |   | |     `-IntegerLiteral 0x1ace2050ad8 <col:28> 'int' 0
|   |   | `-CompoundStmt 0x1ace2050d20 <line:783:16, line:786:9>
|   |   |   `-IfStmt 0x1ace2050d08 <line:784:13, line:785:28>
|   |   |     |-UnaryOperator 0x1ace2050cb8 <line:784:17, col:67> 'int' prefix '!' cannot overflow
|   |   |     | `-CallExpr 0x1ace2050c10 <col:18, col:67> 'int'
|   |   |     |   |-ImplicitCastExpr 0x1ace2050bf8 <col:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1ace2050b40 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   |     |   |-ImplicitCastExpr 0x1ace2050c58 <col:30> 'char **' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1ace2050b60 <col:30> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |   |     |   |-ImplicitCastExpr 0x1ace2050c70 <col:39> 'char **' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1ace2050b80 <col:39> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |   |     |   |-ImplicitCastExpr 0x1ace2050c88 <col:47> 'size_t *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1ace2050ba0 <col:47> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |   |     |   |-ImplicitCastExpr 0x1ace2050ca0 <col:56> 'size_t *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1ace2050bc0 <col:56> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |   |     |   `-CharacterLiteral 0x1ace2050be0 <col:64> 'int' 43
|   |   |     `-ReturnStmt 0x1ace2050cf8 <line:785:21, col:28>
|   |   |       `-IntegerLiteral 0x1ace2050cd0 <col:28> 'int' 0
|   |   `-WhileStmt 0x1ace2051080 <line:787:9, line:791:9>
|   |     |-BinaryOperator 0x1ace2050dc0 <line:787:16, col:25> 'int' '>'
|   |     | |-ImplicitCastExpr 0x1ace2050da8 <col:16> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1ace2050d60 <col:16> 'int' lvalue Var 0x1ace20fd4e0 'eplace' 'int'
|   |     | `-IntegerLiteral 0x1ace2050d80 <col:25> 'int' 0
|   |     `-CompoundStmt 0x1ace2051068 <col:28, line:791:9>
|   |       `-IfStmt 0x1ace2051050 <line:788:13, line:790:24>
|   |         |-UnaryOperator 0x1ace2051000 <line:788:17, line:789:48> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x1ace2050f28 <line:788:18, line:789:48> 'int'
|   |         |   |-ImplicitCastExpr 0x1ace2050f10 <line:788:18> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1ace2050de0 <col:18> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |         |   |-ImplicitCastExpr 0x1ace2050f70 <col:30> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1ace2050e00 <col:30> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1ace2050f88 <col:39> 'char **' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1ace2050e20 <col:39> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |         |   |-ImplicitCastExpr 0x1ace2050fa0 <col:47> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1ace2050e40 <col:47> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |         |   |-ImplicitCastExpr 0x1ace2050fb8 <col:56> 'size_t *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x1ace2050e60 <col:56> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |         |   `-ImplicitCastExpr 0x1ace2050fe8 <line:789:30, col:47> 'int' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x1ace2050fd0 <col:30, col:47> 'char' <LValueToRValue>
|   |         |       `-ArraySubscriptExpr 0x1ace2050ef0 <col:30, col:47> 'char' lvalue
|   |         |         |-ImplicitCastExpr 0x1ace2050ed8 <col:30> 'char *' <ArrayToPointerDecay>
|   |         |         | `-DeclRefExpr 0x1ace2050e80 <col:30> 'char [20]' lvalue Var 0x1ace20fd2c8 'econvert' 'char [20]'
|   |         |         `-UnaryOperator 0x1ace2050ec0 <col:39, col:41> 'int' prefix '--'
|   |         |           `-DeclRefExpr 0x1ace2050ea0 <col:41> 'int' lvalue Var 0x1ace20fd4e0 'eplace' 'int'
|   |         `-ReturnStmt 0x1ace2051040 <line:790:17, col:24>
|   |           `-IntegerLiteral 0x1ace2051018 <col:24> 'int' 0
|   |-WhileStmt 0x1ace20513b8 <line:794:5, line:798:5>
|   | |-BinaryOperator 0x1ace2051148 <line:794:12, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace2051130 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace20510e8 <col:12> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   | | `-IntegerLiteral 0x1ace2051108 <col:21> 'int' 0
|   | `-CompoundStmt 0x1ace2051398 <col:24, line:798:5>
|   |   |-IfStmt 0x1ace2051348 <line:795:9, line:796:20>
|   |   | |-UnaryOperator 0x1ace20512f8 <line:795:13, col:63> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x1ace2051250 <col:14, col:63> 'int'
|   |   | |   |-ImplicitCastExpr 0x1ace2051238 <col:14> 'int (*)(char **, char **, size_t *, size_t *, int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1ace2051168 <col:14> 'int (char **, char **, size_t *, size_t *, int)' Function 0x1ace20e2360 'doapr_outch' 'int (char **, char **, size_t *, size_t *, int)'
|   |   | |   |-ImplicitCastExpr 0x1ace2051298 <col:26> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace20511a0 <col:26> 'char **' lvalue ParmVar 0x1ace21aa048 'sbuffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace20512b0 <col:35> 'char **' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace20511c0 <col:35> 'char **' lvalue ParmVar 0x1ace21aa0c8 'buffer' 'char **'
|   |   | |   |-ImplicitCastExpr 0x1ace20512c8 <col:43> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace20511e0 <col:43> 'size_t *' lvalue ParmVar 0x1ace20fc8f0 'currlen' 'size_t *'
|   |   | |   |-ImplicitCastExpr 0x1ace20512e0 <col:52> 'size_t *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x1ace2051200 <col:52> 'size_t *' lvalue ParmVar 0x1ace20fc968 'maxlen' 'size_t *'
|   |   | |   `-CharacterLiteral 0x1ace2051220 <col:60> 'int' 32
|   |   | `-ReturnStmt 0x1ace2051338 <line:796:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace2051310 <col:20> 'int' 0
|   |   `-UnaryOperator 0x1ace2051380 <line:797:9, col:11> 'int' prefix '++'
|   |     `-DeclRefExpr 0x1ace2051360 <col:11> 'int' lvalue Var 0x1ace20fd5a0 'padlen' 'int'
|   `-ReturnStmt 0x1ace20513f8 <line:799:5, col:12>
|     `-IntegerLiteral 0x1ace20513d0 <col:12> 'int' 1
|-FunctionDecl 0x1ace20518d8 prev 0x1ace20e2360 <line:804:1, line:845:1> line:805:1 used doapr_outch 'int (char **, char **, size_t *, size_t *, int)' static
| |-ParmVarDecl 0x1ace20515b8 <col:13, col:20> col:20 used sbuffer 'char **'
| |-ParmVarDecl 0x1ace2051638 <line:806:13, col:20> col:20 used buffer 'char **'
| |-ParmVarDecl 0x1ace20516b0 <col:28, col:36> col:36 used currlen 'size_t *'
| |-ParmVarDecl 0x1ace2051728 <col:45, col:53> col:53 used maxlen 'size_t *'
| |-ParmVarDecl 0x1ace20517a8 <col:61, col:65> col:65 used c 'int'
| `-CompoundStmt 0x1ace2053818 <line:807:1, line:845:1>
|   |-CallExpr 0x1ace2051d30 <line:809:5, col:54> 'int'
|   | |-ImplicitCastExpr 0x1ace2051d18 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1ace2051a90 <col:5> 'int ()' Function 0x1ace20519c8 'OPENSSL_assert' 'int ()'
|   | `-BinaryOperator 0x1ace2051cd0 <col:20, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '||'
|   |   |-BinaryOperator 0x1ace2051bb8 <.//openssl//file_jk/before\crypto\bio\b_print.c:809:20, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |   | |-ImplicitCastExpr 0x1ace2051b88 <.//openssl//file_jk/before\crypto\bio\b_print.c:809:20, col:21> 'char *' <LValueToRValue>
|   |   | | `-UnaryOperator 0x1ace2051ae8 <col:20, col:21> 'char *' lvalue prefix '*' cannot overflow
|   |   | |   `-ImplicitCastExpr 0x1ace2051ad0 <col:21> 'char **' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x1ace2051ab0 <col:21> 'char **' lvalue ParmVar 0x1ace20515b8 'sbuffer' 'char **'
|   |   | `-ImplicitCastExpr 0x1ace2051ba0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |   |   `-ParenExpr 0x1ace2051b68 <col:17, col:27> 'void *'
|   |   |     `-CStyleCastExpr 0x1ace2051b40 <col:18, col:26> 'void *' <NullToPointer>
|   |   |       `-IntegerLiteral 0x1ace2051b00 <col:26> 'int' 0
|   |   `-BinaryOperator 0x1ace2051cb0 <.//openssl//file_jk/before\crypto\bio\b_print.c:809:40, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |     |-ImplicitCastExpr 0x1ace2051c80 <.//openssl//file_jk/before\crypto\bio\b_print.c:809:40> 'char **' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1ace2051bd8 <col:40> 'char **' lvalue ParmVar 0x1ace2051638 'buffer' 'char **'
|   |     `-ImplicitCastExpr 0x1ace2051c98 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <BitCast>
|   |       `-ParenExpr 0x1ace2051c60 <col:17, col:27> 'void *'
|   |         `-CStyleCastExpr 0x1ace2051c38 <col:18, col:26> 'void *' <NullToPointer>
|   |           `-IntegerLiteral 0x1ace2051bf8 <col:26> 'int' 0
|   |-CallExpr 0x1ace2051e80 <.//openssl//file_jk/before\crypto\bio\b_print.c:812:5, col:39> 'int'
|   | |-ImplicitCastExpr 0x1ace2051e68 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1ace2051d58 <col:5> 'int ()' Function 0x1ace20519c8 'OPENSSL_assert' 'int ()'
|   | `-BinaryOperator 0x1ace2051e48 <col:20, col:33> 'int' '<='
|   |   |-ImplicitCastExpr 0x1ace2051e18 <col:20, col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-UnaryOperator 0x1ace2051db0 <col:20, col:21> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   |   `-ImplicitCastExpr 0x1ace2051d98 <col:21> 'size_t *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1ace2051d78 <col:21> 'size_t *' lvalue ParmVar 0x1ace20516b0 'currlen' 'size_t *'
|   |   `-ImplicitCastExpr 0x1ace2051e30 <col:32, col:33> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x1ace2051e00 <col:32, col:33> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1ace2051de8 <col:33> 'size_t *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1ace2051dc8 <col:33> 'size_t *' lvalue ParmVar 0x1ace2051728 'maxlen' 'size_t *'
|   |-IfStmt 0x1ace2053268 <line:814:5, line:835:5>
|   | |-BinaryOperator 0x1ace2052000 <line:814:9, col:32> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1ace2051fe8 <col:9> 'char **' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1ace2051ea8 <col:9> 'char **' lvalue ParmVar 0x1ace2051638 'buffer' 'char **'
|   | | `-BinaryOperator 0x1ace2051fc8 <col:19, col:32> 'int' '=='
|   | |   |-ImplicitCastExpr 0x1ace2051f98 <col:19, col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   | `-UnaryOperator 0x1ace2051f30 <col:19, col:20> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |   |   `-ImplicitCastExpr 0x1ace2051f18 <col:20> 'size_t *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1ace2051ef8 <col:20> 'size_t *' lvalue ParmVar 0x1ace20516b0 'currlen' 'size_t *'
|   | |   `-ImplicitCastExpr 0x1ace2051fb0 <col:31, col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   | |     `-UnaryOperator 0x1ace2051f80 <col:31, col:32> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1ace2051f68 <col:32> 'size_t *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1ace2051f48 <col:32> 'size_t *' lvalue ParmVar 0x1ace2051728 'maxlen' 'size_t *'
|   | `-CompoundStmt 0x1ace2053240 <col:40, line:835:5>
|   |   |-IfStmt 0x1ace20520e8 <line:815:9, line:816:20>
|   |   | |-OpaqueValueExpr 0x1ace20520d0 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x1ace20520c0 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x1ace2052098 <col:20> 'int' 0
|   |   |-CompoundAssignOperator 0x1ace2052190 <line:818:9, line:802:21> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-UnaryOperator 0x1ace2052138 <line:818:9, col:10> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1ace2052120 <col:10> 'size_t *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1ace2052100 <col:10> 'size_t *' lvalue ParmVar 0x1ace2051728 'maxlen' 'size_t *'
|   |   | `-ImplicitCastExpr 0x1ace2052178 <line:802:21> 'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1ace2052150 <col:21> 'int' 1024
|   |   `-IfStmt 0x1ace2053218 <line:819:9, line:834:9> has_else
|   |     |-BinaryOperator 0x1ace20522c8 <line:819:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1ace2052298 <.//openssl//file_jk/before\crypto\bio\b_print.c:819:13, col:14> 'char *' <LValueToRValue>
|   |     | | `-UnaryOperator 0x1ace20521f8 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     | |   `-ImplicitCastExpr 0x1ace20521e0 <col:14> 'char **' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x1ace20521c0 <col:14> 'char **' lvalue ParmVar 0x1ace2051638 'buffer' 'char **'
|   |     | `-ImplicitCastExpr 0x1ace20522b0 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     |   `-ParenExpr 0x1ace2052278 <col:17, col:27> 'void *'
|   |     |     `-CStyleCastExpr 0x1ace2052250 <col:18, col:26> 'void *' <NullToPointer>
|   |     |       `-IntegerLiteral 0x1ace2052210 <col:26> 'int' 0
|   |     |-CompoundStmt 0x1ace2052c88 <.//openssl//file_jk/before\crypto\bio\b_print.c:819:30, line:828:9>
|   |     | |-BinaryOperator 0x1ace2052508 <line:820:13, col:45> 'char *' '='
|   |     | | |-UnaryOperator 0x1ace2052320 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     | | | `-ImplicitCastExpr 0x1ace2052308 <col:14> 'char **' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x1ace20522e8 <col:14> 'char **' lvalue ParmVar 0x1ace2051638 'buffer' 'char **'
|   |     | | `-ImplicitCastExpr 0x1ace20524f0 <col:23, col:45> 'char *' <IntegralToPointer>
|   |     | |   `-CallExpr 0x1ace20524b0 <col:23, col:45> 'int'
|   |     | |     |-ImplicitCastExpr 0x1ace2052498 <col:23> 'int (*)()' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x1ace2052428 <col:23> 'int ()' Function 0x1ace2052360 'OPENSSL_malloc' 'int ()'
|   |     | |     `-ImplicitCastExpr 0x1ace20524d8 <col:38, col:39> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       `-UnaryOperator 0x1ace2052480 <col:38, col:39> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |         `-ImplicitCastExpr 0x1ace2052468 <col:39> 'size_t *' <LValueToRValue>
|   |     | |           `-DeclRefExpr 0x1ace2052448 <col:39> 'size_t *' lvalue ParmVar 0x1ace2051728 'maxlen' 'size_t *'
|   |     | |-IfStmt 0x1ace2052688 <line:821:13, line:822:24>
|   |     | | |-BinaryOperator 0x1ace2052630 <line:821:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |     | | | |-ImplicitCastExpr 0x1ace2052600 <.//openssl//file_jk/before\crypto\bio\b_print.c:821:17, col:18> 'char *' <LValueToRValue>
|   |     | | | | `-UnaryOperator 0x1ace2052560 <col:17, col:18> 'char *' lvalue prefix '*' cannot overflow
|   |     | | | |   `-ImplicitCastExpr 0x1ace2052548 <col:18> 'char **' <LValueToRValue>
|   |     | | | |     `-DeclRefExpr 0x1ace2052528 <col:18> 'char **' lvalue ParmVar 0x1ace2051638 'buffer' 'char **'
|   |     | | | `-ImplicitCastExpr 0x1ace2052618 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     | | |   `-ParenExpr 0x1ace20525e0 <col:17, col:27> 'void *'
|   |     | | |     `-CStyleCastExpr 0x1ace20525b8 <col:18, col:26> 'void *' <NullToPointer>
|   |     | | |       `-IntegerLiteral 0x1ace2052578 <col:26> 'int' 0
|   |     | | `-ReturnStmt 0x1ace2052678 <.//openssl//file_jk/before\crypto\bio\b_print.c:822:17, col:24>
|   |     | |   `-IntegerLiteral 0x1ace2052650 <col:24> 'int' 0
|   |     | |-IfStmt 0x1ace2052b60 <line:823:13, line:826:13>
|   |     | | |-BinaryOperator 0x1ace2052748 <line:823:17, col:28> 'int' '>'
|   |     | | | |-ImplicitCastExpr 0x1ace2052718 <col:17, col:18> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | | `-UnaryOperator 0x1ace20526d8 <col:17, col:18> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | | | |   `-ImplicitCastExpr 0x1ace20526c0 <col:18> 'size_t *' <LValueToRValue>
|   |     | | | |     `-DeclRefExpr 0x1ace20526a0 <col:18> 'size_t *' lvalue ParmVar 0x1ace20516b0 'currlen' 'size_t *'
|   |     | | | `-ImplicitCastExpr 0x1ace2052730 <col:28> 'unsigned long long' <IntegralCast>
|   |     | | |   `-IntegerLiteral 0x1ace20526f0 <col:28> 'int' 0
|   |     | | `-CompoundStmt 0x1ace2052b40 <col:31, line:826:13>
|   |     | |   |-CallExpr 0x1ace20528c8 <line:824:17, col:48> 'int'
|   |     | |   | |-ImplicitCastExpr 0x1ace20528b0 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |     | |   | | `-DeclRefExpr 0x1ace2052768 <col:17> 'int ()' Function 0x1ace20519c8 'OPENSSL_assert' 'int ()'
|   |     | |   | `-BinaryOperator 0x1ace2052890 <col:32, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '!='
|   |     | |   |   |-ImplicitCastExpr 0x1ace2052860 <.//openssl//file_jk/before\crypto\bio\b_print.c:824:32, col:33> 'char *' <LValueToRValue>
|   |     | |   |   | `-UnaryOperator 0x1ace20527c0 <col:32, col:33> 'char *' lvalue prefix '*' cannot overflow
|   |     | |   |   |   `-ImplicitCastExpr 0x1ace20527a8 <col:33> 'char **' <LValueToRValue>
|   |     | |   |   |     `-DeclRefExpr 0x1ace2052788 <col:33> 'char **' lvalue ParmVar 0x1ace20515b8 'sbuffer' 'char **'
|   |     | |   |   `-ImplicitCastExpr 0x1ace2052878 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |     | |   |     `-ParenExpr 0x1ace2052840 <col:17, col:27> 'void *'
|   |     | |   |       `-CStyleCastExpr 0x1ace2052818 <col:18, col:26> 'void *' <NullToPointer>
|   |     | |   |         `-IntegerLiteral 0x1ace20527d8 <col:26> 'int' 0
|   |     | |   `-CallExpr 0x1ace2052a90 <.//openssl//file_jk/before\crypto\bio\b_print.c:825:17, col:51> 'void *'
|   |     | |     |-ImplicitCastExpr 0x1ace2052a78 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x1ace20528f0 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x1ace20a64b8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |     | |     |-ImplicitCastExpr 0x1ace2052ae0 <col:24, col:25> 'void *' <BitCast>
|   |     | |     | `-ImplicitCastExpr 0x1ace2052ac8 <col:24, col:25> 'char *' <LValueToRValue>
|   |     | |     |   `-UnaryOperator 0x1ace2052948 <col:24, col:25> 'char *' lvalue prefix '*' cannot overflow
|   |     | |     |     `-ImplicitCastExpr 0x1ace2052930 <col:25> 'char **' <LValueToRValue>
|   |     | |     |       `-DeclRefExpr 0x1ace2052910 <col:25> 'char **' lvalue ParmVar 0x1ace2051638 'buffer' 'char **'
|   |     | |     |-ImplicitCastExpr 0x1ace2052b10 <col:33, col:34> 'const void *' <BitCast>
|   |     | |     | `-ImplicitCastExpr 0x1ace2052af8 <col:33, col:34> 'char *' <LValueToRValue>
|   |     | |     |   `-UnaryOperator 0x1ace2052998 <col:33, col:34> 'char *' lvalue prefix '*' cannot overflow
|   |     | |     |     `-ImplicitCastExpr 0x1ace2052980 <col:34> 'char **' <LValueToRValue>
|   |     | |     |       `-DeclRefExpr 0x1ace2052960 <col:34> 'char **' lvalue ParmVar 0x1ace20515b8 'sbuffer' 'char **'
|   |     | |     `-ImplicitCastExpr 0x1ace2052b28 <col:43, col:44> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |       `-UnaryOperator 0x1ace20529e8 <col:43, col:44> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |         `-ImplicitCastExpr 0x1ace20529d0 <col:44> 'size_t *' <LValueToRValue>
|   |     | |           `-DeclRefExpr 0x1ace20529b0 <col:44> 'size_t *' lvalue ParmVar 0x1ace20516b0 'currlen' 'size_t *'
|   |     | `-BinaryOperator 0x1ace2052c68 <line:827:13, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'char *' '='
|   |     |   |-UnaryOperator 0x1ace2052bb0 <.//openssl//file_jk/before\crypto\bio\b_print.c:827:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     |   | `-ImplicitCastExpr 0x1ace2052b98 <col:14> 'char **' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x1ace2052b78 <col:14> 'char **' lvalue ParmVar 0x1ace20515b8 'sbuffer' 'char **'
|   |     |   `-ImplicitCastExpr 0x1ace2052c50 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     |     `-ParenExpr 0x1ace2052c30 <col:17, col:27> 'void *'
|   |     |       `-CStyleCastExpr 0x1ace2052c08 <col:18, col:26> 'void *' <NullToPointer>
|   |     |         `-IntegerLiteral 0x1ace2052bc8 <col:26> 'int' 0
|   |     `-CompoundStmt 0x1ace20531e8 <.//openssl//file_jk/before\crypto\bio\b_print.c:828:16, line:834:9>
|   |       |-DeclStmt 0x1ace2052d38 <line:829:13, col:25>
|   |       | `-VarDecl 0x1ace2052cd0 <col:13, col:19> col:19 used tmpbuf 'char *'
|   |       |-BinaryOperator 0x1ace2052fc8 <line:830:13, col:54> 'char *' '='
|   |       | |-DeclRefExpr 0x1ace2052d50 <col:13> 'char *' lvalue Var 0x1ace2052cd0 'tmpbuf' 'char *'
|   |       | `-ImplicitCastExpr 0x1ace2052fb0 <col:22, col:54> 'char *' <IntegralToPointer>
|   |       |   `-CallExpr 0x1ace2052f50 <col:22, col:54> 'int'
|   |       |     |-ImplicitCastExpr 0x1ace2052f38 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |       |     | `-DeclRefExpr 0x1ace2052e78 <col:22> 'int ()' Function 0x1ace2052db0 'OPENSSL_realloc' 'int ()'
|   |       |     |-ImplicitCastExpr 0x1ace2052f80 <col:38, col:39> 'char *' <LValueToRValue>
|   |       |     | `-UnaryOperator 0x1ace2052ed0 <col:38, col:39> 'char *' lvalue prefix '*' cannot overflow
|   |       |     |   `-ImplicitCastExpr 0x1ace2052eb8 <col:39> 'char **' <LValueToRValue>
|   |       |     |     `-DeclRefExpr 0x1ace2052e98 <col:39> 'char **' lvalue ParmVar 0x1ace2051638 'buffer' 'char **'
|   |       |     `-ImplicitCastExpr 0x1ace2052f98 <col:47, col:48> 'size_t':'unsigned long long' <LValueToRValue>
|   |       |       `-UnaryOperator 0x1ace2052f20 <col:47, col:48> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |         `-ImplicitCastExpr 0x1ace2052f08 <col:48> 'size_t *' <LValueToRValue>
|   |       |           `-DeclRefExpr 0x1ace2052ee8 <col:48> 'size_t *' lvalue ParmVar 0x1ace2051728 'maxlen' 'size_t *'
|   |       |-IfStmt 0x1ace2053118 <line:831:13, line:832:24>
|   |       | |-BinaryOperator 0x1ace20530c0 <line:831:17, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'int' '=='
|   |       | | |-ImplicitCastExpr 0x1ace2053090 <.//openssl//file_jk/before\crypto\bio\b_print.c:831:17> 'char *' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x1ace2052fe8 <col:17> 'char *' lvalue Var 0x1ace2052cd0 'tmpbuf' 'char *'
|   |       | | `-ImplicitCastExpr 0x1ace20530a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <BitCast>
|   |       | |   `-ParenExpr 0x1ace2053070 <col:17, col:27> 'void *'
|   |       | |     `-CStyleCastExpr 0x1ace2053048 <col:18, col:26> 'void *' <NullToPointer>
|   |       | |       `-IntegerLiteral 0x1ace2053008 <col:26> 'int' 0
|   |       | `-ReturnStmt 0x1ace2053108 <.//openssl//file_jk/before\crypto\bio\b_print.c:832:17, col:24>
|   |       |   `-IntegerLiteral 0x1ace20530e0 <col:24> 'int' 0
|   |       `-BinaryOperator 0x1ace20531c8 <line:833:13, col:23> 'char *' '='
|   |         |-UnaryOperator 0x1ace2053168 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |         | `-ImplicitCastExpr 0x1ace2053150 <col:14> 'char **' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x1ace2053130 <col:14> 'char **' lvalue ParmVar 0x1ace2051638 'buffer' 'char **'
|   |         `-ImplicitCastExpr 0x1ace20531b0 <col:23> 'char *' <LValueToRValue>
|   |           `-DeclRefExpr 0x1ace2053180 <col:23> 'char *' lvalue Var 0x1ace2052cd0 'tmpbuf' 'char *'
|   |-IfStmt 0x1ace2053798 <line:837:5, line:842:5>
|   | |-BinaryOperator 0x1ace2053350 <line:837:9, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1ace2053320 <col:9, col:10> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-UnaryOperator 0x1ace20532b8 <col:9, col:10> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | |   `-ImplicitCastExpr 0x1ace20532a0 <col:10> 'size_t *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1ace2053280 <col:10> 'size_t *' lvalue ParmVar 0x1ace20516b0 'currlen' 'size_t *'
|   | | `-ImplicitCastExpr 0x1ace2053338 <col:20, col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-UnaryOperator 0x1ace2053308 <col:20, col:21> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x1ace20532f0 <col:21> 'size_t *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1ace20532d0 <col:21> 'size_t *' lvalue ParmVar 0x1ace2051728 'maxlen' 'size_t *'
|   | `-CompoundStmt 0x1ace2053780 <col:29, line:842:5>
|   |   `-IfStmt 0x1ace2053758 <line:838:9, line:841:45> has_else
|   |     |-ImplicitCastExpr 0x1ace20533c0 <line:838:13, col:14> 'char *' <LValueToRValue>
|   |     | `-UnaryOperator 0x1ace20533a8 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |     |   `-ImplicitCastExpr 0x1ace2053390 <col:14> 'char **' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x1ace2053370 <col:14> 'char **' lvalue ParmVar 0x1ace20515b8 'sbuffer' 'char **'
|   |     |-BinaryOperator 0x1ace2053578 <line:839:13, col:46> 'char' '='
|   |     | |-ArraySubscriptExpr 0x1ace20534e8 <col:13, col:36> 'char' lvalue
|   |     | | |-ImplicitCastExpr 0x1ace20534d0 <col:13, col:22> 'char *' <LValueToRValue>
|   |     | | | `-ParenExpr 0x1ace2053428 <col:13, col:22> 'char *' lvalue
|   |     | | |   `-UnaryOperator 0x1ace2053410 <col:14, col:15> 'char *' lvalue prefix '*' cannot overflow
|   |     | | |     `-ImplicitCastExpr 0x1ace20533f8 <col:15> 'char **' <LValueToRValue>
|   |     | | |       `-DeclRefExpr 0x1ace20533d8 <col:15> 'char **' lvalue ParmVar 0x1ace20515b8 'sbuffer' 'char **'
|   |     | | `-UnaryOperator 0x1ace20534b8 <col:24, col:34> 'size_t':'unsigned long long' postfix '++'
|   |     | |   `-ParenExpr 0x1ace2053498 <col:24, col:33> 'size_t':'unsigned long long' lvalue
|   |     | |     `-UnaryOperator 0x1ace2053480 <col:25, col:26> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |     | |       `-ImplicitCastExpr 0x1ace2053468 <col:26> 'size_t *' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x1ace2053448 <col:26> 'size_t *' lvalue ParmVar 0x1ace20516b0 'currlen' 'size_t *'
|   |     | `-CStyleCastExpr 0x1ace2053550 <col:40, col:46> 'char' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x1ace2053538 <col:46> 'int' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x1ace2053508 <col:46> 'int' lvalue ParmVar 0x1ace20517a8 'c' 'int'
|   |     `-BinaryOperator 0x1ace2053738 <line:841:13, col:45> 'char' '='
|   |       |-ArraySubscriptExpr 0x1ace20536a8 <col:13, col:35> 'char' lvalue
|   |       | |-ImplicitCastExpr 0x1ace2053690 <col:13, col:21> 'char *' <LValueToRValue>
|   |       | | `-ParenExpr 0x1ace20535e8 <col:13, col:21> 'char *' lvalue
|   |       | |   `-UnaryOperator 0x1ace20535d0 <col:14, col:15> 'char *' lvalue prefix '*' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x1ace20535b8 <col:15> 'char **' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x1ace2053598 <col:15> 'char **' lvalue ParmVar 0x1ace2051638 'buffer' 'char **'
|   |       | `-UnaryOperator 0x1ace2053678 <col:23, col:33> 'size_t':'unsigned long long' postfix '++'
|   |       |   `-ParenExpr 0x1ace2053658 <col:23, col:32> 'size_t':'unsigned long long' lvalue
|   |       |     `-UnaryOperator 0x1ace2053640 <col:24, col:25> 'size_t':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       |       `-ImplicitCastExpr 0x1ace2053628 <col:25> 'size_t *' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x1ace2053608 <col:25> 'size_t *' lvalue ParmVar 0x1ace20516b0 'currlen' 'size_t *'
|   |       `-CStyleCastExpr 0x1ace2053710 <col:39, col:45> 'char' <IntegralCast>
|   |         `-ImplicitCastExpr 0x1ace20536f8 <col:45> 'int' <LValueToRValue> part_of_explicit_cast
|   |           `-DeclRefExpr 0x1ace20536c8 <col:45> 'int' lvalue ParmVar 0x1ace20517a8 'c' 'int'
|   `-ReturnStmt 0x1ace20537d8 <line:844:5, col:12>
|     `-IntegerLiteral 0x1ace20537b0 <col:12> 'int' 1
|-FunctionDecl 0x1ace20539c8 <line:849:1, line:860:1> line:849:5 invalid BIO_printf 'int (int *, const char *, ...)'
| |-ParmVarDecl 0x1ace2053868 <col:16, col:21> col:21 invalid bio 'int *'
| |-ParmVarDecl 0x1ace20538e8 <col:26, col:38> col:38 used format 'const char *'
| |-CompoundStmt 0x1ace2054218 <line:850:1, line:860:1>
| | |-DeclStmt 0x1ace2053b08 <line:851:5, col:17>
| | | `-VarDecl 0x1ace2053aa0 <col:5, col:13> col:13 used args 'va_list':'char *'
| | |-DeclStmt 0x1ace2053ba0 <line:852:5, col:12>
| | | `-VarDecl 0x1ace2053b38 <col:5, col:9> col:9 used ret 'int'
| | |-CallExpr 0x1ace2053de0 <line:854:5, col:26> 'void'
| | | |-ImplicitCastExpr 0x1ace2053dc8 <col:5> 'void (*)(__builtin_va_list &, ...)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1ace2053d20 <col:5> 'void (__builtin_va_list &, ...)' Function 0x1ace2053bb8 'va_start' 'void (__builtin_va_list &, ...)'
| | | |-DeclRefExpr 0x1ace2053d58 <col:14> 'va_list':'char *' lvalue Var 0x1ace2053aa0 'args' 'va_list':'char *'
| | | `-ImplicitCastExpr 0x1ace2053e10 <col:20> 'const char *' <LValueToRValue>
| | |   `-DeclRefExpr 0x1ace2053d90 <col:20> 'const char *' lvalue ParmVar 0x1ace20538e8 'format' 'const char *'
| | |-CallExpr 0x1ace2054188 <line:858:5, col:16> 'void'
| | | |-ImplicitCastExpr 0x1ace2054170 <col:5> 'void (*)(__builtin_va_list &)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1ace2054118 <col:5> 'void (__builtin_va_list &)' Function 0x1ace2053fb0 'va_end' 'void (__builtin_va_list &)'
| | | `-DeclRefExpr 0x1ace2054150 <col:12> 'va_list':'char *' lvalue Var 0x1ace2053aa0 'args' 'va_list':'char *'
| | `-ReturnStmt 0x1ace2054208 <line:859:5, col:16>
| |   `-ImplicitCastExpr 0x1ace20541f0 <col:12, col:16> 'int' <LValueToRValue>
| |     `-ParenExpr 0x1ace20541d0 <col:12, col:16> 'int' lvalue
| |       `-DeclRefExpr 0x1ace20541b0 <col:13> 'int' lvalue Var 0x1ace2053b38 'ret' 'int'
| `-FullComment 0x1ace2057a98 <line:847:4, col:75>
|   `-ParagraphComment 0x1ace2057a70 <col:4, col:75>
|     `-TextComment 0x1ace2057a48 <col:4, col:75> Text="************************************************************************"
|-FunctionDecl 0x1ace2053bb8 <line:854:5> col:5 implicit used va_start 'void (__builtin_va_list &, ...)' extern
| |-ParmVarDecl 0x1ace2053c58 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1ace2053cc8 <col:5> Implicit
|-FunctionDecl 0x1ace2053fb0 <line:858:5> col:5 implicit used va_end 'void (__builtin_va_list &)' extern
| |-ParmVarDecl 0x1ace2054050 <<invalid sloc>> <invalid sloc> '__builtin_va_list &'
| `-NoThrowAttr 0x1ace20540c0 <col:5> Implicit
|-FunctionDecl 0x1ace2054490 <line:862:1, line:887:1> line:862:5 invalid BIO_vprintf 'int (int *, const char *, va_list)'
| |-ParmVarDecl 0x1ace2054268 <col:17, col:22> col:22 invalid bio 'int *'
| |-ParmVarDecl 0x1ace20542e8 <col:27, col:39> col:39 used format 'const char *'
| |-ParmVarDecl 0x1ace2054360 <col:47, col:55> col:55 used args 'va_list':'char *'
| `-CompoundStmt 0x1ace2055600 <line:863:1, line:887:1>
|   |-DeclStmt 0x1ace20545e0 <line:864:5, col:12>
|   | `-VarDecl 0x1ace2054578 <col:5, col:9> col:9 used ret 'int'
|   |-DeclStmt 0x1ace2054670 <line:865:5, col:18>
|   | `-VarDecl 0x1ace2054608 <col:5, col:12> col:12 used retlen 'size_t':'unsigned long long'
|   |-DeclStmt 0x1ace20547d0 <line:866:5, col:27>
|   | `-VarDecl 0x1ace2054768 <col:5, col:26> col:10 used hugebuf 'char [2048]'
|   |-DeclStmt 0x1ace20548b8 <line:869:5, col:29>
|   | `-VarDecl 0x1ace2054800 <col:5, col:22> col:11 used hugebufp 'char *' cinit
|   |   `-ImplicitCastExpr 0x1ace20548a0 <col:22> 'char *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1ace2054868 <col:22> 'char [2048]' lvalue Var 0x1ace2054768 'hugebuf' 'char [2048]'
|   |-DeclStmt 0x1ace20549a8 <line:870:5, col:41>
|   | `-VarDecl 0x1ace20548e0 <col:5, col:40> col:12 used hugebufsize 'size_t':'unsigned long long' cinit
|   |   `-UnaryExprOrTypeTraitExpr 0x1ace2054988 <col:26, col:40> 'unsigned long long' sizeof
|   |     `-ParenExpr 0x1ace2054968 <col:32, col:40> 'char [2048]' lvalue
|   |       `-DeclRefExpr 0x1ace2054948 <col:33> 'char [2048]' lvalue Var 0x1ace2054768 'hugebuf' 'char [2048]' non_odr_use_unevaluated
|   |-DeclStmt 0x1ace2054ae0 <line:871:5, col:24>
|   | `-VarDecl 0x1ace20549d8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> .//openssl//file_jk/before\crypto\bio\b_print.c:871:11 used dynbuf 'char *' cinit
|   |   `-ImplicitCastExpr 0x1ace2054ac8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |     `-ParenExpr 0x1ace2054aa8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1ace2054a80 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1ace2054a40 <col:26> 'int' 0
|   |-DeclStmt 0x1ace2054b78 <.//openssl//file_jk/before\crypto\bio\b_print.c:872:5, col:16>
|   | `-VarDecl 0x1ace2054b10 <col:5, col:9> col:9 used ignored 'int'
|   |-BinaryOperator 0x1ace2054c68 <line:874:5, D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:27> 'char *' '='
|   | |-DeclRefExpr 0x1ace2054b90 <.//openssl//file_jk/before\crypto\bio\b_print.c:874:5> 'char *' lvalue Var 0x1ace20549d8 'dynbuf' 'char *'
|   | `-ImplicitCastExpr 0x1ace2054c50 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char *' <NullToPointer>
|   |   `-ParenExpr 0x1ace2054c30 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x1ace2054c08 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x1ace2054bc8 <col:26> 'int' 0
|   |-IfStmt 0x1ace2055198 <.//openssl//file_jk/before\crypto\bio\b_print.c:875:5, line:879:5>
|   | |-UnaryOperator 0x1ace2054f88 <line:875:9, line:876:21> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1ace2054f00 <line:875:10, line:876:21> 'int'
|   | |   |-ImplicitCastExpr 0x1ace2054ee8 <line:875:10> 'int (*)(char **, char **, size_t *, size_t *, int *, const char *, va_list)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1ace2054c88 <col:10> 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' Function 0x1ace20e2f40 '_dopr' 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)'
|   | |   |-UnaryOperator 0x1ace2054ce0 <col:16, col:17> 'char **' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1ace2054ca8 <col:17> 'char *' lvalue Var 0x1ace2054800 'hugebufp' 'char *'
|   | |   |-UnaryOperator 0x1ace2054d18 <col:27, col:28> 'char **' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1ace2054cf8 <col:28> 'char *' lvalue Var 0x1ace20549d8 'dynbuf' 'char *'
|   | |   |-UnaryOperator 0x1ace2054d68 <col:36, col:37> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1ace2054d30 <col:37> 'size_t':'unsigned long long' lvalue Var 0x1ace20548e0 'hugebufsize' 'size_t':'unsigned long long'
|   | |   |-UnaryOperator 0x1ace2054db8 <col:50, col:51> 'size_t *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1ace2054d80 <col:51> 'size_t':'unsigned long long' lvalue Var 0x1ace2054608 'retlen' 'size_t':'unsigned long long'
|   | |   |-UnaryOperator 0x1ace2054e08 <col:59, col:60> 'int *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1ace2054dd0 <col:60> 'int' lvalue Var 0x1ace2054b10 'ignored' 'int'
|   | |   |-ImplicitCastExpr 0x1ace2054f58 <col:69> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1ace2054e20 <col:69> 'const char *' lvalue ParmVar 0x1ace20542e8 'format' 'const char *'
|   | |   `-ImplicitCastExpr 0x1ace2054f70 <line:876:17> 'va_list':'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1ace2054e58 <col:17> 'va_list':'char *' lvalue ParmVar 0x1ace2054360 'args' 'va_list':'char *'
|   | `-CompoundStmt 0x1ace2055178 <col:24, line:879:5>
|   |   |-CallExpr 0x1ace20550e8 <line:877:9, col:28> 'int'
|   |   | |-ImplicitCastExpr 0x1ace20550d0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1ace2055090 <col:9> 'int ()' Function 0x1ace2054fc8 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x1ace2055110 <col:22> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1ace20550b0 <col:22> 'char *' lvalue Var 0x1ace20549d8 'dynbuf' 'char *'
|   |   `-ReturnStmt 0x1ace2055168 <line:878:9, col:17>
|   |     `-UnaryOperator 0x1ace2055150 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1ace2055128 <col:17> 'int' 1
|   |-IfStmt 0x1ace2055570 <line:880:5, line:885:5> has_else
|   | |-ImplicitCastExpr 0x1ace20551e0 <line:880:9> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1ace20551c0 <col:9> 'char *' lvalue Var 0x1ace20549d8 'dynbuf' 'char *'
|   | |-CompoundStmt 0x1ace2055470 <col:17, line:883:5>
|   | | `-CallExpr 0x1ace2055430 <line:882:9, col:28> 'int'
|   | |   |-ImplicitCastExpr 0x1ace2055418 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1ace20553d8 <col:9> 'int ()' Function 0x1ace2054fc8 'OPENSSL_free' 'int ()'
|   | |   `-ImplicitCastExpr 0x1ace2055458 <col:22> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1ace20553f8 <col:22> 'char *' lvalue Var 0x1ace20549d8 'dynbuf' 'char *'
|   | `-CompoundStmt 0x1ace2055560 <line:883:12, line:885:5>
|   `-ReturnStmt 0x1ace20555f0 <line:886:5, col:16>
|     `-ImplicitCastExpr 0x1ace20555d8 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1ace20555b8 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1ace2055598 <col:13> 'int' lvalue Var 0x1ace2054578 'ret' 'int'
|-FunctionDecl 0x1ace2055868 <line:895:1, line:906:1> line:895:5 BIO_snprintf 'int (char *, size_t, const char *, ...)'
| |-ParmVarDecl 0x1ace2055680 <col:18, col:24> col:24 used buf 'char *'
| |-ParmVarDecl 0x1ace20556f8 <col:29, col:36> col:36 used n 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1ace2055778 <col:39, col:51> col:51 used format 'const char *'
| `-CompoundStmt 0x1ace2055ec0 <line:896:1, line:906:1>
|   |-DeclStmt 0x1ace20559b0 <line:897:5, col:17>
|   | `-VarDecl 0x1ace2055948 <col:5, col:13> col:13 used args 'va_list':'char *'
|   |-DeclStmt 0x1ace2055a48 <line:898:5, col:12>
|   | `-VarDecl 0x1ace20559e0 <col:5, col:9> col:9 used ret 'int'
|   |-CallExpr 0x1ace2055af0 <line:900:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1ace2055ad8 <col:5> 'void (*)(__builtin_va_list &, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1ace2055a60 <col:5> 'void (__builtin_va_list &, ...)' Function 0x1ace2053bb8 'va_start' 'void (__builtin_va_list &, ...)'
|   | |-DeclRefExpr 0x1ace2055a80 <col:14> 'va_list':'char *' lvalue Var 0x1ace2055948 'args' 'va_list':'char *'
|   | `-ImplicitCastExpr 0x1ace2055b20 <col:20> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1ace2055ab8 <col:20> 'const char *' lvalue ParmVar 0x1ace2055778 'format' 'const char *'
|   |-BinaryOperator 0x1ace2055db8 <line:902:5, col:45> 'int' '='
|   | |-DeclRefExpr 0x1ace2055b38 <col:5> 'int' lvalue Var 0x1ace20559e0 'ret' 'int'
|   | `-CallExpr 0x1ace2055d18 <col:11, col:45> 'int'
|   |   |-ImplicitCastExpr 0x1ace2055d00 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1ace2055c60 <col:11> 'int ()' Function 0x1ace2055b98 'BIO_vsnprintf' 'int ()'
|   |   |-ImplicitCastExpr 0x1ace2055d58 <col:25> 'char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace2055c80 <col:25> 'char *' lvalue ParmVar 0x1ace2055680 'buf' 'char *'
|   |   |-ImplicitCastExpr 0x1ace2055d70 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace2055ca0 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x1ace20556f8 'n' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1ace2055d88 <col:33> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1ace2055cc0 <col:33> 'const char *' lvalue ParmVar 0x1ace2055778 'format' 'const char *'
|   |   `-ImplicitCastExpr 0x1ace2055da0 <col:41> 'va_list':'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1ace2055ce0 <col:41> 'va_list':'char *' lvalue Var 0x1ace2055948 'args' 'va_list':'char *'
|   |-CallExpr 0x1ace2055e30 <line:904:5, col:16> 'void'
|   | |-ImplicitCastExpr 0x1ace2055e18 <col:5> 'void (*)(__builtin_va_list &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1ace2055dd8 <col:5> 'void (__builtin_va_list &)' Function 0x1ace2053fb0 'va_end' 'void (__builtin_va_list &)'
|   | `-DeclRefExpr 0x1ace2055df8 <col:12> 'va_list':'char *' lvalue Var 0x1ace2055948 'args' 'va_list':'char *'
|   `-ReturnStmt 0x1ace2055eb0 <line:905:5, col:16>
|     `-ImplicitCastExpr 0x1ace2055e98 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1ace2055e78 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1ace2055e58 <col:13> 'int' lvalue Var 0x1ace20559e0 'ret' 'int'
`-FunctionDecl 0x1ace2056198 prev 0x1ace2055b98 <line:908:1, line:926:1> line:908:5 used BIO_vsnprintf 'int (char *, size_t, const char *, va_list)'
  |-ParmVarDecl 0x1ace2055f18 <col:19, col:25> col:25 used buf 'char *'
  |-ParmVarDecl 0x1ace2055f90 <col:30, col:37> col:37 used n 'size_t':'unsigned long long'
  |-ParmVarDecl 0x1ace2056010 <col:40, col:52> col:52 used format 'const char *'
  |-ParmVarDecl 0x1ace2056088 <col:60, col:68> col:68 used args 'va_list':'char *'
  `-CompoundStmt 0x1ace2056840 <line:909:1, line:926:1>
    |-DeclStmt 0x1ace20562d0 <line:910:5, col:18>
    | `-VarDecl 0x1ace2056268 <col:5, col:12> col:12 used retlen 'size_t':'unsigned long long'
    |-DeclStmt 0x1ace2056368 <line:911:5, col:18>
    | `-VarDecl 0x1ace2056300 <col:5, col:9> col:9 used truncated 'int'
    |-IfStmt 0x1ace2056698 <line:913:5, line:914:17>
    | |-UnaryOperator 0x1ace2056630 <line:913:8, col:64> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x1ace2056590 <col:9, col:64> 'int'
    | |   |-ImplicitCastExpr 0x1ace2056578 <col:9> 'int (*)(char **, char **, size_t *, size_t *, int *, const char *, va_list)' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x1ace2056380 <col:9> 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)' Function 0x1ace20e2f40 '_dopr' 'int (char **, char **, size_t *, size_t *, int *, const char *, va_list)'
    | |   |-UnaryOperator 0x1ace20563c0 <col:15, col:16> 'char **' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1ace20563a0 <col:16> 'char *' lvalue ParmVar 0x1ace2055f18 'buf' 'char *'
    | |   |-ImplicitCastExpr 0x1ace20565e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdio.h:120:17, col:27> 'char **' <NullToPointer>
    | |   | `-ParenExpr 0x1ace2056440 <col:17, col:27> 'void *'
    | |   |   `-CStyleCastExpr 0x1ace2056418 <col:18, col:26> 'void *' <NullToPointer>
    | |   |     `-IntegerLiteral 0x1ace20563d8 <col:26> 'int' 0
    | |   |-UnaryOperator 0x1ace2056480 <.//openssl//file_jk/before\crypto\bio\b_print.c:913:27, col:28> 'size_t *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1ace2056460 <col:28> 'size_t':'unsigned long long' lvalue ParmVar 0x1ace2055f90 'n' 'size_t':'unsigned long long'
    | |   |-UnaryOperator 0x1ace20564d0 <col:31, col:32> 'size_t *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1ace2056498 <col:32> 'size_t':'unsigned long long' lvalue Var 0x1ace2056268 'retlen' 'size_t':'unsigned long long'
    | |   |-UnaryOperator 0x1ace2056520 <col:40, col:41> 'int *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1ace20564e8 <col:41> 'int' lvalue Var 0x1ace2056300 'truncated' 'int'
    | |   |-ImplicitCastExpr 0x1ace2056600 <col:52> 'const char *' <LValueToRValue>
    | |   | `-DeclRefExpr 0x1ace2056538 <col:52> 'const char *' lvalue ParmVar 0x1ace2056010 'format' 'const char *'
    | |   `-ImplicitCastExpr 0x1ace2056618 <col:60> 'va_list':'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1ace2056558 <col:60> 'va_list':'char *' lvalue ParmVar 0x1ace2056088 'args' 'va_list':'char *'
    | `-ReturnStmt 0x1ace2056688 <line:914:9, col:17>
    |   `-UnaryOperator 0x1ace2056670 <col:16, col:17> 'int' prefix '-'
    |     `-IntegerLiteral 0x1ace2056648 <col:17> 'int' 1
    `-IfStmt 0x1ace2056818 <line:916:5, line:925:9> has_else
      |-ImplicitCastExpr 0x1ace20566d0 <line:916:9> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x1ace20566b0 <col:9> 'int' lvalue Var 0x1ace2056300 'truncated' 'int'
      |-ReturnStmt 0x1ace2056728 <line:923:9, col:17>
      | `-UnaryOperator 0x1ace2056710 <col:16, col:17> 'int' prefix '-'
      |   `-IntegerLiteral 0x1ace20566e8 <col:17> 'int' 1
      `-NullStmt 0x1ace2056810 <line:925:9>
