TranslationUnitDecl 0x1b8ca6d6cc8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1b8ca6d7560 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1b8ca6d7260 '__int128'
|-TypedefDecl 0x1b8ca6d75d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1b8ca6d7280 'unsigned __int128'
|-TypedefDecl 0x1b8ca6d7908 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1b8ca6d76c0 'struct __NSConstantString_tag'
|   `-Record 0x1b8ca6d7628 '__NSConstantString_tag'
|-TypedefDecl 0x1b8ca6d7978 <<invalid sloc>> <invalid sloc> implicit referenced size_t 'unsigned long long'
| `-BuiltinType 0x1b8ca6d6ea0 'unsigned long long'
|-TypedefDecl 0x1b8ca6d7a10 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1b8ca6d79d0 'char *'
|   `-BuiltinType 0x1b8ca6d6d60 'char'
|-TypedefDecl 0x1b8ca6d7a80 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1b8ca6d79d0 'char *'
|   `-BuiltinType 0x1b8ca6d6d60 'char'
|-FunctionDecl 0x1b8cc051160 <.//openssl//file_jk/before\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1b8ca6d7b20 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x1b8ca6d7ba0 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x1b8ca6d7c20 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x1b8cc051060 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x1b8cc051468 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1b8cc051238 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1b8cc0512b8 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1b8cc051338 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x1b8cc0513b8 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x1b8cc051728 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x1b8cc051540 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x1b8cc0515c0 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x1b8cc051640 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x1b8cc0519e0 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x1b8cc0517f8 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x1b8cc051878 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x1b8cc0518f8 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x1b8cc051d30 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1b8cc051ab0 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1b8cc051b30 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1b8cc051bb0 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x1b8cc051c30 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x1b8cc054090 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1b8cc051e08 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1b8cc051e88 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1b8cc051f08 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x1b8cc051f88 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x1b8cc054150 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x1b8cc054228 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x1b8cc054298 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x1b8cc054308 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x1b8cc054378 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x1b8cc0543e8 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1b8cc054440 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x1b8cc054518 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x1b8cc054588 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x1b8cc0545f8 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x1b8cc054668 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x1b8cc054760 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x1b8cc0547d0 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1b8cc054828 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x1b8cc0548f8 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x1b8cc054968 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x1b8cc0549d8 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x1b8cc054a48 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x1b8cc054ab8 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1b8cc054b10 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x1b8cc054be8 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x1b8cc054c58 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x1b8cc054cb0 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x1b8cc055000 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x1b8cc0522f8 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x1b8cc0523a8 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x1b8cc052538 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x1b8cc052478 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x1b8cc052688 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x1b8cc0525f8 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x1b8cc0527d8 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x1b8cc052748 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x1b8cc052b98 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x1b8cc052898 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc052918 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x1b8cc052998 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x1b8cc052a18 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x1b8cc052a98 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x1b8cc052e58 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x1b8cc052c78 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc052cf8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x1b8cc052d78 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x1b8cc053120 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x1b8cc052f28 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc052fa8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x1b8cc053080 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x1b8cc053468 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x1b8cc0531f0 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc053270 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x1b8cc0532f0 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x1b8cc053370 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x1b8cc053698 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x1b8cc053540 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x1b8cc0535c0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x1b8cc053878 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x1b8cc053760 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x1b8cc0537e0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x1b8cc053b30 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x1b8cc053940 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x1b8cc0539c0 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x1b8cc053a40 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x1b8cc053e80 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x1b8cc053c00 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x1b8cc053c80 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x1b8cc053d00 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x1b8cc053d80 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x1b8cc065708 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x1b8cc053f58 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc053fd8 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x1b8cc0653e0 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x1b8cc065460 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x1b8cc0654e0 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x1b8cc065560 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x1b8cc0655e0 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x1b8cc065bb8 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x1b8cc0657f8 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc065878 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x1b8cc0658f8 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x1b8cc065978 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x1b8cc0659f8 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x1b8cc065a78 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x1b8cc065af8 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x1b8cc065ed0 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x1b8cc065ca8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc065d28 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x1b8cc065da8 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x1b8cc065e28 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x1b8cc066218 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x1b8cc065fa8 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc066028 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x1b8cc0660a8 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x1b8cc066128 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x1b8cc068628 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x1b8cc0662f0 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc066370 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x1b8cc068428 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x1b8cc0684a8 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x1b8cc068528 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x1b8cc068a98 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x1b8cc068708 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc068788 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x1b8cc068808 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x1b8cc068888 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x1b8cc068908 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x1b8cc068988 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x1b8cc068e90 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x1b8cc068b80 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc068c00 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1b8cc068c80 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x1b8cc068d00 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x1b8cc068d80 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x1b8cc069228 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x1b8cc068f70 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc068ff0 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1b8cc069070 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x1b8cc0690f0 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x1b8cc069170 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x1b8cc066690 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1b8cc069308 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x1b8cc069388 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x1b8cc0663f0 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x1b8cc066470 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x1b8cc0664f0 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x1b8cc066570 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x1b8cc066a80 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1b8cc066778 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x1b8cc0667f8 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x1b8cc066878 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x1b8cc0668f8 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x1b8cc066978 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x1b8cc066e70 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x1b8cc066b60 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x1b8cc066be0 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x1b8cc066c60 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x1b8cc066ce0 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x1b8cc066d60 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x1b8cc067140 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x1b8cc066f50 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x1b8cc066fd0 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x1b8cc067050 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x1b8cc067400 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x1b8cc067210 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x1b8cc067290 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x1b8cc067310 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x1b8cc0674d0 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-FunctionDecl 0x1b8cc067740 <.//openssl//file_jk/before\crypto\bn\bn_blind.c:30:1, line:79:1> line:30:14 invalid BN_BLINDING_new 'int *(const int *, const int *, int *)'
| |-ParmVarDecl 0x1b8cc067550 <col:30, col:44> col:44 invalid A 'const int *'
| |-ParmVarDecl 0x1b8cc0675d0 <col:47, col:61> col:61 invalid Ai 'const int *'
| |-ParmVarDecl 0x1b8cc067650 <col:65, col:73> col:73 invalid mod 'int *'
| `-CompoundStmt 0x1b8cc062558 <line:31:1, line:79:1>
|   |-NullStmt 0x1b8cc067810 <line:34:22>
|   |-IfStmt 0x1b8cc067ad0 <line:36:5, line:39:5>
|   | |-OpaqueValueExpr 0x1b8cc067ab8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1b8cc067aa8 <line:36:55, line:39:5>
|   |-IfStmt 0x1b8cc067db8 <line:42:5, line:46:5>
|   | |-OpaqueValueExpr 0x1b8cc067da0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1b8cc067d90 <line:42:28, line:46:5>
|   |-IfStmt 0x1b8cc0680b8 <line:50:5, line:53:5>
|   | |-OpaqueValueExpr 0x1b8cc0680a0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1b8cc068088 <line:50:20, line:53:5>
|   |   `-IfStmt 0x1b8cc068070 <line:51:9, line:52:18>
|   |     |-OpaqueValueExpr 0x1b8cc068058 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1b8cc068040 <col:13, col:18> 'err' 0x1b8cc067ff0
|   |-IfStmt 0x1b8cc068168 <line:55:5, line:58:5>
|   | |-OpaqueValueExpr 0x1b8cc068150 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1b8cc068138 <line:55:21, line:58:5>
|   |   `-IfStmt 0x1b8cc068120 <line:56:9, line:57:18>
|   |     |-OpaqueValueExpr 0x1b8cc068108 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1b8cc0680f0 <col:13, col:18> 'err' 0x1b8cc067ff0
|   |-IfStmt 0x1b8cc0681d0 <line:61:5, line:62:14>
|   | |-OpaqueValueExpr 0x1b8cc0681b8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1b8cc0681a0 <col:9, col:14> 'err' 0x1b8cc067ff0
|   `-LabelStmt 0x1b8cc062540 <line:76:2, col:5> 'err'
|     `-NullStmt 0x1b8cc062538 <col:5>
|-FunctionDecl 0x1b8cc062648 <line:81:1, line:92:1> line:81:6 invalid BN_BLINDING_free 'void (int *)'
| |-ParmVarDecl 0x1b8cc0625b8 <col:23, col:36> col:36 invalid r 'int *'
| `-CompoundStmt 0x1b8cc0629e8 <line:82:1, line:92:1>
|   `-IfStmt 0x1b8cc062730 <line:83:5, line:84:9>
|     |-OpaqueValueExpr 0x1b8cc062718 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x1b8cc062708 <col:9>
|-FunctionDecl 0x1b8cc062b70 <line:94:1, line:128:1> line:94:5 invalid BN_BLINDING_update 'int (int *, int *)'
| |-ParmVarDecl 0x1b8cc062a18 <col:24, col:37> col:37 invalid b 'int *'
| |-ParmVarDecl 0x1b8cc062a98 <col:40, col:48> col:48 invalid ctx 'int *'
| `-CompoundStmt 0x1b8cc064528 <line:95:1, line:128:1>
|   |-DeclStmt 0x1b8cc062ce0 <line:96:5, col:16>
|   | `-VarDecl 0x1b8cc062c50 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1b8cc062cb8 <col:15> 'int' 0
|   |-IfStmt 0x1b8cc062db0 <line:98:5, line:101:5>
|   | |-OpaqueValueExpr 0x1b8cc062d98 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1b8cc062d80 <line:98:44, line:101:5>
|   |   `-GotoStmt 0x1b8cc062d68 <line:100:9, col:14> 'err' 0x1b8cc062d18
|   |-IfStmt 0x1b8cc063388 <line:106:5, line:121:5> has_else
|   | |-OpaqueValueExpr 0x1b8cc063370 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1b8cc062fb0 <line:107:48, line:111:5>
|   | | `-IfStmt 0x1b8cc062f98 <line:109:9, line:110:18>
|   | |   |-OpaqueValueExpr 0x1b8cc062f80 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x1b8cc062f68 <col:13, col:18> 'err' 0x1b8cc062d18
|   | `-IfStmt 0x1b8cc063358 <line:111:12, line:121:5>
|   |   |-OpaqueValueExpr 0x1b8cc063340 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x1b8cc063328 <line:111:53, line:121:5>
|   |     `-IfStmt 0x1b8cc063300 <line:112:9, line:120:9> has_else
|   |       |-OpaqueValueExpr 0x1b8cc0632e8 <<invalid sloc>> '_Bool'
|   |       |-CompoundStmt 0x1b8cc063140 <line:112:31, line:116:9>
|   |       | `-IfStmt 0x1b8cc063128 <line:113:13, line:115:22>
|   |       |   |-OpaqueValueExpr 0x1b8cc063110 <<invalid sloc>> '_Bool'
|   |       |   `-GotoStmt 0x1b8cc0630f8 <col:17, col:22> 'err' 0x1b8cc062d18
|   |       `-CompoundStmt 0x1b8cc0632d0 <line:116:16, line:120:9>
|   |         `-IfStmt 0x1b8cc0632b8 <line:117:13, line:119:22>
|   |           |-OpaqueValueExpr 0x1b8cc0632a0 <<invalid sloc>> '_Bool'
|   |           `-GotoStmt 0x1b8cc063288 <col:17, col:22> 'err' 0x1b8cc062d18
|   |-BinaryOperator 0x1b8cc064430 <line:123:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x1b8cc0643d0 <col:5> 'int' lvalue Var 0x1b8cc062c50 'ret' 'int'
|   | `-IntegerLiteral 0x1b8cc064408 <col:11> 'int' 1
|   |-LabelStmt 0x1b8cc0644a8 <line:124:2, col:5> 'err'
|   | `-NullStmt 0x1b8cc0644a0 <col:5>
|   `-ReturnStmt 0x1b8cc064518 <line:127:5, col:16>
|     `-ImplicitCastExpr 0x1b8cc064500 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1b8cc0644e0 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1b8cc0644c0 <col:13> 'int' lvalue Var 0x1b8cc062c50 'ret' 'int'
|-FunctionDecl 0x1b8cc064770 <line:130:1, line:133:1> line:130:5 invalid BN_BLINDING_convert 'int (int *, int *, int *)'
| |-ParmVarDecl 0x1b8cc064580 <col:25, col:33> col:33 invalid n 'int *'
| |-ParmVarDecl 0x1b8cc064600 <col:36, col:49> col:49 invalid b 'int *'
| |-ParmVarDecl 0x1b8cc064680 <col:52, col:60> col:60 invalid ctx 'int *'
| `-CompoundStmt 0x1b8cc064950 <line:131:1, line:133:1>
|-FunctionDecl 0x1b8cc064bf0 <line:135:1, line:161:1> line:135:5 invalid BN_BLINDING_convert_ex 'int (int *, int *, int *, int *)'
| |-ParmVarDecl 0x1b8cc064978 <col:28, col:36> col:36 invalid n 'int *'
| |-ParmVarDecl 0x1b8cc0649f8 <col:39, col:47> col:47 invalid r 'int *'
| |-ParmVarDecl 0x1b8cc064a78 <col:50, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x1b8cc064af8 <col:66, col:74> col:74 invalid ctx 'int *'
| `-CompoundStmt 0x1b8cc0652d0 <line:136:1, line:161:1>
|   |-DeclStmt 0x1b8cc064d70 <line:137:5, col:16>
|   | `-VarDecl 0x1b8cc064ce0 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1b8cc064d48 <col:15> 'int' 1
|   |-NullStmt 0x1b8cc064d88 <line:139:20>
|   |-IfStmt 0x1b8cc064e38 <line:141:5, line:144:5>
|   | |-OpaqueValueExpr 0x1b8cc064e20 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1b8cc064e08 <line:141:44, line:144:5>
|   |   `-ReturnStmt 0x1b8cc064df8 <line:143:9, col:18>
|   |     `-ParenExpr 0x1b8cc064dd8 <col:16, col:18> 'int'
|   |       `-IntegerLiteral 0x1b8cc064db0 <col:17> 'int' 0
|   |-IfStmt 0x1b8cc064f60 <line:146:5, line:150:18> has_else
|   | |-OpaqueValueExpr 0x1b8cc064f48 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x1b8cc064f40 <line:148:9>
|   | `-IfStmt 0x1b8cc064f28 <line:149:10, line:150:18>
|   |   |-OpaqueValueExpr 0x1b8cc064f10 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x1b8cc064f00 <col:9, col:18>
|   |     `-ParenExpr 0x1b8cc064ee0 <col:16, col:18> 'int'
|   |       `-IntegerLiteral 0x1b8cc064eb8 <col:17> 'int' 0
|   |-IfStmt 0x1b8cc0650e8 <line:152:5, line:153:16>
|   | |-OpaqueValueExpr 0x1b8cc0650d0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1b8cc0650c0 <col:9, col:16>
|   |   `-IntegerLiteral 0x1b8cc065098 <col:16> 'int' 0
|   `-ReturnStmt 0x1b8cc0652c0 <line:160:5, col:12>
|     `-ImplicitCastExpr 0x1b8cc0652a8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1b8cc065288 <col:12> 'int' lvalue Var 0x1b8cc064ce0 'ret' 'int'
|-FunctionDecl 0x1b8cc0634e8 <line:163:1, line:166:1> line:163:5 invalid BN_BLINDING_invert 'int (int *, int *, int *)'
| |-ParmVarDecl 0x1b8cc065328 <col:24, col:32> col:32 invalid n 'int *'
| |-ParmVarDecl 0x1b8cc0633c0 <col:35, col:48> col:48 invalid b 'int *'
| |-ParmVarDecl 0x1b8cc063440 <col:51, col:59> col:59 invalid ctx 'int *'
| `-CompoundStmt 0x1b8cc0636c8 <line:164:1, line:166:1>
|-FunctionDecl 0x1b8cc063970 <line:168:1, line:202:1> line:168:5 invalid BN_BLINDING_invert_ex 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1b8cc0636f0 <col:27, col:35> col:35 invalid n 'int *'
| |-ParmVarDecl 0x1b8cc063770 <col:38, col:52> col:52 invalid r 'const int *'
| |-ParmVarDecl 0x1b8cc0637f0 <col:55, col:68> col:68 invalid b 'int *'
| |-ParmVarDecl 0x1b8cc063870 <line:169:27, col:35> col:35 invalid ctx 'int *'
| `-CompoundStmt 0x1b8cc064170 <line:170:1, line:202:1>
|   |-DeclStmt 0x1b8cc063ac8 <line:171:5, col:12>
|   | `-VarDecl 0x1b8cc063a60 <col:5, col:9> col:9 used ret 'int'
|   |-NullStmt 0x1b8cc063ae0 <line:173:20>
|   |-IfStmt 0x1b8cc063b70 <line:175:5, line:178:5>
|   | |-OpaqueValueExpr 0x1b8cc063b58 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1b8cc063b40 <line:175:43, line:178:5>
|   |   `-ReturnStmt 0x1b8cc063b30 <line:177:9, col:16>
|   |     `-IntegerLiteral 0x1b8cc063b08 <col:16> 'int' 0
|   |-IfStmt 0x1b8cc0640d8 <line:180:5, line:198:5> has_else
|   | |-OpaqueValueExpr 0x1b8cc0640c0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1b8cc064058 <line:180:27, line:196:5>
|   | | `-IfStmt 0x1b8cc063fe8 <line:182:9, line:194:9>
|   | |   |-OpaqueValueExpr 0x1b8cc063fd0 <<invalid sloc>> '_Bool'
|   | |   `-CompoundStmt 0x1b8cc063fb0 <line:182:32, line:194:9>
|   | |     |-DeclStmt 0x1b8cc063d38 <line:183:13, col:51>
|   | |     | |-VarDecl 0x1b8cc063bc0 <col:13, col:20> col:20 used i 'size_t':'unsigned long long'
|   | |     | |-VarDecl 0x1b8cc063c38 <col:13, col:23> col:23 used rtop 'size_t':'unsigned long long'
|   | |     | `-VarDecl 0x1b8cc063cb0 <col:13, col:38> col:38 used ntop 'size_t':'unsigned long long'
|   | |     `-ForStmt 0x1b8cc063ef8 <line:186:13, line:189:13>
|   | |       |-BinaryOperator 0x1b8cc063dc8 <line:186:18, col:22> 'size_t':'unsigned long long' '='
|   | |       | |-DeclRefExpr 0x1b8cc063d50 <col:18> 'size_t':'unsigned long long' lvalue Var 0x1b8cc063bc0 'i' 'size_t':'unsigned long long'
|   | |       | `-ImplicitCastExpr 0x1b8cc063db0 <col:22> 'size_t':'unsigned long long' <IntegralCast>
|   | |       |   `-IntegerLiteral 0x1b8cc063d88 <col:22> 'int' 0
|   | |       |-<<<NULL>>>
|   | |       |-BinaryOperator 0x1b8cc063e70 <col:25, col:29> 'int' '<'
|   | |       | |-ImplicitCastExpr 0x1b8cc063e40 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   | |       | | `-DeclRefExpr 0x1b8cc063de8 <col:25> 'size_t':'unsigned long long' lvalue Var 0x1b8cc063bc0 'i' 'size_t':'unsigned long long'
|   | |       | `-ImplicitCastExpr 0x1b8cc063e58 <col:29> 'size_t':'unsigned long long' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x1b8cc063e08 <col:29> 'size_t':'unsigned long long' lvalue Var 0x1b8cc063c38 'rtop' 'size_t':'unsigned long long'
|   | |       |-UnaryOperator 0x1b8cc063eb0 <col:35, col:36> 'size_t':'unsigned long long' postfix '++'
|   | |       | `-DeclRefExpr 0x1b8cc063e90 <col:35> 'size_t':'unsigned long long' lvalue Var 0x1b8cc063bc0 'i' 'size_t':'unsigned long long'
|   | |       `-CompoundStmt 0x1b8cc063ee8 <col:40, line:189:13>
|   | `-CompoundStmt 0x1b8cc0640b0 <line:196:12, line:198:5>
|   |-NullStmt 0x1b8cc064100 <line:200:20>
|   `-ReturnStmt 0x1b8cc064160 <line:201:5, col:16>
|     `-ImplicitCastExpr 0x1b8cc064148 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1b8cc064128 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1b8cc064108 <col:13> 'int' lvalue Var 0x1b8cc063a60 'ret' 'int'
|-FunctionDecl 0x1b8cc064290 <line:204:1, line:207:1> line:204:5 invalid BN_BLINDING_is_current_thread 'int (int *)'
| |-ParmVarDecl 0x1b8cc0641c8 <col:35, col:48> col:48 invalid b 'int *'
| `-CompoundStmt 0x1b8cc0706c0 <line:205:1, line:207:1>
|-FunctionDecl 0x1b8cc070778 <line:209:1, line:212:1> line:209:6 invalid BN_BLINDING_set_current_thread 'void (int *)'
| |-ParmVarDecl 0x1b8cc0706e8 <col:37, col:50> col:50 invalid b 'int *'
| `-CompoundStmt 0x1b8cc070890 <line:210:1, line:212:1>
|-FunctionDecl 0x1b8cc070950 <line:214:1, line:217:1> line:214:5 invalid BN_BLINDING_lock 'int (int *)'
| |-ParmVarDecl 0x1b8cc0708b8 <col:22, col:35> col:35 invalid b 'int *'
| `-CompoundStmt 0x1b8cc070b20 <line:215:1, line:217:1>
|-FunctionDecl 0x1b8cc070be0 <line:219:1, line:222:1> line:219:5 invalid BN_BLINDING_unlock 'int (int *)'
| |-ParmVarDecl 0x1b8cc070b48 <col:24, col:37> col:37 invalid b 'int *'
| `-CompoundStmt 0x1b8cc070db0 <line:220:1, line:222:1>
|-FunctionDecl 0x1b8cc070ea0 <line:224:1, line:227:1> line:224:15 invalid BN_BLINDING_get_flags 'unsigned long (const int *)'
| |-ParmVarDecl 0x1b8cc070dd8 <col:37, col:56> col:56 invalid b 'const int *'
| `-CompoundStmt 0x1b8cc070f60 <line:225:1, line:227:1>
|-FunctionDecl 0x1b8cc0710d8 <line:229:1, line:232:1> line:229:6 invalid BN_BLINDING_set_flags 'void (int *, unsigned long)'
| |-ParmVarDecl 0x1b8cc070f88 <col:28, col:41> col:41 invalid b 'int *'
| |-ParmVarDecl 0x1b8cc071008 <col:44, col:58> col:58 used flags 'unsigned long'
| `-CompoundStmt 0x1b8cc0711d8 <line:230:1, line:232:1>
`-FunctionDecl 0x1b8cc06da20 <line:234:1, line:313:1> line:234:14 invalid BN_BLINDING_create_param 'int *(int *, const int *, int *, int *, int (*)(int *, const int *, const int *, const int *, int *, int *), int *)'
  |-ParmVarDecl 0x1b8cc071200 <col:39, col:52> col:52 invalid b 'int *'
  |-ParmVarDecl 0x1b8cc071280 <line:235:39, col:53> col:53 invalid e 'const int *'
  |-ParmVarDecl 0x1b8cc071300 <col:56, col:64> col:64 invalid m 'int *'
  |-ParmVarDecl 0x1b8cc071380 <col:67, col:75> col:75 invalid ctx 'int *'
  |-ParmVarDecl 0x1b8cc06d820 <line:236:39, line:241:76> line:236:45 used bn_mod_exp 'int (*)(int *, const int *, const int *, const int *, int *, int *)'
  |-ParmVarDecl 0x1b8cc06d8a0 <line:242:39, col:52> col:52 invalid m_ctx 'int *'
  `-CompoundStmt 0x1b8cc06e868 <line:243:1, line:313:1>
    |-DeclStmt 0x1b8cc06dbb0 <line:244:5, col:27>
    | `-VarDecl 0x1b8cc06db20 <col:5, col:25> col:9 used retry_counter 'int' cinit
    |   `-IntegerLiteral 0x1b8cc06db88 <col:25> 'int' 32
    |-IfStmt 0x1b8cc06dc48 <line:252:5, line:253:14>
    | |-OpaqueValueExpr 0x1b8cc06dc30 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1b8cc06dc18 <col:9, col:14> 'err' 0x1b8cc06dbc8
    |-IfStmt 0x1b8cc06ddd8 <line:255:5, line:256:14>
    | |-OpaqueValueExpr 0x1b8cc06ddc0 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1b8cc06dda8 <col:9, col:14> 'err' 0x1b8cc06dbc8
    |-IfStmt 0x1b8cc06de78 <line:257:5, line:258:14>
    | |-OpaqueValueExpr 0x1b8cc06de60 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1b8cc06de48 <col:9, col:14> 'err' 0x1b8cc06dbc8
    |-IfStmt 0x1b8cc06def8 <line:260:5, line:263:5>
    | |-OpaqueValueExpr 0x1b8cc06dee0 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x1b8cc06ded0 <line:260:20, line:263:5>
    |-IfStmt 0x1b8cc06df40 <line:264:5, line:265:14>
    | |-OpaqueValueExpr 0x1b8cc06df28 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1b8cc06df10 <col:9, col:14> 'err' 0x1b8cc06dbc8
    |-DoStmt 0x1b8cc06e408 <line:272:5, line:289:15>
    | |-CompoundStmt 0x1b8cc06e3a8 <line:272:8, line:289:5>
    | | |-DeclStmt 0x1b8cc06e030 <line:273:9, col:15>
    | | | `-VarDecl 0x1b8cc06dfc8 <col:9, col:13> col:13 used rv 'int'
    | | |-IfStmt 0x1b8cc06e188 <line:274:9, line:275:18>
    | | | |-OpaqueValueExpr 0x1b8cc06e170 <<invalid sloc>> '_Bool'
    | | | `-GotoStmt 0x1b8cc06e158 <col:13, col:18> 'err' 0x1b8cc06dbc8
    | | |-IfStmt 0x1b8cc06e210 <line:276:9, line:277:13>
    | | | |-OpaqueValueExpr 0x1b8cc06e1f8 <<invalid sloc>> '_Bool'
    | | | `-BreakStmt 0x1b8cc06e1f0 <col:13>
    | | |-IfStmt 0x1b8cc06e290 <line:282:9, line:283:18>
    | | | |-UnaryOperator 0x1b8cc06e260 <line:282:13, col:14> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x1b8cc06e248 <col:14> 'int' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x1b8cc06e228 <col:14> 'int' lvalue Var 0x1b8cc06dfc8 'rv' 'int'
    | | | `-GotoStmt 0x1b8cc06e278 <line:283:13, col:18> 'err' 0x1b8cc06dbc8
    | | `-IfStmt 0x1b8cc06e390 <line:285:9, line:288:9>
    | |   |-BinaryOperator 0x1b8cc06e320 <line:285:13, col:32> 'int' '=='
    | |   | |-UnaryOperator 0x1b8cc06e2e0 <col:13, col:26> 'int' postfix '--'
    | |   | | `-DeclRefExpr 0x1b8cc06e2a8 <col:13> 'int' lvalue Var 0x1b8cc06db20 'retry_counter' 'int'
    | |   | `-IntegerLiteral 0x1b8cc06e2f8 <col:32> 'int' 0
    | |   `-CompoundStmt 0x1b8cc06e378 <col:35, line:288:9>
    | |     `-GotoStmt 0x1b8cc06e360 <line:287:13, col:18> 'err' 0x1b8cc06dbc8
    | `-IntegerLiteral 0x1b8cc06e3e0 <line:289:14> 'int' 1
    |-IfStmt 0x1b8cc06e628 <line:291:5, line:297:5> has_else
    | |-OpaqueValueExpr 0x1b8cc06e610 <<invalid sloc>> '_Bool'
    | |-CompoundStmt 0x1b8cc06e488 <line:291:56, line:294:5>
    | | `-IfStmt 0x1b8cc06e470 <line:292:9, line:293:18>
    | |   |-OpaqueValueExpr 0x1b8cc06e440 <<invalid sloc>> '_Bool'
    | |   `-GotoStmt 0x1b8cc06e428 <col:13, col:18> 'err' 0x1b8cc06dbc8
    | `-CompoundStmt 0x1b8cc06e5f8 <line:294:12, line:297:5>
    |   `-IfStmt 0x1b8cc06e5e0 <line:295:9, line:296:18>
    |     |-OpaqueValueExpr 0x1b8cc06e5c8 <<invalid sloc>> '_Bool'
    |     `-GotoStmt 0x1b8cc06e5b0 <col:13, col:18> 'err' 0x1b8cc06dbc8
    |-IfStmt 0x1b8cc06e7f8 <line:299:5, line:303:5>
    | |-OpaqueValueExpr 0x1b8cc06e7e0 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x1b8cc06e7c8 <line:299:29, line:303:5>
    |   `-IfStmt 0x1b8cc06e7b0 <line:300:9, line:302:18>
    |     |-OpaqueValueExpr 0x1b8cc06e798 <<invalid sloc>> '_Bool'
    |     `-GotoStmt 0x1b8cc06e780 <col:13, col:18> 'err' 0x1b8cc06dbc8
    `-LabelStmt 0x1b8cc06e850 <line:306:2, line:310:5> 'err'
      `-IfStmt 0x1b8cc06e838 <line:307:5, line:310:5>
        |-OpaqueValueExpr 0x1b8cc06e820 <<invalid sloc>> '_Bool'
        `-CompoundStmt 0x1b8cc06e810 <line:307:20, line:310:5>
