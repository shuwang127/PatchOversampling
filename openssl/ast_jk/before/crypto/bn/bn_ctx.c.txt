TranslationUnitDecl 0x203e1b36ff8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x203e1b37890 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x203e1b37590 '__int128'
|-TypedefDecl 0x203e1b37900 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x203e1b375b0 'unsigned __int128'
|-TypedefDecl 0x203e1b37c38 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x203e1b379f0 'struct __NSConstantString_tag'
|   `-Record 0x203e1b37958 '__NSConstantString_tag'
|-TypedefDecl 0x203e1b37ca8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x203e1b371d0 'unsigned long long'
|-TypedefDecl 0x203e1b37d40 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x203e1b37d00 'char *'
|   `-BuiltinType 0x203e1b37090 'char'
|-TypedefDecl 0x203e1b37db0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x203e1b37d00 'char *'
|   `-BuiltinType 0x203e1b37090 'char'
|-FunctionDecl 0x203e336f2a0 <.//openssl//file_jk/before\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x203e1b37e50 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x203e1b37ed0 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x203e1b37f50 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x203e336f1a0 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x203e336f5a8 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x203e336f378 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x203e336f3f8 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x203e336f478 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x203e336f4f8 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x203e336f868 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x203e336f680 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x203e336f700 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x203e336f780 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x203e336fb20 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x203e336f938 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x203e336f9b8 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x203e336fa38 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x203e336fe70 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x203e336fbf0 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x203e336fc70 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x203e336fcf0 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x203e336fd70 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x203e3375200 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x203e336ff48 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x203e336ffc8 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x203e3370048 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x203e33700c8 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x203e33752c0 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x203e3375398 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x203e3375408 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x203e3375478 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x203e33754e8 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x203e3375558 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x203e33755b0 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x203e3375688 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x203e33756f8 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x203e3375768 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x203e33757d8 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x203e33758d0 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x203e3375940 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x203e3375998 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x203e3375a68 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x203e3375ad8 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x203e3375b48 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x203e3375bb8 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x203e3375c28 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x203e3375c80 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x203e3375d58 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x203e3375dc8 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x203e3375e20 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x203e3376170 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x203e3372458 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x203e3372508 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x203e3372698 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x203e33725d8 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x203e33727e8 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x203e3372758 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x203e3372938 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x203e33728a8 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x203e3372cf8 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x203e33729f8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x203e3372a78 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x203e3372af8 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x203e3372b78 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x203e3372bf8 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x203e3372fb8 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x203e3372dd8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x203e3372e58 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x203e3372ed8 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x203e33762b0 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x203e3373088 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x203e3373108 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x203e3376210 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x203e33765f8 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x203e3376380 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x203e3376400 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x203e3376480 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x203e3376500 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x203e3376828 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x203e33766d0 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x203e3376750 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x203e3376a08 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x203e33768f0 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x203e3376970 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x203e3376cc0 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x203e3376ad0 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x203e3376b50 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x203e3376bd0 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x203e3377010 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x203e3376d90 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x203e3376e10 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x203e3376e90 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x203e3376f10 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x203e3384b28 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x203e33770e8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x203e3377168 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x203e3384800 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x203e3384880 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x203e3384900 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x203e3384980 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x203e3384a00 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x203e3384fd8 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x203e3384c18 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x203e3384c98 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x203e3384d18 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x203e3384d98 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x203e3384e18 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x203e3384e98 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x203e3384f18 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x203e33852f0 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x203e33850c8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x203e3385148 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x203e33851c8 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x203e3385248 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x203e3385638 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x203e33853c8 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x203e3385448 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x203e33854c8 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x203e3385548 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x203e3389a68 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x203e3385710 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x203e3385790 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x203e3389868 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x203e33898e8 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x203e3389968 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x203e3389ed8 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x203e3389b48 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x203e3389bc8 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x203e3389c48 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x203e3389cc8 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x203e3389d48 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x203e3389dc8 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x203e338a2d0 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x203e3389fc0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x203e338a040 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x203e338a0c0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x203e338a140 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x203e338a1c0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x203e338a668 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x203e338a3b0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x203e338a430 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x203e338a4b0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x203e338a530 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x203e338a5b0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x203e3385ab0 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x203e338a748 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x203e338a7c8 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x203e3385810 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x203e3385890 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x203e3385910 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x203e3385990 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x203e3385ea0 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x203e3385b98 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x203e3385c18 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x203e3385c98 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x203e3385d18 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x203e3385d98 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x203e3386290 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x203e3385f80 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x203e3386000 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x203e3386080 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x203e3386100 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x203e3386180 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x203e3386560 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x203e3386370 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x203e33863f0 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x203e3386470 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x203e338d890 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x203e3386630 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x203e33866b0 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x203e3386730 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x203e338d960 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-RecordDecl 0x203e338da28 <.//openssl//file_jk/before\crypto\bn\bn_ctx.c:43:9, line:48:1> line:43:16 invalid struct bignum_pool definition
| |-FieldDecl 0x203e338daf8 <line:45:5, col:19> col:19 invalid head 'int *'
| |-FieldDecl 0x203e338db68 <col:5, col:26> col:26 invalid current 'int *'
| |-FieldDecl 0x203e338dbd8 <col:5, col:36> col:36 invalid tail 'int *'
| |-FieldDecl 0x203e338dc48 <line:47:5, col:14> col:14 referenced used 'unsigned int'
| `-FieldDecl 0x203e338dcb8 <col:5, col:20> col:20 referenced size 'unsigned int'
|-TypedefDecl 0x203e338dd68 <line:43:1, line:48:3> col:3 referenced BN_POOL 'struct bignum_pool':'struct bignum_pool'
| `-ElaboratedType 0x203e338dd10 'struct bignum_pool' sugar
|   `-RecordType 0x203e338dac0 'struct bignum_pool'
|     `-Record 0x203e338da28 'bignum_pool'
|-FunctionDecl 0x203e338df58 <line:49:1, col:35> col:13 used BN_POOL_init 'void (BN_POOL *)' static
| `-ParmVarDecl 0x203e338de68 <col:26, col:34> col:35 'BN_POOL *'
|-FunctionDecl 0x203e338e100 <line:50:1, col:37> col:13 used BN_POOL_finish 'void (BN_POOL *)' static
| `-ParmVarDecl 0x203e338e070 <col:28, col:36> col:37 'BN_POOL *'
|-FunctionDecl 0x203e338e370 <line:51:1, col:42> col:16 invalid BN_POOL_get 'int *(BN_POOL *, int)' static
| |-ParmVarDecl 0x203e338e1d0 <col:28, col:36> col:37 'BN_POOL *'
| `-ParmVarDecl 0x203e338e250 <col:39> col:42 'int'
|-FunctionDecl 0x203e338e5c8 <line:52:1, col:52> col:13 used BN_POOL_release 'void (BN_POOL *, unsigned int)' static
| |-ParmVarDecl 0x203e338e430 <col:29, col:37> col:38 'BN_POOL *'
| `-ParmVarDecl 0x203e338e4b0 <col:40, col:49> col:52 'unsigned int'
|-RecordDecl 0x203e338e6f0 <line:59:9, line:64:1> line:59:16 struct bignum_ctx_stack definition
| |-FullComment 0x203e33956c0 <line:56:4, col:12>
| | `-ParagraphComment 0x203e3395698 <col:4, col:12>
| |   `-TextComment 0x203e3395670 <col:4, col:12> Text="*********"
| |-FieldDecl 0x203e338e7f0 <line:61:5, col:19> col:19 referenced indexes 'unsigned int *'
| |-FieldDecl 0x203e338b870 <line:63:5, col:18> col:18 referenced depth 'unsigned int'
| `-FieldDecl 0x203e338b8e0 <col:5, col:25> col:25 referenced size 'unsigned int'
|-TypedefDecl 0x203e338b998 <line:59:1, line:64:3> col:3 referenced BN_STACK 'struct bignum_ctx_stack':'struct bignum_ctx_stack'
| |-ElaboratedType 0x203e338b940 'struct bignum_ctx_stack' sugar
| | `-RecordType 0x203e338e790 'struct bignum_ctx_stack'
| |   `-Record 0x203e338e6f0 'bignum_ctx_stack'
| `-FullComment 0x203e3395788 <line:56:4, col:12>
|   `-ParagraphComment 0x203e3395760 <col:4, col:12>
|     `-TextComment 0x203e3395738 <col:4, col:12> Text="*********"
|-FunctionDecl 0x203e338bb88 <line:65:1, col:37> col:13 used BN_STACK_init 'void (BN_STACK *)' static
| `-ParmVarDecl 0x203e338ba98 <col:27, col:36> col:37 'BN_STACK *'
|-FunctionDecl 0x203e338bce8 <line:66:1, col:39> col:13 used BN_STACK_finish 'void (BN_STACK *)' static
| `-ParmVarDecl 0x203e338bc58 <col:29, col:38> col:39 'BN_STACK *'
|-FunctionDecl 0x203e338bf50 <line:67:1, col:50> col:12 used BN_STACK_push 'int (BN_STACK *, unsigned int)' static
| |-ParmVarDecl 0x203e338bdb8 <col:26, col:35> col:36 'BN_STACK *'
| `-ParmVarDecl 0x203e338be38 <col:38, col:47> col:50 'unsigned int'
|-FunctionDecl 0x203e338c120 <line:68:1, col:44> col:21 used BN_STACK_pop 'unsigned int (BN_STACK *)' static
| `-ParmVarDecl 0x203e338c028 <col:34, col:43> col:44 'BN_STACK *'
|-RecordDecl 0x203e338c240 <line:75:1, line:88:1> line:75:8 invalid struct bignum_ctx definition
| |-FullComment 0x203e33958b0 <line:72:4, col:10>
| | `-ParagraphComment 0x203e3395888 <col:4, col:10>
| |   `-TextComment 0x203e3395860 <col:4, col:10> Text="*******"
| |-FieldDecl 0x203e338c310 <line:77:5, col:13> col:13 invalid pool 'BN_POOL':'struct bignum_pool'
| |-FieldDecl 0x203e338c378 <line:79:5, col:14> col:14 stack 'BN_STACK':'struct bignum_ctx_stack'
| |-FieldDecl 0x203e338c3e8 <line:81:5, col:18> col:18 used 'unsigned int'
| |-FieldDecl 0x203e338c458 <line:83:5, col:9> col:9 err_stack 'int'
| |-FieldDecl 0x203e338c4c8 <line:85:5, col:9> col:9 too_many 'int'
| `-FieldDecl 0x203e338c538 <line:87:5, col:9> col:9 flags 'int'
|-FunctionDecl 0x203e338c660 <line:134:1, line:146:1> line:134:9 invalid BN_CTX_new 'int *(void)'
| `-CompoundStmt 0x203e338ea30 <line:135:1, line:146:1>
|   `-IfStmt 0x203e338e9d8 <line:138:5, line:141:5>
|     |-OpaqueValueExpr 0x203e338e9c0 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x203e338e9b0 <line:138:55, line:141:5>
|-FunctionDecl 0x203e338eae8 <line:148:1, line:155:1> line:148:9 invalid BN_CTX_secure_new 'int *(void)'
| `-CompoundStmt 0x203e338eba0 <line:149:1, line:155:1>
|-FunctionDecl 0x203e338ec58 <line:157:1, line:179:1> line:157:6 invalid BN_CTX_free 'void (int *)'
| |-ParmVarDecl 0x203e338ebc8 <col:18, col:26> col:26 invalid ctx 'int *'
| `-CompoundStmt 0x203e338eea8 <line:158:1, line:179:1>
|   `-IfStmt 0x203e338ed40 <line:159:5, line:160:9>
|     |-OpaqueValueExpr 0x203e338ed28 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x203e338ed18 <col:9>
|-FunctionDecl 0x203e338ef68 <line:181:1, line:193:1> line:181:6 invalid BN_CTX_start 'void (int *)'
| |-ParmVarDecl 0x203e338eed8 <col:19, col:27> col:27 invalid ctx 'int *'
| `-CompoundStmt 0x203e338f100 <line:182:1, line:193:1>
|   |-NullStmt 0x203e338f028 <line:183:38>
|   |-IfStmt 0x203e338f0d0 <line:185:5, line:191:5> has_else
|   | |-OpaqueValueExpr 0x203e338f0b8 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x203e338f0b0 <line:186:9>
|   | `-IfStmt 0x203e338f098 <line:188:10, line:191:5>
|   |   |-OpaqueValueExpr 0x203e338f080 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x203e338f070 <line:188:54, line:191:5>
|   `-NullStmt 0x203e338f0f8 <line:192:21>
|-FunctionDecl 0x203e338f1d0 <line:195:1, line:210:1> line:195:6 invalid BN_CTX_end 'void (int *)'
| |-ParmVarDecl 0x203e338f140 <col:17, col:25> col:25 invalid ctx 'int *'
| `-CompoundStmt 0x203e338f478 <line:196:1, line:210:1>
|   |-NullStmt 0x203e338f290 <line:197:36>
|   |-IfStmt 0x203e338f448 <line:198:5, line:208:5> has_else
|   | |-OpaqueValueExpr 0x203e338f430 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x203e338f428 <line:199:9>
|   | `-CompoundStmt 0x203e338f410 <line:200:10, line:208:5>
|   |   `-DeclStmt 0x203e338f338 <line:201:9, col:52>
|   |     `-VarDecl 0x203e338f2b0 <col:9, col:22> col:22 used fp 'unsigned int'
|   `-NullStmt 0x203e338f470 <line:209:21>
|-FunctionDecl 0x203e338f580 <line:212:1, line:233:1> line:212:9 invalid BN_CTX_get 'int *(int *)'
| |-ParmVarDecl 0x203e338f4b8 <col:20, col:28> col:28 invalid ctx 'int *'
| `-CompoundStmt 0x203e338f848 <line:213:1, line:233:1>
|   |-NullStmt 0x203e338f640 <line:216:36>
|   |-IfStmt 0x203e338f6b8 <line:219:5, line:227:5>
|   | |-OpaqueValueExpr 0x203e338f6a0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x203e338f690 <line:219:62, line:227:5>
|   `-NullStmt 0x203e338f7e0 <line:231:25>
|-FunctionDecl 0x203e33888e8 prev 0x203e338bb88 <line:239:1, line:243:1> line:239:13 used BN_STACK_init 'void (BN_STACK *)' static
| |-ParmVarDecl 0x203e3388840 <col:27, col:37> col:37 used st 'BN_STACK *'
| |-CompoundStmt 0x203e3388b48 <line:240:1, line:243:1>
| | `-BinaryOperator 0x203e3388b28 <line:242:5, col:28> 'unsigned int' '='
| |   |-MemberExpr 0x203e3388a30 <col:5, col:9> 'unsigned int' lvalue ->depth 0x203e338b870
| |   | `-ImplicitCastExpr 0x203e3388a18 <col:5> 'BN_STACK *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x203e33889f8 <col:5> 'BN_STACK *' lvalue ParmVar 0x203e3388840 'st' 'BN_STACK *'
| |   `-BinaryOperator 0x203e3388b08 <col:17, col:28> 'unsigned int' '='
| |     |-MemberExpr 0x203e3388a98 <col:17, col:21> 'unsigned int' lvalue ->size 0x203e338b8e0
| |     | `-ImplicitCastExpr 0x203e3388a80 <col:17> 'BN_STACK *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x203e3388a60 <col:17> 'BN_STACK *' lvalue ParmVar 0x203e3388840 'st' 'BN_STACK *'
| |     `-ImplicitCastExpr 0x203e3388af0 <col:28> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x203e3388ac8 <col:28> 'int' 0
| `-FullComment 0x203e3398a10 <line:237:4, col:12>
|   `-ParagraphComment 0x203e33989e8 <col:4, col:12>
|     `-TextComment 0x203e33989c0 <col:4, col:12> Text="*********"
|-FunctionDecl 0x203e3388c18 prev 0x203e338bce8 <line:245:1, line:249:1> line:245:13 used BN_STACK_finish 'void (BN_STACK *)' static
| |-ParmVarDecl 0x203e3388b70 <col:29, col:39> col:39 used st 'BN_STACK *'
| `-CompoundStmt 0x203e3388e38 <line:246:1, line:249:1>
|   `-CallExpr 0x203e3388d90 <line:247:5, col:29> 'int'
|     |-ImplicitCastExpr 0x203e3388d78 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x203e3388cc0 <col:5> 'int ()' Function 0x203e338edc0 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x203e3388db8 <col:18, col:22> 'unsigned int *' <LValueToRValue>
|       `-MemberExpr 0x203e3388d18 <col:18, col:22> 'unsigned int *' lvalue ->indexes 0x203e338e7f0
|         `-ImplicitCastExpr 0x203e3388d00 <col:18> 'BN_STACK *' <LValueToRValue>
|           `-DeclRefExpr 0x203e3388ce0 <col:18> 'BN_STACK *' lvalue ParmVar 0x203e3388b70 'st' 'BN_STACK *'
|-FunctionDecl 0x203e3388fb0 prev 0x203e338bf50 <line:252:1, line:269:1> line:252:12 used BN_STACK_push 'int (BN_STACK *, unsigned int)' static
| |-ParmVarDecl 0x203e3388e60 <col:26, col:36> col:36 used st 'BN_STACK *'
| |-ParmVarDecl 0x203e3388ee0 <col:40, col:53> col:53 used idx 'unsigned int'
| `-CompoundStmt 0x203e3390330 <line:253:1, line:269:1>
|   |-IfStmt 0x203e3390148 <line:254:5, line:266:5>
|   | |-BinaryOperator 0x203e3389160 <line:254:9, col:26> 'int' '=='
|   | | |-ImplicitCastExpr 0x203e3389130 <col:9, col:13> 'unsigned int' <LValueToRValue>
|   | | | `-MemberExpr 0x203e3389098 <col:9, col:13> 'unsigned int' lvalue ->depth 0x203e338b870
|   | | |   `-ImplicitCastExpr 0x203e3389080 <col:9> 'BN_STACK *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x203e3389060 <col:9> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   | | `-ImplicitCastExpr 0x203e3389148 <col:22, col:26> 'unsigned int' <LValueToRValue>
|   | |   `-MemberExpr 0x203e3389100 <col:22, col:26> 'unsigned int' lvalue ->size 0x203e338b8e0
|   | |     `-ImplicitCastExpr 0x203e33890e8 <col:22> 'BN_STACK *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x203e33890c8 <col:22> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   | `-CompoundStmt 0x203e3390100 <col:32, line:266:5>
|   |   |-DeclStmt 0x203e3389450 <line:256:9, line:257:64>
|   |   | `-VarDecl 0x203e3389198 <line:256:9, line:29:33> line:256:22 used newsize 'unsigned int' cinit
|   |   |   `-ConditionalOperator 0x203e3389420 <line:257:13, line:29:33> 'unsigned int'
|   |   |     |-ImplicitCastExpr 0x203e33893f0 <line:257:13, col:17> 'unsigned int' <LValueToRValue>
|   |   |     | `-MemberExpr 0x203e3389238 <col:13, col:17> 'unsigned int' lvalue ->size 0x203e338b8e0
|   |   |     |   `-ImplicitCastExpr 0x203e3389220 <col:13> 'BN_STACK *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x203e3389200 <col:13> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   |   |     |-ParenExpr 0x203e33893a8 <col:24, col:41> 'unsigned int'
|   |   |     | `-BinaryOperator 0x203e3389388 <col:25, col:40> 'unsigned int' '/'
|   |   |     |   |-BinaryOperator 0x203e3389328 <col:25, col:36> 'unsigned int' '*'
|   |   |     |   | |-ImplicitCastExpr 0x203e33892f8 <col:25, col:29> 'unsigned int' <LValueToRValue>
|   |   |     |   | | `-MemberExpr 0x203e33892a0 <col:25, col:29> 'unsigned int' lvalue ->size 0x203e338b8e0
|   |   |     |   | |   `-ImplicitCastExpr 0x203e3389288 <col:25> 'BN_STACK *' <LValueToRValue>
|   |   |     |   | |     `-DeclRefExpr 0x203e3389268 <col:25> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   |   |     |   | `-ImplicitCastExpr 0x203e3389310 <col:36> 'unsigned int' <IntegralCast>
|   |   |     |   |   `-IntegerLiteral 0x203e33892d0 <col:36> 'int' 3
|   |   |     |   `-ImplicitCastExpr 0x203e3389370 <col:40> 'unsigned int' <IntegralCast>
|   |   |     |     `-IntegerLiteral 0x203e3389348 <col:40> 'int' 2
|   |   |     `-ImplicitCastExpr 0x203e3389408 <line:29:33> 'unsigned int' <IntegralCast>
|   |   |       `-IntegerLiteral 0x203e33893c8 <col:33> 'int' 32
|   |   |-DeclStmt 0x203e3389768 <line:258:9, col:77>
|   |   | `-VarDecl 0x203e3389480 <col:9, col:76> col:23 used newitems 'unsigned int *' cinit
|   |   |   `-ImplicitCastExpr 0x203e3389750 <col:34, col:76> 'unsigned int *' <IntegralToPointer>
|   |   |     `-CallExpr 0x203e3389728 <col:34, col:76> 'int'
|   |   |       |-ImplicitCastExpr 0x203e3389710 <col:34> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x203e33895d8 <col:34> 'int ()' Function 0x203e3389510 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x203e33896f0 <col:49, col:69> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x203e3389668 <col:49, col:65> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x203e3389648 <col:55, col:65> 'unsigned int' lvalue
|   |   |         |   `-UnaryOperator 0x203e3389630 <col:56, col:57> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x203e3389618 <col:57> 'unsigned int *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x203e33895f8 <col:57> 'unsigned int *' lvalue Var 0x203e3389480 'newitems' 'unsigned int *' non_odr_use_unevaluated
|   |   |         `-ImplicitCastExpr 0x203e33896d8 <col:69> 'unsigned long long' <IntegralCast>
|   |   |           `-ImplicitCastExpr 0x203e33896c0 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x203e3389688 <col:69> 'unsigned int' lvalue Var 0x203e3389198 'newsize' 'unsigned int'
|   |   |-IfStmt 0x203e3389808 <line:259:9, line:260:20>
|   |   | |-OpaqueValueExpr 0x203e33897f0 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x203e33897e0 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x203e33897b8 <col:20> 'int' 0
|   |   |-IfStmt 0x203e338fe88 <line:261:9, line:262:72>
|   |   | |-ImplicitCastExpr 0x203e338f8f8 <line:261:13, col:17> 'unsigned int' <LValueToRValue>
|   |   | | `-MemberExpr 0x203e338f8c8 <col:13, col:17> 'unsigned int' lvalue ->depth 0x203e338b870
|   |   | |   `-ImplicitCastExpr 0x203e338f8b0 <col:13> 'BN_STACK *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x203e3389820 <col:13> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   |   | `-CallExpr 0x203e338fdf0 <line:262:13, col:72> 'void *'
|   |   |   |-ImplicitCastExpr 0x203e338fdd8 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x203e338fb70 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x203e338f980 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |   |-ImplicitCastExpr 0x203e338fe40 <col:20> 'void *' <BitCast>
|   |   |   | `-ImplicitCastExpr 0x203e338fe28 <col:20> 'unsigned int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x203e338fba8 <col:20> 'unsigned int *' lvalue Var 0x203e3389480 'newitems' 'unsigned int *'
|   |   |   |-ImplicitCastExpr 0x203e338fe70 <col:30, col:34> 'const void *' <BitCast>
|   |   |   | `-ImplicitCastExpr 0x203e338fe58 <col:30, col:34> 'unsigned int *' <LValueToRValue>
|   |   |   |   `-MemberExpr 0x203e338fc00 <col:30, col:34> 'unsigned int *' lvalue ->indexes 0x203e338e7f0
|   |   |   |     `-ImplicitCastExpr 0x203e338fbe8 <col:30> 'BN_STACK *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x203e338fbc8 <col:30> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   |   |   `-BinaryOperator 0x203e338fd58 <col:43, col:67> 'unsigned long long' '*'
|   |   |     |-UnaryExprOrTypeTraitExpr 0x203e338fca0 <col:43, col:59> 'unsigned long long' sizeof
|   |   |     | `-ParenExpr 0x203e338fc80 <col:49, col:59> 'unsigned int' lvalue
|   |   |     |   `-UnaryOperator 0x203e338fc68 <col:50, col:51> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   |     |     `-ImplicitCastExpr 0x203e338fc50 <col:51> 'unsigned int *' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x203e338fc30 <col:51> 'unsigned int *' lvalue Var 0x203e3389480 'newitems' 'unsigned int *' non_odr_use_unevaluated
|   |   |     `-ImplicitCastExpr 0x203e338fd40 <col:63, col:67> 'unsigned long long' <IntegralCast>
|   |   |       `-ImplicitCastExpr 0x203e338fd28 <col:63, col:67> 'unsigned int' <LValueToRValue>
|   |   |         `-MemberExpr 0x203e338fcf8 <col:63, col:67> 'unsigned int' lvalue ->depth 0x203e338b870
|   |   |           `-ImplicitCastExpr 0x203e338fce0 <col:63> 'BN_STACK *' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x203e338fcc0 <col:63> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   |   |-CallExpr 0x203e338ff40 <line:263:9, col:33> 'int'
|   |   | |-ImplicitCastExpr 0x203e338ff28 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x203e338fea0 <col:9> 'int ()' Function 0x203e338edc0 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x203e338ff68 <col:22, col:26> 'unsigned int *' <LValueToRValue>
|   |   |   `-MemberExpr 0x203e338fef8 <col:22, col:26> 'unsigned int *' lvalue ->indexes 0x203e338e7f0
|   |   |     `-ImplicitCastExpr 0x203e338fee0 <col:22> 'BN_STACK *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x203e338fec0 <col:22> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   |   |-BinaryOperator 0x203e3390020 <line:264:9, col:23> 'unsigned int *' '='
|   |   | |-MemberExpr 0x203e338ffb8 <col:9, col:13> 'unsigned int *' lvalue ->indexes 0x203e338e7f0
|   |   | | `-ImplicitCastExpr 0x203e338ffa0 <col:9> 'BN_STACK *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x203e338ff80 <col:9> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   |   | `-ImplicitCastExpr 0x203e3390008 <col:23> 'unsigned int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x203e338ffe8 <col:23> 'unsigned int *' lvalue Var 0x203e3389480 'newitems' 'unsigned int *'
|   |   `-BinaryOperator 0x203e33900e0 <line:265:9, col:20> 'unsigned int' '='
|   |     |-MemberExpr 0x203e3390078 <col:9, col:13> 'unsigned int' lvalue ->size 0x203e338b8e0
|   |     | `-ImplicitCastExpr 0x203e3390060 <col:9> 'BN_STACK *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x203e3390040 <col:9> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   |     `-ImplicitCastExpr 0x203e33900c8 <col:20> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x203e33900a8 <col:20> 'unsigned int' lvalue Var 0x203e3389198 'newsize' 'unsigned int'
|   |-BinaryOperator 0x203e33902d8 <line:267:5, col:34> 'unsigned int' '='
|   | |-ArraySubscriptExpr 0x203e3390280 <col:5, col:30> 'unsigned int' lvalue
|   | | |-ImplicitCastExpr 0x203e3390268 <col:5, col:9> 'unsigned int *' <LValueToRValue>
|   | | | `-MemberExpr 0x203e3390198 <col:5, col:9> 'unsigned int *' lvalue ->indexes 0x203e338e7f0
|   | | |   `-ImplicitCastExpr 0x203e3390180 <col:5> 'BN_STACK *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x203e3390160 <col:5> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   | | `-UnaryOperator 0x203e3390250 <col:17, col:28> 'unsigned int' postfix '++'
|   | |   `-ParenExpr 0x203e3390230 <col:17, col:27> 'unsigned int' lvalue
|   | |     `-MemberExpr 0x203e3390200 <col:18, col:22> 'unsigned int' lvalue ->depth 0x203e338b870
|   | |       `-ImplicitCastExpr 0x203e33901e8 <col:18> 'BN_STACK *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x203e33901c8 <col:18> 'BN_STACK *' lvalue ParmVar 0x203e3388e60 'st' 'BN_STACK *'
|   | `-ImplicitCastExpr 0x203e33902c0 <col:34> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x203e33902a0 <col:34> 'unsigned int' lvalue ParmVar 0x203e3388ee0 'idx' 'unsigned int'
|   `-ReturnStmt 0x203e3390320 <line:268:5, col:12>
|     `-IntegerLiteral 0x203e33902f8 <col:12> 'int' 1
|-FunctionDecl 0x203e338f980 <line:262:13> col:13 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x203e338fa20 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x203e338fa88 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x203e338faf0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x203e3390418 prev 0x203e338c120 <line:271:1, line:274:1> line:271:21 used BN_STACK_pop 'unsigned int (BN_STACK *)' static
| |-ParmVarDecl 0x203e3390368 <col:34, col:44> col:44 used st 'BN_STACK *'
| `-CompoundStmt 0x203e3390688 <line:272:1, line:274:1>
|   `-ReturnStmt 0x203e3390618 <line:273:5, col:37>
|     `-ImplicitCastExpr 0x203e3390600 <col:12, col:37> 'unsigned int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x203e33905e0 <col:12, col:37> 'unsigned int' lvalue
|         |-ImplicitCastExpr 0x203e33905c8 <col:12, col:16> 'unsigned int *' <LValueToRValue>
|         | `-MemberExpr 0x203e33904f8 <col:12, col:16> 'unsigned int *' lvalue ->indexes 0x203e338e7f0
|         |   `-ImplicitCastExpr 0x203e33904e0 <col:12> 'BN_STACK *' <LValueToRValue>
|         |     `-DeclRefExpr 0x203e33904c0 <col:12> 'BN_STACK *' lvalue ParmVar 0x203e3390368 'st' 'BN_STACK *'
|         `-UnaryOperator 0x203e33905b0 <col:24, col:36> 'unsigned int' prefix '--'
|           `-ParenExpr 0x203e3390590 <col:26, col:36> 'unsigned int' lvalue
|             `-MemberExpr 0x203e3390560 <col:27, col:31> 'unsigned int' lvalue ->depth 0x203e338b870
|               `-ImplicitCastExpr 0x203e3390548 <col:27> 'BN_STACK *' <LValueToRValue>
|                 `-DeclRefExpr 0x203e3390528 <col:27> 'BN_STACK *' lvalue ParmVar 0x203e3390368 'st' 'BN_STACK *'
|-FunctionDecl 0x203e3390758 prev 0x203e338df58 <line:280:1, line:284:1> line:280:13 used BN_POOL_init 'void (BN_POOL *)' static
| |-ParmVarDecl 0x203e33906b0 <col:26, col:35> col:35 used p 'BN_POOL *'
| |-CompoundStmt 0x203e3390a10 <line:281:1, line:284:1>
| | `-BinaryOperator 0x203e33909f0 <line:283:5, col:25> 'unsigned int' '='
| |   |-MemberExpr 0x203e33908f8 <col:5, col:8> 'unsigned int' lvalue ->used 0x203e338dc48
| |   | `-ImplicitCastExpr 0x203e33908e0 <col:5> 'BN_POOL *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x203e33908c0 <col:5> 'BN_POOL *' lvalue ParmVar 0x203e33906b0 'p' 'BN_POOL *'
| |   `-BinaryOperator 0x203e33909d0 <col:15, col:25> 'unsigned int' '='
| |     |-MemberExpr 0x203e3390960 <col:15, col:18> 'unsigned int' lvalue ->size 0x203e338dcb8
| |     | `-ImplicitCastExpr 0x203e3390948 <col:15> 'BN_POOL *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x203e3390928 <col:15> 'BN_POOL *' lvalue ParmVar 0x203e33906b0 'p' 'BN_POOL *'
| |     `-ImplicitCastExpr 0x203e33909b8 <col:25> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x203e3390990 <col:25> 'int' 0
| `-FullComment 0x203e3398b08 <line:278:4, col:11>
|   `-ParagraphComment 0x203e3398ae0 <col:4, col:11>
|     `-TextComment 0x203e3398ab8 <col:4, col:11> Text="********"
|-FunctionDecl 0x203e3390ae0 prev 0x203e338e100 <line:286:1, line:299:1> line:286:13 used BN_POOL_finish 'void (BN_POOL *)' static
| |-ParmVarDecl 0x203e3390a38 <col:28, col:37> col:37 used p 'BN_POOL *'
| `-CompoundStmt 0x203e3391018 <line:287:1, line:299:1>
|   `-DeclStmt 0x203e3390c08 <line:288:5, col:22>
|     `-VarDecl 0x203e3390ba0 <col:5, col:18> col:18 used loop 'unsigned int'
|-FunctionDecl 0x203e3391190 <line:302:1, line:338:1> line:302:16 invalid BN_POOL_get 'int *(BN_POOL *, int)' static
| |-ParmVarDecl 0x203e3391040 <col:28, col:37> col:37 used p 'BN_POOL *'
| |-ParmVarDecl 0x203e33910c0 <col:40, col:44> col:44 used flag 'int'
| `-CompoundStmt 0x203e3391ef8 <line:303:1, line:338:1>
|   |-DeclStmt 0x203e33912d8 <line:305:5, col:22>
|   | `-VarDecl 0x203e3391270 <col:5, col:18> col:18 used loop 'unsigned int'
|   `-IfStmt 0x203e3391ab0 <line:308:5, line:331:5>
|     |-BinaryOperator 0x203e33913f0 <line:308:9, col:23> 'int' '=='
|     | |-ImplicitCastExpr 0x203e33913c0 <col:9, col:12> 'unsigned int' <LValueToRValue>
|     | | `-MemberExpr 0x203e3391328 <col:9, col:12> 'unsigned int' lvalue ->used 0x203e338dc48
|     | |   `-ImplicitCastExpr 0x203e3391310 <col:9> 'BN_POOL *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x203e33912f0 <col:9> 'BN_POOL *' lvalue ParmVar 0x203e3391040 'p' 'BN_POOL *'
|     | `-ImplicitCastExpr 0x203e33913d8 <col:20, col:23> 'unsigned int' <LValueToRValue>
|     |   `-MemberExpr 0x203e3391390 <col:20, col:23> 'unsigned int' lvalue ->size 0x203e338dcb8
|     |     `-ImplicitCastExpr 0x203e3391378 <col:20> 'BN_POOL *' <LValueToRValue>
|     |       `-DeclRefExpr 0x203e3391358 <col:20> 'BN_POOL *' lvalue ParmVar 0x203e3391040 'p' 'BN_POOL *'
|     `-CompoundStmt 0x203e3391a80 <col:29, line:331:5>
|       |-ForStmt 0x203e33916c8 <line:312:9, line:316:9>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x203e3391540 <line:312:41, line:27:33> 'int' '<'
|       | | |-UnaryOperator 0x203e33914e8 <line:312:41, col:45> 'unsigned int' postfix '++'
|       | | | `-DeclRefExpr 0x203e33914c8 <col:41> 'unsigned int' lvalue Var 0x203e3391270 'loop' 'unsigned int'
|       | | `-ImplicitCastExpr 0x203e3391528 <line:27:33> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x203e3391500 <col:33> 'int' 16
|       | |-<<<NULL>>>
|       | `-CompoundStmt 0x203e33916b8 <line:312:74, line:316:9>
|       |-IfStmt 0x203e3391900 <line:320:9, line:326:9> has_else
|       | |-OpaqueValueExpr 0x203e33918e8 <<invalid sloc>> '_Bool'
|       | |-NullStmt 0x203e33918e0 <line:321:13>
|       | `-CompoundStmt 0x203e33918d0 <line:322:14, line:326:9>
|       |-CompoundAssignOperator 0x203e33919d0 <line:327:9, line:27:33> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       | |-MemberExpr 0x203e3391960 <line:327:9, col:12> 'unsigned int' lvalue ->size 0x203e338dcb8
|       | | `-ImplicitCastExpr 0x203e3391948 <col:9> 'BN_POOL *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x203e3391928 <col:9> 'BN_POOL *' lvalue ParmVar 0x203e3391040 'p' 'BN_POOL *'
|       | `-ImplicitCastExpr 0x203e33919b8 <line:27:33> 'unsigned int' <IntegralCast>
|       |   `-IntegerLiteral 0x203e3391990 <col:33> 'int' 16
|       `-UnaryOperator 0x203e3391a68 <line:328:9, col:16> 'unsigned int' postfix '++'
|         `-MemberExpr 0x203e3391a38 <col:9, col:12> 'unsigned int' lvalue ->used 0x203e338dc48
|           `-ImplicitCastExpr 0x203e3391a20 <col:9> 'BN_POOL *' <LValueToRValue>
|             `-DeclRefExpr 0x203e3391a00 <col:9> 'BN_POOL *' lvalue ParmVar 0x203e3391040 'p' 'BN_POOL *'
`-FunctionDecl 0x203e3392070 prev 0x203e338e5c8 <line:340:1, line:353:1> line:340:13 used BN_POOL_release 'void (BN_POOL *, unsigned int)' static
  |-ParmVarDecl 0x203e3391f28 <col:29, col:38> col:38 used p 'BN_POOL *'
  |-ParmVarDecl 0x203e3391fa8 <col:41, col:54> col:54 used num 'unsigned int'
  `-CompoundStmt 0x203e33926c0 <line:341:1, line:353:1>
    |-DeclStmt 0x203e3392300 <line:342:5, col:59>
    | `-VarDecl 0x203e3392138 <col:5, line:27:33> line:342:18 used offset 'unsigned int' cinit
    |   `-BinaryOperator 0x203e33922e0 <col:27, line:27:33> 'unsigned int' '%'
    |     |-ParenExpr 0x203e3392280 <line:342:27, col:39> 'unsigned int'
    |     | `-BinaryOperator 0x203e3392260 <col:28, col:38> 'unsigned int' '-'
    |     |   |-ImplicitCastExpr 0x203e3392230 <col:28, col:31> 'unsigned int' <LValueToRValue>
    |     |   | `-MemberExpr 0x203e33921d8 <col:28, col:31> 'unsigned int' lvalue ->used 0x203e338dc48
    |     |   |   `-ImplicitCastExpr 0x203e33921c0 <col:28> 'BN_POOL *' <LValueToRValue>
    |     |   |     `-DeclRefExpr 0x203e33921a0 <col:28> 'BN_POOL *' lvalue ParmVar 0x203e3391f28 'p' 'BN_POOL *'
    |     |   `-ImplicitCastExpr 0x203e3392248 <col:38> 'unsigned int' <IntegralCast>
    |     |     `-IntegerLiteral 0x203e3392208 <col:38> 'int' 1
    |     `-ImplicitCastExpr 0x203e33922c8 <line:27:33> 'unsigned int' <IntegralCast>
    |       `-IntegerLiteral 0x203e33922a0 <col:33> 'int' 16
    |-CompoundAssignOperator 0x203e33923b8 <line:344:5, col:16> 'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-MemberExpr 0x203e3392350 <col:5, col:8> 'unsigned int' lvalue ->used 0x203e338dc48
    | | `-ImplicitCastExpr 0x203e3392338 <col:5> 'BN_POOL *' <LValueToRValue>
    | |   `-DeclRefExpr 0x203e3392318 <col:5> 'BN_POOL *' lvalue ParmVar 0x203e3391f28 'p' 'BN_POOL *'
    | `-ImplicitCastExpr 0x203e33923a0 <col:16> 'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x203e3392380 <col:16> 'unsigned int' lvalue ParmVar 0x203e3391fa8 'num' 'unsigned int'
    `-WhileStmt 0x203e33926a8 <line:345:5, line:352:5>
      |-UnaryOperator 0x203e3392408 <line:345:12, col:15> 'unsigned int' postfix '--'
      | `-DeclRefExpr 0x203e33923e8 <col:12> 'unsigned int' lvalue ParmVar 0x203e3391fa8 'num' 'unsigned int'
      `-CompoundStmt 0x203e3392688 <col:19, line:352:5>
        |-NullStmt 0x203e3392420 <line:346:48>
        `-IfStmt 0x203e3392660 <line:347:9, line:351:19> has_else
          |-BinaryOperator 0x203e33924b8 <line:347:13, col:23> 'int' '=='
          | |-ImplicitCastExpr 0x203e3392488 <col:13> 'unsigned int' <LValueToRValue>
          | | `-DeclRefExpr 0x203e3392428 <col:13> 'unsigned int' lvalue Var 0x203e3392138 'offset' 'unsigned int'
          | `-ImplicitCastExpr 0x203e33924a0 <col:23> 'unsigned int' <IntegralCast>
          |   `-IntegerLiteral 0x203e3392460 <col:23> 'int' 0
          |-CompoundStmt 0x203e3392610 <col:26, line:350:9>
          | `-BinaryOperator 0x203e3392580 <line:348:13, col:41> 'unsigned int' '='
          |   |-DeclRefExpr 0x203e33924d8 <col:13> 'unsigned int' lvalue Var 0x203e3392138 'offset' 'unsigned int'
          |   `-ImplicitCastExpr 0x203e3392568 <line:27:33, line:348:41> 'unsigned int' <IntegralCast>
          |     `-BinaryOperator 0x203e3392548 <line:27:33, line:348:41> 'int' '-'
          |       |-IntegerLiteral 0x203e33924f8 <line:27:33> 'int' 16
          |       `-IntegerLiteral 0x203e3392520 <line:348:41> 'int' 1
          `-UnaryOperator 0x203e3392648 <line:351:13, col:19> 'unsigned int' postfix '--'
            `-DeclRefExpr 0x203e3392628 <col:13> 'unsigned int' lvalue Var 0x203e3392138 'offset' 'unsigned int'
