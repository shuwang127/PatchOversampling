TranslationUnitDecl 0x2383b6e3fb8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2383b6e4850 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2383b6e4550 '__int128'
|-TypedefDecl 0x2383b6e48c0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2383b6e4570 'unsigned __int128'
|-TypedefDecl 0x2383b6e4bf8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x2383b6e49b0 'struct __NSConstantString_tag'
|   `-Record 0x2383b6e4918 '__NSConstantString_tag'
|-TypedefDecl 0x2383b6e4c68 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x2383b6e4190 'unsigned long long'
|-TypedefDecl 0x2383b6e4d00 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2383b6e4cc0 'char *'
|   `-BuiltinType 0x2383b6e4050 'char'
|-TypedefDecl 0x2383b6e4d70 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x2383b6e4cc0 'char *'
|   `-BuiltinType 0x2383b6e4050 'char'
|-FunctionDecl 0x2383d091510 <.//openssl//file_jk/before\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x2383b6e4e10 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x2383b6e4e90 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x2383b6e4f10 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x2383d091410 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x2383d091818 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x2383d0915e8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x2383d091668 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x2383d0916e8 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x2383d091768 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x2383d091ad8 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x2383d0918f0 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x2383d091970 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x2383d0919f0 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x2383d091d90 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x2383d091ba8 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x2383d091c28 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x2383d091ca8 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x2383d0920e0 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x2383d091e60 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x2383d091ee0 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x2383d091f60 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x2383d091fe0 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x2383d094440 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x2383d0921b8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x2383d092238 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x2383d0922b8 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x2383d092338 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x2383d094500 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x2383d0945d8 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x2383d094648 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x2383d0946b8 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x2383d094728 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x2383d094798 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x2383d0947f0 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x2383d0948c8 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x2383d094938 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x2383d0949a8 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x2383d094a18 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x2383d094b10 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x2383d094b80 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x2383d094bd8 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x2383d094ca8 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x2383d094d18 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x2383d094d88 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x2383d094df8 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x2383d094e68 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x2383d094ec0 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x2383d094f98 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x2383d095008 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x2383d095060 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x2383d0953b0 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x2383d0926a8 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x2383d092758 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x2383d0928e8 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x2383d092828 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x2383d092a38 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x2383d0929a8 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x2383d092b88 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x2383d092af8 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x2383d092f48 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x2383d092c48 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x2383d092cc8 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x2383d092d48 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x2383d092dc8 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x2383d092e48 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x2383d093208 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x2383d093028 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x2383d0930a8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x2383d093128 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x2383d0934d0 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x2383d0932d8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x2383d093358 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x2383d093430 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x2383d093818 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x2383d0935a0 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x2383d093620 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x2383d0936a0 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x2383d093720 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x2383d093a48 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x2383d0938f0 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x2383d093970 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x2383d093c28 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x2383d093b10 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x2383d093b90 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x2383d093ee0 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x2383d093cf0 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x2383d093d70 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x2383d093df0 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x2383d094230 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x2383d093fb0 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x2383d094030 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x2383d0940b0 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x2383d094130 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x2383d0a65c8 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x2383d094308 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x2383d094388 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x2383d0a62a0 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x2383d0a6320 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x2383d0a63a0 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x2383d0a6420 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x2383d0a64a0 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x2383d0a6a78 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x2383d0a66b8 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x2383d0a6738 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x2383d0a67b8 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x2383d0a6838 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x2383d0a68b8 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x2383d0a6938 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x2383d0a69b8 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x2383d0a6d90 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x2383d0a6b68 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x2383d0a6be8 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x2383d0a6c68 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x2383d0a6ce8 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x2383d0a70d8 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x2383d0a6e68 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x2383d0a6ee8 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x2383d0a6f68 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x2383d0a6fe8 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x2383d0a3488 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x2383d0a71b0 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x2383d0a7230 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x2383d0a3288 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x2383d0a3308 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x2383d0a3388 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x2383d0a38f8 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x2383d0a3568 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x2383d0a35e8 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x2383d0a3668 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x2383d0a36e8 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x2383d0a3768 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x2383d0a37e8 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x2383d0a3cf0 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x2383d0a39e0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x2383d0a3a60 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x2383d0a3ae0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x2383d0a3b60 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x2383d0a3be0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x2383d0a4088 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x2383d0a3dd0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x2383d0a3e50 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x2383d0a3ed0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x2383d0a3f50 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x2383d0a3fd0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x2383d0a4520 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x2383d0a4168 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x2383d0a41e8 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x2383d0a4280 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x2383d0a4300 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x2383d0a4380 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x2383d0a4400 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x2383d0a4910 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x2383d0a4608 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x2383d0a4688 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x2383d0a4708 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x2383d0a4788 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x2383d0a4808 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x2383d0a4d00 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x2383d0a49f0 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x2383d0a4a70 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x2383d0a4af0 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x2383d0a4b70 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x2383d0a4bf0 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x2383d0a4fd0 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x2383d0a4de0 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x2383d0a4e60 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x2383d0a4ee0 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x2383d0a5290 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x2383d0a50a0 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x2383d0a5120 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x2383d0a51a0 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x2383d0a5360 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-RecordDecl 0x2383d0a5428 <.//openssl//file_jk/before\crypto\bn\bn_ctx.c:43:9, line:48:1> line:43:16 invalid struct bignum_pool definition
| |-FieldDecl 0x2383d0a54f8 <line:45:5, col:19> col:19 invalid head 'int *'
| |-FieldDecl 0x2383d0a5568 <col:5, col:26> col:26 invalid current 'int *'
| |-FieldDecl 0x2383d0a55d8 <col:5, col:36> col:36 invalid tail 'int *'
| |-FieldDecl 0x2383d0a5648 <line:47:5, col:14> col:14 referenced used 'unsigned int'
| `-FieldDecl 0x2383d0a56b8 <col:5, col:20> col:20 referenced size 'unsigned int'
|-TypedefDecl 0x2383d0a5768 <line:43:1, line:48:3> col:3 referenced BN_POOL 'struct bignum_pool':'struct bignum_pool'
| `-ElaboratedType 0x2383d0a5710 'struct bignum_pool' sugar
|   `-RecordType 0x2383d0a54c0 'struct bignum_pool'
|     `-Record 0x2383d0a5428 'bignum_pool'
|-FunctionDecl 0x2383d0a5958 <line:49:1, col:35> col:13 used BN_POOL_init 'void (BN_POOL *)' static
| `-ParmVarDecl 0x2383d0a5868 <col:26, col:34> col:35 'BN_POOL *'
|-FunctionDecl 0x2383d0a5b00 <line:50:1, col:37> col:13 used BN_POOL_finish 'void (BN_POOL *)' static
| `-ParmVarDecl 0x2383d0a5a70 <col:28, col:36> col:37 'BN_POOL *'
|-FunctionDecl 0x2383d0a5d70 <line:51:1, col:42> col:16 invalid BN_POOL_get 'int *(BN_POOL *, int)' static
| |-ParmVarDecl 0x2383d0a5bd0 <col:28, col:36> col:37 'BN_POOL *'
| `-ParmVarDecl 0x2383d0a5c50 <col:39> col:42 'int'
|-FunctionDecl 0x2383d0a5fc8 <line:52:1, col:52> col:13 used BN_POOL_release 'void (BN_POOL *, unsigned int)' static
| |-ParmVarDecl 0x2383d0a5e30 <col:29, col:37> col:38 'BN_POOL *'
| `-ParmVarDecl 0x2383d0a5eb0 <col:40, col:49> col:52 'unsigned int'
|-RecordDecl 0x2383d0a60f0 <line:59:9, line:64:1> line:59:16 struct bignum_ctx_stack definition
| |-FullComment 0x2383d0ae0d0 <line:56:4, col:12>
| | `-ParagraphComment 0x2383d0ae0a8 <col:4, col:12>
| |   `-TextComment 0x2383d0ae080 <col:4, col:12> Text="*********"
| |-FieldDecl 0x2383d0a61f0 <line:61:5, col:19> col:19 referenced indexes 'unsigned int *'
| |-FieldDecl 0x2383d0a2260 <line:63:5, col:18> col:18 referenced depth 'unsigned int'
| `-FieldDecl 0x2383d0a22d0 <col:5, col:25> col:25 referenced size 'unsigned int'
|-TypedefDecl 0x2383d0a2388 <line:59:1, line:64:3> col:3 referenced BN_STACK 'struct bignum_ctx_stack':'struct bignum_ctx_stack'
| |-ElaboratedType 0x2383d0a2330 'struct bignum_ctx_stack' sugar
| | `-RecordType 0x2383d0a6190 'struct bignum_ctx_stack'
| |   `-Record 0x2383d0a60f0 'bignum_ctx_stack'
| `-FullComment 0x2383d0ae198 <line:56:4, col:12>
|   `-ParagraphComment 0x2383d0ae170 <col:4, col:12>
|     `-TextComment 0x2383d0ae148 <col:4, col:12> Text="*********"
|-FunctionDecl 0x2383d0a2578 <line:65:1, col:37> col:13 used BN_STACK_init 'void (BN_STACK *)' static
| `-ParmVarDecl 0x2383d0a2488 <col:27, col:36> col:37 'BN_STACK *'
|-FunctionDecl 0x2383d0a26d8 <line:66:1, col:39> col:13 used BN_STACK_finish 'void (BN_STACK *)' static
| `-ParmVarDecl 0x2383d0a2648 <col:29, col:38> col:39 'BN_STACK *'
|-FunctionDecl 0x2383d0a2940 <line:67:1, col:50> col:12 used BN_STACK_push 'int (BN_STACK *, unsigned int)' static
| |-ParmVarDecl 0x2383d0a27a8 <col:26, col:35> col:36 'BN_STACK *'
| `-ParmVarDecl 0x2383d0a2828 <col:38, col:47> col:50 'unsigned int'
|-FunctionDecl 0x2383d0a2b10 <line:68:1, col:44> col:21 used BN_STACK_pop 'unsigned int (BN_STACK *)' static
| `-ParmVarDecl 0x2383d0a2a18 <col:34, col:43> col:44 'BN_STACK *'
|-RecordDecl 0x2383d0a2c30 <line:75:1, line:88:1> line:75:8 invalid struct bignum_ctx definition
| |-FullComment 0x2383d0ae2c0 <line:72:4, col:10>
| | `-ParagraphComment 0x2383d0ae298 <col:4, col:10>
| |   `-TextComment 0x2383d0ae270 <col:4, col:10> Text="*******"
| |-FieldDecl 0x2383d0a2d00 <line:77:5, col:13> col:13 invalid pool 'BN_POOL':'struct bignum_pool'
| |-FieldDecl 0x2383d0a2d68 <line:79:5, col:14> col:14 stack 'BN_STACK':'struct bignum_ctx_stack'
| |-FieldDecl 0x2383d0a2dd8 <line:81:5, col:18> col:18 used 'unsigned int'
| |-FieldDecl 0x2383d0a2e48 <line:83:5, col:9> col:9 err_stack 'int'
| |-FieldDecl 0x2383d0a2eb8 <line:85:5, col:9> col:9 too_many 'int'
| `-FieldDecl 0x2383d0a2f28 <line:87:5, col:9> col:9 flags 'int'
|-FunctionDecl 0x2383d0a3050 <line:134:1, line:146:1> line:134:9 invalid BN_CTX_new 'int *(void)'
| `-CompoundStmt 0x2383d0a9460 <line:135:1, line:146:1>
|   `-IfStmt 0x2383d0a9408 <line:138:5, line:141:5>
|     |-OpaqueValueExpr 0x2383d0a93f0 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x2383d0a93e0 <line:138:55, line:141:5>
|-FunctionDecl 0x2383d0a9518 <line:148:1, line:155:1> line:148:9 invalid BN_CTX_secure_new 'int *(void)'
| `-CompoundStmt 0x2383d0a95d0 <line:149:1, line:155:1>
|-FunctionDecl 0x2383d0a9688 <line:157:1, line:179:1> line:157:6 invalid BN_CTX_free 'void (int *)'
| |-ParmVarDecl 0x2383d0a95f8 <col:18, col:26> col:26 invalid ctx 'int *'
| `-CompoundStmt 0x2383d0a98d8 <line:158:1, line:179:1>
|   `-IfStmt 0x2383d0a9770 <line:159:5, line:160:9>
|     |-OpaqueValueExpr 0x2383d0a9758 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x2383d0a9748 <col:9>
|-FunctionDecl 0x2383d0a9998 <line:181:1, line:193:1> line:181:6 invalid BN_CTX_start 'void (int *)'
| |-ParmVarDecl 0x2383d0a9908 <col:19, col:27> col:27 invalid ctx 'int *'
| `-CompoundStmt 0x2383d0a9b30 <line:182:1, line:193:1>
|   |-NullStmt 0x2383d0a9a58 <line:183:38>
|   |-IfStmt 0x2383d0a9b00 <line:185:5, line:191:5> has_else
|   | |-OpaqueValueExpr 0x2383d0a9ae8 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x2383d0a9ae0 <line:186:9>
|   | `-IfStmt 0x2383d0a9ac8 <line:188:10, line:191:5>
|   |   |-OpaqueValueExpr 0x2383d0a9ab0 <<invalid sloc>> '_Bool'
|   |   `-CompoundStmt 0x2383d0a9aa0 <line:188:54, line:191:5>
|   `-NullStmt 0x2383d0a9b28 <line:192:21>
|-FunctionDecl 0x2383d0a9c00 <line:195:1, line:210:1> line:195:6 invalid BN_CTX_end 'void (int *)'
| |-ParmVarDecl 0x2383d0a9b70 <col:17, col:25> col:25 invalid ctx 'int *'
| `-CompoundStmt 0x2383d0a9ea8 <line:196:1, line:210:1>
|   |-NullStmt 0x2383d0a9cc0 <line:197:36>
|   |-IfStmt 0x2383d0a9e78 <line:198:5, line:208:5> has_else
|   | |-OpaqueValueExpr 0x2383d0a9e60 <<invalid sloc>> '_Bool'
|   | |-NullStmt 0x2383d0a9e58 <line:199:9>
|   | `-CompoundStmt 0x2383d0a9e40 <line:200:10, line:208:5>
|   |   `-DeclStmt 0x2383d0a9d68 <line:201:9, col:52>
|   |     `-VarDecl 0x2383d0a9ce0 <col:9, col:22> col:22 used fp 'unsigned int'
|   `-NullStmt 0x2383d0a9ea0 <line:209:21>
|-FunctionDecl 0x2383d0a9fb0 <line:212:1, line:233:1> line:212:9 invalid BN_CTX_get 'int *(int *)'
| |-ParmVarDecl 0x2383d0a9ee8 <col:20, col:28> col:28 invalid ctx 'int *'
| `-CompoundStmt 0x2383d0aa278 <line:213:1, line:233:1>
|   |-NullStmt 0x2383d0aa070 <line:216:36>
|   |-IfStmt 0x2383d0aa0e8 <line:219:5, line:227:5>
|   | |-OpaqueValueExpr 0x2383d0aa0d0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2383d0aa0c0 <line:219:62, line:227:5>
|   `-NullStmt 0x2383d0aa210 <line:231:25>
|-FunctionDecl 0x2383d0aa388 prev 0x2383d0a2578 <line:239:1, line:243:1> line:239:13 used BN_STACK_init 'void (BN_STACK *)' static
| |-ParmVarDecl 0x2383d0aa2e0 <col:27, col:37> col:37 used st 'BN_STACK *'
| |-CompoundStmt 0x2383d0aa5e8 <line:240:1, line:243:1>
| | `-BinaryOperator 0x2383d0aa5c8 <line:242:5, col:28> 'unsigned int' '='
| |   |-MemberExpr 0x2383d0aa4d0 <col:5, col:9> 'unsigned int' lvalue ->depth 0x2383d0a2260
| |   | `-ImplicitCastExpr 0x2383d0aa4b8 <col:5> 'BN_STACK *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x2383d0aa498 <col:5> 'BN_STACK *' lvalue ParmVar 0x2383d0aa2e0 'st' 'BN_STACK *'
| |   `-BinaryOperator 0x2383d0aa5a8 <col:17, col:28> 'unsigned int' '='
| |     |-MemberExpr 0x2383d0aa538 <col:17, col:21> 'unsigned int' lvalue ->size 0x2383d0a22d0
| |     | `-ImplicitCastExpr 0x2383d0aa520 <col:17> 'BN_STACK *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x2383d0aa500 <col:17> 'BN_STACK *' lvalue ParmVar 0x2383d0aa2e0 'st' 'BN_STACK *'
| |     `-ImplicitCastExpr 0x2383d0aa590 <col:28> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x2383d0aa568 <col:28> 'int' 0
| `-FullComment 0x2383d0b0410 <line:237:4, col:12>
|   `-ParagraphComment 0x2383d0b03e8 <col:4, col:12>
|     `-TextComment 0x2383d0b03c0 <col:4, col:12> Text="*********"
|-FunctionDecl 0x2383d0aa6b8 prev 0x2383d0a26d8 <line:245:1, line:249:1> line:245:13 used BN_STACK_finish 'void (BN_STACK *)' static
| |-ParmVarDecl 0x2383d0aa610 <col:29, col:39> col:39 used st 'BN_STACK *'
| `-CompoundStmt 0x2383d0aa8d8 <line:246:1, line:249:1>
|   `-CallExpr 0x2383d0aa830 <line:247:5, col:29> 'int'
|     |-ImplicitCastExpr 0x2383d0aa818 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2383d0aa760 <col:5> 'int ()' Function 0x2383d0a97f0 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x2383d0aa858 <col:18, col:22> 'unsigned int *' <LValueToRValue>
|       `-MemberExpr 0x2383d0aa7b8 <col:18, col:22> 'unsigned int *' lvalue ->indexes 0x2383d0a61f0
|         `-ImplicitCastExpr 0x2383d0aa7a0 <col:18> 'BN_STACK *' <LValueToRValue>
|           `-DeclRefExpr 0x2383d0aa780 <col:18> 'BN_STACK *' lvalue ParmVar 0x2383d0aa610 'st' 'BN_STACK *'
|-FunctionDecl 0x2383d0aaa50 prev 0x2383d0a2940 <line:252:1, line:269:1> line:252:12 used BN_STACK_push 'int (BN_STACK *, unsigned int)' static
| |-ParmVarDecl 0x2383d0aa900 <col:26, col:36> col:36 used st 'BN_STACK *'
| |-ParmVarDecl 0x2383d0aa980 <col:40, col:53> col:53 used idx 'unsigned int'
| `-CompoundStmt 0x2383d0acd80 <line:253:1, line:269:1>
|   |-IfStmt 0x2383d0acb98 <line:254:5, line:266:5>
|   | |-BinaryOperator 0x2383d0aac00 <line:254:9, col:26> 'int' '=='
|   | | |-ImplicitCastExpr 0x2383d0aabd0 <col:9, col:13> 'unsigned int' <LValueToRValue>
|   | | | `-MemberExpr 0x2383d0aab38 <col:9, col:13> 'unsigned int' lvalue ->depth 0x2383d0a2260
|   | | |   `-ImplicitCastExpr 0x2383d0aab20 <col:9> 'BN_STACK *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x2383d0aab00 <col:9> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   | | `-ImplicitCastExpr 0x2383d0aabe8 <col:22, col:26> 'unsigned int' <LValueToRValue>
|   | |   `-MemberExpr 0x2383d0aaba0 <col:22, col:26> 'unsigned int' lvalue ->size 0x2383d0a22d0
|   | |     `-ImplicitCastExpr 0x2383d0aab88 <col:22> 'BN_STACK *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x2383d0aab68 <col:22> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   | `-CompoundStmt 0x2383d0acb50 <col:32, line:266:5>
|   |   |-DeclStmt 0x2383d0aaef0 <line:256:9, line:257:64>
|   |   | `-VarDecl 0x2383d0aac38 <line:256:9, line:29:33> line:256:22 used newsize 'unsigned int' cinit
|   |   |   `-ConditionalOperator 0x2383d0aaec0 <line:257:13, line:29:33> 'unsigned int'
|   |   |     |-ImplicitCastExpr 0x2383d0aae90 <line:257:13, col:17> 'unsigned int' <LValueToRValue>
|   |   |     | `-MemberExpr 0x2383d0aacd8 <col:13, col:17> 'unsigned int' lvalue ->size 0x2383d0a22d0
|   |   |     |   `-ImplicitCastExpr 0x2383d0aacc0 <col:13> 'BN_STACK *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x2383d0aaca0 <col:13> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   |   |     |-ParenExpr 0x2383d0aae48 <col:24, col:41> 'unsigned int'
|   |   |     | `-BinaryOperator 0x2383d0aae28 <col:25, col:40> 'unsigned int' '/'
|   |   |     |   |-BinaryOperator 0x2383d0aadc8 <col:25, col:36> 'unsigned int' '*'
|   |   |     |   | |-ImplicitCastExpr 0x2383d0aad98 <col:25, col:29> 'unsigned int' <LValueToRValue>
|   |   |     |   | | `-MemberExpr 0x2383d0aad40 <col:25, col:29> 'unsigned int' lvalue ->size 0x2383d0a22d0
|   |   |     |   | |   `-ImplicitCastExpr 0x2383d0aad28 <col:25> 'BN_STACK *' <LValueToRValue>
|   |   |     |   | |     `-DeclRefExpr 0x2383d0aad08 <col:25> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   |   |     |   | `-ImplicitCastExpr 0x2383d0aadb0 <col:36> 'unsigned int' <IntegralCast>
|   |   |     |   |   `-IntegerLiteral 0x2383d0aad70 <col:36> 'int' 3
|   |   |     |   `-ImplicitCastExpr 0x2383d0aae10 <col:40> 'unsigned int' <IntegralCast>
|   |   |     |     `-IntegerLiteral 0x2383d0aade8 <col:40> 'int' 2
|   |   |     `-ImplicitCastExpr 0x2383d0aaea8 <line:29:33> 'unsigned int' <IntegralCast>
|   |   |       `-IntegerLiteral 0x2383d0aae68 <col:33> 'int' 32
|   |   |-DeclStmt 0x2383d0ab208 <line:258:9, col:77>
|   |   | `-VarDecl 0x2383d0aaf20 <col:9, col:76> col:23 used newitems 'unsigned int *' cinit
|   |   |   `-ImplicitCastExpr 0x2383d0ab1f0 <col:34, col:76> 'unsigned int *' <IntegralToPointer>
|   |   |     `-CallExpr 0x2383d0ab1c8 <col:34, col:76> 'int'
|   |   |       |-ImplicitCastExpr 0x2383d0ab1b0 <col:34> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x2383d0ab078 <col:34> 'int ()' Function 0x2383d0aafb0 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x2383d0ab190 <col:49, col:69> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x2383d0ab108 <col:49, col:65> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x2383d0ab0e8 <col:55, col:65> 'unsigned int' lvalue
|   |   |         |   `-UnaryOperator 0x2383d0ab0d0 <col:56, col:57> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x2383d0ab0b8 <col:57> 'unsigned int *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x2383d0ab098 <col:57> 'unsigned int *' lvalue Var 0x2383d0aaf20 'newitems' 'unsigned int *' non_odr_use_unevaluated
|   |   |         `-ImplicitCastExpr 0x2383d0ab178 <col:69> 'unsigned long long' <IntegralCast>
|   |   |           `-ImplicitCastExpr 0x2383d0ab160 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x2383d0ab128 <col:69> 'unsigned int' lvalue Var 0x2383d0aac38 'newsize' 'unsigned int'
|   |   |-IfStmt 0x2383d0ab2a8 <line:259:9, line:260:20>
|   |   | |-OpaqueValueExpr 0x2383d0ab290 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x2383d0ab280 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x2383d0ab258 <col:20> 'int' 0
|   |   |-IfStmt 0x2383d0ac8d8 <line:261:9, line:262:72>
|   |   | |-ImplicitCastExpr 0x2383d0ac348 <line:261:13, col:17> 'unsigned int' <LValueToRValue>
|   |   | | `-MemberExpr 0x2383d0ac318 <col:13, col:17> 'unsigned int' lvalue ->depth 0x2383d0a2260
|   |   | |   `-ImplicitCastExpr 0x2383d0ac300 <col:13> 'BN_STACK *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x2383d0ab2c0 <col:13> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   |   | `-CallExpr 0x2383d0ac840 <line:262:13, col:72> 'void *'
|   |   |   |-ImplicitCastExpr 0x2383d0ac828 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2383d0ac5c0 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x2383d0ac3d0 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |   |-ImplicitCastExpr 0x2383d0ac890 <col:20> 'void *' <BitCast>
|   |   |   | `-ImplicitCastExpr 0x2383d0ac878 <col:20> 'unsigned int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x2383d0ac5f8 <col:20> 'unsigned int *' lvalue Var 0x2383d0aaf20 'newitems' 'unsigned int *'
|   |   |   |-ImplicitCastExpr 0x2383d0ac8c0 <col:30, col:34> 'const void *' <BitCast>
|   |   |   | `-ImplicitCastExpr 0x2383d0ac8a8 <col:30, col:34> 'unsigned int *' <LValueToRValue>
|   |   |   |   `-MemberExpr 0x2383d0ac650 <col:30, col:34> 'unsigned int *' lvalue ->indexes 0x2383d0a61f0
|   |   |   |     `-ImplicitCastExpr 0x2383d0ac638 <col:30> 'BN_STACK *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x2383d0ac618 <col:30> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   |   |   `-BinaryOperator 0x2383d0ac7a8 <col:43, col:67> 'unsigned long long' '*'
|   |   |     |-UnaryExprOrTypeTraitExpr 0x2383d0ac6f0 <col:43, col:59> 'unsigned long long' sizeof
|   |   |     | `-ParenExpr 0x2383d0ac6d0 <col:49, col:59> 'unsigned int' lvalue
|   |   |     |   `-UnaryOperator 0x2383d0ac6b8 <col:50, col:51> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   |     |     `-ImplicitCastExpr 0x2383d0ac6a0 <col:51> 'unsigned int *' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x2383d0ac680 <col:51> 'unsigned int *' lvalue Var 0x2383d0aaf20 'newitems' 'unsigned int *' non_odr_use_unevaluated
|   |   |     `-ImplicitCastExpr 0x2383d0ac790 <col:63, col:67> 'unsigned long long' <IntegralCast>
|   |   |       `-ImplicitCastExpr 0x2383d0ac778 <col:63, col:67> 'unsigned int' <LValueToRValue>
|   |   |         `-MemberExpr 0x2383d0ac748 <col:63, col:67> 'unsigned int' lvalue ->depth 0x2383d0a2260
|   |   |           `-ImplicitCastExpr 0x2383d0ac730 <col:63> 'BN_STACK *' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x2383d0ac710 <col:63> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   |   |-CallExpr 0x2383d0ac990 <line:263:9, col:33> 'int'
|   |   | |-ImplicitCastExpr 0x2383d0ac978 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2383d0ac8f0 <col:9> 'int ()' Function 0x2383d0a97f0 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x2383d0ac9b8 <col:22, col:26> 'unsigned int *' <LValueToRValue>
|   |   |   `-MemberExpr 0x2383d0ac948 <col:22, col:26> 'unsigned int *' lvalue ->indexes 0x2383d0a61f0
|   |   |     `-ImplicitCastExpr 0x2383d0ac930 <col:22> 'BN_STACK *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x2383d0ac910 <col:22> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   |   |-BinaryOperator 0x2383d0aca70 <line:264:9, col:23> 'unsigned int *' '='
|   |   | |-MemberExpr 0x2383d0aca08 <col:9, col:13> 'unsigned int *' lvalue ->indexes 0x2383d0a61f0
|   |   | | `-ImplicitCastExpr 0x2383d0ac9f0 <col:9> 'BN_STACK *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x2383d0ac9d0 <col:9> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   |   | `-ImplicitCastExpr 0x2383d0aca58 <col:23> 'unsigned int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2383d0aca38 <col:23> 'unsigned int *' lvalue Var 0x2383d0aaf20 'newitems' 'unsigned int *'
|   |   `-BinaryOperator 0x2383d0acb30 <line:265:9, col:20> 'unsigned int' '='
|   |     |-MemberExpr 0x2383d0acac8 <col:9, col:13> 'unsigned int' lvalue ->size 0x2383d0a22d0
|   |     | `-ImplicitCastExpr 0x2383d0acab0 <col:9> 'BN_STACK *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x2383d0aca90 <col:9> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   |     `-ImplicitCastExpr 0x2383d0acb18 <col:20> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2383d0acaf8 <col:20> 'unsigned int' lvalue Var 0x2383d0aac38 'newsize' 'unsigned int'
|   |-BinaryOperator 0x2383d0acd28 <line:267:5, col:34> 'unsigned int' '='
|   | |-ArraySubscriptExpr 0x2383d0accd0 <col:5, col:30> 'unsigned int' lvalue
|   | | |-ImplicitCastExpr 0x2383d0accb8 <col:5, col:9> 'unsigned int *' <LValueToRValue>
|   | | | `-MemberExpr 0x2383d0acbe8 <col:5, col:9> 'unsigned int *' lvalue ->indexes 0x2383d0a61f0
|   | | |   `-ImplicitCastExpr 0x2383d0acbd0 <col:5> 'BN_STACK *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x2383d0acbb0 <col:5> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   | | `-UnaryOperator 0x2383d0acca0 <col:17, col:28> 'unsigned int' postfix '++'
|   | |   `-ParenExpr 0x2383d0acc80 <col:17, col:27> 'unsigned int' lvalue
|   | |     `-MemberExpr 0x2383d0acc50 <col:18, col:22> 'unsigned int' lvalue ->depth 0x2383d0a2260
|   | |       `-ImplicitCastExpr 0x2383d0acc38 <col:18> 'BN_STACK *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x2383d0acc18 <col:18> 'BN_STACK *' lvalue ParmVar 0x2383d0aa900 'st' 'BN_STACK *'
|   | `-ImplicitCastExpr 0x2383d0acd10 <col:34> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2383d0accf0 <col:34> 'unsigned int' lvalue ParmVar 0x2383d0aa980 'idx' 'unsigned int'
|   `-ReturnStmt 0x2383d0acd70 <line:268:5, col:12>
|     `-IntegerLiteral 0x2383d0acd48 <col:12> 'int' 1
|-FunctionDecl 0x2383d0ac3d0 <line:262:13> col:13 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x2383d0ac470 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2383d0ac4d8 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x2383d0ac540 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2383d0ace68 prev 0x2383d0a2b10 <line:271:1, line:274:1> line:271:21 used BN_STACK_pop 'unsigned int (BN_STACK *)' static
| |-ParmVarDecl 0x2383d0acdb8 <col:34, col:44> col:44 used st 'BN_STACK *'
| `-CompoundStmt 0x2383d0ad0d8 <line:272:1, line:274:1>
|   `-ReturnStmt 0x2383d0ad068 <line:273:5, col:37>
|     `-ImplicitCastExpr 0x2383d0ad050 <col:12, col:37> 'unsigned int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2383d0ad030 <col:12, col:37> 'unsigned int' lvalue
|         |-ImplicitCastExpr 0x2383d0ad018 <col:12, col:16> 'unsigned int *' <LValueToRValue>
|         | `-MemberExpr 0x2383d0acf48 <col:12, col:16> 'unsigned int *' lvalue ->indexes 0x2383d0a61f0
|         |   `-ImplicitCastExpr 0x2383d0acf30 <col:12> 'BN_STACK *' <LValueToRValue>
|         |     `-DeclRefExpr 0x2383d0acf10 <col:12> 'BN_STACK *' lvalue ParmVar 0x2383d0acdb8 'st' 'BN_STACK *'
|         `-UnaryOperator 0x2383d0ad000 <col:24, col:36> 'unsigned int' prefix '--'
|           `-ParenExpr 0x2383d0acfe0 <col:26, col:36> 'unsigned int' lvalue
|             `-MemberExpr 0x2383d0acfb0 <col:27, col:31> 'unsigned int' lvalue ->depth 0x2383d0a2260
|               `-ImplicitCastExpr 0x2383d0acf98 <col:27> 'BN_STACK *' <LValueToRValue>
|                 `-DeclRefExpr 0x2383d0acf78 <col:27> 'BN_STACK *' lvalue ParmVar 0x2383d0acdb8 'st' 'BN_STACK *'
|-FunctionDecl 0x2383d0ad1a8 prev 0x2383d0a5958 <line:280:1, line:284:1> line:280:13 used BN_POOL_init 'void (BN_POOL *)' static
| |-ParmVarDecl 0x2383d0ad100 <col:26, col:35> col:35 used p 'BN_POOL *'
| |-CompoundStmt 0x2383d0a7400 <line:281:1, line:284:1>
| | `-BinaryOperator 0x2383d0a73e0 <line:283:5, col:25> 'unsigned int' '='
| |   |-MemberExpr 0x2383d0a72e8 <col:5, col:8> 'unsigned int' lvalue ->used 0x2383d0a5648
| |   | `-ImplicitCastExpr 0x2383d0a72d0 <col:5> 'BN_POOL *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x2383d0a72b0 <col:5> 'BN_POOL *' lvalue ParmVar 0x2383d0ad100 'p' 'BN_POOL *'
| |   `-BinaryOperator 0x2383d0a73c0 <col:15, col:25> 'unsigned int' '='
| |     |-MemberExpr 0x2383d0a7350 <col:15, col:18> 'unsigned int' lvalue ->size 0x2383d0a56b8
| |     | `-ImplicitCastExpr 0x2383d0a7338 <col:15> 'BN_POOL *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x2383d0a7318 <col:15> 'BN_POOL *' lvalue ParmVar 0x2383d0ad100 'p' 'BN_POOL *'
| |     `-ImplicitCastExpr 0x2383d0a73a8 <col:25> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x2383d0a7380 <col:25> 'int' 0
| `-FullComment 0x2383d0b0508 <line:278:4, col:11>
|   `-ParagraphComment 0x2383d0b04e0 <col:4, col:11>
|     `-TextComment 0x2383d0b04b8 <col:4, col:11> Text="********"
|-FunctionDecl 0x2383d0a74d0 prev 0x2383d0a5b00 <line:286:1, line:299:1> line:286:13 used BN_POOL_finish 'void (BN_POOL *)' static
| |-ParmVarDecl 0x2383d0a7428 <col:28, col:37> col:37 used p 'BN_POOL *'
| `-CompoundStmt 0x2383d0a7a08 <line:287:1, line:299:1>
|   `-DeclStmt 0x2383d0a75f8 <line:288:5, col:22>
|     `-VarDecl 0x2383d0a7590 <col:5, col:18> col:18 used loop 'unsigned int'
|-FunctionDecl 0x2383d0a7b80 <line:302:1, line:338:1> line:302:16 invalid BN_POOL_get 'int *(BN_POOL *, int)' static
| |-ParmVarDecl 0x2383d0a7a30 <col:28, col:37> col:37 used p 'BN_POOL *'
| |-ParmVarDecl 0x2383d0a7ab0 <col:40, col:44> col:44 used flag 'int'
| `-CompoundStmt 0x2383d0af958 <line:303:1, line:338:1>
|   |-DeclStmt 0x2383d0a7cc8 <line:305:5, col:22>
|   | `-VarDecl 0x2383d0a7c60 <col:5, col:18> col:18 used loop 'unsigned int'
|   `-IfStmt 0x2383d0af510 <line:308:5, line:331:5>
|     |-BinaryOperator 0x2383d0a7de0 <line:308:9, col:23> 'int' '=='
|     | |-ImplicitCastExpr 0x2383d0a7db0 <col:9, col:12> 'unsigned int' <LValueToRValue>
|     | | `-MemberExpr 0x2383d0a7d18 <col:9, col:12> 'unsigned int' lvalue ->used 0x2383d0a5648
|     | |   `-ImplicitCastExpr 0x2383d0a7d00 <col:9> 'BN_POOL *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x2383d0a7ce0 <col:9> 'BN_POOL *' lvalue ParmVar 0x2383d0a7a30 'p' 'BN_POOL *'
|     | `-ImplicitCastExpr 0x2383d0a7dc8 <col:20, col:23> 'unsigned int' <LValueToRValue>
|     |   `-MemberExpr 0x2383d0a7d80 <col:20, col:23> 'unsigned int' lvalue ->size 0x2383d0a56b8
|     |     `-ImplicitCastExpr 0x2383d0a7d68 <col:20> 'BN_POOL *' <LValueToRValue>
|     |       `-DeclRefExpr 0x2383d0a7d48 <col:20> 'BN_POOL *' lvalue ParmVar 0x2383d0a7a30 'p' 'BN_POOL *'
|     `-CompoundStmt 0x2383d0af4e0 <col:29, line:331:5>
|       |-ForStmt 0x2383d0a80b8 <line:312:9, line:316:9>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x2383d0a7f30 <line:312:41, line:27:33> 'int' '<'
|       | | |-UnaryOperator 0x2383d0a7ed8 <line:312:41, col:45> 'unsigned int' postfix '++'
|       | | | `-DeclRefExpr 0x2383d0a7eb8 <col:41> 'unsigned int' lvalue Var 0x2383d0a7c60 'loop' 'unsigned int'
|       | | `-ImplicitCastExpr 0x2383d0a7f18 <line:27:33> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x2383d0a7ef0 <col:33> 'int' 16
|       | |-<<<NULL>>>
|       | `-CompoundStmt 0x2383d0a80a8 <line:312:74, line:316:9>
|       |-IfStmt 0x2383d0af360 <line:320:9, line:326:9> has_else
|       | |-OpaqueValueExpr 0x2383d0af348 <<invalid sloc>> '_Bool'
|       | |-NullStmt 0x2383d0af340 <line:321:13>
|       | `-CompoundStmt 0x2383d0af330 <line:322:14, line:326:9>
|       |-CompoundAssignOperator 0x2383d0af430 <line:327:9, line:27:33> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       | |-MemberExpr 0x2383d0af3c0 <line:327:9, col:12> 'unsigned int' lvalue ->size 0x2383d0a56b8
|       | | `-ImplicitCastExpr 0x2383d0af3a8 <col:9> 'BN_POOL *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x2383d0af388 <col:9> 'BN_POOL *' lvalue ParmVar 0x2383d0a7a30 'p' 'BN_POOL *'
|       | `-ImplicitCastExpr 0x2383d0af418 <line:27:33> 'unsigned int' <IntegralCast>
|       |   `-IntegerLiteral 0x2383d0af3f0 <col:33> 'int' 16
|       `-UnaryOperator 0x2383d0af4c8 <line:328:9, col:16> 'unsigned int' postfix '++'
|         `-MemberExpr 0x2383d0af498 <col:9, col:12> 'unsigned int' lvalue ->used 0x2383d0a5648
|           `-ImplicitCastExpr 0x2383d0af480 <col:9> 'BN_POOL *' <LValueToRValue>
|             `-DeclRefExpr 0x2383d0af460 <col:9> 'BN_POOL *' lvalue ParmVar 0x2383d0a7a30 'p' 'BN_POOL *'
`-FunctionDecl 0x2383d0afad0 prev 0x2383d0a5fc8 <line:340:1, line:353:1> line:340:13 used BN_POOL_release 'void (BN_POOL *, unsigned int)' static
  |-ParmVarDecl 0x2383d0af988 <col:29, col:38> col:38 used p 'BN_POOL *'
  |-ParmVarDecl 0x2383d0afa08 <col:41, col:54> col:54 used num 'unsigned int'
  `-CompoundStmt 0x2383d0b0120 <line:341:1, line:353:1>
    |-DeclStmt 0x2383d0afd60 <line:342:5, col:59>
    | `-VarDecl 0x2383d0afb98 <col:5, line:27:33> line:342:18 used offset 'unsigned int' cinit
    |   `-BinaryOperator 0x2383d0afd40 <col:27, line:27:33> 'unsigned int' '%'
    |     |-ParenExpr 0x2383d0afce0 <line:342:27, col:39> 'unsigned int'
    |     | `-BinaryOperator 0x2383d0afcc0 <col:28, col:38> 'unsigned int' '-'
    |     |   |-ImplicitCastExpr 0x2383d0afc90 <col:28, col:31> 'unsigned int' <LValueToRValue>
    |     |   | `-MemberExpr 0x2383d0afc38 <col:28, col:31> 'unsigned int' lvalue ->used 0x2383d0a5648
    |     |   |   `-ImplicitCastExpr 0x2383d0afc20 <col:28> 'BN_POOL *' <LValueToRValue>
    |     |   |     `-DeclRefExpr 0x2383d0afc00 <col:28> 'BN_POOL *' lvalue ParmVar 0x2383d0af988 'p' 'BN_POOL *'
    |     |   `-ImplicitCastExpr 0x2383d0afca8 <col:38> 'unsigned int' <IntegralCast>
    |     |     `-IntegerLiteral 0x2383d0afc68 <col:38> 'int' 1
    |     `-ImplicitCastExpr 0x2383d0afd28 <line:27:33> 'unsigned int' <IntegralCast>
    |       `-IntegerLiteral 0x2383d0afd00 <col:33> 'int' 16
    |-CompoundAssignOperator 0x2383d0afe18 <line:344:5, col:16> 'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-MemberExpr 0x2383d0afdb0 <col:5, col:8> 'unsigned int' lvalue ->used 0x2383d0a5648
    | | `-ImplicitCastExpr 0x2383d0afd98 <col:5> 'BN_POOL *' <LValueToRValue>
    | |   `-DeclRefExpr 0x2383d0afd78 <col:5> 'BN_POOL *' lvalue ParmVar 0x2383d0af988 'p' 'BN_POOL *'
    | `-ImplicitCastExpr 0x2383d0afe00 <col:16> 'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x2383d0afde0 <col:16> 'unsigned int' lvalue ParmVar 0x2383d0afa08 'num' 'unsigned int'
    `-WhileStmt 0x2383d0b0108 <line:345:5, line:352:5>
      |-UnaryOperator 0x2383d0afe68 <line:345:12, col:15> 'unsigned int' postfix '--'
      | `-DeclRefExpr 0x2383d0afe48 <col:12> 'unsigned int' lvalue ParmVar 0x2383d0afa08 'num' 'unsigned int'
      `-CompoundStmt 0x2383d0b00e8 <col:19, line:352:5>
        |-NullStmt 0x2383d0afe80 <line:346:48>
        `-IfStmt 0x2383d0b00c0 <line:347:9, line:351:19> has_else
          |-BinaryOperator 0x2383d0aff18 <line:347:13, col:23> 'int' '=='
          | |-ImplicitCastExpr 0x2383d0afee8 <col:13> 'unsigned int' <LValueToRValue>
          | | `-DeclRefExpr 0x2383d0afe88 <col:13> 'unsigned int' lvalue Var 0x2383d0afb98 'offset' 'unsigned int'
          | `-ImplicitCastExpr 0x2383d0aff00 <col:23> 'unsigned int' <IntegralCast>
          |   `-IntegerLiteral 0x2383d0afec0 <col:23> 'int' 0
          |-CompoundStmt 0x2383d0b0070 <col:26, line:350:9>
          | `-BinaryOperator 0x2383d0affe0 <line:348:13, col:41> 'unsigned int' '='
          |   |-DeclRefExpr 0x2383d0aff38 <col:13> 'unsigned int' lvalue Var 0x2383d0afb98 'offset' 'unsigned int'
          |   `-ImplicitCastExpr 0x2383d0affc8 <line:27:33, line:348:41> 'unsigned int' <IntegralCast>
          |     `-BinaryOperator 0x2383d0affa8 <line:27:33, line:348:41> 'int' '-'
          |       |-IntegerLiteral 0x2383d0aff58 <line:27:33> 'int' 16
          |       `-IntegerLiteral 0x2383d0aff80 <line:348:41> 'int' 1
          `-UnaryOperator 0x2383d0b00a8 <line:351:13, col:19> 'unsigned int' postfix '--'
            `-DeclRefExpr 0x2383d0b0088 <col:13> 'unsigned int' lvalue Var 0x2383d0afb98 'offset' 'unsigned int'
