TranslationUnitDecl 0x13a2f9b4ce8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13a2f9b5580 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13a2f9b5280 '__int128'
|-TypedefDecl 0x13a2f9b55f0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13a2f9b52a0 'unsigned __int128'
|-TypedefDecl 0x13a2f9b5928 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13a2f9b56e0 'struct __NSConstantString_tag'
|   `-Record 0x13a2f9b5648 '__NSConstantString_tag'
|-TypedefDecl 0x13a2f9b5998 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x13a2f9b4ec0 'unsigned long long'
|-TypedefDecl 0x13a2f9b5a30 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13a2f9b59f0 'char *'
|   `-BuiltinType 0x13a2f9b4d80 'char'
|-TypedefDecl 0x13a2f9b5aa0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13a2f9b59f0 'char *'
|   `-BuiltinType 0x13a2f9b4d80 'char'
|-FunctionDecl 0x13a3132f330 <.//openssl//file_jk/before\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x13a2f9b5b40 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x13a2f9b5bc0 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x13a2f9b5c40 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x13a3132f230 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x13a3132f638 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x13a3132f408 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x13a3132f488 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x13a3132f508 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x13a3132f588 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x13a3132f8f8 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x13a3132f710 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x13a3132f790 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x13a3132f810 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x13a3132fbb0 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x13a3132f9c8 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x13a3132fa48 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x13a3132fac8 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x13a3132ff00 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x13a3132fc80 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x13a3132fd00 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x13a3132fd80 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x13a3132fe00 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x13a313291d0 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x13a3132ffd8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x13a31330058 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x13a313300d8 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x13a31330158 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x13a31329290 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x13a31329368 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x13a313293d8 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x13a31329448 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x13a313294b8 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x13a31329528 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x13a31329580 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x13a31329658 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x13a313296c8 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x13a31329738 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x13a313297a8 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x13a313298a0 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x13a31329910 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x13a31329968 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x13a31329a38 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x13a31329aa8 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x13a31329b18 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x13a31329b88 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x13a31329bf8 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x13a31329c50 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x13a31329d28 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x13a31329d98 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x13a31329df0 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x13a3132a140 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x13a3132a468 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x13a3132a518 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x13a3132a6a8 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x13a3132a5e8 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x13a3132a7f8 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x13a3132a768 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x13a3132a948 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x13a3132a8b8 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x13a3132ad08 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x13a3132aa08 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x13a3132aa88 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x13a3132ab08 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x13a3132ab88 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x13a3132ac08 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x13a3132afc8 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x13a3132ade8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x13a3132ae68 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x13a3132aee8 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x13a313312f0 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x13a3132b098 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x13a3132b118 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x13a31331250 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x13a31331638 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x13a313313c0 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x13a31331440 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x13a313314c0 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x13a31331540 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x13a31331868 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x13a31331710 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x13a31331790 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x13a31331a48 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x13a31331930 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x13a313319b0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x13a31331d00 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x13a31331b10 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x13a31331b90 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x13a31331c10 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x13a31332050 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x13a31331dd0 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x13a31331e50 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x13a31331ed0 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x13a31331f50 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x13a31343bc8 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x13a31332128 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x13a313321a8 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x13a313438a0 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x13a31343920 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x13a313439a0 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x13a31343a20 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x13a31343aa0 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x13a31344078 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x13a31343cb8 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x13a31343d38 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x13a31343db8 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x13a31343e38 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x13a31343eb8 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x13a31343f38 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x13a31343fb8 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x13a31344390 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x13a31344168 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x13a313441e8 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x13a31344268 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x13a313442e8 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x13a313446d8 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x13a31344468 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x13a313444e8 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x13a31344568 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x13a313445e8 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x13a31345ad8 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x13a313447b0 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x13a31344830 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x13a313458d8 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x13a31345958 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x13a313459d8 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x13a31345f48 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x13a31345bb8 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x13a31345c38 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x13a31345cb8 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x13a31345d38 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x13a31345db8 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x13a31345e38 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x13a31346340 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x13a31346030 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x13a313460b0 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x13a31346130 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x13a313461b0 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x13a31346230 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x13a313466d8 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x13a31346420 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x13a313464a0 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x13a31346520 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x13a313465a0 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x13a31346620 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x13a31340b10 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x13a313467b8 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x13a31346838 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x13a31340870 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x13a313408f0 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x13a31340970 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x13a313409f0 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x13a31340f00 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x13a31340bf8 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x13a31340c78 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x13a31340cf8 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x13a31340d78 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x13a31340df8 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x13a313412f0 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x13a31340fe0 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x13a31341060 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x13a313410e0 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x13a31341160 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x13a313411e0 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x13a313415c0 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x13a313413d0 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x13a31341450 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x13a313414d0 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x13a31341880 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x13a31341690 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x13a31341710 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x13a31341790 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x13a31341950 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-FunctionDecl 0x13a31341c50 <.//openssl//file_jk/before\crypto\bn\bn_gcd.c:15:1, line:52:1> line:15:5 invalid BN_gcd 'int (int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x13a313419d0 <col:12, col:20> col:20 invalid r 'int *'
| |-ParmVarDecl 0x13a31341a50 <col:23, col:37> col:37 invalid in_a 'const int *'
| |-ParmVarDecl 0x13a31341ad0 <col:43, col:57> col:57 invalid in_b 'const int *'
| |-ParmVarDecl 0x13a31341b50 <col:63, col:71> col:71 invalid ctx 'int *'
| `-CompoundStmt 0x13a313428b8 <line:16:1, line:52:1>
|   |-DeclStmt 0x13a31341dd0 <line:18:5, col:16>
|   | `-VarDecl 0x13a31341d40 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x13a31341da8 <col:15> 'int' 0
|   |-NullStmt 0x13a31341de8 <line:20:23>
|   |-NullStmt 0x13a31341df0 <line:21:23>
|   |-IfStmt 0x13a31342128 <line:26:5, line:27:14>
|   | |-OpaqueValueExpr 0x13a31342110 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x13a313420f8 <col:9, col:14> 'err' 0x13a313420a8
|   |-IfStmt 0x13a31342280 <line:29:5, line:30:14>
|   | |-OpaqueValueExpr 0x13a31342268 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x13a31342250 <col:9, col:14> 'err' 0x13a313420a8
|   |-IfStmt 0x13a313422e8 <line:31:5, line:32:14>
|   | |-OpaqueValueExpr 0x13a313422d0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x13a313422b8 <col:9, col:14> 'err' 0x13a313420a8
|   |-IfStmt 0x13a313424b0 <line:36:5, line:40:5>
|   | |-OpaqueValueExpr 0x13a31342498 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x13a31342488 <line:36:27, line:40:5>
|   |-IfStmt 0x13a31342608 <line:42:5, line:43:14>
|   | |-OpaqueValueExpr 0x13a313425f0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x13a313425d8 <col:9, col:14> 'err' 0x13a313420a8
|   |-IfStmt 0x13a31342670 <line:45:5, line:46:14>
|   | |-OpaqueValueExpr 0x13a31342658 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x13a31342640 <col:9, col:14> 'err' 0x13a313420a8
|   |-BinaryOperator 0x13a313426e8 <line:47:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x13a31342688 <col:5> 'int' lvalue Var 0x13a31341d40 'ret' 'int'
|   | `-IntegerLiteral 0x13a313426c0 <col:11> 'int' 1
|   |-LabelStmt 0x13a31342820 <line:48:2, col:5> 'err'
|   | `-NullStmt 0x13a31342818 <col:5>
|   |-NullStmt 0x13a31342838 <line:50:20>
|   `-ReturnStmt 0x13a313428a8 <line:51:5, col:16>
|     `-ImplicitCastExpr 0x13a31342890 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x13a31342860 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x13a31342840 <col:13> 'int' lvalue Var 0x13a31341d40 'ret' 'int'
|-FunctionDecl 0x13a31342aa0 <line:54:1, line:117:1> line:54:16 invalid euclid 'int *(int *, int *)' static
| |-ParmVarDecl 0x13a31342948 <col:23, col:31> col:31 invalid a 'int *'
| |-ParmVarDecl 0x13a313429c8 <col:34, col:42> col:42 invalid b 'int *'
| `-CompoundStmt 0x13a3133e890 <line:55:1, line:117:1>
|   |-DeclStmt 0x13a31342c10 <line:57:5, col:19>
|   | `-VarDecl 0x13a31342b80 <col:5, col:18> col:9 used shifts 'int' cinit
|   |   `-IntegerLiteral 0x13a31342be8 <col:18> 'int' 0
|   |-NullStmt 0x13a31342c28 <line:59:20>
|   |-NullStmt 0x13a31342c30 <line:60:20>
|   |-IfStmt 0x13a3133e850 <line:109:5, line:112:5>
|   | |-ImplicitCastExpr 0x13a313436d8 <line:109:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x13a313436b8 <col:9> 'int' lvalue Var 0x13a31342b80 'shifts' 'int'
|   | `-CompoundStmt 0x13a31343868 <col:17, line:112:5>
|   |   `-IfStmt 0x13a31343850 <line:110:9, line:111:18>
|   |     |-OpaqueValueExpr 0x13a31343838 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x13a31343820 <col:13, col:18> 'err' 0x13a31342f88
|   |-NullStmt 0x13a3133e868 <line:113:20>
|   `-LabelStmt 0x13a3133e878 <line:115:2, col:5> 'err'
|     `-NullStmt 0x13a3133e870 <col:5>
|-FunctionDecl 0x13a3133eb60 <line:120:1, line:122:52> line:120:16 invalid BN_mod_inverse_no_branch 'int *(int *, const int *, const int *, int *)' static
| |-ParmVarDecl 0x13a3133e8e8 <col:41, col:49> col:49 invalid in 'int *'
| |-ParmVarDecl 0x13a3133e968 <line:121:41, col:55> col:55 invalid a 'const int *'
| |-ParmVarDecl 0x13a3133e9e8 <col:58, col:72> col:72 invalid n 'const int *'
| `-ParmVarDecl 0x13a3133ea68 <line:122:41, col:49> col:49 invalid ctx 'int *'
|-FunctionDecl 0x13a3133ee68 <line:124:1, line:133:1> line:124:9 invalid BN_mod_inverse 'int *(int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x13a3133ec38 <col:24, col:32> col:32 invalid in 'int *'
| |-ParmVarDecl 0x13a3133ecb8 <line:125:24, col:38> col:38 invalid a 'const int *'
| |-ParmVarDecl 0x13a3133ed38 <col:41, col:55> col:55 invalid n 'const int *'
| |-ParmVarDecl 0x13a3133edb8 <col:58, col:66> col:66 invalid ctx 'int *'
| `-CompoundStmt 0x13a3133f170 <line:126:1, line:133:1>
|   `-DeclStmt 0x13a3133efc0 <line:128:5, col:14>
|     `-VarDecl 0x13a3133ef58 <col:5, col:9> col:9 used noinv 'int'
|-FunctionDecl 0x13a3133f458 <line:135:1, line:452:1> line:135:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x13a3133f1a0 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x13a3133f220 <line:136:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x13a3133f2a0 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x13a3133f320 <col:62, col:70> col:70 invalid ctx 'int *'
| |-ParmVarDecl 0x13a3133f3a0 <line:137:28, col:33> col:33 used pnoinv 'int *'
| `-CompoundStmt 0x13a3134a1a0 <line:138:1, line:452:1>
|   |-DeclStmt 0x13a3133f5b8 <line:141:5, col:13>
|   | `-VarDecl 0x13a3133f550 <col:5, col:9> col:9 used sign 'int'
|   |-IfStmt 0x13a313468e8 <line:144:5, line:148:5>
|   | |-OpaqueValueExpr 0x13a313468d0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x13a3133f828 <line:144:48, line:148:5>
|   |   `-IfStmt 0x13a3133f810 <line:145:9, line:146:23>
|   |     |-OpaqueValueExpr 0x13a3133f7f8 <<invalid sloc>> '_Bool'
|   |     `-BinaryOperator 0x13a3133f7d8 <col:13, col:23> 'int' '='
|   |       |-UnaryOperator 0x13a3133f798 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |       | `-ImplicitCastExpr 0x13a3133f780 <col:14> 'int *' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x13a3133f760 <col:14> 'int *' lvalue ParmVar 0x13a3133f3a0 'pnoinv' 'int *'
|   |       `-IntegerLiteral 0x13a3133f7b0 <col:23> 'int' 1
|   |-IfStmt 0x13a313469d0 <line:150:5, line:151:19>
|   | |-OpaqueValueExpr 0x13a313469b8 <<invalid sloc>> '_Bool'
|   | `-BinaryOperator 0x13a31346998 <col:9, col:19> 'int' '='
|   |   |-UnaryOperator 0x13a31346958 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x13a31346940 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x13a31346920 <col:10> 'int *' lvalue ParmVar 0x13a3133f3a0 'pnoinv' 'int *'
|   |   `-IntegerLiteral 0x13a31346970 <col:19> 'int' 0
|   |-IfStmt 0x13a31346b90 <line:153:5, line:156:5>
|   | |-OpaqueValueExpr 0x13a31346b78 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x13a31346b68 <line:154:54, line:156:5>
|   |-NullStmt 0x13a31346ba8 <line:158:20>
|   |-NullStmt 0x13a31346bb0 <line:159:20>
|   |-IfStmt 0x13a31346d38 <line:169:5, line:170:14>
|   | |-OpaqueValueExpr 0x13a31346d20 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x13a31346d08 <col:9, col:14> 'err' 0x13a31346cb8
|   |-IfStmt 0x13a31346ef0 <line:176:5, line:177:14>
|   | |-OpaqueValueExpr 0x13a31346ed8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x13a31346ec0 <col:9, col:14> 'err' 0x13a31346cb8
|   |-IfStmt 0x13a31347178 <line:181:5, line:182:14>
|   | |-OpaqueValueExpr 0x13a31347160 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x13a31347148 <col:9, col:14> 'err' 0x13a31346cb8
|   |-IfStmt 0x13a313471e0 <line:183:5, line:184:14>
|   | |-OpaqueValueExpr 0x13a313471c8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x13a313471b0 <col:9, col:14> 'err' 0x13a31346cb8
|   |-IfStmt 0x13a313474e0 <line:186:5, line:189:5>
|   | |-OpaqueValueExpr 0x13a313474c8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x13a313474b0 <line:186:41, line:189:5>
|   |   `-IfStmt 0x13a31347498 <line:187:9, line:188:18>
|   |     |-OpaqueValueExpr 0x13a31347480 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x13a31347468 <col:13, col:18> 'err' 0x13a31346cb8
|   |-BinaryOperator 0x13a31347570 <line:190:5, col:13> 'int' '='
|   | |-DeclRefExpr 0x13a313474f8 <col:5> 'int' lvalue Var 0x13a3133f550 'sign' 'int'
|   | `-UnaryOperator 0x13a31347558 <col:12, col:13> 'int' prefix '-'
|   |   `-IntegerLiteral 0x13a31347530 <col:13> 'int' 1
|   |-IfStmt 0x13a31349be8 <line:199:5, line:415:5> has_else
|   | |-OpaqueValueExpr 0x13a31349bd0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x13a31340520 <line:199:51, line:293:5>
|   | | `-DeclStmt 0x13a31347768 <line:206:9, col:18>
|   | |   `-VarDecl 0x13a31347700 <col:9, col:13> col:13 used shift 'int'
|   | `-CompoundStmt 0x13a31349bc0 <line:293:12, line:415:5>
|   |-IfStmt 0x13a31349d10 <line:425:5, line:428:5>
|   | |-BinaryOperator 0x13a31349c70 <line:425:9, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x13a31349c58 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13a31349c10 <col:9> 'int' lvalue Var 0x13a3133f550 'sign' 'int'
|   | | `-IntegerLiteral 0x13a31349c30 <col:16> 'int' 0
|   | `-CompoundStmt 0x13a31349cf8 <col:19, line:428:5>
|   |   `-IfStmt 0x13a31349ce0 <line:426:9, line:427:18>
|   |     |-OpaqueValueExpr 0x13a31349cc8 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x13a31349cb0 <col:13, col:18> 'err' 0x13a31346cb8
|   |-IfStmt 0x13a3134a020 <line:431:5, line:444:5> has_else
|   | |-OpaqueValueExpr 0x13a3134a008 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x13a31349ed0 <line:431:23, line:440:5>
|   | | `-IfStmt 0x13a31349ea8 <line:433:9, line:439:9> has_else
|   | |   |-OpaqueValueExpr 0x13a31349e90 <<invalid sloc>> '_Bool'
|   | |   |-CompoundStmt 0x13a31349df8 <line:433:43, line:436:9>
|   | |   | `-IfStmt 0x13a31349de0 <line:434:13, line:435:22>
|   | |   |   |-OpaqueValueExpr 0x13a31349dc8 <<invalid sloc>> '_Bool'
|   | |   |   `-GotoStmt 0x13a31349db0 <col:17, col:22> 'err' 0x13a31346cb8
|   | |   `-CompoundStmt 0x13a31349e78 <line:436:16, line:439:9>
|   | |     `-IfStmt 0x13a31349e60 <line:437:13, line:438:22>
|   | |       |-OpaqueValueExpr 0x13a31349e48 <<invalid sloc>> '_Bool'
|   | |       `-GotoStmt 0x13a31349e30 <col:17, col:22> 'err' 0x13a31346cb8
|   | `-CompoundStmt 0x13a31349fe8 <line:440:12, line:444:5>
|   |   |-IfStmt 0x13a31349fb8 <line:441:9, line:442:23>
|   |   | |-ImplicitCastExpr 0x13a31349f08 <line:441:13> 'int *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x13a31349ee8 <col:13> 'int *' lvalue ParmVar 0x13a3133f3a0 'pnoinv' 'int *'
|   |   | `-BinaryOperator 0x13a31349f98 <line:442:13, col:23> 'int' '='
|   |   |   |-UnaryOperator 0x13a31349f58 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x13a31349f40 <col:14> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x13a31349f20 <col:14> 'int *' lvalue ParmVar 0x13a3133f3a0 'pnoinv' 'int *'
|   |   |   `-IntegerLiteral 0x13a31349f70 <col:23> 'int' 1
|   |   `-GotoStmt 0x13a31349fd0 <line:443:9, col:14> 'err' 0x13a31346cb8
|   |-LabelStmt 0x13a3134a160 <line:446:2, col:5> 'err'
|   | `-NullStmt 0x13a3134a158 <col:5>
|   `-NullStmt 0x13a3134a198 <line:450:22>
`-FunctionDecl 0x13a3134a480 <line:458:1, line:623:1> line:458:16 invalid BN_mod_inverse_no_branch 'int *(int *, const int *, const int *, int *)' static
  |-ParmVarDecl 0x13a3134a250 <col:41, col:49> col:49 invalid in 'int *'
  |-ParmVarDecl 0x13a3134a2d0 <line:459:41, col:55> col:55 invalid a 'const int *'
  |-ParmVarDecl 0x13a3134a350 <col:58, col:72> col:72 invalid n 'const int *'
  |-ParmVarDecl 0x13a3134a3d0 <line:460:41, col:49> col:49 invalid ctx 'int *'
  `-CompoundStmt 0x13a3134e288 <line:461:1, line:623:1>
    |-DeclStmt 0x13a3134a5d8 <line:464:5, col:13>
    | `-VarDecl 0x13a3134a570 <col:5, col:9> col:9 used sign 'int'
    |-NullStmt 0x13a3134a5f0 <line:466:20>
    |-NullStmt 0x13a3134a5f8 <line:467:20>
    |-IfStmt 0x13a3134a780 <line:477:5, line:478:14>
    | |-OpaqueValueExpr 0x13a3134a768 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x13a3134a750 <col:9, col:14> 'err' 0x13a3134a700
    |-IfStmt 0x13a3134a820 <line:484:5, line:485:14>
    | |-OpaqueValueExpr 0x13a3134a808 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x13a3134a7f0 <col:9, col:14> 'err' 0x13a3134a700
    |-IfStmt 0x13a3134a8c8 <line:489:5, line:490:14>
    | |-OpaqueValueExpr 0x13a3134a8b0 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x13a3134a898 <col:9, col:14> 'err' 0x13a3134a700
    |-IfStmt 0x13a3134d970 <line:491:5, line:492:14>
    | |-OpaqueValueExpr 0x13a3134d958 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x13a3134d940 <col:9, col:14> 'err' 0x13a3134a700
    |-IfStmt 0x13a3134dbb8 <line:495:5, line:508:5>
    | |-OpaqueValueExpr 0x13a3134dba0 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x13a3134db88 <line:495:41, line:508:5>
    |   `-CompoundStmt 0x13a3134db70 <line:500:10, line:507:9>
    |     `-IfStmt 0x13a3134db58 <line:504:13, line:505:22>
    |       |-OpaqueValueExpr 0x13a3134db40 <<invalid sloc>> '_Bool'
    |       `-GotoStmt 0x13a3134db28 <col:17, col:22> 'err' 0x13a3134a700
    |-BinaryOperator 0x13a3134dc48 <line:509:5, col:13> 'int' '='
    | |-DeclRefExpr 0x13a3134dbd0 <col:5> 'int' lvalue Var 0x13a3134a570 'sign' 'int'
    | `-UnaryOperator 0x13a3134dc30 <col:12, col:13> 'int' prefix '-'
    |   `-IntegerLiteral 0x13a3134dc08 <col:13> 'int' 1
    |-IfStmt 0x13a3134dfb8 <line:597:5, line:600:5>
    | |-BinaryOperator 0x13a3134df18 <line:597:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x13a3134df00 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13a3134deb8 <col:9> 'int' lvalue Var 0x13a3134a570 'sign' 'int'
    | | `-IntegerLiteral 0x13a3134ded8 <col:16> 'int' 0
    | `-CompoundStmt 0x13a3134dfa0 <col:19, line:600:5>
    |   `-IfStmt 0x13a3134df88 <line:598:9, line:599:18>
    |     |-OpaqueValueExpr 0x13a3134df70 <<invalid sloc>> '_Bool'
    |     `-GotoStmt 0x13a3134df58 <col:13, col:18> 'err' 0x13a3134a700
    |-IfStmt 0x13a3134e1f8 <line:603:5, line:615:5> has_else
    | |-OpaqueValueExpr 0x13a3134e1e0 <<invalid sloc>> '_Bool'
    | |-CompoundStmt 0x13a3134e178 <line:603:23, line:612:5>
    | | `-IfStmt 0x13a3134e150 <line:605:9, line:611:9> has_else
    | |   |-OpaqueValueExpr 0x13a3134e138 <<invalid sloc>> '_Bool'
    | |   |-CompoundStmt 0x13a3134e0a0 <line:605:43, line:608:9>
    | |   | `-IfStmt 0x13a3134e088 <line:606:13, line:607:22>
    | |   |   |-OpaqueValueExpr 0x13a3134e070 <<invalid sloc>> '_Bool'
    | |   |   `-GotoStmt 0x13a3134e058 <col:17, col:22> 'err' 0x13a3134a700
    | |   `-CompoundStmt 0x13a3134e120 <line:608:16, line:611:9>
    | |     `-IfStmt 0x13a3134e108 <line:609:13, line:610:22>
    | |       |-OpaqueValueExpr 0x13a3134e0f0 <<invalid sloc>> '_Bool'
    | |       `-GotoStmt 0x13a3134e0d8 <col:17, col:22> 'err' 0x13a3134a700
    | `-CompoundStmt 0x13a3134e1c8 <line:612:12, line:615:5>
    |   `-GotoStmt 0x13a3134e1b0 <line:614:9, col:14> 'err' 0x13a3134a700
    |-LabelStmt 0x13a3134e248 <line:617:2, col:5> 'err'
    | `-NullStmt 0x13a3134e240 <col:5>
    `-NullStmt 0x13a3134e280 <line:621:22>
