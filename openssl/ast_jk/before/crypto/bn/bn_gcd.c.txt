TranslationUnitDecl 0x222a78d3c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x222a78d44a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x222a78d41a0 '__int128'
|-TypedefDecl 0x222a78d4510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x222a78d41c0 'unsigned __int128'
|-TypedefDecl 0x222a78d4848 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x222a78d4600 'struct __NSConstantString_tag'
|   `-Record 0x222a78d4568 '__NSConstantString_tag'
|-TypedefDecl 0x222a78d48b8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x222a78d3de0 'unsigned long long'
|-TypedefDecl 0x222a78d4950 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x222a78d4910 'char *'
|   `-BuiltinType 0x222a78d3ca0 'char'
|-TypedefDecl 0x222a78d49c0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x222a78d4910 'char *'
|   `-BuiltinType 0x222a78d3ca0 'char'
|-FunctionDecl 0x222a91cd790 <.//openssl//file_jk/before\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x222a78d4a60 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x222a78d4ae0 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x222a78d4b60 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x222a91cd690 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x222a91cda98 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x222a91cd868 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x222a91cd8e8 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x222a91cd968 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x222a91cd9e8 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x222a91cdd58 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x222a91cdb70 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x222a91cdbf0 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x222a91cdc70 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x222a91ce010 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x222a91cde28 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x222a91cdea8 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x222a91cdf28 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x222a91ce360 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x222a91ce0e0 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x222a91ce160 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x222a91ce1e0 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x222a91ce260 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x222a91cc680 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x222a91ce438 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x222a91ce4b8 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x222a91ce538 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x222a91ce5b8 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x222a91cc740 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x222a91cc818 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x222a91cc888 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x222a91cc8f8 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x222a91cc968 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x222a91cc9d8 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x222a91cca30 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x222a91ccb08 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x222a91ccb78 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x222a91ccbe8 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x222a91ccc58 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x222a91ccd50 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x222a91ccdc0 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x222a91cce18 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x222a91ccee8 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x222a91ccf58 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x222a91ccfc8 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x222a91cd038 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x222a91cd0a8 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x222a91cd100 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x222a91cd1d8 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x222a91cd248 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x222a91cd2a0 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x222a91cd5f0 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x222a91c78b8 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x222a91c7968 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x222a91c7af8 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x222a91c7a38 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x222a91c7c48 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x222a91c7bb8 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x222a91c7d98 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x222a91c7d08 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x222a91c8158 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x222a91c7e58 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x222a91c7ed8 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x222a91c7f58 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x222a91c7fd8 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x222a91c8058 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x222a91c8418 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x222a91c8238 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x222a91c82b8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x222a91c8338 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x222a91cb710 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x222a91c84e8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x222a91c8568 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x222a91cb670 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x222a91cba58 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x222a91cb7e0 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x222a91cb860 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x222a91cb8e0 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x222a91cb960 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x222a91cbc88 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x222a91cbb30 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x222a91cbbb0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x222a91cbe68 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x222a91cbd50 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x222a91cbdd0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x222a91cc120 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x222a91cbf30 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x222a91cbfb0 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x222a91cc030 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x222a91cc470 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x222a91cc1f0 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x222a91cc270 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x222a91cc2f0 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x222a91cc370 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x222a91e4ec8 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x222a91cc548 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x222a91cc5c8 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x222a91e4ba0 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x222a91e4c20 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x222a91e4ca0 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x222a91e4d20 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x222a91e4da0 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x222a91e5378 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x222a91e4fb8 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x222a91e5038 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x222a91e50b8 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x222a91e5138 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x222a91e51b8 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x222a91e5238 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x222a91e52b8 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x222a91e5690 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x222a91e5468 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x222a91e54e8 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x222a91e5568 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x222a91e55e8 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x222a91e59d8 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x222a91e5768 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x222a91e57e8 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x222a91e5868 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x222a91e58e8 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x222a91ded58 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x222a91e5ab0 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x222a91e5b30 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x222a91deb58 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x222a91debd8 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x222a91dec58 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x222a91df1c8 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x222a91dee38 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x222a91deeb8 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x222a91def38 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x222a91defb8 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x222a91df038 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x222a91df0b8 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x222a91df5c0 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x222a91df2b0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x222a91df330 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x222a91df3b0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x222a91df430 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x222a91df4b0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x222a91df958 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x222a91df6a0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x222a91df720 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x222a91df7a0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x222a91df820 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x222a91df8a0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x222a91e0e00 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x222a91dfa38 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x222a91dfab8 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x222a91e0b60 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x222a91e0be0 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x222a91e0c60 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x222a91e0ce0 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x222a91e11f0 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x222a91e0ee8 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x222a91e0f68 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x222a91e0fe8 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x222a91e1068 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x222a91e10e8 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x222a91e15e0 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x222a91e12d0 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x222a91e1350 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x222a91e13d0 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x222a91e1450 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x222a91e14d0 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x222a91e18b0 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x222a91e16c0 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x222a91e1740 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x222a91e17c0 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x222a91e3b90 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x222a91e1980 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x222a91e1a00 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x222a91e1a80 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x222a91e3c60 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-FunctionDecl 0x222a91e3f60 <.//openssl//file_jk/before\crypto\bn\bn_gcd.c:15:1, line:52:1> line:15:5 invalid BN_gcd 'int (int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x222a91e3ce0 <col:12, col:20> col:20 invalid r 'int *'
| |-ParmVarDecl 0x222a91e3d60 <col:23, col:37> col:37 invalid in_a 'const int *'
| |-ParmVarDecl 0x222a91e3de0 <col:43, col:57> col:57 invalid in_b 'const int *'
| |-ParmVarDecl 0x222a91e3e60 <col:63, col:71> col:71 invalid ctx 'int *'
| `-CompoundStmt 0x222a91e1b98 <line:16:1, line:52:1>
|   |-DeclStmt 0x222a91e40e0 <line:18:5, col:16>
|   | `-VarDecl 0x222a91e4050 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x222a91e40b8 <col:15> 'int' 0
|   |-NullStmt 0x222a91e40f8 <line:20:23>
|   |-NullStmt 0x222a91e4100 <line:21:23>
|   |-IfStmt 0x222a91e4438 <line:26:5, line:27:14>
|   | |-OpaqueValueExpr 0x222a91e4420 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x222a91e4408 <col:9, col:14> 'err' 0x222a91e43b8
|   |-IfStmt 0x222a91e4590 <line:29:5, line:30:14>
|   | |-OpaqueValueExpr 0x222a91e4578 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x222a91e4560 <col:9, col:14> 'err' 0x222a91e43b8
|   |-IfStmt 0x222a91e45f8 <line:31:5, line:32:14>
|   | |-OpaqueValueExpr 0x222a91e45e0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x222a91e45c8 <col:9, col:14> 'err' 0x222a91e43b8
|   |-IfStmt 0x222a91e47c0 <line:36:5, line:40:5>
|   | |-OpaqueValueExpr 0x222a91e47a8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x222a91e4798 <line:36:27, line:40:5>
|   |-IfStmt 0x222a91e4918 <line:42:5, line:43:14>
|   | |-OpaqueValueExpr 0x222a91e4900 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x222a91e48e8 <col:9, col:14> 'err' 0x222a91e43b8
|   |-IfStmt 0x222a91e4980 <line:45:5, line:46:14>
|   | |-OpaqueValueExpr 0x222a91e4968 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x222a91e4950 <col:9, col:14> 'err' 0x222a91e43b8
|   |-BinaryOperator 0x222a91e49f8 <line:47:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x222a91e4998 <col:5> 'int' lvalue Var 0x222a91e4050 'ret' 'int'
|   | `-IntegerLiteral 0x222a91e49d0 <col:11> 'int' 1
|   |-LabelStmt 0x222a91e4b30 <line:48:2, col:5> 'err'
|   | `-NullStmt 0x222a91e4b28 <col:5>
|   |-NullStmt 0x222a91e4b48 <line:50:20>
|   `-ReturnStmt 0x222a91e1b88 <line:51:5, col:16>
|     `-ImplicitCastExpr 0x222a91e1b70 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x222a91e4b70 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x222a91e4b50 <col:13> 'int' lvalue Var 0x222a91e4050 'ret' 'int'
|-FunctionDecl 0x222a91e1d80 <line:54:1, line:117:1> line:54:16 invalid euclid 'int *(int *, int *)' static
| |-ParmVarDecl 0x222a91e1c28 <col:23, col:31> col:31 invalid a 'int *'
| |-ParmVarDecl 0x222a91e1ca8 <col:34, col:42> col:42 invalid b 'int *'
| `-CompoundStmt 0x222a91ddb70 <line:55:1, line:117:1>
|   |-DeclStmt 0x222a91e1ef0 <line:57:5, col:19>
|   | `-VarDecl 0x222a91e1e60 <col:5, col:18> col:9 used shifts 'int' cinit
|   |   `-IntegerLiteral 0x222a91e1ec8 <col:18> 'int' 0
|   |-NullStmt 0x222a91e1f08 <line:59:20>
|   |-NullStmt 0x222a91e1f10 <line:60:20>
|   |-IfStmt 0x222a91ddb30 <line:109:5, line:112:5>
|   | |-ImplicitCastExpr 0x222a91e29b8 <line:109:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x222a91e2998 <col:9> 'int' lvalue Var 0x222a91e1e60 'shifts' 'int'
|   | `-CompoundStmt 0x222a91e2b48 <col:17, line:112:5>
|   |   `-IfStmt 0x222a91e2b30 <line:110:9, line:111:18>
|   |     |-OpaqueValueExpr 0x222a91e2b18 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x222a91e2b00 <col:13, col:18> 'err' 0x222a91e2268
|   |-NullStmt 0x222a91ddb48 <line:113:20>
|   `-LabelStmt 0x222a91ddb58 <line:115:2, col:5> 'err'
|     `-NullStmt 0x222a91ddb50 <col:5>
|-FunctionDecl 0x222a91dde40 <line:120:1, line:122:52> line:120:16 invalid BN_mod_inverse_no_branch 'int *(int *, const int *, const int *, int *)' static
| |-ParmVarDecl 0x222a91ddbc8 <col:41, col:49> col:49 invalid in 'int *'
| |-ParmVarDecl 0x222a91ddc48 <line:121:41, col:55> col:55 invalid a 'const int *'
| |-ParmVarDecl 0x222a91ddcc8 <col:58, col:72> col:72 invalid n 'const int *'
| `-ParmVarDecl 0x222a91ddd48 <line:122:41, col:49> col:49 invalid ctx 'int *'
|-FunctionDecl 0x222a91de148 <line:124:1, line:133:1> line:124:9 invalid BN_mod_inverse 'int *(int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x222a91ddf18 <col:24, col:32> col:32 invalid in 'int *'
| |-ParmVarDecl 0x222a91ddf98 <line:125:24, col:38> col:38 invalid a 'const int *'
| |-ParmVarDecl 0x222a91de018 <col:41, col:55> col:55 invalid n 'const int *'
| |-ParmVarDecl 0x222a91de098 <col:58, col:66> col:66 invalid ctx 'int *'
| `-CompoundStmt 0x222a91de450 <line:126:1, line:133:1>
|   `-DeclStmt 0x222a91de2a0 <line:128:5, col:14>
|     `-VarDecl 0x222a91de238 <col:5, col:9> col:9 used noinv 'int'
|-FunctionDecl 0x222a91de738 <line:135:1, line:452:1> line:135:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x222a91de480 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x222a91de500 <line:136:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x222a91de580 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x222a91de600 <col:62, col:70> col:70 invalid ctx 'int *'
| |-ParmVarDecl 0x222a91de680 <line:137:28, col:33> col:33 used pnoinv 'int *'
| `-CompoundStmt 0x222a91ea490 <line:138:1, line:452:1>
|   |-DeclStmt 0x222a91de898 <line:141:5, col:13>
|   | `-VarDecl 0x222a91de830 <col:5, col:9> col:9 used sign 'int'
|   |-IfStmt 0x222a91e5bc8 <line:144:5, line:148:5>
|   | |-OpaqueValueExpr 0x222a91e5bb0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x222a91deb08 <line:144:48, line:148:5>
|   |   `-IfStmt 0x222a91deaf0 <line:145:9, line:146:23>
|   |     |-OpaqueValueExpr 0x222a91dead8 <<invalid sloc>> '_Bool'
|   |     `-BinaryOperator 0x222a91deab8 <col:13, col:23> 'int' '='
|   |       |-UnaryOperator 0x222a91dea78 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |       | `-ImplicitCastExpr 0x222a91dea60 <col:14> 'int *' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x222a91dea40 <col:14> 'int *' lvalue ParmVar 0x222a91de680 'pnoinv' 'int *'
|   |       `-IntegerLiteral 0x222a91dea90 <col:23> 'int' 1
|   |-IfStmt 0x222a91e5cb0 <line:150:5, line:151:19>
|   | |-OpaqueValueExpr 0x222a91e5c98 <<invalid sloc>> '_Bool'
|   | `-BinaryOperator 0x222a91e5c78 <col:9, col:19> 'int' '='
|   |   |-UnaryOperator 0x222a91e5c38 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x222a91e5c20 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x222a91e5c00 <col:10> 'int *' lvalue ParmVar 0x222a91de680 'pnoinv' 'int *'
|   |   `-IntegerLiteral 0x222a91e5c50 <col:19> 'int' 0
|   |-IfStmt 0x222a91e5e70 <line:153:5, line:156:5>
|   | |-OpaqueValueExpr 0x222a91e5e58 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x222a91e5e48 <line:154:54, line:156:5>
|   |-NullStmt 0x222a91e5e88 <line:158:20>
|   |-NullStmt 0x222a91e5e90 <line:159:20>
|   |-IfStmt 0x222a91e6018 <line:169:5, line:170:14>
|   | |-OpaqueValueExpr 0x222a91e6000 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x222a91e5fe8 <col:9, col:14> 'err' 0x222a91e5f98
|   |-IfStmt 0x222a91e61d0 <line:176:5, line:177:14>
|   | |-OpaqueValueExpr 0x222a91e61b8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x222a91e61a0 <col:9, col:14> 'err' 0x222a91e5f98
|   |-IfStmt 0x222a91e6458 <line:181:5, line:182:14>
|   | |-OpaqueValueExpr 0x222a91e6440 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x222a91e6428 <col:9, col:14> 'err' 0x222a91e5f98
|   |-IfStmt 0x222a91e64c0 <line:183:5, line:184:14>
|   | |-OpaqueValueExpr 0x222a91e64a8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x222a91e6490 <col:9, col:14> 'err' 0x222a91e5f98
|   |-IfStmt 0x222a91e67c0 <line:186:5, line:189:5>
|   | |-OpaqueValueExpr 0x222a91e67a8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x222a91e6790 <line:186:41, line:189:5>
|   |   `-IfStmt 0x222a91e6778 <line:187:9, line:188:18>
|   |     |-OpaqueValueExpr 0x222a91e6760 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x222a91e6748 <col:13, col:18> 'err' 0x222a91e5f98
|   |-BinaryOperator 0x222a91e6850 <line:190:5, col:13> 'int' '='
|   | |-DeclRefExpr 0x222a91e67d8 <col:5> 'int' lvalue Var 0x222a91de830 'sign' 'int'
|   | `-UnaryOperator 0x222a91e6838 <col:12, col:13> 'int' prefix '-'
|   |   `-IntegerLiteral 0x222a91e6810 <col:13> 'int' 1
|   |-IfStmt 0x222a91e9ed8 <line:199:5, line:415:5> has_else
|   | |-OpaqueValueExpr 0x222a91e9ec0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x222a91e7880 <line:199:51, line:293:5>
|   | | `-DeclStmt 0x222a91e6a48 <line:206:9, col:18>
|   | |   `-VarDecl 0x222a91e69e0 <col:9, col:13> col:13 used shift 'int'
|   | `-CompoundStmt 0x222a91e9eb0 <line:293:12, line:415:5>
|   |-IfStmt 0x222a91ea000 <line:425:5, line:428:5>
|   | |-BinaryOperator 0x222a91e9f60 <line:425:9, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x222a91e9f48 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x222a91e9f00 <col:9> 'int' lvalue Var 0x222a91de830 'sign' 'int'
|   | | `-IntegerLiteral 0x222a91e9f20 <col:16> 'int' 0
|   | `-CompoundStmt 0x222a91e9fe8 <col:19, line:428:5>
|   |   `-IfStmt 0x222a91e9fd0 <line:426:9, line:427:18>
|   |     |-OpaqueValueExpr 0x222a91e9fb8 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x222a91e9fa0 <col:13, col:18> 'err' 0x222a91e5f98
|   |-IfStmt 0x222a91ea310 <line:431:5, line:444:5> has_else
|   | |-OpaqueValueExpr 0x222a91ea2f8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x222a91ea1c0 <line:431:23, line:440:5>
|   | | `-IfStmt 0x222a91ea198 <line:433:9, line:439:9> has_else
|   | |   |-OpaqueValueExpr 0x222a91ea180 <<invalid sloc>> '_Bool'
|   | |   |-CompoundStmt 0x222a91ea0e8 <line:433:43, line:436:9>
|   | |   | `-IfStmt 0x222a91ea0d0 <line:434:13, line:435:22>
|   | |   |   |-OpaqueValueExpr 0x222a91ea0b8 <<invalid sloc>> '_Bool'
|   | |   |   `-GotoStmt 0x222a91ea0a0 <col:17, col:22> 'err' 0x222a91e5f98
|   | |   `-CompoundStmt 0x222a91ea168 <line:436:16, line:439:9>
|   | |     `-IfStmt 0x222a91ea150 <line:437:13, line:438:22>
|   | |       |-OpaqueValueExpr 0x222a91ea138 <<invalid sloc>> '_Bool'
|   | |       `-GotoStmt 0x222a91ea120 <col:17, col:22> 'err' 0x222a91e5f98
|   | `-CompoundStmt 0x222a91ea2d8 <line:440:12, line:444:5>
|   |   |-IfStmt 0x222a91ea2a8 <line:441:9, line:442:23>
|   |   | |-ImplicitCastExpr 0x222a91ea1f8 <line:441:13> 'int *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x222a91ea1d8 <col:13> 'int *' lvalue ParmVar 0x222a91de680 'pnoinv' 'int *'
|   |   | `-BinaryOperator 0x222a91ea288 <line:442:13, col:23> 'int' '='
|   |   |   |-UnaryOperator 0x222a91ea248 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x222a91ea230 <col:14> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x222a91ea210 <col:14> 'int *' lvalue ParmVar 0x222a91de680 'pnoinv' 'int *'
|   |   |   `-IntegerLiteral 0x222a91ea260 <col:23> 'int' 1
|   |   `-GotoStmt 0x222a91ea2c0 <line:443:9, col:14> 'err' 0x222a91e5f98
|   |-LabelStmt 0x222a91ea450 <line:446:2, col:5> 'err'
|   | `-NullStmt 0x222a91ea448 <col:5>
|   `-NullStmt 0x222a91ea488 <line:450:22>
`-FunctionDecl 0x222a91ea770 <line:458:1, line:623:1> line:458:16 invalid BN_mod_inverse_no_branch 'int *(int *, const int *, const int *, int *)' static
  |-ParmVarDecl 0x222a91ea540 <col:41, col:49> col:49 invalid in 'int *'
  |-ParmVarDecl 0x222a91ea5c0 <line:459:41, col:55> col:55 invalid a 'const int *'
  |-ParmVarDecl 0x222a91ea640 <col:58, col:72> col:72 invalid n 'const int *'
  |-ParmVarDecl 0x222a91ea6c0 <line:460:41, col:49> col:49 invalid ctx 'int *'
  `-CompoundStmt 0x222a91e34c8 <line:461:1, line:623:1>
    |-DeclStmt 0x222a91ea8c8 <line:464:5, col:13>
    | `-VarDecl 0x222a91ea860 <col:5, col:9> col:9 used sign 'int'
    |-NullStmt 0x222a91ea8e0 <line:466:20>
    |-NullStmt 0x222a91ea8e8 <line:467:20>
    |-IfStmt 0x222a91eaa70 <line:477:5, line:478:14>
    | |-OpaqueValueExpr 0x222a91eaa58 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x222a91eaa40 <col:9, col:14> 'err' 0x222a91ea9f0
    |-IfStmt 0x222a91eab10 <line:484:5, line:485:14>
    | |-OpaqueValueExpr 0x222a91eaaf8 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x222a91eaae0 <col:9, col:14> 'err' 0x222a91ea9f0
    |-IfStmt 0x222a91eabb8 <line:489:5, line:490:14>
    | |-OpaqueValueExpr 0x222a91eaba0 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x222a91eab88 <col:9, col:14> 'err' 0x222a91ea9f0
    |-IfStmt 0x222a91e2bb0 <line:491:5, line:492:14>
    | |-OpaqueValueExpr 0x222a91e2b98 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x222a91e2b80 <col:9, col:14> 'err' 0x222a91ea9f0
    |-IfStmt 0x222a91e2df8 <line:495:5, line:508:5>
    | |-OpaqueValueExpr 0x222a91e2de0 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x222a91e2dc8 <line:495:41, line:508:5>
    |   `-CompoundStmt 0x222a91e2db0 <line:500:10, line:507:9>
    |     `-IfStmt 0x222a91e2d98 <line:504:13, line:505:22>
    |       |-OpaqueValueExpr 0x222a91e2d80 <<invalid sloc>> '_Bool'
    |       `-GotoStmt 0x222a91e2d68 <col:17, col:22> 'err' 0x222a91ea9f0
    |-BinaryOperator 0x222a91e2e88 <line:509:5, col:13> 'int' '='
    | |-DeclRefExpr 0x222a91e2e10 <col:5> 'int' lvalue Var 0x222a91ea860 'sign' 'int'
    | `-UnaryOperator 0x222a91e2e70 <col:12, col:13> 'int' prefix '-'
    |   `-IntegerLiteral 0x222a91e2e48 <col:13> 'int' 1
    |-IfStmt 0x222a91e31f8 <line:597:5, line:600:5>
    | |-BinaryOperator 0x222a91e3158 <line:597:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x222a91e3140 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x222a91e30f8 <col:9> 'int' lvalue Var 0x222a91ea860 'sign' 'int'
    | | `-IntegerLiteral 0x222a91e3118 <col:16> 'int' 0
    | `-CompoundStmt 0x222a91e31e0 <col:19, line:600:5>
    |   `-IfStmt 0x222a91e31c8 <line:598:9, line:599:18>
    |     |-OpaqueValueExpr 0x222a91e31b0 <<invalid sloc>> '_Bool'
    |     `-GotoStmt 0x222a91e3198 <col:13, col:18> 'err' 0x222a91ea9f0
    |-IfStmt 0x222a91e3438 <line:603:5, line:615:5> has_else
    | |-OpaqueValueExpr 0x222a91e3420 <<invalid sloc>> '_Bool'
    | |-CompoundStmt 0x222a91e33b8 <line:603:23, line:612:5>
    | | `-IfStmt 0x222a91e3390 <line:605:9, line:611:9> has_else
    | |   |-OpaqueValueExpr 0x222a91e3378 <<invalid sloc>> '_Bool'
    | |   |-CompoundStmt 0x222a91e32e0 <line:605:43, line:608:9>
    | |   | `-IfStmt 0x222a91e32c8 <line:606:13, line:607:22>
    | |   |   |-OpaqueValueExpr 0x222a91e32b0 <<invalid sloc>> '_Bool'
    | |   |   `-GotoStmt 0x222a91e3298 <col:17, col:22> 'err' 0x222a91ea9f0
    | |   `-CompoundStmt 0x222a91e3360 <line:608:16, line:611:9>
    | |     `-IfStmt 0x222a91e3348 <line:609:13, line:610:22>
    | |       |-OpaqueValueExpr 0x222a91e3330 <<invalid sloc>> '_Bool'
    | |       `-GotoStmt 0x222a91e3318 <col:17, col:22> 'err' 0x222a91ea9f0
    | `-CompoundStmt 0x222a91e3408 <line:612:12, line:615:5>
    |   `-GotoStmt 0x222a91e33f0 <line:614:9, col:14> 'err' 0x222a91ea9f0
    |-LabelStmt 0x222a91e3488 <line:617:2, col:5> 'err'
    | `-NullStmt 0x222a91e3480 <col:5>
    `-NullStmt 0x222a91e34c0 <line:621:22>
