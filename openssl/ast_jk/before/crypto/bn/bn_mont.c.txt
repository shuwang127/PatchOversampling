TranslationUnitDecl 0x1a6da273bb8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1a6da274450 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1a6da274150 '__int128'
|-TypedefDecl 0x1a6da2744c0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1a6da274170 'unsigned __int128'
|-TypedefDecl 0x1a6da2747f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1a6da2745b0 'struct __NSConstantString_tag'
|   `-Record 0x1a6da274518 '__NSConstantString_tag'
|-TypedefDecl 0x1a6da274868 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1a6da273d90 'unsigned long long'
|-TypedefDecl 0x1a6da274900 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1a6da2748c0 'char *'
|   `-BuiltinType 0x1a6da273c50 'char'
|-TypedefDecl 0x1a6da274970 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1a6da2748c0 'char *'
|   `-BuiltinType 0x1a6da273c50 'char'
|-FunctionDecl 0x1a6dbb62b70 <.//openssl//file_jk/before\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1a6da274a10 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x1a6da274a90 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x1a6da274b10 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x1a6dbb62a70 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x1a6dbb62e78 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x1a6dbb62c48 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1a6dbb62cc8 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1a6dbb62d48 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x1a6dbb62dc8 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x1a6dbb63138 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x1a6dbb62f50 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x1a6dbb62fd0 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x1a6dbb63050 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x1a6dbb633f0 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x1a6dbb63208 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x1a6dbb63288 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x1a6dbb63308 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x1a6dbb63740 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1a6dbb634c0 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1a6dbb63540 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1a6dbb635c0 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x1a6dbb63640 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x1a6dbb5ca10 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1a6dbb63818 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x1a6dbb63898 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x1a6dbb63918 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x1a6dbb63998 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x1a6dbb5cad0 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x1a6dbb5cba8 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x1a6dbb5cc18 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x1a6dbb5cc88 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x1a6dbb5ccf8 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x1a6dbb5cd68 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1a6dbb5cdc0 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x1a6dbb5ce98 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x1a6dbb5cf08 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x1a6dbb5cf78 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x1a6dbb5cfe8 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x1a6dbb5d0e0 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x1a6dbb5d150 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1a6dbb5d1a8 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x1a6dbb5d278 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x1a6dbb5d2e8 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x1a6dbb5d358 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x1a6dbb5d3c8 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x1a6dbb5d438 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x1a6dbb5d490 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x1a6dbb5d568 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x1a6dbb5d5d8 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x1a6dbb5d630 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x1a6dbb5d980 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x1a6dbb63d08 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x1a6dbb63db8 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x1a6dbb63f48 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x1a6dbb63e88 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x1a6dbb64098 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x1a6dbb64008 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x1a6dbb641e8 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x1a6dbb64158 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x1a6dbb645a8 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x1a6dbb642a8 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb64328 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x1a6dbb643a8 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x1a6dbb64428 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x1a6dbb644a8 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x1a6dbb64868 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x1a6dbb64688 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb64708 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x1a6dbb64788 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x1a6dbb60af0 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x1a6dbb64938 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb649b8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x1a6dbb60a50 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x1a6dbb60e38 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x1a6dbb60bc0 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb60c40 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb60cc0 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x1a6dbb60d40 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x1a6dbb61068 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x1a6dbb60f10 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x1a6dbb60f90 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x1a6dbb61248 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x1a6dbb61130 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x1a6dbb611b0 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x1a6dbb61500 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x1a6dbb61310 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb61390 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x1a6dbb61410 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x1a6dbb61850 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x1a6dbb615d0 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb61650 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x1a6dbb616d0 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x1a6dbb61750 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x1a6dbb773b8 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x1a6dbb61928 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb619a8 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x1a6dbb77090 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x1a6dbb77110 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x1a6dbb77190 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x1a6dbb77210 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x1a6dbb77290 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x1a6dbb77868 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x1a6dbb774a8 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb77528 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x1a6dbb775a8 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x1a6dbb77628 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x1a6dbb776a8 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x1a6dbb77728 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x1a6dbb777a8 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x1a6dbb77b80 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x1a6dbb77958 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb779d8 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb77a58 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x1a6dbb77ad8 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x1a6dbb77ec8 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x1a6dbb77c58 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb77cd8 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x1a6dbb77d58 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x1a6dbb77dd8 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x1a6dbb792c8 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x1a6dbb77fa0 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb78020 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x1a6dbb790c8 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x1a6dbb79148 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x1a6dbb791c8 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x1a6dbb79738 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x1a6dbb793a8 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb79428 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x1a6dbb794a8 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x1a6dbb79528 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x1a6dbb795a8 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x1a6dbb79628 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x1a6dbb79b30 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x1a6dbb79820 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb798a0 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb79920 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x1a6dbb799a0 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x1a6dbb79a20 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x1a6dbb79ec8 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x1a6dbb79c10 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb79c90 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb79d10 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x1a6dbb79d90 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x1a6dbb79e10 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x1a6dbb74300 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x1a6dbb79fa8 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x1a6dbb7a028 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x1a6dbb74060 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x1a6dbb740e0 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x1a6dbb74160 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x1a6dbb741e0 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x1a6dbb746f0 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1a6dbb743e8 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x1a6dbb74468 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb744e8 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x1a6dbb74568 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x1a6dbb745e8 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x1a6dbb74ae0 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x1a6dbb747d0 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x1a6dbb74850 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x1a6dbb748d0 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x1a6dbb74950 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x1a6dbb749d0 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x1a6dbb74db0 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x1a6dbb74bc0 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x1a6dbb74c40 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x1a6dbb74cc0 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x1a6dbb75070 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x1a6dbb74e80 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x1a6dbb74f00 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x1a6dbb74f80 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x1a6dbb75140 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-FunctionDecl 0x1a6dbb754d0 <.//openssl//file_jk/before\crypto\bn\bn_mont.c:26:1, line:35:1> line:26:5 invalid BN_mod_mul_montgomery 'int (int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1a6dbb751c0 <col:27, col:35> col:35 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb75240 <col:38, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb752c0 <col:55, col:69> col:69 invalid b 'const int *'
| |-ParmVarDecl 0x1a6dbb75340 <line:27:27, col:40> col:40 invalid mont 'int *'
| |-ParmVarDecl 0x1a6dbb753c0 <col:46, col:54> col:54 invalid ctx 'int *'
| `-CompoundStmt 0x1a6dbb75948 <line:28:1, line:35:1>
|   |-DeclStmt 0x1a6dbb757b8 <line:29:5, col:56>
|   | `-VarDecl 0x1a6dbb755c8 <col:5, col:9> col:9 used ret 'int'
|   |-NullStmt 0x1a6dbb758e0 <line:32:20>
|   `-ReturnStmt 0x1a6dbb75938 <line:34:5, col:12>
|     `-ImplicitCastExpr 0x1a6dbb75920 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1a6dbb758e8 <col:12> 'int' lvalue Var 0x1a6dbb755c8 'ret' 'int'
|-FunctionDecl 0x1a6dbb75c40 <line:37:1, line:85:1> line:37:5 invalid bn_mul_mont_fixed_top 'int (int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1a6dbb75988 <col:27, col:35> col:35 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb75a08 <col:38, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb75a88 <col:55, col:69> col:69 invalid b 'const int *'
| |-ParmVarDecl 0x1a6dbb75b08 <line:38:27, col:40> col:40 invalid mont 'int *'
| |-ParmVarDecl 0x1a6dbb75b88 <col:46, col:54> col:54 invalid ctx 'int *'
| `-CompoundStmt 0x1a6dbb728a0 <line:39:1, line:85:1>
|   |-DeclStmt 0x1a6dbb75dc8 <line:41:5, col:16>
|   | `-VarDecl 0x1a6dbb75d38 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1a6dbb75da0 <col:15> 'int' 0
|   |-DeclStmt 0x1a6dbb75e60 <line:42:5, col:26>
|   | `-VarDecl 0x1a6dbb75df8 <col:5, col:9> col:9 used num 'int'
|   |-IfStmt 0x1a6dbb75f60 <line:57:5, line:58:16>
|   | |-OpaqueValueExpr 0x1a6dbb75f48 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1a6dbb75f38 <col:9, col:16>
|   |   `-IntegerLiteral 0x1a6dbb75f10 <col:16> 'int' 0
|   |-IfStmt 0x1a6dbb721f0 <line:62:5, line:63:14>
|   | |-OpaqueValueExpr 0x1a6dbb721d8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a6dbb721c0 <col:9, col:14> 'err' 0x1a6dbb72170
|   |-NullStmt 0x1a6dbb72208 <line:65:22>
|   |-IfStmt 0x1a6dbb72508 <line:66:5, line:72:5> has_else
|   | |-OpaqueValueExpr 0x1a6dbb724f0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1a6dbb72368 <line:66:17, line:69:5>
|   | | `-IfStmt 0x1a6dbb72350 <line:67:9, line:68:18>
|   | |   |-OpaqueValueExpr 0x1a6dbb72338 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x1a6dbb72320 <col:13, col:18> 'err' 0x1a6dbb72170
|   | `-CompoundStmt 0x1a6dbb724d8 <line:69:12, line:72:5>
|   |   `-IfStmt 0x1a6dbb724c0 <line:70:9, line:71:18>
|   |     |-OpaqueValueExpr 0x1a6dbb724a8 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1a6dbb72490 <col:13, col:18> 'err' 0x1a6dbb72170
|   |-IfStmt 0x1a6dbb72670 <line:75:5, line:76:14>
|   | |-OpaqueValueExpr 0x1a6dbb72658 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a6dbb72640 <col:9, col:14> 'err' 0x1a6dbb72170
|   |-BinaryOperator 0x1a6dbb726e8 <line:81:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x1a6dbb72688 <col:5> 'int' lvalue Var 0x1a6dbb75d38 'ret' 'int'
|   | `-IntegerLiteral 0x1a6dbb726c0 <col:11> 'int' 1
|   |-LabelStmt 0x1a6dbb72820 <line:82:2, col:5> 'err'
|   | `-NullStmt 0x1a6dbb72818 <col:5>
|   `-ReturnStmt 0x1a6dbb72890 <line:84:5, col:16>
|     `-ImplicitCastExpr 0x1a6dbb72878 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x1a6dbb72858 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x1a6dbb72838 <col:13> 'int' lvalue Var 0x1a6dbb75d38 'ret' 'int'
|-FunctionDecl 0x1a6dbb72b00 <line:88:1, line:158:1> line:88:12 invalid bn_from_montgomery_word 'int (int *, int *, int *)' static
| |-ParmVarDecl 0x1a6dbb72918 <col:36, col:44> col:44 invalid ret 'int *'
| |-ParmVarDecl 0x1a6dbb72998 <col:49, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb72a18 <col:60, col:73> col:73 invalid mont 'int *'
| `-CompoundStmt 0x1a6dbb7cb60 <line:89:1, line:158:1>
|   |-DeclStmt 0x1a6dbb72d70 <line:92:5, col:19>
|   | |-VarDecl 0x1a6dbb72be8 <col:5, col:9> col:9 used nl 'int'
|   | |-VarDecl 0x1a6dbb72c68 <col:5, col:13> col:13 used max 'int'
|   | `-VarDecl 0x1a6dbb72ce8 <col:5, col:18> col:18 used i 'int'
|   |-DeclStmt 0x1a6dbb72e08 <line:93:5, col:22>
|   | `-VarDecl 0x1a6dbb72da0 <col:5, col:18> col:18 used rtop 'unsigned int'
|   |-IfStmt 0x1a6dbb72f70 <line:97:5, line:100:5>
|   | |-BinaryOperator 0x1a6dbb72eb8 <line:97:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x1a6dbb72ea0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a6dbb72e58 <col:9> 'int' lvalue Var 0x1a6dbb72be8 'nl' 'int'
|   | | `-IntegerLiteral 0x1a6dbb72e78 <col:15> 'int' 0
|   | `-CompoundStmt 0x1a6dbb72f58 <col:18, line:100:5>
|   |   `-ReturnStmt 0x1a6dbb72f48 <line:99:9, col:18>
|   |     `-ParenExpr 0x1a6dbb72f28 <col:16, col:18> 'int'
|   |       `-IntegerLiteral 0x1a6dbb72f00 <col:17> 'int' 1
|   |-BinaryOperator 0x1a6dbb7c100 <line:102:5, col:18> 'int' '='
|   | |-DeclRefExpr 0x1a6dbb72f88 <col:5> 'int' lvalue Var 0x1a6dbb72c68 'max' 'int'
|   | `-ParenExpr 0x1a6dbb7c0e0 <col:11, col:18> 'int'
|   |   `-BinaryOperator 0x1a6dbb73020 <col:12, col:16> 'int' '*'
|   |     |-IntegerLiteral 0x1a6dbb72fc0 <col:12> 'int' 2
|   |     `-ImplicitCastExpr 0x1a6dbb73008 <col:16> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1a6dbb72fe8 <col:16> 'int' lvalue Var 0x1a6dbb72be8 'nl' 'int'
|   |-IfStmt 0x1a6dbb7c2c0 <line:103:5, line:104:18>
|   | |-OpaqueValueExpr 0x1a6dbb7c2a8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1a6dbb7c298 <col:9, col:18>
|   |   `-ParenExpr 0x1a6dbb7c278 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x1a6dbb7c250 <col:17> 'int' 0
|   |-ForStmt 0x1a6dbb7c488 <line:110:5, line:113:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1a6dbb7c400 <line:110:32, col:36> 'int' '<'
|   | | |-ImplicitCastExpr 0x1a6dbb7c3d0 <col:32> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a6dbb7c390 <col:32> 'int' lvalue Var 0x1a6dbb72ce8 'i' 'int'
|   | | `-ImplicitCastExpr 0x1a6dbb7c3e8 <col:36> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a6dbb7c3b0 <col:36> 'int' lvalue Var 0x1a6dbb72c68 'max' 'int'
|   | |-UnaryOperator 0x1a6dbb7c440 <col:41, col:42> 'int' postfix '++'
|   | | `-DeclRefExpr 0x1a6dbb7c420 <col:41> 'int' lvalue Var 0x1a6dbb72ce8 'i' 'int'
|   | `-CompoundStmt 0x1a6dbb7c478 <col:46, line:113:5>
|   |-ForStmt 0x1a6dbb7c760 <line:124:5, line:130:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1a6dbb7c630 <line:124:28, col:32> 'int' '<'
|   | | |-ImplicitCastExpr 0x1a6dbb7c600 <col:28> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a6dbb7c5c0 <col:28> 'int' lvalue Var 0x1a6dbb72ce8 'i' 'int'
|   | | `-ImplicitCastExpr 0x1a6dbb7c618 <col:32> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a6dbb7c5e0 <col:32> 'int' lvalue Var 0x1a6dbb72be8 'nl' 'int'
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x1a6dbb7c750 <col:47, line:130:5>
|   |-IfStmt 0x1a6dbb7c848 <line:132:5, line:133:18>
|   | |-OpaqueValueExpr 0x1a6dbb7c830 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1a6dbb7c820 <col:9, col:18>
|   |   `-ParenExpr 0x1a6dbb7c800 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x1a6dbb7c7d8 <col:17> 'int' 0
|   |-ForStmt 0x1a6dbb7cad0 <line:152:5, line:155:5>
|   | |-BinaryOperator 0x1a6dbb7c930 <line:152:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1a6dbb7c8e8 <col:10> 'int' lvalue Var 0x1a6dbb72ce8 'i' 'int'
|   | | `-IntegerLiteral 0x1a6dbb7c908 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1a6dbb7c9c0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1a6dbb7c990 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1a6dbb7c950 <col:17> 'int' lvalue Var 0x1a6dbb72ce8 'i' 'int'
|   | | `-ImplicitCastExpr 0x1a6dbb7c9a8 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1a6dbb7c970 <col:21> 'int' lvalue Var 0x1a6dbb72be8 'nl' 'int'
|   | |-UnaryOperator 0x1a6dbb7ca00 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x1a6dbb7c9e0 <col:25> 'int' lvalue Var 0x1a6dbb72ce8 'i' 'int'
|   | `-CompoundStmt 0x1a6dbb7cac0 <col:30, line:155:5>
|   `-ReturnStmt 0x1a6dbb7cb50 <line:157:5, col:14>
|     `-ParenExpr 0x1a6dbb7cb30 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x1a6dbb7cb08 <col:13> 'int' 1
|-FunctionDecl 0x1a6dbb7ce50 <line:161:1, line:171:1> line:161:5 invalid BN_from_montgomery 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1a6dbb7cbd8 <col:24, col:32> col:32 invalid ret 'int *'
| |-ParmVarDecl 0x1a6dbb7cc58 <col:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb7ccd8 <col:54, col:67> col:67 invalid mont 'int *'
| |-ParmVarDecl 0x1a6dbb7cd58 <line:162:24, col:32> col:32 invalid ctx 'int *'
| `-CompoundStmt 0x1a6dbb7d198 <line:163:1, line:171:1>
|   |-DeclStmt 0x1a6dbb7cfa8 <line:164:5, col:13>
|   | `-VarDecl 0x1a6dbb7cf40 <col:5, col:9> col:9 used retn 'int'
|   |-NullStmt 0x1a6dbb7d148 <line:168:22>
|   `-ReturnStmt 0x1a6dbb7d188 <line:170:5, col:12>
|     `-ImplicitCastExpr 0x1a6dbb7d170 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1a6dbb7d150 <col:12> 'int' lvalue Var 0x1a6dbb7cf40 'retn' 'int'
|-FunctionDecl 0x1a6dbb7d408 <line:173:1, line:219:1> line:173:5 invalid bn_from_mont_fixed_top 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1a6dbb7d1d8 <col:28, col:36> col:36 invalid ret 'int *'
| |-ParmVarDecl 0x1a6dbb7d258 <col:41, col:55> col:55 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb7d2d8 <col:58, col:71> col:71 invalid mont 'int *'
| |-ParmVarDecl 0x1a6dbb7d358 <line:174:28, col:36> col:36 invalid ctx 'int *'
| `-CompoundStmt 0x1a6dbb7d7f0 <line:175:1, line:219:1>
|   |-DeclStmt 0x1a6dbb7d588 <line:176:5, col:17>
|   | `-VarDecl 0x1a6dbb7d4f8 <col:5, col:16> col:9 used retn 'int' cinit
|   |   `-IntegerLiteral 0x1a6dbb7d560 <col:16> 'int' 0
|   |-IfStmt 0x1a6dbb7d750 <line:181:5, line:183:5>
|   | |-OpaqueValueExpr 0x1a6dbb7d738 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1a6dbb7d728 <line:181:49, line:183:5>
|   `-ReturnStmt 0x1a6dbb7d7e0 <line:218:5, col:17>
|     `-ImplicitCastExpr 0x1a6dbb7d7c8 <col:12, col:17> 'int' <LValueToRValue>
|       `-ParenExpr 0x1a6dbb7d7a8 <col:12, col:17> 'int' lvalue
|         `-DeclRefExpr 0x1a6dbb7d788 <col:13> 'int' lvalue Var 0x1a6dbb7d4f8 'retn' 'int'
|-FunctionDecl 0x1a6dbb7da60 <line:221:1, line:225:1> line:221:5 invalid bn_to_mont_fixed_top 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x1a6dbb7d830 <col:26, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x1a6dbb7d8b0 <col:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1a6dbb7d930 <col:54, col:67> col:67 invalid mont 'int *'
| |-ParmVarDecl 0x1a6dbb7d9b0 <line:222:26, col:34> col:34 invalid ctx 'int *'
| `-CompoundStmt 0x1a6dbb7db38 <line:223:1, line:225:1>
|-FunctionDecl 0x1a6dbb7dc10 <line:227:1, line:237:1> line:227:14 invalid BN_MONT_CTX_new 'int *(void)'
| `-CompoundStmt 0x1a6dbb7ddd8 <line:228:1, line:237:1>
|-FunctionDecl 0x1a6dbb7de90 <line:239:1, line:247:1> line:239:6 invalid BN_MONT_CTX_init 'void (int *)'
| |-ParmVarDecl 0x1a6dbb7de00 <col:23, col:36> col:36 invalid ctx 'int *'
| `-CompoundStmt 0x1a6dbb7e018 <line:240:1, line:247:1>
|-FunctionDecl 0x1a6dbb780a0 <line:249:1, line:259:1> line:249:6 invalid BN_MONT_CTX_free 'void (int *)'
| |-ParmVarDecl 0x1a6dbb7e040 <col:23, col:36> col:36 invalid mont 'int *'
| `-CompoundStmt 0x1a6dbb78400 <line:250:1, line:259:1>
|   `-IfStmt 0x1a6dbb78188 <line:251:5, line:252:9>
|     |-OpaqueValueExpr 0x1a6dbb78170 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x1a6dbb78160 <col:9>
|-FunctionDecl 0x1a6dbb78620 <line:261:1, line:407:1> line:261:5 invalid BN_MONT_CTX_set 'int (int *, const int *, int *)'
| |-ParmVarDecl 0x1a6dbb78430 <col:21, col:34> col:34 invalid mont 'int *'
| |-ParmVarDecl 0x1a6dbb784b0 <col:40, col:54> col:54 invalid mod 'const int *'
| |-ParmVarDecl 0x1a6dbb78530 <col:59, col:67> col:67 invalid ctx 'int *'
| `-CompoundStmt 0x1a6dbb80280 <line:262:1, line:407:1>
|   |-DeclStmt 0x1a6dbb78830 <line:263:5, col:19>
|   | |-VarDecl 0x1a6dbb78708 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x1a6dbb78788 <col:5, col:18> col:12 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1a6dbb787f0 <col:18> 'int' 0
|   |-IfStmt 0x1a6dbb789a8 <line:266:5, line:267:16>
|   | |-OpaqueValueExpr 0x1a6dbb78990 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1a6dbb78980 <col:9, col:16>
|   |   `-IntegerLiteral 0x1a6dbb78958 <col:16> 'int' 0
|   |-IfStmt 0x1a6dbb78a80 <line:270:5, line:271:14>
|   | |-OpaqueValueExpr 0x1a6dbb78a68 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a6dbb78a50 <col:9, col:14> 'err' 0x1a6dbb78a00
|   |-IfStmt 0x1a6dbb78ae8 <line:273:5, line:274:14>
|   | |-OpaqueValueExpr 0x1a6dbb78ad0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a6dbb78ab8 <col:9, col:14> 'err' 0x1a6dbb78a00
|   |-CompoundStmt 0x1a6dbb76cc8 <line:280:5, line:369:5>
|   | |-IfStmt 0x1a6dbb76198 <line:340:9, line:341:18>
|   | | |-OpaqueValueExpr 0x1a6dbb76180 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x1a6dbb76168 <col:13, col:18> 'err' 0x1a6dbb78a00
|   | |-IfStmt 0x1a6dbb76598 <line:347:9, line:350:18> has_else
|   | | |-OpaqueValueExpr 0x1a6dbb76580 <<invalid sloc>> '_Bool'
|   | | |-NullStmt 0x1a6dbb76578 <line:348:13>
|   | | `-IfStmt 0x1a6dbb76560 <line:349:14, line:350:18>
|   | |   |-OpaqueValueExpr 0x1a6dbb76548 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x1a6dbb76530 <col:13, col:18> 'err' 0x1a6dbb78a00
|   | |-IfStmt 0x1a6dbb76700 <line:351:9, line:352:18>
|   | | |-OpaqueValueExpr 0x1a6dbb766e8 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x1a6dbb766d0 <col:13, col:18> 'err' 0x1a6dbb78a00
|   | |-IfStmt 0x1a6dbb76a58 <line:353:9, line:360:9> has_else
|   | | |-OpaqueValueExpr 0x1a6dbb76a40 <<invalid sloc>> '_Bool'
|   | | |-CompoundStmt 0x1a6dbb768b8 <line:353:30, line:356:9>
|   | | | `-IfStmt 0x1a6dbb768a0 <line:354:13, line:355:22>
|   | | |   |-OpaqueValueExpr 0x1a6dbb76888 <<invalid sloc>> '_Bool'
|   | | |   `-GotoStmt 0x1a6dbb76870 <col:17, col:22> 'err' 0x1a6dbb78a00
|   | | `-CompoundStmt 0x1a6dbb76a28 <line:356:16, line:360:9>
|   | |   `-IfStmt 0x1a6dbb76a10 <line:358:13, line:359:22>
|   | |     |-OpaqueValueExpr 0x1a6dbb769f8 <<invalid sloc>> '_Bool'
|   | |     `-GotoStmt 0x1a6dbb769e0 <col:17, col:22> 'err' 0x1a6dbb78a00
|   | `-IfStmt 0x1a6dbb76bc0 <line:361:9, line:362:18>
|   |   |-OpaqueValueExpr 0x1a6dbb76ba8 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x1a6dbb76b90 <col:13, col:18> 'err' 0x1a6dbb78a00
|   |-IfStmt 0x1a6dbb76d98 <line:393:5, line:394:14>
|   | |-OpaqueValueExpr 0x1a6dbb76d80 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a6dbb76d68 <col:9, col:14> 'err' 0x1a6dbb78a00
|   |-IfStmt 0x1a6dbb76ef0 <line:395:5, line:396:14>
|   | |-OpaqueValueExpr 0x1a6dbb76ed8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1a6dbb76ec0 <col:9, col:14> 'err' 0x1a6dbb78a00
|   |-BinaryOperator 0x1a6dbb801d8 <line:403:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x1a6dbb80190 <col:5> 'int' lvalue Var 0x1a6dbb78788 'ret' 'int'
|   | `-IntegerLiteral 0x1a6dbb801b0 <col:11> 'int' 1
|   |-LabelStmt 0x1a6dbb80220 <line:404:2, col:5> 'err'
|   | `-NullStmt 0x1a6dbb80218 <col:5>
|   `-ReturnStmt 0x1a6dbb80270 <line:406:5, col:12>
|     `-ImplicitCastExpr 0x1a6dbb80258 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1a6dbb80238 <col:12> 'int' lvalue Var 0x1a6dbb78788 'ret' 'int'
|-FunctionDecl 0x1a6dbb80450 <line:409:1, line:424:1> line:409:14 invalid BN_MONT_CTX_copy 'int *(int *, int *)'
| |-ParmVarDecl 0x1a6dbb802f8 <col:31, col:44> col:44 invalid to 'int *'
| |-ParmVarDecl 0x1a6dbb80378 <col:48, col:61> col:61 invalid from 'int *'
| `-CompoundStmt 0x1a6dbb80618 <line:410:1, line:424:1>
`-FunctionDecl 0x1a6dbb808f0 <line:426:1, line:462:1> line:426:14 invalid BN_MONT_CTX_set_locked 'int *(int **, int *, const int *, int *)'
  |-ParmVarDecl 0x1a6dbb80678 <col:37, col:51> col:51 invalid pmont 'int **'
  |-ParmVarDecl 0x1a6dbb806f8 <col:58, col:73> col:73 invalid lock 'int *'
  |-ParmVarDecl 0x1a6dbb80778 <line:427:37, col:51> col:51 invalid mod 'const int *'
  |-ParmVarDecl 0x1a6dbb807f8 <col:56, col:64> col:64 invalid ctx 'int *'
  `-CompoundStmt 0x1a6dbb80db0 <line:428:1, line:462:1>
    |-IfStmt 0x1a6dbb80c10 <line:448:5, line:451:5>
    | |-OpaqueValueExpr 0x1a6dbb80bf8 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x1a6dbb80be8 <line:448:42, line:451:5>
    `-IfStmt 0x1a6dbb80d68 <line:455:5, line:459:9> has_else
      |-OpaqueValueExpr 0x1a6dbb80d50 <<invalid sloc>> '_Bool'
      |-CompoundStmt 0x1a6dbb80d38 <line:455:17, line:458:5>
      `-NullStmt 0x1a6dbb80d48 <line:459:9>
