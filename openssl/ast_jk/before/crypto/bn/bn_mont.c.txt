TranslationUnitDecl 0x12490343668 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12490343f00 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12490343c00 '__int128'
|-TypedefDecl 0x12490343f70 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12490343c20 'unsigned __int128'
|-TypedefDecl 0x124903442a8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12490344060 'struct __NSConstantString_tag'
|   `-Record 0x12490343fc8 '__NSConstantString_tag'
|-TypedefDecl 0x12490344318 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x12490343840 'unsigned long long'
|-TypedefDecl 0x124903443b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12490344370 'char *'
|   `-BuiltinType 0x12490343700 'char'
|-TypedefDecl 0x12490344420 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12490344370 'char *'
|   `-BuiltinType 0x12490343700 'char'
|-FunctionDecl 0x12491c0c530 <.//openssl//file_jk/before\crypto\bn/bn_lcl.h:220:1, line:221:37> line:220:10 invalid bn_mul_add_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x124903444c0 <col:27, col:37> col:37 invalid rp 'int *'
| |-ParmVarDecl 0x12490344540 <col:41, col:57> col:57 invalid ap 'const int *'
| |-ParmVarDecl 0x124903445c0 <col:61, col:65> col:65 num 'int'
| `-ParmVarDecl 0x12491c0c430 <line:221:27, col:36> col:36 invalid w 'int'
|-FunctionDecl 0x12491c0c838 <line:222:1, col:76> col:10 invalid bn_mul_words 'int (int *, const int *, int, int)'
| |-ParmVarDecl 0x12491c0c608 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x12491c0c688 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x12491c0c708 <col:57, col:61> col:61 num 'int'
| `-ParmVarDecl 0x12491c0c788 <col:66, col:75> col:75 invalid w 'int'
|-FunctionDecl 0x12491c0caf8 <line:223:1, col:60> col:6 invalid bn_sqr_words 'void (int *, const int *, int)'
| |-ParmVarDecl 0x12491c0c910 <col:19, col:29> col:29 invalid rp 'int *'
| |-ParmVarDecl 0x12491c0c990 <col:33, col:49> col:49 invalid ap 'const int *'
| `-ParmVarDecl 0x12491c0ca10 <col:53, col:57> col:57 num 'int'
|-FunctionDecl 0x12491c0cdb0 <line:224:1, col:57> col:10 invalid bn_div_words 'int (int, int, int)'
| |-ParmVarDecl 0x12491c0cbc8 <col:23, col:32> col:32 invalid h 'int'
| |-ParmVarDecl 0x12491c0cc48 <col:35, col:44> col:44 invalid l 'int'
| `-ParmVarDecl 0x12491c0ccc8 <col:47, col:56> col:56 invalid d 'int'
|-FunctionDecl 0x12491c0d100 <line:225:1, line:226:30> line:225:10 invalid bn_add_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x12491c0ce80 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x12491c0cf00 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x12491c0cf80 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x12491c0d000 <line:226:23, col:27> col:27 num 'int'
|-FunctionDecl 0x12491c0f460 <line:227:1, line:228:30> line:227:10 invalid bn_sub_words 'int (int *, const int *, const int *, int)'
| |-ParmVarDecl 0x12491c0d1d8 <col:23, col:33> col:33 invalid rp 'int *'
| |-ParmVarDecl 0x12491c0d258 <col:37, col:53> col:53 invalid ap 'const int *'
| |-ParmVarDecl 0x12491c0d2d8 <col:57, col:73> col:73 invalid bp 'const int *'
| `-ParmVarDecl 0x12491c0d358 <line:228:23, col:27> col:27 num 'int'
|-RecordDecl 0x12491c0f520 <line:230:1, line:238:1> line:230:8 invalid struct bignum_st definition
| |-FieldDecl 0x12491c0f5f8 <line:231:5, col:15> col:15 invalid d 'int *'
| |-FieldDecl 0x12491c0f668 <line:233:5, col:9> col:9 top 'int'
| |-FieldDecl 0x12491c0f6d8 <line:235:5, col:9> col:9 dmax 'int'
| |-FieldDecl 0x12491c0f748 <line:236:5, col:9> col:9 neg 'int'
| `-FieldDecl 0x12491c0f7b8 <line:237:5, col:9> col:9 flags 'int'
|-RecordDecl 0x12491c0f810 <line:241:1, line:252:1> line:241:8 invalid struct bn_mont_ctx_st definition
| |-FieldDecl 0x12491c0f8e8 <line:242:5, col:9> col:9 ri 'int'
| |-FieldDecl 0x12491c0f958 <line:243:5, col:12> col:12 invalid RR 'int'
| |-FieldDecl 0x12491c0f9c8 <line:245:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x12491c0fa38 <line:246:5, col:12> col:12 invalid Ni 'int'
| |-FieldDecl 0x12491c0fb30 <line:248:5, <invalid sloc>> col:14 invalid n0 'int [2]'
| `-FieldDecl 0x12491c0fba0 <line:251:5, col:9> col:9 flags 'int'
|-RecordDecl 0x12491c0fbf8 <line:258:1, line:264:1> line:258:8 invalid struct bn_recp_ctx_st definition
| |-FieldDecl 0x12491c0fcc8 <line:259:5, col:12> col:12 invalid N 'int'
| |-FieldDecl 0x12491c0fd38 <line:260:5, col:12> col:12 invalid Nr 'int'
| |-FieldDecl 0x12491c0fda8 <line:261:5, col:9> col:9 num_bits 'int'
| |-FieldDecl 0x12491c0fe18 <line:262:5, col:9> col:9 shift 'int'
| `-FieldDecl 0x12491c0fe88 <line:263:5, col:9> col:9 flags 'int'
|-RecordDecl 0x12491c0fee0 <line:267:1, line:276:1> line:267:8 struct bn_gencb_st definition
| |-FieldDecl 0x12491c0ffb8 <line:268:5, col:18> col:18 ver 'unsigned int'
| |-FieldDecl 0x12491c10028 <line:269:5, col:11> col:11 arg 'void *'
| |-RecordDecl 0x12491c10080 <line:270:5, line:275:5> line:270:5 union definition
| | |-FieldDecl 0x12491c103d0 <line:272:9, col:39> col:16 cb_1 'void (*)(int, int, void *)'
| | `-FieldDecl 0x12491c106f8 <line:274:9, col:42> col:15 cb_2 'int (*)(int, int, int *)'
| `-FieldDecl 0x12491c107a8 <line:270:5, line:275:7> col:7 cb 'union (anonymous union at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)':'union bn_gencb_st::(anonymous at .//openssl//file_jk/before\crypto\bn/bn_lcl.h:270:5)'
|-FunctionDecl 0x12491c10938 <line:649:1, col:40> col:6 invalid BN_RECP_CTX_init 'void (int *)'
| `-ParmVarDecl 0x12491c10878 <col:23, col:36> col:36 invalid recp 'int *'
|-FunctionDecl 0x12491c10a88 <line:650:1, col:39> col:6 invalid BN_MONT_CTX_init 'void (int *)'
| `-ParmVarDecl 0x12491c109f8 <col:23, col:36> col:36 invalid ctx 'int *'
|-FunctionDecl 0x12491c10bd8 <line:652:1, col:23> col:6 invalid bn_init 'void (int *)'
| `-ParmVarDecl 0x12491c10b48 <col:14, col:22> col:22 invalid a 'int *'
|-FunctionDecl 0x12491c10f98 <line:653:1, col:73> col:6 invalid bn_mul_normal 'void (int *, int *, int, int *, int)'
| |-ParmVarDecl 0x12491c10c98 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x12491c10d18 <col:33, col:43> col:43 invalid a 'int *'
| |-ParmVarDecl 0x12491c10d98 <col:46, col:50> col:50 na 'int'
| |-ParmVarDecl 0x12491c10e18 <col:54, col:64> col:64 invalid b 'int *'
| `-ParmVarDecl 0x12491c10e98 <col:67, col:71> col:71 nb 'int'
|-FunctionDecl 0x12491c11258 <line:654:1, col:57> col:6 invalid bn_mul_comba8 'void (int *, int *, int *)'
| |-ParmVarDecl 0x12491c11078 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x12491c110f8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x12491c11178 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x12491c0b4c0 <line:655:1, col:57> col:6 invalid bn_mul_comba4 'void (int *, int *, int *)'
| |-ParmVarDecl 0x12491c11328 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x12491c113a8 <col:33, col:43> col:43 invalid a 'int *'
| `-ParmVarDecl 0x12491c0b420 <col:46, col:56> col:56 invalid b 'int *'
|-FunctionDecl 0x12491c0b808 <line:656:1, col:72> col:6 invalid bn_sqr_normal 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x12491c0b590 <col:20, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x12491c0b610 <col:33, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x12491c0b690 <col:52, col:56> col:56 n 'int'
| `-ParmVarDecl 0x12491c0b710 <col:59, col:69> col:69 invalid tmp 'int *'
|-FunctionDecl 0x12491c0ba38 <line:657:1, col:50> col:6 invalid bn_sqr_comba8 'void (int *, const int *)'
| |-ParmVarDecl 0x12491c0b8e0 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x12491c0b960 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x12491c0bc18 <line:658:1, col:50> col:6 invalid bn_sqr_comba4 'void (int *, const int *)'
| |-ParmVarDecl 0x12491c0bb00 <col:20, col:30> col:30 invalid r 'int *'
| `-ParmVarDecl 0x12491c0bb80 <col:33, col:49> col:49 invalid a 'const int *'
|-FunctionDecl 0x12491c0bed0 <line:659:1, col:61> col:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x12491c0bce0 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x12491c0bd60 <col:37, col:53> col:53 invalid b 'const int *'
| `-ParmVarDecl 0x12491c0bde0 <col:56, col:60> col:60 n 'int'
|-FunctionDecl 0x12491c0c220 <line:660:1, col:75> col:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x12491c0bfa0 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x12491c0c020 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x12491c0c0a0 <col:61, col:65> col:65 cl 'int'
| `-ParmVarDecl 0x12491c0c120 <col:69, col:73> col:73 dl 'int'
|-FunctionDecl 0x12491c28ed8 <line:661:1, line:662:52> line:661:6 invalid bn_mul_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x12491c0c2f8 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x12491c0c378 <col:36, col:46> col:46 invalid a 'int *'
| |-ParmVarDecl 0x12491c28bb0 <col:49, col:59> col:59 invalid b 'int *'
| |-ParmVarDecl 0x12491c28c30 <col:62, col:66> col:66 n2 'int'
| |-ParmVarDecl 0x12491c28cb0 <line:662:23, col:27> col:27 dna 'int'
| |-ParmVarDecl 0x12491c28d30 <col:32, col:36> col:36 dnb 'int'
| `-ParmVarDecl 0x12491c28db0 <col:41, col:51> col:51 invalid t 'int *'
|-FunctionDecl 0x12491c29388 <line:663:1, line:664:64> line:663:6 invalid bn_mul_part_recursive 'void (int *, int *, int *, int, int, int, int *)'
| |-ParmVarDecl 0x12491c28fc8 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x12491c29048 <col:41, col:51> col:51 invalid a 'int *'
| |-ParmVarDecl 0x12491c290c8 <col:54, col:64> col:64 invalid b 'int *'
| |-ParmVarDecl 0x12491c29148 <line:664:28, col:32> col:32 n 'int'
| |-ParmVarDecl 0x12491c291c8 <col:35, col:39> col:39 tna 'int'
| |-ParmVarDecl 0x12491c29248 <col:44, col:48> col:48 tnb 'int'
| `-ParmVarDecl 0x12491c292c8 <col:53, col:63> col:63 invalid t 'int *'
|-FunctionDecl 0x12491c296a0 <line:665:1, col:74> col:6 invalid bn_sqr_recursive 'void (int *, const int *, int, int *)'
| |-ParmVarDecl 0x12491c29478 <col:23, col:33> col:33 invalid r 'int *'
| |-ParmVarDecl 0x12491c294f8 <col:36, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x12491c29578 <col:55, col:59> col:59 n2 'int'
| `-ParmVarDecl 0x12491c295f8 <col:63, col:73> col:73 invalid t 'int *'
|-FunctionDecl 0x12491c299e8 <line:666:1, col:68> col:6 invalid bn_mul_low_normal 'void (int *, int *, int *, int)'
| |-ParmVarDecl 0x12491c29778 <col:24, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x12491c297f8 <col:37, col:47> col:47 invalid a 'int *'
| |-ParmVarDecl 0x12491c29878 <col:50, col:60> col:60 invalid b 'int *'
| `-ParmVarDecl 0x12491c298f8 <col:63, col:67> col:67 n 'int'
|-FunctionDecl 0x12491c21d58 <line:667:1, line:668:38> line:667:6 invalid bn_mul_low_recursive 'void (int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x12491c29ac0 <col:27, col:37> col:37 invalid r 'int *'
| |-ParmVarDecl 0x12491c29b40 <col:40, col:50> col:50 invalid a 'int *'
| |-ParmVarDecl 0x12491c21b58 <col:53, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x12491c21bd8 <col:66, col:70> col:70 n2 'int'
| `-ParmVarDecl 0x12491c21c58 <line:668:27, col:37> col:37 invalid t 'int *'
|-FunctionDecl 0x12491c221c8 <line:669:1, line:670:29> line:669:6 invalid bn_mul_high 'void (int *, int *, int *, int *, int, int *)'
| |-ParmVarDecl 0x12491c21e38 <col:18, col:28> col:28 invalid r 'int *'
| |-ParmVarDecl 0x12491c21eb8 <col:31, col:41> col:41 invalid a 'int *'
| |-ParmVarDecl 0x12491c21f38 <col:44, col:54> col:54 invalid b 'int *'
| |-ParmVarDecl 0x12491c21fb8 <col:57, col:67> col:67 invalid l 'int *'
| |-ParmVarDecl 0x12491c22038 <col:70, col:74> col:74 n2 'int'
| `-ParmVarDecl 0x12491c220b8 <line:670:18, col:28> col:28 invalid t 'int *'
|-FunctionDecl 0x12491c225c0 <line:671:1, line:672:42> line:671:10 invalid bn_add_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x12491c222b0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x12491c22330 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x12491c223b0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x12491c22430 <line:672:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x12491c224b0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x12491c22958 <line:673:1, line:674:42> line:673:10 invalid bn_sub_part_words 'int (int *, const int *, const int *, int, int)'
| |-ParmVarDecl 0x12491c226a0 <col:28, col:38> col:38 invalid r 'int *'
| |-ParmVarDecl 0x12491c22720 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x12491c227a0 <col:60, col:76> col:76 invalid b 'const int *'
| |-ParmVarDecl 0x12491c22820 <line:674:28, col:32> col:32 cl 'int'
| `-ParmVarDecl 0x12491c228a0 <col:36, col:40> col:40 dl 'int'
|-FunctionDecl 0x12491c29e60 <line:675:1, line:676:64> line:675:5 invalid bn_mul_mont 'int (int *, const int *, const int *, const int *, const int *, int)'
| |-ParmVarDecl 0x12491c22a38 <col:17, col:27> col:27 invalid rp 'int *'
| |-ParmVarDecl 0x12491c22ab8 <col:31, col:47> col:47 invalid ap 'const int *'
| |-ParmVarDecl 0x12491c29bc0 <col:51, col:67> col:67 invalid bp 'const int *'
| |-ParmVarDecl 0x12491c29c40 <line:676:17, col:33> col:33 invalid np 'const int *'
| |-ParmVarDecl 0x12491c29cc0 <col:37, col:53> col:53 invalid n0 'const int *'
| `-ParmVarDecl 0x12491c29d40 <col:57, col:61> col:61 num 'int'
|-FunctionDecl 0x12491c2a250 <line:678:1, line:680:38> line:678:9 invalid int_bn_mod_inverse 'int *(int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x12491c29f48 <col:28, col:36> col:36 invalid in 'int *'
| |-ParmVarDecl 0x12491c29fc8 <line:679:28, col:42> col:42 invalid a 'const int *'
| |-ParmVarDecl 0x12491c2a048 <col:45, col:59> col:59 invalid n 'const int *'
| |-ParmVarDecl 0x12491c2a0c8 <col:62, col:70> col:70 invalid ctx 'int *'
| `-ParmVarDecl 0x12491c2a148 <line:680:28, col:33> col:33 noinv 'int *'
|-FunctionDecl 0x12491c2a640 <line:682:1, line:683:75> line:682:5 invalid bn_probable_prime_dh 'int (int *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x12491c2a330 <col:26, col:34> col:34 invalid rnd 'int *'
| |-ParmVarDecl 0x12491c2a3b0 <col:39, col:43> col:43 bits 'int'
| |-ParmVarDecl 0x12491c2a430 <line:683:26, col:40> col:40 invalid add 'const int *'
| |-ParmVarDecl 0x12491c2a4b0 <col:45, col:59> col:59 invalid rem 'const int *'
| `-ParmVarDecl 0x12491c2a530 <col:64, col:72> col:72 invalid ctx 'int *'
|-FunctionDecl 0x12491c2a910 <line:684:1, col:66> col:5 invalid bn_probable_prime_dh_retry 'int (int *, int, int *)'
| |-ParmVarDecl 0x12491c2a720 <col:32, col:40> col:40 invalid rnd 'int *'
| |-ParmVarDecl 0x12491c2a7a0 <col:45, col:49> col:49 bits 'int'
| `-ParmVarDecl 0x12491c2a820 <col:55, col:63> col:63 invalid ctx 'int *'
|-FunctionDecl 0x12491c23b60 <line:685:1, col:68> col:5 invalid bn_probable_prime_dh_coprime 'int (int *, int, int *)'
| |-ParmVarDecl 0x12491c2a9e0 <col:34, col:42> col:42 invalid rnd 'int *'
| |-ParmVarDecl 0x12491c2aa60 <col:47, col:51> col:51 bits 'int'
| `-ParmVarDecl 0x12491c2aae0 <col:57, col:65> col:65 invalid ctx 'int *'
|-VarDecl 0x12491c23c30 <line:687:1, col:20> col:20 invalid BIGNUM 'int' static
|-FunctionDecl 0x12491c23fc0 <.//openssl//file_jk/before\crypto\bn\bn_mont.c:26:1, line:35:1> line:26:5 invalid BN_mod_mul_montgomery 'int (int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x12491c23cb0 <col:27, col:35> col:35 invalid r 'int *'
| |-ParmVarDecl 0x12491c23d30 <col:38, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x12491c23db0 <col:55, col:69> col:69 invalid b 'const int *'
| |-ParmVarDecl 0x12491c23e30 <line:27:27, col:40> col:40 invalid mont 'int *'
| |-ParmVarDecl 0x12491c23eb0 <col:46, col:54> col:54 invalid ctx 'int *'
| `-CompoundStmt 0x12491c24438 <line:28:1, line:35:1>
|   |-DeclStmt 0x12491c242a8 <line:29:5, col:56>
|   | `-VarDecl 0x12491c240b8 <col:5, col:9> col:9 used ret 'int'
|   |-NullStmt 0x12491c243d0 <line:32:20>
|   `-ReturnStmt 0x12491c24428 <line:34:5, col:12>
|     `-ImplicitCastExpr 0x12491c24410 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x12491c243d8 <col:12> 'int' lvalue Var 0x12491c240b8 'ret' 'int'
|-FunctionDecl 0x12491c24730 <line:37:1, line:85:1> line:37:5 invalid bn_mul_mont_fixed_top 'int (int *, const int *, const int *, int *, int *)'
| |-ParmVarDecl 0x12491c24478 <col:27, col:35> col:35 invalid r 'int *'
| |-ParmVarDecl 0x12491c244f8 <col:38, col:52> col:52 invalid a 'const int *'
| |-ParmVarDecl 0x12491c24578 <col:55, col:69> col:69 invalid b 'const int *'
| |-ParmVarDecl 0x12491c245f8 <line:38:27, col:40> col:40 invalid mont 'int *'
| |-ParmVarDecl 0x12491c24678 <col:46, col:54> col:54 invalid ctx 'int *'
| `-CompoundStmt 0x12491c263e0 <line:39:1, line:85:1>
|   |-DeclStmt 0x12491c248b8 <line:41:5, col:16>
|   | `-VarDecl 0x12491c24828 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x12491c24890 <col:15> 'int' 0
|   |-DeclStmt 0x12491c24950 <line:42:5, col:26>
|   | `-VarDecl 0x12491c248e8 <col:5, col:9> col:9 used num 'int'
|   |-IfStmt 0x12491c24a50 <line:57:5, line:58:16>
|   | |-OpaqueValueExpr 0x12491c24a38 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x12491c24a28 <col:9, col:16>
|   |   `-IntegerLiteral 0x12491c24a00 <col:16> 'int' 0
|   |-IfStmt 0x12491c25d30 <line:62:5, line:63:14>
|   | |-OpaqueValueExpr 0x12491c25d18 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x12491c25d00 <col:9, col:14> 'err' 0x12491c25cb0
|   |-NullStmt 0x12491c25d48 <line:65:22>
|   |-IfStmt 0x12491c26048 <line:66:5, line:72:5> has_else
|   | |-OpaqueValueExpr 0x12491c26030 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x12491c25ea8 <line:66:17, line:69:5>
|   | | `-IfStmt 0x12491c25e90 <line:67:9, line:68:18>
|   | |   |-OpaqueValueExpr 0x12491c25e78 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x12491c25e60 <col:13, col:18> 'err' 0x12491c25cb0
|   | `-CompoundStmt 0x12491c26018 <line:69:12, line:72:5>
|   |   `-IfStmt 0x12491c26000 <line:70:9, line:71:18>
|   |     |-OpaqueValueExpr 0x12491c25fe8 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x12491c25fd0 <col:13, col:18> 'err' 0x12491c25cb0
|   |-IfStmt 0x12491c261b0 <line:75:5, line:76:14>
|   | |-OpaqueValueExpr 0x12491c26198 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x12491c26180 <col:9, col:14> 'err' 0x12491c25cb0
|   |-BinaryOperator 0x12491c26228 <line:81:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x12491c261c8 <col:5> 'int' lvalue Var 0x12491c24828 'ret' 'int'
|   | `-IntegerLiteral 0x12491c26200 <col:11> 'int' 1
|   |-LabelStmt 0x12491c26360 <line:82:2, col:5> 'err'
|   | `-NullStmt 0x12491c26358 <col:5>
|   `-ReturnStmt 0x12491c263d0 <line:84:5, col:16>
|     `-ImplicitCastExpr 0x12491c263b8 <col:12, col:16> 'int' <LValueToRValue>
|       `-ParenExpr 0x12491c26398 <col:12, col:16> 'int' lvalue
|         `-DeclRefExpr 0x12491c26378 <col:13> 'int' lvalue Var 0x12491c24828 'ret' 'int'
|-FunctionDecl 0x12491c26640 <line:88:1, line:158:1> line:88:12 invalid bn_from_montgomery_word 'int (int *, int *, int *)' static
| |-ParmVarDecl 0x12491c26458 <col:36, col:44> col:44 invalid ret 'int *'
| |-ParmVarDecl 0x12491c264d8 <col:49, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x12491c26558 <col:60, col:73> col:73 invalid mont 'int *'
| `-CompoundStmt 0x12491c235d0 <line:89:1, line:158:1>
|   |-DeclStmt 0x12491c268b0 <line:92:5, col:19>
|   | |-VarDecl 0x12491c26728 <col:5, col:9> col:9 used nl 'int'
|   | |-VarDecl 0x12491c267a8 <col:5, col:13> col:13 used max 'int'
|   | `-VarDecl 0x12491c26828 <col:5, col:18> col:18 used i 'int'
|   |-DeclStmt 0x12491c26948 <line:93:5, col:22>
|   | `-VarDecl 0x12491c268e0 <col:5, col:18> col:18 used rtop 'unsigned int'
|   |-IfStmt 0x12491c26ab0 <line:97:5, line:100:5>
|   | |-BinaryOperator 0x12491c269f8 <line:97:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x12491c269e0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12491c26998 <col:9> 'int' lvalue Var 0x12491c26728 'nl' 'int'
|   | | `-IntegerLiteral 0x12491c269b8 <col:15> 'int' 0
|   | `-CompoundStmt 0x12491c26a98 <col:18, line:100:5>
|   |   `-ReturnStmt 0x12491c26a88 <line:99:9, col:18>
|   |     `-ParenExpr 0x12491c26a68 <col:16, col:18> 'int'
|   |       `-IntegerLiteral 0x12491c26a40 <col:17> 'int' 1
|   |-BinaryOperator 0x12491c22b70 <line:102:5, col:18> 'int' '='
|   | |-DeclRefExpr 0x12491c26ac8 <col:5> 'int' lvalue Var 0x12491c267a8 'max' 'int'
|   | `-ParenExpr 0x12491c22b50 <col:11, col:18> 'int'
|   |   `-BinaryOperator 0x12491c26b60 <col:12, col:16> 'int' '*'
|   |     |-IntegerLiteral 0x12491c26b00 <col:12> 'int' 2
|   |     `-ImplicitCastExpr 0x12491c26b48 <col:16> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x12491c26b28 <col:16> 'int' lvalue Var 0x12491c26728 'nl' 'int'
|   |-IfStmt 0x12491c22d30 <line:103:5, line:104:18>
|   | |-OpaqueValueExpr 0x12491c22d18 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x12491c22d08 <col:9, col:18>
|   |   `-ParenExpr 0x12491c22ce8 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x12491c22cc0 <col:17> 'int' 0
|   |-ForStmt 0x12491c22ef8 <line:110:5, line:113:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x12491c22e70 <line:110:32, col:36> 'int' '<'
|   | | |-ImplicitCastExpr 0x12491c22e40 <col:32> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12491c22e00 <col:32> 'int' lvalue Var 0x12491c26828 'i' 'int'
|   | | `-ImplicitCastExpr 0x12491c22e58 <col:36> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12491c22e20 <col:36> 'int' lvalue Var 0x12491c267a8 'max' 'int'
|   | |-UnaryOperator 0x12491c22eb0 <col:41, col:42> 'int' postfix '++'
|   | | `-DeclRefExpr 0x12491c22e90 <col:41> 'int' lvalue Var 0x12491c26828 'i' 'int'
|   | `-CompoundStmt 0x12491c22ee8 <col:46, line:113:5>
|   |-ForStmt 0x12491c231d0 <line:124:5, line:130:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x12491c230a0 <line:124:28, col:32> 'int' '<'
|   | | |-ImplicitCastExpr 0x12491c23070 <col:28> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12491c23030 <col:28> 'int' lvalue Var 0x12491c26828 'i' 'int'
|   | | `-ImplicitCastExpr 0x12491c23088 <col:32> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12491c23050 <col:32> 'int' lvalue Var 0x12491c26728 'nl' 'int'
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x12491c231c0 <col:47, line:130:5>
|   |-IfStmt 0x12491c232b8 <line:132:5, line:133:18>
|   | |-OpaqueValueExpr 0x12491c232a0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x12491c23290 <col:9, col:18>
|   |   `-ParenExpr 0x12491c23270 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x12491c23248 <col:17> 'int' 0
|   |-ForStmt 0x12491c23540 <line:152:5, line:155:5>
|   | |-BinaryOperator 0x12491c233a0 <line:152:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x12491c23358 <col:10> 'int' lvalue Var 0x12491c26828 'i' 'int'
|   | | `-IntegerLiteral 0x12491c23378 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x12491c23430 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x12491c23400 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12491c233c0 <col:17> 'int' lvalue Var 0x12491c26828 'i' 'int'
|   | | `-ImplicitCastExpr 0x12491c23418 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12491c233e0 <col:21> 'int' lvalue Var 0x12491c26728 'nl' 'int'
|   | |-UnaryOperator 0x12491c23470 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x12491c23450 <col:25> 'int' lvalue Var 0x12491c26828 'i' 'int'
|   | `-CompoundStmt 0x12491c23530 <col:30, line:155:5>
|   `-ReturnStmt 0x12491c235c0 <line:157:5, col:14>
|     `-ParenExpr 0x12491c235a0 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x12491c23578 <col:13> 'int' 1
|-FunctionDecl 0x12491c238c0 <line:161:1, line:171:1> line:161:5 invalid BN_from_montgomery 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x12491c23648 <col:24, col:32> col:32 invalid ret 'int *'
| |-ParmVarDecl 0x12491c236c8 <col:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x12491c23748 <col:54, col:67> col:67 invalid mont 'int *'
| |-ParmVarDecl 0x12491c237c8 <line:162:24, col:32> col:32 invalid ctx 'int *'
| `-CompoundStmt 0x12491c2ac78 <line:163:1, line:171:1>
|   |-DeclStmt 0x12491c23a18 <line:164:5, col:13>
|   | `-VarDecl 0x12491c239b0 <col:5, col:9> col:9 used retn 'int'
|   |-NullStmt 0x12491c2ac28 <line:168:22>
|   `-ReturnStmt 0x12491c2ac68 <line:170:5, col:12>
|     `-ImplicitCastExpr 0x12491c2ac50 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x12491c2ac30 <col:12> 'int' lvalue Var 0x12491c239b0 'retn' 'int'
|-FunctionDecl 0x12491c2aee8 <line:173:1, line:219:1> line:173:5 invalid bn_from_mont_fixed_top 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x12491c2acb8 <col:28, col:36> col:36 invalid ret 'int *'
| |-ParmVarDecl 0x12491c2ad38 <col:41, col:55> col:55 invalid a 'const int *'
| |-ParmVarDecl 0x12491c2adb8 <col:58, col:71> col:71 invalid mont 'int *'
| |-ParmVarDecl 0x12491c2ae38 <line:174:28, col:36> col:36 invalid ctx 'int *'
| `-CompoundStmt 0x12491c2b2d0 <line:175:1, line:219:1>
|   |-DeclStmt 0x12491c2b068 <line:176:5, col:17>
|   | `-VarDecl 0x12491c2afd8 <col:5, col:16> col:9 used retn 'int' cinit
|   |   `-IntegerLiteral 0x12491c2b040 <col:16> 'int' 0
|   |-IfStmt 0x12491c2b230 <line:181:5, line:183:5>
|   | |-OpaqueValueExpr 0x12491c2b218 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x12491c2b208 <line:181:49, line:183:5>
|   `-ReturnStmt 0x12491c2b2c0 <line:218:5, col:17>
|     `-ImplicitCastExpr 0x12491c2b2a8 <col:12, col:17> 'int' <LValueToRValue>
|       `-ParenExpr 0x12491c2b288 <col:12, col:17> 'int' lvalue
|         `-DeclRefExpr 0x12491c2b268 <col:13> 'int' lvalue Var 0x12491c2afd8 'retn' 'int'
|-FunctionDecl 0x12491c2b540 <line:221:1, line:225:1> line:221:5 invalid bn_to_mont_fixed_top 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x12491c2b310 <col:26, col:34> col:34 invalid r 'int *'
| |-ParmVarDecl 0x12491c2b390 <col:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x12491c2b410 <col:54, col:67> col:67 invalid mont 'int *'
| |-ParmVarDecl 0x12491c2b490 <line:222:26, col:34> col:34 invalid ctx 'int *'
| `-CompoundStmt 0x12491c2b618 <line:223:1, line:225:1>
|-FunctionDecl 0x12491c2b6f0 <line:227:1, line:237:1> line:227:14 invalid BN_MONT_CTX_new 'int *(void)'
| `-CompoundStmt 0x12491c2b8b8 <line:228:1, line:237:1>
|-FunctionDecl 0x12491c2b970 <line:239:1, line:247:1> line:239:6 invalid BN_MONT_CTX_init 'void (int *)'
| |-ParmVarDecl 0x12491c2b8e0 <col:23, col:36> col:36 invalid ctx 'int *'
| `-CompoundStmt 0x12491c2baf8 <line:240:1, line:247:1>
|-FunctionDecl 0x12491c2bbe0 <line:249:1, line:259:1> line:249:6 invalid BN_MONT_CTX_free 'void (int *)'
| |-ParmVarDecl 0x12491c2bb20 <col:23, col:36> col:36 invalid mont 'int *'
| `-CompoundStmt 0x12491c2bf40 <line:250:1, line:259:1>
|   `-IfStmt 0x12491c2bcc8 <line:251:5, line:252:9>
|     |-OpaqueValueExpr 0x12491c2bcb0 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x12491c2bca0 <col:9>
|-FunctionDecl 0x12491c2c160 <line:261:1, line:407:1> line:261:5 invalid BN_MONT_CTX_set 'int (int *, const int *, int *)'
| |-ParmVarDecl 0x12491c2bf70 <col:21, col:34> col:34 invalid mont 'int *'
| |-ParmVarDecl 0x12491c2bff0 <col:40, col:54> col:54 invalid mod 'const int *'
| |-ParmVarDecl 0x12491c2c070 <col:59, col:67> col:67 invalid ctx 'int *'
| `-CompoundStmt 0x12491c26cf0 <line:262:1, line:407:1>
|   |-DeclStmt 0x12491c2c370 <line:263:5, col:19>
|   | |-VarDecl 0x12491c2c248 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x12491c2c2c8 <col:5, col:18> col:12 used ret 'int' cinit
|   |   `-IntegerLiteral 0x12491c2c330 <col:18> 'int' 0
|   |-IfStmt 0x12491c2c4e8 <line:266:5, line:267:16>
|   | |-OpaqueValueExpr 0x12491c2c4d0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x12491c2c4c0 <col:9, col:16>
|   |   `-IntegerLiteral 0x12491c2c498 <col:16> 'int' 0
|   |-IfStmt 0x12491c2c5c0 <line:270:5, line:271:14>
|   | |-OpaqueValueExpr 0x12491c2c5a8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x12491c2c590 <col:9, col:14> 'err' 0x12491c2c540
|   |-IfStmt 0x12491c2c628 <line:273:5, line:274:14>
|   | |-OpaqueValueExpr 0x12491c2c610 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x12491c2c5f8 <col:9, col:14> 'err' 0x12491c2c540
|   |-CompoundStmt 0x12491c257b8 <line:280:5, line:369:5>
|   | |-IfStmt 0x12491c24c88 <line:340:9, line:341:18>
|   | | |-OpaqueValueExpr 0x12491c24c70 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x12491c24c58 <col:13, col:18> 'err' 0x12491c2c540
|   | |-IfStmt 0x12491c25088 <line:347:9, line:350:18> has_else
|   | | |-OpaqueValueExpr 0x12491c25070 <<invalid sloc>> '_Bool'
|   | | |-NullStmt 0x12491c25068 <line:348:13>
|   | | `-IfStmt 0x12491c25050 <line:349:14, line:350:18>
|   | |   |-OpaqueValueExpr 0x12491c25038 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x12491c25020 <col:13, col:18> 'err' 0x12491c2c540
|   | |-IfStmt 0x12491c251f0 <line:351:9, line:352:18>
|   | | |-OpaqueValueExpr 0x12491c251d8 <<invalid sloc>> '_Bool'
|   | | `-GotoStmt 0x12491c251c0 <col:13, col:18> 'err' 0x12491c2c540
|   | |-IfStmt 0x12491c25548 <line:353:9, line:360:9> has_else
|   | | |-OpaqueValueExpr 0x12491c25530 <<invalid sloc>> '_Bool'
|   | | |-CompoundStmt 0x12491c253a8 <line:353:30, line:356:9>
|   | | | `-IfStmt 0x12491c25390 <line:354:13, line:355:22>
|   | | |   |-OpaqueValueExpr 0x12491c25378 <<invalid sloc>> '_Bool'
|   | | |   `-GotoStmt 0x12491c25360 <col:17, col:22> 'err' 0x12491c2c540
|   | | `-CompoundStmt 0x12491c25518 <line:356:16, line:360:9>
|   | |   `-IfStmt 0x12491c25500 <line:358:13, line:359:22>
|   | |     |-OpaqueValueExpr 0x12491c254e8 <<invalid sloc>> '_Bool'
|   | |     `-GotoStmt 0x12491c254d0 <col:17, col:22> 'err' 0x12491c2c540
|   | `-IfStmt 0x12491c256b0 <line:361:9, line:362:18>
|   |   |-OpaqueValueExpr 0x12491c25698 <<invalid sloc>> '_Bool'
|   |   `-GotoStmt 0x12491c25680 <col:13, col:18> 'err' 0x12491c2c540
|   |-IfStmt 0x12491c25888 <line:393:5, line:394:14>
|   | |-OpaqueValueExpr 0x12491c25870 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x12491c25858 <col:9, col:14> 'err' 0x12491c2c540
|   |-IfStmt 0x12491c259e0 <line:395:5, line:396:14>
|   | |-OpaqueValueExpr 0x12491c259c8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x12491c259b0 <col:9, col:14> 'err' 0x12491c2c540
|   |-BinaryOperator 0x12491c26c48 <line:403:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x12491c26c00 <col:5> 'int' lvalue Var 0x12491c2c2c8 'ret' 'int'
|   | `-IntegerLiteral 0x12491c26c20 <col:11> 'int' 1
|   |-LabelStmt 0x12491c26c90 <line:404:2, col:5> 'err'
|   | `-NullStmt 0x12491c26c88 <col:5>
|   `-ReturnStmt 0x12491c26ce0 <line:406:5, col:12>
|     `-ImplicitCastExpr 0x12491c26cc8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x12491c26ca8 <col:12> 'int' lvalue Var 0x12491c2c2c8 'ret' 'int'
|-FunctionDecl 0x12491c26ec0 <line:409:1, line:424:1> line:409:14 invalid BN_MONT_CTX_copy 'int *(int *, int *)'
| |-ParmVarDecl 0x12491c26d68 <col:31, col:44> col:44 invalid to 'int *'
| |-ParmVarDecl 0x12491c26de8 <col:48, col:61> col:61 invalid from 'int *'
| `-CompoundStmt 0x12491c27088 <line:410:1, line:424:1>
`-FunctionDecl 0x12491c27360 <line:426:1, line:462:1> line:426:14 invalid BN_MONT_CTX_set_locked 'int *(int **, int *, const int *, int *)'
  |-ParmVarDecl 0x12491c270e8 <col:37, col:51> col:51 invalid pmont 'int **'
  |-ParmVarDecl 0x12491c27168 <col:58, col:73> col:73 invalid lock 'int *'
  |-ParmVarDecl 0x12491c271e8 <line:427:37, col:51> col:51 invalid mod 'const int *'
  |-ParmVarDecl 0x12491c27268 <col:56, col:64> col:64 invalid ctx 'int *'
  `-CompoundStmt 0x12491c27820 <line:428:1, line:462:1>
    |-IfStmt 0x12491c27680 <line:448:5, line:451:5>
    | |-OpaqueValueExpr 0x12491c27668 <<invalid sloc>> '_Bool'
    | `-CompoundStmt 0x12491c27658 <line:448:42, line:451:5>
    `-IfStmt 0x12491c277d8 <line:455:5, line:459:9> has_else
      |-OpaqueValueExpr 0x12491c277c0 <<invalid sloc>> '_Bool'
      |-CompoundStmt 0x12491c277a8 <line:455:17, line:458:5>
      `-NullStmt 0x12491c277b8 <line:459:9>
