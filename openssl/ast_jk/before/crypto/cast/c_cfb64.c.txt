TranslationUnitDecl 0x1f660063398 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1f660063c30 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1f660063930 '__int128'
|-TypedefDecl 0x1f660063ca0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1f660063950 'unsigned __int128'
|-TypedefDecl 0x1f660063fd8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1f660063d90 'struct __NSConstantString_tag'
|   `-Record 0x1f660063cf8 '__NSConstantString_tag'
|-TypedefDecl 0x1f660064048 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1f660063570 'unsigned long long'
|-TypedefDecl 0x1f6600640e0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1f6600640a0 'char *'
|   `-BuiltinType 0x1f660063430 'char'
|-TypedefDecl 0x1f660064150 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1f6600640a0 'char *'
|   `-BuiltinType 0x1f660063430 'char'
|-VarDecl 0x1f660064290 <.//openssl//file_jk/before\crypto\cast/cast_lcl.h:183:1, <invalid sloc>> col:24 invalid CAST_S_table0 'const int [256]' extern
|-VarDecl 0x1f66197a910 <line:184:1, <invalid sloc>> col:24 invalid CAST_S_table1 'const int [256]' extern
|-VarDecl 0x1f66197a9e0 <line:185:1, <invalid sloc>> col:24 invalid CAST_S_table2 'const int [256]' extern
|-VarDecl 0x1f66197aab0 <line:186:1, <invalid sloc>> col:24 invalid CAST_S_table3 'const int [256]' extern
|-VarDecl 0x1f66197ab80 <line:187:1, <invalid sloc>> col:24 invalid CAST_S_table4 'const int [256]' extern
|-VarDecl 0x1f66197ac50 <line:188:1, <invalid sloc>> col:24 invalid CAST_S_table5 'const int [256]' extern
|-VarDecl 0x1f66197ad20 <line:189:1, <invalid sloc>> col:24 invalid CAST_S_table6 'const int [256]' extern
|-VarDecl 0x1f66197adf0 <line:190:1, <invalid sloc>> col:24 invalid CAST_S_table7 'const int [256]' extern
`-FunctionDecl 0x1f66197b328 <.//openssl//file_jk/before\crypto\cast\c_cfb64.c:19:1, line:74:1> line:19:6 invalid CAST_cfb64_encrypt 'void (const unsigned char *, unsigned char *, long, const int *, unsigned char *, int *, int)'
  |-ParmVarDecl 0x1f66197aea0 <col:25, col:46> col:46 used in 'const unsigned char *'
  |-ParmVarDecl 0x1f66197af50 <col:50, col:65> col:65 used out 'unsigned char *'
  |-ParmVarDecl 0x1f66197afd0 <line:20:25, col:30> col:30 used length 'long'
  |-ParmVarDecl 0x1f66197b050 <col:38, col:54> col:54 invalid schedule 'const int *'
  |-ParmVarDecl 0x1f66197b0d0 <line:21:25, col:40> col:40 used ivec 'unsigned char *'
  |-ParmVarDecl 0x1f66197b180 <col:46, col:51> col:51 used num 'int *'
  |-ParmVarDecl 0x1f66197b200 <col:56, col:60> col:60 used enc 'int'
  `-CompoundStmt 0x1f66197f2b0 <line:22:1, line:74:1>
    |-DeclStmt 0x1f66197b498 <line:23:5, col:33>
    | `-VarDecl 0x1f66197b430 <col:5, col:24> col:24 invalid v0 'int' register
    |-DeclStmt 0x1f66197b5b0 <line:24:5, col:26>
    | `-VarDecl 0x1f66197b4c8 <col:5, col:23> col:18 used n 'int' register cinit
    |   `-ImplicitCastExpr 0x1f66197b598 <col:22, col:23> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x1f66197b580 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x1f66197b568 <col:23> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x1f66197b530 <col:23> 'int *' lvalue ParmVar 0x1f66197b180 'num' 'int *'
    |-DeclStmt 0x1f66197b698 <line:25:5, col:29>
    | `-VarDecl 0x1f66197b5e0 <col:5, col:23> col:19 used l 'long' register cinit
    |   `-ImplicitCastExpr 0x1f66197b680 <col:23> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x1f66197b648 <col:23> 'long' lvalue ParmVar 0x1f66197afd0 'length' 'long'
    |-DeclStmt 0x1f66197b850 <line:27:5, col:29>
    | |-VarDecl 0x1f66197b6c8 <col:5, col:20> col:20 used iv 'unsigned char *'
    | |-VarDecl 0x1f66197b748 <col:5, col:24> col:24 used c 'unsigned char'
    | `-VarDecl 0x1f66197b7c8 <col:5, col:27> col:27 used cc 'unsigned char'
    |-BinaryOperator 0x1f66197b8f0 <line:29:5, col:10> 'unsigned char *' '='
    | |-DeclRefExpr 0x1f66197b868 <col:5> 'unsigned char *' lvalue Var 0x1f66197b6c8 'iv' 'unsigned char *'
    | `-ImplicitCastExpr 0x1f66197b8d8 <col:10> 'unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x1f66197b8a0 <col:10> 'unsigned char *' lvalue ParmVar 0x1f66197b0d0 'ivec' 'unsigned char *'
    |-IfStmt 0x1f66197f0d0 <line:30:5, line:71:5> has_else
    | |-ImplicitCastExpr 0x1f66197b958 <line:30:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1f66197b920 <col:9> 'int' lvalue ParmVar 0x1f66197b200 'enc' 'int'
    | |-CompoundStmt 0x1f66197d5a8 <col:14, line:50:5>
    | | `-WhileStmt 0x1f66197d590 <line:31:9, line:49:9>
    | |   |-UnaryOperator 0x1f66197b9a8 <line:31:16, col:17> 'long' postfix '--'
    | |   | `-DeclRefExpr 0x1f66197b970 <col:16> 'long' lvalue Var 0x1f66197b5e0 'l' 'long'
    | |   `-CompoundStmt 0x1f66197d558 <col:21, line:49:9>
    | |     |-IfStmt 0x1f66197d048 <line:32:13, line:44:13>
    | |     | |-BinaryOperator 0x1f66197ba38 <line:32:17, col:22> 'int' '=='
    | |     | | |-ImplicitCastExpr 0x1f66197ba20 <col:17> 'int' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x1f66197b9c0 <col:17> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
    | |     | | `-IntegerLiteral 0x1f66197b9f8 <col:22> 'int' 0
    | |     | `-CompoundStmt 0x1f66197d028 <col:25, line:44:13>
    | |     |   |-BinaryOperator 0x1f66197c870 <line:38:17, col:22> 'unsigned char *' '='
    | |     |   | |-DeclRefExpr 0x1f66197c818 <col:17> 'unsigned char *' lvalue Var 0x1f66197b6c8 'iv' 'unsigned char *'
    | |     |   | `-ImplicitCastExpr 0x1f66197c858 <col:22> 'unsigned char *' <LValueToRValue>
    | |     |   |   `-DeclRefExpr 0x1f66197c838 <col:22> 'unsigned char *' lvalue ParmVar 0x1f66197b0d0 'ivec' 'unsigned char *'
    | |     |   `-BinaryOperator 0x1f66197d008 <line:43:17, col:22> 'unsigned char *' '='
    | |     |     |-DeclRefExpr 0x1f66197cfb0 <col:17> 'unsigned char *' lvalue Var 0x1f66197b6c8 'iv' 'unsigned char *'
    | |     |     `-ImplicitCastExpr 0x1f66197cff0 <col:22> 'unsigned char *' <LValueToRValue>
    | |     |       `-DeclRefExpr 0x1f66197cfd0 <col:22> 'unsigned char *' lvalue ParmVar 0x1f66197b0d0 'ivec' 'unsigned char *'
    | |     |-BinaryOperator 0x1f66197d248 <line:45:13, col:31> 'unsigned char' '='
    | |     | |-DeclRefExpr 0x1f66197d060 <col:13> 'unsigned char' lvalue Var 0x1f66197b748 'c' 'unsigned char'
    | |     | `-ImplicitCastExpr 0x1f66197d230 <col:17, col:31> 'unsigned char' <IntegralCast>
    | |     |   `-BinaryOperator 0x1f66197d210 <col:17, col:31> 'int' '^'
    | |     |     |-ImplicitCastExpr 0x1f66197d1c8 <col:17, col:23> 'int' <IntegralCast>
    | |     |     | `-ImplicitCastExpr 0x1f66197d1b0 <col:17, col:23> 'unsigned char' <LValueToRValue>
    | |     |     |   `-UnaryOperator 0x1f66197d108 <col:17, col:23> 'const unsigned char' lvalue prefix '*' cannot overflow
    | |     |     |     `-ParenExpr 0x1f66197d0e8 <col:18, col:23> 'const unsigned char *'
    | |     |     |       `-UnaryOperator 0x1f66197d0d0 <col:19, col:21> 'const unsigned char *' postfix '++'
    | |     |     |         `-DeclRefExpr 0x1f66197d098 <col:19> 'const unsigned char *' lvalue ParmVar 0x1f66197aea0 'in' 'const unsigned char *'
    | |     |     `-ImplicitCastExpr 0x1f66197d1f8 <col:27, col:31> 'int' <IntegralCast>
    | |     |       `-ImplicitCastExpr 0x1f66197d1e0 <col:27, col:31> 'unsigned char' <LValueToRValue>
    | |     |         `-ArraySubscriptExpr 0x1f66197d190 <col:27, col:31> 'unsigned char' lvalue
    | |     |           |-ImplicitCastExpr 0x1f66197d160 <col:27> 'unsigned char *' <LValueToRValue>
    | |     |           | `-DeclRefExpr 0x1f66197d120 <col:27> 'unsigned char *' lvalue Var 0x1f66197b6c8 'iv' 'unsigned char *'
    | |     |           `-ImplicitCastExpr 0x1f66197d178 <col:30> 'int' <LValueToRValue>
    | |     |             `-DeclRefExpr 0x1f66197d140 <col:30> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
    | |     |-BinaryOperator 0x1f66197d328 <line:46:13, col:24> 'unsigned char' '='
    | |     | |-UnaryOperator 0x1f66197d2d8 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    | |     | | `-ParenExpr 0x1f66197d2b8 <col:14, col:20> 'unsigned char *'
    | |     | |   `-UnaryOperator 0x1f66197d2a0 <col:15, col:18> 'unsigned char *' postfix '++'
    | |     | |     `-DeclRefExpr 0x1f66197d268 <col:15> 'unsigned char *' lvalue ParmVar 0x1f66197af50 'out' 'unsigned char *'
    | |     | `-ImplicitCastExpr 0x1f66197d310 <col:24> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x1f66197d2f0 <col:24> 'unsigned char' lvalue Var 0x1f66197b748 'c' 'unsigned char'
    | |     |-BinaryOperator 0x1f66197d410 <line:47:13, col:21> 'unsigned char' '='
    | |     | |-ArraySubscriptExpr 0x1f66197d3b8 <col:13, col:17> 'unsigned char' lvalue
    | |     | | |-ImplicitCastExpr 0x1f66197d388 <col:13> 'unsigned char *' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x1f66197d348 <col:13> 'unsigned char *' lvalue Var 0x1f66197b6c8 'iv' 'unsigned char *'
    | |     | | `-ImplicitCastExpr 0x1f66197d3a0 <col:16> 'int' <LValueToRValue>
    | |     | |   `-DeclRefExpr 0x1f66197d368 <col:16> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
    | |     | `-ImplicitCastExpr 0x1f66197d3f8 <col:21> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x1f66197d3d8 <col:21> 'unsigned char' lvalue Var 0x1f66197b748 'c' 'unsigned char'
    | |     `-BinaryOperator 0x1f66197d538 <line:48:13, col:27> 'int' '='
    | |       |-DeclRefExpr 0x1f66197d430 <col:13> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
    | |       `-BinaryOperator 0x1f66197d518 <col:17, col:27> 'int' '&'
    | |         |-ParenExpr 0x1f66197d4d0 <col:17, col:23> 'int'
    | |         | `-BinaryOperator 0x1f66197d4b0 <col:18, col:22> 'int' '+'
    | |         |   |-ImplicitCastExpr 0x1f66197d498 <col:18> 'int' <LValueToRValue>
    | |         |   | `-DeclRefExpr 0x1f66197d450 <col:18> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
    | |         |   `-IntegerLiteral 0x1f66197d470 <col:22> 'int' 1
    | |         `-IntegerLiteral 0x1f66197d4f0 <col:27> 'int' 7
    | `-CompoundStmt 0x1f66197f0b8 <line:50:12, line:71:5>
    |   `-WhileStmt 0x1f66197f0a0 <line:51:9, line:70:9>
    |     |-UnaryOperator 0x1f66197d5e0 <line:51:16, col:17> 'long' postfix '--'
    |     | `-DeclRefExpr 0x1f66197d5c0 <col:16> 'long' lvalue Var 0x1f66197b5e0 'l' 'long'
    |     `-CompoundStmt 0x1f66197f060 <col:21, line:70:9>
    |       |-IfStmt 0x1f66197eb08 <line:52:13, line:64:13>
    |       | |-BinaryOperator 0x1f66197d658 <line:52:17, col:22> 'int' '=='
    |       | | |-ImplicitCastExpr 0x1f66197d640 <col:17> 'int' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x1f66197d5f8 <col:17> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
    |       | | `-IntegerLiteral 0x1f66197d618 <col:22> 'int' 0
    |       | `-CompoundStmt 0x1f66197eae8 <col:25, line:64:13>
    |       |   |-BinaryOperator 0x1f66197e340 <line:58:17, col:22> 'unsigned char *' '='
    |       |   | |-DeclRefExpr 0x1f66197e2e8 <col:17> 'unsigned char *' lvalue Var 0x1f66197b6c8 'iv' 'unsigned char *'
    |       |   | `-ImplicitCastExpr 0x1f66197e328 <col:22> 'unsigned char *' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x1f66197e308 <col:22> 'unsigned char *' lvalue ParmVar 0x1f66197b0d0 'ivec' 'unsigned char *'
    |       |   `-BinaryOperator 0x1f66197eac8 <line:63:17, col:22> 'unsigned char *' '='
    |       |     |-DeclRefExpr 0x1f66197ea70 <col:17> 'unsigned char *' lvalue Var 0x1f66197b6c8 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x1f66197eab0 <col:22> 'unsigned char *' <LValueToRValue>
    |       |       `-DeclRefExpr 0x1f66197ea90 <col:22> 'unsigned char *' lvalue ParmVar 0x1f66197b0d0 'ivec' 'unsigned char *'
    |       |-BinaryOperator 0x1f66197ebe0 <line:65:13, col:24> 'unsigned char' '='
    |       | |-DeclRefExpr 0x1f66197eb20 <col:13> 'unsigned char' lvalue Var 0x1f66197b7c8 'cc' 'unsigned char'
    |       | `-ImplicitCastExpr 0x1f66197ebc8 <col:18, col:24> 'unsigned char' <LValueToRValue>
    |       |   `-UnaryOperator 0x1f66197ebb0 <col:18, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
    |       |     `-ParenExpr 0x1f66197eb90 <col:19, col:24> 'const unsigned char *'
    |       |       `-UnaryOperator 0x1f66197eb78 <col:20, col:22> 'const unsigned char *' postfix '++'
    |       |         `-DeclRefExpr 0x1f66197eb58 <col:20> 'const unsigned char *' lvalue ParmVar 0x1f66197aea0 'in' 'const unsigned char *'
    |       |-BinaryOperator 0x1f66197ecc8 <line:66:13, col:21> 'unsigned char' '='
    |       | |-DeclRefExpr 0x1f66197ec00 <col:13> 'unsigned char' lvalue Var 0x1f66197b748 'c' 'unsigned char'
    |       | `-ImplicitCastExpr 0x1f66197ecb0 <col:17, col:21> 'unsigned char' <LValueToRValue>
    |       |   `-ArraySubscriptExpr 0x1f66197ec90 <col:17, col:21> 'unsigned char' lvalue
    |       |     |-ImplicitCastExpr 0x1f66197ec60 <col:17> 'unsigned char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x1f66197ec20 <col:17> 'unsigned char *' lvalue Var 0x1f66197b6c8 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x1f66197ec78 <col:20> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x1f66197ec40 <col:20> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
    |       |-BinaryOperator 0x1f66197edb0 <line:67:13, col:21> 'unsigned char' '='
    |       | |-ArraySubscriptExpr 0x1f66197ed58 <col:13, col:17> 'unsigned char' lvalue
    |       | | |-ImplicitCastExpr 0x1f66197ed28 <col:13> 'unsigned char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x1f66197ece8 <col:13> 'unsigned char *' lvalue Var 0x1f66197b6c8 'iv' 'unsigned char *'
    |       | | `-ImplicitCastExpr 0x1f66197ed40 <col:16> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x1f66197ed08 <col:16> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
    |       | `-ImplicitCastExpr 0x1f66197ed98 <col:21> 'unsigned char' <LValueToRValue>
    |       |   `-DeclRefExpr 0x1f66197ed78 <col:21> 'unsigned char' lvalue Var 0x1f66197b7c8 'cc' 'unsigned char'
    |       |-BinaryOperator 0x1f66197ef18 <line:68:13, col:28> 'unsigned char' '='
    |       | |-UnaryOperator 0x1f66197ee28 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    |       | | `-ParenExpr 0x1f66197ee08 <col:14, col:20> 'unsigned char *'
    |       | |   `-UnaryOperator 0x1f66197edf0 <col:15, col:18> 'unsigned char *' postfix '++'
    |       | |     `-DeclRefExpr 0x1f66197edd0 <col:15> 'unsigned char *' lvalue ParmVar 0x1f66197af50 'out' 'unsigned char *'
    |       | `-ImplicitCastExpr 0x1f66197ef00 <col:24, col:28> 'unsigned char' <IntegralCast>
    |       |   `-BinaryOperator 0x1f66197eee0 <col:24, col:28> 'int' '^'
    |       |     |-ImplicitCastExpr 0x1f66197ee98 <col:24> 'int' <IntegralCast>
    |       |     | `-ImplicitCastExpr 0x1f66197ee80 <col:24> 'unsigned char' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x1f66197ee40 <col:24> 'unsigned char' lvalue Var 0x1f66197b748 'c' 'unsigned char'
    |       |     `-ImplicitCastExpr 0x1f66197eec8 <col:28> 'int' <IntegralCast>
    |       |       `-ImplicitCastExpr 0x1f66197eeb0 <col:28> 'unsigned char' <LValueToRValue>
    |       |         `-DeclRefExpr 0x1f66197ee60 <col:28> 'unsigned char' lvalue Var 0x1f66197b7c8 'cc' 'unsigned char'
    |       `-BinaryOperator 0x1f66197f040 <line:69:13, col:27> 'int' '='
    |         |-DeclRefExpr 0x1f66197ef38 <col:13> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
    |         `-BinaryOperator 0x1f66197f020 <col:17, col:27> 'int' '&'
    |           |-ParenExpr 0x1f66197efd8 <col:17, col:23> 'int'
    |           | `-BinaryOperator 0x1f66197efb8 <col:18, col:22> 'int' '+'
    |           |   |-ImplicitCastExpr 0x1f66197efa0 <col:18> 'int' <LValueToRValue>
    |           |   | `-DeclRefExpr 0x1f66197ef58 <col:18> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
    |           |   `-IntegerLiteral 0x1f66197ef78 <col:22> 'int' 1
    |           `-IntegerLiteral 0x1f66197eff8 <col:27> 'int' 7
    `-BinaryOperator 0x1f66197f290 <line:73:5, col:12> 'int' '='
      |-UnaryOperator 0x1f66197f240 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x1f66197f228 <col:6> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x1f66197f208 <col:6> 'int *' lvalue ParmVar 0x1f66197b180 'num' 'int *'
      `-ImplicitCastExpr 0x1f66197f278 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1f66197f258 <col:12> 'int' lvalue Var 0x1f66197b4c8 'n' 'int'
