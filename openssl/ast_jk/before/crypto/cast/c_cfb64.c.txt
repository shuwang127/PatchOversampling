TranslationUnitDecl 0x22599c22f38 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x22599c237d0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x22599c234d0 '__int128'
|-TypedefDecl 0x22599c23840 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x22599c234f0 'unsigned __int128'
|-TypedefDecl 0x22599c23b78 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x22599c23930 'struct __NSConstantString_tag'
|   `-Record 0x22599c23898 '__NSConstantString_tag'
|-TypedefDecl 0x22599c23be8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x22599c23110 'unsigned long long'
|-TypedefDecl 0x22599c23c80 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x22599c23c40 'char *'
|   `-BuiltinType 0x22599c22fd0 'char'
|-TypedefDecl 0x22599c23cf0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x22599c23c40 'char *'
|   `-BuiltinType 0x22599c22fd0 'char'
|-VarDecl 0x22599c23e30 <.//openssl//file_jk/before\crypto\cast/cast_lcl.h:183:1, <invalid sloc>> col:24 invalid CAST_S_table0 'const int [256]' extern
|-VarDecl 0x2259b5e5ea0 <line:184:1, <invalid sloc>> col:24 invalid CAST_S_table1 'const int [256]' extern
|-VarDecl 0x2259b5e5f70 <line:185:1, <invalid sloc>> col:24 invalid CAST_S_table2 'const int [256]' extern
|-VarDecl 0x2259b5e6040 <line:186:1, <invalid sloc>> col:24 invalid CAST_S_table3 'const int [256]' extern
|-VarDecl 0x2259b5e6110 <line:187:1, <invalid sloc>> col:24 invalid CAST_S_table4 'const int [256]' extern
|-VarDecl 0x2259b5e61e0 <line:188:1, <invalid sloc>> col:24 invalid CAST_S_table5 'const int [256]' extern
|-VarDecl 0x2259b5e62b0 <line:189:1, <invalid sloc>> col:24 invalid CAST_S_table6 'const int [256]' extern
|-VarDecl 0x2259b5e6380 <line:190:1, <invalid sloc>> col:24 invalid CAST_S_table7 'const int [256]' extern
`-FunctionDecl 0x2259b5e68b8 <.//openssl//file_jk/before\crypto\cast\c_cfb64.c:19:1, line:74:1> line:19:6 invalid CAST_cfb64_encrypt 'void (const unsigned char *, unsigned char *, long, const int *, unsigned char *, int *, int)'
  |-ParmVarDecl 0x2259b5e6430 <col:25, col:46> col:46 used in 'const unsigned char *'
  |-ParmVarDecl 0x2259b5e64e0 <col:50, col:65> col:65 used out 'unsigned char *'
  |-ParmVarDecl 0x2259b5e6560 <line:20:25, col:30> col:30 used length 'long'
  |-ParmVarDecl 0x2259b5e65e0 <col:38, col:54> col:54 invalid schedule 'const int *'
  |-ParmVarDecl 0x2259b5e6660 <line:21:25, col:40> col:40 used ivec 'unsigned char *'
  |-ParmVarDecl 0x2259b5e6710 <col:46, col:51> col:51 used num 'int *'
  |-ParmVarDecl 0x2259b5e6790 <col:56, col:60> col:60 used enc 'int'
  `-CompoundStmt 0x2259b5f08a0 <line:22:1, line:74:1>
    |-DeclStmt 0x2259b5e6a28 <line:23:5, col:33>
    | `-VarDecl 0x2259b5e69c0 <col:5, col:24> col:24 invalid v0 'int' register
    |-DeclStmt 0x2259b5e6b40 <line:24:5, col:26>
    | `-VarDecl 0x2259b5e6a58 <col:5, col:23> col:18 used n 'int' register cinit
    |   `-ImplicitCastExpr 0x2259b5e6b28 <col:22, col:23> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x2259b5e6b10 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x2259b5e6af8 <col:23> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x2259b5e6ac0 <col:23> 'int *' lvalue ParmVar 0x2259b5e6710 'num' 'int *'
    |-DeclStmt 0x2259b5e6c28 <line:25:5, col:29>
    | `-VarDecl 0x2259b5e6b70 <col:5, col:23> col:19 used l 'long' register cinit
    |   `-ImplicitCastExpr 0x2259b5e6c10 <col:23> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x2259b5e6bd8 <col:23> 'long' lvalue ParmVar 0x2259b5e6560 'length' 'long'
    |-DeclStmt 0x2259b5e6de0 <line:27:5, col:29>
    | |-VarDecl 0x2259b5e6c58 <col:5, col:20> col:20 used iv 'unsigned char *'
    | |-VarDecl 0x2259b5e6cd8 <col:5, col:24> col:24 used c 'unsigned char'
    | `-VarDecl 0x2259b5e6d58 <col:5, col:27> col:27 used cc 'unsigned char'
    |-BinaryOperator 0x2259b5e6e80 <line:29:5, col:10> 'unsigned char *' '='
    | |-DeclRefExpr 0x2259b5e6df8 <col:5> 'unsigned char *' lvalue Var 0x2259b5e6c58 'iv' 'unsigned char *'
    | `-ImplicitCastExpr 0x2259b5e6e68 <col:10> 'unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x2259b5e6e30 <col:10> 'unsigned char *' lvalue ParmVar 0x2259b5e6660 'ivec' 'unsigned char *'
    |-IfStmt 0x2259b5f06c0 <line:30:5, line:71:5> has_else
    | |-ImplicitCastExpr 0x2259b5ebf38 <line:30:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x2259b5ebf00 <col:9> 'int' lvalue ParmVar 0x2259b5e6790 'enc' 'int'
    | |-CompoundStmt 0x2259b5efba8 <col:14, line:50:5>
    | | `-WhileStmt 0x2259b5efb90 <line:31:9, line:49:9>
    | |   |-UnaryOperator 0x2259b5ebf88 <line:31:16, col:17> 'long' postfix '--'
    | |   | `-DeclRefExpr 0x2259b5ebf50 <col:16> 'long' lvalue Var 0x2259b5e6b70 'l' 'long'
    | |   `-CompoundStmt 0x2259b5efb58 <col:21, line:49:9>
    | |     |-IfStmt 0x2259b5ef648 <line:32:13, line:44:13>
    | |     | |-BinaryOperator 0x2259b5ec018 <line:32:17, col:22> 'int' '=='
    | |     | | |-ImplicitCastExpr 0x2259b5ec000 <col:17> 'int' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x2259b5ebfa0 <col:17> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
    | |     | | `-IntegerLiteral 0x2259b5ebfd8 <col:22> 'int' 0
    | |     | `-CompoundStmt 0x2259b5ef628 <col:25, line:44:13>
    | |     |   |-BinaryOperator 0x2259b5ece50 <line:38:17, col:22> 'unsigned char *' '='
    | |     |   | |-DeclRefExpr 0x2259b5ecdf8 <col:17> 'unsigned char *' lvalue Var 0x2259b5e6c58 'iv' 'unsigned char *'
    | |     |   | `-ImplicitCastExpr 0x2259b5ece38 <col:22> 'unsigned char *' <LValueToRValue>
    | |     |   |   `-DeclRefExpr 0x2259b5ece18 <col:22> 'unsigned char *' lvalue ParmVar 0x2259b5e6660 'ivec' 'unsigned char *'
    | |     |   `-BinaryOperator 0x2259b5ef608 <line:43:17, col:22> 'unsigned char *' '='
    | |     |     |-DeclRefExpr 0x2259b5ef5b0 <col:17> 'unsigned char *' lvalue Var 0x2259b5e6c58 'iv' 'unsigned char *'
    | |     |     `-ImplicitCastExpr 0x2259b5ef5f0 <col:22> 'unsigned char *' <LValueToRValue>
    | |     |       `-DeclRefExpr 0x2259b5ef5d0 <col:22> 'unsigned char *' lvalue ParmVar 0x2259b5e6660 'ivec' 'unsigned char *'
    | |     |-BinaryOperator 0x2259b5ef848 <line:45:13, col:31> 'unsigned char' '='
    | |     | |-DeclRefExpr 0x2259b5ef660 <col:13> 'unsigned char' lvalue Var 0x2259b5e6cd8 'c' 'unsigned char'
    | |     | `-ImplicitCastExpr 0x2259b5ef830 <col:17, col:31> 'unsigned char' <IntegralCast>
    | |     |   `-BinaryOperator 0x2259b5ef810 <col:17, col:31> 'int' '^'
    | |     |     |-ImplicitCastExpr 0x2259b5ef7c8 <col:17, col:23> 'int' <IntegralCast>
    | |     |     | `-ImplicitCastExpr 0x2259b5ef7b0 <col:17, col:23> 'unsigned char' <LValueToRValue>
    | |     |     |   `-UnaryOperator 0x2259b5ef708 <col:17, col:23> 'const unsigned char' lvalue prefix '*' cannot overflow
    | |     |     |     `-ParenExpr 0x2259b5ef6e8 <col:18, col:23> 'const unsigned char *'
    | |     |     |       `-UnaryOperator 0x2259b5ef6d0 <col:19, col:21> 'const unsigned char *' postfix '++'
    | |     |     |         `-DeclRefExpr 0x2259b5ef698 <col:19> 'const unsigned char *' lvalue ParmVar 0x2259b5e6430 'in' 'const unsigned char *'
    | |     |     `-ImplicitCastExpr 0x2259b5ef7f8 <col:27, col:31> 'int' <IntegralCast>
    | |     |       `-ImplicitCastExpr 0x2259b5ef7e0 <col:27, col:31> 'unsigned char' <LValueToRValue>
    | |     |         `-ArraySubscriptExpr 0x2259b5ef790 <col:27, col:31> 'unsigned char' lvalue
    | |     |           |-ImplicitCastExpr 0x2259b5ef760 <col:27> 'unsigned char *' <LValueToRValue>
    | |     |           | `-DeclRefExpr 0x2259b5ef720 <col:27> 'unsigned char *' lvalue Var 0x2259b5e6c58 'iv' 'unsigned char *'
    | |     |           `-ImplicitCastExpr 0x2259b5ef778 <col:30> 'int' <LValueToRValue>
    | |     |             `-DeclRefExpr 0x2259b5ef740 <col:30> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
    | |     |-BinaryOperator 0x2259b5ef928 <line:46:13, col:24> 'unsigned char' '='
    | |     | |-UnaryOperator 0x2259b5ef8d8 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    | |     | | `-ParenExpr 0x2259b5ef8b8 <col:14, col:20> 'unsigned char *'
    | |     | |   `-UnaryOperator 0x2259b5ef8a0 <col:15, col:18> 'unsigned char *' postfix '++'
    | |     | |     `-DeclRefExpr 0x2259b5ef868 <col:15> 'unsigned char *' lvalue ParmVar 0x2259b5e64e0 'out' 'unsigned char *'
    | |     | `-ImplicitCastExpr 0x2259b5ef910 <col:24> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x2259b5ef8f0 <col:24> 'unsigned char' lvalue Var 0x2259b5e6cd8 'c' 'unsigned char'
    | |     |-BinaryOperator 0x2259b5efa10 <line:47:13, col:21> 'unsigned char' '='
    | |     | |-ArraySubscriptExpr 0x2259b5ef9b8 <col:13, col:17> 'unsigned char' lvalue
    | |     | | |-ImplicitCastExpr 0x2259b5ef988 <col:13> 'unsigned char *' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x2259b5ef948 <col:13> 'unsigned char *' lvalue Var 0x2259b5e6c58 'iv' 'unsigned char *'
    | |     | | `-ImplicitCastExpr 0x2259b5ef9a0 <col:16> 'int' <LValueToRValue>
    | |     | |   `-DeclRefExpr 0x2259b5ef968 <col:16> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
    | |     | `-ImplicitCastExpr 0x2259b5ef9f8 <col:21> 'unsigned char' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x2259b5ef9d8 <col:21> 'unsigned char' lvalue Var 0x2259b5e6cd8 'c' 'unsigned char'
    | |     `-BinaryOperator 0x2259b5efb38 <line:48:13, col:27> 'int' '='
    | |       |-DeclRefExpr 0x2259b5efa30 <col:13> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
    | |       `-BinaryOperator 0x2259b5efb18 <col:17, col:27> 'int' '&'
    | |         |-ParenExpr 0x2259b5efad0 <col:17, col:23> 'int'
    | |         | `-BinaryOperator 0x2259b5efab0 <col:18, col:22> 'int' '+'
    | |         |   |-ImplicitCastExpr 0x2259b5efa98 <col:18> 'int' <LValueToRValue>
    | |         |   | `-DeclRefExpr 0x2259b5efa50 <col:18> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
    | |         |   `-IntegerLiteral 0x2259b5efa70 <col:22> 'int' 1
    | |         `-IntegerLiteral 0x2259b5efaf0 <col:27> 'int' 7
    | `-CompoundStmt 0x2259b5f06a8 <line:50:12, line:71:5>
    |   `-WhileStmt 0x2259b5f0690 <line:51:9, line:70:9>
    |     |-UnaryOperator 0x2259b5efbe0 <line:51:16, col:17> 'long' postfix '--'
    |     | `-DeclRefExpr 0x2259b5efbc0 <col:16> 'long' lvalue Var 0x2259b5e6b70 'l' 'long'
    |     `-CompoundStmt 0x2259b5f0650 <col:21, line:70:9>
    |       |-IfStmt 0x2259b5f00f8 <line:52:13, line:64:13>
    |       | |-BinaryOperator 0x2259b5efc58 <line:52:17, col:22> 'int' '=='
    |       | | |-ImplicitCastExpr 0x2259b5efc40 <col:17> 'int' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x2259b5efbf8 <col:17> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
    |       | | `-IntegerLiteral 0x2259b5efc18 <col:22> 'int' 0
    |       | `-CompoundStmt 0x2259b5f00d8 <col:25, line:64:13>
    |       |   |-BinaryOperator 0x2259b5e88c0 <line:58:17, col:22> 'unsigned char *' '='
    |       |   | |-DeclRefExpr 0x2259b5e8868 <col:17> 'unsigned char *' lvalue Var 0x2259b5e6c58 'iv' 'unsigned char *'
    |       |   | `-ImplicitCastExpr 0x2259b5e88a8 <col:22> 'unsigned char *' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x2259b5e8888 <col:22> 'unsigned char *' lvalue ParmVar 0x2259b5e6660 'ivec' 'unsigned char *'
    |       |   `-BinaryOperator 0x2259b5f00b8 <line:63:17, col:22> 'unsigned char *' '='
    |       |     |-DeclRefExpr 0x2259b5f0060 <col:17> 'unsigned char *' lvalue Var 0x2259b5e6c58 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x2259b5f00a0 <col:22> 'unsigned char *' <LValueToRValue>
    |       |       `-DeclRefExpr 0x2259b5f0080 <col:22> 'unsigned char *' lvalue ParmVar 0x2259b5e6660 'ivec' 'unsigned char *'
    |       |-BinaryOperator 0x2259b5f01d0 <line:65:13, col:24> 'unsigned char' '='
    |       | |-DeclRefExpr 0x2259b5f0110 <col:13> 'unsigned char' lvalue Var 0x2259b5e6d58 'cc' 'unsigned char'
    |       | `-ImplicitCastExpr 0x2259b5f01b8 <col:18, col:24> 'unsigned char' <LValueToRValue>
    |       |   `-UnaryOperator 0x2259b5f01a0 <col:18, col:24> 'const unsigned char' lvalue prefix '*' cannot overflow
    |       |     `-ParenExpr 0x2259b5f0180 <col:19, col:24> 'const unsigned char *'
    |       |       `-UnaryOperator 0x2259b5f0168 <col:20, col:22> 'const unsigned char *' postfix '++'
    |       |         `-DeclRefExpr 0x2259b5f0148 <col:20> 'const unsigned char *' lvalue ParmVar 0x2259b5e6430 'in' 'const unsigned char *'
    |       |-BinaryOperator 0x2259b5f02b8 <line:66:13, col:21> 'unsigned char' '='
    |       | |-DeclRefExpr 0x2259b5f01f0 <col:13> 'unsigned char' lvalue Var 0x2259b5e6cd8 'c' 'unsigned char'
    |       | `-ImplicitCastExpr 0x2259b5f02a0 <col:17, col:21> 'unsigned char' <LValueToRValue>
    |       |   `-ArraySubscriptExpr 0x2259b5f0280 <col:17, col:21> 'unsigned char' lvalue
    |       |     |-ImplicitCastExpr 0x2259b5f0250 <col:17> 'unsigned char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x2259b5f0210 <col:17> 'unsigned char *' lvalue Var 0x2259b5e6c58 'iv' 'unsigned char *'
    |       |     `-ImplicitCastExpr 0x2259b5f0268 <col:20> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x2259b5f0230 <col:20> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
    |       |-BinaryOperator 0x2259b5f03a0 <line:67:13, col:21> 'unsigned char' '='
    |       | |-ArraySubscriptExpr 0x2259b5f0348 <col:13, col:17> 'unsigned char' lvalue
    |       | | |-ImplicitCastExpr 0x2259b5f0318 <col:13> 'unsigned char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x2259b5f02d8 <col:13> 'unsigned char *' lvalue Var 0x2259b5e6c58 'iv' 'unsigned char *'
    |       | | `-ImplicitCastExpr 0x2259b5f0330 <col:16> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x2259b5f02f8 <col:16> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
    |       | `-ImplicitCastExpr 0x2259b5f0388 <col:21> 'unsigned char' <LValueToRValue>
    |       |   `-DeclRefExpr 0x2259b5f0368 <col:21> 'unsigned char' lvalue Var 0x2259b5e6d58 'cc' 'unsigned char'
    |       |-BinaryOperator 0x2259b5f0508 <line:68:13, col:28> 'unsigned char' '='
    |       | |-UnaryOperator 0x2259b5f0418 <col:13, col:20> 'unsigned char' lvalue prefix '*' cannot overflow
    |       | | `-ParenExpr 0x2259b5f03f8 <col:14, col:20> 'unsigned char *'
    |       | |   `-UnaryOperator 0x2259b5f03e0 <col:15, col:18> 'unsigned char *' postfix '++'
    |       | |     `-DeclRefExpr 0x2259b5f03c0 <col:15> 'unsigned char *' lvalue ParmVar 0x2259b5e64e0 'out' 'unsigned char *'
    |       | `-ImplicitCastExpr 0x2259b5f04f0 <col:24, col:28> 'unsigned char' <IntegralCast>
    |       |   `-BinaryOperator 0x2259b5f04d0 <col:24, col:28> 'int' '^'
    |       |     |-ImplicitCastExpr 0x2259b5f0488 <col:24> 'int' <IntegralCast>
    |       |     | `-ImplicitCastExpr 0x2259b5f0470 <col:24> 'unsigned char' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x2259b5f0430 <col:24> 'unsigned char' lvalue Var 0x2259b5e6cd8 'c' 'unsigned char'
    |       |     `-ImplicitCastExpr 0x2259b5f04b8 <col:28> 'int' <IntegralCast>
    |       |       `-ImplicitCastExpr 0x2259b5f04a0 <col:28> 'unsigned char' <LValueToRValue>
    |       |         `-DeclRefExpr 0x2259b5f0450 <col:28> 'unsigned char' lvalue Var 0x2259b5e6d58 'cc' 'unsigned char'
    |       `-BinaryOperator 0x2259b5f0630 <line:69:13, col:27> 'int' '='
    |         |-DeclRefExpr 0x2259b5f0528 <col:13> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
    |         `-BinaryOperator 0x2259b5f0610 <col:17, col:27> 'int' '&'
    |           |-ParenExpr 0x2259b5f05c8 <col:17, col:23> 'int'
    |           | `-BinaryOperator 0x2259b5f05a8 <col:18, col:22> 'int' '+'
    |           |   |-ImplicitCastExpr 0x2259b5f0590 <col:18> 'int' <LValueToRValue>
    |           |   | `-DeclRefExpr 0x2259b5f0548 <col:18> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
    |           |   `-IntegerLiteral 0x2259b5f0568 <col:22> 'int' 1
    |           `-IntegerLiteral 0x2259b5f05e8 <col:27> 'int' 7
    `-BinaryOperator 0x2259b5f0880 <line:73:5, col:12> 'int' '='
      |-UnaryOperator 0x2259b5f0830 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x2259b5f0818 <col:6> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x2259b5f07f8 <col:6> 'int *' lvalue ParmVar 0x2259b5e6710 'num' 'int *'
      `-ImplicitCastExpr 0x2259b5f0868 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x2259b5f0848 <col:12> 'int' lvalue Var 0x2259b5e6a58 'n' 'int'
