TranslationUnitDecl 0x1815c4ce9f8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1815c4cf290 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1815c4cef90 '__int128'
|-TypedefDecl 0x1815c4cf300 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1815c4cefb0 'unsigned __int128'
|-TypedefDecl 0x1815c4cf638 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1815c4cf3f0 'struct __NSConstantString_tag'
|   `-Record 0x1815c4cf358 '__NSConstantString_tag'
|-TypedefDecl 0x1815c4cf6a8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-TypedefDecl 0x1815c4cf740 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1815c4cf700 'char *'
|   `-BuiltinType 0x1815c4cea90 'char'
|-TypedefDecl 0x1815c4cf7b0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1815c4cf700 'char *'
|   `-BuiltinType 0x1815c4cea90 'char'
|-TypedefDecl 0x1815c4cf870 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-TypedefDecl 0x1815c4cf8e0 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1815c4cf700 'char *'
|   `-BuiltinType 0x1815c4cea90 'char'
|-FunctionDecl 0x1815e092470 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1815e092510 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1815e092580 <col:21> Implicit
|-FunctionDecl 0x1815e0925d8 prev 0x1815e092470 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1815e092300 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1815e0926c8 <col:21> Inherited Implicit
|-TypedefDecl 0x1815e092708 prev 0x1815c4cf6a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-TypedefDecl 0x1815e0927b0 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1815e092780 'size_t' sugar
|   |-Typedef 0x1815e092708 'size_t'
|   `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-TypedefDecl 0x1815e092820 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1815c4ceb30 'long long'
|-TypedefDecl 0x1815e092890 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1815c4ceb30 'long long'
|-TypedefDecl 0x1815e092900 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1815c4ceb70 'unsigned short'
|-TypedefDecl 0x1815e092970 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x1815c4ceb70 'unsigned short'
|-TypedefDecl 0x1815e0929e0 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x1815c4ceb70 'unsigned short'
|-TypedefDecl 0x1815e092a50 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x1815c4ceaf0 'int'
|-TypedefDecl 0x1815e092ac0 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1815c4ceb10 'long'
|-TypedefDecl 0x1815e092b30 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1815c4ceb30 'long long'
|-TypedefDecl 0x1815e092bc0 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1815e092b90 '__time64_t' sugar
|   |-Typedef 0x1815e092b30 '__time64_t'
|   `-BuiltinType 0x1815c4ceb30 'long long'
|-FunctionDecl 0x1815e092d38 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1815e092f58 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1815e0b1ca0 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1815e093098 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1815e093110 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1815e093188 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1815e093208 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1815e0b1a40 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1815e0b1d80 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1815e0b1e40 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1815e0b1fb0 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1815e0b1f60 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1815e0b1f00 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1815e0b1e20 'struct threadlocaleinfostruct'
|       `-Record 0x1815e0c5b80 'threadlocaleinfostruct'
|-TypedefDecl 0x1815e0b20c0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1815e0b2070 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1815e0b2010 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1815e0b1ee0 'struct threadmbcinfostruct'
|       `-Record 0x1815e0b1e40 'threadmbcinfostruct'
|-RecordDecl 0x1815e0b2118 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1815e0b21d0 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1815e0b2290 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1815e0b2320 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1815e0b23b0 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1815e0b2468 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1815e0b2410 'struct localeinfo_struct' sugar
|   `-RecordType 0x1815e0b2270 'struct localeinfo_struct'
|     `-Record 0x1815e0b21d0 'localeinfo_struct'
|-TypedefDecl 0x1815e0b2540 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1815e0b24f0 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1815e0b2410 'struct localeinfo_struct' sugar
|     `-RecordType 0x1815e0b2270 'struct localeinfo_struct'
|       `-Record 0x1815e0b21d0 'localeinfo_struct'
|-RecordDecl 0x1815e0b25b8 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1815e0b2670 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1815e0b26e8 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1815e0b27a8 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1815e0b2840 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1815e0b28b0 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1815e0b2968 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1815e0b2910 'struct localerefcount' sugar
|   `-RecordType 0x1815e0b2650 'struct localerefcount'
|     `-Record 0x1815e0b25b8 'localerefcount'
|-RecordDecl 0x1815e0c5b80 prev 0x1815e0b1d80 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1815e0c5c00 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1815e0c5c78 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1815e0c5ce8 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1815e0c5d58 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1815e0c5dc8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1815e0c5f88 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1815e0c5ff8 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1815e0c6068 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1815e0c60d8 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1815e0c6148 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1815e0c61b8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1815e0c6210 parent 0x1815c4ce9f8 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1815e0c63a0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1815e0c6410 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1815e0c6480 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1815e0c64f0 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1815e0c6590 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1815e0c6600 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1815e0c6710 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1815e0c6848 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1815e0c68f8 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1815e0c68a0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1815e0b1e20 'struct threadlocaleinfostruct'
|     `-Record 0x1815e0c5b80 'threadlocaleinfostruct'
|-TypedefDecl 0x1815e0c6980 <D:\Microsoft Visual Studio 12.0\VC\include\stdint.h:8:1, col:28> col:28 int8_t 'signed char'
| `-BuiltinType 0x1815c4ceab0 'signed char'
|-TypedefDecl 0x1815e0c69f0 <line:9:1, col:28> col:28 int16_t 'short'
| `-BuiltinType 0x1815c4cead0 'short'
|-TypedefDecl 0x1815e0c6a60 <line:10:1, col:28> col:28 referenced int32_t 'int'
| `-BuiltinType 0x1815c4ceaf0 'int'
|-TypedefDecl 0x1815e0c6ad0 <line:11:1, col:28> col:28 referenced int64_t 'long long'
| `-BuiltinType 0x1815c4ceb30 'long long'
|-TypedefDecl 0x1815e0beb10 <line:12:1, col:28> col:28 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x1815c4ceb50 'unsigned char'
|-TypedefDecl 0x1815e0beb80 <line:13:1, col:28> col:28 uint16_t 'unsigned short'
| `-BuiltinType 0x1815c4ceb70 'unsigned short'
|-TypedefDecl 0x1815e0bebf0 <line:14:1, col:28> col:28 uint32_t 'unsigned int'
| `-BuiltinType 0x1815c4ceb90 'unsigned int'
|-TypedefDecl 0x1815e0bec60 <line:15:1, col:28> col:28 referenced uint64_t 'unsigned long long'
| `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-TypedefDecl 0x1815e0becd0 <line:17:1, col:28> col:28 int_least8_t 'signed char'
| `-BuiltinType 0x1815c4ceab0 'signed char'
|-TypedefDecl 0x1815e0bed40 <line:18:1, col:28> col:28 int_least16_t 'short'
| `-BuiltinType 0x1815c4cead0 'short'
|-TypedefDecl 0x1815e0bedb0 <line:19:1, col:28> col:28 int_least32_t 'int'
| `-BuiltinType 0x1815c4ceaf0 'int'
|-TypedefDecl 0x1815e0bee20 <line:20:1, col:28> col:28 int_least64_t 'long long'
| `-BuiltinType 0x1815c4ceb30 'long long'
|-TypedefDecl 0x1815e0bee90 <line:21:1, col:28> col:28 uint_least8_t 'unsigned char'
| `-BuiltinType 0x1815c4ceb50 'unsigned char'
|-TypedefDecl 0x1815e0bef00 <line:22:1, col:28> col:28 uint_least16_t 'unsigned short'
| `-BuiltinType 0x1815c4ceb70 'unsigned short'
|-TypedefDecl 0x1815e0bef70 <line:23:1, col:28> col:28 uint_least32_t 'unsigned int'
| `-BuiltinType 0x1815c4ceb90 'unsigned int'
|-TypedefDecl 0x1815e0befe0 <line:24:1, col:28> col:28 uint_least64_t 'unsigned long long'
| `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-TypedefDecl 0x1815e0bf050 <line:26:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x1815c4ceab0 'signed char'
|-TypedefDecl 0x1815e0bf0c0 <line:27:1, col:28> col:28 int_fast16_t 'int'
| `-BuiltinType 0x1815c4ceaf0 'int'
|-TypedefDecl 0x1815e0bf130 <line:28:1, col:28> col:28 int_fast32_t 'int'
| `-BuiltinType 0x1815c4ceaf0 'int'
|-TypedefDecl 0x1815e0bf1a0 <line:29:1, col:28> col:28 int_fast64_t 'long long'
| `-BuiltinType 0x1815c4ceb30 'long long'
|-TypedefDecl 0x1815e0bf210 <line:30:1, col:28> col:28 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x1815c4ceb50 'unsigned char'
|-TypedefDecl 0x1815e0bf280 <line:31:1, col:28> col:28 uint_fast16_t 'unsigned int'
| `-BuiltinType 0x1815c4ceb90 'unsigned int'
|-TypedefDecl 0x1815e0bf2f0 <line:32:1, col:28> col:28 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x1815c4ceb90 'unsigned int'
|-TypedefDecl 0x1815e0bf360 <line:33:1, col:28> col:28 uint_fast64_t 'unsigned long long'
| `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-TypedefDecl 0x1815e0bf3d0 <line:53:1, col:28> col:28 intmax_t 'long long'
| `-BuiltinType 0x1815c4ceb30 'long long'
|-TypedefDecl 0x1815e0bf440 <line:54:1, col:28> col:28 uintmax_t 'unsigned long long'
| `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-FunctionDecl 0x1815e0bf860 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x1815e0bf4b0 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x1815e0bf560 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x1815e0bf5e0 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x1815e0bf658 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e0c0c58 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1815e0c0cf8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1815e0c0d60 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1815e0c0dc8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e0c0e48 prev 0x1815e0c0c58 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1815e0bf950 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x1815e0bf9d0 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x1815e0bfa48 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e0c1208 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1815e0c0f30 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x1815e0c0fb0 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x1815e0c1028 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e0c1690 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e0c12f0 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x1815e0c1370 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x1815e0c13e8 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e0c1480 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e0c1998 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1815e0c1a38 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1815e0c1aa0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1815e0ccbf0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e0ccc70 prev 0x1815e0c1998 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1815e0c1780 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x1815e0c1800 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x1815e0c1878 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e0cd028 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1815e0cd0c8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1815e0cd130 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1815e0cd198 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e0cd218 prev 0x1815e0cd028 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1815e0ccd58 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x1815e0ccdd8 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x1815e0cce50 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e0cd6b8 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1815e0cd328 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x1815e0cd3c0 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1815e0cd440 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1815e0cd4b8 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1815e0cda78 <line:94:25> col:25 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1815e0cdb18 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1815e0cdb80 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1815e0cec10 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e0cec90 prev 0x1815e0cda78 <col:9, col:107> col:25 used memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x1815e0cd7a8 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x1815e0cd828 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x1815e0cd8a0 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e0cf108 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1815e0cf1a8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1815e0cf210 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1815e0cf278 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1815e0cf2e0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e0cf368 prev 0x1815e0cf108 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x1815e0cee50 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x1815e0ceed0 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x1815e0cef50 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x1815e0cefc8 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e0cf428 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x1815e0cf808 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x1815e0cf5f0 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x1815e0cf670 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x1815e0cf6e8 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e0cf8c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x1815e0cdca0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1815e0cf9e8 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1815e0cfa60 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e0cfae0 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x1815e0ce070 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1815e0cde80 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x1815e0cdf00 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x1815e0ce120 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e0ce530 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1815e0ce268 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x1815e0ce2e0 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1815e0ce360 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x1815e0ce900 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1815e0ce9a0 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1815e0cea08 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1815e0cea80 prev 0x1815e0ce900 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x1815e0ce710 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x1815e0ce790 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x1815e0ceb30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e0c8ec0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1815e0c8cb0 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1815e0c8d28 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1815e0c8da8 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x1815e0c91e8 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1815e0c9288 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1815e0c92f0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1815e0c9368 prev 0x1815e0c91e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x1815e0c9068 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x1815e0c90e8 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x1815e0c9418 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e0c9750 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x1815e0c97f0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e0c9858 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1815e0c98d0 prev 0x1815e0c9750 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x1815e0c9560 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x1815e0c95e0 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x1815e0c9bc0 <line:121:32> col:32 implicit strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x1815e0c9c60 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1815e0c9cd0 prev 0x1815e0c9bc0 <col:16, col:63> col:32 strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x1815e0c99b0 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x1815e0c9fc8 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1815e0c9da8 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1815e0c9e20 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e0ca218 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x1815e0ca0a8 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x1815e0ca120 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1815e0ca548 <line:131:1, line:133:1>
|   `-ReturnStmt 0x1815e0ca538 <line:132:5, col:51>
|     `-ConditionalOperator 0x1815e0ca508 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x1815e0ca378 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x1815e0ca358 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x1815e0ca328 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1815e0ca2e0 <col:13> 'const char *' lvalue ParmVar 0x1815e0ca0a8 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x1815e0ca340 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x1815e0ca300 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x1815e0ca4f0 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1815e0ca398 <col:24> 'int' 0
|       `-CallExpr 0x1815e0ca490 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1815e0ca478 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1815e0ca3c0 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x1815e0c9fc8 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x1815e0ca4c0 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1815e0ca3e0 <col:36> 'const char *' lvalue ParmVar 0x1815e0ca0a8 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x1815e0ca4d8 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1815e0ca400 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x1815e0ca120 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e0ca820 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x1815e0ca578 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x1815e0ca5f0 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1815e0ca670 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x1815e0ca6e8 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1815e0cabd0 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1815e0cac70 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1815e0cacd8 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1815e0cad40 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e0cadc0 prev 0x1815e0cabd0 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x1815e0ca910 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x1815e0ca990 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x1815e0caa08 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e0caff8 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x1815e0caea8 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x1815e0cb2c0 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1815e0cb360 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e0cb3c8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1815e0cb440 prev 0x1815e0cb2c0 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1815e0cb0d0 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x1815e0cb150 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x1815e0cb6a0 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1815e0cb520 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1815e0cb5a0 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1815e0cb900 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1815e0cb780 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x1815e0cb800 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1815e0cbcc8 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1815e0cb9e0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1815e0cba60 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1815e0cbad8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e0cbf30 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1815e0cbdb0 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x1815e0cbe30 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x1815e0cc228 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1815e0cc010 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x1815e0cc090 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x1815e0cc108 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e0cc490 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1815e0cc310 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x1815e0cc390 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x1815e0cc788 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x1815e0cc570 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x1815e0cc5f0 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x1815e0cc668 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e11a000 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1815e0cc870 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1815e0cc8f0 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1815e0cc968 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e11a460 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e11a0e8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1815e11a168 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1815e11a1e0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e11a258 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e11a768 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1815e11a550 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1815e11a5d0 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x1815e11a648 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e11ab00 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e11a850 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x1815e11a8d0 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x1815e11a948 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e11a9c0 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e11ae18 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1815e11aeb8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e11af20 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1815e118ff0 prev 0x1815e11ae18 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1815e11abf0 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1815e11ac70 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x1815e1192b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1815e1191d0 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x1815e119358 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e119730 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x1815e1194a0 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x1815e119518 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e119598 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x1815e119a48 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x1815e119ae8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1815e119b58 prev 0x1815e119a48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x1815e119910 <col:90> col:93 'int'
| `-DeprecatedAttr 0x1815e119c00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e117fe0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x1815e119d48 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x1815e119dc0 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e119e40 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x1815e1182e8 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1815e1180c8 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1815e118140 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e1185d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1815e118488 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1815e118680 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e118a90 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e1187c8 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1815e118840 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e1188b8 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e118e60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1815e118c38 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1815e118cb0 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1815e118f10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e11e4b8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1815e11e140 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x1815e11e1b8 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1815e11e238 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x1815e11e2b0 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1815e11e938 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1815e11e9d8 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1815e11ea40 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e11eaa8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e11eb28 prev 0x1815e11e938 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1815e11e668 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x1815e11e6e8 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x1815e11e760 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e11ebe0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e11ef40 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1815e121070 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1815e1210d8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e121140 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e1211c0 prev 0x1815e11ef40 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1815e11ed28 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x1815e11eda8 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x1815e11ee20 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e1214c0 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1815e1212a8 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x1815e121328 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x1815e1213a0 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e121858 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e1215a8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x1815e121628 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x1815e1216a0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e121718 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e121bf0 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x1815e121948 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1815e1219c0 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1815e121a40 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x1815e121ab8 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1815e121fb8 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1815e11f050 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1815e11f0b8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e11f120 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e11f1a0 prev 0x1815e121fb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1815e121da0 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x1815e121e20 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x1815e121e98 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e11f258 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e11f718 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x1815e11f3a0 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x1815e11f418 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e11f498 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x1815e11f510 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e11fb98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1815e11f8c8 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x1815e11f948 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x1815e11f9c0 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e11fc50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e11ff80 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1815e11b010 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e11b078 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1815e11b0f0 prev 0x1815e11ff80 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1815e11fd98 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1815e11fe18 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x1815e11b350 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1815e11b3f0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e11b458 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1815e11b4d0 prev 0x1815e11b350 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x1815e11b1d0 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x1815e11b250 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x1815e11b690 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x1815e11b5b0 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x1815e11b8e0 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x1815e11b980 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e11b9e8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1815e11ba60 prev 0x1815e11b8e0 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x1815e11b768 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x1815e11b7e8 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x1815e11bcc0 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x1815e11bd60 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e11bdc8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1815e11be40 prev 0x1815e11bcc0 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x1815e11bb40 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x1815e11bbc0 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x1815e122200 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1815e1222a0 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x1815e122308 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1815e122380 prev 0x1815e122200 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x1815e122080 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x1815e122100 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x1815e122430 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e122818 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x1815e122578 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x1815e1225f8 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x1815e122678 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x1815e122a70 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x1815e122900 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x1815e122978 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e122cf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1815e122c10 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x1815e122d98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e1230f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e122ee0 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x1815e122f58 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e122fd0 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e123418 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x1815e1232a0 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x1815e123318 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1815e1234c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e1238e0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x1815e123980 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x1815e1239e8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e123a50 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e123ad0 prev 0x1815e1238e0 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x1815e123610 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x1815e123690 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x1815e123708 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e123f28 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e123bb8 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x1815e123c38 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x1815e123cb0 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e123d28 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1201f8 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x1815e120298 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x1815e120308 prev 0x1815e1201f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x1815e120118 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x1815e1203b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x1815e1206f8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1815e120578 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1815e1205f8 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1815e1207a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x1815e120af0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x1815e120970 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x1815e1209f0 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x1815e120ba0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x1815e120e48 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1815e120d68 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1815e120ef0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x1815e11c2f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x1815e11c0d8 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x1815e11c158 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x1815e11c1d0 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e11c3a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x1815e11c788 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x1815e11c570 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x1815e11c5f0 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x1815e11c668 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e11c840 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x1815e11cae8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1815e11ca08 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1815e11cb90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x1815e11ced8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x1815e11cd58 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x1815e11cdd8 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x1815e11cf88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x1815e11d290 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x1815e11d1b0 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x1815e11d338 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x1815e11d5d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x1815e11d458 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x1815e11d960 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1815e11d6a0 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1815e11d718 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1815e11d790 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x1815e11dd18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e11db00 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1815e11db78 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1815e11ddc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e1261c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x1815e126268 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1815e1262d0 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x1815e126348 prev 0x1815e1261c8 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x1815e11df08 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e11df80 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1815e126640 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x1815e1266e0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1815e126748 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1815e1267c0 prev 0x1815e126640 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x1815e126420 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1815e126498 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x1815e126aa0 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x1815e126898 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1815e126910 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1815e126988 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x1815e126db0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e126c40 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1815e126cb8 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x1815e126e60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e1291f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e126fa0 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e127018 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x1815e129440 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x1815e1294e0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x1815e129550 prev 0x1815e129440 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x1815e1292d0 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x1815e129838 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e129620 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1815e129698 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e129a80 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x1815e129910 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x1815e129988 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x1815e129e18 <line:306:1, line:308:1>
|   `-ReturnStmt 0x1815e129e08 <line:307:5, col:56>
|     `-ConditionalOperator 0x1815e129dd8 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x1815e129c40 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x1815e129c20 <col:13, line:36:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x1815e129bf0 <line:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1815e129b48 <col:13> 'const wchar_t *' lvalue ParmVar 0x1815e129910 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x1815e129c08 <line:36:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x1815e129bd0 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x1815e129ba8 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x1815e129b68 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x1815e129dc0 <line:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x1815e129c60 <col:29> 'int' 0
|       `-CallExpr 0x1815e129d60 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x1815e129d48 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1815e129c88 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x1815e129838 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x1815e129d90 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x1815e129ca8 <col:41> 'const wchar_t *' lvalue ParmVar 0x1815e129910 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x1815e129da8 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1815e129cc8 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x1815e129988 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e12d218 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1815e129e40 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1815e129eb8 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1815e129f30 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1815e129fa8 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1815e12d680 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e12d3c0 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1815e12d438 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1815e12d4b0 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e12d738 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e12db48 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x1815e12dbe8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x1815e12dc50 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x1815e12dcb8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e12dd38 prev 0x1815e12db48 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x1815e12d878 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e12d8f0 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1815e12d968 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e12a100 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x1815e12de18 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1815e12de90 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1815e12df08 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1815e12df80 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x1815e12a4b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e12a2a8 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1815e12a320 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1815e12a398 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e12a568 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e12a8c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e12a6a8 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e12a720 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x1815e12ab10 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1815e12a9a0 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e12aa18 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x1815e12ad58 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e12abe8 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e12ac60 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x1815e12afa0 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e12ae30 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e12aea8 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x1815e12b350 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e12b1e0 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1815e12b258 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x1815e12b400 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e12b860 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1815e12b540 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x1815e12b5b8 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x1815e12b690 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x1815e12bb80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x1815e12ba08 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x1815e12bc28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e12c030 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1815e12bd68 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x1815e12bde0 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e12be60 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x1815e1282c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1815e1281e8 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1815e128368 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e128730 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1815e1284a8 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x1815e128520 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e128598 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1815e128988 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e128810 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1815e128888 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x1815e128d28 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1815e128a60 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e128ad8 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1815e128b50 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e129018 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e128e08 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e128e80 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1815e128ef8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e12c4c0 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e12c148 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e12c1c0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1815e12c238 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e12c2b0 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e12c918 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x1815e12c5a8 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1815e12c620 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e12c698 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1815e12c710 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e12cd80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1815e12cac0 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x1815e12cb38 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1815e12cbb0 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e12ce38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e12e140 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x1815e12cf78 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x1815e12e4d0 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x1815e12e210 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1815e12e288 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e12e300 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x1815e12e888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1815e12e670 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x1815e12e6e8 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1815e12e938 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e12ec98 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e12ea78 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x1815e12eaf0 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e12ef08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1815e12ee30 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1815e12efb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e127390 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e1270d0 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x1815e127148 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e1271c0 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e127748 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1815e127530 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1815e1275a8 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1815e1277f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e127aa8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e127938 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x1815e1279b0 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e127d18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1815e127c40 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x1815e127dc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e136200 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e127f00 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x1815e127f78 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e127ff0 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e136510 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1815e1363a0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x1815e136418 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1815e1365c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e1369c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e136700 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1815e136778 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1815e1367f0 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e136e08 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e136aa0 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x1815e136b18 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1815e136b90 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e136c08 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e137068 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e136ef0 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1815e136f68 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x1815e133328 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1815e137140 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e133190 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1815e133208 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e133580 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e133408 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x1815e133480 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x1815e133868 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1815e133658 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e1336d0 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1815e133748 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e133b58 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e133948 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e1339c0 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1815e133a38 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e133ee0 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e133c38 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e133cb0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1815e133d28 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e133da0 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1311b8 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e133fc8 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e134040 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x1815e1340b8 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e131540 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e131298 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e131310 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1815e131388 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e131400 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1317a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1815e1316c8 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x1815e131848 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x1815e131b80 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e131a08 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e131a80 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1815e131c30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x1815e132000 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e131df0 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e131e68 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x1815e131ee0 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e1320b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x1815e132500 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x1815e1322f8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x1815e132370 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1815e1323e8 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e1325b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x1815e132850 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1815e132778 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1815e1328f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x1815e132c28 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x1815e132ab8 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x1815e132b30 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1815e132cd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x1815e132f70 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1815e132e98 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1815e133018 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x1815e12f2d8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x1815e12f200 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x1815e12f380 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x1815e12f6b8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e12f540 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x1815e12f5b8 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x1815e12f768 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-TypedefDecl 0x1815e12fa68 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:52:1, col:24> col:24 referenced _onexit_t 'int (*)(void) __attribute__((cdecl))'
| `-PointerType 0x1815e12fa00 'int (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x1815e12f9a0 'int (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x1815e12f950 'int (void)' sugar
|     | `-FunctionProtoType 0x1815e12f920 'int (void)' cdecl
|     |   `-BuiltinType 0x1815c4ceaf0 'int'
|     `-ParenType 0x1815e12f950 'int (void)' sugar
|       `-FunctionProtoType 0x1815e12f920 'int (void)' cdecl
|         `-BuiltinType 0x1815c4ceaf0 'int'
|-RecordDecl 0x1815e12fac0 <line:75:9, line:78:1> line:75:16 struct _div_t definition
| |-MaxFieldAlignmentAttr 0x1815e12fb80 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1815e12fbf8 <line:76:9, col:13> col:13 quot 'int'
| `-FieldDecl 0x1815e12fc68 <line:77:9, col:13> col:13 rem 'int'
|-TypedefDecl 0x1815e12fd18 <line:75:1, line:78:3> col:3 referenced div_t 'struct _div_t':'struct _div_t'
| `-ElaboratedType 0x1815e12fcc0 'struct _div_t' sugar
|   `-RecordType 0x1815e12fb60 'struct _div_t'
|     `-Record 0x1815e12fac0 '_div_t'
|-RecordDecl 0x1815e12fd88 <line:80:9, line:83:1> line:80:16 struct _ldiv_t definition
| |-MaxFieldAlignmentAttr 0x1815e12fe40 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1815e12feb8 <line:81:9, col:14> col:14 quot 'long'
| `-FieldDecl 0x1815e12ff28 <line:82:9, col:14> col:14 rem 'long'
|-TypedefDecl 0x1815e12ffd8 <line:80:1, line:83:3> col:3 referenced ldiv_t 'struct _ldiv_t':'struct _ldiv_t'
| `-ElaboratedType 0x1815e12ff80 'struct _ldiv_t' sugar
|   `-RecordType 0x1815e12fe20 'struct _ldiv_t'
|     `-Record 0x1815e12fd88 '_ldiv_t'
|-RecordDecl 0x1815e130048 <line:85:9, line:88:1> line:85:16 struct _lldiv_t definition
| |-MaxFieldAlignmentAttr 0x1815e130100 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1815e13e098 <line:86:9, col:19> col:19 quot 'long long'
| `-FieldDecl 0x1815e13e108 <line:87:9, col:19> col:19 rem 'long long'
|-TypedefDecl 0x1815e13e1b8 <line:85:1, line:88:3> col:3 referenced lldiv_t 'struct _lldiv_t':'struct _lldiv_t'
| `-ElaboratedType 0x1815e13e160 'struct _lldiv_t' sugar
|   `-RecordType 0x1815e1300e0 'struct _lldiv_t'
|     `-Record 0x1815e130048 '_lldiv_t'
|-RecordDecl 0x1815e13e250 <line:103:9, line:105:1> line:103:9 struct definition
| |-MaxFieldAlignmentAttr 0x1815e13e310 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x1815e13e410 <line:104:5, col:24> col:19 ld 'unsigned char [10]'
|-TypedefDecl 0x1815e13e4c8 <line:103:1, line:105:3> col:3 referenced _LDOUBLE 'struct _LDOUBLE':'_LDOUBLE'
| `-ElaboratedType 0x1815e13e470 'struct _LDOUBLE' sugar
|   `-RecordType 0x1815e13e2f0 '_LDOUBLE'
|     `-Record 0x1815e13e250 ''
|-RecordDecl 0x1815e13e538 <line:122:9, line:124:1> line:122:9 struct definition
| `-FieldDecl 0x1815e13e608 <line:123:9, col:16> col:16 x 'double'
|-TypedefDecl 0x1815e13e6b8 <line:122:1, line:124:3> col:3 referenced _CRT_DOUBLE 'struct _CRT_DOUBLE':'_CRT_DOUBLE'
| `-ElaboratedType 0x1815e13e660 'struct _CRT_DOUBLE' sugar
|   `-RecordType 0x1815e13e5d0 '_CRT_DOUBLE'
|     `-Record 0x1815e13e538 ''
|-RecordDecl 0x1815e13e728 <line:126:9, line:128:1> line:126:9 struct definition
| `-FieldDecl 0x1815e13e7f8 <line:127:5, col:11> col:11 f 'float'
|-TypedefDecl 0x1815e13e8a8 <line:126:1, line:128:3> col:3 referenced _CRT_FLOAT 'struct _CRT_FLOAT':'_CRT_FLOAT'
| `-ElaboratedType 0x1815e13e850 'struct _CRT_FLOAT' sugar
|   `-RecordType 0x1815e13e7c0 '_CRT_FLOAT'
|     `-Record 0x1815e13e728 ''
|-RecordDecl 0x1815e13e918 <line:134:9, line:139:1> line:134:9 struct definition
| `-FieldDecl 0x1815e13e9e8 <line:138:9, col:21> col:21 x 'long double'
|-TypedefDecl 0x1815e13ea98 <line:134:1, line:139:3> col:3 _LONGDOUBLE 'struct _LONGDOUBLE':'_LONGDOUBLE'
| `-ElaboratedType 0x1815e13ea40 'struct _LONGDOUBLE' sugar
|   `-RecordType 0x1815e13e9b0 '_LONGDOUBLE'
|     `-Record 0x1815e13e918 ''
|-RecordDecl 0x1815e13eb30 <line:144:9, line:146:1> line:144:9 struct definition
| |-MaxFieldAlignmentAttr 0x1815e13ebf0 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x1815e13ecf0 <line:145:5, col:26> col:19 ld12 'unsigned char [12]'
|-TypedefDecl 0x1815e13eda8 <line:144:1, line:146:3> col:3 _LDBL12 'struct _LDBL12':'_LDBL12'
| `-ElaboratedType 0x1815e13ed50 'struct _LDBL12' sugar
|   `-RecordType 0x1815e13ebd0 '_LDBL12'
|     `-Record 0x1815e13eb30 ''
|-VarDecl 0x1815e13ee30 <line:170:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x1815e13efb0 <line:175:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1815e13a198 <line:176:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x1815e13a038 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-TypedefDecl 0x1815e13a3e0 <line:215:1, col:24> col:24 referenced _purecall_handler 'void (*)(void) __attribute__((cdecl))'
| `-PointerType 0x1815e13a380 'void (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x1815e13a320 'void (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x1815e13a2d0 'void (void)' sugar
|     | `-FunctionProtoType 0x1815e092c90 'void (void)' cdecl
|     |   `-BuiltinType 0x1815c4cea50 'void'
|     `-ParenType 0x1815e13a2d0 'void (void)' sugar
|       `-FunctionProtoType 0x1815e092c90 'void (void)' cdecl
|         `-BuiltinType 0x1815c4cea50 'void'
|-FunctionDecl 0x1815e13a5e0 <line:218:9, col:92> col:35 _set_purecall_handler '_purecall_handler (_purecall_handler) __attribute__((cdecl))':'_purecall_handler (_purecall_handler)'
| `-ParmVarDecl 0x1815e13a470 <col:66, col:84> col:84 _Handler '_purecall_handler':'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1815e13a7f8 <line:219:9, col:61> col:35 _get_purecall_handler '_purecall_handler (void) __attribute__((cdecl))':'_purecall_handler (void)'
|-TypedefDecl 0x1815e13ac48 <line:235:1, col:24> col:24 referenced _invalid_parameter_handler 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
| `-PointerType 0x1815e13abc0 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|   `-AttributedType 0x1815e13ab60 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))' sugar
|     |-ParenType 0x1815e13ab10 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|     | `-FunctionProtoType 0x1815e0b1b00 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|     |   |-BuiltinType 0x1815c4cea50 'void'
|     |   |-PointerType 0x1815e093060 'const wchar_t *'
|     |   | `-QualType 0x1815e093011 'const wchar_t' const
|     |   |   `-TypedefType 0x1815e093010 'wchar_t' sugar
|     |   |     |-Typedef 0x1815e092900 'wchar_t'
|     |   |     `-BuiltinType 0x1815c4ceb70 'unsigned short'
|     |   |-PointerType 0x1815e093060 'const wchar_t *'
|     |   | `-QualType 0x1815e093011 'const wchar_t' const
|     |   |   `-TypedefType 0x1815e093010 'wchar_t' sugar
|     |   |     |-Typedef 0x1815e092900 'wchar_t'
|     |   |     `-BuiltinType 0x1815c4ceb70 'unsigned short'
|     |   |-PointerType 0x1815e093060 'const wchar_t *'
|     |   | `-QualType 0x1815e093011 'const wchar_t' const
|     |   |   `-TypedefType 0x1815e093010 'wchar_t' sugar
|     |   |     |-Typedef 0x1815e092900 'wchar_t'
|     |   |     `-BuiltinType 0x1815c4ceb70 'unsigned short'
|     |   |-BuiltinType 0x1815c4ceb90 'unsigned int'
|     |   `-TypedefType 0x1815e093270 'uintptr_t' sugar
|     |     |-Typedef 0x1815c4cf870 'uintptr_t'
|     |     `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|     `-ParenType 0x1815e13ab10 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|       `-FunctionProtoType 0x1815e0b1b00 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|         |-BuiltinType 0x1815c4cea50 'void'
|         |-PointerType 0x1815e093060 'const wchar_t *'
|         | `-QualType 0x1815e093011 'const wchar_t' const
|         |   `-TypedefType 0x1815e093010 'wchar_t' sugar
|         |     |-Typedef 0x1815e092900 'wchar_t'
|         |     `-BuiltinType 0x1815c4ceb70 'unsigned short'
|         |-PointerType 0x1815e093060 'const wchar_t *'
|         | `-QualType 0x1815e093011 'const wchar_t' const
|         |   `-TypedefType 0x1815e093010 'wchar_t' sugar
|         |     |-Typedef 0x1815e092900 'wchar_t'
|         |     `-BuiltinType 0x1815c4ceb70 'unsigned short'
|         |-PointerType 0x1815e093060 'const wchar_t *'
|         | `-QualType 0x1815e093011 'const wchar_t' const
|         |   `-TypedefType 0x1815e093010 'wchar_t' sugar
|         |     |-Typedef 0x1815e092900 'wchar_t'
|         |     `-BuiltinType 0x1815c4ceb70 'unsigned short'
|         |-BuiltinType 0x1815c4ceb90 'unsigned int'
|         `-TypedefType 0x1815e093270 'uintptr_t' sugar
|           |-Typedef 0x1815c4cf870 'uintptr_t'
|           `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-FunctionDecl 0x1815e13ae40 <line:238:9, col:119> col:44 _set_invalid_parameter_handler '_invalid_parameter_handler (_invalid_parameter_handler) __attribute__((cdecl))':'_invalid_parameter_handler (_invalid_parameter_handler)'
| `-ParmVarDecl 0x1815e13acd0 <col:84, col:111> col:111 _Handler '_invalid_parameter_handler':'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|-FunctionDecl 0x1815e144108 <line:239:9, col:79> col:44 _get_invalid_parameter_handler '_invalid_parameter_handler (void) __attribute__((cdecl))':'_invalid_parameter_handler (void)'
|-FunctionDecl 0x1815e1442f0 <line:245:9, col:41> col:30 _errno 'int *(void) __attribute__((cdecl))':'int *(void)' extern
|-FunctionDecl 0x1815e144530 <line:248:1, col:43> col:17 _set_errno 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x1815e1443c0 <col:33, col:37> col:37 _Value 'int'
|-FunctionDecl 0x1815e144780 <line:249:1, col:46> col:17 _get_errno 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x1815e144608 <col:34, col:40> col:40 _Value 'int *'
|-FunctionDecl 0x1815e1449a0 <line:252:9, col:48> col:33 __doserrno 'unsigned long *(void) __attribute__((cdecl))':'unsigned long *(void)'
|-FunctionDecl 0x1815e144be0 <line:255:1, col:56> col:17 _set_doserrno 'errno_t (unsigned long) __attribute__((cdecl))':'errno_t (unsigned long)'
| `-ParmVarDecl 0x1815e144a70 <col:36, col:50> col:50 _Value 'unsigned long'
|-FunctionDecl 0x1815e144e30 <line:256:1, col:59> col:17 _get_doserrno 'errno_t (unsigned long *) __attribute__((cdecl))':'errno_t (unsigned long *)'
| `-ParmVarDecl 0x1815e144cb8 <col:37, col:53> col:53 _Value 'unsigned long *'
|-FunctionDecl 0x1815e1450f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:259:77> col:59 __sys_errlist 'char **(void) __attribute__((cdecl))':'char **(void)'
| `-DeprecatedAttr 0x1815e145190 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e145450 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:262:72> col:57 __sys_nerr 'int *(void) __attribute__((cdecl))':'int *(void)'
| `-DeprecatedAttr 0x1815e1454f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x1815e145638 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:288:9, col:20> col:20 __argc 'int' extern
|-VarDecl 0x1815e1456d0 <line:289:9, col:24> col:24 __argv 'char **' extern
|-VarDecl 0x1815e145768 <line:290:9, col:27> col:27 __wargv 'wchar_t **' extern
|-VarDecl 0x1815e145800 <line:306:9, col:24> col:24 _environ 'char **' extern
|-VarDecl 0x1815e145898 <line:307:9, col:27> col:27 _wenviron 'wchar_t **' extern
|-VarDecl 0x1815e1459f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:311:68> col:68 _pgmptr 'char *' extern
| `-DeprecatedAttr 0x1815e145a58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x1815e145c58 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:312:72> col:72 _wpgmptr 'wchar_t *' extern
| `-DeprecatedAttr 0x1815e145cc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e145f80 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:339:1, col:61> col:17 _get_pgmptr 'errno_t (char **) __attribute__((cdecl))':'errno_t (char **)'
| `-ParmVarDecl 0x1815e145e08 <col:47, col:55> col:55 _Value 'char **'
|-FunctionDecl 0x1815e1431b0 <line:340:1, col:65> col:17 _get_wpgmptr 'errno_t (wchar_t **) __attribute__((cdecl))':'errno_t (wchar_t **)'
| `-ParmVarDecl 0x1815e146058 <col:48, col:59> col:59 _Value 'wchar_t **'
|-VarDecl 0x1815e143348 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:346:64> col:64 _fmode 'int' extern
| `-DeprecatedAttr 0x1815e1433b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e1435d0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:353:9, col:50> col:25 _set_fmode 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x1815e1434f8 <col:41, col:45> col:45 _Mode 'int'
|-FunctionDecl 0x1815e143780 <line:354:9, col:54> col:25 _get_fmode 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x1815e1436a8 <col:42, col:48> col:48 _PMode 'int *'
|-FunctionDecl 0x1815e1439d0 <line:376:43> col:43 implicit exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x1815e143a70 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1815e143ae0 prev 0x1815e1439d0 <col:9, col:62> col:43 exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x1815e143858 <col:53, col:57> col:57 _Code 'int'
|-FunctionDecl 0x1815e143c90 <line:378:43> col:43 implicit _exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x1815e143d30 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1815e143da0 prev 0x1815e143c90 <col:9, col:63> col:43 _exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x1815e143bb8 <col:54, col:58> col:58 _Code 'int'
|-FunctionDecl 0x1815e143f28 <line:379:43> col:43 implicit abort 'void (void) __attribute__((noreturn))' extern
|-FunctionDecl 0x1815e143fc8 prev 0x1815e143f28 <col:9, col:53> col:43 abort 'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1815e1462c0 <line:382:9, col:99> col:30 _set_abort_behavior 'unsigned int (unsigned int, unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int, unsigned int)'
| |-ParmVarDecl 0x1815e1460d0 <col:55, col:68> col:68 _Flags 'unsigned int'
| `-ParmVarDecl 0x1815e146150 <col:81, col:94> col:94 _Mask 'unsigned int'
|-FunctionDecl 0x1815e1464b8 <line:384:19> col:19 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x1815e146558 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1815e1465c8 <col:19> Implicit
| `-ConstAttr 0x1815e146620 <col:19> Implicit
|-FunctionDecl 0x1815e146648 prev 0x1815e1464b8 <col:1, col:34> col:19 abs 'int (int)'
| |-ParmVarDecl 0x1815e1463a0 <col:28, col:32> col:32 _X 'int'
| |-NoThrowAttr 0x1815e146738 <col:19> Inherited Implicit
| `-ConstAttr 0x1815e146760 <col:19> Inherited Implicit
|-FunctionDecl 0x1815e1468e8 <line:385:19> col:19 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x1815e146988 <<invalid sloc>> <invalid sloc> 'long'
| |-NoThrowAttr 0x1815e1469f8 <col:19> Implicit
| `-ConstAttr 0x1815e146a50 <col:19> Implicit
|-FunctionDecl 0x1815e146a78 prev 0x1815e1468e8 <col:1, col:36> col:19 labs 'long (long)'
| |-ParmVarDecl 0x1815e1467a0 <col:29, col:34> col:34 _X 'long'
| |-NoThrowAttr 0x1815e146b68 <col:19> Inherited Implicit
| `-ConstAttr 0x1815e146b90 <col:19> Inherited Implicit
|-FunctionDecl 0x1815e146d18 <line:386:19> col:19 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x1815e146db8 <<invalid sloc>> <invalid sloc> 'long long'
| |-NoThrowAttr 0x1815e146e28 <col:19> Implicit
| `-ConstAttr 0x1815e146e80 <col:19> Implicit
|-FunctionDecl 0x1815e146ea8 prev 0x1815e146d18 <col:1, col:42> col:19 llabs 'long long (long long)'
| |-ParmVarDecl 0x1815e146bd0 <col:30, col:40> col:40 _X 'long long'
| |-NoThrowAttr 0x1815e146f98 <col:19> Inherited Implicit
| `-ConstAttr 0x1815e146fc0 <col:19> Inherited Implicit
|-FunctionDecl 0x1815e1470e0 <line:388:9, col:42> col:28 _abs64 'long long (long long) __attribute__((cdecl))':'long long (long long)'
| `-ParmVarDecl 0x1815e147000 <col:35> col:42 'long long'
|-FunctionDecl 0x1815e1473d8 <line:426:9, col:53> col:24 atexit 'int (void (*)(void) __attribute__((cdecl))) __attribute__((cdecl))':'int (void (*)(void) __attribute__((cdecl)))'
| `-ParmVarDecl 0x1815e147278 <col:31, col:45> col:46 'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1815e1475f8 <line:428:24, col:71> col:40 atof 'double (const char *) __attribute__((cdecl))':'double (const char *)'
| `-ParmVarDecl 0x1815e1474b0 <col:52, col:64> col:64 _String 'const char *'
|-FunctionDecl 0x1815e1478f0 <line:429:24, col:102> col:40 _atof_l 'double (const char *, _locale_t) __attribute__((cdecl))':'double (const char *, _locale_t)'
| |-ParmVarDecl 0x1815e1476d0 <col:55, col:67> col:67 _String 'const char *'
| `-ParmVarDecl 0x1815e147748 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e147b18 <line:430:43, col:86> col:58 atoi 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1815e1479d0 <col:70, col:82> col:82 _Str 'const char *'
|-FunctionDecl 0x1815e147e10 <line:431:24, col:98> col:39 _atoi_l 'int (const char *, _locale_t) __attribute__((cdecl))':'int (const char *, _locale_t)'
| |-ParmVarDecl 0x1815e147bf0 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1815e147c68 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e148038 <line:432:24, col:67> col:39 atol 'long (const char *) __attribute__((cdecl))':'long (const char *)'
| `-ParmVarDecl 0x1815e147ef0 <col:51, col:63> col:63 _Str 'const char *'
|-FunctionDecl 0x1815e1402c0 <line:433:24, col:98> col:39 _atol_l 'long (const char *, _locale_t) __attribute__((cdecl))':'long (const char *, _locale_t)'
| |-ParmVarDecl 0x1815e1400a0 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1815e140118 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1404e8 <line:434:24, col:71> col:42 atoll 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x1815e1403a0 <col:55, col:67> col:67 _Str 'const char *'
|-FunctionDecl 0x1815e1407e0 <line:435:24, col:102> col:42 _atoll_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x1815e1405c0 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x1815e140638 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e148150 <line:439:24, line:441:97> line:439:39 bsearch_s 'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x1815e1408c0 <col:54, col:67> col:67 _Key 'const void *'
| |-ParmVarDecl 0x1815e140940 <col:124, col:137> col:137 _Base 'const void *'
| |-ParmVarDecl 0x1815e1409b8 <line:440:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1815e140a30 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1815e140d90 <line:441:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x1815e140e10 <col:82, col:89> col:89 _Context 'void *'
|-FunctionDecl 0x1815e1488d8 <line:443:24, line:445:72> line:443:39 bsearch 'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x1815e148250 <col:52, col:65> col:65 _Key 'const void *'
| |-ParmVarDecl 0x1815e1482d0 <col:122, col:135> col:135 _Base 'const void *'
| |-ParmVarDecl 0x1815e148348 <line:444:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1483c0 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e148698 <line:445:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x1815e148fe0 <line:448:9, line:450:96> line:448:22 qsort_s 'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x1815e1489d0 <col:85, col:92> col:92 _Base 'void *'
| |-ParmVarDecl 0x1815e148a48 <line:449:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1815e148ac0 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1815e148d28 <line:450:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x1815e148da8 <col:82, col:88> col:88 _Context 'void *'
|-FunctionDecl 0x1815e141558 <line:452:9, line:454:72> line:452:22 qsort 'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x1815e141080 <col:84, col:91> col:91 _Base 'void *'
| |-ParmVarDecl 0x1815e1410f8 <line:453:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e141170 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e141350 <line:454:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x1815e141798 <line:456:47> col:47 implicit _byteswap_ushort 'unsigned short (unsigned short)' extern
| |-ParmVarDecl 0x1815e141838 <<invalid sloc>> <invalid sloc> 'unsigned short'
| |-NoThrowAttr 0x1815e1418a8 <col:47> Implicit
| `-ConstAttr 0x1815e141900 <col:47> Implicit
|-FunctionDecl 0x1815e141928 prev 0x1815e141798 <col:24, col:90> col:47 _byteswap_ushort 'unsigned short (unsigned short)'
| |-ParmVarDecl 0x1815e141648 <col:69, col:84> col:84 _Short 'unsigned short'
| |-NoThrowAttr 0x1815e141a18 <col:47> Inherited Implicit
| `-ConstAttr 0x1815e141a40 <col:47> Inherited Implicit
|-FunctionDecl 0x1815e141bc8 <line:457:47> col:47 implicit _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x1815e141c68 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x1815e141cd8 <col:47> Implicit
| `-ConstAttr 0x1815e141d30 <col:47> Implicit
|-FunctionDecl 0x1815e141d58 prev 0x1815e141bc8 <col:24, col:88> col:47 _byteswap_ulong 'unsigned long (unsigned long)'
| |-ParmVarDecl 0x1815e141a80 <col:69, col:83> col:83 _Long 'unsigned long'
| |-NoThrowAttr 0x1815e141e48 <col:47> Inherited Implicit
| `-ConstAttr 0x1815e141e70 <col:47> Inherited Implicit
|-FunctionDecl 0x1815e14c130 <line:458:49> col:49 implicit _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x1815e14c1d0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x1815e14c240 <col:49> Implicit
| `-ConstAttr 0x1815e14c298 <col:49> Implicit
|-FunctionDecl 0x1815e14c2c0 prev 0x1815e14c130 <col:24, col:94> col:49 _byteswap_uint64 'unsigned long long (unsigned long long)'
| |-ParmVarDecl 0x1815e141eb0 <col:71, col:88> col:88 _Int64 'unsigned long long'
| |-NoThrowAttr 0x1815e14c3b0 <col:49> Inherited Implicit
| `-ConstAttr 0x1815e14c3d8 <col:49> Inherited Implicit
|-FunctionDecl 0x1815e14c658 <line:459:24, col:85> col:39 div 'div_t (int, int) __attribute__((cdecl))':'div_t (int, int)'
| |-ParmVarDecl 0x1815e14c438 <col:48, col:52> col:52 _Numerator 'int'
| `-ParmVarDecl 0x1815e14c4b8 <col:69, col:73> col:73 _Denominator 'int'
|-FunctionDecl 0x1815e14c8d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:462:109> col:74 getenv 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1815e14c7f8 <col:88, col:101> col:101 _VarName 'const char *'
| `-DeprecatedAttr 0x1815e14c980 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e14ce98 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:464:28, col:177> col:44 getenv_s 'errno_t (size_t *, char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (size_t *, char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1815e14cb18 <col:59, col:68> col:68 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x1815e14cb98 <col:110, col:117> col:117 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e14cc10 <col:131, col:139> col:139 _DstSize 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1815e14cc90 <col:156, col:169> col:169 _VarName 'const char *'
|-FunctionDecl 0x1815e14e270 <line:472:28, col:212> col:44 _dupenv_s 'errno_t (char **, size_t *, const char *) __attribute__((cdecl))':'errno_t (char **, size_t *, const char *)'
| |-ParmVarDecl 0x1815e14cf88 <col:127, col:134> col:134 _PBuffer 'char **'
| |-ParmVarDecl 0x1815e14d000 <col:154, col:163> col:163 _PBufferSizeInBytes 'size_t *'
| `-ParmVarDecl 0x1815e14d080 <col:191, col:204> col:204 _VarName 'const char *'
|-FunctionDecl 0x1815e14e6d8 <line:479:28, col:141> col:44 _itoa_s 'errno_t (int, char *, size_t, int) __attribute__((cdecl))':'errno_t (int, char *, size_t, int)'
| |-ParmVarDecl 0x1815e14e358 <col:57, col:61> col:61 _Value 'int'
| |-ParmVarDecl 0x1815e14e3d8 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e14e450 <col:112, col:119> col:119 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e14e4d0 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x1815e14eb58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:481:79 _itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x1815e14e8c0 <col:91, col:96> col:96 _Value 'int'
| |-ParmVarDecl 0x1815e14e940 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1815e14e9c0 <col:146, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x1815e14ec10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e14f160 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:482:28, col:145> col:44 _i64toa_s 'errno_t (long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long long, char *, size_t, int)'
| |-ParmVarDecl 0x1815e14ed58 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x1815e14edd8 <col:95, col:102> col:102 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e14ee50 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e14eed0 <col:135, col:139> col:139 _Radix 'int'
|-FunctionDecl 0x1815e14f5a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:483:140> col:59 _i64toa 'char *(long long, char *, int) __attribute__((cdecl))':'char *(long long, char *, int)'
| |-ParmVarDecl 0x1815e14f310 <col:72, col:80> col:80 _Val 'long long'
| |-ParmVarDecl 0x1815e14f390 <col:109, col:116> col:116 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e14f410 <col:130, col:134> col:134 _Radix 'int'
| `-DeprecatedAttr 0x1815e14f660 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e14fb28 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:484:28, col:155> col:44 _ui64toa_s 'errno_t (unsigned long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, char *, size_t, int)'
| |-ParmVarDecl 0x1815e14f7a8 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x1815e14f828 <col:105, col:112> col:112 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e14f8a0 <col:126, col:133> col:133 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e14f920 <col:145, col:149> col:149 _Radix 'int'
|-FunctionDecl 0x1815e14ff78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:485:151> col:60 _ui64toa 'char *(unsigned long long, char *, int) __attribute__((cdecl))':'char *(unsigned long long, char *, int)'
| |-ParmVarDecl 0x1815e14fcd8 <col:74, col:91> col:91 _Val 'unsigned long long'
| |-ParmVarDecl 0x1815e14fd58 <col:120, col:127> col:127 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e14fdd8 <col:141, col:145> col:145 _Radix 'int'
| `-DeprecatedAttr 0x1815e150030 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e150268 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:486:24, col:75> col:40 _atoi64 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x1815e150188 <col:55, col:68> col:68 _String 'const char *'
|-FunctionDecl 0x1815e1504b8 <line:487:24, col:105> col:40 _atoi64_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x1815e150340 <col:57, col:70> col:70 _String 'const char *'
| `-ParmVarDecl 0x1815e1503b8 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e150838 <line:488:24, col:136> col:40 _strtoi64 'long long (const char *, char **, int) __attribute__((cdecl))':'long long (const char *, char **, int)'
| |-ParmVarDecl 0x1815e150598 <col:57, col:70> col:70 _String 'const char *'
| |-ParmVarDecl 0x1815e150618 <col:104, col:112> col:112 _EndPtr 'char **'
| `-ParmVarDecl 0x1815e150698 <col:126, col:130> col:130 _Radix 'int'
|-FunctionDecl 0x1815e150ca0 <line:489:24, col:166> col:40 _strtoi64_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1815e150920 <col:59, col:72> col:72 _String 'const char *'
| |-ParmVarDecl 0x1815e1509a0 <col:106, col:114> col:114 _EndPtr 'char **'
| |-ParmVarDecl 0x1815e150a20 <col:128, col:132> col:132 _Radix 'int'
| `-ParmVarDecl 0x1815e150a98 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e151028 <line:490:24, col:146> col:49 _strtoui64 'unsigned long long (const char *, char **, int) __attribute__((cdecl))':'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x1815e150d90 <col:67, col:80> col:80 _String 'const char *'
| |-ParmVarDecl 0x1815e150e10 <col:114, col:122> col:122 _EndPtr 'char **'
| `-ParmVarDecl 0x1815e150e90 <col:136, col:140> col:140 _Radix 'int'
|-FunctionDecl 0x1815e149480 <line:491:24, col:177> col:49 _strtoui64_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1815e149100 <col:69, col:82> col:82 _String 'const char *'
| |-ParmVarDecl 0x1815e149180 <col:116, col:124> col:124 _EndPtr 'char **'
| |-ParmVarDecl 0x1815e149200 <col:138, col:143> col:143 _Radix 'int'
| `-ParmVarDecl 0x1815e149278 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1497b8 <line:492:24, col:88> col:39 ldiv 'ldiv_t (long, long) __attribute__((cdecl))':'ldiv_t (long, long)'
| |-ParmVarDecl 0x1815e149598 <col:49, col:54> col:54 _Numerator 'long'
| `-ParmVarDecl 0x1815e149618 <col:71, col:76> col:76 _Denominator 'long'
|-FunctionDecl 0x1815e149ad8 <line:493:24, col:100> col:40 lldiv 'lldiv_t (long long, long long) __attribute__((cdecl))':'lldiv_t (long long, long long)'
| |-ParmVarDecl 0x1815e1498b8 <col:51, col:61> col:61 _Numerator 'long long'
| `-ParmVarDecl 0x1815e149938 <col:78, col:88> col:88 _Denominator 'long long'
|-FunctionDecl 0x1815e149f38 <line:515:28, col:140> col:44 _ltoa_s 'errno_t (long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long, char *, size_t, int)'
| |-ParmVarDecl 0x1815e149bb8 <col:57, col:62> col:62 _Val 'long'
| |-ParmVarDecl 0x1815e149c38 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e149cb0 <col:111, col:118> col:118 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e149d30 <col:130, col:134> col:134 _Radix 'int'
|-FunctionDecl 0x1815e151418 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:517:79 _ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x1815e151180 <col:91, col:97> col:97 _Value 'long'
| |-ParmVarDecl 0x1815e151200 <col:129, col:135> col:135 _Dest 'char *'
| |-ParmVarDecl 0x1815e151280 <col:147, col:152> col:152 _Radix 'int'
| `-DeprecatedAttr 0x1815e1514d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e151840 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:518:24, col:128> col:39 mblen 'int (const char *, size_t) __attribute__((cdecl))':'int (const char *, size_t)'
| |-ParmVarDecl 0x1815e151618 <col:89, col:102> col:102 _Ch 'const char *'
| `-ParmVarDecl 0x1815e151690 <col:112, col:119> col:119 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e151be8 <line:519:24, col:159> col:39 _mblen_l 'int (const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e151920 <col:92, col:105> col:105 _Ch 'const char *'
| |-ParmVarDecl 0x1815e151998 <col:115, col:122> col:122 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e151a10 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e151da8 <line:520:24, col:73> col:39 _mbstrlen 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| `-ParmVarDecl 0x1815e151cd0 <col:56, col:69> col:69 _Str 'const char *'
|-FunctionDecl 0x1815e152098 <line:521:24, col:102> col:39 _mbstrlen_l 'size_t (const char *, _locale_t) __attribute__((cdecl))':'size_t (const char *, _locale_t)'
| |-ParmVarDecl 0x1815e151e80 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x1815e151ef8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e14a280 <line:522:24, col:96> col:39 _mbstrnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1815e14a110 <col:57, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1815e14a188 <col:80, col:87> col:87 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e14a620 <line:523:24, col:126> col:39 _mbstrnlen_l 'size_t (const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e14a360 <col:59, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x1815e14a3d8 <col:82, col:89> col:89 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e14a450 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e14a9d8 <line:524:9, col:170> col:24 mbtowc 'int (wchar_t *, const char *, size_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x1815e14a700 <col:54, col:64> col:64 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x1815e14a780 <col:122, col:135> col:135 _SrcCh 'const char *'
| `-ParmVarDecl 0x1815e14a7f8 <col:148, col:155> col:155 _SrcSizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e14ae30 <line:525:9, col:201> col:24 _mbtowc_l 'int (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e14aab8 <col:57, col:67> col:67 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x1815e14ab38 <col:125, col:138> col:138 _SrcCh 'const char *'
| |-ParmVarDecl 0x1815e14abb0 <col:151, col:158> col:158 _SrcSizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e14ac28 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e14b350 <line:526:28, col:271> col:44 mbstowcs_s 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t)'
| |-ParmVarDecl 0x1815e14af18 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1815e14af90 <col:155, col:165> col:165 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1815e14b008 <col:179, col:186> col:186 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e14b088 <col:227, col:240> col:240 _SrcBuf 'const char *'
| `-ParmVarDecl 0x1815e14b120 <col:254, col:261> col:261 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e14b7d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:528:56 mbstowcs 'size_t (wchar_t *, const char *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x1815e14b500 <col:97, col:106> col:106 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1815e14b580 <col:120, col:134> col:134 _Source 'const char *'
| |-ParmVarDecl 0x1815e14b5f8 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e14b888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e14be88 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:530:28, col:301> col:44 _mbstowcs_s_l 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e14b9c8 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1815e14ba40 <col:158, col:168> col:168 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1815e14bab8 <col:182, col:189> col:189 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e14bb38 <col:230, col:243> col:243 _SrcBuf 'const char *'
| |-ParmVarDecl 0x1815e14bbb0 <col:257, col:264> col:264 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e14bc28 <col:284, col:294> col:294 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1544a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:532:59 _mbstowcs_l 'size_t (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e14c078 <col:149, col:158> col:158 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1815e1541b0 <col:172, col:186> col:186 _Source 'const char *'
| |-ParmVarDecl 0x1815e154228 <col:200, col:208> col:208 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1542a0 <col:228, col:239> col:239 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1815e154568 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e154768 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:534:24, col:48> col:39 rand 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1815e154918 <line:539:28, col:73> col:43 _set_error_mode 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1815e154838 <col:64, col:68> col:68 _Mode 'int'
|-FunctionDecl 0x1815e154b30 <line:541:9, col:53> col:24 srand 'void (unsigned int) __attribute__((cdecl))':'void (unsigned int)'
| `-ParmVarDecl 0x1815e1549f0 <col:35, col:48> col:48 _Seed 'unsigned int'
|-FunctionDecl 0x1815e154df0 <line:542:39> col:39 implicit strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x1815e154e90 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e154ef8 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1815e154f70 prev 0x1815e154df0 <col:24, col:112> col:39 strtod 'double (const char *, char **)'
| |-ParmVarDecl 0x1815e154c08 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1815e154c88 <col:97, col:105> col:105 _EndPtr 'char **'
|-FunctionDecl 0x1815e152308 <line:543:24, col:143> col:39 _strtod_l 'double (const char *, char **, _locale_t) __attribute__((cdecl))':'double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1815e155050 <col:56, col:69> col:69 _Str 'const char *'
| |-ParmVarDecl 0x1815e1550d0 <col:100, col:108> col:108 _EndPtr 'char **'
| `-ParmVarDecl 0x1815e155148 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e152688 <line:544:39> col:39 implicit strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1815e152728 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1815e152790 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1815e1527f8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1815e152878 prev 0x1815e152688 <col:24, col:130> col:39 strtol 'long (const char *, char **, int)'
| |-ParmVarDecl 0x1815e1523f0 <col:53, col:66> col:66 _Str 'const char *'
| |-ParmVarDecl 0x1815e152470 <col:97, col:105> col:105 _EndPtr 'char **'
| `-ParmVarDecl 0x1815e1524f0 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x1815e152ce0 <line:545:24, col:158> col:39 _strtol_l 'long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1815e152960 <col:56, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x1815e1529e0 <col:99, col:106> col:106 _EndPtr 'char **'
| |-ParmVarDecl 0x1815e152a60 <col:120, col:124> col:124 _Radix 'int'
| `-ParmVarDecl 0x1815e152ad8 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e152ff0 <line:546:43> col:43 implicit strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1815e153090 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1815e1530f8 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1815e1531a0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1815e153220 prev 0x1815e152ff0 <col:24, col:135> col:43 strtoll 'long long (const char *, char **, int)'
| |-ParmVarDecl 0x1815e152dd0 <col:58, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x1815e152e50 <col:102, col:110> col:110 _EndPtr 'char **'
| `-ParmVarDecl 0x1815e152ed0 <col:124, col:128> col:128 _Radix 'int'
|-FunctionDecl 0x1815e1535c0 <line:547:24, col:166> col:43 _strtoll_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1815e153308 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x1815e153388 <col:105, col:113> col:113 _EndPtr 'char **'
| |-ParmVarDecl 0x1815e153408 <col:127, col:131> col:131 _Radix 'int'
| `-ParmVarDecl 0x1815e153480 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e153948 <line:548:46> col:46 implicit strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1815e1539e8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1815e153a50 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1815e153ab8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1815e153b38 prev 0x1815e153948 <col:24, col:137> col:46 strtoul 'unsigned long (const char *, char **, int)'
| |-ParmVarDecl 0x1815e1536b0 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x1815e153730 <col:105, col:113> col:113 _EndPtr 'char **'
| `-ParmVarDecl 0x1815e1537b0 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x1815e153fa0 <line:549:24, col:160> col:46 _strtoul_l 'unsigned long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1815e153c20 <col:57, col:70> col:70 _Str 'const char *'
| |-ParmVarDecl 0x1815e153ca0 <col:101, col:108> col:108 _EndPtr 'char **'
| |-ParmVarDecl 0x1815e153d20 <col:122, col:126> col:126 _Radix 'int'
| `-ParmVarDecl 0x1815e153d98 <col:143, col:153> col:153 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1552e0 <line:550:51> col:51 implicit strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1815e155380 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1815e1553e8 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1815e155450 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1815e1554d0 prev 0x1815e1552e0 <col:24, col:143> col:51 strtoull 'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x1815e154090 <col:67, col:80> col:80 _Str 'const char *'
| |-ParmVarDecl 0x1815e154110 <col:111, col:119> col:119 _EndPtr 'char **'
| `-ParmVarDecl 0x1815e1551c0 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x1815e155870 <line:551:24, col:174> col:51 _strtoull_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1815e1555b8 <col:70, col:83> col:83 _Str 'const char *'
| |-ParmVarDecl 0x1815e155638 <col:114, col:122> col:122 _EndPtr 'char **'
| |-ParmVarDecl 0x1815e1556b8 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x1815e155730 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e155b50 <line:552:44> col:44 implicit strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x1815e155bf0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e155c58 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1815e155cd0 prev 0x1815e155b50 <col:24, col:118> col:44 strtold 'long double (const char *, char **)'
| |-ParmVarDecl 0x1815e155960 <col:59, col:72> col:72 _Str 'const char *'
| `-ParmVarDecl 0x1815e1559e0 <col:103, col:111> col:111 _EndPtr 'char **'
|-FunctionDecl 0x1815e156088 <line:553:24, col:149> col:44 _strtold_l 'long double (const char *, char **, _locale_t) __attribute__((cdecl))':'long double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1815e155db0 <col:62, col:75> col:75 _Str 'const char *'
| |-ParmVarDecl 0x1815e155e30 <col:106, col:114> col:114 _EndPtr 'char **'
| `-ParmVarDecl 0x1815e155ea8 <col:132, col:142> col:142 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1563c0 <line:554:38> col:38 implicit strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x1815e156460 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1815e1564c8 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1815e156540 prev 0x1815e1563c0 <col:24, col:111> col:38 strtof 'float (const char *, char **)'
| |-ParmVarDecl 0x1815e1561d0 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1815e156250 <col:96, col:104> col:104 _EndPtr 'char **'
|-FunctionDecl 0x1815e1568f8 <line:555:24, col:142> col:38 _strtof_l 'float (const char *, char **, _locale_t) __attribute__((cdecl))':'float (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1815e156620 <col:55, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x1815e1566a0 <col:99, col:107> col:107 _EndPtr 'char **'
| `-ParmVarDecl 0x1815e156718 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e156ac0 <line:560:9, col:60> col:21 system 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1815e1569e0 <col:39, col:52> col:52 _Command 'const char *'
|-FunctionDecl 0x1815e156f18 <line:564:28, col:150> col:44 _ultoa_s 'errno_t (unsigned long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, char *, size_t, int)'
| |-ParmVarDecl 0x1815e156b98 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1815e156c18 <col:100, col:107> col:107 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e156c90 <col:121, col:128> col:128 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e156d10 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x1815e164198 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:566:79 _ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x1815e1570c8 <col:92, col:107> col:107 _Value 'unsigned long'
| |-ParmVarDecl 0x1815e157148 <col:139, col:145> col:145 _Dest 'char *'
| |-ParmVarDecl 0x1815e164000 <col:157, col:162> col:162 _Radix 'int'
| `-DeprecatedAttr 0x1815e164250 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e164680 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:567:127> col:58 wctomb 'int (char *, wchar_t) __attribute__((cdecl))':'int (char *, wchar_t)'
| |-ParmVarDecl 0x1815e164458 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x1815e1644d0 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1815e164730 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e164c08 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:568:155> col:61 _wctomb_l 'int (char *, wchar_t, _locale_t) __attribute__((cdecl))':'int (char *, wchar_t, _locale_t)'
| |-ParmVarDecl 0x1815e164938 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x1815e1649b0 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1815e164a28 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1815e164cc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e163178 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:570:28, col:200> col:44 wctomb_s 'errno_t (int *, char *, rsize_t, wchar_t) __attribute__((cdecl))':'errno_t (int *, char *, rsize_t, wchar_t)'
| |-ParmVarDecl 0x1815e164e08 <col:63, col:69> col:69 _SizeConverted 'int *'
| |-ParmVarDecl 0x1815e164e88 <col:142, col:149> col:149 _MbCh 'char *'
| |-ParmVarDecl 0x1815e164f00 <col:161, col:169> col:169 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1815e164f78 <col:188, col:196> col:196 _WCh 'wchar_t':'unsigned short'
|-FunctionDecl 0x1815e163680 <line:572:28, col:206> col:44 _wctomb_s_l 'errno_t (int *, char *, size_t, wchar_t, _locale_t) __attribute__((cdecl))':'errno_t (int *, char *, size_t, wchar_t, _locale_t)'
| |-ParmVarDecl 0x1815e163268 <col:66, col:72> col:72 _SizeConverted 'int *'
| |-ParmVarDecl 0x1815e1632e8 <col:121, col:128> col:128 _MbCh 'char *'
| |-ParmVarDecl 0x1815e163360 <col:140, col:147> col:147 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1633d8 <col:166, col:174> col:174 _WCh 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1815e163450 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e163b90 <line:573:28, col:263> col:44 wcstombs_s 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e163770 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1815e1637f0 <col:164, col:171> col:171 _Dst 'char *'
| |-ParmVarDecl 0x1815e163868 <col:182, col:189> col:189 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1638e0 <col:213, col:229> col:229 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1815e163958 <col:240, col:247> col:247 _MaxCountInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e168080 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:575:56 wcstombs 'size_t (char *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e163d48 <col:97, col:103> col:103 _Dest 'char *'
| |-ParmVarDecl 0x1815e163dc0 <col:117, col:134> col:134 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1815e163e38 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1815e168138 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e168738 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:576:28, col:294> col:44 _wcstombs_s_l 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e168278 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1815e1682f8 <col:167, col:174> col:174 _Dst 'char *'
| |-ParmVarDecl 0x1815e168370 <col:185, col:192> col:192 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1683e8 <col:216, col:232> col:232 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1815e168460 <col:243, col:250> col:250 _MaxCountInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e1684d8 <col:277, col:287> col:287 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e168c68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:578:59 _wcstombs_l 'size_t (char *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1815e1688f8 <col:146, col:152> col:152 _Dest 'char *'
| |-ParmVarDecl 0x1815e168970 <col:166, col:183> col:183 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1815e1689e8 <col:197, col:205> col:205 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e168a60 <col:225, col:236> col:236 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1815e168d28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e161040 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:142> col:142 implicit calloc 'void *(unsigned long long, unsigned long long)' extern
| |-ParmVarDecl 0x1815e1610e0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1815e161148 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e1611c0 prev 0x1815e161040 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:224> col:142 calloc 'void *(unsigned long long, unsigned long long)'
| |-ParmVarDecl 0x1815e168e68 <col:173, col:180> col:180 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e168ee0 <col:212, col:219> col:219 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1815e161270 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1815e1612c8 <line:615:33> restrict
|-FunctionDecl 0x1815e161460 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:641:182> col:132 free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x1815e161320 <col:168, col:175> col:175 _Memory 'void *'
| `-NoAliasAttr 0x1815e161508 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x1815e161708 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:161> col:161 implicit malloc 'void *(unsigned long long)' extern
| `-ParmVarDecl 0x1815e1617a8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e161818 prev 0x1815e161708 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:204> col:161 malloc 'void *(unsigned long long)'
| |-ParmVarDecl 0x1815e161588 <col:192, col:199> col:199 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1815e1618c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1815e161918 <line:615:33> restrict
|-FunctionDecl 0x1815e161b90 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:142> col:142 implicit realloc 'void *(void *, unsigned long long)' extern
| |-ParmVarDecl 0x1815e161c30 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x1815e161c98 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1815e161d10 prev 0x1815e161b90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:236> col:142 realloc 'void *(void *, unsigned long long)'
| |-ParmVarDecl 0x1815e161970 <col:181, col:188> col:188 _Memory 'void *'
| |-ParmVarDecl 0x1815e1619e8 <col:221, col:228> col:228 _NewSize 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1815e161dc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1815e161e18 <line:615:33> restrict
|-FunctionDecl 0x1815e162158 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:646:274> col:142 _recalloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x1815e161e70 <col:183, col:190> col:190 _Memory 'void *'
| |-ParmVarDecl 0x1815e161ee8 <col:223, col:230> col:230 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e161f60 <col:262, col:269> col:269 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1815e162210 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1815e162268 <line:615:33> restrict
|-FunctionDecl 0x1815e162398 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:647:191> col:132 _aligned_free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x1815e1622c0 <col:177, col:184> col:184 _Memory 'void *'
| `-NoAliasAttr 0x1815e162440 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x1815e162638 <col:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:648:218> col:142 _aligned_malloc 'void *(size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t)'
| |-ParmVarDecl 0x1815e1624c0 <col:182, col:189> col:189 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e162538 <col:201, col:208> col:208 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1815e1626e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1815e162740 <line:615:33> restrict
|-FunctionDecl 0x1815e162a58 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:649:246> col:142 _aligned_offset_malloc 'void *(size_t, size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t, size_t)'
| |-ParmVarDecl 0x1815e162790 <col:189, col:196> col:196 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e162808 <col:208, col:215> col:215 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e162880 <col:232, col:239> col:239 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1815e162b10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1815e162b68 <line:615:33> restrict
|-FunctionDecl 0x1815e162dd0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:651:272> col:145 _aligned_realloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x1815e162bc0 <col:193, col:200> col:200 _Memory 'void *'
| |-ParmVarDecl 0x1815e162c38 <col:233, col:240> col:240 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e162cb0 <col:255, col:262> col:262 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1815e162e88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1815e162ee0 <line:615:33> restrict
|-FunctionDecl 0x1815e169350 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:653:306> col:142 _aligned_recalloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1815e162f38 <col:191, col:198> col:198 _Memory 'void *'
| |-ParmVarDecl 0x1815e169050 <col:231, col:238> col:238 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1690c8 <col:270, col:277> col:277 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e169140 <col:289, col:296> col:296 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1815e169410 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1815e169468 <line:615:33> restrict
|-FunctionDecl 0x1815e169768 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:655:300> col:145 _aligned_offset_realloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1815e1694c0 <col:200, col:207> col:207 _Memory 'void *'
| |-ParmVarDecl 0x1815e169538 <col:240, col:247> col:247 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1695b0 <col:262, col:269> col:269 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e169628 <col:286, col:293> col:293 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1815e169828 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1815e169880 <line:615:33> restrict
|-FunctionDecl 0x1815e169cf8 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:657:334> col:142 _aligned_offset_recalloc 'void *(void *, size_t, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1815e1698d8 <col:198, col:205> col:205 _Memory 'void *'
| |-ParmVarDecl 0x1815e169950 <col:238, col:245> col:245 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1699c8 <col:277, col:284> col:284 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e169a40 <col:296, col:303> col:303 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e169ab8 <col:320, col:327> col:327 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1815e169dc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1815e169e18 <line:615:33> restrict
|-FunctionDecl 0x1815e16b150 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:658:73, col:176> col:88 _aligned_msize 'size_t (void *, size_t, size_t) __attribute__((cdecl))':'size_t (void *, size_t, size_t)'
| |-ParmVarDecl 0x1815e169e70 <col:117, col:124> col:124 _Memory 'void *'
| |-ParmVarDecl 0x1815e169ee8 <col:138, col:145> col:145 _Alignment 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e169f60 <col:162, col:169> col:169 _Offset 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e16b5a8 <line:685:28, col:157> col:44 _itow_s 'errno_t (int, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (int, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1815e16b238 <col:58, col:62> col:62 _Val 'int'
| |-ParmVarDecl 0x1815e16b2b0 <col:97, col:107> col:107 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1815e16b328 <col:121, col:128> col:128 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e16b3a8 <col:147, col:151> col:151 _Radix 'int'
|-FunctionDecl 0x1815e16ba20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:687:82 _itow 'wchar_t *(int, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(int, wchar_t *, int)'
| |-ParmVarDecl 0x1815e16b758 <col:94, col:99> col:99 _Value 'int'
| |-ParmVarDecl 0x1815e16b7d0 <col:131, col:140> col:140 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1815e16b850 <col:152, col:157> col:157 _Radix 'int'
| `-DeprecatedAttr 0x1815e16bad8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e16bf98 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:688:28, col:158> col:44 _ltow_s 'errno_t (long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1815e16bc20 <col:58, col:63> col:63 _Val 'long'
| |-ParmVarDecl 0x1815e16bc98 <col:98, col:108> col:108 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1815e16bd10 <col:122, col:129> col:129 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e16bd90 <col:148, col:152> col:152 _Radix 'int'
|-FunctionDecl 0x1815e16c420 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:690:82 _ltow 'wchar_t *(long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long, wchar_t *, int)'
| |-ParmVarDecl 0x1815e16c158 <col:94, col:100> col:100 _Value 'long'
| |-ParmVarDecl 0x1815e16c1d0 <col:132, col:141> col:141 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1815e16c250 <col:153, col:158> col:158 _Radix 'int'
| `-DeprecatedAttr 0x1815e16c4d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e16c998 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:691:28, col:168> col:44 _ultow_s 'errno_t (unsigned long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1815e16c620 <col:59, col:73> col:73 _Val 'unsigned long'
| |-ParmVarDecl 0x1815e16c698 <col:108, col:118> col:118 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1815e16c710 <col:132, col:139> col:139 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e16c790 <col:158, col:162> col:162 _Radix 'int'
|-FunctionDecl 0x1815e16ce10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:693:82 _ultow 'wchar_t *(unsigned long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long, wchar_t *, int)'
| |-ParmVarDecl 0x1815e16cb48 <col:95, col:110> col:110 _Value 'unsigned long'
| |-ParmVarDecl 0x1815e16cbc0 <col:142, col:151> col:151 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1815e16cc40 <col:163, col:168> col:168 _Radix 'int'
| `-DeprecatedAttr 0x1815e16cec8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e1651d0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:694:24, col:118> col:39 wcstod 'double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1815e16d008 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e165028 <col:100, col:111> col:111 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1815e165578 <line:695:24, col:148> col:39 _wcstod_l 'double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1815e1652a8 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e165328 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1815e1653a0 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e165938 <line:696:24, col:129> col:39 wcstol 'long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1815e165658 <col:53, col:68> col:68 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e1656d8 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1815e165758 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x1815e165da0 <line:697:24, col:159> col:39 _wcstol_l 'long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1815e165a18 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e165a98 <col:102, col:112> col:112 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1815e165b18 <col:121, col:125> col:125 _Radix 'int'
| `-ParmVarDecl 0x1815e165b90 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e16d1e8 <line:698:24, col:133> col:43 wcstoll 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1815e165e88 <col:58, col:73> col:73 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e165f08 <col:104, col:114> col:114 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1815e165f88 <col:123, col:127> col:127 _Radix 'int'
|-FunctionDecl 0x1815e16d650 <line:699:24, col:164> col:43 _wcstoll_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1815e16d2c8 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e16d348 <col:107, col:117> col:117 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1815e16d3c8 <col:126, col:130> col:130 _Radix 'int'
| `-ParmVarDecl 0x1815e16d440 <col:147, col:157> col:157 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e16da18 <line:700:24, col:137> col:46 wcstoul 'unsigned long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1815e16d738 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e16d7b8 <col:107, col:118> col:118 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1815e16d838 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x1815e16de80 <line:701:24, col:167> col:46 _wcstoul_l 'unsigned long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1815e16daf8 <col:64, col:79> col:79 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e16db78 <col:110, col:120> col:120 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1815e16dbf8 <col:129, col:133> col:133 _Radix 'int'
| `-ParmVarDecl 0x1815e16dc70 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1661f8 <line:702:24, col:143> col:51 wcstoull 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1815e16df68 <col:67, col:82> col:82 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e16dfe8 <col:113, col:124> col:124 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1815e166020 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x1815e166660 <line:703:24, col:174> col:51 _wcstoull_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1815e1662d8 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e166358 <col:116, col:127> col:127 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1815e1663d8 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x1815e166450 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e166970 <line:704:24, col:124> col:44 wcstold 'long double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1815e166748 <col:59, col:75> col:75 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e1667c8 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1815e166d18 <line:705:24, col:155> col:44 _wcstold_l 'long double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1815e166a48 <col:62, col:78> col:78 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e166ac8 <col:109, col:120> col:120 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1815e166b40 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e16e0a0 <line:706:24, col:117> col:38 wcstof 'float (const wchar_t *, wchar_t **) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1815e166df8 <col:52, col:68> col:68 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e166e78 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1815e16e448 <line:707:24, col:148> col:38 _wcstof_l 'float (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1815e16e178 <col:55, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e16e1f8 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1815e16e270 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e16e6c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:711:118> col:78 _wgetenv 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1815e16e5e8 <col:94, col:110> col:110 _VarName 'const wchar_t *'
| `-DeprecatedAttr 0x1815e16e768 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e16ec18 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:712:28, col:198> col:44 _wgetenv_s 'errno_t (size_t *, wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1815e16e8a8 <col:61, col:70> col:70 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x1815e16e920 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1815e16e998 <col:143, col:150> col:150 _DstSizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e16ea10 <col:174, col:190> col:190 _VarName 'const wchar_t *'
|-FunctionDecl 0x1815e16efd0 <line:720:28, col:214> col:44 _wdupenv_s 'errno_t (wchar_t **, size_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t **, size_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e16ed08 <col:127, col:137> col:137 _Buffer 'wchar_t **'
| |-ParmVarDecl 0x1815e16ed80 <col:156, col:164> col:164 _BufferSizeInWords 'size_t *'
| `-ParmVarDecl 0x1815e16edf8 <col:191, col:206> col:206 _VarName 'const wchar_t *'
|-FunctionDecl 0x1815e173278 <line:728:9, col:65> col:21 _wsystem 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1815e173100 <col:41, col:57> col:57 _Command 'const wchar_t *'
|-FunctionDecl 0x1815e1734c8 <line:733:24, col:71> col:39 _wtof 'double (const wchar_t *) __attribute__((cdecl))':'double (const wchar_t *)'
| `-ParmVarDecl 0x1815e173348 <col:52, col:67> col:67 _Str 'const wchar_t *'
|-FunctionDecl 0x1815e1737c0 <line:734:24, col:101> col:39 _wtof_l 'double (const wchar_t *, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1815e173598 <col:54, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e173610 <col:84, col:94> col:94 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e173978 <line:735:24, col:68> col:36 _wtoi 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1815e173898 <col:49, col:64> col:64 _Str 'const wchar_t *'
|-FunctionDecl 0x1815e173c70 <line:736:24, col:98> col:36 _wtoi_l 'int (const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1815e173a48 <col:51, col:66> col:66 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e173ac0 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e173ec8 <line:737:24, col:69> col:37 _wtol 'long (const wchar_t *) __attribute__((cdecl))':'long (const wchar_t *)'
| `-ParmVarDecl 0x1815e173d48 <col:50, col:65> col:65 _Str 'const wchar_t *'
|-FunctionDecl 0x1815e16f180 <line:738:24, col:99> col:37 _wtol_l 'long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1815e173f98 <col:52, col:67> col:67 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e174010 <col:82, col:92> col:92 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e16f3d8 <line:739:24, col:75> col:42 _wtoll 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x1815e16f258 <col:56, col:71> col:71 _Str 'const wchar_t *'
|-FunctionDecl 0x1815e16f6d0 <line:740:24, col:105> col:42 _wtoll_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1815e16f4a8 <col:58, col:73> col:73 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e16f520 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e16fb28 <line:742:28, col:162> col:44 _i64tow_s 'errno_t (long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1815e16f7b0 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x1815e16f828 <col:102, col:112> col:112 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1815e16f8a0 <col:126, col:133> col:133 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e16f920 <col:152, col:156> col:156 _Radix 'int'
|-FunctionDecl 0x1815e16ffa0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:743:146> col:62 _i64tow 'wchar_t *(long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long long, wchar_t *, int)'
| |-ParmVarDecl 0x1815e16fcd8 <col:75, col:83> col:83 _Val 'long long'
| |-ParmVarDecl 0x1815e16fd50 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1815e16fdd0 <col:136, col:140> col:140 _Radix 'int'
| `-DeprecatedAttr 0x1815e170058 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e175588 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:744:28, col:172> col:44 _ui64tow_s 'errno_t (unsigned long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1815e175210 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x1815e175288 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1815e175300 <col:136, col:143> col:143 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e175380 <col:162, col:166> col:166 _Radix 'int'
|-FunctionDecl 0x1815e175a00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:745:157> col:63 _ui64tow 'wchar_t *(unsigned long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long long, wchar_t *, int)'
| |-ParmVarDecl 0x1815e175738 <col:77, col:94> col:94 _Val 'unsigned long long'
| |-ParmVarDecl 0x1815e1757b0 <col:123, col:133> col:133 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1815e175830 <col:147, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x1815e175ab8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e175cd8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:746:24, col:76> col:42 _wtoi64 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x1815e175bf8 <col:57, col:72> col:72 _Str 'const wchar_t *'
|-FunctionDecl 0x1815e175f20 <line:747:24, col:106> col:42 _wtoi64_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1815e175da8 <col:59, col:74> col:74 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1815e175e20 <col:89, col:99> col:99 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e172200 <line:748:24, col:141> col:42 _wcstoi64 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1815e175ff8 <col:59, col:75> col:75 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e176078 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1815e1720e0 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x1815e172598 <line:749:24, col:171> col:42 _wcstoi64_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1815e1722e0 <col:61, col:77> col:77 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e172360 <col:108, col:119> col:119 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1815e1723e0 <col:133, col:137> col:137 _Radix 'int'
| `-ParmVarDecl 0x1815e172458 <col:154, col:164> col:164 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1728a0 <line:750:24, col:150> col:50 _wcstoui64 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1815e172680 <col:68, col:84> col:84 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e172700 <col:115, col:126> col:126 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1815e172780 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x1815e172c38 <line:751:24, col:180> col:50 _wcstoui64_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1815e172980 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1815e172a00 <col:117, col:128> col:128 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1815e172a80 <col:142, col:146> col:146 _Radix 'int'
| `-ParmVarDecl 0x1815e172af8 <col:163, col:173> col:173 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e172f40 <line:770:24, col:151> col:39 _fullpath 'char *(char *, const char *, size_t) __attribute__((cdecl))':'char *(char *, const char *, size_t)'
| |-ParmVarDecl 0x1815e172d28 <col:82, col:89> col:89 _FullPath 'char *'
| |-ParmVarDecl 0x1815e172da8 <col:107, col:120> col:120 _Path 'const char *'
| `-ParmVarDecl 0x1815e172e20 <col:132, col:139> col:139 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e174568 <line:778:28, col:189> col:44 _ecvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x1815e173028 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e174100 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e174180 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x1815e174200 <col:132, col:136> col:136 _NumOfDights 'int'
| |-ParmVarDecl 0x1815e174280 <col:156, col:162> col:162 _PtDec 'int *'
| `-ParmVarDecl 0x1815e174300 <col:176, col:182> col:182 _PtSign 'int *'
|-FunctionDecl 0x1815e174a60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:780:158> col:72 _ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1815e174728 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x1815e1747a8 <col:101, col:105> col:105 _NumOfDigits 'int'
| |-ParmVarDecl 0x1815e174828 <col:125, col:131> col:131 _PtDec 'int *'
| |-ParmVarDecl 0x1815e1748a8 <col:145, col:151> col:151 _PtSign 'int *'
| `-DeprecatedAttr 0x1815e174b20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e175058 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:781:28, col:186> col:44 _fcvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x1815e174c68 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e174ce0 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e174d60 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x1815e174de0 <col:132, col:136> col:136 _NumOfDec 'int'
| |-ParmVarDecl 0x1815e174e60 <col:153, col:159> col:159 _PtDec 'int *'
| `-ParmVarDecl 0x1815e174ee0 <col:173, col:179> col:179 _PtSign 'int *'
|-FunctionDecl 0x1815e176500 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:783:155> col:72 _fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1815e176240 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x1815e1762c0 <col:101, col:105> col:105 _NumOfDec 'int'
| |-ParmVarDecl 0x1815e176340 <col:122, col:128> col:128 _PtDec 'int *'
| |-ParmVarDecl 0x1815e1763c0 <col:142, col:148> col:148 _PtSign 'int *'
| `-DeprecatedAttr 0x1815e1765c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e176a88 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:784:9, col:129> col:25 _gcvt_s 'errno_t (char *, size_t, double, int) __attribute__((cdecl))':'errno_t (char *, size_t, double, int)'
| |-ParmVarDecl 0x1815e176708 <col:55, col:62> col:62 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e176780 <col:76, col:83> col:83 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e176800 <col:95, col:102> col:102 _Val 'double'
| `-ParmVarDecl 0x1815e176880 <col:113, col:117> col:117 _NumOfDigits 'int'
|-FunctionDecl 0x1815e176ed8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:786:141> col:57 _gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x1815e176c38 <col:68, col:75> col:75 _Val 'double'
| |-ParmVarDecl 0x1815e176cb8 <col:86, col:90> col:90 _NumOfDigits 'int'
| |-ParmVarDecl 0x1815e176d38 <col:127, col:134> col:134 _DstBuf 'char *'
| `-DeprecatedAttr 0x1815e176f90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e177390 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:788:24, col:91> col:36 _atodbl 'int (_CRT_DOUBLE *, char *) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *)'
| |-ParmVarDecl 0x1815e177168 <col:50, col:64> col:64 _Result '_CRT_DOUBLE *'
| `-ParmVarDecl 0x1815e1771e8 <col:80, col:87> col:87 _Str 'char *'
|-FunctionDecl 0x1815e177710 <line:789:24, col:89> col:36 _atoldbl 'int (_LDOUBLE *, char *) __attribute__((cdecl))':'int (_LDOUBLE *, char *)'
| |-ParmVarDecl 0x1815e1774e8 <col:51, col:62> col:62 _Result '_LDOUBLE *'
| `-ParmVarDecl 0x1815e177568 <col:78, col:85> col:85 _Str 'char *'
|-FunctionDecl 0x1815e177a90 <line:790:24, col:96> col:36 _atoflt 'int (_CRT_FLOAT *, const char *) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *)'
| |-ParmVarDecl 0x1815e177868 <col:50, col:63> col:63 _Result '_CRT_FLOAT *'
| `-ParmVarDecl 0x1815e1778e8 <col:79, col:92> col:92 _Str 'const char *'
|-FunctionDecl 0x1815e177e38 <line:791:24, col:121> col:36 _atodbl_l 'int (_CRT_DOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x1815e177b68 <col:52, col:66> col:66 _Result '_CRT_DOUBLE *'
| |-ParmVarDecl 0x1815e177be8 <col:82, col:89> col:89 _Str 'char *'
| `-ParmVarDecl 0x1815e177c60 <col:104, col:114> col:114 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e1701a8 <line:792:24, col:119> col:36 _atoldbl_l 'int (_LDOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_LDOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x1815e177f18 <col:53, col:64> col:64 _Result '_LDOUBLE *'
| |-ParmVarDecl 0x1815e177f98 <col:80, col:87> col:87 _Str 'char *'
| `-ParmVarDecl 0x1815e178010 <col:102, col:112> col:112 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e170558 <line:793:24, col:126> col:36 _atoflt_l 'int (_CRT_FLOAT *, const char *, _locale_t) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *, _locale_t)'
| |-ParmVarDecl 0x1815e170288 <col:52, col:65> col:65 _Result '_CRT_FLOAT *'
| |-ParmVarDecl 0x1815e170308 <col:81, col:94> col:94 _Str 'const char *'
| `-ParmVarDecl 0x1815e170380 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1815e170830 <line:794:46> col:46 implicit _lrotl 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x1815e1708d0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x1815e170938 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1815e1709b0 <col:46> Implicit
|-FunctionDecl 0x1815e170a08 prev 0x1815e170830 <col:24, col:93> col:46 _lrotl 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x1815e170640 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1815e1706c0 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x1815e170b00 <col:46> Inherited Implicit
|-FunctionDecl 0x1815e170cc0 <line:795:46> col:46 implicit _lrotr 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x1815e170d60 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x1815e170dc8 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1815e170e40 <col:46> Implicit
|-FunctionDecl 0x1815e170e98 prev 0x1815e170cc0 <col:24, col:93> col:46 _lrotr 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x1815e170b40 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1815e170bc0 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x1815e170f90 <col:46> Inherited Implicit
|-FunctionDecl 0x1815e1714c8 <line:796:40, line:797:37> line:796:58 _makepath_s 'errno_t (char *, size_t, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x1815e170fd0 <col:99, col:106> col:106 _PathResult 'char *'
| |-ParmVarDecl 0x1815e171048 <col:124, col:131> col:131 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1710e8 <col:156, col:169> col:169 _Drive 'const char *'
| |-ParmVarDecl 0x1815e171168 <col:188, col:201> col:201 _Dir 'const char *'
| |-ParmVarDecl 0x1815e1711e8 <col:218, col:231> col:231 _Filename 'const char *'
| `-ParmVarDecl 0x1815e171268 <line:797:20, col:33> col:33 _Ext 'const char *'
|-FunctionDecl 0x1815e171a70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:799:78 _makepath 'void (char *, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'void (char *, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x1815e171688 <col:113, col:119> col:119 _Path 'char *'
| |-ParmVarDecl 0x1815e171708 <col:137, col:151> col:151 _Drive 'const char *'
| |-ParmVarDecl 0x1815e171788 <col:170, col:184> col:184 _Dir 'const char *'
| |-ParmVarDecl 0x1815e171808 <col:201, col:215> col:215 _Filename 'const char *'
| |-ParmVarDecl 0x1815e171888 <col:237, col:251> col:251 _Ext 'const char *'
| `-DeprecatedAttr 0x1815e171b38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e171e10 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:826:9, col:59> col:27 _onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x1815e171ca0 <col:44, col:54> col:54 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1815e172030 <line:831:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x1815e171ee8 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x1815e17b288 <line:838:24, col:77> col:39 _putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1815e17b1a8 <col:54, col:67> col:67 _EnvString 'const char *'
|-FunctionDecl 0x1815e17b548 <line:839:28, col:107> col:44 _putenv_s 'errno_t (const char *, const char *) __attribute__((cdecl))':'errno_t (const char *, const char *)'
| |-ParmVarDecl 0x1815e17b360 <col:61, col:74> col:74 _Name 'const char *'
| `-ParmVarDecl 0x1815e17b3e0 <col:88, col:101> col:101 _Value 'const char *'
|-FunctionDecl 0x1815e17b810 <line:842:30> col:30 implicit _rotl 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x1815e17b8b0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x1815e17b918 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1815e17b990 <col:30> Implicit
|-FunctionDecl 0x1815e17b9e8 prev 0x1815e17b810 <col:9, col:75> col:30 _rotl 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x1815e17b628 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x1815e17b6a8 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x1815e17bae0 <col:30> Inherited Implicit
|-FunctionDecl 0x1815e17bd10 <line:843:34> col:34 implicit _rotl64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x1815e17bdb0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1815e17be18 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1815e17be90 <col:34> Implicit
|-FunctionDecl 0x1815e17bee8 prev 0x1815e17bd10 <col:9, col:85> col:34 _rotl64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x1815e17bb20 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x1815e17bba0 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x1815e17bfe0 <col:34> Inherited Implicit
|-FunctionDecl 0x1815e179190 <line:844:30> col:30 implicit _rotr 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x1815e179230 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x1815e179298 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1815e179310 <col:30> Implicit
|-FunctionDecl 0x1815e179368 prev 0x1815e179190 <col:9, col:75> col:30 _rotr 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x1815e17c020 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x1815e17c0a0 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x1815e179460 <col:30> Inherited Implicit
|-FunctionDecl 0x1815e179620 <line:845:34> col:34 implicit _rotr64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x1815e1796c0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1815e179728 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1815e1797a0 <col:34> Implicit
|-FunctionDecl 0x1815e1797f8 prev 0x1815e179620 <col:9, col:85> col:34 _rotr64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x1815e1794a0 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x1815e179520 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x1815e1798f0 <col:34> Inherited Implicit
|-FunctionDecl 0x1815e179ca8 <line:849:9, col:171> col:25 _searchenv_s 'errno_t (const char *, const char *, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, const char *, char *, size_t)'
| |-ParmVarDecl 0x1815e179930 <col:45, col:58> col:58 _Filename 'const char *'
| |-ParmVarDecl 0x1815e1799b0 <col:76, col:89> col:89 _EnvVar 'const char *'
| |-ParmVarDecl 0x1815e179a30 <col:127, col:134> col:134 _ResultPath 'char *'
| `-ParmVarDecl 0x1815e179aa8 <col:152, col:159> col:159 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e17e1a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:851:78 _searchenv 'void (const char *, const char *, char *) __attribute__((cdecl))':'void (const char *, const char *, char *)'
| |-ParmVarDecl 0x1815e179e58 <col:97, col:111> col:111 _Filename 'const char *'
| |-ParmVarDecl 0x1815e179ed8 <col:129, col:143> col:143 _EnvVar 'const char *'
| |-ParmVarDecl 0x1815e179f58 <col:176, col:182> col:182 _ResultPath 'char *'
| `-DeprecatedAttr 0x1815e17e258 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e17e840 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:854:261> col:62 _splitpath 'void (const char *, char *, char *, char *, char *) __attribute__((cdecl))':'void (const char *, char *, char *, char *, char *)'
| |-ParmVarDecl 0x1815e17e460 <col:80, col:93> col:93 _FullPath 'const char *'
| |-ParmVarDecl 0x1815e17e4e0 <col:129, col:136> col:136 _Drive 'char *'
| |-ParmVarDecl 0x1815e17e560 <col:169, col:176> col:176 _Dir 'char *'
| |-ParmVarDecl 0x1815e17e5e0 <col:207, col:214> col:214 _Filename 'char *'
| |-ParmVarDecl 0x1815e17e660 <col:250, col:257> col:257 _Ext 'char *'
| `-DeprecatedAttr 0x1815e17e908 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e17d190 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:855:40, line:859:79> line:855:57 _splitpath_s 'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t)'
| |-ParmVarDecl 0x1815e17ea50 <col:77, col:90> col:90 _FullPath 'const char *'
| |-ParmVarDecl 0x1815e17ead0 <line:856:48, col:55> col:55 _Drive 'char *'
| |-ParmVarDecl 0x1815e17eb48 <col:68, col:75> col:75 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e17ebc8 <line:857:46, col:53> col:53 _Dir 'char *'
| |-ParmVarDecl 0x1815e17ec40 <col:64, col:71> col:71 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e17ecc0 <line:858:51, col:58> col:58 _Filename 'char *'
| |-ParmVarDecl 0x1815e17ed38 <col:74, col:81> col:81 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e17edb8 <line:859:46, col:53> col:53 _Ext 'char *'
| `-ParmVarDecl 0x1815e17ee30 <col:64, col:71> col:71 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e17d540 <line:862:9, col:204> col:24 _swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x1815e17d2a8 <col:95, col:102> col:102 _Buf1 'char *'
| |-ParmVarDecl 0x1815e17d328 <col:174, col:181> col:181 _Buf2 'char *'
| `-ParmVarDecl 0x1815e17d3a8 <col:188, col:192> col:192 _SizeInBytes 'int'
|-FunctionDecl 0x1815e17d828 <line:873:24, col:161> col:42 _wfullpath 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e17d620 <col:86, col:96> col:96 _FullPath 'wchar_t *'
| |-ParmVarDecl 0x1815e17d698 <col:114, col:130> col:130 _Path 'const wchar_t *'
| `-ParmVarDecl 0x1815e17d710 <col:142, col:149> col:149 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e17ddc8 <line:879:40, line:880:40> line:879:56 _wmakepath_s 'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e17d908 <col:91, col:101> col:101 _PathResult 'wchar_t *'
| |-ParmVarDecl 0x1815e17d980 <col:119, col:126> col:126 _SIZE 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e17d9f8 <col:144, col:160> col:160 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x1815e17da70 <col:179, col:195> col:195 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x1815e17dae8 <col:212, col:228> col:228 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x1815e17db60 <line:880:20, col:36> col:36 _Ext 'const wchar_t *'
|-FunctionDecl 0x1815e17f3e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:882:78 _wmakepath 'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e17df80 <col:114, col:123> col:123 _ResultPath 'wchar_t *'
| |-ParmVarDecl 0x1815e17dff8 <col:147, col:164> col:164 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x1815e17e070 <col:183, col:200> col:200 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x1815e17e0e8 <col:217, col:234> col:234 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1815e17f1b0 <col:256, col:273> col:273 _Ext 'const wchar_t *'
| `-DeprecatedAttr 0x1815e17f4a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e17f760 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:885:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x1815e17f5e8 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1815e17f910 <line:889:24, col:81> col:39 _wputenv 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1815e17f830 <col:55, col:71> col:71 _EnvString 'const wchar_t *'
|-FunctionDecl 0x1815e17fbb8 <line:890:28, col:114> col:44 _wputenv_s 'errno_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1815e17f9e0 <col:62, col:78> col:78 _Name 'const wchar_t *'
| `-ParmVarDecl 0x1815e17fa58 <col:92, col:108> col:108 _Value 'const wchar_t *'
|-FunctionDecl 0x1815e17fff8 <line:891:9, col:181> col:25 _wsearchenv_s 'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e17fc90 <col:46, col:62> col:62 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1815e17fd08 <col:80, col:96> col:96 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x1815e17fd80 <col:134, col:144> col:144 _ResultPath 'wchar_t *'
| `-ParmVarDecl 0x1815e17fdf8 <col:162, col:169> col:169 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e180480 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:893:78 _wsearchenv 'void (const wchar_t *, const wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x1815e1801c0 <col:98, col:115> col:115 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1815e180238 <col:133, col:150> col:150 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x1815e1802b0 <col:183, col:192> col:192 _ResultPath 'wchar_t *'
| `-DeprecatedAttr 0x1815e180538 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e180b50 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:896:278> col:63 _wsplitpath 'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x1815e180738 <col:82, col:98> col:98 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x1815e1807b0 <col:134, col:144> col:144 _Drive 'wchar_t *'
| |-ParmVarDecl 0x1815e180828 <col:177, col:187> col:187 _Dir 'wchar_t *'
| |-ParmVarDecl 0x1815e1808a0 <col:218, col:228> col:228 _Filename 'wchar_t *'
| |-ParmVarDecl 0x1815e180918 <col:264, col:274> col:274 _Ext 'wchar_t *'
| `-DeprecatedAttr 0x1815e180c18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e181430 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:897:21, line:901:82> line:897:37 _wsplitpath_s 'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t)'
| |-ParmVarDecl 0x1815e180d58 <col:58, col:74> col:74 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x1815e180dd0 <line:898:48, col:58> col:58 _Drive 'wchar_t *'
| |-ParmVarDecl 0x1815e180e48 <col:71, col:78> col:78 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e180ec0 <line:899:46, col:56> col:56 _Dir 'wchar_t *'
| |-ParmVarDecl 0x1815e180f38 <col:67, col:74> col:74 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e180fb0 <line:900:51, col:61> col:61 _Filename 'wchar_t *'
| |-ParmVarDecl 0x1815e181028 <col:77, col:84> col:84 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1810a0 <line:901:46, col:56> col:56 _Ext 'wchar_t *'
| `-ParmVarDecl 0x1815e181118 <col:67, col:74> col:74 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e181750 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:909:78> col:50 _seterrormode 'void (int) __attribute__((cdecl))':'void (int)'
| |-ParmVarDecl 0x1815e181648 <col:69, col:73> col:73 _Mode 'int'
| `-DeprecatedAttr 0x1815e1817f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details." ""
|-FunctionDecl 0x1815e181be8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:910:97> col:42 _beep 'void (unsigned int, unsigned int) __attribute__((cdecl))':'void (unsigned int, unsigned int)'
| |-ParmVarDecl 0x1815e181a08 <col:53, col:62> col:62 _Frequency 'unsigned int'
| |-ParmVarDecl 0x1815e181a88 <col:79, col:88> col:88 _Duration 'unsigned int'
| `-DeprecatedAttr 0x1815e181c98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details." ""
|-FunctionDecl 0x1815e181fe0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:911:78> col:43 _sleep 'void (unsigned long) __attribute__((cdecl))':'void (unsigned long)'
| |-ParmVarDecl 0x1815e181ea0 <col:55, col:69> col:69 _Duration 'unsigned long'
| `-DeprecatedAttr 0x1815e182088 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details." ""
|-FunctionDecl 0x1815e17c5f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:934:187> col:102 ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1815e17c330 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x1815e17c3b0 <col:130, col:134> col:134 _NumOfDigits 'int'
| |-ParmVarDecl 0x1815e17c430 <col:154, col:160> col:160 _PtDec 'int *'
| |-ParmVarDecl 0x1815e17c4b0 <col:174, col:180> col:180 _PtSign 'int *'
| |-DeprecatedAttr 0x1815e17c6b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ecvt. See online help for details." ""
| `-DeprecatedAttr 0x1815e17c7a8 <col:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e17cce0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:935:184> col:102 fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1815e17ca20 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x1815e17caa0 <col:130, col:134> col:134 _NumOfDec 'int'
| |-ParmVarDecl 0x1815e17cb20 <col:151, col:157> col:157 _PtDec 'int *'
| |-ParmVarDecl 0x1815e17cba0 <col:171, col:177> col:177 _PtSign 'int *'
| |-DeprecatedAttr 0x1815e17cda0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcvt. See online help for details." ""
| `-DeprecatedAttr 0x1815e17ce98 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e1833a8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:936:179> col:96 gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x1815e17d110 <col:106, col:113> col:113 _Val 'double'
| |-ParmVarDecl 0x1815e183208 <col:124, col:128> col:128 _NumOfDigits 'int'
| |-ParmVarDecl 0x1815e183288 <col:165, col:172> col:172 _DstBuf 'char *'
| |-DeprecatedAttr 0x1815e183460 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _gcvt. See online help for details." ""
| `-DeprecatedAttr 0x1815e183558 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e1839f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:937:170> col:96 itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x1815e1837d0 <col:106, col:110> col:110 _Val 'int'
| |-ParmVarDecl 0x1815e183850 <col:139, col:146> col:146 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e1838d0 <col:160, col:164> col:164 _Radix 'int'
| |-DeprecatedAttr 0x1815e183aa8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _itoa. See online help for details." ""
| `-DeprecatedAttr 0x1815e183ba0 <col:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e184038 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:938:171> col:96 ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x1815e183e18 <col:106, col:111> col:111 _Val 'long'
| |-ParmVarDecl 0x1815e183e98 <col:140, col:147> col:147 _DstBuf 'char *'
| |-ParmVarDecl 0x1815e183f18 <col:161, col:165> col:165 _Radix 'int'
| |-DeprecatedAttr 0x1815e1840f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ltoa. See online help for details." ""
| `-DeprecatedAttr 0x1815e187230 <col:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e1874c8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:941:108> col:71 putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x1815e1873e8 <col:85, col:98> col:98 _EnvString 'const char *'
| `-DeprecatedAttr 0x1815e187570 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putenv. See online help for details." ""
|-FunctionDecl 0x1815e187950 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:944:245> col:128 swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x1815e187738 <col:165, col:172> col:172 _Buf1 'char *'
| |-ParmVarDecl 0x1815e1877b8 <col:210, col:217> col:217 _Buf2 'char *'
| |-ParmVarDecl 0x1815e187838 <col:229, col:233> col:233 _SizeInBytes 'int'
| `-DeprecatedAttr 0x1815e187a08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _swab. See online help for details." ""
|-FunctionDecl 0x1815e187ef0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:945:181> col:96 ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x1815e187cd0 <col:107, col:121> col:121 _Val 'unsigned long'
| |-ParmVarDecl 0x1815e187d50 <col:150, col:157> col:157 _Dstbuf 'char *'
| |-ParmVarDecl 0x1815e187dd0 <col:171, col:175> col:175 _Radix 'int'
| |-DeprecatedAttr 0x1815e187fa8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ultoa. See online help for details." ""
| `-DeprecatedAttr 0x1815e1880a0 <col:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1815e182238 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:64:18, line:947:48> col:18 onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x1815e1881b0 <line:64:18, line:947:43> col:43 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-RecordDecl 0x1815e1822f8 <.//openssl//file_jk/before\crypto\ec/ec_lcl.h:52:1, line:173:1> line:52:8 struct ec_method_st definition
| |-FieldDecl 0x1815e1823c8 <line:54:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x1815e182438 <line:56:5, col:9> col:9 field_type 'int'
| |-FieldDecl 0x1815e1825d8 <line:61:5, col:34> col:11 group_init 'int (*)(int *)'
| |-FieldDecl 0x1815e1827a0 <line:62:5, col:37> col:12 group_finish 'void (*)(int *)'
| |-FieldDecl 0x1815e1828b0 <line:63:5, col:43> col:12 group_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x1815e182b20 <line:64:5, col:52> col:11 group_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1815e182f38 <line:67:5, line:68:54> line:67:11 group_set_curve 'int (*)(int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x1815e1863c8 <line:69:5, line:70:37> line:69:11 group_get_curve 'int (*)(const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x1815e186598 <line:72:5, col:46> col:11 group_get_degree 'int (*)(const int *)'
| |-FieldDecl 0x1815e1866b0 <line:73:5, col:46> col:11 group_order_bits 'int (*)(const int *)'
| |-FieldDecl 0x1815e186920 <line:75:5, col:64> col:11 group_check_discriminant 'int (*)(const int *, int *)'
| |-FieldDecl 0x1815e186a38 <line:80:5, col:34> col:11 point_init 'int (*)(int *)'
| |-FieldDecl 0x1815e186b48 <line:81:5, col:37> col:12 point_finish 'void (*)(int *)'
| |-FieldDecl 0x1815e186c58 <line:82:5, col:43> col:12 point_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x1815e186df8 <line:83:5, col:52> col:11 point_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1815e186f98 <line:92:5, col:63> col:11 point_set_to_infinity 'int (*)(const int *, int *)'
| |-FieldDecl 0x1815e188480 <line:93:5, line:96:76> line:93:11 point_set_Jprojective_coordinates_GFp 'int (*)(const int *, int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x1815e188930 <line:97:5, line:100:59> line:97:11 point_get_Jprojective_coordinates_GFp 'int (*)(const int *, const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x1815e188d48 <line:101:5, line:103:50> line:101:11 point_set_affine_coordinates 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1815e189158 <line:104:5, line:105:72> line:104:11 point_get_affine_coordinates 'int (*)(const int *, const int *, int *, int *, int *)'
| |-FieldDecl 0x1815e189588 <line:106:5, line:108:54> line:106:11 point_set_compressed_coordinates 'int (*)(const int *, int *, const int *, int, int *)'
| |-FieldDecl 0x1815e189aa8 <line:110:5, line:112:46> line:110:14 point2oct 'size_t (*)(const int *, const int *, int, unsigned char *, size_t, int *)'
| |-FieldDecl 0x1815e189f08 <line:113:5, line:114:43> line:113:11 oct2point 'int (*)(const int *, int *, const unsigned char *, size_t, int *)'
| |-FieldDecl 0x1815e18b270 <line:116:5, line:117:44> line:116:11 add 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1815e18b600 <line:118:5, col:75> col:11 dbl 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1815e18b8f8 <line:119:5, col:58> col:11 invert 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x1815e18bb60 <line:123:5, col:62> col:11 is_at_infinity 'int (*)(const int *, const int *)'
| |-FieldDecl 0x1815e18be58 <line:124:5, col:69> col:11 is_on_curve 'int (*)(const int *, const int *, int *)'
| |-FieldDecl 0x1815e18c1e0 <line:125:5, line:126:31> line:125:11 point_cmp 'int (*)(const int *, const int *, const int *, int *)'
| |-FieldDecl 0x1815e18a418 <line:128:5, col:63> col:11 make_affine 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x1815e18a890 <line:129:5, line:130:40> line:129:11 points_make_affine 'int (*)(const int *, size_t, int **, int *)'
| |-FieldDecl 0x1815e18aec8 <line:136:5, line:138:25> line:136:11 mul 'int (*)(const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-FieldDecl 0x1815e18b130 <line:139:5, col:54> col:11 precompute_mult 'int (*)(int *, int *)'
| |-FieldDecl 0x1815e18c280 <line:140:5, col:55> col:11 have_precompute_mult 'int (*)(const int *)'
| |-FieldDecl 0x1815e18c5b8 <line:148:5, line:149:48> line:148:11 field_mul 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1815e18c868 <line:150:5, col:77> col:11 field_sqr 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1815e18cba0 <line:151:5, line:152:48> line:151:11 field_div 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x1815e18ce50 <line:154:5, line:155:34> line:154:11 field_encode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1815e18d100 <line:157:5, line:158:34> line:157:11 field_decode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x1815e1852c8 <line:159:5, col:67> col:11 field_set_to_one 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x1815e1855f0 <line:161:5, col:75> col:14 priv2oct 'size_t (*)(const int *, unsigned char *, size_t)'
| |-FieldDecl 0x1815e185918 <line:162:5, col:72> col:11 oct2priv 'int (*)(int *, const unsigned char *, size_t)'
| |-FieldDecl 0x1815e185ab8 <line:163:5, col:61> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x1815e185bd0 <line:164:5, col:32> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x1815e185ce8 <line:165:5, col:40> col:11 keycheck 'int (*)(const int *)'
| |-FieldDecl 0x1815e185e00 <line:166:5, col:35> col:11 keygenpub 'int (*)(int *)'
| |-FieldDecl 0x1815e185fa0 <line:167:5, col:50> col:11 keycopy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1815e1860b0 <line:168:5, col:36> col:12 keyfinish 'void (*)(int *)'
| |-FieldDecl 0x1815e1905b0 <line:170:5, line:171:72> line:170:11 ecdh_compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| `-FieldDecl 0x1815e1907d8 <line:172:5, col:77> col:11 blind_coordinates 'int (*)(const int *, int *, int *)'
|-RecordDecl 0x1815e190830 <line:178:9, col:16> col:16 struct nistp224_pre_comp_st
|-TypedefDecl 0x1815e190948 <col:1, col:37> col:37 referenced NISTP224_PRE_COMP 'struct nistp224_pre_comp_st':'struct nistp224_pre_comp_st'
| `-ElaboratedType 0x1815e1908f0 'struct nistp224_pre_comp_st' sugar
|   `-RecordType 0x1815e1908d0 'struct nistp224_pre_comp_st'
|     `-Record 0x1815e10a830 'nistp224_pre_comp_st'
|-RecordDecl 0x1815e1909b8 <line:179:9, col:16> col:16 struct nistp256_pre_comp_st
|-TypedefDecl 0x1815e190ac8 <col:1, col:37> col:37 referenced NISTP256_PRE_COMP 'struct nistp256_pre_comp_st':'struct nistp256_pre_comp_st'
| `-ElaboratedType 0x1815e190a70 'struct nistp256_pre_comp_st' sugar
|   `-RecordType 0x1815e190a50 'struct nistp256_pre_comp_st'
|     `-Record 0x1815e1909b8 'nistp256_pre_comp_st'
|-RecordDecl 0x1815e190b38 <line:180:9, col:16> col:16 struct nistp521_pre_comp_st
|-TypedefDecl 0x1815e190c48 <col:1, col:37> col:37 referenced NISTP521_PRE_COMP 'struct nistp521_pre_comp_st':'struct nistp521_pre_comp_st'
| `-ElaboratedType 0x1815e190bf0 'struct nistp521_pre_comp_st' sugar
|   `-RecordType 0x1815e190bd0 'struct nistp521_pre_comp_st'
|     `-Record 0x1815e190b38 'nistp521_pre_comp_st'
|-RecordDecl 0x1815e190cb8 <line:181:9, col:16> col:16 struct nistz256_pre_comp_st
|-TypedefDecl 0x1815e190dc8 <col:1, col:37> col:37 referenced NISTZ256_PRE_COMP 'struct nistz256_pre_comp_st':'struct nistz256_pre_comp_st'
| `-ElaboratedType 0x1815e190d70 'struct nistz256_pre_comp_st' sugar
|   `-RecordType 0x1815e190d50 'struct nistz256_pre_comp_st'
|     `-Record 0x1815e190cb8 'nistz256_pre_comp_st'
|-RecordDecl 0x1815e190e38 <line:182:9, col:16> col:16 struct ec_pre_comp_st
|-TypedefDecl 0x1815e190f48 <col:1, col:31> col:31 referenced EC_PRE_COMP 'struct ec_pre_comp_st':'struct ec_pre_comp_st'
| `-ElaboratedType 0x1815e190ef0 'struct ec_pre_comp_st' sugar
|   `-RecordType 0x1815e190ed0 'struct ec_pre_comp_st'
|     `-Record 0x1815e190e38 'ec_pre_comp_st'
|-RecordDecl 0x1815e190fb8 <line:184:1, line:249:1> line:184:8 invalid struct ec_group_st definition
| |-FieldDecl 0x1815e191088 <line:185:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x1815e1910f8 <line:186:5, col:15> col:15 invalid generator 'int *'
| |-FieldDecl 0x1815e191168 <line:187:5, col:13> col:13 invalid order 'int *'
| |-FieldDecl 0x1815e1911d8 <col:5, col:21> col:21 invalid cofactor 'int *'
| |-FieldDecl 0x1815e191248 <line:188:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x1815e18f2b0 <line:189:5, col:9> col:9 asn1_flag 'int'
| |-FieldDecl 0x1815e18f320 <line:190:5, col:29> col:29 invalid asn1_form 'int'
| |-FieldDecl 0x1815e18f390 <line:191:5, col:20> col:20 seed 'unsigned char *'
| |-FieldDecl 0x1815e18f3f8 <line:193:5, col:12> col:12 seed_len 'size_t':'unsigned long long'
| |-FieldDecl 0x1815e18f468 <line:203:5, col:13> col:13 invalid field 'int *'
| |-FieldDecl 0x1815e18f560 <line:211:5, col:15> col:9 poly 'int [6]'
| |-FieldDecl 0x1815e18f5d0 <line:219:5, col:13> col:13 invalid a 'int *'
| |-FieldDecl 0x1815e18f640 <col:5, col:17> col:17 invalid b 'int *'
| |-FieldDecl 0x1815e18f6b0 <line:221:5, col:9> col:9 a_is_minus3 'int'
| |-FieldDecl 0x1815e18f720 <line:223:5, col:11> col:11 field_data1 'void *'
| |-FieldDecl 0x1815e18f790 <line:225:5, col:11> col:11 field_data2 'void *'
| |-FieldDecl 0x1815e18fb20 <line:227:5, line:228:36> line:227:11 field_mod_func 'int (*)(int *, const int *, const int *, int *)'
| |-FieldDecl 0x1815e18fb90 <line:230:5, col:18> col:18 invalid mont_data 'int *'
| |-EnumDecl 0x1815e18fbe8 <line:237:5, line:241:5> line:237:5
| | |-EnumConstantDecl 0x1815e18fcc0 <line:238:9> col:9 PCT_none 'int'
| | |-EnumConstantDecl 0x1815e18fd18 <line:239:9> col:9 referenced PCT_nistp224 'int'
| | |-EnumConstantDecl 0x1815e18fd70 <col:23> col:23 PCT_nistp256 'int'
| | |-EnumConstantDecl 0x1815e18fdc8 <col:37> col:37 PCT_nistp521 'int'
| | |-EnumConstantDecl 0x1815e18fe20 <col:51> col:51 PCT_nistz256 'int'
| | `-EnumConstantDecl 0x1815e18fe78 <line:240:9> col:9 PCT_ec 'int'
| |-FieldDecl 0x1815e18ff28 <line:237:5, line:241:7> col:7 pre_comp_type 'enum (anonymous enum at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:237:5)':'enum ec_group_st::(anonymous at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:237:5)'
| |-RecordDecl 0x1815e18ff80 <line:242:5, line:248:5> line:242:5 union definition
| | |-FieldDecl 0x1815e1900c8 <line:243:9, col:28> col:28 nistp224 'NISTP224_PRE_COMP *'
| | |-FieldDecl 0x1815e1901a8 <line:244:9, col:28> col:28 nistp256 'NISTP256_PRE_COMP *'
| | |-FieldDecl 0x1815e1912d0 <line:245:9, col:28> col:28 nistp521 'NISTP521_PRE_COMP *'
| | |-FieldDecl 0x1815e1913b8 <line:246:9, col:28> col:28 nistz256 'NISTZ256_PRE_COMP *'
| | `-FieldDecl 0x1815e191498 <line:247:9, col:22> col:22 ec 'EC_PRE_COMP *'
| `-FieldDecl 0x1815e191548 <line:242:5, line:248:7> col:7 pre_comp 'union (anonymous union at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:242:5)':'union ec_group_st::(anonymous at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:242:5)'
|-RecordDecl 0x1815e1915a0 <line:256:1, line:269:1> line:256:8 invalid struct ec_key_st definition
| |-FieldDecl 0x1815e191678 <line:257:5, col:26> col:26 invalid meth 'const int *'
| |-FieldDecl 0x1815e1916e8 <line:258:5, col:13> col:13 invalid engine 'int *'
| |-FieldDecl 0x1815e191758 <line:259:5, col:9> col:9 version 'int'
| |-FieldDecl 0x1815e1917c8 <line:260:5, col:15> col:15 invalid group 'int *'
| |-FieldDecl 0x1815e191838 <line:261:5, col:15> col:15 invalid pub_key 'int *'
| |-FieldDecl 0x1815e1918a8 <line:262:5, col:13> col:13 invalid priv_key 'int *'
| |-FieldDecl 0x1815e191918 <line:263:5, col:18> col:18 enc_flag 'unsigned int'
| |-FieldDecl 0x1815e191988 <line:264:5, col:29> col:29 invalid conv_form 'int'
| |-FieldDecl 0x1815e1919f8 <line:265:5, col:9> col:9 references 'int'
| |-FieldDecl 0x1815e191a68 <line:266:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x1815e191ad8 <line:267:5, col:20> col:20 invalid ex_data 'int'
| `-FieldDecl 0x1815e191b48 <line:268:5, col:20> col:20 invalid lock 'int *'
|-RecordDecl 0x1815e191ba0 <line:271:1, line:285:1> line:271:8 invalid struct ec_point_st definition
| |-FieldDecl 0x1815e191c78 <line:272:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x1815e191ce8 <line:274:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x1815e191d58 <line:279:5, col:13> col:13 invalid X 'int *'
| |-FieldDecl 0x1815e191dc8 <line:280:5, col:13> col:13 invalid Y 'int *'
| |-FieldDecl 0x1815e191e38 <line:281:5, col:13> col:13 invalid Z 'int *'
| `-FieldDecl 0x1815e191ea8 <line:283:5, col:9> col:9 Z_is_one 'int'
|-FunctionDecl 0x1815e192038 <line:288:1, line:298:1> line:288:24 invalid ec_point_is_compat 'int (const int *, const int *)' static
| |-ParmVarDecl 0x1815e191f18 <col:43, col:59> col:59 invalid point 'const int *'
| |-ParmVarDecl 0x1815e191f98 <line:289:43, col:59> col:59 invalid group 'const int *'
| `-CompoundStmt 0x1815e1921f0 <line:290:1, line:298:1>
|   |-IfStmt 0x1815e1921a0 <line:291:5, line:295:16>
|   | |-OpaqueValueExpr 0x1815e192188 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1815e192178 <col:9, col:16>
|   |   `-IntegerLiteral 0x1815e192150 <col:16> 'int' 0
|   `-ReturnStmt 0x1815e1921e0 <line:297:5, col:12>
|     `-IntegerLiteral 0x1815e1921b8 <col:12> 'int' 1
|-FunctionDecl 0x1815e193348 <line:301:1, col:64> col:20 EC_nistp224_pre_comp_dup 'NISTP224_PRE_COMP *(NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x1815e192220 <col:45, col:63> col:64 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x1815e193508 <line:302:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x1815e193418 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1815e1936c8 <line:303:1, col:64> col:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x1815e1935d8 <col:45, col:63> col:64 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x1815e193888 <line:304:1, col:64> col:20 EC_nistz256_pre_comp_dup 'NISTZ256_PRE_COMP *(NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x1815e193798 <col:45, col:63> col:64 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x1815e1939e8 prev 0x1815e193508 <line:305:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x1815e193958 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1815e193b98 <line:306:1, col:46> col:14 EC_ec_pre_comp_dup 'EC_PRE_COMP *(EC_PRE_COMP *)'
| `-ParmVarDecl 0x1815e193aa0 <col:33, col:45> col:46 'EC_PRE_COMP *'
|-FunctionDecl 0x1815e193d00 <line:308:1, col:38> col:6 invalid EC_pre_comp_free 'void (int *)'
| `-ParmVarDecl 0x1815e193c70 <col:23, col:33> col:33 invalid group 'int *'
|-FunctionDecl 0x1815e193ea8 <line:309:1, col:51> col:6 used EC_nistp224_pre_comp_free 'void (NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x1815e193db8 <col:32, col:50> col:51 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x1815e194068 <line:310:1, col:51> col:6 EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x1815e193f78 <col:32, col:50> col:51 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x1815e194228 <line:311:1, col:51> col:6 EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x1815e194138 <col:32, col:50> col:51 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x1815e194408 <line:312:1, col:51> col:6 EC_nistz256_pre_comp_free 'void (NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x1815e194310 <col:32, col:50> col:51 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x1815e1945c8 <line:313:1, col:39> col:6 EC_ec_pre_comp_free 'void (EC_PRE_COMP *)'
| `-ParmVarDecl 0x1815e1944d8 <col:26, col:38> col:39 'EC_PRE_COMP *'
|-FunctionDecl 0x1815e194a80 <line:319:1, line:321:25> line:319:5 invalid ec_wNAF_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1815e1946a0 <col:17, col:33> col:33 invalid group 'const int *'
| |-ParmVarDecl 0x1815e194720 <col:40, col:50> col:50 invalid r 'int *'
| |-ParmVarDecl 0x1815e1947a0 <col:53, col:67> col:67 invalid scalar 'const int *'
| |-ParmVarDecl 0x1815e194818 <line:320:17, col:24> col:24 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1948a8 <col:29, <invalid sloc>> col:45 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1815e194938 <col:55, <invalid sloc>> col:69 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1815e1949b8 <line:321:17, <invalid sloc>> col:25 invalid 'int *'
|-FunctionDecl 0x1815e194c90 <line:322:1, col:54> col:5 invalid ec_wNAF_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1815e194b70 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x1815e194bf0 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1815e194df0 <line:323:1, col:55> col:5 invalid ec_wNAF_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1815e194d58 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x1815e194f48 <line:326:1, col:40> col:5 invalid ec_GFp_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x1815e194eb0 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x1815e195098 <line:327:1, col:43> col:6 invalid ec_GFp_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x1815e195008 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x1815e1951e8 <line:328:1, col:49> col:6 invalid ec_GFp_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1815e195158 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x1815e195430 <line:329:1, col:58> col:5 invalid ec_GFp_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1815e195310 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x1815e195390 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x1815e1957b0 <line:330:1, line:331:77> line:330:5 invalid ec_GFp_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e1954f8 <col:35, <invalid sloc>> col:45 invalid 'int *'
| |-ParmVarDecl 0x1815e195578 <col:47, col:61> col:61 invalid p 'const int *'
| |-ParmVarDecl 0x1815e1955f8 <line:331:35, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x1815e195678 <col:52, col:66> col:66 invalid b 'const int *'
| `-ParmVarDecl 0x1815e1956f8 <col:69, <invalid sloc>> col:77 invalid 'int *'
|-FunctionDecl 0x1815e195b48 <line:332:1, line:333:54> line:332:5 invalid ec_GFp_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x1815e195890 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| |-ParmVarDecl 0x1815e195910 <col:53, col:61> col:61 invalid p 'int *'
| |-ParmVarDecl 0x1815e195990 <col:64, col:72> col:72 invalid a 'int *'
| |-ParmVarDecl 0x1815e195a10 <line:333:35, col:43> col:43 invalid b 'int *'
| `-ParmVarDecl 0x1815e195a90 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1815e195cc0 <line:334:1, col:52> col:5 invalid ec_GFp_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x1815e195c28 <col:36, <invalid sloc>> col:52 invalid 'const int *'
|-FunctionDecl 0x1815e195ea0 <line:335:1, col:70> col:5 invalid ec_GFp_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x1815e195d80 <col:44, <invalid sloc>> col:60 invalid 'const int *'
| `-ParmVarDecl 0x1815e195e00 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x1815e196000 <line:336:1, col:40> col:5 invalid ec_GFp_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x1815e195f68 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x1815e196150 <line:337:1, col:43> col:6 invalid ec_GFp_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x1815e1960c0 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x1815e18e2a0 <line:338:1, col:49> col:6 invalid ec_GFp_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1815e196210 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x1815e18e480 <line:339:1, col:58> col:5 invalid ec_GFp_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1815e18e360 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x1815e18e3e0 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x1815e18e668 <line:340:1, col:69> col:5 invalid ec_GFp_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x1815e18e548 <col:41, <invalid sloc>> col:57 invalid 'const int *'
| `-ParmVarDecl 0x1815e18e5c8 <col:59, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x1815e18ea70 <line:341:1, line:344:76> line:341:5 invalid ec_GFp_simple_set_Jprojective_coordinates_GFp 'int (const int *, int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e18e730 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1815e18e7b0 <line:342:51, <invalid sloc>> col:61 invalid 'int *'
| |-ParmVarDecl 0x1815e18e830 <col:63, col:77> col:77 invalid x 'const int *'
| |-ParmVarDecl 0x1815e18e8b0 <line:343:51, col:65> col:65 invalid y 'const int *'
| |-ParmVarDecl 0x1815e18e930 <line:344:51, col:65> col:65 invalid z 'const int *'
| `-ParmVarDecl 0x1815e18e9b0 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x1815e18ee98 <line:345:1, line:348:59> line:345:5 invalid ec_GFp_simple_get_Jprojective_coordinates_GFp 'int (const int *, const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x1815e18eb58 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1815e18ebd8 <line:346:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1815e18ec58 <col:69, col:77> col:77 invalid x 'int *'
| |-ParmVarDecl 0x1815e18ecd8 <line:347:51, col:59> col:59 invalid y 'int *'
| |-ParmVarDecl 0x1815e18ed58 <col:62, col:70> col:70 invalid z 'int *'
| `-ParmVarDecl 0x1815e18edd8 <line:348:51, <invalid sloc>> col:59 invalid 'int *'
|-FunctionDecl 0x1815e19a360 <line:349:1, line:351:73> line:349:5 invalid ec_GFp_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e18ef80 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x1815e18f000 <col:66, <invalid sloc>> col:76 invalid 'int *'
| |-ParmVarDecl 0x1815e18f080 <line:350:48, col:62> col:62 invalid x 'const int *'
| |-ParmVarDecl 0x1815e18f100 <line:351:48, col:62> col:62 invalid y 'const int *'
| `-ParmVarDecl 0x1815e18f180 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x1815e19a6f8 <line:352:1, line:354:67> line:352:5 invalid ec_GFp_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1815e19a440 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x1815e19a4c0 <line:353:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x1815e19a540 <col:66, col:74> col:74 invalid x 'int *'
| |-ParmVarDecl 0x1815e19a5c0 <line:354:48, col:56> col:56 invalid y 'int *'
| `-ParmVarDecl 0x1815e19a640 <col:59, <invalid sloc>> col:67 invalid 'int *'
|-FunctionDecl 0x1815e19aa90 <line:355:1, line:357:54> line:355:5 invalid ec_GFp_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x1815e19a7d8 <col:46, <invalid sloc>> col:62 invalid 'const int *'
| |-ParmVarDecl 0x1815e19a858 <col:64, <invalid sloc>> col:74 invalid 'int *'
| |-ParmVarDecl 0x1815e19a8d8 <line:356:46, col:60> col:60 invalid x 'const int *'
| |-ParmVarDecl 0x1815e19a958 <col:63, col:67> col:67 y_bit 'int'
| `-ParmVarDecl 0x1815e19a9d8 <line:357:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1815e19aea0 <line:358:1, line:360:72> line:358:8 invalid ec_GFp_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1815e19ab70 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x1815e19abf0 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| |-ParmVarDecl 0x1815e19ac70 <line:359:32, col:56> col:56 invalid form 'int'
| |-ParmVarDecl 0x1815e19acf0 <line:360:32, col:47> col:47 buf 'unsigned char *'
| |-ParmVarDecl 0x1815e19ad68 <col:52, col:59> col:59 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e19ade8 <col:64, <invalid sloc>> col:72 invalid 'int *'
|-FunctionDecl 0x1815e19b238 <line:361:1, line:362:75> line:361:5 invalid ec_GFp_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1815e19af88 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1815e19b008 <col:47, <invalid sloc>> col:57 invalid 'int *'
| |-ParmVarDecl 0x1815e19b088 <line:362:29, col:50> col:50 buf 'const unsigned char *'
| |-ParmVarDecl 0x1815e19b100 <col:55, col:62> col:62 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e19b180 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x1815e199608 <line:363:1, line:364:50> line:363:5 invalid ec_GFp_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e199350 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x1815e1993d0 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x1815e199450 <col:54, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x1815e1994d0 <line:364:23, col:39> col:39 invalid b 'const int *'
| `-ParmVarDecl 0x1815e199550 <col:42, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x1815e199918 <line:365:1, line:366:31> line:365:5 invalid ec_GFp_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1815e1996e8 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x1815e199768 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x1815e1997e8 <col:54, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1815e199868 <line:366:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x1815e199b98 <line:367:1, col:64> col:5 invalid ec_GFp_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1815e1999f0 <col:26, <invalid sloc>> col:42 invalid 'const int *'
| |-ParmVarDecl 0x1815e199a70 <col:44, <invalid sloc>> col:54 invalid 'int *'
| `-ParmVarDecl 0x1815e199af0 <col:56, <invalid sloc>> col:64 invalid 'int *'
|-FunctionDecl 0x1815e199d88 <line:368:1, col:68> col:5 invalid ec_GFp_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x1815e199c68 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| `-ParmVarDecl 0x1815e199ce8 <col:52, <invalid sloc>> col:68 invalid 'const int *'
|-FunctionDecl 0x1815e199ff8 <line:369:1, col:75> col:5 invalid ec_GFp_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e199e50 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x1815e199ed0 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| `-ParmVarDecl 0x1815e199f50 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x1815e19d390 <line:370:1, line:371:31> line:370:5 invalid ec_GFp_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19a0c8 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x1815e19a148 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x1815e19a1c8 <col:60, col:76> col:76 invalid b 'const int *'
| `-ParmVarDecl 0x1815e19a248 <line:371:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x1815e19d610 <line:372:1, col:69> col:5 invalid ec_GFp_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1815e19d468 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x1815e19d4e8 <col:49, <invalid sloc>> col:59 invalid 'int *'
| `-ParmVarDecl 0x1815e19d568 <col:61, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x1815e19d918 <line:373:1, line:374:60> line:373:5 invalid ec_GFp_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x1815e19d6e0 <col:38, <invalid sloc>> col:54 invalid 'const int *'
| |-ParmVarDecl 0x1815e19d758 <col:56, col:63> col:63 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e19d7e8 <line:374:38, <invalid sloc>> col:48 invalid 'int **':'int **'
| `-ParmVarDecl 0x1815e19d868 <col:52, <invalid sloc>> col:60 invalid 'int *'
|-FunctionDecl 0x1815e19dca8 <line:375:1, line:376:54> line:375:5 invalid ec_GFp_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19d9f0 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1815e19da70 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x1815e19daf0 <col:58, col:72> col:72 invalid a 'const int *'
| |-ParmVarDecl 0x1815e19db70 <line:376:29, col:43> col:43 invalid b 'const int *'
| `-ParmVarDecl 0x1815e19dbf0 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x1815e19dfb8 <line:377:1, line:378:37> line:377:5 invalid ec_GFp_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19dd88 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x1815e19de08 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x1815e19de88 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x1815e19df08 <line:378:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x1815e19e238 <line:379:1, line:380:48> line:379:5 invalid ec_GFp_simple_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1815e19e090 <col:37, col:53> col:53 invalid group 'const int *'
| |-ParmVarDecl 0x1815e19e110 <col:60, col:70> col:70 invalid p 'int *'
| `-ParmVarDecl 0x1815e19e190 <line:380:37, col:45> col:45 invalid ctx 'int *'
|-FunctionDecl 0x1815e197360 <line:383:1, col:38> col:5 invalid ec_GFp_mont_group_init 'int (int *)'
| `-ParmVarDecl 0x1815e19e308 <col:28, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1815e1976d8 <line:384:1, line:385:58> line:384:5 invalid ec_GFp_mont_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e197420 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x1815e1974a0 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x1815e197520 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x1815e1975a0 <line:385:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x1815e197620 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x1815e197848 <line:386:1, col:41> col:6 invalid ec_GFp_mont_group_finish 'void (int *)'
| `-ParmVarDecl 0x1815e1977b8 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x1815e197998 <line:387:1, col:47> col:6 invalid ec_GFp_mont_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1815e197908 <col:37, <invalid sloc>> col:47 invalid 'int *'
|-FunctionDecl 0x1815e197b78 <line:388:1, col:56> col:5 invalid ec_GFp_mont_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1815e197a58 <col:28, <invalid sloc>> col:38 invalid 'int *'
| `-ParmVarDecl 0x1815e197ad8 <col:40, <invalid sloc>> col:56 invalid 'const int *'
|-FunctionDecl 0x1815e197ef8 <line:389:1, line:390:52> line:389:5 invalid ec_GFp_mont_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e197c40 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1815e197cc0 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1815e197d40 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x1815e197dc0 <line:390:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x1815e197e40 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x1815e198208 <line:391:1, line:392:35> line:391:5 invalid ec_GFp_mont_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1815e197fd8 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1815e198058 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1815e1980d8 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1815e198158 <line:392:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x1815e19b5a0 <line:393:1, line:394:38> line:393:5 invalid ec_GFp_mont_field_encode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19b370 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1815e19b3f0 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1815e19b470 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x1815e19b4f0 <line:394:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1815e19b8a8 <line:395:1, line:396:38> line:395:5 invalid ec_GFp_mont_field_decode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19b678 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1815e19b6f8 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1815e19b778 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x1815e19b7f8 <line:396:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1815e19bb28 <line:397:1, col:71> col:5 invalid ec_GFp_mont_field_set_to_one 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1815e19b980 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| |-ParmVarDecl 0x1815e19ba00 <col:52, col:60> col:60 invalid r 'int *'
| `-ParmVarDecl 0x1815e19ba80 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x1815e19bd18 <line:400:1, col:63> col:5 invalid ec_GFp_nist_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1815e19bbf8 <col:28, col:38> col:38 invalid dest 'int *'
| `-ParmVarDecl 0x1815e19bc78 <col:44, col:60> col:60 invalid src 'const int *'
|-FunctionDecl 0x1815e19c098 <line:401:1, line:402:58> line:401:5 invalid ec_GFp_nist_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19bde0 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x1815e19be60 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x1815e19bee0 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x1815e19bf60 <line:402:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x1815e19bfe0 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x1815e19c450 <line:403:1, line:404:52> line:403:5 invalid ec_GFp_nist_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19c178 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1815e19c1f8 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1815e19c278 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x1815e19c2f8 <line:404:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x1815e19c398 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x1815e19c760 <line:405:1, line:406:35> line:405:5 invalid ec_GFp_nist_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19c530 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1815e19c5b0 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x1815e19c630 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x1815e19c6b0 <line:406:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x1815e19c8d0 <line:409:1, col:41> col:5 invalid ec_GF2m_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x1815e19c838 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x1815e19ca20 <line:410:1, col:44> col:6 invalid ec_GF2m_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x1815e19c990 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x1815e19cb70 <line:411:1, col:50> col:6 invalid ec_GF2m_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1815e19cae0 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x1815e19cd50 <line:412:1, col:59> col:5 invalid ec_GF2m_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1815e19cc30 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x1815e19ccb0 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x1815e19d0d0 <line:413:1, line:415:44> line:413:5 invalid ec_GF2m_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19ce18 <col:36, <invalid sloc>> col:46 invalid 'int *'
| |-ParmVarDecl 0x1815e19ce98 <col:48, col:62> col:62 invalid p 'const int *'
| |-ParmVarDecl 0x1815e19cf18 <line:414:36, col:50> col:50 invalid a 'const int *'
| |-ParmVarDecl 0x1815e19cf98 <col:53, col:67> col:67 invalid b 'const int *'
| `-ParmVarDecl 0x1815e19d018 <line:415:36, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x1815e196458 <line:416:1, line:417:55> line:416:5 invalid ec_GF2m_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x1815e19d1b0 <col:36, <invalid sloc>> col:52 invalid 'const int *'
| |-ParmVarDecl 0x1815e19d230 <col:54, col:62> col:62 invalid p 'int *'
| |-ParmVarDecl 0x1815e19d2b0 <col:65, col:73> col:73 invalid a 'int *'
| |-ParmVarDecl 0x1815e196320 <line:417:36, col:44> col:44 invalid b 'int *'
| `-ParmVarDecl 0x1815e1963a0 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1815e1965d0 <line:418:1, col:53> col:5 invalid ec_GF2m_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x1815e196538 <col:37, <invalid sloc>> col:53 invalid 'const int *'
|-FunctionDecl 0x1815e1967b0 <line:419:1, col:71> col:5 invalid ec_GF2m_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x1815e196690 <col:45, <invalid sloc>> col:61 invalid 'const int *'
| `-ParmVarDecl 0x1815e196710 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x1815e196910 <line:420:1, col:41> col:5 invalid ec_GF2m_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x1815e196878 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x1815e196a60 <line:421:1, col:44> col:6 invalid ec_GF2m_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x1815e1969d0 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x1815e196bb0 <line:422:1, col:50> col:6 invalid ec_GF2m_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x1815e196b20 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x1815e196d90 <line:423:1, col:59> col:5 invalid ec_GF2m_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x1815e196c70 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x1815e196cf0 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x1815e196f78 <line:424:1, col:70> col:5 invalid ec_GF2m_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x1815e196e58 <col:42, <invalid sloc>> col:58 invalid 'const int *'
| `-ParmVarDecl 0x1815e196ed8 <col:60, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x1815e198340 <line:425:1, line:427:74> line:425:5 invalid ec_GF2m_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e197040 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x1815e1970c0 <col:67, <invalid sloc>> col:77 invalid 'int *'
| |-ParmVarDecl 0x1815e197140 <line:426:49, col:63> col:63 invalid x 'const int *'
| |-ParmVarDecl 0x1815e1971c0 <line:427:49, col:63> col:63 invalid y 'const int *'
| `-ParmVarDecl 0x1815e197240 <col:66, <invalid sloc>> col:74 invalid 'int *'
|-FunctionDecl 0x1815e1986d8 <line:428:1, line:430:68> line:428:5 invalid ec_GF2m_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1815e198420 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x1815e1984a0 <line:429:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x1815e198520 <col:67, col:75> col:75 invalid x 'int *'
| |-ParmVarDecl 0x1815e1985a0 <line:430:49, col:57> col:57 invalid y 'int *'
| `-ParmVarDecl 0x1815e198620 <col:60, <invalid sloc>> col:68 invalid 'int *'
|-FunctionDecl 0x1815e198a70 <line:431:1, line:433:55> line:431:5 invalid ec_GF2m_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x1815e1987b8 <col:47, <invalid sloc>> col:63 invalid 'const int *'
| |-ParmVarDecl 0x1815e198838 <col:65, <invalid sloc>> col:75 invalid 'int *'
| |-ParmVarDecl 0x1815e1988b8 <line:432:47, col:61> col:61 invalid x 'const int *'
| |-ParmVarDecl 0x1815e198938 <col:64, col:68> col:68 y_bit 'int'
| `-ParmVarDecl 0x1815e1989b8 <line:433:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1815e198e80 <line:434:1, line:436:73> line:434:8 invalid ec_GF2m_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1815e198b50 <col:33, <invalid sloc>> col:49 invalid 'const int *'
| |-ParmVarDecl 0x1815e198bd0 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x1815e198c50 <line:435:33, col:57> col:57 invalid form 'int'
| |-ParmVarDecl 0x1815e198cd0 <line:436:33, col:48> col:48 buf 'unsigned char *'
| |-ParmVarDecl 0x1815e198d48 <col:53, col:60> col:60 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e198dc8 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x1815e199218 <line:437:1, line:438:76> line:437:5 invalid ec_GF2m_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x1815e198f68 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1815e198fe8 <col:48, <invalid sloc>> col:58 invalid 'int *'
| |-ParmVarDecl 0x1815e199068 <line:438:30, col:51> col:51 buf 'const unsigned char *'
| |-ParmVarDecl 0x1815e1990e0 <col:56, col:63> col:63 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1815e199160 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x1815e19f668 <line:439:1, line:440:51> line:439:5 invalid ec_GF2m_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19f3b0 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x1815e19f430 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x1815e19f4b0 <col:55, col:71> col:71 invalid a 'const int *'
| |-ParmVarDecl 0x1815e19f530 <line:440:24, col:40> col:40 invalid b 'const int *'
| `-ParmVarDecl 0x1815e19f5b0 <col:43, <invalid sloc>> col:51 invalid 'int *'
|-FunctionDecl 0x1815e19f978 <line:441:1, line:442:32> line:441:5 invalid ec_GF2m_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19f748 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x1815e19f7c8 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x1815e19f848 <col:55, col:71> col:71 invalid a 'const int *'
| `-ParmVarDecl 0x1815e19f8c8 <line:442:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x1815e19fbf8 <line:443:1, col:65> col:5 invalid ec_GF2m_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1815e19fa50 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x1815e19fad0 <col:45, <invalid sloc>> col:55 invalid 'int *'
| `-ParmVarDecl 0x1815e19fb50 <col:57, <invalid sloc>> col:65 invalid 'int *'
|-FunctionDecl 0x1815e19fde8 <line:444:1, col:69> col:5 invalid ec_GF2m_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x1815e19fcc8 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| `-ParmVarDecl 0x1815e19fd48 <col:53, <invalid sloc>> col:69 invalid 'const int *'
|-FunctionDecl 0x1815e1a0058 <line:445:1, col:76> col:5 invalid ec_GF2m_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e19feb0 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x1815e19ff30 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| `-ParmVarDecl 0x1815e19ffb0 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x1815e1341a0 <line:446:1, line:447:32> line:446:5 invalid ec_GF2m_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e1a0128 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x1815e1a01a8 <col:42, col:58> col:58 invalid a 'const int *'
| |-ParmVarDecl 0x1815e1a0228 <col:61, col:77> col:77 invalid b 'const int *'
| `-ParmVarDecl 0x1815e1a02a8 <line:447:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x1815e134420 <line:448:1, col:70> col:5 invalid ec_GF2m_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1815e134278 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x1815e1342f8 <col:50, <invalid sloc>> col:60 invalid 'int *'
| `-ParmVarDecl 0x1815e134378 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x1815e134728 <line:449:1, line:450:61> line:449:5 invalid ec_GF2m_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x1815e1344f0 <col:39, <invalid sloc>> col:55 invalid 'const int *'
| |-ParmVarDecl 0x1815e134568 <col:57, col:64> col:64 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1345f8 <line:450:39, <invalid sloc>> col:49 invalid 'int **':'int **'
| `-ParmVarDecl 0x1815e134678 <col:53, <invalid sloc>> col:61 invalid 'int *'
|-FunctionDecl 0x1815e134ab8 <line:451:1, line:452:55> line:451:5 invalid ec_GF2m_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e134800 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1815e134880 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1815e134900 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x1815e134980 <line:452:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x1815e134a00 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1815e134dc8 <line:453:1, line:454:38> line:453:5 invalid ec_GF2m_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x1815e134b98 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1815e134c18 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1815e134c98 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x1815e134d18 <line:454:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x1815e1aad00 <line:455:1, line:456:55> line:455:5 invalid ec_GF2m_simple_field_div 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e134ea0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x1815e134f20 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x1815e134fa0 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x1815e135020 <line:456:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x1815e1350a0 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x1815e1ab1c0 <line:459:1, line:462:32> line:459:5 invalid ec_GF2m_simple_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1815e1aade0 <col:24, col:40> col:40 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1aae60 <col:47, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x1815e1aaee0 <line:460:24, col:38> col:38 invalid scalar 'const int *'
| |-ParmVarDecl 0x1815e1aaf58 <col:46, col:53> col:53 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1aafe8 <line:461:24, <invalid sloc>> col:40 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1815e1ab078 <col:50, <invalid sloc>> col:64 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1815e1ab0f8 <line:462:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x1815e1ab3d0 <line:463:1, col:57> col:5 invalid ec_GF2m_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1815e1ab2b0 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x1815e1ab330 <col:46, col:54> col:54 invalid ctx 'int *'
|-FunctionDecl 0x1815e1ab530 <line:464:1, col:55> col:5 invalid ec_GF2m_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1815e1ab498 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x1815e1ab688 <line:468:1, col:47> col:5 invalid ec_GFp_nistp224_group_init 'int (int *)'
| `-ParmVarDecl 0x1815e1ab5f0 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x1815e1aba00 <line:469:1, line:471:45> line:469:5 invalid ec_GFp_nistp224_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e1ab748 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1815e1ab7c8 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1815e1ab848 <line:470:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1815e1ab8c8 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x1815e1ab948 <line:471:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x1815e1abdc8 <line:472:1, line:475:61> line:472:5 invalid ec_GFp_nistp224_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1815e1abae0 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1abb60 <line:473:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1815e1abbe0 <line:474:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1815e1abc60 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x1815e1abd10 <line:475:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x1815e1ac288 <line:476:1, line:479:33> line:476:5 invalid ec_GFp_nistp224_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1815e1abea8 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1abf28 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x1815e1abfa8 <line:477:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x1815e1ac020 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1ac0b0 <line:478:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1815e1ac140 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1815e1ac1c0 <line:479:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x1815e1ac758 <line:480:1, line:483:68> line:480:5 invalid ec_GFp_nistp224_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1815e1ac378 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1ac3f8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1815e1ac478 <line:481:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1815e1ac4f0 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1ac580 <line:482:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1815e1ac610 <line:483:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1815e1ac690 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x1815e1ac968 <line:484:1, col:65> col:5 invalid ec_GFp_nistp224_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1815e1ac848 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x1815e1ac8c8 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x1815e1acac8 <line:485:1, col:63> col:5 invalid ec_GFp_nistp224_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1815e1aca30 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x1815e1acc20 <line:488:1, col:47> col:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| `-ParmVarDecl 0x1815e1acb88 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x1815e1a9fa8 <line:489:1, line:491:45> line:489:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e1a9cf0 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1815e1a9d70 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1815e1a9df0 <line:490:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1815e1a9e70 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x1815e1a9ef0 <line:491:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x1815e1aa340 <line:492:1, line:495:61> line:492:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1815e1aa088 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1aa108 <line:493:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1815e1aa188 <line:494:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1815e1aa208 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x1815e1aa288 <line:495:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x1815e1aa800 <line:496:1, line:499:33> line:496:5 invalid ec_GFp_nistp256_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1815e1aa420 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1aa4a0 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x1815e1aa520 <line:497:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x1815e1aa598 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1aa628 <line:498:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1815e1aa6b8 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1815e1aa738 <line:499:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x1815e1acd20 <line:500:1, line:503:68> line:500:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1815e1aa8f0 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1aa970 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1815e1aa9f0 <line:501:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1815e1aaa68 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1aaaf8 <line:502:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1815e1aab88 <line:503:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1815e1aac08 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x1815e1acf30 <line:504:1, col:65> col:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1815e1ace10 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x1815e1ace90 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x1815e1ad090 <line:505:1, col:63> col:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1815e1acff8 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x1815e1ad1e8 <line:508:1, col:47> col:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| `-ParmVarDecl 0x1815e1ad150 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x1815e1ad560 <line:509:1, line:511:45> line:509:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e1ad2a8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1815e1ad328 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1815e1ad3a8 <line:510:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1815e1ad428 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x1815e1ad4a8 <line:511:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x1815e1ad8f8 <line:512:1, line:515:61> line:512:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1815e1ad640 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1ad6c0 <line:513:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1815e1ad740 <line:514:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1815e1ad7c0 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x1815e1ad840 <line:515:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x1815e1a5d78 <line:516:1, line:519:33> line:516:5 invalid ec_GFp_nistp521_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1815e1ad9d8 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1ada58 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x1815e1adad8 <line:517:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x1815e1adb50 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1adbe0 <line:518:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1815e1adc70 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1815e1a5cb0 <line:519:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x1815e1a6248 <line:520:1, line:523:68> line:520:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1815e1a5e68 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1a5ee8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1815e1a5f68 <line:521:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1815e1a5fe0 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1a6070 <line:522:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1815e1a6100 <line:523:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x1815e1a6180 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x1815e1a6458 <line:524:1, col:65> col:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1815e1a6338 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x1815e1a63b8 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x1815e1a65b8 <line:525:1, col:63> col:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x1815e1a6520 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x1815e1aea88 <line:528:1, line:552:75> line:528:6 used ec_GFp_nistp_points_make_affine_internal 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
| |-ParmVarDecl 0x1815e1a6670 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1a66f0 <col:59, col:65> col:65 point_array 'void *'
| |-ParmVarDecl 0x1815e1a6768 <line:529:47, col:54> col:54 felem_size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e1a67e8 <line:530:47, col:53> col:53 tmp_felems 'void *'
| |-ParmVarDecl 0x1815e1a69b0 <line:531:47, col:75> col:54 felem_one 'void (*)(void *)'
| |-ParmVarDecl 0x1815e1a6ba8 <line:532:47, line:533:72> line:532:53 felem_is_zero 'int (*)(const void *)'
| |-ParmVarDecl 0x1815e1aded8 <line:534:47, line:536:72> line:534:54 felem_assign 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x1815e1ae0b0 <line:537:47, line:539:72> line:537:54 felem_square 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x1815e1ae3f0 <line:540:47, line:544:70> line:540:54 felem_mul 'void (*)(void *, const void *, const void *)'
| |-ParmVarDecl 0x1815e1ae5c8 <line:545:47, line:547:69> line:545:54 felem_inv 'void (*)(void *, const void *)'
| `-ParmVarDecl 0x1815e1ae7a0 <line:548:47, line:552:74> line:548:54 felem_contract 'void (*)(void *, const void *)'
|-FunctionDecl 0x1815e1a6d68 <line:553:1, line:554:76> line:553:6 used ec_GFp_nistp_recode_scalar_bits 'void (unsigned char *, unsigned char *, unsigned char)'
| |-ParmVarDecl 0x1815e1aebb0 <col:38, col:53> col:53 sign 'unsigned char *'
| |-ParmVarDecl 0x1815e1aec30 <line:554:38, col:53> col:53 digit 'unsigned char *'
| `-ParmVarDecl 0x1815e1aecb0 <col:60, col:74> col:74 in 'unsigned char'
|-FunctionDecl 0x1815e1a6ee8 <line:556:1, col:39> col:5 invalid ec_precompute_mont_data 'int (int *)'
| `-ParmVarDecl 0x1815e1a6e50 <col:29, <invalid sloc>> col:39 invalid 'int *'
|-FunctionDecl 0x1815e1a7040 <line:557:1, col:53> col:5 invalid ec_group_simple_order_bits 'int (const int *)'
| `-ParmVarDecl 0x1815e1a6fa8 <col:32, col:48> col:48 invalid group 'const int *'
|-FunctionDecl 0x1815e1a7298 <line:567:1, line:568:61> line:567:8 invalid ec_key_simple_priv2oct 'size_t (const int *, unsigned char *, size_t)'
| |-ParmVarDecl 0x1815e1a7100 <col:31, col:45> col:45 invalid eckey 'const int *'
| |-ParmVarDecl 0x1815e1a7180 <line:568:31, col:46> col:46 buf 'unsigned char *'
| `-ParmVarDecl 0x1815e1a71f8 <col:51, col:58> col:58 len 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e1a7508 <line:569:1, col:79> col:5 invalid ec_key_simple_oct2priv 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x1815e1a7368 <col:28, col:36> col:36 invalid eckey 'int *'
| |-ParmVarDecl 0x1815e1a73e8 <col:43, col:64> col:64 buf 'const unsigned char *'
| `-ParmVarDecl 0x1815e1a7460 <col:69, col:76> col:76 len 'size_t':'unsigned long long'
|-FunctionDecl 0x1815e1a7670 <line:570:1, col:45> col:5 invalid ec_key_simple_generate_key 'int (int *)'
| `-ParmVarDecl 0x1815e1a75d8 <col:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x1815e1a77c8 <line:571:1, col:52> col:5 invalid ec_key_simple_generate_public_key 'int (int *)'
| `-ParmVarDecl 0x1815e1a7730 <col:39, col:47> col:47 invalid eckey 'int *'
|-FunctionDecl 0x1815e1a7920 <line:572:1, col:48> col:5 invalid ec_key_simple_check_key 'int (const int *)'
| `-ParmVarDecl 0x1815e1a7888 <col:29, col:43> col:43 invalid eckey 'const int *'
|-RecordDecl 0x1815e1a79c8 <line:576:1, line:601:1> line:576:8 invalid struct ec_key_method_st definition
| |-FieldDecl 0x1815e1a7a98 <line:577:5, col:17> col:17 name 'const char *'
| |-FieldDecl 0x1815e1a7b20 <line:578:5, col:13> col:13 flags 'int32_t':'int'
| |-FieldDecl 0x1815e1a7c38 <line:579:5, col:28> col:11 init 'int (*)(int *)'
| |-FieldDecl 0x1815e1aede0 <line:580:5, col:31> col:12 finish 'void (*)(int *)'
| |-FieldDecl 0x1815e1aef80 <line:581:5, col:48> col:11 copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x1815e1af120 <line:582:5, col:54> col:11 set_group 'int (*)(int *, const int *)'
| |-FieldDecl 0x1815e1af2c0 <line:583:5, col:59> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x1815e1af460 <line:584:5, col:59> col:11 set_public 'int (*)(int *, const int *)'
| |-FieldDecl 0x1815e1af578 <line:585:5, col:30> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x1815e1af828 <line:586:5, line:587:67> line:586:11 compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| |-FieldDecl 0x1815e1a7dd0 <line:588:5, line:590:47> line:588:11 sign 'int (*)(int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-FieldDecl 0x1815e1a8170 <line:591:5, line:592:34> line:591:11 sign_setup 'int (*)(int *, int *, int **, int **)'
| |-FieldDecl 0x1815e1a8588 <line:593:5, <invalid sloc>> col:18 invalid sign_sig 'int *(*)(const unsigned char *, int, const int *, const int *, int *)'
| |-FieldDecl 0x1815e1a8a30 <line:597:5, line:598:74> line:597:11 verify 'int (*)(int, const unsigned char *, int, const unsigned char *, int, int *)'
| `-FieldDecl 0x1815e1afe80 <line:599:5, line:600:58> line:599:11 verify_sig 'int (*)(const unsigned char *, int, const int *, int *)'
|-FunctionDecl 0x1815e1aff88 <line:605:1, col:34> col:5 invalid ossl_ec_key_gen 'int (int *)'
| `-ParmVarDecl 0x1815e1afef0 <col:21, col:29> col:29 invalid eckey 'int *'
|-FunctionDecl 0x1815e1b0278 <line:606:1, line:607:70> line:606:5 invalid ossl_ecdh_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x1815e1b0050 <col:27, col:43> col:43 pout 'unsigned char **'
| |-ParmVarDecl 0x1815e1b00c8 <col:49, col:57> col:57 poutlen 'size_t *'
| |-ParmVarDecl 0x1815e1b0148 <line:607:27, col:43> col:43 invalid pub_key 'const int *'
| `-ParmVarDecl 0x1815e1b01c8 <col:52, col:66> col:66 invalid ecdh 'const int *'
|-FunctionDecl 0x1815e1b0580 <line:608:1, line:609:72> line:608:5 invalid ecdh_simple_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x1815e1b0358 <col:29, col:45> col:45 pout 'unsigned char **'
| |-ParmVarDecl 0x1815e1b03d0 <col:51, col:59> col:59 poutlen 'size_t *'
| |-ParmVarDecl 0x1815e1b0450 <line:609:29, col:45> col:45 invalid pub_key 'const int *'
| `-ParmVarDecl 0x1815e1b04d0 <col:54, col:68> col:68 invalid ecdh 'const int *'
|-RecordDecl 0x1815e1b0640 <line:611:1, line:614:1> line:611:8 invalid struct ECDSA_SIG_st definition
| |-FieldDecl 0x1815e1b0718 <line:612:5, col:13> col:13 invalid r 'int *'
| `-FieldDecl 0x1815e1b0788 <line:613:5, col:13> col:13 invalid s 'int *'
|-FunctionDecl 0x1815e1b0a38 <line:616:1, line:617:38> line:616:5 invalid ossl_ecdsa_sign_setup 'int (int *, int *, int **, int **)'
| |-ParmVarDecl 0x1815e1b07f8 <col:27, col:35> col:35 invalid eckey 'int *'
| |-ParmVarDecl 0x1815e1b0878 <col:42, col:50> col:50 invalid ctx_in 'int *'
| |-ParmVarDecl 0x1815e1b0900 <col:58, col:67> col:67 invalid kinvp 'int **'
| `-ParmVarDecl 0x1815e1b0988 <line:617:27, col:36> col:36 invalid rp 'int **'
|-FunctionDecl 0x1815e1ef270 <line:618:1, line:620:71> line:618:5 invalid ossl_ecdsa_sign 'int (int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e1b0b10 <col:21, col:25> col:25 type 'int'
| |-ParmVarDecl 0x1815e1b0b90 <col:31, col:52> col:52 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1815e1b0c10 <col:58, col:62> col:62 dlen 'int'
| |-ParmVarDecl 0x1815e1b0c90 <line:619:21, col:36> col:36 sig 'unsigned char *'
| |-ParmVarDecl 0x1815e1ef020 <col:41, col:55> col:55 siglen 'unsigned int *'
| |-ParmVarDecl 0x1815e1ef0a0 <line:620:21, col:35> col:35 invalid kinv 'const int *'
| |-ParmVarDecl 0x1815e1ef120 <col:41, col:55> col:55 invalid r 'const int *'
| `-ParmVarDecl 0x1815e1ef1a0 <col:58, col:66> col:66 invalid eckey 'int *'
|-FunctionDecl 0x1815e1ef620 <line:621:1, line:623:45> line:621:12 invalid ossl_ecdsa_sign_sig 'int *(const unsigned char *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e1ef368 <col:32, col:53> col:53 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1815e1ef3e8 <col:59, col:63> col:63 dgst_len 'int'
| |-ParmVarDecl 0x1815e1ef468 <line:622:32, col:46> col:46 invalid in_kinv 'const int *'
| |-ParmVarDecl 0x1815e1ef4e8 <col:55, col:69> col:69 invalid in_r 'const int *'
| `-ParmVarDecl 0x1815e1ef568 <line:623:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x1815e1efa40 <line:624:1, line:625:78> line:624:5 invalid ossl_ecdsa_verify 'int (int, const unsigned char *, int, const unsigned char *, int, int *)'
| |-ParmVarDecl 0x1815e1ef700 <col:23, col:27> col:27 type 'int'
| |-ParmVarDecl 0x1815e1ef780 <col:33, col:54> col:54 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1815e1ef800 <col:60, col:64> col:64 dgst_len 'int'
| |-ParmVarDecl 0x1815e1ef880 <line:625:23, col:44> col:44 sigbuf 'const unsigned char *'
| |-ParmVarDecl 0x1815e1ef900 <col:52, col:56> col:56 sig_len 'int'
| `-ParmVarDecl 0x1815e1ef980 <col:65, col:73> col:73 invalid eckey 'int *'
|-FunctionDecl 0x1815e1efd58 <line:626:1, line:627:62> line:626:5 invalid ossl_ecdsa_verify_sig 'int (const unsigned char *, int, const int *, int *)'
| |-ParmVarDecl 0x1815e1efb28 <col:27, col:48> col:48 dgst 'const unsigned char *'
| |-ParmVarDecl 0x1815e1efba8 <col:54, col:58> col:58 dgst_len 'int'
| |-ParmVarDecl 0x1815e1efc28 <line:627:27, col:44> col:44 invalid sig 'const int *'
| `-ParmVarDecl 0x1815e1efca8 <col:49, col:57> col:57 invalid eckey 'int *'
|-FunctionDecl 0x1815e1f0330 <line:629:1, line:630:47> line:629:5 X25519 'int (uint8_t *, const uint8_t *, const uint8_t *)'
| |-ParmVarDecl 0x1815e1eff80 <col:12, col:37> col:20 out_shared_key 'uint8_t *':'uint8_t *'
| |-ParmVarDecl 0x1815e1f00f0 <col:40, col:68> col:54 private_key 'const uint8_t *':'const uint8_t *'
| `-ParmVarDecl 0x1815e1f01b8 <line:630:12, col:46> col:26 peer_public_value 'const uint8_t *':'const uint8_t *'
|-FunctionDecl 0x1815e1f0668 <line:631:1, line:632:62> line:631:6 X25519_public_from_private 'void (uint8_t *, const uint8_t *)'
| |-ParmVarDecl 0x1815e1f0460 <col:33, col:60> col:41 out_public_value 'uint8_t *':'uint8_t *'
| `-ParmVarDecl 0x1815e1f0528 <line:632:33, col:61> col:47 private_key 'const uint8_t *':'const uint8_t *'
|-FunctionDecl 0x1815e1f08f0 <line:634:1, col:79> col:5 invalid ec_point_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x1815e1f0748 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1815e1f07c8 <col:55, col:65> col:65 invalid p 'int *'
| `-ParmVarDecl 0x1815e1f0848 <col:68, col:76> col:76 invalid ctx 'int *'
|-TypedefDecl 0x1815e1f09b8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:51:1, col:17> col:17 referenced u8 'uint8_t':'unsigned char'
| `-TypedefType 0x1815e1efe20 'uint8_t' sugar
|   |-Typedef 0x1815e0beb10 'uint8_t'
|   `-BuiltinType 0x1815c4ceb50 'unsigned char'
|-TypedefDecl 0x1815e1f0a40 <line:52:1, col:18> col:18 referenced u64 'uint64_t':'unsigned long long'
| `-TypedefType 0x1815e1f0a10 'uint64_t' sugar
|   |-Typedef 0x1815e0bec60 'uint64_t'
|   `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-TypedefDecl 0x1815e1f0ad8 <line:74:1, col:18> col:18 referenced limb 'uint64_t':'unsigned long long'
| `-TypedefType 0x1815e1f0a10 'uint64_t' sugar
|   |-Typedef 0x1815e0bec60 'uint64_t'
|   `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-TypedefDecl 0x1815e1f0b48 <line:75:1, col:19> col:19 referenced invalid widelimb 'int'
| `-BuiltinType 0x1815c4ceaf0 'int'
|-TypedefDecl 0x1815e1f0c98 <line:77:1, col:21> col:14 referenced felem 'limb [4]'
| `-ConstantArrayType 0x1815e1f0c40 'limb [4]' 4 
|   `-TypedefType 0x1815e1f0ba0 'limb' sugar
|     |-Typedef 0x1815e1f0ad8 'limb'
|     `-TypedefType 0x1815e1f0a10 'uint64_t' sugar
|       |-Typedef 0x1815e0bec60 'uint64_t'
|       `-BuiltinType 0x1815c4cebd0 'unsigned long long'
|-TypedefDecl 0x1815e1f0de8 <line:78:1, col:29> col:18 referenced widefelem 'widelimb [7]'
| `-ConstantArrayType 0x1815e1f0d90 'widelimb [7]' 7 
|   `-TypedefType 0x1815e1f0cf0 'widelimb' sugar
|     |-Typedef 0x1815e1f0b48 'widelimb'
|     `-BuiltinType 0x1815c4ceaf0 'int'
|-TypedefDecl 0x1815e1f0f38 <line:85:1, col:30> col:12 referenced felem_bytearray 'u8 [28]'
| `-ConstantArrayType 0x1815e1f0ee0 'u8 [28]' 28 
|   `-TypedefType 0x1815e1f0e40 'u8' sugar
|     |-Typedef 0x1815e1f09b8 'u8'
|     `-TypedefType 0x1815e1efe20 'uint8_t' sugar
|       |-Typedef 0x1815e0beb10 'uint8_t'
|       `-BuiltinType 0x1815c4ceb50 'unsigned char'
|-VarDecl 0x1815e1f10c8 <line:87:1, line:103:1> line:87:30 used nistp224_curve_params 'const felem_bytearray [5]' static cinit
| `-InitListExpr 0x1815e1f2db8 <col:57, line:103:1> 'const felem_bytearray [5]'
|   |-InitListExpr 0x1815e1f2e30 <line:88:5, line:90:52> 'const felem_bytearray':'u8 const[28]'
|   | |-ImplicitCastExpr 0x1815e1f2f50 <line:88:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1130 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1815e1f2f68 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1158 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1815e1f2f80 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1180 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1815e1f2f98 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f11a8 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1815e1f2fb0 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f11d0 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1815e1f2fc8 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f11f8 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1815e1f2fe0 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1220 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x1815e1f2ff8 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1248 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x1815e1f3010 <col:54> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1270 <col:54> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fb980 <col:60> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1298 <col:60> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fb998 <line:89:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f12c0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fb9b0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f12e8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fb9c8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1310 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fb9e0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1338 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fb9f8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1360 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fba10 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1388 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fba28 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f13b0 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x1815e0fba40 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f13d8 <col:48> 'int' 0
|   | |-ImplicitCastExpr 0x1815e0fba58 <col:54> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1400 <col:54> 'int' 0
|   | |-ImplicitCastExpr 0x1815e0fba70 <col:60> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1428 <col:60> 'int' 0
|   | |-ImplicitCastExpr 0x1815e0fba88 <line:90:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1450 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x1815e0fbaa0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1478 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x1815e0fbab8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f14a0 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x1815e0fbad0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f14c8 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x1815e0fbae8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f14f0 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x1815e0fbb00 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1518 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x1815e0fbb18 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1540 <col:42> 'int' 0
|   | `-ImplicitCastExpr 0x1815e0fbb30 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1815e1f1568 <col:48> 'int' 1
|   |-InitListExpr 0x1815e0fbb58 <line:91:5, line:93:52> 'const felem_bytearray':'u8 const[28]'
|   | |-ImplicitCastExpr 0x1815e0fbc78 <line:91:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f16b0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbc90 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f16d8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbca8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1700 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbcc0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1728 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbcd8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1750 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbcf0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1778 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbd08 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f17a0 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbd20 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f17c8 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbd38 <col:54> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f17f0 <col:54> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbd50 <col:60> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1818 <col:60> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbd68 <line:92:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1840 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbd80 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1868 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbd98 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1890 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbdb0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f18b8 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbdc8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f18e0 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbde0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1908 <col:36> 'int' 254
|   | |-ImplicitCastExpr 0x1815e0fbdf8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1930 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbe10 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1958 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbe28 <col:54> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1980 <col:54> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbe40 <col:60> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f19a8 <col:60> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbe58 <line:93:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f19d0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbe70 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f19f8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbe88 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1a20 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbea0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1a48 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbeb8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1a70 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbed0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1a98 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x1815e0fbee8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1ac0 <col:42> 'int' 255
|   | `-ImplicitCastExpr 0x1815e0fbf00 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1815e1f1ae8 <col:48> 'int' 254
|   |-InitListExpr 0x1815e0fbf28 <line:94:5, line:96:52> 'const felem_bytearray':'u8 const[28]'
|   | |-ImplicitCastExpr 0x1815e0fc048 <line:94:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1c30 <col:6> 'int' 180
|   | |-ImplicitCastExpr 0x1815e0fc060 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1c58 <col:12> 'int' 5
|   | |-ImplicitCastExpr 0x1815e0fc078 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1c80 <col:18> 'int' 10
|   | |-ImplicitCastExpr 0x1815e0fc090 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1ca8 <col:24> 'int' 133
|   | |-ImplicitCastExpr 0x1815e0fc0a8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1cd0 <col:30> 'int' 12
|   | |-ImplicitCastExpr 0x1815e0fc0c0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1cf8 <col:36> 'int' 4
|   | |-ImplicitCastExpr 0x1815e0fc0d8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1d20 <col:42> 'int' 179
|   | |-ImplicitCastExpr 0x1815e0fc0f0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1d48 <col:48> 'int' 171
|   | |-ImplicitCastExpr 0x1815e0fc108 <col:54> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1d70 <col:54> 'int' 245
|   | |-ImplicitCastExpr 0x1815e0fc120 <col:60> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1d98 <col:60> 'int' 65
|   | |-ImplicitCastExpr 0x1815e0fc138 <line:95:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1dc0 <col:6> 'int' 50
|   | |-ImplicitCastExpr 0x1815e0fc150 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1de8 <col:12> 'int' 86
|   | |-ImplicitCastExpr 0x1815e0fc168 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1e10 <col:18> 'int' 80
|   | |-ImplicitCastExpr 0x1815e0fc180 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1e38 <col:24> 'int' 68
|   | |-ImplicitCastExpr 0x1815e0fc198 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1e60 <col:30> 'int' 176
|   | |-ImplicitCastExpr 0x1815e0fc1b0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1e88 <col:36> 'int' 183
|   | |-ImplicitCastExpr 0x1815e0fc1c8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1eb0 <col:42> 'int' 215
|   | |-ImplicitCastExpr 0x1815e0fc1e0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1ed8 <col:48> 'int' 191
|   | |-ImplicitCastExpr 0x1815e0fc1f8 <col:54> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1f00 <col:54> 'int' 216
|   | |-ImplicitCastExpr 0x1815e0fc210 <col:60> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1f28 <col:60> 'int' 186
|   | |-ImplicitCastExpr 0x1815e0fc228 <line:96:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1f50 <col:6> 'int' 39
|   | |-ImplicitCastExpr 0x1815e0fc240 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1f78 <col:12> 'int' 11
|   | |-ImplicitCastExpr 0x1815e0fc258 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1fa0 <col:18> 'int' 57
|   | |-ImplicitCastExpr 0x1815e0fc270 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1fc8 <col:24> 'int' 67
|   | |-ImplicitCastExpr 0x1815e0fc288 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f1ff0 <col:30> 'int' 35
|   | |-ImplicitCastExpr 0x1815e0fc2a0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2018 <col:36> 'int' 85
|   | |-ImplicitCastExpr 0x1815e0fc2b8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2040 <col:42> 'int' 255
|   | `-ImplicitCastExpr 0x1815e0fc2d0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1815e1f2068 <col:48> 'int' 180
|   |-InitListExpr 0x1815e0fc2f8 <line:97:5, line:99:52> 'const felem_bytearray':'u8 const[28]'
|   | |-ImplicitCastExpr 0x1815e0fc418 <line:97:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f21b0 <col:6> 'int' 183
|   | |-ImplicitCastExpr 0x1815e0fc430 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f21d8 <col:12> 'int' 14
|   | |-ImplicitCastExpr 0x1815e0fc448 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2200 <col:18> 'int' 12
|   | |-ImplicitCastExpr 0x1815e0fc460 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2228 <col:24> 'int' 189
|   | |-ImplicitCastExpr 0x1815e0fc478 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2250 <col:30> 'int' 107
|   | |-ImplicitCastExpr 0x1815e0fc490 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2278 <col:36> 'int' 180
|   | |-ImplicitCastExpr 0x1815e0fc4a8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f22a0 <col:42> 'int' 191
|   | |-ImplicitCastExpr 0x1815e0fc4c0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f22c8 <col:48> 'int' 127
|   | |-ImplicitCastExpr 0x1815e0fc4d8 <col:54> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f22f0 <col:54> 'int' 50
|   | |-ImplicitCastExpr 0x1815e0fc4f0 <col:60> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2318 <col:60> 'int' 19
|   | |-ImplicitCastExpr 0x1815e0fc508 <line:98:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2340 <col:6> 'int' 144
|   | |-ImplicitCastExpr 0x1815e0fc520 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2368 <col:12> 'int' 185
|   | |-ImplicitCastExpr 0x1815e0fc538 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2390 <col:18> 'int' 74
|   | |-ImplicitCastExpr 0x1815e0fc550 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f23b8 <col:24> 'int' 3
|   | |-ImplicitCastExpr 0x1815e0fc568 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f23e0 <col:30> 'int' 193
|   | |-ImplicitCastExpr 0x1815e0fc580 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2408 <col:36> 'int' 211
|   | |-ImplicitCastExpr 0x1815e0fc598 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2430 <col:42> 'int' 86
|   | |-ImplicitCastExpr 0x1815e0fc5b0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2458 <col:48> 'int' 194
|   | |-ImplicitCastExpr 0x1815e0fc5c8 <col:54> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2480 <col:54> 'int' 17
|   | |-ImplicitCastExpr 0x1815e0fc5e0 <col:60> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f24a8 <col:60> 'int' 34
|   | |-ImplicitCastExpr 0x1815e0fc5f8 <line:99:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f24d0 <col:6> 'int' 52
|   | |-ImplicitCastExpr 0x1815e0fc610 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f24f8 <col:12> 'int' 50
|   | |-ImplicitCastExpr 0x1815e0fc628 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2520 <col:18> 'int' 128
|   | |-ImplicitCastExpr 0x1815e0fc640 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2548 <col:24> 'int' 214
|   | |-ImplicitCastExpr 0x1815e0fc658 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2570 <col:30> 'int' 17
|   | |-ImplicitCastExpr 0x1815e0fc670 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f2598 <col:36> 'int' 92
|   | |-ImplicitCastExpr 0x1815e0fc688 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e1f25c0 <col:42> 'int' 29
|   | `-ImplicitCastExpr 0x1815e0fc6a0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1815e1f25e8 <col:48> 'int' 33
|   `-InitListExpr 0x1815e0fc6c8 <line:100:5, line:102:52> 'const felem_bytearray':'u8 const[28]'
|     |-ImplicitCastExpr 0x1815e0fc7e8 <line:100:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2730 <col:6> 'int' 189
|     |-ImplicitCastExpr 0x1815e0fc800 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2758 <col:12> 'int' 55
|     |-ImplicitCastExpr 0x1815e0fc818 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2780 <col:18> 'int' 99
|     |-ImplicitCastExpr 0x1815e0fc830 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f27a8 <col:24> 'int' 136
|     |-ImplicitCastExpr 0x1815e0fc848 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f27d0 <col:30> 'int' 181
|     |-ImplicitCastExpr 0x1815e0fc860 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f27f8 <col:36> 'int' 247
|     |-ImplicitCastExpr 0x1815e0fc878 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2820 <col:42> 'int' 35
|     |-ImplicitCastExpr 0x1815e0fc890 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2848 <col:48> 'int' 251
|     |-ImplicitCastExpr 0x1815e0fc8a8 <col:54> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2870 <col:54> 'int' 76
|     |-ImplicitCastExpr 0x1815e0fc8c0 <col:60> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2898 <col:60> 'int' 34
|     |-ImplicitCastExpr 0x1815e0fc8d8 <line:101:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f28c0 <col:6> 'int' 223
|     |-ImplicitCastExpr 0x1815e0fc8f0 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f28e8 <col:12> 'int' 230
|     |-ImplicitCastExpr 0x1815e0fc908 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2910 <col:18> 'int' 205
|     |-ImplicitCastExpr 0x1815e0fc920 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2938 <col:24> 'int' 67
|     |-ImplicitCastExpr 0x1815e0fc938 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2960 <col:30> 'int' 117
|     |-ImplicitCastExpr 0x1815e0fc950 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2988 <col:36> 'int' 160
|     |-ImplicitCastExpr 0x1815e0fc968 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f29b0 <col:42> 'int' 90
|     |-ImplicitCastExpr 0x1815e0fc980 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f29d8 <col:48> 'int' 7
|     |-ImplicitCastExpr 0x1815e0fc998 <col:54> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2a00 <col:54> 'int' 71
|     |-ImplicitCastExpr 0x1815e0fc9b0 <col:60> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2a28 <col:60> 'int' 100
|     |-ImplicitCastExpr 0x1815e0fc9c8 <line:102:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2a50 <col:6> 'int' 68
|     |-ImplicitCastExpr 0x1815e0fc9e0 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2a78 <col:12> 'int' 213
|     |-ImplicitCastExpr 0x1815e0fc9f8 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2aa0 <col:18> 'int' 129
|     |-ImplicitCastExpr 0x1815e0fca10 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2ac8 <col:24> 'int' 153
|     |-ImplicitCastExpr 0x1815e0fca28 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2af0 <col:30> 'int' 133
|     |-ImplicitCastExpr 0x1815e0fca40 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2b18 <col:36> 'int' 0
|     |-ImplicitCastExpr 0x1815e0fca58 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x1815e1f2b40 <col:42> 'int' 126
|     `-ImplicitCastExpr 0x1815e0fca70 <col:48> 'u8':'unsigned char' <IntegralCast>
|       `-IntegerLiteral 0x1815e1f2b68 <col:48> 'int' 52
|-VarDecl 0x1815e0fcd18 <line:136:1, line:233:1> line:136:20 used gmul 'const felem [2][16][3]' static cinit
| `-InitListExpr 0x1815e104128 <col:37, line:233:1> 'const felem [2][16][3]'
|   |-InitListExpr 0x1815e104478 <line:137:1, line:184:16> 'const felem [16][3]'
|   | |-InitListExpr 0x1815e104568 <line:137:2, line:139:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e1045d0 <line:137:3, col:14> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e104630 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fcd80 <col:4> 'int' 0
|   | | | |-ImplicitCastExpr 0x1815e104648 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fcda8 <col:7> 'int' 0
|   | | | |-ImplicitCastExpr 0x1815e104660 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fcdd0 <col:10> 'int' 0
|   | | | `-ImplicitCastExpr 0x1815e104678 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fcdf8 <col:13> 'int' 0
|   | | |-InitListExpr 0x1815e1046a0 <line:138:3, col:14> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e104700 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fce80 <col:4> 'int' 0
|   | | | |-ImplicitCastExpr 0x1815e104718 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fcea8 <col:7> 'int' 0
|   | | | |-ImplicitCastExpr 0x1815e104730 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fced0 <col:10> 'int' 0
|   | | | `-ImplicitCastExpr 0x1815e104748 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fcef8 <col:13> 'int' 0
|   | | `-InitListExpr 0x1815e104770 <line:139:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e1047d0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fcf80 <col:4> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e1047e8 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fcfa8 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e104800 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fcfd0 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e104818 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0fcff8 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e104860 <line:140:2, line:142:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e1048c8 <line:140:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e104928 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd0d8 <col:4> 'long long' 14215405738138913
|   | | | |-ImplicitCastExpr 0x1815e104940 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd100 <col:22> 'long long' 54557040081707572
|   | | | |-ImplicitCastExpr 0x1815e104958 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd128 <col:40> 'long long' 35802381656082947
|   | | | `-ImplicitCastExpr 0x1815e104970 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fd150 <col:58> 'long long' 51525368618398911
|   | | |-InitListExpr 0x1815e104998 <line:141:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1049f8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd1d8 <col:4> 'long long' 60096666400751156
|   | | | |-ImplicitCastExpr 0x1815e104a10 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd200 <col:22> 'long long' 33108880804766788
|   | | | |-ImplicitCastExpr 0x1815e104a28 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd228 <col:40> 'long long' 70733931823418691
|   | | | `-ImplicitCastExpr 0x1815e104a40 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fd250 <col:58> 'long long' 53259671233230627
|   | | `-InitListExpr 0x1815e104a68 <line:142:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e104ac8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fd2d8 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e104ae0 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fd300 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e104af8 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fd328 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e104b10 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0fd350 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e104b58 <line:143:2, line:145:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e104bc0 <line:143:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e104c20 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd430 <col:4> 'long long' 71378600081669097
|   | | | |-ImplicitCastExpr 0x1815e104c38 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd458 <col:22> 'long long' 53101353446198878
|   | | | |-ImplicitCastExpr 0x1815e104c50 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd480 <col:40> 'long long' 9643677127944771
|   | | | `-ImplicitCastExpr 0x1815e104c68 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fd4a8 <col:58> 'long long' 8806794754890693
|   | | |-InitListExpr 0x1815e104c90 <line:144:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e104cf0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd530 <col:4> 'long long' 11787557387672643
|   | | | |-ImplicitCastExpr 0x1815e104d08 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd558 <col:22> 'long long' 66683595736409698
|   | | | |-ImplicitCastExpr 0x1815e104d20 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd580 <col:40> 'long long' 62071344511258832
|   | | | `-ImplicitCastExpr 0x1815e104d38 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fd5a8 <col:58> 'long long' 42804938177827617
|   | | `-InitListExpr 0x1815e104d60 <line:145:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e104dc0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fd630 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e104dd8 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fd658 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e104df0 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fd680 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e104e08 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0fd6a8 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e104e50 <line:146:2, line:148:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e104eb8 <line:146:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e104f18 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd788 <col:4> 'long long' 30749386935733944
|   | | | |-ImplicitCastExpr 0x1815e104f30 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd7b0 <col:22> 'long long' 24100114246361841
|   | | | |-ImplicitCastExpr 0x1815e104f48 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd7d8 <col:40> 'long long' 6449338927450687
|   | | | `-ImplicitCastExpr 0x1815e104f60 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fd800 <col:58> 'long long' 67233816825210696
|   | | |-InitListExpr 0x1815e104f88 <line:147:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e104fe8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd888 <col:4> 'long long' 68010914192828013
|   | | | |-ImplicitCastExpr 0x1815e105000 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd8b0 <col:22> 'long long' 48399079136688607
|   | | | |-ImplicitCastExpr 0x1815e105018 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fd8d8 <col:40> 'long long' 13854281485496300
|   | | | `-ImplicitCastExpr 0x1815e105030 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fd900 <col:58> 'long long' 26093033259862551
|   | | `-InitListExpr 0x1815e105058 <line:148:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e1050b8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fd9b0 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e1050d0 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fd9d8 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e1050e8 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fda00 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e105100 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0fda28 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e105148 <line:149:2, line:151:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e1051b0 <line:149:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e105210 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fdb08 <col:4> 'long long' 1760964184319715
|   | | | |-ImplicitCastExpr 0x1815e105228 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fdb30 <col:22> 'long long' 41090027584401568
|   | | | |-ImplicitCastExpr 0x1815e105240 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fdb58 <col:40> 'long long' 67532174447950347
|   | | | `-ImplicitCastExpr 0x1815e105258 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fdb80 <col:58> 'long long' 1294857651850942
|   | | |-InitListExpr 0x1815e105280 <line:150:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1052e0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fdc08 <col:4> 'long long' 32950441342316381
|   | | | |-ImplicitCastExpr 0x1815e1052f8 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fdc30 <col:22> 'long long' 37393468670956624
|   | | | |-ImplicitCastExpr 0x1815e105310 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fdc58 <col:40> 'long long' 36547193909475078
|   | | | `-ImplicitCastExpr 0x1815e105328 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fdc80 <col:58> 'long long' 29580121932532827
|   | | `-InitListExpr 0x1815e105350 <line:151:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e1053b0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fdd08 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e1053c8 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fdd30 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e1053e0 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fdd58 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e1053f8 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0fdd80 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e105440 <line:152:2, line:154:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e1054a8 <line:152:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e105508 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fde60 <col:4> 'long long' 66029711509099974
|   | | | |-ImplicitCastExpr 0x1815e105520 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fde88 <col:22> 'long long' 2357355352064724
|   | | | |-ImplicitCastExpr 0x1815e105538 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fdeb0 <col:40> 'long long' 62261198381500593
|   | | | `-ImplicitCastExpr 0x1815e105550 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fded8 <col:58> 'long long' 41424473139086755
|   | | |-InitListExpr 0x1815e105578 <line:153:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1055d8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fdf60 <col:4> 'long long' 44747090636954559
|   | | | |-ImplicitCastExpr 0x1815e1055f0 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fdf88 <col:22> 'long long' 18408407550890224
|   | | | |-ImplicitCastExpr 0x1815e105608 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fdfb0 <col:40> 'long long' 71473164347156647
|   | | | `-ImplicitCastExpr 0x1815e105620 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fdfd8 <col:58> 'long long' 23149671595181610
|   | | `-InitListExpr 0x1815e105648 <line:154:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e1056a8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fe060 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e1056c0 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fe088 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e1056d8 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fe0b0 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e1056f0 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0fe0d8 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e105738 <line:155:2, line:157:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e1057a0 <line:155:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e105800 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe1b8 <col:4> 'long long' 36644373851745395
|   | | | |-ImplicitCastExpr 0x1815e105818 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe1e0 <col:22> 'long long' 45067346634300687
|   | | | |-ImplicitCastExpr 0x1815e105830 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe208 <col:40> 'long long' 15269155078675364
|   | | | `-ImplicitCastExpr 0x1815e105848 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fe230 <col:58> 'long long' 55047824290902620
|   | | |-InitListExpr 0x1815e105870 <line:156:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1058d0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe2b8 <col:4> 'long long' 52870985989664036
|   | | | |-ImplicitCastExpr 0x1815e1058e8 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe2e0 <col:22> 'long long' 62482831525149420
|   | | | |-ImplicitCastExpr 0x1815e105900 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe308 <col:40> 'long long' 55050187086899839
|   | | | `-ImplicitCastExpr 0x1815e105918 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fe330 <col:58> 'long long' 8720744547476036
|   | | `-InitListExpr 0x1815e105940 <line:157:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e1059a0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fe3b8 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e1059d0 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fe3e0 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e1059e8 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fe408 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e105a00 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0fe430 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e105a48 <line:158:2, line:160:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e105ab0 <line:158:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e105b10 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe510 <col:4> 'long long' 21566442933681569
|   | | | |-ImplicitCastExpr 0x1815e105b28 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe538 <col:22> 'long long' 58858973370079675
|   | | | |-ImplicitCastExpr 0x1815e105b40 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe560 <col:40> 'long long' 71931372512054140
|   | | | `-ImplicitCastExpr 0x1815e105b58 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fe588 <col:58> 'long long' 10714412583876681
|   | | |-InitListExpr 0x1815e105b80 <line:159:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e105be0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe610 <col:4> 'long long' 19370324697435552
|   | | | |-ImplicitCastExpr 0x1815e105bf8 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe638 <col:22> 'long long' 57908507923887355
|   | | | |-ImplicitCastExpr 0x1815e105c10 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe660 <col:40> 'long long' 42340026435320969
|   | | | `-ImplicitCastExpr 0x1815e105c28 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fe688 <col:58> 'long long' 71608876929167634
|   | | `-InitListExpr 0x1815e105c50 <line:160:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e105cb0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fe710 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e105cc8 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fe738 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e105ce0 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fe760 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e105cf8 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0fe788 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e105d40 <line:161:2, line:163:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e105da8 <line:161:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e105e08 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe868 <col:4> 'long long' 63768024459850029
|   | | | |-ImplicitCastExpr 0x1815e105e20 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe890 <col:22> 'long long' 56043627304934510
|   | | | |-ImplicitCastExpr 0x1815e105e38 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe8b8 <col:40> 'long long' 34260102009486412
|   | | | `-ImplicitCastExpr 0x1815e105e50 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fe8e0 <col:58> 'long long' 1626393528605511
|   | | |-InitListExpr 0x1815e105e78 <line:162:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e105ed8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe968 <col:4> 'long long' 44894586669579834
|   | | | |-ImplicitCastExpr 0x1815e105ef0 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe990 <col:22> 'long long' 6862401668738010
|   | | | |-ImplicitCastExpr 0x1815e105f08 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fe9b8 <col:40> 'long long' 28182317526089046
|   | | | `-ImplicitCastExpr 0x1815e105f20 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fe9e0 <col:58> 'long long' 32234762541237140
|   | | `-InitListExpr 0x1815e105f48 <line:163:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e105fa8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fea68 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e105fc0 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fea90 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e105fd8 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0feab8 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e105ff0 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0feae0 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e106038 <line:164:2, line:166:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e1060a0 <line:164:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e106100 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0febc0 <col:4> 'long long' 1241452496952329
|   | | | |-ImplicitCastExpr 0x1815e106118 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0febe8 <col:22> 'long long' 32837518891159477
|   | | | |-ImplicitCastExpr 0x1815e106130 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fec10 <col:40> 'long long' 51964745771230176
|   | | | `-ImplicitCastExpr 0x1815e106148 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fec38 <col:58> 'long long' 18517456905243677
|   | | |-InitListExpr 0x1815e106170 <line:165:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1061d0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fecc0 <col:4> 'long long' 64715081076890241
|   | | | |-ImplicitCastExpr 0x1815e1061e8 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fece8 <col:22> 'long long' 17397160098818133
|   | | | |-ImplicitCastExpr 0x1815e106200 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fed10 <col:40> 'long long' 8160769644386790
|   | | | `-ImplicitCastExpr 0x1815e106218 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fed38 <col:58> 'long long' 4044017734465703
|   | | `-InitListExpr 0x1815e106240 <line:166:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e1062a0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fedc0 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e1062b8 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fede8 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e1062d0 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0fee10 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e1062e8 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0fee38 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e106330 <line:167:2, line:169:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e106398 <line:167:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1063f8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fef18 <col:4> 'long long' 61557443266865279
|   | | | |-ImplicitCastExpr 0x1815e106410 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fef40 <col:22> 'long long' 19193158631805686
|   | | | |-ImplicitCastExpr 0x1815e106428 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0fef68 <col:40> 'long long' 63114965174238904
|   | | | `-ImplicitCastExpr 0x1815e106440 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0fef90 <col:58> 'long long' 57153014074658596
|   | | |-InitListExpr 0x1815e106468 <line:168:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1064c8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff018 <col:4> 'long long' 33295952022928805
|   | | | |-ImplicitCastExpr 0x1815e1064e0 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff040 <col:22> 'long long' 6856166956736580
|   | | | |-ImplicitCastExpr 0x1815e1064f8 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff068 <col:40> 'long long' 41238105016811088
|   | | | `-ImplicitCastExpr 0x1815e106510 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0ff090 <col:58> 'long long' 55172608173881473
|   | | `-InitListExpr 0x1815e106538 <line:169:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e106598 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ff118 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e1065b0 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ff140 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e1065c8 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ff168 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e1065e0 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0ff190 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e106628 <line:170:2, line:172:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e106690 <line:170:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1066f0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff270 <col:4> 'long long' 51955431143051104
|   | | | |-ImplicitCastExpr 0x1815e106708 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff298 <col:22> 'long long' 48951545393908131
|   | | | |-ImplicitCastExpr 0x1815e106720 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff2c0 <col:40> 'long long' 7332110390559962
|   | | | `-ImplicitCastExpr 0x1815e106738 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0ff2e8 <col:58> 'long long' 6585796058786180
|   | | |-InitListExpr 0x1815e106760 <line:171:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1067c0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff370 <col:4> 'long long' 33542384203444382
|   | | | |-ImplicitCastExpr 0x1815e1067d8 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff398 <col:22> 'long long' 10058797968965999
|   | | | |-ImplicitCastExpr 0x1815e1067f0 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff3c0 <col:40> 'long long' 21426027006873135
|   | | | `-ImplicitCastExpr 0x1815e106808 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0ff3e8 <col:58> 'long long' 63791559461639017
|   | | `-InitListExpr 0x1815e106830 <line:172:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e106890 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ff470 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e1068a8 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ff498 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e1068c0 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ff4c0 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e1068d8 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0ff4e8 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e106920 <line:173:2, line:175:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e106988 <line:173:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1069e8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff5c8 <col:4> 'long long' 24521654599544755
|   | | | |-ImplicitCastExpr 0x1815e106a00 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff5f0 <col:22> 'long long' 48950835715048786
|   | | | |-ImplicitCastExpr 0x1815e106a18 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff618 <col:40> 'long long' 56486885804635390
|   | | | `-ImplicitCastExpr 0x1815e106a30 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0ff640 <col:58> 'long long' 30538161968627171
|   | | |-InitListExpr 0x1815e106a58 <line:174:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e106ab8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff6c8 <col:4> 'long long' 71951289672484434
|   | | | |-ImplicitCastExpr 0x1815e106ad0 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff6f0 <col:22> 'long long' 50802807143032121
|   | | | |-ImplicitCastExpr 0x1815e106ae8 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff718 <col:40> 'long long' 45762139208909556
|   | | | `-ImplicitCastExpr 0x1815e106b00 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0ff740 <col:58> 'long long' 11379042128140896
|   | | `-InitListExpr 0x1815e106b28 <line:175:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e106b88 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ff7c8 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e106ba0 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ff7f0 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e106bb8 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ff818 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e106bd0 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0ff840 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e106c18 <line:176:2, line:178:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e106c80 <line:176:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e106ce0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff920 <col:4> 'long long' 18220922147849391
|   | | | |-ImplicitCastExpr 0x1815e106cf8 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff948 <col:22> 'long long' 2697206093288044
|   | | | |-ImplicitCastExpr 0x1815e106d10 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ff9a0 <col:40> 'long long' 53180879631546064
|   | | | `-ImplicitCastExpr 0x1815e106d28 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0ff9c8 <col:58> 'long long' 9383343528083543
|   | | |-InitListExpr 0x1815e106d50 <line:177:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e106db0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ffa50 <col:4> 'long long' 39346355303216222
|   | | | |-ImplicitCastExpr 0x1815e106dc8 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ffa78 <col:22> 'long long' 67866619231686511
|   | | | |-ImplicitCastExpr 0x1815e106de0 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ffaa0 <col:40> 'long long' 37772318539245749
|   | | | `-ImplicitCastExpr 0x1815e106df8 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0ffac8 <col:58> 'long long' 65271359694450105
|   | | `-InitListExpr 0x1815e106e20 <line:178:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e106e80 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ffb50 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e106e98 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ffb78 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e106eb0 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ffba0 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e106ec8 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0ffbc8 <col:13> 'int' 0
|   | |-InitListExpr 0x1815e106f10 <line:179:2, line:181:15> 'const felem [3]'
|   | | |-InitListExpr 0x1815e106f78 <line:179:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e106fd8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ffca8 <col:4> 'long long' 49944528290716795
|   | | | |-ImplicitCastExpr 0x1815e106ff0 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ffcd0 <col:22> 'long long' 48476314201006552
|   | | | |-ImplicitCastExpr 0x1815e107008 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ffcf8 <col:40> 'long long' 7926935861973702
|   | | | `-ImplicitCastExpr 0x1815e107020 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0ffd20 <col:58> 'long long' 56315968460949481
|   | | |-InitListExpr 0x1815e107048 <line:180:3, col:74> 'const felem':'limb const[4]'
|   | | | |-ImplicitCastExpr 0x1815e1070a8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ffda8 <col:4> 'long long' 11418713148600607
|   | | | |-ImplicitCastExpr 0x1815e1070c0 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ffdd0 <col:22> 'long long' 2383810739544042
|   | | | |-ImplicitCastExpr 0x1815e1070d8 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x1815e0ffdf8 <col:40> 'long long' 69034399404693108
|   | | | `-ImplicitCastExpr 0x1815e1070f0 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1815e0ffe20 <col:58> 'long long' 8489243135795900
|   | | `-InitListExpr 0x1815e107118 <line:181:3, col:14> 'const felem':'limb const[4]'
|   | |   |-ImplicitCastExpr 0x1815e107178 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ffea8 <col:4> 'int' 1
|   | |   |-ImplicitCastExpr 0x1815e107190 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ffed0 <col:7> 'int' 0
|   | |   |-ImplicitCastExpr 0x1815e1071a8 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1815e0ffef8 <col:10> 'int' 0
|   | |   `-ImplicitCastExpr 0x1815e1071c0 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1815e0fff20 <col:13> 'int' 0
|   | `-InitListExpr 0x1815e107208 <line:182:2, line:184:15> 'const felem [3]'
|   |   |-InitListExpr 0x1815e107270 <line:182:3, col:74> 'const felem':'limb const[4]'
|   |   | |-ImplicitCastExpr 0x1815e1072d0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1815e100000 <col:4> 'long long' 44809056590259435
|   |   | |-ImplicitCastExpr 0x1815e1072e8 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1815e100028 <col:22> 'long long' 1914876046564940
|   |   | |-ImplicitCastExpr 0x1815e107300 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1815e100050 <col:40> 'long long' 71801422434380147
|   |   | `-ImplicitCastExpr 0x1815e107318 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1815e100078 <col:58> 'long long' 68027829451324504
|   |   |-InitListExpr 0x1815e107340 <line:183:3, col:74> 'const felem':'limb const[4]'
|   |   | |-ImplicitCastExpr 0x1815e1073a0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1815e100100 <col:4> 'long long' 62240249598010623
|   |   | |-ImplicitCastExpr 0x1815e1073b8 <col:22> 'limb':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1815e100128 <col:22> 'long long' 62677691397309147
|   |   | |-ImplicitCastExpr 0x1815e1073d0 <col:40> 'limb':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x1815e100150 <col:40> 'long long' 32834184294422163
|   |   | `-ImplicitCastExpr 0x1815e1073e8 <col:58> 'limb':'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1815e100178 <col:58> 'long long' 67174968371586392
|   |   `-InitListExpr 0x1815e107410 <line:184:3, col:14> 'const felem':'limb const[4]'
|   |     |-ImplicitCastExpr 0x1815e107470 <col:4> 'limb':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x1815e100200 <col:4> 'int' 1
|   |     |-ImplicitCastExpr 0x1815e107488 <col:7> 'limb':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x1815e100228 <col:7> 'int' 0
|   |     |-ImplicitCastExpr 0x1815e1074a0 <col:10> 'limb':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x1815e100250 <col:10> 'int' 0
|   |     `-ImplicitCastExpr 0x1815e1074b8 <col:13> 'limb':'unsigned long long' <IntegralCast>
|   |       `-IntegerLiteral 0x1815e100278 <col:13> 'int' 0
|   `-InitListExpr 0x1815e1077d0 <line:185:1, line:232:16> 'const felem [16][3]'
|     |-InitListExpr 0x1815e1078c0 <line:185:2, line:187:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e107928 <line:185:3, col:14> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e107988 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100418 <col:4> 'int' 0
|     | | |-ImplicitCastExpr 0x1815e1079a0 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100440 <col:7> 'int' 0
|     | | |-ImplicitCastExpr 0x1815e1079b8 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100468 <col:10> 'int' 0
|     | | `-ImplicitCastExpr 0x1815e1079e0 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e100490 <col:13> 'int' 0
|     | |-InitListExpr 0x1815e107a08 <line:186:3, col:14> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e107a68 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100518 <col:4> 'int' 0
|     | | |-ImplicitCastExpr 0x1815e107a80 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100540 <col:7> 'int' 0
|     | | |-ImplicitCastExpr 0x1815e107a98 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100568 <col:10> 'int' 0
|     | | `-ImplicitCastExpr 0x1815e107ab0 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e100590 <col:13> 'int' 0
|     | `-InitListExpr 0x1815e107ad8 <line:187:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e107b38 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e100618 <col:4> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e107b50 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e100640 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e107b68 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e100668 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e107b80 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e100690 <col:13> 'int' 0
|     |-InitListExpr 0x1815e107bc8 <line:188:2, line:190:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e107c30 <line:188:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e107c90 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100770 <col:4> 'long long' 42332462233023828
|     | | |-ImplicitCastExpr 0x1815e107ca8 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100798 <col:22> 'long long' 42243062983880493
|     | | |-ImplicitCastExpr 0x1815e107cc0 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1007c0 <col:40> 'long long' 58027427525010455
|     | | `-ImplicitCastExpr 0x1815e107cd8 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e1007e8 <col:58> 'long long' 59490963410320433
|     | |-InitListExpr 0x1815e107d00 <line:189:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e107d60 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100870 <col:4> 'long long' 37661422047375710
|     | | |-ImplicitCastExpr 0x1815e107d78 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100898 <col:22> 'long long' 9350132935584427
|     | | |-ImplicitCastExpr 0x1815e107d90 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1008c0 <col:40> 'long long' 45389832818299846
|     | | `-ImplicitCastExpr 0x1815e107da8 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e1008e8 <col:58> 'long long' 15017233711959853
|     | `-InitListExpr 0x1815e107dd0 <line:190:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e107e30 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e100970 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e107e48 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e100998 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e107e60 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1009c0 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e107e78 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e1009e8 <col:13> 'int' 0
|     |-InitListExpr 0x1815e107ec0 <line:191:2, line:193:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e107f28 <line:191:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e107f88 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100ac8 <col:4> 'long long' 7398951664410213
|     | | |-ImplicitCastExpr 0x1815e107fa0 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100af0 <col:22> 'long long' 60475672073594172
|     | | |-ImplicitCastExpr 0x1815e107fb8 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100b18 <col:40> 'long long' 65189123520720006
|     | | `-ImplicitCastExpr 0x1815e107fd0 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e100b40 <col:58> 'long long' 28643743500374243
|     | |-InitListExpr 0x1815e107ff8 <line:192:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108058 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100bc8 <col:4> 'long long' 70475444581864262
|     | | |-ImplicitCastExpr 0x1815e108070 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100bf0 <col:22> 'long long' 68053533660433071
|     | | |-ImplicitCastExpr 0x1815e108088 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100c18 <col:40> 'long long' 55479242755132331
|     | | `-ImplicitCastExpr 0x1815e1080a0 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e100c40 <col:58> 'long long' 731566529102474
|     | `-InitListExpr 0x1815e1080c8 <line:193:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e108128 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e100cc8 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e108140 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e100cf0 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e108158 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e100d18 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e108170 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e100d40 <col:13> 'int' 0
|     |-InitListExpr 0x1815e1081b8 <line:194:2, line:196:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e108220 <line:194:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108280 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100e20 <col:4> 'long long' 33904912311162351
|     | | |-ImplicitCastExpr 0x1815e108298 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100e48 <col:22> 'long long' 37915670572403972
|     | | |-ImplicitCastExpr 0x1815e1082b0 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100e70 <col:40> 'long long' 61931713228770714
|     | | `-ImplicitCastExpr 0x1815e1082c8 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e100e98 <col:58> 'long long' 59556603249994803
|     | |-InitListExpr 0x1815e1082f0 <line:195:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108350 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100f20 <col:4> 'long long' 12229322042053423
|     | | |-ImplicitCastExpr 0x1815e108368 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100f48 <col:22> 'long long' 53667417733410291
|     | | |-ImplicitCastExpr 0x1815e108380 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e100f70 <col:40> 'long long' 62062863872954880
|     | | `-ImplicitCastExpr 0x1815e108398 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e100f98 <col:58> 'long long' 59213258449723648
|     | `-InitListExpr 0x1815e1083c0 <line:196:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e108420 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101020 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e108438 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101048 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e108450 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101070 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e108468 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e101098 <col:13> 'int' 0
|     |-InitListExpr 0x1815e1084b0 <line:197:2, line:199:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e108518 <line:197:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108578 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101178 <col:4> 'long long' 41174889044835069
|     | | |-ImplicitCastExpr 0x1815e108590 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1011a0 <col:22> 'long long' 48461860850250128
|     | | |-ImplicitCastExpr 0x1815e1085a8 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1011c8 <col:40> 'long long' 40209832863945724
|     | | `-ImplicitCastExpr 0x1815e1085c0 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e1011f0 <col:58> 'long long' 36688508243763925
|     | |-InitListExpr 0x1815e1085e8 <line:198:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108648 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101278 <col:4> 'long long' 39821100915975713
|     | | |-ImplicitCastExpr 0x1815e108660 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1012a0 <col:22> 'long long' 10027667342093709
|     | | |-ImplicitCastExpr 0x1815e108678 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1012c8 <col:40> 'long long' 49411097451828917
|     | | `-ImplicitCastExpr 0x1815e108690 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e1012f0 <col:58> 'long long' 61039442818226922
|     | `-InitListExpr 0x1815e1086b8 <line:199:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e108718 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101378 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e108730 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1013a0 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e108748 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1013c8 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e108760 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e1013f0 <col:13> 'int' 0
|     |-InitListExpr 0x1815e1087a8 <line:200:2, line:202:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e108810 <line:200:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108870 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1014d0 <col:4> 'long long' 33400705216086256
|     | | |-ImplicitCastExpr 0x1815e108888 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1014f8 <col:22> 'long long' 65773690130261649
|     | | |-ImplicitCastExpr 0x1815e1088a0 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101520 <col:40> 'long long' 29591350155084583
|     | | `-ImplicitCastExpr 0x1815e1088b8 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e101548 <col:58> 'long long' 27904408962553022
|     | |-InitListExpr 0x1815e1088e0 <line:201:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108940 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1015d0 <col:4> 'long long' 19878918007644842
|     | | |-ImplicitCastExpr 0x1815e108958 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1015f8 <col:22> 'long long' 39760458290838277
|     | | |-ImplicitCastExpr 0x1815e108970 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101620 <col:40> 'long long' 8882603977681800
|     | | `-ImplicitCastExpr 0x1815e108988 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e101648 <col:58> 'long long' 64454190132739665
|     | `-InitListExpr 0x1815e1089b0 <line:202:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e108a10 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1016d0 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e108a28 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1016f8 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e108a40 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101720 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e108a58 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e101748 <col:13> 'int' 0
|     |-InitListExpr 0x1815e108aa0 <line:203:2, line:205:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e108b08 <line:203:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108b68 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101828 <col:4> 'long long' 36697159835102230
|     | | |-ImplicitCastExpr 0x1815e108b80 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101850 <col:22> 'long long' 575617900413498
|     | | |-ImplicitCastExpr 0x1815e108b98 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101878 <col:40> 'long long' 29339469010895205
|     | | `-ImplicitCastExpr 0x1815e108bb0 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e1018a0 <col:58> 'long long' 5910771084751601
|     | |-InitListExpr 0x1815e108bd8 <line:204:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108c38 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101928 <col:4> 'long long' 14138852356790521
|     | | |-ImplicitCastExpr 0x1815e108c50 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101950 <col:22> 'long long' 20623455015356372
|     | | |-ImplicitCastExpr 0x1815e108c68 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101978 <col:40> 'long long' 54424934377855695
|     | | `-ImplicitCastExpr 0x1815e108c80 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e1019b0 <col:58> 'long long' 3323637626710203
|     | `-InitListExpr 0x1815e108ca8 <line:205:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e108d08 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101a38 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e108d20 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101a60 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e108d38 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101a88 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e108d50 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e101ab0 <col:13> 'int' 0
|     |-InitListExpr 0x1815e108d98 <line:206:2, line:208:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e108e00 <line:206:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108e60 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101b90 <col:4> 'long long' 41284609216738756
|     | | |-ImplicitCastExpr 0x1815e108e78 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101bb8 <col:22> 'long long' 23348383899184552
|     | | |-ImplicitCastExpr 0x1815e108e90 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101be0 <col:40> 'long long' 57208799144709267
|     | | `-ImplicitCastExpr 0x1815e108ea8 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e101c08 <col:58> 'long long' 18021335613985331
|     | |-InitListExpr 0x1815e108ed0 <line:207:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e108f30 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101c90 <col:4> 'long long' 71519866587154834
|     | | |-ImplicitCastExpr 0x1815e108f48 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101cb8 <col:22> 'long long' 331650310714647
|     | | |-ImplicitCastExpr 0x1815e108f60 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101ce0 <col:40> 'long long' 7414810685154214
|     | | `-ImplicitCastExpr 0x1815e108f78 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e101d08 <col:58> 'long long' 1962338185252335
|     | `-InitListExpr 0x1815e108fa0 <line:208:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e109000 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101d90 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e109018 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101db8 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e109030 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e101de0 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e109048 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e101e08 <col:13> 'int' 0
|     |-InitListExpr 0x1815e109090 <line:209:2, line:211:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e1090f8 <line:209:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e109158 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101ee8 <col:4> 'long long' 20952864667040953
|     | | |-ImplicitCastExpr 0x1815e109170 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101f10 <col:22> 'long long' 53105343129885304
|     | | |-ImplicitCastExpr 0x1815e109188 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101f38 <col:40> 'long long' 17663783448724262
|     | | `-ImplicitCastExpr 0x1815e1091a0 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e101f60 <col:58> 'long long' 61941988514011822
|     | |-InitListExpr 0x1815e1091c8 <line:210:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e109228 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e101fe8 <col:4> 'long long' 58374853219681168
|     | | |-ImplicitCastExpr 0x1815e109240 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102010 <col:22> 'long long' 25954017644378996
|     | | |-ImplicitCastExpr 0x1815e109258 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102038 <col:40> 'long long' 43623027367233463
|     | | `-ImplicitCastExpr 0x1815e109270 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e102060 <col:58> 'long long' 42061554624494661
|     | `-InitListExpr 0x1815e109298 <line:211:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e1092f8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1020e8 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e109310 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102110 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e109328 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102138 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e109340 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e102160 <col:13> 'int' 0
|     |-InitListExpr 0x1815e109388 <line:212:2, line:214:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e1093f0 <line:212:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e109450 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102240 <col:4> 'long long' 18866340853038698
|     | | |-ImplicitCastExpr 0x1815e109468 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102268 <col:22> 'long long' 41174294738871394
|     | | |-ImplicitCastExpr 0x1815e109480 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102290 <col:40> 'long long' 69059630486859566
|     | | `-ImplicitCastExpr 0x1815e109498 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e1022b8 <col:58> 'long long' 53229817573778734
|     | |-InitListExpr 0x1815e1094c0 <line:213:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e109520 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102340 <col:4> 'long long' 1229341092743632
|     | | |-ImplicitCastExpr 0x1815e109538 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102368 <col:22> 'long long' 11808623625303923
|     | | |-ImplicitCastExpr 0x1815e109550 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102390 <col:40> 'long long' 32750466386186109
|     | | `-ImplicitCastExpr 0x1815e109568 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e1023b8 <col:58> 'long long' 7063500670951355
|     | `-InitListExpr 0x1815e109590 <line:214:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e1095f0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102440 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e109608 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102468 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e109620 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102490 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e109638 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e1024b8 <col:13> 'int' 0
|     |-InitListExpr 0x1815e109680 <line:215:2, line:217:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e1096e8 <line:215:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e109748 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102598 <col:4> 'long long' 25736141242682233
|     | | |-ImplicitCastExpr 0x1815e109760 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1025c0 <col:22> 'long long' 20639221590945830
|     | | |-ImplicitCastExpr 0x1815e109778 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1025e8 <col:40> 'long long' 63648179904700148
|     | | `-ImplicitCastExpr 0x1815e109790 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e102610 <col:58> 'long long' 55382561624164830
|     | |-InitListExpr 0x1815e1097b8 <line:216:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e109818 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102698 <col:4> 'long long' 13648133609350424
|     | | |-ImplicitCastExpr 0x1815e109830 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1026c0 <col:22> 'long long' 13987049300520376
|     | | |-ImplicitCastExpr 0x1815e109848 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1026e8 <col:40> 'long long' 20241014388399759
|     | | `-ImplicitCastExpr 0x1815e109860 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e102710 <col:58> 'long long' 56125148414327283
|     | `-InitListExpr 0x1815e109888 <line:217:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e1098e8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102798 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e109900 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1027c0 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e109918 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1027e8 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e109930 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e102810 <col:13> 'int' 0
|     |-InitListExpr 0x1815e109978 <line:218:2, line:220:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e1099f0 <line:218:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e109a50 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1028f0 <col:4> 'long long' 16887184962971910
|     | | |-ImplicitCastExpr 0x1815e109a68 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102918 <col:22> 'long long' 20148389049946259
|     | | |-ImplicitCastExpr 0x1815e109a80 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102940 <col:40> 'long long' 62590757308324646
|     | | `-ImplicitCastExpr 0x1815e109a98 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e102968 <col:58> 'long long' 11679895284435717
|     | |-InitListExpr 0x1815e109ac0 <line:219:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e109b20 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1029f0 <col:4> 'long long' 31555794398004138
|     | | |-ImplicitCastExpr 0x1815e109b38 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102a18 <col:22> 'long long' 31652418437296597
|     | | |-ImplicitCastExpr 0x1815e109b50 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102a40 <col:40> 'long long' 5565067883491094
|     | | `-ImplicitCastExpr 0x1815e109b68 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e102a68 <col:58> 'long long' 42948060693069400
|     | `-InitListExpr 0x1815e109b90 <line:220:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e109bf0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102af0 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e109c08 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102b18 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e109c20 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102b40 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e109c38 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e102b68 <col:13> 'int' 0
|     |-InitListExpr 0x1815e109c80 <line:221:2, line:223:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e109ce8 <line:221:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e109d48 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102c48 <col:4> 'long long' 4484933557700496
|     | | |-ImplicitCastExpr 0x1815e109d60 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102c70 <col:22> 'long long' 12797448631115054
|     | | |-ImplicitCastExpr 0x1815e109d78 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102c98 <col:40> 'long long' 41696350946270356
|     | | `-ImplicitCastExpr 0x1815e109d90 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e102cc0 <col:58> 'long long' 52844113124987323
|     | |-InitListExpr 0x1815e109db8 <line:222:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e109e18 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102d48 <col:4> 'long long' 50320894428189032
|     | | |-ImplicitCastExpr 0x1815e109e30 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102d70 <col:22> 'long long' 4608360979303795
|     | | |-ImplicitCastExpr 0x1815e109e48 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102d98 <col:40> 'long long' 45000129293402240
|     | | `-ImplicitCastExpr 0x1815e109e60 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e102dc0 <col:58> 'long long' 34760599269173168
|     | `-InitListExpr 0x1815e109e88 <line:223:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e109ee8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102e48 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e109f00 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102e70 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e109f18 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e102e98 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e109f30 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e102ec0 <col:13> 'int' 0
|     |-InitListExpr 0x1815e109f78 <line:224:2, line:226:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e109fe0 <line:224:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e10a040 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102fa0 <col:4> 'long long' 48724297006178995
|     | | |-ImplicitCastExpr 0x1815e10a058 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102fc8 <col:22> 'long long' 67574095596594845
|     | | |-ImplicitCastExpr 0x1815e10a070 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e102ff0 <col:40> 'long long' 30183651778200389
|     | | `-ImplicitCastExpr 0x1815e10a088 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e103018 <col:58> 'long long' 18251160955299033
|     | |-InitListExpr 0x1815e10a0b0 <line:225:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e10a110 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1030a0 <col:4> 'long long' 38854541824519485
|     | | |-ImplicitCastExpr 0x1815e10a128 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1030c8 <col:22> 'long long' 43405894546881848
|     | | |-ImplicitCastExpr 0x1815e10a140 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1030f0 <col:40> 'long long' 25178753450613532
|     | | `-ImplicitCastExpr 0x1815e10a158 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e103118 <col:58> 'long long' 62159745794163690
|     | `-InitListExpr 0x1815e10a180 <line:226:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e10a1e0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1031a0 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e10a1f8 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1031c8 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e10a210 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1031f0 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e10a228 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e103218 <col:13> 'int' 0
|     |-InitListExpr 0x1815e10a270 <line:227:2, line:229:15> 'const felem [3]'
|     | |-InitListExpr 0x1815e10a2d8 <line:227:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e10a338 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1032f8 <col:4> 'long long' 48681561500723115
|     | | |-ImplicitCastExpr 0x1815e10a350 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e103320 <col:22> 'long long' 21533324478502711
|     | | |-ImplicitCastExpr 0x1815e10a368 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e103348 <col:40> 'long long' 55818039270904196
|     | | `-ImplicitCastExpr 0x1815e10a380 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e103370 <col:58> 'long long' 3040451452578746
|     | |-InitListExpr 0x1815e10a3a8 <line:228:3, col:74> 'const felem':'limb const[4]'
|     | | |-ImplicitCastExpr 0x1815e10a408 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e1033f8 <col:4> 'long long' 30400509585702766
|     | | |-ImplicitCastExpr 0x1815e10a420 <col:22> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e103420 <col:22> 'long long' 71720626911765290
|     | | |-ImplicitCastExpr 0x1815e10a438 <col:40> 'limb':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x1815e103448 <col:40> 'long long' 7308408247352024
|     | | `-ImplicitCastExpr 0x1815e10a450 <col:58> 'limb':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1815e103470 <col:58> 'long long' 1419608241050629
|     | `-InitListExpr 0x1815e10a478 <line:229:3, col:14> 'const felem':'limb const[4]'
|     |   |-ImplicitCastExpr 0x1815e10a4d8 <col:4> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e1034f8 <col:4> 'int' 1
|     |   |-ImplicitCastExpr 0x1815e10a4f0 <col:7> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e103520 <col:7> 'int' 0
|     |   |-ImplicitCastExpr 0x1815e10a508 <col:10> 'limb':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x1815e103548 <col:10> 'int' 0
|     |   `-ImplicitCastExpr 0x1815e10a520 <col:13> 'limb':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x1815e103570 <col:13> 'int' 0
|     `-InitListExpr 0x1815e10a568 <line:230:2, line:232:15> 'const felem [3]'
|       |-InitListExpr 0x1815e10a5d0 <line:230:3, col:74> 'const felem':'limb const[4]'
|       | |-ImplicitCastExpr 0x1815e10a630 <col:4> 'limb':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1815e103650 <col:4> 'long long' 66796554085571222
|       | |-ImplicitCastExpr 0x1815e10a648 <col:22> 'limb':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1815e103678 <col:22> 'long long' 26158445393921034
|       | |-ImplicitCastExpr 0x1815e10a660 <col:40> 'limb':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1815e1036a0 <col:40> 'long long' 33651971713134491
|       | `-ImplicitCastExpr 0x1815e10a678 <col:58> 'limb':'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x1815e1036c8 <col:58> 'long long' 32657111288886622
|       |-InitListExpr 0x1815e10a6a0 <line:231:3, col:74> 'const felem':'limb const[4]'
|       | |-ImplicitCastExpr 0x1815e10a700 <col:4> 'limb':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1815e103750 <col:4> 'long long' 14152348376426694
|       | |-ImplicitCastExpr 0x1815e10a718 <col:22> 'limb':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1815e103778 <col:22> 'long long' 50782694041125259
|       | |-ImplicitCastExpr 0x1815e10a730 <col:40> 'limb':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x1815e1037a0 <col:40> 'long long' 40839628717987281
|       | `-ImplicitCastExpr 0x1815e10a748 <col:58> 'limb':'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x1815e1037c8 <col:58> 'long long' 17443819558305038
|       `-InitListExpr 0x1815e10a770 <line:232:3, col:14> 'const felem':'limb const[4]'
|         |-ImplicitCastExpr 0x1815e10a7d0 <col:4> 'limb':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x1815e103850 <col:4> 'int' 1
|         |-ImplicitCastExpr 0x1815e10a7e8 <col:7> 'limb':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x1815e103878 <col:7> 'int' 0
|         |-ImplicitCastExpr 0x1815e10a800 <col:10> 'limb':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x1815e1038a0 <col:10> 'int' 0
|         `-ImplicitCastExpr 0x1815e10a818 <col:13> 'limb':'unsigned long long' <IntegralCast>
|           `-IntegerLiteral 0x1815e1038c8 <col:13> 'int' 0
|-RecordDecl 0x1815e10a830 prev 0x1815e190830 <line:236:1, line:240:1> line:236:8 invalid struct nistp224_pre_comp_st definition
| |-FieldDecl 0x1815e10aa58 <line:237:5, col:30> col:11 referenced g_pre_comp 'felem [2][16][3]'
| |-FieldDecl 0x1815e10aac8 <line:238:5, col:9> col:9 referenced references 'int'
| `-FieldDecl 0x1815e10ab38 <line:239:5, col:20> col:20 invalid lock 'int *'
|-FunctionDecl 0x1815e10ac60 <line:242:1, line:298:1> line:242:18 invalid EC_GFp_nistp224_method 'const int *(void)'
| `-CompoundStmt 0x1815e10af90 <line:243:1, line:298:1>
|   `-DeclStmt 0x1815e10af78 <line:244:5, line:295:6>
|     `-VarDecl 0x1815e10ad30 <line:244:5, col:28> col:28 invalid ret 'const int' static
|-FunctionDecl 0x1815e10b298 <line:303:1, line:309:1> line:303:13 used bin28_to_felem 'void (limb *, const u8 *)' static
| |-ParmVarDecl 0x1815e10b020 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e10b150 <col:39, col:53> col:48 used in 'const u8 *':'const u8 *'
| `-CompoundStmt 0x1815e10bce8 <line:304:1, line:309:1>
|   |-BinaryOperator 0x1815e10b598 <line:305:5, col:42> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e10b3c0 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e10b3a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e10b360 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10b020 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e10b380 <col:9> 'int' 0
|   | `-BinaryOperator 0x1815e10b578 <col:14, col:42> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1815e10b548 <col:14, col:38> 'uint64_t':'unsigned long long' <LValueToRValue>
|   |   | `-UnaryOperator 0x1815e10b508 <col:14, col:38> 'const uint64_t':'const unsigned long long' lvalue prefix '*' cannot overflow
|   |   |   `-ParenExpr 0x1815e10b4e8 <col:15, col:38> 'const uint64_t *'
|   |   |     `-CStyleCastExpr 0x1815e10b4c0 <col:16, col:37> 'const uint64_t *' <BitCast>
|   |   |       `-ImplicitCastExpr 0x1815e10b4a8 <col:34, col:37> 'const u8 *':'const u8 *' <LValueToRValue> part_of_explicit_cast
|   |   |         `-ParenExpr 0x1815e10b488 <col:34, col:37> 'const u8 *':'const u8 *' lvalue
|   |   |           `-DeclRefExpr 0x1815e10b3e0 <col:35> 'const u8 *':'const u8 *' lvalue ParmVar 0x1815e10b150 'in' 'const u8 *':'const u8 *'
|   |   `-ImplicitCastExpr 0x1815e10b560 <col:42> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1815e10b520 <col:42> 'long long' 72057594037927935
|   |-BinaryOperator 0x1815e10b800 <line:306:5, col:48> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e10b618 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e10b600 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e10b5b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10b020 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e10b5d8 <col:9> 'int' 1
|   | `-BinaryOperator 0x1815e10b7e0 <col:14, col:48> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1815e10b7b0 <col:14, col:44> 'uint64_t':'unsigned long long' <LValueToRValue>
|   |   | `-ParenExpr 0x1815e10b768 <col:14, col:44> 'const uint64_t':'const unsigned long long' lvalue
|   |   |   `-UnaryOperator 0x1815e10b750 <col:15, col:43> 'const uint64_t':'const unsigned long long' lvalue prefix '*' cannot overflow
|   |   |     `-ParenExpr 0x1815e10b730 <col:16, col:43> 'const uint64_t *'
|   |   |       `-CStyleCastExpr 0x1815e10b708 <col:17, col:42> 'const uint64_t *' <BitCast>
|   |   |         `-ParenExpr 0x1815e10b6e8 <col:35, col:42> 'const u8 *':'const u8 *'
|   |   |           `-BinaryOperator 0x1815e10b698 <col:36, col:41> 'const u8 *':'const u8 *' '+'
|   |   |             |-ImplicitCastExpr 0x1815e10b680 <col:36> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |             | `-DeclRefExpr 0x1815e10b638 <col:36> 'const u8 *':'const u8 *' lvalue ParmVar 0x1815e10b150 'in' 'const u8 *':'const u8 *'
|   |   |             `-IntegerLiteral 0x1815e10b658 <col:41> 'int' 7
|   |   `-ImplicitCastExpr 0x1815e10b7c8 <col:48> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1815e10b788 <col:48> 'long long' 72057594037927935
|   |-BinaryOperator 0x1815e10ba78 <line:307:5, col:49> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e10b880 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e10b868 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e10b820 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10b020 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e10b840 <col:9> 'int' 2
|   | `-BinaryOperator 0x1815e10ba58 <col:14, col:49> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x1815e10ba28 <col:14, col:45> 'uint64_t':'unsigned long long' <LValueToRValue>
|   |   | `-ParenExpr 0x1815e10b9d0 <col:14, col:45> 'const uint64_t':'const unsigned long long' lvalue
|   |   |   `-UnaryOperator 0x1815e10b9b8 <col:15, col:44> 'const uint64_t':'const unsigned long long' lvalue prefix '*' cannot overflow
|   |   |     `-ParenExpr 0x1815e10b998 <col:16, col:44> 'const uint64_t *'
|   |   |       `-CStyleCastExpr 0x1815e10b970 <col:17, col:43> 'const uint64_t *' <BitCast>
|   |   |         `-ParenExpr 0x1815e10b950 <col:35, col:43> 'const u8 *':'const u8 *'
|   |   |           `-BinaryOperator 0x1815e10b900 <col:36, col:41> 'const u8 *':'const u8 *' '+'
|   |   |             |-ImplicitCastExpr 0x1815e10b8e8 <col:36> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |             | `-DeclRefExpr 0x1815e10b8a0 <col:36> 'const u8 *':'const u8 *' lvalue ParmVar 0x1815e10b150 'in' 'const u8 *':'const u8 *'
|   |   |             `-IntegerLiteral 0x1815e10b8c0 <col:41> 'int' 14
|   |   `-ImplicitCastExpr 0x1815e10ba40 <col:49> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1815e10ba00 <col:49> 'long long' 72057594037927935
|   `-BinaryOperator 0x1815e10bcc8 <line:308:5, col:48> 'limb':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1815e10baf8 <col:5, col:10> 'limb':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1815e10bae0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e10ba98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10b020 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1815e10bab8 <col:9> 'int' 3
|     `-BinaryOperator 0x1815e10bca8 <col:14, col:48> 'uint64_t':'unsigned long long' '>>'
|       |-ImplicitCastExpr 0x1815e10bc90 <col:14, col:43> 'uint64_t':'unsigned long long' <LValueToRValue>
|       | `-ParenExpr 0x1815e10bc48 <col:14, col:43> 'const uint64_t':'const unsigned long long' lvalue
|       |   `-UnaryOperator 0x1815e10bc30 <col:15, col:42> 'const uint64_t':'const unsigned long long' lvalue prefix '*' cannot overflow
|       |     `-ParenExpr 0x1815e10bc10 <col:16, col:42> 'const uint64_t *'
|       |       `-CStyleCastExpr 0x1815e10bbe8 <col:17, col:41> 'const uint64_t *' <BitCast>
|       |         `-ParenExpr 0x1815e10bbc8 <col:35, col:41> 'const u8 *':'const u8 *'
|       |           `-BinaryOperator 0x1815e10bb78 <col:36, col:39> 'const u8 *':'const u8 *' '+'
|       |             |-ImplicitCastExpr 0x1815e10bb60 <col:36> 'const u8 *':'const u8 *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x1815e10bb18 <col:36> 'const u8 *':'const u8 *' lvalue ParmVar 0x1815e10b150 'in' 'const u8 *':'const u8 *'
|       |             `-IntegerLiteral 0x1815e10bb38 <col:39> 'int' 20
|       `-IntegerLiteral 0x1815e10bc68 <col:48> 'int' 8
|-FunctionDecl 0x1815e10c008 <line:311:1, line:320:1> line:311:13 used felem_to_bin28 'void (u8 *, const limb *)' static
| |-ParmVarDecl 0x1815e10bde0 <col:28, col:37> col:31 used out 'u8 *':'u8 *'
| |-ParmVarDecl 0x1815e10bec0 <col:40, col:52> col:52 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e10cd38 <line:312:1, line:320:1>
|   |-DeclStmt 0x1815e10c150 <line:313:5, col:15>
|   | `-VarDecl 0x1815e10c0e8 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x1815e10cd00 <line:314:5, line:319:5>
|     |-BinaryOperator 0x1815e10c1e0 <line:314:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1815e10c168 <col:10> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1815e10c1c8 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1815e10c1a0 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1815e10c278 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1815e10c248 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e10c200 <col:17> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1815e10c260 <col:21> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1815e10c220 <col:21> 'int' 7
|     |-UnaryOperator 0x1815e10c2b8 <col:24, col:26> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x1815e10c298 <col:26> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|     `-CompoundStmt 0x1815e10ccd0 <col:29, line:319:5>
|       |-BinaryOperator 0x1815e10c4e8 <line:315:9, col:33> 'u8':'unsigned char' '='
|       | |-ArraySubscriptExpr 0x1815e10c340 <col:9, col:14> 'u8':'unsigned char' lvalue
|       | | |-ImplicitCastExpr 0x1815e10c310 <col:9> 'u8 *':'u8 *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x1815e10c2d0 <col:9> 'u8 *':'u8 *' lvalue ParmVar 0x1815e10bde0 'out' 'u8 *':'u8 *'
|       | | `-ImplicitCastExpr 0x1815e10c328 <col:13> 'unsigned int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x1815e10c2f0 <col:13> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|       | `-ImplicitCastExpr 0x1815e10c4d0 <col:18, col:33> 'u8':'unsigned char' <IntegralCast>
|       |   `-BinaryOperator 0x1815e10c4b0 <col:18, col:33> 'limb':'unsigned long long' '>>'
|       |     |-ImplicitCastExpr 0x1815e10c498 <col:18, col:22> 'limb':'unsigned long long' <LValueToRValue>
|       |     | `-ArraySubscriptExpr 0x1815e10c3c0 <col:18, col:22> 'const limb':'const unsigned long long' lvalue
|       |     |   |-ImplicitCastExpr 0x1815e10c3a8 <col:18> 'const limb *':'const limb *' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x1815e10c360 <col:18> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10bec0 'in' 'const limb *':'const limb *'
|       |     |   `-IntegerLiteral 0x1815e10c380 <col:21> 'int' 0
|       |     `-ParenExpr 0x1815e10c478 <col:27, col:33> 'unsigned int'
|       |       `-BinaryOperator 0x1815e10c458 <col:28, col:32> 'unsigned int' '*'
|       |         |-ImplicitCastExpr 0x1815e10c440 <col:28> 'unsigned int' <IntegralCast>
|       |         | `-IntegerLiteral 0x1815e10c3e0 <col:28> 'int' 8
|       |         `-ImplicitCastExpr 0x1815e10c428 <col:32> 'unsigned int' <LValueToRValue>
|       |           `-DeclRefExpr 0x1815e10c408 <col:32> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|       |-BinaryOperator 0x1815e10c780 <line:316:9, col:37> 'u8':'unsigned char' '='
|       | |-ArraySubscriptExpr 0x1815e10c5d8 <col:9, col:18> 'u8':'unsigned char' lvalue
|       | | |-ImplicitCastExpr 0x1815e10c5c0 <col:9> 'u8 *':'u8 *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x1815e10c508 <col:9> 'u8 *':'u8 *' lvalue ParmVar 0x1815e10bde0 'out' 'u8 *':'u8 *'
|       | | `-BinaryOperator 0x1815e10c5a0 <col:13, col:17> 'unsigned int' '+'
|       | |   |-ImplicitCastExpr 0x1815e10c570 <col:13> 'unsigned int' <LValueToRValue>
|       | |   | `-DeclRefExpr 0x1815e10c528 <col:13> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|       | |   `-ImplicitCastExpr 0x1815e10c588 <col:17> 'unsigned int' <IntegralCast>
|       | |     `-IntegerLiteral 0x1815e10c548 <col:17> 'int' 7
|       | `-ImplicitCastExpr 0x1815e10c768 <col:22, col:37> 'u8':'unsigned char' <IntegralCast>
|       |   `-BinaryOperator 0x1815e10c748 <col:22, col:37> 'limb':'unsigned long long' '>>'
|       |     |-ImplicitCastExpr 0x1815e10c730 <col:22, col:26> 'limb':'unsigned long long' <LValueToRValue>
|       |     | `-ArraySubscriptExpr 0x1815e10c658 <col:22, col:26> 'const limb':'const unsigned long long' lvalue
|       |     |   |-ImplicitCastExpr 0x1815e10c640 <col:22> 'const limb *':'const limb *' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x1815e10c5f8 <col:22> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10bec0 'in' 'const limb *':'const limb *'
|       |     |   `-IntegerLiteral 0x1815e10c618 <col:25> 'int' 1
|       |     `-ParenExpr 0x1815e10c710 <col:31, col:37> 'unsigned int'
|       |       `-BinaryOperator 0x1815e10c6f0 <col:32, col:36> 'unsigned int' '*'
|       |         |-ImplicitCastExpr 0x1815e10c6d8 <col:32> 'unsigned int' <IntegralCast>
|       |         | `-IntegerLiteral 0x1815e10c678 <col:32> 'int' 8
|       |         `-ImplicitCastExpr 0x1815e10c6c0 <col:36> 'unsigned int' <LValueToRValue>
|       |           `-DeclRefExpr 0x1815e10c6a0 <col:36> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|       |-BinaryOperator 0x1815e10ca18 <line:317:9, col:38> 'u8':'unsigned char' '='
|       | |-ArraySubscriptExpr 0x1815e10c870 <col:9, col:19> 'u8':'unsigned char' lvalue
|       | | |-ImplicitCastExpr 0x1815e10c858 <col:9> 'u8 *':'u8 *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x1815e10c7a0 <col:9> 'u8 *':'u8 *' lvalue ParmVar 0x1815e10bde0 'out' 'u8 *':'u8 *'
|       | | `-BinaryOperator 0x1815e10c838 <col:13, col:17> 'unsigned int' '+'
|       | |   |-ImplicitCastExpr 0x1815e10c808 <col:13> 'unsigned int' <LValueToRValue>
|       | |   | `-DeclRefExpr 0x1815e10c7c0 <col:13> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|       | |   `-ImplicitCastExpr 0x1815e10c820 <col:17> 'unsigned int' <IntegralCast>
|       | |     `-IntegerLiteral 0x1815e10c7e0 <col:17> 'int' 14
|       | `-ImplicitCastExpr 0x1815e10ca00 <col:23, col:38> 'u8':'unsigned char' <IntegralCast>
|       |   `-BinaryOperator 0x1815e10c9e0 <col:23, col:38> 'limb':'unsigned long long' '>>'
|       |     |-ImplicitCastExpr 0x1815e10c9c8 <col:23, col:27> 'limb':'unsigned long long' <LValueToRValue>
|       |     | `-ArraySubscriptExpr 0x1815e10c8f0 <col:23, col:27> 'const limb':'const unsigned long long' lvalue
|       |     |   |-ImplicitCastExpr 0x1815e10c8d8 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x1815e10c890 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10bec0 'in' 'const limb *':'const limb *'
|       |     |   `-IntegerLiteral 0x1815e10c8b0 <col:26> 'int' 2
|       |     `-ParenExpr 0x1815e10c9a8 <col:32, col:38> 'unsigned int'
|       |       `-BinaryOperator 0x1815e10c988 <col:33, col:37> 'unsigned int' '*'
|       |         |-ImplicitCastExpr 0x1815e10c970 <col:33> 'unsigned int' <IntegralCast>
|       |         | `-IntegerLiteral 0x1815e10c910 <col:33> 'int' 8
|       |         `-ImplicitCastExpr 0x1815e10c958 <col:37> 'unsigned int' <LValueToRValue>
|       |           `-DeclRefExpr 0x1815e10c938 <col:37> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|       `-BinaryOperator 0x1815e10ccb0 <line:318:9, col:38> 'u8':'unsigned char' '='
|         |-ArraySubscriptExpr 0x1815e10cb08 <col:9, col:19> 'u8':'unsigned char' lvalue
|         | |-ImplicitCastExpr 0x1815e10caf0 <col:9> 'u8 *':'u8 *' <LValueToRValue>
|         | | `-DeclRefExpr 0x1815e10ca38 <col:9> 'u8 *':'u8 *' lvalue ParmVar 0x1815e10bde0 'out' 'u8 *':'u8 *'
|         | `-BinaryOperator 0x1815e10cad0 <col:13, col:17> 'unsigned int' '+'
|         |   |-ImplicitCastExpr 0x1815e10caa0 <col:13> 'unsigned int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x1815e10ca58 <col:13> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|         |   `-ImplicitCastExpr 0x1815e10cab8 <col:17> 'unsigned int' <IntegralCast>
|         |     `-IntegerLiteral 0x1815e10ca78 <col:17> 'int' 21
|         `-ImplicitCastExpr 0x1815e10cc98 <col:23, col:38> 'u8':'unsigned char' <IntegralCast>
|           `-BinaryOperator 0x1815e10cc78 <col:23, col:38> 'limb':'unsigned long long' '>>'
|             |-ImplicitCastExpr 0x1815e10cc60 <col:23, col:27> 'limb':'unsigned long long' <LValueToRValue>
|             | `-ArraySubscriptExpr 0x1815e10cb88 <col:23, col:27> 'const limb':'const unsigned long long' lvalue
|             |   |-ImplicitCastExpr 0x1815e10cb70 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x1815e10cb28 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10bec0 'in' 'const limb *':'const limb *'
|             |   `-IntegerLiteral 0x1815e10cb48 <col:26> 'int' 3
|             `-ParenExpr 0x1815e10cc40 <col:32, col:38> 'unsigned int'
|               `-BinaryOperator 0x1815e10cc20 <col:33, col:37> 'unsigned int' '*'
|                 |-ImplicitCastExpr 0x1815e10cc08 <col:33> 'unsigned int' <IntegralCast>
|                 | `-IntegerLiteral 0x1815e10cba8 <col:33> 'int' 8
|                 `-ImplicitCastExpr 0x1815e10cbf0 <col:37> 'unsigned int' <LValueToRValue>
|                   `-DeclRefExpr 0x1815e10cbd0 <col:37> 'unsigned int' lvalue Var 0x1815e10c0e8 'i' 'unsigned int'
|-FunctionDecl 0x1815e10cfc8 <line:323:1, line:328:1> line:323:13 used flip_endian 'void (u8 *, const u8 *, unsigned int)' static
| |-ParmVarDecl 0x1815e10cd68 <col:25, col:29> col:29 used out 'u8 *'
| |-ParmVarDecl 0x1815e10cde0 <col:34, col:44> col:44 used in 'const u8 *'
| |-ParmVarDecl 0x1815e10ce60 <col:48, col:57> col:57 used len 'unsigned int'
| `-CompoundStmt 0x1815e10d4d8 <line:324:1, line:328:1>
|   |-DeclStmt 0x1815e10d118 <line:325:5, col:15>
|   | `-VarDecl 0x1815e10d0b0 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x1815e10d4a0 <line:326:5, line:327:32>
|     |-BinaryOperator 0x1815e10d1a8 <line:326:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1815e10d130 <col:10> 'unsigned int' lvalue Var 0x1815e10d0b0 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1815e10d190 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1815e10d168 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1815e10d238 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1815e10d208 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e10d1c8 <col:17> 'unsigned int' lvalue Var 0x1815e10d0b0 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1815e10d220 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x1815e10d1e8 <col:21> 'unsigned int' lvalue ParmVar 0x1815e10ce60 'len' 'unsigned int'
|     |-UnaryOperator 0x1815e10d278 <col:26, col:28> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x1815e10d258 <col:28> 'unsigned int' lvalue Var 0x1815e10d0b0 'i' 'unsigned int'
|     `-BinaryOperator 0x1815e10d480 <line:327:9, col:32> 'u8':'unsigned char' '='
|       |-ArraySubscriptExpr 0x1815e10d300 <col:9, col:14> 'u8':'unsigned char' lvalue
|       | |-ImplicitCastExpr 0x1815e10d2d0 <col:9> 'u8 *' <LValueToRValue>
|       | | `-DeclRefExpr 0x1815e10d290 <col:9> 'u8 *' lvalue ParmVar 0x1815e10cd68 'out' 'u8 *'
|       | `-ImplicitCastExpr 0x1815e10d2e8 <col:13> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x1815e10d2b0 <col:13> 'unsigned int' lvalue Var 0x1815e10d0b0 'i' 'unsigned int'
|       `-ImplicitCastExpr 0x1815e10d468 <col:18, col:32> 'u8':'unsigned char' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1815e10d448 <col:18, col:32> 'const u8':'const unsigned char' lvalue
|           |-ImplicitCastExpr 0x1815e10d430 <col:18> 'const u8 *' <LValueToRValue>
|           | `-DeclRefExpr 0x1815e10d320 <col:18> 'const u8 *' lvalue ParmVar 0x1815e10cde0 'in' 'const u8 *'
|           `-BinaryOperator 0x1815e10d410 <col:21, col:31> 'unsigned int' '-'
|             |-BinaryOperator 0x1815e10d3b8 <col:21, col:27> 'unsigned int' '-'
|             | |-ImplicitCastExpr 0x1815e10d388 <col:21> 'unsigned int' <LValueToRValue>
|             | | `-DeclRefExpr 0x1815e10d340 <col:21> 'unsigned int' lvalue ParmVar 0x1815e10ce60 'len' 'unsigned int'
|             | `-ImplicitCastExpr 0x1815e10d3a0 <col:27> 'unsigned int' <IntegralCast>
|             |   `-IntegerLiteral 0x1815e10d360 <col:27> 'int' 1
|             `-ImplicitCastExpr 0x1815e10d3f8 <col:31> 'unsigned int' <LValueToRValue>
|               `-DeclRefExpr 0x1815e10d3d8 <col:31> 'unsigned int' lvalue Var 0x1815e10d0b0 'i' 'unsigned int'
|-FunctionDecl 0x1815e10d6a0 <line:331:1, line:352:1> line:331:12 invalid BN_to_felem 'int (limb *, const int *)' static
| |-ParmVarDecl 0x1815e10d508 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e10d588 <col:35, col:49> col:49 invalid bn 'const int *'
| `-CompoundStmt 0x1815e10e4d0 <line:332:1, line:352:1>
|   |-DeclStmt 0x1815e10d7e0 <line:333:5, col:25>
|   | `-VarDecl 0x1815e10d778 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [28]'
|   |-DeclStmt 0x1815e10d870 <line:334:5, col:26>
|   | `-VarDecl 0x1815e10d808 <col:5, col:21> col:21 used b_out 'felem_bytearray':'u8 [28]'
|   |-DeclStmt 0x1815e10d908 <line:335:5, col:23>
|   | `-VarDecl 0x1815e10d8a0 <col:5, col:14> col:14 used num_bytes 'unsigned int'
|   |-CallExpr 0x1815e10da70 <line:338:5, col:35> 'void *'
|   | |-ImplicitCastExpr 0x1815e10da58 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e10d920 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1815e0cec90 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1815e10dac0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1815e10daa8 <col:12> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e10d940 <col:12> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e10d808 'b_out' 'felem_bytearray':'u8 [28]'
|   | |-IntegerLiteral 0x1815e10d978 <col:19> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x1815e10d9e0 <col:22, col:34> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x1815e10d9c0 <col:28, col:34> 'felem_bytearray':'u8 [28]' lvalue
|   |     `-DeclRefExpr 0x1815e10d9a0 <col:29> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e10d808 'b_out' 'felem_bytearray':'u8 [28]' non_odr_use_unevaluated
|   |-IfStmt 0x1815e10de78 <line:340:5, line:343:5>
|   | |-BinaryOperator 0x1815e10dcf8 <line:340:9, col:33> 'int' '>'
|   | | |-ImplicitCastExpr 0x1815e10dce0 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1815e10dcc8 <col:9> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1815e10dc48 <col:9> 'unsigned int' lvalue Var 0x1815e10d8a0 'num_bytes' 'unsigned int'
|   | | `-UnaryExprOrTypeTraitExpr 0x1815e10dca8 <col:21, col:33> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x1815e10dc88 <col:27, col:33> 'felem_bytearray':'u8 [28]' lvalue
|   | |     `-DeclRefExpr 0x1815e10dc68 <col:28> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e10d808 'b_out' 'felem_bytearray':'u8 [28]' non_odr_use_unevaluated
|   | `-CompoundStmt 0x1815e10de60 <col:36, line:343:5>
|   |   `-ReturnStmt 0x1815e10de50 <line:342:9, col:16>
|   |     `-IntegerLiteral 0x1815e10de28 <col:16> 'int' 0
|   |-IfStmt 0x1815e10e028 <line:344:5, line:347:5>
|   | |-OpaqueValueExpr 0x1815e10e010 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1815e10dff8 <line:344:29, line:347:5>
|   |   `-ReturnStmt 0x1815e10dfe8 <line:346:9, col:16>
|   |     `-IntegerLiteral 0x1815e10dfc0 <col:16> 'int' 0
|   |-CallExpr 0x1815e10e2a0 <line:349:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1815e10e288 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e10e1a8 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x1815e10cfc8 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | |-ImplicitCastExpr 0x1815e10e2d8 <col:17> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e10e1c8 <col:17> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e10d808 'b_out' 'felem_bytearray':'u8 [28]'
|   | |-ImplicitCastExpr 0x1815e10e308 <col:24> 'const u8 *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e10e2f0 <col:24> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e10e1e8 <col:24> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e10d778 'b_in' 'felem_bytearray':'u8 [28]'
|   | `-ImplicitCastExpr 0x1815e10e320 <col:30> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e10e208 <col:30> 'unsigned int' lvalue Var 0x1815e10d8a0 'num_bytes' 'unsigned int'
|   |-CallExpr 0x1815e10e420 <line:350:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1815e10e408 <col:5> 'void (*)(limb *, const u8 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e10e338 <col:5> 'void (limb *, const u8 *)' Function 0x1815e10b298 'bin28_to_felem' 'void (limb *, const u8 *)'
|   | |-ImplicitCastExpr 0x1815e10e450 <col:20> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e10e358 <col:20> 'limb *':'limb *' lvalue ParmVar 0x1815e10d508 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1815e10e480 <col:25> 'const u8 *':'const u8 *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e10e468 <col:25> 'u8 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e10e390 <col:25> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e10d808 'b_out' 'felem_bytearray':'u8 [28]'
|   `-ReturnStmt 0x1815e10e4c0 <line:351:5, col:12>
|     `-IntegerLiteral 0x1815e10e498 <col:12> 'int' 1
|-FunctionDecl 0x1815e10e6d0 <line:355:1, line:361:1> line:355:16 invalid felem_to_BN 'int *(int *, const limb *)' static
| |-ParmVarDecl 0x1815e10e540 <col:28, col:36> col:36 invalid out 'int *'
| |-ParmVarDecl 0x1815e10e5b8 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e10ed68 <line:356:1, line:361:1>
|   |-DeclStmt 0x1815e10e8a0 <line:357:5, col:32>
|   | |-VarDecl 0x1815e10e7a8 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [28]'
|   | `-VarDecl 0x1815e10e820 <col:5, col:27> col:27 used b_out 'felem_bytearray':'u8 [28]'
|   |-CallExpr 0x1815e10e9c0 <line:358:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e10e9a8 <col:5> 'void (*)(u8 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e10e8b8 <col:5> 'void (u8 *, const limb *)' Function 0x1815e10c008 'felem_to_bin28' 'void (u8 *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e10e9f0 <col:20> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e10e8d8 <col:20> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e10e7a8 'b_in' 'felem_bytearray':'u8 [28]'
|   | `-ImplicitCastExpr 0x1815e10ea08 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e10e910 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10e5b8 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x1815e10eb10 <line:359:5, col:43> 'void'
|     |-ImplicitCastExpr 0x1815e10eaf8 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1815e10ea20 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x1815e10cfc8 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|     |-ImplicitCastExpr 0x1815e10eb48 <col:17> 'u8 *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x1815e10ea40 <col:17> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e10e820 'b_out' 'felem_bytearray':'u8 [28]'
|     |-ImplicitCastExpr 0x1815e10eb78 <col:24> 'const u8 *' <NoOp>
|     | `-ImplicitCastExpr 0x1815e10eb60 <col:24> 'u8 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x1815e10ea78 <col:24> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e10e7a8 'b_in' 'felem_bytearray':'u8 [28]'
|     `-ImplicitCastExpr 0x1815e10eb90 <col:30, col:42> 'unsigned int' <IntegralCast>
|       `-UnaryExprOrTypeTraitExpr 0x1815e10ead8 <col:30, col:42> 'unsigned long long' sizeof
|         `-ParenExpr 0x1815e10eab8 <col:36, col:42> 'felem_bytearray':'u8 [28]' lvalue
|           `-DeclRefExpr 0x1815e10ea98 <col:37> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e10e820 'b_out' 'felem_bytearray':'u8 [28]' non_odr_use_unevaluated
|-FunctionDecl 0x1815e10eea8 <line:374:1, line:380:1> line:374:13 used felem_one 'void (limb *)' static
| |-ParmVarDecl 0x1815e10eda0 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-CompoundStmt 0x1815e10f2e8 <line:375:1, line:380:1>
| | |-BinaryOperator 0x1815e10f028 <line:376:5, col:14> 'limb':'unsigned long long' '='
| | | |-ArraySubscriptExpr 0x1815e10efc8 <col:5, col:10> 'limb':'unsigned long long' lvalue
| | | | |-ImplicitCastExpr 0x1815e10efb0 <col:5> 'limb *':'limb *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x1815e10ef68 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10eda0 'out' 'limb *':'limb *'
| | | | `-IntegerLiteral 0x1815e10ef88 <col:9> 'int' 0
| | | `-ImplicitCastExpr 0x1815e10f010 <col:14> 'limb':'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x1815e10efe8 <col:14> 'int' 1
| | |-BinaryOperator 0x1815e10f108 <line:377:5, col:14> 'limb':'unsigned long long' '='
| | | |-ArraySubscriptExpr 0x1815e10f0a8 <col:5, col:10> 'limb':'unsigned long long' lvalue
| | | | |-ImplicitCastExpr 0x1815e10f090 <col:5> 'limb *':'limb *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x1815e10f048 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10eda0 'out' 'limb *':'limb *'
| | | | `-IntegerLiteral 0x1815e10f068 <col:9> 'int' 1
| | | `-ImplicitCastExpr 0x1815e10f0f0 <col:14> 'limb':'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x1815e10f0c8 <col:14> 'int' 0
| | |-BinaryOperator 0x1815e10f1e8 <line:378:5, col:14> 'limb':'unsigned long long' '='
| | | |-ArraySubscriptExpr 0x1815e10f188 <col:5, col:10> 'limb':'unsigned long long' lvalue
| | | | |-ImplicitCastExpr 0x1815e10f170 <col:5> 'limb *':'limb *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x1815e10f128 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10eda0 'out' 'limb *':'limb *'
| | | | `-IntegerLiteral 0x1815e10f148 <col:9> 'int' 2
| | | `-ImplicitCastExpr 0x1815e10f1d0 <col:14> 'limb':'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x1815e10f1a8 <col:14> 'int' 0
| | `-BinaryOperator 0x1815e10f2c8 <line:379:5, col:14> 'limb':'unsigned long long' '='
| |   |-ArraySubscriptExpr 0x1815e10f268 <col:5, col:10> 'limb':'unsigned long long' lvalue
| |   | |-ImplicitCastExpr 0x1815e10f250 <col:5> 'limb *':'limb *' <LValueToRValue>
| |   | | `-DeclRefExpr 0x1815e10f208 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10eda0 'out' 'limb *':'limb *'
| |   | `-IntegerLiteral 0x1815e10f228 <col:9> 'int' 3
| |   `-ImplicitCastExpr 0x1815e10f2b0 <col:14> 'limb':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x1815e10f288 <col:14> 'int' 0
| `-FullComment 0x1815e310950 <line:363:4, col:78>
|   `-ParagraphComment 0x1815e310928 <col:4, col:78>
|     `-TextComment 0x1815e310900 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x1815e10f4e8 <line:382:1, line:388:1> line:382:13 used felem_assign 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1815e10f328 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e10f3a0 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e10fab8 <line:383:1, line:388:1>
|   |-BinaryOperator 0x1815e10f6c8 <line:384:5, col:18> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e10f610 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e10f5f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e10f5b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10f328 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e10f5d0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e10f6b0 <col:14, col:18> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e10f690 <col:14, col:18> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e10f678 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e10f630 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10f3a0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e10f650 <col:17> 'int' 0
|   |-BinaryOperator 0x1815e10f800 <line:385:5, col:18> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e10f748 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e10f730 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e10f6e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10f328 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e10f708 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e10f7e8 <col:14, col:18> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e10f7c8 <col:14, col:18> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e10f7b0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e10f768 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10f3a0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e10f788 <col:17> 'int' 1
|   |-BinaryOperator 0x1815e10f938 <line:386:5, col:18> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e10f880 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e10f868 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e10f820 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10f328 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e10f840 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e10f920 <col:14, col:18> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e10f900 <col:14, col:18> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e10f8e8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e10f8a0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10f3a0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e10f8c0 <col:17> 'int' 2
|   `-BinaryOperator 0x1815e10fa98 <line:387:5, col:18> 'limb':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1815e10f9b8 <col:5, col:10> 'limb':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1815e10f9a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e10f958 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10f328 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1815e10f978 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1815e10fa80 <col:14, col:18> 'limb':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1815e10fa60 <col:14, col:18> 'const limb':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x1815e10fa48 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1815e10f9d8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10f3a0 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1815e10fa20 <col:17> 'int' 3
|-FunctionDecl 0x1815e10fc38 <line:391:1, line:397:1> line:391:13 used felem_sum 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1815e10faf8 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e10fb70 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e110220 <line:392:1, line:397:1>
|   |-CompoundAssignOperator 0x1815e10fe18 <line:393:5, col:19> 'limb':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e10fd60 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e10fd48 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e10fd00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10faf8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e10fd20 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e10fe00 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e10fde0 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e10fdc8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e10fd80 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10fb70 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e10fda0 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1815e10ff60 <line:394:5, col:19> 'limb':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e10fea8 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e10fe90 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e10fe48 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10faf8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e10fe68 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e10ff48 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e10ff28 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e10ff10 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e10fec8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10fb70 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e10fee8 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1815e1100a8 <line:395:5, col:19> 'limb':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e10fff0 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e10ffd8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e10ff90 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10faf8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e10ffb0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e110090 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e110070 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e110058 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e110010 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10fb70 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e110030 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1815e1101f0 <line:396:5, col:19> 'limb':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x1815e110138 <col:5, col:10> 'limb':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1815e110120 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e1100d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e10faf8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1815e1100f8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1815e1101d8 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1815e1101b8 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x1815e1101a0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1815e110158 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e10fb70 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1815e110178 <col:18> 'int' 3
|-FunctionDecl 0x1815e1103a0 <line:401:1, line:413:1> line:401:13 used felem_neg 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1815e110260 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e1102d8 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e111450 <line:402:1, line:413:1>
|   |-DeclStmt 0x1815e1106d0 <line:403:5, col:71>
|   | `-VarDecl 0x1815e110478 <col:5, col:70> col:23 used two58p2 'const limb':'const unsigned long long' static cinit
|   |   `-BinaryOperator 0x1815e1106b0 <col:33, col:70> 'unsigned long long' '+'
|   |     |-ParenExpr 0x1815e1105a8 <col:33, col:50> 'limb':'unsigned long long'
|   |     | `-BinaryOperator 0x1815e110588 <col:34, col:48> 'limb':'unsigned long long' '<<'
|   |     |   |-ParenExpr 0x1815e110540 <col:34, col:43> 'limb':'unsigned long long'
|   |     |   | `-CStyleCastExpr 0x1815e110518 <col:35, col:42> 'limb':'unsigned long long' <IntegralCast>
|   |     |   |   `-IntegerLiteral 0x1815e1104e0 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e110560 <col:48> 'int' 58
|   |     `-ParenExpr 0x1815e110690 <col:54, col:70> 'limb':'unsigned long long'
|   |       `-BinaryOperator 0x1815e110670 <col:55, col:69> 'limb':'unsigned long long' '<<'
|   |         |-ParenExpr 0x1815e110628 <col:55, col:64> 'limb':'unsigned long long'
|   |         | `-CStyleCastExpr 0x1815e110600 <col:56, col:63> 'limb':'unsigned long long' <IntegralCast>
|   |         |   `-IntegerLiteral 0x1815e1105c8 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x1815e110648 <col:69> 'int' 2
|   |-DeclStmt 0x1815e110950 <line:404:5, col:71>
|   | `-VarDecl 0x1815e1106f8 <col:5, col:70> col:23 used two58m2 'const limb':'const unsigned long long' static cinit
|   |   `-BinaryOperator 0x1815e110930 <col:33, col:70> 'unsigned long long' '-'
|   |     |-ParenExpr 0x1815e110828 <col:33, col:50> 'limb':'unsigned long long'
|   |     | `-BinaryOperator 0x1815e110808 <col:34, col:48> 'limb':'unsigned long long' '<<'
|   |     |   |-ParenExpr 0x1815e1107c0 <col:34, col:43> 'limb':'unsigned long long'
|   |     |   | `-CStyleCastExpr 0x1815e110798 <col:35, col:42> 'limb':'unsigned long long' <IntegralCast>
|   |     |   |   `-IntegerLiteral 0x1815e110760 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e1107e0 <col:48> 'int' 58
|   |     `-ParenExpr 0x1815e110910 <col:54, col:70> 'limb':'unsigned long long'
|   |       `-BinaryOperator 0x1815e1108f0 <col:55, col:69> 'limb':'unsigned long long' '<<'
|   |         |-ParenExpr 0x1815e1108a8 <col:55, col:64> 'limb':'unsigned long long'
|   |         | `-CStyleCastExpr 0x1815e110880 <col:56, col:63> 'limb':'unsigned long long' <IntegralCast>
|   |         |   `-IntegerLiteral 0x1815e110848 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x1815e1108c8 <col:69> 'int' 2
|   |-DeclStmt 0x1815e110cd8 <line:405:5, line:406:47>
|   | `-VarDecl 0x1815e110978 <line:405:5, line:406:46> line:405:23 used two58m42m2 'const limb':'const unsigned long long' static cinit
|   |   `-BinaryOperator 0x1815e110cb8 <col:36, line:406:46> 'unsigned long long' '-'
|   |     |-BinaryOperator 0x1815e110bb0 <line:405:36, line:406:26> 'unsigned long long' '-'
|   |     | |-ParenExpr 0x1815e110aa8 <line:405:36, col:53> 'limb':'unsigned long long'
|   |     | | `-BinaryOperator 0x1815e110a88 <col:37, col:51> 'limb':'unsigned long long' '<<'
|   |     | |   |-ParenExpr 0x1815e110a40 <col:37, col:46> 'limb':'unsigned long long'
|   |     | |   | `-CStyleCastExpr 0x1815e110a18 <col:38, col:45> 'limb':'unsigned long long' <IntegralCast>
|   |     | |   |   `-IntegerLiteral 0x1815e1109e0 <col:45> 'int' 1
|   |     | |   `-IntegerLiteral 0x1815e110a60 <col:51> 'int' 58
|   |     | `-ParenExpr 0x1815e110b90 <line:406:9, col:26> 'limb':'unsigned long long'
|   |     |   `-BinaryOperator 0x1815e110b70 <col:10, col:24> 'limb':'unsigned long long' '<<'
|   |     |     |-ParenExpr 0x1815e110b28 <col:10, col:19> 'limb':'unsigned long long'
|   |     |     | `-CStyleCastExpr 0x1815e110b00 <col:11, col:18> 'limb':'unsigned long long' <IntegralCast>
|   |     |     |   `-IntegerLiteral 0x1815e110ac8 <col:18> 'int' 1
|   |     |     `-IntegerLiteral 0x1815e110b48 <col:24> 'int' 42
|   |     `-ParenExpr 0x1815e110c98 <col:30, col:46> 'limb':'unsigned long long'
|   |       `-BinaryOperator 0x1815e110c78 <col:31, col:45> 'limb':'unsigned long long' '<<'
|   |         |-ParenExpr 0x1815e110c30 <col:31, col:40> 'limb':'unsigned long long'
|   |         | `-CStyleCastExpr 0x1815e110c08 <col:32, col:39> 'limb':'unsigned long long' <IntegralCast>
|   |         |   `-IntegerLiteral 0x1815e110bd0 <col:39> 'int' 1
|   |         `-IntegerLiteral 0x1815e110c50 <col:45> 'int' 2
|   |-BinaryOperator 0x1815e110e78 <line:409:5, col:28> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e110d50 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e110d38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e110cf0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e110260 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e110d10 <col:9> 'int' 0
|   | `-BinaryOperator 0x1815e110e58 <col:14, col:28> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1815e110e28 <col:14> 'limb':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1815e110d70 <col:14> 'const limb':'const unsigned long long' lvalue Var 0x1815e110478 'two58p2' 'const limb':'const unsigned long long'
|   |   `-ImplicitCastExpr 0x1815e110e40 <col:24, col:28> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e110e08 <col:24, col:28> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e110df0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e110da8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1102d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e110dc8 <col:27> 'int' 0
|   |-BinaryOperator 0x1815e111068 <line:410:5, col:31> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e110f40 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e110f28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e110ee0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e110260 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e110f00 <col:9> 'int' 1
|   | `-BinaryOperator 0x1815e111048 <col:14, col:31> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1815e111018 <col:14> 'limb':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1815e110f60 <col:14> 'const limb':'const unsigned long long' lvalue Var 0x1815e110978 'two58m42m2' 'const limb':'const unsigned long long'
|   |   `-ImplicitCastExpr 0x1815e111030 <col:27, col:31> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e110ff8 <col:27, col:31> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e110fe0 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e110f98 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1102d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e110fb8 <col:30> 'int' 1
|   |-BinaryOperator 0x1815e111258 <line:411:5, col:28> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e111130 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e111118 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1110d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e110260 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e1110f0 <col:9> 'int' 2
|   | `-BinaryOperator 0x1815e111238 <col:14, col:28> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x1815e111208 <col:14> 'limb':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1815e111150 <col:14> 'const limb':'const unsigned long long' lvalue Var 0x1815e1106f8 'two58m2' 'const limb':'const unsigned long long'
|   |   `-ImplicitCastExpr 0x1815e111220 <col:24, col:28> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e1111e8 <col:24, col:28> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1111d0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e111188 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1102d8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e1111a8 <col:27> 'int' 2
|   `-BinaryOperator 0x1815e111430 <line:412:5, col:28> 'limb':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1815e111320 <col:5, col:10> 'limb':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1815e111308 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e1112c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e110260 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1815e1112e0 <col:9> 'int' 3
|     `-BinaryOperator 0x1815e111410 <col:14, col:28> 'unsigned long long' '-'
|       |-ImplicitCastExpr 0x1815e1113e0 <col:14> 'limb':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x1815e111340 <col:14> 'const limb':'const unsigned long long' lvalue Var 0x1815e1106f8 'two58m2' 'const limb':'const unsigned long long'
|       `-ImplicitCastExpr 0x1815e1113f8 <col:24, col:28> 'limb':'unsigned long long' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1815e1113c0 <col:24, col:28> 'const limb':'const unsigned long long' lvalue
|           |-ImplicitCastExpr 0x1815e1113a8 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|           | `-DeclRefExpr 0x1815e111360 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1102d8 'in' 'const limb *':'const limb *'
|           `-IntegerLiteral 0x1815e111380 <col:27> 'int' 3
|-FunctionDecl 0x1815e1115e8 <line:417:1, line:434:1> line:417:13 used felem_diff 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1815e1114a8 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e111520 <col:35, col:47> col:47 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e112940 <line:418:1, line:434:1>
|   |-DeclStmt 0x1815e111918 <line:419:5, col:71>
|   | `-VarDecl 0x1815e1116c0 <col:5, col:70> col:23 used two58p2 'const limb':'const unsigned long long' static cinit
|   |   `-BinaryOperator 0x1815e1118f8 <col:33, col:70> 'unsigned long long' '+'
|   |     |-ParenExpr 0x1815e1117f0 <col:33, col:50> 'limb':'unsigned long long'
|   |     | `-BinaryOperator 0x1815e1117d0 <col:34, col:48> 'limb':'unsigned long long' '<<'
|   |     |   |-ParenExpr 0x1815e111788 <col:34, col:43> 'limb':'unsigned long long'
|   |     |   | `-CStyleCastExpr 0x1815e111760 <col:35, col:42> 'limb':'unsigned long long' <IntegralCast>
|   |     |   |   `-IntegerLiteral 0x1815e111728 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e1117a8 <col:48> 'int' 58
|   |     `-ParenExpr 0x1815e1118d8 <col:54, col:70> 'limb':'unsigned long long'
|   |       `-BinaryOperator 0x1815e1118b8 <col:55, col:69> 'limb':'unsigned long long' '<<'
|   |         |-ParenExpr 0x1815e111870 <col:55, col:64> 'limb':'unsigned long long'
|   |         | `-CStyleCastExpr 0x1815e111848 <col:56, col:63> 'limb':'unsigned long long' <IntegralCast>
|   |         |   `-IntegerLiteral 0x1815e111810 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x1815e111890 <col:69> 'int' 2
|   |-DeclStmt 0x1815e111bc0 <line:420:5, col:71>
|   | `-VarDecl 0x1815e111940 <col:5, col:70> col:23 used two58m2 'const limb':'const unsigned long long' static cinit
|   |   `-BinaryOperator 0x1815e111ba0 <col:33, col:70> 'unsigned long long' '-'
|   |     |-ParenExpr 0x1815e111a98 <col:33, col:50> 'limb':'unsigned long long'
|   |     | `-BinaryOperator 0x1815e111a78 <col:34, col:48> 'limb':'unsigned long long' '<<'
|   |     |   |-ParenExpr 0x1815e111a30 <col:34, col:43> 'limb':'unsigned long long'
|   |     |   | `-CStyleCastExpr 0x1815e1119e0 <col:35, col:42> 'limb':'unsigned long long' <IntegralCast>
|   |     |   |   `-IntegerLiteral 0x1815e1119a8 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e111a50 <col:48> 'int' 58
|   |     `-ParenExpr 0x1815e111b80 <col:54, col:70> 'limb':'unsigned long long'
|   |       `-BinaryOperator 0x1815e111b60 <col:55, col:69> 'limb':'unsigned long long' '<<'
|   |         |-ParenExpr 0x1815e111b18 <col:55, col:64> 'limb':'unsigned long long'
|   |         | `-CStyleCastExpr 0x1815e111af0 <col:56, col:63> 'limb':'unsigned long long' <IntegralCast>
|   |         |   `-IntegerLiteral 0x1815e111ab8 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x1815e111b38 <col:69> 'int' 2
|   |-DeclStmt 0x1815e111f48 <line:421:5, line:422:47>
|   | `-VarDecl 0x1815e111be8 <line:421:5, line:422:46> line:421:23 used two58m42m2 'const limb':'const unsigned long long' static cinit
|   |   `-BinaryOperator 0x1815e111f28 <col:36, line:422:46> 'unsigned long long' '-'
|   |     |-BinaryOperator 0x1815e111e20 <line:421:36, line:422:26> 'unsigned long long' '-'
|   |     | |-ParenExpr 0x1815e111d18 <line:421:36, col:53> 'limb':'unsigned long long'
|   |     | | `-BinaryOperator 0x1815e111cf8 <col:37, col:51> 'limb':'unsigned long long' '<<'
|   |     | |   |-ParenExpr 0x1815e111cb0 <col:37, col:46> 'limb':'unsigned long long'
|   |     | |   | `-CStyleCastExpr 0x1815e111c88 <col:38, col:45> 'limb':'unsigned long long' <IntegralCast>
|   |     | |   |   `-IntegerLiteral 0x1815e111c50 <col:45> 'int' 1
|   |     | |   `-IntegerLiteral 0x1815e111cd0 <col:51> 'int' 58
|   |     | `-ParenExpr 0x1815e111e00 <line:422:9, col:26> 'limb':'unsigned long long'
|   |     |   `-BinaryOperator 0x1815e111de0 <col:10, col:24> 'limb':'unsigned long long' '<<'
|   |     |     |-ParenExpr 0x1815e111d98 <col:10, col:19> 'limb':'unsigned long long'
|   |     |     | `-CStyleCastExpr 0x1815e111d70 <col:11, col:18> 'limb':'unsigned long long' <IntegralCast>
|   |     |     |   `-IntegerLiteral 0x1815e111d38 <col:18> 'int' 1
|   |     |     `-IntegerLiteral 0x1815e111db8 <col:24> 'int' 42
|   |     `-ParenExpr 0x1815e111f08 <col:30, col:46> 'limb':'unsigned long long'
|   |       `-BinaryOperator 0x1815e111ee8 <col:31, col:45> 'limb':'unsigned long long' '<<'
|   |         |-ParenExpr 0x1815e111ea0 <col:31, col:40> 'limb':'unsigned long long'
|   |         | `-CStyleCastExpr 0x1815e111e78 <col:32, col:39> 'limb':'unsigned long long' <IntegralCast>
|   |         |   `-IntegerLiteral 0x1815e111e40 <col:39> 'int' 1
|   |         `-IntegerLiteral 0x1815e111ec0 <col:45> 'int' 2
|   |-CompoundAssignOperator 0x1815e112030 <line:425:5, col:15> 'limb':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e111fc0 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e111fa8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e111f60 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1114a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e111f80 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e112018 <col:15> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e111fe0 <col:15> 'const limb':'const unsigned long long' lvalue Var 0x1815e1116c0 'two58p2' 'const limb':'const unsigned long long'
|   |-CompoundAssignOperator 0x1815e112178 <line:426:5, col:15> 'limb':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e112108 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1120f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1120a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1114a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e1120c8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e112160 <col:15> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e112128 <col:15> 'const limb':'const unsigned long long' lvalue Var 0x1815e111be8 'two58m42m2' 'const limb':'const unsigned long long'
|   |-CompoundAssignOperator 0x1815e1122c0 <line:427:5, col:15> 'limb':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e112250 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e112238 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1121f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1114a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e112210 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e1122a8 <col:15> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e112270 <col:15> 'const limb':'const unsigned long long' lvalue Var 0x1815e111940 'two58m2' 'const limb':'const unsigned long long'
|   |-CompoundAssignOperator 0x1815e1123f0 <line:428:5, col:15> 'limb':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e112398 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e112380 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e112338 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1114a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e112358 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1815e1123d8 <col:15> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1123b8 <col:15> 'const limb':'const unsigned long long' lvalue Var 0x1815e111940 'two58m2' 'const limb':'const unsigned long long'
|   |-CompoundAssignOperator 0x1815e112538 <line:430:5, col:19> 'limb':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e112480 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e112468 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e112420 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1114a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e112440 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e112520 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e112500 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e1124e8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e1124a0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e111520 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e1124c0 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1815e112680 <line:431:5, col:19> 'limb':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e1125c8 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1125b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e112568 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1114a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e112588 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e112668 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e112648 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e112630 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e1125e8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e111520 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e112608 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1815e1127c8 <line:432:5, col:19> 'limb':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e112710 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1126f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1126b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1114a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e1126d0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e1127b0 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e112790 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e112778 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e112730 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e111520 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e112750 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1815e112910 <line:433:5, col:19> 'limb':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x1815e112858 <col:5, col:10> 'limb':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1815e112840 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e1127f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1114a8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1815e112818 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1815e1128f8 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1815e1128d8 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x1815e1128c0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1815e112878 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e111520 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1815e112898 <col:18> 'int' 3
|-FunctionDecl 0x1815e112ca8 <line:438:1, line:462:1> line:438:13 used widefelem_diff 'void (widelimb *, const widelimb *)' static
| |-ParmVarDecl 0x1815e112a40 <col:28, col:38> col:38 used out 'widelimb *':'widelimb *'
| |-ParmVarDecl 0x1815e112b60 <col:43, col:59> col:59 used in 'const widelimb *':'const widelimb *'
| `-CompoundStmt 0x1815e114550 <line:439:1, line:462:1>
|   |-DeclStmt 0x1815e112eb0 <line:440:5, col:57>
|   | `-VarDecl 0x1815e112d80 <col:5, col:54> col:27 used two120 'const widelimb':'const int' static cinit
|   |   `-BinaryOperator 0x1815e112e90 <col:36, col:54> 'widelimb':'int' '<<'
|   |     |-ParenExpr 0x1815e112e48 <col:36, col:49> 'widelimb':'int'
|   |     | `-CStyleCastExpr 0x1815e112e20 <col:37, col:48> 'widelimb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x1815e112de8 <col:48> 'int' 1
|   |     `-IntegerLiteral 0x1815e112e68 <col:54> 'int' 120
|   |-DeclStmt 0x1815e113130 <line:441:5, line:442:31>
|   | `-VarDecl 0x1815e112ed8 <line:441:5, line:442:30> line:441:27 used two120m64 'const widelimb':'const int' static cinit
|   |   `-BinaryOperator 0x1815e113110 <col:39, line:442:30> 'int' '-'
|   |     |-ParenExpr 0x1815e113008 <line:441:39, col:61> 'widelimb':'int'
|   |     | `-BinaryOperator 0x1815e112fe8 <col:40, col:58> 'widelimb':'int' '<<'
|   |     |   |-ParenExpr 0x1815e112fa0 <col:40, col:53> 'widelimb':'int'
|   |     |   | `-CStyleCastExpr 0x1815e112f78 <col:41, col:52> 'widelimb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x1815e112f40 <col:52> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e112fc0 <col:58> 'int' 120
|   |     `-ParenExpr 0x1815e1130f0 <line:442:9, col:30> 'widelimb':'int'
|   |       `-BinaryOperator 0x1815e1130d0 <col:10, col:28> 'widelimb':'int' '<<'
|   |         |-ParenExpr 0x1815e113088 <col:10, col:23> 'widelimb':'int'
|   |         | `-CStyleCastExpr 0x1815e113060 <col:11, col:22> 'widelimb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1815e113028 <col:22> 'int' 1
|   |         `-IntegerLiteral 0x1815e1130a8 <col:28> 'int' 64
|   |-DeclStmt 0x1815e1134b8 <line:443:5, line:444:57>
|   | `-VarDecl 0x1815e113158 <line:443:5, line:444:56> line:443:27 used two120m104m64 'const widelimb':'const int' static cinit
|   |   `-BinaryOperator 0x1815e113498 <col:43, line:444:56> 'int' '-'
|   |     |-BinaryOperator 0x1815e113390 <line:443:43, line:444:31> 'int' '-'
|   |     | |-ParenExpr 0x1815e113288 <line:443:43, col:65> 'widelimb':'int'
|   |     | | `-BinaryOperator 0x1815e113268 <col:44, col:62> 'widelimb':'int' '<<'
|   |     | |   |-ParenExpr 0x1815e113220 <col:44, col:57> 'widelimb':'int'
|   |     | |   | `-CStyleCastExpr 0x1815e1131f8 <col:45, col:56> 'widelimb':'int' <NoOp>
|   |     | |   |   `-IntegerLiteral 0x1815e1131c0 <col:56> 'int' 1
|   |     | |   `-IntegerLiteral 0x1815e113240 <col:62> 'int' 120
|   |     | `-ParenExpr 0x1815e113370 <line:444:9, col:31> 'widelimb':'int'
|   |     |   `-BinaryOperator 0x1815e113350 <col:10, col:28> 'widelimb':'int' '<<'
|   |     |     |-ParenExpr 0x1815e113308 <col:10, col:23> 'widelimb':'int'
|   |     |     | `-CStyleCastExpr 0x1815e1132e0 <col:11, col:22> 'widelimb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x1815e1132a8 <col:22> 'int' 1
|   |     |     `-IntegerLiteral 0x1815e113328 <col:28> 'int' 104
|   |     `-ParenExpr 0x1815e113478 <col:35, col:56> 'widelimb':'int'
|   |       `-BinaryOperator 0x1815e113458 <col:36, col:54> 'widelimb':'int' '<<'
|   |         |-ParenExpr 0x1815e113410 <col:36, col:49> 'widelimb':'int'
|   |         | `-CStyleCastExpr 0x1815e1133e8 <col:37, col:48> 'widelimb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1815e1133b0 <col:48> 'int' 1
|   |         `-IntegerLiteral 0x1815e113430 <col:54> 'int' 64
|   |-CompoundAssignOperator 0x1815e1135a0 <line:447:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e113530 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e113518 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1134d0 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1134f0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e113588 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e113550 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e112d80 'two120' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e1136e8 <line:448:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e113678 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e113660 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e113618 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e113638 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e1136d0 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e113698 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e112ed8 'two120m64' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e113818 <line:449:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1137c0 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1137a8 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e113760 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e113780 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e113800 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1137e0 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e112ed8 'two120m64' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e113900 <line:450:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1138a8 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e113890 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e113848 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e113868 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1815e1138e8 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1138c8 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e112d80 'two120' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e113a00 <line:451:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e113990 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e113978 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e113930 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e113950 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1815e1139e8 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1139b0 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e113158 'two120m104m64' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e113b40 <line:452:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e113ae8 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e113ad0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e113a88 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e113aa8 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1815e113b28 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e113b08 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e112ed8 'two120m64' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e113c28 <line:453:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e113bd0 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e113bb8 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e113b70 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e113b90 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x1815e113c10 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e113bf0 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e112ed8 'two120m64' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e113d70 <line:455:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e113cb8 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e113ca0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e113c58 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e113c78 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e113d58 <col:15, col:19> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e113d38 <col:15, col:19> 'const widelimb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1815e113d20 <col:15> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e113cd8 <col:15> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e112b60 'in' 'const widelimb *':'const widelimb *'
|   |     `-IntegerLiteral 0x1815e113cf8 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1815e113eb8 <line:456:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e113e00 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e113de8 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e113da0 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e113dc0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e113ea0 <col:15, col:19> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e113e80 <col:15, col:19> 'const widelimb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1815e113e68 <col:15> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e113e20 <col:15> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e112b60 'in' 'const widelimb *':'const widelimb *'
|   |     `-IntegerLiteral 0x1815e113e40 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1815e114000 <line:457:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e113f48 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e113f30 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e113ee8 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e113f08 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e113fe8 <col:15, col:19> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e113fc8 <col:15, col:19> 'const widelimb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1815e113fb0 <col:15> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e113f68 <col:15> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e112b60 'in' 'const widelimb *':'const widelimb *'
|   |     `-IntegerLiteral 0x1815e113f88 <col:18> 'int' 2
|   |-CompoundAssignOperator 0x1815e114148 <line:458:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e114090 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e114078 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e114030 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e114050 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1815e114130 <col:15, col:19> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e114110 <col:15, col:19> 'const widelimb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1815e1140f8 <col:15> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e1140b0 <col:15> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e112b60 'in' 'const widelimb *':'const widelimb *'
|   |     `-IntegerLiteral 0x1815e1140d0 <col:18> 'int' 3
|   |-CompoundAssignOperator 0x1815e114290 <line:459:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1141d8 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1141c0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e114178 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e114198 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1815e114278 <col:15, col:19> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e114258 <col:15, col:19> 'const widelimb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1815e114240 <col:15> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e1141f8 <col:15> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e112b60 'in' 'const widelimb *':'const widelimb *'
|   |     `-IntegerLiteral 0x1815e114218 <col:18> 'int' 4
|   |-CompoundAssignOperator 0x1815e1143d8 <line:460:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e114320 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e114308 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1142c0 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1142e0 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1815e1143c0 <col:15, col:19> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e1143a0 <col:15, col:19> 'const widelimb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1815e114388 <col:15> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e114340 <col:15> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e112b60 'in' 'const widelimb *':'const widelimb *'
|   |     `-IntegerLiteral 0x1815e114360 <col:18> 'int' 5
|   `-CompoundAssignOperator 0x1815e114520 <line:461:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1815e114468 <col:5, col:10> 'widelimb':'int' lvalue
|     | |-ImplicitCastExpr 0x1815e114450 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e114408 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e112a40 'out' 'widelimb *':'widelimb *'
|     | `-IntegerLiteral 0x1815e114428 <col:9> 'int' 6
|     `-ImplicitCastExpr 0x1815e114508 <col:15, col:19> 'widelimb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1815e1144e8 <col:15, col:19> 'const widelimb':'const int' lvalue
|         |-ImplicitCastExpr 0x1815e1144d0 <col:15> 'const widelimb *':'const widelimb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1815e114488 <col:15> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e112b60 'in' 'const widelimb *':'const widelimb *'
|         `-IntegerLiteral 0x1815e1144a8 <col:18> 'int' 6
|-FunctionDecl 0x1815e1147b8 <line:466:1, line:485:1> line:466:13 used felem_diff_128_64 'void (widelimb *, const limb *)' static
| |-ParmVarDecl 0x1815e1145f8 <col:31, col:41> col:41 used out 'widelimb *':'widelimb *'
| |-ParmVarDecl 0x1815e114670 <col:46, col:58> col:58 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e115af8 <line:467:1, line:485:1>
|   |-DeclStmt 0x1815e114ae8 <line:468:5, line:469:30>
|   | `-VarDecl 0x1815e114890 <line:468:5, line:469:29> line:468:27 used two64p8 'const widelimb':'const int' static cinit
|   |   `-BinaryOperator 0x1815e114ac8 <col:37, line:469:29> 'int' '+'
|   |     |-ParenExpr 0x1815e1149c0 <line:468:37, col:58> 'widelimb':'int'
|   |     | `-BinaryOperator 0x1815e1149a0 <col:38, col:56> 'widelimb':'int' '<<'
|   |     |   |-ParenExpr 0x1815e114958 <col:38, col:51> 'widelimb':'int'
|   |     |   | `-CStyleCastExpr 0x1815e114930 <col:39, col:50> 'widelimb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x1815e1148f8 <col:50> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e114978 <col:56> 'int' 64
|   |     `-ParenExpr 0x1815e114aa8 <line:469:9, col:29> 'widelimb':'int'
|   |       `-BinaryOperator 0x1815e114a88 <col:10, col:28> 'widelimb':'int' '<<'
|   |         |-ParenExpr 0x1815e114a40 <col:10, col:23> 'widelimb':'int'
|   |         | `-CStyleCastExpr 0x1815e114a18 <col:11, col:22> 'widelimb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1815e1149e0 <col:22> 'int' 1
|   |         `-IntegerLiteral 0x1815e114a60 <col:28> 'int' 8
|   |-DeclStmt 0x1815e114d68 <line:470:5, line:471:30>
|   | `-VarDecl 0x1815e114b10 <line:470:5, line:471:29> line:470:27 used two64m8 'const widelimb':'const int' static cinit
|   |   `-BinaryOperator 0x1815e114d48 <col:37, line:471:29> 'int' '-'
|   |     |-ParenExpr 0x1815e114c40 <line:470:37, col:58> 'widelimb':'int'
|   |     | `-BinaryOperator 0x1815e114c20 <col:38, col:56> 'widelimb':'int' '<<'
|   |     |   |-ParenExpr 0x1815e114bd8 <col:38, col:51> 'widelimb':'int'
|   |     |   | `-CStyleCastExpr 0x1815e114bb0 <col:39, col:50> 'widelimb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x1815e114b78 <col:50> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e114bf8 <col:56> 'int' 64
|   |     `-ParenExpr 0x1815e114d28 <line:471:9, col:29> 'widelimb':'int'
|   |       `-BinaryOperator 0x1815e114d08 <col:10, col:28> 'widelimb':'int' '<<'
|   |         |-ParenExpr 0x1815e114cc0 <col:10, col:23> 'widelimb':'int'
|   |         | `-CStyleCastExpr 0x1815e114c98 <col:11, col:22> 'widelimb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1815e114c60 <col:22> 'int' 1
|   |         `-IntegerLiteral 0x1815e114ce0 <col:28> 'int' 8
|   |-DeclStmt 0x1815e1150f0 <line:472:5, line:473:55>
|   | `-VarDecl 0x1815e114d90 <line:472:5, line:473:54> line:472:27 used two64m48m8 'const widelimb':'const int' static cinit
|   |   `-BinaryOperator 0x1815e1150d0 <col:40, line:473:54> 'int' '-'
|   |     |-BinaryOperator 0x1815e114fc8 <line:472:40, line:473:30> 'int' '-'
|   |     | |-ParenExpr 0x1815e114ec0 <line:472:40, col:61> 'widelimb':'int'
|   |     | | `-BinaryOperator 0x1815e114ea0 <col:41, col:59> 'widelimb':'int' '<<'
|   |     | |   |-ParenExpr 0x1815e114e58 <col:41, col:54> 'widelimb':'int'
|   |     | |   | `-CStyleCastExpr 0x1815e114e30 <col:42, col:53> 'widelimb':'int' <NoOp>
|   |     | |   |   `-IntegerLiteral 0x1815e114df8 <col:53> 'int' 1
|   |     | |   `-IntegerLiteral 0x1815e114e78 <col:59> 'int' 64
|   |     | `-ParenExpr 0x1815e114fa8 <line:473:9, col:30> 'widelimb':'int'
|   |     |   `-BinaryOperator 0x1815e114f88 <col:10, col:28> 'widelimb':'int' '<<'
|   |     |     |-ParenExpr 0x1815e114f40 <col:10, col:23> 'widelimb':'int'
|   |     |     | `-CStyleCastExpr 0x1815e114f18 <col:11, col:22> 'widelimb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x1815e114ee0 <col:22> 'int' 1
|   |     |     `-IntegerLiteral 0x1815e114f60 <col:28> 'int' 48
|   |     `-ParenExpr 0x1815e1150b0 <col:34, col:54> 'widelimb':'int'
|   |       `-BinaryOperator 0x1815e115090 <col:35, col:53> 'widelimb':'int' '<<'
|   |         |-ParenExpr 0x1815e115048 <col:35, col:48> 'widelimb':'int'
|   |         | `-CStyleCastExpr 0x1815e115020 <col:36, col:47> 'widelimb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1815e114fe8 <col:47> 'int' 1
|   |         `-IntegerLiteral 0x1815e115068 <col:53> 'int' 8
|   |-CompoundAssignOperator 0x1815e1151d8 <line:476:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e115168 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e115150 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e115108 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1145f8 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e115128 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1151c0 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e115188 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e114890 'two64p8' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e115320 <line:477:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1152b0 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e115298 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e115250 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1145f8 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e115270 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e115308 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1152d0 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e114d90 'two64m48m8' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e115468 <line:478:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1153f8 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1153e0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e115398 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1145f8 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1153b8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e115450 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e115418 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e114b10 'two64m8' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e115598 <line:479:5, col:15> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e115540 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e115528 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1154e0 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1145f8 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e115500 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1815e115580 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e115560 <col:15> 'const widelimb':'const int' lvalue Var 0x1815e114b10 'two64m8' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e1156e0 <line:481:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e115628 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e115610 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1155c8 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1145f8 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1155e8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1156c8 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e1156a8 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e115690 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e115648 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e114670 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e115668 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x1815e115828 <line:482:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e115770 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e115758 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e115710 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1145f8 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e115730 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e115810 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e1157f0 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e1157d8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e115790 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e114670 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e1157b0 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x1815e115970 <line:483:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e1158b8 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1158a0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e115858 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1145f8 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e115878 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e115958 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e115938 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x1815e115920 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e1158d8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e114670 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x1815e1158f8 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x1815e115ac8 <line:484:5, col:19> 'widelimb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x1815e115a00 <col:5, col:10> 'widelimb':'int' lvalue
|     | |-ImplicitCastExpr 0x1815e1159e8 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e1159a0 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1145f8 'out' 'widelimb *':'widelimb *'
|     | `-IntegerLiteral 0x1815e1159c0 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1815e115ab0 <col:15, col:19> 'limb':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x1815e115a90 <col:15, col:19> 'const limb':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x1815e115a78 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x1815e115a20 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x1815e114670 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x1815e115a50 <col:18> 'int' 3
|-FunctionDecl 0x1815e115d28 <line:491:1, line:497:1> line:491:13 used felem_scalar 'void (limb *, const limb)' static
| |-ParmVarDecl 0x1815e115b70 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e115be8 <col:37, col:48> col:48 used scalar 'const limb':'const unsigned long long'
| `-CompoundStmt 0x1815e116190 <line:492:1, line:497:1>
|   |-CompoundAssignOperator 0x1815e115ea8 <line:493:5, col:15> 'limb':'unsigned long long' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e115e50 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e115e38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e115df0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e115b70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e115e10 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e115e90 <col:15> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e115e70 <col:15> 'const limb':'const unsigned long long' lvalue ParmVar 0x1815e115be8 'scalar' 'const limb':'const unsigned long long'
|   |-CompoundAssignOperator 0x1815e115f90 <line:494:5, col:15> 'limb':'unsigned long long' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e115f38 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e115f20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e115ed8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e115b70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e115ef8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e115f78 <col:15> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e115f58 <col:15> 'const limb':'const unsigned long long' lvalue ParmVar 0x1815e115be8 'scalar' 'const limb':'const unsigned long long'
|   |-CompoundAssignOperator 0x1815e116078 <line:495:5, col:15> 'limb':'unsigned long long' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e116020 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e116008 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e115fc0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e115b70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e115fe0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e116060 <col:15> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e116040 <col:15> 'const limb':'const unsigned long long' lvalue ParmVar 0x1815e115be8 'scalar' 'const limb':'const unsigned long long'
|   `-CompoundAssignOperator 0x1815e116160 <line:496:5, col:15> 'limb':'unsigned long long' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x1815e116108 <col:5, col:10> 'limb':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1815e1160f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e1160a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e115b70 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1815e1160c8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1815e116148 <col:15> 'limb':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x1815e116128 <col:15> 'const limb':'const unsigned long long' lvalue ParmVar 0x1815e115be8 'scalar' 'const limb':'const unsigned long long'
|-FunctionDecl 0x1815e116388 <line:503:1, line:512:1> line:503:13 used widefelem_scalar 'void (widelimb *, const widelimb)' static
| |-ParmVarDecl 0x1815e1161d0 <col:30, col:40> col:40 used out 'widelimb *':'widelimb *'
| |-ParmVarDecl 0x1815e116248 <col:45, col:60> col:60 used scalar 'const widelimb':'const int'
| `-CompoundStmt 0x1815e116aa8 <line:504:1, line:512:1>
|   |-CompoundAssignOperator 0x1815e116508 <line:505:5, col:15> 'widelimb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1164b0 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e116498 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e116450 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1161d0 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e116470 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1164f0 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1164d0 <col:15> 'const widelimb':'const int' lvalue ParmVar 0x1815e116248 'scalar' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e1165f0 <line:506:5, col:15> 'widelimb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e116598 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e116580 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e116538 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1161d0 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e116558 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e1165d8 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1165b8 <col:15> 'const widelimb':'const int' lvalue ParmVar 0x1815e116248 'scalar' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e1166d8 <line:507:5, col:15> 'widelimb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e116680 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e116668 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e116620 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1161d0 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e116640 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e1166c0 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1166a0 <col:15> 'const widelimb':'const int' lvalue ParmVar 0x1815e116248 'scalar' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e1167c0 <line:508:5, col:15> 'widelimb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e116768 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e116750 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e116708 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1161d0 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e116728 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1815e1167a8 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e116788 <col:15> 'const widelimb':'const int' lvalue ParmVar 0x1815e116248 'scalar' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e1168a8 <line:509:5, col:15> 'widelimb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e116850 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e116838 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1167f0 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1161d0 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e116810 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1815e116890 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e116870 <col:15> 'const widelimb':'const int' lvalue ParmVar 0x1815e116248 'scalar' 'const widelimb':'const int'
|   |-CompoundAssignOperator 0x1815e116990 <line:510:5, col:15> 'widelimb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e116938 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e116920 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1168d8 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1161d0 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1168f8 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1815e116978 <col:15> 'widelimb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e116958 <col:15> 'const widelimb':'const int' lvalue ParmVar 0x1815e116248 'scalar' 'const widelimb':'const int'
|   `-CompoundAssignOperator 0x1815e116a78 <line:511:5, col:15> 'widelimb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x1815e116a20 <col:5, col:10> 'widelimb':'int' lvalue
|     | |-ImplicitCastExpr 0x1815e116a08 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e1169c0 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1161d0 'out' 'widelimb *':'widelimb *'
|     | `-IntegerLiteral 0x1815e1169e0 <col:9> 'int' 6
|     `-ImplicitCastExpr 0x1815e116a60 <col:15> 'widelimb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x1815e116a40 <col:15> 'const widelimb':'const int' lvalue ParmVar 0x1815e116248 'scalar' 'const widelimb':'const int'
|-FunctionDecl 0x1815e116c40 <line:515:1, line:528:1> line:515:13 used felem_square 'void (widelimb *, const limb *)' static
| |-ParmVarDecl 0x1815e116b00 <col:26, col:36> col:36 used out 'widelimb *':'widelimb *'
| |-ParmVarDecl 0x1815e116b78 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e1fdde0 <line:516:1, line:528:1>
|   |-DeclStmt 0x1815e116e90 <line:517:5, col:26>
|   | |-VarDecl 0x1815e116d18 <col:5, col:10> col:10 used tmp0 'limb':'unsigned long long'
|   | |-VarDecl 0x1815e116d90 <col:5, col:16> col:16 used tmp1 'limb':'unsigned long long'
|   | `-VarDecl 0x1815e116e08 <col:5, col:22> col:22 used tmp2 'limb':'unsigned long long'
|   |-BinaryOperator 0x1815e116fd8 <line:518:5, col:20> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e116ea8 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e116d18 'tmp0' 'limb':'unsigned long long'
|   | `-BinaryOperator 0x1815e116fb8 <col:12, col:20> 'unsigned long long' '*'
|   |   |-ImplicitCastExpr 0x1815e116fa0 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1815e116ee0 <col:12> 'int' 2
|   |   `-ImplicitCastExpr 0x1815e116f88 <col:16, col:20> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e116f68 <col:16, col:20> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e116f50 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e116f08 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e116f28 <col:19> 'int' 0
|   |-BinaryOperator 0x1815e117128 <line:519:5, col:20> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e116ff8 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e116d90 'tmp1' 'limb':'unsigned long long'
|   | `-BinaryOperator 0x1815e117108 <col:12, col:20> 'unsigned long long' '*'
|   |   |-ImplicitCastExpr 0x1815e1170f0 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1815e117030 <col:12> 'int' 2
|   |   `-ImplicitCastExpr 0x1815e1170d8 <col:16, col:20> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e1170b8 <col:16, col:20> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1170a0 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e117058 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e117078 <col:19> 'int' 1
|   |-BinaryOperator 0x1815e117278 <line:520:5, col:20> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e117148 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e116e08 'tmp2' 'limb':'unsigned long long'
|   | `-BinaryOperator 0x1815e117258 <col:12, col:20> 'unsigned long long' '*'
|   |   |-ImplicitCastExpr 0x1815e117240 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1815e117180 <col:12> 'int' 2
|   |   `-ImplicitCastExpr 0x1815e117228 <col:16, col:20> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e117208 <col:16, col:20> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1171f0 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e1171a8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e1171c8 <col:19> 'int' 2
|   |-BinaryOperator 0x1815e1174f0 <line:521:5, col:39> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1172f8 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1172e0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e117298 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e116b00 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1172b8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1174d8 <col:14, col:39> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1174b8 <col:14, col:39> 'unsigned long long' '*'
|   |     |-ImplicitCastExpr 0x1815e1174a0 <col:14, col:31> 'unsigned long long' <IntegralCast>
|   |     | `-ParenExpr 0x1815e1173e8 <col:14, col:31> 'widelimb':'int'
|   |     |   `-CStyleCastExpr 0x1815e1173c0 <col:15, col:30> 'widelimb':'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x1815e1173a8 <col:26, col:30> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |       `-ArraySubscriptExpr 0x1815e117378 <col:26, col:30> 'const limb':'const unsigned long long' lvalue
|   |     |         |-ImplicitCastExpr 0x1815e117360 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     |         | `-DeclRefExpr 0x1815e117318 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |     |         `-IntegerLiteral 0x1815e117338 <col:29> 'int' 0
|   |     `-ImplicitCastExpr 0x1815e117488 <col:35, col:39> 'limb':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x1815e117468 <col:35, col:39> 'const limb':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x1815e117450 <col:35> 'const limb *':'const limb *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1815e117408 <col:35> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |         `-IntegerLiteral 0x1815e117428 <col:38> 'int' 0
|   |-BinaryOperator 0x1815e117708 <line:522:5, col:35> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e117570 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e117558 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e117510 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e116b00 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e117530 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e1176f0 <col:14, col:35> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1176d0 <col:14, col:35> 'unsigned long long' '*'
|   |     |-ImplicitCastExpr 0x1815e1176b8 <col:14, col:31> 'unsigned long long' <IntegralCast>
|   |     | `-ParenExpr 0x1815e117660 <col:14, col:31> 'widelimb':'int'
|   |     |   `-CStyleCastExpr 0x1815e117638 <col:15, col:30> 'widelimb':'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x1815e117620 <col:26, col:30> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |       `-ArraySubscriptExpr 0x1815e1175f0 <col:26, col:30> 'const limb':'const unsigned long long' lvalue
|   |     |         |-ImplicitCastExpr 0x1815e1175d8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     |         | `-DeclRefExpr 0x1815e117590 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |     |         `-IntegerLiteral 0x1815e1175b0 <col:29> 'int' 0
|   |     `-ImplicitCastExpr 0x1815e1176a0 <col:35> 'limb':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1815e117680 <col:35> 'limb':'unsigned long long' lvalue Var 0x1815e116d90 'tmp1' 'limb':'unsigned long long'
|   |-BinaryOperator 0x1815e1fd1a0 <line:523:5, col:67> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e117788 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e117770 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e117728 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e116b00 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e117748 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e1fd188 <col:14, col:67> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1fd168 <col:14, col:67> 'unsigned long long' '+'
|   |     |-BinaryOperator 0x1815e1178e8 <col:14, col:35> 'unsigned long long' '*'
|   |     | |-ImplicitCastExpr 0x1815e1178d0 <col:14, col:31> 'unsigned long long' <IntegralCast>
|   |     | | `-ParenExpr 0x1815e117878 <col:14, col:31> 'widelimb':'int'
|   |     | |   `-CStyleCastExpr 0x1815e117850 <col:15, col:30> 'widelimb':'int' <IntegralCast>
|   |     | |     `-ImplicitCastExpr 0x1815e117838 <col:26, col:30> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     | |       `-ArraySubscriptExpr 0x1815e117808 <col:26, col:30> 'const limb':'const unsigned long long' lvalue
|   |     | |         |-ImplicitCastExpr 0x1815e1177f0 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     | |         | `-DeclRefExpr 0x1815e1177a8 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |     | |         `-IntegerLiteral 0x1815e1177c8 <col:29> 'int' 0
|   |     | `-ImplicitCastExpr 0x1815e1178b8 <col:35> 'limb':'unsigned long long' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1815e117898 <col:35> 'limb':'unsigned long long' lvalue Var 0x1815e116e08 'tmp2' 'limb':'unsigned long long'
|   |     `-BinaryOperator 0x1815e1fd148 <col:42, col:67> 'unsigned long long' '*'
|   |       |-ImplicitCastExpr 0x1815e1fd130 <col:42, col:59> 'unsigned long long' <IntegralCast>
|   |       | `-ParenExpr 0x1815e1179d8 <col:42, col:59> 'widelimb':'int'
|   |       |   `-CStyleCastExpr 0x1815e1179b0 <col:43, col:58> 'widelimb':'int' <IntegralCast>
|   |       |     `-ImplicitCastExpr 0x1815e117998 <col:54, col:58> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |       `-ArraySubscriptExpr 0x1815e117968 <col:54, col:58> 'const limb':'const unsigned long long' lvalue
|   |       |         |-ImplicitCastExpr 0x1815e117950 <col:54> 'const limb *':'const limb *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x1815e117908 <col:54> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |       |         `-IntegerLiteral 0x1815e117928 <col:57> 'int' 1
|   |       `-ImplicitCastExpr 0x1815e1fd118 <col:63, col:67> 'limb':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x1815e1fd0f8 <col:63, col:67> 'const limb':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x1815e1fd0e0 <col:63> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1815e1179f8 <col:63> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x1815e117a18 <col:66> 'int' 1
|   |-BinaryOperator 0x1815e1fd538 <line:524:5, col:63> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1fd220 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fd208 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1fd1c0 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e116b00 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1fd1e0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1815e1fd520 <col:14, col:63> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1fd500 <col:14, col:63> 'unsigned long long' '+'
|   |     |-BinaryOperator 0x1815e1fd380 <col:14, col:35> 'unsigned long long' '*'
|   |     | |-ImplicitCastExpr 0x1815e1fd368 <col:14, col:31> 'unsigned long long' <IntegralCast>
|   |     | | `-ParenExpr 0x1815e1fd310 <col:14, col:31> 'widelimb':'int'
|   |     | |   `-CStyleCastExpr 0x1815e1fd2e8 <col:15, col:30> 'widelimb':'int' <IntegralCast>
|   |     | |     `-ImplicitCastExpr 0x1815e1fd2d0 <col:26, col:30> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     | |       `-ArraySubscriptExpr 0x1815e1fd2a0 <col:26, col:30> 'const limb':'const unsigned long long' lvalue
|   |     | |         |-ImplicitCastExpr 0x1815e1fd288 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     | |         | `-DeclRefExpr 0x1815e1fd240 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |     | |         `-IntegerLiteral 0x1815e1fd260 <col:29> 'int' 3
|   |     | `-ImplicitCastExpr 0x1815e1fd350 <col:35> 'limb':'unsigned long long' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1815e1fd330 <col:35> 'limb':'unsigned long long' lvalue Var 0x1815e116d18 'tmp0' 'limb':'unsigned long long'
|   |     `-BinaryOperator 0x1815e1fd4e0 <col:42, col:63> 'unsigned long long' '*'
|   |       |-ImplicitCastExpr 0x1815e1fd4c8 <col:42, col:59> 'unsigned long long' <IntegralCast>
|   |       | `-ParenExpr 0x1815e1fd470 <col:42, col:59> 'widelimb':'int'
|   |       |   `-CStyleCastExpr 0x1815e1fd448 <col:43, col:58> 'widelimb':'int' <IntegralCast>
|   |       |     `-ImplicitCastExpr 0x1815e1fd430 <col:54, col:58> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |       `-ArraySubscriptExpr 0x1815e1fd400 <col:54, col:58> 'const limb':'const unsigned long long' lvalue
|   |       |         |-ImplicitCastExpr 0x1815e1fd3e8 <col:54> 'const limb *':'const limb *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x1815e1fd3a0 <col:54> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |       |         `-IntegerLiteral 0x1815e1fd3c0 <col:57> 'int' 1
|   |       `-ImplicitCastExpr 0x1815e1fd4b0 <col:63> 'limb':'unsigned long long' <LValueToRValue>
|   |         `-DeclRefExpr 0x1815e1fd490 <col:63> 'limb':'unsigned long long' lvalue Var 0x1815e116e08 'tmp2' 'limb':'unsigned long long'
|   |-BinaryOperator 0x1815e1fd930 <line:525:5, col:67> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1fd5b8 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fd5a0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1fd558 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e116b00 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1fd578 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1815e1fd918 <col:14, col:67> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1fd8f8 <col:14, col:67> 'unsigned long long' '+'
|   |     |-BinaryOperator 0x1815e1fd718 <col:14, col:35> 'unsigned long long' '*'
|   |     | |-ImplicitCastExpr 0x1815e1fd700 <col:14, col:31> 'unsigned long long' <IntegralCast>
|   |     | | `-ParenExpr 0x1815e1fd6a8 <col:14, col:31> 'widelimb':'int'
|   |     | |   `-CStyleCastExpr 0x1815e1fd680 <col:15, col:30> 'widelimb':'int' <IntegralCast>
|   |     | |     `-ImplicitCastExpr 0x1815e1fd668 <col:26, col:30> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     | |       `-ArraySubscriptExpr 0x1815e1fd638 <col:26, col:30> 'const limb':'const unsigned long long' lvalue
|   |     | |         |-ImplicitCastExpr 0x1815e1fd620 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     | |         | `-DeclRefExpr 0x1815e1fd5d8 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |     | |         `-IntegerLiteral 0x1815e1fd5f8 <col:29> 'int' 3
|   |     | `-ImplicitCastExpr 0x1815e1fd6e8 <col:35> 'limb':'unsigned long long' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1815e1fd6c8 <col:35> 'limb':'unsigned long long' lvalue Var 0x1815e116d90 'tmp1' 'limb':'unsigned long long'
|   |     `-BinaryOperator 0x1815e1fd8d8 <col:42, col:67> 'unsigned long long' '*'
|   |       |-ImplicitCastExpr 0x1815e1fd8c0 <col:42, col:59> 'unsigned long long' <IntegralCast>
|   |       | `-ParenExpr 0x1815e1fd808 <col:42, col:59> 'widelimb':'int'
|   |       |   `-CStyleCastExpr 0x1815e1fd7e0 <col:43, col:58> 'widelimb':'int' <IntegralCast>
|   |       |     `-ImplicitCastExpr 0x1815e1fd7c8 <col:54, col:58> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |       `-ArraySubscriptExpr 0x1815e1fd798 <col:54, col:58> 'const limb':'const unsigned long long' lvalue
|   |       |         |-ImplicitCastExpr 0x1815e1fd780 <col:54> 'const limb *':'const limb *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x1815e1fd738 <col:54> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |       |         `-IntegerLiteral 0x1815e1fd758 <col:57> 'int' 2
|   |       `-ImplicitCastExpr 0x1815e1fd8a8 <col:63, col:67> 'limb':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x1815e1fd888 <col:63, col:67> 'const limb':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x1815e1fd870 <col:63> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1815e1fd828 <col:63> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x1815e1fd848 <col:66> 'int' 2
|   |-BinaryOperator 0x1815e1fdb48 <line:526:5, col:35> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1fd9b0 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fd998 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1fd950 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e116b00 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1fd970 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1815e1fdb30 <col:14, col:35> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1fdb10 <col:14, col:35> 'unsigned long long' '*'
|   |     |-ImplicitCastExpr 0x1815e1fdaf8 <col:14, col:31> 'unsigned long long' <IntegralCast>
|   |     | `-ParenExpr 0x1815e1fdaa0 <col:14, col:31> 'widelimb':'int'
|   |     |   `-CStyleCastExpr 0x1815e1fda78 <col:15, col:30> 'widelimb':'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x1815e1fda60 <col:26, col:30> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |       `-ArraySubscriptExpr 0x1815e1fda30 <col:26, col:30> 'const limb':'const unsigned long long' lvalue
|   |     |         |-ImplicitCastExpr 0x1815e1fda18 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     |         | `-DeclRefExpr 0x1815e1fd9d0 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|   |     |         `-IntegerLiteral 0x1815e1fd9f0 <col:29> 'int' 3
|   |     `-ImplicitCastExpr 0x1815e1fdae0 <col:35> 'limb':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1815e1fdac0 <col:35> 'limb':'unsigned long long' lvalue Var 0x1815e116e08 'tmp2' 'limb':'unsigned long long'
|   `-BinaryOperator 0x1815e1fddc0 <line:527:5, col:39> 'widelimb':'int' '='
|     |-ArraySubscriptExpr 0x1815e1fdbc8 <col:5, col:10> 'widelimb':'int' lvalue
|     | |-ImplicitCastExpr 0x1815e1fdbb0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e1fdb68 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e116b00 'out' 'widelimb *':'widelimb *'
|     | `-IntegerLiteral 0x1815e1fdb88 <col:9> 'int' 6
|     `-ImplicitCastExpr 0x1815e1fdda8 <col:14, col:39> 'widelimb':'int' <IntegralCast>
|       `-BinaryOperator 0x1815e1fdd88 <col:14, col:39> 'unsigned long long' '*'
|         |-ImplicitCastExpr 0x1815e1fdd70 <col:14, col:31> 'unsigned long long' <IntegralCast>
|         | `-ParenExpr 0x1815e1fdcb8 <col:14, col:31> 'widelimb':'int'
|         |   `-CStyleCastExpr 0x1815e1fdc90 <col:15, col:30> 'widelimb':'int' <IntegralCast>
|         |     `-ImplicitCastExpr 0x1815e1fdc78 <col:26, col:30> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|         |       `-ArraySubscriptExpr 0x1815e1fdc48 <col:26, col:30> 'const limb':'const unsigned long long' lvalue
|         |         |-ImplicitCastExpr 0x1815e1fdc30 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|         |         | `-DeclRefExpr 0x1815e1fdbe8 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|         |         `-IntegerLiteral 0x1815e1fdc08 <col:29> 'int' 3
|         `-ImplicitCastExpr 0x1815e1fdd58 <col:35, col:39> 'limb':'unsigned long long' <LValueToRValue>
|           `-ArraySubscriptExpr 0x1815e1fdd38 <col:35, col:39> 'const limb':'const unsigned long long' lvalue
|             |-ImplicitCastExpr 0x1815e1fdd20 <col:35> 'const limb *':'const limb *' <LValueToRValue>
|             | `-DeclRefExpr 0x1815e1fdcd8 <col:35> 'const limb *':'const limb *' lvalue ParmVar 0x1815e116b78 'in' 'const limb *':'const limb *'
|             `-IntegerLiteral 0x1815e1fdcf8 <col:38> 'int' 3
|-FunctionDecl 0x1815e1fe0b8 <line:531:1, line:543:1> line:531:13 used felem_mul 'void (widelimb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x1815e1fde58 <col:23, col:33> col:33 used out 'widelimb *':'widelimb *'
| |-ParmVarDecl 0x1815e1fded0 <col:38, col:50> col:50 used in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1815e1fdf48 <col:55, col:67> col:67 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e1fc3b0 <line:532:1, line:543:1>
|   |-BinaryOperator 0x1815e1fe3e0 <line:533:5, col:41> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1fe1e8 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fe1d0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1fe188 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1fde58 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1fe1a8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1fe3c8 <col:14, col:41> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1fe3a8 <col:14, col:41> 'unsigned long long' '*'
|   |     |-ImplicitCastExpr 0x1815e1fe390 <col:14, col:32> 'unsigned long long' <IntegralCast>
|   |     | `-ParenExpr 0x1815e1fe2d8 <col:14, col:32> 'widelimb':'int'
|   |     |   `-CStyleCastExpr 0x1815e1fe2b0 <col:15, col:31> 'widelimb':'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x1815e1fe298 <col:26, col:31> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |       `-ArraySubscriptExpr 0x1815e1fe268 <col:26, col:31> 'const limb':'const unsigned long long' lvalue
|   |     |         |-ImplicitCastExpr 0x1815e1fe250 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     |         | `-DeclRefExpr 0x1815e1fe208 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |     |         `-IntegerLiteral 0x1815e1fe228 <col:30> 'int' 0
|   |     `-ImplicitCastExpr 0x1815e1fe378 <col:36, col:41> 'limb':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x1815e1fe358 <col:36, col:41> 'const limb':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x1815e1fe340 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1815e1fe2f8 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |         `-IntegerLiteral 0x1815e1fe318 <col:40> 'int' 0
|   |-BinaryOperator 0x1815e1fe838 <line:534:5, col:72> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1fe460 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fe448 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1fe400 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1fde58 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1fe420 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e1fe820 <col:14, col:72> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1fe800 <col:14, col:72> 'unsigned long long' '+'
|   |     |-BinaryOperator 0x1815e1fe620 <col:14, col:41> 'unsigned long long' '*'
|   |     | |-ImplicitCastExpr 0x1815e1fe608 <col:14, col:32> 'unsigned long long' <IntegralCast>
|   |     | | `-ParenExpr 0x1815e1fe550 <col:14, col:32> 'widelimb':'int'
|   |     | |   `-CStyleCastExpr 0x1815e1fe528 <col:15, col:31> 'widelimb':'int' <IntegralCast>
|   |     | |     `-ImplicitCastExpr 0x1815e1fe510 <col:26, col:31> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     | |       `-ArraySubscriptExpr 0x1815e1fe4e0 <col:26, col:31> 'const limb':'const unsigned long long' lvalue
|   |     | |         |-ImplicitCastExpr 0x1815e1fe4c8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     | |         | `-DeclRefExpr 0x1815e1fe480 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |     | |         `-IntegerLiteral 0x1815e1fe4a0 <col:30> 'int' 0
|   |     | `-ImplicitCastExpr 0x1815e1fe5f0 <col:36, col:41> 'limb':'unsigned long long' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1815e1fe5d0 <col:36, col:41> 'const limb':'const unsigned long long' lvalue
|   |     |     |-ImplicitCastExpr 0x1815e1fe5b8 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x1815e1fe570 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |     |     `-IntegerLiteral 0x1815e1fe590 <col:40> 'int' 1
|   |     `-BinaryOperator 0x1815e1fe7e0 <col:45, col:72> 'unsigned long long' '*'
|   |       |-ImplicitCastExpr 0x1815e1fe7c8 <col:45, col:63> 'unsigned long long' <IntegralCast>
|   |       | `-ParenExpr 0x1815e1fe710 <col:45, col:63> 'widelimb':'int'
|   |       |   `-CStyleCastExpr 0x1815e1fe6e8 <col:46, col:62> 'widelimb':'int' <IntegralCast>
|   |       |     `-ImplicitCastExpr 0x1815e1fe6d0 <col:57, col:62> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |       `-ArraySubscriptExpr 0x1815e1fe6a0 <col:57, col:62> 'const limb':'const unsigned long long' lvalue
|   |       |         |-ImplicitCastExpr 0x1815e1fe688 <col:57> 'const limb *':'const limb *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x1815e1fe640 <col:57> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |       |         `-IntegerLiteral 0x1815e1fe660 <col:61> 'int' 1
|   |       `-ImplicitCastExpr 0x1815e1fe7b0 <col:67, col:72> 'limb':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x1815e1fe790 <col:67, col:72> 'const limb':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x1815e1fe778 <col:67> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1815e1fe730 <col:67> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x1815e1fe750 <col:71> 'int' 0
|   |-BinaryOperator 0x1815e1fee70 <line:535:5, line:536:41> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1fe8b8 <line:535:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fe8a0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1fe858 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1fde58 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1fe878 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e1fee58 <col:14, line:536:41> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1fee38 <line:535:14, line:536:41> 'unsigned long long' '+'
|   |     |-BinaryOperator 0x1815e1fec58 <line:535:14, col:72> 'unsigned long long' '+'
|   |     | |-BinaryOperator 0x1815e1fea78 <col:14, col:41> 'unsigned long long' '*'
|   |     | | |-ImplicitCastExpr 0x1815e1fea60 <col:14, col:32> 'unsigned long long' <IntegralCast>
|   |     | | | `-ParenExpr 0x1815e1fe9a8 <col:14, col:32> 'widelimb':'int'
|   |     | | |   `-CStyleCastExpr 0x1815e1fe980 <col:15, col:31> 'widelimb':'int' <IntegralCast>
|   |     | | |     `-ImplicitCastExpr 0x1815e1fe968 <col:26, col:31> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     | | |       `-ArraySubscriptExpr 0x1815e1fe938 <col:26, col:31> 'const limb':'const unsigned long long' lvalue
|   |     | | |         |-ImplicitCastExpr 0x1815e1fe920 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     | | |         | `-DeclRefExpr 0x1815e1fe8d8 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |     | | |         `-IntegerLiteral 0x1815e1fe8f8 <col:30> 'int' 0
|   |     | | `-ImplicitCastExpr 0x1815e1fea48 <col:36, col:41> 'limb':'unsigned long long' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x1815e1fea28 <col:36, col:41> 'const limb':'const unsigned long long' lvalue
|   |     | |     |-ImplicitCastExpr 0x1815e1fea10 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x1815e1fe9c8 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |     | |     `-IntegerLiteral 0x1815e1fe9e8 <col:40> 'int' 2
|   |     | `-BinaryOperator 0x1815e1fec38 <col:45, col:72> 'unsigned long long' '*'
|   |     |   |-ImplicitCastExpr 0x1815e1fec20 <col:45, col:63> 'unsigned long long' <IntegralCast>
|   |     |   | `-ParenExpr 0x1815e1feb68 <col:45, col:63> 'widelimb':'int'
|   |     |   |   `-CStyleCastExpr 0x1815e1feb40 <col:46, col:62> 'widelimb':'int' <IntegralCast>
|   |     |   |     `-ImplicitCastExpr 0x1815e1feb28 <col:57, col:62> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |   |       `-ArraySubscriptExpr 0x1815e1feaf8 <col:57, col:62> 'const limb':'const unsigned long long' lvalue
|   |     |   |         |-ImplicitCastExpr 0x1815e1feae0 <col:57> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   |         | `-DeclRefExpr 0x1815e1fea98 <col:57> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |     |   |         `-IntegerLiteral 0x1815e1feab8 <col:61> 'int' 1
|   |     |   `-ImplicitCastExpr 0x1815e1fec08 <col:67, col:72> 'limb':'unsigned long long' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x1815e1febe8 <col:67, col:72> 'const limb':'const unsigned long long' lvalue
|   |     |       |-ImplicitCastExpr 0x1815e1febd0 <col:67> 'const limb *':'const limb *' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x1815e1feb88 <col:67> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |     |       `-IntegerLiteral 0x1815e1feba8 <col:71> 'int' 1
|   |     `-BinaryOperator 0x1815e1fee18 <line:536:14, col:41> 'unsigned long long' '*'
|   |       |-ImplicitCastExpr 0x1815e1fee00 <col:14, col:32> 'unsigned long long' <IntegralCast>
|   |       | `-ParenExpr 0x1815e1fed48 <col:14, col:32> 'widelimb':'int'
|   |       |   `-CStyleCastExpr 0x1815e1fed20 <col:15, col:31> 'widelimb':'int' <IntegralCast>
|   |       |     `-ImplicitCastExpr 0x1815e1fed08 <col:26, col:31> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |       `-ArraySubscriptExpr 0x1815e1fecd8 <col:26, col:31> 'const limb':'const unsigned long long' lvalue
|   |       |         |-ImplicitCastExpr 0x1815e1fecc0 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x1815e1fec78 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |       |         `-IntegerLiteral 0x1815e1fec98 <col:30> 'int' 2
|   |       `-ImplicitCastExpr 0x1815e1fede8 <col:36, col:41> 'limb':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x1815e1fedc8 <col:36, col:41> 'const limb':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x1815e1fedb0 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1815e1fed68 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x1815e1fed88 <col:40> 'int' 0
|   |-BinaryOperator 0x1815e1fb688 <line:537:5, line:538:72> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1feef0 <line:537:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1feed8 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1fee90 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1fde58 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1feeb0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1815e1fb670 <col:14, line:538:72> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1fb650 <line:537:14, line:538:72> 'unsigned long long' '+'
|   |     |-BinaryOperator 0x1815e1fb470 <line:537:14, line:538:41> 'unsigned long long' '+'
|   |     | |-BinaryOperator 0x1815e1fb290 <line:537:14, col:72> 'unsigned long long' '+'
|   |     | | |-BinaryOperator 0x1815e1ff0b0 <col:14, col:41> 'unsigned long long' '*'
|   |     | | | |-ImplicitCastExpr 0x1815e1ff098 <col:14, col:32> 'unsigned long long' <IntegralCast>
|   |     | | | | `-ParenExpr 0x1815e1fefe0 <col:14, col:32> 'widelimb':'int'
|   |     | | | |   `-CStyleCastExpr 0x1815e1fefb8 <col:15, col:31> 'widelimb':'int' <IntegralCast>
|   |     | | | |     `-ImplicitCastExpr 0x1815e1fefa0 <col:26, col:31> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     | | | |       `-ArraySubscriptExpr 0x1815e1fef70 <col:26, col:31> 'const limb':'const unsigned long long' lvalue
|   |     | | | |         |-ImplicitCastExpr 0x1815e1fef58 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     | | | |         | `-DeclRefExpr 0x1815e1fef10 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |     | | | |         `-IntegerLiteral 0x1815e1fef30 <col:30> 'int' 0
|   |     | | | `-ImplicitCastExpr 0x1815e1ff080 <col:36, col:41> 'limb':'unsigned long long' <LValueToRValue>
|   |     | | |   `-ArraySubscriptExpr 0x1815e1ff060 <col:36, col:41> 'const limb':'const unsigned long long' lvalue
|   |     | | |     |-ImplicitCastExpr 0x1815e1ff048 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|   |     | | |     | `-DeclRefExpr 0x1815e1ff000 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |     | | |     `-IntegerLiteral 0x1815e1ff020 <col:40> 'int' 3
|   |     | | `-BinaryOperator 0x1815e1fb270 <col:45, col:72> 'unsigned long long' '*'
|   |     | |   |-ImplicitCastExpr 0x1815e1fb258 <col:45, col:63> 'unsigned long long' <IntegralCast>
|   |     | |   | `-ParenExpr 0x1815e1fb1a0 <col:45, col:63> 'widelimb':'int'
|   |     | |   |   `-CStyleCastExpr 0x1815e1fb178 <col:46, col:62> 'widelimb':'int' <IntegralCast>
|   |     | |   |     `-ImplicitCastExpr 0x1815e1fb160 <col:57, col:62> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     | |   |       `-ArraySubscriptExpr 0x1815e1fb130 <col:57, col:62> 'const limb':'const unsigned long long' lvalue
|   |     | |   |         |-ImplicitCastExpr 0x1815e1fb118 <col:57> 'const limb *':'const limb *' <LValueToRValue>
|   |     | |   |         | `-DeclRefExpr 0x1815e1fb0d0 <col:57> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |     | |   |         `-IntegerLiteral 0x1815e1fb0f0 <col:61> 'int' 1
|   |     | |   `-ImplicitCastExpr 0x1815e1fb240 <col:67, col:72> 'limb':'unsigned long long' <LValueToRValue>
|   |     | |     `-ArraySubscriptExpr 0x1815e1fb220 <col:67, col:72> 'const limb':'const unsigned long long' lvalue
|   |     | |       |-ImplicitCastExpr 0x1815e1fb208 <col:67> 'const limb *':'const limb *' <LValueToRValue>
|   |     | |       | `-DeclRefExpr 0x1815e1fb1c0 <col:67> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |     | |       `-IntegerLiteral 0x1815e1fb1e0 <col:71> 'int' 2
|   |     | `-BinaryOperator 0x1815e1fb450 <line:538:14, col:41> 'unsigned long long' '*'
|   |     |   |-ImplicitCastExpr 0x1815e1fb438 <col:14, col:32> 'unsigned long long' <IntegralCast>
|   |     |   | `-ParenExpr 0x1815e1fb380 <col:14, col:32> 'widelimb':'int'
|   |     |   |   `-CStyleCastExpr 0x1815e1fb358 <col:15, col:31> 'widelimb':'int' <IntegralCast>
|   |     |   |     `-ImplicitCastExpr 0x1815e1fb340 <col:26, col:31> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |   |       `-ArraySubscriptExpr 0x1815e1fb310 <col:26, col:31> 'const limb':'const unsigned long long' lvalue
|   |     |   |         |-ImplicitCastExpr 0x1815e1fb2f8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   |         | `-DeclRefExpr 0x1815e1fb2b0 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |     |   |         `-IntegerLiteral 0x1815e1fb2d0 <col:30> 'int' 2
|   |     |   `-ImplicitCastExpr 0x1815e1fb420 <col:36, col:41> 'limb':'unsigned long long' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x1815e1fb400 <col:36, col:41> 'const limb':'const unsigned long long' lvalue
|   |     |       |-ImplicitCastExpr 0x1815e1fb3e8 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x1815e1fb3a0 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |     |       `-IntegerLiteral 0x1815e1fb3c0 <col:40> 'int' 1
|   |     `-BinaryOperator 0x1815e1fb630 <col:45, col:72> 'unsigned long long' '*'
|   |       |-ImplicitCastExpr 0x1815e1fb618 <col:45, col:63> 'unsigned long long' <IntegralCast>
|   |       | `-ParenExpr 0x1815e1fb560 <col:45, col:63> 'widelimb':'int'
|   |       |   `-CStyleCastExpr 0x1815e1fb538 <col:46, col:62> 'widelimb':'int' <IntegralCast>
|   |       |     `-ImplicitCastExpr 0x1815e1fb520 <col:57, col:62> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |       `-ArraySubscriptExpr 0x1815e1fb4f0 <col:57, col:62> 'const limb':'const unsigned long long' lvalue
|   |       |         |-ImplicitCastExpr 0x1815e1fb4d8 <col:57> 'const limb *':'const limb *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x1815e1fb490 <col:57> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |       |         `-IntegerLiteral 0x1815e1fb4b0 <col:61> 'int' 3
|   |       `-ImplicitCastExpr 0x1815e1fb600 <col:67, col:72> 'limb':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x1815e1fb5e0 <col:67, col:72> 'const limb':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x1815e1fb5c8 <col:67> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1815e1fb580 <col:67> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x1815e1fb5a0 <col:71> 'int' 0
|   |-BinaryOperator 0x1815e1fbcc0 <line:539:5, line:540:41> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1fb708 <line:539:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fb6f0 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1fb6a8 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1fde58 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1fb6c8 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x1815e1fbca8 <col:14, line:540:41> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1fbc88 <line:539:14, line:540:41> 'unsigned long long' '+'
|   |     |-BinaryOperator 0x1815e1fbaa8 <line:539:14, col:72> 'unsigned long long' '+'
|   |     | |-BinaryOperator 0x1815e1fb8c8 <col:14, col:41> 'unsigned long long' '*'
|   |     | | |-ImplicitCastExpr 0x1815e1fb8b0 <col:14, col:32> 'unsigned long long' <IntegralCast>
|   |     | | | `-ParenExpr 0x1815e1fb7f8 <col:14, col:32> 'widelimb':'int'
|   |     | | |   `-CStyleCastExpr 0x1815e1fb7d0 <col:15, col:31> 'widelimb':'int' <IntegralCast>
|   |     | | |     `-ImplicitCastExpr 0x1815e1fb7b8 <col:26, col:31> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     | | |       `-ArraySubscriptExpr 0x1815e1fb788 <col:26, col:31> 'const limb':'const unsigned long long' lvalue
|   |     | | |         |-ImplicitCastExpr 0x1815e1fb770 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     | | |         | `-DeclRefExpr 0x1815e1fb728 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |     | | |         `-IntegerLiteral 0x1815e1fb748 <col:30> 'int' 1
|   |     | | `-ImplicitCastExpr 0x1815e1fb898 <col:36, col:41> 'limb':'unsigned long long' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x1815e1fb878 <col:36, col:41> 'const limb':'const unsigned long long' lvalue
|   |     | |     |-ImplicitCastExpr 0x1815e1fb860 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x1815e1fb818 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |     | |     `-IntegerLiteral 0x1815e1fb838 <col:40> 'int' 3
|   |     | `-BinaryOperator 0x1815e1fba88 <col:45, col:72> 'unsigned long long' '*'
|   |     |   |-ImplicitCastExpr 0x1815e1fba70 <col:45, col:63> 'unsigned long long' <IntegralCast>
|   |     |   | `-ParenExpr 0x1815e1fb9b8 <col:45, col:63> 'widelimb':'int'
|   |     |   |   `-CStyleCastExpr 0x1815e1fb990 <col:46, col:62> 'widelimb':'int' <IntegralCast>
|   |     |   |     `-ImplicitCastExpr 0x1815e1fb978 <col:57, col:62> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |   |       `-ArraySubscriptExpr 0x1815e1fb948 <col:57, col:62> 'const limb':'const unsigned long long' lvalue
|   |     |   |         |-ImplicitCastExpr 0x1815e1fb930 <col:57> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   |         | `-DeclRefExpr 0x1815e1fb8e8 <col:57> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |     |   |         `-IntegerLiteral 0x1815e1fb908 <col:61> 'int' 2
|   |     |   `-ImplicitCastExpr 0x1815e1fba58 <col:67, col:72> 'limb':'unsigned long long' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x1815e1fba38 <col:67, col:72> 'const limb':'const unsigned long long' lvalue
|   |     |       |-ImplicitCastExpr 0x1815e1fba20 <col:67> 'const limb *':'const limb *' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x1815e1fb9d8 <col:67> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |     |       `-IntegerLiteral 0x1815e1fb9f8 <col:71> 'int' 2
|   |     `-BinaryOperator 0x1815e1fbc68 <line:540:14, col:41> 'unsigned long long' '*'
|   |       |-ImplicitCastExpr 0x1815e1fbc50 <col:14, col:32> 'unsigned long long' <IntegralCast>
|   |       | `-ParenExpr 0x1815e1fbb98 <col:14, col:32> 'widelimb':'int'
|   |       |   `-CStyleCastExpr 0x1815e1fbb70 <col:15, col:31> 'widelimb':'int' <IntegralCast>
|   |       |     `-ImplicitCastExpr 0x1815e1fbb58 <col:26, col:31> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |       `-ArraySubscriptExpr 0x1815e1fbb28 <col:26, col:31> 'const limb':'const unsigned long long' lvalue
|   |       |         |-ImplicitCastExpr 0x1815e1fbb10 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x1815e1fbac8 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |       |         `-IntegerLiteral 0x1815e1fbae8 <col:30> 'int' 3
|   |       `-ImplicitCastExpr 0x1815e1fbc38 <col:36, col:41> 'limb':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x1815e1fbc18 <col:36, col:41> 'const limb':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x1815e1fbc00 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1815e1fbbb8 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x1815e1fbbd8 <col:40> 'int' 1
|   |-BinaryOperator 0x1815e1fc118 <line:541:5, col:72> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1fbd40 <col:5, col:10> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fbd28 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1fbce0 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1fde58 'out' 'widelimb *':'widelimb *'
|   | | `-IntegerLiteral 0x1815e1fbd00 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x1815e1fc100 <col:14, col:72> 'widelimb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1fc0e0 <col:14, col:72> 'unsigned long long' '+'
|   |     |-BinaryOperator 0x1815e1fbf00 <col:14, col:41> 'unsigned long long' '*'
|   |     | |-ImplicitCastExpr 0x1815e1fbee8 <col:14, col:32> 'unsigned long long' <IntegralCast>
|   |     | | `-ParenExpr 0x1815e1fbe30 <col:14, col:32> 'widelimb':'int'
|   |     | |   `-CStyleCastExpr 0x1815e1fbe08 <col:15, col:31> 'widelimb':'int' <IntegralCast>
|   |     | |     `-ImplicitCastExpr 0x1815e1fbdf0 <col:26, col:31> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     | |       `-ArraySubscriptExpr 0x1815e1fbdc0 <col:26, col:31> 'const limb':'const unsigned long long' lvalue
|   |     | |         |-ImplicitCastExpr 0x1815e1fbda8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |     | |         | `-DeclRefExpr 0x1815e1fbd60 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |     | |         `-IntegerLiteral 0x1815e1fbd80 <col:30> 'int' 2
|   |     | `-ImplicitCastExpr 0x1815e1fbed0 <col:36, col:41> 'limb':'unsigned long long' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1815e1fbeb0 <col:36, col:41> 'const limb':'const unsigned long long' lvalue
|   |     |     |-ImplicitCastExpr 0x1815e1fbe98 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x1815e1fbe50 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |     |     `-IntegerLiteral 0x1815e1fbe70 <col:40> 'int' 3
|   |     `-BinaryOperator 0x1815e1fc0c0 <col:45, col:72> 'unsigned long long' '*'
|   |       |-ImplicitCastExpr 0x1815e1fc0a8 <col:45, col:63> 'unsigned long long' <IntegralCast>
|   |       | `-ParenExpr 0x1815e1fbff0 <col:45, col:63> 'widelimb':'int'
|   |       |   `-CStyleCastExpr 0x1815e1fbfc8 <col:46, col:62> 'widelimb':'int' <IntegralCast>
|   |       |     `-ImplicitCastExpr 0x1815e1fbfb0 <col:57, col:62> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |       |       `-ArraySubscriptExpr 0x1815e1fbf80 <col:57, col:62> 'const limb':'const unsigned long long' lvalue
|   |       |         |-ImplicitCastExpr 0x1815e1fbf68 <col:57> 'const limb *':'const limb *' <LValueToRValue>
|   |       |         | `-DeclRefExpr 0x1815e1fbf20 <col:57> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|   |       |         `-IntegerLiteral 0x1815e1fbf40 <col:61> 'int' 3
|   |       `-ImplicitCastExpr 0x1815e1fc090 <col:67, col:72> 'limb':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x1815e1fc070 <col:67, col:72> 'const limb':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x1815e1fc058 <col:67> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x1815e1fc010 <col:67> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x1815e1fc030 <col:71> 'int' 2
|   `-BinaryOperator 0x1815e1fc390 <line:542:5, col:41> 'widelimb':'int' '='
|     |-ArraySubscriptExpr 0x1815e1fc198 <col:5, col:10> 'widelimb':'int' lvalue
|     | |-ImplicitCastExpr 0x1815e1fc180 <col:5> 'widelimb *':'widelimb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e1fc138 <col:5> 'widelimb *':'widelimb *' lvalue ParmVar 0x1815e1fde58 'out' 'widelimb *':'widelimb *'
|     | `-IntegerLiteral 0x1815e1fc158 <col:9> 'int' 6
|     `-ImplicitCastExpr 0x1815e1fc378 <col:14, col:41> 'widelimb':'int' <IntegralCast>
|       `-BinaryOperator 0x1815e1fc358 <col:14, col:41> 'unsigned long long' '*'
|         |-ImplicitCastExpr 0x1815e1fc340 <col:14, col:32> 'unsigned long long' <IntegralCast>
|         | `-ParenExpr 0x1815e1fc288 <col:14, col:32> 'widelimb':'int'
|         |   `-CStyleCastExpr 0x1815e1fc260 <col:15, col:31> 'widelimb':'int' <IntegralCast>
|         |     `-ImplicitCastExpr 0x1815e1fc248 <col:26, col:31> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|         |       `-ArraySubscriptExpr 0x1815e1fc218 <col:26, col:31> 'const limb':'const unsigned long long' lvalue
|         |         |-ImplicitCastExpr 0x1815e1fc200 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|         |         | `-DeclRefExpr 0x1815e1fc1b8 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fded0 'in1' 'const limb *':'const limb *'
|         |         `-IntegerLiteral 0x1815e1fc1d8 <col:30> 'int' 3
|         `-ImplicitCastExpr 0x1815e1fc328 <col:36, col:41> 'limb':'unsigned long long' <LValueToRValue>
|           `-ArraySubscriptExpr 0x1815e1fc308 <col:36, col:41> 'const limb':'const unsigned long long' lvalue
|             |-ImplicitCastExpr 0x1815e1fc2f0 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|             | `-DeclRefExpr 0x1815e1fc2a8 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1fdf48 'in2' 'const limb *':'const limb *'
|             `-IntegerLiteral 0x1815e1fc2c8 <col:40> 'int' 3
|-FunctionDecl 0x1815e1fc5c8 <line:549:1, line:611:1> line:549:13 used felem_reduce 'void (limb *, const widelimb *)' static
| |-ParmVarDecl 0x1815e1fc408 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e1fc480 <col:37, col:53> col:53 used in 'const widelimb *':'const widelimb *'
| `-CompoundStmt 0x1815e1f7bf0 <line:550:1, line:611:1>
|   |-DeclStmt 0x1815e1fc8f8 <line:551:5, line:552:31>
|   | `-VarDecl 0x1815e1fc6a0 <line:551:5, line:552:30> line:551:27 used two127p15 'const widelimb':'const int' static cinit
|   |   `-BinaryOperator 0x1815e1fc8d8 <col:39, line:552:30> 'int' '+'
|   |     |-ParenExpr 0x1815e1fc7d0 <line:551:39, col:61> 'widelimb':'int'
|   |     | `-BinaryOperator 0x1815e1fc7b0 <col:40, col:58> 'widelimb':'int' '<<'
|   |     |   |-ParenExpr 0x1815e1fc768 <col:40, col:53> 'widelimb':'int'
|   |     |   | `-CStyleCastExpr 0x1815e1fc740 <col:41, col:52> 'widelimb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x1815e1fc708 <col:52> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e1fc788 <col:58> 'int' 127
|   |     `-ParenExpr 0x1815e1fc8b8 <line:552:9, col:30> 'widelimb':'int'
|   |       `-BinaryOperator 0x1815e1fc898 <col:10, col:28> 'widelimb':'int' '<<'
|   |         |-ParenExpr 0x1815e1fc850 <col:10, col:23> 'widelimb':'int'
|   |         | `-CStyleCastExpr 0x1815e1fc828 <col:11, col:22> 'widelimb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1815e1fc7f0 <col:22> 'int' 1
|   |         `-IntegerLiteral 0x1815e1fc870 <col:28> 'int' 15
|   |-DeclStmt 0x1815e1fcb78 <line:553:5, line:554:31>
|   | `-VarDecl 0x1815e1fc920 <line:553:5, line:554:30> line:553:27 used two127m71 'const widelimb':'const int' static cinit
|   |   `-BinaryOperator 0x1815e1fcb58 <col:39, line:554:30> 'int' '-'
|   |     |-ParenExpr 0x1815e1fca50 <line:553:39, col:61> 'widelimb':'int'
|   |     | `-BinaryOperator 0x1815e1fca30 <col:40, col:58> 'widelimb':'int' '<<'
|   |     |   |-ParenExpr 0x1815e1fc9e8 <col:40, col:53> 'widelimb':'int'
|   |     |   | `-CStyleCastExpr 0x1815e1fc9c0 <col:41, col:52> 'widelimb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x1815e1fc988 <col:52> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e1fca08 <col:58> 'int' 127
|   |     `-ParenExpr 0x1815e1fcb38 <line:554:9, col:30> 'widelimb':'int'
|   |       `-BinaryOperator 0x1815e1fcb18 <col:10, col:28> 'widelimb':'int' '<<'
|   |         |-ParenExpr 0x1815e1fcad0 <col:10, col:23> 'widelimb':'int'
|   |         | `-CStyleCastExpr 0x1815e1fcaa8 <col:11, col:22> 'widelimb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1815e1fca70 <col:22> 'int' 1
|   |         `-IntegerLiteral 0x1815e1fcaf0 <col:28> 'int' 71
|   |-DeclStmt 0x1815e1fcf00 <line:555:5, line:556:56>
|   | `-VarDecl 0x1815e1fcba0 <line:555:5, line:556:55> line:555:27 used two127m71m55 'const widelimb':'const int' static cinit
|   |   `-BinaryOperator 0x1815e1fcee0 <col:42, line:556:55> 'int' '-'
|   |     |-BinaryOperator 0x1815e1fcdd8 <line:555:42, line:556:30> 'int' '-'
|   |     | |-ParenExpr 0x1815e1fccd0 <line:555:42, col:64> 'widelimb':'int'
|   |     | | `-BinaryOperator 0x1815e1fccb0 <col:43, col:61> 'widelimb':'int' '<<'
|   |     | |   |-ParenExpr 0x1815e1fcc68 <col:43, col:56> 'widelimb':'int'
|   |     | |   | `-CStyleCastExpr 0x1815e1fcc40 <col:44, col:55> 'widelimb':'int' <NoOp>
|   |     | |   |   `-IntegerLiteral 0x1815e1fcc08 <col:55> 'int' 1
|   |     | |   `-IntegerLiteral 0x1815e1fcc88 <col:61> 'int' 127
|   |     | `-ParenExpr 0x1815e1fcdb8 <line:556:9, col:30> 'widelimb':'int'
|   |     |   `-BinaryOperator 0x1815e1fcd98 <col:10, col:28> 'widelimb':'int' '<<'
|   |     |     |-ParenExpr 0x1815e1fcd50 <col:10, col:23> 'widelimb':'int'
|   |     |     | `-CStyleCastExpr 0x1815e1fcd28 <col:11, col:22> 'widelimb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x1815e1fccf0 <col:22> 'int' 1
|   |     |     `-IntegerLiteral 0x1815e1fcd70 <col:28> 'int' 71
|   |     `-ParenExpr 0x1815e1fcec0 <col:34, col:55> 'widelimb':'int'
|   |       `-BinaryOperator 0x1815e1fcea0 <col:35, col:53> 'widelimb':'int' '<<'
|   |         |-ParenExpr 0x1815e1fce58 <col:35, col:48> 'widelimb':'int'
|   |         | `-CStyleCastExpr 0x1815e1fce30 <col:36, col:47> 'widelimb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x1815e1fcdf8 <col:47> 'int' 1
|   |         `-IntegerLiteral 0x1815e1fce78 <col:53> 'int' 55
|   |-DeclStmt 0x1815e1fd060 <line:557:5, col:23>
|   | `-VarDecl 0x1815e1fcff8 <col:5, col:22> col:14 used output 'widelimb [5]'
|   |-BinaryOperator 0x1815e1f5208 <line:560:5, col:25> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1f50e0 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f50c8 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1fd078 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f50a0 <col:12> 'int' 0
|   | `-BinaryOperator 0x1815e1f51e8 <col:17, col:25> 'int' '+'
|   |   |-ImplicitCastExpr 0x1815e1f51b8 <col:17, col:21> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f5160 <col:17, col:21> 'const widelimb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f5148 <col:17> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1815e1f5100 <col:17> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |   |   `-IntegerLiteral 0x1815e1f5120 <col:20> 'int' 0
|   |   `-ImplicitCastExpr 0x1815e1f51d0 <col:25> 'widelimb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1815e1f5180 <col:25> 'const widelimb':'const int' lvalue Var 0x1815e1fc6a0 'two127p15' 'const widelimb':'const int'
|   |-BinaryOperator 0x1815e1f53f8 <line:561:5, col:25> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1f52d0 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f52b8 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f5270 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f5290 <col:12> 'int' 1
|   | `-BinaryOperator 0x1815e1f53d8 <col:17, col:25> 'int' '+'
|   |   |-ImplicitCastExpr 0x1815e1f53a8 <col:17, col:21> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f5350 <col:17, col:21> 'const widelimb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f5338 <col:17> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1815e1f52f0 <col:17> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |   |   `-IntegerLiteral 0x1815e1f5310 <col:20> 'int' 1
|   |   `-ImplicitCastExpr 0x1815e1f53c0 <col:25> 'widelimb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1815e1f5370 <col:25> 'const widelimb':'const int' lvalue Var 0x1815e1fcba0 'two127m71m55' 'const widelimb':'const int'
|   |-BinaryOperator 0x1815e1f55e8 <line:562:5, col:25> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1f54c0 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f54a8 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f5460 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f5480 <col:12> 'int' 2
|   | `-BinaryOperator 0x1815e1f55c8 <col:17, col:25> 'int' '+'
|   |   |-ImplicitCastExpr 0x1815e1f5598 <col:17, col:21> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f5540 <col:17, col:21> 'const widelimb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f5528 <col:17> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1815e1f54e0 <col:17> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |   |   `-IntegerLiteral 0x1815e1f5500 <col:20> 'int' 2
|   |   `-ImplicitCastExpr 0x1815e1f55b0 <col:25> 'widelimb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1815e1f5560 <col:25> 'const widelimb':'const int' lvalue Var 0x1815e1fc920 'two127m71' 'const widelimb':'const int'
|   |-BinaryOperator 0x1815e1f5768 <line:563:5, col:21> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1f56b0 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f5698 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f5650 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f5670 <col:12> 'int' 3
|   | `-ImplicitCastExpr 0x1815e1f5750 <col:17, col:21> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e1f5730 <col:17, col:21> 'const widelimb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1815e1f5718 <col:17> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e1f56d0 <col:17> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |     `-IntegerLiteral 0x1815e1f56f0 <col:20> 'int' 3
|   |-BinaryOperator 0x1815e1f58a0 <line:564:5, col:21> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1f57e8 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f57d0 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f5788 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f57a8 <col:12> 'int' 4
|   | `-ImplicitCastExpr 0x1815e1f5888 <col:17, col:21> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e1f5868 <col:17, col:21> 'const widelimb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1815e1f5850 <col:17> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e1f5808 <col:17> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |     `-IntegerLiteral 0x1815e1f5828 <col:20> 'int' 4
|   |-CompoundAssignOperator 0x1815e1f5a20 <line:567:5, col:27> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f5920 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f5908 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f58c0 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f58e0 <col:12> 'int' 4
|   | `-BinaryOperator 0x1815e1f5a00 <col:18, col:27> 'widelimb':'int' '>>'
|   |   |-ImplicitCastExpr 0x1815e1f59e8 <col:18, col:22> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f59a0 <col:18, col:22> 'const widelimb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f5988 <col:18> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1815e1f5940 <col:18> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |   |   `-IntegerLiteral 0x1815e1f5960 <col:21> 'int' 6
|   |   `-IntegerLiteral 0x1815e1f59c0 <col:27> 'int' 16
|   |-CompoundAssignOperator 0x1815e1f5c18 <line:568:5, col:38> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f5ab0 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f5a98 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f5a50 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f5a70 <col:12> 'int' 3
|   | `-BinaryOperator 0x1815e1f5bf8 <col:18, col:38> 'int' '<<'
|   |   |-ParenExpr 0x1815e1f5bb0 <col:18, col:33> 'int'
|   |   | `-BinaryOperator 0x1815e1f5b90 <col:19, col:27> 'int' '&'
|   |   |   |-ImplicitCastExpr 0x1815e1f5b78 <col:19, col:23> 'widelimb':'int' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x1815e1f5b30 <col:19, col:23> 'const widelimb':'const int' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1815e1f5b18 <col:19> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x1815e1f5ad0 <col:19> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |   |   |   `-IntegerLiteral 0x1815e1f5af0 <col:22> 'int' 6
|   |   |   `-IntegerLiteral 0x1815e1f5b50 <col:27> 'int' 65535
|   |   `-IntegerLiteral 0x1815e1f5bd0 <col:38> 'int' 40
|   |-CompoundAssignOperator 0x1815e1f5d60 <line:569:5, col:22> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f5ca8 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f5c90 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f5c48 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f5c68 <col:12> 'int' 2
|   | `-ImplicitCastExpr 0x1815e1f5d48 <col:18, col:22> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e1f5d28 <col:18, col:22> 'const widelimb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1815e1f5d10 <col:18> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e1f5cc8 <col:18> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |     `-IntegerLiteral 0x1815e1f5ce8 <col:21> 'int' 6
|   |-CompoundAssignOperator 0x1815e1f5ef0 <line:571:5, col:27> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f5df0 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f5dd8 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f5d90 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f5db0 <col:12> 'int' 3
|   | `-BinaryOperator 0x1815e1f5ed0 <col:18, col:27> 'widelimb':'int' '>>'
|   |   |-ImplicitCastExpr 0x1815e1f5eb8 <col:18, col:22> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f5e70 <col:18, col:22> 'const widelimb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f5e58 <col:18> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1815e1f5e10 <col:18> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |   |   `-IntegerLiteral 0x1815e1f5e30 <col:21> 'int' 5
|   |   `-IntegerLiteral 0x1815e1f5e90 <col:27> 'int' 16
|   |-CompoundAssignOperator 0x1815e1f60e8 <line:572:5, col:38> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f5f80 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f5f68 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f5f20 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f5f40 <col:12> 'int' 2
|   | `-BinaryOperator 0x1815e1f60c8 <col:18, col:38> 'int' '<<'
|   |   |-ParenExpr 0x1815e1f6080 <col:18, col:33> 'int'
|   |   | `-BinaryOperator 0x1815e1f6060 <col:19, col:27> 'int' '&'
|   |   |   |-ImplicitCastExpr 0x1815e1f6048 <col:19, col:23> 'widelimb':'int' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x1815e1f6000 <col:19, col:23> 'const widelimb':'const int' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1815e1f5fe8 <col:19> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x1815e1f5fa0 <col:19> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |   |   |   `-IntegerLiteral 0x1815e1f5fc0 <col:22> 'int' 5
|   |   |   `-IntegerLiteral 0x1815e1f6020 <col:27> 'int' 65535
|   |   `-IntegerLiteral 0x1815e1f60a0 <col:38> 'int' 40
|   |-CompoundAssignOperator 0x1815e1f6230 <line:573:5, col:22> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f6178 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f6160 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f6118 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f6138 <col:12> 'int' 1
|   | `-ImplicitCastExpr 0x1815e1f6218 <col:18, col:22> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e1f61f8 <col:18, col:22> 'const widelimb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x1815e1f61e0 <col:18> 'const widelimb *':'const widelimb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e1f6198 <col:18> 'const widelimb *':'const widelimb *' lvalue ParmVar 0x1815e1fc480 'in' 'const widelimb *':'const widelimb *'
|   |     `-IntegerLiteral 0x1815e1f61b8 <col:21> 'int' 5
|   |-CompoundAssignOperator 0x1815e1f63c0 <line:575:5, col:31> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f62c0 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f62a8 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f6260 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f6280 <col:12> 'int' 2
|   | `-BinaryOperator 0x1815e1f63a0 <col:18, col:31> 'widelimb':'int' '>>'
|   |   |-ImplicitCastExpr 0x1815e1f6388 <col:18, col:26> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f6340 <col:18, col:26> 'widelimb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f6328 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e1f62e0 <col:18> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |   |   `-IntegerLiteral 0x1815e1f6300 <col:25> 'int' 4
|   |   `-IntegerLiteral 0x1815e1f6360 <col:31> 'int' 16
|   |-CompoundAssignOperator 0x1815e1f65b8 <line:576:5, col:42> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f6450 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f6438 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f63f0 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f6410 <col:12> 'int' 1
|   | `-BinaryOperator 0x1815e1f6598 <col:18, col:42> 'int' '<<'
|   |   |-ParenExpr 0x1815e1f6550 <col:18, col:37> 'int'
|   |   | `-BinaryOperator 0x1815e1f6530 <col:19, col:31> 'int' '&'
|   |   |   |-ImplicitCastExpr 0x1815e1f6518 <col:19, col:27> 'widelimb':'int' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x1815e1f64d0 <col:19, col:27> 'widelimb':'int' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1815e1f64b8 <col:19> 'widelimb *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1815e1f6470 <col:19> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |   |   |   `-IntegerLiteral 0x1815e1f6490 <col:26> 'int' 4
|   |   |   `-IntegerLiteral 0x1815e1f64f0 <col:31> 'int' 65535
|   |   `-IntegerLiteral 0x1815e1f6570 <col:42> 'int' 40
|   |-CompoundAssignOperator 0x1815e1f6700 <line:577:5, col:26> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f6648 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f6630 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f65e8 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f6608 <col:12> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1f66e8 <col:18, col:26> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e1f66c8 <col:18, col:26> 'widelimb':'int' lvalue
|   |     |-ImplicitCastExpr 0x1815e1f66b0 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e1f6668 <col:18> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |     `-IntegerLiteral 0x1815e1f6688 <col:25> 'int' 4
|   |-CompoundAssignOperator 0x1815e1f6890 <line:580:5, col:31> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f6790 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f6778 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f6730 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f6750 <col:12> 'int' 3
|   | `-BinaryOperator 0x1815e1f6870 <col:18, col:31> 'widelimb':'int' '>>'
|   |   |-ImplicitCastExpr 0x1815e1f6858 <col:18, col:26> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f6810 <col:18, col:26> 'widelimb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f67f8 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e1f67b0 <col:18> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |   |   `-IntegerLiteral 0x1815e1f67d0 <col:25> 'int' 2
|   |   `-IntegerLiteral 0x1815e1f6830 <col:31> 'int' 56
|   |-CompoundAssignOperator 0x1815e1f6968 <line:581:5, col:18> 'widelimb':'int' '&=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1f6920 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f6908 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f68c0 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f68e0 <col:12> 'int' 2
|   | `-IntegerLiteral 0x1815e1f6940 <col:18> 'long long' 72057594037927935
|   |-BinaryOperator 0x1815e1f6af8 <line:583:5, col:30> 'widelimb':'int' '='
|   | |-ArraySubscriptExpr 0x1815e1f69f8 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f69e0 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f6998 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f69b8 <col:12> 'int' 4
|   | `-BinaryOperator 0x1815e1f6ad8 <col:17, col:30> 'widelimb':'int' '>>'
|   |   |-ImplicitCastExpr 0x1815e1f6ac0 <col:17, col:25> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f6a78 <col:17, col:25> 'widelimb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f6a60 <col:17> 'widelimb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e1f6a18 <col:17> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |   |   `-IntegerLiteral 0x1815e1f6a38 <col:24> 'int' 3
|   |   `-IntegerLiteral 0x1815e1f6a98 <col:30> 'int' 56
|   |-CompoundAssignOperator 0x1815e1f6bc0 <line:584:5, col:18> 'widelimb':'int' '&=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1f6b78 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f6b60 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f6b18 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f6b38 <col:12> 'int' 3
|   | `-IntegerLiteral 0x1815e1f6b98 <col:18> 'long long' 72057594037927935
|   |-CompoundAssignOperator 0x1815e1f6d50 <line:589:5, col:31> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f6c50 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f6c38 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f6bf0 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f6c10 <col:12> 'int' 2
|   | `-BinaryOperator 0x1815e1f6d30 <col:18, col:31> 'widelimb':'int' '>>'
|   |   |-ImplicitCastExpr 0x1815e1f6d18 <col:18, col:26> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f6cd0 <col:18, col:26> 'widelimb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f6cb8 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e1f6c70 <col:18> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |   |   `-IntegerLiteral 0x1815e1f6c90 <col:25> 'int' 4
|   |   `-IntegerLiteral 0x1815e1f6cf0 <col:31> 'int' 16
|   |-CompoundAssignOperator 0x1815e1f6f48 <line:591:5, col:42> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f6de0 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f6dc8 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f6d80 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f6da0 <col:12> 'int' 1
|   | `-BinaryOperator 0x1815e1f6f28 <col:18, col:42> 'int' '<<'
|   |   |-ParenExpr 0x1815e1f6ee0 <col:18, col:37> 'int'
|   |   | `-BinaryOperator 0x1815e1f6ec0 <col:19, col:31> 'int' '&'
|   |   |   |-ImplicitCastExpr 0x1815e1f6ea8 <col:19, col:27> 'widelimb':'int' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x1815e1f6e60 <col:19, col:27> 'widelimb':'int' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1815e1f6e48 <col:19> 'widelimb *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1815e1f6e00 <col:19> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |   |   |   `-IntegerLiteral 0x1815e1f6e20 <col:26> 'int' 4
|   |   |   `-IntegerLiteral 0x1815e1f6e80 <col:31> 'int' 65535
|   |   `-IntegerLiteral 0x1815e1f6f00 <col:42> 'int' 40
|   |-CompoundAssignOperator 0x1815e1f70b0 <line:592:5, col:26> 'widelimb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f6fd8 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f6fc0 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f6f78 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f6f98 <col:12> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1f7078 <col:18, col:26> 'widelimb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x1815e1f7058 <col:18, col:26> 'widelimb':'int' lvalue
|   |     |-ImplicitCastExpr 0x1815e1f7040 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e1f6ff8 <col:18> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |     `-IntegerLiteral 0x1815e1f7018 <col:25> 'int' 4
|   |-CompoundAssignOperator 0x1815e1f7240 <line:595:5, col:31> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f7140 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f7128 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f70e0 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f7100 <col:12> 'int' 1
|   | `-BinaryOperator 0x1815e1f7220 <col:18, col:31> 'widelimb':'int' '>>'
|   |   |-ImplicitCastExpr 0x1815e1f7208 <col:18, col:26> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f71c0 <col:18, col:26> 'widelimb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f71a8 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e1f7160 <col:18> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |   |   `-IntegerLiteral 0x1815e1f7180 <col:25> 'int' 0
|   |   `-IntegerLiteral 0x1815e1f71e0 <col:31> 'int' 56
|   |-BinaryOperator 0x1815e1f7400 <line:596:5, col:26> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e1f72d0 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f72b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1f7270 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1fc408 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e1f7290 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1f73e8 <col:14, col:26> 'limb':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1f73c8 <col:14, col:26> 'long long' '&'
|   |     |-ImplicitCastExpr 0x1815e1f73b0 <col:14, col:22> 'long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1815e1f7398 <col:14, col:22> 'widelimb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1815e1f7350 <col:14, col:22> 'widelimb':'int' lvalue
|   |     |     |-ImplicitCastExpr 0x1815e1f7338 <col:14> 'widelimb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1815e1f72f0 <col:14> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |     |     `-IntegerLiteral 0x1815e1f7310 <col:21> 'int' 0
|   |     `-IntegerLiteral 0x1815e1f7370 <col:26> 'long long' 72057594037927935
|   |-CompoundAssignOperator 0x1815e1f7580 <line:598:5, col:31> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f7480 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f7468 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f7420 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f7440 <col:12> 'int' 2
|   | `-BinaryOperator 0x1815e1f7560 <col:18, col:31> 'widelimb':'int' '>>'
|   |   |-ImplicitCastExpr 0x1815e1f7548 <col:18, col:26> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f7500 <col:18, col:26> 'widelimb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f74e8 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e1f74a0 <col:18> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |   |   `-IntegerLiteral 0x1815e1f74c0 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x1815e1f7520 <col:31> 'int' 56
|   |-BinaryOperator 0x1815e1f7740 <line:600:5, col:26> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e1f7610 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f75f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1f75b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1fc408 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e1f75d0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e1f7728 <col:14, col:26> 'limb':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1f7708 <col:14, col:26> 'long long' '&'
|   |     |-ImplicitCastExpr 0x1815e1f76f0 <col:14, col:22> 'long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1815e1f76d8 <col:14, col:22> 'widelimb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1815e1f7690 <col:14, col:22> 'widelimb':'int' lvalue
|   |     |     |-ImplicitCastExpr 0x1815e1f7678 <col:14> 'widelimb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1815e1f7630 <col:14> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |     |     `-IntegerLiteral 0x1815e1f7650 <col:21> 'int' 1
|   |     `-IntegerLiteral 0x1815e1f76b0 <col:26> 'long long' 72057594037927935
|   |-CompoundAssignOperator 0x1815e1f78c0 <line:601:5, col:31> 'widelimb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x1815e1f77c0 <col:5, col:13> 'widelimb':'int' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f77a8 <col:5> 'widelimb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f7760 <col:5> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   | | `-IntegerLiteral 0x1815e1f7780 <col:12> 'int' 3
|   | `-BinaryOperator 0x1815e1f78a0 <col:18, col:31> 'widelimb':'int' '>>'
|   |   |-ImplicitCastExpr 0x1815e1f7888 <col:18, col:26> 'widelimb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1f7840 <col:18, col:26> 'widelimb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1f7828 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e1f77e0 <col:18> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |   |   `-IntegerLiteral 0x1815e1f7800 <col:25> 'int' 2
|   |   `-IntegerLiteral 0x1815e1f7860 <col:31> 'int' 56
|   |-BinaryOperator 0x1815e1f7a80 <line:603:5, col:26> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e1f7950 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f7938 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1f78f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1fc408 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e1f7910 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e1f7a68 <col:14, col:26> 'limb':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1f7a48 <col:14, col:26> 'long long' '&'
|   |     |-ImplicitCastExpr 0x1815e1f7a30 <col:14, col:22> 'long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1815e1f7a18 <col:14, col:22> 'widelimb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x1815e1f79d0 <col:14, col:22> 'widelimb':'int' lvalue
|   |     |     |-ImplicitCastExpr 0x1815e1f79b8 <col:14> 'widelimb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x1815e1f7970 <col:14> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|   |     |     `-IntegerLiteral 0x1815e1f7990 <col:21> 'int' 2
|   |     `-IntegerLiteral 0x1815e1f79f0 <col:26> 'long long' 72057594037927935
|   `-BinaryOperator 0x1815e1f7bd0 <line:610:5, col:22> 'limb':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1815e1f7b00 <col:5, col:10> 'limb':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1815e1f7ae8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e1f7aa0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1fc408 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1815e1f7ac0 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1815e1f7bb8 <col:14, col:22> 'limb':'unsigned long long' <IntegralCast>
|       `-ImplicitCastExpr 0x1815e1f7ba0 <col:14, col:22> 'widelimb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1815e1f7b80 <col:14, col:22> 'widelimb':'int' lvalue
|           |-ImplicitCastExpr 0x1815e1f7b68 <col:14> 'widelimb *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x1815e1f7b20 <col:14> 'widelimb [5]' lvalue Var 0x1815e1fcff8 'output' 'widelimb [5]'
|           `-IntegerLiteral 0x1815e1f7b40 <col:21> 'int' 3
|-FunctionDecl 0x1815e1f7e50 <line:613:1, line:618:1> line:613:13 used felem_square_reduce 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1815e1f7d10 <col:33, col:39> col:39 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e1f7d88 <col:44, col:56> col:56 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e1f8238 <line:614:1, line:618:1>
|   |-DeclStmt 0x1815e1f7f90 <line:615:5, col:18>
|   | `-VarDecl 0x1815e1f7f28 <col:5, col:15> col:15 used tmp 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e1f8090 <line:616:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1815e1f8078 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f7fa8 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e1f80c0 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f7fc8 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e1f7f28 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e1f80d8 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1f8000 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f7d88 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x1815e1f81c0 <line:617:5, col:26> 'void'
|     |-ImplicitCastExpr 0x1815e1f81a8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1815e1f80f0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|     |-ImplicitCastExpr 0x1815e1f81f0 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1815e1f8110 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e1f7d10 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1815e1f8220 <col:23> 'const widelimb *':'const widelimb *' <NoOp>
|       `-ImplicitCastExpr 0x1815e1f8208 <col:23> 'widelimb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1815e1f8130 <col:23> 'widefelem':'widelimb [7]' lvalue Var 0x1815e1f7f28 'tmp' 'widefelem':'widelimb [7]'
|-FunctionDecl 0x1815e1f84c8 <line:620:1, line:625:1> line:620:13 used felem_mul_reduce 'void (limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x1815e1f8270 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e1f82e8 <col:41, col:53> col:53 used in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1815e1f8360 <col:58, col:70> col:70 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e1f88a0 <line:621:1, line:625:1>
|   |-DeclStmt 0x1815e1f8610 <line:622:5, col:18>
|   | `-VarDecl 0x1815e1f85a8 <col:5, col:15> col:15 used tmp 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e1f8730 <line:623:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f8718 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f8628 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e1f8768 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f8648 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e1f85a8 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e1f8780 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e1f8680 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f82e8 'in1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1815e1f8798 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1f86a0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8360 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x1815e1f8828 <line:624:5, col:26> 'void'
|     |-ImplicitCastExpr 0x1815e1f8810 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1815e1f87b0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|     |-ImplicitCastExpr 0x1815e1f8858 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1815e1f87d0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e1f8270 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1815e1f8888 <col:23> 'const widelimb *':'const widelimb *' <NoOp>
|       `-ImplicitCastExpr 0x1815e1f8870 <col:23> 'widelimb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1815e1f87f0 <col:23> 'widefelem':'widelimb [7]' lvalue Var 0x1815e1f85a8 'tmp' 'widefelem':'widelimb [7]'
|-FunctionDecl 0x1815e1f8a18 <line:631:1, line:681:1> line:631:13 used felem_contract 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1815e1f88d8 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e1f8950 <col:39, col:51> col:51 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e1ff518 <line:632:1, line:681:1>
|   |-DeclStmt 0x1815e1f8c58 <line:633:5, col:50>
|   | `-VarDecl 0x1815e1f8b10 <col:5, col:48> col:26 used two56 'const int64_t':'const long long' static cinit
|   |   `-ImplicitCastExpr 0x1815e1f8c40 <col:34, col:48> 'int64_t':'long long' <IntegralCast>
|   |     `-BinaryOperator 0x1815e1f8c20 <col:34, col:48> 'limb':'unsigned long long' '<<'
|   |       |-ParenExpr 0x1815e1f8bd8 <col:34, col:43> 'limb':'unsigned long long'
|   |       | `-CStyleCastExpr 0x1815e1f8bb0 <col:35, col:42> 'limb':'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x1815e1f8b78 <col:42> 'int' 1
|   |       `-IntegerLiteral 0x1815e1f8bf8 <col:48> 'int' 56
|   |-DeclStmt 0x1815e1f8e40 <line:636:5, col:22>
|   | |-VarDecl 0x1815e1f8d48 <col:5, col:18> col:13 used tmp 'int64_t [4]'
|   | `-VarDecl 0x1815e1f8dc0 <col:5, col:21> col:21 used a 'int64_t':'long long'
|   |-BinaryOperator 0x1815e1f9000 <line:637:5, col:18> 'int64_t':'long long' '='
|   | |-ArraySubscriptExpr 0x1815e1f8f30 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f8f18 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f8e58 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1f8e90 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1f8fe8 <col:14, col:18> 'int64_t':'long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1815e1f8fd0 <col:14, col:18> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e1f8fb0 <col:14, col:18> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1f8f98 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e1f8f50 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8950 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e1f8f70 <col:17> 'int' 0
|   |-BinaryOperator 0x1815e1f9170 <line:638:5, col:18> 'int64_t':'long long' '='
|   | |-ArraySubscriptExpr 0x1815e1f9080 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f9068 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f9020 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1f9040 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e1f9158 <col:14, col:18> 'int64_t':'long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1815e1f9140 <col:14, col:18> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e1f9120 <col:14, col:18> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1f9108 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e1f90c0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8950 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e1f90e0 <col:17> 'int' 1
|   |-BinaryOperator 0x1815e1f92c0 <line:639:5, col:18> 'int64_t':'long long' '='
|   | |-ArraySubscriptExpr 0x1815e1f91f0 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f91d8 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f9190 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1f91b0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e1f92a8 <col:14, col:18> 'int64_t':'long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1815e1f9290 <col:14, col:18> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e1f9270 <col:14, col:18> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1f9258 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e1f9210 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8950 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e1f9230 <col:17> 'int' 2
|   |-BinaryOperator 0x1815e1f9410 <line:640:5, col:18> 'int64_t':'long long' '='
|   | |-ArraySubscriptExpr 0x1815e1f9340 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f9328 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f92e0 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1f9300 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x1815e1f93f8 <col:14, col:18> 'int64_t':'long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1815e1f93e0 <col:14, col:18> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e1f93c0 <col:14, col:18> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1f93a8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e1f9360 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8950 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e1f9380 <col:17> 'int' 3
|   |-BinaryOperator 0x1815e1f9580 <line:642:5, col:21> 'int64_t':'long long' '='
|   | |-DeclRefExpr 0x1815e1f9430 <col:5> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   | `-ImplicitCastExpr 0x1815e1f9568 <col:9, col:21> 'int64_t':'long long' <IntegralCast>
|   |   `-ParenExpr 0x1815e1f9548 <col:9, col:21> 'limb':'unsigned long long'
|   |     `-BinaryOperator 0x1815e1f9528 <col:10, col:19> 'limb':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x1815e1f9510 <col:10, col:14> 'limb':'unsigned long long' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x1815e1f94c8 <col:10, col:14> 'const limb':'const unsigned long long' lvalue
|   |       |   |-ImplicitCastExpr 0x1815e1f94b0 <col:10> 'const limb *':'const limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1815e1f9468 <col:10> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8950 'in' 'const limb *':'const limb *'
|   |       |   `-IntegerLiteral 0x1815e1f9488 <col:13> 'int' 3
|   |       `-IntegerLiteral 0x1815e1f94e8 <col:19> 'int' 56
|   |-CompoundAssignOperator 0x1815e1f9658 <line:643:5, col:15> 'int64_t':'long long' '-=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1f9600 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f95e8 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f95a0 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1f95c0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1f9640 <col:15> 'int64_t':'long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e1f9620 <col:15> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   |-CompoundAssignOperator 0x1815e1f9788 <line:644:5, col:20> 'int64_t':'long long' '+=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1f96e8 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f96d0 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f9688 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1f96a8 <col:9> 'int' 1
|   | `-BinaryOperator 0x1815e1f9768 <col:15, col:20> 'int64_t':'long long' '<<'
|   |   |-ImplicitCastExpr 0x1815e1f9750 <col:15> 'int64_t':'long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1815e1f9708 <col:15> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   |   `-IntegerLiteral 0x1815e1f9728 <col:20> 'int' 40
|   |-CompoundAssignOperator 0x1815e1f9860 <line:645:5, col:15> 'int64_t':'long long' '&=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1f9818 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1f9800 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1f97b8 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1f97d8 <col:9> 'int' 3
|   | `-IntegerLiteral 0x1815e1f9838 <col:15> 'long long' 72057594037927935
|   |-BinaryOperator 0x1815e1f9f58 <line:650:5, line:651:70> 'int64_t':'long long' '='
|   | |-DeclRefExpr 0x1815e1f9890 <line:650:5> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   | `-ImplicitCastExpr 0x1815e1f9f40 <col:9, line:651:70> 'int64_t':'long long' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1f9f20 <line:650:9, line:651:70> 'unsigned long long' '|'
|   |     |-ParenExpr 0x1815e1f9bb8 <line:650:9, col:60> 'unsigned long long'
|   |     | `-BinaryOperator 0x1815e1f9b98 <col:10, col:59> 'unsigned long long' '+'
|   |     |   |-ParenExpr 0x1815e1f9b38 <col:10, col:55> 'unsigned long long'
|   |     |   | `-BinaryOperator 0x1815e1f9b18 <col:11, col:54> 'unsigned long long' '&'
|   |     |   |   |-BinaryOperator 0x1815e1f99e0 <col:11, col:23> 'unsigned long long' '&'
|   |     |   |   | |-ImplicitCastExpr 0x1815e1f99b0 <col:11, col:15> 'limb':'unsigned long long' <LValueToRValue>
|   |     |   |   | | `-ArraySubscriptExpr 0x1815e1f9910 <col:11, col:15> 'const limb':'const unsigned long long' lvalue
|   |     |   |   | |   |-ImplicitCastExpr 0x1815e1f98f8 <col:11> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   |   | |   | `-DeclRefExpr 0x1815e1f98b0 <col:11> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8950 'in' 'const limb *':'const limb *'
|   |     |   |   | |   `-IntegerLiteral 0x1815e1f98d0 <col:14> 'int' 3
|   |     |   |   | `-ImplicitCastExpr 0x1815e1f99c8 <col:19, col:23> 'limb':'unsigned long long' <LValueToRValue>
|   |     |   |   |   `-ArraySubscriptExpr 0x1815e1f9990 <col:19, col:23> 'const limb':'const unsigned long long' lvalue
|   |     |   |   |     |-ImplicitCastExpr 0x1815e1f9978 <col:19> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   |   |     | `-DeclRefExpr 0x1815e1f9930 <col:19> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8950 'in' 'const limb *':'const limb *'
|   |     |   |   |     `-IntegerLiteral 0x1815e1f9950 <col:22> 'int' 2
|   |     |   |   `-ParenExpr 0x1815e1f9af8 <col:27, col:54> 'unsigned long long'
|   |     |   |     `-BinaryOperator 0x1815e1f9ad8 <col:28, col:36> 'unsigned long long' '|'
|   |     |   |       |-ImplicitCastExpr 0x1815e1f9aa8 <col:28, col:32> 'limb':'unsigned long long' <LValueToRValue>
|   |     |   |       | `-ArraySubscriptExpr 0x1815e1f9a60 <col:28, col:32> 'const limb':'const unsigned long long' lvalue
|   |     |   |       |   |-ImplicitCastExpr 0x1815e1f9a48 <col:28> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   |       |   | `-DeclRefExpr 0x1815e1f9a00 <col:28> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8950 'in' 'const limb *':'const limb *'
|   |     |   |       |   `-IntegerLiteral 0x1815e1f9a20 <col:31> 'int' 1
|   |     |   |       `-ImplicitCastExpr 0x1815e1f9ac0 <col:36> 'unsigned long long' <IntegralCast>
|   |     |   |         `-IntegerLiteral 0x1815e1f9a80 <col:36> 'long long' 1099511627775
|   |     |   `-ImplicitCastExpr 0x1815e1f9b80 <col:59> 'unsigned long long' <IntegralCast>
|   |     |     `-IntegerLiteral 0x1815e1f9b58 <col:59> 'int' 1
|   |     `-ImplicitCastExpr 0x1815e1f9f08 <line:651:9, col:70> 'unsigned long long' <IntegralCast>
|   |       `-ParenExpr 0x1815e1f9ee8 <col:9, col:70> 'long long'
|   |         `-BinaryOperator 0x1815e1f9ec8 <col:10, col:68> 'long long' '>>'
|   |           |-ParenExpr 0x1815e1f9e80 <col:10, col:63> 'long long'
|   |           | `-BinaryOperator 0x1815e1f9e60 <col:11, col:62> 'long long' '-'
|   |           |   |-CStyleCastExpr 0x1815e1f9df8 <col:11, col:58> 'int64_t':'long long' <IntegralCast>
|   |           |   | `-ParenExpr 0x1815e1f9dd8 <col:21, col:58> 'unsigned long long'
|   |           |   |   `-BinaryOperator 0x1815e1f9d88 <col:22, col:57> 'unsigned long long' '+'
|   |           |   |     |-ImplicitCastExpr 0x1815e1f9d70 <col:22, col:26> 'limb':'unsigned long long' <LValueToRValue>
|   |           |   |     | `-ArraySubscriptExpr 0x1815e1f9c38 <col:22, col:26> 'const limb':'const unsigned long long' lvalue
|   |           |   |     |   |-ImplicitCastExpr 0x1815e1f9c20 <col:22> 'const limb *':'const limb *' <LValueToRValue>
|   |           |   |     |   | `-DeclRefExpr 0x1815e1f9bd8 <col:22> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8950 'in' 'const limb *':'const limb *'
|   |           |   |     |   `-IntegerLiteral 0x1815e1f9bf8 <col:25> 'int' 0
|   |           |   |     `-ParenExpr 0x1815e1f9d50 <col:30, col:57> 'unsigned long long'
|   |           |   |       `-BinaryOperator 0x1815e1f9d30 <col:31, col:39> 'unsigned long long' '&'
|   |           |   |         |-ImplicitCastExpr 0x1815e1f9d00 <col:31, col:35> 'limb':'unsigned long long' <LValueToRValue>
|   |           |   |         | `-ArraySubscriptExpr 0x1815e1f9cb8 <col:31, col:35> 'const limb':'const unsigned long long' lvalue
|   |           |   |         |   |-ImplicitCastExpr 0x1815e1f9ca0 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   |           |   |         |   | `-DeclRefExpr 0x1815e1f9c58 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1f8950 'in' 'const limb *':'const limb *'
|   |           |   |         |   `-IntegerLiteral 0x1815e1f9c78 <col:34> 'int' 1
|   |           |   |         `-ImplicitCastExpr 0x1815e1f9d18 <col:39> 'unsigned long long' <IntegralCast>
|   |           |   |           `-IntegerLiteral 0x1815e1f9cd8 <col:39> 'long long' 1099511627775
|   |           |   `-ImplicitCastExpr 0x1815e1f9e48 <col:62> 'long long' <IntegralCast>
|   |           |     `-IntegerLiteral 0x1815e1f9e20 <col:62> 'int' 1
|   |           `-IntegerLiteral 0x1815e1f9ea0 <col:68> 'int' 63
|   |-CompoundAssignOperator 0x1815e1f9fc0 <line:652:5, col:10> 'int64_t':'long long' '&=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-DeclRefExpr 0x1815e1f9f78 <col:5> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   | `-IntegerLiteral 0x1815e1f9f98 <col:10> 'long long' 72057594037927935
|   |-BinaryOperator 0x1815e1fa110 <line:654:5, col:20> 'int64_t':'long long' '='
|   | |-DeclRefExpr 0x1815e1f9ff0 <col:5> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   | `-BinaryOperator 0x1815e1fa0f0 <col:9, col:20> 'long long' '>>'
|   |   |-ParenExpr 0x1815e1fa0a8 <col:9, col:15> 'long long'
|   |   | `-BinaryOperator 0x1815e1fa088 <col:10, col:14> 'long long' '-'
|   |   |   |-ImplicitCastExpr 0x1815e1fa058 <col:10> 'int64_t':'long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1815e1fa010 <col:10> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   |   |   `-ImplicitCastExpr 0x1815e1fa070 <col:14> 'long long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1815e1fa030 <col:14> 'int' 1
|   |   `-IntegerLiteral 0x1815e1fa0c8 <col:20> 'int' 63
|   |-CompoundAssignOperator 0x1815e1fa248 <line:656:5, col:19> 'int64_t':'long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e1fa190 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fa178 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1fa130 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1fa150 <col:9> 'int' 3
|   | `-BinaryOperator 0x1815e1fa228 <col:15, col:19> 'unsigned long long' '^'
|   |   |-ImplicitCastExpr 0x1815e1fa210 <col:15> 'unsigned long long' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x1815e1fa1f8 <col:15> 'int64_t':'long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1815e1fa1b0 <col:15> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   |   `-IntegerLiteral 0x1815e1fa1d0 <col:19> 'unsigned long long' 18446744073709551615
|   |-CompoundAssignOperator 0x1815e1fa390 <line:657:5, col:19> 'int64_t':'long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e1fa2d8 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fa2c0 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1fa278 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1fa298 <col:9> 'int' 2
|   | `-BinaryOperator 0x1815e1fa370 <col:15, col:19> 'unsigned long long' '^'
|   |   |-ImplicitCastExpr 0x1815e1fa358 <col:15> 'unsigned long long' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x1815e1fa340 <col:15> 'int64_t':'long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1815e1fa2f8 <col:15> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   |   `-IntegerLiteral 0x1815e1fa318 <col:19> 'unsigned long long' 18446744073709551615
|   |-CompoundAssignOperator 0x1815e1fa558 <line:658:5, col:42> 'int64_t':'long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x1815e1fa420 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fa408 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1fa3c0 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1fa3e0 <col:9> 'int' 1
|   | `-BinaryOperator 0x1815e1fa538 <col:15, col:42> 'unsigned long long' '|'
|   |   |-ParenExpr 0x1815e1fa4d8 <col:15, col:38> 'unsigned long long'
|   |   | `-BinaryOperator 0x1815e1fa4b8 <col:16, col:20> 'unsigned long long' '^'
|   |   |   |-ImplicitCastExpr 0x1815e1fa4a0 <col:16> 'unsigned long long' <IntegralCast>
|   |   |   | `-ImplicitCastExpr 0x1815e1fa488 <col:16> 'int64_t':'long long' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1815e1fa440 <col:16> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   |   |   `-IntegerLiteral 0x1815e1fa460 <col:20> 'unsigned long long' 18446744073709551615
|   |   `-ImplicitCastExpr 0x1815e1fa520 <col:42> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1815e1fa4f8 <col:42> 'long long' 1099511627775
|   |-CompoundAssignOperator 0x1815e1fa6a0 <line:659:5, col:19> 'int64_t':'long long' '-=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1fa5e8 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fa5d0 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1fa588 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1fa5a8 <col:9> 'int' 0
|   | `-BinaryOperator 0x1815e1fa680 <col:15, col:19> 'long long' '&'
|   |   |-ImplicitCastExpr 0x1815e1fa668 <col:15> 'long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1815e1fa608 <col:15> 'int' 1
|   |   `-ImplicitCastExpr 0x1815e1fa650 <col:19> 'int64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1815e1fa630 <col:19> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   |-BinaryOperator 0x1815e1fa7d0 <line:665:5, col:19> 'int64_t':'long long' '='
|   | |-DeclRefExpr 0x1815e1fa6d0 <col:5> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   | `-BinaryOperator 0x1815e1fa7b0 <col:9, col:19> 'int64_t':'long long' '>>'
|   |   |-ImplicitCastExpr 0x1815e1fa798 <col:9, col:14> 'int64_t':'long long' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1fa750 <col:9, col:14> 'int64_t':'long long' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1fa738 <col:9> 'int64_t *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e1fa6f0 <col:9> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   |   |   `-IntegerLiteral 0x1815e1fa710 <col:13> 'int' 0
|   |   `-IntegerLiteral 0x1815e1fa770 <col:19> 'int' 63
|   |-CompoundAssignOperator 0x1815e1fa918 <line:666:5, col:23> 'int64_t':'long long' '+=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1fa850 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fa838 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1fa7f0 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1fa810 <col:9> 'int' 0
|   | `-BinaryOperator 0x1815e1fa8f8 <col:15, col:23> 'long long' '&'
|   |   |-ImplicitCastExpr 0x1815e1fa8c8 <col:15> 'int64_t':'long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1815e1fa870 <col:15> 'const int64_t':'const long long' lvalue Var 0x1815e1f8b10 'two56' 'const int64_t':'const long long'
|   |   `-ImplicitCastExpr 0x1815e1fa8e0 <col:23> 'int64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1815e1fa8a8 <col:23> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   |-CompoundAssignOperator 0x1815e1faaa8 <line:667:5, col:19> 'int64_t':'long long' '-=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1fa9f0 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fa9d8 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1fa990 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1fa9b0 <col:9> 'int' 1
|   | `-BinaryOperator 0x1815e1faa88 <col:15, col:19> 'long long' '&'
|   |   |-ImplicitCastExpr 0x1815e1faa70 <col:15> 'long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x1815e1faa10 <col:15> 'int' 1
|   |   `-ImplicitCastExpr 0x1815e1faa58 <col:19> 'int64_t':'long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1815e1faa38 <col:19> 'int64_t':'long long' lvalue Var 0x1815e1f8dc0 'a' 'int64_t':'long long'
|   |-CompoundAssignOperator 0x1815e1fac38 <line:670:5, col:25> 'int64_t':'long long' '+=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1fab38 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fab20 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1faad8 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1faaf8 <col:9> 'int' 2
|   | `-BinaryOperator 0x1815e1fac18 <col:15, col:25> 'int64_t':'long long' '>>'
|   |   |-ImplicitCastExpr 0x1815e1fac00 <col:15, col:20> 'int64_t':'long long' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1fabb8 <col:15, col:20> 'int64_t':'long long' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1faba0 <col:15> 'int64_t *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e1fab58 <col:15> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   |   |   `-IntegerLiteral 0x1815e1fab78 <col:19> 'int' 1
|   |   `-IntegerLiteral 0x1815e1fabd8 <col:25> 'int' 56
|   |-CompoundAssignOperator 0x1815e1fad10 <line:671:5, col:15> 'int64_t':'long long' '&=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1facc8 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1facb0 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1fac68 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1fac88 <col:9> 'int' 1
|   | `-IntegerLiteral 0x1815e1face8 <col:15> 'long long' 72057594037927935
|   |-CompoundAssignOperator 0x1815e1faea0 <line:673:5, col:25> 'int64_t':'long long' '+=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1fada0 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1fad88 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1fad40 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1fad60 <col:9> 'int' 3
|   | `-BinaryOperator 0x1815e1fae80 <col:15, col:25> 'int64_t':'long long' '>>'
|   |   |-ImplicitCastExpr 0x1815e1fae68 <col:15, col:20> 'int64_t':'long long' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x1815e1fae20 <col:15, col:20> 'int64_t':'long long' lvalue
|   |   |   |-ImplicitCastExpr 0x1815e1fae08 <col:15> 'int64_t *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e1fadc0 <col:15> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   |   |   `-IntegerLiteral 0x1815e1fade0 <col:19> 'int' 2
|   |   `-IntegerLiteral 0x1815e1fae40 <col:25> 'int' 56
|   |-CompoundAssignOperator 0x1815e1faf78 <line:674:5, col:15> 'int64_t':'long long' '&=' ComputeLHSTy='long long' ComputeResultTy='long long'
|   | |-ArraySubscriptExpr 0x1815e1faf30 <col:5, col:10> 'int64_t':'long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1faf18 <col:5> 'int64_t *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x1815e1faed0 <col:5> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   | | `-IntegerLiteral 0x1815e1faef0 <col:9> 'int' 2
|   | `-IntegerLiteral 0x1815e1faf50 <col:15> 'long long' 72057594037927935
|   |-BinaryOperator 0x1815e1ff108 <line:677:5, col:19> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e1fb008 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1faff0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1fafa8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1f88d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e1fafc8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x1815e1ff0f0 <col:14, col:19> 'limb':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1815e1fb0a8 <col:14, col:19> 'int64_t':'long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e1fb088 <col:14, col:19> 'int64_t':'long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1fb070 <col:14> 'int64_t *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1815e1fb028 <col:14> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   |       `-IntegerLiteral 0x1815e1fb048 <col:18> 'int' 0
|   |-BinaryOperator 0x1815e1ff258 <line:678:5, col:19> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e1ff188 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1ff170 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1ff128 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1f88d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e1ff148 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x1815e1ff240 <col:14, col:19> 'limb':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1815e1ff228 <col:14, col:19> 'int64_t':'long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e1ff208 <col:14, col:19> 'int64_t':'long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1ff1f0 <col:14> 'int64_t *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1815e1ff1a8 <col:14> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   |       `-IntegerLiteral 0x1815e1ff1c8 <col:18> 'int' 1
|   |-BinaryOperator 0x1815e1ff3a8 <line:679:5, col:19> 'limb':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x1815e1ff2d8 <col:5, col:10> 'limb':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x1815e1ff2c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1ff278 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1f88d8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x1815e1ff298 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x1815e1ff390 <col:14, col:19> 'limb':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1815e1ff378 <col:14, col:19> 'int64_t':'long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e1ff358 <col:14, col:19> 'int64_t':'long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1ff340 <col:14> 'int64_t *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1815e1ff2f8 <col:14> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|   |       `-IntegerLiteral 0x1815e1ff318 <col:18> 'int' 2
|   `-BinaryOperator 0x1815e1ff4f8 <line:680:5, col:19> 'limb':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x1815e1ff428 <col:5, col:10> 'limb':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x1815e1ff410 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e1ff3c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x1815e1f88d8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x1815e1ff3e8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x1815e1ff4e0 <col:14, col:19> 'limb':'unsigned long long' <IntegralCast>
|       `-ImplicitCastExpr 0x1815e1ff4c8 <col:14, col:19> 'int64_t':'long long' <LValueToRValue>
|         `-ArraySubscriptExpr 0x1815e1ff4a8 <col:14, col:19> 'int64_t':'long long' lvalue
|           |-ImplicitCastExpr 0x1815e1ff490 <col:14> 'int64_t *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x1815e1ff448 <col:14> 'int64_t [4]' lvalue Var 0x1815e1f8d48 'tmp' 'int64_t [4]'
|           `-IntegerLiteral 0x1815e1ff468 <col:18> 'int' 3
|-FunctionDecl 0x1815e1ff728 <line:688:1, line:701:1> line:688:13 used felem_is_zero 'limb (const limb *)' static
| |-ParmVarDecl 0x1815e1ff618 <col:27, col:39> col:39 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e200ed8 <line:689:1, line:701:1>
|   |-DeclStmt 0x1815e1ff970 <line:690:5, col:40>
|   | |-VarDecl 0x1815e1ff7f8 <col:5, col:10> col:10 used zero 'limb':'unsigned long long'
|   | |-VarDecl 0x1815e1ff870 <col:5, col:16> col:16 used two224m96p1 'limb':'unsigned long long'
|   | `-VarDecl 0x1815e1ff8e8 <col:5, col:29> col:29 used two225m97p2 'limb':'unsigned long long'
|   |-BinaryOperator 0x1815e1ffc80 <line:692:5, col:40> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e1ff988 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e1ff7f8 'zero' 'limb':'unsigned long long'
|   | `-BinaryOperator 0x1815e1ffc60 <col:12, col:40> 'unsigned long long' '|'
|   |   |-BinaryOperator 0x1815e1ffba8 <col:12, col:32> 'unsigned long long' '|'
|   |   | |-BinaryOperator 0x1815e1ffaf0 <col:12, col:24> 'unsigned long long' '|'
|   |   | | |-ImplicitCastExpr 0x1815e1ffac0 <col:12, col:16> 'limb':'unsigned long long' <LValueToRValue>
|   |   | | | `-ArraySubscriptExpr 0x1815e1ffa20 <col:12, col:16> 'const limb':'const unsigned long long' lvalue
|   |   | | |   |-ImplicitCastExpr 0x1815e1ffa08 <col:12> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x1815e1ff9c0 <col:12> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |   | | |   `-IntegerLiteral 0x1815e1ff9e0 <col:15> 'int' 0
|   |   | | `-ImplicitCastExpr 0x1815e1ffad8 <col:20, col:24> 'limb':'unsigned long long' <LValueToRValue>
|   |   | |   `-ArraySubscriptExpr 0x1815e1ffaa0 <col:20, col:24> 'const limb':'const unsigned long long' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e1ffa88 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x1815e1ffa40 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |   | |     `-IntegerLiteral 0x1815e1ffa60 <col:23> 'int' 1
|   |   | `-ImplicitCastExpr 0x1815e1ffb90 <col:28, col:32> 'limb':'unsigned long long' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1815e1ffb70 <col:28, col:32> 'const limb':'const unsigned long long' lvalue
|   |   |     |-ImplicitCastExpr 0x1815e1ffb58 <col:28> 'const limb *':'const limb *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1815e1ffb10 <col:28> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |   |     `-IntegerLiteral 0x1815e1ffb30 <col:31> 'int' 2
|   |   `-ImplicitCastExpr 0x1815e1ffc48 <col:36, col:40> 'limb':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1815e1ffc28 <col:36, col:40> 'const limb':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e1ffc10 <col:36> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1815e1ffbc8 <col:36> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x1815e1ffbe8 <col:39> 'int' 3
|   |-BinaryOperator 0x1815e1ffed0 <line:693:5, col:45> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e1ffca0 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e1ff7f8 'zero' 'limb':'unsigned long long'
|   | `-ImplicitCastExpr 0x1815e1ffeb8 <col:12, col:45> 'limb':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1815e1ffe98 <col:12, col:45> 'long long' '&'
|   |     |-ParenExpr 0x1815e1ffe38 <col:12, col:41> 'long long'
|   |     | `-BinaryOperator 0x1815e1ffe18 <col:13, col:39> 'long long' '>>'
|   |     |   |-ParenExpr 0x1815e1ffdd0 <col:13, col:34> 'long long'
|   |     |   | `-BinaryOperator 0x1815e1ffdb0 <col:14, col:33> 'long long' '-'
|   |     |   |   |-CStyleCastExpr 0x1815e1ffd48 <col:14, col:29> 'int64_t':'long long' <IntegralCast>
|   |     |   |   | `-ImplicitCastExpr 0x1815e1ffd30 <col:24, col:29> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |   |   |   `-ParenExpr 0x1815e1ffd10 <col:24, col:29> 'limb':'unsigned long long' lvalue
|   |     |   |   |     `-DeclRefExpr 0x1815e1ffcc0 <col:25> 'limb':'unsigned long long' lvalue Var 0x1815e1ff7f8 'zero' 'limb':'unsigned long long'
|   |     |   |   `-ImplicitCastExpr 0x1815e1ffd98 <col:33> 'long long' <IntegralCast>
|   |     |   |     `-IntegerLiteral 0x1815e1ffd70 <col:33> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e1ffdf0 <col:39> 'int' 63
|   |     `-ImplicitCastExpr 0x1815e1ffe80 <col:45> 'long long' <IntegralCast>
|   |       `-IntegerLiteral 0x1815e1ffe58 <col:45> 'int' 1
|   |-BinaryOperator 0x1815e2003e8 <line:694:5, line:695:69> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e1ffef0 <line:694:5> 'limb':'unsigned long long' lvalue Var 0x1815e1ff870 'two224m96p1' 'limb':'unsigned long long'
|   | `-BinaryOperator 0x1815e2003c8 <col:19, line:695:69> 'unsigned long long' '|'
|   |   |-BinaryOperator 0x1815e200290 <line:694:19, line:695:38> 'unsigned long long' '|'
|   |   | |-BinaryOperator 0x1815e200158 <line:694:19, col:60> 'unsigned long long' '|'
|   |   | | |-ParenExpr 0x1815e200020 <col:19, col:29> 'unsigned long long'
|   |   | | | `-BinaryOperator 0x1815e200000 <col:20, col:28> 'unsigned long long' '^'
|   |   | | |   |-ImplicitCastExpr 0x1815e1fffd0 <col:20, col:24> 'limb':'unsigned long long' <LValueToRValue>
|   |   | | |   | `-ArraySubscriptExpr 0x1815e1fff88 <col:20, col:24> 'const limb':'const unsigned long long' lvalue
|   |   | | |   |   |-ImplicitCastExpr 0x1815e1fff70 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | |   |   | `-DeclRefExpr 0x1815e1fff28 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |   | | |   |   `-IntegerLiteral 0x1815e1fff48 <col:23> 'int' 0
|   |   | | |   `-ImplicitCastExpr 0x1815e1fffe8 <col:28> 'unsigned long long' <IntegralCast>
|   |   | | |     `-IntegerLiteral 0x1815e1fffa8 <col:28> 'int' 1
|   |   | | `-ParenExpr 0x1815e200138 <col:33, col:60> 'unsigned long long'
|   |   | |   `-BinaryOperator 0x1815e200118 <col:34, col:42> 'unsigned long long' '^'
|   |   | |     |-ImplicitCastExpr 0x1815e2000e8 <col:34, col:38> 'limb':'unsigned long long' <LValueToRValue>
|   |   | |     | `-ArraySubscriptExpr 0x1815e2000a0 <col:34, col:38> 'const limb':'const unsigned long long' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e200088 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   | |     |   | `-DeclRefExpr 0x1815e200040 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |   | |     |   `-IntegerLiteral 0x1815e200060 <col:37> 'int' 1
|   |   | |     `-ImplicitCastExpr 0x1815e200100 <col:42> 'unsigned long long' <IntegralCast>
|   |   | |       `-IntegerLiteral 0x1815e2000c0 <col:42> 'long long' 72056494526300160
|   |   | `-ParenExpr 0x1815e200270 <line:695:11, col:38> 'unsigned long long'
|   |   |   `-BinaryOperator 0x1815e200250 <col:12, col:20> 'unsigned long long' '^'
|   |   |     |-ImplicitCastExpr 0x1815e200220 <col:12, col:16> 'limb':'unsigned long long' <LValueToRValue>
|   |   |     | `-ArraySubscriptExpr 0x1815e2001d8 <col:12, col:16> 'const limb':'const unsigned long long' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1815e2001c0 <col:12> 'const limb *':'const limb *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1815e200178 <col:12> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |   |     |   `-IntegerLiteral 0x1815e200198 <col:15> 'int' 2
|   |   |     `-ImplicitCastExpr 0x1815e200238 <col:20> 'unsigned long long' <IntegralCast>
|   |   |       `-IntegerLiteral 0x1815e2001f8 <col:20> 'long long' 72057594037927935
|   |   `-ParenExpr 0x1815e2003a8 <col:42, col:69> 'unsigned long long'
|   |     `-BinaryOperator 0x1815e200388 <col:43, col:51> 'unsigned long long' '^'
|   |       |-ImplicitCastExpr 0x1815e200358 <col:43, col:47> 'limb':'unsigned long long' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x1815e200310 <col:43, col:47> 'const limb':'const unsigned long long' lvalue
|   |       |   |-ImplicitCastExpr 0x1815e2002f8 <col:43> 'const limb *':'const limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1815e2002b0 <col:43> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |       |   `-IntegerLiteral 0x1815e2002d0 <col:46> 'int' 3
|   |       `-ImplicitCastExpr 0x1815e200370 <col:51> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x1815e200330 <col:51> 'long long' 72057594037927935
|   |-BinaryOperator 0x1815e200638 <line:696:5, col:59> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e200408 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e1ff870 'two224m96p1' 'limb':'unsigned long long'
|   | `-ImplicitCastExpr 0x1815e200620 <col:19, col:59> 'limb':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1815e200600 <col:19, col:59> 'long long' '&'
|   |     |-ParenExpr 0x1815e2005a0 <col:19, col:55> 'long long'
|   |     | `-BinaryOperator 0x1815e200580 <col:20, col:53> 'long long' '>>'
|   |     |   |-ParenExpr 0x1815e200538 <col:20, col:48> 'long long'
|   |     |   | `-BinaryOperator 0x1815e200518 <col:21, col:47> 'long long' '-'
|   |     |   |   |-CStyleCastExpr 0x1815e2004b0 <col:21, col:43> 'int64_t':'long long' <IntegralCast>
|   |     |   |   | `-ImplicitCastExpr 0x1815e200498 <col:31, col:43> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |   |   |   `-ParenExpr 0x1815e200478 <col:31, col:43> 'limb':'unsigned long long' lvalue
|   |     |   |   |     `-DeclRefExpr 0x1815e200428 <col:32> 'limb':'unsigned long long' lvalue Var 0x1815e1ff870 'two224m96p1' 'limb':'unsigned long long'
|   |     |   |   `-ImplicitCastExpr 0x1815e200500 <col:47> 'long long' <IntegralCast>
|   |     |   |     `-IntegerLiteral 0x1815e2004d8 <col:47> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e200558 <col:53> 'int' 63
|   |     `-ImplicitCastExpr 0x1815e2005e8 <col:59> 'long long' <IntegralCast>
|   |       `-IntegerLiteral 0x1815e2005c0 <col:59> 'int' 1
|   |-BinaryOperator 0x1815e200b50 <line:697:5, line:698:69> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e200658 <line:697:5> 'limb':'unsigned long long' lvalue Var 0x1815e1ff8e8 'two225m97p2' 'limb':'unsigned long long'
|   | `-BinaryOperator 0x1815e200b30 <col:19, line:698:69> 'unsigned long long' '|'
|   |   |-BinaryOperator 0x1815e2009f8 <line:697:19, line:698:38> 'unsigned long long' '|'
|   |   | |-BinaryOperator 0x1815e2008c0 <line:697:19, col:60> 'unsigned long long' '|'
|   |   | | |-ParenExpr 0x1815e200788 <col:19, col:29> 'unsigned long long'
|   |   | | | `-BinaryOperator 0x1815e200768 <col:20, col:28> 'unsigned long long' '^'
|   |   | | |   |-ImplicitCastExpr 0x1815e200738 <col:20, col:24> 'limb':'unsigned long long' <LValueToRValue>
|   |   | | |   | `-ArraySubscriptExpr 0x1815e2006f0 <col:20, col:24> 'const limb':'const unsigned long long' lvalue
|   |   | | |   |   |-ImplicitCastExpr 0x1815e2006d8 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | |   |   | `-DeclRefExpr 0x1815e200690 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |   | | |   |   `-IntegerLiteral 0x1815e2006b0 <col:23> 'int' 0
|   |   | | |   `-ImplicitCastExpr 0x1815e200750 <col:28> 'unsigned long long' <IntegralCast>
|   |   | | |     `-IntegerLiteral 0x1815e200710 <col:28> 'int' 2
|   |   | | `-ParenExpr 0x1815e2008a0 <col:33, col:60> 'unsigned long long'
|   |   | |   `-BinaryOperator 0x1815e200880 <col:34, col:42> 'unsigned long long' '^'
|   |   | |     |-ImplicitCastExpr 0x1815e200850 <col:34, col:38> 'limb':'unsigned long long' <LValueToRValue>
|   |   | |     | `-ArraySubscriptExpr 0x1815e200808 <col:34, col:38> 'const limb':'const unsigned long long' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e2007f0 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   | |     |   | `-DeclRefExpr 0x1815e2007a8 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |   | |     |   `-IntegerLiteral 0x1815e2007c8 <col:37> 'int' 1
|   |   | |     `-ImplicitCastExpr 0x1815e200868 <col:42> 'unsigned long long' <IntegralCast>
|   |   | |       `-IntegerLiteral 0x1815e200828 <col:42> 'long long' 72055395014672384
|   |   | `-ParenExpr 0x1815e2009d8 <line:698:11, col:38> 'unsigned long long'
|   |   |   `-BinaryOperator 0x1815e2009b8 <col:12, col:20> 'unsigned long long' '^'
|   |   |     |-ImplicitCastExpr 0x1815e200988 <col:12, col:16> 'limb':'unsigned long long' <LValueToRValue>
|   |   |     | `-ArraySubscriptExpr 0x1815e200940 <col:12, col:16> 'const limb':'const unsigned long long' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1815e200928 <col:12> 'const limb *':'const limb *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x1815e2008e0 <col:12> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |   |     |   `-IntegerLiteral 0x1815e200900 <col:15> 'int' 2
|   |   |     `-ImplicitCastExpr 0x1815e2009a0 <col:20> 'unsigned long long' <IntegralCast>
|   |   |       `-IntegerLiteral 0x1815e200960 <col:20> 'long long' 72057594037927935
|   |   `-ParenExpr 0x1815e200b10 <col:42, col:69> 'unsigned long long'
|   |     `-BinaryOperator 0x1815e200af0 <col:43, col:51> 'unsigned long long' '^'
|   |       |-ImplicitCastExpr 0x1815e200ac0 <col:43, col:47> 'limb':'unsigned long long' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x1815e200a78 <col:43, col:47> 'const limb':'const unsigned long long' lvalue
|   |       |   |-ImplicitCastExpr 0x1815e200a60 <col:43> 'const limb *':'const limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1815e200a18 <col:43> 'const limb *':'const limb *' lvalue ParmVar 0x1815e1ff618 'in' 'const limb *':'const limb *'
|   |       |   `-IntegerLiteral 0x1815e200a38 <col:46> 'int' 3
|   |       `-ImplicitCastExpr 0x1815e200ad8 <col:51> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x1815e200a98 <col:51> 'long long' 144115188075855871
|   |-BinaryOperator 0x1815e200da0 <line:699:5, col:59> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e200b70 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e1ff8e8 'two225m97p2' 'limb':'unsigned long long'
|   | `-ImplicitCastExpr 0x1815e200d88 <col:19, col:59> 'limb':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x1815e200d68 <col:19, col:59> 'long long' '&'
|   |     |-ParenExpr 0x1815e200d08 <col:19, col:55> 'long long'
|   |     | `-BinaryOperator 0x1815e200ce8 <col:20, col:53> 'long long' '>>'
|   |     |   |-ParenExpr 0x1815e200ca0 <col:20, col:48> 'long long'
|   |     |   | `-BinaryOperator 0x1815e200c80 <col:21, col:47> 'long long' '-'
|   |     |   |   |-CStyleCastExpr 0x1815e200c18 <col:21, col:43> 'int64_t':'long long' <IntegralCast>
|   |     |   |   | `-ImplicitCastExpr 0x1815e200c00 <col:31, col:43> 'limb':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |   |   |   `-ParenExpr 0x1815e200be0 <col:31, col:43> 'limb':'unsigned long long' lvalue
|   |     |   |   |     `-DeclRefExpr 0x1815e200b90 <col:32> 'limb':'unsigned long long' lvalue Var 0x1815e1ff8e8 'two225m97p2' 'limb':'unsigned long long'
|   |     |   |   `-ImplicitCastExpr 0x1815e200c68 <col:47> 'long long' <IntegralCast>
|   |     |   |     `-IntegerLiteral 0x1815e200c40 <col:47> 'int' 1
|   |     |   `-IntegerLiteral 0x1815e200cc0 <col:53> 'int' 63
|   |     `-ImplicitCastExpr 0x1815e200d50 <col:59> 'long long' <IntegralCast>
|   |       `-IntegerLiteral 0x1815e200d28 <col:59> 'int' 1
|   `-ReturnStmt 0x1815e200ec8 <line:700:5, col:45>
|     `-ParenExpr 0x1815e200ea8 <col:12, col:45> 'unsigned long long'
|       `-BinaryOperator 0x1815e200e88 <col:13, col:34> 'unsigned long long' '|'
|         |-BinaryOperator 0x1815e200e30 <col:13, col:20> 'unsigned long long' '|'
|         | |-ImplicitCastExpr 0x1815e200e00 <col:13> 'limb':'unsigned long long' <LValueToRValue>
|         | | `-DeclRefExpr 0x1815e200dc0 <col:13> 'limb':'unsigned long long' lvalue Var 0x1815e1ff7f8 'zero' 'limb':'unsigned long long'
|         | `-ImplicitCastExpr 0x1815e200e18 <col:20> 'limb':'unsigned long long' <LValueToRValue>
|         |   `-DeclRefExpr 0x1815e200de0 <col:20> 'limb':'unsigned long long' lvalue Var 0x1815e1ff870 'two224m96p1' 'limb':'unsigned long long'
|         `-ImplicitCastExpr 0x1815e200e70 <col:34> 'limb':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1815e200e50 <col:34> 'limb':'unsigned long long' lvalue Var 0x1815e1ff8e8 'two225m97p2' 'limb':'unsigned long long'
|-FunctionDecl 0x1815e200ff0 <line:703:1, line:706:1> line:703:12 used felem_is_zero_int 'int (const void *)' static
| |-ParmVarDecl 0x1815e200f40 <col:30, col:42> col:42 used in 'const void *'
| `-CompoundStmt 0x1815e2012f8 <line:704:1, line:706:1>
|   `-ReturnStmt 0x1815e2012e8 <line:705:5, col:48>
|     `-CStyleCastExpr 0x1815e2012c0 <col:12, col:48> 'int' <IntegralCast>
|       `-ParenExpr 0x1815e2012a0 <col:17, col:48> 'unsigned long long'
|         `-BinaryOperator 0x1815e201248 <col:18, col:47> 'unsigned long long' '&'
|           |-CallExpr 0x1815e201170 <col:18, col:34> 'limb':'unsigned long long'
|           | |-ImplicitCastExpr 0x1815e201158 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x1815e2010b0 <col:18> 'limb (const limb *)' Function 0x1815e1ff728 'felem_is_zero' 'limb (const limb *)'
|           | `-ImplicitCastExpr 0x1815e2011b0 <col:32> 'const limb *':'const limb *' <BitCast>
|           |   `-ImplicitCastExpr 0x1815e201198 <col:32> 'const void *' <LValueToRValue>
|           |     `-DeclRefExpr 0x1815e2010d0 <col:32> 'const void *' lvalue ParmVar 0x1815e200f40 'in' 'const void *'
|           `-ParenExpr 0x1815e201228 <col:38, col:47> 'limb':'unsigned long long'
|             `-CStyleCastExpr 0x1815e201200 <col:39, col:46> 'limb':'unsigned long long' <IntegralCast>
|               `-IntegerLiteral 0x1815e2011c8 <col:46> 'int' 1
|-FunctionDecl 0x1815e201460 <line:710:1, line:788:1> line:710:13 used felem_inv 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x1815e201320 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e201398 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e20bec0 <line:711:1, line:788:1>
|   |-DeclStmt 0x1815e201730 <line:712:5, col:36>
|   | |-VarDecl 0x1815e201538 <col:5, col:11> col:11 used ftmp 'felem':'limb [4]'
|   | |-VarDecl 0x1815e2015b0 <col:5, col:17> col:17 used ftmp2 'felem':'limb [4]'
|   | |-VarDecl 0x1815e201628 <col:5, col:24> col:24 used ftmp3 'felem':'limb [4]'
|   | `-VarDecl 0x1815e2016a0 <col:5, col:31> col:31 used ftmp4 'felem':'limb [4]'
|   |-DeclStmt 0x1815e2017c0 <line:713:5, col:18>
|   | `-VarDecl 0x1815e201758 <col:5, col:15> col:15 used tmp 'widefelem':'widelimb [7]'
|   |-DeclStmt 0x1815e201858 <line:714:5, col:15>
|   | `-VarDecl 0x1815e2017f0 <col:5, col:14> col:14 used i 'unsigned int'
|   |-CallExpr 0x1815e201900 <line:716:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1815e2018e8 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201870 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e201930 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201890 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e201948 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e2018c8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1815e201398 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x1815e2019f0 <line:717:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e2019d8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201960 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e201a20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201980 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e201a50 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e201a38 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2019b8 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e201b00 <line:718:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e201ae8 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201a68 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e201b38 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201a88 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e201b50 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e201aa8 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x1815e201398 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1815e201b80 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e201b68 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e201ac8 <col:24> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e201c10 <line:719:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e201bf8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201b98 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e201c40 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201bb8 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e201c70 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e201c58 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e201bd8 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e201d00 <line:720:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e201ce8 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201c88 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e201d30 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201ca8 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e201d60 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e201d48 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e201cc8 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e201df0 <line:721:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e201dd8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201d78 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e201e20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201d98 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e201e50 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e201e38 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e201db8 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e201f00 <line:722:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e201ee8 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201e68 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e201f38 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201e88 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e201f50 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e201ea8 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x1815e201398 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1815e201f80 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e201f68 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e201ec8 <col:24> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e202010 <line:723:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e201ff8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201f98 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e202040 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e201fb8 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e202070 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202058 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e201fd8 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e202100 <line:724:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e2020e8 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202088 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e202130 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2020a8 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e202160 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202148 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2020c8 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e202208 <line:725:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e2021f0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202178 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e202238 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202198 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e202268 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202250 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2021d0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e2022f8 <line:726:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e2022e0 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202280 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e202328 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2022a0 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e202358 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202340 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2022c0 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2023e8 <line:727:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e2023d0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202370 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e202418 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202390 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e202448 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202430 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2023b0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e2024d8 <line:728:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e2024c0 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202460 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e202508 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202480 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e202538 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202520 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2024a0 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2025c8 <line:729:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e2025b0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202550 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e2025f8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202570 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e202628 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202610 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e202590 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e2026d8 <line:730:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e2026c0 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202640 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e202710 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202660 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e202740 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e202728 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e202680 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e202770 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202758 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2026a0 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e202800 <line:731:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e2027e8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202788 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e202830 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2027a8 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e202860 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202848 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2027c8 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e2028f0 <line:732:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e2028d8 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202878 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e202920 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202898 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e202950 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202938 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2028b8 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2029e0 <line:733:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e2029c8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202968 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e202a10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202988 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e202a40 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202a28 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2029a8 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-ForStmt 0x1815e202dc0 <line:734:5, line:737:5>
|   | |-BinaryOperator 0x1815e202ad0 <line:734:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1815e202a58 <col:10> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e202ab8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e202a90 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1815e202b68 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1815e202b38 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e202af0 <col:17> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e202b50 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e202b10 <col:21> 'int' 5
|   | |-UnaryOperator 0x1815e202ba8 <col:24, col:26> 'unsigned int' prefix '++'
|   | | `-DeclRefExpr 0x1815e202b88 <col:26> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1815e202da0 <col:29, line:737:5>
|   |   |-CallExpr 0x1815e202c38 <line:735:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1815e202c20 <col:9> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e202bc0 <col:9> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e202c68 <col:22> 'widelimb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e202be0 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |   | `-ImplicitCastExpr 0x1815e202c98 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e202c80 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1815e202c00 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x1815e202d28 <line:736:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1815e202d10 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e202cb0 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   |     |-ImplicitCastExpr 0x1815e202d58 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e202cd0 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1815e202d88 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1815e202d70 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1815e202cf0 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e202e90 <line:738:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e202e78 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202df8 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e202ec8 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202e18 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e202ef8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e202ee0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e202e38 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e202f28 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e202f10 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e202e58 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e202fb8 <line:739:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e202fa0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202f40 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e202fe8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e202f60 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e203018 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e203000 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e202f80 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e2030a8 <line:740:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e203090 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e203030 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2030d8 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e203050 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e1f30a8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f3090 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e203070 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e1f3150 <line:741:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f3138 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f30c0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e1f3180 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f30e0 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f31b0 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f3198 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f3118 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-ForStmt 0x1815e1f3518 <line:742:5, line:745:5>
|   | |-BinaryOperator 0x1815e1f3228 <line:742:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1815e1f31c8 <col:10> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e1f3210 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e1f31e8 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1815e1f32c0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1815e1f3290 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1f3248 <col:17> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e1f32a8 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e1f3268 <col:21> 'int' 11
|   | |-UnaryOperator 0x1815e1f3300 <col:25, col:27> 'unsigned int' prefix '++'
|   | | `-DeclRefExpr 0x1815e1f32e0 <col:27> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1815e1f34f8 <col:30, line:745:5>
|   |   |-CallExpr 0x1815e1f3390 <line:743:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1815e1f3378 <col:9> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e1f3318 <col:9> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e1f33c0 <col:22> 'widelimb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e1f3338 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |   | `-ImplicitCastExpr 0x1815e1f33f0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e1f33d8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1815e1f3358 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   |   `-CallExpr 0x1815e1f3480 <line:744:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1815e1f3468 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e1f3408 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   |     |-ImplicitCastExpr 0x1815e1f34b0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e1f3428 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1815e1f34e0 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1815e1f34c8 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1815e1f3448 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e1f35e8 <line:746:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x1815e1f35d0 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3550 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e1f3620 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3570 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e1f3650 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e1f3638 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e1f3590 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f3680 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f3668 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f35b0 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e1f3710 <line:747:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f36f8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3698 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e1f3740 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f36b8 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f3770 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f3758 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f36d8 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e1f3800 <line:748:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f37e8 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3788 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e1f3830 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f37a8 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e1f3860 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f3848 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f37c8 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e1f38f0 <line:749:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f38d8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3878 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e1f3920 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3898 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f3950 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f3938 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f38b8 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-ForStmt 0x1815e1f3cb8 <line:750:5, line:753:5>
|   | |-BinaryOperator 0x1815e1f39c8 <line:750:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1815e1f3968 <col:10> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e1f39b0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e1f3988 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1815e1f3a60 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1815e1f3a30 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1f39e8 <col:17> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e1f3a48 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e1f3a08 <col:21> 'int' 23
|   | |-UnaryOperator 0x1815e1f3aa0 <col:25, col:27> 'unsigned int' prefix '++'
|   | | `-DeclRefExpr 0x1815e1f3a80 <col:27> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1815e1f3c98 <col:30, line:753:5>
|   |   |-CallExpr 0x1815e1f3b30 <line:751:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1815e1f3b18 <col:9> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e1f3ab8 <col:9> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e1f3b60 <col:22> 'widelimb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e1f3ad8 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |   | `-ImplicitCastExpr 0x1815e1f3b90 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e1f3b78 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1815e1f3af8 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   |   `-CallExpr 0x1815e1f3c20 <line:752:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1815e1f3c08 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e1f3ba8 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   |     |-ImplicitCastExpr 0x1815e1f3c50 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e1f3bc8 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1815e1f3c80 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1815e1f3c68 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1815e1f3be8 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e1f3d88 <line:754:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x1815e1f3d70 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3cf0 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e1f3dc0 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3d10 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e1f3df0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e1f3dd8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e1f3d30 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f3e20 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f3e08 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f3d50 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e1f3eb0 <line:755:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f3e98 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3e38 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e1f3ee0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3e58 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f3f10 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f3ef8 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f3e78 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e1f3fa0 <line:756:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f3f88 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3f28 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e1f3fd0 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f3f48 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e1f4000 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f3fe8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f3f68 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x1815e1f40a8 <line:757:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f4090 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f4018 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e1f40d8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f4038 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2016a0 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f4108 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f40f0 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f4070 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-ForStmt 0x1815e1f4470 <line:758:5, line:761:5>
|   | |-BinaryOperator 0x1815e1f4180 <line:758:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1815e1f4120 <col:10> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e1f4168 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e1f4140 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1815e1f4218 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1815e1f41e8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1f41a0 <col:17> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e1f4200 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e1f41c0 <col:21> 'int' 47
|   | |-UnaryOperator 0x1815e1f4258 <col:25, col:27> 'unsigned int' prefix '++'
|   | | `-DeclRefExpr 0x1815e1f4238 <col:27> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1815e1f4450 <col:30, line:761:5>
|   |   |-CallExpr 0x1815e1f42e8 <line:759:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1815e1f42d0 <col:9> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e1f4270 <col:9> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e1f4318 <col:22> 'widelimb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e1f4290 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |   | `-ImplicitCastExpr 0x1815e1f4348 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e1f4330 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1815e1f42b0 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e2016a0 'ftmp4' 'felem':'limb [4]'
|   |   `-CallExpr 0x1815e1f43d8 <line:760:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1815e1f43c0 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e1f4360 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   |     |-ImplicitCastExpr 0x1815e1f4408 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e1f4380 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e2016a0 'ftmp4' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1815e1f4438 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1815e1f4420 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1815e1f43a0 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e1f4540 <line:762:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x1815e1f4528 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f44a8 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e1f4578 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f44c8 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e1f45a8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e1f4590 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e1f44e8 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f45d8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f45c0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f4508 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e2016a0 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x1815e1f4668 <line:763:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f4650 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f45f0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e1f4698 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f4610 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f46c8 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f46b0 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f4630 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e1f4758 <line:764:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f4740 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f46e0 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e1f4788 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f4700 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e1f47b8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f47a0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f4720 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x1815e1f4848 <line:765:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f4830 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f47d0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e1f4878 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f47f0 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2016a0 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f48a8 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f4890 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f4810 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-ForStmt 0x1815e1f4c10 <line:766:5, line:769:5>
|   | |-BinaryOperator 0x1815e1f4920 <line:766:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1815e1f48c0 <col:10> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e1f4908 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e1f48e0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1815e1f49b8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1815e1f4988 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1f4940 <col:17> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e1f49a0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e1f4960 <col:21> 'int' 23
|   | |-UnaryOperator 0x1815e1f49f8 <col:25, col:27> 'unsigned int' prefix '++'
|   | | `-DeclRefExpr 0x1815e1f49d8 <col:27> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1815e1f4bf0 <col:30, line:769:5>
|   |   |-CallExpr 0x1815e1f4a88 <line:767:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1815e1f4a70 <col:9> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e1f4a10 <col:9> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e1f4ab8 <col:22> 'widelimb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e1f4a30 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |   | `-ImplicitCastExpr 0x1815e1f4ae8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e1f4ad0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1815e1f4a50 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e2016a0 'ftmp4' 'felem':'limb [4]'
|   |   `-CallExpr 0x1815e1f4b78 <line:768:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1815e1f4b60 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e1f4b00 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   |     |-ImplicitCastExpr 0x1815e1f4ba8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e1f4b20 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e2016a0 'ftmp4' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1815e1f4bd8 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1815e1f4bc0 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1815e1f4b40 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e1f4ce0 <line:770:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x1815e1f4cc8 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f4c48 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e1f4d18 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f4c68 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e1f4d48 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e1f4d30 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e1f4c88 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f4d78 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f4d60 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f4ca8 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e2016a0 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x1815e1f4e08 <line:771:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e1f4df0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f4d90 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e1f4e38 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e1f4db0 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e1f4e68 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e1f4e50 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e1f4dd0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-ForStmt 0x1815e20b290 <line:772:5, line:775:5>
|   | |-BinaryOperator 0x1815e1f4ee0 <line:772:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1815e1f4e80 <col:10> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e1f4ec8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e1f4ea0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1815e1f4f78 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1815e1f4f48 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e1f4f00 <col:17> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e1f4f60 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e1f4f20 <col:21> 'int' 6
|   | |-UnaryOperator 0x1815e1f4fb8 <col:24, col:26> 'unsigned int' prefix '++'
|   | | `-DeclRefExpr 0x1815e1f4f98 <col:26> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1815e20b270 <col:29, line:775:5>
|   |   |-CallExpr 0x1815e1f5048 <line:773:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x1815e1f5030 <col:9> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e1f4fd0 <col:9> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e1f5078 <col:22> 'widelimb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e1f4ff0 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |   | `-ImplicitCastExpr 0x1815e20b168 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e20b150 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1815e1f5010 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x1815e20b1f8 <line:774:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x1815e20b1e0 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e20b180 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   |     |-ImplicitCastExpr 0x1815e20b228 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e20b1a0 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1815e20b258 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1815e20b240 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1815e20b1c0 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e20b360 <line:776:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e20b348 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b2c8 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e20b398 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b2e8 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e20b3c8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e20b3b0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e20b308 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e2015b0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20b3f8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20b3e0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20b328 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e20b488 <line:777:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e20b470 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b410 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e20b4b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b430 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20b4e8 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20b4d0 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20b450 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e20b578 <line:778:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e20b560 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b500 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e20b5a8 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b520 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e20b5d8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20b5c0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20b540 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e20b668 <line:779:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e20b650 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b5f0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e20b698 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b610 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20b6c8 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20b6b0 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20b630 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e20b778 <line:780:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e20b760 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b6e0 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e20b7b0 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b700 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e20b7e0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e20b7c8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e20b720 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20b7f8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e20b740 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e201398 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x1815e20b888 <line:781:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e20b870 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b810 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e20b8b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20b830 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20b8e8 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20b8d0 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20b850 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-ForStmt 0x1815e20bc50 <line:782:5, line:785:5>
|   | |-BinaryOperator 0x1815e20b960 <line:782:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x1815e20b900 <col:10> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e20b948 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e20b920 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1815e20b9f8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1815e20b9c8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e20b980 <col:17> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e20b9e0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e20b9a0 <col:21> 'int' 97
|   | |-UnaryOperator 0x1815e20ba38 <col:25, col:27> 'unsigned int' prefix '++'
|   | | `-DeclRefExpr 0x1815e20ba18 <col:27> 'unsigned int' lvalue Var 0x1815e2017f0 'i' 'unsigned int'
|   | `-CompoundStmt 0x1815e20bc30 <col:30, line:785:5>
|   |   |-CallExpr 0x1815e20bac8 <line:783:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1815e20bab0 <col:9> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e20ba50 <col:9> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e20baf8 <col:22> 'widelimb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e20ba70 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |   | `-ImplicitCastExpr 0x1815e20bb28 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e20bb10 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x1815e20ba90 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x1815e20bbb8 <line:784:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1815e20bba0 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e20bb40 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   |     |-ImplicitCastExpr 0x1815e20bbe8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e20bb60 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1815e20bc18 <col:28> 'const widelimb *':'const widelimb *' <NoOp>
|   |       `-ImplicitCastExpr 0x1815e20bc00 <col:28> 'widelimb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x1815e20bb80 <col:28> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e20bd20 <line:786:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e20bd08 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20bc88 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e20bd58 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20bca8 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e20bd88 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e20bd70 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e20bcc8 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e201538 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20bdb8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20bda0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20bce8 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e201628 'ftmp3' 'felem':'limb [4]'
|   `-CallExpr 0x1815e20be48 <line:787:5, col:26> 'void'
|     |-ImplicitCastExpr 0x1815e20be30 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1815e20bdd0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|     |-ImplicitCastExpr 0x1815e20be78 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1815e20bdf0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e201320 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1815e20bea8 <col:23> 'const widelimb *':'const widelimb *' <NoOp>
|       `-ImplicitCastExpr 0x1815e20be90 <col:23> 'widelimb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1815e20be10 <col:23> 'widefelem':'widelimb [7]' lvalue Var 0x1815e201758 'tmp' 'widefelem':'widelimb [7]'
|-FunctionDecl 0x1815e20c2e8 <line:794:1, line:805:1> line:794:13 used copy_conditional 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x1815e20c090 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e20c108 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x1815e20c180 <col:57, col:62> col:62 used icopy 'limb':'unsigned long long'
| `-CompoundStmt 0x1815e20cb50 <line:795:1, line:805:1>
|   |-DeclStmt 0x1815e20c438 <line:796:5, col:15>
|   | `-VarDecl 0x1815e20c3d0 <col:5, col:14> col:14 used i 'unsigned int'
|   |-DeclStmt 0x1815e20c518 <line:800:5, col:29>
|   | `-VarDecl 0x1815e20c460 <col:5, col:24> col:16 used copy 'const limb':'const unsigned long long' cinit
|   |   `-UnaryOperator 0x1815e20c500 <col:23, col:24> 'limb':'unsigned long long' prefix '-'
|   |     `-ImplicitCastExpr 0x1815e20c4e8 <col:24> 'limb':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x1815e20c4c8 <col:24> 'limb':'unsigned long long' lvalue ParmVar 0x1815e20c180 'icopy' 'limb':'unsigned long long'
|   `-ForStmt 0x1815e20cae8 <line:801:5, line:804:5>
|     |-BinaryOperator 0x1815e20c5a8 <line:801:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1815e20c530 <col:10> 'unsigned int' lvalue Var 0x1815e20c3d0 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1815e20c590 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1815e20c568 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1815e20c640 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1815e20c610 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e20c5c8 <col:17> 'unsigned int' lvalue Var 0x1815e20c3d0 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1815e20c628 <col:21> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1815e20c5e8 <col:21> 'int' 4
|     |-UnaryOperator 0x1815e20c680 <col:24, col:26> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x1815e20c660 <col:26> 'unsigned int' lvalue Var 0x1815e20c3d0 'i' 'unsigned int'
|     `-CompoundStmt 0x1815e20cac8 <col:29, line:804:5>
|       |-DeclStmt 0x1815e20c958 <line:802:9, col:49>
|       | `-VarDecl 0x1815e20c6a8 <col:9, col:48> col:20 used tmp 'const limb':'const unsigned long long' cinit
|       |   `-BinaryOperator 0x1815e20c8f0 <col:26, col:48> 'unsigned long long' '&'
|       |     |-ImplicitCastExpr 0x1815e20c8d8 <col:26> 'limb':'unsigned long long' <LValueToRValue>
|       |     | `-DeclRefExpr 0x1815e20c710 <col:26> 'const limb':'const unsigned long long' lvalue Var 0x1815e20c460 'copy' 'const limb':'const unsigned long long'
|       |     `-ParenExpr 0x1815e20c8b8 <col:33, col:48> 'unsigned long long'
|       |       `-BinaryOperator 0x1815e20c898 <col:34, col:47> 'unsigned long long' '^'
|       |         |-ImplicitCastExpr 0x1815e20c868 <col:34, col:38> 'limb':'unsigned long long' <LValueToRValue>
|       |         | `-ArraySubscriptExpr 0x1815e20c7b8 <col:34, col:38> 'const limb':'const unsigned long long' lvalue
|       |         |   |-ImplicitCastExpr 0x1815e20c788 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|       |         |   | `-DeclRefExpr 0x1815e20c748 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20c108 'in' 'const limb *':'const limb *'
|       |         |   `-ImplicitCastExpr 0x1815e20c7a0 <col:37> 'unsigned int' <LValueToRValue>
|       |         |     `-DeclRefExpr 0x1815e20c768 <col:37> 'unsigned int' lvalue Var 0x1815e20c3d0 'i' 'unsigned int'
|       |         `-ImplicitCastExpr 0x1815e20c880 <col:42, col:47> 'limb':'unsigned long long' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x1815e20c848 <col:42, col:47> 'limb':'unsigned long long' lvalue
|       |             |-ImplicitCastExpr 0x1815e20c818 <col:42> 'limb *':'limb *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x1815e20c7d8 <col:42> 'limb *':'limb *' lvalue ParmVar 0x1815e20c090 'out' 'limb *':'limb *'
|       |             `-ImplicitCastExpr 0x1815e20c830 <col:46> 'unsigned int' <LValueToRValue>
|       |               `-DeclRefExpr 0x1815e20c7f8 <col:46> 'unsigned int' lvalue Var 0x1815e20c3d0 'i' 'unsigned int'
|       `-CompoundAssignOperator 0x1815e20ca50 <line:803:9, col:19> 'limb':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|         |-ArraySubscriptExpr 0x1815e20c9e0 <col:9, col:14> 'limb':'unsigned long long' lvalue
|         | |-ImplicitCastExpr 0x1815e20c9b0 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x1815e20c970 <col:9> 'limb *':'limb *' lvalue ParmVar 0x1815e20c090 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x1815e20c9c8 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x1815e20c990 <col:13> 'unsigned int' lvalue Var 0x1815e20c3d0 'i' 'unsigned int'
|         `-ImplicitCastExpr 0x1815e20ca38 <col:19> 'limb':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x1815e20ca00 <col:19> 'const limb':'const unsigned long long' lvalue Var 0x1815e20c6a8 'tmp' 'const limb':'const unsigned long long'
|-FunctionDecl 0x1815e20cfe8 <line:826:1, line:895:1> line:827:1 used point_double 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x1815e20cb88 <col:14, col:20> col:20 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e20cc00 <col:27, col:33> col:33 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e20cc78 <col:40, col:46> col:46 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e20ccf0 <line:828:14, col:26> col:26 used x_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x1815e20cd68 <col:32, col:44> col:44 used y_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x1815e20cde0 <col:50, col:62> col:62 used z_in 'const limb *':'const limb *'
| |-CompoundStmt 0x1815e20d488 <line:829:1, line:895:1>
| | |-DeclStmt 0x1815e2031a0 <line:830:5, col:24>
| | | |-VarDecl 0x1815e20d0e0 <col:5, col:15> col:15 used tmp 'widefelem':'widelimb [7]'
| | | `-VarDecl 0x1815e203120 <col:5, col:20> col:20 used tmp2 'widefelem':'widelimb [7]'
| | |-DeclStmt 0x1815e2034c0 <line:831:5, col:49>
| | | |-VarDecl 0x1815e2031c8 <col:5, col:11> col:11 used delta 'felem':'limb [4]'
| | | |-VarDecl 0x1815e203240 <col:5, col:18> col:18 used gamma 'felem':'limb [4]'
| | | |-VarDecl 0x1815e2032b8 <col:5, col:25> col:25 used beta 'felem':'limb [4]'
| | | |-VarDecl 0x1815e203330 <col:5, col:31> col:31 used alpha 'felem':'limb [4]'
| | | |-VarDecl 0x1815e2033a8 <col:5, col:38> col:38 used ftmp 'felem':'limb [4]'
| | | `-VarDecl 0x1815e203420 <col:5, col:44> col:44 used ftmp2 'felem':'limb [4]'
| | |-CallExpr 0x1815e2035c0 <line:833:5, col:28> 'void'
| | | |-ImplicitCastExpr 0x1815e2035a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2034d8 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e2035f0 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2034f8 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2033a8 'ftmp' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e203608 <col:24> 'const limb *':'const limb *' <LValueToRValue>
| | |   `-DeclRefExpr 0x1815e203530 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20ccf0 'x_in' 'const limb *':'const limb *'
| | |-CallExpr 0x1815e2036b0 <line:834:5, col:29> 'void'
| | | |-ImplicitCastExpr 0x1815e203698 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203620 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e2036e0 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203640 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e203420 'ftmp2' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e2036f8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
| | |   `-DeclRefExpr 0x1815e203678 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20ccf0 'x_in' 'const limb *':'const limb *'
| | |-CallExpr 0x1815e2037a0 <line:837:5, col:27> 'void'
| | | |-ImplicitCastExpr 0x1815e203788 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203710 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e2037d0 <col:18> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203730 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | | `-ImplicitCastExpr 0x1815e2037e8 <col:23> 'const limb *':'const limb *' <LValueToRValue>
| | |   `-DeclRefExpr 0x1815e203768 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20cde0 'z_in' 'const limb *':'const limb *'
| | |-CallExpr 0x1815e203890 <line:838:5, col:28> 'void'
| | | |-ImplicitCastExpr 0x1815e203878 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203800 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
| | | |-ImplicitCastExpr 0x1815e2038c0 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203820 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2031c8 'delta' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e2038f0 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e2038d8 <col:25> 'widelimb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e203858 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | |-CallExpr 0x1815e203980 <line:841:5, col:27> 'void'
| | | |-ImplicitCastExpr 0x1815e203968 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203908 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e2039b0 <col:18> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203928 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | | `-ImplicitCastExpr 0x1815e2039c8 <col:23> 'const limb *':'const limb *' <LValueToRValue>
| | |   `-DeclRefExpr 0x1815e203948 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20cd68 'y_in' 'const limb *':'const limb *'
| | |-CallExpr 0x1815e203a70 <line:842:5, col:28> 'void'
| | | |-ImplicitCastExpr 0x1815e203a58 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2039e0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
| | | |-ImplicitCastExpr 0x1815e203aa0 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203a00 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e203240 'gamma' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e203ad0 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e203ab8 <col:25> 'widelimb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e203a38 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | |-CallExpr 0x1815e203b80 <line:845:5, col:31> 'void'
| | | |-ImplicitCastExpr 0x1815e203b68 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203ae8 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e203bb8 <col:15> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203b08 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | | |-ImplicitCastExpr 0x1815e203bd0 <col:20> 'const limb *':'const limb *' <LValueToRValue>
| | | | `-DeclRefExpr 0x1815e203b28 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20ccf0 'x_in' 'const limb *':'const limb *'
| | | `-ImplicitCastExpr 0x1815e203c00 <col:26> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e203be8 <col:26> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e203b48 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e203240 'gamma' 'felem':'limb [4]'
| | |-CallExpr 0x1815e203ca8 <line:846:5, col:27> 'void'
| | | |-ImplicitCastExpr 0x1815e203c90 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203c18 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
| | | |-ImplicitCastExpr 0x1815e203cd8 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203c38 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2032b8 'beta' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e203d08 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e203cf0 <col:24> 'widelimb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e203c70 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | |-CallExpr 0x1815e203d98 <line:849:5, col:27> 'void'
| | | |-ImplicitCastExpr 0x1815e203d80 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203d20 <col:5> 'void (limb *, const limb *)' Function 0x1815e1115e8 'felem_diff' 'void (limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e203dc8 <col:16> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203d40 <col:16> 'felem':'limb [4]' lvalue Var 0x1815e2033a8 'ftmp' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e203df8 <col:22> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e203de0 <col:22> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e203d60 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e2031c8 'delta' 'felem':'limb [4]'
| | |-CallExpr 0x1815e203e88 <line:851:5, col:27> 'void'
| | | |-ImplicitCastExpr 0x1815e203e70 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203e10 <col:5> 'void (limb *, const limb *)' Function 0x1815e10fc38 'felem_sum' 'void (limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e203eb8 <col:15> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203e30 <col:15> 'felem':'limb [4]' lvalue Var 0x1815e203420 'ftmp2' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e203ee8 <col:22> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e203ed0 <col:22> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e203e50 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e2031c8 'delta' 'felem':'limb [4]'
| | |-CallExpr 0x1815e203fe0 <line:853:5, col:26> 'void'
| | | |-ImplicitCastExpr 0x1815e203fc8 <col:5> 'void (*)(limb *, const limb)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203f00 <col:5> 'void (limb *, const limb)' Function 0x1815e115d28 'felem_scalar' 'void (limb *, const limb)'
| | | |-ImplicitCastExpr 0x1815e204010 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e203f20 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e203420 'ftmp2' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e204028 <col:25> 'limb':'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x1815e203f40 <col:25> 'int' 3
| | |-CallExpr 0x1815e2040d8 <line:855:5, col:31> 'void'
| | | |-ImplicitCastExpr 0x1815e2040c0 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204040 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e204110 <col:15> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204060 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | | |-ImplicitCastExpr 0x1815e204140 <col:20> 'const limb *':'const limb *' <NoOp>
| | | | `-ImplicitCastExpr 0x1815e204128 <col:20> 'limb *' <ArrayToPointerDecay>
| | | |   `-DeclRefExpr 0x1815e204080 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e2033a8 'ftmp' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e204170 <col:26> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204158 <col:26> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e2040a0 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e203420 'ftmp2' 'felem':'limb [4]'
| | |-CallExpr 0x1815e204218 <line:857:5, col:28> 'void'
| | | |-ImplicitCastExpr 0x1815e204200 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204188 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
| | | |-ImplicitCastExpr 0x1815e204248 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2041a8 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e203330 'alpha' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e204278 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204260 <col:25> 'widelimb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e2041e0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | |-CallExpr 0x1815e204308 <line:860:5, col:28> 'void'
| | | |-ImplicitCastExpr 0x1815e2042f0 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204290 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e204338 <col:18> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2042b0 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | | `-ImplicitCastExpr 0x1815e204368 <col:23> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204350 <col:23> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e2042d0 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e203330 'alpha' 'felem':'limb [4]'
| | |-CallExpr 0x1815e2043f8 <line:862:5, col:28> 'void'
| | | |-ImplicitCastExpr 0x1815e2043e0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204380 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e204428 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2043a0 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2033a8 'ftmp' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e204458 <col:24> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204440 <col:24> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e2043c0 <col:24> 'felem':'limb [4]' lvalue Var 0x1815e2032b8 'beta' 'felem':'limb [4]'
| | |-CallExpr 0x1815e2044f0 <line:863:5, col:25> 'void'
| | | |-ImplicitCastExpr 0x1815e2044d8 <col:5> 'void (*)(limb *, const limb)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204470 <col:5> 'void (limb *, const limb)' Function 0x1815e115d28 'felem_scalar' 'void (limb *, const limb)'
| | | |-ImplicitCastExpr 0x1815e204520 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204490 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2033a8 'ftmp' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e204538 <col:24> 'limb':'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x1815e2044b0 <col:24> 'int' 8
| | |-CallExpr 0x1815e2045c8 <line:865:5, col:32> 'void'
| | | |-ImplicitCastExpr 0x1815e2045b0 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204550 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e1147b8 'felem_diff_128_64' 'void (widelimb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e2045f8 <col:23> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204570 <col:23> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | | `-ImplicitCastExpr 0x1815e204628 <col:28> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204610 <col:28> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e204590 <col:28> 'felem':'limb [4]' lvalue Var 0x1815e2033a8 'ftmp' 'felem':'limb [4]'
| | |-CallExpr 0x1815e2046b8 <line:867:5, col:28> 'void'
| | | |-ImplicitCastExpr 0x1815e2046a0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204640 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
| | | |-ImplicitCastExpr 0x1815e2046e8 <col:18> 'limb *':'limb *' <LValueToRValue>
| | | | `-DeclRefExpr 0x1815e204660 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e20cb88 'x_out' 'limb *':'limb *'
| | | `-ImplicitCastExpr 0x1815e204718 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204700 <col:25> 'widelimb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e204680 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | |-CallExpr 0x1815e2047a8 <line:870:5, col:27> 'void'
| | | |-ImplicitCastExpr 0x1815e204790 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204730 <col:5> 'void (limb *, const limb *)' Function 0x1815e10fc38 'felem_sum' 'void (limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e2047d8 <col:15> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204750 <col:15> 'felem':'limb [4]' lvalue Var 0x1815e2031c8 'delta' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e204808 <col:22> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e2047f0 <col:22> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e204770 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e203240 'gamma' 'felem':'limb [4]'
| | |-CallExpr 0x1815e204898 <line:872:5, col:28> 'void'
| | | |-ImplicitCastExpr 0x1815e204880 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204820 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e2048c8 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204840 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2033a8 'ftmp' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e2048e0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
| | |   `-DeclRefExpr 0x1815e204860 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20cd68 'y_in' 'const limb *':'const limb *'
| | |-CallExpr 0x1815e204970 <line:873:5, col:25> 'void'
| | | |-ImplicitCastExpr 0x1815e204958 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2048f8 <col:5> 'void (limb *, const limb *)' Function 0x1815e10fc38 'felem_sum' 'void (limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e2049a0 <col:15> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204918 <col:15> 'felem':'limb [4]' lvalue Var 0x1815e2033a8 'ftmp' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e2049b8 <col:21> 'const limb *':'const limb *' <LValueToRValue>
| | |   `-DeclRefExpr 0x1815e204938 <col:21> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20cde0 'z_in' 'const limb *':'const limb *'
| | |-CallExpr 0x1815e204a48 <line:875:5, col:27> 'void'
| | | |-ImplicitCastExpr 0x1815e204a30 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2049d0 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e204a78 <col:18> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2049f0 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | | `-ImplicitCastExpr 0x1815e204aa8 <col:23> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204a90 <col:23> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e204a10 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e2033a8 'ftmp' 'felem':'limb [4]'
| | |-CallExpr 0x1815e204b38 <line:877:5, col:33> 'void'
| | | |-ImplicitCastExpr 0x1815e204b20 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204ac0 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e1147b8 'felem_diff_128_64' 'void (widelimb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e204b68 <col:23> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204ae0 <col:23> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | | `-ImplicitCastExpr 0x1815e204b98 <col:28> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204b80 <col:28> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e204b00 <col:28> 'felem':'limb [4]' lvalue Var 0x1815e2031c8 'delta' 'felem':'limb [4]'
| | |-CallExpr 0x1815e204c28 <line:879:5, col:28> 'void'
| | | |-ImplicitCastExpr 0x1815e204c10 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204bb0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
| | | |-ImplicitCastExpr 0x1815e204c58 <col:18> 'limb *':'limb *' <LValueToRValue>
| | | | `-DeclRefExpr 0x1815e204bd0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e20cc78 'z_out' 'limb *':'limb *'
| | | `-ImplicitCastExpr 0x1815e204c88 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204c70 <col:25> 'widelimb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e204bf0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | |-CallExpr 0x1815e204d20 <line:882:5, col:25> 'void'
| | | |-ImplicitCastExpr 0x1815e204d08 <col:5> 'void (*)(limb *, const limb)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204ca0 <col:5> 'void (limb *, const limb)' Function 0x1815e115d28 'felem_scalar' 'void (limb *, const limb)'
| | | |-ImplicitCastExpr 0x1815e204d50 <col:18> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204cc0 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e2032b8 'beta' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e204d68 <col:24> 'limb':'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x1815e204ce0 <col:24> 'int' 4
| | |-CallExpr 0x1815e204df8 <line:884:5, col:27> 'void'
| | | |-ImplicitCastExpr 0x1815e204de0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204d80 <col:5> 'void (limb *, const limb *)' Function 0x1815e1115e8 'felem_diff' 'void (limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e204e28 <col:16> 'limb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204da0 <col:16> 'felem':'limb [4]' lvalue Var 0x1815e2032b8 'beta' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e204e58 <col:22> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204e40 <col:22> 'limb *':'limb *' <LValueToRValue>
| | |     `-DeclRefExpr 0x1815e204dc0 <col:22> 'limb *':'limb *' lvalue ParmVar 0x1815e20cb88 'x_out' 'limb *':'limb *'
| | |-CallExpr 0x1815e204f08 <line:886:5, col:31> 'void'
| | | |-ImplicitCastExpr 0x1815e204ef0 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204e70 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e204f40 <col:15> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204e90 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | | |-ImplicitCastExpr 0x1815e204f70 <col:20> 'const limb *':'const limb *' <NoOp>
| | | | `-ImplicitCastExpr 0x1815e204f58 <col:20> 'limb *' <ArrayToPointerDecay>
| | | |   `-DeclRefExpr 0x1815e204eb0 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e203330 'alpha' 'felem':'limb [4]'
| | | `-ImplicitCastExpr 0x1815e204fa0 <col:27> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e204f88 <col:27> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e204ed0 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e2032b8 'beta' 'felem':'limb [4]'
| | |-CallExpr 0x1815e205048 <line:888:5, col:29> 'void'
| | | |-ImplicitCastExpr 0x1815e205030 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204fb8 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
| | | |-ImplicitCastExpr 0x1815e205078 <col:18> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e204fd8 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e203120 'tmp2' 'widefelem':'widelimb [7]'
| | | `-ImplicitCastExpr 0x1815e2050a8 <col:24> 'const limb *':'const limb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e205090 <col:24> 'limb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e205010 <col:24> 'felem':'limb [4]' lvalue Var 0x1815e203240 'gamma' 'felem':'limb [4]'
| | |-CallExpr 0x1815e20d200 <line:890:5, col:29> 'void'
| | | |-ImplicitCastExpr 0x1815e20d1e8 <col:5> 'void (*)(widelimb *, const widelimb)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2050c0 <col:5> 'void (widelimb *, const widelimb)' Function 0x1815e116388 'widefelem_scalar' 'void (widelimb *, const widelimb)'
| | | |-ImplicitCastExpr 0x1815e20d230 <col:22> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e2050e0 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e203120 'tmp2' 'widefelem':'widelimb [7]'
| | | `-IntegerLiteral 0x1815e20d160 <col:28> 'int' 8
| | |-CallExpr 0x1815e20d320 <line:892:5, col:29> 'void'
| | | |-ImplicitCastExpr 0x1815e20d308 <col:5> 'void (*)(widelimb *, const widelimb *)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x1815e20d248 <col:5> 'void (widelimb *, const widelimb *)' Function 0x1815e112ca8 'widefelem_diff' 'void (widelimb *, const widelimb *)'
| | | |-ImplicitCastExpr 0x1815e20d350 <col:20> 'widelimb *' <ArrayToPointerDecay>
| | | | `-DeclRefExpr 0x1815e20d268 <col:20> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| | | `-ImplicitCastExpr 0x1815e20d380 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
| | |   `-ImplicitCastExpr 0x1815e20d368 <col:25> 'widelimb *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x1815e20d288 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e203120 'tmp2' 'widefelem':'widelimb [7]'
| | `-CallExpr 0x1815e20d410 <line:894:5, col:28> 'void'
| |   |-ImplicitCastExpr 0x1815e20d3f8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x1815e20d398 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
| |   |-ImplicitCastExpr 0x1815e20d440 <col:18> 'limb *':'limb *' <LValueToRValue>
| |   | `-DeclRefExpr 0x1815e20d3b8 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e20cc00 'y_out' 'limb *':'limb *'
| |   `-ImplicitCastExpr 0x1815e20d470 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
| |     `-ImplicitCastExpr 0x1815e20d458 <col:25> 'widelimb *' <ArrayToPointerDecay>
| |       `-DeclRefExpr 0x1815e20d3d8 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20d0e0 'tmp' 'widefelem':'widelimb [7]'
| `-FullComment 0x1815e310a00 <line:807:4, col:78>
|   `-ParagraphComment 0x1815e3109d8 <col:4, col:78>
|     `-TextComment 0x1815e3109b0 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x1815e20dcb8 <line:915:1, line:1078:1> line:915:13 used point_add 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x1815e20d5b0 <col:23, col:29> col:29 used x3 'limb *':'limb *'
| |-ParmVarDecl 0x1815e20d628 <col:33, col:39> col:39 used y3 'limb *':'limb *'
| |-ParmVarDecl 0x1815e20d6a0 <col:43, col:49> col:49 used z3 'limb *':'limb *'
| |-ParmVarDecl 0x1815e20d718 <line:916:23, col:35> col:35 used x1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1815e20d790 <col:39, col:51> col:51 used y1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1815e20d808 <col:55, col:67> col:67 used z1 'const limb *':'const limb *'
| |-ParmVarDecl 0x1815e20d888 <line:917:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x1815e20d900 <col:40, col:52> col:52 used x2 'const limb *':'const limb *'
| |-ParmVarDecl 0x1815e20d978 <col:56, col:68> col:68 used y2 'const limb *':'const limb *'
| |-ParmVarDecl 0x1815e20d9f0 <line:918:23, col:35> col:35 used z2 'const limb *':'const limb *'
| `-CompoundStmt 0x1815e206438 <line:919:1, line:1078:1>
|   |-DeclStmt 0x1815e20e1c8 <line:920:5, col:64>
|   | |-VarDecl 0x1815e20ddd0 <col:5, col:11> col:11 used ftmp 'felem':'limb [4]'
|   | |-VarDecl 0x1815e20de48 <col:5, col:17> col:17 used ftmp2 'felem':'limb [4]'
|   | |-VarDecl 0x1815e20dec0 <col:5, col:24> col:24 used ftmp3 'felem':'limb [4]'
|   | |-VarDecl 0x1815e20df38 <col:5, col:31> col:31 used ftmp4 'felem':'limb [4]'
|   | |-VarDecl 0x1815e20dfb0 <col:5, col:38> col:38 used ftmp5 'felem':'limb [4]'
|   | |-VarDecl 0x1815e20e028 <col:5, col:45> col:45 used x_out 'felem':'limb [4]'
|   | |-VarDecl 0x1815e20e0a0 <col:5, col:52> col:52 used y_out 'felem':'limb [4]'
|   | `-VarDecl 0x1815e20e118 <col:5, col:59> col:59 used z_out 'felem':'limb [4]'
|   |-DeclStmt 0x1815e20e2e8 <line:921:5, col:24>
|   | |-VarDecl 0x1815e20e1f0 <col:5, col:15> col:15 used tmp 'widefelem':'widelimb [7]'
|   | `-VarDecl 0x1815e20e268 <col:5, col:20> col:20 used tmp2 'widefelem':'widelimb [7]'
|   |-DeclStmt 0x1815e20e508 <line:922:5, col:50>
|   | |-VarDecl 0x1815e20e310 <col:5, col:10> col:10 used z1_is_zero 'limb':'unsigned long long'
|   | |-VarDecl 0x1815e20e388 <col:5, col:22> col:22 used z2_is_zero 'limb':'unsigned long long'
|   | |-VarDecl 0x1815e20e400 <col:5, col:34> col:34 used x_equal 'limb':'unsigned long long'
|   | `-VarDecl 0x1815e20e478 <col:5, col:43> col:43 used y_equal 'limb':'unsigned long long'
|   |-IfStmt 0x1815e20f018 <line:924:5, line:950:5> has_else
|   | |-UnaryOperator 0x1815e20e558 <line:924:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1815e20e540 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1815e20e520 <col:10> 'const int' lvalue ParmVar 0x1815e20d888 'mixed' 'const int'
|   | |-CompoundStmt 0x1815e20edf8 <col:17, line:940:5>
|   | | |-CallExpr 0x1815e20e600 <line:926:9, col:29> 'void'
|   | | | |-ImplicitCastExpr 0x1815e20e5e8 <col:9> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20e570 <col:9> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1815e20e630 <col:22> 'widelimb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20e590 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | | | `-ImplicitCastExpr 0x1815e20e648 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1815e20e5c8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d9f0 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x1815e20e6f0 <line:927:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1815e20e6d8 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20e660 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | | | |-ImplicitCastExpr 0x1815e20e720 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20e680 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1815e20e750 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1815e20e738 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1815e20e6b8 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | | |-CallExpr 0x1815e20e800 <line:930:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x1815e20e7e8 <col:9> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20e768 <col:9> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1815e20e838 <col:19> 'widelimb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20e788 <col:19> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | | | |-ImplicitCastExpr 0x1815e20e868 <col:24> 'const limb *':'const limb *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1815e20e850 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1815e20e7a8 <col:24> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1815e20e880 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1815e20e7c8 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d9f0 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x1815e20e928 <line:931:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x1815e20e910 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20e898 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | | | |-ImplicitCastExpr 0x1815e20e958 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20e8b8 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20df38 'ftmp4' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1815e20e988 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1815e20e970 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1815e20e8f0 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | | |-CallExpr 0x1815e20ea50 <line:934:9, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x1815e20ea38 <col:9> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20e9a0 <col:9> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1815e20ea88 <col:19> 'widelimb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20e9c0 <col:19> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   | | | |-ImplicitCastExpr 0x1815e20eab8 <col:25> 'const limb *':'const limb *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1815e20eaa0 <col:25> 'limb *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1815e20e9f8 <col:25> 'felem':'limb [4]' lvalue Var 0x1815e20df38 'ftmp4' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1815e20ead0 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1815e20ea18 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d790 'y1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x1815e20eb60 <line:935:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x1815e20eb48 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20eae8 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | | | |-ImplicitCastExpr 0x1815e20eb90 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20eb08 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20df38 'ftmp4' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1815e20ebc0 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1815e20eba8 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x1815e20eb28 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   | | |-CallExpr 0x1815e20ec70 <line:938:9, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x1815e20ec58 <col:9> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20ebd8 <col:9> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1815e20eca8 <col:19> 'widelimb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e20ebf8 <col:19> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   | | | |-ImplicitCastExpr 0x1815e20ecd8 <col:25> 'const limb *':'const limb *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1815e20ecc0 <col:25> 'limb *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1815e20ec18 <col:25> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x1815e20ecf0 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1815e20ec38 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d718 'x1' 'const limb *':'const limb *'
|   | | `-CallExpr 0x1815e20ed80 <line:939:9, col:33> 'void'
|   | |   |-ImplicitCastExpr 0x1815e20ed68 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1815e20ed08 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |   |-ImplicitCastExpr 0x1815e20edb0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1815e20ed28 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   | |   `-ImplicitCastExpr 0x1815e20ede0 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   | |     `-ImplicitCastExpr 0x1815e20edc8 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x1815e20ed48 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   | `-CompoundStmt 0x1815e20eff8 <line:940:12, line:950:5>
|   |   |-CallExpr 0x1815e20eec0 <line:946:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x1815e20eea8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e20ee48 <col:9> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e20eef0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e20ee68 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20df38 'ftmp4' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x1815e20ef08 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1815e20ee88 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d790 'y1' 'const limb *':'const limb *'
|   |   `-CallExpr 0x1815e20ef98 <line:949:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1815e20ef80 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e20ef20 <col:9> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1815e20efc8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e20ef40 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1815e20efe0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1815e20ef60 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d718 'x1' 'const limb *':'const limb *'
|   |-CallExpr 0x1815e20f0b8 <line:953:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1815e20f0a0 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f040 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e20f0e8 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f060 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e20f100 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e20f080 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d808 'z1' 'const limb *':'const limb *'
|   |-CallExpr 0x1815e20f1c0 <line:954:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e20f1a8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f118 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e20f1f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f138 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20f220 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20f208 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20f188 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e20f2d0 <line:957:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e20f2b8 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f238 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e20f308 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f258 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e20f338 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e20f320 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e20f278 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20f350 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e20f298 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d808 'z1' 'const limb *':'const limb *'
|   |-CallExpr 0x1815e20f3f8 <line:958:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e20f3e0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f368 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e20f428 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f388 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20dec0 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20f458 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20f440 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20f3c0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e20f508 <line:961:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1815e20f4f0 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f470 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e20f540 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f490 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e20f570 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e20f558 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e20f4b0 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e20dec0 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20f588 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e20f4d0 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d978 'y2' 'const limb *':'const limb *'
|   |-CallExpr 0x1815e20f618 <line:965:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x1815e20f600 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f5a0 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e1147b8 'felem_diff_128_64' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e20f648 <col:23> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f5c0 <col:23> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e20f678 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20f660 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20f5e0 <col:28> 'felem':'limb [4]' lvalue Var 0x1815e20df38 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x1815e20f708 <line:967:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e20f6f0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f690 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e20f738 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f6b0 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20dec0 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20f768 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20f750 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20f6d0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e20f818 <line:970:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e20f800 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f780 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e20f850 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f7a0 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e20f880 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e20f868 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e20f7c0 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20f898 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e20f7e0 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d900 'x2' 'const limb *':'const limb *'
|   |-CallExpr 0x1815e20f928 <line:974:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x1815e20f910 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f8b0 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e1147b8 'felem_diff_128_64' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e20f958 <col:23> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f8d0 <col:23> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e20f988 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20f970 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20f8f0 <col:28> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e20fa18 <line:976:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e20fa00 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f9a0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e20fa48 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e20f9c0 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e20fa78 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e20fa60 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e20f9e0 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   |-BinaryOperator 0x1815e20fb78 <line:982:5, col:33> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e20fa90 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e20e400 'x_equal' 'limb':'unsigned long long'
|   | `-CallExpr 0x1815e20fb20 <col:15, col:33> 'limb':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1815e20fb08 <col:15> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1815e20fac8 <col:15> 'limb (const limb *)' Function 0x1815e1ff728 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x1815e20fb60 <col:29> 'const limb *':'const limb *' <NoOp>
|   |     `-ImplicitCastExpr 0x1815e20fb48 <col:29> 'limb *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x1815e20fae8 <col:29> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   |-BinaryOperator 0x1815e20fc80 <line:983:5, col:34> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e20fb98 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e20e478 'y_equal' 'limb':'unsigned long long'
|   | `-CallExpr 0x1815e20fc28 <col:15, col:34> 'limb':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1815e20fc10 <col:15> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1815e20fbd0 <col:15> 'limb (const limb *)' Function 0x1815e1ff728 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x1815e20fc68 <col:29> 'const limb *':'const limb *' <NoOp>
|   |     `-ImplicitCastExpr 0x1815e20fc50 <col:29> 'limb *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x1815e20fbf0 <col:29> 'felem':'limb [4]' lvalue Var 0x1815e20dec0 'ftmp3' 'felem':'limb [4]'
|   |-BinaryOperator 0x1815e20fd70 <line:984:5, col:34> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e20fca0 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e20e310 'z1_is_zero' 'limb':'unsigned long long'
|   | `-CallExpr 0x1815e20fd30 <col:18, col:34> 'limb':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1815e20fd18 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1815e20fcd8 <col:18> 'limb (const limb *)' Function 0x1815e1ff728 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x1815e20fd58 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1815e20fcf8 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d808 'z1' 'const limb *':'const limb *'
|   |-BinaryOperator 0x1815e20fe60 <line:985:5, col:34> 'limb':'unsigned long long' '='
|   | |-DeclRefExpr 0x1815e20fd90 <col:5> 'limb':'unsigned long long' lvalue Var 0x1815e20e388 'z2_is_zero' 'limb':'unsigned long long'
|   | `-CallExpr 0x1815e20fe20 <col:18, col:34> 'limb':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1815e20fe08 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1815e20fdc8 <col:18> 'limb (const limb *)' Function 0x1815e1ff728 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x1815e20fe48 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1815e20fde8 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d9f0 'z2' 'const limb *':'const limb *'
|   |-IfStmt 0x1815e210250 <line:987:5, line:990:5>
|   | |-BinaryOperator 0x1815e20ffd0 <line:987:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x1815e20ff60 <col:9, col:32> 'int' '&&'
|   | | | |-BinaryOperator 0x1815e20fef0 <col:9, col:20> 'int' '&&'
|   | | | | |-ImplicitCastExpr 0x1815e20fec0 <col:9> 'limb':'unsigned long long' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x1815e20fe80 <col:9> 'limb':'unsigned long long' lvalue Var 0x1815e20e400 'x_equal' 'limb':'unsigned long long'
|   | | | | `-ImplicitCastExpr 0x1815e20fed8 <col:20> 'limb':'unsigned long long' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1815e20fea0 <col:20> 'limb':'unsigned long long' lvalue Var 0x1815e20e478 'y_equal' 'limb':'unsigned long long'
|   | | | `-UnaryOperator 0x1815e20ff48 <col:31, col:32> 'int' prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x1815e20ff30 <col:32> 'limb':'unsigned long long' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1815e20ff10 <col:32> 'limb':'unsigned long long' lvalue Var 0x1815e20e310 'z1_is_zero' 'limb':'unsigned long long'
|   | | `-UnaryOperator 0x1815e20ffb8 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x1815e20ffa0 <col:47> 'limb':'unsigned long long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1815e20ff80 <col:47> 'limb':'unsigned long long' lvalue Var 0x1815e20e388 'z2_is_zero' 'limb':'unsigned long long'
|   | `-CompoundStmt 0x1815e210230 <col:59, line:990:5>
|   |   |-CallExpr 0x1815e210140 <line:988:9, col:44> 'void'
|   |   | |-ImplicitCastExpr 0x1815e210128 <col:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e20fff0 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1815e20cfe8 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e210190 <col:22> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1815e210010 <col:22> 'limb *':'limb *' lvalue ParmVar 0x1815e20d5b0 'x3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x1815e2101a8 <col:26> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1815e210030 <col:26> 'limb *':'limb *' lvalue ParmVar 0x1815e20d628 'y3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x1815e2101c0 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1815e210050 <col:30> 'limb *':'limb *' lvalue ParmVar 0x1815e20d6a0 'z3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x1815e2101d8 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1815e210070 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d718 'x1' 'const limb *':'const limb *'
|   |   | |-ImplicitCastExpr 0x1815e2101f0 <col:38> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1815e210090 <col:38> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d790 'y1' 'const limb *':'const limb *'
|   |   | `-ImplicitCastExpr 0x1815e210208 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1815e2100b0 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d808 'z1' 'const limb *':'const limb *'
|   |   `-ReturnStmt 0x1815e210220 <line:989:9>
|   |-IfStmt 0x1815e2105e8 <line:993:5, line:999:5> has_else
|   | |-UnaryOperator 0x1815e2102a0 <line:993:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1815e210288 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1815e210268 <col:10> 'const int' lvalue ParmVar 0x1815e20d888 'mixed' 'const int'
|   | |-CompoundStmt 0x1815e2104d8 <col:17, line:996:5>
|   | | |-CallExpr 0x1815e210350 <line:994:9, col:30> 'void'
|   | | | |-ImplicitCastExpr 0x1815e210338 <col:9> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e2102b8 <col:9> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x1815e210388 <col:19> 'widelimb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e2102d8 <col:19> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | | | |-ImplicitCastExpr 0x1815e2103a0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1815e2102f8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d808 'z1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x1815e2103b8 <col:28> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1815e210318 <col:28> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d9f0 'z2' 'const limb *':'const limb *'
|   | | `-CallExpr 0x1815e210460 <line:995:9, col:32> 'void'
|   | |   |-ImplicitCastExpr 0x1815e210448 <col:9> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1815e2103d0 <col:9> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |   |-ImplicitCastExpr 0x1815e210490 <col:22> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1815e2103f0 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   | |   `-ImplicitCastExpr 0x1815e2104c0 <col:29> 'const widelimb *':'const widelimb *' <NoOp>
|   | |     `-ImplicitCastExpr 0x1815e2104a8 <col:29> 'widelimb *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x1815e210428 <col:29> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | `-CompoundStmt 0x1815e2105d0 <line:996:12, line:999:5>
|   |   `-CallExpr 0x1815e210570 <line:998:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x1815e210558 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e2104f8 <col:9> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x1815e2105a0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x1815e210518 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x1815e2105b8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1815e210538 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d808 'z1' 'const limb *':'const limb *'
|   |-CallExpr 0x1815e2106a8 <line:1002:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e210690 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210610 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2106e0 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210630 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e210710 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e2106f8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e210650 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e210740 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e210728 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e210670 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2107e8 <line:1003:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e2107d0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210758 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e210818 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210778 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20e118 'z_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e210848 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e210830 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2107b0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e2108d8 <line:1006:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1815e2108c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210860 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e210908 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210880 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e210938 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e210920 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2108a0 <col:25> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2109c8 <line:1007:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e2109b0 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210950 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2109f8 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210970 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e210a28 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e210a10 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e210990 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e210ab8 <line:1008:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e210aa0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210a40 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e210ae8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210a60 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e210b18 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e210b00 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e210a80 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e210bc8 <line:1011:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e210bb0 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210b30 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e210c00 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210b50 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e210c30 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e210c18 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e210b70 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e210c60 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e210c48 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e210b90 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   |-CallExpr 0x1815e210cf0 <line:1012:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e210cd8 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210c78 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e210d20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210c98 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e210d50 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e210d38 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e210cb8 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e210e00 <line:1015:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e210de8 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210d68 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e210e38 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210d88 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e210e68 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e210e50 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e210da8 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e210e98 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e210e80 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e210dc8 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e20ddd0 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x1815e210f28 <line:1016:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e210f10 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210eb0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e210f58 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210ed0 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e210f88 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e210f70 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e210ef0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e211038 <line:1019:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x1815e211020 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210fa0 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e211070 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e210fc0 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e2110a0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e211088 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e210fe0 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e20df38 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e2110d0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2110b8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e211000 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   |-CallExpr 0x1815e205120 <line:1023:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1815e211148 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2110e8 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e205150 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e211108 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e205180 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e205168 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e211128 <col:24> 'felem':'limb [4]' lvalue Var 0x1815e20dec0 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x1815e205210 <line:1027:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1815e2051f8 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205198 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e1147b8 'felem_diff_128_64' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e205240 <col:23> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2051b8 <col:23> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e205270 <col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e205258 <col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2051d8 <col:29> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   |-CallExpr 0x1815e205300 <line:1031:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1815e2052e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205288 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e205330 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2052a8 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e205360 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e205348 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2052c8 <col:25> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2053f8 <line:1032:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1815e2053e0 <col:5> 'void (*)(limb *, const limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205378 <col:5> 'void (limb *, const limb)' Function 0x1815e115d28 'felem_scalar' 'void (limb *, const limb)'
|   | |-ImplicitCastExpr 0x1815e205428 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205398 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e205440 <col:25> 'limb':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1815e2053b8 <col:25> 'int' 2
|   |-CallExpr 0x1815e2054d0 <line:1039:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1815e2054b8 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205458 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e1147b8 'felem_diff_128_64' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e205500 <col:23> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205478 <col:23> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e205530 <col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e205518 <col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e205498 <col:29> 'felem':'limb [4]' lvalue Var 0x1815e20dfb0 'ftmp5' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2055d8 <line:1041:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1815e2055c0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205548 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e205608 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205568 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20e028 'x_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e205638 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e205620 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2055a0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e2056c8 <line:1044:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e2056b0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205650 <col:5> 'void (limb *, const limb *)' Function 0x1815e1115e8 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2056f8 <col:16> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205670 <col:16> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e205728 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e205710 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e205690 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e20e028 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2057d8 <line:1050:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x1815e2057c0 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205740 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e205810 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205760 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e205840 <col:21> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e205828 <col:21> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e205780 <col:21> 'felem':'limb [4]' lvalue Var 0x1815e20dec0 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e205870 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e205858 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2057a0 <col:28> 'felem':'limb [4]' lvalue Var 0x1815e20de48 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e205900 <line:1057:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1815e2058e8 <col:5> 'void (*)(widelimb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205888 <col:5> 'void (widelimb *, const widelimb *)' Function 0x1815e112ca8 'widefelem_diff' 'void (widelimb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e205930 <col:20> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2058a8 <col:20> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e205960 <col:26> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e205948 <col:26> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2058c8 <col:26> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e1f0 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e205a08 <line:1059:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1815e2059f0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205978 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e205a38 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205998 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e20e0a0 'y_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e205a68 <col:25> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e205a50 <col:25> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2059d0 <col:25> 'widefelem':'widelimb [7]' lvalue Var 0x1815e20e268 'tmp2' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e205b70 <line:1069:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1815e205b58 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205a80 <col:5> 'void (limb *, const limb *, limb)' Function 0x1815e20c2e8 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1815e205ba8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205aa0 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20e028 'x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1815e205bc0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e205ac0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d900 'x2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1815e205bd8 <col:33> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e205ae0 <col:33> 'limb':'unsigned long long' lvalue Var 0x1815e20e310 'z1_is_zero' 'limb':'unsigned long long'
|   |-CallExpr 0x1815e205c88 <line:1070:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1815e205c70 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205bf0 <col:5> 'void (limb *, const limb *, limb)' Function 0x1815e20c2e8 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1815e205cc0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205c10 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20e028 'x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1815e205cd8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e205c30 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d718 'x1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1815e205cf0 <col:33> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e205c50 <col:33> 'limb':'unsigned long long' lvalue Var 0x1815e20e388 'z2_is_zero' 'limb':'unsigned long long'
|   |-CallExpr 0x1815e205da0 <line:1071:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1815e205d88 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205d08 <col:5> 'void (limb *, const limb *, limb)' Function 0x1815e20c2e8 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1815e205dd8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205d28 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20e0a0 'y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1815e205df0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e205d48 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d978 'y2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1815e205e08 <col:33> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e205d68 <col:33> 'limb':'unsigned long long' lvalue Var 0x1815e20e310 'z1_is_zero' 'limb':'unsigned long long'
|   |-CallExpr 0x1815e205eb8 <line:1072:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1815e205ea0 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205e20 <col:5> 'void (limb *, const limb *, limb)' Function 0x1815e20c2e8 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1815e205ef0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205e40 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20e0a0 'y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1815e205f08 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e205e60 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d790 'y1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1815e205f20 <col:33> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e205e80 <col:33> 'limb':'unsigned long long' lvalue Var 0x1815e20e388 'z2_is_zero' 'limb':'unsigned long long'
|   |-CallExpr 0x1815e205fd0 <line:1073:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1815e205fb8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205f38 <col:5> 'void (limb *, const limb *, limb)' Function 0x1815e20c2e8 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1815e206008 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e205f58 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20e118 'z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1815e206020 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e205f78 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d9f0 'z2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1815e206038 <col:33> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e205f98 <col:33> 'limb':'unsigned long long' lvalue Var 0x1815e20e310 'z1_is_zero' 'limb':'unsigned long long'
|   |-CallExpr 0x1815e2060e8 <line:1074:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x1815e2060d0 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e206050 <col:5> 'void (limb *, const limb *, limb)' Function 0x1815e20c2e8 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x1815e206120 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e206070 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20e118 'z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x1815e206138 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e206090 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x1815e20d808 'z1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x1815e206150 <col:33> 'limb':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e2060b0 <col:33> 'limb':'unsigned long long' lvalue Var 0x1815e20e388 'z2_is_zero' 'limb':'unsigned long long'
|   |-CallExpr 0x1815e2061e0 <line:1075:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e2061c8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e206168 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e206210 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e206188 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e20d5b0 'x3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1815e206240 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e206228 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2061a8 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20e028 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2062d0 <line:1076:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e2062b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e206258 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e206300 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e206278 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e20d628 'y3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1815e206330 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e206318 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e206298 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20e0a0 'y_out' 'felem':'limb [4]'
|   `-CallExpr 0x1815e2063c0 <line:1077:5, col:27> 'void'
|     |-ImplicitCastExpr 0x1815e2063a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1815e206348 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1815e2063f0 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1815e206368 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e20d6a0 'z3' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1815e206420 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1815e206408 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x1815e206388 <col:22> 'felem':'limb [4]' lvalue Var 0x1815e20e118 'z_out' 'felem':'limb [4]'
|-FunctionDecl 0x1815e206b58 <line:1085:1, line:1103:1> line:1085:13 used select_point 'void (const u64, unsigned int, const felem (*)[3], felem *)' static
| |-ParmVarDecl 0x1815e206600 <col:26, col:36> col:36 used idx 'const u64':'const unsigned long long'
| |-ParmVarDecl 0x1815e206680 <col:41, col:54> col:54 used size 'unsigned int'
| |-ParmVarDecl 0x1815e206850 <line:1086:26, col:50> col:38 used pre_comp 'const felem (*)[3]':'const felem (*)[3]'
| |-ParmVarDecl 0x1815e2069b0 <col:53, col:64> col:59 used out 'felem *':'felem *'
| `-CompoundStmt 0x1815e207d98 <line:1087:1, line:1103:1>
|   |-DeclStmt 0x1815e206d48 <line:1088:5, col:18>
|   | |-VarDecl 0x1815e206c48 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x1815e206cc8 <col:5, col:17> col:17 used j 'unsigned int'
|   |-DeclStmt 0x1815e206ed0 <line:1089:5, col:32>
|   | `-VarDecl 0x1815e206d70 <col:5, col:31> col:11 used outlimbs 'limb *' cinit
|   |   `-UnaryOperator 0x1815e206eb8 <col:22, col:31> 'limb *' prefix '&' cannot overflow
|   |     `-ArraySubscriptExpr 0x1815e206e98 <col:23, col:31> 'limb':'unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x1815e206e80 <col:23, col:28> 'limb *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x1815e206e38 <col:23, col:28> 'felem':'limb [4]' lvalue
|   |       |   |-ImplicitCastExpr 0x1815e206e20 <col:23> 'felem *':'felem *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1815e206dd8 <col:23> 'felem *':'felem *' lvalue ParmVar 0x1815e2069b0 'out' 'felem *':'felem *'
|   |       |   `-IntegerLiteral 0x1815e206df8 <col:27> 'int' 0
|   |       `-IntegerLiteral 0x1815e206e58 <col:30> 'int' 0
|   |-CallExpr 0x1815e207070 <line:1091:5, col:36> 'void *'
|   | |-ImplicitCastExpr 0x1815e207058 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e206ee8 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1815e0cec90 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1815e2070c0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1815e2070a8 <col:12> 'felem *':'felem *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1815e206f08 <col:12> 'felem *':'felem *' lvalue ParmVar 0x1815e2069b0 'out' 'felem *':'felem *'
|   | |-IntegerLiteral 0x1815e206f28 <col:17> 'int' 0
|   | `-BinaryOperator 0x1815e207020 <col:20, col:35> 'unsigned long long' '*'
|   |   |-UnaryExprOrTypeTraitExpr 0x1815e206fc0 <col:20, col:31> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x1815e206fa0 <col:26, col:31> 'felem':'limb [4]' lvalue
|   |   |   `-UnaryOperator 0x1815e206f88 <col:27, col:28> 'felem':'limb [4]' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x1815e206f70 <col:28> 'felem *':'felem *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1815e206f50 <col:28> 'felem *':'felem *' lvalue ParmVar 0x1815e2069b0 'out' 'felem *':'felem *' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x1815e207008 <col:35> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1815e206fe0 <col:35> 'int' 3
|   `-ForStmt 0x1815e207d60 <line:1092:5, line:1102:5>
|     |-BinaryOperator 0x1815e207170 <line:1092:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x1815e2070d8 <col:10> 'unsigned int' lvalue Var 0x1815e206c48 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1815e207158 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1815e207130 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1815e207200 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1815e2071d0 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1815e207190 <col:17> 'unsigned int' lvalue Var 0x1815e206c48 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x1815e2071e8 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x1815e2071b0 <col:21> 'unsigned int' lvalue ParmVar 0x1815e206680 'size' 'unsigned int'
|     |-UnaryOperator 0x1815e207240 <col:27, col:28> 'unsigned int' postfix '++'
|     | `-DeclRefExpr 0x1815e207220 <col:27> 'unsigned int' lvalue Var 0x1815e206c48 'i' 'unsigned int'
|     `-CompoundStmt 0x1815e207d10 <col:32, line:1102:5>
|       |-DeclStmt 0x1815e207498 <line:1093:9, col:49>
|       | `-VarDecl 0x1815e207268 <col:9, col:48> col:21 used inlimbs 'const limb *' cinit
|       |   `-UnaryOperator 0x1815e207480 <col:31, col:48> 'const limb *' prefix '&' cannot overflow
|       |     `-ArraySubscriptExpr 0x1815e207460 <col:32, col:48> 'const limb':'const unsigned long long' lvalue
|       |       |-ImplicitCastExpr 0x1815e207448 <col:32, col:45> 'const limb *' <ArrayToPointerDecay>
|       |       | `-ArraySubscriptExpr 0x1815e207400 <col:32, col:45> 'const felem':'limb const[4]' lvalue
|       |       |   |-ImplicitCastExpr 0x1815e2073e8 <col:32, col:42> 'const felem *' <ArrayToPointerDecay>
|       |       |   | `-ArraySubscriptExpr 0x1815e207340 <col:32, col:42> 'const felem [3]' lvalue
|       |       |   |   |-ImplicitCastExpr 0x1815e207310 <col:32> 'const felem (*)[3]':'const felem (*)[3]' <LValueToRValue>
|       |       |   |   | `-DeclRefExpr 0x1815e2072d0 <col:32> 'const felem (*)[3]':'const felem (*)[3]' lvalue ParmVar 0x1815e206850 'pre_comp' 'const felem (*)[3]':'const felem (*)[3]'
|       |       |   |   `-ImplicitCastExpr 0x1815e207328 <col:41> 'unsigned int' <LValueToRValue>
|       |       |   |     `-DeclRefExpr 0x1815e2072f0 <col:41> 'unsigned int' lvalue Var 0x1815e206c48 'i' 'unsigned int'
|       |       |   `-IntegerLiteral 0x1815e207360 <col:44> 'int' 0
|       |       `-IntegerLiteral 0x1815e207420 <col:47> 'int' 0
|       |-DeclStmt 0x1815e2075d0 <line:1094:9, col:27>
|       | `-VarDecl 0x1815e2074c0 <col:9, col:24> col:13 used mask 'u64':'unsigned long long' cinit
|       |   `-BinaryOperator 0x1815e2075b0 <col:20, col:24> 'unsigned long long' '^'
|       |     |-ImplicitCastExpr 0x1815e207598 <col:20> 'unsigned long long' <IntegralCast>
|       |     | `-ImplicitCastExpr 0x1815e207568 <col:20> 'unsigned int' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x1815e207528 <col:20> 'unsigned int' lvalue Var 0x1815e206c48 'i' 'unsigned int'
|       |     `-ImplicitCastExpr 0x1815e207580 <col:24> 'u64':'unsigned long long' <LValueToRValue>
|       |       `-DeclRefExpr 0x1815e207548 <col:24> 'const u64':'const unsigned long long' lvalue ParmVar 0x1815e206600 'idx' 'const u64':'const unsigned long long'
|       |-CompoundAssignOperator 0x1815e2076a0 <line:1095:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1815e2075e8 <col:9> 'u64':'unsigned long long' lvalue Var 0x1815e2074c0 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x1815e207680 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x1815e207668 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1815e207620 <col:17> 'u64':'unsigned long long' lvalue Var 0x1815e2074c0 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x1815e207640 <col:25> 'int' 4
|       |-CompoundAssignOperator 0x1815e207770 <line:1096:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1815e2076d0 <col:9> 'u64':'unsigned long long' lvalue Var 0x1815e2074c0 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x1815e207750 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x1815e207738 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1815e2076f0 <col:17> 'u64':'unsigned long long' lvalue Var 0x1815e2074c0 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x1815e207710 <col:25> 'int' 2
|       |-CompoundAssignOperator 0x1815e207840 <line:1097:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1815e2077a0 <col:9> 'u64':'unsigned long long' lvalue Var 0x1815e2074c0 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x1815e207820 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x1815e207808 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x1815e2077c0 <col:17> 'u64':'unsigned long long' lvalue Var 0x1815e2074c0 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x1815e2077e0 <col:25> 'int' 1
|       |-CompoundAssignOperator 0x1815e2078d0 <line:1098:9, col:17> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x1815e207870 <col:9> 'u64':'unsigned long long' lvalue Var 0x1815e2074c0 'mask' 'u64':'unsigned long long'
|       | `-ImplicitCastExpr 0x1815e2078b8 <col:17> 'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x1815e207890 <col:17> 'int' 1
|       |-UnaryOperator 0x1815e207920 <line:1099:9, col:13> 'u64':'unsigned long long' postfix '--'
|       | `-DeclRefExpr 0x1815e207900 <col:9> 'u64':'unsigned long long' lvalue Var 0x1815e2074c0 'mask' 'u64':'unsigned long long'
|       `-ForStmt 0x1815e207cd8 <line:1100:9, line:1101:41>
|         |-BinaryOperator 0x1815e2079b0 <line:1100:14, col:18> 'unsigned int' '='
|         | |-DeclRefExpr 0x1815e207938 <col:14> 'unsigned int' lvalue Var 0x1815e206cc8 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x1815e207998 <col:18> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x1815e207970 <col:18> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x1815e207a90 <col:21, col:29> 'int' '<'
|         | |-ImplicitCastExpr 0x1815e207a60 <col:21> 'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x1815e2079d0 <col:21> 'unsigned int' lvalue Var 0x1815e206cc8 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x1815e207a78 <col:25, col:29> 'unsigned int' <IntegralCast>
|         |   `-BinaryOperator 0x1815e207a40 <col:25, col:29> 'int' '*'
|         |     |-IntegerLiteral 0x1815e2079f0 <col:25> 'int' 4
|         |     `-IntegerLiteral 0x1815e207a18 <col:29> 'int' 3
|         |-UnaryOperator 0x1815e207ad0 <col:32, col:33> 'unsigned int' postfix '++'
|         | `-DeclRefExpr 0x1815e207ab0 <col:32> 'unsigned int' lvalue Var 0x1815e206cc8 'j' 'unsigned int'
|         `-CompoundAssignOperator 0x1815e207ca8 <line:1101:13, col:41> 'limb':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|           |-ArraySubscriptExpr 0x1815e207b70 <col:13, col:23> 'limb':'unsigned long long' lvalue
|           | |-ImplicitCastExpr 0x1815e207b40 <col:13> 'limb *' <LValueToRValue>
|           | | `-DeclRefExpr 0x1815e207ae8 <col:13> 'limb *' lvalue Var 0x1815e206d70 'outlimbs' 'limb *'
|           | `-ImplicitCastExpr 0x1815e207b58 <col:22> 'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x1815e207b20 <col:22> 'unsigned int' lvalue Var 0x1815e206cc8 'j' 'unsigned int'
|           `-BinaryOperator 0x1815e207c88 <col:28, col:41> 'unsigned long long' '&'
|             |-ImplicitCastExpr 0x1815e207c58 <col:28, col:37> 'limb':'unsigned long long' <LValueToRValue>
|             | `-ArraySubscriptExpr 0x1815e207c18 <col:28, col:37> 'const limb':'const unsigned long long' lvalue
|             |   |-ImplicitCastExpr 0x1815e207be8 <col:28> 'const limb *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x1815e207b90 <col:28> 'const limb *' lvalue Var 0x1815e207268 'inlimbs' 'const limb *'
|             |   `-ImplicitCastExpr 0x1815e207c00 <col:36> 'unsigned int' <LValueToRValue>
|             |     `-DeclRefExpr 0x1815e207bc8 <col:36> 'unsigned int' lvalue Var 0x1815e206cc8 'j' 'unsigned int'
|             `-ImplicitCastExpr 0x1815e207c70 <col:41> 'u64':'unsigned long long' <LValueToRValue>
|               `-DeclRefExpr 0x1815e207c38 <col:41> 'u64':'unsigned long long' lvalue Var 0x1815e2074c0 'mask' 'u64':'unsigned long long'
|-FunctionDecl 0x1815e207fd8 <line:1106:1, line:1111:1> line:1106:13 used get_bit 'char (const u8 *, unsigned int)' static
| |-ParmVarDecl 0x1815e207e10 <col:21, col:43> col:43 used in 'const u8 *':'const u8 *'
| |-ParmVarDecl 0x1815e207e90 <col:47, col:56> col:56 used i 'unsigned int'
| `-CompoundStmt 0x1815e208410 <line:1107:1, line:1111:1>
|   |-IfStmt 0x1815e208188 <line:1108:5, line:1109:16>
|   | |-BinaryOperator 0x1815e208118 <line:1108:9, col:14> 'int' '>='
|   | | |-ImplicitCastExpr 0x1815e2080e8 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e2080a0 <col:9> 'unsigned int' lvalue ParmVar 0x1815e207e90 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1815e208100 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e2080c0 <col:14> 'int' 224
|   | `-ReturnStmt 0x1815e208178 <line:1109:9, col:16>
|   |   `-ImplicitCastExpr 0x1815e208160 <col:16> 'char' <IntegralCast>
|   |     `-IntegerLiteral 0x1815e208138 <col:16> 'int' 0
|   `-ReturnStmt 0x1815e208400 <line:1110:5, col:38>
|     `-ImplicitCastExpr 0x1815e2083e8 <col:12, col:38> 'char' <IntegralCast>
|       `-BinaryOperator 0x1815e2083c8 <col:12, col:38> 'int' '&'
|         |-ParenExpr 0x1815e208380 <col:12, col:34> 'int'
|         | `-BinaryOperator 0x1815e208360 <col:13, col:33> 'int' '>>'
|         |   |-ImplicitCastExpr 0x1815e208348 <col:13, col:22> 'int' <IntegralCast>
|         |   | `-ImplicitCastExpr 0x1815e208330 <col:13, col:22> 'u8':'unsigned char' <LValueToRValue>
|         |   |   `-ArraySubscriptExpr 0x1815e208258 <col:13, col:22> 'const u8':'const unsigned char' lvalue
|         |   |     |-ImplicitCastExpr 0x1815e208240 <col:13> 'const u8 *':'const u8 *' <LValueToRValue>
|         |   |     | `-DeclRefExpr 0x1815e2081a0 <col:13> 'const u8 *':'const u8 *' lvalue ParmVar 0x1815e207e10 'in' 'const u8 *':'const u8 *'
|         |   |     `-BinaryOperator 0x1815e208220 <col:16, col:21> 'unsigned int' '>>'
|         |   |       |-ImplicitCastExpr 0x1815e208208 <col:16> 'unsigned int' <LValueToRValue>
|         |   |       | `-DeclRefExpr 0x1815e2081c0 <col:16> 'unsigned int' lvalue ParmVar 0x1815e207e90 'i' 'unsigned int'
|         |   |       `-IntegerLiteral 0x1815e2081e0 <col:21> 'int' 3
|         |   `-ParenExpr 0x1815e208310 <col:27, col:33> 'unsigned int'
|         |     `-BinaryOperator 0x1815e2082f0 <col:28, col:32> 'unsigned int' '&'
|         |       |-ImplicitCastExpr 0x1815e2082c0 <col:28> 'unsigned int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x1815e208278 <col:28> 'unsigned int' lvalue ParmVar 0x1815e207e90 'i' 'unsigned int'
|         |       `-ImplicitCastExpr 0x1815e2082d8 <col:32> 'unsigned int' <IntegralCast>
|         |         `-IntegerLiteral 0x1815e208298 <col:32> 'int' 7
|         `-IntegerLiteral 0x1815e2083a0 <col:38> 'int' 1
|-FunctionDecl 0x1815e208f48 <line:1120:1, line:1211:1> line:1120:13 used batch_mul 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[16][3])' static
| |-ParmVarDecl 0x1815e208440 <col:23, col:29> col:29 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e2084b8 <col:36, col:42> col:42 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e208530 <col:49, col:55> col:55 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x1815e2086b0 <line:1121:23, col:53> col:45 used scalars 'const felem_bytearray *':'const felem_bytearray *'
| |-ParmVarDecl 0x1815e208730 <line:1122:23, col:38> col:38 used num_points 'const unsigned int'
| |-ParmVarDecl 0x1815e2087a8 <col:50, col:60> col:60 used g_scalar 'const u8 *'
| |-ParmVarDecl 0x1815e208828 <line:1123:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x1815e208ac0 <col:40, col:68> col:52 used pre_comp 'const felem (*)[17][3]':'const felem (*)[17][3]'
| |-ParmVarDecl 0x1815e208cc0 <line:1124:23, col:54> col:35 used g_pre_comp 'const felem (*)[16][3]':'const felem (*)[16][3]'
| `-CompoundStmt 0x1815e2f2b38 <line:1125:1, line:1211:1>
|   |-DeclStmt 0x1815e2091c0 <line:1126:5, col:16>
|   | |-VarDecl 0x1815e209060 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x1815e209140 <col:5, col:12> col:12 used skip 'int'
|   |-DeclStmt 0x1815e209258 <line:1127:5, col:17>
|   | `-VarDecl 0x1815e2091f0 <col:5, col:14> col:14 used num 'unsigned int'
|   |-DeclStmt 0x1815e209420 <line:1128:5, col:42>
|   | `-VarDecl 0x1815e209288 <col:5, col:41> col:14 used gen_mul 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x1815e209408 <col:24, col:41> 'unsigned int' <IntegralCast>
|   |     `-ParenExpr 0x1815e2093e8 <col:24, col:41> 'int'
|   |       `-BinaryOperator 0x1815e2093c8 <col:25, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '!='
|   |         |-ImplicitCastExpr 0x1815e209398 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1128:25> 'const u8 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1815e2092f0 <col:25> 'const u8 *' lvalue ParmVar 0x1815e2087a8 'g_scalar' 'const u8 *'
|   |         `-ImplicitCastExpr 0x1815e2093b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <BitCast>
|   |           `-ParenExpr 0x1815e209378 <col:17, col:27> 'void *'
|   |             `-CStyleCastExpr 0x1815e209350 <col:18, col:26> 'void *' <NullToPointer>
|   |               `-IntegerLiteral 0x1815e209310 <col:26> 'int' 0
|   |-DeclStmt 0x1815e209658 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1129:5, col:24>
|   | |-VarDecl 0x1815e209498 <col:5, col:15> col:11 used nq 'felem [3]'
|   | `-VarDecl 0x1815e2095d8 <col:5, col:23> col:18 used tmp 'felem [4]'
|   |-DeclStmt 0x1815e2096e8 <line:1130:5, col:13>
|   | `-VarDecl 0x1815e209680 <col:5, col:9> col:9 used bits 'u64':'unsigned long long'
|   |-DeclStmt 0x1815e209808 <line:1131:5, col:19>
|   | |-VarDecl 0x1815e209710 <col:5, col:8> col:8 used sign 'u8':'unsigned char'
|   | `-VarDecl 0x1815e209788 <col:5, col:14> col:14 used digit 'u8':'unsigned char'
|   |-CallExpr 0x1815e209930 <line:1134:5, col:29> 'void *'
|   | |-ImplicitCastExpr 0x1815e209918 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e209820 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1815e0cec90 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1815e209980 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1815e209968 <col:12> 'felem *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e209840 <col:12> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   | |-IntegerLiteral 0x1815e209878 <col:16> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x1815e2098e0 <col:19, col:28> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x1815e2098c0 <col:25, col:28> 'felem [3]' lvalue
|   |     `-DeclRefExpr 0x1815e2098a0 <col:26> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]' non_odr_use_unevaluated
|   |-BinaryOperator 0x1815e2099f8 <line:1141:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x1815e209998 <col:5> 'int' lvalue Var 0x1815e209140 'skip' 'int'
|   | `-IntegerLiteral 0x1815e2099d0 <col:12> 'int' 1
|   |-ForStmt 0x1815e2f26e0 <line:1143:5, line:1207:5>
|   | |-BinaryOperator 0x1815e209b28 <line:1143:10, col:36> 'int' '='
|   | | |-DeclRefExpr 0x1815e209a18 <col:10> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   | | `-ParenExpr 0x1815e209b08 <col:14, col:36> 'int'
|   | |   `-ConditionalOperator 0x1815e209ad8 <col:15, col:34> 'int'
|   | |     |-ImplicitCastExpr 0x1815e209ac0 <col:15> 'unsigned int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1815e209a50 <col:15> 'const unsigned int' lvalue ParmVar 0x1815e208730 'num_points' 'const unsigned int'
|   | |     |-IntegerLiteral 0x1815e209a70 <col:28> 'int' 220
|   | |     `-IntegerLiteral 0x1815e209a98 <col:34> 'int' 27
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1815e209ba8 <col:39, col:44> 'int' '>='
|   | | |-ImplicitCastExpr 0x1815e209b90 <col:39> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e209b48 <col:39> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   | | `-IntegerLiteral 0x1815e209b68 <col:44> 'int' 0
|   | |-UnaryOperator 0x1815e209be8 <col:47, col:49> 'int' prefix '--'
|   | | `-DeclRefExpr 0x1815e209bc8 <col:49> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   | `-CompoundStmt 0x1815e2f26b8 <col:52, line:1207:5>
|   |   |-IfStmt 0x1815e20a0b0 <line:1145:9, line:1146:66>
|   |   | |-UnaryOperator 0x1815e209c38 <line:1145:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1815e209c20 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1815e209c00 <col:14> 'int' lvalue Var 0x1815e209140 'skip' 'int'
|   |   | `-CallExpr 0x1815e209f88 <line:1146:13, col:66> 'void'
|   |   |   |-ImplicitCastExpr 0x1815e209f70 <col:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1815e209c50 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1815e20cfe8 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |   |-ImplicitCastExpr 0x1815e209fd8 <col:26, col:30> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x1815e209cd0 <col:26, col:30> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1815e209cb8 <col:26> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1815e209c70 <col:26> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x1815e209c90 <col:29> 'int' 0
|   |   |   |-ImplicitCastExpr 0x1815e209ff0 <col:33, col:37> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x1815e209d50 <col:33, col:37> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1815e209d38 <col:33> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1815e209cf0 <col:33> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x1815e209d10 <col:36> 'int' 1
|   |   |   |-ImplicitCastExpr 0x1815e20a008 <col:40, col:44> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x1815e209dd0 <col:40, col:44> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1815e209db8 <col:40> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1815e209d70 <col:40> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x1815e209d90 <col:43> 'int' 2
|   |   |   |-ImplicitCastExpr 0x1815e20a038 <col:47, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x1815e20a020 <col:47, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x1815e209e50 <col:47, col:51> 'felem':'limb [4]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x1815e209e38 <col:47> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1815e209df0 <col:47> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x1815e209e10 <col:50> 'int' 0
|   |   |   |-ImplicitCastExpr 0x1815e20a068 <col:54, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x1815e20a050 <col:54, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x1815e209ed0 <col:54, col:58> 'felem':'limb [4]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x1815e209eb8 <col:54> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1815e209e70 <col:54> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x1815e209e90 <col:57> 'int' 1
|   |   |   `-ImplicitCastExpr 0x1815e20a098 <col:61, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x1815e20a080 <col:61, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |       `-ArraySubscriptExpr 0x1815e209f50 <col:61, col:65> 'felem':'limb [4]' lvalue
|   |   |         |-ImplicitCastExpr 0x1815e209f38 <col:61> 'felem *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x1815e209ef0 <col:61> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |         `-IntegerLiteral 0x1815e209f10 <col:64> 'int' 2
|   |   |-IfStmt 0x1815e3004d8 <line:1149:9, line:1177:9>
|   |   | |-BinaryOperator 0x1815e20a1b8 <line:1149:13, col:32> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x1815e20a1a0 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1815e20a0c8 <col:13> 'unsigned int' lvalue Var 0x1815e209288 'gen_mul' 'unsigned int'
|   |   | | `-ParenExpr 0x1815e20a180 <col:24, col:32> 'int'
|   |   | |   `-BinaryOperator 0x1815e20a160 <col:25, col:30> 'int' '<='
|   |   | |     |-ImplicitCastExpr 0x1815e20a148 <col:25> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x1815e20a100 <col:25> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1815e20a120 <col:30> 'int' 27
|   |   | `-CompoundStmt 0x1815e300468 <col:35, line:1177:9>
|   |   |   |-BinaryOperator 0x1815e20a418 <line:1151:13, col:50> 'u64':'unsigned long long' '='
|   |   |   | |-DeclRefExpr 0x1815e20a1d8 <col:13> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1815e20a400 <col:20, col:50> 'u64':'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1815e20a3e0 <col:20, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1815e20a3c8 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1815e20a340 <col:20, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e20a328 <col:20> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1815e20a210 <col:20> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e20a370 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1815e20a230 <col:28> 'const u8 *' lvalue ParmVar 0x1815e2087a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-ImplicitCastExpr 0x1815e20a388 <col:38, col:42> 'unsigned int' <IntegralCast>
|   |   |   |     |     `-BinaryOperator 0x1815e20a2b0 <col:38, col:42> 'int' '+'
|   |   |   |     |       |-ImplicitCastExpr 0x1815e20a298 <col:38> 'int' <LValueToRValue>
|   |   |   |     |       | `-DeclRefExpr 0x1815e20a250 <col:38> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |   |   |     |       `-IntegerLiteral 0x1815e20a270 <col:42> 'int' 196
|   |   |   |     `-IntegerLiteral 0x1815e20a3a0 <col:50> 'int' 3
|   |   |   |-CompoundAssignOperator 0x1815e20a608 <line:1152:13, col:51> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1815e20a438 <col:13> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1815e20a5f0 <col:21, col:51> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1815e20a5d0 <col:21, col:51> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1815e20a5b8 <col:21, col:46> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1815e20a530 <col:21, col:46> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e20a518 <col:21> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1815e20a458 <col:21> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e20a560 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1815e20a478 <col:29> 'const u8 *' lvalue ParmVar 0x1815e2087a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-ImplicitCastExpr 0x1815e20a578 <col:39, col:43> 'unsigned int' <IntegralCast>
|   |   |   |     |     `-BinaryOperator 0x1815e20a4f8 <col:39, col:43> 'int' '+'
|   |   |   |     |       |-ImplicitCastExpr 0x1815e20a4e0 <col:39> 'int' <LValueToRValue>
|   |   |   |     |       | `-DeclRefExpr 0x1815e20a498 <col:39> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |   |   |     |       `-IntegerLiteral 0x1815e20a4b8 <col:43> 'int' 140
|   |   |   |     `-IntegerLiteral 0x1815e20a590 <col:51> 'int' 2
|   |   |   |-CompoundAssignOperator 0x1815e20a808 <line:1153:13, col:50> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1815e20a638 <col:13> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1815e20a7f0 <col:21, col:50> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1815e20a7d0 <col:21, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1815e20a7b8 <col:21, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1815e20a730 <col:21, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e20a718 <col:21> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1815e20a658 <col:21> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e20a760 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1815e20a678 <col:29> 'const u8 *' lvalue ParmVar 0x1815e2087a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-ImplicitCastExpr 0x1815e20a778 <col:39, col:43> 'unsigned int' <IntegralCast>
|   |   |   |     |     `-BinaryOperator 0x1815e20a6f8 <col:39, col:43> 'int' '+'
|   |   |   |     |       |-ImplicitCastExpr 0x1815e20a6e0 <col:39> 'int' <LValueToRValue>
|   |   |   |     |       | `-DeclRefExpr 0x1815e20a698 <col:39> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |   |   |     |       `-IntegerLiteral 0x1815e20a6b8 <col:43> 'int' 84
|   |   |   |     `-IntegerLiteral 0x1815e20a790 <col:50> 'int' 1
|   |   |   |-CompoundAssignOperator 0x1815e20a9a8 <line:1154:13, col:45> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1815e20a838 <col:13> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1815e20a990 <col:21, col:45> 'unsigned long long' <IntegralCast>
|   |   |   |   `-CallExpr 0x1815e20a930 <col:21, col:45> 'char'
|   |   |   |     |-ImplicitCastExpr 0x1815e20a918 <col:21> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1815e20a858 <col:21> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |   |   |     |-ImplicitCastExpr 0x1815e20a960 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x1815e20a878 <col:29> 'const u8 *' lvalue ParmVar 0x1815e2087a8 'g_scalar' 'const u8 *'
|   |   |   |     `-ImplicitCastExpr 0x1815e20a978 <col:39, col:43> 'unsigned int' <IntegralCast>
|   |   |   |       `-BinaryOperator 0x1815e20a8f8 <col:39, col:43> 'int' '+'
|   |   |   |         |-ImplicitCastExpr 0x1815e20a8e0 <col:39> 'int' <LValueToRValue>
|   |   |   |         | `-DeclRefExpr 0x1815e20a898 <col:39> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |   |   |         `-IntegerLiteral 0x1815e20a8b8 <col:43> 'int' 28
|   |   |   |-CallExpr 0x1815e20ab70 <line:1156:13, col:54> 'void'
|   |   |   | |-ImplicitCastExpr 0x1815e20ab58 <col:13> 'void (*)(const u64, unsigned int, const felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x1815e20a9d8 <col:13> 'void (const u64, unsigned int, const felem (*)[3], felem *)' Function 0x1815e206b58 'select_point' 'void (const u64, unsigned int, const felem (*)[3], felem *)'
|   |   |   | |-ImplicitCastExpr 0x1815e20abb0 <col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1815e20a9f8 <col:26> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |   |   | |-ImplicitCastExpr 0x1815e20abc8 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x1815e20aa18 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x1815e20abe0 <col:36, col:48> 'const felem (*)[3]' <ArrayToPointerDecay>
|   |   |   | | `-ArraySubscriptExpr 0x1815e20aaa0 <col:36, col:48> 'const felem [16][3]' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x1815e20aa88 <col:36> 'const felem (*)[16][3]':'const felem (*)[16][3]' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1815e20aa40 <col:36> 'const felem (*)[16][3]':'const felem (*)[16][3]' lvalue ParmVar 0x1815e208cc0 'g_pre_comp' 'const felem (*)[16][3]':'const felem (*)[16][3]'
|   |   |   | |   `-IntegerLiteral 0x1815e20aa60 <col:47> 'int' 1
|   |   |   | `-ImplicitCastExpr 0x1815e20abf8 <col:51> 'felem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x1815e20aac0 <col:51> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |   |   |-IfStmt 0x1815e2ff480 <line:1158:13, line:1165:13> has_else
|   |   |   | |-UnaryOperator 0x1815e20ac48 <line:1158:17, col:18> 'int' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x1815e20ac30 <col:18> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1815e20ac10 <col:18> 'int' lvalue Var 0x1815e209140 'skip' 'int'
|   |   |   | |-CompoundStmt 0x1815e2ff1e8 <col:24, line:1162:13>
|   |   |   | | `-CallExpr 0x1815e2ff010 <line:1160:17, line:1161:73> 'void'
|   |   |   | |   |-ImplicitCastExpr 0x1815e2feff8 <line:1160:17> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x1815e20ac60 <col:17> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x1815e20dcb8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   |   | |   |-ImplicitCastExpr 0x1815e2ff080 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x1815e20ace0 <col:27, col:31> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x1815e20acc8 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x1815e20ac80 <col:27> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x1815e20aca0 <col:30> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x1815e2ff098 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x1815e20ad60 <col:34, col:38> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x1815e20ad48 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x1815e20ad00 <col:34> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x1815e20ad20 <col:37> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x1815e2ff0b0 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x1815e20ade0 <col:41, col:45> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x1815e20adc8 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x1815e20ad80 <col:41> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x1815e20ada0 <col:44> 'int' 2
|   |   |   | |   |-ImplicitCastExpr 0x1815e2ff0e0 <line:1161:27, col:31> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1815e2ff0c8 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1815e20ae60 <col:27, col:31> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1815e20ae48 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1815e20ae00 <col:27> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1815e20ae20 <col:30> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x1815e2ff110 <col:34, col:38> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1815e2ff0f8 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1815e20aee0 <col:34, col:38> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1815e20aec8 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1815e20ae80 <col:34> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1815e20aea0 <col:37> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x1815e2ff140 <col:41, col:45> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1815e2ff128 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1815e20af60 <col:41, col:45> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1815e20af48 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1815e20af00 <col:41> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x1815e20af20 <col:44> 'int' 2
|   |   |   | |   |-IntegerLiteral 0x1815e20af80 <col:48> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x1815e2ff170 <col:51, col:56> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1815e2ff158 <col:51, col:56> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1815e20b008 <col:51, col:56> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1815e20aff0 <col:51> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1815e20afa8 <col:51> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |   |   | |   |     `-IntegerLiteral 0x1815e20afc8 <col:55> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x1815e2ff1a0 <col:59, col:64> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x1815e2ff188 <col:59, col:64> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x1815e20b088 <col:59, col:64> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x1815e20b070 <col:59> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x1815e20b028 <col:59> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |   |   | |   |     `-IntegerLiteral 0x1815e20b048 <col:63> 'int' 1
|   |   |   | |   `-ImplicitCastExpr 0x1815e2ff1d0 <col:67, col:72> 'const limb *':'const limb *' <NoOp>
|   |   |   | |     `-ImplicitCastExpr 0x1815e2ff1b8 <col:67, col:72> 'limb *' <ArrayToPointerDecay>
|   |   |   | |       `-ArraySubscriptExpr 0x1815e20b108 <col:67, col:72> 'felem':'limb [4]' lvalue
|   |   |   | |         |-ImplicitCastExpr 0x1815e20b0f0 <col:67> 'felem *' <ArrayToPointerDecay>
|   |   |   | |         | `-DeclRefExpr 0x1815e20b0a8 <col:67> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |   |   | |         `-IntegerLiteral 0x1815e20b0c8 <col:71> 'int' 2
|   |   |   | `-CompoundStmt 0x1815e2ff460 <line:1162:20, line:1165:13>
|   |   |   |   |-CallExpr 0x1815e2ff360 <line:1163:17, col:50> 'void *'
|   |   |   |   | |-ImplicitCastExpr 0x1815e2ff348 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x1815e2ff200 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x1815e0cd218 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |   |   | |-ImplicitCastExpr 0x1815e2ff3b0 <col:24> 'void *' <BitCast>
|   |   |   |   | | `-ImplicitCastExpr 0x1815e2ff398 <col:24> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   `-DeclRefExpr 0x1815e2ff220 <col:24> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |   |   | |-ImplicitCastExpr 0x1815e2ff3e0 <col:28> 'const void *' <BitCast>
|   |   |   |   | | `-ImplicitCastExpr 0x1815e2ff3c8 <col:28> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   `-DeclRefExpr 0x1815e2ff240 <col:28> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |   |   |   | `-BinaryOperator 0x1815e2ff2d0 <col:33, col:49> 'unsigned long long' '*'
|   |   |   |   |   |-ImplicitCastExpr 0x1815e2ff2b8 <col:33> 'unsigned long long' <IntegralCast>
|   |   |   |   |   | `-IntegerLiteral 0x1815e2ff260 <col:33> 'int' 3
|   |   |   |   |   `-UnaryExprOrTypeTraitExpr 0x1815e2ff298 <col:37, col:49> 'unsigned long long' sizeof 'felem':'limb [4]'
|   |   |   |   `-BinaryOperator 0x1815e2ff440 <line:1164:17, col:24> 'int' '='
|   |   |   |     |-DeclRefExpr 0x1815e2ff3f8 <col:17> 'int' lvalue Var 0x1815e209140 'skip' 'int'
|   |   |   |     `-IntegerLiteral 0x1815e2ff418 <col:24> 'int' 0
|   |   |   |-BinaryOperator 0x1815e2ff678 <line:1168:13, col:50> 'u64':'unsigned long long' '='
|   |   |   | |-DeclRefExpr 0x1815e2ff4a8 <col:13> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1815e2ff660 <col:20, col:50> 'u64':'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1815e2ff640 <col:20, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1815e2ff628 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1815e2ff5a0 <col:20, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e2ff588 <col:20> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1815e2ff4c8 <col:20> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e2ff5d0 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1815e2ff4e8 <col:28> 'const u8 *' lvalue ParmVar 0x1815e2087a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-ImplicitCastExpr 0x1815e2ff5e8 <col:38, col:42> 'unsigned int' <IntegralCast>
|   |   |   |     |     `-BinaryOperator 0x1815e2ff568 <col:38, col:42> 'int' '+'
|   |   |   |     |       |-ImplicitCastExpr 0x1815e2ff550 <col:38> 'int' <LValueToRValue>
|   |   |   |     |       | `-DeclRefExpr 0x1815e2ff508 <col:38> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |   |   |     |       `-IntegerLiteral 0x1815e2ff528 <col:42> 'int' 168
|   |   |   |     `-IntegerLiteral 0x1815e2ff600 <col:50> 'int' 3
|   |   |   |-CompoundAssignOperator 0x1815e2ff868 <line:1169:13, col:51> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1815e2ff698 <col:13> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1815e2ff850 <col:21, col:51> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1815e2ff830 <col:21, col:51> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1815e2ff818 <col:21, col:46> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1815e2ff790 <col:21, col:46> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e2ff778 <col:21> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1815e2ff6b8 <col:21> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e2ff7c0 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1815e2ff6d8 <col:29> 'const u8 *' lvalue ParmVar 0x1815e2087a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-ImplicitCastExpr 0x1815e2ff7d8 <col:39, col:43> 'unsigned int' <IntegralCast>
|   |   |   |     |     `-BinaryOperator 0x1815e2ff758 <col:39, col:43> 'int' '+'
|   |   |   |     |       |-ImplicitCastExpr 0x1815e2ff740 <col:39> 'int' <LValueToRValue>
|   |   |   |     |       | `-DeclRefExpr 0x1815e2ff6f8 <col:39> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |   |   |     |       `-IntegerLiteral 0x1815e2ff718 <col:43> 'int' 112
|   |   |   |     `-IntegerLiteral 0x1815e2ff7f0 <col:51> 'int' 2
|   |   |   |-CompoundAssignOperator 0x1815e2ffa68 <line:1170:13, col:50> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1815e2ff898 <col:13> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1815e2ffa50 <col:21, col:50> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x1815e2ffa30 <col:21, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x1815e2ffa18 <col:21, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x1815e2ff990 <col:21, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e2ff978 <col:21> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x1815e2ff8b8 <col:21> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |   |   |     |   |-ImplicitCastExpr 0x1815e2ff9c0 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x1815e2ff8d8 <col:29> 'const u8 *' lvalue ParmVar 0x1815e2087a8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-ImplicitCastExpr 0x1815e2ff9d8 <col:39, col:43> 'unsigned int' <IntegralCast>
|   |   |   |     |     `-BinaryOperator 0x1815e2ff958 <col:39, col:43> 'int' '+'
|   |   |   |     |       |-ImplicitCastExpr 0x1815e2ff940 <col:39> 'int' <LValueToRValue>
|   |   |   |     |       | `-DeclRefExpr 0x1815e2ff8f8 <col:39> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |   |   |     |       `-IntegerLiteral 0x1815e2ff918 <col:43> 'int' 56
|   |   |   |     `-IntegerLiteral 0x1815e2ff9f0 <col:50> 'int' 1
|   |   |   |-CompoundAssignOperator 0x1815e2ffbc0 <line:1171:13, col:40> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x1815e2ffa98 <col:13> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x1815e2ffba8 <col:21, col:40> 'unsigned long long' <IntegralCast>
|   |   |   |   `-CallExpr 0x1815e2ffb30 <col:21, col:40> 'char'
|   |   |   |     |-ImplicitCastExpr 0x1815e2ffb18 <col:21> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x1815e2ffab8 <col:21> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |   |   |     |-ImplicitCastExpr 0x1815e2ffb60 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x1815e2ffad8 <col:29> 'const u8 *' lvalue ParmVar 0x1815e2087a8 'g_scalar' 'const u8 *'
|   |   |   |     `-ImplicitCastExpr 0x1815e2ffb90 <col:39> 'unsigned int' <IntegralCast>
|   |   |   |       `-ImplicitCastExpr 0x1815e2ffb78 <col:39> 'int' <LValueToRValue>
|   |   |   |         `-DeclRefExpr 0x1815e2ffaf8 <col:39> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |   |   |-CallExpr 0x1815e2ffd10 <line:1173:13, col:54> 'void'
|   |   |   | |-ImplicitCastExpr 0x1815e2ffcf8 <col:13> 'void (*)(const u64, unsigned int, const felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x1815e2ffbf0 <col:13> 'void (const u64, unsigned int, const felem (*)[3], felem *)' Function 0x1815e206b58 'select_point' 'void (const u64, unsigned int, const felem (*)[3], felem *)'
|   |   |   | |-ImplicitCastExpr 0x1815e2ffd50 <col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1815e2ffc10 <col:26> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |   |   | |-ImplicitCastExpr 0x1815e2ffd68 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x1815e2ffc30 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x1815e2ffd80 <col:36, col:48> 'const felem (*)[3]' <ArrayToPointerDecay>
|   |   |   | | `-ArraySubscriptExpr 0x1815e2ffcb8 <col:36, col:48> 'const felem [16][3]' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x1815e2ffca0 <col:36> 'const felem (*)[16][3]':'const felem (*)[16][3]' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x1815e2ffc58 <col:36> 'const felem (*)[16][3]':'const felem (*)[16][3]' lvalue ParmVar 0x1815e208cc0 'g_pre_comp' 'const felem (*)[16][3]':'const felem (*)[16][3]'
|   |   |   | |   `-IntegerLiteral 0x1815e2ffc78 <col:47> 'int' 0
|   |   |   | `-ImplicitCastExpr 0x1815e2ffd98 <col:51> 'felem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x1815e2ffcd8 <col:51> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |   |   `-CallExpr 0x1815e300290 <line:1174:13, line:1176:61> 'void'
|   |   |     |-ImplicitCastExpr 0x1815e300278 <line:1174:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1815e2ffdb0 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x1815e20dcb8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   |     |-ImplicitCastExpr 0x1815e300300 <col:23, col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1815e2ffe30 <col:23, col:27> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1815e2ffe18 <col:23> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1815e2ffdd0 <col:23> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x1815e2ffdf0 <col:26> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1815e300318 <col:30, col:34> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1815e2ffeb0 <col:30, col:34> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1815e2ffe98 <col:30> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1815e2ffe50 <col:30> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x1815e2ffe70 <col:33> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1815e300330 <col:37, col:41> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1815e2fff30 <col:37, col:41> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1815e2fff18 <col:37> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x1815e2ffed0 <col:37> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x1815e2ffef0 <col:40> 'int' 2
|   |   |     |-ImplicitCastExpr 0x1815e300360 <line:1175:23, col:27> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1815e300348 <col:23, col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1815e2fffb0 <col:23, col:27> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1815e2fff98 <col:23> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1815e2fff50 <col:23> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x1815e2fff70 <col:26> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1815e300390 <col:30, col:34> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1815e300378 <col:30, col:34> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1815e300030 <col:30, col:34> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1815e300018 <col:30> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1815e2fffd0 <col:30> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x1815e2ffff0 <col:33> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1815e3003c0 <col:37, col:41> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1815e3003a8 <col:37, col:41> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1815e3000b0 <col:37, col:41> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1815e300098 <col:37> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1815e300050 <col:37> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x1815e300070 <col:40> 'int' 2
|   |   |     |-IntegerLiteral 0x1815e3000d0 <line:1176:23> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1815e3003f0 <col:39, col:44> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1815e3003d8 <col:39, col:44> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1815e300158 <col:39, col:44> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1815e300140 <col:39> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1815e3000f8 <col:39> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |   |     |     `-IntegerLiteral 0x1815e300118 <col:43> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1815e300420 <col:47, col:52> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1815e300408 <col:47, col:52> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1815e3001d8 <col:47, col:52> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1815e3001c0 <col:47> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x1815e300178 <col:47> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |   |     |     `-IntegerLiteral 0x1815e300198 <col:51> 'int' 1
|   |   |     `-ImplicitCastExpr 0x1815e300450 <col:55, col:60> 'const limb *':'const limb *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x1815e300438 <col:55, col:60> 'limb *' <ArrayToPointerDecay>
|   |   |         `-ArraySubscriptExpr 0x1815e300258 <col:55, col:60> 'felem':'limb [4]' lvalue
|   |   |           |-ImplicitCastExpr 0x1815e300240 <col:55> 'felem *' <ArrayToPointerDecay>
|   |   |           | `-DeclRefExpr 0x1815e3001f8 <col:55> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |   |           `-IntegerLiteral 0x1815e300218 <col:59> 'int' 2
|   |   `-IfStmt 0x1815e2f26a0 <line:1180:9, line:1206:9>
|   |     |-BinaryOperator 0x1815e300610 <line:1180:13, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x1815e3005f8 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1815e3004f0 <col:13> 'const unsigned int' lvalue ParmVar 0x1815e208730 'num_points' 'const unsigned int'
|   |     | `-ParenExpr 0x1815e3005d8 <col:27, col:38> 'int'
|   |     |   `-BinaryOperator 0x1815e3005b8 <col:28, col:37> 'int' '=='
|   |     |     |-BinaryOperator 0x1815e300570 <col:28, col:32> 'int' '%'
|   |     |     | |-ImplicitCastExpr 0x1815e300558 <col:28> 'int' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x1815e300510 <col:28> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |     |     | `-IntegerLiteral 0x1815e300530 <col:32> 'int' 5
|   |     |     `-IntegerLiteral 0x1815e300590 <col:37> 'int' 0
|   |     `-CompoundStmt 0x1815e2f2688 <col:41, line:1206:9>
|   |       `-ForStmt 0x1815e2f2650 <line:1182:13, line:1205:13>
|   |         |-BinaryOperator 0x1815e3006a8 <line:1182:18, col:24> 'unsigned int' '='
|   |         | |-DeclRefExpr 0x1815e300630 <col:18> 'unsigned int' lvalue Var 0x1815e2091f0 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x1815e300690 <col:24> 'unsigned int' <IntegralCast>
|   |         |   `-IntegerLiteral 0x1815e300668 <col:24> 'int' 0
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x1815e300738 <col:27, col:33> 'int' '<'
|   |         | |-ImplicitCastExpr 0x1815e300708 <col:27> 'unsigned int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x1815e3006c8 <col:27> 'unsigned int' lvalue Var 0x1815e2091f0 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x1815e300720 <col:33> 'unsigned int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x1815e3006e8 <col:33> 'const unsigned int' lvalue ParmVar 0x1815e208730 'num_points' 'const unsigned int'
|   |         |-UnaryOperator 0x1815e300778 <col:45, col:47> 'unsigned int' prefix '++'
|   |         | `-DeclRefExpr 0x1815e300758 <col:47> 'unsigned int' lvalue Var 0x1815e2091f0 'num' 'unsigned int'
|   |         `-CompoundStmt 0x1815e2f25e8 <col:52, line:1205:13>
|   |           |-BinaryOperator 0x1815e3009d0 <line:1183:17, col:56> 'u64':'unsigned long long' '='
|   |           | |-DeclRefExpr 0x1815e300790 <col:17> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1815e3009b8 <col:24, col:56> 'u64':'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1815e300998 <col:24, col:56> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1815e300980 <col:24, col:51> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1815e3008f8 <col:24, col:51> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1815e3008e0 <col:24> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1815e3007b0 <col:24> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |           |     |   |-ImplicitCastExpr 0x1815e300928 <col:32, col:43> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1815e300840 <col:32, col:43> 'const felem_bytearray':'u8 const[28]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1815e300810 <col:32> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1815e3007d0 <col:32> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1815e2086b0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1815e300828 <col:40> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1815e3007f0 <col:40> 'unsigned int' lvalue Var 0x1815e2091f0 'num' 'unsigned int'
|   |           |     |   `-ImplicitCastExpr 0x1815e300940 <col:46, col:50> 'unsigned int' <IntegralCast>
|   |           |     |     `-BinaryOperator 0x1815e3008c0 <col:46, col:50> 'int' '+'
|   |           |     |       |-ImplicitCastExpr 0x1815e3008a8 <col:46> 'int' <LValueToRValue>
|   |           |     |       | `-DeclRefExpr 0x1815e300860 <col:46> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |           |     |       `-IntegerLiteral 0x1815e300880 <col:50> 'int' 4
|   |           |     `-IntegerLiteral 0x1815e300958 <col:56> 'int' 5
|   |           |-CompoundAssignOperator 0x1815e300c30 <line:1184:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1815e3009f0 <col:17> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1815e300c18 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1815e300bf8 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1815e300be0 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1815e300b58 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1815e300b40 <col:25> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1815e300a10 <col:25> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |           |     |   |-ImplicitCastExpr 0x1815e300b88 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1815e300aa0 <col:33, col:44> 'const felem_bytearray':'u8 const[28]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1815e300a70 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1815e300a30 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1815e2086b0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1815e300a88 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1815e300a50 <col:41> 'unsigned int' lvalue Var 0x1815e2091f0 'num' 'unsigned int'
|   |           |     |   `-ImplicitCastExpr 0x1815e300ba0 <col:47, col:51> 'unsigned int' <IntegralCast>
|   |           |     |     `-BinaryOperator 0x1815e300b20 <col:47, col:51> 'int' '+'
|   |           |     |       |-ImplicitCastExpr 0x1815e300b08 <col:47> 'int' <LValueToRValue>
|   |           |     |       | `-DeclRefExpr 0x1815e300ac0 <col:47> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |           |     |       `-IntegerLiteral 0x1815e300ae0 <col:51> 'int' 3
|   |           |     `-IntegerLiteral 0x1815e300bb8 <col:57> 'int' 4
|   |           |-CompoundAssignOperator 0x1815e300ea0 <line:1185:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1815e300c60 <col:17> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1815e300e88 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1815e300e68 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1815e300e50 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1815e300dc8 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1815e300db0 <col:25> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1815e300c80 <col:25> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |           |     |   |-ImplicitCastExpr 0x1815e300df8 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1815e300d10 <col:33, col:44> 'const felem_bytearray':'u8 const[28]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1815e300ce0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1815e300ca0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1815e2086b0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1815e300cf8 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1815e300cc0 <col:41> 'unsigned int' lvalue Var 0x1815e2091f0 'num' 'unsigned int'
|   |           |     |   `-ImplicitCastExpr 0x1815e300e10 <col:47, col:51> 'unsigned int' <IntegralCast>
|   |           |     |     `-BinaryOperator 0x1815e300d90 <col:47, col:51> 'int' '+'
|   |           |     |       |-ImplicitCastExpr 0x1815e300d78 <col:47> 'int' <LValueToRValue>
|   |           |     |       | `-DeclRefExpr 0x1815e300d30 <col:47> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |           |     |       `-IntegerLiteral 0x1815e300d50 <col:51> 'int' 2
|   |           |     `-IntegerLiteral 0x1815e300e28 <col:57> 'int' 3
|   |           |-CompoundAssignOperator 0x1815e2f10a0 <line:1186:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1815e300ed0 <col:17> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1815e2f1088 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1815e2f1068 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1815e2f1050 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1815e2f0fc8 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1815e2f0fb0 <col:25> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1815e300ef0 <col:25> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |           |     |   |-ImplicitCastExpr 0x1815e2f0ff8 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1815e300f80 <col:33, col:44> 'const felem_bytearray':'u8 const[28]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1815e300f50 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1815e300f10 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1815e2086b0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1815e300f68 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1815e300f30 <col:41> 'unsigned int' lvalue Var 0x1815e2091f0 'num' 'unsigned int'
|   |           |     |   `-ImplicitCastExpr 0x1815e2f1010 <col:47, col:51> 'unsigned int' <IntegralCast>
|   |           |     |     `-BinaryOperator 0x1815e2f0f90 <col:47, col:51> 'int' '+'
|   |           |     |       |-ImplicitCastExpr 0x1815e2f0f78 <col:47> 'int' <LValueToRValue>
|   |           |     |       | `-DeclRefExpr 0x1815e2f0f30 <col:47> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |           |     |       `-IntegerLiteral 0x1815e2f0f50 <col:51> 'int' 1
|   |           |     `-IntegerLiteral 0x1815e2f1028 <col:57> 'int' 2
|   |           |-CompoundAssignOperator 0x1815e2f12c8 <line:1187:17, col:53> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1815e2f10d0 <col:17> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1815e2f12b0 <col:25, col:53> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x1815e2f1290 <col:25, col:53> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x1815e2f1278 <col:25, col:48> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x1815e2f11d8 <col:25, col:48> 'char'
|   |           |     |   |-ImplicitCastExpr 0x1815e2f11c0 <col:25> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x1815e2f10f0 <col:25> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |           |     |   |-ImplicitCastExpr 0x1815e2f1208 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x1815e2f1180 <col:33, col:44> 'const felem_bytearray':'u8 const[28]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x1815e2f1150 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x1815e2f1110 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1815e2086b0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x1815e2f1168 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x1815e2f1130 <col:41> 'unsigned int' lvalue Var 0x1815e2091f0 'num' 'unsigned int'
|   |           |     |   `-ImplicitCastExpr 0x1815e2f1238 <col:47> 'unsigned int' <IntegralCast>
|   |           |     |     `-ImplicitCastExpr 0x1815e2f1220 <col:47> 'int' <LValueToRValue>
|   |           |     |       `-DeclRefExpr 0x1815e2f11a0 <col:47> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |           |     `-IntegerLiteral 0x1815e2f1250 <col:53> 'int' 1
|   |           |-CompoundAssignOperator 0x1815e2f14d8 <line:1188:17, col:52> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x1815e2f12f8 <col:17> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x1815e2f14c0 <col:25, col:52> 'unsigned long long' <IntegralCast>
|   |           |   `-CallExpr 0x1815e2f1460 <col:25, col:52> 'char'
|   |           |     |-ImplicitCastExpr 0x1815e2f1448 <col:25> 'char (*)(const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |           |     | `-DeclRefExpr 0x1815e2f1318 <col:25> 'char (const u8 *, unsigned int)' Function 0x1815e207fd8 'get_bit' 'char (const u8 *, unsigned int)'
|   |           |     |-ImplicitCastExpr 0x1815e2f1490 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     | `-ArraySubscriptExpr 0x1815e2f13a8 <col:33, col:44> 'const felem_bytearray':'u8 const[28]' lvalue
|   |           |     |   |-ImplicitCastExpr 0x1815e2f1378 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   | `-DeclRefExpr 0x1815e2f1338 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x1815e2086b0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   `-ImplicitCastExpr 0x1815e2f1390 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x1815e2f1358 <col:41> 'unsigned int' lvalue Var 0x1815e2091f0 'num' 'unsigned int'
|   |           |     `-ImplicitCastExpr 0x1815e2f14a8 <col:47, col:51> 'unsigned int' <IntegralCast>
|   |           |       `-BinaryOperator 0x1815e2f1428 <col:47, col:51> 'int' '-'
|   |           |         |-ImplicitCastExpr 0x1815e2f1410 <col:47> 'int' <LValueToRValue>
|   |           |         | `-DeclRefExpr 0x1815e2f13c8 <col:47> 'int' lvalue Var 0x1815e209060 'i' 'int'
|   |           |         `-IntegerLiteral 0x1815e2f13e8 <col:51> 'int' 1
|   |           |-CallExpr 0x1815e2f1630 <line:1189:17, col:68> 'void'
|   |           | |-ImplicitCastExpr 0x1815e2f1618 <col:17> 'void (*)(unsigned char *, unsigned char *, unsigned char)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1815e2f1508 <col:17> 'void (unsigned char *, unsigned char *, unsigned char)' Function 0x1815e1a6d68 'ec_GFp_nistp_recode_scalar_bits' 'void (unsigned char *, unsigned char *, unsigned char)'
|   |           | |-UnaryOperator 0x1815e2f1560 <col:49, col:50> 'u8 *' prefix '&' cannot overflow
|   |           | | `-DeclRefExpr 0x1815e2f1528 <col:50> 'u8':'unsigned char' lvalue Var 0x1815e209710 'sign' 'u8':'unsigned char'
|   |           | |-UnaryOperator 0x1815e2f15b0 <col:56, col:57> 'u8 *' prefix '&' cannot overflow
|   |           | | `-DeclRefExpr 0x1815e2f1578 <col:57> 'u8':'unsigned char' lvalue Var 0x1815e209788 'digit' 'u8':'unsigned char'
|   |           | `-ImplicitCastExpr 0x1815e2f1680 <col:64> 'unsigned char' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x1815e2f1668 <col:64> 'u64':'unsigned long long' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x1815e2f15c8 <col:64> 'u64':'unsigned long long' lvalue Var 0x1815e209680 'bits' 'u64':'unsigned long long'
|   |           |-CallExpr 0x1815e2f17c8 <line:1192:17, col:59> 'void'
|   |           | |-ImplicitCastExpr 0x1815e2f17b0 <col:17> 'void (*)(const u64, unsigned int, const felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1815e2f1698 <col:17> 'void (const u64, unsigned int, const felem (*)[3], felem *)' Function 0x1815e206b58 'select_point' 'void (const u64, unsigned int, const felem (*)[3], felem *)'
|   |           | |-ImplicitCastExpr 0x1815e2f1820 <col:30> 'u64':'unsigned long long' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x1815e2f1808 <col:30> 'u8':'unsigned char' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x1815e2f16b8 <col:30> 'u8':'unsigned char' lvalue Var 0x1815e209788 'digit' 'u8':'unsigned char'
|   |           | |-ImplicitCastExpr 0x1815e2f1838 <col:37> 'unsigned int' <IntegralCast>
|   |           | | `-IntegerLiteral 0x1815e2f16d8 <col:37> 'int' 17
|   |           | |-ImplicitCastExpr 0x1815e2f1850 <col:41, col:53> 'const felem (*)[3]' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x1815e2f1770 <col:41, col:53> 'const felem [17][3]' lvalue
|   |           | |   |-ImplicitCastExpr 0x1815e2f1740 <col:41> 'const felem (*)[17][3]':'const felem (*)[17][3]' <LValueToRValue>
|   |           | |   | `-DeclRefExpr 0x1815e2f1700 <col:41> 'const felem (*)[17][3]':'const felem (*)[17][3]' lvalue ParmVar 0x1815e208ac0 'pre_comp' 'const felem (*)[17][3]':'const felem (*)[17][3]'
|   |           | |   `-ImplicitCastExpr 0x1815e2f1758 <col:50> 'unsigned int' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x1815e2f1720 <col:50> 'unsigned int' lvalue Var 0x1815e2091f0 'num' 'unsigned int'
|   |           | `-ImplicitCastExpr 0x1815e2f1868 <col:56> 'felem *' <ArrayToPointerDecay>
|   |           |   `-DeclRefExpr 0x1815e2f1790 <col:56> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |           |-CallExpr 0x1815e2f19b8 <line:1193:17, col:41> 'void'
|   |           | |-ImplicitCastExpr 0x1815e2f19a0 <col:17> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1815e2f1880 <col:17> 'void (limb *, const limb *)' Function 0x1815e1103a0 'felem_neg' 'void (limb *, const limb *)'
|   |           | |-ImplicitCastExpr 0x1815e2f19e8 <col:27, col:32> 'limb *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x1815e2f1900 <col:27, col:32> 'felem':'limb [4]' lvalue
|   |           | |   |-ImplicitCastExpr 0x1815e2f18e8 <col:27> 'felem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x1815e2f18a0 <col:27> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |           | |   `-IntegerLiteral 0x1815e2f18c0 <col:31> 'int' 3
|   |           | `-ImplicitCastExpr 0x1815e2f1a18 <col:35, col:40> 'const limb *':'const limb *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x1815e2f1a00 <col:35, col:40> 'limb *' <ArrayToPointerDecay>
|   |           |     `-ArraySubscriptExpr 0x1815e2f1980 <col:35, col:40> 'felem':'limb [4]' lvalue
|   |           |       |-ImplicitCastExpr 0x1815e2f1968 <col:35> 'felem *' <ArrayToPointerDecay>
|   |           |       | `-DeclRefExpr 0x1815e2f1920 <col:35> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |           |       `-IntegerLiteral 0x1815e2f1940 <col:39> 'int' 1
|   |           |-CallExpr 0x1815e2f1b88 <line:1195:17, col:54> 'void'
|   |           | |-ImplicitCastExpr 0x1815e2f1b70 <col:17> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x1815e2f1a30 <col:17> 'void (limb *, const limb *, limb)' Function 0x1815e20c2e8 'copy_conditional' 'void (limb *, const limb *, limb)'
|   |           | |-ImplicitCastExpr 0x1815e2f1bc0 <col:34, col:39> 'limb *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x1815e2f1ab0 <col:34, col:39> 'felem':'limb [4]' lvalue
|   |           | |   |-ImplicitCastExpr 0x1815e2f1a98 <col:34> 'felem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x1815e2f1a50 <col:34> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |           | |   `-IntegerLiteral 0x1815e2f1a70 <col:38> 'int' 1
|   |           | |-ImplicitCastExpr 0x1815e2f1bf0 <col:42, col:47> 'const limb *':'const limb *' <NoOp>
|   |           | | `-ImplicitCastExpr 0x1815e2f1bd8 <col:42, col:47> 'limb *' <ArrayToPointerDecay>
|   |           | |   `-ArraySubscriptExpr 0x1815e2f1b30 <col:42, col:47> 'felem':'limb [4]' lvalue
|   |           | |     |-ImplicitCastExpr 0x1815e2f1b18 <col:42> 'felem *' <ArrayToPointerDecay>
|   |           | |     | `-DeclRefExpr 0x1815e2f1ad0 <col:42> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |           | |     `-IntegerLiteral 0x1815e2f1af0 <col:46> 'int' 3
|   |           | `-ImplicitCastExpr 0x1815e2f1c20 <col:50> 'limb':'unsigned long long' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x1815e2f1c08 <col:50> 'u8':'unsigned char' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x1815e2f1b50 <col:50> 'u8':'unsigned char' lvalue Var 0x1815e209710 'sign' 'u8':'unsigned char'
|   |           `-IfStmt 0x1815e2f25c0 <line:1197:17, line:1204:17> has_else
|   |             |-UnaryOperator 0x1815e2f1c70 <line:1197:21, col:22> 'int' prefix '!' cannot overflow
|   |             | `-ImplicitCastExpr 0x1815e2f1c58 <col:22> 'int' <LValueToRValue>
|   |             |   `-DeclRefExpr 0x1815e2f1c38 <col:22> 'int' lvalue Var 0x1815e209140 'skip' 'int'
|   |             |-CompoundStmt 0x1815e2f2350 <col:28, line:1201:17>
|   |             | `-CallExpr 0x1815e2f2160 <line:1198:21, line:1200:60> 'void'
|   |             |   |-ImplicitCastExpr 0x1815e2f2148 <line:1198:21> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x1815e2f1c88 <col:21> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x1815e20dcb8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |             |   |-ImplicitCastExpr 0x1815e2f21d0 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1815e2f1d08 <col:31, col:35> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1815e2f1cf0 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x1815e2f1ca8 <col:31> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x1815e2f1cc8 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x1815e2f21e8 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1815e2f1d88 <col:38, col:42> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1815e2f1d70 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x1815e2f1d28 <col:38> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x1815e2f1d48 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x1815e2f2200 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x1815e2f1e08 <col:45, col:49> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x1815e2f1df0 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x1815e2f1da8 <col:45> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x1815e2f1dc8 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x1815e2f2230 <line:1199:31, col:35> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1815e2f2218 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1815e2f1e88 <col:31, col:35> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1815e2f1e70 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1815e2f1e28 <col:31> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x1815e2f1e48 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x1815e2f2260 <col:38, col:42> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1815e2f2248 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1815e2f1f08 <col:38, col:42> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1815e2f1ef0 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1815e2f1ea8 <col:38> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x1815e2f1ec8 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x1815e2f2290 <col:45, col:49> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1815e2f2278 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1815e2f1f88 <col:45, col:49> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1815e2f1f70 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1815e2f1f28 <col:45> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x1815e2f1f48 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x1815e2f22a8 <line:1200:31> 'int' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x1815e2f1fa8 <col:31> 'const int' lvalue ParmVar 0x1815e208828 'mixed' 'const int'
|   |             |   |-ImplicitCastExpr 0x1815e2f22d8 <col:38, col:43> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1815e2f22c0 <col:38, col:43> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1815e2f2028 <col:38, col:43> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1815e2f2010 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1815e2f1fc8 <col:38> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |             |   |     `-IntegerLiteral 0x1815e2f1fe8 <col:42> 'int' 0
|   |             |   |-ImplicitCastExpr 0x1815e2f2308 <col:46, col:51> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x1815e2f22f0 <col:46, col:51> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x1815e2f20a8 <col:46, col:51> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x1815e2f2090 <col:46> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x1815e2f2048 <col:46> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |             |   |     `-IntegerLiteral 0x1815e2f2068 <col:50> 'int' 1
|   |             |   `-ImplicitCastExpr 0x1815e2f2338 <col:54, col:59> 'const limb *':'const limb *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x1815e2f2320 <col:54, col:59> 'limb *' <ArrayToPointerDecay>
|   |             |       `-ArraySubscriptExpr 0x1815e2f2128 <col:54, col:59> 'felem':'limb [4]' lvalue
|   |             |         |-ImplicitCastExpr 0x1815e2f2110 <col:54> 'felem *' <ArrayToPointerDecay>
|   |             |         | `-DeclRefExpr 0x1815e2f20c8 <col:54> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |             |         `-IntegerLiteral 0x1815e2f20e8 <col:58> 'int' 2
|   |             `-CompoundStmt 0x1815e2f25a0 <line:1201:24, line:1204:17>
|   |               |-CallExpr 0x1815e2f24a0 <line:1202:21, col:54> 'void *'
|   |               | |-ImplicitCastExpr 0x1815e2f2488 <col:21> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x1815e2f2368 <col:21> 'void *(void *, const void *, unsigned long long)' Function 0x1815e0cd218 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |               | |-ImplicitCastExpr 0x1815e2f24f0 <col:28> 'void *' <BitCast>
|   |               | | `-ImplicitCastExpr 0x1815e2f24d8 <col:28> 'felem *' <ArrayToPointerDecay>
|   |               | |   `-DeclRefExpr 0x1815e2f2388 <col:28> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |               | |-ImplicitCastExpr 0x1815e2f2520 <col:32> 'const void *' <BitCast>
|   |               | | `-ImplicitCastExpr 0x1815e2f2508 <col:32> 'felem *' <ArrayToPointerDecay>
|   |               | |   `-DeclRefExpr 0x1815e2f23a8 <col:32> 'felem [4]' lvalue Var 0x1815e2095d8 'tmp' 'felem [4]'
|   |               | `-BinaryOperator 0x1815e2f2438 <col:37, col:53> 'unsigned long long' '*'
|   |               |   |-ImplicitCastExpr 0x1815e2f2420 <col:37> 'unsigned long long' <IntegralCast>
|   |               |   | `-IntegerLiteral 0x1815e2f23c8 <col:37> 'int' 3
|   |               |   `-UnaryExprOrTypeTraitExpr 0x1815e2f2400 <col:41, col:53> 'unsigned long long' sizeof 'felem':'limb [4]'
|   |               `-BinaryOperator 0x1815e2f2580 <line:1203:21, col:28> 'int' '='
|   |                 |-DeclRefExpr 0x1815e2f2538 <col:21> 'int' lvalue Var 0x1815e209140 'skip' 'int'
|   |                 `-IntegerLiteral 0x1815e2f2558 <col:28> 'int' 0
|   |-CallExpr 0x1815e2f27f0 <line:1208:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1815e2f27d8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f2718 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2f2820 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e2f2738 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e208440 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1815e2f2850 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2f2838 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x1815e2f27b8 <col:25, col:29> 'felem':'limb [4]' lvalue
|   |       |-ImplicitCastExpr 0x1815e2f27a0 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1815e2f2758 <col:25> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x1815e2f2778 <col:28> 'int' 0
|   |-CallExpr 0x1815e2f2940 <line:1209:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x1815e2f2928 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f2868 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2f2970 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1815e2f2888 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e2084b8 'y_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x1815e2f29a0 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2f2988 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x1815e2f2908 <col:25, col:29> 'felem':'limb [4]' lvalue
|   |       |-ImplicitCastExpr 0x1815e2f28f0 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x1815e2f28a8 <col:25> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x1815e2f28c8 <col:28> 'int' 1
|   `-CallExpr 0x1815e2f2a90 <line:1210:5, col:30> 'void'
|     |-ImplicitCastExpr 0x1815e2f2a78 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1815e2f29b8 <col:5> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x1815e2f2ac0 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x1815e2f29d8 <col:18> 'limb *':'limb *' lvalue ParmVar 0x1815e208530 'z_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x1815e2f2af0 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x1815e2f2ad8 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|         `-ArraySubscriptExpr 0x1815e2f2a58 <col:25, col:29> 'felem':'limb [4]' lvalue
|           |-ImplicitCastExpr 0x1815e2f2a40 <col:25> 'felem *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x1815e2f29f8 <col:25> 'felem [3]' lvalue Var 0x1815e209498 'nq' 'felem [3]'
|           `-IntegerLiteral 0x1815e2f2a18 <col:28> 'int' 2
|-FunctionDecl 0x1815e2f2c28 <line:1218:1, line:1236:1> line:1218:27 used nistp224_pre_comp_new 'NISTP224_PRE_COMP *()' static
| |-CompoundStmt 0x1815e2fb6d0 <line:1219:1, line:1236:1>
| | |-DeclStmt 0x1815e2fafd8 <line:1220:5, col:58>
| | | `-VarDecl 0x1815e2f2cf0 <col:5, col:57> col:24 used ret 'NISTP224_PRE_COMP *' cinit
| | |   `-ImplicitCastExpr 0x1815e2fafc0 <col:30, col:57> 'NISTP224_PRE_COMP *' <IntegralToPointer>
| | |     `-CallExpr 0x1815e2faf98 <col:30, col:57> 'int'
| | |       |-ImplicitCastExpr 0x1815e2faf80 <col:30> 'int (*)()' <FunctionToPointerDecay>
| | |       | `-DeclRefExpr 0x1815e2f2e48 <col:30> 'int ()' Function 0x1815e2f2d80 'OPENSSL_zalloc' 'int ()'
| | |       `-UnaryExprOrTypeTraitExpr 0x1815e2f2ed8 <col:45, col:56> 'unsigned long long' sizeof
| | |         `-ParenExpr 0x1815e2f2eb8 <col:51, col:56> 'NISTP224_PRE_COMP':'struct nistp224_pre_comp_st' lvalue
| | |           `-UnaryOperator 0x1815e2f2ea0 <col:52, col:53> 'NISTP224_PRE_COMP':'struct nistp224_pre_comp_st' lvalue prefix '*' cannot overflow
| | |             `-ImplicitCastExpr 0x1815e2f2e88 <col:53> 'NISTP224_PRE_COMP *' <LValueToRValue>
| | |               `-DeclRefExpr 0x1815e2f2e68 <col:53> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e2f2cf0 'ret' 'NISTP224_PRE_COMP *' non_odr_use_unevaluated
| | |-IfStmt 0x1815e2fb0d8 <line:1222:5, line:1225:5>
| | | |-UnaryOperator 0x1815e2fb040 <line:1222:9, col:10> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x1815e2fb028 <col:10> 'NISTP224_PRE_COMP *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x1815e2faff0 <col:10> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e2f2cf0 'ret' 'NISTP224_PRE_COMP *'
| | | `-CompoundStmt 0x1815e2fb0c0 <col:15, line:1225:5>
| | |   `-ReturnStmt 0x1815e2fb0b0 <line:1224:9, col:16>
| | |     `-ImplicitCastExpr 0x1815e2fb098 <col:16> 'NISTP224_PRE_COMP *' <LValueToRValue>
| | |       `-DeclRefExpr 0x1815e2fb078 <col:16> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e2f2cf0 'ret' 'NISTP224_PRE_COMP *'
| | |-BinaryOperator 0x1815e2fb180 <line:1227:5, col:23> 'int' '='
| | | |-MemberExpr 0x1815e2fb128 <col:5, col:10> 'int' lvalue ->references 0x1815e10aac8
| | | | `-ImplicitCastExpr 0x1815e2fb110 <col:5> 'NISTP224_PRE_COMP *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x1815e2fb0f0 <col:5> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e2f2cf0 'ret' 'NISTP224_PRE_COMP *'
| | | `-IntegerLiteral 0x1815e2fb158 <col:23> 'int' 1
| | |-IfStmt 0x1815e2fb670 <line:1230:5, line:1234:5>
| | | |-OpaqueValueExpr 0x1815e2fb658 <<invalid sloc>> '_Bool'
| | | `-CompoundStmt 0x1815e2fb638 <line:1230:28, line:1234:5>
| | |   |-CallExpr 0x1815e2fb548 <line:1232:9, col:25> 'int'
| | |   | |-ImplicitCastExpr 0x1815e2fb530 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x1815e2fb4f0 <col:9> 'int ()' Function 0x1815e2fb428 'OPENSSL_free' 'int ()'
| | |   | `-ImplicitCastExpr 0x1815e2fb570 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x1815e2fb510 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e2f2cf0 'ret' 'NISTP224_PRE_COMP *'
| | |   `-ReturnStmt 0x1815e2fb628 <line:1233:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27>
| | |     `-ImplicitCastExpr 0x1815e2fb610 <col:17, col:27> 'NISTP224_PRE_COMP *' <NullToPointer>
| | |       `-ParenExpr 0x1815e2fb5f0 <col:17, col:27> 'void *'
| | |         `-CStyleCastExpr 0x1815e2fb5c8 <col:18, col:26> 'void *' <NullToPointer>
| | |           `-IntegerLiteral 0x1815e2fb588 <col:26> 'int' 0
| | `-ReturnStmt 0x1815e2fb6c0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1235:5, col:12>
| |   `-ImplicitCastExpr 0x1815e2fb6a8 <col:12> 'NISTP224_PRE_COMP *' <LValueToRValue>
| |     `-DeclRefExpr 0x1815e2fb688 <col:12> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e2f2cf0 'ret' 'NISTP224_PRE_COMP *'
| `-FullComment 0x1815e310ab0 <line:1213:4, col:78>
|   `-ParagraphComment 0x1815e310a88 <col:4, col:78>
|     `-TextComment 0x1815e310a60 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x1815e2fb7c0 prev 0x1815e193348 <line:1238:1, line:1244:1> line:1238:20 EC_nistp224_pre_comp_dup 'NISTP224_PRE_COMP *(NISTP224_PRE_COMP *)'
| |-ParmVarDecl 0x1815e2fb718 <col:45, col:64> col:64 used p 'NISTP224_PRE_COMP *'
| `-CompoundStmt 0x1815e2fbc80 <line:1239:1, line:1244:1>
|   |-DeclStmt 0x1815e2fb8e8 <line:1240:5, col:10>
|   | `-VarDecl 0x1815e2fb880 <col:5, col:9> col:9 used i 'int'
|   `-ReturnStmt 0x1815e2fbc70 <line:1243:5, col:12>
|     `-ImplicitCastExpr 0x1815e2fbc58 <col:12> 'NISTP224_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x1815e2fbc38 <col:12> 'NISTP224_PRE_COMP *' lvalue ParmVar 0x1815e2fb718 'p' 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x1815e2fbd58 prev 0x1815e193ea8 <line:1246:1, line:1261:1> line:1246:6 used EC_nistp224_pre_comp_free 'void (NISTP224_PRE_COMP *)'
| |-ParmVarDecl 0x1815e2fbcb0 <col:32, col:51> col:51 used p 'NISTP224_PRE_COMP *'
| `-CompoundStmt 0x1815e2fc718 <line:1247:1, line:1261:1>
|   |-DeclStmt 0x1815e2fbe80 <line:1248:5, col:10>
|   | `-VarDecl 0x1815e2fbe18 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x1815e2fbfa0 <line:1250:5, line:1251:9>
|   | |-BinaryOperator 0x1815e2fbf70 <line:1250:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x1815e2fbf40 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1250:9> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e2fbe98 <col:9> 'NISTP224_PRE_COMP *' lvalue ParmVar 0x1815e2fbcb0 'p' 'NISTP224_PRE_COMP *'
|   | | `-ImplicitCastExpr 0x1815e2fbf58 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP224_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x1815e2fbf20 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1815e2fbef8 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1815e2fbeb8 <col:26> 'int' 0
|   | `-ReturnStmt 0x1815e2fbf90 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1251:9>
|   |-IfStmt 0x1815e2fc320 <line:1255:5, line:1256:9>
|   | |-BinaryOperator 0x1815e2fc2f0 <line:1255:9, col:13> 'int' '>'
|   | | |-ImplicitCastExpr 0x1815e2fc2d8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e2fc290 <col:9> 'int' lvalue Var 0x1815e2fbe18 'i' 'int'
|   | | `-IntegerLiteral 0x1815e2fc2b0 <col:13> 'int' 0
|   | `-ReturnStmt 0x1815e2fc310 <line:1256:9>
|   |-CallExpr 0x1815e2fc4e0 <line:1257:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x1815e2fc4c8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2fc428 <col:5> 'int ()' Function 0x1815e2fc360 'REF_ASSERT_ISNT' 'int ()'
|   | `-BinaryOperator 0x1815e2fc4a8 <col:21, col:25> 'int' '<'
|   |   |-ImplicitCastExpr 0x1815e2fc490 <col:21> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1815e2fc448 <col:21> 'int' lvalue Var 0x1815e2fbe18 'i' 'int'
|   |   `-IntegerLiteral 0x1815e2fc468 <col:25> 'int' 0
|   `-CallExpr 0x1815e2fc6a8 <line:1260:5, col:19> 'int'
|     |-ImplicitCastExpr 0x1815e2fc690 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1815e2fc650 <col:5> 'int ()' Function 0x1815e2fb428 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x1815e2fc6d0 <col:18> 'NISTP224_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x1815e2fc670 <col:18> 'NISTP224_PRE_COMP *' lvalue ParmVar 0x1815e2fbcb0 'p' 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x1815e2fc800 <line:1268:1, line:1274:1> line:1268:5 invalid ec_GFp_nistp224_group_init 'int (int *)'
| |-ParmVarDecl 0x1815e2fc768 <col:32, col:42> col:42 invalid group 'int *'
| |-CompoundStmt 0x1815e2fca00 <line:1269:1, line:1274:1>
| | |-DeclStmt 0x1815e2fc940 <line:1270:5, col:12>
| | | `-VarDecl 0x1815e2fc8d8 <col:5, col:9> col:9 used ret 'int'
| | `-ReturnStmt 0x1815e2fc9f0 <line:1273:5, col:12>
| |   `-ImplicitCastExpr 0x1815e2fc9d8 <col:12> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x1815e2fc9b8 <col:12> 'int' lvalue Var 0x1815e2fc8d8 'ret' 'int'
| `-FullComment 0x1815e310b78 <line:1263:4, col:78>
|   `-ParagraphComment 0x1815e310b50 <col:4, col:78>
|     `-TextComment 0x1815e310b28 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x1815e2fccf0 <line:1276:1, line:1306:1> line:1276:5 invalid ec_GFp_nistp224_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x1815e2fca38 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1815e2fcab8 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x1815e2fcb38 <line:1277:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x1815e2fcbb8 <col:54, col:68> col:68 invalid b 'const int *'
| |-ParmVarDecl 0x1815e2fcc38 <line:1278:37, col:45> col:45 invalid ctx 'int *'
| `-CompoundStmt 0x1815e301dc8 <line:1279:1, line:1306:1>
|   |-DeclStmt 0x1815e2fce78 <line:1280:5, col:16>
|   | `-VarDecl 0x1815e2fcde8 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1815e2fce50 <col:15> 'int' 0
|   |-IfStmt 0x1815e301220 <line:1284:5, line:1286:20>
|   | |-OpaqueValueExpr 0x1815e301208 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x1815e3011f0 <line:1285:9, line:1286:20>
|   |   |-OpaqueValueExpr 0x1815e3011d8 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x1815e3011c8 <col:13, col:20>
|   |     `-IntegerLiteral 0x1815e3011a0 <col:20> 'int' 0
|   |-IfStmt 0x1815e3016b0 <line:1288:5, line:1291:14>
|   | |-OpaqueValueExpr 0x1815e301698 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1815e301680 <col:9, col:14> 'err' 0x1815e301630
|   |-IfStmt 0x1815e301af0 <line:1295:5, line:1299:5>
|   | |-OpaqueValueExpr 0x1815e301ad8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1815e301ac0 <line:1295:79, line:1299:5>
|   |   `-GotoStmt 0x1815e301aa8 <line:1298:9, col:14> 'err' 0x1815e301630
|   |-LabelStmt 0x1815e301c58 <line:1302:2, col:5> 'err'
|   | `-NullStmt 0x1815e301c50 <col:5>
|   `-ReturnStmt 0x1815e301db8 <line:1305:5, col:12>
|     `-ImplicitCastExpr 0x1815e301da0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1815e301d80 <col:12> 'int' lvalue Var 0x1815e2fcde8 'ret' 'int'
|-FunctionDecl 0x1815e3020d8 <line:1312:1, line:1354:1> line:1312:5 invalid ec_GFp_nistp224_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x1815e301e20 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x1815e301ea0 <line:1313:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x1815e301f20 <line:1314:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x1815e301fa0 <col:61, col:69> col:69 invalid y 'int *'
| |-ParmVarDecl 0x1815e302020 <line:1315:50, col:58> col:58 invalid ctx 'int *'
| `-CompoundStmt 0x1815e2f36c8 <line:1316:1, line:1354:1>
|   |-DeclStmt 0x1815e3024c0 <line:1317:5, col:43>
|   | |-VarDecl 0x1815e3021c8 <col:5, col:11> col:11 used z1 'felem':'limb [4]'
|   | |-VarDecl 0x1815e302240 <col:5, col:15> col:15 used z2 'felem':'limb [4]'
|   | |-VarDecl 0x1815e3022b8 <col:5, col:19> col:19 used x_in 'felem':'limb [4]'
|   | |-VarDecl 0x1815e302330 <col:5, col:25> col:25 used y_in 'felem':'limb [4]'
|   | |-VarDecl 0x1815e3023a8 <col:5, col:31> col:31 used x_out 'felem':'limb [4]'
|   | `-VarDecl 0x1815e302420 <col:5, col:38> col:38 used y_out 'felem':'limb [4]'
|   |-DeclStmt 0x1815e302550 <line:1318:5, col:18>
|   | `-VarDecl 0x1815e3024e8 <col:5, col:15> col:15 used tmp 'widefelem':'widelimb [7]'
|   |-IfStmt 0x1815e302700 <line:1320:5, line:1324:5>
|   | |-OpaqueValueExpr 0x1815e3026e8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1815e3026d0 <line:1320:48, line:1324:5>
|   |   `-ReturnStmt 0x1815e3026c0 <line:1323:9, col:16>
|   |     `-IntegerLiteral 0x1815e302698 <col:16> 'int' 0
|   |-IfStmt 0x1815e302810 <line:1325:5, line:1327:16>
|   | |-OpaqueValueExpr 0x1815e3027f8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1815e3027e8 <col:9, col:16>
|   |   `-IntegerLiteral 0x1815e3027c0 <col:16> 'int' 0
|   |-CallExpr 0x1815e3028b8 <line:1328:5, col:21> 'void'
|   | |-ImplicitCastExpr 0x1815e3028a0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302828 <col:5> 'void (limb *, const limb *)' Function 0x1815e201460 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e3028e8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302848 <col:15> 'felem':'limb [4]' lvalue Var 0x1815e302240 'z2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e302918 <col:19> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e302900 <col:19> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e302880 <col:19> 'felem':'limb [4]' lvalue Var 0x1815e3021c8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x1815e3029c0 <line:1329:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1815e3029a8 <col:5> 'void (*)(widelimb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302930 <col:5> 'void (widelimb *, const limb *)' Function 0x1815e116c40 'felem_square' 'void (widelimb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e3029f0 <col:18> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302950 <col:18> 'widefelem':'widelimb [7]' lvalue Var 0x1815e3024e8 'tmp' 'widefelem':'widelimb [7]'
|   | `-ImplicitCastExpr 0x1815e302a20 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e302a08 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e302988 <col:23> 'felem':'limb [4]' lvalue Var 0x1815e302240 'z2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e302ab0 <line:1330:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1815e302a98 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302a38 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e302ae0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302a58 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e3021c8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e302b10 <col:22> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e302af8 <col:22> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e302a78 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e3024e8 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e302bc0 <line:1331:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e302ba8 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302b28 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e302bf8 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302b48 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e3024e8 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e302c28 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e302c10 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e302b68 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e3022b8 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e302c58 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e302c40 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e302b88 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e3021c8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x1815e302ce8 <line:1332:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e302cd0 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302c70 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e302d18 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302c90 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e3022b8 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e302d48 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e302d30 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e302cb0 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e3024e8 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e302df0 <line:1333:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e302dd8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302d60 <col:5> 'void (limb *, const limb *)' Function 0x1815e1f8a18 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e302e20 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e302d80 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e3023a8 'x_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e302e50 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e302e38 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e302db8 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e3022b8 'x_in' 'felem':'limb [4]'
|   |-IfStmt 0x1815e2f2f70 <line:1334:5, line:1340:5>
|   | |-OpaqueValueExpr 0x1815e2f2f58 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1815e2f2f40 <line:1334:20, line:1340:5>
|   |   `-IfStmt 0x1815e302f98 <line:1335:9, line:1339:9>
|   |     |-OpaqueValueExpr 0x1815e302f80 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1815e302f68 <line:1335:37, line:1339:9>
|   |       `-ReturnStmt 0x1815e302f58 <line:1338:13, col:20>
|   |         `-IntegerLiteral 0x1815e302f30 <col:20> 'int' 0
|   |-CallExpr 0x1815e2f3020 <line:1341:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x1815e2f3008 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f2f88 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2f3058 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f2fa8 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e3024e8 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e2f3088 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e2f3070 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e2f2fc8 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e3021c8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e2f30b8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2f30a0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2f2fe8 <col:24> 'felem':'limb [4]' lvalue Var 0x1815e302240 'z2' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2f3148 <line:1342:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x1815e2f3130 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f30d0 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e2f3178 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f30f0 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e3021c8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e2f31a8 <col:22> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2f3190 <col:22> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2f3110 <col:22> 'widefelem':'widelimb [7]' lvalue Var 0x1815e3024e8 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e2f3258 <line:1343:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1815e2f3240 <col:5> 'void (*)(widelimb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f31c0 <col:5> 'void (widelimb *, const limb *, const limb *)' Function 0x1815e1fe0b8 'felem_mul' 'void (widelimb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2f3290 <col:15> 'widelimb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f31e0 <col:15> 'widefelem':'widelimb [7]' lvalue Var 0x1815e3024e8 'tmp' 'widefelem':'widelimb [7]'
|   | |-ImplicitCastExpr 0x1815e2f32c0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x1815e2f32a8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1815e2f3200 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e302330 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e2f32f0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2f32d8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2f3220 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e3021c8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2f3380 <line:1344:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x1815e2f3368 <col:5> 'void (*)(limb *, const widelimb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f3308 <col:5> 'void (limb *, const widelimb *)' Function 0x1815e1fc5c8 'felem_reduce' 'void (limb *, const widelimb *)'
|   | |-ImplicitCastExpr 0x1815e2f33b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f3328 <col:18> 'felem':'limb [4]' lvalue Var 0x1815e302330 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e2f33e0 <col:24> 'const widelimb *':'const widelimb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2f33c8 <col:24> 'widelimb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2f3348 <col:24> 'widefelem':'widelimb [7]' lvalue Var 0x1815e3024e8 'tmp' 'widefelem':'widelimb [7]'
|   |-CallExpr 0x1815e2f3488 <line:1345:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e2f3470 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f33f8 <col:5> 'void (limb *, const limb *)' Function 0x1815e1f8a18 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2f34b8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f3418 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e302420 'y_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e2f34e8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2f34d0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2f3450 <col:27> 'felem':'limb [4]' lvalue Var 0x1815e302330 'y_in' 'felem':'limb [4]'
|   |-IfStmt 0x1815e2f3678 <line:1346:5, line:1352:5>
|   | |-OpaqueValueExpr 0x1815e2f3660 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1815e2f3648 <line:1346:20, line:1352:5>
|   |   `-IfStmt 0x1815e2f3630 <line:1347:9, line:1351:9>
|   |     |-OpaqueValueExpr 0x1815e2f3618 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1815e2f3600 <line:1347:37, line:1351:9>
|   |       `-ReturnStmt 0x1815e2f35f0 <line:1350:13, col:20>
|   |         `-IntegerLiteral 0x1815e2f35c8 <col:20> 'int' 0
|   `-ReturnStmt 0x1815e2f36b8 <line:1353:5, col:12>
|     `-IntegerLiteral 0x1815e2f3690 <col:12> 'int' 1
|-FunctionDecl 0x1815e2f3b98 <line:1356:1, line:1383:1> line:1356:13 used make_points_affine 'void (size_t, felem (*)[3], felem *)' static
| |-ParmVarDecl 0x1815e2f3778 <col:32, col:39> col:39 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e2f3910 <col:44, col:71> col:50 used points 'felem (*)[3]':'felem (*)[3]'
| |-ParmVarDecl 0x1815e2f3a30 <line:1357:32, col:62> col:38 used tmp_felems 'felem *':'felem *'
| `-CompoundStmt 0x1815e2f4928 <line:1358:1, line:1383:1>
|   `-CallExpr 0x1815e2f4820 <line:1363:5, line:1382:60> 'void'
|     |-ImplicitCastExpr 0x1815e2f4808 <line:1363:5> 'void (*)(size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1815e2f3c68 <col:5> 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' Function 0x1815e1aea88 'ec_GFp_nistp_points_make_affine_internal' 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
|     |-ImplicitCastExpr 0x1815e2f4898 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|     | `-DeclRefExpr 0x1815e2f3c88 <col:46> 'size_t':'unsigned long long' lvalue ParmVar 0x1815e2f3778 'num' 'size_t':'unsigned long long'
|     |-ImplicitCastExpr 0x1815e2f48c8 <line:1364:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x1815e2f48b0 <col:46> 'felem (*)[3]':'felem (*)[3]' <LValueToRValue>
|     |   `-DeclRefExpr 0x1815e2f3ca8 <col:46> 'felem (*)[3]':'felem (*)[3]' lvalue ParmVar 0x1815e2f3910 'points' 'felem (*)[3]':'felem (*)[3]'
|     |-UnaryExprOrTypeTraitExpr 0x1815e2f3cd8 <line:1365:46, col:58> 'unsigned long long' sizeof 'felem':'limb [4]'
|     |-ImplicitCastExpr 0x1815e2f48f8 <line:1366:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x1815e2f48e0 <col:46> 'felem *':'felem *' <LValueToRValue>
|     |   `-DeclRefExpr 0x1815e2f3cf8 <col:46> 'felem *':'felem *' lvalue ParmVar 0x1815e2f3a30 'tmp_felems' 'felem *':'felem *'
|     |-CStyleCastExpr 0x1815e2f3e60 <line:1367:46, col:64> 'void (*)(void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1815e2f3e48 <col:64> 'void (*)(limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1815e2f3d98 <col:64> 'void (limb *)' Function 0x1815e10eea8 'felem_one' 'void (limb *)'
|     |-ImplicitCastExpr 0x1815e2f4910 <line:1368:46> 'int (*)(const void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x1815e2f3e88 <col:46> 'int (const void *)' Function 0x1815e200ff0 'felem_is_zero_int' 'int (const void *)'
|     |-CStyleCastExpr 0x1815e2f4020 <line:1369:46, line:1370:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1815e2f4008 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1815e2f3fa8 <col:46> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|     |-CStyleCastExpr 0x1815e2f41c0 <line:1371:46, line:1372:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1815e2f41a8 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1815e2f4148 <col:46> 'void (limb *, const limb *)' Function 0x1815e1f7e50 'felem_square_reduce' 'void (limb *, const limb *)'
|     |-CStyleCastExpr 0x1815e2f4440 <col:67, line:1378:46> 'void (*)(void *, const void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1815e2f4428 <col:46> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1815e2f4368 <col:46> 'void (limb *, const limb *, const limb *)' Function 0x1815e1f84c8 'felem_mul_reduce' 'void (limb *, const limb *, const limb *)'
|     |-CStyleCastExpr 0x1815e2f45e0 <line:1379:46, line:1380:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x1815e2f45c8 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x1815e2f4568 <col:46> 'void (limb *, const limb *)' Function 0x1815e201460 'felem_inv' 'void (limb *, const limb *)'
|     `-CStyleCastExpr 0x1815e2f4780 <line:1381:46, line:1382:46> 'void (*)(void *, const void *)' <BitCast>
|       `-ImplicitCastExpr 0x1815e2f4768 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|         `-DeclRefExpr 0x1815e2f4708 <col:46> 'void (limb *, const limb *)' Function 0x1815e1f8a18 'felem_contract' 'void (limb *, const limb *)'
|-FunctionDecl 0x1815e2f4d38 <line:1389:1, line:1584:1> line:1389:5 invalid ec_GFp_nistp224_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x1815e2f4958 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x1815e2f49d8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x1815e2f4a58 <line:1390:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x1815e2f4ad0 <col:54, col:61> col:61 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1815e2f4b60 <line:1391:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x1815e2f4bf0 <line:1392:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| |-ParmVarDecl 0x1815e2f4c70 <col:57, col:65> col:65 invalid ctx 'int *'
| `-CompoundStmt 0x1815e307068 <line:1393:1, line:1584:1>
|   |-DeclStmt 0x1815e2f4ed0 <line:1394:5, col:16>
|   | `-VarDecl 0x1815e2f4e40 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1815e2f4ea8 <col:15> 'int' 0
|   |-DeclStmt 0x1815e2f4fb8 <line:1395:5, col:10>
|   | `-VarDecl 0x1815e2f4f50 <col:5, col:9> col:9 used j 'int'
|   |-DeclStmt 0x1815e2f5050 <line:1396:5, col:15>
|   | `-VarDecl 0x1815e2f4fe8 <col:5, col:14> col:14 used i 'unsigned int'
|   |-DeclStmt 0x1815e2f5110 <line:1397:5, col:18>
|   | `-VarDecl 0x1815e2f5080 <col:5, col:17> col:9 used mixed 'int' cinit
|   |   `-IntegerLiteral 0x1815e2f50e8 <col:17> 'int' 0
|   |-DeclStmt 0x1815e2f5228 <line:1400:5, col:29>
|   | `-VarDecl 0x1815e2f51c0 <col:5, col:21> col:21 used g_secret 'felem_bytearray':'u8 [28]'
|   |-DeclStmt 0x1815e2f53b0 <line:1401:5, col:36>
|   | `-VarDecl 0x1815e2f52a8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1401:22 used secrets 'felem_bytearray *' cinit
|   |   `-ImplicitCastExpr 0x1815e2f5398 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <NullToPointer>
|   |     `-ParenExpr 0x1815e2f5378 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1815e2f5350 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1815e2f5310 <col:26> 'int' 0
|   |-DeclStmt 0x1815e2f5660 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1402:5, col:36>
|   | `-VarDecl 0x1815e2f5558 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1402:13 used pre_comp 'felem (*)[17][3]' cinit
|   |   `-ImplicitCastExpr 0x1815e2f5648 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[17][3]' <NullToPointer>
|   |     `-ParenExpr 0x1815e2f5628 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1815e2f5600 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1815e2f55c0 <col:26> 'int' 0
|   |-DeclStmt 0x1815e2f5790 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1403:5, col:29>
|   | `-VarDecl 0x1815e2f5688 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1403:12 used tmp_felems 'felem *' cinit
|   |   `-ImplicitCastExpr 0x1815e2f5778 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem *' <NullToPointer>
|   |     `-ParenExpr 0x1815e2f5758 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1815e2f5730 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1815e2f56f0 <col:26> 'int' 0
|   |-DeclStmt 0x1815e2f5820 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1404:5, col:24>
|   | `-VarDecl 0x1815e2f57b8 <col:5, col:21> col:21 used tmp 'felem_bytearray':'u8 [28]'
|   |-DeclStmt 0x1815e2f58b8 <line:1405:5, col:23>
|   | `-VarDecl 0x1815e2f5850 <col:5, col:14> col:14 used num_bytes 'unsigned int'
|   |-DeclStmt 0x1815e2f5978 <line:1406:5, col:26>
|   | `-VarDecl 0x1815e2f58e8 <col:5, col:25> col:9 used have_pre_comp 'int' cinit
|   |   `-IntegerLiteral 0x1815e2f5950 <col:25> 'int' 0
|   |-DeclStmt 0x1815e2f5a58 <line:1407:5, col:28>
|   | `-VarDecl 0x1815e2f59a0 <col:5, col:25> col:12 used num_points 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x1815e2f5a40 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x1815e2f5a08 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x1815e2f4ad0 'num' 'size_t':'unsigned long long'
|   |-DeclStmt 0x1815e2f5d78 <line:1408:5, col:48>
|   | |-VarDecl 0x1815e2f5a80 <col:5, col:11> col:11 used x_in 'felem':'limb [4]'
|   | |-VarDecl 0x1815e2f5af8 <col:5, col:17> col:17 used y_in 'felem':'limb [4]'
|   | |-VarDecl 0x1815e2f5b70 <col:5, col:23> col:23 used z_in 'felem':'limb [4]'
|   | |-VarDecl 0x1815e2f5be8 <col:5, col:29> col:29 used x_out 'felem':'limb [4]'
|   | |-VarDecl 0x1815e2f5c60 <col:5, col:36> col:36 used y_out 'felem':'limb [4]'
|   | `-VarDecl 0x1815e2f5cd8 <col:5, col:43> col:43 used z_out 'felem':'limb [4]'
|   |-DeclStmt 0x1815e2f5ea8 <line:1409:5, col:34>
|   | `-VarDecl 0x1815e2f5da0 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1409:24 used pre 'NISTP224_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x1815e2f5e90 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP224_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x1815e2f5e70 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1815e2f5e48 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1815e2f5e08 <col:26> 'int' 0
|   |-DeclStmt 0x1815e2f60e0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1410:5, col:43>
|   | `-VarDecl 0x1815e2f5fd8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1410:18 used g_pre_comp 'const felem (*)[16][3]' cinit
|   |   `-ImplicitCastExpr 0x1815e2f60c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const felem (*)[16][3]' <NullToPointer>
|   |     `-ParenExpr 0x1815e2f60a8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1815e2f6080 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1815e2f6040 <col:26> 'int' 0
|   |-DeclStmt 0x1815e2f6288 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1412:5, col:29>
|   | `-VarDecl 0x1815e2f6198 <col:5, col:21> col:21 invalid p 'const int *'
|   |-DeclStmt 0x1815e2f63a8 <line:1413:5, col:34>
|   | `-VarDecl 0x1815e2f62b8 <col:5, col:19> col:19 invalid p_scalar 'const int *'
|   |-IfStmt 0x1815e2f65a8 <line:1415:5, line:1417:20>
|   | |-OpaqueValueExpr 0x1815e2f6590 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x1815e2f6578 <line:1416:9, line:1417:20>
|   |   |-OpaqueValueExpr 0x1815e2f6560 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x1815e2f6550 <col:13, col:20>
|   |     `-IntegerLiteral 0x1815e2f6528 <col:20> 'int' 0
|   |-IfStmt 0x1815e2f6900 <line:1419:5, line:1423:14>
|   | |-OpaqueValueExpr 0x1815e2f68e8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1815e2f68d0 <col:9, col:14> 'err' 0x1815e2f6880
|   |-IfStmt 0x1815e2fd8f0 <line:1425:5, line:1456:5>
|   | |-OpaqueValueExpr 0x1815e2fd8d8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1815e2fd8a0 <line:1425:25, line:1456:5>
|   |   |-IfStmt 0x1815e2f6db8 <line:1427:9, line:1432:33> has_else
|   |   | |-ImplicitCastExpr 0x1815e2f69f8 <line:1427:13> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1815e2f69d8 <col:13> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e2f5da0 'pre' 'NISTP224_PRE_COMP *'
|   |   | |-BinaryOperator 0x1815e2f6cc0 <line:1429:13, col:54> 'const felem (*)[16][3]' '='
|   |   | | |-DeclRefExpr 0x1815e2f6a10 <col:13> 'const felem (*)[16][3]' lvalue Var 0x1815e2f5fd8 'g_pre_comp' 'const felem (*)[16][3]'
|   |   | | `-CStyleCastExpr 0x1815e2f6c98 <col:26, col:54> 'const felem (*)[16][3]' <NoOp>
|   |   | |   `-ImplicitCastExpr 0x1815e2f6bc8 <col:49, col:54> 'felem (*)[16][3]' <ArrayToPointerDecay> part_of_explicit_cast
|   |   | |     `-MemberExpr 0x1815e2f6ad0 <col:49, col:54> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |       `-ImplicitCastExpr 0x1815e2f6ab8 <col:49> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x1815e2f6a98 <col:49> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e2f5da0 'pre' 'NISTP224_PRE_COMP *'
|   |   | `-BinaryOperator 0x1815e2f6d98 <line:1432:13, col:33> 'const felem (*)[16][3]' '='
|   |   |   |-DeclRefExpr 0x1815e2f6ce0 <col:13> 'const felem (*)[16][3]' lvalue Var 0x1815e2f5fd8 'g_pre_comp' 'const felem (*)[16][3]'
|   |   |   `-UnaryOperator 0x1815e2f6d80 <col:26, col:33> 'const felem (*)[16][3]' prefix '&' cannot overflow
|   |   |     `-ArraySubscriptExpr 0x1815e2f6d60 <col:27, col:33> 'const felem [16][3]' lvalue
|   |   |       |-ImplicitCastExpr 0x1815e2f6d48 <col:27> 'const felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       | `-DeclRefExpr 0x1815e2f6d00 <col:27> 'const felem [2][16][3]' lvalue Var 0x1815e0fcd18 'gmul' 'const felem [2][16][3]'
|   |   |       `-IntegerLiteral 0x1815e2f6d20 <col:32> 'int' 0
|   |   |-IfStmt 0x1815e2fd008 <line:1434:9, line:1435:18>
|   |   | |-OpaqueValueExpr 0x1815e2fcff0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1815e2fcfd8 <col:13, col:18> 'err' 0x1815e2f6880
|   |   |-IfStmt 0x1815e2fd448 <line:1437:9, line:1442:9>
|   |   | |-OpaqueValueExpr 0x1815e2fd430 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x1815e2fd418 <line:1439:51, line:1442:9>
|   |   |   `-GotoStmt 0x1815e2fd400 <line:1441:13, col:18> 'err' 0x1815e2f6880
|   |   |-IfStmt 0x1815e2fd5a0 <line:1443:9, line:1446:18>
|   |   | |-OpaqueValueExpr 0x1815e2fd588 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1815e2fd570 <col:13, col:18> 'err' 0x1815e2f6880
|   |   `-IfStmt 0x1815e2fd878 <line:1447:9, line:1455:39> has_else
|   |     |-OpaqueValueExpr 0x1815e2fd860 <<invalid sloc>> '_Bool'
|   |     |-BinaryOperator 0x1815e2fd750 <line:1449:13, col:29> 'int' '='
|   |     | |-DeclRefExpr 0x1815e2fd6f0 <col:13> 'int' lvalue Var 0x1815e2f58e8 'have_pre_comp' 'int'
|   |     | `-IntegerLiteral 0x1815e2fd728 <col:29> 'int' 1
|   |     `-BinaryOperator 0x1815e2fd840 <line:1455:13, col:39> 'size_t':'unsigned long long' '='
|   |       |-DeclRefExpr 0x1815e2fd770 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   |       `-BinaryOperator 0x1815e2fd820 <col:26, col:39> 'unsigned long long' '+'
|   |         |-ImplicitCastExpr 0x1815e2fd7f0 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1815e2fd7a8 <col:26> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   |         `-ImplicitCastExpr 0x1815e2fd808 <col:39> 'unsigned long long' <IntegralCast>
|   |           `-IntegerLiteral 0x1815e2fd7c8 <col:39> 'int' 1
|   |-IfStmt 0x1815e2f77c8 <line:1458:5, line:1536:5>
|   | |-BinaryOperator 0x1815e2fd980 <line:1458:9, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x1815e2fd950 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e2fd908 <col:9> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x1815e2fd968 <col:22> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x1815e2fd928 <col:22> 'int' 0
|   | `-CompoundStmt 0x1815e2f7780 <col:25, line:1536:5>
|   |   |-IfStmt 0x1815e2fdad0 <line:1459:9, line:1465:9>
|   |   | |-BinaryOperator 0x1815e2fda18 <line:1459:13, col:27> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x1815e2fd9e8 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1815e2fd9a0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x1815e2fda00 <col:27> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1815e2fd9c0 <col:27> 'int' 3
|   |   | `-CompoundStmt 0x1815e2fdab8 <col:30, line:1465:9>
|   |   |   `-BinaryOperator 0x1815e2fda98 <line:1464:13, col:21> 'int' '='
|   |   |     |-DeclRefExpr 0x1815e2fda38 <col:13> 'int' lvalue Var 0x1815e2f5080 'mixed' 'int'
|   |   |     `-IntegerLiteral 0x1815e2fda70 <col:21> 'int' 1
|   |   |-BinaryOperator 0x1815e2fdc80 <line:1466:9, col:63> 'felem_bytearray *' '='
|   |   | |-DeclRefExpr 0x1815e2fdae8 <col:9> 'felem_bytearray *' lvalue Var 0x1815e2f52a8 'secrets' 'felem_bytearray *'
|   |   | `-ImplicitCastExpr 0x1815e2fdc68 <col:19, col:63> 'felem_bytearray *' <IntegralToPointer>
|   |   |   `-CallExpr 0x1815e2fdc40 <col:19, col:63> 'int'
|   |   |     |-ImplicitCastExpr 0x1815e2fdc28 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1815e2fdb20 <col:19> 'int ()' Function 0x1815e2f2d80 'OPENSSL_zalloc' 'int ()'
|   |   |     `-BinaryOperator 0x1815e2fdc08 <col:34, col:53> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x1815e2fdbb0 <col:34, col:49> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x1815e2fdb90 <col:40, col:49> 'felem_bytearray':'u8 [28]' lvalue
|   |   |       |   `-UnaryOperator 0x1815e2fdb78 <col:41, col:42> 'felem_bytearray':'u8 [28]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x1815e2fdb60 <col:42> 'felem_bytearray *' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x1815e2fdb40 <col:42> 'felem_bytearray *' lvalue Var 0x1815e2f52a8 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x1815e2fdbf0 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1815e2fdbd0 <col:53> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   |   |-BinaryOperator 0x1815e2fde38 <line:1467:9, col:65> 'felem (*)[17][3]' '='
|   |   | |-DeclRefExpr 0x1815e2fdca0 <col:9> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   | `-ImplicitCastExpr 0x1815e2fde20 <col:20, col:65> 'felem (*)[17][3]' <IntegralToPointer>
|   |   |   `-CallExpr 0x1815e2fddf8 <col:20, col:65> 'int'
|   |   |     |-ImplicitCastExpr 0x1815e2fdde0 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1815e2fdcd8 <col:20> 'int ()' Function 0x1815e2f2d80 'OPENSSL_zalloc' 'int ()'
|   |   |     `-BinaryOperator 0x1815e2fddc0 <col:35, col:55> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x1815e2fdd68 <col:35, col:51> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x1815e2fdd48 <col:41, col:51> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       |   `-UnaryOperator 0x1815e2fdd30 <col:42, col:43> 'felem [17][3]':'felem [17][3]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x1815e2fdd18 <col:43> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x1815e2fdcf8 <col:43> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x1815e2fdda8 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1815e2fdd88 <col:55> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   |   |-IfStmt 0x1815e2fe1b8 <line:1468:9, line:1470:69>
|   |   | |-ImplicitCastExpr 0x1815e2fde78 <line:1468:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1815e2fde58 <col:13> 'int' lvalue Var 0x1815e2f5080 'mixed' 'int'
|   |   | `-BinaryOperator 0x1815e2fe198 <line:1469:13, line:1470:69> 'felem *' '='
|   |   |   |-DeclRefExpr 0x1815e2fde90 <line:1469:13> 'felem *' lvalue Var 0x1815e2f5688 'tmp_felems' 'felem *'
|   |   |   `-ImplicitCastExpr 0x1815e2fe180 <line:1470:17, col:69> 'felem *' <IntegralToPointer>
|   |   |     `-CallExpr 0x1815e2fe158 <col:17, col:69> 'int'
|   |   |       |-ImplicitCastExpr 0x1815e2fe140 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x1815e2fdfb8 <col:17> 'int ()' Function 0x1815e2fdef0 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x1815e2fe120 <col:32, col:68> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x1815e2fdfe8 <col:32, col:44> 'unsigned long long' sizeof 'felem':'limb [4]'
|   |   |         `-ParenExpr 0x1815e2fe100 <col:48, col:68> 'unsigned long long'
|   |   |           `-BinaryOperator 0x1815e2fe0e0 <col:49, col:67> 'unsigned long long' '+'
|   |   |             |-BinaryOperator 0x1815e2fe080 <col:49, col:62> 'unsigned long long' '*'
|   |   |             | |-ImplicitCastExpr 0x1815e2fe050 <col:49> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x1815e2fe008 <col:49> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   |   |             | `-ImplicitCastExpr 0x1815e2fe068 <col:62> 'unsigned long long' <IntegralCast>
|   |   |             |   `-IntegerLiteral 0x1815e2fe028 <col:62> 'int' 17
|   |   |             `-ImplicitCastExpr 0x1815e2fe0c8 <col:67> 'unsigned long long' <IntegralCast>
|   |   |               `-IntegerLiteral 0x1815e2fe0a0 <col:67> 'int' 1
|   |   |-IfStmt 0x1815e2fe620 <line:1471:9, line:1475:9>
|   |   | |-BinaryOperator 0x1815e2fe5b0 <line:1471:13, line:1472:46> 'int' '||'
|   |   | | |-BinaryOperator 0x1815e2fe400 <line:1471:13, col:51> 'int' '||'
|   |   | | | |-ParenExpr 0x1815e2fe2c8 <col:13, col:29> 'int'
|   |   | | | | `-BinaryOperator 0x1815e2fe2a8 <col:14, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | | |   |-ImplicitCastExpr 0x1815e2fe278 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1471:14> 'felem_bytearray *' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x1815e2fe1d0 <col:14> 'felem_bytearray *' lvalue Var 0x1815e2f52a8 'secrets' 'felem_bytearray *'
|   |   | | | |   `-ImplicitCastExpr 0x1815e2fe290 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <BitCast>
|   |   | | | |     `-ParenExpr 0x1815e2fe258 <col:17, col:27> 'void *'
|   |   | | | |       `-CStyleCastExpr 0x1815e2fe230 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | | |         `-IntegerLiteral 0x1815e2fe1f0 <col:26> 'int' 0
|   |   | | | `-ParenExpr 0x1815e2fe3e0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1471:34, col:51> 'int'
|   |   | | |   `-BinaryOperator 0x1815e2fe3c0 <col:35, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | |     |-ImplicitCastExpr 0x1815e2fe390 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1471:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x1815e2fe2e8 <col:35> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   | | |     `-ImplicitCastExpr 0x1815e2fe3a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[17][3]' <BitCast>
|   |   | | |       `-ParenExpr 0x1815e2fe370 <col:17, col:27> 'void *'
|   |   | | |         `-CStyleCastExpr 0x1815e2fe348 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | |           `-IntegerLiteral 0x1815e2fe308 <col:26> 'int' 0
|   |   | | `-ParenExpr 0x1815e2fe590 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1472:16, col:46> 'int'
|   |   | |   `-BinaryOperator 0x1815e2fe570 <col:17, col:45> 'int' '&&'
|   |   | |     |-ImplicitCastExpr 0x1815e2fe558 <col:17> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x1815e2fe420 <col:17> 'int' lvalue Var 0x1815e2f5080 'mixed' 'int'
|   |   | |     `-ParenExpr 0x1815e2fe538 <col:26, col:45> 'int'
|   |   | |       `-BinaryOperator 0x1815e2fe518 <col:27, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | |         |-ImplicitCastExpr 0x1815e2fe4e8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1472:27> 'felem *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x1815e2fe440 <col:27> 'felem *' lvalue Var 0x1815e2f5688 'tmp_felems' 'felem *'
|   |   | |         `-ImplicitCastExpr 0x1815e2fe500 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem *' <BitCast>
|   |   | |           `-ParenExpr 0x1815e2fe4c8 <col:17, col:27> 'void *'
|   |   | |             `-CStyleCastExpr 0x1815e2fe4a0 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |               `-IntegerLiteral 0x1815e2fe460 <col:26> 'int' 0
|   |   | `-CompoundStmt 0x1815e2fe608 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1472:49, line:1475:9>
|   |   |   `-GotoStmt 0x1815e2fe5f0 <line:1474:13, col:18> 'err' 0x1815e2f6880
|   |   |-ForStmt 0x1815e2f74c0 <line:1481:9, line:1533:9>
|   |   | |-BinaryOperator 0x1815e2fe6b0 <line:1481:14, col:18> 'unsigned int' '='
|   |   | | |-DeclRefExpr 0x1815e2fe638 <col:14> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x1815e2fe698 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1815e2fe670 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x1815e2fe758 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1815e2fe740 <col:21> 'unsigned long long' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x1815e2fe710 <col:21> 'unsigned int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1815e2fe6d0 <col:21> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x1815e2fe728 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1815e2fe6f0 <col:25> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   |   | |-UnaryOperator 0x1815e2fe798 <col:37, col:39> 'unsigned int' prefix '++'
|   |   | | `-DeclRefExpr 0x1815e2fe778 <col:39> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   | `-CompoundStmt 0x1815e2f74a0 <col:42, line:1533:9>
|   |   |   |-IfStmt 0x1815e2fe9c8 <line:1482:13, line:1492:13> has_else
|   |   |   | |-BinaryOperator 0x1815e2fe838 <line:1482:17, col:22> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x1815e2fe820 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x1815e2fe7f0 <col:17> 'unsigned int' <LValueToRValue>
|   |   |   | | |   `-DeclRefExpr 0x1815e2fe7b0 <col:17> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |   | | `-ImplicitCastExpr 0x1815e2fe808 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1815e2fe7d0 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x1815e2f4ad0 'num' 'size_t':'unsigned long long'
|   |   |   | |-CompoundStmt 0x1815e2fe968 <line:1484:13, line:1487:13>
|   |   |   | `-CompoundStmt 0x1815e2fe9b8 <line:1489:13, line:1492:13>
|   |   |   `-IfStmt 0x1815e2f7488 <line:1493:13, line:1532:13>
|   |   |     |-OpaqueValueExpr 0x1815e2f7470 <<invalid sloc>> '_Bool'
|   |   |     `-CompoundStmt 0x1815e2f7428 <line:1493:52, line:1532:13>
|   |   |       |-IfStmt 0x1815e2fef10 <line:1495:17, line:1507:21> has_else
|   |   |       | |-OpaqueValueExpr 0x1815e2feef8 <<invalid sloc>> '_Bool'
|   |   |       | |-CompoundStmt 0x1815e2fee78 <line:1496:52, line:1506:17>
|   |   |       | | `-IfStmt 0x1815e2fedd0 <line:1501:21, line:1504:21>
|   |   |       | |   |-OpaqueValueExpr 0x1815e2fedb8 <<invalid sloc>> '_Bool'
|   |   |       | |   `-CompoundStmt 0x1815e2feda0 <line:1501:77, line:1504:21>
|   |   |       | |     `-GotoStmt 0x1815e2fed88 <line:1503:25, col:30> 'err' 0x1815e2f6880
|   |   |       | `-NullStmt 0x1815e2feef0 <line:1507:21>
|   |   |       |-CallExpr 0x1815e305098 <line:1508:17, col:55> 'void'
|   |   |       | |-ImplicitCastExpr 0x1815e305080 <col:17> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1815e2fef38 <col:17> 'void (u8 *, const u8 *, unsigned int)' Function 0x1815e10cfc8 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   |   |       | |-ImplicitCastExpr 0x1815e3050d0 <col:29, col:38> 'u8 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1815e305020 <col:29, col:38> 'felem_bytearray':'u8 [28]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1815e304ff0 <col:29> 'felem_bytearray *' <LValueToRValue>
|   |   |       | |   | `-DeclRefExpr 0x1815e2fef58 <col:29> 'felem_bytearray *' lvalue Var 0x1815e2f52a8 'secrets' 'felem_bytearray *'
|   |   |       | |   `-ImplicitCastExpr 0x1815e305008 <col:37> 'unsigned int' <LValueToRValue>
|   |   |       | |     `-DeclRefExpr 0x1815e304fd0 <col:37> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |       | |-ImplicitCastExpr 0x1815e305100 <col:41> 'const u8 *' <NoOp>
|   |   |       | | `-ImplicitCastExpr 0x1815e3050e8 <col:41> 'u8 *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x1815e305040 <col:41> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e2f57b8 'tmp' 'felem_bytearray':'u8 [28]'
|   |   |       | `-ImplicitCastExpr 0x1815e305118 <col:46> 'unsigned int' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x1815e305060 <col:46> 'unsigned int' lvalue Var 0x1815e2f5850 'num_bytes' 'unsigned int'
|   |   |       |-IfStmt 0x1815e305208 <line:1510:17, line:1513:26>
|   |   |       | |-OpaqueValueExpr 0x1815e3051f0 <<invalid sloc>> '_Bool'
|   |   |       | `-GotoStmt 0x1815e3051d8 <col:21, col:26> 'err' 0x1815e2f6880
|   |   |       |-CallExpr 0x1815e3053c8 <line:1514:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x1815e3053b0 <col:17> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1815e305220 <col:17> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x1815e3053f8 <col:30, col:46> 'limb *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1815e305370 <col:30, col:46> 'felem':'limb [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1815e305358 <col:30, col:43> 'felem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x1815e305310 <col:30, col:43> 'felem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x1815e3052f8 <col:30, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x1815e3052b0 <col:30, col:40> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x1815e305280 <col:30> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x1815e305240 <col:30> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x1815e305298 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x1815e305260 <col:39> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x1815e3052d0 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x1815e305330 <col:45> 'int' 0
|   |   |       | `-ImplicitCastExpr 0x1815e305428 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x1815e305410 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x1815e305390 <col:49> 'felem':'limb [4]' lvalue Var 0x1815e2f5be8 'x_out' 'felem':'limb [4]'
|   |   |       |-CallExpr 0x1815e3055e8 <line:1515:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x1815e3055d0 <col:17> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1815e305440 <col:17> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x1815e305618 <col:30, col:46> 'limb *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1815e305590 <col:30, col:46> 'felem':'limb [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1815e305578 <col:30, col:43> 'felem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x1815e305530 <col:30, col:43> 'felem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x1815e305518 <col:30, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x1815e3054d0 <col:30, col:40> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x1815e3054a0 <col:30> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x1815e305460 <col:30> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x1815e3054b8 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x1815e305480 <col:39> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x1815e3054f0 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x1815e305550 <col:45> 'int' 1
|   |   |       | `-ImplicitCastExpr 0x1815e305648 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x1815e305630 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x1815e3055b0 <col:49> 'felem':'limb [4]' lvalue Var 0x1815e2f5c60 'y_out' 'felem':'limb [4]'
|   |   |       |-CallExpr 0x1815e305808 <line:1516:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x1815e3057f0 <col:17> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x1815e305660 <col:17> 'void (limb *, const limb *)' Function 0x1815e10f4e8 'felem_assign' 'void (limb *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x1815e305838 <col:30, col:46> 'limb *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x1815e3057b0 <col:30, col:46> 'felem':'limb [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x1815e305798 <col:30, col:43> 'felem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x1815e305750 <col:30, col:43> 'felem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x1815e305738 <col:30, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x1815e3056f0 <col:30, col:40> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x1815e3056c0 <col:30> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x1815e305680 <col:30> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x1815e3056d8 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x1815e3056a0 <col:39> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x1815e305710 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x1815e305770 <col:45> 'int' 2
|   |   |       | `-ImplicitCastExpr 0x1815e305868 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x1815e305850 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x1815e3057d0 <col:49> 'felem':'limb [4]' lvalue Var 0x1815e2f5cd8 'z_out' 'felem':'limb [4]'
|   |   |       `-ForStmt 0x1815e2f73f0 <line:1517:17, line:1531:17>
|   |   |         |-BinaryOperator 0x1815e3058e0 <line:1517:22, col:26> 'int' '='
|   |   |         | |-DeclRefExpr 0x1815e305880 <col:22> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |         | `-IntegerLiteral 0x1815e3058b8 <col:26> 'int' 2
|   |   |         |-<<<NULL>>>
|   |   |         |-BinaryOperator 0x1815e305960 <col:29, col:34> 'int' '<='
|   |   |         | |-ImplicitCastExpr 0x1815e305948 <col:29> 'int' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x1815e305900 <col:29> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |         | `-IntegerLiteral 0x1815e305920 <col:34> 'int' 16
|   |   |         |-UnaryOperator 0x1815e3059a0 <col:38, col:40> 'int' prefix '++'
|   |   |         | `-DeclRefExpr 0x1815e305980 <col:40> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |         `-CompoundStmt 0x1815e2f73d8 <col:43, line:1531:17>
|   |   |           `-IfStmt 0x1815e2f73b0 <line:1518:21, line:1530:21> has_else
|   |   |             |-BinaryOperator 0x1815e305a18 <line:1518:25, col:29> 'int' '&'
|   |   |             | |-ImplicitCastExpr 0x1815e305a00 <col:25> 'int' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x1815e3059b8 <col:25> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |             | `-IntegerLiteral 0x1815e3059d8 <col:29> 'int' 1
|   |   |             |-CompoundStmt 0x1815e306978 <col:32, line:1525:21>
|   |   |             | `-CallExpr 0x1815e3067a0 <line:1519:25, line:1524:56> 'void'
|   |   |             |   |-ImplicitCastExpr 0x1815e306788 <line:1519:25> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |             |   | `-DeclRefExpr 0x1815e305a38 <col:25> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x1815e20dcb8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   |             |   |-ImplicitCastExpr 0x1815e306810 <col:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1815e305b98 <col:35, col:51> 'felem':'limb [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1815e305b80 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1815e305b38 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1815e305b08 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1815e305ac8 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1815e305a98 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1815e305a58 <col:35> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1815e305ab0 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1815e305a78 <col:44> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x1815e305b20 <col:47> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x1815e305ae8 <col:47> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x1815e305b58 <col:50> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x1815e306828 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1815e305cf8 <col:54, col:70> 'felem':'limb [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1815e305ce0 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1815e305c98 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1815e305c68 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1815e305c28 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1815e305bf8 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1815e305bb8 <col:54> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1815e305c10 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1815e305bd8 <col:63> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x1815e305c80 <col:66> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x1815e305c48 <col:66> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x1815e305cb8 <col:69> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x1815e306840 <line:1520:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x1815e305e58 <col:35, col:51> 'felem':'limb [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x1815e305e40 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x1815e305df8 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x1815e305dc8 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x1815e305d88 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x1815e305d58 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x1815e305d18 <col:35> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x1815e305d70 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x1815e305d38 <col:44> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x1815e305de0 <col:47> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x1815e305da8 <col:47> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x1815e305e18 <col:50> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x1815e306870 <col:54, col:70> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x1815e306858 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x1815e305fa8 <col:54, col:70> 'felem':'limb [4]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x1815e305f90 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x1815e305f48 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x1815e305f30 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x1815e305ee8 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x1815e305eb8 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x1815e305e78 <col:54> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x1815e305ed0 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x1815e305e98 <col:63> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x1815e305f08 <col:66> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x1815e305f68 <col:69> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x1815e3068a0 <line:1521:35, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x1815e306888 <col:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x1815e3060f8 <col:35, col:51> 'felem':'limb [4]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x1815e3060e0 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x1815e306098 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x1815e306080 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x1815e306038 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x1815e306008 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x1815e305fc8 <col:35> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x1815e306020 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x1815e305fe8 <col:44> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x1815e306058 <col:47> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x1815e3060b8 <col:50> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x1815e3068d0 <col:54, col:70> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x1815e3068b8 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x1815e306248 <col:54, col:70> 'felem':'limb [4]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x1815e306230 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x1815e3061e8 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x1815e3061d0 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x1815e306188 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x1815e306158 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x1815e306118 <col:54> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x1815e306170 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x1815e306138 <col:63> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x1815e3061a8 <col:66> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x1815e306208 <col:69> 'int' 2
|   |   |             |   |-IntegerLiteral 0x1815e306268 <col:73> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x1815e306900 <line:1522:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x1815e3068e8 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x1815e306418 <col:35, col:55> 'felem':'limb [4]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x1815e306400 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x1815e3063b8 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x1815e3063a0 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x1815e306300 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x1815e3062d0 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x1815e306290 <col:35> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x1815e3062e8 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x1815e3062b0 <col:44> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |             |   |     |   `-BinaryOperator 0x1815e306380 <col:47, col:51> 'int' '-'
|   |   |             |   |     |     |-ImplicitCastExpr 0x1815e306368 <col:47> 'int' <LValueToRValue>
|   |   |             |   |     |     | `-DeclRefExpr 0x1815e306320 <col:47> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |             |   |     |     `-IntegerLiteral 0x1815e306340 <col:51> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x1815e3063d8 <col:54> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x1815e306930 <line:1523:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x1815e306918 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x1815e3065c0 <col:35, col:55> 'felem':'limb [4]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x1815e3065a8 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x1815e306560 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x1815e306548 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x1815e3064a8 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x1815e306478 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x1815e306438 <col:35> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x1815e306490 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x1815e306458 <col:44> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |             |   |     |   `-BinaryOperator 0x1815e306528 <col:47, col:51> 'int' '-'
|   |   |             |   |     |     |-ImplicitCastExpr 0x1815e306510 <col:47> 'int' <LValueToRValue>
|   |   |             |   |     |     | `-DeclRefExpr 0x1815e3064c8 <col:47> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |             |   |     |     `-IntegerLiteral 0x1815e3064e8 <col:51> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x1815e306580 <col:54> 'int' 1
|   |   |             |   `-ImplicitCastExpr 0x1815e306960 <line:1524:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |     `-ImplicitCastExpr 0x1815e306948 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |       `-ArraySubscriptExpr 0x1815e306768 <col:35, col:55> 'felem':'limb [4]' lvalue
|   |   |             |         |-ImplicitCastExpr 0x1815e306750 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |         | `-ArraySubscriptExpr 0x1815e306708 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |         |   |-ImplicitCastExpr 0x1815e3066f0 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |         |   | `-ArraySubscriptExpr 0x1815e306650 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |         |   |   |-ImplicitCastExpr 0x1815e306620 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |         |   |   | `-DeclRefExpr 0x1815e3065e0 <col:35> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |             |         |   |   `-ImplicitCastExpr 0x1815e306638 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |         |   |     `-DeclRefExpr 0x1815e306600 <col:44> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |             |         |   `-BinaryOperator 0x1815e3066d0 <col:47, col:51> 'int' '-'
|   |   |             |         |     |-ImplicitCastExpr 0x1815e3066b8 <col:47> 'int' <LValueToRValue>
|   |   |             |         |     | `-DeclRefExpr 0x1815e306670 <col:47> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |             |         |     `-IntegerLiteral 0x1815e306690 <col:51> 'int' 1
|   |   |             |         `-IntegerLiteral 0x1815e306728 <col:54> 'int' 2
|   |   |             `-CompoundStmt 0x1815e2f7398 <line:1525:28, line:1530:21>
|   |   |               `-CallExpr 0x1815e2f7270 <line:1526:25, line:1529:59> 'void'
|   |   |                 |-ImplicitCastExpr 0x1815e2f7258 <line:1526:25> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x1815e306990 <col:25> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1815e20cfe8 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |                 |-ImplicitCastExpr 0x1815e2f72c0 <col:38, col:54> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x1815e306af0 <col:38, col:54> 'felem':'limb [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x1815e306ad8 <col:38, col:51> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x1815e306a90 <col:38, col:51> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x1815e306a60 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x1815e306a20 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x1815e3069f0 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x1815e3069b0 <col:38> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x1815e306a08 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x1815e3069d0 <col:47> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x1815e306a78 <col:50> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x1815e306a40 <col:50> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x1815e306ab0 <col:53> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x1815e2f72d8 <col:57, col:73> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x1815e306c50 <col:57, col:73> 'felem':'limb [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x1815e306c38 <col:57, col:70> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x1815e306bf0 <col:57, col:70> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x1815e306bc0 <col:57, col:67> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x1815e306b80 <col:57, col:67> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x1815e306b50 <col:57> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x1815e306b10 <col:57> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x1815e306b68 <col:66> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x1815e306b30 <col:66> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x1815e306bd8 <col:69> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x1815e306ba0 <col:69> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x1815e306c10 <col:72> 'int' 1
|   |   |                 |-ImplicitCastExpr 0x1815e2f72f0 <line:1527:38, col:54> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x1815e306db0 <col:38, col:54> 'felem':'limb [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x1815e306d98 <col:38, col:51> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x1815e306d50 <col:38, col:51> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x1815e306d20 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x1815e306ce0 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x1815e306cb0 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x1815e306c70 <col:38> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x1815e306cc8 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x1815e306c90 <col:47> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x1815e306d38 <col:50> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x1815e306d00 <col:50> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x1815e306d70 <col:53> 'int' 2
|   |   |                 |-ImplicitCastExpr 0x1815e2f7320 <col:57, col:77> 'const limb *':'const limb *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x1815e2f7308 <col:57, col:77> 'limb *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x1815e306f58 <col:57, col:77> 'felem':'limb [4]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x1815e306f40 <col:57, col:74> 'felem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x1815e306ef8 <col:57, col:74> 'felem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x1815e306ee0 <col:57, col:67> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x1815e306e40 <col:57, col:67> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x1815e306e10 <col:57> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x1815e306dd0 <col:57> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x1815e306e28 <col:66> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x1815e306df0 <col:66> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x1815e306ec0 <col:69, col:73> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x1815e306ea8 <col:69> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x1815e306e60 <col:69> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x1815e306e80 <col:73> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x1815e306f18 <col:76> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x1815e2f7350 <line:1528:38, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x1815e2f7338 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x1815e2f7090 <col:38, col:58> 'felem':'limb [4]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x1815e2f7078 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x1815e2f7030 <col:38, col:55> 'felem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x1815e2f7018 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x1815e2f6f78 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x1815e306fb8 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x1815e306f78 <col:38> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x1815e2f6f60 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x1815e306f98 <col:47> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x1815e2f6ff8 <col:50, col:54> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x1815e2f6fe0 <col:50> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x1815e2f6f98 <col:50> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x1815e2f6fb8 <col:54> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x1815e2f7050 <col:57> 'int' 1
|   |   |                 `-ImplicitCastExpr 0x1815e2f7380 <line:1529:38, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |                   `-ImplicitCastExpr 0x1815e2f7368 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |                     `-ArraySubscriptExpr 0x1815e2f7238 <col:38, col:58> 'felem':'limb [4]' lvalue
|   |   |                       |-ImplicitCastExpr 0x1815e2f7220 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   |   |                       | `-ArraySubscriptExpr 0x1815e2f71d8 <col:38, col:55> 'felem [3]' lvalue
|   |   |                       |   |-ImplicitCastExpr 0x1815e2f71c0 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                       |   | `-ArraySubscriptExpr 0x1815e2f7120 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                       |   |   |-ImplicitCastExpr 0x1815e2f70f0 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                       |   |   | `-DeclRefExpr 0x1815e2f70b0 <col:38> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   |                       |   |   `-ImplicitCastExpr 0x1815e2f7108 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                       |   |     `-DeclRefExpr 0x1815e2f70d0 <col:47> 'unsigned int' lvalue Var 0x1815e2f4fe8 'i' 'unsigned int'
|   |   |                       |   `-BinaryOperator 0x1815e2f71a0 <col:50, col:54> 'int' '/'
|   |   |                       |     |-ImplicitCastExpr 0x1815e2f7188 <col:50> 'int' <LValueToRValue>
|   |   |                       |     | `-DeclRefExpr 0x1815e2f7140 <col:50> 'int' lvalue Var 0x1815e2f4f50 'j' 'int'
|   |   |                       |     `-IntegerLiteral 0x1815e2f7160 <col:54> 'int' 2
|   |   |                       `-IntegerLiteral 0x1815e2f71f8 <col:57> 'int' 2
|   |   `-IfStmt 0x1815e2f7768 <line:1534:9, line:1535:72>
|   |     |-ImplicitCastExpr 0x1815e2f7518 <line:1534:13> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1815e2f74f8 <col:13> 'int' lvalue Var 0x1815e2f5080 'mixed' 'int'
|   |     `-CallExpr 0x1815e2f7700 <line:1535:13, col:72> 'void'
|   |       |-ImplicitCastExpr 0x1815e2f76e8 <col:13> 'void (*)(size_t, felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1815e2f7530 <col:13> 'void (size_t, felem (*)[3], felem *)' Function 0x1815e2f3b98 'make_points_affine' 'void (size_t, felem (*)[3], felem *)'
|   |       |-BinaryOperator 0x1815e2f75c8 <col:32, col:45> 'unsigned long long' '*'
|   |       | |-ImplicitCastExpr 0x1815e2f7598 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x1815e2f7550 <col:32> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x1815e2f75b0 <col:45> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x1815e2f7570 <col:45> 'int' 17
|   |       |-ImplicitCastExpr 0x1815e2f7738 <col:49, col:59> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x1815e2f7648 <col:49, col:59> 'felem [17][3]':'felem [17][3]' lvalue
|   |       |   |-ImplicitCastExpr 0x1815e2f7630 <col:49> 'felem (*)[17][3]' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1815e2f75e8 <col:49> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |       |   `-IntegerLiteral 0x1815e2f7608 <col:58> 'int' 0
|   |       `-ImplicitCastExpr 0x1815e2f7750 <col:62> 'felem *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1815e2f7668 <col:62> 'felem *' lvalue Var 0x1815e2f5688 'tmp_felems' 'felem *'
|   |-IfStmt 0x1815e2f87e0 <line:1539:5, line:1564:69> has_else
|   | |-OpaqueValueExpr 0x1815e2f87c8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1815e2f82f0 <line:1539:46, line:1560:5>
|   | | |-CallExpr 0x1815e2f79b8 <line:1540:9, col:45> 'void *'
|   | | | |-ImplicitCastExpr 0x1815e2f79a0 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e2f78a8 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1815e0cec90 'memset' 'void *(void *, int, unsigned long long)'
|   | | | |-ImplicitCastExpr 0x1815e2f7a08 <col:16> 'void *' <BitCast>
|   | | | | `-ImplicitCastExpr 0x1815e2f79f0 <col:16> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1815e2f78c8 <col:16> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e2f51c0 'g_secret' 'felem_bytearray':'u8 [28]'
|   | | | |-IntegerLiteral 0x1815e2f7900 <col:26> 'int' 0
|   | | | `-UnaryExprOrTypeTraitExpr 0x1815e2f7968 <col:29, col:44> 'unsigned long long' sizeof
|   | | |   `-ParenExpr 0x1815e2f7948 <col:35, col:44> 'felem_bytearray':'u8 [28]' lvalue
|   | | |     `-DeclRefExpr 0x1815e2f7928 <col:36> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e2f51c0 'g_secret' 'felem_bytearray':'u8 [28]' non_odr_use_unevaluated
|   | | |-IfStmt 0x1815e2f7c20 <line:1542:9, line:1553:13> has_else
|   | | | |-OpaqueValueExpr 0x1815e2f7c08 <<invalid sloc>> '_Bool'
|   | | | |-CompoundStmt 0x1815e2f7b88 <line:1542:70, line:1552:9>
|   | | | | `-IfStmt 0x1815e2f7b10 <line:1547:13, line:1550:13>
|   | | | |   |-OpaqueValueExpr 0x1815e2f7af8 <<invalid sloc>> '_Bool'
|   | | | |   `-CompoundStmt 0x1815e2f7ae0 <line:1547:67, line:1550:13>
|   | | | |     `-GotoStmt 0x1815e2f7ac8 <line:1549:17, col:22> 'err' 0x1815e2f6880
|   | | | `-NullStmt 0x1815e2f7c00 <line:1553:13>
|   | | |-CallExpr 0x1815e2f7ce0 <line:1554:9, col:45> 'void'
|   | | | |-ImplicitCastExpr 0x1815e2f7cc8 <col:9> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e2f7c48 <col:9> 'void (u8 *, const u8 *, unsigned int)' Function 0x1815e10cfc8 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | | | |-ImplicitCastExpr 0x1815e2f7d18 <col:21> 'u8 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x1815e2f7c68 <col:21> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e2f51c0 'g_secret' 'felem_bytearray':'u8 [28]'
|   | | | |-ImplicitCastExpr 0x1815e2f7d48 <col:31> 'const u8 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x1815e2f7d30 <col:31> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x1815e2f7c88 <col:31> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e2f57b8 'tmp' 'felem_bytearray':'u8 [28]'
|   | | | `-ImplicitCastExpr 0x1815e2f7d60 <col:36> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1815e2f7ca8 <col:36> 'unsigned int' lvalue Var 0x1815e2f5850 'num_bytes' 'unsigned int'
|   | | `-CallExpr 0x1815e2f81b0 <line:1556:9, line:1559:69> 'void'
|   | |   |-ImplicitCastExpr 0x1815e2f8198 <line:1556:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[16][3])' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1815e2f7d78 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[16][3])' Function 0x1815e208f48 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[16][3])'
|   | |   |-ImplicitCastExpr 0x1815e2f8218 <col:19> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1815e2f7d98 <col:19> 'felem':'limb [4]' lvalue Var 0x1815e2f5be8 'x_out' 'felem':'limb [4]'
|   | |   |-ImplicitCastExpr 0x1815e2f8230 <col:26> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1815e2f7db8 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e2f5c60 'y_out' 'felem':'limb [4]'
|   | |   |-ImplicitCastExpr 0x1815e2f8248 <col:33> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1815e2f7dd8 <col:33> 'felem':'limb [4]' lvalue Var 0x1815e2f5cd8 'z_out' 'felem':'limb [4]'
|   | |   |-CStyleCastExpr 0x1815e2f7ee8 <line:1557:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1815e2f7e90 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x1815e2f7df8 <col:45> 'felem_bytearray *' lvalue Var 0x1815e2f52a8 'secrets' 'felem_bytearray *'
|   | |   |-ImplicitCastExpr 0x1815e2f8278 <col:54> 'unsigned int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x1815e2f8260 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x1815e2f7f10 <col:54> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x1815e2f82a8 <line:1558:19> 'const u8 *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1815e2f8290 <col:19> 'u8 *' <ArrayToPointerDecay>
|   | |   |   `-DeclRefExpr 0x1815e2f7f30 <col:19> 'felem_bytearray':'u8 [28]' lvalue Var 0x1815e2f51c0 'g_secret' 'felem_bytearray':'u8 [28]'
|   | |   |-ImplicitCastExpr 0x1815e2f82c0 <line:1559:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1815e2f7f50 <col:19> 'int' lvalue Var 0x1815e2f5080 'mixed' 'int'
|   | |   |-CStyleCastExpr 0x1815e2f80f8 <col:26, col:49> 'const felem (*)[17][3]' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1815e2f80a8 <col:49> 'felem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x1815e2f7fc0 <col:49> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   | |   `-ImplicitCastExpr 0x1815e2f82d8 <col:59> 'const felem (*)[16][3]' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1815e2f8120 <col:59> 'const felem (*)[16][3]' lvalue Var 0x1815e2f5fd8 'g_pre_comp' 'const felem (*)[16][3]'
|   | `-CallExpr 0x1815e2f86a0 <line:1562:9, line:1564:69> 'void'
|   |   |-ImplicitCastExpr 0x1815e2f8688 <line:1562:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[16][3])' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1815e2f8320 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[16][3])' Function 0x1815e208f48 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[16][3])'
|   |   |-ImplicitCastExpr 0x1815e2f8708 <col:19> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1815e2f8340 <col:19> 'felem':'limb [4]' lvalue Var 0x1815e2f5be8 'x_out' 'felem':'limb [4]'
|   |   |-ImplicitCastExpr 0x1815e2f8720 <col:26> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1815e2f8360 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e2f5c60 'y_out' 'felem':'limb [4]'
|   |   |-ImplicitCastExpr 0x1815e2f8738 <col:33> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1815e2f8380 <col:33> 'felem':'limb [4]' lvalue Var 0x1815e2f5cd8 'z_out' 'felem':'limb [4]'
|   |   |-CStyleCastExpr 0x1815e2f83f0 <line:1563:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   |   | `-ImplicitCastExpr 0x1815e2f83d8 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x1815e2f83a0 <col:45> 'felem_bytearray *' lvalue Var 0x1815e2f52a8 'secrets' 'felem_bytearray *'
|   |   |-ImplicitCastExpr 0x1815e2f8768 <col:54> 'unsigned int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x1815e2f8750 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1815e2f8418 <col:54> 'size_t':'unsigned long long' lvalue Var 0x1815e2f59a0 'num_points' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x1815e2f8780 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <NullToPointer>
|   |   | `-ParenExpr 0x1815e2f84a0 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x1815e2f8478 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x1815e2f8438 <col:26> 'int' 0
|   |   |-ImplicitCastExpr 0x1815e2f8798 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1564:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1815e2f84c0 <col:25> 'int' lvalue Var 0x1815e2f5080 'mixed' 'int'
|   |   |-CStyleCastExpr 0x1815e2f85d8 <col:32, col:55> 'const felem (*)[17][3]' <NoOp>
|   |   | `-ImplicitCastExpr 0x1815e2f85c0 <col:55> 'felem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x1815e2f8530 <col:55> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |   `-ImplicitCastExpr 0x1815e2f87b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const felem (*)[16][3]':'const felem (*)[16][3]' <NullToPointer>
|   |     `-ParenExpr 0x1815e2f8668 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1815e2f8640 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1815e2f8600 <col:26> 'int' 0
|   |-CallExpr 0x1815e2f8898 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1566:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e2f8880 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f8808 <col:5> 'void (limb *, const limb *)' Function 0x1815e1f8a18 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2f88c8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f8828 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e2f5a80 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e2f88f8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2f88e0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2f8860 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e2f5be8 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2f89a0 <line:1567:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e2f8988 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f8910 <col:5> 'void (limb *, const limb *)' Function 0x1815e1f8a18 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2f89d0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f8930 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e2f5af8 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e2f8a00 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2f89e8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2f8968 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e2f5c60 'y_out' 'felem':'limb [4]'
|   |-CallExpr 0x1815e2f8aa8 <line:1568:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x1815e2f8a90 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f8a18 <col:5> 'void (limb *, const limb *)' Function 0x1815e1f8a18 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x1815e2f8ad8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f8a38 <col:20> 'felem':'limb [4]' lvalue Var 0x1815e2f5b70 'z_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x1815e2f8b08 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x1815e2f8af0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1815e2f8a70 <col:26> 'felem':'limb [4]' lvalue Var 0x1815e2f5cd8 'z_out' 'felem':'limb [4]'
|   |-IfStmt 0x1815e2f8be8 <line:1569:5, line:1573:5>
|   | |-OpaqueValueExpr 0x1815e2f8bd0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1815e2f8bb8 <line:1570:34, line:1573:5>
|   |   `-GotoStmt 0x1815e2f8ba0 <line:1572:9, col:14> 'err' 0x1815e2f6880
|   |-LabelStmt 0x1815e2f8c80 <line:1576:2, col:5> 'err'
|   | `-NullStmt 0x1815e2f8c78 <col:5>
|   |-CallExpr 0x1815e2f8e20 <line:1580:5, col:25> 'int'
|   | |-ImplicitCastExpr 0x1815e2f8e08 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f8dc8 <col:5> 'int ()' Function 0x1815e2fb428 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1815e2f8e48 <col:18> 'felem_bytearray *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e2f8de8 <col:18> 'felem_bytearray *' lvalue Var 0x1815e2f52a8 'secrets' 'felem_bytearray *'
|   |-CallExpr 0x1815e2f8eb8 <line:1581:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x1815e2f8ea0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f8e60 <col:5> 'int ()' Function 0x1815e2fb428 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1815e2f8ee0 <col:18> 'felem (*)[17][3]' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e2f8e80 <col:18> 'felem (*)[17][3]' lvalue Var 0x1815e2f5558 'pre_comp' 'felem (*)[17][3]'
|   |-CallExpr 0x1815e306fe0 <line:1582:5, col:28> 'int'
|   | |-ImplicitCastExpr 0x1815e2f8f38 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e2f8ef8 <col:5> 'int ()' Function 0x1815e2fb428 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1815e307008 <col:18> 'felem *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e2f8f18 <col:18> 'felem *' lvalue Var 0x1815e2f5688 'tmp_felems' 'felem *'
|   `-ReturnStmt 0x1815e307058 <line:1583:5, col:12>
|     `-ImplicitCastExpr 0x1815e307040 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1815e307020 <col:12> 'int' lvalue Var 0x1815e2f4e40 'ret' 'int'
|-FunctionDecl 0x1815e3072a8 <line:1586:1, line:1709:1> line:1586:5 invalid ec_GFp_nistp224_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x1815e307188 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x1815e307208 <col:54, col:62> col:62 invalid ctx 'int *'
| `-CompoundStmt 0x1815e30a248 <line:1587:1, line:1709:1>
|   |-DeclStmt 0x1815e307418 <line:1588:5, col:16>
|   | `-VarDecl 0x1815e307388 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x1815e3073f0 <col:15> 'int' 0
|   |-DeclStmt 0x1815e307548 <line:1589:5, col:34>
|   | `-VarDecl 0x1815e307440 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1589:24 used pre 'NISTP224_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x1815e307530 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP224_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x1815e307510 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x1815e3074e8 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x1815e3074a8 <col:26> 'int' 0
|   |-DeclStmt 0x1815e307678 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1590:5, col:13>
|   | |-VarDecl 0x1815e307578 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x1815e3075f8 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x1815e3078e0 <line:1594:5, col:25>
|   | `-VarDecl 0x1815e307878 <col:5, col:24> col:11 used tmp_felems 'felem [32]'
|   |-IfStmt 0x1815e307ae0 <line:1598:5, line:1600:20>
|   | |-OpaqueValueExpr 0x1815e307ac8 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x1815e307ab0 <line:1599:9, line:1600:20>
|   |   |-OpaqueValueExpr 0x1815e307a98 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x1815e307a88 <col:13, col:20>
|   |     `-IntegerLiteral 0x1815e307a60 <col:20> 'int' 0
|   |-IfStmt 0x1815e307ce8 <line:1602:5, line:1603:14>
|   | |-OpaqueValueExpr 0x1815e307cd0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1815e307cb8 <col:9, col:14> 'err' 0x1815e307c68
|   |-IfStmt 0x1815e307db8 <line:1605:5, line:1606:14>
|   | |-OpaqueValueExpr 0x1815e307da0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1815e307d88 <col:9, col:14> 'err' 0x1815e307c68
|   |-IfStmt 0x1815e307ea8 <line:1608:5, line:1609:14>
|   | |-OpaqueValueExpr 0x1815e307e90 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1815e307e78 <col:9, col:14> 'err' 0x1815e307c68
|   |-IfStmt 0x1815e3081a0 <line:1612:5, line:1613:14>
|   | |-OpaqueValueExpr 0x1815e308188 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1815e308170 <col:9, col:14> 'err' 0x1815e307c68
|   |-IfStmt 0x1815e3083b8 <line:1614:5, line:1615:14>
|   | |-BinaryOperator 0x1815e308380 <line:1614:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ParenExpr 0x1815e3082c0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1614:9, col:39> 'NISTP224_PRE_COMP *'
|   | | | `-BinaryOperator 0x1815e3082a0 <col:10, col:38> 'NISTP224_PRE_COMP *' '='
|   | | |   |-DeclRefExpr 0x1815e3081b8 <col:10> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   | | |   `-CallExpr 0x1815e308280 <col:16, col:38> 'NISTP224_PRE_COMP *'
|   | | |     `-ImplicitCastExpr 0x1815e308268 <col:16> 'NISTP224_PRE_COMP *(*)()' <FunctionToPointerDecay>
|   | | |       `-DeclRefExpr 0x1815e3081f0 <col:16> 'NISTP224_PRE_COMP *()' Function 0x1815e2f2c28 'nistp224_pre_comp_new' 'NISTP224_PRE_COMP *()'
|   | | `-ImplicitCastExpr 0x1815e308368 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP224_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x1815e308348 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x1815e308320 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x1815e3082e0 <col:26> 'int' 0
|   | `-GotoStmt 0x1815e3083a0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1615:9, col:14> 'err' 0x1815e307c68
|   |-IfStmt 0x1815e3086e8 <line:1619:5, line:1622:5>
|   | |-OpaqueValueExpr 0x1815e3086d0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1815e3086b0 <line:1619:69, line:1622:5>
|   |   |-CallExpr 0x1815e3085b0 <line:1620:9, col:62> 'void *'
|   |   | |-ImplicitCastExpr 0x1815e308598 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e308418 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x1815e0cd218 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1815e308600 <col:16, col:21> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1815e3085e8 <col:16, col:21> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   `-MemberExpr 0x1815e308470 <col:16, col:21> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     `-ImplicitCastExpr 0x1815e308458 <col:16> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1815e308438 <col:16> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |-ImplicitCastExpr 0x1815e308630 <col:33> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1815e308618 <col:33> 'const felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   `-DeclRefExpr 0x1815e3084a0 <col:33> 'const felem [2][16][3]' lvalue Var 0x1815e0fcd18 'gmul' 'const felem [2][16][3]'
|   |   | `-UnaryExprOrTypeTraitExpr 0x1815e308548 <col:39, col:61> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x1815e308528 <col:45, col:61> 'felem [2][16][3]' lvalue
|   |   |     `-MemberExpr 0x1815e3084f8 <col:46, col:51> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58 non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x1815e3084e0 <col:46> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1815e3084c0 <col:46> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *' non_odr_use_unevaluated
|   |   `-GotoStmt 0x1815e308698 <line:1621:9, col:14> 'done' 0x1815e308648
|   |-IfStmt 0x1815e308bc8 <line:1623:5, line:1626:14>
|   | |-OpaqueValueExpr 0x1815e308bb0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1815e308b98 <col:9, col:14> 'err' 0x1815e307c68
|   |-ForStmt 0x1815e2f9f30 <line:1631:5, line:1654:5>
|   | |-BinaryOperator 0x1815e308c40 <line:1631:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1815e308be0 <col:10> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   | | `-IntegerLiteral 0x1815e308c18 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1815e308cc0 <col:17, col:22> 'int' '<='
|   | | |-ImplicitCastExpr 0x1815e308ca8 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e308c60 <col:17> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   | | `-IntegerLiteral 0x1815e308c80 <col:22> 'int' 8
|   | |-CompoundAssignOperator 0x1815e308d40 <col:25, col:31> 'int' '<<=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x1815e308ce0 <col:25> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   | | `-IntegerLiteral 0x1815e308d00 <col:31> 'int' 1
|   | `-CompoundStmt 0x1815e2f9ef8 <col:34, line:1654:5>
|   |   |-CallExpr 0x1815e303728 <line:1632:9, line:1634:72> 'void'
|   |   | |-ImplicitCastExpr 0x1815e303710 <line:1632:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e308d70 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1815e20cfe8 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e303778 <col:22, col:45> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e308f08 <col:22, col:45> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e308ef0 <col:22, col:42> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e308ea8 <col:22, col:42> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e308e78 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e308e38 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e308e20 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e308dc8 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e308db0 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e308d90 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1815e308df8 <col:38> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x1815e308e90 <col:41> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x1815e308e58 <col:41> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1815e308ec8 <col:44> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e303790 <col:48, col:71> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e303090 <col:48, col:71> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e303078 <col:48, col:68> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e303030 <col:48, col:68> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e303000 <col:48, col:65> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e302fc0 <col:48, col:65> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e308fb8 <col:48, col:53> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e308f60 <col:48, col:53> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e308f48 <col:48> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e308f28 <col:48> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1815e308f90 <col:64> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x1815e303018 <col:67> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x1815e302fe0 <col:67> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1815e303050 <col:70> 'int' 1
|   |   | |-ImplicitCastExpr 0x1815e3037a8 <line:1633:22, col:45> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e303228 <col:22, col:45> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e303210 <col:22, col:42> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e3031c8 <col:22, col:42> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e303198 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e303158 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e303140 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e3030e8 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e3030d0 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e3030b0 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1815e303118 <col:38> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x1815e3031b0 <col:41> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x1815e303178 <col:41> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1815e3031e8 <col:44> 'int' 2
|   |   | |-ImplicitCastExpr 0x1815e3037d8 <col:48, col:71> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e3037c0 <col:48, col:71> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e3033c0 <col:48, col:71> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e3033a8 <col:48, col:68> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e303360 <col:48, col:68> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e303330 <col:48, col:65> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e3032f0 <col:48, col:65> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e3032d8 <col:48, col:53> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e303280 <col:48, col:53> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e303268 <col:48> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e303248 <col:48> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1815e3032b0 <col:64> 'int' 0
|   |   | |     |   `-ImplicitCastExpr 0x1815e303348 <col:67> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1815e303310 <col:67> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1815e303380 <col:70> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e303808 <line:1634:22, col:45> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e3037f0 <col:22, col:45> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e303558 <col:22, col:45> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e303540 <col:22, col:42> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e3034f8 <col:22, col:42> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e3034c8 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e303488 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e303470 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e303418 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e303400 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e3033e0 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1815e303448 <col:38> 'int' 0
|   |   | |     |   `-ImplicitCastExpr 0x1815e3034e0 <col:41> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1815e3034a8 <col:41> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1815e303518 <col:44> 'int' 1
|   |   | `-ImplicitCastExpr 0x1815e303838 <col:48, col:71> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e303820 <col:48, col:71> 'limb *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x1815e3036f0 <col:48, col:71> 'felem':'limb [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x1815e3036d8 <col:48, col:68> 'felem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1815e303690 <col:48, col:68> 'felem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1815e303660 <col:48, col:65> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x1815e303620 <col:48, col:65> 'felem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x1815e303608 <col:48, col:53> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x1815e3035b0 <col:48, col:53> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |       |   |   |   `-ImplicitCastExpr 0x1815e303598 <col:48> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x1815e303578 <col:48> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |       |   |   `-IntegerLiteral 0x1815e3035e0 <col:64> 'int' 0
|   |   |       |   `-ImplicitCastExpr 0x1815e303678 <col:67> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1815e303640 <col:67> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |       `-IntegerLiteral 0x1815e3036b0 <col:70> 'int' 2
|   |   |-ForStmt 0x1815e304490 <line:1635:9, line:1639:9>
|   |   | |-BinaryOperator 0x1815e3038b0 <line:1635:14, col:18> 'int' '='
|   |   | | |-DeclRefExpr 0x1815e303850 <col:14> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |   | | `-IntegerLiteral 0x1815e303888 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x1815e303930 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1815e303918 <col:21> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1815e3038d0 <col:21> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |   | | `-IntegerLiteral 0x1815e3038f0 <col:25> 'int' 27
|   |   | |-UnaryOperator 0x1815e303970 <col:29, col:31> 'int' prefix '++'
|   |   | | `-DeclRefExpr 0x1815e303950 <col:31> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |   | `-CompoundStmt 0x1815e304478 <col:34, line:1639:9>
|   |   |   `-CallExpr 0x1815e304350 <line:1636:13, line:1638:76> 'void'
|   |   |     |-ImplicitCastExpr 0x1815e304338 <line:1636:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1815e303988 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1815e20cfe8 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |     |-ImplicitCastExpr 0x1815e3043a0 <col:26, col:49> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1815e303b20 <col:26, col:49> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1815e303b08 <col:26, col:46> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1815e303ac0 <col:26, col:46> 'felem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1815e303a90 <col:26, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x1815e303a50 <col:26, col:43> 'felem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x1815e303a38 <col:26, col:31> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x1815e3039e0 <col:26, col:31> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x1815e3039c8 <col:26> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x1815e3039a8 <col:26> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x1815e303a10 <col:42> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x1815e303aa8 <col:45> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1815e303a70 <col:45> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1815e303ae0 <col:48> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1815e3043b8 <col:52, col:75> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1815e303cb8 <col:52, col:75> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1815e303ca0 <col:52, col:72> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1815e303c58 <col:52, col:72> 'felem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1815e303c28 <col:52, col:69> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x1815e303be8 <col:52, col:69> 'felem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x1815e303bd0 <col:52, col:57> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x1815e303b78 <col:52, col:57> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x1815e303b60 <col:52> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x1815e303b40 <col:52> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x1815e303ba8 <col:68> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x1815e303c40 <col:71> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1815e303c08 <col:71> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1815e303c78 <col:74> 'int' 1
|   |   |     |-ImplicitCastExpr 0x1815e3043d0 <line:1637:26, col:49> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x1815e303e50 <col:26, col:49> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x1815e303e38 <col:26, col:46> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x1815e303df0 <col:26, col:46> 'felem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x1815e303dc0 <col:26, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x1815e303d80 <col:26, col:43> 'felem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x1815e303d68 <col:26, col:31> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x1815e303d10 <col:26, col:31> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x1815e303cf8 <col:26> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x1815e303cd8 <col:26> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x1815e303d40 <col:42> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x1815e303dd8 <col:45> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x1815e303da0 <col:45> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x1815e303e10 <col:48> 'int' 2
|   |   |     |-ImplicitCastExpr 0x1815e304400 <col:52, col:75> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1815e3043e8 <col:52, col:75> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1815e303fe8 <col:52, col:75> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1815e303fd0 <col:52, col:72> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-ArraySubscriptExpr 0x1815e303f88 <col:52, col:72> 'felem [3]' lvalue
|   |   |     |     |   |-ImplicitCastExpr 0x1815e303f58 <col:52, col:69> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |     |     |   | `-ArraySubscriptExpr 0x1815e303f18 <col:52, col:69> 'felem [16][3]' lvalue
|   |   |     |     |   |   |-ImplicitCastExpr 0x1815e303f00 <col:52, col:57> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |     |   |   | `-MemberExpr 0x1815e303ea8 <col:52, col:57> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |     |     |   |   |   `-ImplicitCastExpr 0x1815e303e90 <col:52> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |     |     |   |   |     `-DeclRefExpr 0x1815e303e70 <col:52> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |     |     |   |   `-IntegerLiteral 0x1815e303ed8 <col:68> 'int' 1
|   |   |     |     |   `-ImplicitCastExpr 0x1815e303f70 <col:71> 'int' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x1815e303f38 <col:71> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |     |     `-IntegerLiteral 0x1815e303fa8 <col:74> 'int' 0
|   |   |     |-ImplicitCastExpr 0x1815e304430 <line:1638:26, col:49> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1815e304418 <col:26, col:49> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x1815e304180 <col:26, col:49> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x1815e304168 <col:26, col:46> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-ArraySubscriptExpr 0x1815e304120 <col:26, col:46> 'felem [3]' lvalue
|   |   |     |     |   |-ImplicitCastExpr 0x1815e3040f0 <col:26, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |     |     |   | `-ArraySubscriptExpr 0x1815e3040b0 <col:26, col:43> 'felem [16][3]' lvalue
|   |   |     |     |   |   |-ImplicitCastExpr 0x1815e304098 <col:26, col:31> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |     |   |   | `-MemberExpr 0x1815e304040 <col:26, col:31> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |     |     |   |   |   `-ImplicitCastExpr 0x1815e304028 <col:26> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |     |     |   |   |     `-DeclRefExpr 0x1815e304008 <col:26> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |     |     |   |   `-IntegerLiteral 0x1815e304070 <col:42> 'int' 1
|   |   |     |     |   `-ImplicitCastExpr 0x1815e304108 <col:45> 'int' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x1815e3040d0 <col:45> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |     |     `-IntegerLiteral 0x1815e304140 <col:48> 'int' 1
|   |   |     `-ImplicitCastExpr 0x1815e304460 <col:52, col:75> 'const limb *':'const limb *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x1815e304448 <col:52, col:75> 'limb *' <ArrayToPointerDecay>
|   |   |         `-ArraySubscriptExpr 0x1815e304318 <col:52, col:75> 'felem':'limb [4]' lvalue
|   |   |           |-ImplicitCastExpr 0x1815e304300 <col:52, col:72> 'felem *' <ArrayToPointerDecay>
|   |   |           | `-ArraySubscriptExpr 0x1815e3042b8 <col:52, col:72> 'felem [3]' lvalue
|   |   |           |   |-ImplicitCastExpr 0x1815e304288 <col:52, col:69> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |           |   | `-ArraySubscriptExpr 0x1815e304248 <col:52, col:69> 'felem [16][3]' lvalue
|   |   |           |   |   |-ImplicitCastExpr 0x1815e304230 <col:52, col:57> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |           |   |   | `-MemberExpr 0x1815e3041d8 <col:52, col:57> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |           |   |   |   `-ImplicitCastExpr 0x1815e3041c0 <col:52> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |           |   |   |     `-DeclRefExpr 0x1815e3041a0 <col:52> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |           |   |   `-IntegerLiteral 0x1815e304208 <col:68> 'int' 1
|   |   |           |   `-ImplicitCastExpr 0x1815e3042a0 <col:71> 'int' <LValueToRValue>
|   |   |           |     `-DeclRefExpr 0x1815e304268 <col:71> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |           `-IntegerLiteral 0x1815e3042d8 <col:74> 'int' 2
|   |   |-IfStmt 0x1815e304550 <line:1640:9, line:1641:13>
|   |   | |-BinaryOperator 0x1815e304528 <line:1640:13, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1815e304510 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1815e3044c8 <col:13> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | | `-IntegerLiteral 0x1815e3044e8 <col:18> 'int' 8
|   |   | `-BreakStmt 0x1815e304548 <line:1641:13>
|   |   |-CallExpr 0x1815e2f8fc0 <line:1642:9, line:1645:72> 'void'
|   |   | |-ImplicitCastExpr 0x1815e2f8fa8 <line:1642:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e304568 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1815e20cfe8 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e2f9010 <col:22, col:49> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e304748 <col:22, col:49> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e304730 <col:22, col:46> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e3046e8 <col:22, col:46> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e3046d0 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e304630 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e304618 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e3045c0 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e3045a8 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e304588 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1815e3045f0 <col:38> 'int' 0
|   |   | |   |   `-BinaryOperator 0x1815e3046b0 <col:41, col:45> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x1815e304650 <col:41> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x1815e304698 <col:45> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x1815e304678 <col:45> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1815e304708 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e2f9028 <line:1643:22, col:49> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e304928 <col:22, col:49> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e304910 <col:22, col:46> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e3048c8 <col:22, col:46> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e3048b0 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e304810 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e3047f8 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e3047a0 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e304788 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e304768 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1815e3047d0 <col:38> 'int' 0
|   |   | |   |   `-BinaryOperator 0x1815e304890 <col:41, col:45> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x1815e304830 <col:41> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x1815e304878 <col:45> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x1815e304858 <col:45> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1815e3048e8 <col:48> 'int' 1
|   |   | |-ImplicitCastExpr 0x1815e2f9040 <line:1644:22, col:49> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e304b08 <col:22, col:49> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e304af0 <col:22, col:46> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e304aa8 <col:22, col:46> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e304a90 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e3049f0 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e3049d8 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e304980 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e304968 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e304948 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x1815e3049b0 <col:38> 'int' 0
|   |   | |   |   `-BinaryOperator 0x1815e304a70 <col:41, col:45> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x1815e304a10 <col:41> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x1815e304a58 <col:45> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x1815e304a38 <col:45> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   `-IntegerLiteral 0x1815e304ac8 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x1815e2f9070 <col:52, col:75> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e2f9058 <col:52, col:75> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e304ca0 <col:52, col:75> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e304c88 <col:52, col:72> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e304c40 <col:52, col:72> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e304c10 <col:52, col:69> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e304bd0 <col:52, col:69> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e304bb8 <col:52, col:57> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e304b60 <col:52, col:57> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e304b48 <col:52> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e304b28 <col:52> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1815e304b90 <col:68> 'int' 1
|   |   | |     |   `-ImplicitCastExpr 0x1815e304c28 <col:71> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1815e304bf0 <col:71> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1815e304c60 <col:74> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e2f90a0 <line:1645:22, col:45> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e2f9088 <col:22, col:45> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e304e38 <col:22, col:45> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e304e20 <col:22, col:42> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e304dd8 <col:22, col:42> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e304da8 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e304d68 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e304d50 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e304cf8 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e304ce0 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e304cc0 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x1815e304d28 <col:38> 'int' 1
|   |   | |     |   `-ImplicitCastExpr 0x1815e304dc0 <col:41> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1815e304d88 <col:41> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1815e304df8 <col:44> 'int' 1
|   |   | `-ImplicitCastExpr 0x1815e2f90d0 <col:48, col:71> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e2f90b8 <col:48, col:71> 'limb *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x1815e2f8f88 <col:48, col:71> 'felem':'limb [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x1815e2f8f70 <col:48, col:68> 'felem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1815e304f70 <col:48, col:68> 'felem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1815e304f40 <col:48, col:65> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x1815e304f00 <col:48, col:65> 'felem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x1815e304ee8 <col:48, col:53> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x1815e304e90 <col:48, col:53> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |       |   |   |   `-ImplicitCastExpr 0x1815e304e78 <col:48> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x1815e304e58 <col:48> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |       |   |   `-IntegerLiteral 0x1815e304ec0 <col:64> 'int' 1
|   |   |       |   `-ImplicitCastExpr 0x1815e304f58 <col:67> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1815e304f20 <col:67> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |       `-IntegerLiteral 0x1815e304f90 <col:70> 'int' 2
|   |   `-ForStmt 0x1815e2f9ec0 <line:1646:9, line:1653:9>
|   |     |-BinaryOperator 0x1815e2f9130 <line:1646:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x1815e2f90e8 <col:14> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |     | `-IntegerLiteral 0x1815e2f9108 <col:18> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x1815e2f91b0 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x1815e2f9198 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1815e2f9150 <col:21> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |     | `-IntegerLiteral 0x1815e2f9170 <col:25> 'int' 27
|   |     |-UnaryOperator 0x1815e2f91f0 <col:29, col:31> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x1815e2f91d0 <col:31> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |     `-CompoundStmt 0x1815e2f9ea8 <col:34, line:1653:9>
|   |       `-CallExpr 0x1815e2f9d80 <line:1647:13, line:1652:54> 'void'
|   |         |-ImplicitCastExpr 0x1815e2f9d68 <line:1647:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x1815e2f9208 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x1815e20cfe8 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |         |-ImplicitCastExpr 0x1815e2f9dd0 <col:26, col:53> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1815e2f93e8 <col:26, col:53> 'felem':'limb [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1815e2f93d0 <col:26, col:50> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1815e2f9388 <col:26, col:50> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1815e2f9370 <col:26, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1815e2f92d0 <col:26, col:43> 'felem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1815e2f92b8 <col:26, col:31> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1815e2f9260 <col:26, col:31> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |   |   |   |   `-ImplicitCastExpr 0x1815e2f9248 <col:26> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1815e2f9228 <col:26> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x1815e2f9290 <col:42> 'int' 0
|   |         |   |   `-BinaryOperator 0x1815e2f9350 <col:45, col:49> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1815e2f92f0 <col:45> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1815e2f9338 <col:49> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1815e2f9318 <col:49> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |   `-IntegerLiteral 0x1815e2f93a8 <col:52> 'int' 0
|   |         |-ImplicitCastExpr 0x1815e2f9de8 <line:1648:26, col:53> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1815e2f95c8 <col:26, col:53> 'felem':'limb [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1815e2f95b0 <col:26, col:50> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1815e2f9568 <col:26, col:50> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1815e2f9550 <col:26, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1815e2f94b0 <col:26, col:43> 'felem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1815e2f9498 <col:26, col:31> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1815e2f9440 <col:26, col:31> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |   |   |   |   `-ImplicitCastExpr 0x1815e2f9428 <col:26> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1815e2f9408 <col:26> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x1815e2f9470 <col:42> 'int' 0
|   |         |   |   `-BinaryOperator 0x1815e2f9530 <col:45, col:49> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1815e2f94d0 <col:45> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1815e2f9518 <col:49> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1815e2f94f8 <col:49> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |   `-IntegerLiteral 0x1815e2f9588 <col:52> 'int' 1
|   |         |-ImplicitCastExpr 0x1815e2f9e00 <line:1649:26, col:53> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1815e2f97a8 <col:26, col:53> 'felem':'limb [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1815e2f9790 <col:26, col:50> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1815e2f9748 <col:26, col:50> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1815e2f9730 <col:26, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1815e2f9690 <col:26, col:43> 'felem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1815e2f9678 <col:26, col:31> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1815e2f9620 <col:26, col:31> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |   |   |   |   `-ImplicitCastExpr 0x1815e2f9608 <col:26> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1815e2f95e8 <col:26> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x1815e2f9650 <col:42> 'int' 0
|   |         |   |   `-BinaryOperator 0x1815e2f9710 <col:45, col:49> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x1815e2f96b0 <col:45> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x1815e2f96f8 <col:49> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x1815e2f96d8 <col:49> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |   `-IntegerLiteral 0x1815e2f9768 <col:52> 'int' 2
|   |         |-ImplicitCastExpr 0x1815e2f9e30 <line:1650:26, col:53> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1815e2f9e18 <col:26, col:53> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1815e2f9988 <col:26, col:53> 'felem':'limb [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1815e2f9970 <col:26, col:50> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1815e2f9928 <col:26, col:50> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1815e2f9910 <col:26, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1815e2f9870 <col:26, col:43> 'felem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1815e2f9858 <col:26, col:31> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1815e2f9800 <col:26, col:31> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |     |   |   |   `-ImplicitCastExpr 0x1815e2f97e8 <col:26> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1815e2f97c8 <col:26> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |     |   |   `-IntegerLiteral 0x1815e2f9830 <col:42> 'int' 0
|   |         |     |   `-BinaryOperator 0x1815e2f98f0 <col:45, col:49> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x1815e2f9890 <col:45> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x1815e2f98d8 <col:49> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x1815e2f98b8 <col:49> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |     `-IntegerLiteral 0x1815e2f9948 <col:52> 'int' 0
|   |         |-ImplicitCastExpr 0x1815e2f9e60 <line:1651:26, col:53> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1815e2f9e48 <col:26, col:53> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1815e2f9b68 <col:26, col:53> 'felem':'limb [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1815e2f9b50 <col:26, col:50> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1815e2f9b08 <col:26, col:50> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1815e2f9af0 <col:26, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1815e2f9a50 <col:26, col:43> 'felem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1815e2f9a38 <col:26, col:31> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1815e2f99e0 <col:26, col:31> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |     |   |   |   `-ImplicitCastExpr 0x1815e2f99c8 <col:26> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1815e2f99a8 <col:26> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |     |   |   `-IntegerLiteral 0x1815e2f9a10 <col:42> 'int' 0
|   |         |     |   `-BinaryOperator 0x1815e2f9ad0 <col:45, col:49> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x1815e2f9a70 <col:45> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x1815e2f9ab8 <col:49> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x1815e2f9a98 <col:49> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |     `-IntegerLiteral 0x1815e2f9b28 <col:52> 'int' 1
|   |         `-ImplicitCastExpr 0x1815e2f9e90 <line:1652:26, col:53> 'const limb *':'const limb *' <NoOp>
|   |           `-ImplicitCastExpr 0x1815e2f9e78 <col:26, col:53> 'limb *' <ArrayToPointerDecay>
|   |             `-ArraySubscriptExpr 0x1815e2f9d48 <col:26, col:53> 'felem':'limb [4]' lvalue
|   |               |-ImplicitCastExpr 0x1815e2f9d30 <col:26, col:50> 'felem *' <ArrayToPointerDecay>
|   |               | `-ArraySubscriptExpr 0x1815e2f9ce8 <col:26, col:50> 'felem [3]' lvalue
|   |               |   |-ImplicitCastExpr 0x1815e2f9cd0 <col:26, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   |               |   | `-ArraySubscriptExpr 0x1815e2f9c30 <col:26, col:43> 'felem [16][3]' lvalue
|   |               |   |   |-ImplicitCastExpr 0x1815e2f9c18 <col:26, col:31> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |               |   |   | `-MemberExpr 0x1815e2f9bc0 <col:26, col:31> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |               |   |   |   `-ImplicitCastExpr 0x1815e2f9ba8 <col:26> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |               |   |   |     `-DeclRefExpr 0x1815e2f9b88 <col:26> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |               |   |   `-IntegerLiteral 0x1815e2f9bf0 <col:42> 'int' 0
|   |               |   `-BinaryOperator 0x1815e2f9cb0 <col:45, col:49> 'int' '*'
|   |               |     |-IntegerLiteral 0x1815e2f9c50 <col:45> 'int' 2
|   |               |     `-ImplicitCastExpr 0x1815e2f9c98 <col:49> 'int' <LValueToRValue>
|   |               |       `-DeclRefExpr 0x1815e2f9c78 <col:49> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |               `-IntegerLiteral 0x1815e2f9d08 <col:52> 'int' 2
|   |-ForStmt 0x1815e309c30 <line:1655:5, line:1696:5>
|   | |-BinaryOperator 0x1815e2f9fb0 <line:1655:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x1815e2f9f68 <col:10> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   | | `-IntegerLiteral 0x1815e2f9f88 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1815e2fa030 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1815e2fa018 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1815e2f9fd0 <col:17> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   | | `-IntegerLiteral 0x1815e2f9ff0 <col:21> 'int' 2
|   | |-UnaryOperator 0x1815e2fa070 <col:24, col:25> 'int' postfix '++'
|   | | `-DeclRefExpr 0x1815e2fa050 <col:24> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   | `-CompoundStmt 0x1815e309bf0 <col:29, line:1696:5>
|   |   |-CallExpr 0x1815e2fa3b0 <line:1657:9, col:71> 'void *'
|   |   | |-ImplicitCastExpr 0x1815e2fa398 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e2fa088 <col:9> 'void *(void *, int, unsigned long long)' Function 0x1815e0cec90 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1815e2fa400 <col:16, col:36> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1815e2fa3e8 <col:16, col:36> 'felem *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e2fa1c0 <col:16, col:36> 'felem [3]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e2fa1a8 <col:16, col:33> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e2fa160 <col:16, col:33> 'felem [16][3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e2fa130 <col:16, col:21> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x1815e2fa0e0 <col:16, col:21> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e2fa0c8 <col:16> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e2fa0a8 <col:16> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x1815e2fa148 <col:32> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x1815e2fa110 <col:32> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     `-IntegerLiteral 0x1815e2fa180 <col:35> 'int' 0
|   |   | |-IntegerLiteral 0x1815e2fa1e0 <col:39> 'int' 0
|   |   | `-UnaryExprOrTypeTraitExpr 0x1815e2fa360 <col:42, col:70> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x1815e2fa340 <col:48, col:70> 'felem [3]' lvalue
|   |   |     `-ArraySubscriptExpr 0x1815e2fa320 <col:49, col:69> 'felem [3]' lvalue
|   |   |       |-ImplicitCastExpr 0x1815e2fa308 <col:49, col:66> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1815e2fa2c0 <col:49, col:66> 'felem [16][3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1815e2fa290 <col:49, col:54> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   | `-MemberExpr 0x1815e2fa240 <col:49, col:54> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58 non_odr_use_unevaluated
|   |   |       |   |   `-ImplicitCastExpr 0x1815e2fa228 <col:49> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x1815e2fa208 <col:49> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *' non_odr_use_unevaluated
|   |   |       |   `-ImplicitCastExpr 0x1815e2fa2a8 <col:65> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x1815e2fa270 <col:65> 'int' lvalue Var 0x1815e307578 'i' 'int' non_odr_use_unevaluated
|   |   |       `-IntegerLiteral 0x1815e2fa2e0 <col:68> 'int' 0
|   |   |-CallExpr 0x1815e3173c8 <line:1660:9, line:1664:43> 'void'
|   |   | |-ImplicitCastExpr 0x1815e3173b0 <line:1660:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e2fa418 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x1815e20dcb8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e317438 <col:19, col:42> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e2fa5b0 <col:19, col:42> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e2fa598 <col:19, col:39> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e2fa550 <col:19, col:39> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e2fa538 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e2fa4f0 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e2fa4c0 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e2fa470 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e2fa458 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e2fa438 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e2fa4d8 <col:35> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e2fa4a0 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e2fa510 <col:38> 'int' 6
|   |   | |   `-IntegerLiteral 0x1815e2fa570 <col:41> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e317450 <col:45, col:68> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e2fa748 <col:45, col:68> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e2fa730 <col:45, col:65> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e2fa6e8 <col:45, col:65> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e2fa6d0 <col:45, col:62> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e2fa688 <col:45, col:62> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e2fa658 <col:45, col:50> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e2fa608 <col:45, col:50> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e2fa5f0 <col:45> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e2fa5d0 <col:45> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e2fa670 <col:61> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e2fa638 <col:61> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e2fa6a8 <col:64> 'int' 6
|   |   | |   `-IntegerLiteral 0x1815e2fa708 <col:67> 'int' 1
|   |   | |-ImplicitCastExpr 0x1815e317468 <line:1661:19, col:42> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e2fa8e0 <col:19, col:42> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e2fa8c8 <col:19, col:39> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e2fa880 <col:19, col:39> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e2fa868 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e2fa820 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e2fa7f0 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e2fa7a0 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e2fa788 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e2fa768 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e2fa808 <col:35> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e2fa7d0 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e2fa840 <col:38> 'int' 6
|   |   | |   `-IntegerLiteral 0x1815e2fa8a0 <col:41> 'int' 2
|   |   | |-ImplicitCastExpr 0x1815e317498 <col:45, col:68> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e317480 <col:45, col:68> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e2faa78 <col:45, col:68> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e2faa60 <col:45, col:65> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e2faa18 <col:45, col:65> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e2faa00 <col:45, col:62> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e2fa9b8 <col:45, col:62> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e2fa988 <col:45, col:50> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e2fa938 <col:45, col:50> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e2fa920 <col:45> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e2fa900 <col:45> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e2fa9a0 <col:61> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e2fa968 <col:61> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e2fa9d8 <col:64> 'int' 4
|   |   | |     `-IntegerLiteral 0x1815e2faa38 <col:67> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e3174c8 <line:1662:19, col:42> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e3174b0 <col:19, col:42> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e2fac10 <col:19, col:42> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e2fabf8 <col:19, col:39> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e2fabb0 <col:19, col:39> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e2fab98 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e2fab50 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e2fab20 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e2faad0 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e2faab8 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e2faa98 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e2fab38 <col:35> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e2fab00 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e2fab70 <col:38> 'int' 4
|   |   | |     `-IntegerLiteral 0x1815e2fabd0 <col:41> 'int' 1
|   |   | |-ImplicitCastExpr 0x1815e3174f8 <col:45, col:68> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e3174e0 <col:45, col:68> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e2fada8 <col:45, col:68> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e2fad90 <col:45, col:65> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e2fad48 <col:45, col:65> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e2fad30 <col:45, col:62> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e2face8 <col:45, col:62> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e2facb8 <col:45, col:50> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e2fac68 <col:45, col:50> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e2fac50 <col:45> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e2fac30 <col:45> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e2facd0 <col:61> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e2fac98 <col:61> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e2fad08 <col:64> 'int' 4
|   |   | |     `-IntegerLiteral 0x1815e2fad68 <col:67> 'int' 2
|   |   | |-IntegerLiteral 0x1815e2fadc8 <line:1663:19> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e317528 <col:22, col:45> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e317510 <col:22, col:45> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e317060 <col:22, col:45> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e2faf50 <col:22, col:42> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e2faf08 <col:22, col:42> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e2faef0 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e2faea8 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e2fae78 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e2fae28 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e2fae10 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e2fadf0 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e2fae90 <col:38> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e2fae58 <col:38> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e2faec8 <col:41> 'int' 2
|   |   | |     `-IntegerLiteral 0x1815e2faf28 <col:44> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e317558 <col:48, col:71> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e317540 <col:48, col:71> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e3171f8 <col:48, col:71> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e3171e0 <col:48, col:68> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e317198 <col:48, col:68> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e317180 <col:48, col:65> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e317138 <col:48, col:65> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e317108 <col:48, col:53> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e3170b8 <col:48, col:53> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e3170a0 <col:48> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e317080 <col:48> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e317120 <col:64> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e3170e8 <col:64> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e317158 <col:67> 'int' 2
|   |   | |     `-IntegerLiteral 0x1815e3171b8 <col:70> 'int' 1
|   |   | `-ImplicitCastExpr 0x1815e317588 <line:1664:19, col:42> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e317570 <col:19, col:42> 'limb *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x1815e317390 <col:19, col:42> 'felem':'limb [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x1815e317378 <col:19, col:39> 'felem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1815e317330 <col:19, col:39> 'felem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1815e317318 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x1815e3172d0 <col:19, col:36> 'felem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x1815e3172a0 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x1815e317250 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |       |   |   |   `-ImplicitCastExpr 0x1815e317238 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x1815e317218 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |       |   |   `-ImplicitCastExpr 0x1815e3172b8 <col:35> 'int' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x1815e317280 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |       |   `-IntegerLiteral 0x1815e3172f0 <col:38> 'int' 2
|   |   |       `-IntegerLiteral 0x1815e317350 <col:41> 'int' 2
|   |   |-CallExpr 0x1815e318458 <line:1666:9, line:1670:43> 'void'
|   |   | |-ImplicitCastExpr 0x1815e318440 <line:1666:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e3175a0 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x1815e20dcb8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e3184c8 <col:19, col:43> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e317738 <col:19, col:43> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e317720 <col:19, col:40> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e3176d8 <col:19, col:40> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e3176c0 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e317678 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e317648 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e3175f8 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e3175e0 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e3175c0 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e317660 <col:35> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e317628 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e317698 <col:38> 'int' 10
|   |   | |   `-IntegerLiteral 0x1815e3176f8 <col:42> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e3184e0 <col:46, col:70> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e3178d0 <col:46, col:70> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e3178b8 <col:46, col:67> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e317870 <col:46, col:67> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e317858 <col:46, col:63> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e317810 <col:46, col:63> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e3177e0 <col:46, col:51> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e317790 <col:46, col:51> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e317778 <col:46> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e317758 <col:46> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e3177f8 <col:62> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e3177c0 <col:62> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e317830 <col:65> 'int' 10
|   |   | |   `-IntegerLiteral 0x1815e317890 <col:69> 'int' 1
|   |   | |-ImplicitCastExpr 0x1815e3184f8 <line:1667:19, col:43> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e317a68 <col:19, col:43> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e317a50 <col:19, col:40> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e317a08 <col:19, col:40> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e3179f0 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e3179a8 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e317978 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e317928 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e317910 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e3178f0 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e317990 <col:35> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e317958 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e3179c8 <col:38> 'int' 10
|   |   | |   `-IntegerLiteral 0x1815e317a28 <col:42> 'int' 2
|   |   | |-ImplicitCastExpr 0x1815e318528 <col:46, col:69> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e318510 <col:46, col:69> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e317c00 <col:46, col:69> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e317be8 <col:46, col:66> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e317ba0 <col:46, col:66> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e317b88 <col:46, col:63> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e317b40 <col:46, col:63> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e317b10 <col:46, col:51> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e317ac0 <col:46, col:51> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e317aa8 <col:46> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e317a88 <col:46> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e317b28 <col:62> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e317af0 <col:62> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e317b60 <col:65> 'int' 8
|   |   | |     `-IntegerLiteral 0x1815e317bc0 <col:68> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e318558 <line:1668:19, col:42> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e318540 <col:19, col:42> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e317d98 <col:19, col:42> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e317d80 <col:19, col:39> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e317d38 <col:19, col:39> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e317d20 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e317cd8 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e317ca8 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e317c58 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e317c40 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e317c20 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e317cc0 <col:35> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e317c88 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e317cf8 <col:38> 'int' 8
|   |   | |     `-IntegerLiteral 0x1815e317d58 <col:41> 'int' 1
|   |   | |-ImplicitCastExpr 0x1815e318588 <col:45, col:68> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e318570 <col:45, col:68> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e317f30 <col:45, col:68> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e317f18 <col:45, col:65> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e317ed0 <col:45, col:65> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e317eb8 <col:45, col:62> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e317e70 <col:45, col:62> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e317e40 <col:45, col:50> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e317df0 <col:45, col:50> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e317dd8 <col:45> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e317db8 <col:45> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e317e58 <col:61> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e317e20 <col:61> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e317e90 <col:64> 'int' 8
|   |   | |     `-IntegerLiteral 0x1815e317ef0 <col:67> 'int' 2
|   |   | |-IntegerLiteral 0x1815e317f50 <line:1669:19> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e3185b8 <col:22, col:45> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e3185a0 <col:22, col:45> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e3180f0 <col:22, col:45> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e3180d8 <col:22, col:42> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e318090 <col:22, col:42> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e318078 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e318030 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e318000 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e317fb0 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e317f98 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e317f78 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e318018 <col:38> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e317fe0 <col:38> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e318050 <col:41> 'int' 2
|   |   | |     `-IntegerLiteral 0x1815e3180b0 <col:44> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e3185e8 <col:48, col:71> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e3185d0 <col:48, col:71> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e318288 <col:48, col:71> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e318270 <col:48, col:68> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e318228 <col:48, col:68> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e318210 <col:48, col:65> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e3181c8 <col:48, col:65> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e318198 <col:48, col:53> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e318148 <col:48, col:53> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e318130 <col:48> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e318110 <col:48> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e3181b0 <col:64> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e318178 <col:64> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e3181e8 <col:67> 'int' 2
|   |   | |     `-IntegerLiteral 0x1815e318248 <col:70> 'int' 1
|   |   | `-ImplicitCastExpr 0x1815e318618 <line:1670:19, col:42> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e318600 <col:19, col:42> 'limb *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x1815e318420 <col:19, col:42> 'felem':'limb [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x1815e318408 <col:19, col:39> 'felem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1815e3183c0 <col:19, col:39> 'felem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1815e3183a8 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x1815e318360 <col:19, col:36> 'felem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x1815e318330 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x1815e3182e0 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |       |   |   |   `-ImplicitCastExpr 0x1815e3182c8 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x1815e3182a8 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |       |   |   `-ImplicitCastExpr 0x1815e318348 <col:35> 'int' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x1815e318310 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |       |   `-IntegerLiteral 0x1815e318380 <col:38> 'int' 2
|   |   |       `-IntegerLiteral 0x1815e3183e0 <col:41> 'int' 2
|   |   |-CallExpr 0x1815e3134e8 <line:1672:9, line:1676:43> 'void'
|   |   | |-ImplicitCastExpr 0x1815e3134d0 <line:1672:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e318630 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x1815e20dcb8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e313558 <col:19, col:43> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e3187c8 <col:19, col:43> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e3187b0 <col:19, col:40> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e318768 <col:19, col:40> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e318750 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e318708 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e3186d8 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e318688 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e318670 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e318650 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e3186f0 <col:35> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e3186b8 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e318728 <col:38> 'int' 12
|   |   | |   `-IntegerLiteral 0x1815e318788 <col:42> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e313570 <col:46, col:70> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e318960 <col:46, col:70> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e318948 <col:46, col:67> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e318900 <col:46, col:67> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e3188e8 <col:46, col:63> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e3188a0 <col:46, col:63> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e318870 <col:46, col:51> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e318820 <col:46, col:51> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e318808 <col:46> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e3187e8 <col:46> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e318888 <col:62> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e318850 <col:62> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e3188c0 <col:65> 'int' 12
|   |   | |   `-IntegerLiteral 0x1815e318920 <col:69> 'int' 1
|   |   | |-ImplicitCastExpr 0x1815e313588 <line:1673:19, col:43> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e318af8 <col:19, col:43> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e318ae0 <col:19, col:40> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e318a98 <col:19, col:40> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e318a80 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e318a38 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e318a08 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e3189b8 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e3189a0 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e318980 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e318a20 <col:35> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e3189e8 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e318a58 <col:38> 'int' 12
|   |   | |   `-IntegerLiteral 0x1815e318ab8 <col:42> 'int' 2
|   |   | |-ImplicitCastExpr 0x1815e3135b8 <col:46, col:69> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e3135a0 <col:46, col:69> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e318c90 <col:46, col:69> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e318c78 <col:46, col:66> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e318c30 <col:46, col:66> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e318c18 <col:46, col:63> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e318bd0 <col:46, col:63> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e318ba0 <col:46, col:51> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e318b50 <col:46, col:51> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e318b38 <col:46> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e318b18 <col:46> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e318bb8 <col:62> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e318b80 <col:62> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e318bf0 <col:65> 'int' 8
|   |   | |     `-IntegerLiteral 0x1815e318c50 <col:68> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e3135e8 <line:1674:19, col:42> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e3135d0 <col:19, col:42> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e318e28 <col:19, col:42> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e318e10 <col:19, col:39> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e318dc8 <col:19, col:39> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e318db0 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e318d68 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e318d38 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e318ce8 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e318cd0 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e318cb0 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e318d50 <col:35> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e318d18 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e318d88 <col:38> 'int' 8
|   |   | |     `-IntegerLiteral 0x1815e318de8 <col:41> 'int' 1
|   |   | |-ImplicitCastExpr 0x1815e313618 <col:45, col:68> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e313600 <col:45, col:68> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e318fc0 <col:45, col:68> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e318fa8 <col:45, col:65> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e318f60 <col:45, col:65> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e318f48 <col:45, col:62> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e318f00 <col:45, col:62> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e318ed0 <col:45, col:50> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e318e80 <col:45, col:50> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e318e68 <col:45> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e318e48 <col:45> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e318ee8 <col:61> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e318eb0 <col:61> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e318f20 <col:64> 'int' 8
|   |   | |     `-IntegerLiteral 0x1815e318f80 <col:67> 'int' 2
|   |   | |-IntegerLiteral 0x1815e318fe0 <line:1675:19> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e313648 <col:22, col:45> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e313630 <col:22, col:45> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e313180 <col:22, col:45> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e313168 <col:22, col:42> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e313120 <col:22, col:42> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e313108 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e3130c0 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e313090 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e313040 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e319028 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e319008 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e3130a8 <col:38> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e313070 <col:38> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e3130e0 <col:41> 'int' 4
|   |   | |     `-IntegerLiteral 0x1815e313140 <col:44> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e313678 <col:48, col:71> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e313660 <col:48, col:71> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e313318 <col:48, col:71> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e313300 <col:48, col:68> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e3132b8 <col:48, col:68> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e3132a0 <col:48, col:65> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e313258 <col:48, col:65> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e313228 <col:48, col:53> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e3131d8 <col:48, col:53> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e3131c0 <col:48> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e3131a0 <col:48> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e313240 <col:64> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e313208 <col:64> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e313278 <col:67> 'int' 4
|   |   | |     `-IntegerLiteral 0x1815e3132d8 <col:70> 'int' 1
|   |   | `-ImplicitCastExpr 0x1815e3136a8 <line:1676:19, col:42> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e313690 <col:19, col:42> 'limb *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x1815e3134b0 <col:19, col:42> 'felem':'limb [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x1815e313498 <col:19, col:39> 'felem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1815e313450 <col:19, col:39> 'felem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1815e313438 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x1815e3133f0 <col:19, col:36> 'felem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x1815e3133c0 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x1815e313370 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |       |   |   |   `-ImplicitCastExpr 0x1815e313358 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x1815e313338 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |       |   |   `-ImplicitCastExpr 0x1815e3133d8 <col:35> 'int' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x1815e3133a0 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |       |   `-IntegerLiteral 0x1815e313410 <col:38> 'int' 4
|   |   |       `-IntegerLiteral 0x1815e313470 <col:41> 'int' 2
|   |   |-CallExpr 0x1815e314578 <line:1680:9, line:1684:43> 'void'
|   |   | |-ImplicitCastExpr 0x1815e314560 <line:1680:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1815e3136c0 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x1815e20dcb8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x1815e3145e8 <col:19, col:43> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e313858 <col:19, col:43> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e313840 <col:19, col:40> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e3137f8 <col:19, col:40> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e3137e0 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e313798 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e313768 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e313718 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e313700 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e3136e0 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e313780 <col:35> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e313748 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e3137b8 <col:38> 'int' 14
|   |   | |   `-IntegerLiteral 0x1815e313818 <col:42> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e314600 <col:46, col:70> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e3139f0 <col:46, col:70> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e3139d8 <col:46, col:67> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e313990 <col:46, col:67> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e313978 <col:46, col:63> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e313930 <col:46, col:63> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e313900 <col:46, col:51> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e3138b0 <col:46, col:51> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e313898 <col:46> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e313878 <col:46> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e313918 <col:62> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e3138e0 <col:62> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e313950 <col:65> 'int' 14
|   |   | |   `-IntegerLiteral 0x1815e3139b0 <col:69> 'int' 1
|   |   | |-ImplicitCastExpr 0x1815e314618 <line:1681:19, col:43> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x1815e313b88 <col:19, col:43> 'felem':'limb [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x1815e313b70 <col:19, col:40> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x1815e313b28 <col:19, col:40> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1815e313b10 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x1815e313ac8 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x1815e313a98 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x1815e313a48 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |   |   |   |   `-ImplicitCastExpr 0x1815e313a30 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x1815e313a10 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x1815e313ab0 <col:35> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x1815e313a78 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x1815e313ae8 <col:38> 'int' 14
|   |   | |   `-IntegerLiteral 0x1815e313b48 <col:42> 'int' 2
|   |   | |-ImplicitCastExpr 0x1815e314648 <col:46, col:70> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e314630 <col:46, col:70> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e313d20 <col:46, col:70> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e313d08 <col:46, col:67> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e313cc0 <col:46, col:67> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e313ca8 <col:46, col:63> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e313c60 <col:46, col:63> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e313c30 <col:46, col:51> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e313be0 <col:46, col:51> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e313bc8 <col:46> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e313ba8 <col:46> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e313c48 <col:62> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e313c10 <col:62> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e313c80 <col:65> 'int' 12
|   |   | |     `-IntegerLiteral 0x1815e313ce0 <col:69> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e314678 <line:1682:19, col:43> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e314660 <col:19, col:43> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e313eb8 <col:19, col:43> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e313ea0 <col:19, col:40> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e313e58 <col:19, col:40> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e313e40 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e313df8 <col:19, col:36> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e313dc8 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e313d78 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e313d60 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e313d40 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e313de0 <col:35> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e313da8 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e313e18 <col:38> 'int' 12
|   |   | |     `-IntegerLiteral 0x1815e313e78 <col:42> 'int' 1
|   |   | |-ImplicitCastExpr 0x1815e3146a8 <col:46, col:70> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e314690 <col:46, col:70> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e314050 <col:46, col:70> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e314038 <col:46, col:67> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e313ff0 <col:46, col:67> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e313fd8 <col:46, col:63> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e313f90 <col:46, col:63> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e313f60 <col:46, col:51> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e313f10 <col:46, col:51> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e313ef8 <col:46> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e313ed8 <col:46> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e313f78 <col:62> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e313f40 <col:62> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e313fb0 <col:65> 'int' 12
|   |   | |     `-IntegerLiteral 0x1815e314010 <col:69> 'int' 2
|   |   | |-IntegerLiteral 0x1815e314070 <line:1683:19> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e3146d8 <col:22, col:45> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e3146c0 <col:22, col:45> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e314210 <col:22, col:45> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e3141f8 <col:22, col:42> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e3141b0 <col:22, col:42> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e314198 <col:22, col:39> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e314150 <col:22, col:39> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e314120 <col:22, col:27> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e3140d0 <col:22, col:27> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e3140b8 <col:22> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e314098 <col:22> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e314138 <col:38> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e314100 <col:38> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e314170 <col:41> 'int' 2
|   |   | |     `-IntegerLiteral 0x1815e3141d0 <col:44> 'int' 0
|   |   | |-ImplicitCastExpr 0x1815e314708 <col:48, col:71> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x1815e3146f0 <col:48, col:71> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x1815e3143a8 <col:48, col:71> 'felem':'limb [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x1815e314390 <col:48, col:68> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x1815e314348 <col:48, col:68> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x1815e314330 <col:48, col:65> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x1815e3142e8 <col:48, col:65> 'felem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x1815e3142b8 <col:48, col:53> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x1815e314268 <col:48, col:53> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   | |     |   |   |   `-ImplicitCastExpr 0x1815e314250 <col:48> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x1815e314230 <col:48> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   | |     |   |   `-ImplicitCastExpr 0x1815e3142d0 <col:64> 'int' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x1815e314298 <col:64> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   | |     |   `-IntegerLiteral 0x1815e314308 <col:67> 'int' 2
|   |   | |     `-IntegerLiteral 0x1815e314368 <col:70> 'int' 1
|   |   | `-ImplicitCastExpr 0x1815e314738 <line:1684:19, col:42> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1815e314720 <col:19, col:42> 'limb *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x1815e314540 <col:19, col:42> 'felem':'limb [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x1815e314528 <col:19, col:39> 'felem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x1815e3144e0 <col:19, col:39> 'felem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x1815e3144c8 <col:19, col:36> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x1815e314480 <col:19, col:36> 'felem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x1815e314450 <col:19, col:24> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x1815e314400 <col:19, col:24> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |   |       |   |   |   `-ImplicitCastExpr 0x1815e3143e8 <col:19> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x1815e3143c8 <col:19> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |   |       |   |   `-ImplicitCastExpr 0x1815e314468 <col:35> 'int' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x1815e314430 <col:35> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |   |       |   `-IntegerLiteral 0x1815e3144a0 <col:38> 'int' 2
|   |   |       `-IntegerLiteral 0x1815e314500 <col:41> 'int' 2
|   |   `-ForStmt 0x1815e309bb8 <line:1685:9, line:1695:9>
|   |     |-BinaryOperator 0x1815e314798 <line:1685:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x1815e314750 <col:14> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |     | `-IntegerLiteral 0x1815e314770 <col:18> 'int' 1
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x1815e314818 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x1815e314800 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x1815e3147b8 <col:21> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |     | `-IntegerLiteral 0x1815e3147d8 <col:25> 'int' 8
|   |     |-UnaryOperator 0x1815e314858 <col:28, col:30> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x1815e314838 <col:30> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |     `-CompoundStmt 0x1815e309ba0 <col:33, line:1695:9>
|   |       `-CallExpr 0x1815e3099c8 <line:1687:13, line:1694:47> 'void'
|   |         |-ImplicitCastExpr 0x1815e3099b0 <line:1687:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x1815e314870 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x1815e20dcb8 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |         |-ImplicitCastExpr 0x1815e309a38 <col:23, col:54> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1815e314aa8 <col:23, col:54> 'felem':'limb [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1815e314a90 <col:23, col:51> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1815e314a48 <col:23, col:51> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1815e314a30 <col:23, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1815e314948 <col:23, col:40> 'felem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1815e314918 <col:23, col:28> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1815e3148c8 <col:23, col:28> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |   |   |   |   `-ImplicitCastExpr 0x1815e3148b0 <col:23> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1815e314890 <col:23> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1815e314930 <col:39> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1815e3148f8 <col:39> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1815e314a10 <col:42, col:50> 'int' '+'
|   |         |   |     |-BinaryOperator 0x1815e3149c8 <col:42, col:46> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x1815e314968 <col:42> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x1815e3149b0 <col:46> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x1815e314990 <col:46> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x1815e3149e8 <col:50> 'int' 1
|   |         |   `-IntegerLiteral 0x1815e314a68 <col:53> 'int' 0
|   |         |-ImplicitCastExpr 0x1815e309a50 <line:1688:23, col:54> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1815e314ce0 <col:23, col:54> 'felem':'limb [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1815e314cc8 <col:23, col:51> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1815e314c80 <col:23, col:51> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1815e314c68 <col:23, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1815e314b80 <col:23, col:40> 'felem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1815e314b50 <col:23, col:28> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1815e314b00 <col:23, col:28> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |   |   |   |   `-ImplicitCastExpr 0x1815e314ae8 <col:23> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1815e314ac8 <col:23> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1815e314b68 <col:39> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1815e314b30 <col:39> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1815e314c48 <col:42, col:50> 'int' '+'
|   |         |   |     |-BinaryOperator 0x1815e314c00 <col:42, col:46> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x1815e314ba0 <col:42> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x1815e314be8 <col:46> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x1815e314bc8 <col:46> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x1815e314c20 <col:50> 'int' 1
|   |         |   `-IntegerLiteral 0x1815e314ca0 <col:53> 'int' 1
|   |         |-ImplicitCastExpr 0x1815e309a68 <line:1689:23, col:54> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x1815e314f18 <col:23, col:54> 'felem':'limb [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x1815e314f00 <col:23, col:51> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x1815e314eb8 <col:23, col:51> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x1815e314ea0 <col:23, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x1815e314db8 <col:23, col:40> 'felem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x1815e314d88 <col:23, col:28> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x1815e314d38 <col:23, col:28> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |   |   |   |   `-ImplicitCastExpr 0x1815e314d20 <col:23> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x1815e314d00 <col:23> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x1815e314da0 <col:39> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x1815e314d68 <col:39> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |   |   `-BinaryOperator 0x1815e314e80 <col:42, col:50> 'int' '+'
|   |         |   |     |-BinaryOperator 0x1815e314e38 <col:42, col:46> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x1815e314dd8 <col:42> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x1815e314e20 <col:46> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x1815e314e00 <col:46> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x1815e314e58 <col:50> 'int' 1
|   |         |   `-IntegerLiteral 0x1815e314ed8 <col:53> 'int' 2
|   |         |-ImplicitCastExpr 0x1815e309a98 <line:1690:23, col:50> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1815e309a80 <col:23, col:50> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1815e3090c0 <col:23, col:50> 'felem':'limb [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1815e3090a8 <col:23, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1815e309060 <col:23, col:47> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1815e309048 <col:23, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1815e314ff0 <col:23, col:40> 'felem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1815e314fc0 <col:23, col:28> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1815e314f70 <col:23, col:28> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |     |   |   |   `-ImplicitCastExpr 0x1815e314f58 <col:23> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1815e314f38 <col:23> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |     |   |   `-ImplicitCastExpr 0x1815e314fd8 <col:39> 'int' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x1815e314fa0 <col:39> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |     |   `-BinaryOperator 0x1815e309028 <col:42, col:46> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x1815e315010 <col:42> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x1815e309010 <col:46> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x1815e308ff0 <col:46> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |         |     `-IntegerLiteral 0x1815e309080 <col:49> 'int' 0
|   |         |-ImplicitCastExpr 0x1815e309ac8 <line:1691:23, col:50> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1815e309ab0 <col:23, col:50> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1815e3092b0 <col:23, col:50> 'felem':'limb [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1815e309298 <col:23, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1815e309250 <col:23, col:47> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1815e309238 <col:23, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1815e309198 <col:23, col:40> 'felem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1815e309168 <col:23, col:28> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1815e309118 <col:23, col:28> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |     |   |   |   `-ImplicitCastExpr 0x1815e309100 <col:23> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1815e3090e0 <col:23> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |     |   |   `-ImplicitCastExpr 0x1815e309180 <col:39> 'int' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x1815e309148 <col:39> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |     |   `-BinaryOperator 0x1815e309218 <col:42, col:46> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x1815e3091b8 <col:42> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x1815e309200 <col:46> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x1815e3091e0 <col:46> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |         |     `-IntegerLiteral 0x1815e309270 <col:49> 'int' 1
|   |         |-ImplicitCastExpr 0x1815e309af8 <line:1692:23, col:50> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1815e309ae0 <col:23, col:50> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1815e3094a0 <col:23, col:50> 'felem':'limb [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1815e309488 <col:23, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1815e309440 <col:23, col:47> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1815e309428 <col:23, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1815e309388 <col:23, col:40> 'felem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1815e309358 <col:23, col:28> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1815e309308 <col:23, col:28> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |     |   |   |   `-ImplicitCastExpr 0x1815e3092f0 <col:23> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1815e3092d0 <col:23> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |     |   |   `-ImplicitCastExpr 0x1815e309370 <col:39> 'int' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x1815e309338 <col:39> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |     |   `-BinaryOperator 0x1815e309408 <col:42, col:46> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x1815e3093a8 <col:42> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x1815e3093f0 <col:46> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x1815e3093d0 <col:46> 'int' lvalue Var 0x1815e3075f8 'j' 'int'
|   |         |     `-IntegerLiteral 0x1815e309460 <col:49> 'int' 2
|   |         |-IntegerLiteral 0x1815e3094c0 <col:53> 'int' 0
|   |         |-ImplicitCastExpr 0x1815e309b28 <line:1693:23, col:46> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1815e309b10 <col:23, col:46> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1815e309660 <col:23, col:46> 'felem':'limb [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1815e309648 <col:23, col:43> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1815e309600 <col:23, col:43> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1815e3095e8 <col:23, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1815e3095a0 <col:23, col:40> 'felem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1815e309570 <col:23, col:28> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1815e309520 <col:23, col:28> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |     |   |   |   `-ImplicitCastExpr 0x1815e309508 <col:23> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1815e3094e8 <col:23> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |     |   |   `-ImplicitCastExpr 0x1815e309588 <col:39> 'int' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x1815e309550 <col:39> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |     |   `-IntegerLiteral 0x1815e3095c0 <col:42> 'int' 1
|   |         |     `-IntegerLiteral 0x1815e309620 <col:45> 'int' 0
|   |         |-ImplicitCastExpr 0x1815e309b58 <col:49, col:72> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x1815e309b40 <col:49, col:72> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x1815e3097f8 <col:49, col:72> 'felem':'limb [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x1815e3097e0 <col:49, col:69> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x1815e309798 <col:49, col:69> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x1815e309780 <col:49, col:66> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x1815e309738 <col:49, col:66> 'felem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x1815e309708 <col:49, col:54> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x1815e3096b8 <col:49, col:54> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |         |     |   |   |   `-ImplicitCastExpr 0x1815e3096a0 <col:49> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x1815e309680 <col:49> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |         |     |   |   `-ImplicitCastExpr 0x1815e309720 <col:65> 'int' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x1815e3096e8 <col:65> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |         |     |   `-IntegerLiteral 0x1815e309758 <col:68> 'int' 1
|   |         |     `-IntegerLiteral 0x1815e3097b8 <col:71> 'int' 1
|   |         `-ImplicitCastExpr 0x1815e309b88 <line:1694:23, col:46> 'const limb *':'const limb *' <NoOp>
|   |           `-ImplicitCastExpr 0x1815e309b70 <col:23, col:46> 'limb *' <ArrayToPointerDecay>
|   |             `-ArraySubscriptExpr 0x1815e309990 <col:23, col:46> 'felem':'limb [4]' lvalue
|   |               |-ImplicitCastExpr 0x1815e309978 <col:23, col:43> 'felem *' <ArrayToPointerDecay>
|   |               | `-ArraySubscriptExpr 0x1815e309930 <col:23, col:43> 'felem [3]' lvalue
|   |               |   |-ImplicitCastExpr 0x1815e309918 <col:23, col:40> 'felem (*)[3]' <ArrayToPointerDecay>
|   |               |   | `-ArraySubscriptExpr 0x1815e3098d0 <col:23, col:40> 'felem [16][3]' lvalue
|   |               |   |   |-ImplicitCastExpr 0x1815e3098a0 <col:23, col:28> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   |               |   |   | `-MemberExpr 0x1815e309850 <col:23, col:28> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   |               |   |   |   `-ImplicitCastExpr 0x1815e309838 <col:23> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |               |   |   |     `-DeclRefExpr 0x1815e309818 <col:23> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   |               |   |   `-ImplicitCastExpr 0x1815e3098b8 <col:39> 'int' <LValueToRValue>
|   |               |   |     `-DeclRefExpr 0x1815e309880 <col:39> 'int' lvalue Var 0x1815e307578 'i' 'int'
|   |               |   `-IntegerLiteral 0x1815e3098f0 <col:42> 'int' 1
|   |               `-IntegerLiteral 0x1815e309950 <col:45> 'int' 2
|   |-CallExpr 0x1815e309e60 <line:1697:5, col:64> 'void'
|   | |-ImplicitCastExpr 0x1815e309e48 <col:5> 'void (*)(size_t, felem (*)[3], felem *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e309c68 <col:5> 'void (size_t, felem (*)[3], felem *)' Function 0x1815e2f3b98 'make_points_affine' 'void (size_t, felem (*)[3], felem *)'
|   | |-ImplicitCastExpr 0x1815e309e98 <col:24> 'size_t':'unsigned long long' <IntegralCast>
|   | | `-IntegerLiteral 0x1815e309c88 <col:24> 'int' 31
|   | |-UnaryOperator 0x1815e309df8 <col:28, col:51> 'felem (*)[3]' prefix '&' cannot overflow
|   | | `-ParenExpr 0x1815e309dd8 <col:29, col:51> 'felem [3]' lvalue
|   | |   `-ArraySubscriptExpr 0x1815e309db8 <col:30, col:50> 'felem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x1815e309da0 <col:30, col:47> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x1815e309d58 <col:30, col:47> 'felem [16][3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x1815e309d40 <col:30, col:35> 'felem (*)[16][3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x1815e309ce8 <col:30, col:35> 'felem [2][16][3]' lvalue ->g_pre_comp 0x1815e10aa58
|   | |     |   |   `-ImplicitCastExpr 0x1815e309cd0 <col:30> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x1815e309cb0 <col:30> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x1815e309d18 <col:46> 'int' 0
|   | |     `-IntegerLiteral 0x1815e309d78 <col:49> 'int' 1
|   | `-ImplicitCastExpr 0x1815e309eb0 <col:54> 'felem *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x1815e309e10 <col:54> 'felem [32]' lvalue Var 0x1815e307878 'tmp_felems' 'felem [32]'
|   |-LabelStmt 0x1815e309f10 <line:1699:2, col:6> 'done'
|   | `-NullStmt 0x1815e309f08 <col:6>
|   |-BinaryOperator 0x1815e309fe8 <line:1701:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'NISTP224_PRE_COMP *' '='
|   | |-DeclRefExpr 0x1815e309f28 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1701:5> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   | `-ImplicitCastExpr 0x1815e309fd0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP224_PRE_COMP *' <NullToPointer>
|   |   `-ParenExpr 0x1815e309fb0 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x1815e309f88 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x1815e309f48 <col:26> 'int' 0
|   |-BinaryOperator 0x1815e30a068 <.//openssl//file_jk/before\crypto\ec\ecp_nistp224.c:1702:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x1815e30a008 <col:5> 'int' lvalue Var 0x1815e307388 'ret' 'int'
|   | `-IntegerLiteral 0x1815e30a040 <col:11> 'int' 1
|   |-LabelStmt 0x1815e30a0b0 <line:1703:2, col:5> 'err'
|   | `-NullStmt 0x1815e30a0a8 <col:5>
|   |-CallExpr 0x1815e30a1c0 <line:1707:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1815e30a1a8 <col:5> 'void (*)(NISTP224_PRE_COMP *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1815e30a108 <col:5> 'void (NISTP224_PRE_COMP *)' Function 0x1815e2fbd58 'EC_nistp224_pre_comp_free' 'void (NISTP224_PRE_COMP *)'
|   | `-ImplicitCastExpr 0x1815e30a1e8 <col:31> 'NISTP224_PRE_COMP *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1815e30a128 <col:31> 'NISTP224_PRE_COMP *' lvalue Var 0x1815e307440 'pre' 'NISTP224_PRE_COMP *'
|   `-ReturnStmt 0x1815e30a238 <line:1708:5, col:12>
|     `-ImplicitCastExpr 0x1815e30a220 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1815e30a200 <col:12> 'int' lvalue Var 0x1815e307388 'ret' 'int'
`-FunctionDecl 0x1815e30a3b0 <line:1711:1, line:1714:1> line:1711:5 invalid ec_GFp_nistp224_have_precompute_mult 'int (const int *)'
  |-ParmVarDecl 0x1815e30a318 <col:42, col:58> col:58 invalid group 'const int *'
  `-CompoundStmt 0x1815e30a518 <line:1712:1, line:1714:1>
